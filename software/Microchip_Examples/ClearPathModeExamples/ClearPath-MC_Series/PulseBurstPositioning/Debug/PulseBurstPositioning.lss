
PulseBurstPositioning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00021ad0  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00025ad0  00025ad0  00025ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  00025bcc  00025bcc  00025bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ab0  20000000  00025d54  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018f0  20000ab0  00026810  00030ab0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000ac3a7  00000000  00000000  00030ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd6a  00000000  00000000  000dcf50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f8  00000000  00000000  000eccba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000081f0  00000000  00000000  000ee4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f66a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001442e  00000000  00000000  0011821e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f1915  00000000  00000000  0012c64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000074d8  00000000  00000000  0021df64  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00024604  00000000  00000000  0022543c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 2d a0 00 00 d1 42 00 00 d1 42 00 00     ... -....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	c9 9e 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 9d 9d 00 00 ad 9d 00 00 bd 9d 00 00     .B..............
    407c:	cd 9d 00 00 dd 9d 00 00 ed 9d 00 00 fd 9d 00 00     ................
    408c:	0d 9e 00 00 1d 9e 00 00 2d 9e 00 00 3d 9e 00 00     ........-...=...
    409c:	4d 9e 00 00 5d 9e 00 00 69 9e 00 00 79 9e 00 00     M...]...i...y...
    40ac:	89 9e 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 31 9d 00 00 d1 42 00 00 3d 9d 00 00     .B..1....B..=...
    4104:	49 9d 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     I....B...B...B..
    4114:	d1 42 00 00 55 9d 00 00 d1 42 00 00 61 9d 00 00     .B..U....B..a...
    4124:	6d 9d 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     m....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 79 9d 00 00 d1 42 00 00 85 9d 00 00     .B..y....B......
    4174:	91 9d 00 00 00 00 00 00 00 00 00 00 ed 3b 01 00     .............;..
    4184:	f1 3b 01 00 f5 3b 01 00 f9 3b 01 00 25 9d 00 00     .;...;...;..%...
    4194:	1d 9f 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	99 9e 00 00 d1 42 00 00 d1 42 00 00 b1 9e 00 00     .....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ab0 	.word	0x20000ab0
    4280:	00000000 	.word	0x00000000
    4284:	00025acc 	.word	0x00025acc

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00025acc 	.word	0x00025acc
    42c4:	20000ab4 	.word	0x20000ab4
    42c8:	20000aac 	.word	0x20000aac
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    42d8:	f01b faf2 	bl	1f8c0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42dc:	b168      	cbz	r0, 42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x26>
            if (!SendChar(buffer[iChar])) {
    42de:	4e0d      	ldr	r6, [pc, #52]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    42e0:	1825      	adds	r5, r4, r0
    42e2:	e001      	b.n	42e8 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42e4:	42a5      	cmp	r5, r4
    42e6:	d008      	beq.n	42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x26>
            if (!SendChar(buffer[iChar])) {
    42e8:	f814 1b01 	ldrb.w	r1, [r4], #1
    42ec:	4630      	mov	r0, r6
    42ee:	f002 fa33 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    42f2:	2800      	cmp	r0, #0
    42f4:	d1f6      	bne.n	42e4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x10>
        return Send(nullTermStr) && SendLine();
    }
    42f6:	2000      	movs	r0, #0
    42f8:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    42fa:	210d      	movs	r1, #13
    42fc:	4805      	ldr	r0, [pc, #20]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    42fe:	f002 fa2b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4302:	2800      	cmp	r0, #0
    4304:	d0f7      	beq.n	42f6 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x22>
    4306:	210a      	movs	r1, #10
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    }
    430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    430e:	f002 ba23 	b.w	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4312:	bf00      	nop
    4314:	20001480 	.word	0x20001480

00004318 <_Z11PrintAlertsv>:
 *    requires "motor" to be defined as a ClearCore motor connector
 *
 * Returns: 
 *    none
 */
 void PrintAlerts(){
    4318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431a:	4c63      	ldr	r4, [pc, #396]	; (44a8 <_Z11PrintAlertsv+0x190>)
            if (!SendChar(buffer[iChar])) {
    431c:	4d63      	ldr	r5, [pc, #396]	; (44ac <_Z11PrintAlertsv+0x194>)
    431e:	f104 0610 	add.w	r6, r4, #16
    4322:	f814 1b01 	ldrb.w	r1, [r4], #1
    4326:	4628      	mov	r0, r5
    4328:	f002 fa16 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    432c:	b140      	cbz	r0, 4340 <_Z11PrintAlertsv+0x28>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    432e:	42a6      	cmp	r6, r4
    4330:	d1f7      	bne.n	4322 <_Z11PrintAlertsv+0xa>
        return SendChar('\r') && SendChar('\n');
    4332:	210d      	movs	r1, #13
    4334:	485d      	ldr	r0, [pc, #372]	; (44ac <_Z11PrintAlertsv+0x194>)
    4336:	f002 fa0f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    433a:	2800      	cmp	r0, #0
    433c:	f040 80af 	bne.w	449e <_Z11PrintAlertsv+0x186>
	// report status of alerts
 	SerialPort.SendLine("Alerts present: ");
	if(motor.AlertReg().bit.MotionCanceledInAlert){
    4340:	4d5b      	ldr	r5, [pc, #364]	; (44b0 <_Z11PrintAlertsv+0x198>)
    4342:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4346:	07de      	lsls	r6, r3, #31
    4348:	f100 808f 	bmi.w	446a <_Z11PrintAlertsv+0x152>
		SerialPort.SendLine("    MotionCanceledInAlert "); }
	if(motor.AlertReg().bit.MotionCanceledPositiveLimit){
    434c:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4350:	079c      	lsls	r4, r3, #30
    4352:	d471      	bmi.n	4438 <_Z11PrintAlertsv+0x120>
		SerialPort.SendLine("    MotionCanceledPositiveLimit "); }
	if(motor.AlertReg().bit.MotionCanceledNegativeLimit){
    4354:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4358:	0758      	lsls	r0, r3, #29
    435a:	d455      	bmi.n	4408 <_Z11PrintAlertsv+0xf0>
		SerialPort.SendLine("    MotionCanceledNegativeLimit "); }
	if(motor.AlertReg().bit.MotionCanceledSensorEStop){
    435c:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4360:	0719      	lsls	r1, r3, #28
    4362:	d439      	bmi.n	43d8 <_Z11PrintAlertsv+0xc0>
		SerialPort.SendLine("    MotionCanceledSensorEStop "); }
	if(motor.AlertReg().bit.MotionCanceledMotorDisabled){
    4364:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4368:	06da      	lsls	r2, r3, #27
    436a:	d41d      	bmi.n	43a8 <_Z11PrintAlertsv+0x90>
		SerialPort.SendLine("    MotionCanceledMotorDisabled "); }
	if(motor.AlertReg().bit.MotorFaulted){
    436c:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4370:	069b      	lsls	r3, r3, #26
    4372:	d400      	bmi.n	4376 <_Z11PrintAlertsv+0x5e>
    4374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4376:	4c4f      	ldr	r4, [pc, #316]	; (44b4 <_Z11PrintAlertsv+0x19c>)
            if (!SendChar(buffer[iChar])) {
    4378:	4d4c      	ldr	r5, [pc, #304]	; (44ac <_Z11PrintAlertsv+0x194>)
    437a:	f104 0611 	add.w	r6, r4, #17
    437e:	f814 1b01 	ldrb.w	r1, [r4], #1
    4382:	4628      	mov	r0, r5
    4384:	f002 f9e8 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4388:	2800      	cmp	r0, #0
    438a:	d0f3      	beq.n	4374 <_Z11PrintAlertsv+0x5c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    438c:	42a6      	cmp	r6, r4
    438e:	d1f6      	bne.n	437e <_Z11PrintAlertsv+0x66>
        return SendChar('\r') && SendChar('\n');
    4390:	210d      	movs	r1, #13
    4392:	4846      	ldr	r0, [pc, #280]	; (44ac <_Z11PrintAlertsv+0x194>)
    4394:	f002 f9e0 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4398:	2800      	cmp	r0, #0
    439a:	d0eb      	beq.n	4374 <_Z11PrintAlertsv+0x5c>
    439c:	210a      	movs	r1, #10
    439e:	4843      	ldr	r0, [pc, #268]	; (44ac <_Z11PrintAlertsv+0x194>)
		SerialPort.SendLine("    MotorFaulted ");
	}
 }
    43a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    43a4:	f002 b9d8 	b.w	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43a8:	4c43      	ldr	r4, [pc, #268]	; (44b8 <_Z11PrintAlertsv+0x1a0>)
            if (!SendChar(buffer[iChar])) {
    43aa:	4e40      	ldr	r6, [pc, #256]	; (44ac <_Z11PrintAlertsv+0x194>)
    43ac:	f104 0720 	add.w	r7, r4, #32
    43b0:	f814 1b01 	ldrb.w	r1, [r4], #1
    43b4:	4630      	mov	r0, r6
    43b6:	f002 f9cf 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ba:	2800      	cmp	r0, #0
    43bc:	d0d6      	beq.n	436c <_Z11PrintAlertsv+0x54>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43be:	42a7      	cmp	r7, r4
    43c0:	d1f6      	bne.n	43b0 <_Z11PrintAlertsv+0x98>
        return SendChar('\r') && SendChar('\n');
    43c2:	210d      	movs	r1, #13
    43c4:	4839      	ldr	r0, [pc, #228]	; (44ac <_Z11PrintAlertsv+0x194>)
    43c6:	f002 f9c7 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ca:	2800      	cmp	r0, #0
    43cc:	d0ce      	beq.n	436c <_Z11PrintAlertsv+0x54>
    43ce:	210a      	movs	r1, #10
    43d0:	4836      	ldr	r0, [pc, #216]	; (44ac <_Z11PrintAlertsv+0x194>)
    43d2:	f002 f9c1 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43d6:	e7c9      	b.n	436c <_Z11PrintAlertsv+0x54>
    43d8:	4c38      	ldr	r4, [pc, #224]	; (44bc <_Z11PrintAlertsv+0x1a4>)
            if (!SendChar(buffer[iChar])) {
    43da:	4e34      	ldr	r6, [pc, #208]	; (44ac <_Z11PrintAlertsv+0x194>)
    43dc:	f104 071e 	add.w	r7, r4, #30
    43e0:	f814 1b01 	ldrb.w	r1, [r4], #1
    43e4:	4630      	mov	r0, r6
    43e6:	f002 f9b7 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ea:	2800      	cmp	r0, #0
    43ec:	d0ba      	beq.n	4364 <_Z11PrintAlertsv+0x4c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43ee:	42bc      	cmp	r4, r7
    43f0:	d1f6      	bne.n	43e0 <_Z11PrintAlertsv+0xc8>
        return SendChar('\r') && SendChar('\n');
    43f2:	210d      	movs	r1, #13
    43f4:	482d      	ldr	r0, [pc, #180]	; (44ac <_Z11PrintAlertsv+0x194>)
    43f6:	f002 f9af 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43fa:	2800      	cmp	r0, #0
    43fc:	d0b2      	beq.n	4364 <_Z11PrintAlertsv+0x4c>
    43fe:	210a      	movs	r1, #10
    4400:	482a      	ldr	r0, [pc, #168]	; (44ac <_Z11PrintAlertsv+0x194>)
    4402:	f002 f9a9 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4406:	e7ad      	b.n	4364 <_Z11PrintAlertsv+0x4c>
    4408:	4c2d      	ldr	r4, [pc, #180]	; (44c0 <_Z11PrintAlertsv+0x1a8>)
            if (!SendChar(buffer[iChar])) {
    440a:	4e28      	ldr	r6, [pc, #160]	; (44ac <_Z11PrintAlertsv+0x194>)
    440c:	f104 0720 	add.w	r7, r4, #32
    4410:	f814 1b01 	ldrb.w	r1, [r4], #1
    4414:	4630      	mov	r0, r6
    4416:	f002 f99f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    441a:	2800      	cmp	r0, #0
    441c:	d09e      	beq.n	435c <_Z11PrintAlertsv+0x44>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    441e:	42a7      	cmp	r7, r4
    4420:	d1f6      	bne.n	4410 <_Z11PrintAlertsv+0xf8>
        return SendChar('\r') && SendChar('\n');
    4422:	210d      	movs	r1, #13
    4424:	4821      	ldr	r0, [pc, #132]	; (44ac <_Z11PrintAlertsv+0x194>)
    4426:	f002 f997 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    442a:	2800      	cmp	r0, #0
    442c:	d096      	beq.n	435c <_Z11PrintAlertsv+0x44>
    442e:	210a      	movs	r1, #10
    4430:	481e      	ldr	r0, [pc, #120]	; (44ac <_Z11PrintAlertsv+0x194>)
    4432:	f002 f991 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4436:	e791      	b.n	435c <_Z11PrintAlertsv+0x44>
    4438:	4c22      	ldr	r4, [pc, #136]	; (44c4 <_Z11PrintAlertsv+0x1ac>)
            if (!SendChar(buffer[iChar])) {
    443a:	4e1c      	ldr	r6, [pc, #112]	; (44ac <_Z11PrintAlertsv+0x194>)
    443c:	f104 0720 	add.w	r7, r4, #32
    4440:	f814 1b01 	ldrb.w	r1, [r4], #1
    4444:	4630      	mov	r0, r6
    4446:	f002 f987 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    444a:	2800      	cmp	r0, #0
    444c:	d082      	beq.n	4354 <_Z11PrintAlertsv+0x3c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    444e:	42a7      	cmp	r7, r4
    4450:	d1f6      	bne.n	4440 <_Z11PrintAlertsv+0x128>
        return SendChar('\r') && SendChar('\n');
    4452:	210d      	movs	r1, #13
    4454:	4815      	ldr	r0, [pc, #84]	; (44ac <_Z11PrintAlertsv+0x194>)
    4456:	f002 f97f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    445a:	2800      	cmp	r0, #0
    445c:	f43f af7a 	beq.w	4354 <_Z11PrintAlertsv+0x3c>
    4460:	210a      	movs	r1, #10
    4462:	4812      	ldr	r0, [pc, #72]	; (44ac <_Z11PrintAlertsv+0x194>)
    4464:	f002 f978 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4468:	e774      	b.n	4354 <_Z11PrintAlertsv+0x3c>
    446a:	4c17      	ldr	r4, [pc, #92]	; (44c8 <_Z11PrintAlertsv+0x1b0>)
            if (!SendChar(buffer[iChar])) {
    446c:	4e0f      	ldr	r6, [pc, #60]	; (44ac <_Z11PrintAlertsv+0x194>)
    446e:	f104 071a 	add.w	r7, r4, #26
    4472:	f814 1b01 	ldrb.w	r1, [r4], #1
    4476:	4630      	mov	r0, r6
    4478:	f002 f96e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    447c:	2800      	cmp	r0, #0
    447e:	f43f af65 	beq.w	434c <_Z11PrintAlertsv+0x34>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4482:	42a7      	cmp	r7, r4
    4484:	d1f5      	bne.n	4472 <_Z11PrintAlertsv+0x15a>
        return SendChar('\r') && SendChar('\n');
    4486:	210d      	movs	r1, #13
    4488:	4808      	ldr	r0, [pc, #32]	; (44ac <_Z11PrintAlertsv+0x194>)
    448a:	f002 f965 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    448e:	2800      	cmp	r0, #0
    4490:	f43f af5c 	beq.w	434c <_Z11PrintAlertsv+0x34>
    4494:	210a      	movs	r1, #10
    4496:	4805      	ldr	r0, [pc, #20]	; (44ac <_Z11PrintAlertsv+0x194>)
    4498:	f002 f95e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    449c:	e756      	b.n	434c <_Z11PrintAlertsv+0x34>
    449e:	210a      	movs	r1, #10
    44a0:	4802      	ldr	r0, [pc, #8]	; (44ac <_Z11PrintAlertsv+0x194>)
    44a2:	f002 f959 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44a6:	e74b      	b.n	4340 <_Z11PrintAlertsv+0x28>
    44a8:	00023550 	.word	0x00023550
    44ac:	20001480 	.word	0x20001480
    44b0:	20000b60 	.word	0x20000b60
    44b4:	0002360c 	.word	0x0002360c
    44b8:	000235e8 	.word	0x000235e8
    44bc:	000235c8 	.word	0x000235c8
    44c0:	000235a4 	.word	0x000235a4
    44c4:	00023580 	.word	0x00023580
    44c8:	00023564 	.word	0x00023564

000044cc <_Z12MoveDistancel.part.3>:
bool MoveDistance(int32_t distance) {
    44cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ce:	4c6e      	ldr	r4, [pc, #440]	; (4688 <_Z12MoveDistancel.part.3+0x1bc>)
            if (!SendChar(buffer[iChar])) {
    44d0:	4d6e      	ldr	r5, [pc, #440]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    44d2:	b08b      	sub	sp, #44	; 0x2c
    44d4:	4606      	mov	r6, r0
    44d6:	f104 070b 	add.w	r7, r4, #11
    44da:	f814 1b01 	ldrb.w	r1, [r4], #1
    44de:	4628      	mov	r0, r5
    44e0:	f002 f93a 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44e4:	b108      	cbz	r0, 44ea <_Z12MoveDistancel.part.3+0x1e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44e6:	42a7      	cmp	r7, r4
    44e8:	d1f7      	bne.n	44da <_Z12MoveDistancel.part.3+0xe>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[2 + 8 * sizeof(number)];
        itoa(number, strRep, radix);
    44ea:	a901      	add	r1, sp, #4
    44ec:	220a      	movs	r2, #10
    44ee:	4630      	mov	r0, r6
    44f0:	f01a f944 	bl	1e77c <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    44f4:	a801      	add	r0, sp, #4
    44f6:	f01b f9e3 	bl	1f8c0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44fa:	b160      	cbz	r0, 4516 <_Z12MoveDistancel.part.3+0x4a>
    44fc:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    44fe:	4f63      	ldr	r7, [pc, #396]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4500:	1825      	adds	r5, r4, r0
    4502:	e001      	b.n	4508 <_Z12MoveDistancel.part.3+0x3c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4504:	42a5      	cmp	r5, r4
    4506:	d006      	beq.n	4516 <_Z12MoveDistancel.part.3+0x4a>
            if (!SendChar(buffer[iChar])) {
    4508:	f814 1b01 	ldrb.w	r1, [r4], #1
    450c:	4638      	mov	r0, r7
    450e:	f002 f923 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4512:	2800      	cmp	r0, #0
    4514:	d1f6      	bne.n	4504 <_Z12MoveDistancel.part.3+0x38>
    4516:	4c5e      	ldr	r4, [pc, #376]	; (4690 <_Z12MoveDistancel.part.3+0x1c4>)
    4518:	4d5c      	ldr	r5, [pc, #368]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    451a:	1de7      	adds	r7, r4, #7
    451c:	f814 1b01 	ldrb.w	r1, [r4], #1
    4520:	4628      	mov	r0, r5
    4522:	f002 f919 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4526:	b140      	cbz	r0, 453a <_Z12MoveDistancel.part.3+0x6e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4528:	42bc      	cmp	r4, r7
    452a:	d1f7      	bne.n	451c <_Z12MoveDistancel.part.3+0x50>
        return SendChar('\r') && SendChar('\n');
    452c:	210d      	movs	r1, #13
    452e:	4857      	ldr	r0, [pc, #348]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4530:	f002 f912 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4534:	2800      	cmp	r0, #0
    4536:	f040 808d 	bne.w	4654 <_Z12MoveDistancel.part.3+0x188>
    motor.Move(distance);
    453a:	4631      	mov	r1, r6
    453c:	2201      	movs	r2, #1
    453e:	4855      	ldr	r0, [pc, #340]	; (4694 <_Z12MoveDistancel.part.3+0x1c8>)
    4540:	4c55      	ldr	r4, [pc, #340]	; (4698 <_Z12MoveDistancel.part.3+0x1cc>)
            if (!SendChar(buffer[iChar])) {
    4542:	4d52      	ldr	r5, [pc, #328]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4544:	f001 fe1a 	bl	617c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    4548:	4854      	ldr	r0, [pc, #336]	; (469c <_Z12MoveDistancel.part.3+0x1d0>)
    454a:	2100      	movs	r1, #0
    454c:	f005 ff5c 	bl	a408 <Delay_cycles>
    4550:	f104 0619 	add.w	r6, r4, #25
    4554:	f814 1b01 	ldrb.w	r1, [r4], #1
    4558:	4628      	mov	r0, r5
    455a:	f002 f8fd 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    455e:	b138      	cbz	r0, 4570 <_Z12MoveDistancel.part.3+0xa4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4560:	42a6      	cmp	r6, r4
    4562:	d1f7      	bne.n	4554 <_Z12MoveDistancel.part.3+0x88>
        return SendChar('\r') && SendChar('\n');
    4564:	210d      	movs	r1, #13
    4566:	4849      	ldr	r0, [pc, #292]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4568:	f002 f8f6 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    456c:	2800      	cmp	r0, #0
    456e:	d16c      	bne.n	464a <_Z12MoveDistancel.part.3+0x17e>
    4570:	4b48      	ldr	r3, [pc, #288]	; (4694 <_Z12MoveDistancel.part.3+0x1c8>)

            <div class="sd-disclaimer">For use with Step and Direction mode.</div>
        **/
        bool StepsComplete()
        {
            return MoveStateGet() == MS_IDLE;
    4572:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    while ( (!motor.StepsComplete() || motor.HlfbState() != MotorDriver::HLFB_ASSERTED) &&
    4576:	b91a      	cbnz	r2, 4580 <_Z12MoveDistancel.part.3+0xb4>
    4578:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    457c:	2a01      	cmp	r2, #1
    457e:	d003      	beq.n	4588 <_Z12MoveDistancel.part.3+0xbc>
			!motor.StatusReg().bit.AlertsPresent) {
    4580:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    while ( (!motor.StepsComplete() || motor.HlfbState() != MotorDriver::HLFB_ASSERTED) &&
    4584:	0592      	lsls	r2, r2, #22
    4586:	d5f4      	bpl.n	4572 <_Z12MoveDistancel.part.3+0xa6>
    if (motor.StatusReg().bit.AlertsPresent) {
    4588:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    458c:	059b      	lsls	r3, r3, #22
    458e:	d416      	bmi.n	45be <_Z12MoveDistancel.part.3+0xf2>
    4590:	4c43      	ldr	r4, [pc, #268]	; (46a0 <_Z12MoveDistancel.part.3+0x1d4>)
            if (!SendChar(buffer[iChar])) {
    4592:	4d3e      	ldr	r5, [pc, #248]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4594:	f104 0609 	add.w	r6, r4, #9
    4598:	f814 1b01 	ldrb.w	r1, [r4], #1
    459c:	4628      	mov	r0, r5
    459e:	f002 f8db 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45a2:	b140      	cbz	r0, 45b6 <_Z12MoveDistancel.part.3+0xea>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45a4:	42a6      	cmp	r6, r4
    45a6:	d1f7      	bne.n	4598 <_Z12MoveDistancel.part.3+0xcc>
        return SendChar('\r') && SendChar('\n');
    45a8:	210d      	movs	r1, #13
    45aa:	4838      	ldr	r0, [pc, #224]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    45ac:	f002 f8d4 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45b0:	4604      	mov	r4, r0
    45b2:	2800      	cmp	r0, #0
    45b4:	d153      	bne.n	465e <_Z12MoveDistancel.part.3+0x192>
		return true;
    45b6:	2401      	movs	r4, #1
}
    45b8:	4620      	mov	r0, r4
    45ba:	b00b      	add	sp, #44	; 0x2c
    45bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45be:	4c39      	ldr	r4, [pc, #228]	; (46a4 <_Z12MoveDistancel.part.3+0x1d8>)
            if (!SendChar(buffer[iChar])) {
    45c0:	4d32      	ldr	r5, [pc, #200]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    45c2:	f104 0615 	add.w	r6, r4, #21
    45c6:	f814 1b01 	ldrb.w	r1, [r4], #1
    45ca:	4628      	mov	r0, r5
    45cc:	f002 f8c4 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45d0:	b138      	cbz	r0, 45e2 <_Z12MoveDistancel.part.3+0x116>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45d2:	42b4      	cmp	r4, r6
    45d4:	d1f7      	bne.n	45c6 <_Z12MoveDistancel.part.3+0xfa>
        return SendChar('\r') && SendChar('\n');
    45d6:	210d      	movs	r1, #13
    45d8:	482c      	ldr	r0, [pc, #176]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    45da:	f002 f8bd 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45de:	2800      	cmp	r0, #0
    45e0:	d142      	bne.n	4668 <_Z12MoveDistancel.part.3+0x19c>
    45e2:	4c31      	ldr	r4, [pc, #196]	; (46a8 <_Z12MoveDistancel.part.3+0x1dc>)
            if (!SendChar(buffer[iChar])) {
    45e4:	4d29      	ldr	r5, [pc, #164]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
		PrintAlerts();
    45e6:	f7ff fe97 	bl	4318 <_Z11PrintAlertsv>
    45ea:	f104 063e 	add.w	r6, r4, #62	; 0x3e
    45ee:	f814 1b01 	ldrb.w	r1, [r4], #1
    45f2:	4628      	mov	r0, r5
    45f4:	f002 f8b0 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45f8:	b138      	cbz	r0, 460a <_Z12MoveDistancel.part.3+0x13e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45fa:	42a6      	cmp	r6, r4
    45fc:	d1f7      	bne.n	45ee <_Z12MoveDistancel.part.3+0x122>
        return SendChar('\r') && SendChar('\n');
    45fe:	210d      	movs	r1, #13
    4600:	4822      	ldr	r0, [pc, #136]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4602:	f002 f8a9 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4606:	2800      	cmp	r0, #0
    4608:	d133      	bne.n	4672 <_Z12MoveDistancel.part.3+0x1a6>
    460a:	4c28      	ldr	r4, [pc, #160]	; (46ac <_Z12MoveDistancel.part.3+0x1e0>)
            if (!SendChar(buffer[iChar])) {
    460c:	4d1f      	ldr	r5, [pc, #124]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    460e:	f104 0640 	add.w	r6, r4, #64	; 0x40
    4612:	f814 1b01 	ldrb.w	r1, [r4], #1
    4616:	4628      	mov	r0, r5
    4618:	f002 f89e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    461c:	b130      	cbz	r0, 462c <_Z12MoveDistancel.part.3+0x160>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    461e:	42a6      	cmp	r6, r4
    4620:	d1f7      	bne.n	4612 <_Z12MoveDistancel.part.3+0x146>
        return SendChar('\r') && SendChar('\n');
    4622:	210d      	movs	r1, #13
    4624:	4819      	ldr	r0, [pc, #100]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4626:	f002 f897 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    462a:	bb38      	cbnz	r0, 467c <_Z12MoveDistancel.part.3+0x1b0>
    462c:	210d      	movs	r1, #13
    462e:	4817      	ldr	r0, [pc, #92]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4630:	f002 f892 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4634:	4604      	mov	r4, r0
    4636:	2800      	cmp	r0, #0
    4638:	d0be      	beq.n	45b8 <_Z12MoveDistancel.part.3+0xec>
    463a:	210a      	movs	r1, #10
    463c:	4813      	ldr	r0, [pc, #76]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    463e:	f002 f88b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
		return false;
    4642:	2400      	movs	r4, #0
}
    4644:	4620      	mov	r0, r4
    4646:	b00b      	add	sp, #44	; 0x2c
    4648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    464a:	210a      	movs	r1, #10
    464c:	480f      	ldr	r0, [pc, #60]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    464e:	f002 f883 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4652:	e78d      	b.n	4570 <_Z12MoveDistancel.part.3+0xa4>
    4654:	210a      	movs	r1, #10
    4656:	480d      	ldr	r0, [pc, #52]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4658:	f002 f87e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    465c:	e76d      	b.n	453a <_Z12MoveDistancel.part.3+0x6e>
    465e:	210a      	movs	r1, #10
    4660:	480a      	ldr	r0, [pc, #40]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4662:	f002 f879 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4666:	e7a7      	b.n	45b8 <_Z12MoveDistancel.part.3+0xec>
    4668:	210a      	movs	r1, #10
    466a:	4808      	ldr	r0, [pc, #32]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    466c:	f002 f874 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4670:	e7b7      	b.n	45e2 <_Z12MoveDistancel.part.3+0x116>
    4672:	210a      	movs	r1, #10
    4674:	4805      	ldr	r0, [pc, #20]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4676:	f002 f86f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    467a:	e7c6      	b.n	460a <_Z12MoveDistancel.part.3+0x13e>
    467c:	210a      	movs	r1, #10
    467e:	4803      	ldr	r0, [pc, #12]	; (468c <_Z12MoveDistancel.part.3+0x1c0>)
    4680:	f002 f86a 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4684:	e7d2      	b.n	462c <_Z12MoveDistancel.part.3+0x160>
    4686:	bf00      	nop
    4688:	00023620 	.word	0x00023620
    468c:	20001480 	.word	0x20001480
    4690:	0002362c 	.word	0x0002362c
    4694:	20000b60 	.word	0x20000b60
    4698:	00023634 	.word	0x00023634
    469c:	0003a980 	.word	0x0003a980
    46a0:	000236d4 	.word	0x000236d4
    46a4:	000236e0 	.word	0x000236e0
    46a8:	00023650 	.word	0x00023650
    46ac:	00023690 	.word	0x00023690

000046b0 <main>:
int main() {
    46b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    46b4:	4bca      	ldr	r3, [pc, #808]	; (49e0 <main+0x330>)
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    46b6:	f8df 9338 	ldr.w	r9, [pc, #824]	; 49f0 <main+0x340>
                          Connector::CPM_MODE_STEP_AND_DIR);
    46ba:	6818      	ldr	r0, [r3, #0]
    46bc:	220a      	movs	r2, #10
    46be:	2102      	movs	r1, #2
    46c0:	f007 f922 	bl	b908 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    46c4:	f899 30d8 	ldrb.w	r3, [r9, #216]	; 0xd8
    46c8:	2b02      	cmp	r3, #2
    46ca:	d008      	beq.n	46de <main+0x2e>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    46cc:	49c5      	ldr	r1, [pc, #788]	; (49e4 <main+0x334>)
    46ce:	f8c9 10f0 	str.w	r1, [r9, #240]	; 0xf0
        m_hlfbMode = newMode;
    46d2:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    46d4:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    46d6:	f889 20d8 	strb.w	r2, [r9, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    46da:	f889 312f 	strb.w	r3, [r9, #303]	; 0x12f
            case HLFB_CARRIER_45_HZ:
                m_hlfbCarrierLossStateChange_ms =
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_45_HZ;
                break;
            case HLFB_CARRIER_482_HZ:
                m_hlfbCarrierLossStateChange_ms =
    46de:	2204      	movs	r2, #4
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    46e0:	2301      	movs	r3, #1
    motor.VelMax(INT32_MAX);
    46e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    46e6:	48c0      	ldr	r0, [pc, #768]	; (49e8 <main+0x338>)
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    46e8:	4ec0      	ldr	r6, [pc, #768]	; (49ec <main+0x33c>)
                m_hlfbCarrierLossStateChange_ms =
    46ea:	f8c9 20e8 	str.w	r2, [r9, #232]	; 0xe8
        m_hlfbCarrierFrequency = freq;
    46ee:	f889 30e4 	strb.w	r3, [r9, #228]	; 0xe4
    motor.VelMax(INT32_MAX);
    46f2:	f007 fd81 	bl	c1f8 <_ZN9ClearCore13StepGenerator6VelMaxEm>
    motor.AccelMax(INT32_MAX);
    46f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    46fa:	48bb      	ldr	r0, [pc, #748]	; (49e8 <main+0x338>)
    46fc:	f007 fda4 	bl	c248 <_ZN9ClearCore13StepGenerator8AccelMaxEm>
    SerialPort.Speed(baudRate);
    4700:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    4704:	4630      	mov	r0, r6
    4706:	f002 f80f 	bl	6728 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    470a:	f005 fe53 	bl	a3b4 <Milliseconds>
    470e:	4605      	mov	r5, r0
    SerialPort.PortOpen();
    4710:	4630      	mov	r0, r6
    4712:	f001 fffd 	bl	6710 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4716:	f241 3487 	movw	r4, #4999	; 0x1387
    471a:	4630      	mov	r0, r6
    471c:	f001 fff2 	bl	6704 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    4720:	2800      	cmp	r0, #0
    4722:	f000 8656 	beq.w	53d2 <main+0xd22>
    motor.EnableRequest(true);
    4726:	2101      	movs	r1, #1
    4728:	48b1      	ldr	r0, [pc, #708]	; (49f0 <main+0x340>)
    472a:	f001 f875 	bl	5818 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    472e:	48b1      	ldr	r0, [pc, #708]	; (49f4 <main+0x344>)
    4730:	f7ff fdd0 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    SerialPort.SendLine("Waiting for HLFB...");
    4734:	48b0      	ldr	r0, [pc, #704]	; (49f8 <main+0x348>)
    4736:	f7ff fdcd 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    473a:	f899 30f4 	ldrb.w	r3, [r9, #244]	; 0xf4
    473e:	2b01      	cmp	r3, #1
    4740:	d003      	beq.n	474a <main+0x9a>
			!motor.StatusReg().bit.AlertsPresent) {
    4742:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4746:	059c      	lsls	r4, r3, #22
    4748:	d5f7      	bpl.n	473a <main+0x8a>
    if (motor.StatusReg().bit.AlertsPresent) {
    474a:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    474e:	0598      	lsls	r0, r3, #22
    4750:	f140 8647 	bpl.w	53e2 <main+0xd32>
		SerialPort.SendLine("Motor alert detected.");		
    4754:	48a9      	ldr	r0, [pc, #676]	; (49fc <main+0x34c>)
    4756:	f7ff fdbd 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
		PrintAlerts();
    475a:	f7ff fddd 	bl	4318 <_Z11PrintAlertsv>
			SerialPort.SendLine("Enable automatic alert handling by setting HANDLE_ALERTS to 1.");
    475e:	48a8      	ldr	r0, [pc, #672]	; (4a00 <main+0x350>)
    4760:	f7ff fdb8 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
		SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");		
    4764:	48a7      	ldr	r0, [pc, #668]	; (4a04 <main+0x354>)
    4766:	f7ff fdb5 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    476a:	210d      	movs	r1, #13
    476c:	489f      	ldr	r0, [pc, #636]	; (49ec <main+0x33c>)
    476e:	f001 fff3 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4772:	b118      	cbz	r0, 477c <main+0xcc>
    4774:	210a      	movs	r1, #10
    4776:	489d      	ldr	r0, [pc, #628]	; (49ec <main+0x33c>)
    4778:	f001 ffee 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    477c:	f8df 829c 	ldr.w	r8, [pc, #668]	; 4a1c <main+0x36c>
    4780:	4fa1      	ldr	r7, [pc, #644]	; (4a08 <main+0x358>)
    4782:	f8df a29c 	ldr.w	sl, [pc, #668]	; 4a20 <main+0x370>
    4786:	4ea1      	ldr	r6, [pc, #644]	; (4a0c <main+0x35c>)
    4788:	4da1      	ldr	r5, [pc, #644]	; (4a10 <main+0x360>)
            if (!SendChar(buffer[iChar])) {
    478a:	4c98      	ldr	r4, [pc, #608]	; (49ec <main+0x33c>)
    478c:	e042      	b.n	4814 <main+0x164>
    478e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
    4792:	f7ff fe9b 	bl	44cc <_Z12MoveDistancel.part.3>
    4796:	a190      	add	r1, pc, #576	; (adr r1, 49d8 <main+0x328>)
    4798:	e9d1 0100 	ldrd	r0, r1, [r1]
    479c:	f005 fe34 	bl	a408 <Delay_cycles>
    if (motor.StatusReg().bit.AlertsPresent) {
    47a0:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    47a4:	0598      	lsls	r0, r3, #22
    47a6:	f100 821d 	bmi.w	4be4 <main+0x534>
    47aa:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
    47ae:	f7ff fe8d 	bl	44cc <_Z12MoveDistancel.part.3>
    47b2:	a189      	add	r1, pc, #548	; (adr r1, 49d8 <main+0x328>)
    47b4:	e9d1 0100 	ldrd	r0, r1, [r1]
    47b8:	f005 fe26 	bl	a408 <Delay_cycles>
        motor.EnableTriggerPulse(1, TRIGGER_PULSE_TIME, true);
    47bc:	2301      	movs	r3, #1
    47be:	4619      	mov	r1, r3
    47c0:	2219      	movs	r2, #25
    47c2:	488b      	ldr	r0, [pc, #556]	; (49f0 <main+0x340>)
    47c4:	f000 ffea 	bl	579c <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb>
    if (motor.StatusReg().bit.AlertsPresent) {
    47c8:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    47cc:	059b      	lsls	r3, r3, #22
    47ce:	f100 819b 	bmi.w	4b08 <main+0x458>
    47d2:	4890      	ldr	r0, [pc, #576]	; (4a14 <main+0x364>)
    47d4:	f7ff fe7a 	bl	44cc <_Z12MoveDistancel.part.3>
    47d8:	a17f      	add	r1, pc, #508	; (adr r1, 49d8 <main+0x328>)
    47da:	e9d1 0100 	ldrd	r0, r1, [r1]
    47de:	f005 fe13 	bl	a408 <Delay_cycles>
    47e2:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    47e6:	059a      	lsls	r2, r3, #22
    47e8:	f100 8120 	bmi.w	4a2c <main+0x37c>
    47ec:	488a      	ldr	r0, [pc, #552]	; (4a18 <main+0x368>)
    47ee:	f7ff fe6d 	bl	44cc <_Z12MoveDistancel.part.3>
    47f2:	a179      	add	r1, pc, #484	; (adr r1, 49d8 <main+0x328>)
    47f4:	e9d1 0100 	ldrd	r0, r1, [r1]
    47f8:	f005 fe06 	bl	a408 <Delay_cycles>
    47fc:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    4800:	0599      	lsls	r1, r3, #22
    4802:	d479      	bmi.n	48f8 <main+0x248>
    4804:	4884      	ldr	r0, [pc, #528]	; (4a18 <main+0x368>)
    4806:	f7ff fe61 	bl	44cc <_Z12MoveDistancel.part.3>
    480a:	a173      	add	r1, pc, #460	; (adr r1, 49d8 <main+0x328>)
    480c:	e9d1 0100 	ldrd	r0, r1, [r1]
    4810:	f005 fdfa 	bl	a408 <Delay_cycles>
    4814:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    4818:	0599      	lsls	r1, r3, #22
    481a:	d5b8      	bpl.n	478e <main+0xde>
    481c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 49fc <main+0x34c>
    4820:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4824:	4620      	mov	r0, r4
    4826:	f001 ff97 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    482a:	b140      	cbz	r0, 483e <main+0x18e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    482c:	45c3      	cmp	fp, r8
    482e:	d1f7      	bne.n	4820 <main+0x170>
        return SendChar('\r') && SendChar('\n');
    4830:	210d      	movs	r1, #13
    4832:	4620      	mov	r0, r4
    4834:	f001 ff90 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4838:	2800      	cmp	r0, #0
    483a:	f040 85be 	bne.w	53ba <main+0xd0a>
    483e:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 4a24 <main+0x374>
            if (!SendChar(buffer[iChar])) {
    4842:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4846:	4620      	mov	r0, r4
    4848:	f001 ff86 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    484c:	b140      	cbz	r0, 4860 <main+0x1b0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    484e:	455f      	cmp	r7, fp
    4850:	d1f7      	bne.n	4842 <main+0x192>
        return SendChar('\r') && SendChar('\n');
    4852:	210d      	movs	r1, #13
    4854:	4620      	mov	r0, r4
    4856:	f001 ff7f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    485a:	2800      	cmp	r0, #0
    485c:	f040 85b3 	bne.w	53c6 <main+0xd16>
	if(motor.AlertReg().bit.MotionCanceledInAlert){
    4860:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4864:	07da      	lsls	r2, r3, #31
    4866:	f100 8304 	bmi.w	4e72 <main+0x7c2>
	if(motor.AlertReg().bit.MotionCanceledPositiveLimit){
    486a:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    486e:	079b      	lsls	r3, r3, #30
    4870:	f100 82e6 	bmi.w	4e40 <main+0x790>
	if(motor.AlertReg().bit.MotionCanceledNegativeLimit){
    4874:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4878:	0758      	lsls	r0, r3, #29
    487a:	f100 82c8 	bmi.w	4e0e <main+0x75e>
	if(motor.AlertReg().bit.MotionCanceledSensorEStop){
    487e:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4882:	0719      	lsls	r1, r3, #28
    4884:	f100 82aa 	bmi.w	4ddc <main+0x72c>
	if(motor.AlertReg().bit.MotionCanceledMotorDisabled){
    4888:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    488c:	06da      	lsls	r2, r3, #27
    488e:	f100 828c 	bmi.w	4daa <main+0x6fa>
	if(motor.AlertReg().bit.MotorFaulted){
    4892:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4896:	069b      	lsls	r3, r3, #26
    4898:	f100 826f 	bmi.w	4d7a <main+0x6ca>
    489c:	f8df b160 	ldr.w	fp, [pc, #352]	; 4a00 <main+0x350>
            if (!SendChar(buffer[iChar])) {
    48a0:	f81b 1b01 	ldrb.w	r1, [fp], #1
    48a4:	4620      	mov	r0, r4
    48a6:	f001 ff57 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48aa:	b140      	cbz	r0, 48be <main+0x20e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    48ac:	455e      	cmp	r6, fp
    48ae:	d1f7      	bne.n	48a0 <main+0x1f0>
        return SendChar('\r') && SendChar('\n');
    48b0:	210d      	movs	r1, #13
    48b2:	4620      	mov	r0, r4
    48b4:	f001 ff50 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48b8:	2800      	cmp	r0, #0
    48ba:	f040 8538 	bne.w	532e <main+0xc7e>
    48be:	f8df b168 	ldr.w	fp, [pc, #360]	; 4a28 <main+0x378>
            if (!SendChar(buffer[iChar])) {
    48c2:	f81b 1b01 	ldrb.w	r1, [fp], #1
    48c6:	4620      	mov	r0, r4
    48c8:	f001 ff46 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48cc:	b140      	cbz	r0, 48e0 <main+0x230>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    48ce:	455d      	cmp	r5, fp
    48d0:	d1f7      	bne.n	48c2 <main+0x212>
        return SendChar('\r') && SendChar('\n');
    48d2:	210d      	movs	r1, #13
    48d4:	4620      	mov	r0, r4
    48d6:	f001 ff3f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48da:	2800      	cmp	r0, #0
    48dc:	f040 852d 	bne.w	533a <main+0xc8a>
    48e0:	210d      	movs	r1, #13
    48e2:	4620      	mov	r0, r4
    48e4:	f001 ff38 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48e8:	2800      	cmp	r0, #0
    48ea:	f43f af54 	beq.w	4796 <main+0xe6>
    48ee:	210a      	movs	r1, #10
    48f0:	4620      	mov	r0, r4
    48f2:	f001 ff31 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48f6:	e74e      	b.n	4796 <main+0xe6>
    48f8:	f8df b100 	ldr.w	fp, [pc, #256]	; 49fc <main+0x34c>
            if (!SendChar(buffer[iChar])) {
    48fc:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4900:	4620      	mov	r0, r4
    4902:	f001 ff29 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4906:	b140      	cbz	r0, 491a <main+0x26a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4908:	45d8      	cmp	r8, fp
    490a:	d1f7      	bne.n	48fc <main+0x24c>
        return SendChar('\r') && SendChar('\n');
    490c:	210d      	movs	r1, #13
    490e:	4620      	mov	r0, r4
    4910:	f001 ff22 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4914:	2800      	cmp	r0, #0
    4916:	f040 8516 	bne.w	5346 <main+0xc96>
    491a:	f8df b108 	ldr.w	fp, [pc, #264]	; 4a24 <main+0x374>
            if (!SendChar(buffer[iChar])) {
    491e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4922:	4620      	mov	r0, r4
    4924:	f001 ff18 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4928:	b140      	cbz	r0, 493c <main+0x28c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    492a:	455f      	cmp	r7, fp
    492c:	d1f7      	bne.n	491e <main+0x26e>
        return SendChar('\r') && SendChar('\n');
    492e:	210d      	movs	r1, #13
    4930:	4620      	mov	r0, r4
    4932:	f001 ff11 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4936:	2800      	cmp	r0, #0
    4938:	f040 850b 	bne.w	5352 <main+0xca2>
	if(motor.AlertReg().bit.MotionCanceledInAlert){
    493c:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4940:	07da      	lsls	r2, r3, #31
    4942:	f100 832c 	bmi.w	4f9e <main+0x8ee>
	if(motor.AlertReg().bit.MotionCanceledPositiveLimit){
    4946:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    494a:	079b      	lsls	r3, r3, #30
    494c:	f100 830e 	bmi.w	4f6c <main+0x8bc>
	if(motor.AlertReg().bit.MotionCanceledNegativeLimit){
    4950:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4954:	0758      	lsls	r0, r3, #29
    4956:	f100 82f0 	bmi.w	4f3a <main+0x88a>
	if(motor.AlertReg().bit.MotionCanceledSensorEStop){
    495a:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    495e:	0719      	lsls	r1, r3, #28
    4960:	f100 82d2 	bmi.w	4f08 <main+0x858>
	if(motor.AlertReg().bit.MotionCanceledMotorDisabled){
    4964:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4968:	06da      	lsls	r2, r3, #27
    496a:	f100 82b4 	bmi.w	4ed6 <main+0x826>
	if(motor.AlertReg().bit.MotorFaulted){
    496e:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4972:	069b      	lsls	r3, r3, #26
    4974:	f100 81e9 	bmi.w	4d4a <main+0x69a>
    4978:	f8df b084 	ldr.w	fp, [pc, #132]	; 4a00 <main+0x350>
            if (!SendChar(buffer[iChar])) {
    497c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4980:	4620      	mov	r0, r4
    4982:	f001 fee9 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4986:	b140      	cbz	r0, 499a <main+0x2ea>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4988:	45b3      	cmp	fp, r6
    498a:	d1f7      	bne.n	497c <main+0x2cc>
        return SendChar('\r') && SendChar('\n');
    498c:	210d      	movs	r1, #13
    498e:	4620      	mov	r0, r4
    4990:	f001 fee2 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4994:	2800      	cmp	r0, #0
    4996:	f040 8504 	bne.w	53a2 <main+0xcf2>
    499a:	f8df b08c 	ldr.w	fp, [pc, #140]	; 4a28 <main+0x378>
            if (!SendChar(buffer[iChar])) {
    499e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    49a2:	4620      	mov	r0, r4
    49a4:	f001 fed8 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49a8:	b140      	cbz	r0, 49bc <main+0x30c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    49aa:	455d      	cmp	r5, fp
    49ac:	d1f7      	bne.n	499e <main+0x2ee>
        return SendChar('\r') && SendChar('\n');
    49ae:	210d      	movs	r1, #13
    49b0:	4620      	mov	r0, r4
    49b2:	f001 fed1 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49b6:	2800      	cmp	r0, #0
    49b8:	f040 84f9 	bne.w	53ae <main+0xcfe>
    49bc:	210d      	movs	r1, #13
    49be:	4620      	mov	r0, r4
    49c0:	f001 feca 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49c4:	2800      	cmp	r0, #0
    49c6:	f43f af20 	beq.w	480a <main+0x15a>
    49ca:	210a      	movs	r1, #10
    49cc:	4620      	mov	r0, r4
    49ce:	f001 fec3 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49d2:	e71a      	b.n	480a <main+0x15a>
    49d4:	f3af 8000 	nop.w
    49d8:	07270e00 	.word	0x07270e00
    49dc:	00000000 	.word	0x00000000
    49e0:	20001bfc 	.word	0x20001bfc
    49e4:	c61c3c00 	.word	0xc61c3c00
    49e8:	20000b90 	.word	0x20000b90
    49ec:	20001480 	.word	0x20001480
    49f0:	20000b60 	.word	0x20000b60
    49f4:	00023748 	.word	0x00023748
    49f8:	00023758 	.word	0x00023758
    49fc:	000236e0 	.word	0x000236e0
    4a00:	000236f8 	.word	0x000236f8
    4a04:	0002376c 	.word	0x0002376c
    4a08:	00023560 	.word	0x00023560
    4a0c:	00023736 	.word	0x00023736
    4a10:	00023746 	.word	0x00023746
    4a14:	ffffce00 	.word	0xffffce00
    4a18:	ffffe700 	.word	0xffffe700
    4a1c:	000236f5 	.word	0x000236f5
    4a20:	0002361d 	.word	0x0002361d
    4a24:	00023550 	.word	0x00023550
    4a28:	00023738 	.word	0x00023738
    4a2c:	f8df b6b0 	ldr.w	fp, [pc, #1712]	; 50e0 <main+0xa30>
            if (!SendChar(buffer[iChar])) {
    4a30:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4a34:	4620      	mov	r0, r4
    4a36:	f001 fe8f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a3a:	b140      	cbz	r0, 4a4e <main+0x39e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a3c:	45c3      	cmp	fp, r8
    4a3e:	d1f7      	bne.n	4a30 <main+0x380>
        return SendChar('\r') && SendChar('\n');
    4a40:	210d      	movs	r1, #13
    4a42:	4620      	mov	r0, r4
    4a44:	f001 fe88 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a48:	2800      	cmp	r0, #0
    4a4a:	f040 8450 	bne.w	52ee <main+0xc3e>
    4a4e:	f8df b694 	ldr.w	fp, [pc, #1684]	; 50e4 <main+0xa34>
            if (!SendChar(buffer[iChar])) {
    4a52:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4a56:	4620      	mov	r0, r4
    4a58:	f001 fe7e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a5c:	b140      	cbz	r0, 4a70 <main+0x3c0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a5e:	455f      	cmp	r7, fp
    4a60:	d1f7      	bne.n	4a52 <main+0x3a2>
        return SendChar('\r') && SendChar('\n');
    4a62:	210d      	movs	r1, #13
    4a64:	4620      	mov	r0, r4
    4a66:	f001 fe77 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a6a:	2800      	cmp	r0, #0
    4a6c:	f040 8445 	bne.w	52fa <main+0xc4a>
	if(motor.AlertReg().bit.MotionCanceledInAlert){
    4a70:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4a74:	07db      	lsls	r3, r3, #31
    4a76:	f100 8420 	bmi.w	52ba <main+0xc0a>
	if(motor.AlertReg().bit.MotionCanceledPositiveLimit){
    4a7a:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4a7e:	0798      	lsls	r0, r3, #30
    4a80:	f100 8401 	bmi.w	5286 <main+0xbd6>
	if(motor.AlertReg().bit.MotionCanceledNegativeLimit){
    4a84:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4a88:	0759      	lsls	r1, r3, #29
    4a8a:	f100 83e3 	bmi.w	5254 <main+0xba4>
	if(motor.AlertReg().bit.MotionCanceledSensorEStop){
    4a8e:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4a92:	071a      	lsls	r2, r3, #28
    4a94:	f100 83c5 	bmi.w	5222 <main+0xb72>
	if(motor.AlertReg().bit.MotionCanceledMotorDisabled){
    4a98:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4a9c:	06db      	lsls	r3, r3, #27
    4a9e:	f100 8201 	bmi.w	4ea4 <main+0x7f4>
	if(motor.AlertReg().bit.MotorFaulted){
    4aa2:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4aa6:	0698      	lsls	r0, r3, #26
    4aa8:	f100 8137 	bmi.w	4d1a <main+0x66a>
    4aac:	f8df b638 	ldr.w	fp, [pc, #1592]	; 50e8 <main+0xa38>
            if (!SendChar(buffer[iChar])) {
    4ab0:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4ab4:	4620      	mov	r0, r4
    4ab6:	f001 fe4f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4aba:	b140      	cbz	r0, 4ace <main+0x41e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4abc:	455e      	cmp	r6, fp
    4abe:	d1f7      	bne.n	4ab0 <main+0x400>
        return SendChar('\r') && SendChar('\n');
    4ac0:	210d      	movs	r1, #13
    4ac2:	4620      	mov	r0, r4
    4ac4:	f001 fe48 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ac8:	2800      	cmp	r0, #0
    4aca:	f040 845e 	bne.w	538a <main+0xcda>
    4ace:	f8df b61c 	ldr.w	fp, [pc, #1564]	; 50ec <main+0xa3c>
            if (!SendChar(buffer[iChar])) {
    4ad2:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4ad6:	4620      	mov	r0, r4
    4ad8:	f001 fe3e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4adc:	b140      	cbz	r0, 4af0 <main+0x440>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4ade:	455d      	cmp	r5, fp
    4ae0:	d1f7      	bne.n	4ad2 <main+0x422>
        return SendChar('\r') && SendChar('\n');
    4ae2:	210d      	movs	r1, #13
    4ae4:	4620      	mov	r0, r4
    4ae6:	f001 fe37 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4aea:	2800      	cmp	r0, #0
    4aec:	f040 8453 	bne.w	5396 <main+0xce6>
    4af0:	210d      	movs	r1, #13
    4af2:	4620      	mov	r0, r4
    4af4:	f001 fe30 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4af8:	2800      	cmp	r0, #0
    4afa:	f43f ae7a 	beq.w	47f2 <main+0x142>
    4afe:	210a      	movs	r1, #10
    4b00:	4620      	mov	r0, r4
    4b02:	f001 fe29 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b06:	e674      	b.n	47f2 <main+0x142>
    4b08:	f8df b5d4 	ldr.w	fp, [pc, #1492]	; 50e0 <main+0xa30>
            if (!SendChar(buffer[iChar])) {
    4b0c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4b10:	4620      	mov	r0, r4
    4b12:	f001 fe21 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b16:	b140      	cbz	r0, 4b2a <main+0x47a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b18:	45d8      	cmp	r8, fp
    4b1a:	d1f7      	bne.n	4b0c <main+0x45c>
        return SendChar('\r') && SendChar('\n');
    4b1c:	210d      	movs	r1, #13
    4b1e:	4620      	mov	r0, r4
    4b20:	f001 fe1a 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b24:	2800      	cmp	r0, #0
    4b26:	f040 842a 	bne.w	537e <main+0xcce>
    4b2a:	f8df b5b8 	ldr.w	fp, [pc, #1464]	; 50e4 <main+0xa34>
            if (!SendChar(buffer[iChar])) {
    4b2e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4b32:	4620      	mov	r0, r4
    4b34:	f001 fe10 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b38:	b140      	cbz	r0, 4b4c <main+0x49c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b3a:	45bb      	cmp	fp, r7
    4b3c:	d1f7      	bne.n	4b2e <main+0x47e>
        return SendChar('\r') && SendChar('\n');
    4b3e:	210d      	movs	r1, #13
    4b40:	4620      	mov	r0, r4
    4b42:	f001 fe09 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b46:	2800      	cmp	r0, #0
    4b48:	f040 840e 	bne.w	5368 <main+0xcb8>
	if(motor.AlertReg().bit.MotionCanceledInAlert){
    4b4c:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4b50:	07d8      	lsls	r0, r3, #31
    4b52:	f100 82d9 	bmi.w	5108 <main+0xa58>
	if(motor.AlertReg().bit.MotionCanceledPositiveLimit){
    4b56:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4b5a:	0799      	lsls	r1, r3, #30
    4b5c:	f100 82f1 	bmi.w	5142 <main+0xa92>
	if(motor.AlertReg().bit.MotionCanceledNegativeLimit){
    4b60:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4b64:	075a      	lsls	r2, r3, #29
    4b66:	f100 8309 	bmi.w	517c <main+0xacc>
	if(motor.AlertReg().bit.MotionCanceledSensorEStop){
    4b6a:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4b6e:	071b      	lsls	r3, r3, #28
    4b70:	f100 8321 	bmi.w	51b6 <main+0xb06>
	if(motor.AlertReg().bit.MotionCanceledMotorDisabled){
    4b74:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4b78:	06d8      	lsls	r0, r3, #27
    4b7a:	f100 8339 	bmi.w	51f0 <main+0xb40>
	if(motor.AlertReg().bit.MotorFaulted){
    4b7e:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4b82:	0699      	lsls	r1, r3, #26
    4b84:	f100 80b1 	bmi.w	4cea <main+0x63a>
    4b88:	f8df b55c 	ldr.w	fp, [pc, #1372]	; 50e8 <main+0xa38>
            if (!SendChar(buffer[iChar])) {
    4b8c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4b90:	4620      	mov	r0, r4
    4b92:	f001 fde1 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b96:	b140      	cbz	r0, 4baa <main+0x4fa>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b98:	45b3      	cmp	fp, r6
    4b9a:	d1f7      	bne.n	4b8c <main+0x4dc>
        return SendChar('\r') && SendChar('\n');
    4b9c:	210d      	movs	r1, #13
    4b9e:	4620      	mov	r0, r4
    4ba0:	f001 fdda 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ba4:	2800      	cmp	r0, #0
    4ba6:	f040 83da 	bne.w	535e <main+0xcae>
    4baa:	f8df b540 	ldr.w	fp, [pc, #1344]	; 50ec <main+0xa3c>
            if (!SendChar(buffer[iChar])) {
    4bae:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4bb2:	4620      	mov	r0, r4
    4bb4:	f001 fdd0 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bb8:	b140      	cbz	r0, 4bcc <main+0x51c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4bba:	455d      	cmp	r5, fp
    4bbc:	d1f7      	bne.n	4bae <main+0x4fe>
        return SendChar('\r') && SendChar('\n');
    4bbe:	210d      	movs	r1, #13
    4bc0:	4620      	mov	r0, r4
    4bc2:	f001 fdc9 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bc6:	2800      	cmp	r0, #0
    4bc8:	f040 83d4 	bne.w	5374 <main+0xcc4>
    4bcc:	210d      	movs	r1, #13
    4bce:	4620      	mov	r0, r4
    4bd0:	f001 fdc2 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bd4:	2800      	cmp	r0, #0
    4bd6:	f43f adff 	beq.w	47d8 <main+0x128>
    4bda:	210a      	movs	r1, #10
    4bdc:	4620      	mov	r0, r4
    4bde:	f001 fdbb 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4be2:	e5f9      	b.n	47d8 <main+0x128>
    4be4:	f8df b4f8 	ldr.w	fp, [pc, #1272]	; 50e0 <main+0xa30>
            if (!SendChar(buffer[iChar])) {
    4be8:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4bec:	4620      	mov	r0, r4
    4bee:	f001 fdb3 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bf2:	b140      	cbz	r0, 4c06 <main+0x556>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4bf4:	45c3      	cmp	fp, r8
    4bf6:	d1f7      	bne.n	4be8 <main+0x538>
        return SendChar('\r') && SendChar('\n');
    4bf8:	210d      	movs	r1, #13
    4bfa:	4620      	mov	r0, r4
    4bfc:	f001 fdac 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c00:	2800      	cmp	r0, #0
    4c02:	f040 8380 	bne.w	5306 <main+0xc56>
    4c06:	f8df b4dc 	ldr.w	fp, [pc, #1244]	; 50e4 <main+0xa34>
            if (!SendChar(buffer[iChar])) {
    4c0a:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4c0e:	4620      	mov	r0, r4
    4c10:	f001 fda2 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c14:	b140      	cbz	r0, 4c28 <main+0x578>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4c16:	455f      	cmp	r7, fp
    4c18:	d1f7      	bne.n	4c0a <main+0x55a>
        return SendChar('\r') && SendChar('\n');
    4c1a:	210d      	movs	r1, #13
    4c1c:	4620      	mov	r0, r4
    4c1e:	f001 fd9b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c22:	2800      	cmp	r0, #0
    4c24:	f040 8374 	bne.w	5310 <main+0xc60>
	if(motor.AlertReg().bit.MotionCanceledInAlert){
    4c28:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4c2c:	07d9      	lsls	r1, r3, #31
    4c2e:	f100 8233 	bmi.w	5098 <main+0x9e8>
	if(motor.AlertReg().bit.MotionCanceledPositiveLimit){
    4c32:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4c36:	079a      	lsls	r2, r3, #30
    4c38:	f100 8215 	bmi.w	5066 <main+0x9b6>
	if(motor.AlertReg().bit.MotionCanceledNegativeLimit){
    4c3c:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4c40:	075b      	lsls	r3, r3, #29
    4c42:	f100 81f7 	bmi.w	5034 <main+0x984>
	if(motor.AlertReg().bit.MotionCanceledSensorEStop){
    4c46:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4c4a:	0718      	lsls	r0, r3, #28
    4c4c:	f100 81d9 	bmi.w	5002 <main+0x952>
	if(motor.AlertReg().bit.MotionCanceledMotorDisabled){
    4c50:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4c54:	06d9      	lsls	r1, r3, #27
    4c56:	f100 81bb 	bmi.w	4fd0 <main+0x920>
	if(motor.AlertReg().bit.MotorFaulted){
    4c5a:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    4c5e:	069a      	lsls	r2, r3, #26
    4c60:	d42d      	bmi.n	4cbe <main+0x60e>
    4c62:	f8df b484 	ldr.w	fp, [pc, #1156]	; 50e8 <main+0xa38>
            if (!SendChar(buffer[iChar])) {
    4c66:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4c6a:	4620      	mov	r0, r4
    4c6c:	f001 fd74 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c70:	b140      	cbz	r0, 4c84 <main+0x5d4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4c72:	455e      	cmp	r6, fp
    4c74:	d1f7      	bne.n	4c66 <main+0x5b6>
        return SendChar('\r') && SendChar('\n');
    4c76:	210d      	movs	r1, #13
    4c78:	4620      	mov	r0, r4
    4c7a:	f001 fd6d 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c7e:	2800      	cmp	r0, #0
    4c80:	f040 834b 	bne.w	531a <main+0xc6a>
    4c84:	f8df b464 	ldr.w	fp, [pc, #1124]	; 50ec <main+0xa3c>
            if (!SendChar(buffer[iChar])) {
    4c88:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4c8c:	4620      	mov	r0, r4
    4c8e:	f001 fd63 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c92:	b140      	cbz	r0, 4ca6 <main+0x5f6>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4c94:	455d      	cmp	r5, fp
    4c96:	d1f7      	bne.n	4c88 <main+0x5d8>
        return SendChar('\r') && SendChar('\n');
    4c98:	210d      	movs	r1, #13
    4c9a:	4620      	mov	r0, r4
    4c9c:	f001 fd5c 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ca0:	2800      	cmp	r0, #0
    4ca2:	f040 833f 	bne.w	5324 <main+0xc74>
    4ca6:	210d      	movs	r1, #13
    4ca8:	4620      	mov	r0, r4
    4caa:	f001 fd55 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4cae:	2800      	cmp	r0, #0
    4cb0:	f43f ad7f 	beq.w	47b2 <main+0x102>
    4cb4:	210a      	movs	r1, #10
    4cb6:	4620      	mov	r0, r4
    4cb8:	f001 fd4e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4cbc:	e579      	b.n	47b2 <main+0x102>
    4cbe:	f8df b430 	ldr.w	fp, [pc, #1072]	; 50f0 <main+0xa40>
            if (!SendChar(buffer[iChar])) {
    4cc2:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4cc6:	4620      	mov	r0, r4
    4cc8:	f001 fd46 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ccc:	2800      	cmp	r0, #0
    4cce:	d0c8      	beq.n	4c62 <main+0x5b2>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4cd0:	45da      	cmp	sl, fp
    4cd2:	d1f6      	bne.n	4cc2 <main+0x612>
        return SendChar('\r') && SendChar('\n');
    4cd4:	210d      	movs	r1, #13
    4cd6:	4620      	mov	r0, r4
    4cd8:	f001 fd3e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4cdc:	2800      	cmp	r0, #0
    4cde:	d0c0      	beq.n	4c62 <main+0x5b2>
    4ce0:	210a      	movs	r1, #10
    4ce2:	4620      	mov	r0, r4
    4ce4:	f001 fd38 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ce8:	e7bb      	b.n	4c62 <main+0x5b2>
    4cea:	f8df b404 	ldr.w	fp, [pc, #1028]	; 50f0 <main+0xa40>
            if (!SendChar(buffer[iChar])) {
    4cee:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4cf2:	4620      	mov	r0, r4
    4cf4:	f001 fd30 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4cf8:	2800      	cmp	r0, #0
    4cfa:	f43f af45 	beq.w	4b88 <main+0x4d8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4cfe:	45da      	cmp	sl, fp
    4d00:	d1f5      	bne.n	4cee <main+0x63e>
        return SendChar('\r') && SendChar('\n');
    4d02:	210d      	movs	r1, #13
    4d04:	4620      	mov	r0, r4
    4d06:	f001 fd27 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d0a:	2800      	cmp	r0, #0
    4d0c:	f43f af3c 	beq.w	4b88 <main+0x4d8>
    4d10:	210a      	movs	r1, #10
    4d12:	4620      	mov	r0, r4
    4d14:	f001 fd20 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d18:	e736      	b.n	4b88 <main+0x4d8>
    4d1a:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 50f0 <main+0xa40>
            if (!SendChar(buffer[iChar])) {
    4d1e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4d22:	4620      	mov	r0, r4
    4d24:	f001 fd18 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d28:	2800      	cmp	r0, #0
    4d2a:	f43f aebf 	beq.w	4aac <main+0x3fc>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4d2e:	45da      	cmp	sl, fp
    4d30:	d1f5      	bne.n	4d1e <main+0x66e>
        return SendChar('\r') && SendChar('\n');
    4d32:	210d      	movs	r1, #13
    4d34:	4620      	mov	r0, r4
    4d36:	f001 fd0f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d3a:	2800      	cmp	r0, #0
    4d3c:	f43f aeb6 	beq.w	4aac <main+0x3fc>
    4d40:	210a      	movs	r1, #10
    4d42:	4620      	mov	r0, r4
    4d44:	f001 fd08 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d48:	e6b0      	b.n	4aac <main+0x3fc>
    4d4a:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 50f0 <main+0xa40>
            if (!SendChar(buffer[iChar])) {
    4d4e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4d52:	4620      	mov	r0, r4
    4d54:	f001 fd00 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d58:	2800      	cmp	r0, #0
    4d5a:	f43f ae0d 	beq.w	4978 <main+0x2c8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4d5e:	45da      	cmp	sl, fp
    4d60:	d1f5      	bne.n	4d4e <main+0x69e>
        return SendChar('\r') && SendChar('\n');
    4d62:	210d      	movs	r1, #13
    4d64:	4620      	mov	r0, r4
    4d66:	f001 fcf7 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d6a:	2800      	cmp	r0, #0
    4d6c:	f43f ae04 	beq.w	4978 <main+0x2c8>
    4d70:	210a      	movs	r1, #10
    4d72:	4620      	mov	r0, r4
    4d74:	f001 fcf0 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d78:	e5fe      	b.n	4978 <main+0x2c8>
    4d7a:	f8df b374 	ldr.w	fp, [pc, #884]	; 50f0 <main+0xa40>
            if (!SendChar(buffer[iChar])) {
    4d7e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4d82:	4620      	mov	r0, r4
    4d84:	f001 fce8 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d88:	2800      	cmp	r0, #0
    4d8a:	f43f ad87 	beq.w	489c <main+0x1ec>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4d8e:	45d3      	cmp	fp, sl
    4d90:	d1f5      	bne.n	4d7e <main+0x6ce>
        return SendChar('\r') && SendChar('\n');
    4d92:	210d      	movs	r1, #13
    4d94:	4620      	mov	r0, r4
    4d96:	f001 fcdf 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4d9a:	2800      	cmp	r0, #0
    4d9c:	f43f ad7e 	beq.w	489c <main+0x1ec>
    4da0:	210a      	movs	r1, #10
    4da2:	4620      	mov	r0, r4
    4da4:	f001 fcd8 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4da8:	e578      	b.n	489c <main+0x1ec>
    4daa:	f8df b348 	ldr.w	fp, [pc, #840]	; 50f4 <main+0xa44>
            if (!SendChar(buffer[iChar])) {
    4dae:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4db2:	4620      	mov	r0, r4
    4db4:	f001 fcd0 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4db8:	2800      	cmp	r0, #0
    4dba:	f43f ad6a 	beq.w	4892 <main+0x1e2>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4dbe:	4bc3      	ldr	r3, [pc, #780]	; (50cc <main+0xa1c>)
    4dc0:	455b      	cmp	r3, fp
    4dc2:	d1f4      	bne.n	4dae <main+0x6fe>
        return SendChar('\r') && SendChar('\n');
    4dc4:	210d      	movs	r1, #13
    4dc6:	4620      	mov	r0, r4
    4dc8:	f001 fcc6 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4dcc:	2800      	cmp	r0, #0
    4dce:	f43f ad60 	beq.w	4892 <main+0x1e2>
    4dd2:	210a      	movs	r1, #10
    4dd4:	4620      	mov	r0, r4
    4dd6:	f001 fcbf 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4dda:	e55a      	b.n	4892 <main+0x1e2>
    4ddc:	f8df b318 	ldr.w	fp, [pc, #792]	; 50f8 <main+0xa48>
            if (!SendChar(buffer[iChar])) {
    4de0:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4de4:	4620      	mov	r0, r4
    4de6:	f001 fcb7 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4dea:	2800      	cmp	r0, #0
    4dec:	f43f ad4c 	beq.w	4888 <main+0x1d8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4df0:	4bb7      	ldr	r3, [pc, #732]	; (50d0 <main+0xa20>)
    4df2:	455b      	cmp	r3, fp
    4df4:	d1f4      	bne.n	4de0 <main+0x730>
        return SendChar('\r') && SendChar('\n');
    4df6:	210d      	movs	r1, #13
    4df8:	4620      	mov	r0, r4
    4dfa:	f001 fcad 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4dfe:	2800      	cmp	r0, #0
    4e00:	f43f ad42 	beq.w	4888 <main+0x1d8>
    4e04:	210a      	movs	r1, #10
    4e06:	4620      	mov	r0, r4
    4e08:	f001 fca6 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e0c:	e53c      	b.n	4888 <main+0x1d8>
    4e0e:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 50fc <main+0xa4c>
            if (!SendChar(buffer[iChar])) {
    4e12:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4e16:	4620      	mov	r0, r4
    4e18:	f001 fc9e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e1c:	2800      	cmp	r0, #0
    4e1e:	f43f ad2e 	beq.w	487e <main+0x1ce>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4e22:	4bac      	ldr	r3, [pc, #688]	; (50d4 <main+0xa24>)
    4e24:	455b      	cmp	r3, fp
    4e26:	d1f4      	bne.n	4e12 <main+0x762>
        return SendChar('\r') && SendChar('\n');
    4e28:	210d      	movs	r1, #13
    4e2a:	4620      	mov	r0, r4
    4e2c:	f001 fc94 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e30:	2800      	cmp	r0, #0
    4e32:	f43f ad24 	beq.w	487e <main+0x1ce>
    4e36:	210a      	movs	r1, #10
    4e38:	4620      	mov	r0, r4
    4e3a:	f001 fc8d 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e3e:	e51e      	b.n	487e <main+0x1ce>
    4e40:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 5100 <main+0xa50>
            if (!SendChar(buffer[iChar])) {
    4e44:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4e48:	4620      	mov	r0, r4
    4e4a:	f001 fc85 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e4e:	2800      	cmp	r0, #0
    4e50:	f43f ad10 	beq.w	4874 <main+0x1c4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4e54:	4ba0      	ldr	r3, [pc, #640]	; (50d8 <main+0xa28>)
    4e56:	455b      	cmp	r3, fp
    4e58:	d1f4      	bne.n	4e44 <main+0x794>
        return SendChar('\r') && SendChar('\n');
    4e5a:	210d      	movs	r1, #13
    4e5c:	4620      	mov	r0, r4
    4e5e:	f001 fc7b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e62:	2800      	cmp	r0, #0
    4e64:	f43f ad06 	beq.w	4874 <main+0x1c4>
    4e68:	210a      	movs	r1, #10
    4e6a:	4620      	mov	r0, r4
    4e6c:	f001 fc74 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e70:	e500      	b.n	4874 <main+0x1c4>
    4e72:	f8df b290 	ldr.w	fp, [pc, #656]	; 5104 <main+0xa54>
            if (!SendChar(buffer[iChar])) {
    4e76:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4e7a:	4620      	mov	r0, r4
    4e7c:	f001 fc6c 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e80:	2800      	cmp	r0, #0
    4e82:	f43f acf2 	beq.w	486a <main+0x1ba>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4e86:	4b95      	ldr	r3, [pc, #596]	; (50dc <main+0xa2c>)
    4e88:	459b      	cmp	fp, r3
    4e8a:	d1f4      	bne.n	4e76 <main+0x7c6>
        return SendChar('\r') && SendChar('\n');
    4e8c:	210d      	movs	r1, #13
    4e8e:	4620      	mov	r0, r4
    4e90:	f001 fc62 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4e94:	2800      	cmp	r0, #0
    4e96:	f43f ace8 	beq.w	486a <main+0x1ba>
    4e9a:	210a      	movs	r1, #10
    4e9c:	4620      	mov	r0, r4
    4e9e:	f001 fc5b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ea2:	e4e2      	b.n	486a <main+0x1ba>
    4ea4:	f8df b24c 	ldr.w	fp, [pc, #588]	; 50f4 <main+0xa44>
            if (!SendChar(buffer[iChar])) {
    4ea8:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4eac:	4620      	mov	r0, r4
    4eae:	f001 fc53 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4eb2:	2800      	cmp	r0, #0
    4eb4:	f43f adf5 	beq.w	4aa2 <main+0x3f2>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4eb8:	4b84      	ldr	r3, [pc, #528]	; (50cc <main+0xa1c>)
    4eba:	455b      	cmp	r3, fp
    4ebc:	d1f4      	bne.n	4ea8 <main+0x7f8>
        return SendChar('\r') && SendChar('\n');
    4ebe:	210d      	movs	r1, #13
    4ec0:	4620      	mov	r0, r4
    4ec2:	f001 fc49 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ec6:	2800      	cmp	r0, #0
    4ec8:	f43f adeb 	beq.w	4aa2 <main+0x3f2>
    4ecc:	210a      	movs	r1, #10
    4ece:	4620      	mov	r0, r4
    4ed0:	f001 fc42 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ed4:	e5e5      	b.n	4aa2 <main+0x3f2>
    4ed6:	f8df b21c 	ldr.w	fp, [pc, #540]	; 50f4 <main+0xa44>
            if (!SendChar(buffer[iChar])) {
    4eda:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4ede:	4620      	mov	r0, r4
    4ee0:	f001 fc3a 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ee4:	2800      	cmp	r0, #0
    4ee6:	f43f ad42 	beq.w	496e <main+0x2be>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4eea:	4b78      	ldr	r3, [pc, #480]	; (50cc <main+0xa1c>)
    4eec:	459b      	cmp	fp, r3
    4eee:	d1f4      	bne.n	4eda <main+0x82a>
        return SendChar('\r') && SendChar('\n');
    4ef0:	210d      	movs	r1, #13
    4ef2:	4620      	mov	r0, r4
    4ef4:	f001 fc30 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ef8:	2800      	cmp	r0, #0
    4efa:	f43f ad38 	beq.w	496e <main+0x2be>
    4efe:	210a      	movs	r1, #10
    4f00:	4620      	mov	r0, r4
    4f02:	f001 fc29 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f06:	e532      	b.n	496e <main+0x2be>
    4f08:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 50f8 <main+0xa48>
            if (!SendChar(buffer[iChar])) {
    4f0c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4f10:	4620      	mov	r0, r4
    4f12:	f001 fc21 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f16:	2800      	cmp	r0, #0
    4f18:	f43f ad24 	beq.w	4964 <main+0x2b4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4f1c:	4b6c      	ldr	r3, [pc, #432]	; (50d0 <main+0xa20>)
    4f1e:	455b      	cmp	r3, fp
    4f20:	d1f4      	bne.n	4f0c <main+0x85c>
        return SendChar('\r') && SendChar('\n');
    4f22:	210d      	movs	r1, #13
    4f24:	4620      	mov	r0, r4
    4f26:	f001 fc17 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f2a:	2800      	cmp	r0, #0
    4f2c:	f43f ad1a 	beq.w	4964 <main+0x2b4>
    4f30:	210a      	movs	r1, #10
    4f32:	4620      	mov	r0, r4
    4f34:	f001 fc10 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f38:	e514      	b.n	4964 <main+0x2b4>
    4f3a:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 50fc <main+0xa4c>
            if (!SendChar(buffer[iChar])) {
    4f3e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4f42:	4620      	mov	r0, r4
    4f44:	f001 fc08 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f48:	2800      	cmp	r0, #0
    4f4a:	f43f ad06 	beq.w	495a <main+0x2aa>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4f4e:	4b61      	ldr	r3, [pc, #388]	; (50d4 <main+0xa24>)
    4f50:	455b      	cmp	r3, fp
    4f52:	d1f4      	bne.n	4f3e <main+0x88e>
        return SendChar('\r') && SendChar('\n');
    4f54:	210d      	movs	r1, #13
    4f56:	4620      	mov	r0, r4
    4f58:	f001 fbfe 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f5c:	2800      	cmp	r0, #0
    4f5e:	f43f acfc 	beq.w	495a <main+0x2aa>
    4f62:	210a      	movs	r1, #10
    4f64:	4620      	mov	r0, r4
    4f66:	f001 fbf7 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f6a:	e4f6      	b.n	495a <main+0x2aa>
    4f6c:	f8df b190 	ldr.w	fp, [pc, #400]	; 5100 <main+0xa50>
            if (!SendChar(buffer[iChar])) {
    4f70:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4f74:	4620      	mov	r0, r4
    4f76:	f001 fbef 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f7a:	2800      	cmp	r0, #0
    4f7c:	f43f ace8 	beq.w	4950 <main+0x2a0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4f80:	4b55      	ldr	r3, [pc, #340]	; (50d8 <main+0xa28>)
    4f82:	459b      	cmp	fp, r3
    4f84:	d1f4      	bne.n	4f70 <main+0x8c0>
        return SendChar('\r') && SendChar('\n');
    4f86:	210d      	movs	r1, #13
    4f88:	4620      	mov	r0, r4
    4f8a:	f001 fbe5 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f8e:	2800      	cmp	r0, #0
    4f90:	f43f acde 	beq.w	4950 <main+0x2a0>
    4f94:	210a      	movs	r1, #10
    4f96:	4620      	mov	r0, r4
    4f98:	f001 fbde 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4f9c:	e4d8      	b.n	4950 <main+0x2a0>
    4f9e:	f8df b164 	ldr.w	fp, [pc, #356]	; 5104 <main+0xa54>
            if (!SendChar(buffer[iChar])) {
    4fa2:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4fa6:	4620      	mov	r0, r4
    4fa8:	f001 fbd6 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4fac:	2800      	cmp	r0, #0
    4fae:	f43f acca 	beq.w	4946 <main+0x296>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4fb2:	4b4a      	ldr	r3, [pc, #296]	; (50dc <main+0xa2c>)
    4fb4:	455b      	cmp	r3, fp
    4fb6:	d1f4      	bne.n	4fa2 <main+0x8f2>
        return SendChar('\r') && SendChar('\n');
    4fb8:	210d      	movs	r1, #13
    4fba:	4620      	mov	r0, r4
    4fbc:	f001 fbcc 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4fc0:	2800      	cmp	r0, #0
    4fc2:	f43f acc0 	beq.w	4946 <main+0x296>
    4fc6:	210a      	movs	r1, #10
    4fc8:	4620      	mov	r0, r4
    4fca:	f001 fbc5 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4fce:	e4ba      	b.n	4946 <main+0x296>
    4fd0:	f8df b120 	ldr.w	fp, [pc, #288]	; 50f4 <main+0xa44>
            if (!SendChar(buffer[iChar])) {
    4fd4:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4fd8:	4620      	mov	r0, r4
    4fda:	f001 fbbd 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4fde:	2800      	cmp	r0, #0
    4fe0:	f43f ae3b 	beq.w	4c5a <main+0x5aa>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4fe4:	4b39      	ldr	r3, [pc, #228]	; (50cc <main+0xa1c>)
    4fe6:	459b      	cmp	fp, r3
    4fe8:	d1f4      	bne.n	4fd4 <main+0x924>
        return SendChar('\r') && SendChar('\n');
    4fea:	210d      	movs	r1, #13
    4fec:	4620      	mov	r0, r4
    4fee:	f001 fbb3 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ff2:	2800      	cmp	r0, #0
    4ff4:	f43f ae31 	beq.w	4c5a <main+0x5aa>
    4ff8:	210a      	movs	r1, #10
    4ffa:	4620      	mov	r0, r4
    4ffc:	f001 fbac 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5000:	e62b      	b.n	4c5a <main+0x5aa>
    5002:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 50f8 <main+0xa48>
            if (!SendChar(buffer[iChar])) {
    5006:	f81b 1b01 	ldrb.w	r1, [fp], #1
    500a:	4620      	mov	r0, r4
    500c:	f001 fba4 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5010:	2800      	cmp	r0, #0
    5012:	f43f ae1d 	beq.w	4c50 <main+0x5a0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    5016:	4b2e      	ldr	r3, [pc, #184]	; (50d0 <main+0xa20>)
    5018:	455b      	cmp	r3, fp
    501a:	d1f4      	bne.n	5006 <main+0x956>
        return SendChar('\r') && SendChar('\n');
    501c:	210d      	movs	r1, #13
    501e:	4620      	mov	r0, r4
    5020:	f001 fb9a 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5024:	2800      	cmp	r0, #0
    5026:	f43f ae13 	beq.w	4c50 <main+0x5a0>
    502a:	210a      	movs	r1, #10
    502c:	4620      	mov	r0, r4
    502e:	f001 fb93 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5032:	e60d      	b.n	4c50 <main+0x5a0>
    5034:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 50fc <main+0xa4c>
            if (!SendChar(buffer[iChar])) {
    5038:	f81b 1b01 	ldrb.w	r1, [fp], #1
    503c:	4620      	mov	r0, r4
    503e:	f001 fb8b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5042:	2800      	cmp	r0, #0
    5044:	f43f adff 	beq.w	4c46 <main+0x596>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    5048:	4b22      	ldr	r3, [pc, #136]	; (50d4 <main+0xa24>)
    504a:	459b      	cmp	fp, r3
    504c:	d1f4      	bne.n	5038 <main+0x988>
        return SendChar('\r') && SendChar('\n');
    504e:	210d      	movs	r1, #13
    5050:	4620      	mov	r0, r4
    5052:	f001 fb81 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5056:	2800      	cmp	r0, #0
    5058:	f43f adf5 	beq.w	4c46 <main+0x596>
    505c:	210a      	movs	r1, #10
    505e:	4620      	mov	r0, r4
    5060:	f001 fb7a 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5064:	e5ef      	b.n	4c46 <main+0x596>
    5066:	f8df b098 	ldr.w	fp, [pc, #152]	; 5100 <main+0xa50>
            if (!SendChar(buffer[iChar])) {
    506a:	f81b 1b01 	ldrb.w	r1, [fp], #1
    506e:	4620      	mov	r0, r4
    5070:	f001 fb72 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5074:	2800      	cmp	r0, #0
    5076:	f43f ade1 	beq.w	4c3c <main+0x58c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    507a:	4b17      	ldr	r3, [pc, #92]	; (50d8 <main+0xa28>)
    507c:	455b      	cmp	r3, fp
    507e:	d1f4      	bne.n	506a <main+0x9ba>
        return SendChar('\r') && SendChar('\n');
    5080:	210d      	movs	r1, #13
    5082:	4620      	mov	r0, r4
    5084:	f001 fb68 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5088:	2800      	cmp	r0, #0
    508a:	f43f add7 	beq.w	4c3c <main+0x58c>
    508e:	210a      	movs	r1, #10
    5090:	4620      	mov	r0, r4
    5092:	f001 fb61 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5096:	e5d1      	b.n	4c3c <main+0x58c>
    5098:	f8df b068 	ldr.w	fp, [pc, #104]	; 5104 <main+0xa54>
            if (!SendChar(buffer[iChar])) {
    509c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    50a0:	4620      	mov	r0, r4
    50a2:	f001 fb59 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    50a6:	2800      	cmp	r0, #0
    50a8:	f43f adc3 	beq.w	4c32 <main+0x582>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    50ac:	4b0b      	ldr	r3, [pc, #44]	; (50dc <main+0xa2c>)
    50ae:	459b      	cmp	fp, r3
    50b0:	d1f4      	bne.n	509c <main+0x9ec>
        return SendChar('\r') && SendChar('\n');
    50b2:	210d      	movs	r1, #13
    50b4:	4620      	mov	r0, r4
    50b6:	f001 fb4f 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    50ba:	2800      	cmp	r0, #0
    50bc:	f43f adb9 	beq.w	4c32 <main+0x582>
    50c0:	210a      	movs	r1, #10
    50c2:	4620      	mov	r0, r4
    50c4:	f001 fb48 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    50c8:	e5b3      	b.n	4c32 <main+0x582>
    50ca:	bf00      	nop
    50cc:	00023608 	.word	0x00023608
    50d0:	000235e6 	.word	0x000235e6
    50d4:	000235c4 	.word	0x000235c4
    50d8:	000235a0 	.word	0x000235a0
    50dc:	0002357e 	.word	0x0002357e
    50e0:	000236e0 	.word	0x000236e0
    50e4:	00023550 	.word	0x00023550
    50e8:	000236f8 	.word	0x000236f8
    50ec:	00023738 	.word	0x00023738
    50f0:	0002360c 	.word	0x0002360c
    50f4:	000235e8 	.word	0x000235e8
    50f8:	000235c8 	.word	0x000235c8
    50fc:	000235a4 	.word	0x000235a4
    5100:	00023580 	.word	0x00023580
    5104:	00023564 	.word	0x00023564
    5108:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 5404 <main+0xd54>
            if (!SendChar(buffer[iChar])) {
    510c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    5110:	4620      	mov	r0, r4
    5112:	f001 fb21 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5116:	2800      	cmp	r0, #0
    5118:	f43f ad1d 	beq.w	4b56 <main+0x4a6>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    511c:	4bb3      	ldr	r3, [pc, #716]	; (53ec <main+0xd3c>)
    511e:	455b      	cmp	r3, fp
    5120:	d1f4      	bne.n	510c <main+0xa5c>
        return SendChar('\r') && SendChar('\n');
    5122:	210d      	movs	r1, #13
    5124:	4620      	mov	r0, r4
    5126:	f001 fb17 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    512a:	2800      	cmp	r0, #0
    512c:	f43f ad13 	beq.w	4b56 <main+0x4a6>
    5130:	210a      	movs	r1, #10
    5132:	4620      	mov	r0, r4
    5134:	f001 fb10 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
	if(motor.AlertReg().bit.MotionCanceledPositiveLimit){
    5138:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    513c:	0799      	lsls	r1, r3, #30
    513e:	f57f ad0f 	bpl.w	4b60 <main+0x4b0>
    5142:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 5408 <main+0xd58>
            if (!SendChar(buffer[iChar])) {
    5146:	f81b 1b01 	ldrb.w	r1, [fp], #1
    514a:	4620      	mov	r0, r4
    514c:	f001 fb04 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5150:	2800      	cmp	r0, #0
    5152:	f43f ad05 	beq.w	4b60 <main+0x4b0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    5156:	4ba6      	ldr	r3, [pc, #664]	; (53f0 <main+0xd40>)
    5158:	455b      	cmp	r3, fp
    515a:	d1f4      	bne.n	5146 <main+0xa96>
        return SendChar('\r') && SendChar('\n');
    515c:	210d      	movs	r1, #13
    515e:	4620      	mov	r0, r4
    5160:	f001 fafa 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5164:	2800      	cmp	r0, #0
    5166:	f43f acfb 	beq.w	4b60 <main+0x4b0>
    516a:	210a      	movs	r1, #10
    516c:	4620      	mov	r0, r4
    516e:	f001 faf3 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
	if(motor.AlertReg().bit.MotionCanceledNegativeLimit){
    5172:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    5176:	075a      	lsls	r2, r3, #29
    5178:	f57f acf7 	bpl.w	4b6a <main+0x4ba>
    517c:	f8df b28c 	ldr.w	fp, [pc, #652]	; 540c <main+0xd5c>
            if (!SendChar(buffer[iChar])) {
    5180:	f81b 1b01 	ldrb.w	r1, [fp], #1
    5184:	4620      	mov	r0, r4
    5186:	f001 fae7 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    518a:	2800      	cmp	r0, #0
    518c:	f43f aced 	beq.w	4b6a <main+0x4ba>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    5190:	4b98      	ldr	r3, [pc, #608]	; (53f4 <main+0xd44>)
    5192:	455b      	cmp	r3, fp
    5194:	d1f4      	bne.n	5180 <main+0xad0>
        return SendChar('\r') && SendChar('\n');
    5196:	210d      	movs	r1, #13
    5198:	4620      	mov	r0, r4
    519a:	f001 fadd 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    519e:	2800      	cmp	r0, #0
    51a0:	f43f ace3 	beq.w	4b6a <main+0x4ba>
    51a4:	210a      	movs	r1, #10
    51a6:	4620      	mov	r0, r4
    51a8:	f001 fad6 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
	if(motor.AlertReg().bit.MotionCanceledSensorEStop){
    51ac:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    51b0:	071b      	lsls	r3, r3, #28
    51b2:	f57f acdf 	bpl.w	4b74 <main+0x4c4>
    51b6:	f8df b258 	ldr.w	fp, [pc, #600]	; 5410 <main+0xd60>
            if (!SendChar(buffer[iChar])) {
    51ba:	f81b 1b01 	ldrb.w	r1, [fp], #1
    51be:	4620      	mov	r0, r4
    51c0:	f001 faca 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    51c4:	2800      	cmp	r0, #0
    51c6:	f43f acd5 	beq.w	4b74 <main+0x4c4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    51ca:	4b8b      	ldr	r3, [pc, #556]	; (53f8 <main+0xd48>)
    51cc:	455b      	cmp	r3, fp
    51ce:	d1f4      	bne.n	51ba <main+0xb0a>
        return SendChar('\r') && SendChar('\n');
    51d0:	210d      	movs	r1, #13
    51d2:	4620      	mov	r0, r4
    51d4:	f001 fac0 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    51d8:	2800      	cmp	r0, #0
    51da:	f43f accb 	beq.w	4b74 <main+0x4c4>
    51de:	210a      	movs	r1, #10
    51e0:	4620      	mov	r0, r4
    51e2:	f001 fab9 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
	if(motor.AlertReg().bit.MotionCanceledMotorDisabled){
    51e6:	f8b9 3128 	ldrh.w	r3, [r9, #296]	; 0x128
    51ea:	06d8      	lsls	r0, r3, #27
    51ec:	f57f acc7 	bpl.w	4b7e <main+0x4ce>
    51f0:	f8df b220 	ldr.w	fp, [pc, #544]	; 5414 <main+0xd64>
            if (!SendChar(buffer[iChar])) {
    51f4:	f81b 1b01 	ldrb.w	r1, [fp], #1
    51f8:	4620      	mov	r0, r4
    51fa:	f001 faad 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    51fe:	2800      	cmp	r0, #0
    5200:	f43f acbd 	beq.w	4b7e <main+0x4ce>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    5204:	4b7d      	ldr	r3, [pc, #500]	; (53fc <main+0xd4c>)
    5206:	459b      	cmp	fp, r3
    5208:	d1f4      	bne.n	51f4 <main+0xb44>
        return SendChar('\r') && SendChar('\n');
    520a:	210d      	movs	r1, #13
    520c:	4620      	mov	r0, r4
    520e:	f001 faa3 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5212:	2800      	cmp	r0, #0
    5214:	f43f acb3 	beq.w	4b7e <main+0x4ce>
    5218:	210a      	movs	r1, #10
    521a:	4620      	mov	r0, r4
    521c:	f001 fa9c 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5220:	e4ad      	b.n	4b7e <main+0x4ce>
    5222:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 5410 <main+0xd60>
            if (!SendChar(buffer[iChar])) {
    5226:	f81b 1b01 	ldrb.w	r1, [fp], #1
    522a:	4620      	mov	r0, r4
    522c:	f001 fa94 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5230:	2800      	cmp	r0, #0
    5232:	f43f ac31 	beq.w	4a98 <main+0x3e8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    5236:	4b70      	ldr	r3, [pc, #448]	; (53f8 <main+0xd48>)
    5238:	455b      	cmp	r3, fp
    523a:	d1f4      	bne.n	5226 <main+0xb76>
        return SendChar('\r') && SendChar('\n');
    523c:	210d      	movs	r1, #13
    523e:	4620      	mov	r0, r4
    5240:	f001 fa8a 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5244:	2800      	cmp	r0, #0
    5246:	f43f ac27 	beq.w	4a98 <main+0x3e8>
    524a:	210a      	movs	r1, #10
    524c:	4620      	mov	r0, r4
    524e:	f001 fa83 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5252:	e421      	b.n	4a98 <main+0x3e8>
    5254:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 540c <main+0xd5c>
            if (!SendChar(buffer[iChar])) {
    5258:	f81b 1b01 	ldrb.w	r1, [fp], #1
    525c:	4620      	mov	r0, r4
    525e:	f001 fa7b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5262:	2800      	cmp	r0, #0
    5264:	f43f ac13 	beq.w	4a8e <main+0x3de>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    5268:	4b62      	ldr	r3, [pc, #392]	; (53f4 <main+0xd44>)
    526a:	459b      	cmp	fp, r3
    526c:	d1f4      	bne.n	5258 <main+0xba8>
        return SendChar('\r') && SendChar('\n');
    526e:	210d      	movs	r1, #13
    5270:	4620      	mov	r0, r4
    5272:	f001 fa71 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5276:	2800      	cmp	r0, #0
    5278:	f43f ac09 	beq.w	4a8e <main+0x3de>
    527c:	210a      	movs	r1, #10
    527e:	4620      	mov	r0, r4
    5280:	f001 fa6a 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5284:	e403      	b.n	4a8e <main+0x3de>
    5286:	f8df b180 	ldr.w	fp, [pc, #384]	; 5408 <main+0xd58>
            if (!SendChar(buffer[iChar])) {
    528a:	f81b 1b01 	ldrb.w	r1, [fp], #1
    528e:	4620      	mov	r0, r4
    5290:	f001 fa62 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5294:	2800      	cmp	r0, #0
    5296:	f43f abf5 	beq.w	4a84 <main+0x3d4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    529a:	4b55      	ldr	r3, [pc, #340]	; (53f0 <main+0xd40>)
    529c:	459b      	cmp	fp, r3
    529e:	d1f4      	bne.n	528a <main+0xbda>
        return SendChar('\r') && SendChar('\n');
    52a0:	210d      	movs	r1, #13
    52a2:	4620      	mov	r0, r4
    52a4:	f001 fa58 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    52a8:	2800      	cmp	r0, #0
    52aa:	f43f abeb 	beq.w	4a84 <main+0x3d4>
    52ae:	210a      	movs	r1, #10
    52b0:	4620      	mov	r0, r4
    52b2:	f001 fa51 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    52b6:	f7ff bbe5 	b.w	4a84 <main+0x3d4>
    52ba:	f8df b148 	ldr.w	fp, [pc, #328]	; 5404 <main+0xd54>
            if (!SendChar(buffer[iChar])) {
    52be:	f81b 1b01 	ldrb.w	r1, [fp], #1
    52c2:	4620      	mov	r0, r4
    52c4:	f001 fa48 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    52c8:	2800      	cmp	r0, #0
    52ca:	f43f abd6 	beq.w	4a7a <main+0x3ca>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    52ce:	4b47      	ldr	r3, [pc, #284]	; (53ec <main+0xd3c>)
    52d0:	455b      	cmp	r3, fp
    52d2:	d1f4      	bne.n	52be <main+0xc0e>
        return SendChar('\r') && SendChar('\n');
    52d4:	210d      	movs	r1, #13
    52d6:	4620      	mov	r0, r4
    52d8:	f001 fa3e 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    52dc:	2800      	cmp	r0, #0
    52de:	f43f abcc 	beq.w	4a7a <main+0x3ca>
    52e2:	210a      	movs	r1, #10
    52e4:	4620      	mov	r0, r4
    52e6:	f001 fa37 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    52ea:	f7ff bbc6 	b.w	4a7a <main+0x3ca>
    52ee:	210a      	movs	r1, #10
    52f0:	4620      	mov	r0, r4
    52f2:	f001 fa31 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    52f6:	f7ff bbaa 	b.w	4a4e <main+0x39e>
    52fa:	210a      	movs	r1, #10
    52fc:	4620      	mov	r0, r4
    52fe:	f001 fa2b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5302:	f7ff bbb5 	b.w	4a70 <main+0x3c0>
    5306:	210a      	movs	r1, #10
    5308:	4620      	mov	r0, r4
    530a:	f001 fa25 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    530e:	e47a      	b.n	4c06 <main+0x556>
    5310:	210a      	movs	r1, #10
    5312:	4620      	mov	r0, r4
    5314:	f001 fa20 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5318:	e486      	b.n	4c28 <main+0x578>
    531a:	210a      	movs	r1, #10
    531c:	4620      	mov	r0, r4
    531e:	f001 fa1b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5322:	e4af      	b.n	4c84 <main+0x5d4>
    5324:	210a      	movs	r1, #10
    5326:	4620      	mov	r0, r4
    5328:	f001 fa16 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    532c:	e4bb      	b.n	4ca6 <main+0x5f6>
    532e:	210a      	movs	r1, #10
    5330:	4620      	mov	r0, r4
    5332:	f001 fa11 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5336:	f7ff bac2 	b.w	48be <main+0x20e>
    533a:	210a      	movs	r1, #10
    533c:	4620      	mov	r0, r4
    533e:	f001 fa0b 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5342:	f7ff bacd 	b.w	48e0 <main+0x230>
    5346:	210a      	movs	r1, #10
    5348:	4620      	mov	r0, r4
    534a:	f001 fa05 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    534e:	f7ff bae4 	b.w	491a <main+0x26a>
    5352:	210a      	movs	r1, #10
    5354:	4620      	mov	r0, r4
    5356:	f001 f9ff 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    535a:	f7ff baef 	b.w	493c <main+0x28c>
    535e:	210a      	movs	r1, #10
    5360:	4620      	mov	r0, r4
    5362:	f001 f9f9 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5366:	e420      	b.n	4baa <main+0x4fa>
    5368:	210a      	movs	r1, #10
    536a:	4620      	mov	r0, r4
    536c:	f001 f9f4 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5370:	f7ff bbec 	b.w	4b4c <main+0x49c>
    5374:	210a      	movs	r1, #10
    5376:	4620      	mov	r0, r4
    5378:	f001 f9ee 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    537c:	e426      	b.n	4bcc <main+0x51c>
    537e:	210a      	movs	r1, #10
    5380:	4620      	mov	r0, r4
    5382:	f001 f9e9 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5386:	f7ff bbd0 	b.w	4b2a <main+0x47a>
    538a:	210a      	movs	r1, #10
    538c:	4620      	mov	r0, r4
    538e:	f001 f9e3 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    5392:	f7ff bb9c 	b.w	4ace <main+0x41e>
    5396:	210a      	movs	r1, #10
    5398:	4620      	mov	r0, r4
    539a:	f001 f9dd 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    539e:	f7ff bba7 	b.w	4af0 <main+0x440>
    53a2:	210a      	movs	r1, #10
    53a4:	4620      	mov	r0, r4
    53a6:	f001 f9d7 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    53aa:	f7ff baf6 	b.w	499a <main+0x2ea>
    53ae:	210a      	movs	r1, #10
    53b0:	4620      	mov	r0, r4
    53b2:	f001 f9d1 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    53b6:	f7ff bb01 	b.w	49bc <main+0x30c>
    53ba:	210a      	movs	r1, #10
    53bc:	4620      	mov	r0, r4
    53be:	f001 f9cb 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    53c2:	f7ff ba3c 	b.w	483e <main+0x18e>
    53c6:	210a      	movs	r1, #10
    53c8:	4620      	mov	r0, r4
    53ca:	f001 f9c5 	bl	6758 <_ZN9ClearCore9SerialUsb8SendCharEh>
    53ce:	f7ff ba47 	b.w	4860 <main+0x1b0>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    53d2:	f004 ffef 	bl	a3b4 <Milliseconds>
    53d6:	1b40      	subs	r0, r0, r5
    53d8:	42a0      	cmp	r0, r4
    53da:	f67f a99e 	bls.w	471a <main+0x6a>
    53de:	f7ff b9a2 	b.w	4726 <main+0x76>
		SerialPort.SendLine("Motor Ready");	
    53e2:	4807      	ldr	r0, [pc, #28]	; (5400 <main+0xd50>)
    53e4:	f7fe ff76 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    53e8:	f7ff b9c8 	b.w	477c <main+0xcc>
    53ec:	0002357e 	.word	0x0002357e
    53f0:	000235a0 	.word	0x000235a0
    53f4:	000235c4 	.word	0x000235c4
    53f8:	000235e6 	.word	0x000235e6
    53fc:	00023608 	.word	0x00023608
    5400:	000237b0 	.word	0x000237b0
    5404:	00023564 	.word	0x00023564
    5408:	00023580 	.word	0x00023580
    540c:	000235a4 	.word	0x000235a4
    5410:	000235c8 	.word	0x000235c8
    5414:	000235e8 	.word	0x000235e8

00005418 <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    5418:	2000      	movs	r0, #0
    541a:	4770      	bx	lr

0000541c <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    541c:	f990 0018 	ldrsb.w	r0, [r0, #24]
    5420:	4770      	bx	lr
    5422:	bf00      	nop

00005424 <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    5424:	2006      	movs	r0, #6
    5426:	4770      	bx	lr

00005428 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    5428:	2001      	movs	r0, #1
    542a:	4770      	bx	lr

0000542c <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    542c:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    5430:	4770      	bx	lr
    5432:	bf00      	nop

00005434 <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    5434:	7980      	ldrb	r0, [r0, #6]
    5436:	4770      	bx	lr

00005438 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    5438:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    543a:	7983      	ldrb	r3, [r0, #6]
    543c:	428b      	cmp	r3, r1
    543e:	f000 80a7 	beq.w	5590 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    5442:	f1a1 0309 	sub.w	r3, r1, #9
    5446:	460d      	mov	r5, r1
    5448:	4604      	mov	r4, r0
    544a:	2b03      	cmp	r3, #3
    544c:	f200 80a2 	bhi.w	5594 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    5450:	e8df f003 	tbb	[pc, r3]
    5454:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    5458:	3030      	adds	r0, #48	; 0x30
    545a:	f006 fe85 	bl	c168 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    545e:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    5460:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    5464:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    5466:	2200      	movs	r2, #0
    5468:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    546c:	b13b      	cbz	r3, 547e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    546e:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    5472:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    5476:	680b      	ldr	r3, [r1, #0]
    5478:	4013      	ands	r3, r2
    547a:	d1fc      	bne.n	5476 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    547c:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    547e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    5482:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    5484:	2200      	movs	r2, #0
    5486:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    548a:	b13b      	cbz	r3, 549c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    548c:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    5490:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5494:	680b      	ldr	r3, [r1, #0]
    5496:	4013      	ands	r3, r2
    5498:	d1fc      	bne.n	5494 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    549a:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    549c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    54a0:	4a3d      	ldr	r2, [pc, #244]	; (5598 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    54a2:	f991 3001 	ldrsb.w	r3, [r1, #1]
    54a6:	7889      	ldrb	r1, [r1, #2]
    54a8:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    54ac:	440b      	add	r3, r1
            m_mode = newMode;
    54ae:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    54b0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    54b4:	f041 0101 	orr.w	r1, r1, #1
    54b8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    54bc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    54c0:	f991 3001 	ldrsb.w	r3, [r1, #1]
    54c4:	7889      	ldrb	r1, [r1, #2]
    54c6:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    54ca:	440b      	add	r3, r1
    54cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    54d0:	f042 0201 	orr.w	r2, r2, #1
    54d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    54d8:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    54da:	b662      	cpsie	i
    return true;
    54dc:	2001      	movs	r0, #1
    54de:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    54e0:	3030      	adds	r0, #48	; 0x30
    54e2:	f006 fe41 	bl	c168 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    54e6:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    54e8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    54ec:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    54ee:	2200      	movs	r2, #0
    54f0:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    54f4:	b13b      	cbz	r3, 5506 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    54f6:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    54fa:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    54fe:	680b      	ldr	r3, [r1, #0]
    5500:	4013      	ands	r3, r2
    5502:	d1fc      	bne.n	54fe <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    5504:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5506:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    550a:	4a23      	ldr	r2, [pc, #140]	; (5598 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    550c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5510:	7889      	ldrb	r1, [r1, #2]
    5512:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    5516:	440b      	add	r3, r1
    5518:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    551c:	f36f 0100 	bfc	r1, #0, #1
    5520:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5524:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5528:	f991 3001 	ldrsb.w	r3, [r1, #1]
    552c:	7889      	ldrb	r1, [r1, #2]
    552e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    5532:	440b      	add	r3, r1
    5534:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5538:	f042 0201 	orr.w	r2, r2, #1
    553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    5540:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    5542:	b662      	cpsie	i
    return true;
    5544:	2001      	movs	r0, #1
    5546:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    5548:	3030      	adds	r0, #48	; 0x30
    554a:	f006 fe0d 	bl	c168 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    554e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5552:	4a11      	ldr	r2, [pc, #68]	; (5598 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    5554:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5558:	7889      	ldrb	r1, [r1, #2]
    555a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    555e:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5560:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5562:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    5566:	f36f 0100 	bfc	r1, #0, #1
    556a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    556e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5572:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5576:	7889      	ldrb	r1, [r1, #2]
    5578:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    557c:	440b      	add	r3, r1
    return true;
    557e:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5580:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5584:	f36f 0200 	bfc	r2, #0, #1
    5588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    558c:	71a5      	strb	r5, [r4, #6]
            break;
    558e:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    5590:	2001      	movs	r0, #1
    5592:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    5594:	2000      	movs	r0, #0
}
    5596:	bd38      	pop	{r3, r4, r5, pc}
    5598:	41008000 	.word	0x41008000

0000559c <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    559c:	7983      	ldrb	r3, [r0, #6]
    559e:	2b0a      	cmp	r3, #10
    55a0:	d00f      	beq.n	55c2 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    55a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    55a6:	b1a3      	cbz	r3, 55d2 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    55a8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    55ac:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    55b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
    55b4:	01db      	lsls	r3, r3, #7
    55b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    55ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    55be:	615a      	str	r2, [r3, #20]
    55c0:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    55c2:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    55c6:	079b      	lsls	r3, r3, #30
    55c8:	d5eb      	bpl.n	55a2 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    55ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    55ce:	2b00      	cmp	r3, #0
    55d0:	d0ea      	beq.n	55a8 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    55d2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    55d6:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    55da:	f993 3001 	ldrsb.w	r3, [r3, #1]
    55de:	01db      	lsls	r3, r3, #7
    55e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    55e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    55e8:	619a      	str	r2, [r3, #24]
    55ea:	4770      	bx	lr

000055ec <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    55ec:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    55f0:	e7d4      	b.n	559c <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    55f2:	bf00      	nop

000055f4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    55f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55f8:	9f08      	ldr	r7, [sp, #32]
    55fa:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    55fe:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    5602:	4604      	mov	r4, r0
    5604:	4616      	mov	r6, r2
    5606:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    5608:	463a      	mov	r2, r7
    560a:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    560c:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    560e:	f009 fd1b 	bl	f048 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    5612:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5616:	f006 fd75 	bl	c104 <_ZN9ClearCore13StepGeneratorC1Ev>
    561a:	4b5c      	ldr	r3, [pc, #368]	; (578c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    561c:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    5620:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    5624:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    5628:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    562c:	6322      	str	r2, [r4, #48]	; 0x30
    562e:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    5632:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    5634:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    5636:	f8df a160 	ldr.w	sl, [pc, #352]	; 5798 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    563a:	4f55      	ldr	r7, [pc, #340]	; (5790 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    563c:	2101      	movs	r1, #1
    563e:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    5642:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    5646:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    5648:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    564c:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    5650:	f04f 0e02 	mov.w	lr, #2
    5654:	2200      	movs	r2, #0
    5656:	f64f 70ff 	movw	r0, #65535	; 0xffff
    565a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    565e:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    5662:	f04f 33ff 	mov.w	r3, #4294967295
    5666:	f04f 0e19 	mov.w	lr, #25
    566a:	f04f 0903 	mov.w	r9, #3
    566e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    5672:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    5676:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    567a:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    567e:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    5682:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    5686:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    568a:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    568e:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    5692:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    5696:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    569a:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    569e:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    56a2:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    56a6:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    56aa:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    56ae:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    56b2:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    56b6:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    56ba:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    56be:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    56c2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    56c6:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    56ca:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    56ce:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    56d2:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    56d6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    56da:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    56de:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    56e2:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    56e6:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    56ea:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    56ee:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    56f2:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    56f6:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    56fa:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    56fe:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    5700:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    5704:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    5708:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    570c:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    570e:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    5710:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    5714:	2b04      	cmp	r3, #4
    5716:	bf9c      	itt	ls
    5718:	4a1e      	ldrls	r2, [pc, #120]	; (5794 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    571a:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    571c:	fbb6 f1f2 	udiv	r1, r6, r2
    5720:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5724:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5728:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    572a:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    572e:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5732:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5736:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    573a:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    573c:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    5740:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5744:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5748:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    574a:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    574c:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    5750:	2a04      	cmp	r2, #4
    5752:	bf9a      	itte	ls
    5754:	4b0f      	ldrls	r3, [pc, #60]	; (5794 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    5756:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5758:	2200      	movhi	r2, #0
    575a:	fbb0 f3f2 	udiv	r3, r0, r2
    575e:	fb02 0313 	mls	r3, r2, r3, r0
    5762:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5764:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5768:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    576c:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5770:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5774:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    5778:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    577a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    577e:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5782:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    5786:	4620      	mov	r0, r4
    5788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    578c:	000237e0 	.word	0x000237e0
    5790:	000237c4 	.word	0x000237c4
    5794:	000237bc 	.word	0x000237bc
    5798:	c61c3c00 	.word	0xc61c3c00

0000579c <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb>:
                                     bool blockUntilDone) {
    579c:	b470      	push	{r4, r5, r6}
    if (!EnableRequest() || m_inFault) {
    579e:	f890 4100 	ldrb.w	r4, [r0, #256]	; 0x100
    57a2:	b114      	cbz	r4, 57aa <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0xe>
    57a4:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
    57a8:	b10c      	cbz	r4, 57ae <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x12>
}
    57aa:	bc70      	pop	{r4, r5, r6}
    57ac:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    57ae:	b672      	cpsid	i
    if (m_enableTriggerActive) {
    57b0:	f890 4101 	ldrb.w	r4, [r0, #257]	; 0x101
    57b4:	b95c      	cbnz	r4, 57ce <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x32>
    else if (pulseCount) {
    57b6:	b989      	cbnz	r1, 57dc <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x40>
    m_enableTriggerPulseLenMs = time_ms;
    57b8:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
    57bc:	b662      	cpsie	i
    if (blockUntilDone) {
    57be:	2b00      	cmp	r3, #0
    57c0:	d0f3      	beq.n	57aa <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0xe>
        while (EnableTriggerPulseActive()) {
    57c2:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    57c6:	2b00      	cmp	r3, #0
    57c8:	d1fb      	bne.n	57c2 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x26>
}
    57ca:	bc70      	pop	{r4, r5, r6}
    57cc:	4770      	bx	lr
        m_enableTriggerPulseCount += (pulseCount * 2);
    57ce:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    57d2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    57d6:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    57da:	e7ed      	b.n	57b8 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x1c>
        m_enableTriggerPulseStartMs = TimingMgr.Milliseconds();
    57dc:	4d0c      	ldr	r5, [pc, #48]	; (5810 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x74>)

        \param[in] fldsToToggle Union of fields in the shift register to
                   be toggled.
    **/
    void ShifterStateToggle(ShiftChain fldsToToggle) {
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    57de:	4c0d      	ldr	r4, [pc, #52]	; (5814 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x78>)
    57e0:	682d      	ldr	r5, [r5, #0]
    57e2:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
    57e6:	692d      	ldr	r5, [r5, #16]
    57e8:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
        m_enableTriggerPulseCount = (pulseCount * 2);
    57ec:	0049      	lsls	r1, r1, #1
        m_enableTriggerActive = true;
    57ee:	2501      	movs	r5, #1
        m_enableTriggerPulseCount = (pulseCount * 2);
    57f0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
        m_enableTriggerActive = true;
    57f4:	f880 5101 	strb.w	r5, [r0, #257]	; 0x101
    57f8:	f3bf 8f5b 	dmb	ish
    57fc:	e854 1f00 	ldrex	r1, [r4]
    5800:	4071      	eors	r1, r6
    5802:	e844 1500 	strex	r5, r1, [r4]
    5806:	2d00      	cmp	r5, #0
    5808:	d1f8      	bne.n	57fc <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x60>
    580a:	f3bf 8f5b 	dmb	ish
    580e:	e7d3      	b.n	57b8 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x1c>
    5810:	20001be4 	.word	0x20001be4
    5814:	20001ac4 	.word	0x20001ac4

00005818 <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    5818:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    581a:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    581e:	b083      	sub	sp, #12
    5820:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5822:	2b00      	cmp	r3, #0
    5824:	d171      	bne.n	590a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    5826:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    582a:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    582e:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    5832:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5836:	428a      	cmp	r2, r1
    5838:	d031      	beq.n	589e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    583a:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    583e:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5842:	2200      	movs	r2, #0
    5844:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5848:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    584c:	b358      	cbz	r0, 58a6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    584e:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    5850:	b672      	cpsid	i
    if (wasDisabled && value) {
    5852:	b36b      	cbz	r3, 58b0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    5854:	b371      	cbz	r1, 58b4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    5856:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    585a:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    585c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5860:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5864:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5866:	79a3      	ldrb	r3, [r4, #6]
    5868:	2b0a      	cmp	r3, #10
    586a:	d02a      	beq.n	58c2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    586c:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5870:	428b      	cmp	r3, r1
    5872:	d035      	beq.n	58e0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    5874:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5878:	2900      	cmp	r1, #0
    587a:	d13b      	bne.n	58f4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    587c:	f3bf 8f5b 	dmb	ish
    5880:	4a2d      	ldr	r2, [pc, #180]	; (5938 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    5882:	43db      	mvns	r3, r3
    5884:	e852 0f00 	ldrex	r0, [r2]
    5888:	4018      	ands	r0, r3
    588a:	e842 0500 	strex	r5, r0, [r2]
    588e:	2d00      	cmp	r5, #0
    5890:	d1f8      	bne.n	5884 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    5892:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5896:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    589a:	b003      	add	sp, #12
    589c:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    589e:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    58a2:	2a00      	cmp	r2, #0
    58a4:	d133      	bne.n	590e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    58a6:	2900      	cmp	r1, #0
    58a8:	d0d1      	beq.n	584e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    58aa:	b672      	cpsid	i
    if (wasDisabled && value) {
    58ac:	2b00      	cmp	r3, #0
    58ae:	d1d1      	bne.n	5854 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    58b0:	2900      	cmp	r1, #0
    58b2:	d1d7      	bne.n	5864 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    58b4:	2300      	movs	r3, #0
    58b6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    58ba:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    58bc:	79a3      	ldrb	r3, [r4, #6]
    58be:	2b0a      	cmp	r3, #10
    58c0:	d1d4      	bne.n	586c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    58c2:	b919      	cbnz	r1, 58cc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    58c4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    58c8:	079a      	lsls	r2, r3, #30
    58ca:	d428      	bmi.n	591e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    58cc:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    58d0:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    58d2:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    58d6:	bf48      	it	mi
    58d8:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    58dc:	428b      	cmp	r3, r1
    58de:	d1c9      	bne.n	5874 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    58e0:	2d00      	cmp	r5, #0
    58e2:	d0d8      	beq.n	5896 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    58e4:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    58e8:	2b00      	cmp	r3, #0
    58ea:	d1d4      	bne.n	5896 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    58ec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    58f0:	2900      	cmp	r1, #0
    58f2:	d0c3      	beq.n	587c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    58f4:	f3bf 8f5b 	dmb	ish
    58f8:	4a0f      	ldr	r2, [pc, #60]	; (5938 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    58fa:	e852 0f00 	ldrex	r0, [r2]
    58fe:	4318      	orrs	r0, r3
    5900:	e842 0500 	strex	r5, r0, [r2]
    5904:	2d00      	cmp	r5, #0
    5906:	d0c4      	beq.n	5892 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    5908:	e7f7      	b.n	58fa <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    590a:	2300      	movs	r3, #0
    590c:	e78f      	b.n	582e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    590e:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    5910:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5914:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5918:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    591c:	e797      	b.n	584e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    591e:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5922:	9101      	str	r1, [sp, #4]
    5924:	f043 0310 	orr.w	r3, r3, #16
    5928:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    592c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5930:	f006 fc1a 	bl	c168 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5934:	9901      	ldr	r1, [sp, #4]
    5936:	e7c9      	b.n	58cc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    5938:	20001ac4 	.word	0x20001ac4

0000593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    593c:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5940:	2b00      	cmp	r3, #0
    5942:	d04a      	beq.n	59da <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5944:	4a35      	ldr	r2, [pc, #212]	; (5a1c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    5946:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    594a:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    594c:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    594e:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    5950:	b98b      	cbnz	r3, 5976 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    5952:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5956:	2b01      	cmp	r3, #1
    5958:	d022      	beq.n	59a0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    595a:	2b02      	cmp	r3, #2
    595c:	d13b      	bne.n	59d6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    595e:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    5962:	2b00      	cmp	r3, #0
    5964:	d145      	bne.n	59f2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    5966:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    596a:	2b00      	cmp	r3, #0
    596c:	d13c      	bne.n	59e8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    596e:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5972:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    5976:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    597a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    597e:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    5980:	428b      	cmp	r3, r1
    5982:	d32b      	bcc.n	59dc <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    5984:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    5988:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    598c:	3b01      	subs	r3, #1
    598e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5992:	b94b      	cbnz	r3, 59a8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    5994:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    5998:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    599c:	2b01      	cmp	r3, #1
    599e:	d1dc      	bne.n	595a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    59a0:	2302      	movs	r3, #2
    59a2:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    59a6:	e7da      	b.n	595e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    59a8:	4b1d      	ldr	r3, [pc, #116]	; (5a20 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    59aa:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    59ae:	f3bf 8f5b 	dmb	ish
    59b2:	e853 1f00 	ldrex	r1, [r3]
    59b6:	4051      	eors	r1, r2
    59b8:	e843 1e00 	strex	lr, r1, [r3]
    59bc:	f1be 0f00 	cmp.w	lr, #0
    59c0:	d1f7      	bne.n	59b2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    59c2:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    59c6:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    59ca:	2b01      	cmp	r3, #1
    59cc:	d1c5      	bne.n	595a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    59ce:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    59d2:	2b00      	cmp	r3, #0
    59d4:	d0e4      	beq.n	59a0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    59d6:	f85d fb04 	ldr.w	pc, [sp], #4
    59da:	4770      	bx	lr
    switch (m_clearFaultState) {
    59dc:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    59e0:	2b02      	cmp	r3, #2
    59e2:	d0bc      	beq.n	595e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    59e4:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    59e8:	3b01      	subs	r3, #1
    59ea:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    59ee:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    59f2:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    59f4:	f500 7394 	add.w	r3, r0, #296	; 0x128
    59f8:	f3bf 8f5b 	dmb	ish
    59fc:	e853 1f00 	ldrex	r1, [r3]
    5a00:	f021 0120 	bic.w	r1, r1, #32
    5a04:	e843 1e00 	strex	lr, r1, [r3]
    5a08:	f1be 0f00 	cmp.w	lr, #0
    5a0c:	d1f6      	bne.n	59fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    5a0e:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5a12:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    5a16:	f85d fb04 	ldr.w	pc, [sp], #4
    5a1a:	bf00      	nop
    5a1c:	20001be4 	.word	0x20001be4
    5a20:	20001ac4 	.word	0x20001ac4

00005a24 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5a24:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    5a28:	b570      	push	{r4, r5, r6, lr}
    5a2a:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    5a2c:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5a30:	2b00      	cmp	r3, #0
    5a32:	d163      	bne.n	5afc <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    5a34:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    5a38:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    5a3c:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5a40:	bb39      	cbnz	r1, 5a92 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    5a42:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    5a46:	b672      	cpsid	i
    if (wasDisabled && value) {
    5a48:	b35b      	cbz	r3, 5aa2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    5a4a:	b365      	cbz	r5, 5aa6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    5a4c:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    5a50:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5a52:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5a56:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5a5a:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5a5c:	79a3      	ldrb	r3, [r4, #6]
    5a5e:	2b0a      	cmp	r3, #10
    5a60:	d028      	beq.n	5ab4 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5a62:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5a66:	42ab      	cmp	r3, r5
    5a68:	d033      	beq.n	5ad2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    5a6a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5a6e:	2d00      	cmp	r5, #0
    5a70:	d139      	bne.n	5ae6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5a72:	f3bf 8f5b 	dmb	ish
    5a76:	4a28      	ldr	r2, [pc, #160]	; (5b18 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5a78:	43db      	mvns	r3, r3
    5a7a:	e852 1f00 	ldrex	r1, [r2]
    5a7e:	4019      	ands	r1, r3
    5a80:	e842 1000 	strex	r0, r1, [r2]
    5a84:	2800      	cmp	r0, #0
    5a86:	d1f8      	bne.n	5a7a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    5a88:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5a8c:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    5a90:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    5a92:	2500      	movs	r5, #0
    5a94:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5a98:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    5a9c:	b672      	cpsid	i
    if (wasDisabled && value) {
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d1d3      	bne.n	5a4a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    5aa2:	2d00      	cmp	r5, #0
    5aa4:	d1d9      	bne.n	5a5a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    5aa6:	2300      	movs	r3, #0
    5aa8:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    5aac:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5aae:	79a3      	ldrb	r3, [r4, #6]
    5ab0:	2b0a      	cmp	r3, #10
    5ab2:	d1d6      	bne.n	5a62 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5ab4:	b91d      	cbnz	r5, 5abe <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5ab6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5aba:	079a      	lsls	r2, r3, #30
    5abc:	d420      	bmi.n	5b00 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    5abe:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5ac2:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5ac4:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5ac8:	bf48      	it	mi
    5aca:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5ace:	42ab      	cmp	r3, r5
    5ad0:	d1cb      	bne.n	5a6a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    5ad2:	2e00      	cmp	r6, #0
    5ad4:	d0da      	beq.n	5a8c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    5ad6:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    5ada:	2b00      	cmp	r3, #0
    5adc:	d1d6      	bne.n	5a8c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    5ade:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5ae2:	2d00      	cmp	r5, #0
    5ae4:	d0c5      	beq.n	5a72 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    5ae6:	f3bf 8f5b 	dmb	ish
    5aea:	4a0b      	ldr	r2, [pc, #44]	; (5b18 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5aec:	e852 1f00 	ldrex	r1, [r2]
    5af0:	4319      	orrs	r1, r3
    5af2:	e842 1000 	strex	r0, r1, [r2]
    5af6:	2800      	cmp	r0, #0
    5af8:	d0c6      	beq.n	5a88 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    5afa:	e7f7      	b.n	5aec <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5afc:	2300      	movs	r3, #0
    5afe:	e79d      	b.n	5a3c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5b00:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5b04:	f043 0310 	orr.w	r3, r3, #16
    5b08:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    5b0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5b10:	f006 fb2a 	bl	c168 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5b14:	e7d3      	b.n	5abe <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5b16:	bf00      	nop
    5b18:	20001ac4 	.word	0x20001ac4
    5b1c:	00000000 	.word	0x00000000

00005b20 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    5b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    5b22:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5b26:	b903      	cbnz	r3, 5b2a <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    5b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b2a:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    5b2c:	f009 f9dc 	bl	eee8 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5b30:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5b32:	4a98      	ldr	r2, [pc, #608]	; (5d94 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    5b34:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5b38:	2b0a      	cmp	r3, #10
    5b3a:	bf08      	it	eq
    5b3c:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5b40:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5b44:	bf08      	it	eq
    5b46:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    5b4a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    5b4e:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5b50:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5b54:	bf18      	it	ne
    5b56:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5b58:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    5b5a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    5b5c:	f240 80df 	bls.w	5d1e <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5b60:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5b64:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5b66:	4a8c      	ldr	r2, [pc, #560]	; (5d98 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5b68:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5b6c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5b70:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5b74:	1c48      	adds	r0, r1, #1
    5b76:	d012      	beq.n	5b9e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5b78:	4888      	ldr	r0, [pc, #544]	; (5d9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5b7a:	f003 fdfb 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5b7e:	6803      	ldr	r3, [r0, #0]
    5b80:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5b82:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5b84:	4798      	blx	r3
    5b86:	2809      	cmp	r0, #9
    5b88:	f000 8248 	beq.w	601c <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    5b8c:	4628      	mov	r0, r5
    5b8e:	f009 f931 	bl	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
    5b92:	1c01      	adds	r1, r0, #0
    5b94:	bf18      	it	ne
    5b96:	2101      	movne	r1, #1
    5b98:	4620      	mov	r0, r4
    5b9a:	f7ff fe3d 	bl	5818 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5b9e:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5ba2:	1c4a      	adds	r2, r1, #1
    5ba4:	d016      	beq.n	5bd4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5ba6:	79a3      	ldrb	r3, [r4, #6]
    5ba8:	2b0a      	cmp	r3, #10
    5baa:	d039      	beq.n	5c20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5bac:	487b      	ldr	r0, [pc, #492]	; (5d9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5bae:	f003 fde1 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5bb2:	6803      	ldr	r3, [r0, #0]
    5bb4:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5bb6:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5bb8:	4798      	blx	r3
    5bba:	2809      	cmp	r0, #9
    5bbc:	f000 80d0 	beq.w	5d60 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    5bc0:	4628      	mov	r0, r5
    5bc2:	f009 f917 	bl	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5bc6:	79a3      	ldrb	r3, [r4, #6]
    5bc8:	2b09      	cmp	r3, #9
    5bca:	f000 80d3 	beq.w	5d74 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    5bce:	2b0b      	cmp	r3, #11
    5bd0:	f000 80d0 	beq.w	5d74 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5bd4:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5bd8:	1c4b      	adds	r3, r1, #1
    5bda:	d021      	beq.n	5c20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    5bdc:	79a3      	ldrb	r3, [r4, #6]
    5bde:	2b0a      	cmp	r3, #10
    5be0:	d01e      	beq.n	5c20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    5be2:	486e      	ldr	r0, [pc, #440]	; (5d9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5be4:	f003 fdc6 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5be8:	6803      	ldr	r3, [r0, #0]
    5bea:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    5bec:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5bee:	4798      	blx	r3
    5bf0:	2809      	cmp	r0, #9
    5bf2:	f000 8239 	beq.w	6068 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    5bf6:	4628      	mov	r0, r5
    5bf8:	f009 f8fc 	bl	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5bfc:	79a3      	ldrb	r3, [r4, #6]
    5bfe:	2b09      	cmp	r3, #9
    5c00:	d10e      	bne.n	5c20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5c02:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    5c06:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    5c0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5c0e:	01db      	lsls	r3, r3, #7
    5c10:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5c14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5c18:	2800      	cmp	r0, #0
    5c1a:	f000 81d4 	beq.w	5fc6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    5c1e:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    5c20:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    5c24:	1c4f      	adds	r7, r1, #1
    5c26:	d010      	beq.n	5c4a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5c28:	485c      	ldr	r0, [pc, #368]	; (5d9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5c2a:	f003 fda3 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5c2e:	6803      	ldr	r3, [r0, #0]
    5c30:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5c32:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5c34:	4798      	blx	r3
    5c36:	2809      	cmp	r0, #9
    5c38:	f000 817d 	beq.w	5f36 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    5c3c:	682b      	ldr	r3, [r5, #0]
    5c3e:	4628      	mov	r0, r5
    5c40:	681b      	ldr	r3, [r3, #0]
    5c42:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5c44:	2804      	cmp	r0, #4
    5c46:	f000 8176 	beq.w	5f36 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    5c4a:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    5c4e:	1c4e      	adds	r6, r1, #1
    5c50:	d015      	beq.n	5c7e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5c52:	4852      	ldr	r0, [pc, #328]	; (5d9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5c54:	f003 fd8e 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5c58:	6803      	ldr	r3, [r0, #0]
    5c5a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5c5c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5c5e:	4798      	blx	r3
    5c60:	2809      	cmp	r0, #9
    5c62:	f000 81e6 	beq.w	6032 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    5c66:	4628      	mov	r0, r5
    5c68:	f009 f8c4 	bl	edf4 <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    5c6c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5c70:	fab0 f080 	clz	r0, r0
    5c74:	0940      	lsrs	r0, r0, #5
    5c76:	f360 03c3 	bfi	r3, r0, #3, #1
    5c7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    5c7e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    5c82:	1c4d      	adds	r5, r1, #1
    5c84:	d015      	beq.n	5cb2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5c86:	4845      	ldr	r0, [pc, #276]	; (5d9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5c88:	f003 fd74 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5c8c:	6803      	ldr	r3, [r0, #0]
    5c8e:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5c90:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5c92:	4798      	blx	r3
    5c94:	2809      	cmp	r0, #9
    5c96:	f000 81d1 	beq.w	603c <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    5c9a:	4628      	mov	r0, r5
    5c9c:	f009 f8aa 	bl	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    5ca0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5ca4:	fab0 f080 	clz	r0, r0
    5ca8:	0940      	lsrs	r0, r0, #5
    5caa:	f360 1304 	bfi	r3, r0, #4, #1
    5cae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5cb2:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    5cb6:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    5cba:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5cbe:	1c48      	adds	r0, r1, #1
    5cc0:	f000 8132 	beq.w	5f28 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5cc4:	4835      	ldr	r0, [pc, #212]	; (5d9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5cc6:	f003 fd55 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5cca:	6803      	ldr	r3, [r0, #0]
    5ccc:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5cce:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5cd0:	4798      	blx	r3
    5cd2:	2809      	cmp	r0, #9
    5cd4:	f000 81c0 	beq.w	6058 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    5cd8:	4638      	mov	r0, r7
    5cda:	f009 f88b 	bl	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
    5cde:	fab0 f780 	clz	r7, r0
    5ce2:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    5ce4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5ce8:	2b00      	cmp	r3, #0
    5cea:	f040 8131 	bne.w	5f50 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    5cee:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    5cf2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    5cf6:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    5cfa:	2900      	cmp	r1, #0
    5cfc:	d152      	bne.n	5da4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    5cfe:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    5d02:	0792      	lsls	r2, r2, #30
    5d04:	d54e      	bpl.n	5da4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    5d06:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5d0a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    5d0e:	2800      	cmp	r0, #0
    5d10:	f000 8152 	beq.w	5fb8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    5d14:	06d7      	lsls	r7, r2, #27
    5d16:	d549      	bpl.n	5dac <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    5d18:	f046 0604 	orr.w	r6, r6, #4
    5d1c:	e046      	b.n	5dac <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5d1e:	07aa      	lsls	r2, r5, #30
    5d20:	f000 8161 	beq.w	5fe6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    5d24:	2333      	movs	r3, #51	; 0x33
    5d26:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5d28:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    5d2c:	2201      	movs	r2, #1
    5d2e:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5d32:	b29a      	uxth	r2, r3
    5d34:	3200      	adds	r2, #0
    5d36:	bf18      	it	ne
    5d38:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5d3a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5d3e:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    5d42:	06eb      	lsls	r3, r5, #27
    5d44:	f100 8158 	bmi.w	5ff8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5d48:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	f040 810f 	bne.w	5f70 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5d52:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5d56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5d5a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    5d5e:	e707      	b.n	5b70 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5d60:	4b0f      	ldr	r3, [pc, #60]	; (5da0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    5d62:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5d66:	6818      	ldr	r0, [r3, #0]
    5d68:	f00a f89a 	bl	fea0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5d6c:	79a3      	ldrb	r3, [r4, #6]
    5d6e:	2b09      	cmp	r3, #9
    5d70:	f47f af2d 	bne.w	5bce <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5d74:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5d78:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    5d7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5d80:	01db      	lsls	r3, r3, #7
    5d82:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5d86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5d8a:	2800      	cmp	r0, #0
    5d8c:	f000 8119 	beq.w	5fc2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    5d90:	615a      	str	r2, [r3, #20]
    5d92:	e71f      	b.n	5bd4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5d94:	00023828 	.word	0x00023828
    5d98:	c61c3c00 	.word	0xc61c3c00
    5d9c:	200019cc 	.word	0x200019cc
    5da0:	20001efc 	.word	0x20001efc
    5da4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5da8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    5dac:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    5db0:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    5db4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5db8:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    5dbc:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5dc0:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    5dc4:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5dc8:	2b00      	cmp	r3, #0
    5dca:	f000 80ab 	beq.w	5f24 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    5dce:	1f98      	subs	r0, r3, #6
    5dd0:	bf18      	it	ne
    5dd2:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5dd4:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    5dd8:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5ddc:	2a00      	cmp	r2, #0
    5dde:	f000 809b 	beq.w	5f18 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    5de2:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5de6:	b111      	cbz	r1, 5dee <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5de8:	07af      	lsls	r7, r5, #30
    5dea:	f140 80df 	bpl.w	5fac <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5dee:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5df2:	2b03      	cmp	r3, #3
    5df4:	d071      	beq.n	5eda <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    5df6:	f015 0302 	ands.w	r3, r5, #2
    5dfa:	f040 80ce 	bne.w	5f9a <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5dfe:	2900      	cmp	r1, #0
    5e00:	d06b      	beq.n	5eda <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5e02:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    5e06:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    5e0a:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    5e0e:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    5e12:	2b00      	cmp	r3, #0
    5e14:	d065      	beq.n	5ee2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    5e16:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    5e1a:	2b00      	cmp	r3, #0
    5e1c:	f340 8113 	ble.w	6046 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    5e20:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5e24:	2201      	movs	r2, #1
            m_enableCounter--;
    5e26:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5e28:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    5e2c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    5e30:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    5e34:	b11b      	cbz	r3, 5e3e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    5e36:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    5e38:	bf48      	it	mi
    5e3a:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    5e3e:	1c32      	adds	r2, r6, #0
    5e40:	bf18      	it	ne
    5e42:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5e44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5e48:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    5e4c:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5e50:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5e54:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5e58:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    5e5c:	f3bf 8f5b 	dmb	ish
    5e60:	e852 1f00 	ldrex	r1, [r2]
    5e64:	4319      	orrs	r1, r3
    5e66:	e842 1000 	strex	r0, r1, [r2]
    5e6a:	2800      	cmp	r0, #0
    5e6c:	d1f8      	bne.n	5e60 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    5e6e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5e72:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5e76:	f3bf 8f5b 	dmb	ish
    5e7a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5e7e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5e82:	e853 2f00 	ldrex	r2, [r3]
    5e86:	432a      	orrs	r2, r5
    5e88:	e843 2100 	strex	r1, r2, [r3]
    5e8c:	2900      	cmp	r1, #0
    5e8e:	d1f8      	bne.n	5e82 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    5e90:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5e94:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    5e96:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    5e9a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5e9e:	2b0a      	cmp	r3, #10
    5ea0:	f47f ae42 	bne.w	5b28 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    5ea4:	f104 0530 	add.w	r5, r4, #48	; 0x30
    5ea8:	4628      	mov	r0, r5
    5eaa:	f005 feb5 	bl	bc18 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    5eae:	4628      	mov	r0, r5
    5eb0:	f006 fa16 	bl	c2e0 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    5eb4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5eb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    5eba:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5ebc:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    5ec0:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    5ec2:	4282      	cmp	r2, r0
    5ec4:	f43f ae30 	beq.w	5b28 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    5ec8:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    5ecc:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5ed0:	680b      	ldr	r3, [r1, #0]
    5ed2:	4213      	tst	r3, r2
    5ed4:	d1fc      	bne.n	5ed0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    5ed6:	6028      	str	r0, [r5, #0]
    5ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5eda:	1c03      	adds	r3, r0, #0
    5edc:	bf18      	it	ne
    5ede:	2301      	movne	r3, #1
    5ee0:	e78f      	b.n	5e02 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    5ee2:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    5ee6:	2a00      	cmp	r2, #0
    5ee8:	d03a      	beq.n	5f60 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    5eea:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    5eee:	b933      	cbnz	r3, 5efe <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    5ef0:	b938      	cbnz	r0, 5f02 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    5ef2:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    5ef6:	2204      	movs	r2, #4
    5ef8:	f362 258c 	bfi	r5, r2, #10, #3
    5efc:	e79a      	b.n	5e34 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    5efe:	2800      	cmp	r0, #0
    5f00:	d063      	beq.n	5fca <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    5f02:	f015 0302 	ands.w	r3, r5, #2
    5f06:	d1f6      	bne.n	5ef6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    5f08:	2203      	movs	r2, #3
    5f0a:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    5f0e:	f363 1504 	bfi	r5, r3, #4, #1
    5f12:	f005 0302 	and.w	r3, r5, #2
    5f16:	e78d      	b.n	5e34 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5f18:	f362 0500 	bfi	r5, r2, #0, #1
    5f1c:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5f20:	4613      	mov	r3, r2
    5f22:	e76e      	b.n	5e02 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5f24:	4618      	mov	r0, r3
    5f26:	e755      	b.n	5dd4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    5f28:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5f2c:	bb93      	cbnz	r3, 5f94 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    5f2e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    5f32:	461f      	mov	r7, r3
    5f34:	e6dd      	b.n	5cf2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    5f36:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    5f3a:	b381      	cbz	r1, 5f9e <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    5f3c:	682b      	ldr	r3, [r5, #0]
    5f3e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    5f42:	695b      	ldr	r3, [r3, #20]
    5f44:	b109      	cbz	r1, 5f4a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5f46:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    5f4a:	4628      	mov	r0, r5
    5f4c:	4798      	blx	r3
    5f4e:	e67c      	b.n	5c4a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    5f50:	b307      	cbz	r7, 5f94 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    5f52:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    5f56:	2900      	cmp	r1, #0
    5f58:	f000 80ab 	beq.w	60b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    5f5c:	460f      	mov	r7, r1
    5f5e:	e6c8      	b.n	5cf2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    5f60:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    5f64:	07aa      	lsls	r2, r5, #30
    5f66:	f57f af6a 	bpl.w	5e3e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    5f6a:	f046 0610 	orr.w	r6, r6, #16
    5f6e:	e762      	b.n	5e36 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5f70:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    5f74:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5f78:	4073      	eors	r3, r6
    5f7a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    5f7c:	4291      	cmp	r1, r2
    5f7e:	f000 80a4 	beq.w	60ca <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5f82:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    5f86:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5f8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5f8e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    5f92:	e5ed      	b.n	5b70 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    5f94:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    5f98:	e6ab      	b.n	5cf2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5f9a:	2300      	movs	r3, #0
    5f9c:	e731      	b.n	5e02 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    5f9e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    5fa2:	682b      	ldr	r3, [r5, #0]
    5fa4:	2a01      	cmp	r2, #1
    5fa6:	695b      	ldr	r3, [r3, #20]
    5fa8:	d1cf      	bne.n	5f4a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5faa:	e7cc      	b.n	5f46 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5fac:	2801      	cmp	r0, #1
    5fae:	f47f af1e 	bne.w	5dee <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5fb2:	f045 0501 	orr.w	r5, r5, #1
    5fb6:	e71c      	b.n	5df2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    5fb8:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    5fba:	bf48      	it	mi
    5fbc:	f046 0602 	orrmi.w	r6, r6, #2
    5fc0:	e6f4      	b.n	5dac <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5fc2:	619a      	str	r2, [r3, #24]
    5fc4:	e606      	b.n	5bd4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5fc6:	619a      	str	r2, [r3, #24]
    5fc8:	e62a      	b.n	5c20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    5fca:	2302      	movs	r3, #2
    5fcc:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    5fd0:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    5fd4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5fd8:	f006 f8c6 	bl	c168 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    5fdc:	f046 0620 	orr.w	r6, r6, #32
    5fe0:	f005 0302 	and.w	r3, r5, #2
    5fe4:	e726      	b.n	5e34 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    5fe6:	f004 f9e5 	bl	a3b4 <Milliseconds>
    5fea:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    5fee:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5ff0:	2803      	cmp	r0, #3
    5ff2:	f63f ae97 	bhi.w	5d24 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    5ff6:	e6a4      	b.n	5d42 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5ff8:	f004 f9dc 	bl	a3b4 <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    5ffc:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    6000:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    6004:	2b00      	cmp	r3, #0
    6006:	d03a      	beq.n	607e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    6008:	2330      	movs	r3, #48	; 0x30
    600a:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    600c:	2200      	movs	r2, #0
    600e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    6012:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    6016:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    601a:	e697      	b.n	5d4c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    601c:	4b54      	ldr	r3, [pc, #336]	; (6170 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    601e:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    6022:	6818      	ldr	r0, [r3, #0]
    6024:	f009 ff3c 	bl	fea0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    6028:	4601      	mov	r1, r0
    602a:	4620      	mov	r0, r4
    602c:	f7ff fbf4 	bl	5818 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    6030:	e5b5      	b.n	5b9e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    6032:	682b      	ldr	r3, [r5, #0]
    6034:	4628      	mov	r0, r5
    6036:	691b      	ldr	r3, [r3, #16]
    6038:	4798      	blx	r3
    603a:	e617      	b.n	5c6c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    603c:	682b      	ldr	r3, [r5, #0]
    603e:	4628      	mov	r0, r5
    6040:	691b      	ldr	r3, [r3, #16]
    6042:	4798      	blx	r3
    6044:	e62c      	b.n	5ca0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    6046:	2201      	movs	r2, #1
            m_isEnabling = false;
    6048:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    604a:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    604e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    6052:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    6056:	e748      	b.n	5eea <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    6058:	683b      	ldr	r3, [r7, #0]
    605a:	4638      	mov	r0, r7
    605c:	691b      	ldr	r3, [r3, #16]
    605e:	4798      	blx	r3
    6060:	fab0 f780 	clz	r7, r0
    6064:	097f      	lsrs	r7, r7, #5
    6066:	e63d      	b.n	5ce4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    6068:	4b41      	ldr	r3, [pc, #260]	; (6170 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    606a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    606e:	6818      	ldr	r0, [r3, #0]
    6070:	f009 ff16 	bl	fea0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    6074:	79a3      	ldrb	r3, [r4, #6]
    6076:	2b09      	cmp	r3, #9
    6078:	f43f adc3 	beq.w	5c02 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    607c:	e5d0      	b.n	5c20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    607e:	06ad      	lsls	r5, r5, #26
    6080:	f57f ae62 	bpl.w	5d48 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    6084:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    6088:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    608c:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    6090:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    6094:	8bf8      	ldrh	r0, [r7, #30]
    6096:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    609a:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    609e:	8bbd      	ldrh	r5, [r7, #28]
    60a0:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    60a4:	b9d0      	cbnz	r0, 60dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    60a6:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    60aa:	2201      	movs	r2, #1
    60ac:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    60b0:	e64c      	b.n	5d4c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    60b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    60b6:	f006 f873 	bl	c1a0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    60ba:	2301      	movs	r3, #1
    60bc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    60c0:	f046 0608 	orr.w	r6, r6, #8
    60c4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    60c8:	e613      	b.n	5cf2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    60ca:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    60ce:	2a00      	cmp	r2, #0
    60d0:	f43f ad49 	beq.w	5b66 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    60d4:	3a01      	subs	r2, #1
    60d6:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    60da:	e549      	b.n	5b70 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    60dc:	ee07 1a90 	vmov	s15, r1
    60e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    60e4:	ee07 2a90 	vmov	s15, r2
    60e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    60ec:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    60f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    60f4:	ee16 0a90 	vmov	r0, s13
    60f8:	f016 fa7c 	bl	1c5f4 <__aeabi_f2d>
    60fc:	a318      	add	r3, pc, #96	; (adr r3, 6160 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    60fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    6102:	f016 f917 	bl	1c334 <__aeabi_dsub>
    6106:	a318      	add	r3, pc, #96	; (adr r3, 6168 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    6108:	e9d3 2300 	ldrd	r2, r3, [r3]
    610c:	f016 fac6 	bl	1c69c <__aeabi_dmul>
    6110:	f016 fda6 	bl	1cc60 <__aeabi_d2f>
    6114:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    6118:	b11e      	cbz	r6, 6122 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    611a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 6174 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    611e:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    6122:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    6126:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    612a:	2b02      	cmp	r3, #2
    612c:	d004      	beq.n	6138 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    612e:	2302      	movs	r3, #2
    6130:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    6134:	2300      	movs	r3, #0
    6136:	e7b8      	b.n	60aa <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    6138:	ee17 0a90 	vmov	r0, s15
    613c:	f016 fa5a 	bl	1c5f4 <__aeabi_f2d>
    6140:	2200      	movs	r2, #0
    6142:	4b0d      	ldr	r3, [pc, #52]	; (6178 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    6144:	f016 f8f6 	bl	1c334 <__aeabi_dsub>
    6148:	4602      	mov	r2, r0
    614a:	460b      	mov	r3, r1
    614c:	f016 f8f4 	bl	1c338 <__adddf3>
    6150:	f016 fd86 	bl	1cc60 <__aeabi_d2f>
    6154:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    6158:	e7e9      	b.n	612e <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    615a:	bf00      	nop
    615c:	f3af 8000 	nop.w
    6160:	9999999a 	.word	0x9999999a
    6164:	3fa99999 	.word	0x3fa99999
    6168:	71c71c72 	.word	0x71c71c72
    616c:	405bc71c 	.word	0x405bc71c
    6170:	20001efc 	.word	0x20001efc
    6174:	42c80000 	.word	0x42c80000
    6178:	40490000 	.word	0x40490000

0000617c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    617c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6180:	4604      	mov	r4, r0
    6182:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    6184:	4690      	mov	r8, r2
    6186:	2a00      	cmp	r2, #0
    6188:	d154      	bne.n	6234 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    618a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    618c:	1b4d      	subs	r5, r1, r5
    618e:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    6190:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    6194:	2b00      	cmp	r3, #0
    6196:	d04b      	beq.n	6230 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    6198:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    619c:	f043 0301 	orr.w	r3, r3, #1
    61a0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    61a4:	2600      	movs	r6, #0
    61a6:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    61aa:	b933      	cbnz	r3, 61ba <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    61ac:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    61b0:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    61b4:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    61b6:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    61ba:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    61be:	1c48      	adds	r0, r1, #1
    61c0:	d016      	beq.n	61f0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    61c2:	4829      	ldr	r0, [pc, #164]	; (6268 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    61c4:	f003 fad6 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    61c8:	6803      	ldr	r3, [r0, #0]
    61ca:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    61cc:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    61ce:	4798      	blx	r3
    61d0:	2809      	cmp	r0, #9
    61d2:	d040      	beq.n	6256 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    61d4:	4648      	mov	r0, r9
    61d6:	f008 fe0d 	bl	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
    61da:	fab0 f080 	clz	r0, r0
    61de:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    61e0:	b130      	cbz	r0, 61f0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    61e2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    61e6:	f043 0308 	orr.w	r3, r3, #8
    61ea:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    61ee:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    61f0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    61f4:	b16d      	cbz	r5, 6212 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    61f6:	06d9      	lsls	r1, r3, #27
    61f8:	d426      	bmi.n	6248 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    61fa:	b196      	cbz	r6, 6222 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    61fc:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    61fe:	4642      	mov	r2, r8
    6200:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    6202:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    6206:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    620a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    620e:	f005 bc7f 	b.w	bb10 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    6212:	071a      	lsls	r2, r3, #28
    6214:	d5f1      	bpl.n	61fa <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    6216:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    621a:	f043 0302 	orr.w	r3, r3, #2
    621e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    6222:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    6226:	079b      	lsls	r3, r3, #30
    6228:	d406      	bmi.n	6238 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    622a:	2000      	movs	r0, #0
    622c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    6230:	2601      	movs	r6, #1
    6232:	e7b8      	b.n	61a6 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    6234:	0fcd      	lsrs	r5, r1, #31
    6236:	e7ab      	b.n	6190 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    6238:	f104 0030 	add.w	r0, r4, #48	; 0x30
    623c:	2100      	movs	r1, #0
    623e:	f005 ffaf 	bl	c1a0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    6242:	2000      	movs	r0, #0
    6244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    6248:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    624c:	f043 0304 	orr.w	r3, r3, #4
    6250:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    6254:	e7e5      	b.n	6222 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    6256:	f8d9 3000 	ldr.w	r3, [r9]
    625a:	4648      	mov	r0, r9
    625c:	691b      	ldr	r3, [r3, #16]
    625e:	4798      	blx	r3
    6260:	fab0 f080 	clz	r0, r0
    6264:	0940      	lsrs	r0, r0, #5
    6266:	e7bb      	b.n	61e0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    6268:	200019cc 	.word	0x200019cc

0000626c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    626c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    6270:	f7ff bf84 	b.w	617c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

00006274 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    6274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    6276:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    627a:	4604      	mov	r4, r0
    627c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    627e:	2b00      	cmp	r3, #0
    6280:	d04a      	beq.n	6318 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    6282:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    6286:	f043 0301 	orr.w	r3, r3, #1
    628a:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    628e:	2500      	movs	r5, #0
    6290:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    6294:	b933      	cbnz	r3, 62a4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    6296:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    629a:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    629e:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    62a0:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    62a4:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    62a8:	1c48      	adds	r0, r1, #1
    62aa:	d016      	beq.n	62da <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    62ac:	4826      	ldr	r0, [pc, #152]	; (6348 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    62ae:	f003 fa61 	bl	9774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    62b2:	6803      	ldr	r3, [r0, #0]
    62b4:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    62b6:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    62b8:	4798      	blx	r3
    62ba:	2809      	cmp	r0, #9
    62bc:	d03c      	beq.n	6338 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    62be:	4638      	mov	r0, r7
    62c0:	f008 fd98 	bl	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
    62c4:	fab0 f080 	clz	r0, r0
    62c8:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    62ca:	b130      	cbz	r0, 62da <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    62cc:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    62d0:	f043 0308 	orr.w	r3, r3, #8
    62d4:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    62d8:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    62da:	2e00      	cmp	r6, #0
    62dc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    62e0:	da0c      	bge.n	62fc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    62e2:	06d9      	lsls	r1, r3, #27
    62e4:	d421      	bmi.n	632a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    62e6:	b18d      	cbz	r5, 630c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    62e8:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    62ea:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    62ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    62f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    62f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    62f8:	f005 bc44 	b.w	bb84 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    62fc:	071a      	lsls	r2, r3, #28
    62fe:	d5f2      	bpl.n	62e6 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    6300:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    6304:	f043 0302 	orr.w	r3, r3, #2
    6308:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    630c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    6310:	079b      	lsls	r3, r3, #30
    6312:	d403      	bmi.n	631c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    6314:	2000      	movs	r0, #0
    6316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    6318:	2501      	movs	r5, #1
    631a:	e7b9      	b.n	6290 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    631c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6320:	2100      	movs	r1, #0
    6322:	f005 ff3d 	bl	c1a0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    6326:	2000      	movs	r0, #0
    6328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    632a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    632e:	f043 0304 	orr.w	r3, r3, #4
    6332:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    6336:	e7e9      	b.n	630c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    6338:	683b      	ldr	r3, [r7, #0]
    633a:	4638      	mov	r0, r7
    633c:	691b      	ldr	r3, [r3, #16]
    633e:	4798      	blx	r3
    6340:	fab0 f080 	clz	r0, r0
    6344:	0940      	lsrs	r0, r0, #5
    6346:	e7c0      	b.n	62ca <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    6348:	200019cc 	.word	0x200019cc

0000634c <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    634c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    6350:	f7ff bf90 	b.w	6274 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

00006354 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    6354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    6356:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    635a:	4dbc      	ldr	r5, [pc, #752]	; (664c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    635c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    6360:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    6364:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    6368:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    636a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    636c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    6370:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    6374:	f993 3001 	ldrsb.w	r3, [r3, #1]
    6378:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    637c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    637e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    6380:	2100      	movs	r1, #0
    6382:	f7ff fa49 	bl	5818 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    6386:	4631      	mov	r1, r6
    6388:	4620      	mov	r0, r4
    638a:	f008 fd47 	bl	ee1c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    638e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    6392:	f993 2001 	ldrsb.w	r2, [r3, #1]
    6396:	7898      	ldrb	r0, [r3, #2]
    6398:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    639c:	1813      	adds	r3, r2, r0
    639e:	2700      	movs	r7, #0
    63a0:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    63a4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    63a8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    63ac:	788e      	ldrb	r6, [r1, #2]
    63ae:	01db      	lsls	r3, r3, #7
    63b0:	18e9      	adds	r1, r5, r3
    63b2:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    63b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    63b8:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    63bc:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    63c0:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    63c2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    63c6:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    63c8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    63cc:	f010 0f01 	tst.w	r0, #1
    63d0:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    63d4:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    63d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    63dc:	bf14      	ite	ne
    63de:	f360 1107 	bfine	r1, r0, #4, #4
    63e2:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    63e6:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    63ea:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    63ee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    63f2:	07f0      	lsls	r0, r6, #31
    63f4:	f04f 0105 	mov.w	r1, #5
    63f8:	bf4c      	ite	mi
    63fa:	f361 1207 	bfimi	r2, r1, #4, #4
    63fe:	f361 0203 	bfipl	r2, r1, #0, #4
    6402:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    6406:	6823      	ldr	r3, [r4, #0]
    6408:	4a91      	ldr	r2, [pc, #580]	; (6650 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    640a:	685b      	ldr	r3, [r3, #4]
    640c:	4293      	cmp	r3, r2
    640e:	f040 8119 	bne.w	6644 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    6412:	79a3      	ldrb	r3, [r4, #6]
    6414:	2b09      	cmp	r3, #9
    6416:	d022      	beq.n	645e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    6418:	f104 0030 	add.w	r0, r4, #48	; 0x30
    641c:	f005 fea4 	bl	c168 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    6420:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    6424:	4b89      	ldr	r3, [pc, #548]	; (664c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    6426:	f991 2001 	ldrsb.w	r2, [r1, #1]
    642a:	7889      	ldrb	r1, [r1, #2]
    642c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    6430:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    6432:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    6434:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    6438:	f36f 0100 	bfc	r1, #0, #1
    643c:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    6440:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    6444:	f992 1001 	ldrsb.w	r1, [r2, #1]
    6448:	7892      	ldrb	r2, [r2, #2]
    644a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    644e:	4413      	add	r3, r2
    6450:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    6454:	f36f 0200 	bfc	r2, #0, #1
    6458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    645c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    645e:	68e3      	ldr	r3, [r4, #12]
    6460:	6922      	ldr	r2, [r4, #16]
    6462:	01db      	lsls	r3, r3, #7
    6464:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    6468:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    646c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    6470:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    6474:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    6478:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    647c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6480:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    6482:	bf14      	ite	ne
    6484:	f36f 1007 	bfcne	r0, #4, #4
    6488:	f365 0003 	bfieq	r0, r5, #0, #4
    648c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    6490:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    6494:	496f      	ldr	r1, [pc, #444]	; (6654 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    6496:	f042 0201 	orr.w	r2, r2, #1
    649a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    649e:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    64a2:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    64a6:	681a      	ldr	r2, [r3, #0]
    64a8:	f36f 0241 	bfc	r2, #1, #1
    64ac:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    64ae:	691a      	ldr	r2, [r3, #16]
    64b0:	0792      	lsls	r2, r2, #30
    64b2:	d4fc      	bmi.n	64ae <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    64b4:	681a      	ldr	r2, [r3, #0]
    64b6:	f042 0201 	orr.w	r2, r2, #1
    64ba:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    64bc:	691a      	ldr	r2, [r3, #16]
    64be:	f012 0201 	ands.w	r2, r2, #1
    64c2:	d1fb      	bne.n	64bc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    64c4:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    64c6:	4964      	ldr	r1, [pc, #400]	; (6658 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    64c8:	f362 1505 	bfi	r5, r2, #4, #2
    64cc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    64ce:	681d      	ldr	r5, [r3, #0]
    64d0:	f362 5514 	bfi	r5, r2, #20, #1
    64d4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    64d6:	681d      	ldr	r5, [r3, #0]
    64d8:	f362 5555 	bfi	r5, r2, #21, #1
    64dc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    64de:	681d      	ldr	r5, [r3, #0]
    64e0:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    64e4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    64e6:	681d      	ldr	r5, [r3, #0]
    64e8:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    64ec:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    64ee:	681d      	ldr	r5, [r3, #0]
    64f0:	f362 25cb 	bfi	r5, r2, #11, #1
    64f4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    64f6:	681d      	ldr	r5, [r3, #0]
    64f8:	f362 250a 	bfi	r5, r2, #8, #3
    64fc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    64fe:	681d      	ldr	r5, [r3, #0]
    6500:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    6504:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    6506:	681d      	ldr	r5, [r3, #0]
    6508:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    650c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    650e:	681d      	ldr	r5, [r3, #0]
    6510:	f362 0583 	bfi	r5, r2, #2, #2
    6514:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    6516:	88dd      	ldrh	r5, [r3, #6]
    6518:	2605      	movs	r6, #5
    651a:	f366 0502 	bfi	r5, r6, #0, #3
    651e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    6520:	88dd      	ldrh	r5, [r3, #6]
    6522:	f045 0520 	orr.w	r5, r5, #32
    6526:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    6528:	88dd      	ldrh	r5, [r3, #6]
    652a:	f362 350c 	bfi	r5, r2, #12, #1
    652e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    6530:	88dd      	ldrh	r5, [r3, #6]
    6532:	f362 354d 	bfi	r5, r2, #13, #1
    6536:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    6538:	88dd      	ldrh	r5, [r3, #6]
    653a:	f362 2508 	bfi	r5, r2, #8, #1
    653e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    6540:	88dd      	ldrh	r5, [r3, #6]
    6542:	f045 0510 	orr.w	r5, r5, #16
    6546:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    6548:	780d      	ldrb	r5, [r1, #0]
    654a:	f362 0541 	bfi	r5, r2, #1, #1
    654e:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    6550:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    6554:	688e      	ldr	r6, [r1, #8]
    6556:	78d5      	ldrb	r5, [r2, #3]
    6558:	2201      	movs	r2, #1
    655a:	40aa      	lsls	r2, r5
    655c:	4316      	orrs	r6, r2
    655e:	608e      	str	r6, [r1, #8]
    6560:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    6562:	698e      	ldr	r6, [r1, #24]
    6564:	00bf      	lsls	r7, r7, #2
    6566:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    656a:	4316      	orrs	r6, r2
    656c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    6570:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    6572:	f005 0607 	and.w	r6, r5, #7
    6576:	f8de c01c 	ldr.w	ip, [lr, #28]
    657a:	00b7      	lsls	r7, r6, #2
    657c:	2604      	movs	r6, #4
    657e:	40be      	lsls	r6, r7
    6580:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    6584:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    6588:	68ce      	ldr	r6, [r1, #12]
    658a:	b292      	uxth	r2, r2
    658c:	f362 060f 	bfi	r6, r2, #0, #16
    6590:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    6592:	780a      	ldrb	r2, [r1, #0]
    6594:	f042 0202 	orr.w	r2, r2, #2
    6598:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    659a:	684a      	ldr	r2, [r1, #4]
    659c:	f012 0202 	ands.w	r2, r2, #2
    65a0:	d1fb      	bne.n	659a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    65a2:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    65a6:	492d      	ldr	r1, [pc, #180]	; (665c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    65a8:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    65ac:	463e      	mov	r6, r7
    65ae:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    65b2:	f362 1c86 	bfi	ip, r2, #6, #1
    65b6:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    65ba:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    65be:	0657      	lsls	r7, r2, #25
    65c0:	d4fb      	bmi.n	65ba <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    65c2:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    65c6:	4f25      	ldr	r7, [pc, #148]	; (665c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    65c8:	f04f 0c06 	mov.w	ip, #6
    65cc:	f36c 0203 	bfi	r2, ip, #0, #4
    65d0:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    65d4:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    65d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    65dc:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    65e0:	687a      	ldr	r2, [r7, #4]
    65e2:	f012 0f18 	tst.w	r2, #24
    65e6:	d1fb      	bne.n	65e0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    65e8:	4a1d      	ldr	r2, [pc, #116]	; (6660 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    65ea:	4e1e      	ldr	r6, [pc, #120]	; (6664 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    65ec:	3074      	adds	r0, #116	; 0x74
    65ee:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    65f2:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    65f6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    65fa:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    65fe:	7991      	ldrb	r1, [r2, #6]
    6600:	f041 0102 	orr.w	r1, r1, #2
    6604:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    6606:	79d1      	ldrb	r1, [r2, #7]
    6608:	07c8      	lsls	r0, r1, #31
    660a:	d4fc      	bmi.n	6606 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    660c:	3512      	adds	r5, #18
    660e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6612:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    6616:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    661a:	79d1      	ldrb	r1, [r2, #7]
    661c:	0789      	lsls	r1, r1, #30
    661e:	d4fc      	bmi.n	661a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    6620:	681a      	ldr	r2, [r3, #0]
    6622:	f042 0202 	orr.w	r2, r2, #2
    6626:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    6628:	691a      	ldr	r2, [r3, #16]
    662a:	f012 0202 	ands.w	r2, r2, #2
    662e:	d1fb      	bne.n	6628 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    6630:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    6632:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    6636:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    663a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    663e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    6642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    6644:	2109      	movs	r1, #9
    6646:	4620      	mov	r0, r4
    6648:	4798      	blx	r3
    664a:	e708      	b.n	645e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    664c:	41008000 	.word	0x41008000
    6650:	00005439 	.word	0x00005439
    6654:	00023828 	.word	0x00023828
    6658:	40002800 	.word	0x40002800
    665c:	40001c00 	.word	0x40001c00
    6660:	4100e000 	.word	0x4100e000
    6664:	4100e020 	.word	0x4100e020

00006668 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    6668:	f04f 30ff 	mov.w	r0, #4294967295
    666c:	4770      	bx	lr
    666e:	bf00      	nop

00006670 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    6670:	f1a1 0002 	sub.w	r0, r1, #2
    6674:	fab0 f080 	clz	r0, r0
    6678:	0940      	lsrs	r0, r0, #5
    667a:	4770      	bx	lr

0000667c <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    667c:	2002      	movs	r0, #2
    667e:	4770      	bx	lr

00006680 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    6680:	f1a1 0001 	sub.w	r0, r1, #1
    6684:	fab0 f080 	clz	r0, r0
    6688:	0940      	lsrs	r0, r0, #5
    668a:	4770      	bx	lr

0000668c <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    668c:	f1a1 0008 	sub.w	r0, r1, #8
    6690:	fab0 f080 	clz	r0, r0
    6694:	0940      	lsrs	r0, r0, #5
    6696:	4770      	bx	lr

00006698 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    6698:	7a80      	ldrb	r0, [r0, #10]
    669a:	4770      	bx	lr

0000669c <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    669c:	f1a0 0004 	sub.w	r0, r0, #4
    66a0:	e7fa      	b.n	6698 <_ZN9ClearCore9SerialUsb4ModeEv>
    66a2:	bf00      	nop

000066a4 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    66a4:	7a80      	ldrb	r0, [r0, #10]
    }
    66a6:	1a40      	subs	r0, r0, r1
    66a8:	fab0 f080 	clz	r0, r0
    66ac:	0940      	lsrs	r0, r0, #5
    66ae:	4770      	bx	lr

000066b0 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    66b0:	f1a0 0004 	sub.w	r0, r0, #4
    66b4:	e7f6      	b.n	66a4 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    66b6:	bf00      	nop

000066b8 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    66b8:	2008      	movs	r0, #8
    66ba:	4770      	bx	lr

000066bc <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    66bc:	f1a0 0004 	sub.w	r0, r0, #4
    66c0:	e7fa      	b.n	66b8 <_ZN9ClearCore9SerialUsb4TypeEv>
    66c2:	bf00      	nop

000066c4 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    66c4:	2000      	movs	r0, #0
    66c6:	4770      	bx	lr

000066c8 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    66c8:	f1a0 0004 	sub.w	r0, r0, #4
    66cc:	e7fa      	b.n	66c4 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    66ce:	bf00      	nop

000066d0 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    66d0:	2311      	movs	r3, #17
        m_index = clearCorePin;
    66d2:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    66d4:	7283      	strb	r3, [r0, #10]
    66d6:	4770      	bx	lr

000066d8 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    66d8:	f1a0 0004 	sub.w	r0, r0, #4
    66dc:	e7f8      	b.n	66d0 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    66de:	bf00      	nop

000066e0 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    66e0:	4770      	bx	lr
    66e2:	bf00      	nop

000066e4 <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    66e4:	f1a0 0004 	sub.w	r0, r0, #4
    66e8:	e7fa      	b.n	66e0 <_ZN9ClearCore9SerialUsb7RefreshEv>
    66ea:	bf00      	nop

000066ec <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    66ec:	4b01      	ldr	r3, [pc, #4]	; (66f4 <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    66ee:	6818      	ldr	r0, [r3, #0]
    66f0:	f000 be5e 	b.w	73b0 <_ZN9ClearCore10UsbManager10FlushInputEv>
    66f4:	20000ad0 	.word	0x20000ad0

000066f8 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    66f8:	4b01      	ldr	r3, [pc, #4]	; (6700 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    66fa:	6818      	ldr	r0, [r3, #0]
    66fc:	f000 be66 	b.w	73cc <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    6700:	20000ad0 	.word	0x20000ad0

00006704 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    6704:	4b01      	ldr	r3, [pc, #4]	; (670c <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    6706:	6818      	ldr	r0, [r3, #0]
    6708:	f000 be7a 	b.w	7400 <_ZN9ClearCore10UsbManagercvbEv>
    670c:	20000ad0 	.word	0x20000ad0

00006710 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    6710:	4b01      	ldr	r3, [pc, #4]	; (6718 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    6712:	6818      	ldr	r0, [r3, #0]
    6714:	f000 be30 	b.w	7378 <_ZN9ClearCore10UsbManager8PortOpenEv>
    6718:	20000ad0 	.word	0x20000ad0

0000671c <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    671c:	4b01      	ldr	r3, [pc, #4]	; (6724 <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    671e:	6818      	ldr	r0, [r3, #0]
    6720:	f001 ba04 	b.w	7b2c <_ZN9ClearCore10UsbManager9PortCloseEv>
    6724:	20000ad0 	.word	0x20000ad0

00006728 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    6728:	4b01      	ldr	r3, [pc, #4]	; (6730 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    672a:	6818      	ldr	r0, [r3, #0]
    672c:	f000 be1c 	b.w	7368 <_ZN9ClearCore10UsbManager5SpeedEm>
    6730:	20000ad0 	.word	0x20000ad0

00006734 <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    6734:	4b01      	ldr	r3, [pc, #4]	; (673c <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    6736:	6818      	ldr	r0, [r3, #0]
    6738:	f000 be18 	b.w	736c <_ZN9ClearCore10UsbManager5SpeedEv>
    673c:	20000ad0 	.word	0x20000ad0

00006740 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    6740:	4b01      	ldr	r3, [pc, #4]	; (6748 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    6742:	6818      	ldr	r0, [r3, #0]
    6744:	f000 be7a 	b.w	743c <_ZN9ClearCore10UsbManager7CharGetEv>
    6748:	20000ad0 	.word	0x20000ad0

0000674c <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    674c:	4b01      	ldr	r3, [pc, #4]	; (6754 <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    674e:	6818      	ldr	r0, [r3, #0]
    6750:	f000 bfa0 	b.w	7694 <_ZN9ClearCore10UsbManager8CharPeekEv>
    6754:	20000ad0 	.word	0x20000ad0

00006758 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    6758:	4b01      	ldr	r3, [pc, #4]	; (6760 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    675a:	6818      	ldr	r0, [r3, #0]
    675c:	f000 bfa6 	b.w	76ac <_ZN9ClearCore10UsbManager8SendCharEh>
    6760:	20000ad0 	.word	0x20000ad0

00006764 <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    6764:	4b01      	ldr	r3, [pc, #4]	; (676c <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    6766:	6818      	ldr	r0, [r3, #0]
    6768:	f000 bfd4 	b.w	7714 <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    676c:	20000ad0 	.word	0x20000ad0

00006770 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    6770:	4b01      	ldr	r3, [pc, #4]	; (6778 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    6772:	6818      	ldr	r0, [r3, #0]
    6774:	f000 bfd6 	b.w	7724 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    6778:	20000ad0 	.word	0x20000ad0

0000677c <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    677c:	6803      	ldr	r3, [r0, #0]
    677e:	4a04      	ldr	r2, [pc, #16]	; (6790 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    6780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6782:	4293      	cmp	r3, r2
    6784:	d103      	bne.n	678e <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    6786:	4b03      	ldr	r3, [pc, #12]	; (6794 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    6788:	6818      	ldr	r0, [r3, #0]
    678a:	f000 be39 	b.w	7400 <_ZN9ClearCore10UsbManagercvbEv>
    678e:	4718      	bx	r3
    6790:	00006705 	.word	0x00006705
    6794:	20000ad0 	.word	0x20000ad0

00006798 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    6798:	f1a0 0004 	sub.w	r0, r0, #4
    679c:	e7ee      	b.n	677c <_ZN9ClearCore9SerialUsb10IsWritableEv>
    679e:	bf00      	nop

000067a0 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    67a0:	b508      	push	{r3, lr}
        return PortIsOpen();
    67a2:	6803      	ldr	r3, [r0, #0]
    67a4:	4a06      	ldr	r2, [pc, #24]	; (67c0 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    67a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    67a8:	4293      	cmp	r3, r2
    67aa:	d105      	bne.n	67b8 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    67ac:	4b05      	ldr	r3, [pc, #20]	; (67c4 <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    67ae:	6818      	ldr	r0, [r3, #0]
    67b0:	f000 fe26 	bl	7400 <_ZN9ClearCore10UsbManagercvbEv>
    }
    67b4:	b200      	sxth	r0, r0
    67b6:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    67b8:	4798      	blx	r3
    }
    67ba:	b200      	sxth	r0, r0
    67bc:	bd08      	pop	{r3, pc}
    67be:	bf00      	nop
    67c0:	00006705 	.word	0x00006705
    67c4:	20000ad0 	.word	0x20000ad0

000067c8 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    67c8:	f1a0 0004 	sub.w	r0, r0, #4
    67cc:	e7e8      	b.n	67a0 <_ZN9ClearCore9SerialUsb5StateEv>
    67ce:	bf00      	nop

000067d0 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    67d0:	b508      	push	{r3, lr}
            PortOpen();
    67d2:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    67d4:	b961      	cbnz	r1, 67f0 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    67d6:	4a0b      	ldr	r2, [pc, #44]	; (6804 <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    67d8:	68db      	ldr	r3, [r3, #12]
    67da:	4293      	cmp	r3, r2
    67dc:	d105      	bne.n	67ea <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    67de:	4b0a      	ldr	r3, [pc, #40]	; (6808 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    67e0:	6818      	ldr	r0, [r3, #0]
    67e2:	f001 f9a3 	bl	7b2c <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    67e6:	2001      	movs	r0, #1
    67e8:	bd08      	pop	{r3, pc}
            PortClose();
    67ea:	4798      	blx	r3
    }
    67ec:	2001      	movs	r0, #1
    67ee:	bd08      	pop	{r3, pc}
    67f0:	4a06      	ldr	r2, [pc, #24]	; (680c <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    67f2:	689b      	ldr	r3, [r3, #8]
    67f4:	4293      	cmp	r3, r2
    67f6:	d1f8      	bne.n	67ea <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    67f8:	4b03      	ldr	r3, [pc, #12]	; (6808 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    67fa:	6818      	ldr	r0, [r3, #0]
    67fc:	f000 fdbc 	bl	7378 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    6800:	2001      	movs	r0, #1
    6802:	bd08      	pop	{r3, pc}
    6804:	0000671d 	.word	0x0000671d
    6808:	20000ad0 	.word	0x20000ad0
    680c:	00006711 	.word	0x00006711

00006810 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    6810:	f1a0 0004 	sub.w	r0, r0, #4
    6814:	e7dc      	b.n	67d0 <_ZN9ClearCore9SerialUsb5StateEs>
    6816:	bf00      	nop

00006818 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    6818:	b530      	push	{r4, r5, lr}
    681a:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    681c:	4d1a      	ldr	r5, [pc, #104]	; (6888 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    681e:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    6822:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    6826:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    6828:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    682c:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    6830:	d112      	bne.n	6858 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    6832:	4621      	mov	r1, r4
    6834:	4620      	mov	r0, r4
    6836:	f006 f91d 	bl	ca74 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    683a:	4621      	mov	r1, r4
    683c:	2001      	movs	r0, #1
    683e:	f006 f919 	bl	ca74 <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    6842:	f006 f90b 	bl	ca5c <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    6846:	f006 f943 	bl	cad0 <cdcdf_acm_get_line_coding>
    684a:	6803      	ldr	r3, [r0, #0]
    684c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6850:	d012      	beq.n	6878 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    6852:	2000      	movs	r0, #0
    6854:	b003      	add	sp, #12
    6856:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6858:	490c      	ldr	r1, [pc, #48]	; (688c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    685a:	2000      	movs	r0, #0
    685c:	f006 f90a 	bl	ca74 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6860:	490b      	ldr	r1, [pc, #44]	; (6890 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    6862:	2001      	movs	r0, #1
    6864:	f006 f906 	bl	ca74 <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    6868:	6828      	ldr	r0, [r5, #0]
    686a:	2140      	movs	r1, #64	; 0x40
    686c:	3080      	adds	r0, #128	; 0x80
    686e:	f006 f8cd 	bl	ca0c <cdcdf_acm_read>
}
    6872:	2000      	movs	r0, #0
    6874:	b003      	add	sp, #12
    6876:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    6878:	2101      	movs	r1, #1
    687a:	4806      	ldr	r0, [pc, #24]	; (6894 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    687c:	f003 fa36 	bl	9cec <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    6880:	2000      	movs	r0, #0
    6882:	b003      	add	sp, #12
    6884:	bd30      	pop	{r4, r5, pc}
    6886:	bf00      	nop
    6888:	20000ad0 	.word	0x20000ad0
    688c:	00006899 	.word	0x00006899
    6890:	00006ad1 	.word	0x00006ad1
    6894:	200019cc 	.word	0x200019cc

00006898 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    6898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    689c:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    689e:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    68a0:	498a      	ldr	r1, [pc, #552]	; (6acc <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    68a2:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    68a4:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    68a8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    68ac:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    68b0:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    68b2:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    68b4:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    68b6:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    68ba:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    68be:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    68c2:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    68c4:	bf48      	it	mi
    68c6:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    68c8:	2c00      	cmp	r4, #0
    68ca:	f000 80d6 	beq.w	6a7a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    68ce:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    68d2:	f000 80d2 	beq.w	6a7a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    68d6:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    68da:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    68de:	42a3      	cmp	r3, r4
    68e0:	bf28      	it	cs
    68e2:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    68e4:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    68e8:	4299      	cmp	r1, r3
    68ea:	bf28      	it	cs
    68ec:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    68ee:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    68f0:	2900      	cmp	r1, #0
    68f2:	f000 80e8 	beq.w	6ac6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    68f6:	1d2c      	adds	r4, r5, #4
    68f8:	4404      	add	r4, r0
    68fa:	1d17      	adds	r7, r2, #4
    68fc:	42be      	cmp	r6, r7
    68fe:	bf38      	it	cc
    6900:	42a2      	cmpcc	r2, r4
    6902:	f0c0 80ce 	bcc.w	6aa2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    6906:	290b      	cmp	r1, #11
    6908:	f240 80cb 	bls.w	6aa2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    690c:	4254      	negs	r4, r2
    690e:	f014 0403 	ands.w	r4, r4, #3
    6912:	f000 80b7 	beq.w	6a84 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    6916:	7817      	ldrb	r7, [r2, #0]
    6918:	5547      	strb	r7, [r0, r5]
    691a:	2c01      	cmp	r4, #1
    691c:	f106 0c01 	add.w	ip, r6, #1
    6920:	f102 0801 	add.w	r8, r2, #1
    6924:	f000 80b0 	beq.w	6a88 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    6928:	7857      	ldrb	r7, [r2, #1]
    692a:	7077      	strb	r7, [r6, #1]
    692c:	2c02      	cmp	r4, #2
    692e:	f106 0c02 	add.w	ip, r6, #2
    6932:	f102 0802 	add.w	r8, r2, #2
    6936:	f000 80a7 	beq.w	6a88 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    693a:	7897      	ldrb	r7, [r2, #2]
    693c:	70b7      	strb	r7, [r6, #2]
    693e:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6942:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6944:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6948:	9601      	str	r6, [sp, #4]
    694a:	eba1 0b04 	sub.w	fp, r1, r4
    694e:	f1ab 0604 	sub.w	r6, fp, #4
    6952:	08b6      	lsrs	r6, r6, #2
    6954:	192f      	adds	r7, r5, r4
    6956:	3601      	adds	r6, #1
    6958:	ea4f 0986 	mov.w	r9, r6, lsl #2
    695c:	4407      	add	r7, r0
    695e:	4414      	add	r4, r2
    6960:	f04f 0e00 	mov.w	lr, #0
    6964:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6968:	f854 ab04 	ldr.w	sl, [r4], #4
    696c:	f847 ab04 	str.w	sl, [r7], #4
    6970:	4576      	cmp	r6, lr
    6972:	d8f7      	bhi.n	6964 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    6974:	9c01      	ldr	r4, [sp, #4]
    6976:	45cb      	cmp	fp, r9
    6978:	444c      	add	r4, r9
    697a:	eb0c 0709 	add.w	r7, ip, r9
    697e:	eb08 0e09 	add.w	lr, r8, r9
    6982:	f000 8089 	beq.w	6a98 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    6986:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    698a:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    698e:	1c66      	adds	r6, r4, #1
    6990:	42b1      	cmp	r1, r6
    6992:	f240 8081 	bls.w	6a98 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    6996:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6998:	f89e 6001 	ldrb.w	r6, [lr, #1]
    699c:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    699e:	42a1      	cmp	r1, r4
    69a0:	d97a      	bls.n	6a98 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    69a2:	f89e 4002 	ldrb.w	r4, [lr, #2]
    69a6:	70bc      	strb	r4, [r7, #2]
    69a8:	1856      	adds	r6, r2, r1
    69aa:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    69ae:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    69b2:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    69b4:	1a64      	subs	r4, r4, r1
        if (count) {
    69b6:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    69b8:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    69bc:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    69c0:	d064      	beq.n	6a8c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    69c2:	1d31      	adds	r1, r6, #4
    69c4:	1d02      	adds	r2, r0, #4
    69c6:	4296      	cmp	r6, r2
    69c8:	bf38      	it	cc
    69ca:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    69cc:	4604      	mov	r4, r0
    69ce:	d371      	bcc.n	6ab4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    69d0:	2b0b      	cmp	r3, #11
    69d2:	d96f      	bls.n	6ab4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    69d4:	4272      	negs	r2, r6
    69d6:	f012 0203 	ands.w	r2, r2, #3
    69da:	d05f      	beq.n	6a9c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    69dc:	7831      	ldrb	r1, [r6, #0]
    69de:	7001      	strb	r1, [r0, #0]
    69e0:	2a01      	cmp	r2, #1
    69e2:	f100 0401 	add.w	r4, r0, #1
    69e6:	f106 0e01 	add.w	lr, r6, #1
    69ea:	d058      	beq.n	6a9e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    69ec:	7871      	ldrb	r1, [r6, #1]
    69ee:	7041      	strb	r1, [r0, #1]
    69f0:	2a02      	cmp	r2, #2
    69f2:	f100 0402 	add.w	r4, r0, #2
    69f6:	f106 0e02 	add.w	lr, r6, #2
    69fa:	d050      	beq.n	6a9e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    69fc:	78b1      	ldrb	r1, [r6, #2]
    69fe:	7081      	strb	r1, [r0, #2]
    6a00:	1cc4      	adds	r4, r0, #3
    6a02:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    6a06:	2703      	movs	r7, #3
    6a08:	eba3 0c02 	sub.w	ip, r3, r2
    6a0c:	f1ac 0104 	sub.w	r1, ip, #4
    6a10:	0889      	lsrs	r1, r1, #2
    6a12:	1c4d      	adds	r5, r1, #1
    6a14:	4416      	add	r6, r2
    6a16:	ea4f 0885 	mov.w	r8, r5, lsl #2
    6a1a:	4402      	add	r2, r0
    6a1c:	2100      	movs	r1, #0
    6a1e:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6a20:	f856 9b04 	ldr.w	r9, [r6], #4
    6a24:	f842 9b04 	str.w	r9, [r2], #4
    6a28:	428d      	cmp	r5, r1
    6a2a:	d8f8      	bhi.n	6a1e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    6a2c:	45c4      	cmp	ip, r8
    6a2e:	eb07 0208 	add.w	r2, r7, r8
    6a32:	eb04 0108 	add.w	r1, r4, r8
    6a36:	eb0e 0608 	add.w	r6, lr, r8
    6a3a:	d00d      	beq.n	6a58 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    6a3c:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    6a40:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6a44:	1c54      	adds	r4, r2, #1
    6a46:	42a3      	cmp	r3, r4
    6a48:	d906      	bls.n	6a58 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    6a4a:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6a4c:	7874      	ldrb	r4, [r6, #1]
    6a4e:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6a50:	4293      	cmp	r3, r2
    6a52:	d901      	bls.n	6a58 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    6a54:	78b2      	ldrb	r2, [r6, #2]
    6a56:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    6a58:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6a5c:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    6a60:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6a64:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6a66:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    6a68:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6a6c:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    6a70:	b91c      	cbnz	r4, 6a7a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6a72:	3080      	adds	r0, #128	; 0x80
    6a74:	2140      	movs	r1, #64	; 0x40
    6a76:	f005 ffc9 	bl	ca0c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6a7a:	b662      	cpsie	i
}
    6a7c:	2001      	movs	r0, #1
    6a7e:	b003      	add	sp, #12
    6a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6a84:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    6a86:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6a88:	9401      	str	r4, [sp, #4]
    6a8a:	e75e      	b.n	694a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6a8c:	4429      	add	r1, r5
    6a8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    6a92:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6a96:	e7eb      	b.n	6a70 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    6a98:	1856      	adds	r6, r2, r1
    6a9a:	e786      	b.n	69aa <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    6a9c:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    6a9e:	4617      	mov	r7, r2
    6aa0:	e7b2      	b.n	6a08 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    6aa2:	1e74      	subs	r4, r6, #1
    6aa4:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    6aa6:	f812 7b01 	ldrb.w	r7, [r2], #1
    6aaa:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6aae:	42b2      	cmp	r2, r6
    6ab0:	d1f9      	bne.n	6aa6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    6ab2:	e77a      	b.n	69aa <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    6ab4:	1e42      	subs	r2, r0, #1
    6ab6:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    6ab8:	f816 1b01 	ldrb.w	r1, [r6], #1
    6abc:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6ac0:	42b4      	cmp	r4, r6
    6ac2:	d1f9      	bne.n	6ab8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    6ac4:	e7c8      	b.n	6a58 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    6ac6:	4616      	mov	r6, r2
    6ac8:	e773      	b.n	69b2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    6aca:	bf00      	nop
    6acc:	20000ad0 	.word	0x20000ad0

00006ad0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    6ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    6ad4:	48d8      	ldr	r0, [pc, #864]	; (6e38 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    6ad6:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    6ad8:	2900      	cmp	r1, #0
    6ada:	f040 81ab 	bne.w	6e34 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    6ade:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    6ae0:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    6ae4:	441a      	add	r2, r3
    6ae6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    6aea:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    6aee:	2300      	movs	r3, #0
    6af0:	f3bf 8f5b 	dmb	ish
    6af4:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    6af8:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    6afc:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6afe:	f3bf 8f5b 	dmb	ish
    6b02:	f04f 0101 	mov.w	r1, #1
    6b06:	f504 7388 	add.w	r3, r4, #272	; 0x110
    6b0a:	e8d3 2f4f 	ldrexb	r2, [r3]
    6b0e:	e8c3 1f40 	strexb	r0, r1, [r3]
    6b12:	2800      	cmp	r0, #0
    6b14:	d1f9      	bne.n	6b0a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    6b16:	f3bf 8f5b 	dmb	ish
    6b1a:	f012 0fff 	tst.w	r2, #255	; 0xff
    6b1e:	f040 80dc 	bne.w	6cda <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    6b22:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    6b26:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    6b2a:	428e      	cmp	r6, r1
    6b2c:	f000 8191 	beq.w	6e52 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6b30:	f104 0240 	add.w	r2, r4, #64	; 0x40
    6b34:	eb02 0706 	add.w	r7, r2, r6
    6b38:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    6b3c:	f0c0 80d1 	bcc.w	6ce2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6b40:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6b44:	4419      	add	r1, r3
    6b46:	2940      	cmp	r1, #64	; 0x40
    6b48:	bf28      	it	cs
    6b4a:	2140      	movcs	r1, #64	; 0x40
    6b4c:	428b      	cmp	r3, r1
    6b4e:	bf28      	it	cs
    6b50:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6b52:	2b00      	cmp	r3, #0
    6b54:	f000 81a1 	beq.w	6e9a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    6b58:	f106 0540 	add.w	r5, r6, #64	; 0x40
    6b5c:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    6b60:	1960      	adds	r0, r4, r5
    6b62:	44a4      	add	ip, r4
    6b64:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    6b68:	4540      	cmp	r0, r8
    6b6a:	bf38      	it	cc
    6b6c:	45e6      	cmpcc	lr, ip
    6b6e:	f0c0 818a 	bcc.w	6e86 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6b72:	2b0b      	cmp	r3, #11
    6b74:	f240 8187 	bls.w	6e86 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6b78:	4240      	negs	r0, r0
    6b7a:	f010 0003 	ands.w	r0, r0, #3
    6b7e:	f000 8161 	beq.w	6e44 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    6b82:	5d96      	ldrb	r6, [r2, r6]
    6b84:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    6b88:	2801      	cmp	r0, #1
    6b8a:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    6b8e:	f107 0801 	add.w	r8, r7, #1
    6b92:	f000 8159 	beq.w	6e48 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    6b96:	787e      	ldrb	r6, [r7, #1]
    6b98:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    6b9c:	2802      	cmp	r0, #2
    6b9e:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    6ba2:	f107 0802 	add.w	r8, r7, #2
    6ba6:	f000 814f 	beq.w	6e48 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    6baa:	78be      	ldrb	r6, [r7, #2]
    6bac:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6bb0:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6bb2:	f107 0803 	add.w	r8, r7, #3
    6bb6:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6bba:	9601      	str	r6, [sp, #4]
    6bbc:	eba3 0b00 	sub.w	fp, r3, r0
    6bc0:	f1ab 0604 	sub.w	r6, fp, #4
    6bc4:	08b6      	lsrs	r6, r6, #2
    6bc6:	4405      	add	r5, r0
    6bc8:	3601      	adds	r6, #1
    6bca:	30c0      	adds	r0, #192	; 0xc0
    6bcc:	4425      	add	r5, r4
    6bce:	4420      	add	r0, r4
    6bd0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6bd4:	2700      	movs	r7, #0
    6bd6:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    6bd8:	f855 ab04 	ldr.w	sl, [r5], #4
    6bdc:	f840 ab04 	str.w	sl, [r0], #4
    6be0:	42b7      	cmp	r7, r6
    6be2:	d3f8      	bcc.n	6bd6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    6be4:	9801      	ldr	r0, [sp, #4]
    6be6:	45cb      	cmp	fp, r9
    6be8:	4448      	add	r0, r9
    6bea:	eb0c 0509 	add.w	r5, ip, r9
    6bee:	eb08 0709 	add.w	r7, r8, r9
    6bf2:	d00d      	beq.n	6c10 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    6bf4:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    6bf8:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6bfc:	1c46      	adds	r6, r0, #1
    6bfe:	42b3      	cmp	r3, r6
    6c00:	d906      	bls.n	6c10 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    6c02:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    6c04:	787e      	ldrb	r6, [r7, #1]
    6c06:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6c08:	4283      	cmp	r3, r0
    6c0a:	d901      	bls.n	6c10 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    6c0c:	78b8      	ldrb	r0, [r7, #2]
    6c0e:	70a8      	strb	r0, [r5, #2]
    6c10:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6c14:	1acb      	subs	r3, r1, r3
    6c16:	f000 80fc 	beq.w	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6c1a:	f104 0544 	add.w	r5, r4, #68	; 0x44
    6c1e:	1d06      	adds	r6, r0, #4
    6c20:	42b2      	cmp	r2, r6
    6c22:	bf38      	it	cc
    6c24:	42a8      	cmpcc	r0, r5
    6c26:	f0c0 8125 	bcc.w	6e74 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6c2a:	2b0b      	cmp	r3, #11
    6c2c:	f240 8122 	bls.w	6e74 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6c30:	4255      	negs	r5, r2
    6c32:	f015 0503 	ands.w	r5, r5, #3
    6c36:	f000 8109 	beq.w	6e4c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    6c3a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    6c3e:	7002      	strb	r2, [r0, #0]
    6c40:	2d01      	cmp	r5, #1
    6c42:	f100 0801 	add.w	r8, r0, #1
    6c46:	f104 0241 	add.w	r2, r4, #65	; 0x41
    6c4a:	f000 8100 	beq.w	6e4e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    6c4e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    6c52:	7042      	strb	r2, [r0, #1]
    6c54:	2d02      	cmp	r5, #2
    6c56:	f100 0802 	add.w	r8, r0, #2
    6c5a:	f104 0242 	add.w	r2, r4, #66	; 0x42
    6c5e:	f000 80f6 	beq.w	6e4e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    6c62:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    6c66:	7082      	strb	r2, [r0, #2]
    6c68:	f100 0803 	add.w	r8, r0, #3
    6c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6c70:	2703      	movs	r7, #3
    6c72:	eba3 0905 	sub.w	r9, r3, r5
    6c76:	f1a9 0604 	sub.w	r6, r9, #4
    6c7a:	08b6      	lsrs	r6, r6, #2
    6c7c:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    6c80:	3601      	adds	r6, #1
    6c82:	4428      	add	r0, r5
    6c84:	44a4      	add	ip, r4
    6c86:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    6c8a:	f04f 0a00 	mov.w	sl, #0
    6c8e:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    6c92:	f85c 5b04 	ldr.w	r5, [ip], #4
    6c96:	f840 5b04 	str.w	r5, [r0], #4
    6c9a:	4556      	cmp	r6, sl
    6c9c:	d8f7      	bhi.n	6c8e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    6c9e:	45d9      	cmp	r9, fp
    6ca0:	445f      	add	r7, fp
    6ca2:	eb08 000b 	add.w	r0, r8, fp
    6ca6:	eb02 050b 	add.w	r5, r2, fp
    6caa:	f000 80b2 	beq.w	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6cae:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    6cb2:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6cb6:	1c7a      	adds	r2, r7, #1
    6cb8:	4293      	cmp	r3, r2
    6cba:	f240 80aa 	bls.w	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6cbe:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    6cc0:	786a      	ldrb	r2, [r5, #1]
    6cc2:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6cc4:	42bb      	cmp	r3, r7
    6cc6:	f240 80a4 	bls.w	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    6cca:	78ab      	ldrb	r3, [r5, #2]
    6ccc:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6cce:	4670      	mov	r0, lr
    6cd0:	f005 feb0 	bl	ca34 <cdcdf_acm_write>
    6cd4:	2800      	cmp	r0, #0
    6cd6:	f040 80a2 	bne.w	6e1e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    6cda:	2001      	movs	r0, #1
    6cdc:	b003      	add	sp, #12
    6cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    6ce2:	1b89      	subs	r1, r1, r6
    6ce4:	f106 0340 	add.w	r3, r6, #64	; 0x40
    6ce8:	f106 0044 	add.w	r0, r6, #68	; 0x44
    6cec:	2940      	cmp	r1, #64	; 0x40
    6cee:	eb04 0803 	add.w	r8, r4, r3
    6cf2:	4420      	add	r0, r4
    6cf4:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    6cf8:	bf28      	it	cs
    6cfa:	2140      	movcs	r1, #64	; 0x40
    6cfc:	45a8      	cmp	r8, r5
    6cfe:	bf38      	it	cc
    6d00:	4586      	cmpcc	lr, r0
    6d02:	f0c0 80ad 	bcc.w	6e60 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    6d06:	290b      	cmp	r1, #11
    6d08:	f240 80aa 	bls.w	6e60 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    6d0c:	f1c8 0800 	rsb	r8, r8, #0
    6d10:	f018 0803 	ands.w	r8, r8, #3
    6d14:	f000 8092 	beq.w	6e3c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    6d18:	5d92      	ldrb	r2, [r2, r6]
    6d1a:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    6d1e:	f1b8 0f01 	cmp.w	r8, #1
    6d22:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    6d26:	f107 0601 	add.w	r6, r7, #1
    6d2a:	f000 8089 	beq.w	6e40 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6d2e:	787a      	ldrb	r2, [r7, #1]
    6d30:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    6d34:	f1b8 0f02 	cmp.w	r8, #2
    6d38:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    6d3c:	f107 0602 	add.w	r6, r7, #2
    6d40:	d07e      	beq.n	6e40 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6d42:	78ba      	ldrb	r2, [r7, #2]
    6d44:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    6d48:	1cfe      	adds	r6, r7, #3
    6d4a:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6d4e:	f04f 0903 	mov.w	r9, #3
    6d52:	4443      	add	r3, r8
    6d54:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6d58:	58e2      	ldr	r2, [r4, r3]
    6d5a:	5022      	str	r2, [r4, r0]
    6d5c:	eba1 0808 	sub.w	r8, r1, r8
    6d60:	f1a8 0204 	sub.w	r2, r8, #4
    6d64:	4423      	add	r3, r4
    6d66:	0892      	lsrs	r2, r2, #2
    6d68:	3201      	adds	r2, #1
    6d6a:	4420      	add	r0, r4
    6d6c:	685f      	ldr	r7, [r3, #4]
    6d6e:	6047      	str	r7, [r0, #4]
    6d70:	2a02      	cmp	r2, #2
    6d72:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    6d76:	d035      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6d78:	689f      	ldr	r7, [r3, #8]
    6d7a:	6087      	str	r7, [r0, #8]
    6d7c:	2a03      	cmp	r2, #3
    6d7e:	d031      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6d80:	68df      	ldr	r7, [r3, #12]
    6d82:	60c7      	str	r7, [r0, #12]
    6d84:	2a04      	cmp	r2, #4
    6d86:	d02d      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6d88:	691f      	ldr	r7, [r3, #16]
    6d8a:	6107      	str	r7, [r0, #16]
    6d8c:	2a05      	cmp	r2, #5
    6d8e:	d029      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6d90:	695f      	ldr	r7, [r3, #20]
    6d92:	6147      	str	r7, [r0, #20]
    6d94:	2a06      	cmp	r2, #6
    6d96:	d025      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6d98:	699f      	ldr	r7, [r3, #24]
    6d9a:	6187      	str	r7, [r0, #24]
    6d9c:	2a07      	cmp	r2, #7
    6d9e:	d021      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6da0:	69df      	ldr	r7, [r3, #28]
    6da2:	61c7      	str	r7, [r0, #28]
    6da4:	2a08      	cmp	r2, #8
    6da6:	d01d      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6da8:	6a1f      	ldr	r7, [r3, #32]
    6daa:	6207      	str	r7, [r0, #32]
    6dac:	2a09      	cmp	r2, #9
    6dae:	d019      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6db0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    6db2:	6247      	str	r7, [r0, #36]	; 0x24
    6db4:	2a0a      	cmp	r2, #10
    6db6:	d015      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6db8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    6dba:	6287      	str	r7, [r0, #40]	; 0x28
    6dbc:	2a0b      	cmp	r2, #11
    6dbe:	d011      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6dc0:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    6dc2:	62c7      	str	r7, [r0, #44]	; 0x2c
    6dc4:	2a0c      	cmp	r2, #12
    6dc6:	d00d      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6dc8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    6dca:	6307      	str	r7, [r0, #48]	; 0x30
    6dcc:	2a0d      	cmp	r2, #13
    6dce:	d009      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6dd0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    6dd2:	6347      	str	r7, [r0, #52]	; 0x34
    6dd4:	2a0e      	cmp	r2, #14
    6dd6:	d005      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6dd8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    6dda:	6387      	str	r7, [r0, #56]	; 0x38
    6ddc:	2a0f      	cmp	r2, #15
    6dde:	d001      	beq.n	6de4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6de2:	63c3      	str	r3, [r0, #60]	; 0x3c
    6de4:	45e0      	cmp	r8, ip
    6de6:	44e1      	add	r9, ip
    6de8:	eb05 030c 	add.w	r3, r5, ip
    6dec:	eb06 000c 	add.w	r0, r6, ip
    6df0:	d00f      	beq.n	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6df2:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    6df6:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6dfa:	f109 0201 	add.w	r2, r9, #1
    6dfe:	4291      	cmp	r1, r2
    6e00:	d907      	bls.n	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6e02:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    6e06:	7842      	ldrb	r2, [r0, #1]
    6e08:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6e0a:	4549      	cmp	r1, r9
    6e0c:	d901      	bls.n	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    6e0e:	7882      	ldrb	r2, [r0, #2]
    6e10:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6e12:	4670      	mov	r0, lr
    6e14:	f005 fe0e 	bl	ca34 <cdcdf_acm_write>
    6e18:	2800      	cmp	r0, #0
    6e1a:	f43f af5e 	beq.w	6cda <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    6e1e:	f3bf 8f5b 	dmb	ish
    6e22:	2300      	movs	r3, #0
    6e24:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    6e28:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    6e2a:	f3bf 8f5b 	dmb	ish
}
    6e2e:	b003      	add	sp, #12
    6e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e34:	6801      	ldr	r1, [r0, #0]
    6e36:	e65a      	b.n	6aee <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    6e38:	20000ad0 	.word	0x20000ad0
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6e3c:	463e      	mov	r6, r7
    6e3e:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6e40:	46c1      	mov	r9, r8
    6e42:	e786      	b.n	6d52 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6e44:	46b8      	mov	r8, r7
    6e46:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e48:	9001      	str	r0, [sp, #4]
    6e4a:	e6b7      	b.n	6bbc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e4c:	4680      	mov	r8, r0
    6e4e:	462f      	mov	r7, r5
    6e50:	e70f      	b.n	6c72 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    6e52:	f3bf 8f5b 	dmb	ish
    6e56:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    6e5a:	f3bf 8f5b 	dmb	ish
    6e5e:	e73c      	b.n	6cda <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    6e60:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    6e64:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    6e66:	f817 2b01 	ldrb.w	r2, [r7], #1
    6e6a:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6e6e:	4287      	cmp	r7, r0
    6e70:	d1f9      	bne.n	6e66 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    6e72:	e7ce      	b.n	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6e74:	3801      	subs	r0, #1
    6e76:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    6e78:	f812 5b01 	ldrb.w	r5, [r2], #1
    6e7c:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e80:	429a      	cmp	r2, r3
    6e82:	d1f9      	bne.n	6e78 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    6e84:	e7c5      	b.n	6e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6e86:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    6e8a:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    6e8c:	f817 5b01 	ldrb.w	r5, [r7], #1
    6e90:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e94:	42be      	cmp	r6, r7
    6e96:	d1f9      	bne.n	6e8c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    6e98:	e6ba      	b.n	6c10 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6e9a:	4670      	mov	r0, lr
    6e9c:	e6ba      	b.n	6c14 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    6e9e:	bf00      	nop

00006ea0 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    6ea0:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    6ea2:	4e16      	ldr	r6, [pc, #88]	; (6efc <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    6ea4:	6834      	ldr	r4, [r6, #0]
    6ea6:	f014 0401 	ands.w	r4, r4, #1
    6eaa:	d002      	beq.n	6eb2 <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    6eac:	4b14      	ldr	r3, [pc, #80]	; (6f00 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    6eae:	6818      	ldr	r0, [r3, #0]
    6eb0:	bd70      	pop	{r4, r5, r6, pc}
    6eb2:	f44f 7090 	mov.w	r0, #288	; 0x120
    6eb6:	f00d f823 	bl	13f00 <_Znwj>
    6eba:	4605      	mov	r5, r0
    m_portOpen(false) {
    6ebc:	f100 0380 	add.w	r3, r0, #128	; 0x80
    6ec0:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    6ec4:	490f      	ldr	r1, [pc, #60]	; (6f04 <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    6ec6:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    6eca:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    6ece:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    6ed2:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    6ed6:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    6eda:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    6ede:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    6ee2:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    6ee6:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    6eea:	2003      	movs	r0, #3
    6eec:	f005 fdc2 	bl	ca74 <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    6ef0:	4a03      	ldr	r2, [pc, #12]	; (6f00 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    6ef2:	2301      	movs	r3, #1
    6ef4:	6015      	str	r5, [r2, #0]
    6ef6:	4628      	mov	r0, r5
    6ef8:	6033      	str	r3, [r6, #0]
}
    6efa:	bd70      	pop	{r4, r5, r6, pc}
    6efc:	20000acc 	.word	0x20000acc
    6f00:	20000b14 	.word	0x20000b14
    6f04:	00006819 	.word	0x00006819

00006f08 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    6f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6f0c:	4ac7      	ldr	r2, [pc, #796]	; (722c <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    6f0e:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6f12:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    6f16:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6f18:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6f1c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6f20:	0659      	lsls	r1, r3, #25
    6f22:	d4fb      	bmi.n	6f1c <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    6f24:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6f28:	49c0      	ldr	r1, [pc, #768]	; (722c <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    6f2a:	2004      	movs	r0, #4
    6f2c:	f360 0303 	bfi	r3, r0, #0, #4
    6f30:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6f34:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6f3c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6f40:	684b      	ldr	r3, [r1, #4]
    6f42:	06db      	lsls	r3, r3, #27
    6f44:	d4fc      	bmi.n	6f40 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    6f46:	4bba      	ldr	r3, [pc, #744]	; (7230 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6f48:	49ba      	ldr	r1, [pc, #744]	; (7234 <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    6f4a:	691a      	ldr	r2, [r3, #16]
    6f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6f50:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    6f52:	699a      	ldr	r2, [r3, #24]
    6f54:	f042 0201 	orr.w	r2, r2, #1
    6f58:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6f5a:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    6f5e:	2203      	movs	r2, #3
    6f60:	f006 f934 	bl	d1cc <usb_find_str_desc>
    if (!serNumDescPtr) {
    6f64:	4604      	mov	r4, r0
    6f66:	2800      	cmp	r0, #0
    6f68:	f000 819c 	beq.w	72a4 <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    6f6c:	4bb2      	ldr	r3, [pc, #712]	; (7238 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    6f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6f70:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6f74:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    6f76:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6f78:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6f7a:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6f7e:	f100 0730 	add.w	r7, r0, #48	; 0x30
    6f82:	3037      	adds	r0, #55	; 0x37
    6f84:	2d09      	cmp	r5, #9
    6f86:	bf88      	it	hi
    6f88:	4607      	movhi	r7, r0
    6f8a:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    6f8e:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6f92:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6f96:	3037      	adds	r0, #55	; 0x37
    6f98:	f1b8 0f09 	cmp.w	r8, #9
    6f9c:	bfc8      	it	gt
    6f9e:	4684      	movgt	ip, r0
    6fa0:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    6fa2:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6fa6:	f88d c011 	strb.w	ip, [sp, #17]
    6faa:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6fae:	3037      	adds	r0, #55	; 0x37
    6fb0:	2e09      	cmp	r6, #9
    6fb2:	bfc8      	it	gt
    6fb4:	4684      	movgt	ip, r0
    6fb6:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6fb8:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6fbc:	f88d c012 	strb.w	ip, [sp, #18]
    6fc0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6fc4:	3037      	adds	r0, #55	; 0x37
    6fc6:	2d09      	cmp	r5, #9
    6fc8:	bfc8      	it	gt
    6fca:	4684      	movgt	ip, r0
    6fcc:	fa5f f08e 	uxtb.w	r0, lr
    6fd0:	f88d 7010 	strb.w	r7, [sp, #16]
    6fd4:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    6fd8:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6fdc:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6fe0:	3037      	adds	r0, #55	; 0x37
    6fe2:	f1be 0f09 	cmp.w	lr, #9
    6fe6:	bfd4      	ite	le
    6fe8:	46e6      	movle	lr, ip
    6fea:	4686      	movgt	lr, r0
    6fec:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    6fee:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6ff2:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6ff4:	f88d e014 	strb.w	lr, [sp, #20]
    6ff8:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    6ffc:	3030      	adds	r0, #48	; 0x30
    6ffe:	2f09      	cmp	r7, #9
    7000:	bfcc      	ite	gt
    7002:	4677      	movgt	r7, lr
    7004:	4607      	movle	r7, r0
    7006:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    7008:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    700a:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    700e:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7012:	f100 0737 	add.w	r7, r0, #55	; 0x37
    7016:	3030      	adds	r0, #48	; 0x30
    7018:	2e09      	cmp	r6, #9
    701a:	bfcc      	ite	gt
    701c:	463e      	movgt	r6, r7
    701e:	4606      	movle	r6, r0
    7020:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    7022:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7024:	f88d 6016 	strb.w	r6, [sp, #22]
    7028:	f100 0637 	add.w	r6, r0, #55	; 0x37
    702c:	3030      	adds	r0, #48	; 0x30
    702e:	2b09      	cmp	r3, #9
    7030:	bfcc      	ite	gt
    7032:	4633      	movgt	r3, r6
    7034:	4603      	movle	r3, r0
    7036:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    7038:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    703c:	f88d 3017 	strb.w	r3, [sp, #23]
    7040:	f100 0337 	add.w	r3, r0, #55	; 0x37
    7044:	3030      	adds	r0, #48	; 0x30
    7046:	2d09      	cmp	r5, #9
    7048:	bf88      	it	hi
    704a:	4618      	movhi	r0, r3
    704c:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    7050:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7054:	f88d 0018 	strb.w	r0, [sp, #24]
    7058:	f103 0037 	add.w	r0, r3, #55	; 0x37
    705c:	3330      	adds	r3, #48	; 0x30
    705e:	f1bc 0f09 	cmp.w	ip, #9
    7062:	bfcc      	ite	gt
    7064:	4684      	movgt	ip, r0
    7066:	469c      	movle	ip, r3
    7068:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    706c:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7070:	f88d c019 	strb.w	ip, [sp, #25]
    7074:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    7078:	3330      	adds	r3, #48	; 0x30
    707a:	f1be 0f09 	cmp.w	lr, #9
    707e:	bfd8      	it	le
    7080:	469c      	movle	ip, r3
    7082:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    7084:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7088:	f88d c01a 	strb.w	ip, [sp, #26]
    708c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    7090:	3330      	adds	r3, #48	; 0x30
    7092:	2f09      	cmp	r7, #9
    7094:	bfd8      	it	le
    7096:	469c      	movle	ip, r3
    7098:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    709a:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    709e:	f88d c01b 	strb.w	ip, [sp, #27]
    70a2:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    70a6:	3330      	adds	r3, #48	; 0x30
    70a8:	2e09      	cmp	r6, #9
    70aa:	bfd8      	it	le
    70ac:	469c      	movle	ip, r3
    70ae:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    70b0:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    70b4:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    70b6:	f88d c01c 	strb.w	ip, [sp, #28]
    70ba:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    70be:	3330      	adds	r3, #48	; 0x30
    70c0:	2d09      	cmp	r5, #9
    70c2:	bfcc      	ite	gt
    70c4:	4665      	movgt	r5, ip
    70c6:	461d      	movle	r5, r3
    70c8:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    70ca:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    70cc:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    70d0:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    70d4:	f103 0537 	add.w	r5, r3, #55	; 0x37
    70d8:	3330      	adds	r3, #48	; 0x30
    70da:	2809      	cmp	r0, #9
    70dc:	bfcc      	ite	gt
    70de:	4628      	movgt	r0, r5
    70e0:	4618      	movle	r0, r3
    70e2:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    70e4:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    70e8:	f88d 001e 	strb.w	r0, [sp, #30]
    70ec:	f103 0037 	add.w	r0, r3, #55	; 0x37
    70f0:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    70f2:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    70f6:	2a09      	cmp	r2, #9
    70f8:	bfcc      	ite	gt
    70fa:	4602      	movgt	r2, r0
    70fc:	461a      	movle	r2, r3
    70fe:	fa5f f58e 	uxtb.w	r5, lr
    7102:	b2f8      	uxtb	r0, r7
    7104:	f88d 201f 	strb.w	r2, [sp, #31]
    7108:	f105 0237 	add.w	r2, r5, #55	; 0x37
    710c:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    710e:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7112:	f1be 0f09 	cmp.w	lr, #9
    7116:	bf88      	it	hi
    7118:	4615      	movhi	r5, r2
    711a:	f100 0237 	add.w	r2, r0, #55	; 0x37
    711e:	3030      	adds	r0, #48	; 0x30
    7120:	2f09      	cmp	r7, #9
    7122:	bfc8      	it	gt
    7124:	4610      	movgt	r0, r2
    7126:	b2f3      	uxtb	r3, r6
    7128:	f103 0237 	add.w	r2, r3, #55	; 0x37
    712c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    7130:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    7132:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7136:	2e09      	cmp	r6, #9
    7138:	bfc8      	it	gt
    713a:	4613      	movgt	r3, r2
    713c:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    713e:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7142:	f102 0837 	add.w	r8, r2, #55	; 0x37
    7146:	3230      	adds	r2, #48	; 0x30
    7148:	2809      	cmp	r0, #9
    714a:	bfd8      	it	le
    714c:	4690      	movle	r8, r2
    714e:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    7152:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7156:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    715a:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    715c:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    715e:	f88d 5020 	strb.w	r5, [sp, #32]
    7162:	f102 0437 	add.w	r4, r2, #55	; 0x37
    7166:	3230      	adds	r2, #48	; 0x30
    7168:	f1be 0f09 	cmp.w	lr, #9
    716c:	bfd8      	it	le
    716e:	4614      	movle	r4, r2
    7170:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    7172:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7174:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    7178:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    717c:	f102 0437 	add.w	r4, r2, #55	; 0x37
    7180:	3230      	adds	r2, #48	; 0x30
    7182:	2f09      	cmp	r7, #9
    7184:	bfcc      	ite	gt
    7186:	4627      	movgt	r7, r4
    7188:	4617      	movle	r7, r2
    718a:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    718c:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7190:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    7194:	f102 0737 	add.w	r7, r2, #55	; 0x37
    7198:	3230      	adds	r2, #48	; 0x30
    719a:	2e09      	cmp	r6, #9
    719c:	bfcc      	ite	gt
    719e:	463e      	movgt	r6, r7
    71a0:	4616      	movle	r6, r2
    71a2:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    71a4:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    71a6:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    71aa:	f102 0637 	add.w	r6, r2, #55	; 0x37
    71ae:	3230      	adds	r2, #48	; 0x30
    71b0:	2909      	cmp	r1, #9
    71b2:	bfcc      	ite	gt
    71b4:	4631      	movgt	r1, r6
    71b6:	4611      	movle	r1, r2
    71b8:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    71ba:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    71be:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    71c2:	f102 0130 	add.w	r1, r2, #48	; 0x30
    71c6:	3237      	adds	r2, #55	; 0x37
    71c8:	2d09      	cmp	r5, #9
    71ca:	bf88      	it	hi
    71cc:	4611      	movhi	r1, r2
    71ce:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    71d2:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    71d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    71da:	f102 0130 	add.w	r1, r2, #48	; 0x30
    71de:	3237      	adds	r2, #55	; 0x37
    71e0:	f1bc 0f09 	cmp.w	ip, #9
    71e4:	bfd4      	ite	le
    71e6:	468c      	movle	ip, r1
    71e8:	4694      	movgt	ip, r2
    71ea:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    71ee:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    71f2:	f102 0137 	add.w	r1, r2, #55	; 0x37
    71f6:	3230      	adds	r2, #48	; 0x30
    71f8:	f1be 0f09 	cmp.w	lr, #9
    71fc:	bfcc      	ite	gt
    71fe:	468e      	movgt	lr, r1
    7200:	4696      	movle	lr, r2
    7202:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    7204:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7208:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    720c:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    7210:	3130      	adds	r1, #48	; 0x30
    7212:	2c09      	cmp	r4, #9
    7214:	bfd8      	it	le
    7216:	468e      	movle	lr, r1
    7218:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    721a:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    721e:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    7222:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    7226:	3237      	adds	r2, #55	; 0x37
    7228:	e008      	b.n	723c <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    722a:	bf00      	nop
    722c:	40001c00 	.word	0x40001c00
    7230:	40000800 	.word	0x40000800
    7234:	200000df 	.word	0x200000df
    7238:	0002393c 	.word	0x0002393c
    723c:	2f09      	cmp	r7, #9
    723e:	bfd4      	ite	le
    7240:	4677      	movle	r7, lr
    7242:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    7244:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7248:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    724a:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    724e:	b2da      	uxtb	r2, r3
    7250:	b2e9      	uxtb	r1, r5
    7252:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    7256:	f104 0730 	add.w	r7, r4, #48	; 0x30
    725a:	3437      	adds	r4, #55	; 0x37
    725c:	2e09      	cmp	r6, #9
    725e:	bfd8      	it	le
    7260:	463c      	movle	r4, r7
    7262:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    7266:	f102 0730 	add.w	r7, r2, #48	; 0x30
    726a:	3137      	adds	r1, #55	; 0x37
    726c:	3237      	adds	r2, #55	; 0x37
    726e:	2d09      	cmp	r5, #9
    7270:	bfd8      	it	le
    7272:	4671      	movle	r1, lr
    7274:	2b09      	cmp	r3, #9
    7276:	bfd4      	ite	le
    7278:	463b      	movle	r3, r7
    727a:	4613      	movgt	r3, r2
    727c:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    7280:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    7284:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    7288:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    728c:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    7290:	f10d 030f 	add.w	r3, sp, #15
    7294:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    7298:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    729c:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    72a0:	428b      	cmp	r3, r1
    72a2:	d1f9      	bne.n	7298 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    72a4:	4b2a      	ldr	r3, [pc, #168]	; (7350 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    72a6:	4a2b      	ldr	r2, [pc, #172]	; (7354 <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72a8:	4f2b      	ldr	r7, [pc, #172]	; (7358 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    72aa:	4d2c      	ldr	r5, [pc, #176]	; (735c <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    72ac:	482c      	ldr	r0, [pc, #176]	; (7360 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    72ae:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    72b0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    72b8:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    72bc:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    72c0:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    72c4:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    72c8:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72ca:	629c      	str	r4, [r3, #40]	; 0x28
    72cc:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    72ce:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    72d0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    72d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    72d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    72dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    72e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    72e4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    72e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    72ec:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    72f0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    72f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    72f8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    72fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7300:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7302:	629c      	str	r4, [r3, #40]	; 0x28
    7304:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7306:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    7308:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    730c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    7310:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    7314:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    7318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    731c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    7320:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    7324:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    7328:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    732c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    7330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    7334:	f005 fe92 	bl	d05c <usbdc_init>
    cdcdf_acm_init();
    7338:	f005 fb4a 	bl	c9d0 <cdcdf_acm_init>
    usbdc_start(single_desc);
    733c:	4809      	ldr	r0, [pc, #36]	; (7364 <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    733e:	f005 febb 	bl	d0b8 <usbdc_start>
    usbdc_attach();
    7342:	f005 fed1 	bl	d0e8 <usbdc_attach>
}
    7346:	2001      	movs	r0, #1
    7348:	b00c      	add	sp, #48	; 0x30
    734a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    734e:	bf00      	nop
    7350:	41008000 	.word	0x41008000
    7354:	e000e100 	.word	0xe000e100
    7358:	c0000100 	.word	0xc0000100
    735c:	c0000200 	.word	0xc0000200
    7360:	20000ad4 	.word	0x20000ad4
    7364:	20000000 	.word	0x20000000

00007368 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    7368:	2001      	movs	r0, #1
    736a:	4770      	bx	lr

0000736c <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    736c:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    736e:	f005 fbaf 	bl	cad0 <cdcdf_acm_get_line_coding>
}
    7372:	6800      	ldr	r0, [r0, #0]
    7374:	bd08      	pop	{r3, pc}
    7376:	bf00      	nop

00007378 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    7378:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    737a:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    737e:	b103      	cbz	r3, 7382 <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    7380:	bd38      	pop	{r3, r4, r5, pc}
    7382:	4604      	mov	r4, r0
    m_portOpen = true;
    7384:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    7386:	4618      	mov	r0, r3
    m_portOpen = true;
    7388:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    738c:	4906      	ldr	r1, [pc, #24]	; (73a8 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    738e:	f005 fb71 	bl	ca74 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    7392:	4628      	mov	r0, r5
    7394:	4905      	ldr	r1, [pc, #20]	; (73ac <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    7396:	f005 fb6d 	bl	ca74 <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    739a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    739e:	2140      	movs	r1, #64	; 0x40
}
    73a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    73a4:	f005 bb32 	b.w	ca0c <cdcdf_acm_read>
    73a8:	00006899 	.word	0x00006899
    73ac:	00006ad1 	.word	0x00006ad1

000073b0 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    73b0:	4603      	mov	r3, r0
    m_inHead = 0;
    73b2:	2200      	movs	r2, #0
    73b4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    73b8:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    73bc:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    73c0:	2140      	movs	r1, #64	; 0x40
    73c2:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    73c4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    73c8:	f005 bb20 	b.w	ca0c <cdcdf_acm_read>

000073cc <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    73cc:	b538      	push	{r3, r4, r5, lr}
    73ce:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    73d0:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    73d4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    73d8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    73dc:	429a      	cmp	r2, r3
    73de:	d100      	bne.n	73e2 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    73e0:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    73e2:	f005 fb6f 	bl	cac4 <cdcdf_acm_is_enabled>
    73e6:	2800      	cmp	r0, #0
    73e8:	d0fa      	beq.n	73e0 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    73ea:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    73ee:	07db      	lsls	r3, r3, #31
    73f0:	d5f6      	bpl.n	73e0 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    73f2:	7b6b      	ldrb	r3, [r5, #13]
    73f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    73f8:	2b02      	cmp	r3, #2
    73fa:	d0eb      	beq.n	73d4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    73fc:	bd38      	pop	{r3, r4, r5, pc}
    73fe:	bf00      	nop

00007400 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    7400:	b538      	push	{r3, r4, r5, lr}
    7402:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7404:	f005 fb5e 	bl	cac4 <cdcdf_acm_is_enabled>
    7408:	4604      	mov	r4, r0
    740a:	b170      	cbz	r0, 742a <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    740c:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    7410:	f014 0401 	ands.w	r4, r4, #1
    7414:	d009      	beq.n	742a <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7416:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    741a:	7b5c      	ldrb	r4, [r3, #13]
    741c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7420:	f1a4 0402 	sub.w	r4, r4, #2
    7424:	fab4 f484 	clz	r4, r4
    7428:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    742a:	4803      	ldr	r0, [pc, #12]	; (7438 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    742c:	2100      	movs	r1, #0
    742e:	f002 ffeb 	bl	a408 <Delay_cycles>
}
    7432:	4620      	mov	r0, r4
    7434:	bd38      	pop	{r3, r4, r5, pc}
    7436:	bf00      	nop
    7438:	00124f80 	.word	0x00124f80

0000743c <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    743c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    7440:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7444:	4293      	cmp	r3, r2
    7446:	f000 8116 	beq.w	7676 <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    744a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    744e:	1c5a      	adds	r2, r3, #1
    7450:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    7454:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    7456:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    745a:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    745c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    745e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    7462:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    7466:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    746a:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    746c:	bf48      	it	mi
    746e:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    7470:	2d00      	cmp	r5, #0
    7472:	f000 80e3 	beq.w	763c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    7476:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    747a:	f000 80df 	beq.w	763c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    747e:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    7482:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    7486:	42ab      	cmp	r3, r5
    7488:	bf28      	it	cs
    748a:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    748c:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    7490:	4299      	cmp	r1, r3
    7492:	bf28      	it	cs
    7494:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    7496:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7498:	2900      	cmp	r1, #0
    749a:	f000 80f8 	beq.w	768e <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    749e:	1d35      	adds	r5, r6, #4
    74a0:	4405      	add	r5, r0
    74a2:	f102 0e04 	add.w	lr, r2, #4
    74a6:	4577      	cmp	r7, lr
    74a8:	bf38      	it	cc
    74aa:	42aa      	cmpcc	r2, r5
    74ac:	f0c0 80da 	bcc.w	7664 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    74b0:	290b      	cmp	r1, #11
    74b2:	f240 80d7 	bls.w	7664 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    74b6:	4255      	negs	r5, r2
    74b8:	f015 0503 	ands.w	r5, r5, #3
    74bc:	f000 80c3 	beq.w	7646 <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    74c0:	f892 e000 	ldrb.w	lr, [r2]
    74c4:	f800 e006 	strb.w	lr, [r0, r6]
    74c8:	2d01      	cmp	r5, #1
    74ca:	f107 0801 	add.w	r8, r7, #1
    74ce:	f102 0901 	add.w	r9, r2, #1
    74d2:	f000 80ba 	beq.w	764a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    74d6:	f892 e001 	ldrb.w	lr, [r2, #1]
    74da:	f887 e001 	strb.w	lr, [r7, #1]
    74de:	2d02      	cmp	r5, #2
    74e0:	f107 0802 	add.w	r8, r7, #2
    74e4:	f102 0902 	add.w	r9, r2, #2
    74e8:	f000 80af 	beq.w	764a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    74ec:	f892 e002 	ldrb.w	lr, [r2, #2]
    74f0:	f887 e002 	strb.w	lr, [r7, #2]
    74f4:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    74f8:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    74fa:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    74fe:	9700      	str	r7, [sp, #0]
    7500:	eba1 0b05 	sub.w	fp, r1, r5
    7504:	f1ab 0704 	sub.w	r7, fp, #4
    7508:	08bf      	lsrs	r7, r7, #2
    750a:	eb06 0e05 	add.w	lr, r6, r5
    750e:	3701      	adds	r7, #1
    7510:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    7514:	4486      	add	lr, r0
    7516:	4415      	add	r5, r2
    7518:	f04f 0c00 	mov.w	ip, #0
    751c:	9401      	str	r4, [sp, #4]
    751e:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    7522:	f855 4b04 	ldr.w	r4, [r5], #4
    7526:	f84e 4b04 	str.w	r4, [lr], #4
    752a:	4567      	cmp	r7, ip
    752c:	d8f7      	bhi.n	751e <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    752e:	9d00      	ldr	r5, [sp, #0]
    7530:	9c01      	ldr	r4, [sp, #4]
    7532:	45d3      	cmp	fp, sl
    7534:	4455      	add	r5, sl
    7536:	eb08 0e0a 	add.w	lr, r8, sl
    753a:	eb09 0c0a 	add.w	ip, r9, sl
    753e:	f000 808c 	beq.w	765a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    7542:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    7546:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    754a:	1c6f      	adds	r7, r5, #1
    754c:	42b9      	cmp	r1, r7
    754e:	f240 8084 	bls.w	765a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    7552:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    7554:	f89c 7001 	ldrb.w	r7, [ip, #1]
    7558:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    755c:	42a9      	cmp	r1, r5
    755e:	d97c      	bls.n	765a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    7560:	f89c 5002 	ldrb.w	r5, [ip, #2]
    7564:	f88e 5002 	strb.w	r5, [lr, #2]
    7568:	1857      	adds	r7, r2, r1
    756a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    756e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    7572:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    7574:	1a6d      	subs	r5, r5, r1
        if (count) {
    7576:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    7578:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    757c:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    7580:	d065      	beq.n	764e <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    7582:	1d01      	adds	r1, r0, #4
    7584:	1d3a      	adds	r2, r7, #4
    7586:	4290      	cmp	r0, r2
    7588:	bf38      	it	cc
    758a:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    758c:	4605      	mov	r5, r0
    758e:	d375      	bcc.n	767c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    7590:	2b0b      	cmp	r3, #11
    7592:	d973      	bls.n	767c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    7594:	4242      	negs	r2, r0
    7596:	f012 0203 	ands.w	r2, r2, #3
    759a:	d060      	beq.n	765e <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    759c:	7839      	ldrb	r1, [r7, #0]
    759e:	7001      	strb	r1, [r0, #0]
    75a0:	2a01      	cmp	r2, #1
    75a2:	f100 0501 	add.w	r5, r0, #1
    75a6:	f107 0e01 	add.w	lr, r7, #1
    75aa:	d059      	beq.n	7660 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    75ac:	7879      	ldrb	r1, [r7, #1]
    75ae:	7041      	strb	r1, [r0, #1]
    75b0:	2a02      	cmp	r2, #2
    75b2:	f100 0502 	add.w	r5, r0, #2
    75b6:	f107 0e02 	add.w	lr, r7, #2
    75ba:	d051      	beq.n	7660 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    75bc:	78b9      	ldrb	r1, [r7, #2]
    75be:	7081      	strb	r1, [r0, #2]
    75c0:	1cc5      	adds	r5, r0, #3
    75c2:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    75c6:	f04f 0803 	mov.w	r8, #3
    75ca:	eba3 0c02 	sub.w	ip, r3, r2
    75ce:	f1ac 0104 	sub.w	r1, ip, #4
    75d2:	0889      	lsrs	r1, r1, #2
    75d4:	1c4e      	adds	r6, r1, #1
    75d6:	4417      	add	r7, r2
    75d8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    75dc:	4402      	add	r2, r0
    75de:	2100      	movs	r1, #0
    75e0:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    75e2:	f857 ab04 	ldr.w	sl, [r7], #4
    75e6:	f842 ab04 	str.w	sl, [r2], #4
    75ea:	428e      	cmp	r6, r1
    75ec:	d8f8      	bhi.n	75e0 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    75ee:	45cc      	cmp	ip, r9
    75f0:	eb08 0209 	add.w	r2, r8, r9
    75f4:	eb05 0109 	add.w	r1, r5, r9
    75f8:	eb0e 0709 	add.w	r7, lr, r9
    75fc:	d00d      	beq.n	761a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    75fe:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    7602:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    7606:	1c55      	adds	r5, r2, #1
    7608:	42ab      	cmp	r3, r5
    760a:	d906      	bls.n	761a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    760c:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    760e:	787d      	ldrb	r5, [r7, #1]
    7610:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    7612:	4293      	cmp	r3, r2
    7614:	d901      	bls.n	761a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    7616:	78ba      	ldrb	r2, [r7, #2]
    7618:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    761a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    761e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    7622:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    7626:	441a      	add	r2, r3
            m_readBufAvail -= count;
    7628:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    762a:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    762e:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    7632:	b91d      	cbnz	r5, 763c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7634:	3080      	adds	r0, #128	; 0x80
    7636:	2140      	movs	r1, #64	; 0x40
    7638:	f005 f9e8 	bl	ca0c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    763c:	b662      	cpsie	i
    return retVal;
    763e:	b220      	sxth	r0, r4
}
    7640:	b003      	add	sp, #12
    7642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    7646:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    7648:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    764a:	9500      	str	r5, [sp, #0]
    764c:	e758      	b.n	7500 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    764e:	4431      	add	r1, r6
    7650:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    7654:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7658:	e7eb      	b.n	7632 <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    765a:	1857      	adds	r7, r2, r1
    765c:	e785      	b.n	756a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    765e:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    7660:	4690      	mov	r8, r2
    7662:	e7b2      	b.n	75ca <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    7664:	1e7d      	subs	r5, r7, #1
    7666:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    7668:	f812 eb01 	ldrb.w	lr, [r2], #1
    766c:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7670:	42ba      	cmp	r2, r7
    7672:	d1f9      	bne.n	7668 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    7674:	e779      	b.n	756a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    7676:	f04f 30ff 	mov.w	r0, #4294967295
    767a:	4770      	bx	lr
    767c:	1e42      	subs	r2, r0, #1
    767e:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    7680:	f817 1b01 	ldrb.w	r1, [r7], #1
    7684:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    7688:	42bd      	cmp	r5, r7
    768a:	d1f9      	bne.n	7680 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    768c:	e7c5      	b.n	761a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    768e:	4617      	mov	r7, r2
    7690:	e76f      	b.n	7572 <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    7692:	bf00      	nop

00007694 <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    7694:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7698:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    769c:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    769e:	bf1a      	itte	ne
    76a0:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    76a4:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    76a6:	f04f 30ff 	moveq.w	r0, #4294967295
}
    76aa:	4770      	bx	lr

000076ac <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    76ac:	b570      	push	{r4, r5, r6, lr}
    76ae:	4604      	mov	r4, r0
    76b0:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    76b2:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    76b6:	f005 fa05 	bl	cac4 <cdcdf_acm_is_enabled>
    76ba:	b350      	cbz	r0, 7712 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    76bc:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    76c0:	f010 0001 	ands.w	r0, r0, #1
    76c4:	d025      	beq.n	7712 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    76c6:	7b6b      	ldrb	r3, [r5, #13]
    76c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    76cc:	2b02      	cmp	r3, #2
    76ce:	d001      	beq.n	76d4 <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    76d0:	2000      	movs	r0, #0
    76d2:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    76d4:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    76d8:	b900      	cbnz	r0, 76dc <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    76da:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    76dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    76e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    76e4:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    76e6:	1e5a      	subs	r2, r3, #1
    76e8:	d40e      	bmi.n	7708 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    76ea:	2a00      	cmp	r2, #0
    76ec:	d0e3      	beq.n	76b6 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    76ee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    76f2:	4423      	add	r3, r4
    76f4:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    76f8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    76fc:	3301      	adds	r3, #1
    76fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7702:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    7706:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    7708:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    770c:	2a00      	cmp	r2, #0
    770e:	d0d2      	beq.n	76b6 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    7710:	e7ed      	b.n	76ee <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    7712:	bd70      	pop	{r4, r5, r6, pc}

00007714 <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    7714:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    7718:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    771c:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    771e:	bf48      	it	mi
    7720:	3040      	addmi	r0, #64	; 0x40
}
    7722:	4770      	bx	lr

00007724 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    7724:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    7728:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    772c:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    772e:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    7730:	bf48      	it	mi
    7732:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    7736:	4770      	bx	lr

00007738 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    7738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    773c:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    7740:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7742:	f04f 0101 	mov.w	r1, #1
    7746:	f3bf 8f5b 	dmb	ish
    774a:	e8d3 2f4f 	ldrexb	r2, [r3]
    774e:	e8c3 1f44 	strexb	r4, r1, [r3]
    7752:	2c00      	cmp	r4, #0
    7754:	d1f9      	bne.n	774a <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    7756:	f3bf 8f5b 	dmb	ish
    775a:	f012 0fff 	tst.w	r2, #255	; 0xff
    775e:	f040 80e4 	bne.w	792a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    7762:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    7766:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    776a:	428e      	cmp	r6, r1
    776c:	f000 81b6 	beq.w	7adc <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7770:	f100 0340 	add.w	r3, r0, #64	; 0x40
    7774:	eb03 0706 	add.w	r7, r3, r6
    7778:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    777c:	f0c0 80d8 	bcc.w	7930 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7780:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    7784:	4411      	add	r1, r2
    7786:	2940      	cmp	r1, #64	; 0x40
    7788:	bf28      	it	cs
    778a:	2140      	movcs	r1, #64	; 0x40
    778c:	428a      	cmp	r2, r1
    778e:	bf28      	it	cs
    7790:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7792:	2a00      	cmp	r2, #0
    7794:	f000 81c7 	beq.w	7b26 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    7798:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    779c:	f106 0444 	add.w	r4, r6, #68	; 0x44
    77a0:	eb00 080e 	add.w	r8, r0, lr
    77a4:	4404      	add	r4, r0
    77a6:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    77aa:	45e0      	cmp	r8, ip
    77ac:	bf38      	it	cc
    77ae:	42a5      	cmpcc	r5, r4
    77b0:	f0c0 81ae 	bcc.w	7b10 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    77b4:	2a0b      	cmp	r2, #11
    77b6:	f240 81ab 	bls.w	7b10 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    77ba:	426c      	negs	r4, r5
    77bc:	f014 0403 	ands.w	r4, r4, #3
    77c0:	f000 817f 	beq.w	7ac2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    77c4:	5d9e      	ldrb	r6, [r3, r6]
    77c6:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    77ca:	2c01      	cmp	r4, #1
    77cc:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    77d0:	f107 0801 	add.w	r8, r7, #1
    77d4:	f000 817b 	beq.w	7ace <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    77d8:	787e      	ldrb	r6, [r7, #1]
    77da:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    77de:	2c02      	cmp	r4, #2
    77e0:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    77e4:	f107 0802 	add.w	r8, r7, #2
    77e8:	f000 8171 	beq.w	7ace <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    77ec:	78be      	ldrb	r6, [r7, #2]
    77ee:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    77f2:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    77f4:	f107 0803 	add.w	r8, r7, #3
    77f8:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    77fc:	9601      	str	r6, [sp, #4]
    77fe:	eba2 0b04 	sub.w	fp, r2, r4
    7802:	f1ab 0704 	sub.w	r7, fp, #4
    7806:	08bf      	lsrs	r7, r7, #2
    7808:	eb0e 0604 	add.w	r6, lr, r4
    780c:	3701      	adds	r7, #1
    780e:	34c0      	adds	r4, #192	; 0xc0
    7810:	4406      	add	r6, r0
    7812:	4404      	add	r4, r0
    7814:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7818:	f04f 0e00 	mov.w	lr, #0
    781c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7820:	f856 ab04 	ldr.w	sl, [r6], #4
    7824:	f844 ab04 	str.w	sl, [r4], #4
    7828:	45be      	cmp	lr, r7
    782a:	d3f7      	bcc.n	781c <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    782c:	9c01      	ldr	r4, [sp, #4]
    782e:	45cb      	cmp	fp, r9
    7830:	444c      	add	r4, r9
    7832:	eb08 0e09 	add.w	lr, r8, r9
    7836:	eb0c 0609 	add.w	r6, ip, r9
    783a:	d00f      	beq.n	785c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    783c:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    7840:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7844:	1c67      	adds	r7, r4, #1
    7846:	42ba      	cmp	r2, r7
    7848:	d908      	bls.n	785c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    784a:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    784c:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7850:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7852:	42a2      	cmp	r2, r4
    7854:	d902      	bls.n	785c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    7856:	f89e 4002 	ldrb.w	r4, [lr, #2]
    785a:	70b4      	strb	r4, [r6, #2]
    785c:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    785e:	1a8a      	subs	r2, r1, r2
    7860:	f000 811a 	beq.w	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7864:	1d26      	adds	r6, r4, #4
    7866:	f100 0744 	add.w	r7, r0, #68	; 0x44
    786a:	42bc      	cmp	r4, r7
    786c:	bf38      	it	cc
    786e:	42b3      	cmpcc	r3, r6
    7870:	f0c0 8145 	bcc.w	7afe <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    7874:	2a0b      	cmp	r2, #11
    7876:	f240 8142 	bls.w	7afe <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    787a:	425f      	negs	r7, r3
    787c:	f017 0703 	ands.w	r7, r7, #3
    7880:	f000 8129 	beq.w	7ad6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    7884:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7888:	7023      	strb	r3, [r4, #0]
    788a:	2f01      	cmp	r7, #1
    788c:	f104 0c01 	add.w	ip, r4, #1
    7890:	f100 0341 	add.w	r3, r0, #65	; 0x41
    7894:	f000 811d 	beq.w	7ad2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    7898:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    789c:	7063      	strb	r3, [r4, #1]
    789e:	2f02      	cmp	r7, #2
    78a0:	f104 0c02 	add.w	ip, r4, #2
    78a4:	f100 0342 	add.w	r3, r0, #66	; 0x42
    78a8:	f000 8113 	beq.w	7ad2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    78ac:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    78b0:	70a3      	strb	r3, [r4, #2]
    78b2:	f104 0c03 	add.w	ip, r4, #3
    78b6:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    78ba:	f04f 0903 	mov.w	r9, #3
    78be:	eba2 0807 	sub.w	r8, r2, r7
    78c2:	f1a8 0e04 	sub.w	lr, r8, #4
    78c6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    78ca:	f107 0640 	add.w	r6, r7, #64	; 0x40
    78ce:	f10e 0e01 	add.w	lr, lr, #1
    78d2:	443c      	add	r4, r7
    78d4:	4406      	add	r6, r0
    78d6:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    78da:	2700      	movs	r7, #0
    78dc:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    78de:	f856 bb04 	ldr.w	fp, [r6], #4
    78e2:	f844 bb04 	str.w	fp, [r4], #4
    78e6:	45be      	cmp	lr, r7
    78e8:	d8f8      	bhi.n	78dc <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    78ea:	45d0      	cmp	r8, sl
    78ec:	eb09 040a 	add.w	r4, r9, sl
    78f0:	eb03 070a 	add.w	r7, r3, sl
    78f4:	eb0c 060a 	add.w	r6, ip, sl
    78f8:	f000 80ce 	beq.w	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    78fc:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    7900:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7904:	1c63      	adds	r3, r4, #1
    7906:	429a      	cmp	r2, r3
    7908:	f240 80c6 	bls.w	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    790c:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    790e:	787b      	ldrb	r3, [r7, #1]
    7910:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7912:	42a2      	cmp	r2, r4
    7914:	f240 80c0 	bls.w	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    7918:	78bb      	ldrb	r3, [r7, #2]
    791a:	70b3      	strb	r3, [r6, #2]
    791c:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    791e:	4628      	mov	r0, r5
    7920:	f005 f888 	bl	ca34 <cdcdf_acm_write>
    7924:	2800      	cmp	r0, #0
    7926:	f040 80be 	bne.w	7aa6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    792a:	b003      	add	sp, #12
    792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    7930:	1b89      	subs	r1, r1, r6
    7932:	f106 0240 	add.w	r2, r6, #64	; 0x40
    7936:	f106 0444 	add.w	r4, r6, #68	; 0x44
    793a:	2940      	cmp	r1, #64	; 0x40
    793c:	eb00 0c02 	add.w	ip, r0, r2
    7940:	4404      	add	r4, r0
    7942:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    7946:	bf28      	it	cs
    7948:	2140      	movcs	r1, #64	; 0x40
    794a:	45f4      	cmp	ip, lr
    794c:	bf38      	it	cc
    794e:	42a5      	cmpcc	r5, r4
    7950:	f0c0 80cb 	bcc.w	7aea <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    7954:	290b      	cmp	r1, #11
    7956:	f240 80c8 	bls.w	7aea <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    795a:	426c      	negs	r4, r5
    795c:	f014 0403 	ands.w	r4, r4, #3
    7960:	f000 80ab 	beq.w	7aba <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    7964:	5d9b      	ldrb	r3, [r3, r6]
    7966:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    796a:	2c01      	cmp	r4, #1
    796c:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    7970:	f107 0e01 	add.w	lr, r7, #1
    7974:	f000 80a9 	beq.w	7aca <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7978:	787b      	ldrb	r3, [r7, #1]
    797a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    797e:	2c02      	cmp	r4, #2
    7980:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    7984:	f107 0e02 	add.w	lr, r7, #2
    7988:	f000 809f 	beq.w	7aca <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    798c:	78bb      	ldrb	r3, [r7, #2]
    798e:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    7992:	f107 0e03 	add.w	lr, r7, #3
    7996:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    799a:	f04f 0c03 	mov.w	ip, #3
    799e:	1913      	adds	r3, r2, r4
    79a0:	4403      	add	r3, r0
    79a2:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    79a6:	681a      	ldr	r2, [r3, #0]
    79a8:	f840 2008 	str.w	r2, [r0, r8]
    79ac:	1b0f      	subs	r7, r1, r4
    79ae:	1f3a      	subs	r2, r7, #4
    79b0:	0892      	lsrs	r2, r2, #2
    79b2:	eb00 0408 	add.w	r4, r0, r8
    79b6:	3201      	adds	r2, #1
    79b8:	f8d3 8004 	ldr.w	r8, [r3, #4]
    79bc:	f8c4 8004 	str.w	r8, [r4, #4]
    79c0:	2a02      	cmp	r2, #2
    79c2:	ea4f 0882 	mov.w	r8, r2, lsl #2
    79c6:	d04f      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    79c8:	f8d3 9008 	ldr.w	r9, [r3, #8]
    79cc:	f8c4 9008 	str.w	r9, [r4, #8]
    79d0:	2a03      	cmp	r2, #3
    79d2:	d049      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    79d4:	f8d3 900c 	ldr.w	r9, [r3, #12]
    79d8:	f8c4 900c 	str.w	r9, [r4, #12]
    79dc:	2a04      	cmp	r2, #4
    79de:	d043      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    79e0:	f8d3 9010 	ldr.w	r9, [r3, #16]
    79e4:	f8c4 9010 	str.w	r9, [r4, #16]
    79e8:	2a05      	cmp	r2, #5
    79ea:	d03d      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    79ec:	f8d3 9014 	ldr.w	r9, [r3, #20]
    79f0:	f8c4 9014 	str.w	r9, [r4, #20]
    79f4:	2a06      	cmp	r2, #6
    79f6:	d037      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    79f8:	f8d3 9018 	ldr.w	r9, [r3, #24]
    79fc:	f8c4 9018 	str.w	r9, [r4, #24]
    7a00:	2a07      	cmp	r2, #7
    7a02:	d031      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a04:	f8d3 901c 	ldr.w	r9, [r3, #28]
    7a08:	f8c4 901c 	str.w	r9, [r4, #28]
    7a0c:	2a08      	cmp	r2, #8
    7a0e:	d02b      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a10:	f8d3 9020 	ldr.w	r9, [r3, #32]
    7a14:	f8c4 9020 	str.w	r9, [r4, #32]
    7a18:	2a09      	cmp	r2, #9
    7a1a:	d025      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a1c:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7a20:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    7a24:	2a0a      	cmp	r2, #10
    7a26:	d01f      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a28:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    7a2c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7a30:	2a0b      	cmp	r2, #11
    7a32:	d019      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a34:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    7a38:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    7a3c:	2a0c      	cmp	r2, #12
    7a3e:	d013      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a40:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    7a44:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7a48:	2a0d      	cmp	r2, #13
    7a4a:	d00d      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a4c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7a50:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    7a54:	2a0e      	cmp	r2, #14
    7a56:	d007      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a58:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    7a5c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7a60:	2a0f      	cmp	r2, #15
    7a62:	d001      	beq.n	7a68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7a66:	63e3      	str	r3, [r4, #60]	; 0x3c
    7a68:	4547      	cmp	r7, r8
    7a6a:	eb0c 0308 	add.w	r3, ip, r8
    7a6e:	eb06 0408 	add.w	r4, r6, r8
    7a72:	eb0e 0c08 	add.w	ip, lr, r8
    7a76:	d00f      	beq.n	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7a78:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    7a7c:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7a80:	1c5a      	adds	r2, r3, #1
    7a82:	4291      	cmp	r1, r2
    7a84:	d908      	bls.n	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7a86:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    7a88:	f89c 2001 	ldrb.w	r2, [ip, #1]
    7a8c:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7a8e:	4299      	cmp	r1, r3
    7a90:	d902      	bls.n	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    7a92:	f89c 3002 	ldrb.w	r3, [ip, #2]
    7a96:	70a3      	strb	r3, [r4, #2]
    7a98:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7a9a:	4628      	mov	r0, r5
    7a9c:	f004 ffca 	bl	ca34 <cdcdf_acm_write>
    7aa0:	2800      	cmp	r0, #0
    7aa2:	f43f af42 	beq.w	792a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    7aa6:	f3bf 8f5b 	dmb	ish
    7aaa:	2300      	movs	r3, #0
    7aac:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    7ab0:	f3bf 8f5b 	dmb	ish
}
    7ab4:	b003      	add	sp, #12
    7ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7aba:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7abc:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7abe:	462e      	mov	r6, r5
    7ac0:	e76d      	b.n	799e <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    7ac2:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7ac4:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7ac6:	46ac      	mov	ip, r5
    7ac8:	e699      	b.n	77fe <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7aca:	46a4      	mov	ip, r4
    7acc:	e767      	b.n	799e <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7ace:	9401      	str	r4, [sp, #4]
    7ad0:	e695      	b.n	77fe <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7ad2:	46b9      	mov	r9, r7
    7ad4:	e6f3      	b.n	78be <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    7ad6:	46b9      	mov	r9, r7
    7ad8:	46a4      	mov	ip, r4
    7ada:	e6f0      	b.n	78be <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    7adc:	f3bf 8f5b 	dmb	ish
    7ae0:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7ae4:	f3bf 8f5b 	dmb	ish
        return;
    7ae8:	e71f      	b.n	792a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    7aea:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    7aee:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7af0:	f817 2b01 	ldrb.w	r2, [r7], #1
    7af4:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7af8:	42a7      	cmp	r7, r4
    7afa:	d1f9      	bne.n	7af0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    7afc:	e7cc      	b.n	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7afe:	3c01      	subs	r4, #1
    7b00:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    7b02:	f813 6b01 	ldrb.w	r6, [r3], #1
    7b06:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7b0a:	4293      	cmp	r3, r2
    7b0c:	d1f9      	bne.n	7b02 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    7b0e:	e7c3      	b.n	7a98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7b10:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7b14:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7b18:	f817 6b01 	ldrb.w	r6, [r7], #1
    7b1c:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7b20:	45be      	cmp	lr, r7
    7b22:	d1f9      	bne.n	7b18 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    7b24:	e69a      	b.n	785c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7b26:	462c      	mov	r4, r5
    7b28:	e699      	b.n	785e <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    7b2a:	bf00      	nop

00007b2c <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    7b2c:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    7b2e:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    7b32:	b903      	cbnz	r3, 7b36 <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    7b34:	bd38      	pop	{r3, r4, r5, pc}
    7b36:	4605      	mov	r5, r0
    TxPump();
    7b38:	f7ff fdfe 	bl	7738 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7b3c:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    7b40:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    7b44:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7b48:	429a      	cmp	r2, r3
    7b4a:	d00b      	beq.n	7b64 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7b4c:	f004 ffba 	bl	cac4 <cdcdf_acm_is_enabled>
    7b50:	b140      	cbz	r0, 7b64 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    7b52:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    7b56:	07db      	lsls	r3, r3, #31
    7b58:	d504      	bpl.n	7b64 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7b5a:	7b63      	ldrb	r3, [r4, #13]
    7b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7b60:	2b02      	cmp	r3, #2
    7b62:	d0ed      	beq.n	7b40 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    7b64:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    7b66:	4621      	mov	r1, r4
    m_portOpen = false;
    7b68:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    7b6c:	4620      	mov	r0, r4
    7b6e:	f004 ff81 	bl	ca74 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    7b72:	4621      	mov	r1, r4
    7b74:	2001      	movs	r0, #1
    7b76:	f004 ff7d 	bl	ca74 <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    7b7a:	f004 ff6f 	bl	ca5c <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    7b7e:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    7b82:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    7b86:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    7b8a:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    7b8e:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    7b92:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    7b96:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    7b9a:	bd38      	pop	{r3, r4, r5, pc}

00007b9c <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    7b9c:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    7ba0:	b103      	cbz	r3, 7ba4 <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    7ba2:	4770      	bx	lr
    7ba4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    7ba8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    7bac:	429a      	cmp	r2, r3
    7bae:	f000 80fd 	beq.w	7dac <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    7bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7bb6:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    7bba:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7bbc:	f04f 0101 	mov.w	r1, #1
    7bc0:	f3bf 8f5b 	dmb	ish
    7bc4:	e8d3 2f4f 	ldrexb	r2, [r3]
    7bc8:	e8c3 1f44 	strexb	r4, r1, [r3]
    7bcc:	2c00      	cmp	r4, #0
    7bce:	d1f9      	bne.n	7bc4 <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    7bd0:	f3bf 8f5b 	dmb	ish
    7bd4:	f012 0fff 	tst.w	r2, #255	; 0xff
    7bd8:	f040 80e5 	bne.w	7da6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    7bdc:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    7be0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    7be4:	428e      	cmp	r6, r1
    7be6:	f000 81ab 	beq.w	7f40 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7bea:	f100 0340 	add.w	r3, r0, #64	; 0x40
    7bee:	eb03 0706 	add.w	r7, r3, r6
    7bf2:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    7bf6:	f0c0 80da 	bcc.w	7dae <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7bfa:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    7bfe:	4411      	add	r1, r2
    7c00:	2940      	cmp	r1, #64	; 0x40
    7c02:	bf28      	it	cs
    7c04:	2140      	movcs	r1, #64	; 0x40
    7c06:	428a      	cmp	r2, r1
    7c08:	bf28      	it	cs
    7c0a:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7c0c:	2a00      	cmp	r2, #0
    7c0e:	f000 81bc 	beq.w	7f8a <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    7c12:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    7c16:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7c1a:	eb00 080e 	add.w	r8, r0, lr
    7c1e:	4404      	add	r4, r0
    7c20:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    7c24:	45e0      	cmp	r8, ip
    7c26:	bf38      	it	cc
    7c28:	42a5      	cmpcc	r5, r4
    7c2a:	f0c0 81a3 	bcc.w	7f74 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    7c2e:	2a0b      	cmp	r2, #11
    7c30:	f240 81a0 	bls.w	7f74 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    7c34:	426c      	negs	r4, r5
    7c36:	f014 0403 	ands.w	r4, r4, #3
    7c3a:	f000 8177 	beq.w	7f2c <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    7c3e:	5d9e      	ldrb	r6, [r3, r6]
    7c40:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    7c44:	2c01      	cmp	r4, #1
    7c46:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    7c4a:	f107 0801 	add.w	r8, r7, #1
    7c4e:	f000 8171 	beq.w	7f34 <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    7c52:	787e      	ldrb	r6, [r7, #1]
    7c54:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7c58:	2c02      	cmp	r4, #2
    7c5a:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    7c5e:	f107 0802 	add.w	r8, r7, #2
    7c62:	f000 8165 	beq.w	7f30 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    7c66:	78be      	ldrb	r6, [r7, #2]
    7c68:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7c6c:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    7c6e:	f107 0803 	add.w	r8, r7, #3
    7c72:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7c76:	9601      	str	r6, [sp, #4]
    7c78:	eba2 0b04 	sub.w	fp, r2, r4
    7c7c:	f1ab 0704 	sub.w	r7, fp, #4
    7c80:	08bf      	lsrs	r7, r7, #2
    7c82:	eb0e 0604 	add.w	r6, lr, r4
    7c86:	3701      	adds	r7, #1
    7c88:	34c0      	adds	r4, #192	; 0xc0
    7c8a:	4406      	add	r6, r0
    7c8c:	4404      	add	r4, r0
    7c8e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    7c92:	f04f 0e00 	mov.w	lr, #0
    7c96:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7c9a:	f856 ab04 	ldr.w	sl, [r6], #4
    7c9e:	f844 ab04 	str.w	sl, [r4], #4
    7ca2:	45be      	cmp	lr, r7
    7ca4:	d3f7      	bcc.n	7c96 <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    7ca6:	9c01      	ldr	r4, [sp, #4]
    7ca8:	45cb      	cmp	fp, r9
    7caa:	444c      	add	r4, r9
    7cac:	eb0c 0609 	add.w	r6, ip, r9
    7cb0:	eb08 0e09 	add.w	lr, r8, r9
    7cb4:	d00f      	beq.n	7cd6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    7cb6:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    7cba:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7cbe:	1c67      	adds	r7, r4, #1
    7cc0:	42ba      	cmp	r2, r7
    7cc2:	d908      	bls.n	7cd6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    7cc4:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7cc6:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7cca:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7ccc:	42a2      	cmp	r2, r4
    7cce:	d902      	bls.n	7cd6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    7cd0:	f89e 4002 	ldrb.w	r4, [lr, #2]
    7cd4:	70b4      	strb	r4, [r6, #2]
    7cd6:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7cd8:	1a8a      	subs	r2, r1, r2
    7cda:	d058      	beq.n	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7cdc:	1d26      	adds	r6, r4, #4
    7cde:	f100 0744 	add.w	r7, r0, #68	; 0x44
    7ce2:	42bc      	cmp	r4, r7
    7ce4:	bf38      	it	cc
    7ce6:	42b3      	cmpcc	r3, r6
    7ce8:	f0c0 813b 	bcc.w	7f62 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    7cec:	2a0b      	cmp	r2, #11
    7cee:	f240 8138 	bls.w	7f62 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    7cf2:	425f      	negs	r7, r3
    7cf4:	f017 0703 	ands.w	r7, r7, #3
    7cf8:	f000 811f 	beq.w	7f3a <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    7cfc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7d00:	7023      	strb	r3, [r4, #0]
    7d02:	2f01      	cmp	r7, #1
    7d04:	f104 0c01 	add.w	ip, r4, #1
    7d08:	f100 0341 	add.w	r3, r0, #65	; 0x41
    7d0c:	f000 8116 	beq.w	7f3c <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    7d10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    7d14:	7063      	strb	r3, [r4, #1]
    7d16:	2f02      	cmp	r7, #2
    7d18:	f104 0c02 	add.w	ip, r4, #2
    7d1c:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7d20:	f000 810c 	beq.w	7f3c <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    7d24:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7d28:	70a3      	strb	r3, [r4, #2]
    7d2a:	f104 0c03 	add.w	ip, r4, #3
    7d2e:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7d32:	f04f 0903 	mov.w	r9, #3
    7d36:	eba2 0807 	sub.w	r8, r2, r7
    7d3a:	f1a8 0e04 	sub.w	lr, r8, #4
    7d3e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    7d42:	f107 0640 	add.w	r6, r7, #64	; 0x40
    7d46:	f10e 0e01 	add.w	lr, lr, #1
    7d4a:	443c      	add	r4, r7
    7d4c:	4406      	add	r6, r0
    7d4e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    7d52:	2700      	movs	r7, #0
    7d54:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    7d56:	f856 bb04 	ldr.w	fp, [r6], #4
    7d5a:	f844 bb04 	str.w	fp, [r4], #4
    7d5e:	45be      	cmp	lr, r7
    7d60:	d8f8      	bhi.n	7d54 <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    7d62:	45d0      	cmp	r8, sl
    7d64:	eb09 040a 	add.w	r4, r9, sl
    7d68:	eb0c 060a 	add.w	r6, ip, sl
    7d6c:	eb03 070a 	add.w	r7, r3, sl
    7d70:	d00d      	beq.n	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7d72:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    7d76:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7d7a:	1c63      	adds	r3, r4, #1
    7d7c:	429a      	cmp	r2, r3
    7d7e:	d906      	bls.n	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7d80:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7d82:	787b      	ldrb	r3, [r7, #1]
    7d84:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7d86:	42a2      	cmp	r2, r4
    7d88:	d901      	bls.n	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    7d8a:	78bb      	ldrb	r3, [r7, #2]
    7d8c:	70b3      	strb	r3, [r6, #2]
    7d8e:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7d90:	4628      	mov	r0, r5
    7d92:	f004 fe4f 	bl	ca34 <cdcdf_acm_write>
    7d96:	b130      	cbz	r0, 7da6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    7d98:	f3bf 8f5b 	dmb	ish
    7d9c:	2300      	movs	r3, #0
    7d9e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    7da2:	f3bf 8f5b 	dmb	ish
}
    7da6:	b003      	add	sp, #12
    7da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7dac:	4770      	bx	lr
        count = min(count, tail - head);
    7dae:	1b89      	subs	r1, r1, r6
    7db0:	f106 0240 	add.w	r2, r6, #64	; 0x40
    7db4:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7db8:	2940      	cmp	r1, #64	; 0x40
    7dba:	eb00 0c02 	add.w	ip, r0, r2
    7dbe:	4404      	add	r4, r0
    7dc0:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    7dc4:	bf28      	it	cs
    7dc6:	2140      	movcs	r1, #64	; 0x40
    7dc8:	45f4      	cmp	ip, lr
    7dca:	bf38      	it	cc
    7dcc:	42a5      	cmpcc	r5, r4
    7dce:	f0c0 80be 	bcc.w	7f4e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    7dd2:	290b      	cmp	r1, #11
    7dd4:	f240 80bb 	bls.w	7f4e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    7dd8:	426c      	negs	r4, r5
    7dda:	f014 0403 	ands.w	r4, r4, #3
    7dde:	f000 809e 	beq.w	7f1e <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    7de2:	5d9b      	ldrb	r3, [r3, r6]
    7de4:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    7de8:	2c01      	cmp	r4, #1
    7dea:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    7dee:	f107 0e01 	add.w	lr, r7, #1
    7df2:	f000 8096 	beq.w	7f22 <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    7df6:	787b      	ldrb	r3, [r7, #1]
    7df8:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    7dfc:	2c02      	cmp	r4, #2
    7dfe:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    7e02:	f107 0e02 	add.w	lr, r7, #2
    7e06:	f000 808e 	beq.w	7f26 <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    7e0a:	78bb      	ldrb	r3, [r7, #2]
    7e0c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    7e10:	f107 0e03 	add.w	lr, r7, #3
    7e14:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7e18:	f04f 0c03 	mov.w	ip, #3
    7e1c:	1913      	adds	r3, r2, r4
    7e1e:	4403      	add	r3, r0
    7e20:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    7e24:	681a      	ldr	r2, [r3, #0]
    7e26:	f840 2008 	str.w	r2, [r0, r8]
    7e2a:	1b0f      	subs	r7, r1, r4
    7e2c:	1f3a      	subs	r2, r7, #4
    7e2e:	0892      	lsrs	r2, r2, #2
    7e30:	eb00 0408 	add.w	r4, r0, r8
    7e34:	3201      	adds	r2, #1
    7e36:	f8d3 8004 	ldr.w	r8, [r3, #4]
    7e3a:	f8c4 8004 	str.w	r8, [r4, #4]
    7e3e:	2a02      	cmp	r2, #2
    7e40:	ea4f 0882 	mov.w	r8, r2, lsl #2
    7e44:	d04f      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7e46:	f8d3 9008 	ldr.w	r9, [r3, #8]
    7e4a:	f8c4 9008 	str.w	r9, [r4, #8]
    7e4e:	2a03      	cmp	r2, #3
    7e50:	d049      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7e52:	f8d3 900c 	ldr.w	r9, [r3, #12]
    7e56:	f8c4 900c 	str.w	r9, [r4, #12]
    7e5a:	2a04      	cmp	r2, #4
    7e5c:	d043      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7e5e:	f8d3 9010 	ldr.w	r9, [r3, #16]
    7e62:	f8c4 9010 	str.w	r9, [r4, #16]
    7e66:	2a05      	cmp	r2, #5
    7e68:	d03d      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7e6a:	f8d3 9014 	ldr.w	r9, [r3, #20]
    7e6e:	f8c4 9014 	str.w	r9, [r4, #20]
    7e72:	2a06      	cmp	r2, #6
    7e74:	d037      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7e76:	f8d3 9018 	ldr.w	r9, [r3, #24]
    7e7a:	f8c4 9018 	str.w	r9, [r4, #24]
    7e7e:	2a07      	cmp	r2, #7
    7e80:	d031      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7e82:	f8d3 901c 	ldr.w	r9, [r3, #28]
    7e86:	f8c4 901c 	str.w	r9, [r4, #28]
    7e8a:	2a08      	cmp	r2, #8
    7e8c:	d02b      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7e8e:	f8d3 9020 	ldr.w	r9, [r3, #32]
    7e92:	f8c4 9020 	str.w	r9, [r4, #32]
    7e96:	2a09      	cmp	r2, #9
    7e98:	d025      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7e9a:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7e9e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    7ea2:	2a0a      	cmp	r2, #10
    7ea4:	d01f      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7ea6:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    7eaa:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7eae:	2a0b      	cmp	r2, #11
    7eb0:	d019      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7eb2:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    7eb6:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    7eba:	2a0c      	cmp	r2, #12
    7ebc:	d013      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7ebe:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    7ec2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7ec6:	2a0d      	cmp	r2, #13
    7ec8:	d00d      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7eca:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7ece:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    7ed2:	2a0e      	cmp	r2, #14
    7ed4:	d007      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7ed6:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    7eda:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7ede:	2a0f      	cmp	r2, #15
    7ee0:	d001      	beq.n	7ee6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7ee4:	63e3      	str	r3, [r4, #60]	; 0x3c
    7ee6:	4547      	cmp	r7, r8
    7ee8:	eb0c 0308 	add.w	r3, ip, r8
    7eec:	eb06 0408 	add.w	r4, r6, r8
    7ef0:	eb0e 0c08 	add.w	ip, lr, r8
    7ef4:	f43f af4b 	beq.w	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7ef8:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    7efc:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7f00:	1c5a      	adds	r2, r3, #1
    7f02:	4291      	cmp	r1, r2
    7f04:	f67f af43 	bls.w	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7f08:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    7f0a:	f89c 2001 	ldrb.w	r2, [ip, #1]
    7f0e:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7f10:	4299      	cmp	r1, r3
    7f12:	f67f af3c 	bls.w	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    7f16:	f89c 3002 	ldrb.w	r3, [ip, #2]
    7f1a:	70a3      	strb	r3, [r4, #2]
    7f1c:	e737      	b.n	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7f1e:	46be      	mov	lr, r7
    7f20:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7f22:	46a4      	mov	ip, r4
    7f24:	e77a      	b.n	7e1c <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    7f26:	f04f 0c02 	mov.w	ip, #2
    7f2a:	e777      	b.n	7e1c <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7f2c:	46b8      	mov	r8, r7
    7f2e:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7f30:	9401      	str	r4, [sp, #4]
    7f32:	e6a1      	b.n	7c78 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    7f34:	2601      	movs	r6, #1
    7f36:	9601      	str	r6, [sp, #4]
    7f38:	e69e      	b.n	7c78 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7f3a:	46a4      	mov	ip, r4
    7f3c:	46b9      	mov	r9, r7
    7f3e:	e6fa      	b.n	7d36 <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    7f40:	f3bf 8f5b 	dmb	ish
    7f44:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7f48:	f3bf 8f5b 	dmb	ish
    7f4c:	e72b      	b.n	7da6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    7f4e:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    7f52:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7f54:	f817 2b01 	ldrb.w	r2, [r7], #1
    7f58:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7f5c:	42a7      	cmp	r7, r4
    7f5e:	d1f9      	bne.n	7f54 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    7f60:	e715      	b.n	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7f62:	3c01      	subs	r4, #1
    7f64:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    7f66:	f813 6b01 	ldrb.w	r6, [r3], #1
    7f6a:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7f6e:	4293      	cmp	r3, r2
    7f70:	d1f9      	bne.n	7f66 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    7f72:	e70c      	b.n	7d8e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7f74:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7f78:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7f7c:	f817 6b01 	ldrb.w	r6, [r7], #1
    7f80:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7f84:	45be      	cmp	lr, r7
    7f86:	d1f9      	bne.n	7f7c <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    7f88:	e6a5      	b.n	7cd6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7f8a:	462c      	mov	r4, r5
    7f8c:	e6a4      	b.n	7cd8 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    7f8e:	bf00      	nop

00007f90 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    7f90:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    7f92:	f7fe ff85 	bl	6ea0 <_ZN9ClearCore10UsbManager8InstanceEv>
    7f96:	4b01      	ldr	r3, [pc, #4]	; (7f9c <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    7f98:	6018      	str	r0, [r3, #0]
    7f9a:	bd08      	pop	{r3, pc}
    7f9c:	20000ad0 	.word	0x20000ad0

00007fa0 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    7fa0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7fa2:	4770      	bx	lr

00007fa4 <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    7fa4:	7900      	ldrb	r0, [r0, #4]
    7fa6:	4770      	bx	lr

00007fa8 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    7fa8:	2001      	movs	r0, #1
    7faa:	4770      	bx	lr

00007fac <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    7fac:	b510      	push	{r4, lr}
    7fae:	4604      	mov	r4, r0
    DigitalIn() {};
    7fb0:	f007 f840 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    7fb4:	4620      	mov	r0, r4
    7fb6:	4b0c      	ldr	r3, [pc, #48]	; (7fe8 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    7fb8:	f840 3b30 	str.w	r3, [r0], #48
    7fbc:	f004 f8a2 	bl	c104 <_ZN9ClearCore13StepGeneratorC1Ev>
    7fc0:	4a0a      	ldr	r2, [pc, #40]	; (7fec <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    7fc2:	6022      	str	r2, [r4, #0]
            reg = 0;
    7fc4:	2300      	movs	r3, #0
    MotorDriver() {};
    7fc6:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    7fc8:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    7fcc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    7fd0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    7fd4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7fd8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    7fdc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    7fe0:	6322      	str	r2, [r4, #48]	; 0x30
    7fe2:	4620      	mov	r0, r4
    7fe4:	bd10      	pop	{r4, pc}
    7fe6:	bf00      	nop
    7fe8:	00023f9c 	.word	0x00023f9c
    7fec:	000237e0 	.word	0x000237e0

00007ff0 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    7ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7ff4:	4bbf      	ldr	r3, [pc, #764]	; (82f4 <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    7ff6:	f8df a340 	ldr.w	sl, [pc, #832]	; 8338 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    7ffa:	4abf      	ldr	r2, [pc, #764]	; (82f8 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    7ffc:	49bf      	ldr	r1, [pc, #764]	; (82fc <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    7ffe:	4dc0      	ldr	r5, [pc, #768]	; (8300 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    8000:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    8002:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    8004:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    8006:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    800a:	7007      	strb	r7, [r0, #0]
    800c:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    800e:	e88d 0108 	stmia.w	sp, {r3, r8}
    8012:	4620      	mov	r0, r4
    8014:	4bbb      	ldr	r3, [pc, #748]	; (8304 <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    8016:	f00a fb4f 	bl	126b8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    801a:	68a1      	ldr	r1, [r4, #8]
    801c:	6862      	ldr	r2, [r4, #4]
    801e:	7b23      	ldrb	r3, [r4, #12]
    8020:	f8ca 1008 	str.w	r1, [sl, #8]
    8024:	f8ca 2004 	str.w	r2, [sl, #4]
    8028:	6921      	ldr	r1, [r4, #16]
    802a:	6962      	ldr	r2, [r4, #20]
    802c:	f88a 300c 	strb.w	r3, [sl, #12]
    8030:	69a3      	ldr	r3, [r4, #24]
    8032:	f8ca 1010 	str.w	r1, [sl, #16]
    8036:	f8ca 2014 	str.w	r2, [sl, #20]
    803a:	69e1      	ldr	r1, [r4, #28]
    803c:	6a22      	ldr	r2, [r4, #32]
    803e:	f8ca 3018 	str.w	r3, [sl, #24]
    8042:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8044:	f8ca 101c 	str.w	r1, [sl, #28]
    8048:	f8ca 2020 	str.w	r2, [sl, #32]
    804c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    8050:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    8054:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    8058:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    805c:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    8060:	2680      	movs	r6, #128	; 0x80
    8062:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    8064:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    8068:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    806c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    8070:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    8074:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    8078:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    807c:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    8080:	a914      	add	r1, sp, #80	; 0x50
    8082:	4632      	mov	r2, r6
    8084:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    8088:	f016 feda 	bl	1ee40 <memcpy>
    808c:	4632      	mov	r2, r6
    808e:	a934      	add	r1, sp, #208	; 0xd0
    8090:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    8094:	f016 fed4 	bl	1ee40 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    8098:	f8cd 8004 	str.w	r8, [sp, #4]
    809c:	499a      	ldr	r1, [pc, #616]	; (8308 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    809e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    80a2:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    80a6:	9100      	str	r1, [sp, #0]
    80a8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    80ac:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    80b0:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    80b4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    80b8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    80bc:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    80c0:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    80c4:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    80c8:	4620      	mov	r0, r4
    80ca:	4b90      	ldr	r3, [pc, #576]	; (830c <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    80cc:	4a90      	ldr	r2, [pc, #576]	; (8310 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    80ce:	4991      	ldr	r1, [pc, #580]	; (8314 <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    80d0:	f008 fc0a 	bl	108e8 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    80d4:	6863      	ldr	r3, [r4, #4]
    80d6:	606b      	str	r3, [r5, #4]
    80d8:	69a3      	ldr	r3, [r4, #24]
    80da:	68a2      	ldr	r2, [r4, #8]
    80dc:	f894 e00c 	ldrb.w	lr, [r4, #12]
    80e0:	6920      	ldr	r0, [r4, #16]
    80e2:	61ab      	str	r3, [r5, #24]
    80e4:	69e3      	ldr	r3, [r4, #28]
    80e6:	60aa      	str	r2, [r5, #8]
    80e8:	f885 e00c 	strb.w	lr, [r5, #12]
    80ec:	6962      	ldr	r2, [r4, #20]
    80ee:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    80f2:	6128      	str	r0, [r5, #16]
    80f4:	61eb      	str	r3, [r5, #28]
    80f6:	6a20      	ldr	r0, [r4, #32]
    80f8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    80fc:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    8100:	616a      	str	r2, [r5, #20]
    8102:	6228      	str	r0, [r5, #32]
    8104:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8106:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    8108:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    810c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    8110:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    8114:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    8118:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    811c:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    8120:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    8124:	a914      	add	r1, sp, #80	; 0x50
    8126:	626a      	str	r2, [r5, #36]	; 0x24
    8128:	85a8      	strh	r0, [r5, #44]	; 0x2c
    812a:	4632      	mov	r2, r6
    812c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    8130:	f016 fe86 	bl	1ee40 <memcpy>
    8134:	4632      	mov	r2, r6
    8136:	a934      	add	r1, sp, #208	; 0xd0
    8138:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    813c:	f016 fe80 	bl	1ee40 <memcpy>
    8140:	f504 7098 	add.w	r0, r4, #304	; 0x130
    8144:	c807      	ldmia	r0, {r0, r1, r2}
    8146:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    814a:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    814e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    8152:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    8156:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    815a:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    815e:	4620      	mov	r0, r4
    8160:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    8164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8168:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    816c:	f04f 0a01 	mov.w	sl, #1
    8170:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    8174:	f00a f846 	bl	12204 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    8178:	4b67      	ldr	r3, [pc, #412]	; (8318 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    817a:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    817c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    8180:	4d66      	ldr	r5, [pc, #408]	; (831c <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    8182:	f8cd a004 	str.w	sl, [sp, #4]
    8186:	9300      	str	r3, [sp, #0]
    8188:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    818a:	68a6      	ldr	r6, [r4, #8]
    818c:	71aa      	strb	r2, [r5, #6]
    818e:	f8a5 c004 	strh.w	ip, [r5, #4]
    8192:	60ae      	str	r6, [r5, #8]
    8194:	4620      	mov	r0, r4
    8196:	4b62      	ldr	r3, [pc, #392]	; (8320 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    8198:	4a62      	ldr	r2, [pc, #392]	; (8324 <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    819a:	4d63      	ldr	r5, [pc, #396]	; (8328 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    819c:	f005 ff80 	bl	e0a0 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    81a0:	f104 000c 	add.w	r0, r4, #12
    81a4:	c807      	ldmia	r0, {r0, r1, r2}
    81a6:	f894 e006 	ldrb.w	lr, [r4, #6]
    81aa:	68a3      	ldr	r3, [r4, #8]
    81ac:	88a6      	ldrh	r6, [r4, #4]
    81ae:	f885 e006 	strb.w	lr, [r5, #6]
    81b2:	60ab      	str	r3, [r5, #8]
    81b4:	f894 e018 	ldrb.w	lr, [r4, #24]
    81b8:	69e3      	ldr	r3, [r4, #28]
    81ba:	60e8      	str	r0, [r5, #12]
    81bc:	6a20      	ldr	r0, [r4, #32]
    81be:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    81c2:	80ae      	strh	r6, [r5, #4]
    81c4:	6129      	str	r1, [r5, #16]
    81c6:	7e66      	ldrb	r6, [r4, #25]
    81c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    81ca:	616a      	str	r2, [r5, #20]
    81cc:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    81d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    81d2:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    81d6:	61eb      	str	r3, [r5, #28]
    81d8:	6228      	str	r0, [r5, #32]
    81da:	6b63      	ldr	r3, [r4, #52]	; 0x34
    81dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    81de:	766e      	strb	r6, [r5, #25]
    81e0:	6269      	str	r1, [r5, #36]	; 0x24
    81e2:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    81e6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    81ea:	632a      	str	r2, [r5, #48]	; 0x30
    81ec:	63a8      	str	r0, [r5, #56]	; 0x38
    81ee:	636b      	str	r3, [r5, #52]	; 0x34
    81f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    81f4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    81f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    81fa:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    81fe:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    8202:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8204:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    8208:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    820c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    820e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8210:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    8214:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    8218:	6429      	str	r1, [r5, #64]	; 0x40
    821a:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    821e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    8220:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    8224:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    8228:	64aa      	str	r2, [r5, #72]	; 0x48
    822a:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    822e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8230:	64eb      	str	r3, [r5, #76]	; 0x4c
    8232:	6528      	str	r0, [r5, #80]	; 0x50
    8234:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8236:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    823a:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    823e:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    8242:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    8246:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    824a:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    824e:	662a      	str	r2, [r5, #96]	; 0x60
    8250:	666b      	str	r3, [r5, #100]	; 0x64
    8252:	6569      	str	r1, [r5, #84]	; 0x54
    8254:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    8256:	4b35      	ldr	r3, [pc, #212]	; (832c <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    8258:	f8cd a000 	str.w	sl, [sp]
    825c:	4620      	mov	r0, r4
    825e:	66a9      	str	r1, [r5, #104]	; 0x68
    8260:	4a33      	ldr	r2, [pc, #204]	; (8330 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    8262:	4d34      	ldr	r5, [pc, #208]	; (8334 <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    8264:	2140      	movs	r1, #64	; 0x40
    8266:	f006 fc21 	bl	eaac <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    826a:	f894 e006 	ldrb.w	lr, [r4, #6]
    826e:	68a2      	ldr	r2, [r4, #8]
    8270:	68e3      	ldr	r3, [r4, #12]
    8272:	88a6      	ldrh	r6, [r4, #4]
    8274:	6920      	ldr	r0, [r4, #16]
    8276:	6961      	ldr	r1, [r4, #20]
    8278:	f885 e006 	strb.w	lr, [r5, #6]
    827c:	60aa      	str	r2, [r5, #8]
    827e:	f894 e018 	ldrb.w	lr, [r4, #24]
    8282:	69e2      	ldr	r2, [r4, #28]
    8284:	60eb      	str	r3, [r5, #12]
    8286:	6a23      	ldr	r3, [r4, #32]
    8288:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    828c:	80ae      	strh	r6, [r5, #4]
    828e:	6128      	str	r0, [r5, #16]
    8290:	7e66      	ldrb	r6, [r4, #25]
    8292:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8294:	6169      	str	r1, [r5, #20]
    8296:	f885 e018 	strb.w	lr, [r5, #24]
    829a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    829c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    82a0:	61ea      	str	r2, [r5, #28]
    82a2:	622b      	str	r3, [r5, #32]
    82a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    82a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    82a8:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    82ac:	766e      	strb	r6, [r5, #25]
    82ae:	6268      	str	r0, [r5, #36]	; 0x24
    82b0:	6329      	str	r1, [r5, #48]	; 0x30
    82b2:	636a      	str	r2, [r5, #52]	; 0x34
    82b4:	63ab      	str	r3, [r5, #56]	; 0x38
    82b6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    82ba:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    82be:	f8cd a000 	str.w	sl, [sp]
    82c2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    82c6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    82ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
    82cc:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    82d0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    82d4:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    82d8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    82da:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    82de:	642a      	str	r2, [r5, #64]	; 0x40
    82e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    82e2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    82e4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    82e8:	652e      	str	r6, [r5, #80]	; 0x50
    82ea:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    82ee:	6d66      	ldr	r6, [r4, #84]	; 0x54
    82f0:	64a9      	str	r1, [r5, #72]	; 0x48
    82f2:	e023      	b.n	833c <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    82f4:	00023b54 	.word	0x00023b54
    82f8:	00023bb4 	.word	0x00023bb4
    82fc:	00023b44 	.word	0x00023b44
    8300:	20001884 	.word	0x20001884
    8304:	00023a74 	.word	0x00023a74
    8308:	00023b94 	.word	0x00023b94
    830c:	00023b34 	.word	0x00023b34
    8310:	00023a64 	.word	0x00023a64
    8314:	00023b84 	.word	0x00023b84
    8318:	00023d54 	.word	0x00023d54
    831c:	20001474 	.word	0x20001474
    8320:	00023d14 	.word	0x00023d14
    8324:	00023be4 	.word	0x00023be4
    8328:	200011e0 	.word	0x200011e0
    832c:	00023d24 	.word	0x00023d24
    8330:	00023cc4 	.word	0x00023cc4
    8334:	2000124c 	.word	0x2000124c
    8338:	20001740 	.word	0x20001740
    833c:	64ea      	str	r2, [r5, #76]	; 0x4c
    833e:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    8342:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    8346:	656e      	str	r6, [r5, #84]	; 0x54
    8348:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    834c:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    8350:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    8354:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    8358:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    835c:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    8360:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    8364:	4620      	mov	r0, r4
    8366:	4db9      	ldr	r5, [pc, #740]	; (864c <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    8368:	4bb9      	ldr	r3, [pc, #740]	; (8650 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    836a:	4aba      	ldr	r2, [pc, #744]	; (8654 <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    836c:	2120      	movs	r1, #32
    836e:	f006 fb9d 	bl	eaac <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    8372:	f894 e006 	ldrb.w	lr, [r4, #6]
    8376:	68a2      	ldr	r2, [r4, #8]
    8378:	68e3      	ldr	r3, [r4, #12]
    837a:	88a6      	ldrh	r6, [r4, #4]
    837c:	6920      	ldr	r0, [r4, #16]
    837e:	6961      	ldr	r1, [r4, #20]
    8380:	f885 e006 	strb.w	lr, [r5, #6]
    8384:	60aa      	str	r2, [r5, #8]
    8386:	f894 e018 	ldrb.w	lr, [r4, #24]
    838a:	69e2      	ldr	r2, [r4, #28]
    838c:	60eb      	str	r3, [r5, #12]
    838e:	6a23      	ldr	r3, [r4, #32]
    8390:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8394:	80ae      	strh	r6, [r5, #4]
    8396:	6128      	str	r0, [r5, #16]
    8398:	7e66      	ldrb	r6, [r4, #25]
    839a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    839c:	6169      	str	r1, [r5, #20]
    839e:	f885 e018 	strb.w	lr, [r5, #24]
    83a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    83a4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    83a8:	61ea      	str	r2, [r5, #28]
    83aa:	622b      	str	r3, [r5, #32]
    83ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
    83ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    83b0:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    83b4:	766e      	strb	r6, [r5, #25]
    83b6:	6268      	str	r0, [r5, #36]	; 0x24
    83b8:	6329      	str	r1, [r5, #48]	; 0x30
    83ba:	636a      	str	r2, [r5, #52]	; 0x34
    83bc:	63ab      	str	r3, [r5, #56]	; 0x38
    83be:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    83c2:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    83c6:	f8cd a000 	str.w	sl, [sp]
    83ca:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    83ce:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    83d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    83d4:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    83d8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    83dc:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    83e0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    83e2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    83e6:	642a      	str	r2, [r5, #64]	; 0x40
    83e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    83ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    83ec:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    83f0:	652e      	str	r6, [r5, #80]	; 0x50
    83f2:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    83f6:	6d66      	ldr	r6, [r4, #84]	; 0x54
    83f8:	64a9      	str	r1, [r5, #72]	; 0x48
    83fa:	64ea      	str	r2, [r5, #76]	; 0x4c
    83fc:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    8400:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    8404:	656e      	str	r6, [r5, #84]	; 0x54
    8406:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    840a:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    840e:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    8412:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    8416:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    841a:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    841e:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    8422:	4620      	mov	r0, r4
    8424:	4d8c      	ldr	r5, [pc, #560]	; (8658 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    8426:	4b8d      	ldr	r3, [pc, #564]	; (865c <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    8428:	4a8d      	ldr	r2, [pc, #564]	; (8660 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    842a:	2110      	movs	r1, #16
    842c:	f006 fb3e 	bl	eaac <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    8430:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8434:	68a2      	ldr	r2, [r4, #8]
    8436:	68e3      	ldr	r3, [r4, #12]
    8438:	79a6      	ldrb	r6, [r4, #6]
    843a:	6920      	ldr	r0, [r4, #16]
    843c:	6961      	ldr	r1, [r4, #20]
    843e:	f8a5 e004 	strh.w	lr, [r5, #4]
    8442:	60aa      	str	r2, [r5, #8]
    8444:	f894 e018 	ldrb.w	lr, [r4, #24]
    8448:	69e2      	ldr	r2, [r4, #28]
    844a:	60eb      	str	r3, [r5, #12]
    844c:	6a23      	ldr	r3, [r4, #32]
    844e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8452:	71ae      	strb	r6, [r5, #6]
    8454:	6128      	str	r0, [r5, #16]
    8456:	7e66      	ldrb	r6, [r4, #25]
    8458:	6a60      	ldr	r0, [r4, #36]	; 0x24
    845a:	6169      	str	r1, [r5, #20]
    845c:	f885 e018 	strb.w	lr, [r5, #24]
    8460:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8462:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8466:	61ea      	str	r2, [r5, #28]
    8468:	622b      	str	r3, [r5, #32]
    846a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    846c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    846e:	766e      	strb	r6, [r5, #25]
    8470:	6268      	str	r0, [r5, #36]	; 0x24
    8472:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8476:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    847a:	636a      	str	r2, [r5, #52]	; 0x34
    847c:	63ab      	str	r3, [r5, #56]	; 0x38
    847e:	6329      	str	r1, [r5, #48]	; 0x30
    8480:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8484:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    8488:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    848c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    848e:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    8492:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    8496:	9703      	str	r7, [sp, #12]
    8498:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    849a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    849e:	642b      	str	r3, [r5, #64]	; 0x40
    84a0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    84a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    84a4:	64a9      	str	r1, [r5, #72]	; 0x48
    84a6:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    84aa:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    84ae:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    84b2:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    84b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    84b8:	64ea      	str	r2, [r5, #76]	; 0x4c
    84ba:	652b      	str	r3, [r5, #80]	; 0x50
    84bc:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    84c0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    84c4:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    84c8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    84cc:	6568      	str	r0, [r5, #84]	; 0x54
    84ce:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    84d2:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    84d6:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    84da:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    84de:	f04f 0e68 	mov.w	lr, #104	; 0x68
    84e2:	4d60      	ldr	r5, [pc, #384]	; (8664 <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    84e4:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8684 <_ZN9ClearCore10SysManagerC1Ev+0x694>
    84e8:	4e5f      	ldr	r6, [pc, #380]	; (8668 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    84ea:	4b60      	ldr	r3, [pc, #384]	; (866c <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    84ec:	4a60      	ldr	r2, [pc, #384]	; (8670 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    84ee:	f8cd e008 	str.w	lr, [sp, #8]
    84f2:	4620      	mov	r0, r4
    84f4:	2108      	movs	r1, #8
    84f6:	9601      	str	r6, [sp, #4]
    84f8:	f8cd c000 	str.w	ip, [sp]
    84fc:	f006 fe30 	bl	f160 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    8500:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8504:	68a2      	ldr	r2, [r4, #8]
    8506:	68e3      	ldr	r3, [r4, #12]
    8508:	79a6      	ldrb	r6, [r4, #6]
    850a:	6920      	ldr	r0, [r4, #16]
    850c:	6961      	ldr	r1, [r4, #20]
    850e:	f8a5 e004 	strh.w	lr, [r5, #4]
    8512:	60aa      	str	r2, [r5, #8]
    8514:	f894 e018 	ldrb.w	lr, [r4, #24]
    8518:	69e2      	ldr	r2, [r4, #28]
    851a:	60eb      	str	r3, [r5, #12]
    851c:	6a23      	ldr	r3, [r4, #32]
    851e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8522:	71ae      	strb	r6, [r5, #6]
    8524:	6128      	str	r0, [r5, #16]
    8526:	7e66      	ldrb	r6, [r4, #25]
    8528:	6a60      	ldr	r0, [r4, #36]	; 0x24
    852a:	6169      	str	r1, [r5, #20]
    852c:	f885 e018 	strb.w	lr, [r5, #24]
    8530:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8532:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8536:	61ea      	str	r2, [r5, #28]
    8538:	622b      	str	r3, [r5, #32]
    853a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    853c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    853e:	766e      	strb	r6, [r5, #25]
    8540:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8544:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8548:	6329      	str	r1, [r5, #48]	; 0x30
    854a:	636a      	str	r2, [r5, #52]	; 0x34
    854c:	63ab      	str	r3, [r5, #56]	; 0x38
    854e:	6268      	str	r0, [r5, #36]	; 0x24
    8550:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    8554:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    8558:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    855c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    855e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    8562:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    8566:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    8568:	6d22      	ldr	r2, [r4, #80]	; 0x50
    856a:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    856e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    8572:	642b      	str	r3, [r5, #64]	; 0x40
    8574:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    8576:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8578:	64a8      	str	r0, [r5, #72]	; 0x48
    857a:	652a      	str	r2, [r5, #80]	; 0x50
    857c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    8580:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    8584:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    8588:	64e9      	str	r1, [r5, #76]	; 0x4c
    858a:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    858e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    8592:	656b      	str	r3, [r5, #84]	; 0x54
    8594:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    8598:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    859c:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    85a0:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    85a4:	f04f 0c65 	mov.w	ip, #101	; 0x65
    85a8:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    85ac:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    85b0:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    85b4:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    85b8:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    85bc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8688 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    85c0:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    85c4:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    85c8:	9703      	str	r7, [sp, #12]
    85ca:	f8cd c008 	str.w	ip, [sp, #8]
    85ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
    85d0:	4b28      	ldr	r3, [pc, #160]	; (8674 <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    85d2:	f8cd e004 	str.w	lr, [sp, #4]
    85d6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    85d8:	9300      	str	r3, [sp, #0]
    85da:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    85de:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    85e2:	6f66      	ldr	r6, [r4, #116]	; 0x74
    85e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    85e6:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    85ea:	6669      	str	r1, [r5, #100]	; 0x64
    85ec:	66aa      	str	r2, [r5, #104]	; 0x68
    85ee:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    85f0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    85f2:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    85f6:	676e      	str	r6, [r5, #116]	; 0x74
    85f8:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    85fc:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    8600:	66eb      	str	r3, [r5, #108]	; 0x6c
    8602:	67a9      	str	r1, [r5, #120]	; 0x78
    8604:	67ea      	str	r2, [r5, #124]	; 0x7c
    8606:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    860a:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    860e:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    8612:	4620      	mov	r0, r4
    8614:	4b18      	ldr	r3, [pc, #96]	; (8678 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    8616:	4a19      	ldr	r2, [pc, #100]	; (867c <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    8618:	4d19      	ldr	r5, [pc, #100]	; (8680 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    861a:	2104      	movs	r1, #4
    861c:	f006 fda0 	bl	f160 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    8620:	f104 000c 	add.w	r0, r4, #12
    8624:	c807      	ldmia	r0, {r0, r1, r2}
    8626:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    862a:	68a3      	ldr	r3, [r4, #8]
    862c:	79a6      	ldrb	r6, [r4, #6]
    862e:	f8a5 e004 	strh.w	lr, [r5, #4]
    8632:	60ab      	str	r3, [r5, #8]
    8634:	f894 e018 	ldrb.w	lr, [r4, #24]
    8638:	69e3      	ldr	r3, [r4, #28]
    863a:	60e8      	str	r0, [r5, #12]
    863c:	6a20      	ldr	r0, [r4, #32]
    863e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8642:	71ae      	strb	r6, [r5, #6]
    8644:	6129      	str	r1, [r5, #16]
    8646:	7e66      	ldrb	r6, [r4, #25]
    8648:	6a61      	ldr	r1, [r4, #36]	; 0x24
    864a:	e01f      	b.n	868c <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    864c:	200012ac 	.word	0x200012ac
    8650:	00023d34 	.word	0x00023d34
    8654:	00023cd4 	.word	0x00023cd4
    8658:	2000130c 	.word	0x2000130c
    865c:	00023d44 	.word	0x00023d44
    8660:	00023ce4 	.word	0x00023ce4
    8664:	2000136c 	.word	0x2000136c
    8668:	00023c64 	.word	0x00023c64
    866c:	00023c04 	.word	0x00023c04
    8670:	00023cf4 	.word	0x00023cf4
    8674:	00023c34 	.word	0x00023c34
    8678:	00023c14 	.word	0x00023c14
    867c:	00023d04 	.word	0x00023d04
    8680:	200013f0 	.word	0x200013f0
    8684:	00023c24 	.word	0x00023c24
    8688:	00023c74 	.word	0x00023c74
    868c:	616a      	str	r2, [r5, #20]
    868e:	f885 e018 	strb.w	lr, [r5, #24]
    8692:	6b22      	ldr	r2, [r4, #48]	; 0x30
    8694:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8698:	61eb      	str	r3, [r5, #28]
    869a:	6228      	str	r0, [r5, #32]
    869c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    869e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    86a0:	766e      	strb	r6, [r5, #25]
    86a2:	6269      	str	r1, [r5, #36]	; 0x24
    86a4:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    86a8:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    86ac:	632a      	str	r2, [r5, #48]	; 0x30
    86ae:	63a8      	str	r0, [r5, #56]	; 0x38
    86b0:	636b      	str	r3, [r5, #52]	; 0x34
    86b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    86b6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    86ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
    86bc:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    86c0:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    86c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    86c6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    86ca:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    86ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    86d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    86d2:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    86d6:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    86da:	6429      	str	r1, [r5, #64]	; 0x40
    86dc:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    86e0:	6d61      	ldr	r1, [r4, #84]	; 0x54
    86e2:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    86e6:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    86ea:	64aa      	str	r2, [r5, #72]	; 0x48
    86ec:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    86f0:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    86f4:	64eb      	str	r3, [r5, #76]	; 0x4c
    86f6:	6528      	str	r0, [r5, #80]	; 0x50
    86f8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    86fc:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    8700:	6569      	str	r1, [r5, #84]	; 0x54
    8702:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    8706:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    870a:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    870e:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    8712:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    8716:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    871a:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    871e:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    8722:	6e61      	ldr	r1, [r4, #100]	; 0x64
    8724:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8726:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    8728:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    872c:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    8730:	6669      	str	r1, [r5, #100]	; 0x64
    8732:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8734:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    8736:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    873a:	66ab      	str	r3, [r5, #104]	; 0x68
    873c:	66e8      	str	r0, [r5, #108]	; 0x6c
    873e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    8740:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    8744:	676e      	str	r6, [r5, #116]	; 0x74
    8746:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    874a:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    874e:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    8750:	4abe      	ldr	r2, [pc, #760]	; (8a4c <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    8752:	67eb      	str	r3, [r5, #124]	; 0x7c
    8754:	4620      	mov	r0, r4
    8756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    875a:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    875e:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    8762:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    8766:	f006 fc6f 	bl	f048 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    876a:	f104 000c 	add.w	r0, r4, #12
    876e:	c807      	ldmia	r0, {r0, r1, r2}
    8770:	4db7      	ldr	r5, [pc, #732]	; (8a50 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    8772:	68a3      	ldr	r3, [r4, #8]
    8774:	f894 c018 	ldrb.w	ip, [r4, #24]
    8778:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    877c:	79a6      	ldrb	r6, [r4, #6]
    877e:	60ab      	str	r3, [r5, #8]
    8780:	f885 c018 	strb.w	ip, [r5, #24]
    8784:	69e3      	ldr	r3, [r4, #28]
    8786:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    878a:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    878e:	f8a5 e004 	strh.w	lr, [r5, #4]
    8792:	71ae      	strb	r6, [r5, #6]
    8794:	f894 e019 	ldrb.w	lr, [r4, #25]
    8798:	6a26      	ldr	r6, [r4, #32]
    879a:	60e8      	str	r0, [r5, #12]
    879c:	6129      	str	r1, [r5, #16]
    879e:	616a      	str	r2, [r5, #20]
    87a0:	61eb      	str	r3, [r5, #28]
    87a2:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    87a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    87a8:	4aaa      	ldr	r2, [pc, #680]	; (8a54 <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    87aa:	f885 e019 	strb.w	lr, [r5, #25]
    87ae:	4620      	mov	r0, r4
    87b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    87b4:	622e      	str	r6, [r5, #32]
    87b6:	626b      	str	r3, [r5, #36]	; 0x24
    87b8:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    87bc:	f006 fc44 	bl	f048 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    87c0:	f104 000c 	add.w	r0, r4, #12
    87c4:	c807      	ldmia	r0, {r0, r1, r2}
    87c6:	4da4      	ldr	r5, [pc, #656]	; (8a58 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    87c8:	68a3      	ldr	r3, [r4, #8]
    87ca:	f894 c018 	ldrb.w	ip, [r4, #24]
    87ce:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    87d2:	79a6      	ldrb	r6, [r4, #6]
    87d4:	60ab      	str	r3, [r5, #8]
    87d6:	f885 c018 	strb.w	ip, [r5, #24]
    87da:	69e3      	ldr	r3, [r4, #28]
    87dc:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    87e0:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    87e4:	f8a5 e004 	strh.w	lr, [r5, #4]
    87e8:	71ae      	strb	r6, [r5, #6]
    87ea:	f894 e019 	ldrb.w	lr, [r4, #25]
    87ee:	6a26      	ldr	r6, [r4, #32]
    87f0:	60e8      	str	r0, [r5, #12]
    87f2:	6129      	str	r1, [r5, #16]
    87f4:	616a      	str	r2, [r5, #20]
    87f6:	61eb      	str	r3, [r5, #28]
    87f8:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    87fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    87fe:	4a97      	ldr	r2, [pc, #604]	; (8a5c <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    8800:	f885 e019 	strb.w	lr, [r5, #25]
    8804:	4620      	mov	r0, r4
    8806:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    880a:	622e      	str	r6, [r5, #32]
    880c:	626b      	str	r3, [r5, #36]	; 0x24
    880e:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    8812:	f006 fc19 	bl	f048 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8816:	4d92      	ldr	r5, [pc, #584]	; (8a60 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    8818:	88a6      	ldrh	r6, [r4, #4]
    881a:	80ae      	strh	r6, [r5, #4]
    881c:	f104 000c 	add.w	r0, r4, #12
    8820:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    8822:	2605      	movs	r6, #5
    8824:	f894 e006 	ldrb.w	lr, [r4, #6]
    8828:	68a3      	ldr	r3, [r4, #8]
    882a:	9600      	str	r6, [sp, #0]
    882c:	7e26      	ldrb	r6, [r4, #24]
    882e:	f894 c019 	ldrb.w	ip, [r4, #25]
    8832:	f885 e006 	strb.w	lr, [r5, #6]
    8836:	60ab      	str	r3, [r5, #8]
    8838:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    883c:	69e3      	ldr	r3, [r4, #28]
    883e:	6129      	str	r1, [r5, #16]
    8840:	616a      	str	r2, [r5, #20]
    8842:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8844:	6a22      	ldr	r2, [r4, #32]
    8846:	762e      	strb	r6, [r5, #24]
    8848:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    884c:	60e8      	str	r0, [r5, #12]
    884e:	f885 c019 	strb.w	ip, [r5, #25]
    8852:	61eb      	str	r3, [r5, #28]
    8854:	622a      	str	r2, [r5, #32]
    8856:	6269      	str	r1, [r5, #36]	; 0x24
    8858:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    885c:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    8860:	4620      	mov	r0, r4
    8862:	4d80      	ldr	r5, [pc, #512]	; (8a64 <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    8864:	4b80      	ldr	r3, [pc, #512]	; (8a68 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    8866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    886a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    886e:	f005 fed1 	bl	e614 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8872:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8876:	68a2      	ldr	r2, [r4, #8]
    8878:	68e3      	ldr	r3, [r4, #12]
    887a:	79a6      	ldrb	r6, [r4, #6]
    887c:	6920      	ldr	r0, [r4, #16]
    887e:	6961      	ldr	r1, [r4, #20]
    8880:	f8a5 e004 	strh.w	lr, [r5, #4]
    8884:	60aa      	str	r2, [r5, #8]
    8886:	f894 e018 	ldrb.w	lr, [r4, #24]
    888a:	69e2      	ldr	r2, [r4, #28]
    888c:	60eb      	str	r3, [r5, #12]
    888e:	6a23      	ldr	r3, [r4, #32]
    8890:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8894:	71ae      	strb	r6, [r5, #6]
    8896:	6128      	str	r0, [r5, #16]
    8898:	7e66      	ldrb	r6, [r4, #25]
    889a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    889c:	6169      	str	r1, [r5, #20]
    889e:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    88a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    88a4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    88a8:	61ea      	str	r2, [r5, #28]
    88aa:	622b      	str	r3, [r5, #32]
    88ac:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    88b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    88b2:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    88b6:	766e      	strb	r6, [r5, #25]
    88b8:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    88ba:	2604      	movs	r6, #4
    88bc:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    88c0:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    88c4:	63ab      	str	r3, [r5, #56]	; 0x38
    88c6:	6329      	str	r1, [r5, #48]	; 0x30
    88c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    88ca:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    88ce:	4b67      	ldr	r3, [pc, #412]	; (8a6c <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    88d0:	9600      	str	r6, [sp, #0]
    88d2:	4620      	mov	r0, r4
    88d4:	63e9      	str	r1, [r5, #60]	; 0x3c
    88d6:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    88da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    88de:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    88e2:	f005 fe97 	bl	e614 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    88e6:	f104 0008 	add.w	r0, r4, #8
    88ea:	c80d      	ldmia	r0, {r0, r2, r3}
    88ec:	4d60      	ldr	r5, [pc, #384]	; (8a70 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    88ee:	88a1      	ldrh	r1, [r4, #4]
    88f0:	f894 e006 	ldrb.w	lr, [r4, #6]
    88f4:	80a9      	strh	r1, [r5, #4]
    88f6:	f885 e006 	strb.w	lr, [r5, #6]
    88fa:	6961      	ldr	r1, [r4, #20]
    88fc:	f894 e018 	ldrb.w	lr, [r4, #24]
    8900:	60a8      	str	r0, [r5, #8]
    8902:	60ea      	str	r2, [r5, #12]
    8904:	7e60      	ldrb	r0, [r4, #25]
    8906:	69e2      	ldr	r2, [r4, #28]
    8908:	612b      	str	r3, [r5, #16]
    890a:	6a23      	ldr	r3, [r4, #32]
    890c:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    8910:	6169      	str	r1, [r5, #20]
    8912:	f885 e018 	strb.w	lr, [r5, #24]
    8916:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8918:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    891c:	7668      	strb	r0, [r5, #25]
    891e:	61ea      	str	r2, [r5, #28]
    8920:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    8924:	6b22      	ldr	r2, [r4, #48]	; 0x30
    8926:	622b      	str	r3, [r5, #32]
    8928:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    892a:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    892e:	6269      	str	r1, [r5, #36]	; 0x24
    8930:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    8934:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    8938:	63ab      	str	r3, [r5, #56]	; 0x38
    893a:	632a      	str	r2, [r5, #48]	; 0x30
    893c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    893e:	f8cd 8000 	str.w	r8, [sp]
    8942:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    8946:	63ea      	str	r2, [r5, #60]	; 0x3c
    8948:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    894c:	4620      	mov	r0, r4
    894e:	4d49      	ldr	r5, [pc, #292]	; (8a74 <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    8950:	4b49      	ldr	r3, [pc, #292]	; (8a78 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    8952:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    8956:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    895a:	f005 fe5b 	bl	e614 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    895e:	f894 c006 	ldrb.w	ip, [r4, #6]
    8962:	68a2      	ldr	r2, [r4, #8]
    8964:	68e3      	ldr	r3, [r4, #12]
    8966:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    896a:	6920      	ldr	r0, [r4, #16]
    896c:	6961      	ldr	r1, [r4, #20]
    896e:	f885 c006 	strb.w	ip, [r5, #6]
    8972:	60aa      	str	r2, [r5, #8]
    8974:	f894 c018 	ldrb.w	ip, [r4, #24]
    8978:	69e2      	ldr	r2, [r4, #28]
    897a:	60eb      	str	r3, [r5, #12]
    897c:	6a23      	ldr	r3, [r4, #32]
    897e:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    8982:	f8a5 e004 	strh.w	lr, [r5, #4]
    8986:	6128      	str	r0, [r5, #16]
    8988:	f894 e019 	ldrb.w	lr, [r4, #25]
    898c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    898e:	6169      	str	r1, [r5, #20]
    8990:	f885 c018 	strb.w	ip, [r5, #24]
    8994:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8996:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    899a:	61ea      	str	r2, [r5, #28]
    899c:	622b      	str	r3, [r5, #32]
    899e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    89a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    89a4:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    89a8:	f885 e019 	strb.w	lr, [r5, #25]
    89ac:	6268      	str	r0, [r5, #36]	; 0x24
    89ae:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    89b2:	6329      	str	r1, [r5, #48]	; 0x30
    89b4:	63ab      	str	r3, [r5, #56]	; 0x38
    89b6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    89ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    89bc:	f8cd a000 	str.w	sl, [sp]
    89c0:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    89c4:	63ea      	str	r2, [r5, #60]	; 0x3c
    89c6:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    89ca:	4620      	mov	r0, r4
    89cc:	4b2b      	ldr	r3, [pc, #172]	; (8a7c <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    89ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    89d2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    89d6:	f005 fe1d 	bl	e614 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    89da:	f104 0008 	add.w	r0, r4, #8
    89de:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    89e0:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8a80 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    89e4:	f894 c006 	ldrb.w	ip, [r4, #6]
    89e8:	88a5      	ldrh	r5, [r4, #4]
    89ea:	f88e c006 	strb.w	ip, [lr, #6]
    89ee:	f894 c019 	ldrb.w	ip, [r4, #25]
    89f2:	f894 8018 	ldrb.w	r8, [r4, #24]
    89f6:	f8ae 5004 	strh.w	r5, [lr, #4]
    89fa:	f8ce 0008 	str.w	r0, [lr, #8]
    89fe:	69e5      	ldr	r5, [r4, #28]
    8a00:	6a20      	ldr	r0, [r4, #32]
    8a02:	f8ce 100c 	str.w	r1, [lr, #12]
    8a06:	f8ce 2010 	str.w	r2, [lr, #16]
    8a0a:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    8a0e:	f8ce 3014 	str.w	r3, [lr, #20]
    8a12:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    8a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8a18:	f88e c019 	strb.w	ip, [lr, #25]
    8a1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8a1e:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    8a22:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8a24:	f88e 8018 	strb.w	r8, [lr, #24]
    8a28:	f8ce 501c 	str.w	r5, [lr, #28]
    8a2c:	f8ce 0020 	str.w	r0, [lr, #32]
    8a30:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    8a34:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    8a38:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    8a3c:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    8a40:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    8a44:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    8a48:	e01c      	b.n	8a84 <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    8a4a:	bf00      	nop
    8a4c:	00023ac4 	.word	0x00023ac4
    8a50:	20001150 	.word	0x20001150
    8a54:	00023ad4 	.word	0x00023ad4
    8a58:	20001180 	.word	0x20001180
    8a5c:	00023ae4 	.word	0x00023ae4
    8a60:	200011b0 	.word	0x200011b0
    8a64:	20000b18 	.word	0x20000b18
    8a68:	00023af4 	.word	0x00023af4
    8a6c:	00023b04 	.word	0x00023b04
    8a70:	20001084 	.word	0x20001084
    8a74:	200010c8 	.word	0x200010c8
    8a78:	00023b14 	.word	0x00023b14
    8a7c:	00023b24 	.word	0x00023b24
    8a80:	2000110c 	.word	0x2000110c
    8a84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    8a86:	9702      	str	r7, [sp, #8]
    8a88:	9601      	str	r6, [sp, #4]
    8a8a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    8a8e:	4dcc      	ldr	r5, [pc, #816]	; (8dc0 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    8a90:	9500      	str	r5, [sp, #0]
    8a92:	4620      	mov	r0, r4
    8a94:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    8a98:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    8a9c:	4bc9      	ldr	r3, [pc, #804]	; (8dc4 <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    8a9e:	4aca      	ldr	r2, [pc, #808]	; (8dc8 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    8aa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8aa4:	f7fc fda6 	bl	55f4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8aa8:	4bc8      	ldr	r3, [pc, #800]	; (8dcc <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    8aaa:	79a7      	ldrb	r7, [r4, #6]
    8aac:	68a6      	ldr	r6, [r4, #8]
    8aae:	68e5      	ldr	r5, [r4, #12]
    8ab0:	6920      	ldr	r0, [r4, #16]
    8ab2:	6961      	ldr	r1, [r4, #20]
    8ab4:	f894 8018 	ldrb.w	r8, [r4, #24]
    8ab8:	69e2      	ldr	r2, [r4, #28]
    8aba:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8abe:	f894 c019 	ldrb.w	ip, [r4, #25]
    8ac2:	719f      	strb	r7, [r3, #6]
    8ac4:	609e      	str	r6, [r3, #8]
    8ac6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    8ac8:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    8acc:	60dd      	str	r5, [r3, #12]
    8ace:	6118      	str	r0, [r3, #16]
    8ad0:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    8ad4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    8ad6:	6159      	str	r1, [r3, #20]
    8ad8:	f883 8018 	strb.w	r8, [r3, #24]
    8adc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    8ade:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    8ae2:	61da      	str	r2, [r3, #28]
    8ae4:	6a22      	ldr	r2, [r4, #32]
    8ae6:	f8a3 e004 	strh.w	lr, [r3, #4]
    8aea:	f883 c019 	strb.w	ip, [r3, #25]
    8aee:	621a      	str	r2, [r3, #32]
    8af0:	625f      	str	r7, [r3, #36]	; 0x24
    8af2:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    8af6:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    8afa:	6358      	str	r0, [r3, #52]	; 0x34
    8afc:	6399      	str	r1, [r3, #56]	; 0x38
    8afe:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    8b02:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    8b06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8b08:	649a      	str	r2, [r3, #72]	; 0x48
    8b0a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    8b0c:	9207      	str	r2, [sp, #28]
    8b0e:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    8b12:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    8b14:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    8b18:	6c61      	ldr	r1, [r4, #68]	; 0x44
    8b1a:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    8b1e:	64da      	str	r2, [r3, #76]	; 0x4c
    8b20:	9a07      	ldr	r2, [sp, #28]
    8b22:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    8b26:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    8b2a:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    8b2e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    8b32:	6459      	str	r1, [r3, #68]	; 0x44
    8b34:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8b36:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8b38:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    8b3c:	65da      	str	r2, [r3, #92]	; 0x5c
    8b3e:	6f27      	ldr	r7, [r4, #112]	; 0x70
    8b40:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8b42:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    8b46:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    8b4a:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    8b4e:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    8b52:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8b54:	6558      	str	r0, [r3, #84]	; 0x54
    8b56:	6599      	str	r1, [r3, #88]	; 0x58
    8b58:	661a      	str	r2, [r3, #96]	; 0x60
    8b5a:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    8b5e:	671f      	str	r7, [r3, #112]	; 0x70
    8b60:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    8b64:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    8b68:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    8b6c:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    8b70:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    8b74:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    8b78:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    8b7c:	675e      	str	r6, [r3, #116]	; 0x74
    8b7e:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    8b82:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    8b86:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    8b8a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    8b8e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8b92:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    8b96:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    8b9a:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    8b9e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    8ba2:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    8ba6:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    8baa:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    8bae:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    8bb2:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    8bb6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    8bba:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    8bbe:	4619      	mov	r1, r3
    8bc0:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    8bc4:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    8bc8:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    8bcc:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    8bce:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    8bd2:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    8bd6:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    8bda:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    8bde:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    8be2:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    8be4:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8be6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    8be8:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    8bec:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    8bf0:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    8bf4:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    8bf8:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    8bfc:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    8c00:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    8c04:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    8c08:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    8c0c:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    8c10:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    8c14:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    8c18:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    8c1c:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8c20:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    8c24:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    8c28:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8c2a:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    8c2e:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    8c32:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    8c36:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    8c3a:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    8c3e:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    8c42:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    8c46:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    8c4a:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    8c4e:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    8c52:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    8c56:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    8c5a:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    8c5c:	9d44      	ldr	r5, [sp, #272]	; 0x110
    8c5e:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    8c62:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    8c66:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    8c6a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    8c6c:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8c70:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    8c74:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    8c78:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    8c7c:	9e49      	ldr	r6, [sp, #292]	; 0x124
    8c7e:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    8c80:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    8c84:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    8c88:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    8c8a:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    8c8e:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    8c92:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    8c96:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    8c9a:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8c9e:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    8ca2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8ca4:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    8ca8:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    8cac:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    8cb0:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    8cb4:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    8cb8:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    8cbc:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    8cc0:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    8cc4:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    8cc8:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    8ccc:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    8cce:	9b50      	ldr	r3, [sp, #320]	; 0x140
    8cd0:	9d51      	ldr	r5, [sp, #324]	; 0x144
    8cd2:	9852      	ldr	r0, [sp, #328]	; 0x148
    8cd4:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    8cd8:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    8cdc:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    8ce0:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    8ce4:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8ce6:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    8cea:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    8cee:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    8cf2:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    8cf6:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    8cfa:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    8cfe:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    8d02:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    8d06:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    8d0a:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    8d0e:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    8d12:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    8d16:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    8d1a:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    8d1e:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    8d22:	4a2b      	ldr	r2, [pc, #172]	; (8dd0 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    8d24:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    8d28:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    8d2c:	2401      	movs	r4, #1
    8d2e:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    8d32:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    8d36:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    8d3a:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    8d3e:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    8d42:	2605      	movs	r6, #5
    8d44:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    8d48:	9d58      	ldr	r5, [sp, #352]	; 0x160
    8d4a:	4f22      	ldr	r7, [pc, #136]	; (8dd4 <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    8d4c:	9402      	str	r4, [sp, #8]
    8d4e:	e88d 0044 	stmia.w	sp, {r2, r6}
    8d52:	a808      	add	r0, sp, #32
    8d54:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    8d58:	4b1f      	ldr	r3, [pc, #124]	; (8dd8 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    8d5a:	4a20      	ldr	r2, [pc, #128]	; (8ddc <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    8d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8d60:	f7fc fc48 	bl	55f4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8d64:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    8d68:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d6e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8d70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8d72:	980d      	ldr	r0, [sp, #52]	; 0x34
    8d74:	71b9      	strb	r1, [r7, #6]
    8d76:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8d78:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    8d7c:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8d80:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    8d84:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    8d88:	80ba      	strh	r2, [r7, #4]
    8d8a:	60bb      	str	r3, [r7, #8]
    8d8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d90:	60fe      	str	r6, [r7, #12]
    8d92:	613d      	str	r5, [r7, #16]
    8d94:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    8d98:	9d15      	ldr	r5, [sp, #84]	; 0x54
    8d9a:	6178      	str	r0, [r7, #20]
    8d9c:	61f9      	str	r1, [r7, #28]
    8d9e:	9816      	ldr	r0, [sp, #88]	; 0x58
    8da0:	f887 8018 	strb.w	r8, [r7, #24]
    8da4:	a919      	add	r1, sp, #100	; 0x64
    8da6:	623a      	str	r2, [r7, #32]
    8da8:	627b      	str	r3, [r7, #36]	; 0x24
    8daa:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8dae:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    8db2:	637d      	str	r5, [r7, #52]	; 0x34
    8db4:	63b8      	str	r0, [r7, #56]	; 0x38
    8db6:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    8dba:	f887 c019 	strb.w	ip, [r7, #25]
    8dbe:	e00f      	b.n	8de0 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    8dc0:	00023bf4 	.word	0x00023bf4
    8dc4:	00023d64 	.word	0x00023d64
    8dc8:	00023ba4 	.word	0x00023ba4
    8dcc:	20000b60 	.word	0x20000b60
    8dd0:	00023d94 	.word	0x00023d94
    8dd4:	20000ca8 	.word	0x20000ca8
    8dd8:	00023d74 	.word	0x00023d74
    8ddc:	00023d84 	.word	0x00023d84
    8de0:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    8de4:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    8de8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    8dec:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    8df0:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    8df4:	c90e      	ldmia	r1, {r1, r2, r3}
    8df6:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8dfa:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    8dfe:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    8e02:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    8e06:	6479      	str	r1, [r7, #68]	; 0x44
    8e08:	981d      	ldr	r0, [sp, #116]	; 0x74
    8e0a:	991e      	ldr	r1, [sp, #120]	; 0x78
    8e0c:	64ba      	str	r2, [r7, #72]	; 0x48
    8e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    8e10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8e12:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8e14:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    8e18:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    8e1c:	9d24      	ldr	r5, [sp, #144]	; 0x90
    8e1e:	9e25      	ldr	r6, [sp, #148]	; 0x94
    8e20:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    8e24:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    8e28:	6578      	str	r0, [r7, #84]	; 0x54
    8e2a:	65b9      	str	r1, [r7, #88]	; 0x58
    8e2c:	65fa      	str	r2, [r7, #92]	; 0x5c
    8e2e:	663b      	str	r3, [r7, #96]	; 0x60
    8e30:	673d      	str	r5, [r7, #112]	; 0x70
    8e32:	677e      	str	r6, [r7, #116]	; 0x74
    8e34:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8e38:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    8e3c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    8e40:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8e42:	982e      	ldr	r0, [sp, #184]	; 0xb8
    8e44:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8e48:	4615      	mov	r5, r2
    8e4a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8e4c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8e4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    8e52:	461e      	mov	r6, r3
    8e54:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8e56:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8e5c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    8e60:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8e62:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8e64:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8e68:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    8e6c:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8e6e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8e74:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    8e78:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    8e7a:	9836      	ldr	r0, [sp, #216]	; 0xd8
    8e7c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8e80:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    8e84:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8e86:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    8e8c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    8e90:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    8e94:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    8e98:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8e9c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8ea0:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    8ea2:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8ea4:	993b      	ldr	r1, [sp, #236]	; 0xec
    8ea6:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    8eaa:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    8eae:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    8eb2:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    8eb6:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    8eba:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    8ebe:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    8ec2:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    8ec6:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    8eca:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    8ece:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    8ed2:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8ed6:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8eda:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    8ede:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8ee2:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8ee6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    8eea:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8eec:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    8ef0:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    8ef4:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    8ef8:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    8efc:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    8f00:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    8f04:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    8f08:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8f0c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8f10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8f14:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8f18:	9943      	ldr	r1, [sp, #268]	; 0x10c
    8f1a:	9d44      	ldr	r5, [sp, #272]	; 0x110
    8f1c:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    8f20:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    8f24:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    8f28:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    8f2c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    8f2e:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    8f32:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    8f36:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    8f3a:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    8f3e:	994b      	ldr	r1, [sp, #300]	; 0x12c
    8f40:	9d49      	ldr	r5, [sp, #292]	; 0x124
    8f42:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    8f46:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    8f4a:	984a      	ldr	r0, [sp, #296]	; 0x128
    8f4c:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8f50:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    8f54:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    8f58:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    8f5c:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8f60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    8f64:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8f66:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    8f6a:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    8f6e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    8f72:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    8f76:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8f7a:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    8f7e:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8f82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8f86:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    8f8a:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    8f8c:	9b50      	ldr	r3, [sp, #320]	; 0x140
    8f8e:	9851      	ldr	r0, [sp, #324]	; 0x144
    8f90:	9952      	ldr	r1, [sp, #328]	; 0x148
    8f92:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    8f96:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    8f9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    8f9e:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8fa0:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    8fa4:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    8fa8:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    8fac:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    8fb0:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    8fb4:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    8fb8:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8fbc:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    8fc0:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    8fc4:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8fc8:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    8fcc:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    8fd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    8fd4:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    8fd8:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    8fdc:	4aca      	ldr	r2, [pc, #808]	; (9308 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    8fde:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    8fe2:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    8fe6:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    8fea:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    8fee:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    8ff2:	2503      	movs	r5, #3
    8ff4:	2602      	movs	r6, #2
    8ff6:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8ffa:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    8ffe:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    9002:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    9006:	9958      	ldr	r1, [sp, #352]	; 0x160
    9008:	4bc0      	ldr	r3, [pc, #768]	; (930c <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    900a:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    900e:	a808      	add	r0, sp, #32
    9010:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    9014:	4abe      	ldr	r2, [pc, #760]	; (9310 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    9016:	4fbf      	ldr	r7, [pc, #764]	; (9314 <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    9018:	f44f 7100 	mov.w	r1, #512	; 0x200
    901c:	f7fc faea 	bl	55f4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    9020:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    9024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9028:	990d      	ldr	r1, [sp, #52]	; 0x34
    902a:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    902e:	980c      	ldr	r0, [sp, #48]	; 0x30
    9030:	f8a7 c004 	strh.w	ip, [r7, #4]
    9034:	60ba      	str	r2, [r7, #8]
    9036:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    903a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    903c:	60fb      	str	r3, [r7, #12]
    903e:	6179      	str	r1, [r7, #20]
    9040:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9042:	9915      	ldr	r1, [sp, #84]	; 0x54
    9044:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    9048:	f887 e006 	strb.w	lr, [r7, #6]
    904c:	6138      	str	r0, [r7, #16]
    904e:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    9052:	9811      	ldr	r0, [sp, #68]	; 0x44
    9054:	f887 c018 	strb.w	ip, [r7, #24]
    9058:	61fa      	str	r2, [r7, #28]
    905a:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    905e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9060:	623b      	str	r3, [r7, #32]
    9062:	6379      	str	r1, [r7, #52]	; 0x34
    9064:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    9068:	f887 e019 	strb.w	lr, [r7, #25]
    906c:	a919      	add	r1, sp, #100	; 0x64
    906e:	6278      	str	r0, [r7, #36]	; 0x24
    9070:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    9074:	63ba      	str	r2, [r7, #56]	; 0x38
    9076:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    907a:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    907e:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    9082:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9086:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    908a:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    908e:	c90e      	ldmia	r1, {r1, r2, r3}
    9090:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    9094:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    9098:	6479      	str	r1, [r7, #68]	; 0x44
    909a:	64ba      	str	r2, [r7, #72]	; 0x48
    909c:	991d      	ldr	r1, [sp, #116]	; 0x74
    909e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    90a0:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    90a4:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    90a8:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    90ac:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    90b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    90b2:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    90b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    90b8:	9820      	ldr	r0, [sp, #128]	; 0x80
    90ba:	6579      	str	r1, [r7, #84]	; 0x54
    90bc:	65ba      	str	r2, [r7, #88]	; 0x58
    90be:	9924      	ldr	r1, [sp, #144]	; 0x90
    90c0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    90c2:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    90c6:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    90ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    90cc:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    90d0:	677a      	str	r2, [r7, #116]	; 0x74
    90d2:	6638      	str	r0, [r7, #96]	; 0x60
    90d4:	6739      	str	r1, [r7, #112]	; 0x70
    90d6:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    90da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    90dc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    90de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    90e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    90e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    90e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    90ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    90ee:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    90f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    90f4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    90f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    90fa:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    90fe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    9100:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    9102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    9106:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    910a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    910c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    9110:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    9112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    9116:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    911a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    911c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    911e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    9122:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    9126:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    9128:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    912c:	a939      	add	r1, sp, #228	; 0xe4
    912e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    9130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    9134:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    9138:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    913c:	c90e      	ldmia	r1, {r1, r2, r3}
    913e:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    9142:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    9146:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    914a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    914e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    9152:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    9156:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    915a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    915e:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    9162:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    9166:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    916a:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    916e:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    9172:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    9176:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    917a:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    917e:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    9182:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    9186:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    918a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    918e:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    9192:	9b42      	ldr	r3, [sp, #264]	; 0x108
    9194:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    9198:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    919c:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    91a0:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    91a4:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    91a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    91ac:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    91b0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    91b2:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    91b6:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    91ba:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    91be:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    91c2:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    91c6:	9947      	ldr	r1, [sp, #284]	; 0x11c
    91c8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    91cc:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    91d0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    91d2:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    91d6:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    91da:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    91de:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    91e2:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    91e6:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    91ea:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    91ee:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    91f0:	984b      	ldr	r0, [sp, #300]	; 0x12c
    91f2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    91f6:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    91fa:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    91fe:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    9202:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    9206:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    9208:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    920c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    9210:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    9214:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    9218:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    921c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    9220:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    9224:	994f      	ldr	r1, [sp, #316]	; 0x13c
    9226:	9b51      	ldr	r3, [sp, #324]	; 0x144
    9228:	9a50      	ldr	r2, [sp, #320]	; 0x140
    922a:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    922e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    9232:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    9236:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    923a:	9852      	ldr	r0, [sp, #328]	; 0x148
    923c:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    9240:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    9244:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    9248:	9a54      	ldr	r2, [sp, #336]	; 0x150
    924a:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    924e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    9252:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    9256:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    925a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    925e:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    9262:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    9266:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    926a:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    926e:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    9272:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    9276:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    927a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    927e:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    9282:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    9286:	f04f 0800 	mov.w	r8, #0
    928a:	f8df e098 	ldr.w	lr, [pc, #152]	; 9324 <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    928e:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    9292:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    9296:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    929a:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    929e:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    92a2:	9958      	ldr	r1, [sp, #352]	; 0x160
    92a4:	4b1c      	ldr	r3, [pc, #112]	; (9318 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    92a6:	9502      	str	r5, [sp, #8]
    92a8:	f8cd 8004 	str.w	r8, [sp, #4]
    92ac:	f8cd e000 	str.w	lr, [sp]
    92b0:	a808      	add	r0, sp, #32
    92b2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    92b6:	4a19      	ldr	r2, [pc, #100]	; (931c <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    92b8:	4f19      	ldr	r7, [pc, #100]	; (9320 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    92ba:	f44f 7180 	mov.w	r1, #256	; 0x100
    92be:	f7fc f999 	bl	55f4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    92c2:	a80a      	add	r0, sp, #40	; 0x28
    92c4:	c807      	ldmia	r0, {r0, r1, r2}
    92c6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    92ca:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    92ce:	80bb      	strh	r3, [r7, #4]
    92d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    92d2:	f887 e006 	strb.w	lr, [r7, #6]
    92d6:	60b8      	str	r0, [r7, #8]
    92d8:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    92dc:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    92e0:	60f9      	str	r1, [r7, #12]
    92e2:	613a      	str	r2, [r7, #16]
    92e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    92e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    92e8:	617b      	str	r3, [r7, #20]
    92ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    92ec:	f887 e018 	strb.w	lr, [r7, #24]
    92f0:	7678      	strb	r0, [r7, #25]
    92f2:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    92f6:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    92fa:	61f9      	str	r1, [r7, #28]
    92fc:	623a      	str	r2, [r7, #32]
    92fe:	9915      	ldr	r1, [sp, #84]	; 0x54
    9300:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9302:	627b      	str	r3, [r7, #36]	; 0x24
    9304:	e010      	b.n	9328 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    9306:	bf00      	nop
    9308:	00023ca4 	.word	0x00023ca4
    930c:	00023c44 	.word	0x00023c44
    9310:	00023c84 	.word	0x00023c84
    9314:	20000df0 	.word	0x20000df0
    9318:	00023c54 	.word	0x00023c54
    931c:	00023c94 	.word	0x00023c94
    9320:	20000f38 	.word	0x20000f38
    9324:	00023cb4 	.word	0x00023cb4
    9328:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    932c:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    9330:	6379      	str	r1, [r7, #52]	; 0x34
    9332:	63ba      	str	r2, [r7, #56]	; 0x38
    9334:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    9338:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    933c:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    9340:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    9344:	9919      	ldr	r1, [sp, #100]	; 0x64
    9346:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9348:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    934c:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    9350:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9352:	6479      	str	r1, [r7, #68]	; 0x44
    9354:	64ba      	str	r2, [r7, #72]	; 0x48
    9356:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    935a:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    935e:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    9362:	64fb      	str	r3, [r7, #76]	; 0x4c
    9364:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    9368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    936a:	991e      	ldr	r1, [sp, #120]	; 0x78
    936c:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    9370:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9372:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    9376:	657b      	str	r3, [r7, #84]	; 0x54
    9378:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    937c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    937e:	65b9      	str	r1, [r7, #88]	; 0x58
    9380:	65fa      	str	r2, [r7, #92]	; 0x5c
    9382:	9924      	ldr	r1, [sp, #144]	; 0x90
    9384:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9386:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    938a:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    938e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    9392:	6739      	str	r1, [r7, #112]	; 0x70
    9394:	663b      	str	r3, [r7, #96]	; 0x60
    9396:	677a      	str	r2, [r7, #116]	; 0x74
    9398:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    939c:	9928      	ldr	r1, [sp, #160]	; 0xa0
    939e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    93a2:	992c      	ldr	r1, [sp, #176]	; 0xb0
    93a4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    93a8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    93aa:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    93ae:	992e      	ldr	r1, [sp, #184]	; 0xb8
    93b0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    93b4:	992f      	ldr	r1, [sp, #188]	; 0xbc
    93b6:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    93ba:	9930      	ldr	r1, [sp, #192]	; 0xc0
    93bc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    93c0:	9931      	ldr	r1, [sp, #196]	; 0xc4
    93c2:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    93c6:	9932      	ldr	r1, [sp, #200]	; 0xc8
    93c8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    93cc:	9933      	ldr	r1, [sp, #204]	; 0xcc
    93ce:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    93d2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    93d4:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    93d8:	9935      	ldr	r1, [sp, #212]	; 0xd4
    93da:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    93de:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    93e2:	9936      	ldr	r1, [sp, #216]	; 0xd8
    93e4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    93e8:	9937      	ldr	r1, [sp, #220]	; 0xdc
    93ea:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    93ee:	9938      	ldr	r1, [sp, #224]	; 0xe0
    93f0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    93f4:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    93f8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    93fc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    93fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    9402:	983a      	ldr	r0, [sp, #232]	; 0xe8
    9404:	993b      	ldr	r1, [sp, #236]	; 0xec
    9406:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    940a:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    940e:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    9412:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    9416:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    941a:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    941e:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    9422:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    9426:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    942a:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    942e:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    9432:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    9436:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    943a:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    943e:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    9442:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    9446:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    944a:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    944e:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    9452:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    9456:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    945a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    945c:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    9460:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    9464:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    9468:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    946c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    9470:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    9474:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    9476:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    947a:	9844      	ldr	r0, [sp, #272]	; 0x110
    947c:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    9480:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    9484:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    9488:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    948c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    9490:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    9494:	9847      	ldr	r0, [sp, #284]	; 0x11c
    9496:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    949a:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    949e:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    94a2:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    94a6:	9a49      	ldr	r2, [sp, #292]	; 0x124
    94a8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    94ac:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    94ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    94b2:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    94b6:	984b      	ldr	r0, [sp, #300]	; 0x12c
    94b8:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    94bc:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    94c0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    94c4:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    94c8:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    94cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    94d0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    94d2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    94d6:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    94da:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    94de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    94e2:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    94e6:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    94e8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    94ec:	9850      	ldr	r0, [sp, #320]	; 0x140
    94ee:	9951      	ldr	r1, [sp, #324]	; 0x144
    94f0:	9a52      	ldr	r2, [sp, #328]	; 0x148
    94f2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    94f6:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    94fa:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    94fe:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    9502:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    9506:	9a54      	ldr	r2, [sp, #336]	; 0x150
    9508:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    950c:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    9510:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    9514:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    9518:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    951c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    9520:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    9524:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    9528:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    952c:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    9530:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    9534:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    9538:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    953c:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    9540:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    9544:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    9548:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    954c:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    9550:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    9554:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    9558:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    955c:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    955e:	f8df c208 	ldr.w	ip, [pc, #520]	; 9768 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    9562:	9207      	str	r2, [sp, #28]
    9564:	f8df e204 	ldr.w	lr, [pc, #516]	; 976c <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    9568:	9505      	str	r5, [sp, #20]
    956a:	4b78      	ldr	r3, [pc, #480]	; (974c <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    956c:	9d07      	ldr	r5, [sp, #28]
    956e:	4878      	ldr	r0, [pc, #480]	; (9750 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    9570:	f8cd e010 	str.w	lr, [sp, #16]
    9574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9578:	e88d 1004 	stmia.w	sp, {r2, ip}
    957c:	9303      	str	r3, [sp, #12]
    957e:	9002      	str	r0, [sp, #8]
    9580:	4641      	mov	r1, r8
    9582:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    9586:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 9770 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    958a:	4d72      	ldr	r5, [pc, #456]	; (9754 <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    958c:	a808      	add	r0, sp, #32
    958e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9592:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9596:	f008 fbe7 	bl	11d68 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    959a:	990a      	ldr	r1, [sp, #40]	; 0x28
    959c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    959e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    95a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    95a4:	f8c8 1008 	str.w	r1, [r8, #8]
    95a8:	f8c8 2004 	str.w	r2, [r8, #4]
    95ac:	990d      	ldr	r1, [sp, #52]	; 0x34
    95ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    95b0:	f888 300c 	strb.w	r3, [r8, #12]
    95b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95b6:	f8c8 0010 	str.w	r0, [r8, #16]
    95ba:	f8c8 1014 	str.w	r1, [r8, #20]
    95be:	9810      	ldr	r0, [sp, #64]	; 0x40
    95c0:	9911      	ldr	r1, [sp, #68]	; 0x44
    95c2:	f8c8 2018 	str.w	r2, [r8, #24]
    95c6:	f8c8 301c 	str.w	r3, [r8, #28]
    95ca:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    95ce:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    95d2:	f8c8 0020 	str.w	r0, [r8, #32]
    95d6:	2780      	movs	r7, #128	; 0x80
    95d8:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    95dc:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    95e0:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    95e4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    95e8:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    95ec:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    95f0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    95f4:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    95f8:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    95fc:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    9600:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    9604:	a914      	add	r1, sp, #80	; 0x50
    9606:	463a      	mov	r2, r7
    9608:	f108 0030 	add.w	r0, r8, #48	; 0x30
    960c:	f015 fc18 	bl	1ee40 <memcpy>
    9610:	463a      	mov	r2, r7
    9612:	a934      	add	r1, sp, #208	; 0xd0
    9614:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    9618:	f015 fc12 	bl	1ee40 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    961c:	4b4e      	ldr	r3, [pc, #312]	; (9758 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    961e:	9303      	str	r3, [sp, #12]
    9620:	484e      	ldr	r0, [pc, #312]	; (975c <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    9622:	4a4f      	ldr	r2, [pc, #316]	; (9760 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    9624:	9002      	str	r0, [sp, #8]
    9626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    962a:	9201      	str	r2, [sp, #4]
    962c:	9300      	str	r3, [sp, #0]
    962e:	9854      	ldr	r0, [sp, #336]	; 0x150
    9630:	9a55      	ldr	r2, [sp, #340]	; 0x154
    9632:	9b56      	ldr	r3, [sp, #344]	; 0x158
    9634:	9605      	str	r6, [sp, #20]
    9636:	4621      	mov	r1, r4
    9638:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    963a:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    963e:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    9642:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    9646:	9858      	ldr	r0, [sp, #352]	; 0x160
    9648:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    964c:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    9650:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    9654:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    9658:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    965a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    965c:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    965e:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    9662:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    9666:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    966a:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    966e:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    9672:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    9676:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    967a:	a808      	add	r0, sp, #32
    967c:	4e39      	ldr	r6, [pc, #228]	; (9764 <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    967e:	9604      	str	r6, [sp, #16]
    9680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9684:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    9688:	f008 fb6e 	bl	11d68 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    968c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    968e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9690:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    9694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9696:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9698:	9b11      	ldr	r3, [sp, #68]	; 0x44
    969a:	60ac      	str	r4, [r5, #8]
    969c:	6068      	str	r0, [r5, #4]
    969e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    96a0:	980d      	ldr	r0, [sp, #52]	; 0x34
    96a2:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    96a6:	f885 e00c 	strb.w	lr, [r5, #12]
    96aa:	612a      	str	r2, [r5, #16]
    96ac:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    96b0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    96b4:	6168      	str	r0, [r5, #20]
    96b6:	61ae      	str	r6, [r5, #24]
    96b8:	9810      	ldr	r0, [sp, #64]	; 0x40
    96ba:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    96be:	61ec      	str	r4, [r5, #28]
    96c0:	626b      	str	r3, [r5, #36]	; 0x24
    96c2:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    96c6:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    96ca:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    96ce:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    96d2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    96d6:	a914      	add	r1, sp, #80	; 0x50
    96d8:	6228      	str	r0, [r5, #32]
    96da:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    96de:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    96e2:	463a      	mov	r2, r7
    96e4:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    96e8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    96ec:	f015 fba8 	bl	1ee40 <memcpy>
    96f0:	463a      	mov	r2, r7
    96f2:	a934      	add	r1, sp, #208	; 0xd0
    96f4:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    96f8:	f015 fba2 	bl	1ee40 <memcpy>
    96fc:	a855      	add	r0, sp, #340	; 0x154
    96fe:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    9702:	9b54      	ldr	r3, [sp, #336]	; 0x150
    9704:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    9708:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    970a:	9e58      	ldr	r6, [sp, #352]	; 0x160
    970c:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    9710:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    9714:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    9718:	995b      	ldr	r1, [sp, #364]	; 0x16c
    971a:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    971e:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    9720:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    9724:	4648      	mov	r0, r9
    9726:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    972a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    972e:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    9732:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    9736:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    973a:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    973e:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    9742:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    9746:	b05f      	add	sp, #380	; 0x17c
    9748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    974c:	00023a94 	.word	0x00023a94
    9750:	00023a84 	.word	0x00023a84
    9754:	200015e8 	.word	0x200015e8
    9758:	00023ab4 	.word	0x00023ab4
    975c:	00023aa4 	.word	0x00023aa4
    9760:	00023bd4 	.word	0x00023bd4
    9764:	00023b74 	.word	0x00023b74
    9768:	00023bc4 	.word	0x00023bc4
    976c:	00023b64 	.word	0x00023b64
    9770:	20001490 	.word	0x20001490

00009774 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    9774:	2914      	cmp	r1, #20
    9776:	dc03      	bgt.n	9780 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    9778:	4a03      	ldr	r2, [pc, #12]	; (9788 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    977a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    977e:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    9780:	4b02      	ldr	r3, [pc, #8]	; (978c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    9782:	6818      	ldr	r0, [r3, #0]
    9784:	f006 bee0 	b.w	10548 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    9788:	00023a10 	.word	0x00023a10
    978c:	20001efc 	.word	0x20001efc

00009790 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    9790:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    9792:	4ab1      	ldr	r2, [pc, #708]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9794:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9798:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    979c:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    979e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    97a2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    97a6:	065e      	lsls	r6, r3, #25
    97a8:	d4fb      	bmi.n	97a2 <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    97aa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    97ae:	49aa      	ldr	r1, [pc, #680]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    97b0:	2001      	movs	r0, #1
    97b2:	f360 0303 	bfi	r3, r0, #0, #4
    97b6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    97ba:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    97be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    97c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    97c6:	684b      	ldr	r3, [r1, #4]
    97c8:	f013 0304 	ands.w	r3, r3, #4
    97cc:	d1fb      	bne.n	97c6 <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    97ce:	48a3      	ldr	r0, [pc, #652]	; (9a5c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    97d0:	4aa3      	ldr	r2, [pc, #652]	; (9a60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    97d2:	6981      	ldr	r1, [r0, #24]
    97d4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    97d8:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    97da:	6811      	ldr	r1, [r2, #0]
    97dc:	f363 0141 	bfi	r1, r3, #1, #1
    97e0:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    97e2:	6893      	ldr	r3, [r2, #8]
    97e4:	f013 0302 	ands.w	r3, r3, #2
    97e8:	d1fb      	bne.n	97e2 <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    97ea:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    97ec:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    97ee:	499a      	ldr	r1, [pc, #616]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    97f0:	f040 0002 	orr.w	r0, r0, #2
    97f4:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    97f6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    97f8:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    97fc:	f040 0002 	orr.w	r0, r0, #2
    9800:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    9802:	6453      	str	r3, [r2, #68]	; 0x44
    9804:	6493      	str	r3, [r2, #72]	; 0x48
    9806:	64d3      	str	r3, [r2, #76]	; 0x4c
    9808:	6513      	str	r3, [r2, #80]	; 0x50
    980a:	6553      	str	r3, [r2, #84]	; 0x54
    980c:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    980e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    9810:	f040 0001 	orr.w	r0, r0, #1
    9814:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    9816:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    981a:	f363 1286 	bfi	r2, r3, #6, #1
    981e:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    9822:	460a      	mov	r2, r1
    9824:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9828:	065d      	lsls	r5, r3, #25
    982a:	d4fb      	bmi.n	9824 <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    982c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9830:	4989      	ldr	r1, [pc, #548]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9832:	2001      	movs	r0, #1
    9834:	f360 0303 	bfi	r3, r0, #0, #4
    9838:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    983c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9844:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9848:	684b      	ldr	r3, [r1, #4]
    984a:	f013 0304 	ands.w	r3, r3, #4
    984e:	d1fb      	bne.n	9848 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9850:	4882      	ldr	r0, [pc, #520]	; (9a5c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    9852:	4a84      	ldr	r2, [pc, #528]	; (9a64 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9854:	6981      	ldr	r1, [r0, #24]
    9856:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    985a:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    985c:	6811      	ldr	r1, [r2, #0]
    985e:	f363 0141 	bfi	r1, r3, #1, #1
    9862:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    9864:	6893      	ldr	r3, [r2, #8]
    9866:	f013 0302 	ands.w	r3, r3, #2
    986a:	d1fb      	bne.n	9864 <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    986c:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    986e:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9870:	4979      	ldr	r1, [pc, #484]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    9872:	f040 0002 	orr.w	r0, r0, #2
    9876:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    9878:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    987a:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    987e:	f040 0002 	orr.w	r0, r0, #2
    9882:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    9884:	6453      	str	r3, [r2, #68]	; 0x44
    9886:	6493      	str	r3, [r2, #72]	; 0x48
    9888:	64d3      	str	r3, [r2, #76]	; 0x4c
    988a:	6513      	str	r3, [r2, #80]	; 0x50
    988c:	6553      	str	r3, [r2, #84]	; 0x54
    988e:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9890:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    9894:	f363 1286 	bfi	r2, r3, #6, #1
    9898:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    989c:	460a      	mov	r2, r1
    989e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    98a2:	065c      	lsls	r4, r3, #25
    98a4:	d4fb      	bmi.n	989e <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    98a6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    98aa:	496b      	ldr	r1, [pc, #428]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    98ac:	2006      	movs	r0, #6
    98ae:	f360 0303 	bfi	r3, r0, #0, #4
    98b2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    98b6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    98ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    98be:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    98c2:	684b      	ldr	r3, [r1, #4]
    98c4:	f013 0318 	ands.w	r3, r3, #24
    98c8:	d1fb      	bne.n	98c2 <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    98ca:	4c64      	ldr	r4, [pc, #400]	; (9a5c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    98cc:	4a62      	ldr	r2, [pc, #392]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    98ce:	6960      	ldr	r0, [r4, #20]
    98d0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    98d4:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    98d6:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    98da:	f363 1086 	bfi	r0, r3, #6, #1
    98de:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    98e2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    98e6:	0658      	lsls	r0, r3, #25
    98e8:	d4fb      	bmi.n	98e2 <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    98ea:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    98ee:	495a      	ldr	r1, [pc, #360]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    98f0:	2006      	movs	r0, #6
    98f2:	f360 0303 	bfi	r3, r0, #0, #4
    98f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    98fa:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    98fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9902:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    9906:	684b      	ldr	r3, [r1, #4]
    9908:	f013 0318 	ands.w	r3, r3, #24
    990c:	d1fb      	bne.n	9906 <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    990e:	4c53      	ldr	r4, [pc, #332]	; (9a5c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    9910:	4a51      	ldr	r2, [pc, #324]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    9912:	69a0      	ldr	r0, [r4, #24]
    9914:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    9918:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    991a:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    991e:	f363 1086 	bfi	r0, r3, #6, #1
    9922:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    9926:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    992a:	0659      	lsls	r1, r3, #25
    992c:	d4fb      	bmi.n	9926 <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    992e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9932:	4949      	ldr	r1, [pc, #292]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9934:	2006      	movs	r0, #6
    9936:	f360 0303 	bfi	r3, r0, #0, #4
    993a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    993e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9946:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    994a:	684b      	ldr	r3, [r1, #4]
    994c:	f013 0318 	ands.w	r3, r3, #24
    9950:	d1fb      	bne.n	994a <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9952:	4842      	ldr	r0, [pc, #264]	; (9a5c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9954:	4a40      	ldr	r2, [pc, #256]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9956:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9958:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    995a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    995e:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9960:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    9964:	6a04      	ldr	r4, [r0, #32]
    9966:	f044 0420 	orr.w	r4, r4, #32
    996a:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    996c:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    9970:	f363 1086 	bfi	r0, r3, #6, #1
    9974:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    9978:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    997c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9980:	2b00      	cmp	r3, #0
    9982:	d1f9      	bne.n	9978 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    9984:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    9988:	4834      	ldr	r0, [pc, #208]	; (9a5c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    998a:	4c33      	ldr	r4, [pc, #204]	; (9a58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    998c:	f363 0103 	bfi	r1, r3, #0, #4
    9990:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    9994:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    9998:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    999c:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    99a0:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    99a2:	69c1      	ldr	r1, [r0, #28]
    99a4:	f041 0110 	orr.w	r1, r1, #16
    99a8:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    99aa:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    99ae:	f363 1186 	bfi	r1, r3, #6, #1
    99b2:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    99b6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    99ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
    99be:	2b00      	cmp	r3, #0
    99c0:	d1f9      	bne.n	99b6 <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    99c2:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    99c6:	4a28      	ldr	r2, [pc, #160]	; (9a68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    99c8:	4d24      	ldr	r5, [pc, #144]	; (9a5c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    99ca:	f363 0103 	bfi	r1, r3, #0, #4
    99ce:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    99d2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    99d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    99da:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    99de:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    99e0:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    99e2:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    99e4:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    99e6:	f044 0410 	orr.w	r4, r4, #16
    99ea:	622c      	str	r4, [r5, #32]
    99ec:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    99f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    99f4:	f04f 0e01 	mov.w	lr, #1
    99f8:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    99fa:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    99fc:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    99fe:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    9a00:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    9a02:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    9a06:	6813      	ldr	r3, [r2, #0]
    9a08:	f36f 0341 	bfc	r3, #1, #1
    9a0c:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9a0e:	6913      	ldr	r3, [r2, #16]
    9a10:	f013 0302 	ands.w	r3, r3, #2
    9a14:	d1fb      	bne.n	9a0e <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    9a16:	7910      	ldrb	r0, [r2, #4]
    9a18:	f040 0002 	orr.w	r0, r0, #2
    9a1c:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    9a1e:	6810      	ldr	r0, [r2, #0]
    9a20:	f36e 0083 	bfi	r0, lr, #2, #2
    9a24:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    9a26:	6810      	ldr	r0, [r2, #0]
    9a28:	f367 200a 	bfi	r0, r7, #8, #3
    9a2c:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    9a2e:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    9a30:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    9a32:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    9a36:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    9a3a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    9a3e:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    9a40:	6813      	ldr	r3, [r2, #0]
    9a42:	f043 0302 	orr.w	r3, r3, #2
    9a46:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9a48:	6913      	ldr	r3, [r2, #16]
    9a4a:	079b      	lsls	r3, r3, #30
    9a4c:	d4fc      	bmi.n	9a48 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    9a4e:	4561      	cmp	r1, ip
    9a50:	d1d7      	bne.n	9a02 <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    9a52:	b005      	add	sp, #20
    9a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a56:	bf00      	nop
    9a58:	40001c00 	.word	0x40001c00
    9a5c:	40000800 	.word	0x40000800
    9a60:	41016000 	.word	0x41016000
    9a64:	41018000 	.word	0x41018000
    9a68:	000239ec 	.word	0x000239ec

00009a6c <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9a6c:	498b      	ldr	r1, [pc, #556]	; (9c9c <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    9a6e:	4a8c      	ldr	r2, [pc, #560]	; (9ca0 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9a70:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    9a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    9a7a:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    9a7e:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9a80:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    9a82:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    9a84:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    9a88:	4606      	mov	r6, r0
    InitClocks();
    9a8a:	f7ff fe81 	bl	9790 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    9a8e:	4b85      	ldr	r3, [pc, #532]	; (9ca4 <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    9a90:	4985      	ldr	r1, [pc, #532]	; (9ca8 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    9a92:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    9a94:	680d      	ldr	r5, [r1, #0]
    9a96:	4f85      	ldr	r7, [pc, #532]	; (9cac <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    9a98:	f364 0241 	bfi	r2, r4, #1, #1
    9a9c:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    9a9e:	691a      	ldr	r2, [r3, #16]
    9aa0:	21a7      	movs	r1, #167	; 0xa7
    9aa2:	f361 4217 	bfi	r2, r1, #16, #8
    9aa6:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    9aa8:	691a      	ldr	r2, [r3, #16]
    9aaa:	f368 0283 	bfi	r2, r8, #2, #2
    9aae:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    9ab0:	691a      	ldr	r2, [r3, #16]
    9ab2:	2107      	movs	r1, #7
    9ab4:	f361 220b 	bfi	r2, r1, #8, #4
    9ab8:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    9aba:	691a      	ldr	r2, [r3, #16]
    9abc:	f042 0202 	orr.w	r2, r2, #2
    9ac0:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    9ac2:	4628      	mov	r0, r5
    9ac4:	4641      	mov	r1, r8
    9ac6:	f008 fc01 	bl	122cc <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    9aca:	4879      	ldr	r0, [pc, #484]	; (9cb0 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    9acc:	2100      	movs	r1, #0
    9ace:	f000 fc9b 	bl	a408 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    9ad2:	4621      	mov	r1, r4
    9ad4:	4628      	mov	r0, r5
    9ad6:	f008 fbf9 	bl	122cc <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    9ada:	4b76      	ldr	r3, [pc, #472]	; (9cb4 <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    9adc:	4a76      	ldr	r2, [pc, #472]	; (9cb8 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    9ade:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    9ae2:	2102      	movs	r1, #2
    9ae4:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    9ae8:	6810      	ldr	r0, [r2, #0]
    9aea:	f006 fe41 	bl	10770 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    9aee:	f857 0f04 	ldr.w	r0, [r7, #4]!
    9af2:	6803      	ldr	r3, [r0, #0]
    9af4:	b221      	sxth	r1, r4
    9af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9af8:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    9afa:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9afc:	2c15      	cmp	r4, #21
    9afe:	d1f6      	bne.n	9aee <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    9b00:	f005 fe54 	bl	f7ac <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    9b04:	4b6d      	ldr	r3, [pc, #436]	; (9cbc <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    9b06:	6818      	ldr	r0, [r3, #0]
    9b08:	f001 ff74 	bl	b9f4 <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    9b0c:	486c      	ldr	r0, [pc, #432]	; (9cc0 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    9b0e:	f001 fac9 	bl	b0a4 <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    9b12:	4b6c      	ldr	r3, [pc, #432]	; (9cc4 <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    9b14:	6818      	ldr	r0, [r3, #0]
    9b16:	f003 ff61 	bl	d9dc <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    9b1a:	4b6b      	ldr	r3, [pc, #428]	; (9cc8 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    9b1c:	6818      	ldr	r0, [r3, #0]
    9b1e:	f006 f963 	bl	fde8 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    9b22:	4b6a      	ldr	r3, [pc, #424]	; (9ccc <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    9b24:	6818      	ldr	r0, [r3, #0]
    9b26:	f7fd f9ef 	bl	6f08 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    9b2a:	4869      	ldr	r0, [pc, #420]	; (9cd0 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    9b2c:	f002 fdbc 	bl	c6a8 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9b30:	4a68      	ldr	r2, [pc, #416]	; (9cd4 <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    9b32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    9b36:	f36f 1386 	bfc	r3, #6, #1
    9b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    9b3e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9b42:	f3c1 1180 	ubfx	r1, r1, #6, #1
    9b46:	2900      	cmp	r1, #0
    9b48:	d1f9      	bne.n	9b3e <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    9b4a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    9b4e:	4c62      	ldr	r4, [pc, #392]	; (9cd8 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    9b50:	4f5b      	ldr	r7, [pc, #364]	; (9cc0 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9b52:	4b62      	ldr	r3, [pc, #392]	; (9cdc <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    9b54:	f8df c190 	ldr.w	ip, [pc, #400]	; 9ce8 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9b58:	f361 0003 	bfi	r0, r1, #0, #4
    9b5c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    9b60:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9b64:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9b68:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    9b6c:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    9b6e:	6961      	ldr	r1, [r4, #20]
    9b70:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    9b74:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    9b78:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    9b7c:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9b7e:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9b80:	f8c3 e000 	str.w	lr, [r3]
    9b84:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    9b88:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    9b8c:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    9b90:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    9b94:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    9b98:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    9b9c:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9ba0:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    9ba4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9ba8:	f8c3 9000 	str.w	r9, [r3]
    9bac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9bb0:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bb4:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    9bb8:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9bba:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bbe:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9bc2:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bc6:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9bca:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bce:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9bd2:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bd6:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    9bda:	6019      	str	r1, [r3, #0]
    9bdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9be0:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9be4:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9be6:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bea:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    9bee:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9bf0:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bf4:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9bf8:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bfc:	6019      	str	r1, [r3, #0]
    9bfe:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c02:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c06:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    9c0a:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c0c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c10:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    9c12:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c16:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c1a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    9c1e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    9c22:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c26:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c2a:	f44f 7880 	mov.w	r8, #256	; 0x100
    9c2e:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c30:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    9c34:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c36:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c3a:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c3e:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c42:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c44:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c48:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c4c:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c4e:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c52:	f8c3 800c 	str.w	r8, [r3, #12]
    9c56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9c5a:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c5e:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    9c62:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    9c66:	f000 fb7f 	bl	a368 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    9c6a:	b100      	cbz	r0, 9c6e <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    9c6c:	e7fe      	b.n	9c6c <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c6e:	4b1c      	ldr	r3, [pc, #112]	; (9ce0 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    9c70:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    9c72:	4621      	mov	r1, r4
    9c74:	4628      	mov	r0, r5
    9c76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    9c7a:	f008 fb19 	bl	122b0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    9c7e:	f642 043b 	movw	r4, #10299	; 0x283b
    9c82:	f000 fb9d 	bl	a3c0 <Microseconds>
    9c86:	42a0      	cmp	r0, r4
    9c88:	d9fb      	bls.n	9c82 <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    9c8a:	4b16      	ldr	r3, [pc, #88]	; (9ce4 <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    9c8c:	6818      	ldr	r0, [r3, #0]
    9c8e:	f000 fcdd 	bl	a64c <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    9c92:	2301      	movs	r3, #1
    9c94:	7033      	strb	r3, [r6, #0]
    9c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c9a:	bf00      	nop
    9c9c:	e000edf0 	.word	0xe000edf0
    9ca0:	e0001000 	.word	0xe0001000
    9ca4:	40001800 	.word	0x40001800
    9ca8:	20001f18 	.word	0x20001f18
    9cac:	00023a0c 	.word	0x00023a0c
    9cb0:	0001d4c0 	.word	0x0001d4c0
    9cb4:	41008000 	.word	0x41008000
    9cb8:	20001f08 	.word	0x20001f08
    9cbc:	20001bfc 	.word	0x20001bfc
    9cc0:	200019d0 	.word	0x200019d0
    9cc4:	20001dfc 	.word	0x20001dfc
    9cc8:	20001efc 	.word	0x20001efc
    9ccc:	20000ad0 	.word	0x20000ad0
    9cd0:	20001ae8 	.word	0x20001ae8
    9cd4:	40001c00 	.word	0x40001c00
    9cd8:	40000800 	.word	0x40000800
    9cdc:	e000e100 	.word	0xe000e100
    9ce0:	e000ed00 	.word	0xe000ed00
    9ce4:	20001bf0 	.word	0x20001bf0
    9ce8:	20001be4 	.word	0x20001be4

00009cec <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    9cec:	b672      	cpsid	i
    9cee:	4a09      	ldr	r2, [pc, #36]	; (9d14 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    9cf0:	4b09      	ldr	r3, [pc, #36]	; (9d18 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    9cf2:	2901      	cmp	r1, #1
    9cf4:	bf18      	it	ne
    9cf6:	2300      	movne	r3, #0
    9cf8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    9cfa:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9cfe:	4907      	ldr	r1, [pc, #28]	; (9d1c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    9d00:	4b07      	ldr	r3, [pc, #28]	; (9d20 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    9d02:	68ca      	ldr	r2, [r1, #12]
    9d04:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9d08:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    9d0a:	60cb      	str	r3, [r1, #12]
    9d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    9d10:	bf00      	nop
    9d12:	e7fd      	b.n	9d10 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    9d14:	2002fffc 	.word	0x2002fffc
    9d18:	f01669ef 	.word	0xf01669ef
    9d1c:	e000ed00 	.word	0xe000ed00
    9d20:	05fa0004 	.word	0x05fa0004

00009d24 <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    9d24:	4b01      	ldr	r3, [pc, #4]	; (9d2c <GMAC_Handler+0x8>)
    9d26:	6818      	ldr	r0, [r3, #0]
    9d28:	f001 b908 	b.w	af3c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    9d2c:	20001bf0 	.word	0x20001bf0

00009d30 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    9d30:	4801      	ldr	r0, [pc, #4]	; (9d38 <SERCOM0_0_Handler+0x8>)
    9d32:	f007 bf53 	b.w	11bdc <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9d36:	bf00      	nop
    9d38:	200015e8 	.word	0x200015e8

00009d3c <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    9d3c:	4801      	ldr	r0, [pc, #4]	; (9d44 <SERCOM0_2_Handler+0x8>)
    9d3e:	f007 bf75 	b.w	11c2c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9d42:	bf00      	nop
    9d44:	200015e8 	.word	0x200015e8

00009d48 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    9d48:	4801      	ldr	r0, [pc, #4]	; (9d50 <SERCOM0_3_Handler+0x8>)
    9d4a:	f007 bfab 	b.w	11ca4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9d4e:	bf00      	nop
    9d50:	200015e8 	.word	0x200015e8

00009d54 <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    9d54:	4801      	ldr	r0, [pc, #4]	; (9d5c <SERCOM2_0_Handler+0x8>)
    9d56:	f007 bf41 	b.w	11bdc <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9d5a:	bf00      	nop
    9d5c:	20001740 	.word	0x20001740

00009d60 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    9d60:	4801      	ldr	r0, [pc, #4]	; (9d68 <SERCOM2_2_Handler+0x8>)
    9d62:	f007 bf63 	b.w	11c2c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9d66:	bf00      	nop
    9d68:	20001740 	.word	0x20001740

00009d6c <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    9d6c:	4801      	ldr	r0, [pc, #4]	; (9d74 <SERCOM2_3_Handler+0x8>)
    9d6e:	f007 bf99 	b.w	11ca4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9d72:	bf00      	nop
    9d74:	20001740 	.word	0x20001740

00009d78 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    9d78:	4801      	ldr	r0, [pc, #4]	; (9d80 <SERCOM7_0_Handler+0x8>)
    9d7a:	f007 bf2f 	b.w	11bdc <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9d7e:	bf00      	nop
    9d80:	20001490 	.word	0x20001490

00009d84 <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    9d84:	4801      	ldr	r0, [pc, #4]	; (9d8c <SERCOM7_2_Handler+0x8>)
    9d86:	f007 bf51 	b.w	11c2c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9d8a:	bf00      	nop
    9d8c:	20001490 	.word	0x20001490

00009d90 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    9d90:	4801      	ldr	r0, [pc, #4]	; (9d98 <SERCOM7_3_Handler+0x8>)
    9d92:	f007 bf87 	b.w	11ca4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9d96:	bf00      	nop
    9d98:	20001490 	.word	0x20001490

00009d9c <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    9d9c:	4b02      	ldr	r3, [pc, #8]	; (9da8 <EIC_0_Handler+0xc>)
    9d9e:	2100      	movs	r1, #0
    9da0:	6818      	ldr	r0, [r3, #0]
    9da2:	f006 bd2d 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9da6:	bf00      	nop
    9da8:	20001f08 	.word	0x20001f08

00009dac <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    9dac:	4b02      	ldr	r3, [pc, #8]	; (9db8 <EIC_1_Handler+0xc>)
    9dae:	2101      	movs	r1, #1
    9db0:	6818      	ldr	r0, [r3, #0]
    9db2:	f006 bd25 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9db6:	bf00      	nop
    9db8:	20001f08 	.word	0x20001f08

00009dbc <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    9dbc:	4b02      	ldr	r3, [pc, #8]	; (9dc8 <EIC_2_Handler+0xc>)
    9dbe:	2102      	movs	r1, #2
    9dc0:	6818      	ldr	r0, [r3, #0]
    9dc2:	f006 bd1d 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9dc6:	bf00      	nop
    9dc8:	20001f08 	.word	0x20001f08

00009dcc <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    9dcc:	4b02      	ldr	r3, [pc, #8]	; (9dd8 <EIC_3_Handler+0xc>)
    9dce:	2103      	movs	r1, #3
    9dd0:	6818      	ldr	r0, [r3, #0]
    9dd2:	f006 bd15 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9dd6:	bf00      	nop
    9dd8:	20001f08 	.word	0x20001f08

00009ddc <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    9ddc:	4b02      	ldr	r3, [pc, #8]	; (9de8 <EIC_4_Handler+0xc>)
    9dde:	2104      	movs	r1, #4
    9de0:	6818      	ldr	r0, [r3, #0]
    9de2:	f006 bd0d 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9de6:	bf00      	nop
    9de8:	20001f08 	.word	0x20001f08

00009dec <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    9dec:	4b02      	ldr	r3, [pc, #8]	; (9df8 <EIC_5_Handler+0xc>)
    9dee:	2105      	movs	r1, #5
    9df0:	6818      	ldr	r0, [r3, #0]
    9df2:	f006 bd05 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9df6:	bf00      	nop
    9df8:	20001f08 	.word	0x20001f08

00009dfc <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    9dfc:	4b02      	ldr	r3, [pc, #8]	; (9e08 <EIC_6_Handler+0xc>)
    9dfe:	2106      	movs	r1, #6
    9e00:	6818      	ldr	r0, [r3, #0]
    9e02:	f006 bcfd 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e06:	bf00      	nop
    9e08:	20001f08 	.word	0x20001f08

00009e0c <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    9e0c:	4b02      	ldr	r3, [pc, #8]	; (9e18 <EIC_7_Handler+0xc>)
    9e0e:	2107      	movs	r1, #7
    9e10:	6818      	ldr	r0, [r3, #0]
    9e12:	f006 bcf5 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e16:	bf00      	nop
    9e18:	20001f08 	.word	0x20001f08

00009e1c <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    9e1c:	4b02      	ldr	r3, [pc, #8]	; (9e28 <EIC_8_Handler+0xc>)
    9e1e:	2108      	movs	r1, #8
    9e20:	6818      	ldr	r0, [r3, #0]
    9e22:	f006 bced 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e26:	bf00      	nop
    9e28:	20001f08 	.word	0x20001f08

00009e2c <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    9e2c:	4b02      	ldr	r3, [pc, #8]	; (9e38 <EIC_9_Handler+0xc>)
    9e2e:	2109      	movs	r1, #9
    9e30:	6818      	ldr	r0, [r3, #0]
    9e32:	f006 bce5 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e36:	bf00      	nop
    9e38:	20001f08 	.word	0x20001f08

00009e3c <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    9e3c:	4b02      	ldr	r3, [pc, #8]	; (9e48 <EIC_10_Handler+0xc>)
    9e3e:	210a      	movs	r1, #10
    9e40:	6818      	ldr	r0, [r3, #0]
    9e42:	f006 bcdd 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e46:	bf00      	nop
    9e48:	20001f08 	.word	0x20001f08

00009e4c <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    9e4c:	4b02      	ldr	r3, [pc, #8]	; (9e58 <EIC_11_Handler+0xc>)
    9e4e:	210b      	movs	r1, #11
    9e50:	6818      	ldr	r0, [r3, #0]
    9e52:	f006 bcd5 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e56:	bf00      	nop
    9e58:	20001f08 	.word	0x20001f08

00009e5c <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    9e5c:	4b01      	ldr	r3, [pc, #4]	; (9e64 <EIC_12_Handler+0x8>)
    9e5e:	6818      	ldr	r0, [r3, #0]
    9e60:	f000 beb0 	b.w	abc4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    9e64:	20001bf0 	.word	0x20001bf0

00009e68 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    9e68:	4b02      	ldr	r3, [pc, #8]	; (9e74 <EIC_13_Handler+0xc>)
    9e6a:	210d      	movs	r1, #13
    9e6c:	6818      	ldr	r0, [r3, #0]
    9e6e:	f006 bcc7 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e72:	bf00      	nop
    9e74:	20001f08 	.word	0x20001f08

00009e78 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    9e78:	4b02      	ldr	r3, [pc, #8]	; (9e84 <EIC_14_Handler+0xc>)
    9e7a:	210e      	movs	r1, #14
    9e7c:	6818      	ldr	r0, [r3, #0]
    9e7e:	f006 bcbf 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e82:	bf00      	nop
    9e84:	20001f08 	.word	0x20001f08

00009e88 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    9e88:	4b02      	ldr	r3, [pc, #8]	; (9e94 <EIC_15_Handler+0xc>)
    9e8a:	210f      	movs	r1, #15
    9e8c:	6818      	ldr	r0, [r3, #0]
    9e8e:	f006 bcb7 	b.w	10800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9e92:	bf00      	nop
    9e94:	20001f08 	.word	0x20001f08

00009e98 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    9e98:	4b02      	ldr	r3, [pc, #8]	; (9ea4 <TCC3_0_Handler+0xc>)
    9e9a:	4a03      	ldr	r2, [pc, #12]	; (9ea8 <TCC3_0_Handler+0x10>)
    9e9c:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    9e9e:	4803      	ldr	r0, [pc, #12]	; (9eac <TCC3_0_Handler+0x14>)
    9ea0:	f005 ba0e 	b.w	f2c0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    9ea4:	42001000 	.word	0x42001000
    9ea8:	003ffc0f 	.word	0x003ffc0f
    9eac:	200013f0 	.word	0x200013f0

00009eb0 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    9eb0:	4b02      	ldr	r3, [pc, #8]	; (9ebc <TCC4_0_Handler+0xc>)
    9eb2:	4a03      	ldr	r2, [pc, #12]	; (9ec0 <TCC4_0_Handler+0x10>)
    9eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    9eb6:	4803      	ldr	r0, [pc, #12]	; (9ec4 <TCC4_0_Handler+0x14>)
    9eb8:	f005 ba02 	b.w	f2c0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    9ebc:	43001000 	.word	0x43001000
    9ec0:	003ffc0f 	.word	0x003ffc0f
    9ec4:	2000136c 	.word	0x2000136c

00009ec8 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    9ec8:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    9eca:	4b0d      	ldr	r3, [pc, #52]	; (9f00 <SysTick_Handler+0x38>)
    9ecc:	781b      	ldrb	r3, [r3, #0]
    9ece:	b103      	cbz	r3, 9ed2 <SysTick_Handler+0xa>
    9ed0:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    9ed2:	4b0c      	ldr	r3, [pc, #48]	; (9f04 <SysTick_Handler+0x3c>)
    9ed4:	781b      	ldrb	r3, [r3, #0]
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	d0fa      	beq.n	9ed0 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    9eda:	4b0b      	ldr	r3, [pc, #44]	; (9f08 <SysTick_Handler+0x40>)
    9edc:	6818      	ldr	r0, [r3, #0]
    9ede:	f006 fad9 	bl	10494 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    9ee2:	480a      	ldr	r0, [pc, #40]	; (9f0c <SysTick_Handler+0x44>)
    9ee4:	f7fb fd2a 	bl	593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9ee8:	4809      	ldr	r0, [pc, #36]	; (9f10 <SysTick_Handler+0x48>)
    9eea:	f7fb fd27 	bl	593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9eee:	4809      	ldr	r0, [pc, #36]	; (9f14 <SysTick_Handler+0x4c>)
    9ef0:	f7fb fd24 	bl	593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9ef4:	4808      	ldr	r0, [pc, #32]	; (9f18 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    9ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    9efa:	f7fb bd1f 	b.w	593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9efe:	bf00      	nop
    9f00:	20001080 	.word	0x20001080
    9f04:	200019cc 	.word	0x200019cc
    9f08:	20001efc 	.word	0x20001efc
    9f0c:	20000b60 	.word	0x20000b60
    9f10:	20000ca8 	.word	0x20000ca8
    9f14:	20000df0 	.word	0x20000df0
    9f18:	20000f38 	.word	0x20000f38

00009f1c <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    9f1c:	4a30      	ldr	r2, [pc, #192]	; (9fe0 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    9f1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    9f22:	4b30      	ldr	r3, [pc, #192]	; (9fe4 <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    9f24:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    9f26:	4a30      	ldr	r2, [pc, #192]	; (9fe8 <TCC0_0_Handler+0xcc>)
    9f28:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    9f2a:	4630      	mov	r0, r6
    9f2c:	f000 f9ca 	bl	a2c4 <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    9f30:	4b2e      	ldr	r3, [pc, #184]	; (9fec <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    9f32:	f8df 80f4 	ldr.w	r8, [pc, #244]	; a028 <TCC0_0_Handler+0x10c>
    9f36:	f8d3 9000 	ldr.w	r9, [r3]
    9f3a:	4648      	mov	r0, r9
    9f3c:	f005 ffc8 	bl	fed0 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    9f40:	4b2b      	ldr	r3, [pc, #172]	; (9ff0 <TCC0_0_Handler+0xd4>)
    9f42:	6818      	ldr	r0, [r3, #0]
    9f44:	f003 ff04 	bl	dd50 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    9f48:	4b2a      	ldr	r3, [pc, #168]	; (9ff4 <TCC0_0_Handler+0xd8>)
    9f4a:	6818      	ldr	r0, [r3, #0]
    9f4c:	f008 fa54 	bl	123f8 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    9f50:	4b29      	ldr	r3, [pc, #164]	; (9ff8 <TCC0_0_Handler+0xdc>)
    9f52:	6818      	ldr	r0, [r3, #0]
    9f54:	f7fd fe22 	bl	7b9c <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    9f58:	4b28      	ldr	r3, [pc, #160]	; (9ffc <TCC0_0_Handler+0xe0>)
    9f5a:	681f      	ldr	r7, [r3, #0]
    9f5c:	4638      	mov	r0, r7
    9f5e:	f006 fc7d 	bl	1085c <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    9f62:	f898 3000 	ldrb.w	r3, [r8]
    9f66:	b15b      	cbz	r3, 9f80 <TCC0_0_Handler+0x64>
    9f68:	4c25      	ldr	r4, [pc, #148]	; (a000 <TCC0_0_Handler+0xe4>)
    9f6a:	4826      	ldr	r0, [pc, #152]	; (a004 <TCC0_0_Handler+0xe8>)
    9f6c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    9f70:	e001      	b.n	9f76 <TCC0_0_Handler+0x5a>
    9f72:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    9f76:	6803      	ldr	r3, [r0, #0]
    9f78:	6a1b      	ldr	r3, [r3, #32]
    9f7a:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9f7c:	42ac      	cmp	r4, r5
    9f7e:	d1f8      	bne.n	9f72 <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    9f80:	4638      	mov	r0, r7
    9f82:	f006 fc7f 	bl	10884 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    9f86:	4820      	ldr	r0, [pc, #128]	; (a008 <TCC0_0_Handler+0xec>)
    9f88:	f002 fbbc 	bl	c704 <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    9f8c:	481f      	ldr	r0, [pc, #124]	; (a00c <TCC0_0_Handler+0xf0>)
    9f8e:	f001 f95b 	bl	b248 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    9f92:	4630      	mov	r0, r6
    9f94:	f000 f9ac 	bl	a2f0 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    9f98:	4a1d      	ldr	r2, [pc, #116]	; (a010 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    9f9a:	491e      	ldr	r1, [pc, #120]	; (a014 <TCC0_0_Handler+0xf8>)
    tickCnt++;
    9f9c:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    9f9e:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    9fa0:	3301      	adds	r3, #1
    9fa2:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    9fa4:	b111      	cbz	r1, 9fac <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    9fa6:	f898 3000 	ldrb.w	r3, [r8]
    9faa:	b923      	cbnz	r3, 9fb6 <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    9fac:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    9fae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    9fb2:	f000 b98d 	b.w	a2d0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    9fb6:	4648      	mov	r0, r9
    9fb8:	f006 fa6c 	bl	10494 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    9fbc:	4816      	ldr	r0, [pc, #88]	; (a018 <TCC0_0_Handler+0xfc>)
    9fbe:	f7fb fcbd 	bl	593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9fc2:	4816      	ldr	r0, [pc, #88]	; (a01c <TCC0_0_Handler+0x100>)
    9fc4:	f7fb fcba 	bl	593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9fc8:	4815      	ldr	r0, [pc, #84]	; (a020 <TCC0_0_Handler+0x104>)
    9fca:	f7fb fcb7 	bl	593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9fce:	4815      	ldr	r0, [pc, #84]	; (a024 <TCC0_0_Handler+0x108>)
    9fd0:	f7fb fcb4 	bl	593c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    9fd4:	4630      	mov	r0, r6
}
    9fd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    9fda:	f000 b979 	b.w	a2d0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    9fde:	bf00      	nop
    9fe0:	20001be4 	.word	0x20001be4
    9fe4:	41016000 	.word	0x41016000
    9fe8:	003ffc0f 	.word	0x003ffc0f
    9fec:	20001efc 	.word	0x20001efc
    9ff0:	20001dfc 	.word	0x20001dfc
    9ff4:	20001f18 	.word	0x20001f18
    9ff8:	20000ad0 	.word	0x20000ad0
    9ffc:	20001f08 	.word	0x20001f08
    a000:	00023a10 	.word	0x00023a10
    a004:	200011e0 	.word	0x200011e0
    a008:	20001ae8 	.word	0x20001ae8
    a00c:	200019d0 	.word	0x200019d0
    a010:	20001be0 	.word	0x20001be0
    a014:	20001080 	.word	0x20001080
    a018:	20000b60 	.word	0x20000b60
    a01c:	20000ca8 	.word	0x20000ca8
    a020:	20000df0 	.word	0x20000df0
    a024:	20000f38 	.word	0x20000f38
    a028:	200019cc 	.word	0x200019cc

0000a02c <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    a02c:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    a02e:	4813      	ldr	r0, [pc, #76]	; (a07c <Reset_Handler+0x50>)
    a030:	4b13      	ldr	r3, [pc, #76]	; (a080 <Reset_Handler+0x54>)
    a032:	4298      	cmp	r0, r3
    a034:	d00b      	beq.n	a04e <Reset_Handler+0x22>
    a036:	4913      	ldr	r1, [pc, #76]	; (a084 <Reset_Handler+0x58>)
    a038:	4281      	cmp	r1, r0
    a03a:	d008      	beq.n	a04e <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    a03c:	4298      	cmp	r0, r3
    a03e:	d206      	bcs.n	a04e <Reset_Handler+0x22>
            *pDest = *pSrc;
    a040:	43c2      	mvns	r2, r0
    a042:	441a      	add	r2, r3
    a044:	f022 0203 	bic.w	r2, r2, #3
    a048:	3204      	adds	r2, #4
    a04a:	f014 fef9 	bl	1ee40 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    a04e:	480e      	ldr	r0, [pc, #56]	; (a088 <Reset_Handler+0x5c>)
    a050:	4b0e      	ldr	r3, [pc, #56]	; (a08c <Reset_Handler+0x60>)
    a052:	4298      	cmp	r0, r3
    a054:	d008      	beq.n	a068 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    a056:	d207      	bcs.n	a068 <Reset_Handler+0x3c>
            *pDest = 0ul;
    a058:	43c2      	mvns	r2, r0
    a05a:	441a      	add	r2, r3
    a05c:	f022 0203 	bic.w	r2, r2, #3
    a060:	3204      	adds	r2, #4
    a062:	2100      	movs	r1, #0
    a064:	f014 ffea 	bl	1f03c <memset>
        }
    }

    SystemInit();
    a068:	f002 f97a 	bl	c360 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    a06c:	f014 fb46 	bl	1e6fc <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    a070:	4807      	ldr	r0, [pc, #28]	; (a090 <Reset_Handler+0x64>)
    a072:	f7ff fcfb 	bl	9a6c <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    a076:	f7fa fb1b 	bl	46b0 <main>
    a07a:	e7fe      	b.n	a07a <Reset_Handler+0x4e>
    a07c:	20000000 	.word	0x20000000
    a080:	20000ab0 	.word	0x20000ab0
    a084:	00025d54 	.word	0x00025d54
    a088:	20000ab0 	.word	0x20000ab0
    a08c:	200023a0 	.word	0x200023a0
    a090:	200019cc 	.word	0x200019cc

0000a094 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    a098:	4852      	ldr	r0, [pc, #328]	; (a1e4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    a09a:	4d53      	ldr	r5, [pc, #332]	; (a1e8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    a09c:	4c53      	ldr	r4, [pc, #332]	; (a1ec <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    a09e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; a25c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    a0a2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; a260 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    a0a6:	4f52      	ldr	r7, [pc, #328]	; (a1f0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    a0a8:	f002 fad4 	bl	c654 <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    a0ac:	4b51      	ldr	r3, [pc, #324]	; (a1f4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    a0ae:	4a52      	ldr	r2, [pc, #328]	; (a1f8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    a0b0:	4852      	ldr	r0, [pc, #328]	; (a1fc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    a0b2:	601a      	str	r2, [r3, #0]
    a0b4:	2600      	movs	r6, #0
    a0b6:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    a0ba:	f000 ff61 	bl	af80 <_ZN9ClearCore13ShiftRegisterC1Ev>
    a0be:	4b50      	ldr	r3, [pc, #320]	; (a200 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    a0c0:	4a50      	ldr	r2, [pc, #320]	; (a204 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    a0c2:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    a0c6:	4628      	mov	r0, r5
    a0c8:	601a      	str	r2, [r3, #0]
    a0ca:	f004 ffb3 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a0ce:	4b4e      	ldr	r3, [pc, #312]	; (a208 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    a0d0:	602b      	str	r3, [r5, #0]
    a0d2:	4620      	mov	r0, r4
    a0d4:	f004 ffae 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    a0d8:	4b4c      	ldr	r3, [pc, #304]	; (a20c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    a0da:	6023      	str	r3, [r4, #0]
    a0dc:	4648      	mov	r0, r9
    a0de:	f004 ffa9 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    a0e2:	4c4b      	ldr	r4, [pc, #300]	; (a210 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    a0e4:	4d4b      	ldr	r5, [pc, #300]	; (a214 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    a0e6:	f8c9 4000 	str.w	r4, [r9]
    a0ea:	4640      	mov	r0, r8
    a0ec:	f004 ffa2 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a0f0:	f8df 9170 	ldr.w	r9, [pc, #368]	; a264 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    a0f4:	f8c8 4000 	str.w	r4, [r8]
    a0f8:	4638      	mov	r0, r7
    a0fa:	f004 ff9b 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a0fe:	f8df 8168 	ldr.w	r8, [pc, #360]	; a268 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    a102:	603c      	str	r4, [r7, #0]
    a104:	4628      	mov	r0, r5
    a106:	f004 ff95 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    a10a:	4c43      	ldr	r4, [pc, #268]	; (a218 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    a10c:	4f43      	ldr	r7, [pc, #268]	; (a21c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    a10e:	602c      	str	r4, [r5, #0]
    a110:	4648      	mov	r0, r9
    a112:	f004 ff8f 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a116:	4d42      	ldr	r5, [pc, #264]	; (a220 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    a118:	f8c9 4000 	str.w	r4, [r9]
    a11c:	4640      	mov	r0, r8
    a11e:	f004 ff89 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a122:	4c40      	ldr	r4, [pc, #256]	; (a224 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    a124:	f8df 9144 	ldr.w	r9, [pc, #324]	; a26c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    a128:	f8c8 4000 	str.w	r4, [r8]
    a12c:	4638      	mov	r0, r7
    a12e:	f004 ff81 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a132:	f8df 813c 	ldr.w	r8, [pc, #316]	; a270 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    a136:	603c      	str	r4, [r7, #0]
    a138:	4628      	mov	r0, r5
    a13a:	f004 ff7b 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a13e:	4f3a      	ldr	r7, [pc, #232]	; (a228 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    a140:	602c      	str	r4, [r5, #0]
    a142:	4648      	mov	r0, r9
    a144:	f004 ff76 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    a148:	4c38      	ldr	r4, [pc, #224]	; (a22c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    a14a:	4d39      	ldr	r5, [pc, #228]	; (a230 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    a14c:	f8c9 4000 	str.w	r4, [r9]
    a150:	4640      	mov	r0, r8
    a152:	f004 ff6f 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a156:	4638      	mov	r0, r7
    a158:	f8c8 4000 	str.w	r4, [r8]
    a15c:	f004 ff6a 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a160:	4628      	mov	r0, r5
    a162:	603c      	str	r4, [r7, #0]
    a164:	f004 ff66 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    a168:	4832      	ldr	r0, [pc, #200]	; (a234 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    a16a:	602c      	str	r4, [r5, #0]
    a16c:	f7fd ff1e 	bl	7fac <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    a170:	4831      	ldr	r0, [pc, #196]	; (a238 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    a172:	f8df 8100 	ldr.w	r8, [pc, #256]	; a274 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    a176:	4d31      	ldr	r5, [pc, #196]	; (a23c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    a178:	4c31      	ldr	r4, [pc, #196]	; (a240 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    a17a:	4f32      	ldr	r7, [pc, #200]	; (a244 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    a17c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; a278 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    a180:	f7fd ff14 	bl	7fac <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    a184:	4830      	ldr	r0, [pc, #192]	; (a248 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    a186:	f7fd ff11 	bl	7fac <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    a18a:	4830      	ldr	r0, [pc, #192]	; (a24c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    a18c:	f7fd ff0e 	bl	7fac <_ZN9ClearCore11MotorDriverC1Ev>
    a190:	4640      	mov	r0, r8
    a192:	4b2f      	ldr	r3, [pc, #188]	; (a250 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    a194:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    a198:	f004 ff4c 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a19c:	4b2d      	ldr	r3, [pc, #180]	; (a254 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    a19e:	f8c8 3000 	str.w	r3, [r8]
    a1a2:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    a1a6:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    a1a8:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    a1ac:	f8c5 9000 	str.w	r9, [r5]
    a1b0:	f8c8 3004 	str.w	r3, [r8, #4]
    a1b4:	f004 ff3e 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a1b8:	f107 0874 	add.w	r8, r7, #116	; 0x74
    a1bc:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    a1c0:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    a1c4:	f8c4 9000 	str.w	r9, [r4]
    a1c8:	602f      	str	r7, [r5, #0]
    a1ca:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    a1ce:	f004 ff31 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
    a1d2:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    a1d6:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    a1d8:	481f      	ldr	r0, [pc, #124]	; (a258 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    a1da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    a1de:	f7fd bf07 	b.w	7ff0 <_ZN9ClearCore10SysManagerC1Ev>
    a1e2:	bf00      	nop
    a1e4:	20001ae8 	.word	0x20001ae8
    a1e8:	20001474 	.word	0x20001474
    a1ec:	200011e0 	.word	0x200011e0
    a1f0:	2000130c 	.word	0x2000130c
    a1f4:	20001884 	.word	0x20001884
    a1f8:	00023954 	.word	0x00023954
    a1fc:	200019d0 	.word	0x200019d0
    a200:	20001740 	.word	0x20001740
    a204:	000239a4 	.word	0x000239a4
    a208:	00024154 	.word	0x00024154
    a20c:	00023ebc 	.word	0x00023ebc
    a210:	00023f1c 	.word	0x00023f1c
    a214:	2000136c 	.word	0x2000136c
    a218:	00023fcc 	.word	0x00023fcc
    a21c:	20001180 	.word	0x20001180
    a220:	200011b0 	.word	0x200011b0
    a224:	00023f9c 	.word	0x00023f9c
    a228:	200010c8 	.word	0x200010c8
    a22c:	00023eec 	.word	0x00023eec
    a230:	2000110c 	.word	0x2000110c
    a234:	20000b60 	.word	0x20000b60
    a238:	20000ca8 	.word	0x20000ca8
    a23c:	20001490 	.word	0x20001490
    a240:	200015e8 	.word	0x200015e8
    a244:	000240b0 	.word	0x000240b0
    a248:	20000df0 	.word	0x20000df0
    a24c:	20000f38 	.word	0x20000f38
    a250:	00023850 	.word	0x00023850
    a254:	000238a0 	.word	0x000238a0
    a258:	200019cc 	.word	0x200019cc
    a25c:	2000124c 	.word	0x2000124c
    a260:	200012ac 	.word	0x200012ac
    a264:	200013f0 	.word	0x200013f0
    a268:	20001150 	.word	0x20001150
    a26c:	20000b18 	.word	0x20000b18
    a270:	20001084 	.word	0x20001084
    a274:	20001480 	.word	0x20001480
    a278:	00024040 	.word	0x00024040

0000a27c <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    a27c:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    a27e:	4d0f      	ldr	r5, [pc, #60]	; (a2bc <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    a280:	682c      	ldr	r4, [r5, #0]
    a282:	f014 0401 	ands.w	r4, r4, #1
    a286:	d002      	beq.n	a28e <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    a288:	4b0d      	ldr	r3, [pc, #52]	; (a2c0 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    a28a:	6818      	ldr	r0, [r3, #0]
    a28c:	bd70      	pop	{r4, r5, r6, pc}
    a28e:	2030      	movs	r0, #48	; 0x30
    a290:	f009 fe36 	bl	13f00 <_Znwj>
    a294:	4a0a      	ldr	r2, [pc, #40]	; (a2c0 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    a296:	6004      	str	r4, [r0, #0]
    a298:	2105      	movs	r1, #5
    a29a:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    a29e:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    a2a0:	7501      	strb	r1, [r0, #20]
    a2a2:	6084      	str	r4, [r0, #8]
    a2a4:	60c4      	str	r4, [r0, #12]
    a2a6:	6104      	str	r4, [r0, #16]
    a2a8:	6184      	str	r4, [r0, #24]
    a2aa:	61c4      	str	r4, [r0, #28]
    a2ac:	6204      	str	r4, [r0, #32]
    a2ae:	6244      	str	r4, [r0, #36]	; 0x24
    a2b0:	6284      	str	r4, [r0, #40]	; 0x28
    a2b2:	62c4      	str	r4, [r0, #44]	; 0x2c
    a2b4:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    a2b6:	6010      	str	r0, [r2, #0]
    a2b8:	602b      	str	r3, [r5, #0]
    return *instance;
}
    a2ba:	bd70      	pop	{r4, r5, r6, pc}
    a2bc:	20001bdc 	.word	0x20001bdc
    a2c0:	20001be8 	.word	0x20001be8

0000a2c4 <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    a2c4:	4b01      	ldr	r3, [pc, #4]	; (a2cc <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    a2c6:	685b      	ldr	r3, [r3, #4]
    a2c8:	6003      	str	r3, [r0, #0]
    a2ca:	4770      	bx	lr
    a2cc:	e0001000 	.word	0xe0001000

0000a2d0 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    a2d0:	4b06      	ldr	r3, [pc, #24]	; (a2ec <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    a2d2:	6801      	ldr	r1, [r0, #0]
    a2d4:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    a2d6:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    a2d8:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    a2da:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    a2dc:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    a2de:	bf38      	it	cc
    a2e0:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    a2e2:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    a2e4:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    a2e6:	bf88      	it	hi
    a2e8:	6083      	strhi	r3, [r0, #8]
    a2ea:	4770      	bx	lr
    a2ec:	e0001000 	.word	0xe0001000

0000a2f0 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a2f0:	4a1c      	ldr	r2, [pc, #112]	; (a364 <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    a2f2:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a2f4:	68d3      	ldr	r3, [r2, #12]
    a2f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    a2fa:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    a2fc:	7d03      	ldrb	r3, [r0, #20]
    a2fe:	3b01      	subs	r3, #1
    a300:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    a302:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    a304:	7503      	strb	r3, [r0, #20]
    a306:	b923      	cbnz	r3, a312 <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    a308:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    a30a:	2205      	movs	r2, #5
        m_msTickCnt++;
    a30c:	3301      	adds	r3, #1
    a30e:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    a310:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    a312:	6825      	ldr	r5, [r4, #0]
    a314:	69a3      	ldr	r3, [r4, #24]
    a316:	406b      	eors	r3, r5
    a318:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    a31c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a320:	d001      	beq.n	a326 <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    a322:	61a5      	str	r5, [r4, #24]
    a324:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    a326:	2d00      	cmp	r5, #0
    a328:	db08      	blt.n	a33c <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    a32a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    a32c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    a32e:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    a330:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    a332:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    a336:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    a338:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    a33a:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    a33c:	69e1      	ldr	r1, [r4, #28]
    a33e:	3101      	adds	r1, #1
    a340:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    a342:	2278      	movs	r2, #120	; 0x78
    a344:	2300      	movs	r3, #0
    a346:	2000      	movs	r0, #0
    a348:	f012 fe38 	bl	1cfbc <__aeabi_uldivmod>
    a34c:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    a34e:	b128      	cbz	r0, a35c <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    a350:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    a354:	00c3      	lsls	r3, r0, #3
    a356:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    a358:	62e3      	str	r3, [r4, #44]	; 0x2c
    a35a:	e7e2      	b.n	a322 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    a35c:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    a35e:	62e0      	str	r0, [r4, #44]	; 0x2c
    a360:	e7df      	b.n	a322 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    a362:	bf00      	nop
    a364:	e000edf0 	.word	0xe000edf0

0000a368 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    a368:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    a36c:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    a36e:	29c7      	cmp	r1, #199	; 0xc7
    a370:	4a0d      	ldr	r2, [pc, #52]	; (a3a8 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    a372:	f103 33ff 	add.w	r3, r3, #4294967295
    a376:	bf8c      	ite	hi
    a378:	2100      	movhi	r1, #0
    a37a:	2101      	movls	r1, #1
    a37c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    a380:	7011      	strb	r1, [r2, #0]
    a382:	d20e      	bcs.n	a3a2 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    a384:	4a09      	ldr	r2, [pc, #36]	; (a3ac <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a386:	480a      	ldr	r0, [pc, #40]	; (a3b0 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    a388:	b410      	push	{r4}
    a38a:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    a38c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    a38e:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a390:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    a394:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    a396:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    a398:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    a39a:	6011      	str	r1, [r2, #0]
}
    a39c:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3a0:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    a3a2:	2001      	movs	r0, #1
    a3a4:	4770      	bx	lr
    a3a6:	bf00      	nop
    a3a8:	20001080 	.word	0x20001080
    a3ac:	e000e010 	.word	0xe000e010
    a3b0:	e000ed00 	.word	0xe000ed00

0000a3b4 <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    a3b4:	4b01      	ldr	r3, [pc, #4]	; (a3bc <Milliseconds+0x8>)
    a3b6:	681b      	ldr	r3, [r3, #0]
    a3b8:	6918      	ldr	r0, [r3, #16]
}
    a3ba:	4770      	bx	lr
    a3bc:	20001be4 	.word	0x20001be4

0000a3c0 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    a3c0:	4b0e      	ldr	r3, [pc, #56]	; (a3fc <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    a3c2:	4a0f      	ldr	r2, [pc, #60]	; (a400 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    a3c4:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    a3c6:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    a3c8:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    a3ca:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    a3cc:	db0a      	blt.n	a3e4 <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    a3ce:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    a3d0:	490c      	ldr	r1, [pc, #48]	; (a404 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    a3d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    a3d4:	4423      	add	r3, r4
    a3d6:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    a3da:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    a3de:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3e2:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    a3e4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    a3e6:	4907      	ldr	r1, [pc, #28]	; (a404 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    a3e8:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    a3ea:	1b1b      	subs	r3, r3, r4
    a3ec:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    a3f0:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    a3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3f8:	4770      	bx	lr
    a3fa:	bf00      	nop
    a3fc:	e0001000 	.word	0xe0001000
    a400:	20001be4 	.word	0x20001be4
    a404:	88888889 	.word	0x88888889

0000a408 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    a408:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    a40a:	4e0d      	ldr	r6, [pc, #52]	; (a440 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    a40c:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    a410:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    a412:	d013      	beq.n	a43c <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    a414:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    a416:	2500      	movs	r5, #0
    a418:	1b1c      	subs	r4, r3, r4
    a41a:	428d      	cmp	r5, r1
    a41c:	bf08      	it	eq
    a41e:	4284      	cmpeq	r4, r0
    a420:	d20c      	bcs.n	a43c <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    a422:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    a424:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    a426:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    a42a:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    a42e:	2500      	movs	r5, #0
    a430:	461c      	mov	r4, r3
    a432:	428d      	cmp	r5, r1
    a434:	bf08      	it	eq
    a436:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    a438:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    a43a:	d3f2      	bcc.n	a422 <Delay_cycles+0x1a>
    }
}
    a43c:	bc70      	pop	{r4, r5, r6}
    a43e:	4770      	bx	lr
    a440:	e0001000 	.word	0xe0001000

0000a444 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    a444:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    a446:	f7ff ff19 	bl	a27c <_ZN9ClearCore9SysTiming8InstanceEv>
    a44a:	4b01      	ldr	r3, [pc, #4]	; (a450 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    a44c:	6018      	str	r0, [r3, #0]
    a44e:	bd08      	pop	{r3, pc}
    a450:	20001be4 	.word	0x20001be4

0000a454 <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    a456:	4e37      	ldr	r6, [pc, #220]	; (a534 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    a458:	6835      	ldr	r5, [r6, #0]
    a45a:	f015 0501 	ands.w	r5, r5, #1
    a45e:	d002      	beq.n	a466 <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    a460:	4b35      	ldr	r3, [pc, #212]	; (a538 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    a462:	6818      	ldr	r0, [r3, #0]
    a464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a466:	f641 10c4 	movw	r0, #6596	; 0x19c4
    a46a:	f009 fd49 	bl	13f00 <_Znwj>
    a46e:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    a470:	2711      	movs	r7, #17
    a472:	2312      	movs	r3, #18
    a474:	6067      	str	r7, [r4, #4]
    a476:	60e3      	str	r3, [r4, #12]
    a478:	2213      	movs	r2, #19
    a47a:	210d      	movs	r1, #13
    a47c:	2714      	movs	r7, #20
    a47e:	230b      	movs	r3, #11
    a480:	6162      	str	r2, [r4, #20]
    a482:	61e1      	str	r1, [r4, #28]
    a484:	6367      	str	r7, [r4, #52]	; 0x34
    a486:	6463      	str	r3, [r4, #68]	; 0x44
    a488:	270c      	movs	r7, #12
    a48a:	2302      	movs	r3, #2
    a48c:	200f      	movs	r0, #15
    a48e:	220e      	movs	r2, #14
    a490:	211c      	movs	r1, #28
    a492:	6323      	str	r3, [r4, #48]	; 0x30
    a494:	63a3      	str	r3, [r4, #56]	; 0x38
    a496:	6423      	str	r3, [r4, #64]	; 0x40
    a498:	6523      	str	r3, [r4, #80]	; 0x50
    a49a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a49c:	64e2      	str	r2, [r4, #76]	; 0x4c
    a49e:	6561      	str	r1, [r4, #84]	; 0x54
    a4a0:	6267      	str	r7, [r4, #36]	; 0x24
    a4a2:	4629      	mov	r1, r5
    a4a4:	63e7      	str	r7, [r4, #60]	; 0x3c
    a4a6:	65a7      	str	r7, [r4, #88]	; 0x58
    a4a8:	6025      	str	r5, [r4, #0]
    a4aa:	60a5      	str	r5, [r4, #8]
    a4ac:	6125      	str	r5, [r4, #16]
    a4ae:	61a5      	str	r5, [r4, #24]
    a4b0:	6225      	str	r5, [r4, #32]
    a4b2:	62a5      	str	r5, [r4, #40]	; 0x28
    a4b4:	64a5      	str	r5, [r4, #72]	; 0x48
    a4b6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    a4ba:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    a4be:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    a4c2:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    a4c6:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    a4ca:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    a4ce:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    a4d2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    a4d6:	f504 7094 	add.w	r0, r4, #296	; 0x128
    a4da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a4de:	f014 fdad 	bl	1f03c <memset>
    a4e2:	4629      	mov	r1, r5
    a4e4:	f604 1028 	addw	r0, r4, #2344	; 0x928
    a4e8:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    a4ec:	f014 fda6 	bl	1f03c <memset>
    a4f0:	f641 176c 	movw	r7, #6508	; 0x196c
    a4f4:	f641 1168 	movw	r1, #6504	; 0x1968
    a4f8:	19e3      	adds	r3, r4, r7
    a4fa:	f641 126a 	movw	r2, #6506	; 0x196a
    a4fe:	20c8      	movs	r0, #200	; 0xc8
    a500:	5260      	strh	r0, [r4, r1]
    a502:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    a506:	2108      	movs	r1, #8
    a508:	54a1      	strb	r1, [r4, r2]
    a50a:	3004      	adds	r0, #4
    a50c:	51e5      	str	r5, [r4, r7]
    a50e:	4629      	mov	r1, r5
    a510:	605d      	str	r5, [r3, #4]
    a512:	609d      	str	r5, [r3, #8]
    a514:	60dd      	str	r5, [r3, #12]
    a516:	611d      	str	r5, [r3, #16]
    a518:	615d      	str	r5, [r3, #20]
    a51a:	223c      	movs	r2, #60	; 0x3c
    a51c:	f014 fd8e 	bl	1f03c <memset>
    static EthernetManager *instance = new EthernetManager();
    a520:	4905      	ldr	r1, [pc, #20]	; (a538 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    a522:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    a526:	2301      	movs	r3, #1
    a528:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    a52a:	6015      	str	r5, [r2, #0]
    a52c:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    a52e:	6033      	str	r3, [r6, #0]
}
    a530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a532:	bf00      	nop
    a534:	20001bec 	.word	0x20001bec
    a538:	20001bf4 	.word	0x20001bf4

0000a53c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    a53c:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    a53e:	4b3e      	ldr	r3, [pc, #248]	; (a638 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    a540:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    a544:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    a548:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    a54c:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a54e:	493b      	ldr	r1, [pc, #236]	; (a63c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    a550:	f042 0210 	orr.w	r2, r2, #16
    a554:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a556:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a558:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a55a:	6893      	ldr	r3, [r2, #8]
    a55c:	0759      	lsls	r1, r3, #29
    a55e:	d5fc      	bpl.n	a55a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    a560:	6813      	ldr	r3, [r2, #0]
    a562:	f36f 1304 	bfc	r3, #4, #1
    a566:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a568:	6b53      	ldr	r3, [r2, #52]	; 0x34
    a56a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a56e:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    a570:	428b      	cmp	r3, r1
    a572:	d05d      	beq.n	a630 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    a574:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    a576:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a578:	4c31      	ldr	r4, [pc, #196]	; (a640 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a57a:	492f      	ldr	r1, [pc, #188]	; (a638 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    a57c:	f043 0310 	orr.w	r3, r3, #16
    a580:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a582:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a584:	688b      	ldr	r3, [r1, #8]
    a586:	075a      	lsls	r2, r3, #29
    a588:	d5fc      	bpl.n	a584 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    a58a:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a58c:	4c2b      	ldr	r4, [pc, #172]	; (a63c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a58e:	4a2a      	ldr	r2, [pc, #168]	; (a638 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    a590:	f36f 1304 	bfc	r3, #4, #1
    a594:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a596:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    a598:	680b      	ldr	r3, [r1, #0]
    a59a:	f043 0310 	orr.w	r3, r3, #16
    a59e:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a5a0:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a5a2:	6893      	ldr	r3, [r2, #8]
    a5a4:	075b      	lsls	r3, r3, #29
    a5a6:	d5fc      	bpl.n	a5a2 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    a5a8:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a5aa:	4c26      	ldr	r4, [pc, #152]	; (a644 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a5ac:	4922      	ldr	r1, [pc, #136]	; (a638 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    a5ae:	f36f 1304 	bfc	r3, #4, #1
    a5b2:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a5b4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    a5b6:	6813      	ldr	r3, [r2, #0]
    a5b8:	f043 0310 	orr.w	r3, r3, #16
    a5bc:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a5be:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a5c0:	688b      	ldr	r3, [r1, #8]
    a5c2:	075c      	lsls	r4, r3, #29
    a5c4:	d5fc      	bpl.n	a5c0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    a5c6:	680b      	ldr	r3, [r1, #0]
    a5c8:	f36f 1304 	bfc	r3, #4, #1
    a5cc:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a5ce:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    a5d0:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    a5d2:	b12b      	cbz	r3, a5e0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    a5d4:	2301      	movs	r3, #1
    a5d6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    a5da:	f85d 4b04 	ldr.w	r4, [sp], #4
    a5de:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    a5e0:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a5e2:	4c19      	ldr	r4, [pc, #100]	; (a648 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a5e4:	4a14      	ldr	r2, [pc, #80]	; (a638 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    a5e6:	f043 0310 	orr.w	r3, r3, #16
    a5ea:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a5ec:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a5ee:	6893      	ldr	r3, [r2, #8]
    a5f0:	0759      	lsls	r1, r3, #29
    a5f2:	d5fc      	bpl.n	a5ee <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    a5f4:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a5f6:	4c13      	ldr	r4, [pc, #76]	; (a644 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a5f8:	490f      	ldr	r1, [pc, #60]	; (a638 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    a5fa:	f36f 1304 	bfc	r3, #4, #1
    a5fe:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a600:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    a602:	6813      	ldr	r3, [r2, #0]
    a604:	f043 0310 	orr.w	r3, r3, #16
    a608:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a60a:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a60c:	688b      	ldr	r3, [r1, #8]
    a60e:	075b      	lsls	r3, r3, #29
    a610:	d5fc      	bpl.n	a60c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    a612:	680b      	ldr	r3, [r1, #0]
    a614:	f36f 1304 	bfc	r3, #4, #1
    a618:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a61a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    a61c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a620:	2b07      	cmp	r3, #7
    a622:	d1d7      	bne.n	a5d4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    a624:	2300      	movs	r3, #0
    a626:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    a62a:	f85d 4b04 	ldr.w	r4, [sp], #4
    a62e:	4770      	bx	lr
        m_phyInitFailed = true;
    a630:	2301      	movs	r3, #1
    a632:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    a636:	4770      	bx	lr
    a638:	42000800 	.word	0x42000800
    a63c:	60020000 	.word	0x60020000
    a640:	50028000 	.word	0x50028000
    a644:	606e0000 	.word	0x606e0000
    a648:	506e0700 	.word	0x506e0700

0000a64c <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    a64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a650:	4be2      	ldr	r3, [pc, #904]	; (a9dc <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    a652:	681a      	ldr	r2, [r3, #0]
    a654:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    a656:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a658:	d503      	bpl.n	a662 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a65a:	681a      	ldr	r2, [r3, #0]
    a65c:	0750      	lsls	r0, r2, #29
    a65e:	f100 82a2 	bmi.w	aba6 <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    a662:	4ade      	ldr	r2, [pc, #888]	; (a9dc <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a664:	48de      	ldr	r0, [pc, #888]	; (a9e0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    a666:	6813      	ldr	r3, [r2, #0]
    a668:	f043 0310 	orr.w	r3, r3, #16
    a66c:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    a66e:	6853      	ldr	r3, [r2, #4]
    a670:	f043 0301 	orr.w	r3, r3, #1
    a674:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    a676:	6853      	ldr	r3, [r2, #4]
    a678:	f043 0302 	orr.w	r3, r3, #2
    a67c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    a67e:	6853      	ldr	r3, [r2, #4]
    a680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a684:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    a686:	6853      	ldr	r3, [r2, #4]
    a688:	2104      	movs	r1, #4
    a68a:	f361 4394 	bfi	r3, r1, #18, #3
    a68e:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    a690:	68d3      	ldr	r3, [r2, #12]
    a692:	f36f 0300 	bfc	r3, #0, #1
    a696:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    a698:	6913      	ldr	r3, [r2, #16]
    a69a:	f361 0304 	bfi	r3, r1, #0, #5
    a69e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    a6a0:	6913      	ldr	r3, [r2, #16]
    a6a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    a6a6:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    a6a8:	6913      	ldr	r3, [r2, #16]
    a6aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    a6ae:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    a6b0:	6915      	ldr	r5, [r2, #16]
    a6b2:	2302      	movs	r3, #2
    a6b4:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    a6b8:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    a6bc:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    a6be:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    a6c0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    a6c4:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a6c8:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    a6cc:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    a6d0:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    a6d4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    a6d8:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    a6dc:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    a6e0:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    a6e4:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a6e8:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a6ec:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    a6f0:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a6f4:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a6f8:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    a6fc:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    a700:	66e3      	str	r3, [r4, #108]	; 0x6c
    a702:	6763      	str	r3, [r4, #116]	; 0x74
    a704:	67e3      	str	r3, [r4, #124]	; 0x7c
    a706:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    a70a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a70e:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    a712:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a716:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a71a:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    a71e:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    a722:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    a726:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    a72a:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    a72e:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    a732:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    a736:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    a73a:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    a73e:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    a742:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    a746:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    a74a:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    a74e:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    a752:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    a756:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a75a:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    a75e:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    a762:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a766:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    a76a:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    a76e:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a770:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    a774:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    a778:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    a77c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a780:	3610      	adds	r6, #16
    a782:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    a784:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a788:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    a78c:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    a790:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a792:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    a796:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a79a:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    a79e:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a7a0:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    a7a2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    a7a6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    a7aa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    a7ae:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    a7b2:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    a7b6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    a7ba:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    a7be:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    a7c2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    a7c6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    a7ca:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    a7ce:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    a7d2:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a7d6:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a7da:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a7de:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    a7e0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a7e4:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    a7e8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a7ec:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    a7f0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    a7f4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    a7f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    a7fc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a800:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    a804:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    a808:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    a80c:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    a810:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    a814:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    a818:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    a81c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a820:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a824:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a828:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a82c:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a830:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a834:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    a838:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    a83c:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    a840:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    a844:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    a848:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a84c:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    a850:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a854:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a856:	6196      	str	r6, [r2, #24]
    a858:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a85c:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a860:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    a862:	6823      	ldr	r3, [r4, #0]
    a864:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    a866:	01db      	lsls	r3, r3, #7
    a868:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a86c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a870:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    a872:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    a876:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    a87a:	f042 0201 	orr.w	r2, r2, #1
    a87e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a882:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a886:	f011 0f01 	tst.w	r1, #1
    a88a:	f04f 010b 	mov.w	r1, #11
    a88e:	bf14      	ite	ne
    a890:	f361 1207 	bfine	r2, r1, #4, #4
    a894:	f361 0203 	bfieq	r2, r1, #0, #4
    a898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    a89c:	68a3      	ldr	r3, [r4, #8]
    a89e:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    a8a0:	01db      	lsls	r3, r3, #7
    a8a2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a8a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a8aa:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a8ac:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a8b0:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a8b4:	f041 0101 	orr.w	r1, r1, #1
    a8b8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a8bc:	f012 0f01 	tst.w	r2, #1
    a8c0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a8c4:	f04f 010b 	mov.w	r1, #11
    a8c8:	bf14      	ite	ne
    a8ca:	f361 1207 	bfine	r2, r1, #4, #4
    a8ce:	f361 0203 	bfieq	r2, r1, #0, #4
    a8d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    a8d6:	6923      	ldr	r3, [r4, #16]
    a8d8:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    a8da:	01db      	lsls	r3, r3, #7
    a8dc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a8e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a8e4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a8e6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a8ea:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a8ee:	f041 0101 	orr.w	r1, r1, #1
    a8f2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a8f6:	f012 0f01 	tst.w	r2, #1
    a8fa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a8fe:	f04f 010b 	mov.w	r1, #11
    a902:	bf14      	ite	ne
    a904:	f361 1207 	bfine	r2, r1, #4, #4
    a908:	f361 0203 	bfieq	r2, r1, #0, #4
    a90c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    a910:	69a3      	ldr	r3, [r4, #24]
    a912:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    a914:	01db      	lsls	r3, r3, #7
    a916:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a91a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a91e:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a920:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a924:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a928:	f041 0101 	orr.w	r1, r1, #1
    a92c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a930:	f012 0f01 	tst.w	r2, #1
    a934:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a938:	f04f 010b 	mov.w	r1, #11
    a93c:	bf14      	ite	ne
    a93e:	f361 1207 	bfine	r2, r1, #4, #4
    a942:	f361 0203 	bfieq	r2, r1, #0, #4
    a946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    a94a:	6a23      	ldr	r3, [r4, #32]
    a94c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    a94e:	01db      	lsls	r3, r3, #7
    a950:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a954:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a958:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a95a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a95e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a962:	f041 0101 	orr.w	r1, r1, #1
    a966:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a96a:	f012 0f01 	tst.w	r2, #1
    a96e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a972:	f04f 010b 	mov.w	r1, #11
    a976:	bf14      	ite	ne
    a978:	f361 1207 	bfine	r2, r1, #4, #4
    a97c:	f361 0203 	bfieq	r2, r1, #0, #4
    a980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    a984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a986:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    a988:	01db      	lsls	r3, r3, #7
    a98a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a98e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a992:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a994:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a998:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a99c:	f041 0101 	orr.w	r1, r1, #1
    a9a0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a9a4:	f012 0f01 	tst.w	r2, #1
    a9a8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a9ac:	f04f 010b 	mov.w	r1, #11
    a9b0:	bf14      	ite	ne
    a9b2:	f361 1207 	bfine	r2, r1, #4, #4
    a9b6:	f361 0203 	bfieq	r2, r1, #0, #4
    a9ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    a9be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a9c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    a9c2:	01db      	lsls	r3, r3, #7
    a9c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a9c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a9cc:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a9ce:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a9d2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a9d6:	f041 0101 	orr.w	r1, r1, #1
    a9da:	e003      	b.n	a9e4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    a9dc:	42000800 	.word	0x42000800
    a9e0:	e000e100 	.word	0xe000e100
    a9e4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a9e8:	f012 0f01 	tst.w	r2, #1
    a9ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a9f0:	f04f 010b 	mov.w	r1, #11
    a9f4:	bf14      	ite	ne
    a9f6:	f361 1207 	bfine	r2, r1, #4, #4
    a9fa:	f361 0203 	bfieq	r2, r1, #0, #4
    a9fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    aa02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    aa04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    aa06:	01db      	lsls	r3, r3, #7
    aa08:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    aa0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    aa10:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    aa12:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    aa16:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    aa1a:	f041 0101 	orr.w	r1, r1, #1
    aa1e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    aa22:	f012 0f01 	tst.w	r2, #1
    aa26:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    aa2a:	f04f 010b 	mov.w	r1, #11
    aa2e:	bf14      	ite	ne
    aa30:	f361 1207 	bfine	r2, r1, #4, #4
    aa34:	f361 0203 	bfieq	r2, r1, #0, #4
    aa38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    aa3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    aa3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    aa40:	01db      	lsls	r3, r3, #7
    aa42:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    aa46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    aa4a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    aa4c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    aa50:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    aa54:	f041 0101 	orr.w	r1, r1, #1
    aa58:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    aa5c:	f012 0f01 	tst.w	r2, #1
    aa60:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    aa64:	f04f 010b 	mov.w	r1, #11
    aa68:	bf14      	ite	ne
    aa6a:	f361 1207 	bfine	r2, r1, #4, #4
    aa6e:	f361 0203 	bfieq	r2, r1, #0, #4
    aa72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    aa76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    aa78:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    aa7a:	01db      	lsls	r3, r3, #7
    aa7c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    aa80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    aa84:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    aa86:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    aa8a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    aa8e:	f041 0101 	orr.w	r1, r1, #1
    aa92:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    aa96:	f012 0f01 	tst.w	r2, #1
    aa9a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    aa9e:	f04f 010b 	mov.w	r1, #11
    aaa2:	bf14      	ite	ne
    aaa4:	f361 1207 	bfine	r2, r1, #4, #4
    aaa8:	f361 0203 	bfieq	r2, r1, #0, #4
    aaac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    aab0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    aab2:	6d61      	ldr	r1, [r4, #84]	; 0x54
    aab4:	01db      	lsls	r3, r3, #7
    aab6:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    aaba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    aabe:	1850      	adds	r0, r2, r1
    aac0:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    aac2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    aac6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    aaca:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    aace:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    aad2:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    aad6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    aada:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    aadc:	bf14      	ite	ne
    aade:	f36f 1007 	bfcne	r0, #4, #4
    aae2:	f367 0003 	bfieq	r0, r7, #0, #4
    aae6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    aaea:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    aaee:	4932      	ldr	r1, [pc, #200]	; (abb8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    aaf0:	4a32      	ldr	r2, [pc, #200]	; (abbc <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    aaf2:	f040 0001 	orr.w	r0, r0, #1
    aaf6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    aafa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    aafe:	f040 0002 	orr.w	r0, r0, #2
    ab02:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    ab06:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ab08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ab0c:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    ab0e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ab10:	f043 0302 	orr.w	r3, r3, #2
    ab14:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    ab16:	7813      	ldrb	r3, [r2, #0]
    ab18:	f36f 0341 	bfc	r3, #1, #1
    ab1c:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    ab1e:	6853      	ldr	r3, [r2, #4]
    ab20:	0799      	lsls	r1, r3, #30
    ab22:	d4fc      	bmi.n	ab1e <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    ab24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    ab26:	4925      	ldr	r1, [pc, #148]	; (abbc <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    ab28:	08c3      	lsrs	r3, r0, #3
    ab2a:	009b      	lsls	r3, r3, #2
    ab2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    ab30:	2701      	movs	r7, #1
    ab32:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    ab36:	4087      	lsls	r7, r0
    ab38:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    ab3a:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    ab3e:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    ab40:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    ab42:	f04f 0e0f 	mov.w	lr, #15
    ab46:	fa0e fe00 	lsl.w	lr, lr, r0
    ab4a:	ea27 070e 	bic.w	r7, r7, lr
    ab4e:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    ab50:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    ab54:	2705      	movs	r7, #5
    ab56:	fa07 f000 	lsl.w	r0, r7, r0
    ab5a:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    ab5e:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    ab60:	7813      	ldrb	r3, [r2, #0]
    ab62:	f043 0302 	orr.w	r3, r3, #2
    ab66:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    ab68:	684b      	ldr	r3, [r1, #4]
    ab6a:	079b      	lsls	r3, r3, #30
    ab6c:	d4fc      	bmi.n	ab68 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    ab6e:	4620      	mov	r0, r4
    ab70:	f7ff fce4 	bl	a53c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    ab74:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    ab78:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    ab7c:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    ab80:	4b0f      	ldr	r3, [pc, #60]	; (abc0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    ab82:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    ab84:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    ab88:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    ab8a:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    ab8e:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    ab92:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    ab96:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    ab98:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    ab9a:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    ab9c:	6818      	ldr	r0, [r3, #0]
}
    ab9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    aba2:	f007 bdcf 	b.w	12744 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    aba6:	681a      	ldr	r2, [r3, #0]
    aba8:	f36f 02c3 	bfc	r2, #3, #1
    abac:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    abae:	681a      	ldr	r2, [r3, #0]
    abb0:	f36f 0282 	bfc	r2, #2, #1
    abb4:	601a      	str	r2, [r3, #0]
    abb6:	e554      	b.n	a662 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    abb8:	42000800 	.word	0x42000800
    abbc:	40002800 	.word	0x40002800
    abc0:	20001f24 	.word	0x20001f24

0000abc4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    abc8:	6d85      	ldr	r5, [r0, #88]	; 0x58
    abca:	4ca1      	ldr	r4, [pc, #644]	; (ae50 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    abcc:	4ba1      	ldr	r3, [pc, #644]	; (ae54 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    abce:	49a2      	ldr	r1, [pc, #648]	; (ae58 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    abd0:	2201      	movs	r2, #1
    abd2:	40aa      	lsls	r2, r5
    abd4:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    abd6:	681a      	ldr	r2, [r3, #0]
    abd8:	f042 0210 	orr.w	r2, r2, #16
    abdc:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    abde:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    abe0:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    abe2:	6893      	ldr	r3, [r2, #8]
    abe4:	075d      	lsls	r5, r3, #29
    abe6:	d5fc      	bpl.n	abe2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    abe8:	6813      	ldr	r3, [r2, #0]
    abea:	f36f 1304 	bfc	r3, #4, #1
    abee:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    abf0:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    abf2:	07cc      	lsls	r4, r1, #31
    abf4:	d415      	bmi.n	ac22 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    abf6:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    abf8:	bf44      	itt	mi
    abfa:	2300      	movmi	r3, #0
    abfc:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    ac00:	078c      	lsls	r4, r1, #30
    ac02:	d401      	bmi.n	ac08 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    ac08:	4b92      	ldr	r3, [pc, #584]	; (ae54 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    ac0a:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    ac0c:	2101      	movs	r1, #1
    ac0e:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    ac12:	0711      	lsls	r1, r2, #28
    ac14:	d5f6      	bpl.n	ac04 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    ac16:	681a      	ldr	r2, [r3, #0]
    ac18:	0752      	lsls	r2, r2, #29
    ac1a:	f100 8121 	bmi.w	ae60 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    ac1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    ac22:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    ac24:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    ac26:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    ac28:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    ac2a:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    ac2e:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    ac32:	d56d      	bpl.n	ad10 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    ac34:	6813      	ldr	r3, [r2, #0]
    ac36:	075f      	lsls	r7, r3, #29
    ac38:	d56a      	bpl.n	ad10 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    ac3a:	6813      	ldr	r3, [r2, #0]
    ac3c:	f36f 03c3 	bfc	r3, #3, #1
    ac40:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    ac42:	6813      	ldr	r3, [r2, #0]
    ac44:	f36f 0382 	bfc	r3, #2, #1
    ac48:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    ac4a:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    ac4e:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    ac52:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    ac56:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    ac5a:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    ac5e:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    ac62:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    ac66:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    ac6a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    ac6e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    ac72:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    ac76:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    ac7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    ac7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    ac82:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    ac86:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    ac8a:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    ac8e:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    ac92:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    ac96:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    ac9a:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    ac9e:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    aca2:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    aca6:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    acaa:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    acae:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    acb2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    acb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    acba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    acbe:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    acc2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    acc6:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    acca:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    acce:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    acd2:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    acd6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    acda:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    acde:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    ace2:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    ace6:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    acea:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    acee:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    acf2:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    acf6:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    acfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    acfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    ad02:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    ad04:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    ad08:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    ad0c:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    ad10:	4b50      	ldr	r3, [pc, #320]	; (ae54 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ad12:	4d52      	ldr	r5, [pc, #328]	; (ae5c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    ad14:	681a      	ldr	r2, [r3, #0]
    ad16:	f042 0210 	orr.w	r2, r2, #16
    ad1a:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ad1c:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ad1e:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ad20:	6893      	ldr	r3, [r2, #8]
    ad22:	075e      	lsls	r6, r3, #29
    ad24:	d5fc      	bpl.n	ad20 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    ad26:	6813      	ldr	r3, [r2, #0]
    ad28:	f36f 1304 	bfc	r3, #4, #1
    ad2c:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ad2e:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    ad30:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    ad32:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    ad34:	f3c3 0640 	ubfx	r6, r3, #1, #1
    ad38:	f366 0500 	bfi	r5, r6, #0, #1
    ad3c:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    ad3e:	6855      	ldr	r5, [r2, #4]
    ad40:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ad44:	f363 0541 	bfi	r5, r3, #1, #1
    ad48:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    ad4a:	6813      	ldr	r3, [r2, #0]
    ad4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ad50:	b96b      	cbnz	r3, ad6e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    ad52:	429c      	cmp	r4, r3
    ad54:	f43f af4f 	beq.w	abf6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    ad58:	b16c      	cbz	r4, ad76 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    ad5a:	4b3e      	ldr	r3, [pc, #248]	; (ae54 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    ad5c:	681a      	ldr	r2, [r3, #0]
    ad5e:	f042 0208 	orr.w	r2, r2, #8
    ad62:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    ad64:	681a      	ldr	r2, [r3, #0]
    ad66:	f042 0204 	orr.w	r2, r2, #4
    ad6a:	601a      	str	r2, [r3, #0]
    ad6c:	e743      	b.n	abf6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    ad6e:	6813      	ldr	r3, [r2, #0]
    ad70:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ad74:	e7ed      	b.n	ad52 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    ad76:	4b37      	ldr	r3, [pc, #220]	; (ae54 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    ad78:	681a      	ldr	r2, [r3, #0]
    ad7a:	f364 02c3 	bfi	r2, r4, #3, #1
    ad7e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    ad80:	681a      	ldr	r2, [r3, #0]
    ad82:	f364 0282 	bfi	r2, r4, #2, #1
    ad86:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    ad88:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    ad8c:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    ad90:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    ad94:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    ad98:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    ad9c:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    ada0:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    ada4:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    ada8:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    adac:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    adb0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    adb4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    adb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    adbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    adc0:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    adc4:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    adc8:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    adcc:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    add0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    add4:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    add8:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    addc:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    ade0:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    ade4:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    ade8:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    adec:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    adf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    adf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    adf8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    adfc:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    ae00:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    ae04:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    ae08:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    ae0c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    ae10:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    ae14:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    ae18:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    ae1c:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    ae20:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    ae24:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    ae28:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    ae2c:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    ae30:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    ae34:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    ae38:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    ae3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    ae40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    ae44:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    ae48:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    ae4c:	e6d3      	b.n	abf6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    ae4e:	bf00      	nop
    ae50:	40002800 	.word	0x40002800
    ae54:	42000800 	.word	0x42000800
    ae58:	606e0000 	.word	0x606e0000
    ae5c:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    ae60:	681a      	ldr	r2, [r3, #0]
    ae62:	f36f 02c3 	bfc	r2, #3, #1
    ae66:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    ae68:	681a      	ldr	r2, [r3, #0]
    ae6a:	f36f 0282 	bfc	r2, #2, #1
    ae6e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    ae70:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    ae74:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    ae78:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    ae7c:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    ae80:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    ae84:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    ae88:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    ae8c:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    ae90:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    ae94:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    ae98:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    ae9c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    aea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    aea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    aea8:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    aeac:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    aeb0:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    aeb4:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    aeb8:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    aebc:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    aec0:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    aec4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    aec8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    aecc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    aed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    aed4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    aed8:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    aedc:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    aee0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    aee4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    aee8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    aeec:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    aef0:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    aef4:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    aef8:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    aefc:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    af00:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    af04:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    af08:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    af0c:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    af10:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    af14:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    af18:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    af1c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    af20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    af24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    af28:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    af2a:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    af2e:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    af32:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    af36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af3a:	bf00      	nop

0000af3c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    af3c:	4b0b      	ldr	r3, [pc, #44]	; (af6c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    af3e:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    af40:	695a      	ldr	r2, [r3, #20]
    af42:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    af44:	6a1a      	ldr	r2, [r3, #32]
    af46:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    af48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    af4a:	9a00      	ldr	r2, [sp, #0]
    af4c:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    af4e:	bf44      	itt	mi
    af50:	9a00      	ldrmi	r2, [sp, #0]
    af52:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    af54:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    af56:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    af58:	079b      	lsls	r3, r3, #30
        m_recv = true;
    af5a:	bf44      	itt	mi
    af5c:	2301      	movmi	r3, #1
    af5e:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    af62:	4b02      	ldr	r3, [pc, #8]	; (af6c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    af64:	621a      	str	r2, [r3, #32]
}
    af66:	b002      	add	sp, #8
    af68:	4770      	bx	lr
    af6a:	bf00      	nop
    af6c:	42000800 	.word	0x42000800

0000af70 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    af70:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    af72:	f7ff fa6f 	bl	a454 <_ZN9ClearCore15EthernetManager8InstanceEv>
    af76:	4b01      	ldr	r3, [pc, #4]	; (af7c <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    af78:	6018      	str	r0, [r3, #0]
    af7a:	bd08      	pop	{r3, pc}
    af7c:	20001bf0 	.word	0x20001bf0

0000af80 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    af82:	4f46      	ldr	r7, [pc, #280]	; (b09c <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    af84:	f8df e118 	ldr.w	lr, [pc, #280]	; b0a0 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    af88:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    af8a:	4604      	mov	r4, r0
    m_lastOutput(0) {
    af8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    af8e:	4625      	mov	r5, r4
    af90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    af92:	e896 0003 	ldmia.w	r6, {r0, r1}
    af96:	f107 0618 	add.w	r6, r7, #24
    af9a:	e885 0003 	stmia.w	r5, {r0, r1}
    af9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    afa0:	f104 0518 	add.w	r5, r4, #24
    afa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    afa6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    afaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
    afae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    afb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    afb4:	f104 0534 	add.w	r5, r4, #52	; 0x34
    afb8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    afbc:	2608      	movs	r6, #8
    afbe:	257f      	movs	r5, #127	; 0x7f
    afc0:	23c8      	movs	r3, #200	; 0xc8
    afc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    afc6:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    afca:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    afce:	2500      	movs	r5, #0
    afd0:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    afd4:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    afd6:	21fe      	movs	r1, #254	; 0xfe
    afd8:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    afdc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    afe0:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    afe4:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    afe6:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    afe8:	4629      	mov	r1, r5
    afea:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    afec:	6563      	str	r3, [r4, #84]	; 0x54
    afee:	65a5      	str	r5, [r4, #88]	; 0x58
    aff0:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    aff2:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    aff6:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    affa:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    affc:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    b000:	67a5      	str	r5, [r4, #120]	; 0x78
    b002:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    b006:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    b008:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b00a:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    b00e:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    b012:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    b016:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    b01a:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    b01e:	2240      	movs	r2, #64	; 0x40
    b020:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    b024:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    b028:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    b02c:	f014 f806 	bl	1f03c <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    b030:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    b034:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b038:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    b03c:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    b040:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b044:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    b048:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    b04c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    b050:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    b054:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b058:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    b05c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b060:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    b064:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    b068:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    b06c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    b070:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    b074:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    b078:	4620      	mov	r0, r4
    m_lastOutput(0) {
    b07a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    b07e:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    b082:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    b086:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    b08a:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    b08e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    b092:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b096:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    b09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b09c:	00023da4 	.word	0x00023da4
    b0a0:	0fe080fc 	.word	0x0fe080fc

0000b0a4 <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    b0a4:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    b0a6:	4a64      	ldr	r2, [pc, #400]	; (b238 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    b0a8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b0ac:	f36f 1386 	bfc	r3, #6, #1
    b0b0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b0b4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b0b8:	065d      	lsls	r5, r3, #25
    b0ba:	d4fb      	bmi.n	b0b4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    b0bc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b0c0:	495d      	ldr	r1, [pc, #372]	; (b238 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    b0c2:	2405      	movs	r4, #5
    b0c4:	f364 0303 	bfi	r3, r4, #0, #4
    b0c8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b0cc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b0d4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b0d8:	684b      	ldr	r3, [r1, #4]
    b0da:	f013 0314 	ands.w	r3, r3, #20
    b0de:	d1fb      	bne.n	b0d8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b0e0:	4d56      	ldr	r5, [pc, #344]	; (b23c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    b0e2:	4957      	ldr	r1, [pc, #348]	; (b240 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b0e4:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    b0e6:	4a57      	ldr	r2, [pc, #348]	; (b244 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b0e8:	f044 0404 	orr.w	r4, r4, #4
    b0ec:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    b0ee:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    b0f2:	2402      	movs	r4, #2
    b0f4:	f364 1507 	bfi	r5, r4, #4, #4
    b0f8:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    b0fc:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    b100:	f045 0501 	orr.w	r5, r5, #1
    b104:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    b108:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    b10c:	f364 1507 	bfi	r5, r4, #4, #4
    b110:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    b114:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    b118:	f045 0501 	orr.w	r5, r5, #1
    b11c:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    b120:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    b124:	f364 0503 	bfi	r5, r4, #0, #4
    b128:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    b12c:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    b130:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    b132:	f045 0501 	orr.w	r5, r5, #1
    b136:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    b13a:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    b13e:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    b142:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    b146:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    b14a:	6811      	ldr	r1, [r2, #0]
    b14c:	f363 0141 	bfi	r1, r3, #1, #1
    b150:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    b152:	69d3      	ldr	r3, [r2, #28]
    b154:	f013 0302 	ands.w	r3, r3, #2
    b158:	d1fb      	bne.n	b152 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    b15a:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    b15c:	4939      	ldr	r1, [pc, #228]	; (b244 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    b15e:	f044 040c 	orr.w	r4, r4, #12
    b162:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    b164:	6814      	ldr	r4, [r2, #0]
    b166:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    b16a:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    b16e:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    b170:	6854      	ldr	r4, [r2, #4]
    b172:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    b176:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    b178:	6894      	ldr	r4, [r2, #8]
    b17a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    b17e:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    b180:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    b182:	6813      	ldr	r3, [r2, #0]
    b184:	f043 0302 	orr.w	r3, r3, #2
    b188:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    b18a:	69cb      	ldr	r3, [r1, #28]
    b18c:	079c      	lsls	r4, r3, #30
    b18e:	d4fc      	bmi.n	b18a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    b190:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    b194:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    b198:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    b19c:	4a29      	ldr	r2, [pc, #164]	; (b244 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    b19e:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    b1a0:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    b1a2:	7e13      	ldrb	r3, [r2, #24]
    b1a4:	0799      	lsls	r1, r3, #30
    b1a6:	d5fc      	bpl.n	b1a2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    b1a8:	4b25      	ldr	r3, [pc, #148]	; (b240 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    b1aa:	4a26      	ldr	r2, [pc, #152]	; (b244 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    b1ac:	2104      	movs	r1, #4
    b1ae:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    b1b2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    b1b6:	7e13      	ldrb	r3, [r2, #24]
    b1b8:	075b      	lsls	r3, r3, #29
    b1ba:	d5fc      	bpl.n	b1b6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    b1bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    b1be:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    b1c2:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b1c6:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    b1ca:	4063      	eors	r3, r4
    b1cc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    b1d0:	bb7a      	cbnz	r2, b232 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    b1d2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    b1d6:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    b1da:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    b1de:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    b1e2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    b1e6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    b1ea:	4059      	eors	r1, r3
    b1ec:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    b1ee:	404b      	eors	r3, r1
    b1f0:	ea83 0105 	eor.w	r1, r3, r5
    b1f4:	4031      	ands	r1, r6
    b1f6:	4059      	eors	r1, r3
    b1f8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    b1fc:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    b200:	404a      	eors	r2, r1
    b202:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    b204:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    b206:	b135      	cbz	r5, b216 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    b208:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    b20c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    b210:	b10a      	cbz	r2, b216 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    b212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    b216:	4d0b      	ldr	r5, [pc, #44]	; (b244 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    b218:	4909      	ldr	r1, [pc, #36]	; (b240 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    b21a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    b21e:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    b220:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    b222:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    b224:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    b226:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    b22a:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    b22c:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    b230:	4770      	bx	lr
        output = m_altOutput;
    b232:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    b236:	e7ee      	b.n	b216 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    b238:	40001c00 	.word	0x40001c00
    b23c:	40000800 	.word	0x40000800
    b240:	41008000 	.word	0x41008000
    b244:	43000800 	.word	0x43000800

0000b248 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    b248:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    b24c:	2b00      	cmp	r3, #0
    b24e:	d078      	beq.n	b342 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    b250:	6d83      	ldr	r3, [r0, #88]	; 0x58
    b252:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    b254:	b4f0      	push	{r4, r5, r6, r7}
    b256:	6582      	str	r2, [r0, #88]	; 0x58
    b258:	b90b      	cbnz	r3, b25e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    b25a:	6d02      	ldr	r2, [r0, #80]	; 0x50
    b25c:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    b25e:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    b260:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    b264:	428a      	cmp	r2, r1
    b266:	bf34      	ite	cc
    b268:	220c      	movcc	r2, #12
    b26a:	2208      	movcs	r2, #8
    b26c:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    b26e:	3301      	adds	r3, #1
    b270:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    b272:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    b274:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    b278:	2b3e      	cmp	r3, #62	; 0x3e
    b27a:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    b27e:	d961      	bls.n	b344 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    b280:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    b284:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    b288:	2400      	movs	r4, #0
    b28a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    b28e:	2b00      	cmp	r3, #0
    b290:	f000 817a 	beq.w	b588 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    b294:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    b298:	3101      	adds	r1, #1
    b29a:	b2c9      	uxtb	r1, r1
    b29c:	4299      	cmp	r1, r3
    b29e:	460a      	mov	r2, r1
    b2a0:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    b2a4:	f2c0 817e 	blt.w	b5a4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    b2a8:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    b2ac:	4623      	mov	r3, r4
    b2ae:	e04c      	b.n	b34a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    b2b0:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    b2b2:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    b2b4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    b2b8:	49b1      	ldr	r1, [pc, #708]	; (b580 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    b2ba:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    b2be:	7e0b      	ldrb	r3, [r1, #24]
    b2c0:	079c      	lsls	r4, r3, #30
    b2c2:	d5fc      	bpl.n	b2be <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    b2c4:	4baf      	ldr	r3, [pc, #700]	; (b584 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    b2c6:	49ae      	ldr	r1, [pc, #696]	; (b580 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    b2c8:	2404      	movs	r4, #4
    b2ca:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    b2ce:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    b2d2:	7e0b      	ldrb	r3, [r1, #24]
    b2d4:	075b      	lsls	r3, r3, #29
    b2d6:	d5fc      	bpl.n	b2d2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    b2d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b2da:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    b2de:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    b2e2:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    b2e6:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    b2ea:	4073      	eors	r3, r6
    b2ec:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    b2f0:	2900      	cmp	r1, #0
    b2f2:	f040 80d4 	bne.w	b49e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    b2f6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    b2fa:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    b2fe:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    b302:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    b306:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    b30a:	405a      	eors	r2, r3
    b30c:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    b30e:	4053      	eors	r3, r2
    b310:	ea83 0204 	eor.w	r2, r3, r4
    b314:	402a      	ands	r2, r5
    b316:	405a      	eors	r2, r3
    b318:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    b31c:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    b320:	4051      	eors	r1, r2
    b322:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    b324:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    b326:	b134      	cbz	r4, b336 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    b328:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    b32c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    b330:	b10a      	cbz	r2, b336 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    b332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    b336:	4a92      	ldr	r2, [pc, #584]	; (b580 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    b338:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    b33c:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    b33e:	6293      	str	r3, [r2, #40]	; 0x28
}
    b340:	bcf0      	pop	{r4, r5, r6, r7}
    b342:	4770      	bx	lr
    b344:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    b348:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    b34a:	4293      	cmp	r3, r2
    b34c:	bfb4      	ite	lt
    b34e:	230c      	movlt	r3, #12
    b350:	2308      	movge	r3, #8
    b352:	4403      	add	r3, r0
            if (!m_activeMask) {
    b354:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    b358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    b35a:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    b35e:	2900      	cmp	r1, #0
    b360:	d0a6      	beq.n	b2b0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    b362:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    b366:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    b368:	3301      	adds	r3, #1
    b36a:	b2db      	uxtb	r3, r3
    b36c:	2b3f      	cmp	r3, #63	; 0x3f
    b36e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    b372:	f200 8097 	bhi.w	b4a4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    b376:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    b37a:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    b37c:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    b37e:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    b380:	d004      	beq.n	b38c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    b382:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    b386:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b388:	bfb8      	it	lt
    b38a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b38c:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    b390:	420a      	tst	r2, r1
    b392:	d004      	beq.n	b39e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    b394:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    b398:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b39a:	bfb8      	it	lt
    b39c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b39e:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    b3a2:	420a      	tst	r2, r1
    b3a4:	d004      	beq.n	b3b0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    b3a6:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    b3aa:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b3ac:	bfb8      	it	lt
    b3ae:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b3b0:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    b3b4:	420a      	tst	r2, r1
    b3b6:	d004      	beq.n	b3c2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    b3b8:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    b3bc:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b3be:	bfb8      	it	lt
    b3c0:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b3c2:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    b3c6:	420a      	tst	r2, r1
    b3c8:	d004      	beq.n	b3d4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    b3ca:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    b3ce:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b3d0:	bfb8      	it	lt
    b3d2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b3d4:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    b3d8:	420a      	tst	r2, r1
    b3da:	d004      	beq.n	b3e6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    b3dc:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    b3e0:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b3e2:	bfb8      	it	lt
    b3e4:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b3e6:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    b3ea:	420a      	tst	r2, r1
    b3ec:	d004      	beq.n	b3f8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    b3ee:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    b3f2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b3f4:	bfb8      	it	lt
    b3f6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b3f8:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    b3fc:	420a      	tst	r2, r1
    b3fe:	d004      	beq.n	b40a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    b400:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    b404:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b406:	bfb8      	it	lt
    b408:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b40a:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    b40e:	420a      	tst	r2, r1
    b410:	d004      	beq.n	b41c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    b412:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    b416:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b418:	bfb8      	it	lt
    b41a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b41c:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    b420:	420a      	tst	r2, r1
    b422:	d004      	beq.n	b42e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    b424:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    b428:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b42a:	bfb8      	it	lt
    b42c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b42e:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    b432:	420a      	tst	r2, r1
    b434:	d004      	beq.n	b440 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    b436:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    b43a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b43c:	bfb8      	it	lt
    b43e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b440:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    b444:	420a      	tst	r2, r1
    b446:	d004      	beq.n	b452 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    b448:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    b44c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b44e:	bfb8      	it	lt
    b450:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b452:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    b456:	420a      	tst	r2, r1
    b458:	d004      	beq.n	b464 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    b45a:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    b45e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b460:	bfb8      	it	lt
    b462:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b464:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    b468:	420a      	tst	r2, r1
    b46a:	d004      	beq.n	b476 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    b46c:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    b470:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b472:	bfb8      	it	lt
    b474:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b476:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    b47a:	420a      	tst	r2, r1
    b47c:	d004      	beq.n	b488 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    b47e:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    b482:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b484:	bfb8      	it	lt
    b486:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    b488:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    b48c:	4211      	tst	r1, r2
    b48e:	d004      	beq.n	b49a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    b490:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    b494:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    b496:	bfb8      	it	lt
    b498:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    b49a:	6782      	str	r2, [r0, #120]	; 0x78
    b49c:	e70c      	b.n	b2b8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    b49e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    b4a2:	e748      	b.n	b336 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    b4a4:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    b4a6:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    b4aa:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    b4ae:	d004      	beq.n	b4ba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    b4b0:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    b4b4:	2a00      	cmp	r2, #0
    b4b6:	f040 80cb 	bne.w	b650 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    b4ba:	078b      	lsls	r3, r1, #30
    b4bc:	d504      	bpl.n	b4c8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    b4be:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	f040 80be 	bne.w	b644 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    b4c8:	074f      	lsls	r7, r1, #29
    b4ca:	d504      	bpl.n	b4d6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    b4cc:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	f040 80b1 	bne.w	b638 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    b4d6:	070e      	lsls	r6, r1, #28
    b4d8:	d504      	bpl.n	b4e4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    b4da:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    b4de:	2b00      	cmp	r3, #0
    b4e0:	f040 80a4 	bne.w	b62c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    b4e4:	06cd      	lsls	r5, r1, #27
    b4e6:	d504      	bpl.n	b4f2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    b4e8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    b4ec:	2b00      	cmp	r3, #0
    b4ee:	f040 8097 	bne.w	b620 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    b4f2:	068c      	lsls	r4, r1, #26
    b4f4:	d504      	bpl.n	b500 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    b4f6:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	f040 808a 	bne.w	b614 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    b500:	064b      	lsls	r3, r1, #25
    b502:	d503      	bpl.n	b50c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    b504:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    b508:	2b00      	cmp	r3, #0
    b50a:	d17d      	bne.n	b608 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    b50c:	060f      	lsls	r7, r1, #24
    b50e:	d503      	bpl.n	b518 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    b510:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    b514:	2b00      	cmp	r3, #0
    b516:	d171      	bne.n	b5fc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    b518:	05ce      	lsls	r6, r1, #23
    b51a:	d503      	bpl.n	b524 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    b51c:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    b520:	2b00      	cmp	r3, #0
    b522:	d165      	bne.n	b5f0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    b524:	058d      	lsls	r5, r1, #22
    b526:	d503      	bpl.n	b530 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    b528:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    b52c:	2b00      	cmp	r3, #0
    b52e:	d159      	bne.n	b5e4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    b530:	054c      	lsls	r4, r1, #21
    b532:	d503      	bpl.n	b53c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    b534:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    b538:	2b00      	cmp	r3, #0
    b53a:	d14d      	bne.n	b5d8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    b53c:	050b      	lsls	r3, r1, #20
    b53e:	d503      	bpl.n	b548 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    b540:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    b544:	2b00      	cmp	r3, #0
    b546:	d141      	bne.n	b5cc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    b548:	04cf      	lsls	r7, r1, #19
    b54a:	d503      	bpl.n	b554 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    b54c:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    b550:	2b00      	cmp	r3, #0
    b552:	d135      	bne.n	b5c0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    b554:	048e      	lsls	r6, r1, #18
    b556:	d502      	bpl.n	b55e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    b558:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    b55c:	bb53      	cbnz	r3, b5b4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    b55e:	044d      	lsls	r5, r1, #17
    b560:	d502      	bpl.n	b568 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    b562:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    b566:	b9fb      	cbnz	r3, b5a8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    b568:	0bcb      	lsrs	r3, r1, #15
    b56a:	d096      	beq.n	b49a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    b56c:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    b570:	2b00      	cmp	r3, #0
    b572:	d092      	beq.n	b49a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    b574:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    b578:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    b57c:	430a      	orrs	r2, r1
    b57e:	e78c      	b.n	b49a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    b580:	43000800 	.word	0x43000800
    b584:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    b588:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    b58c:	3901      	subs	r1, #1
    b58e:	b2c9      	uxtb	r1, r1
    b590:	42a1      	cmp	r1, r4
    b592:	460a      	mov	r2, r1
    b594:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    b598:	f73f aed7 	bgt.w	b34a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    b59c:	2101      	movs	r1, #1
    b59e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    b5a2:	e6d2      	b.n	b34a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    b5a4:	4623      	mov	r3, r4
    b5a6:	e6d0      	b.n	b34a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    b5a8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    b5ac:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    b5b0:	4322      	orrs	r2, r4
    b5b2:	e7d9      	b.n	b568 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    b5b4:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    b5b8:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    b5bc:	4322      	orrs	r2, r4
    b5be:	e7ce      	b.n	b55e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    b5c0:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    b5c4:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    b5c8:	4322      	orrs	r2, r4
    b5ca:	e7c3      	b.n	b554 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    b5cc:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    b5d0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    b5d4:	4322      	orrs	r2, r4
    b5d6:	e7b7      	b.n	b548 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    b5d8:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    b5dc:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    b5e0:	4322      	orrs	r2, r4
    b5e2:	e7ab      	b.n	b53c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    b5e4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    b5e8:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    b5ec:	4322      	orrs	r2, r4
    b5ee:	e79f      	b.n	b530 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    b5f0:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    b5f4:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    b5f8:	4322      	orrs	r2, r4
    b5fa:	e793      	b.n	b524 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    b5fc:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    b600:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    b604:	4322      	orrs	r2, r4
    b606:	e787      	b.n	b518 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    b608:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    b60c:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    b610:	4322      	orrs	r2, r4
    b612:	e77b      	b.n	b50c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    b614:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    b618:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    b61c:	4322      	orrs	r2, r4
    b61e:	e76f      	b.n	b500 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    b620:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    b624:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    b628:	4322      	orrs	r2, r4
    b62a:	e762      	b.n	b4f2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    b62c:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    b630:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    b634:	4322      	orrs	r2, r4
    b636:	e755      	b.n	b4e4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    b638:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    b63c:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    b640:	4322      	orrs	r2, r4
    b642:	e748      	b.n	b4d6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    b644:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    b648:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    b64c:	4322      	orrs	r2, r4
    b64e:	e73b      	b.n	b4c8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    b650:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    b654:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b658:	e72f      	b.n	b4ba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    b65a:	bf00      	nop

0000b65c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    b660:	2301      	movs	r3, #1
    b662:	f100 0834 	add.w	r8, r0, #52	; 0x34
    b666:	4e4d      	ldr	r6, [pc, #308]	; (b79c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b668:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    b66c:	b083      	sub	sp, #12
    b66e:	4681      	mov	r9, r0
    m_useAltOutput = true;
    b670:	4645      	mov	r5, r8
    b672:	f100 0444 	add.w	r4, r0, #68	; 0x44
    b676:	2200      	movs	r2, #0
    b678:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    b67a:	f855 3b04 	ldr.w	r3, [r5], #4
    b67e:	4313      	orrs	r3, r2
    b680:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b684:	4630      	mov	r0, r6
    b686:	4639      	mov	r1, r7
    b688:	f7fe febe 	bl	a408 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    b68c:	42a5      	cmp	r5, r4
    b68e:	d002      	beq.n	b696 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    b690:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    b694:	e7f1      	b.n	b67a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    b696:	f109 0318 	add.w	r3, r9, #24
    b69a:	4e40      	ldr	r6, [pc, #256]	; (b79c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b69c:	9301      	str	r3, [sp, #4]
    b69e:	469b      	mov	fp, r3
    b6a0:	f04f 0a00 	mov.w	sl, #0
    b6a4:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    b6a6:	f1ba 0f06 	cmp.w	sl, #6
    b6aa:	4630      	mov	r0, r6
    b6ac:	4639      	mov	r1, r7
    b6ae:	f10a 0a01 	add.w	sl, sl, #1
    b6b2:	d148      	bne.n	b746 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    b6b4:	f8db 2000 	ldr.w	r2, [fp]
    b6b8:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b6bc:	4837      	ldr	r0, [pc, #220]	; (b79c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b6be:	4313      	orrs	r3, r2
    b6c0:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b6c4:	2100      	movs	r1, #0
    b6c6:	f7fe fe9f 	bl	a408 <Delay_cycles>
    b6ca:	4835      	ldr	r0, [pc, #212]	; (b7a0 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    b6cc:	4e33      	ldr	r6, [pc, #204]	; (b79c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b6ce:	2100      	movs	r1, #0
    b6d0:	f7fe fe9a 	bl	a408 <Delay_cycles>
    b6d4:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    b6d6:	f858 2b04 	ldr.w	r2, [r8], #4
    b6da:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b6de:	ea23 0302 	bic.w	r3, r3, r2
    b6e2:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b6e6:	4630      	mov	r0, r6
    b6e8:	4639      	mov	r1, r7
    b6ea:	f7fe fe8d 	bl	a408 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    b6ee:	4545      	cmp	r5, r8
    b6f0:	d1f1      	bne.n	b6d6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    b6f2:	f3bf 8f5b 	dmb	ish
    b6f6:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    b6fa:	e853 2f00 	ldrex	r2, [r3]
    b6fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    b702:	e843 2100 	strex	r1, r2, [r3]
    b706:	2900      	cmp	r1, #0
    b708:	d1f7      	bne.n	b6fa <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    b70a:	f3bf 8f5b 	dmb	ish
    b70e:	4e23      	ldr	r6, [pc, #140]	; (b79c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b710:	2500      	movs	r5, #0
    b712:	2700      	movs	r7, #0
    b714:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    b716:	2d06      	cmp	r5, #6
    b718:	461a      	mov	r2, r3
    b71a:	4630      	mov	r0, r6
    b71c:	4639      	mov	r1, r7
    b71e:	f105 0501 	add.w	r5, r5, #1
    b722:	d122      	bne.n	b76a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    b724:	681a      	ldr	r2, [r3, #0]
    b726:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b72a:	481c      	ldr	r0, [pc, #112]	; (b79c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b72c:	ea23 0302 	bic.w	r3, r3, r2
    b730:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b734:	2100      	movs	r1, #0
    b736:	f7fe fe67 	bl	a408 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    b73a:	2300      	movs	r3, #0
    b73c:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    b740:	b003      	add	sp, #12
    b742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    b746:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    b74a:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    b74e:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    b752:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    b754:	4313      	orrs	r3, r2
    b756:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b75a:	f7fe fe55 	bl	a408 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    b75e:	f1ba 0f07 	cmp.w	sl, #7
    b762:	f10b 0b04 	add.w	fp, fp, #4
    b766:	d19e      	bne.n	b6a6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    b768:	e7af      	b.n	b6ca <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    b76a:	f853 3c18 	ldr.w	r3, [r3, #-24]
    b76e:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    b772:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    b774:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    b778:	ea23 0302 	bic.w	r3, r3, r2
    b77c:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b780:	9b01      	ldr	r3, [sp, #4]
    b782:	3304      	adds	r3, #4
    b784:	9301      	str	r3, [sp, #4]
    b786:	f7fe fe3f 	bl	a408 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    b78a:	2d07      	cmp	r5, #7
    b78c:	d1c2      	bne.n	b714 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    b78e:	2300      	movs	r3, #0
    b790:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    b794:	b003      	add	sp, #12
    b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b79a:	bf00      	nop
    b79c:	002dc6c0 	.word	0x002dc6c0
    b7a0:	005b8d80 	.word	0x005b8d80

0000b7a4 <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    b7a6:	4d0e      	ldr	r5, [pc, #56]	; (b7e0 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    b7a8:	682b      	ldr	r3, [r5, #0]
    b7aa:	f013 0401 	ands.w	r4, r3, #1
    b7ae:	d002      	beq.n	b7b6 <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    b7b0:	4b0c      	ldr	r3, [pc, #48]	; (b7e4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    b7b2:	6818      	ldr	r0, [r3, #0]
    b7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7b6:	2010      	movs	r0, #16
    b7b8:	f008 fba2 	bl	13f00 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    b7bc:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    b7be:	4909      	ldr	r1, [pc, #36]	; (b7e4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    b7c0:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b7c2:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    b7c4:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    b7c6:	2617      	movs	r6, #23
      m_initialized(false) {
    b7c8:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    b7ca:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    b7cc:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    b7ce:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    b7d0:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    b7d2:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    b7d4:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    b7d6:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b7d8:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b7da:	7342      	strb	r2, [r0, #13]
}
    b7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7de:	bf00      	nop
    b7e0:	20001bf8 	.word	0x20001bf8
    b7e4:	20001c00 	.word	0x20001c00

0000b7e8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    b7e8:	7843      	ldrb	r3, [r0, #1]
    b7ea:	428b      	cmp	r3, r1
    b7ec:	d06d      	beq.n	b8ca <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    b7ee:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    b7f4:	d071      	beq.n	b8da <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    b7f6:	d363      	bcc.n	b8c0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    b7f8:	2902      	cmp	r1, #2
    b7fa:	d16b      	bne.n	b8d4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    b7fc:	4e39      	ldr	r6, [pc, #228]	; (b8e4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    b7fe:	f240 188f 	movw	r8, #399	; 0x18f
    b802:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b806:	4a38      	ldr	r2, [pc, #224]	; (b8e8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    b808:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b80a:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b80c:	4b37      	ldr	r3, [pc, #220]	; (b8ec <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b80e:	f36f 0441 	bfc	r4, #1, #1
    b812:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b814:	681c      	ldr	r4, [r3, #0]
    b816:	f36f 0441 	bfc	r4, #1, #1
    b81a:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b81c:	6893      	ldr	r3, [r2, #8]
    b81e:	079c      	lsls	r4, r3, #30
    b820:	d4fc      	bmi.n	b81c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b822:	4d32      	ldr	r5, [pc, #200]	; (b8ec <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b824:	68ac      	ldr	r4, [r5, #8]
    b826:	f014 0402 	ands.w	r4, r4, #2
    b82a:	d1fb      	bne.n	b824 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    b82c:	4631      	mov	r1, r6
    b82e:	7800      	ldrb	r0, [r0, #0]
    b830:	4e2f      	ldr	r6, [pc, #188]	; (b8f0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    b832:	f000 feed 	bl	c610 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    b836:	492f      	ldr	r1, [pc, #188]	; (b8f4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    b838:	4a2f      	ldr	r2, [pc, #188]	; (b8f8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    b83a:	4b2b      	ldr	r3, [pc, #172]	; (b8e8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    b83c:	482f      	ldr	r0, [pc, #188]	; (b8fc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    b83e:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    b840:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    b842:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b844:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b846:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b848:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b84a:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b84c:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b84e:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b850:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b852:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    b854:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    b858:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    b85a:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    b85c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    b860:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    b862:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    b866:	3018      	adds	r0, #24
    b868:	3104      	adds	r1, #4
    b86a:	3204      	adds	r2, #4
    b86c:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b86e:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b870:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b872:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b874:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b876:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b878:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b87a:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    b87c:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    b880:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    b884:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    b888:	f856 0b04 	ldr.w	r0, [r6], #4
    b88c:	4639      	mov	r1, r7
    b88e:	3030      	adds	r0, #48	; 0x30
    b890:	f000 fcf2 	bl	c278 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b894:	42b4      	cmp	r4, r6
    b896:	d1f7      	bne.n	b888 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b898:	4a13      	ldr	r2, [pc, #76]	; (b8e8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b89a:	4914      	ldr	r1, [pc, #80]	; (b8ec <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b89c:	6813      	ldr	r3, [r2, #0]
    b89e:	f043 0302 	orr.w	r3, r3, #2
    b8a2:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b8a4:	680b      	ldr	r3, [r1, #0]
    b8a6:	f043 0302 	orr.w	r3, r3, #2
    b8aa:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b8ac:	6893      	ldr	r3, [r2, #8]
    b8ae:	0799      	lsls	r1, r3, #30
    b8b0:	d4fc      	bmi.n	b8ac <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b8b2:	4a0e      	ldr	r2, [pc, #56]	; (b8ec <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b8b4:	6893      	ldr	r3, [r2, #8]
    b8b6:	079b      	lsls	r3, r3, #30
    b8b8:	d4fc      	bmi.n	b8b4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    b8ba:	2001      	movs	r0, #1
    b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b8c0:	f04f 0813 	mov.w	r8, #19
    b8c4:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    b8c6:	4e0e      	ldr	r6, [pc, #56]	; (b900 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    b8c8:	e79d      	b.n	b806 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    b8ca:	7b83      	ldrb	r3, [r0, #14]
    b8cc:	2b00      	cmp	r3, #0
    b8ce:	d08e      	beq.n	b7ee <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    b8d0:	2000      	movs	r0, #0
    b8d2:	4770      	bx	lr
        return false;
    b8d4:	2000      	movs	r0, #0
    b8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b8da:	f04f 0863 	mov.w	r8, #99	; 0x63
    b8de:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    b8e0:	4e08      	ldr	r6, [pc, #32]	; (b904 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    b8e2:	e790      	b.n	b806 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    b8e4:	001e8480 	.word	0x001e8480
    b8e8:	41016000 	.word	0x41016000
    b8ec:	41018000 	.word	0x41018000
    b8f0:	00023a00 	.word	0x00023a00
    b8f4:	41016004 	.word	0x41016004
    b8f8:	41016008 	.word	0x41016008
    b8fc:	4101600c 	.word	0x4101600c
    b900:	000186a0 	.word	0x000186a0
    b904:	0007a120 	.word	0x0007a120

0000b908 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    b908:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    b90a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b90e:	4606      	mov	r6, r0
    b910:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    b912:	d036      	beq.n	b982 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    b914:	460c      	mov	r4, r1
    b916:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    b91a:	2f03      	cmp	r7, #3
    b91c:	d907      	bls.n	b92e <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    b91e:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    b920:	7b38      	ldrb	r0, [r7, #12]
    b922:	1b40      	subs	r0, r0, r5
    b924:	fab0 f080 	clz	r0, r0
    b928:	0940      	lsrs	r0, r0, #5
    b92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b92e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b9f0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b932:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    b936:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b938:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    b93c:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b93e:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b940:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b944:	685b      	ldr	r3, [r3, #4]
    b946:	4629      	mov	r1, r5
    b948:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b94a:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    b94e:	6803      	ldr	r3, [r0, #0]
    b950:	4629      	mov	r1, r5
    b952:	685b      	ldr	r3, [r3, #4]
    b954:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b956:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    b95a:	f997 2002 	ldrsb.w	r2, [r7, #2]
    b95e:	684b      	ldr	r3, [r1, #4]
    b960:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b964:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b968:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b96c:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b96e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b972:	bf0c      	ite	eq
    b974:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    b978:	f36f 0200 	bfcne	r2, #0, #1
    b97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b980:	e7ce      	b.n	b920 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    b982:	f1a2 0709 	sub.w	r7, r2, #9
    b986:	2f03      	cmp	r7, #3
    b988:	d907      	bls.n	b99a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b98a:	7b33      	ldrb	r3, [r6, #12]
    b98c:	42ab      	cmp	r3, r5
    b98e:	d002      	beq.n	b996 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    b990:	2000      	movs	r0, #0
}
    b992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b996:	2401      	movs	r4, #1
    b998:	e7bf      	b.n	b91a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b99a:	f8df 9054 	ldr.w	r9, [pc, #84]	; b9f0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    b99e:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b9a0:	f8d9 0000 	ldr.w	r0, [r9]
    b9a4:	6803      	ldr	r3, [r0, #0]
    b9a6:	4611      	mov	r1, r2
    b9a8:	685b      	ldr	r3, [r3, #4]
    b9aa:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b9ac:	f8d9 0004 	ldr.w	r0, [r9, #4]
    b9b0:	6803      	ldr	r3, [r0, #0]
    b9b2:	4629      	mov	r1, r5
    b9b4:	685b      	ldr	r3, [r3, #4]
    b9b6:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b9b8:	f996 2002 	ldrsb.w	r2, [r6, #2]
    b9bc:	6873      	ldr	r3, [r6, #4]
    b9be:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b9c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b9c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b9ca:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b9cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b9d0:	d004      	beq.n	b9dc <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    b9d2:	f36f 0200 	bfc	r2, #0, #1
    b9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b9da:	e7d6      	b.n	b98a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    b9dc:	f042 0201 	orr.w	r2, r2, #1
    b9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b9e4:	7b33      	ldrb	r3, [r6, #12]
    b9e6:	2b0a      	cmp	r3, #10
    b9e8:	d1d2      	bne.n	b990 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    b9ea:	2401      	movs	r4, #1
    b9ec:	e7a1      	b.n	b932 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    b9ee:	bf00      	nop
    b9f0:	00023a00 	.word	0x00023a00

0000b9f4 <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    b9f4:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b9f6:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    b9f8:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b9fa:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b9fc:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    b9fe:	2101      	movs	r1, #1
    ba00:	f7ff fef2 	bl	b7e8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    ba04:	f995 2002 	ldrsb.w	r2, [r5, #2]
    ba08:	6868      	ldr	r0, [r5, #4]
    ba0a:	01d2      	lsls	r2, r2, #7
    ba0c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    ba10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ba14:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ba16:	2101      	movs	r1, #1
    ba18:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    ba1a:	2600      	movs	r6, #0
    ba1c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ba20:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    ba22:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    ba26:	f010 0f01 	tst.w	r0, #1
    ba2a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    ba2e:	f04f 040c 	mov.w	r4, #12
    ba32:	bf0c      	ite	eq
    ba34:	f364 0003 	bfieq	r0, r4, #0, #4
    ba38:	f364 1007 	bfine	r0, r4, #4, #4
    ba3c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    ba40:	4b2d      	ldr	r3, [pc, #180]	; (baf8 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    ba42:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ba44:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    ba46:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    ba48:	f995 2003 	ldrsb.w	r2, [r5, #3]
    ba4c:	68a9      	ldr	r1, [r5, #8]
    ba4e:	01d2      	lsls	r2, r2, #7
    ba50:	4413      	add	r3, r2
    ba52:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ba54:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    ba56:	2600      	movs	r6, #0
    ba58:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ba5c:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    ba5e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    ba62:	f011 0f01 	tst.w	r1, #1
    ba66:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    ba6a:	4e24      	ldr	r6, [pc, #144]	; (bafc <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    ba6c:	f04f 040c 	mov.w	r4, #12
    ba70:	bf14      	ite	ne
    ba72:	f364 1107 	bfine	r1, r4, #4, #4
    ba76:	f364 0103 	bfieq	r1, r4, #0, #4
    ba7a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    ba7e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    ba82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ba86:	2400      	movs	r4, #0
    ba88:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    ba8a:	f856 0b04 	ldr.w	r0, [r6], #4
    ba8e:	f3c4 0346 	ubfx	r3, r4, #1, #7
    ba92:	6802      	ldr	r2, [r0, #0]
    ba94:	442b      	add	r3, r5
    ba96:	6852      	ldr	r2, [r2, #4]
    ba98:	7b19      	ldrb	r1, [r3, #12]
    ba9a:	3401      	adds	r4, #1
    ba9c:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    ba9e:	2c04      	cmp	r4, #4
    baa0:	d1f3      	bne.n	ba8a <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    baa2:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    baa4:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    baa8:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    baaa:	686b      	ldr	r3, [r5, #4]
    baac:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    bab0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    bab4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bab8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    babc:	bf14      	ite	ne
    babe:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    bac2:	f042 0201 	orreq.w	r2, r2, #1
    bac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    baca:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    bacc:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    bad0:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    bad2:	68ab      	ldr	r3, [r5, #8]
    bad4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    bad8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    badc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bae0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    bae4:	bf0c      	ite	eq
    bae6:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    baea:	f36f 0200 	bfcne	r2, #0, #1
    baee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    baf2:	2301      	movs	r3, #1
    baf4:	73ab      	strb	r3, [r5, #14]
    baf6:	bd70      	pop	{r4, r5, r6, pc}
    baf8:	41008000 	.word	0x41008000
    bafc:	00023a00 	.word	0x00023a00

0000bb00 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    bb00:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    bb02:	f7ff fe4f 	bl	b7a4 <_ZN9ClearCore12MotorManager8InstanceEv>
    bb06:	4b01      	ldr	r3, [pc, #4]	; (bb0c <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    bb08:	6018      	str	r0, [r3, #0]
    bb0a:	bd08      	pop	{r3, pc}
    bb0c:	20001bfc 	.word	0x20001bfc

0000bb10 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb12:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    bb14:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    bb16:	f890 3020 	ldrb.w	r3, [r0, #32]
    bb1a:	b113      	cbz	r3, bb22 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    bb1c:	2300      	movs	r3, #0
    bb1e:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    bb20:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    bb22:	b362      	cbz	r2, bb7e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    bb24:	69a0      	ldr	r0, [r4, #24]
    bb26:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    bb28:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    bb2a:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    bb2c:	bb2b      	cbnz	r3, bb7a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    bb2e:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    bb30:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    bb34:	f647 76ff 	movw	r6, #32767	; 0x7fff
    bb38:	2700      	movs	r7, #0
    bb3a:	4032      	ands	r2, r6
    bb3c:	403b      	ands	r3, r7
    m_stepsSent = 0;
    bb3e:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    bb40:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    bb42:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    bb46:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    bb48:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    bb4c:	f010 fd40 	bl	1c5d0 <__aeabi_i2d>
    bb50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    bb54:	4619      	mov	r1, r3
    bb56:	f011 f83b 	bl	1cbd0 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    bb5a:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bb5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    bb5e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bb60:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    bb62:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    bb66:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    bb68:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    bb6a:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bb6c:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    bb6e:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bb70:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    bb72:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    bb74:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    bb76:	4618      	mov	r0, r3
    bb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    bb7a:	4240      	negs	r0, r0
    bb7c:	e7d7      	b.n	bb2e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    bb7e:	6960      	ldr	r0, [r4, #20]
    bb80:	1a08      	subs	r0, r1, r0
            break;
    bb82:	e7d5      	b.n	bb30 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000bb84 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb86:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    bb88:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    bb8a:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    bb8c:	0fca      	lsrs	r2, r1, #31
    bb8e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    bb92:	f884 3020 	strb.w	r3, [r4, #32]
    bb96:	4608      	mov	r0, r1
    bb98:	f010 fd1a 	bl	1c5d0 <__aeabi_i2d>
    bb9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    bba0:	4619      	mov	r1, r3
    bba2:	f011 f815 	bl	1cbd0 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    bba6:	17c3      	asrs	r3, r0, #31
    bba8:	03d9      	lsls	r1, r3, #15
    bbaa:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    bbae:	f241 3288 	movw	r2, #5000	; 0x1388
    bbb2:	2300      	movs	r3, #0
    bbb4:	03c0      	lsls	r0, r0, #15
    bbb6:	f011 f9b1 	bl	1cf1c <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    bbba:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    bbbc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    bbc0:	03de      	lsls	r6, r3, #15
    bbc2:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    bbc4:	42b2      	cmp	r2, r6
    bbc6:	f04f 0300 	mov.w	r3, #0
    bbca:	eb73 0507 	sbcs.w	r5, r3, r7
    bbce:	bfbc      	itt	lt
    bbd0:	4616      	movlt	r6, r2
    bbd2:	461f      	movlt	r7, r3
    bbd4:	4286      	cmp	r6, r0
    bbd6:	460b      	mov	r3, r1
    bbd8:	4602      	mov	r2, r0
    bbda:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    bbde:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    bbe2:	bfb8      	it	lt
    bbe4:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    bbe6:	2700      	movs	r7, #0
    bbe8:	f647 76ff 	movw	r6, #32767	; 0x7fff
    bbec:	4030      	ands	r0, r6
    bbee:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    bbf0:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    bbf2:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bbf4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    bbf6:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bbf8:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    bbfa:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    bbfe:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    bc00:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    bc04:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    bc06:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    bc08:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bc0a:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    bc0c:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    bc0e:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    bc10:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    bc12:	b662      	cpsie	i
}
    bc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc16:	bf00      	nop

0000bc18 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    bc1c:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    bc1e:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    bc22:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    bc24:	b085      	sub	sp, #20
    bc26:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    bc28:	d038      	beq.n	bc9c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    bc2a:	2b07      	cmp	r3, #7
    bc2c:	f200 80da 	bhi.w	bde4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    bc30:	e8df f013 	tbh	[pc, r3, lsl #1]
    bc34:	00d8002f 	.word	0x00d8002f
    bc38:	00be01d7 	.word	0x00be01d7
    bc3c:	025f0086 	.word	0x025f0086
    bc40:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    bc44:	7b41      	ldrb	r1, [r0, #13]
    bc46:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    bc4a:	428b      	cmp	r3, r1
    bc4c:	f000 822d 	beq.w	c0aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    bc50:	6980      	ldr	r0, [r0, #24]
    bc52:	69e3      	ldr	r3, [r4, #28]
    bc54:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    bc56:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    bc5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    bc5e:	2300      	movs	r3, #0
    bc60:	4016      	ands	r6, r2
    bc62:	401f      	ands	r7, r3
    bc64:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    bc68:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    bc6c:	2501      	movs	r5, #1
            m_moveDirChange = false;
    bc6e:	2300      	movs	r3, #0
    bc70:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    bc72:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    bc76:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    bc78:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    bc7c:	0bf2      	lsrs	r2, r6, #15
    bc7e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    bc82:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    bc84:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    bc86:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    bc88:	6962      	ldr	r2, [r4, #20]
    bc8a:	b101      	cbz	r1, bc8e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    bc8c:	425b      	negs	r3, r3
    bc8e:	4413      	add	r3, r2
    bc90:	6163      	str	r3, [r4, #20]
}
    bc92:	b005      	add	sp, #20
    bc94:	ecbd 8b02 	vpop	{d8}
    bc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    bc9c:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    bc9e:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    bca2:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    bca6:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    bcaa:	1457      	asrs	r7, r2, #17
    bcac:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    bcae:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    bcb2:	2900      	cmp	r1, #0
    bcb4:	d163      	bne.n	bd7e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    bcb6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    bcb8:	2d00      	cmp	r5, #0
    bcba:	f000 8117 	beq.w	beec <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    bcbe:	7b41      	ldrb	r1, [r0, #13]
    bcc0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    bcc4:	9100      	str	r1, [sp, #0]
    bcc6:	4291      	cmp	r1, r2
    bcc8:	f000 81f8 	beq.w	c0bc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    bccc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    bcd0:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    bcd2:	2305      	movs	r3, #5
    bcd4:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    bcd6:	6520      	str	r0, [r4, #80]	; 0x50
    bcd8:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    bcda:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    bcde:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    bce2:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    bce4:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    bce8:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    bcec:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    bcee:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    bcf2:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    bcf4:	f300 80ab 	bgt.w	be4e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    bcf8:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    bcfa:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    bcfe:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    bd02:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    bd04:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    bd08:	4629      	mov	r1, r5
    bd0a:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    bd0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    bd10:	f011 f954 	bl	1cfbc <__aeabi_uldivmod>
    bd14:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    bd16:	fba0 bc05 	umull	fp, ip, r0, r5
    bd1a:	fb00 cc03 	mla	ip, r0, r3, ip
    bd1e:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    bd22:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    bd24:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    bd28:	eb47 0709 	adc.w	r7, r7, r9
    bd2c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    bd30:	2900      	cmp	r1, #0
    bd32:	f000 816e 	beq.w	c012 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    bd36:	2307      	movs	r3, #7
    bd38:	7323      	strb	r3, [r4, #12]
    bd3a:	9900      	ldr	r1, [sp, #0]
    bd3c:	69e3      	ldr	r3, [r4, #28]
    bd3e:	e79d      	b.n	bc7c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    bd40:	6c01      	ldr	r1, [r0, #64]	; 0x40
    bd42:	6c40      	ldr	r0, [r0, #68]	; 0x44
    bd44:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    bd48:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    bd4c:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    bd50:	1952      	adds	r2, r2, r5
    bd52:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    bd56:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    bd58:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    bd5c:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    bd60:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    bd62:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    bd66:	da54      	bge.n	be12 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    bd68:	2900      	cmp	r1, #0
    bd6a:	dd52      	ble.n	be12 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    bd6c:	2a01      	cmp	r2, #1
    bd6e:	f173 0100 	sbcs.w	r1, r3, #0
    bd72:	db4e      	blt.n	be12 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    bd74:	461f      	mov	r7, r3
    bd76:	4616      	mov	r6, r2
    bd78:	69e3      	ldr	r3, [r4, #28]
    bd7a:	7b61      	ldrb	r1, [r4, #13]
    bd7c:	e77e      	b.n	bc7c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    bd7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    bd80:	6c05      	ldr	r5, [r0, #64]	; 0x40
    bd82:	2b00      	cmp	r3, #0
    bd84:	f000 80a1 	beq.w	beca <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    bd88:	2d00      	cmp	r5, #0
    bd8a:	f040 8130 	bne.w	bfee <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    bd8e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    bd92:	6820      	ldr	r0, [r4, #0]
    bd94:	6523      	str	r3, [r4, #80]	; 0x50
    bd96:	2100      	movs	r1, #0
    bd98:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    bd9a:	7362      	strb	r2, [r4, #13]
    bd9c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    bda0:	4620      	mov	r0, r4
    bda2:	4798      	blx	r3
    bda4:	7b63      	ldrb	r3, [r4, #13]
    bda6:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    bdaa:	6c25      	ldr	r5, [r4, #64]	; 0x40
    bdac:	9300      	str	r3, [sp, #0]
    bdae:	e094      	b.n	beda <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    bdb0:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    bdb4:	7b43      	ldrb	r3, [r0, #13]
    bdb6:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    bdba:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    bdbc:	4652      	mov	r2, sl
    bdbe:	eb16 060a 	adds.w	r6, r6, sl
    bdc2:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    bdc6:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    bdca:	415f      	adcs	r7, r3
    bdcc:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    bdd0:	2900      	cmp	r1, #0
    bdd2:	d03f      	beq.n	be54 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    bdd4:	f1ba 0f00 	cmp.w	sl, #0
    bdd8:	d139      	bne.n	be4e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    bdda:	2306      	movs	r3, #6
    bddc:	7323      	strb	r3, [r4, #12]
    bdde:	9900      	ldr	r1, [sp, #0]
    bde0:	69e3      	ldr	r3, [r4, #28]
    bde2:	e74b      	b.n	bc7c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    bde4:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    bde6:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    bde8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    bdec:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    bdf0:	2000      	movs	r0, #0
    bdf2:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    bdf4:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    bdf6:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    bdf8:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    bdfa:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    bdfc:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    bdfe:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    be00:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    be04:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    be08:	b005      	add	sp, #20
    be0a:	ecbd 8b02 	vpop	{d8}
    be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    be12:	2300      	movs	r3, #0
                m_moveState = MS_END;
    be14:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    be16:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    be18:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    be1a:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    be1e:	7322      	strb	r2, [r4, #12]
    be20:	69e3      	ldr	r3, [r4, #28]
    be22:	7b61      	ldrb	r1, [r4, #13]
    be24:	e72a      	b.n	bc7c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    be26:	2302      	movs	r3, #2
    be28:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    be2a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    be2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    be30:	eb05 0263 	add.w	r2, r5, r3, asr #1
    be34:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    be36:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    be38:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    be3c:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    be3e:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    be40:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    be44:	f280 80a2 	bge.w	bf8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    be48:	2d00      	cmp	r5, #0
    be4a:	f340 809f 	ble.w	bf8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    be4e:	9900      	ldr	r1, [sp, #0]
    be50:	69e3      	ldr	r3, [r4, #28]
    be52:	e713      	b.n	bc7c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    be54:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    be58:	4286      	cmp	r6, r0
    be5a:	eb77 0501 	sbcs.w	r5, r7, r1
    be5e:	da03      	bge.n	be68 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    be60:	2e01      	cmp	r6, #1
    be62:	f177 0500 	sbcs.w	r5, r7, #0
    be66:	daf2      	bge.n	be4e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    be68:	2500      	movs	r5, #0
    be6a:	1a31      	subs	r1, r6, r0
    be6c:	4628      	mov	r0, r5
    be6e:	f011 f8a5 	bl	1cfbc <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    be72:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    be74:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    be78:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    be7a:	fb00 9e03 	mla	lr, r0, r3, r9
    be7e:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    be80:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    be84:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    be88:	fb0e 330c 	mla	r3, lr, ip, r3
    be8c:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    be8e:	1a32      	subs	r2, r6, r0
    be90:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    be94:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    be98:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    be9a:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    be9e:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    bea2:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    bea4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    bea8:	f280 80a9 	bge.w	bffe <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    beac:	42a8      	cmp	r0, r5
    beae:	f340 80a6 	ble.w	bffe <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    beb2:	2a01      	cmp	r2, #1
    beb4:	f173 0100 	sbcs.w	r1, r3, #0
    beb8:	f2c0 80a1 	blt.w	bffe <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    bebc:	2004      	movs	r0, #4
    bebe:	461f      	mov	r7, r3
    bec0:	9900      	ldr	r1, [sp, #0]
    bec2:	7320      	strb	r0, [r4, #12]
    bec4:	4616      	mov	r6, r2
    bec6:	69e3      	ldr	r3, [r4, #28]
    bec8:	e6d8      	b.n	bc7c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    beca:	7b42      	ldrb	r2, [r0, #13]
    becc:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    bece:	4619      	mov	r1, r3
    bed0:	2000      	movs	r0, #0
    bed2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    bed6:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    bed8:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    beda:	4555      	cmp	r5, sl
    bedc:	f000 80db 	beq.w	c096 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    bee0:	dda1      	ble.n	be26 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    bee2:	2305      	movs	r3, #5
    bee4:	7323      	strb	r3, [r4, #12]
    bee6:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    beea:	e6f6      	b.n	bcda <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    beec:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    bef0:	4611      	mov	r1, r2
    bef2:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    bef4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    bef8:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    befa:	4613      	mov	r3, r2
    befc:	429f      	cmp	r7, r3
    befe:	bf08      	it	eq
    bf00:	428e      	cmpeq	r6, r1
    bf02:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    bf06:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    bf0a:	d00e      	beq.n	bf2a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    bf0c:	6803      	ldr	r3, [r0, #0]
    bf0e:	689b      	ldr	r3, [r3, #8]
    bf10:	4798      	blx	r3
    bf12:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    bf16:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    bf18:	2b00      	cmp	r3, #0
    bf1a:	f040 80ca 	bne.w	c0b2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    bf1e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    bf22:	e9cd 2300 	strd	r2, r3, [sp]
    bf26:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    bf2a:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    bf2e:	0fcb      	lsrs	r3, r1, #31
    bf30:	18c0      	adds	r0, r0, r3
    bf32:	464e      	mov	r6, r9
    bf34:	f141 0100 	adc.w	r1, r1, #0
    bf38:	17f7      	asrs	r7, r6, #31
    bf3a:	1049      	asrs	r1, r1, #1
    bf3c:	ea4f 0030 	mov.w	r0, r0, rrx
    bf40:	464a      	mov	r2, r9
    bf42:	463b      	mov	r3, r7
    bf44:	f010 ffea 	bl	1cf1c <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    bf48:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    bf4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    bf50:	464a      	mov	r2, r9
    bf52:	463b      	mov	r3, r7
    bf54:	fb8a 010a 	smull	r0, r1, sl, sl
    bf58:	f010 ffe0 	bl	1cf1c <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    bf5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bf60:	1a82      	subs	r2, r0, r2
    bf62:	eb61 0303 	sbc.w	r3, r1, r3
    bf66:	4610      	mov	r0, r2
    bf68:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    bf6a:	e9dd 2300 	ldrd	r2, r3, [sp]
    bf6e:	4282      	cmp	r2, r0
    bf70:	418b      	sbcs	r3, r1
    bf72:	db63      	blt.n	c03c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    bf74:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    bf78:	4555      	cmp	r5, sl
    bf7a:	f340 8091 	ble.w	c0a0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    bf7e:	2305      	movs	r3, #5
    bf80:	7323      	strb	r3, [r4, #12]
    bf82:	7b63      	ldrb	r3, [r4, #13]
    bf84:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    bf88:	9300      	str	r3, [sp, #0]
    bf8a:	e6a6      	b.n	bcda <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    bf8c:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    bf8e:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    bf92:	4691      	mov	r9, r2
    bf94:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    bf96:	461a      	mov	r2, r3
    bf98:	4629      	mov	r1, r5
    bf9a:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    bf9c:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    bfa0:	2000      	movs	r0, #0
    bfa2:	f011 f80b 	bl	1cfbc <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    bfa6:	4602      	mov	r2, r0
    bfa8:	fba2 0105 	umull	r0, r1, r2, r5
    bfac:	2300      	movs	r3, #0
    bfae:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    bfb2:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    bfb6:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    bfb8:	4642      	mov	r2, r8
    bfba:	464b      	mov	r3, r9
    bfbc:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    bfc0:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    bfc4:	f010 fffa 	bl	1cfbc <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    bfc8:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    bfcc:	0849      	lsrs	r1, r1, #1
    bfce:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    bfd2:	1a12      	subs	r2, r2, r0
    bfd4:	eb63 0301 	sbc.w	r3, r3, r1
    bfd8:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    bfdc:	2303      	movs	r3, #3
    bfde:	7323      	strb	r3, [r4, #12]
    bfe0:	e6ec      	b.n	bdbc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    bfe2:	7b43      	ldrb	r3, [r0, #13]
    bfe4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    bfe6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    bfea:	9300      	str	r3, [sp, #0]
    bfec:	e71d      	b.n	be2a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    bfee:	7b40      	ldrb	r0, [r0, #13]
    bff0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    bff4:	9000      	str	r0, [sp, #0]
    bff6:	4290      	cmp	r0, r2
    bff8:	f47f af6a 	bne.w	bed0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    bffc:	e6c9      	b.n	bd92 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    bffe:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    c000:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    c002:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    c004:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    c006:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c00a:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    c00c:	7322      	strb	r2, [r4, #12]
    c00e:	69e3      	ldr	r3, [r4, #28]
    c010:	e634      	b.n	bc7c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    c012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c016:	fb8a 010a 	smull	r0, r1, sl, sl
    c01a:	f010 ffcf 	bl	1cfbc <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c01e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    c022:	0849      	lsrs	r1, r1, #1
    c024:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c028:	1a12      	subs	r2, r2, r0
    c02a:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    c02e:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c030:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    c034:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    c036:	7320      	strb	r0, [r4, #12]
    c038:	69e3      	ldr	r3, [r4, #28]
    c03a:	e61f      	b.n	bc7c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c03c:	69a6      	ldr	r6, [r4, #24]
    c03e:	17f1      	asrs	r1, r6, #31
    c040:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    c042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c046:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    c048:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c04a:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    c04e:	4159      	adcs	r1, r3
    c050:	460b      	mov	r3, r1
    c052:	fb00 f107 	mul.w	r1, r0, r7
    c056:	fb09 1303 	mla	r3, r9, r3, r1
    c05a:	fba0 0109 	umull	r0, r1, r0, r9
    c05e:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    c060:	f010 ff1e 	bl	1cea0 <__aeabi_l2f>
    c064:	ee00 0a10 	vmov	s0, r0
    c068:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c070:	eeb1 8ac0 	vsqrt.f32	s16, s0
    c074:	d439      	bmi.n	c0ea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    c076:	ee18 0a10 	vmov	r0, s16
    c07a:	f010 ffb7 	bl	1cfec <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    c07e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    c082:	4282      	cmp	r2, r0
    c084:	f04f 0300 	mov.w	r3, #0
    c088:	eb73 0601 	sbcs.w	r6, r3, r1
    c08c:	bfb8      	it	lt
    c08e:	4610      	movlt	r0, r2
    c090:	6520      	str	r0, [r4, #80]	; 0x50
    c092:	4682      	mov	sl, r0
    c094:	e770      	b.n	bf78 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    c096:	2303      	movs	r3, #3
    c098:	7323      	strb	r3, [r4, #12]
    c09a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c09e:	e68d      	b.n	bdbc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    c0a0:	2302      	movs	r3, #2
    c0a2:	7323      	strb	r3, [r4, #12]
    c0a4:	7b63      	ldrb	r3, [r4, #13]
    c0a6:	9300      	str	r3, [sp, #0]
    c0a8:	e6bf      	b.n	be2a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    c0aa:	69c0      	ldr	r0, [r0, #28]
    c0ac:	69a3      	ldr	r3, [r4, #24]
    c0ae:	1ac0      	subs	r0, r0, r3
    c0b0:	e5d1      	b.n	bc56 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    c0b2:	7b63      	ldrb	r3, [r4, #13]
    c0b4:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    c0b8:	9300      	str	r3, [sp, #0]
    c0ba:	e609      	b.n	bcd0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    c0bc:	464a      	mov	r2, r9
    c0be:	17d3      	asrs	r3, r2, #31
    c0c0:	fb85 0105 	smull	r0, r1, r5, r5
    c0c4:	f010 ff2a 	bl	1cf1c <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    c0c8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    c0cc:	1049      	asrs	r1, r1, #1
    c0ce:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    c0d2:	1ab6      	subs	r6, r6, r2
    c0d4:	eb67 0703 	sbc.w	r7, r7, r3
    c0d8:	4286      	cmp	r6, r0
    c0da:	eb77 0301 	sbcs.w	r3, r7, r1
    c0de:	bfb4      	ite	lt
    c0e0:	2301      	movlt	r3, #1
    c0e2:	2300      	movge	r3, #0
    c0e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    c0e8:	e716      	b.n	bf18 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    c0ea:	f00f fcad 	bl	1ba48 <sqrtf>
    c0ee:	6c25      	ldr	r5, [r4, #64]	; 0x40
    c0f0:	e7c1      	b.n	c076 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    c0f2:	7b43      	ldrb	r3, [r0, #13]
    c0f4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c0f6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    c0fa:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    c0fe:	9300      	str	r3, [sp, #0]
    c100:	e5eb      	b.n	bcda <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    c102:	bf00      	nop

0000c104 <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    c104:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    c106:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    c108:	4916      	ldr	r1, [pc, #88]	; (c164 <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    c10a:	6001      	str	r1, [r0, #0]
    c10c:	2200      	movs	r2, #0
    c10e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    c112:	2501      	movs	r5, #1
    c114:	2102      	movs	r1, #2
    c116:	2600      	movs	r6, #0
    c118:	2700      	movs	r7, #0
    c11a:	f362 1486 	bfi	r4, r2, #6, #1
    c11e:	7404      	strb	r4, [r0, #16]
    c120:	6042      	str	r2, [r0, #4]
    c122:	6082      	str	r2, [r0, #8]
    c124:	7302      	strb	r2, [r0, #12]
    c126:	7342      	strb	r2, [r0, #13]
    c128:	6142      	str	r2, [r0, #20]
    c12a:	6182      	str	r2, [r0, #24]
    c12c:	61c2      	str	r2, [r0, #28]
    c12e:	f880 2020 	strb.w	r2, [r0, #32]
    c132:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    c136:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    c13a:	6282      	str	r2, [r0, #40]	; 0x28
    c13c:	6402      	str	r2, [r0, #64]	; 0x40
    c13e:	6442      	str	r2, [r0, #68]	; 0x44
    c140:	6502      	str	r2, [r0, #80]	; 0x50
    c142:	6642      	str	r2, [r0, #100]	; 0x64
    c144:	7385      	strb	r5, [r0, #14]
    c146:	6245      	str	r5, [r0, #36]	; 0x24
    c148:	6605      	str	r5, [r0, #96]	; 0x60
    c14a:	62c1      	str	r1, [r0, #44]	; 0x2c
    c14c:	6301      	str	r1, [r0, #48]	; 0x30
    c14e:	6681      	str	r1, [r0, #104]	; 0x68
    c150:	66c1      	str	r1, [r0, #108]	; 0x6c
    c152:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    c156:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    c15a:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    c15e:	bcf0      	pop	{r4, r5, r6, r7}
    c160:	4770      	bx	lr
    c162:	bf00      	nop
    c164:	00023df0 	.word	0x00023df0

0000c168 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    c168:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    c16a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    c16c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c16e:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    c170:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c172:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    c174:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    c176:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    c178:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    c17a:	2700      	movs	r7, #0
    c17c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c180:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    c182:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c184:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    c186:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    c188:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    c18a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    c18c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    c190:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    c192:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    c194:	b662      	cpsie	i
}
    c196:	bcd0      	pop	{r4, r6, r7}
    c198:	4770      	bx	lr
    c19a:	bf00      	nop
    c19c:	0000      	movs	r0, r0
	...

0000c1a0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    c1a0:	b510      	push	{r4, lr}
    c1a2:	4604      	mov	r4, r0
    if (decelMax != 0) {
    c1a4:	b191      	cbz	r1, c1cc <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    c1a6:	a312      	add	r3, pc, #72	; (adr r3, c1f0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1ac:	03c8      	lsls	r0, r1, #15
    c1ae:	0c49      	lsrs	r1, r1, #17
    c1b0:	f010 feb4 	bl	1cf1c <__aeabi_ldivmod>
    c1b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c1b6:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    c1b8:	f020 0201 	bic.w	r2, r0, #1
    c1bc:	bfb8      	it	lt
    c1be:	2302      	movlt	r3, #2
    c1c0:	4293      	cmp	r3, r2
    c1c2:	4618      	mov	r0, r3
    c1c4:	bfb8      	it	lt
    c1c6:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    c1c8:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c1ca:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    c1cc:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    c1ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c1d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    c1d2:	4293      	cmp	r3, r2
    c1d4:	bfb8      	it	lt
    c1d6:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    c1d8:	2100      	movs	r1, #0
    m_velocityMove = true;
    c1da:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    c1dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    c1de:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    c1e0:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    c1e4:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    c1e6:	b662      	cpsie	i
    c1e8:	bd10      	pop	{r4, pc}
    c1ea:	bf00      	nop
    c1ec:	f3af 8000 	nop.w
    c1f0:	017d7840 	.word	0x017d7840
    c1f4:	00000000 	.word	0x00000000

0000c1f8 <_ZN9ClearCore13StepGenerator6VelMaxEm>:
void StepGenerator::VelMax(uint32_t velMax) {
    c1f8:	b5d0      	push	{r4, r6, r7, lr}
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    c1fa:	f241 3288 	movw	r2, #5000	; 0x1388
void StepGenerator::VelMax(uint32_t velMax) {
    c1fe:	4604      	mov	r4, r0
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    c200:	2300      	movs	r3, #0
    c202:	03c8      	lsls	r0, r1, #15
    c204:	0c49      	lsrs	r1, r1, #17
    c206:	f010 fe89 	bl	1cf1c <__aeabi_ldivmod>
    c20a:	460f      	mov	r7, r1
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    c20c:	68a1      	ldr	r1, [r4, #8]
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    c20e:	4606      	mov	r6, r0
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    c210:	03ca      	lsls	r2, r1, #15
    velLim64 = min(velLim64, INT32_MAX);
    c212:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    c216:	0c4b      	lsrs	r3, r1, #17
    velLim64 = min(velLim64, INT32_MAX);
    c218:	4290      	cmp	r0, r2
    c21a:	f04f 0100 	mov.w	r1, #0
    c21e:	eb71 0e03 	sbcs.w	lr, r1, r3
    c222:	bfbc      	itt	lt
    c224:	4602      	movlt	r2, r0
    c226:	460b      	movlt	r3, r1
    c228:	4296      	cmp	r6, r2
    c22a:	eb77 0103 	sbcs.w	r1, r7, r3
    c22e:	bfbc      	itt	lt
    c230:	4632      	movlt	r2, r6
    c232:	463b      	movlt	r3, r7
    m_velLimitPendingQx = max(velLim64, 1);
    c234:	2a01      	cmp	r2, #1
    c236:	f173 0100 	sbcs.w	r1, r3, #0
    c23a:	bfb8      	it	lt
    c23c:	2201      	movlt	r2, #1
    c23e:	6622      	str	r2, [r4, #96]	; 0x60
    c240:	bdd0      	pop	{r4, r6, r7, pc}
    c242:	bf00      	nop
    c244:	0000      	movs	r0, r0
	...

0000c248 <_ZN9ClearCore13StepGenerator8AccelMaxEm>:
void StepGenerator::AccelMax(uint32_t accelMax) {
    c248:	460b      	mov	r3, r1
    c24a:	b510      	push	{r4, lr}
                          (SampleRateHz * SampleRateHz));
    c24c:	0c49      	lsrs	r1, r1, #17
void StepGenerator::AccelMax(uint32_t accelMax) {
    c24e:	4604      	mov	r4, r0
                          (SampleRateHz * SampleRateHz));
    c250:	03d8      	lsls	r0, r3, #15
    c252:	a307      	add	r3, pc, #28	; (adr r3, c270 <_ZN9ClearCore13StepGenerator8AccelMaxEm+0x28>)
    c254:	e9d3 2300 	ldrd	r2, r3, [r3]
    c258:	f010 fe60 	bl	1cf1c <__aeabi_ldivmod>
    accelLim32 &= ~1L;
    c25c:	f020 0001 	bic.w	r0, r0, #1
    m_accelLimitPendingQx = ConvertAccel(accelMax);
    c260:	2802      	cmp	r0, #2
    c262:	bfb8      	it	lt
    c264:	2002      	movlt	r0, #2
    c266:	66a0      	str	r0, [r4, #104]	; 0x68
    c268:	bd10      	pop	{r4, pc}
    c26a:	bf00      	nop
    c26c:	f3af 8000 	nop.w
    c270:	017d7840 	.word	0x017d7840
    c274:	00000000 	.word	0x00000000

0000c278 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    c278:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    c27a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    c27c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c27e:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    c280:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c282:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    c284:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    c286:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    c288:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    c28a:	2700      	movs	r7, #0
    c28c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c290:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    c292:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c294:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    c296:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    c298:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    c29a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    c29c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    c2a0:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    c2a2:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    c2a4:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    c2a6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c2aa:	03ca      	lsls	r2, r1, #15
    c2ac:	0c4b      	lsrs	r3, r1, #17
    c2ae:	4294      	cmp	r4, r2
    c2b0:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    c2b4:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    c2b6:	eb75 0103 	sbcs.w	r1, r5, r3
    c2ba:	bfbc      	itt	lt
    c2bc:	4622      	movlt	r2, r4
    c2be:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    c2c0:	2a01      	cmp	r2, #1
    c2c2:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    c2c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    c2c8:	bfbc      	itt	lt
    c2ca:	2201      	movlt	r2, #1
    c2cc:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    c2ce:	17e5      	asrs	r5, r4, #31
    c2d0:	4294      	cmp	r4, r2
    c2d2:	eb75 0103 	sbcs.w	r1, r5, r3
    c2d6:	bfb8      	it	lt
    c2d8:	4622      	movlt	r2, r4
    c2da:	6602      	str	r2, [r0, #96]	; 0x60
}
    c2dc:	bcf0      	pop	{r4, r5, r6, r7}
    c2de:	4770      	bx	lr

0000c2e0 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    c2e0:	6843      	ldr	r3, [r0, #4]
    c2e2:	b363      	cbz	r3, c33e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    c2e4:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    c2e6:	f013 0218 	ands.w	r2, r3, #24
    c2ea:	d12a      	bne.n	c342 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    c2ec:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    c2ee:	7c02      	ldrb	r2, [r0, #16]
    c2f0:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    c2f4:	b2d2      	uxtb	r2, r2
    c2f6:	4613      	mov	r3, r2
    c2f8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c2fc:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    c300:	b2db      	uxtb	r3, r3
    c302:	461a      	mov	r2, r3
    c304:	f3c3 1300 	ubfx	r3, r3, #4, #1
    c308:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    c30c:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    c30e:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    c310:	075a      	lsls	r2, r3, #29
    c312:	d514      	bpl.n	c33e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    c314:	7b42      	ldrb	r2, [r0, #13]
    c316:	b9e2      	cbnz	r2, c352 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    c318:	0719      	lsls	r1, r3, #28
    c31a:	d510      	bpl.n	c33e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    c31c:	f043 0301 	orr.w	r3, r3, #1
    c320:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    c322:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    c324:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    c326:	6b02      	ldr	r2, [r0, #48]	; 0x30
    c328:	4293      	cmp	r3, r2
    c32a:	bfb8      	it	lt
    c32c:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    c32e:	2100      	movs	r1, #0
    m_velocityMove = true;
    c330:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    c332:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    c334:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    c336:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    c33a:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    c33c:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    c33e:	2000      	movs	r0, #0
    c340:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    c342:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    c346:	f3c3 1341 	ubfx	r3, r3, #5, #2
    c34a:	1ad3      	subs	r3, r2, r3
    c34c:	bf18      	it	ne
    c34e:	2301      	movne	r3, #1
    c350:	e7cd      	b.n	c2ee <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    c352:	06da      	lsls	r2, r3, #27
    c354:	d5f3      	bpl.n	c33e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    c356:	f043 0302 	orr.w	r3, r3, #2
    c35a:	7403      	strb	r3, [r0, #16]
    c35c:	e7e1      	b.n	c322 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    c35e:	bf00      	nop

0000c360 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    c360:	4ba1      	ldr	r3, [pc, #644]	; (c5e8 <SystemInit+0x288>)
    c362:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    c366:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    c368:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    c36a:	691a      	ldr	r2, [r3, #16]
    c36c:	0792      	lsls	r2, r2, #30
    c36e:	d5fc      	bpl.n	c36a <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    c370:	4a9e      	ldr	r2, [pc, #632]	; (c5ec <SystemInit+0x28c>)
    c372:	4b9f      	ldr	r3, [pc, #636]	; (c5f0 <SystemInit+0x290>)
    c374:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    c376:	6853      	ldr	r3, [r2, #4]
    c378:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    c37c:	d1fb      	bne.n	c376 <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    c37e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    c382:	499a      	ldr	r1, [pc, #616]	; (c5ec <SystemInit+0x28c>)
    c384:	f363 1086 	bfi	r0, r3, #6, #1
    c388:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    c38c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    c390:	065b      	lsls	r3, r3, #25
    c392:	d4fb      	bmi.n	c38c <SystemInit+0x2c>
    c394:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    c398:	4a94      	ldr	r2, [pc, #592]	; (c5ec <SystemInit+0x28c>)
    c39a:	2005      	movs	r0, #5
    c39c:	f360 0303 	bfi	r3, r0, #0, #4
    c3a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    c3a4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    c3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c3ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    c3b0:	6853      	ldr	r3, [r2, #4]
    c3b2:	f013 0f14 	tst.w	r3, #20
    c3b6:	d1fb      	bne.n	c3b0 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    c3b8:	4b8b      	ldr	r3, [pc, #556]	; (c5e8 <SystemInit+0x288>)
    c3ba:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    c3bc:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    c3be:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    c3c0:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    c3c2:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    c3c4:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    c3c6:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    c3ca:	6913      	ldr	r3, [r2, #16]
    c3cc:	01df      	lsls	r7, r3, #7
    c3ce:	d4fc      	bmi.n	c3ca <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    c3d0:	4a86      	ldr	r2, [pc, #536]	; (c5ec <SystemInit+0x28c>)
    c3d2:	f44f 7384 	mov.w	r3, #264	; 0x108
    c3d6:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    c3d8:	6853      	ldr	r3, [r2, #4]
    c3da:	f013 0304 	ands.w	r3, r3, #4
    c3de:	d1fb      	bne.n	c3d8 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    c3e0:	4884      	ldr	r0, [pc, #528]	; (c5f4 <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    c3e2:	4982      	ldr	r1, [pc, #520]	; (c5ec <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    c3e4:	2401      	movs	r4, #1
    c3e6:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    c3e8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    c3ec:	f363 1086 	bfi	r0, r3, #6, #1
    c3f0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    c3f4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    c3f8:	065e      	lsls	r6, r3, #25
    c3fa:	d4fb      	bmi.n	c3f4 <SystemInit+0x94>
    c3fc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    c400:	4a7a      	ldr	r2, [pc, #488]	; (c5ec <SystemInit+0x28c>)
    c402:	2005      	movs	r0, #5
    c404:	f360 0303 	bfi	r3, r0, #0, #4
    c408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    c40c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    c410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    c418:	6853      	ldr	r3, [r2, #4]
    c41a:	f013 0314 	ands.w	r3, r3, #20
    c41e:	d1fb      	bne.n	c418 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    c420:	4871      	ldr	r0, [pc, #452]	; (c5e8 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    c422:	4972      	ldr	r1, [pc, #456]	; (c5ec <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    c424:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    c426:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    c428:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    c42a:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    c42c:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    c42e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    c432:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    c436:	f363 1086 	bfi	r0, r3, #6, #1
    c43a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    c43e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    c442:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c446:	2b00      	cmp	r3, #0
    c448:	d1f9      	bne.n	c43e <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    c44a:	4c67      	ldr	r4, [pc, #412]	; (c5e8 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    c44c:	486a      	ldr	r0, [pc, #424]	; (c5f8 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    c44e:	4a67      	ldr	r2, [pc, #412]	; (c5ec <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    c450:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    c452:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    c454:	6853      	ldr	r3, [r2, #4]
    c456:	065d      	lsls	r5, r3, #25
    c458:	d4fc      	bmi.n	c454 <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    c45a:	4b66      	ldr	r3, [pc, #408]	; (c5f4 <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    c45c:	4967      	ldr	r1, [pc, #412]	; (c5fc <SystemInit+0x29c>)
    c45e:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    c460:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    c462:	4e67      	ldr	r6, [pc, #412]	; (c600 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    c464:	4d67      	ldr	r5, [pc, #412]	; (c604 <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    c466:	4c68      	ldr	r4, [pc, #416]	; (c608 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    c468:	4960      	ldr	r1, [pc, #384]	; (c5ec <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    c46a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    c46e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    c470:	6998      	ldr	r0, [r3, #24]
    c472:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    c476:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    c478:	6958      	ldr	r0, [r3, #20]
    c47a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c47e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    c480:	6998      	ldr	r0, [r3, #24]
    c482:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    c486:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    c488:	6998      	ldr	r0, [r3, #24]
    c48a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    c48e:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    c490:	69d8      	ldr	r0, [r3, #28]
    c492:	f040 0020 	orr.w	r0, r0, #32
    c496:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    c498:	6918      	ldr	r0, [r3, #16]
    c49a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    c49e:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    c4a0:	69d8      	ldr	r0, [r3, #28]
    c4a2:	f040 0004 	orr.w	r0, r0, #4
    c4a6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    c4a8:	6a18      	ldr	r0, [r3, #32]
    c4aa:	f040 0001 	orr.w	r0, r0, #1
    c4ae:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    c4b0:	6a18      	ldr	r0, [r3, #32]
    c4b2:	f040 0008 	orr.w	r0, r0, #8
    c4b6:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    c4b8:	6a18      	ldr	r0, [r3, #32]
    c4ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c4be:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    c4c0:	69d8      	ldr	r0, [r3, #28]
    c4c2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    c4c6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    c4c8:	6958      	ldr	r0, [r3, #20]
    c4ca:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    c4ce:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    c4d0:	6a18      	ldr	r0, [r3, #32]
    c4d2:	f040 0020 	orr.w	r0, r0, #32
    c4d6:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    c4d8:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    c4da:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    c4de:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    c4e0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    c4e4:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    c4e6:	684b      	ldr	r3, [r1, #4]
    c4e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    c4ec:	d1fb      	bne.n	c4e6 <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    c4ee:	4a47      	ldr	r2, [pc, #284]	; (c60c <SystemInit+0x2ac>)
    c4f0:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    c4f2:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    c4f6:	4a3d      	ldr	r2, [pc, #244]	; (c5ec <SystemInit+0x28c>)
    c4f8:	f363 1086 	bfi	r0, r3, #6, #1
    c4fc:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    c500:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    c504:	065c      	lsls	r4, r3, #25
    c506:	d4fb      	bmi.n	c500 <SystemInit+0x1a0>
    c508:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    c50c:	4937      	ldr	r1, [pc, #220]	; (c5ec <SystemInit+0x28c>)
    c50e:	2006      	movs	r0, #6
    c510:	f360 0303 	bfi	r3, r0, #0, #4
    c514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    c518:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    c51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    c524:	684b      	ldr	r3, [r1, #4]
    c526:	f013 0318 	ands.w	r3, r3, #24
    c52a:	d1fb      	bne.n	c524 <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    c52c:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    c530:	4a2e      	ldr	r2, [pc, #184]	; (c5ec <SystemInit+0x28c>)
    c532:	f363 1086 	bfi	r0, r3, #6, #1
    c536:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    c53a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    c53e:	0658      	lsls	r0, r3, #25
    c540:	d4fb      	bmi.n	c53a <SystemInit+0x1da>
    c542:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    c546:	4929      	ldr	r1, [pc, #164]	; (c5ec <SystemInit+0x28c>)
    c548:	2006      	movs	r0, #6
    c54a:	f360 0303 	bfi	r3, r0, #0, #4
    c54e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    c552:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    c556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c55a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    c55e:	684b      	ldr	r3, [r1, #4]
    c560:	f013 0318 	ands.w	r3, r3, #24
    c564:	d1fb      	bne.n	c55e <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    c566:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    c56a:	4a20      	ldr	r2, [pc, #128]	; (c5ec <SystemInit+0x28c>)
    c56c:	f363 1086 	bfi	r0, r3, #6, #1
    c570:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    c574:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    c578:	0659      	lsls	r1, r3, #25
    c57a:	d4fb      	bmi.n	c574 <SystemInit+0x214>
    c57c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    c580:	491a      	ldr	r1, [pc, #104]	; (c5ec <SystemInit+0x28c>)
    c582:	2006      	movs	r0, #6
    c584:	f360 0303 	bfi	r3, r0, #0, #4
    c588:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    c58c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    c590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c594:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    c598:	684b      	ldr	r3, [r1, #4]
    c59a:	f013 0318 	ands.w	r3, r3, #24
    c59e:	d1fb      	bne.n	c598 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    c5a0:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    c5a4:	4a11      	ldr	r2, [pc, #68]	; (c5ec <SystemInit+0x28c>)
    c5a6:	f363 1086 	bfi	r0, r3, #6, #1
    c5aa:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    c5ae:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    c5b2:	065b      	lsls	r3, r3, #25
    c5b4:	d4fb      	bmi.n	c5ae <SystemInit+0x24e>
    c5b6:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    c5ba:	490c      	ldr	r1, [pc, #48]	; (c5ec <SystemInit+0x28c>)
    c5bc:	2006      	movs	r0, #6
    c5be:	f360 0303 	bfi	r3, r0, #0, #4
    c5c2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    c5c6:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    c5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c5ce:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    c5d2:	684b      	ldr	r3, [r1, #4]
    c5d4:	f013 0f18 	tst.w	r3, #24
    c5d8:	d1fb      	bne.n	c5d2 <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    c5da:	4a04      	ldr	r2, [pc, #16]	; (c5ec <SystemInit+0x28c>)
    c5dc:	6853      	ldr	r3, [r2, #4]
    c5de:	2b00      	cmp	r3, #0
    c5e0:	d1fc      	bne.n	c5dc <SystemInit+0x27c>
        continue;
    }
    return;
}
    c5e2:	bcf0      	pop	{r4, r5, r6, r7}
    c5e4:	4770      	bx	lr
    c5e6:	bf00      	nop
    c5e8:	40001000 	.word	0x40001000
    c5ec:	40001c00 	.word	0x40001c00
    c5f0:	00190301 	.word	0x00190301
    c5f4:	40000800 	.word	0x40000800
    c5f8:	00020107 	.word	0x00020107
    c5fc:	00320b01 	.word	0x00320b01
    c600:	41006000 	.word	0x41006000
    c604:	e000ed00 	.word	0xe000ed00
    c608:	003a0108 	.word	0x003a0108
    c60c:	000c0108 	.word	0x000c0108

0000c610 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    c610:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    c612:	4a0e      	ldr	r2, [pc, #56]	; (c64c <GClkFreqUpdate+0x3c>)
    c614:	f100 0408 	add.w	r4, r0, #8
    c618:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    c61c:	f003 030f 	and.w	r3, r3, #15
    c620:	2b01      	cmp	r3, #1
    c622:	d001      	beq.n	c628 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    c624:	bc70      	pop	{r4, r5, r6}
    c626:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    c628:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    c62c:	4d08      	ldr	r5, [pc, #32]	; (c650 <GClkFreqUpdate+0x40>)
    c62e:	fbb5 f1f1 	udiv	r1, r5, r1
    c632:	b289      	uxth	r1, r1
    c634:	f361 461f 	bfi	r6, r1, #16, #16
    c638:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    c63c:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    c63e:	6851      	ldr	r1, [r2, #4]
    c640:	f3c1 018b 	ubfx	r1, r1, #2, #12
    c644:	4219      	tst	r1, r3
    c646:	d1fa      	bne.n	c63e <GClkFreqUpdate+0x2e>
}
    c648:	bc70      	pop	{r4, r5, r6}
    c64a:	4770      	bx	lr
    c64c:	40001c00 	.word	0x40001c00
    c650:	017d7840 	.word	0x017d7840

0000c654 <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    c654:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    c656:	4911      	ldr	r1, [pc, #68]	; (c69c <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    c658:	4b11      	ldr	r3, [pc, #68]	; (c6a0 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    c65a:	4a12      	ldr	r2, [pc, #72]	; (c6a4 <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    c65c:	6001      	str	r1, [r0, #0]
    c65e:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    c660:	4604      	mov	r4, r0
      m_stepsLast(0) {
    c662:	6042      	str	r2, [r0, #4]
    c664:	6083      	str	r3, [r0, #8]
    c666:	60c5      	str	r5, [r0, #12]
    c668:	6105      	str	r5, [r0, #16]
    c66a:	6145      	str	r5, [r0, #20]
    c66c:	8305      	strh	r5, [r0, #24]
    c66e:	4629      	mov	r1, r5
    c670:	22c8      	movs	r2, #200	; 0xc8
    c672:	301c      	adds	r0, #28
    c674:	f012 fce2 	bl	1f03c <memset>
    c678:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    c67c:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    c680:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    c684:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    c688:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    c68c:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    c690:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    c694:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    c698:	4620      	mov	r0, r4
    c69a:	bd38      	pop	{r3, r4, r5, pc}
    c69c:	00023dfc 	.word	0x00023dfc
    c6a0:	00023e1c 	.word	0x00023e1c
    c6a4:	00023e0c 	.word	0x00023e0c

0000c6a8 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    c6a8:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    c6aa:	4a12      	ldr	r2, [pc, #72]	; (c6f4 <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    c6ac:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    c6b0:	f36f 1386 	bfc	r3, #6, #1
    c6b4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    c6b8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    c6bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c6c0:	2b00      	cmp	r3, #0
    c6c2:	d1f9      	bne.n	c6b8 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    c6c4:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    c6c8:	490b      	ldr	r1, [pc, #44]	; (c6f8 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    c6ca:	4c0c      	ldr	r4, [pc, #48]	; (c6fc <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    c6cc:	4d0c      	ldr	r5, [pc, #48]	; (c700 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    c6ce:	f363 0003 	bfi	r0, r3, #0, #4
    c6d2:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    c6d6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    c6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c6de:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    c6e2:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    c6e4:	69cb      	ldr	r3, [r1, #28]
    c6e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c6ea:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    c6ec:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    c6ee:	bc30      	pop	{r4, r5}
    c6f0:	4770      	bx	lr
    c6f2:	bf00      	nop
    c6f4:	40001c00 	.word	0x40001c00
    c6f8:	40000800 	.word	0x40000800
    c6fc:	42001c00 	.word	0x42001c00
    c700:	07030000 	.word	0x07030000

0000c704 <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    c704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    c706:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    c70a:	2b00      	cmp	r3, #0
    c70c:	d038      	beq.n	c780 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    c70e:	4a29      	ldr	r2, [pc, #164]	; (c7b4 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    c710:	2360      	movs	r3, #96	; 0x60
    c712:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    c714:	6913      	ldr	r3, [r2, #16]
    c716:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    c71a:	d1fb      	bne.n	c714 <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    c71c:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    c71e:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    c720:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    c724:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    c728:	1aaa      	subs	r2, r5, r2
    c72a:	b212      	sxth	r2, r2
    c72c:	4604      	mov	r4, r0
    c72e:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    c732:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    c734:	bb29      	cbnz	r1, c782 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    c736:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c738:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    c73c:	f3bf 8f5b 	dmb	ish
    c740:	e853 6f00 	ldrex	r6, [r3]
    c744:	4416      	add	r6, r2
    c746:	e843 6100 	strex	r1, r6, [r3]
    c74a:	2900      	cmp	r1, #0
    c74c:	d1f8      	bne.n	c740 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    c74e:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c752:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c756:	4d18      	ldr	r5, [pc, #96]	; (c7b8 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    c758:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    c75c:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c75e:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c760:	fb85 2503 	smull	r2, r5, r5, r3
    c764:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c766:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c768:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c76c:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c76e:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c770:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c774:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c778:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    c77a:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c77c:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    c780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c782:	68c6      	ldr	r6, [r0, #12]
    c784:	f3bf 8f5b 	dmb	ish
    c788:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    c78c:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c790:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    c792:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c796:	4432      	add	r2, r6
    c798:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c79a:	4808      	ldr	r0, [pc, #32]	; (c7bc <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c79c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c7a0:	f991 1003 	ldrsb.w	r1, [r1, #3]
    c7a4:	6800      	ldr	r0, [r0, #0]
    c7a6:	2201      	movs	r2, #1
    c7a8:	f003 ffee 	bl	10788 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    c7ac:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    c7b0:	e7c1      	b.n	c736 <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    c7b2:	bf00      	nop
    c7b4:	42001c00 	.word	0x42001c00
    c7b8:	51eb851f 	.word	0x51eb851f
    c7bc:	20001f08 	.word	0x20001f08

0000c7c0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c7c2:	780d      	ldrb	r5, [r1, #0]
    c7c4:	f3c5 1441 	ubfx	r4, r5, #5, #2
    c7c8:	2c01      	cmp	r4, #1
{
    c7ca:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c7cc:	d152      	bne.n	c874 <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c7ce:	4e30      	ldr	r6, [pc, #192]	; (c890 <cdcdf_acm_req+0xd0>)
    c7d0:	888c      	ldrh	r4, [r1, #4]
    c7d2:	7833      	ldrb	r3, [r6, #0]
    c7d4:	42a3      	cmp	r3, r4
    c7d6:	d002      	beq.n	c7de <cdcdf_acm_req+0x1e>
    c7d8:	7873      	ldrb	r3, [r6, #1]
    c7da:	42a3      	cmp	r3, r4
    c7dc:	d14a      	bne.n	c874 <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c7de:	062b      	lsls	r3, r5, #24
    c7e0:	4617      	mov	r7, r2
    c7e2:	4606      	mov	r6, r0
    c7e4:	460c      	mov	r4, r1
    c7e6:	d438      	bmi.n	c85a <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    c7e8:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c7ea:	f000 fc7f 	bl	d0ec <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    c7ee:	7863      	ldrb	r3, [r4, #1]
    c7f0:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c7f2:	4601      	mov	r1, r0
	switch (req->bRequest) {
    c7f4:	d00f      	beq.n	c816 <cdcdf_acm_req+0x56>
    c7f6:	2b22      	cmp	r3, #34	; 0x22
    c7f8:	d128      	bne.n	c84c <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    c7fa:	2300      	movs	r3, #0
    c7fc:	461a      	mov	r2, r3
    c7fe:	4619      	mov	r1, r3
    c800:	4618      	mov	r0, r3
    c802:	f000 fc07 	bl	d014 <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    c806:	4b23      	ldr	r3, [pc, #140]	; (c894 <cdcdf_acm_req+0xd4>)
    c808:	681b      	ldr	r3, [r3, #0]
    c80a:	b31b      	cbz	r3, c854 <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    c80c:	8860      	ldrh	r0, [r4, #2]
    c80e:	4798      	blx	r3
		return ERR_NONE;
    c810:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    c812:	b003      	add	sp, #12
    c814:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c816:	2d07      	cmp	r5, #7
    c818:	d136      	bne.n	c888 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    c81a:	b37f      	cbz	r7, c87c <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c81c:	4b1e      	ldr	r3, [pc, #120]	; (c898 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c81e:	6800      	ldr	r0, [r0, #0]
    c820:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c822:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c824:	888a      	ldrh	r2, [r1, #4]
    c826:	7989      	ldrb	r1, [r1, #6]
    c828:	f88d 1006 	strb.w	r1, [sp, #6]
    c82c:	466c      	mov	r4, sp
    c82e:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c832:	b113      	cbz	r3, c83a <cdcdf_acm_req+0x7a>
    c834:	4668      	mov	r0, sp
    c836:	4798      	blx	r3
    c838:	b160      	cbz	r0, c854 <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c83a:	e894 0003 	ldmia.w	r4, {r0, r1}
    c83e:	4b17      	ldr	r3, [pc, #92]	; (c89c <cdcdf_acm_req+0xdc>)
    c840:	0c0a      	lsrs	r2, r1, #16
    c842:	6018      	str	r0, [r3, #0]
    c844:	8099      	strh	r1, [r3, #4]
    c846:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    c848:	2000      	movs	r0, #0
    c84a:	e001      	b.n	c850 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    c84c:	f06f 000c 	mvn.w	r0, #12
}
    c850:	b003      	add	sp, #12
    c852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    c854:	2000      	movs	r0, #0
}
    c856:	b003      	add	sp, #12
    c858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    c85a:	2a01      	cmp	r2, #1
    c85c:	d0fa      	beq.n	c854 <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    c85e:	784b      	ldrb	r3, [r1, #1]
    c860:	2b21      	cmp	r3, #33	; 0x21
    c862:	d1f3      	bne.n	c84c <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c864:	88ca      	ldrh	r2, [r1, #6]
    c866:	2a07      	cmp	r2, #7
    c868:	d10e      	bne.n	c888 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c86a:	2300      	movs	r3, #0
    c86c:	490b      	ldr	r1, [pc, #44]	; (c89c <cdcdf_acm_req+0xdc>)
    c86e:	f000 fbd1 	bl	d014 <usbdc_xfer>
    c872:	e7ed      	b.n	c850 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    c874:	f06f 0009 	mvn.w	r0, #9
}
    c878:	b003      	add	sp, #12
    c87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c87c:	463b      	mov	r3, r7
    c87e:	462a      	mov	r2, r5
    c880:	4630      	mov	r0, r6
    c882:	f000 fbc7 	bl	d014 <usbdc_xfer>
    c886:	e7e3      	b.n	c850 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    c888:	f04f 30ff 	mov.w	r0, #4294967295
    c88c:	e7e0      	b.n	c850 <cdcdf_acm_req+0x90>
    c88e:	bf00      	nop
    c890:	20001c10 	.word	0x20001c10
    c894:	20001c18 	.word	0x20001c18
    c898:	20001c1c 	.word	0x20001c1c
    c89c:	20001c20 	.word	0x20001c20

0000c8a0 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    c8a0:	2901      	cmp	r1, #1
{
    c8a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c8a6:	4616      	mov	r6, r2
	switch (ctrl) {
    c8a8:	d008      	beq.n	c8bc <cdcdf_acm_ctrl+0x1c>
    c8aa:	d314      	bcc.n	c8d6 <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    c8ac:	2902      	cmp	r1, #2
    c8ae:	bf0c      	ite	eq
    c8b0:	f06f 001a 	mvneq.w	r0, #26
    c8b4:	f06f 000c 	mvnne.w	r0, #12
    c8b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c8bc:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    c8be:	2a00      	cmp	r2, #0
    c8c0:	d047      	beq.n	c952 <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c8c2:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c8c4:	795b      	ldrb	r3, [r3, #5]
    c8c6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    c8ca:	2b02      	cmp	r3, #2
    c8cc:	d041      	beq.n	c952 <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    c8ce:	f06f 0009 	mvn.w	r0, #9
    c8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    c8d6:	6813      	ldr	r3, [r2, #0]
    c8d8:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d0f7      	beq.n	c8ce <cdcdf_acm_ctrl+0x2e>
    c8de:	f107 38ff 	add.w	r8, r7, #4294967295
    c8e2:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c8e6:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    c8e8:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c8ea:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    c8ee:	2a02      	cmp	r2, #2
    c8f0:	d1ed      	bne.n	c8ce <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c8f2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    c8f6:	4291      	cmp	r1, r2
    c8f8:	d061      	beq.n	c9be <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c8fa:	2aff      	cmp	r2, #255	; 0xff
    c8fc:	d15b      	bne.n	c9b6 <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c8fe:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c902:	4618      	mov	r0, r3
    c904:	6871      	ldr	r1, [r6, #4]
    c906:	2205      	movs	r2, #5
    c908:	f000 fc00 	bl	d10c <usb_find_desc>
		while (NULL != ep) {
    c90c:	4604      	mov	r4, r0
    c90e:	b980      	cbnz	r0, c932 <cdcdf_acm_ctrl+0x92>
    c910:	e041      	b.n	c996 <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c912:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c914:	bf4c      	ite	mi
    c916:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c91a:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c91c:	4628      	mov	r0, r5
    c91e:	f000 feaf 	bl	d680 <usb_d_ep_enable>
			desc->sod = ep;
    c922:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    c924:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c926:	6871      	ldr	r1, [r6, #4]
    c928:	4420      	add	r0, r4
    c92a:	f000 fc09 	bl	d140 <usb_find_ep_desc>
		while (NULL != ep) {
    c92e:	4604      	mov	r4, r0
    c930:	b388      	cbz	r0, c996 <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    c932:	7963      	ldrb	r3, [r4, #5]
    c934:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    c936:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c938:	78e1      	ldrb	r1, [r4, #3]
    c93a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    c93e:	b292      	uxth	r2, r2
    c940:	4628      	mov	r0, r5
    c942:	f000 fe4b 	bl	d5dc <usb_d_ep_init>
    c946:	2800      	cmp	r0, #0
    c948:	d0e3      	beq.n	c912 <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    c94a:	f06f 0013 	mvn.w	r0, #19
}
    c94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    c952:	7823      	ldrb	r3, [r4, #0]
    c954:	2bff      	cmp	r3, #255	; 0xff
    c956:	d007      	beq.n	c968 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    c958:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    c95a:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c95c:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c95e:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    c960:	d002      	beq.n	c968 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c962:	f000 fe71 	bl	d648 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c966:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    c968:	7863      	ldrb	r3, [r4, #1]
    c96a:	2bff      	cmp	r3, #255	; 0xff
    c96c:	d007      	beq.n	c97e <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    c96e:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    c970:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c972:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c974:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    c976:	d002      	beq.n	c97e <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c978:	f000 fe66 	bl	d648 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c97c:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    c97e:	7920      	ldrb	r0, [r4, #4]
    c980:	28ff      	cmp	r0, #255	; 0xff
    c982:	d003      	beq.n	c98c <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    c984:	f000 fe60 	bl	d648 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    c988:	23ff      	movs	r3, #255	; 0xff
    c98a:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    c98c:	4b0f      	ldr	r3, [pc, #60]	; (c9cc <cdcdf_acm_ctrl+0x12c>)
    c98e:	2000      	movs	r0, #0
    c990:	7158      	strb	r0, [r3, #5]
    c992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c996:	6833      	ldr	r3, [r6, #0]
    c998:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    c99a:	7818      	ldrb	r0, [r3, #0]
    c99c:	2204      	movs	r2, #4
    c99e:	4418      	add	r0, r3
    c9a0:	f000 fbb4 	bl	d10c <usb_find_desc>
	for (i = 0; i < 2; i++) {
    c9a4:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c9a6:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    c9a8:	d10d      	bne.n	c9c6 <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    c9aa:	4b08      	ldr	r3, [pc, #32]	; (c9cc <cdcdf_acm_ctrl+0x12c>)
    c9ac:	2201      	movs	r2, #1
    c9ae:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c9b0:	2000      	movs	r0, #0
    c9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    c9b6:	f06f 001b 	mvn.w	r0, #27
    c9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    c9be:	f06f 0011 	mvn.w	r0, #17
    c9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d18d      	bne.n	c8e6 <cdcdf_acm_ctrl+0x46>
    c9ca:	e780      	b.n	c8ce <cdcdf_acm_ctrl+0x2e>
    c9cc:	20001c10 	.word	0x20001c10

0000c9d0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c9d0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    c9d2:	f000 fb91 	bl	d0f8 <usbdc_get_state>
    c9d6:	2801      	cmp	r0, #1
    c9d8:	d80d      	bhi.n	c9f6 <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c9da:	4b08      	ldr	r3, [pc, #32]	; (c9fc <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c9dc:	4a08      	ldr	r2, [pc, #32]	; (ca00 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c9de:	4909      	ldr	r1, [pc, #36]	; (ca04 <cdcdf_acm_init+0x34>)
    c9e0:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    c9e2:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c9e4:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    c9e6:	f000 fb61 	bl	d0ac <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c9ea:	4907      	ldr	r1, [pc, #28]	; (ca08 <cdcdf_acm_init+0x38>)
    c9ec:	2001      	movs	r0, #1
    c9ee:	f000 fb1f 	bl	d030 <usbdc_register_handler>
	return ERR_NONE;
    c9f2:	2000      	movs	r0, #0
    c9f4:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    c9f6:	f06f 0010 	mvn.w	r0, #16
}
    c9fa:	bd08      	pop	{r3, pc}
    c9fc:	20001c04 	.word	0x20001c04
    ca00:	20001c10 	.word	0x20001c10
    ca04:	0000c8a1 	.word	0x0000c8a1
    ca08:	200000e4 	.word	0x200000e4

0000ca0c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    ca0c:	4b08      	ldr	r3, [pc, #32]	; (ca30 <cdcdf_acm_read+0x24>)
{
    ca0e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    ca10:	795c      	ldrb	r4, [r3, #5]
    ca12:	b13c      	cbz	r4, ca24 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ca14:	460a      	mov	r2, r1
}
    ca16:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ca1a:	4601      	mov	r1, r0
    ca1c:	7918      	ldrb	r0, [r3, #4]
    ca1e:	2300      	movs	r3, #0
    ca20:	f000 baf8 	b.w	d014 <usbdc_xfer>
}
    ca24:	f06f 0010 	mvn.w	r0, #16
    ca28:	f85d 4b04 	ldr.w	r4, [sp], #4
    ca2c:	4770      	bx	lr
    ca2e:	bf00      	nop
    ca30:	20001c10 	.word	0x20001c10

0000ca34 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    ca34:	4b08      	ldr	r3, [pc, #32]	; (ca58 <cdcdf_acm_write+0x24>)
{
    ca36:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    ca38:	795c      	ldrb	r4, [r3, #5]
    ca3a:	b13c      	cbz	r4, ca4c <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ca3c:	460a      	mov	r2, r1
}
    ca3e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ca42:	4601      	mov	r1, r0
    ca44:	78d8      	ldrb	r0, [r3, #3]
    ca46:	2301      	movs	r3, #1
    ca48:	f000 bae4 	b.w	d014 <usbdc_xfer>
}
    ca4c:	f06f 0010 	mvn.w	r0, #16
    ca50:	f85d 4b04 	ldr.w	r4, [sp], #4
    ca54:	4770      	bx	lr
    ca56:	bf00      	nop
    ca58:	20001c10 	.word	0x20001c10

0000ca5c <cdcdf_acm_stop_xfer>:
{
    ca5c:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    ca5e:	4c04      	ldr	r4, [pc, #16]	; (ca70 <cdcdf_acm_stop_xfer+0x14>)
    ca60:	78e0      	ldrb	r0, [r4, #3]
    ca62:	f000 fecb 	bl	d7fc <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    ca66:	7920      	ldrb	r0, [r4, #4]
}
    ca68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    ca6c:	f000 bec6 	b.w	d7fc <usb_d_ep_abort>
    ca70:	20001c10 	.word	0x20001c10

0000ca74 <cdcdf_acm_register_callback>:
{
    ca74:	b508      	push	{r3, lr}
	switch (cb_type) {
    ca76:	2803      	cmp	r0, #3
    ca78:	d81b      	bhi.n	cab2 <cdcdf_acm_register_callback+0x3e>
    ca7a:	e8df f000 	tbb	[pc, r0]
    ca7e:	0a12      	.short	0x0a12
    ca80:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    ca82:	4b0d      	ldr	r3, [pc, #52]	; (cab8 <cdcdf_acm_register_callback+0x44>)
    ca84:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    ca86:	2000      	movs	r0, #0
		break;
    ca88:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    ca8a:	4b0c      	ldr	r3, [pc, #48]	; (cabc <cdcdf_acm_register_callback+0x48>)
    ca8c:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    ca8e:	2000      	movs	r0, #0
		break;
    ca90:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    ca92:	4b0b      	ldr	r3, [pc, #44]	; (cac0 <cdcdf_acm_register_callback+0x4c>)
    ca94:	460a      	mov	r2, r1
    ca96:	78d8      	ldrb	r0, [r3, #3]
    ca98:	2102      	movs	r1, #2
    ca9a:	f000 ff05 	bl	d8a8 <usb_d_ep_register_callback>
	return ERR_NONE;
    ca9e:	2000      	movs	r0, #0
		break;
    caa0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    caa2:	4b07      	ldr	r3, [pc, #28]	; (cac0 <cdcdf_acm_register_callback+0x4c>)
    caa4:	460a      	mov	r2, r1
    caa6:	7918      	ldrb	r0, [r3, #4]
    caa8:	2102      	movs	r1, #2
    caaa:	f000 fefd 	bl	d8a8 <usb_d_ep_register_callback>
	return ERR_NONE;
    caae:	2000      	movs	r0, #0
		break;
    cab0:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    cab2:	f06f 000c 	mvn.w	r0, #12
}
    cab6:	bd08      	pop	{r3, pc}
    cab8:	20001c18 	.word	0x20001c18
    cabc:	20001c1c 	.word	0x20001c1c
    cac0:	20001c10 	.word	0x20001c10

0000cac4 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    cac4:	4b01      	ldr	r3, [pc, #4]	; (cacc <cdcdf_acm_is_enabled+0x8>)
}
    cac6:	7958      	ldrb	r0, [r3, #5]
    cac8:	4770      	bx	lr
    caca:	bf00      	nop
    cacc:	20001c10 	.word	0x20001c10

0000cad0 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    cad0:	4800      	ldr	r0, [pc, #0]	; (cad4 <cdcdf_acm_get_line_coding+0x4>)
    cad2:	4770      	bx	lr
    cad4:	20001c20 	.word	0x20001c20

0000cad8 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cad8:	4b05      	ldr	r3, [pc, #20]	; (caf0 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cada:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cadc:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    cade:	b12c      	cbz	r4, caec <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    cae0:	6863      	ldr	r3, [r4, #4]
    cae2:	b103      	cbz	r3, cae6 <usbd_sof_cb+0xe>
			sof->cb();
    cae4:	4798      	blx	r3
		sof = sof->next;
    cae6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    cae8:	2c00      	cmp	r4, #0
    caea:	d1f9      	bne.n	cae0 <usbd_sof_cb+0x8>
    caec:	bd10      	pop	{r4, pc}
    caee:	bf00      	nop
    caf0:	20001c28 	.word	0x20001c28

0000caf4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    caf4:	b538      	push	{r3, r4, r5, lr}
    caf6:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    caf8:	b189      	cbz	r1, cb1e <usbdc_cb_ctl_done+0x2a>
    cafa:	2901      	cmp	r1, #1
    cafc:	d10d      	bne.n	cb1a <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cafe:	4b23      	ldr	r3, [pc, #140]	; (cb8c <usbdc_cb_ctl_done+0x98>)
    cb00:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    cb02:	b154      	cbz	r4, cb1a <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    cb04:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    cb06:	2201      	movs	r2, #1
    cb08:	4629      	mov	r1, r5
    cb0a:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    cb0c:	b113      	cbz	r3, cb14 <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    cb0e:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    cb10:	300a      	adds	r0, #10
    cb12:	d102      	bne.n	cb1a <usbdc_cb_ctl_done+0x26>
		h = h->next;
    cb14:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    cb16:	2c00      	cmp	r4, #0
    cb18:	d1f4      	bne.n	cb04 <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    cb1a:	2000      	movs	r0, #0
    cb1c:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cb1e:	7813      	ldrb	r3, [r2, #0]
    cb20:	2b00      	cmp	r3, #0
    cb22:	d1fa      	bne.n	cb1a <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    cb24:	7853      	ldrb	r3, [r2, #1]
    cb26:	2b05      	cmp	r3, #5
    cb28:	d014      	beq.n	cb54 <usbdc_cb_ctl_done+0x60>
    cb2a:	2b09      	cmp	r3, #9
    cb2c:	d1f5      	bne.n	cb1a <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    cb2e:	8852      	ldrh	r2, [r2, #2]
    cb30:	4b16      	ldr	r3, [pc, #88]	; (cb8c <usbdc_cb_ctl_done+0x98>)
    cb32:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cb34:	bb3a      	cbnz	r2, cb86 <usbdc_cb_ctl_done+0x92>
    cb36:	2503      	movs	r5, #3
    cb38:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cb3a:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cb3c:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    cb3e:	2c00      	cmp	r4, #0
    cb40:	d0eb      	beq.n	cb1a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    cb42:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    cb44:	4629      	mov	r1, r5
    cb46:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    cb48:	b103      	cbz	r3, cb4c <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    cb4a:	4798      	blx	r3
		cg = cg->next;
    cb4c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    cb4e:	2c00      	cmp	r4, #0
    cb50:	d1f7      	bne.n	cb42 <usbdc_cb_ctl_done+0x4e>
    cb52:	e7e2      	b.n	cb1a <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    cb54:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    cb56:	b2c0      	uxtb	r0, r0
    cb58:	f000 fcf0 	bl	d53c <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cb5c:	886b      	ldrh	r3, [r5, #2]
    cb5e:	b97b      	cbnz	r3, cb80 <usbdc_cb_ctl_done+0x8c>
    cb60:	2502      	movs	r5, #2
    cb62:	462a      	mov	r2, r5
    cb64:	4b09      	ldr	r3, [pc, #36]	; (cb8c <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cb66:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cb68:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    cb6a:	2c00      	cmp	r4, #0
    cb6c:	d0d5      	beq.n	cb1a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    cb6e:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    cb70:	4629      	mov	r1, r5
    cb72:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    cb74:	b103      	cbz	r3, cb78 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    cb76:	4798      	blx	r3
		cg = cg->next;
    cb78:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    cb7a:	2c00      	cmp	r4, #0
    cb7c:	d1f7      	bne.n	cb6e <usbdc_cb_ctl_done+0x7a>
    cb7e:	e7cc      	b.n	cb1a <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cb80:	2503      	movs	r5, #3
    cb82:	462a      	mov	r2, r5
    cb84:	e7ee      	b.n	cb64 <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cb86:	2504      	movs	r5, #4
    cb88:	462a      	mov	r2, r5
    cb8a:	e7d6      	b.n	cb3a <usbdc_cb_ctl_done+0x46>
    cb8c:	20001c28 	.word	0x20001c28

0000cb90 <usbdc_cb_ctl_req>:
{
    cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cb94:	4fb6      	ldr	r7, [pc, #728]	; (ce70 <usbdc_cb_ctl_req+0x2e0>)
    cb96:	68bc      	ldr	r4, [r7, #8]
{
    cb98:	b086      	sub	sp, #24
    cb9a:	4606      	mov	r6, r0
    cb9c:	460d      	mov	r5, r1
	while (h != NULL) {
    cb9e:	b15c      	cbz	r4, cbb8 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    cba0:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    cba2:	2200      	movs	r2, #0
    cba4:	4629      	mov	r1, r5
    cba6:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    cba8:	b11b      	cbz	r3, cbb2 <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    cbaa:	4798      	blx	r3
			if (0 == rc) {
    cbac:	b170      	cbz	r0, cbcc <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    cbae:	300a      	adds	r0, #10
    cbb0:	d108      	bne.n	cbc4 <usbdc_cb_ctl_req+0x34>
		h = h->next;
    cbb2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    cbb4:	2c00      	cmp	r4, #0
    cbb6:	d1f3      	bne.n	cba0 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cbb8:	782b      	ldrb	r3, [r5, #0]
    cbba:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    cbbe:	d025      	beq.n	cc0c <usbdc_cb_ctl_req+0x7c>
    cbc0:	2a80      	cmp	r2, #128	; 0x80
    cbc2:	d007      	beq.n	cbd4 <usbdc_cb_ctl_req+0x44>
		return false;
    cbc4:	2000      	movs	r0, #0
}
    cbc6:	b006      	add	sp, #24
    cbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    cbcc:	2001      	movs	r0, #1
}
    cbce:	b006      	add	sp, #24
    cbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    cbd4:	786a      	ldrb	r2, [r5, #1]
    cbd6:	2a0a      	cmp	r2, #10
    cbd8:	d8f4      	bhi.n	cbc4 <usbdc_cb_ctl_req+0x34>
    cbda:	a101      	add	r1, pc, #4	; (adr r1, cbe0 <usbdc_cb_ctl_req+0x50>)
    cbdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    cbe0:	0000ccff 	.word	0x0000ccff
    cbe4:	0000cbc5 	.word	0x0000cbc5
    cbe8:	0000cbc5 	.word	0x0000cbc5
    cbec:	0000cbc5 	.word	0x0000cbc5
    cbf0:	0000cbc5 	.word	0x0000cbc5
    cbf4:	0000cbc5 	.word	0x0000cbc5
    cbf8:	0000ccb3 	.word	0x0000ccb3
    cbfc:	0000cbc5 	.word	0x0000cbc5
    cc00:	0000cc91 	.word	0x0000cc91
    cc04:	0000cbc5 	.word	0x0000cbc5
    cc08:	0000cc49 	.word	0x0000cc49
	switch (req->bRequest) {
    cc0c:	786a      	ldrb	r2, [r5, #1]
    cc0e:	3a01      	subs	r2, #1
    cc10:	2a0a      	cmp	r2, #10
    cc12:	d8d7      	bhi.n	cbc4 <usbdc_cb_ctl_req+0x34>
    cc14:	a101      	add	r1, pc, #4	; (adr r1, cc1c <usbdc_cb_ctl_req+0x8c>)
    cc16:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    cc1a:	bf00      	nop
    cc1c:	0000ce17 	.word	0x0000ce17
    cc20:	0000cbc5 	.word	0x0000cbc5
    cc24:	0000cde7 	.word	0x0000cde7
    cc28:	0000cbc5 	.word	0x0000cbc5
    cc2c:	0000cdc9 	.word	0x0000cdc9
    cc30:	0000cbc5 	.word	0x0000cbc5
    cc34:	0000cbc5 	.word	0x0000cbc5
    cc38:	0000cbc5 	.word	0x0000cbc5
    cc3c:	0000cda3 	.word	0x0000cda3
    cc40:	0000cbc5 	.word	0x0000cbc5
    cc44:	0000cd47 	.word	0x0000cd47
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cc48:	7f7b      	ldrb	r3, [r7, #29]
    cc4a:	88aa      	ldrh	r2, [r5, #4]
    cc4c:	4113      	asrs	r3, r2
    cc4e:	f013 0301 	ands.w	r3, r3, #1
    cc52:	f000 818e 	beq.w	cf72 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cc56:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    cc58:	b91c      	cbnz	r4, cc62 <usbdc_cb_ctl_req+0xd2>
    cc5a:	e7b3      	b.n	cbc4 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    cc5c:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    cc5e:	2c00      	cmp	r4, #0
    cc60:	d0b0      	beq.n	cbc4 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cc62:	6863      	ldr	r3, [r4, #4]
    cc64:	462a      	mov	r2, r5
    cc66:	2102      	movs	r1, #2
    cc68:	4620      	mov	r0, r4
    cc6a:	4798      	blx	r3
    cc6c:	2800      	cmp	r0, #0
    cc6e:	dbf5      	blt.n	cc5c <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cc70:	697b      	ldr	r3, [r7, #20]
    cc72:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cc74:	697b      	ldr	r3, [r7, #20]
    cc76:	9303      	str	r3, [sp, #12]
    cc78:	2401      	movs	r4, #1
    cc7a:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    cc7c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cc7e:	9404      	str	r4, [sp, #16]
    cc80:	f88d 3014 	strb.w	r3, [sp, #20]
    cc84:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    cc88:	f000 fd24 	bl	d6d4 <usb_d_ep_transfer>
			return true;
    cc8c:	4620      	mov	r0, r4
    cc8e:	e79a      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cc90:	697b      	ldr	r3, [r7, #20]
    cc92:	7efa      	ldrb	r2, [r7, #27]
    cc94:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cc96:	697b      	ldr	r3, [r7, #20]
    cc98:	9303      	str	r3, [sp, #12]
    cc9a:	2401      	movs	r4, #1
    cc9c:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    cc9e:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cca0:	f88d 6014 	strb.w	r6, [sp, #20]
    cca4:	9404      	str	r4, [sp, #16]
    cca6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    ccaa:	f000 fd13 	bl	d6d4 <usb_d_ep_transfer>
		return true;
    ccae:	4620      	mov	r0, r4
    ccb0:	e789      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ccb2:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    ccb4:	0a1a      	lsrs	r2, r3, #8
    ccb6:	2a02      	cmp	r2, #2
    ccb8:	f000 810a 	beq.w	ced0 <usbdc_cb_ctl_req+0x340>
    ccbc:	2a03      	cmp	r2, #3
    ccbe:	f000 80f0 	beq.w	cea2 <usbdc_cb_ctl_req+0x312>
    ccc2:	2a01      	cmp	r2, #1
    ccc4:	f47f af7e 	bne.w	cbc4 <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ccc8:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    ccca:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cccc:	e893 0003 	ldmia.w	r3, {r0, r1}
    ccd0:	2c12      	cmp	r4, #18
    ccd2:	bf28      	it	cs
    ccd4:	2412      	movcs	r4, #18
    ccd6:	f000 fa19 	bl	d10c <usb_find_desc>
	if (!dev_desc) {
    ccda:	4603      	mov	r3, r0
    ccdc:	2800      	cmp	r0, #0
    ccde:	f43f af71 	beq.w	cbc4 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    cce2:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    cce4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cce6:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cce8:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ccea:	f88d 6014 	strb.w	r6, [sp, #20]
    ccee:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    ccf2:	f000 fcef 	bl	d6d4 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    ccf6:	fab0 f080 	clz	r0, r0
    ccfa:	0940      	lsrs	r0, r0, #5
    ccfc:	e763      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ccfe:	f003 011f 	and.w	r1, r3, #31
    cd02:	2901      	cmp	r1, #1
    cd04:	f240 8091 	bls.w	ce2a <usbdc_cb_ctl_req+0x29a>
    cd08:	2902      	cmp	r1, #2
    cd0a:	f47f af5b 	bne.w	cbc4 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    cd0e:	88a8      	ldrh	r0, [r5, #4]
    cd10:	b2c0      	uxtb	r0, r0
    cd12:	f000 fd91 	bl	d838 <usb_d_ep_halt>
		if (st < 0) {
    cd16:	1e03      	subs	r3, r0, #0
    cd18:	f6ff af54 	blt.w	cbc4 <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    cd1c:	f003 0301 	and.w	r3, r3, #1
    cd20:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    cd22:	697b      	ldr	r3, [r7, #20]
    cd24:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cd28:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cd2a:	697b      	ldr	r3, [r7, #20]
    cd2c:	9303      	str	r3, [sp, #12]
    cd2e:	2202      	movs	r2, #2
    cd30:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    cd32:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cd34:	f88d 6014 	strb.w	r6, [sp, #20]
    cd38:	9204      	str	r2, [sp, #16]
    cd3a:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    cd3e:	f000 fcc9 	bl	d6d4 <usb_d_ep_transfer>
	return true;
    cd42:	2001      	movs	r0, #1
    cd44:	e73f      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    cd46:	683b      	ldr	r3, [r7, #0]
    cd48:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    cd4a:	886c      	ldrh	r4, [r5, #2]
    cd4c:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    cd4e:	e893 0003 	ldmia.w	r3, {r0, r1}
    cd52:	f000 fa0f 	bl	d174 <usb_find_cfg_desc>
	if (NULL == ifc) {
    cd56:	2800      	cmp	r0, #0
    cd58:	f43f af34 	beq.w	cbc4 <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    cd5c:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    cd5e:	78c1      	ldrb	r1, [r0, #3]
    cd60:	7883      	ldrb	r3, [r0, #2]
    cd62:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    cd66:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cd6a:	4619      	mov	r1, r3
    cd6c:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    cd6e:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cd70:	f000 f9cc 	bl	d10c <usb_find_desc>
    cd74:	2800      	cmp	r0, #0
    cd76:	f43f af25 	beq.w	cbc4 <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cd7a:	7883      	ldrb	r3, [r0, #2]
    cd7c:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cd7e:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cd82:	d103      	bne.n	cd8c <usbdc_cb_ctl_req+0x1fc>
    cd84:	78c3      	ldrb	r3, [r0, #3]
    cd86:	42a3      	cmp	r3, r4
    cd88:	f000 80c9 	beq.w	cf1e <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    cd8c:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cd8e:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    cd90:	7818      	ldrb	r0, [r3, #0]
    cd92:	4403      	add	r3, r0
    cd94:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    cd96:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cd98:	f000 f9b8 	bl	d10c <usb_find_desc>
		if (NULL == ifc) {
    cd9c:	2800      	cmp	r0, #0
    cd9e:	d1ec      	bne.n	cd7a <usbdc_cb_ctl_req+0x1ea>
    cda0:	e710      	b.n	cbc4 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    cda2:	886a      	ldrh	r2, [r5, #2]
    cda4:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    cda6:	2a00      	cmp	r2, #0
    cda8:	d142      	bne.n	ce30 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cdaa:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    cdac:	b13c      	cbz	r4, cdbe <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    cdae:	6863      	ldr	r3, [r4, #4]
    cdb0:	4620      	mov	r0, r4
    cdb2:	2200      	movs	r2, #0
    cdb4:	2101      	movs	r1, #1
    cdb6:	4798      	blx	r3
		func = func->next;
    cdb8:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    cdba:	2c00      	cmp	r4, #0
    cdbc:	d1f7      	bne.n	cdae <usbdc_cb_ctl_req+0x21e>
    cdbe:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    cdc0:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cdc2:	2300      	movs	r3, #0
    cdc4:	2201      	movs	r2, #1
    cdc6:	e002      	b.n	cdce <usbdc_cb_ctl_req+0x23e>
    cdc8:	2300      	movs	r3, #0
    cdca:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    cdcc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cdce:	f88d 6014 	strb.w	r6, [sp, #20]
    cdd2:	9303      	str	r3, [sp, #12]
    cdd4:	9304      	str	r3, [sp, #16]
    cdd6:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    cdda:	f000 fc7b 	bl	d6d4 <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cdde:	fab0 f080 	clz	r0, r0
    cde2:	0940      	lsrs	r0, r0, #5
    cde4:	e6ef      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cde6:	2b02      	cmp	r3, #2
    cde8:	f47f aeec 	bne.w	cbc4 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    cdec:	88ef      	ldrh	r7, [r5, #6]
    cdee:	2f00      	cmp	r7, #0
    cdf0:	f47f aee8 	bne.w	cbc4 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    cdf4:	88a8      	ldrh	r0, [r5, #4]
    cdf6:	2101      	movs	r1, #1
    cdf8:	b2c0      	uxtb	r0, r0
    cdfa:	f000 fd1d 	bl	d838 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cdfe:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    ce00:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ce02:	9703      	str	r7, [sp, #12]
    ce04:	9704      	str	r7, [sp, #16]
    ce06:	f88d 6014 	strb.w	r6, [sp, #20]
    ce0a:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    ce0e:	f000 fc61 	bl	d6d4 <usb_d_ep_transfer>
		return true;
    ce12:	4620      	mov	r0, r4
    ce14:	e6d7      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ce16:	2b02      	cmp	r3, #2
    ce18:	f47f aed4 	bne.w	cbc4 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    ce1c:	88ef      	ldrh	r7, [r5, #6]
    ce1e:	2f00      	cmp	r7, #0
    ce20:	f47f aed0 	bne.w	cbc4 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    ce24:	88a8      	ldrh	r0, [r5, #4]
    ce26:	4639      	mov	r1, r7
    ce28:	e7e6      	b.n	cdf8 <usbdc_cb_ctl_req+0x268>
		st = 0;
    ce2a:	2300      	movs	r3, #0
    ce2c:	9301      	str	r3, [sp, #4]
    ce2e:	e778      	b.n	cd22 <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ce30:	683b      	ldr	r3, [r7, #0]
    ce32:	e893 0003 	ldmia.w	r3, {r0, r1}
    ce36:	f000 f99d 	bl	d174 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    ce3a:	2800      	cmp	r0, #0
    ce3c:	f43f aec2 	beq.w	cbc4 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    ce40:	78c1      	ldrb	r1, [r0, #3]
    ce42:	7882      	ldrb	r2, [r0, #2]
    ce44:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    ce48:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ce4c:	4619      	mov	r1, r3
    ce4e:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    ce50:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ce52:	f000 f95b 	bl	d10c <usb_find_desc>
    ce56:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    ce58:	2800      	cmp	r0, #0
    ce5a:	d0b0      	beq.n	cdbe <usbdc_cb_ctl_req+0x22e>
    ce5c:	24ff      	movs	r4, #255	; 0xff
    ce5e:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ce60:	f890 8002 	ldrb.w	r8, [r0, #2]
    ce64:	45a0      	cmp	r8, r4
    ce66:	d010      	beq.n	ce8a <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ce68:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    ce6a:	b92c      	cbnz	r4, ce78 <usbdc_cb_ctl_req+0x2e8>
    ce6c:	e092      	b.n	cf94 <usbdc_cb_ctl_req+0x404>
    ce6e:	bf00      	nop
    ce70:	20001c28 	.word	0x20001c28
					func = func->next;
    ce74:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    ce76:	b134      	cbz	r4, ce86 <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    ce78:	6863      	ldr	r3, [r4, #4]
    ce7a:	462a      	mov	r2, r5
    ce7c:	2100      	movs	r1, #0
    ce7e:	4620      	mov	r0, r4
    ce80:	4798      	blx	r3
    ce82:	2800      	cmp	r0, #0
    ce84:	d1f6      	bne.n	ce74 <usbdc_cb_ctl_req+0x2e4>
    ce86:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    ce88:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    ce8a:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ce8c:	9904      	ldr	r1, [sp, #16]
    ce8e:	4403      	add	r3, r0
    ce90:	4618      	mov	r0, r3
    ce92:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    ce94:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ce96:	f000 f939 	bl	d10c <usb_find_desc>
    ce9a:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    ce9c:	2800      	cmp	r0, #0
    ce9e:	d1df      	bne.n	ce60 <usbdc_cb_ctl_req+0x2d0>
    cea0:	e78e      	b.n	cdc0 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cea2:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    cea4:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cea6:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cea8:	e892 0003 	ldmia.w	r2, {r0, r1}
    ceac:	b2da      	uxtb	r2, r3
    ceae:	f000 f98d 	bl	d1cc <usb_find_str_desc>
	if (NULL == str_desc) {
    ceb2:	4603      	mov	r3, r0
    ceb4:	2800      	cmp	r0, #0
    ceb6:	f43f ae85 	beq.w	cbc4 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    ceba:	7801      	ldrb	r1, [r0, #0]
    cebc:	428c      	cmp	r4, r1
    cebe:	f67f af10 	bls.w	cce2 <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cec2:	3d01      	subs	r5, #1
    cec4:	4225      	tst	r5, r4
    cec6:	bf0c      	ite	eq
    cec8:	2201      	moveq	r2, #1
    ceca:	2200      	movne	r2, #0
    cecc:	460c      	mov	r4, r1
    cece:	e709      	b.n	cce4 <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ced0:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    ced2:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ced4:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ced6:	3301      	adds	r3, #1
    ced8:	e892 0003 	ldmia.w	r2, {r0, r1}
    cedc:	b2da      	uxtb	r2, r3
    cede:	f000 f949 	bl	d174 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    cee2:	4602      	mov	r2, r0
    cee4:	2800      	cmp	r0, #0
    cee6:	f43f ae6d 	beq.w	cbc4 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    ceea:	78c1      	ldrb	r1, [r0, #3]
    ceec:	7883      	ldrb	r3, [r0, #2]
    ceee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    cef2:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    cef4:	429c      	cmp	r4, r3
    cef6:	d94b      	bls.n	cf90 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cef8:	3d01      	subs	r5, #1
    cefa:	4225      	tst	r5, r4
    cefc:	bf0c      	ite	eq
    cefe:	2101      	moveq	r1, #1
    cf00:	2100      	movne	r1, #0
    cf02:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    cf04:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf06:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cf08:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf0a:	f88d 6014 	strb.w	r6, [sp, #20]
    cf0e:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    cf12:	f000 fbdf 	bl	d6d4 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cf16:	fab0 f080 	clz	r0, r0
    cf1a:	0940      	lsrs	r0, r0, #5
    cf1c:	e653      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    cf1e:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    cf20:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    cf22:	b926      	cbnz	r6, cf2e <usbdc_cb_ctl_req+0x39e>
    cf24:	e64e      	b.n	cbc4 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    cf26:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    cf28:	2e00      	cmp	r6, #0
    cf2a:	f43f ae4b 	beq.w	cbc4 <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cf2e:	6873      	ldr	r3, [r6, #4]
    cf30:	aa01      	add	r2, sp, #4
    cf32:	2101      	movs	r1, #1
    cf34:	4630      	mov	r0, r6
    cf36:	4798      	blx	r3
    cf38:	2800      	cmp	r0, #0
    cf3a:	d1f4      	bne.n	cf26 <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cf3c:	4601      	mov	r1, r0
    cf3e:	aa01      	add	r2, sp, #4
    cf40:	6873      	ldr	r3, [r6, #4]
    cf42:	4630      	mov	r0, r6
    cf44:	4798      	blx	r3
    cf46:	2800      	cmp	r0, #0
    cf48:	f47f ae3c 	bne.w	cbc4 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    cf4c:	b12c      	cbz	r4, cf5a <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    cf4e:	7f7b      	ldrb	r3, [r7, #29]
    cf50:	2201      	movs	r2, #1
    cf52:	fa02 f505 	lsl.w	r5, r2, r5
    cf56:	432b      	orrs	r3, r5
    cf58:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf5a:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    cf5c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf5e:	9303      	str	r3, [sp, #12]
    cf60:	9304      	str	r3, [sp, #16]
    cf62:	f88d 3014 	strb.w	r3, [sp, #20]
    cf66:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    cf6a:	f000 fbb3 	bl	d6d4 <usb_d_ep_transfer>
			return true;
    cf6e:	2001      	movs	r0, #1
    cf70:	e629      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    cf72:	697a      	ldr	r2, [r7, #20]
    cf74:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf76:	697a      	ldr	r2, [r7, #20]
    cf78:	9203      	str	r2, [sp, #12]
    cf7a:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    cf7c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf7e:	f88d 3014 	strb.w	r3, [sp, #20]
    cf82:	f88d 3015 	strb.w	r3, [sp, #21]
    cf86:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    cf88:	f000 fba4 	bl	d6d4 <usb_d_ep_transfer>
		return true;
    cf8c:	4620      	mov	r0, r4
    cf8e:	e61a      	b.n	cbc6 <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    cf90:	2100      	movs	r1, #0
    cf92:	e7b7      	b.n	cf04 <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    cf94:	4644      	mov	r4, r8
    cf96:	e778      	b.n	ce8a <usbdc_cb_ctl_req+0x2fa>

0000cf98 <usbd_event_cb>:
{
    cf98:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    cf9a:	b338      	cbz	r0, cfec <usbd_event_cb+0x54>
    cf9c:	2801      	cmp	r0, #1
    cf9e:	d124      	bne.n	cfea <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cfa0:	4d19      	ldr	r5, [pc, #100]	; (d008 <usbd_event_cb+0x70>)
    cfa2:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    cfa4:	b13c      	cbz	r4, cfb6 <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    cfa6:	6863      	ldr	r3, [r4, #4]
    cfa8:	4620      	mov	r0, r4
    cfaa:	2200      	movs	r2, #0
    cfac:	2101      	movs	r1, #1
    cfae:	4798      	blx	r3
		func = func->next;
    cfb0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    cfb2:	2c00      	cmp	r4, #0
    cfb4:	d1f7      	bne.n	cfa6 <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    cfb6:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    cfb8:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    cfba:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    cfbc:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    cfbe:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    cfc0:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    cfc2:	f000 fb41 	bl	d648 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    cfc6:	7f28      	ldrb	r0, [r5, #28]
    cfc8:	f000 faba 	bl	d540 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cfcc:	4621      	mov	r1, r4
    cfce:	4620      	mov	r0, r4
    cfd0:	4a0e      	ldr	r2, [pc, #56]	; (d00c <usbd_event_cb+0x74>)
    cfd2:	f000 fc69 	bl	d8a8 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cfd6:	4620      	mov	r0, r4
    cfd8:	4631      	mov	r1, r6
    cfda:	4a0d      	ldr	r2, [pc, #52]	; (d010 <usbd_event_cb+0x78>)
    cfdc:	f000 fc64 	bl	d8a8 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    cfe0:	4620      	mov	r0, r4
}
    cfe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    cfe6:	f000 bb4b 	b.w	d680 <usb_d_ep_enable>
    cfea:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cfec:	4b06      	ldr	r3, [pc, #24]	; (d008 <usbd_event_cb+0x70>)
    cfee:	68dc      	ldr	r4, [r3, #12]
    cff0:	460d      	mov	r5, r1
	while (cg != NULL) {
    cff2:	b144      	cbz	r4, d006 <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    cff4:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    cff6:	4629      	mov	r1, r5
    cff8:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    cffa:	b103      	cbz	r3, cffe <usbd_event_cb+0x66>
			cg->cb(change, value);
    cffc:	4798      	blx	r3
		cg = cg->next;
    cffe:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d000:	2c00      	cmp	r4, #0
    d002:	d1f7      	bne.n	cff4 <usbd_event_cb+0x5c>
    d004:	bd70      	pop	{r4, r5, r6, pc}
    d006:	bd70      	pop	{r4, r5, r6, pc}
    d008:	20001c28 	.word	0x20001c28
    d00c:	0000cb91 	.word	0x0000cb91
    d010:	0000caf5 	.word	0x0000caf5

0000d014 <usbdc_xfer>:
{
    d014:	b500      	push	{lr}
    d016:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d018:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    d01c:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d01e:	9101      	str	r1, [sp, #4]
    d020:	9202      	str	r2, [sp, #8]
    d022:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    d026:	f000 fb55 	bl	d6d4 <usb_d_ep_transfer>
}
    d02a:	b005      	add	sp, #20
    d02c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d030 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    d030:	2801      	cmp	r0, #1
    d032:	d009      	beq.n	d048 <usbdc_register_handler+0x18>
    d034:	d305      	bcc.n	d042 <usbdc_register_handler+0x12>
    d036:	2802      	cmp	r0, #2
    d038:	d102      	bne.n	d040 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d03a:	4805      	ldr	r0, [pc, #20]	; (d050 <usbdc_register_handler+0x20>)
    d03c:	f000 bc66 	b.w	d90c <list_insert_at_end>
    d040:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d042:	4804      	ldr	r0, [pc, #16]	; (d054 <usbdc_register_handler+0x24>)
    d044:	f000 bc62 	b.w	d90c <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d048:	4803      	ldr	r0, [pc, #12]	; (d058 <usbdc_register_handler+0x28>)
    d04a:	f000 bc5f 	b.w	d90c <list_insert_at_end>
    d04e:	bf00      	nop
    d050:	20001c34 	.word	0x20001c34
    d054:	20001c2c 	.word	0x20001c2c
    d058:	20001c30 	.word	0x20001c30

0000d05c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d05c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    d05e:	4605      	mov	r5, r0
    d060:	3000      	adds	r0, #0
    d062:	bf18      	it	ne
    d064:	2001      	movne	r0, #1
    d066:	f240 3255 	movw	r2, #853	; 0x355
    d06a:	490c      	ldr	r1, [pc, #48]	; (d09c <usbdc_init+0x40>)
    d06c:	f000 fc4a 	bl	d904 <assert>

	int32_t rc;

	rc = usb_d_init();
    d070:	f000 f9dc 	bl	d42c <usb_d_init>
	if (rc < 0) {
    d074:	2800      	cmp	r0, #0
    d076:	db0f      	blt.n	d098 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d078:	4c09      	ldr	r4, [pc, #36]	; (d0a0 <usbdc_init+0x44>)
    d07a:	2220      	movs	r2, #32
    d07c:	2100      	movs	r1, #0
    d07e:	4620      	mov	r0, r4
    d080:	f011 ffdc 	bl	1f03c <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d084:	4907      	ldr	r1, [pc, #28]	; (d0a4 <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    d086:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d088:	2000      	movs	r0, #0
    d08a:	f000 fa51 	bl	d530 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d08e:	2001      	movs	r0, #1
    d090:	4905      	ldr	r1, [pc, #20]	; (d0a8 <usbdc_init+0x4c>)
    d092:	f000 fa4d 	bl	d530 <usb_d_register_callback>

	return 0;
    d096:	2000      	movs	r0, #0
}
    d098:	bd38      	pop	{r3, r4, r5, pc}
    d09a:	bf00      	nop
    d09c:	00023e2c 	.word	0x00023e2c
    d0a0:	20001c28 	.word	0x20001c28
    d0a4:	0000cad9 	.word	0x0000cad9
    d0a8:	0000cf99 	.word	0x0000cf99

0000d0ac <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    d0ac:	4601      	mov	r1, r0
    d0ae:	4801      	ldr	r0, [pc, #4]	; (d0b4 <usbdc_register_function+0x8>)
    d0b0:	f000 bc2c 	b.w	d90c <list_insert_at_end>
    d0b4:	20001c38 	.word	0x20001c38

0000d0b8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d0b8:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    d0ba:	4b0a      	ldr	r3, [pc, #40]	; (d0e4 <usbdc_start+0x2c>)
    d0bc:	7e9c      	ldrb	r4, [r3, #26]
    d0be:	b954      	cbnz	r4, d0d6 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    d0c0:	b160      	cbz	r0, d0dc <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d0c2:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    d0c4:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    d0c6:	79d2      	ldrb	r2, [r2, #7]
    d0c8:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d0ca:	2201      	movs	r2, #1
    d0cc:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d0ce:	f000 fa31 	bl	d534 <usb_d_enable>
	return ERR_NONE;
    d0d2:	4620      	mov	r0, r4
    d0d4:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    d0d6:	f06f 0003 	mvn.w	r0, #3
    d0da:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    d0dc:	f06f 0008 	mvn.w	r0, #8
}
    d0e0:	bd10      	pop	{r4, pc}
    d0e2:	bf00      	nop
    d0e4:	20001c28 	.word	0x20001c28

0000d0e8 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    d0e8:	f000 ba26 	b.w	d538 <usb_d_attach>

0000d0ec <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    d0ec:	4b01      	ldr	r3, [pc, #4]	; (d0f4 <usbdc_get_ctrl_buffer+0x8>)
}
    d0ee:	6958      	ldr	r0, [r3, #20]
    d0f0:	4770      	bx	lr
    d0f2:	bf00      	nop
    d0f4:	20001c28 	.word	0x20001c28

0000d0f8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    d0f8:	4b03      	ldr	r3, [pc, #12]	; (d108 <usbdc_get_state+0x10>)
    d0fa:	7e98      	ldrb	r0, [r3, #26]
    d0fc:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    d100:	bf18      	it	ne
    d102:	2010      	movne	r0, #16
    d104:	4770      	bx	lr
    d106:	bf00      	nop
    d108:	20001c28 	.word	0x20001c28

0000d10c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d10c:	4288      	cmp	r0, r1
    d10e:	d214      	bcs.n	d13a <usb_find_desc+0x2e>
    d110:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d112:	2b01      	cmp	r3, #1
    d114:	d911      	bls.n	d13a <usb_find_desc+0x2e>
{
    d116:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    d118:	7844      	ldrb	r4, [r0, #1]
    d11a:	4294      	cmp	r4, r2
    d11c:	d106      	bne.n	d12c <usb_find_desc+0x20>
    d11e:	e009      	b.n	d134 <usb_find_desc+0x28>
    d120:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d122:	2b01      	cmp	r3, #1
    d124:	d905      	bls.n	d132 <usb_find_desc+0x26>
	return desc[1];
    d126:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d128:	4294      	cmp	r4, r2
    d12a:	d003      	beq.n	d134 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    d12c:	4418      	add	r0, r3
	while (desc < eof) {
    d12e:	4281      	cmp	r1, r0
    d130:	d8f6      	bhi.n	d120 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d132:	2000      	movs	r0, #0
}
    d134:	f85d 4b04 	ldr.w	r4, [sp], #4
    d138:	4770      	bx	lr
	return NULL;
    d13a:	2000      	movs	r0, #0
    d13c:	4770      	bx	lr
    d13e:	bf00      	nop

0000d140 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d140:	4288      	cmp	r0, r1
    d142:	d213      	bcs.n	d16c <usb_find_ep_desc+0x2c>
    d144:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d146:	2b01      	cmp	r3, #1
    d148:	d910      	bls.n	d16c <usb_find_ep_desc+0x2c>
	return desc[1];
    d14a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d14c:	2a04      	cmp	r2, #4
    d14e:	d00d      	beq.n	d16c <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d150:	2a05      	cmp	r2, #5
    d152:	d108      	bne.n	d166 <usb_find_ep_desc+0x26>
    d154:	e00c      	b.n	d170 <usb_find_ep_desc+0x30>
    d156:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d158:	2b01      	cmp	r3, #1
    d15a:	d907      	bls.n	d16c <usb_find_ep_desc+0x2c>
    d15c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d15e:	2a04      	cmp	r2, #4
    d160:	d004      	beq.n	d16c <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d162:	2a05      	cmp	r2, #5
    d164:	d003      	beq.n	d16e <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    d166:	4418      	add	r0, r3
	while (desc < eof) {
    d168:	4281      	cmp	r1, r0
    d16a:	d8f4      	bhi.n	d156 <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d16c:	2000      	movs	r0, #0
}
    d16e:	4770      	bx	lr
    d170:	4770      	bx	lr
    d172:	bf00      	nop

0000d174 <usb_find_cfg_desc>:
	while (desc < eof) {
    d174:	4288      	cmp	r0, r1
    d176:	d226      	bcs.n	d1c6 <usb_find_cfg_desc+0x52>
    d178:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d17a:	2b01      	cmp	r3, #1
    d17c:	d923      	bls.n	d1c6 <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d17e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    d180:	7844      	ldrb	r4, [r0, #1]
    d182:	2c02      	cmp	r4, #2
    d184:	d106      	bne.n	d194 <usb_find_cfg_desc+0x20>
    d186:	e012      	b.n	d1ae <usb_find_cfg_desc+0x3a>
    d188:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d18a:	2b01      	cmp	r3, #1
    d18c:	d905      	bls.n	d19a <usb_find_cfg_desc+0x26>
	return desc[1];
    d18e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d190:	2c02      	cmp	r4, #2
    d192:	d00c      	beq.n	d1ae <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    d194:	4418      	add	r0, r3
	while (desc < eof) {
    d196:	4281      	cmp	r1, r0
    d198:	d8f6      	bhi.n	d188 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    d19a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    d19c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d1a0:	4770      	bx	lr
		_desc_len_check();
    d1a2:	7803      	ldrb	r3, [r0, #0]
    d1a4:	2b01      	cmp	r3, #1
    d1a6:	d9f8      	bls.n	d19a <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    d1a8:	7843      	ldrb	r3, [r0, #1]
    d1aa:	2b02      	cmp	r3, #2
    d1ac:	d1f5      	bne.n	d19a <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    d1ae:	7943      	ldrb	r3, [r0, #5]
    d1b0:	4293      	cmp	r3, r2
    d1b2:	d0f3      	beq.n	d19c <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    d1b4:	78c4      	ldrb	r4, [r0, #3]
    d1b6:	7883      	ldrb	r3, [r0, #2]
    d1b8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d1bc:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    d1c0:	4281      	cmp	r1, r0
    d1c2:	d8ee      	bhi.n	d1a2 <usb_find_cfg_desc+0x2e>
    d1c4:	e7e9      	b.n	d19a <usb_find_cfg_desc+0x26>
		return NULL;
    d1c6:	2000      	movs	r0, #0
    d1c8:	4770      	bx	lr
    d1ca:	bf00      	nop

0000d1cc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d1cc:	4288      	cmp	r0, r1
    d1ce:	d216      	bcs.n	d1fe <usb_find_str_desc+0x32>
{
    d1d0:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    d1d2:	2500      	movs	r5, #0
    d1d4:	e005      	b.n	d1e2 <usb_find_str_desc+0x16>
	return desc[1];
    d1d6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d1d8:	2c03      	cmp	r4, #3
    d1da:	d008      	beq.n	d1ee <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    d1dc:	4418      	add	r0, r3
	while (desc < eof) {
    d1de:	4281      	cmp	r1, r0
    d1e0:	d902      	bls.n	d1e8 <usb_find_str_desc+0x1c>
    d1e2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d1e4:	2b01      	cmp	r3, #1
    d1e6:	d8f6      	bhi.n	d1d6 <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    d1e8:	2000      	movs	r0, #0
}
    d1ea:	bc30      	pop	{r4, r5}
    d1ec:	4770      	bx	lr
			if (i == str_index) {
    d1ee:	4295      	cmp	r5, r2
    d1f0:	d0fb      	beq.n	d1ea <usb_find_str_desc+0x1e>
    d1f2:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    d1f4:	4281      	cmp	r1, r0
    d1f6:	f105 0501 	add.w	r5, r5, #1
    d1fa:	d8f2      	bhi.n	d1e2 <usb_find_str_desc+0x16>
    d1fc:	e7f4      	b.n	d1e8 <usb_find_str_desc+0x1c>
	return NULL;
    d1fe:	2000      	movs	r0, #0
    d200:	4770      	bx	lr
    d202:	bf00      	nop

0000d204 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    d204:	2000      	movs	r0, #0
    d206:	4770      	bx	lr

0000d208 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    d208:	b5f0      	push	{r4, r5, r6, r7, lr}
    d20a:	4f0f      	ldr	r7, [pc, #60]	; (d248 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d20c:	f000 0e0f 	and.w	lr, r0, #15
    d210:	463a      	mov	r2, r7
{
    d212:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d214:	7854      	ldrb	r4, [r2, #1]
    d216:	42a0      	cmp	r0, r4
    d218:	461e      	mov	r6, r3
    d21a:	f103 0301 	add.w	r3, r3, #1
    d21e:	d008      	beq.n	d232 <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d220:	7815      	ldrb	r5, [r2, #0]
    d222:	3220      	adds	r2, #32
    d224:	b90d      	cbnz	r5, d22a <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d226:	4574      	cmp	r4, lr
    d228:	d003      	beq.n	d232 <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d22a:	2b0d      	cmp	r3, #13
    d22c:	d1f2      	bne.n	d214 <usb_d_cb_trans_more+0xc>
    d22e:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    d232:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    d236:	78b3      	ldrb	r3, [r6, #2]
    d238:	2b03      	cmp	r3, #3
    d23a:	d001      	beq.n	d240 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    d23c:	2000      	movs	r0, #0
    d23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    d240:	69b3      	ldr	r3, [r6, #24]
}
    d242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    d246:	4718      	bx	r3
    d248:	20001c48 	.word	0x20001c48

0000d24c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    d24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d250:	f8df 9130 	ldr.w	r9, [pc, #304]	; d384 <_usb_d_cb_trans_done+0x138>
    d254:	4607      	mov	r7, r0
    d256:	4688      	mov	r8, r1
    d258:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d25a:	f000 010f 	and.w	r1, r0, #15
{
    d25e:	2300      	movs	r3, #0
    d260:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d262:	7844      	ldrb	r4, [r0, #1]
    d264:	42a7      	cmp	r7, r4
    d266:	461e      	mov	r6, r3
    d268:	f103 0301 	add.w	r3, r3, #1
    d26c:	d008      	beq.n	d280 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d26e:	7805      	ldrb	r5, [r0, #0]
    d270:	3020      	adds	r0, #32
    d272:	b90d      	cbnz	r5, d278 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d274:	428c      	cmp	r4, r1
    d276:	d003      	beq.n	d280 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d278:	2b0d      	cmp	r3, #13
    d27a:	d1f2      	bne.n	d262 <_usb_d_cb_trans_done+0x16>
    d27c:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    d280:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    d282:	f1b8 0f00 	cmp.w	r8, #0
    d286:	d110      	bne.n	d2aa <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    d288:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d28c:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    d290:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d294:	b32b      	cbz	r3, d2e2 <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    d296:	2301      	movs	r3, #1
    d298:	4641      	mov	r1, r8
    d29a:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    d29c:	444e      	add	r6, r9
    d29e:	4638      	mov	r0, r7
    d2a0:	69f3      	ldr	r3, [r6, #28]
    d2a2:	4798      	blx	r3
}
    d2a4:	b007      	add	sp, #28
    d2a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    d2aa:	f1b8 0f01 	cmp.w	r8, #1
    d2ae:	d00b      	beq.n	d2c8 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    d2b0:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    d2b4:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    d2b8:	d025      	beq.n	d306 <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    d2ba:	f1b8 0f03 	cmp.w	r8, #3
    d2be:	d01d      	beq.n	d2fc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    d2c0:	2106      	movs	r1, #6
    d2c2:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    d2c4:	70d9      	strb	r1, [r3, #3]
    d2c6:	e7e9      	b.n	d29c <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    d2c8:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d2cc:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    d2d0:	f04f 0802 	mov.w	r8, #2
    d2d4:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d2d8:	b1e9      	cbz	r1, d316 <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    d2da:	2305      	movs	r3, #5
    d2dc:	4641      	mov	r1, r8
    d2de:	70a3      	strb	r3, [r4, #2]
    d2e0:	e7dc      	b.n	d29c <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    d2e2:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    d2e4:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    d2e6:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    d2e8:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    d2ec:	d01f      	beq.n	d32e <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    d2ee:	69e3      	ldr	r3, [r4, #28]
    d2f0:	7860      	ldrb	r0, [r4, #1]
    d2f2:	4641      	mov	r1, r8
    d2f4:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    d2f6:	2302      	movs	r3, #2
    d2f8:	70a3      	strb	r3, [r4, #2]
    d2fa:	e7d3      	b.n	d2a4 <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    d2fc:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    d2fe:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    d300:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    d302:	70d9      	strb	r1, [r3, #3]
    d304:	e7ca      	b.n	d29c <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d306:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    d30a:	2104      	movs	r1, #4
    d30c:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d30e:	b158      	cbz	r0, d328 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    d310:	2001      	movs	r0, #1
    d312:	7098      	strb	r0, [r3, #2]
    d314:	e7c2      	b.n	d29c <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d316:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    d318:	f884 8002 	strb.w	r8, [r4, #2]
    d31c:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d31e:	f006 fa5b 	bl	137d8 <_usb_d_dev_ep_stall>
    d322:	78e1      	ldrb	r1, [r4, #3]
    d324:	9a01      	ldr	r2, [sp, #4]
    d326:	e7b9      	b.n	d29c <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    d328:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    d32c:	e7ba      	b.n	d2a4 <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    d32e:	69e3      	ldr	r3, [r4, #28]
    d330:	7860      	ldrb	r0, [r4, #1]
    d332:	f994 500c 	ldrsb.w	r5, [r4, #12]
    d336:	2101      	movs	r1, #1
    d338:	4798      	blx	r3
		if (err) {
    d33a:	b160      	cbz	r0, d356 <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    d33c:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    d33e:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    d340:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    d342:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    d344:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    d346:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    d348:	bfa8      	it	ge
    d34a:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    d34e:	2101      	movs	r1, #1
    d350:	f006 fa42 	bl	137d8 <_usb_d_dev_ep_stall>
    d354:	e7a6      	b.n	d2a4 <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    d356:	2304      	movs	r3, #4
    d358:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    d35a:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    d35c:	f8cd 800c 	str.w	r8, [sp, #12]
    d360:	2d00      	cmp	r5, #0
    d362:	bfac      	ite	ge
    d364:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    d368:	f003 030f 	andlt.w	r3, r3, #15
    d36c:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    d36e:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    d370:	f8cd 8010 	str.w	r8, [sp, #16]
    d374:	f88d 3014 	strb.w	r3, [sp, #20]
    d378:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    d37c:	f006 fae8 	bl	13950 <_usb_d_dev_ep_trans>
    d380:	e790      	b.n	d2a4 <_usb_d_cb_trans_done+0x58>
    d382:	bf00      	nop
    d384:	20001c48 	.word	0x20001c48

0000d388 <usb_d_cb_trans_setup>:
{
    d388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d38c:	4f26      	ldr	r7, [pc, #152]	; (d428 <usb_d_cb_trans_setup+0xa0>)
    d38e:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d390:	f000 060f 	and.w	r6, r0, #15
    d394:	463a      	mov	r2, r7
{
    d396:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d398:	7851      	ldrb	r1, [r2, #1]
    d39a:	428c      	cmp	r4, r1
    d39c:	461d      	mov	r5, r3
    d39e:	f103 0301 	add.w	r3, r3, #1
    d3a2:	d032      	beq.n	d40a <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d3a4:	7810      	ldrb	r0, [r2, #0]
    d3a6:	3220      	adds	r2, #32
    d3a8:	b908      	cbnz	r0, d3ae <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d3aa:	42b1      	cmp	r1, r6
    d3ac:	d02d      	beq.n	d40a <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d3ae:	2b0d      	cmp	r3, #13
    d3b0:	d1f2      	bne.n	d398 <usb_d_cb_trans_setup+0x10>
    d3b2:	f06f 0613 	mvn.w	r6, #19
    d3b6:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    d3ba:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    d3bc:	4631      	mov	r1, r6
    d3be:	4620      	mov	r0, r4
    d3c0:	f006 fa9c 	bl	138fc <_usb_d_dev_ep_read_req>
	if (n != 8) {
    d3c4:	b2c0      	uxtb	r0, r0
    d3c6:	2808      	cmp	r0, #8
    d3c8:	d00a      	beq.n	d3e0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    d3ca:	2101      	movs	r1, #1
    d3cc:	4620      	mov	r0, r4
    d3ce:	f006 fa03 	bl	137d8 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    d3d2:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    d3d6:	2101      	movs	r1, #1
}
    d3d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    d3dc:	f006 b9fc 	b.w	137d8 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    d3e0:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d3e4:	2100      	movs	r1, #0
    d3e6:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    d3e8:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d3ec:	f006 f9f4 	bl	137d8 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    d3f0:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    d3f2:	2100      	movs	r1, #0
    d3f4:	4640      	mov	r0, r8
    d3f6:	f006 f9ef 	bl	137d8 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    d3fa:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    d3fc:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    d3fe:	696b      	ldr	r3, [r5, #20]
    d400:	4620      	mov	r0, r4
    d402:	4798      	blx	r3
    d404:	b120      	cbz	r0, d410 <usb_d_cb_trans_setup+0x88>
    d406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d40a:	016e      	lsls	r6, r5, #5
    d40c:	360c      	adds	r6, #12
    d40e:	e7d4      	b.n	d3ba <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    d410:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    d412:	4639      	mov	r1, r7
    d414:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    d416:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    d418:	f006 f9de 	bl	137d8 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    d41c:	4639      	mov	r1, r7
    d41e:	4640      	mov	r0, r8
}
    d420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    d424:	f006 b9d8 	b.w	137d8 <_usb_d_dev_ep_stall>
    d428:	20001c48 	.word	0x20001c48

0000d42c <usb_d_init>:

int32_t usb_d_init(void)
{
    d42c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    d42e:	f005 fecf 	bl	131d0 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    d432:	2800      	cmp	r0, #0
    d434:	db70      	blt.n	d518 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    d436:	4c39      	ldr	r4, [pc, #228]	; (d51c <usb_d_init+0xf0>)
    d438:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    d43c:	2100      	movs	r1, #0
    d43e:	4620      	mov	r0, r4
    d440:	f011 fdfc 	bl	1f03c <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d444:	4b36      	ldr	r3, [pc, #216]	; (d520 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    d446:	4937      	ldr	r1, [pc, #220]	; (d524 <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d448:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    d44a:	22ff      	movs	r2, #255	; 0xff
    d44c:	7062      	strb	r2, [r4, #1]
    d44e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    d452:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    d456:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    d45a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    d45e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    d462:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    d466:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    d46a:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d46c:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d46e:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d470:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d472:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d474:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d476:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d478:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d47a:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d47c:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d47e:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d480:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d482:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d486:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d48a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d48e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d492:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d496:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d49a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d49e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d4a2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d4a6:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d4aa:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d4ae:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    d4b2:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    d4b6:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    d4ba:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    d4be:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    d4c2:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d4c6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d4ca:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d4ce:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d4d2:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d4d6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d4da:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d4de:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d4e2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d4e6:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d4ea:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d4ee:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d4f2:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    d4f6:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    d4fa:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    d4fe:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    d502:	f006 fb5d 	bl	13bc0 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    d506:	4908      	ldr	r1, [pc, #32]	; (d528 <usb_d_init+0xfc>)
    d508:	2001      	movs	r0, #1
    d50a:	f006 fb59 	bl	13bc0 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    d50e:	2002      	movs	r0, #2
    d510:	4906      	ldr	r1, [pc, #24]	; (d52c <usb_d_init+0x100>)
    d512:	f006 fb55 	bl	13bc0 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    d516:	2000      	movs	r0, #0
}
    d518:	bd10      	pop	{r4, pc}
    d51a:	bf00      	nop
    d51c:	20001c48 	.word	0x20001c48
    d520:	0000d205 	.word	0x0000d205
    d524:	0000d389 	.word	0x0000d389
    d528:	0000d209 	.word	0x0000d209
    d52c:	0000d24d 	.word	0x0000d24d

0000d530 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    d530:	f006 bb34 	b.w	13b9c <_usb_d_dev_register_callback>

0000d534 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    d534:	f005 beec 	b.w	13310 <_usb_d_dev_enable>

0000d538 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    d538:	f005 bf1a 	b.w	13370 <_usb_d_dev_attach>

0000d53c <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    d53c:	f005 bf22 	b.w	13384 <_usb_d_dev_set_address>

0000d540 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    d540:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d542:	4e25      	ldr	r6, [pc, #148]	; (d5d8 <usb_d_ep0_init+0x98>)
    d544:	7873      	ldrb	r3, [r6, #1]
    d546:	2b00      	cmp	r3, #0
    d548:	d043      	beq.n	d5d2 <usb_d_ep0_init+0x92>
    d54a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    d54e:	2b00      	cmp	r3, #0
    d550:	d03f      	beq.n	d5d2 <usb_d_ep0_init+0x92>
    d552:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    d556:	2b00      	cmp	r3, #0
    d558:	d03b      	beq.n	d5d2 <usb_d_ep0_init+0x92>
    d55a:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    d55e:	b3c3      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d560:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    d564:	b3ab      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d566:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    d56a:	b393      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d56c:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    d570:	b37b      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d572:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    d576:	b363      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d578:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    d57c:	b34b      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d57e:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    d582:	b333      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d584:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    d588:	b31b      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d58a:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    d58e:	b303      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d590:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    d594:	b1eb      	cbz	r3, d5d2 <usb_d_ep0_init+0x92>
    d596:	4633      	mov	r3, r6
    d598:	2400      	movs	r4, #0
    d59a:	7859      	ldrb	r1, [r3, #1]
    d59c:	29ff      	cmp	r1, #255	; 0xff
    d59e:	d00a      	beq.n	d5b6 <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d5a0:	781d      	ldrb	r5, [r3, #0]
    d5a2:	3320      	adds	r3, #32
    d5a4:	b90d      	cbnz	r5, d5aa <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d5a6:	290f      	cmp	r1, #15
    d5a8:	d005      	beq.n	d5b6 <usb_d_ep0_init+0x76>
    d5aa:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d5ac:	2c0d      	cmp	r4, #13
    d5ae:	d1f4      	bne.n	d59a <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    d5b0:	f06f 0014 	mvn.w	r0, #20
    d5b4:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    d5b6:	2100      	movs	r1, #0
    d5b8:	4602      	mov	r2, r0
    d5ba:	4608      	mov	r0, r1
    d5bc:	f005 fee8 	bl	13390 <_usb_d_dev_ep_init>
	if (rc < 0) {
    d5c0:	2800      	cmp	r0, #0
    d5c2:	db05      	blt.n	d5d0 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    d5c4:	0164      	lsls	r4, r4, #5
    d5c6:	1933      	adds	r3, r6, r4
    d5c8:	2000      	movs	r0, #0
    d5ca:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    d5cc:	5530      	strb	r0, [r6, r4]
    d5ce:	bd70      	pop	{r4, r5, r6, pc}
}
    d5d0:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    d5d2:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    d5d6:	bd70      	pop	{r4, r5, r6, pc}
    d5d8:	20001c48 	.word	0x20001c48

0000d5dc <usb_d_ep_init>:
{
    d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5de:	4c19      	ldr	r4, [pc, #100]	; (d644 <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d5e0:	f000 0c0f 	and.w	ip, r0, #15
    d5e4:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    d5e8:	4627      	mov	r7, r4
    d5ea:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d5ec:	785d      	ldrb	r5, [r3, #1]
    d5ee:	42a8      	cmp	r0, r5
    d5f0:	d024      	beq.n	d63c <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d5f2:	781e      	ldrb	r6, [r3, #0]
    d5f4:	3320      	adds	r3, #32
    d5f6:	b90e      	cbnz	r6, d5fc <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d5f8:	4565      	cmp	r5, ip
    d5fa:	d01f      	beq.n	d63c <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d5fc:	459e      	cmp	lr, r3
    d5fe:	d1f5      	bne.n	d5ec <usb_d_ep_init+0x10>
    d600:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d602:	7863      	ldrb	r3, [r4, #1]
    d604:	2bff      	cmp	r3, #255	; 0xff
    d606:	d00a      	beq.n	d61e <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d608:	7826      	ldrb	r6, [r4, #0]
    d60a:	3420      	adds	r4, #32
    d60c:	b90e      	cbnz	r6, d612 <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d60e:	2b0f      	cmp	r3, #15
    d610:	d005      	beq.n	d61e <usb_d_ep_init+0x42>
    d612:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d614:	2d0d      	cmp	r5, #13
    d616:	d1f4      	bne.n	d602 <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    d618:	f06f 0014 	mvn.w	r0, #20
    d61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d61e:	460e      	mov	r6, r1
    d620:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    d622:	f005 feb5 	bl	13390 <_usb_d_dev_ep_init>
	if (rc < 0) {
    d626:	2800      	cmp	r0, #0
    d628:	db07      	blt.n	d63a <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    d62a:	016d      	lsls	r5, r5, #5
    d62c:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    d62e:	f006 0603 	and.w	r6, r6, #3
    d632:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    d634:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    d636:	2000      	movs	r0, #0
    d638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    d63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    d63c:	f06f 0013 	mvn.w	r0, #19
    d640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d642:	bf00      	nop
    d644:	20001c48 	.word	0x20001c48

0000d648 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    d648:	b570      	push	{r4, r5, r6, lr}
    d64a:	4e0c      	ldr	r6, [pc, #48]	; (d67c <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d64c:	f000 050f 	and.w	r5, r0, #15
    d650:	4633      	mov	r3, r6
{
    d652:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d654:	785a      	ldrb	r2, [r3, #1]
    d656:	4290      	cmp	r0, r2
    d658:	d008      	beq.n	d66c <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d65a:	7819      	ldrb	r1, [r3, #0]
    d65c:	3320      	adds	r3, #32
    d65e:	b909      	cbnz	r1, d664 <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d660:	42aa      	cmp	r2, r5
    d662:	d003      	beq.n	d66c <usb_d_ep_deinit+0x24>
    d664:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d666:	2c0d      	cmp	r4, #13
    d668:	d1f4      	bne.n	d654 <usb_d_ep_deinit+0xc>
    d66a:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    d66c:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    d670:	f005 ff00 	bl	13474 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    d674:	23ff      	movs	r3, #255	; 0xff
    d676:	7063      	strb	r3, [r4, #1]
    d678:	bd70      	pop	{r4, r5, r6, pc}
    d67a:	bf00      	nop
    d67c:	20001c48 	.word	0x20001c48

0000d680 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    d680:	b570      	push	{r4, r5, r6, lr}
    d682:	4d13      	ldr	r5, [pc, #76]	; (d6d0 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d684:	f000 060f 	and.w	r6, r0, #15
    d688:	462b      	mov	r3, r5
{
    d68a:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d68c:	7859      	ldrb	r1, [r3, #1]
    d68e:	4288      	cmp	r0, r1
    d690:	d00a      	beq.n	d6a8 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d692:	781c      	ldrb	r4, [r3, #0]
    d694:	3320      	adds	r3, #32
    d696:	b90c      	cbnz	r4, d69c <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d698:	42b1      	cmp	r1, r6
    d69a:	d015      	beq.n	d6c8 <usb_d_ep_enable+0x48>
    d69c:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d69e:	2a0d      	cmp	r2, #13
    d6a0:	d1f4      	bne.n	d68c <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    d6a2:	f06f 0011 	mvn.w	r0, #17
    d6a6:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    d6a8:	0152      	lsls	r2, r2, #5
    d6aa:	5cab      	ldrb	r3, [r5, r2]
    d6ac:	2b00      	cmp	r3, #0
    d6ae:	bf14      	ite	ne
    d6b0:	2301      	movne	r3, #1
    d6b2:	2302      	moveq	r3, #2
    d6b4:	4415      	add	r5, r2
    d6b6:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    d6b8:	f005 ff6e 	bl	13598 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    d6bc:	2800      	cmp	r0, #0
    d6be:	db00      	blt.n	d6c2 <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    d6c0:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    d6c2:	2300      	movs	r3, #0
    d6c4:	70ab      	strb	r3, [r5, #2]
    d6c6:	bd70      	pop	{r4, r5, r6, pc}
    d6c8:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    d6ca:	2302      	movs	r3, #2
    d6cc:	e7f2      	b.n	d6b4 <usb_d_ep_enable+0x34>
    d6ce:	bf00      	nop
    d6d0:	20001c48 	.word	0x20001c48

0000d6d4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    d6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6d8:	f8df 811c 	ldr.w	r8, [pc, #284]	; d7f8 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    d6dc:	7a05      	ldrb	r5, [r0, #8]
{
    d6de:	b087      	sub	sp, #28
    d6e0:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d6e2:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    d6e6:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d6e8:	7859      	ldrb	r1, [r3, #1]
    d6ea:	428d      	cmp	r5, r1
    d6ec:	d00c      	beq.n	d708 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d6ee:	781c      	ldrb	r4, [r3, #0]
    d6f0:	3320      	adds	r3, #32
    d6f2:	b90c      	cbnz	r4, d6f8 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d6f4:	42b9      	cmp	r1, r7
    d6f6:	d007      	beq.n	d708 <usb_d_ep_transfer+0x34>
    d6f8:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d6fa:	2a0d      	cmp	r2, #13
    d6fc:	d1f4      	bne.n	d6e8 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    d6fe:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    d702:	b007      	add	sp, #28
    d704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    d708:	0154      	lsls	r4, r2, #5
    d70a:	4606      	mov	r6, r0
    d70c:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    d710:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    d712:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    d716:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    d71a:	f006 fa6f 	bl	13bfc <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    d71e:	f89b 3002 	ldrb.w	r3, [fp, #2]
    d722:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    d726:	f89d 7007 	ldrb.w	r7, [sp, #7]
    d72a:	b2ff      	uxtb	r7, r7
    d72c:	2f01      	cmp	r7, #1
    d72e:	d011      	beq.n	d754 <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    d730:	a802      	add	r0, sp, #8
    d732:	f006 fa6b 	bl	13c0c <atomic_leave_critical>
		switch (state) {
    d736:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d73a:	b2db      	uxtb	r3, r3
    d73c:	2b05      	cmp	r3, #5
    d73e:	d040      	beq.n	d7c2 <usb_d_ep_transfer+0xee>
    d740:	2b06      	cmp	r3, #6
    d742:	d022      	beq.n	d78a <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    d744:	2b00      	cmp	r3, #0
    d746:	bf0c      	ite	eq
    d748:	f06f 0012 	mvneq.w	r0, #18
    d74c:	2001      	movne	r0, #1
}
    d74e:	b007      	add	sp, #28
    d750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    d754:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    d756:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    d758:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    d75c:	f006 fa56 	bl	13c0c <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d760:	f818 2004 	ldrb.w	r2, [r8, r4]
    d764:	b9b2      	cbnz	r2, d794 <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    d766:	f89b 1013 	ldrb.w	r1, [fp, #19]
    d76a:	f89b 3012 	ldrb.w	r3, [fp, #18]
    d76e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    d772:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    d774:	bb4b      	cbnz	r3, d7ca <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    d776:	2204      	movs	r2, #4
    d778:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    d77c:	9304      	str	r3, [sp, #16]
    d77e:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d780:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    d782:	9203      	str	r2, [sp, #12]
    d784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d788:	e011      	b.n	d7ae <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    d78a:	f06f 000f 	mvn.w	r0, #15
}
    d78e:	b007      	add	sp, #28
    d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d794:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    d798:	6833      	ldr	r3, [r6, #0]
    d79a:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d79c:	bf18      	it	ne
    d79e:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    d7a0:	062a      	lsls	r2, r5, #24
    d7a2:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d7a6:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    d7a8:	d4ec      	bmi.n	d784 <usb_d_ep_transfer+0xb0>
    d7aa:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    d7ae:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    d7b0:	f88d 3014 	strb.w	r3, [sp, #20]
    d7b4:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    d7b8:	f006 f8ca 	bl	13950 <_usb_d_dev_ep_trans>
}
    d7bc:	b007      	add	sp, #28
    d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    d7c2:	2002      	movs	r0, #2
}
    d7c4:	b007      	add	sp, #28
    d7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    d7ca:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    d7ce:	4599      	cmp	r9, r3
    d7d0:	464f      	mov	r7, r9
    d7d2:	bf28      	it	cs
    d7d4:	461f      	movcs	r7, r3
    d7d6:	2900      	cmp	r1, #0
    d7d8:	db05      	blt.n	d7e6 <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    d7da:	6833      	ldr	r3, [r6, #0]
    d7dc:	9704      	str	r7, [sp, #16]
    d7de:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d7e0:	4617      	mov	r7, r2
    d7e2:	7a33      	ldrb	r3, [r6, #8]
    d7e4:	e7e1      	b.n	d7aa <usb_d_ep_transfer+0xd6>
    d7e6:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    d7e8:	6832      	ldr	r2, [r6, #0]
    d7ea:	9704      	str	r7, [sp, #16]
    d7ec:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d7ee:	bf94      	ite	ls
    d7f0:	2700      	movls	r7, #0
    d7f2:	2701      	movhi	r7, #1
    d7f4:	7a33      	ldrb	r3, [r6, #8]
    d7f6:	e7c5      	b.n	d784 <usb_d_ep_transfer+0xb0>
    d7f8:	20001c48 	.word	0x20001c48

0000d7fc <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    d7fc:	b570      	push	{r4, r5, r6, lr}
    d7fe:	4e0d      	ldr	r6, [pc, #52]	; (d834 <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d800:	f000 050f 	and.w	r5, r0, #15
    d804:	4633      	mov	r3, r6
{
    d806:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d808:	785a      	ldrb	r2, [r3, #1]
    d80a:	4290      	cmp	r0, r2
    d80c:	d008      	beq.n	d820 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d80e:	7819      	ldrb	r1, [r3, #0]
    d810:	3320      	adds	r3, #32
    d812:	b909      	cbnz	r1, d818 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d814:	42aa      	cmp	r2, r5
    d816:	d003      	beq.n	d820 <usb_d_ep_abort+0x24>
    d818:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d81a:	2c0d      	cmp	r4, #13
    d81c:	d1f4      	bne.n	d808 <usb_d_ep_abort+0xc>
    d81e:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d820:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    d824:	f006 f962 	bl	13aec <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d828:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    d82a:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d82c:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    d82e:	70e3      	strb	r3, [r4, #3]
    d830:	bd70      	pop	{r4, r5, r6, pc}
    d832:	bf00      	nop
    d834:	20001c48 	.word	0x20001c48

0000d838 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    d838:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    d83a:	460c      	mov	r4, r1
    d83c:	b131      	cbz	r1, d84c <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    d83e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    d840:	bf18      	it	ne
    d842:	2102      	movne	r1, #2
	}
}
    d844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    d848:	f005 bfc6 	b.w	137d8 <_usb_d_dev_ep_stall>
    d84c:	4e15      	ldr	r6, [pc, #84]	; (d8a4 <usb_d_ep_halt+0x6c>)
    d84e:	4605      	mov	r5, r0
    d850:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d852:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d856:	785a      	ldrb	r2, [r3, #1]
    d858:	4295      	cmp	r5, r2
    d85a:	d00a      	beq.n	d872 <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d85c:	7819      	ldrb	r1, [r3, #0]
    d85e:	3320      	adds	r3, #32
    d860:	b909      	cbnz	r1, d866 <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d862:	4282      	cmp	r2, r0
    d864:	d005      	beq.n	d872 <usb_d_ep_halt+0x3a>
    d866:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d868:	2c0d      	cmp	r4, #13
    d86a:	d1f4      	bne.n	d856 <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    d86c:	f06f 0011 	mvn.w	r0, #17
    d870:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    d872:	2102      	movs	r1, #2
    d874:	4628      	mov	r0, r5
    d876:	f005 ffaf 	bl	137d8 <_usb_d_dev_ep_stall>
    d87a:	b900      	cbnz	r0, d87e <usb_d_ep_halt+0x46>
}
    d87c:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d87e:	2100      	movs	r1, #0
    d880:	4628      	mov	r0, r5
    d882:	f005 ffa9 	bl	137d8 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    d886:	2800      	cmp	r0, #0
    d888:	dbf8      	blt.n	d87c <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d88a:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d88e:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d890:	2301      	movs	r3, #1
    d892:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d894:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d896:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d898:	69e3      	ldr	r3, [r4, #28]
    d89a:	2200      	movs	r2, #0
    d89c:	4798      	blx	r3
	return ERR_NONE;
    d89e:	2000      	movs	r0, #0
    d8a0:	bd70      	pop	{r4, r5, r6, pc}
    d8a2:	bf00      	nop
    d8a4:	20001c48 	.word	0x20001c48

0000d8a8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    d8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8aa:	f8df e054 	ldr.w	lr, [pc, #84]	; d900 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d8ae:	f000 070f 	and.w	r7, r0, #15
    d8b2:	4673      	mov	r3, lr
{
    d8b4:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d8b6:	785d      	ldrb	r5, [r3, #1]
    d8b8:	42a8      	cmp	r0, r5
    d8ba:	d008      	beq.n	d8ce <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d8bc:	781e      	ldrb	r6, [r3, #0]
    d8be:	3320      	adds	r3, #32
    d8c0:	b90e      	cbnz	r6, d8c6 <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d8c2:	42bd      	cmp	r5, r7
    d8c4:	d003      	beq.n	d8ce <usb_d_ep_register_callback+0x26>
    d8c6:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d8c8:	2c0d      	cmp	r4, #13
    d8ca:	d1f4      	bne.n	d8b6 <usb_d_ep_register_callback+0xe>
    d8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    d8ce:	4b0b      	ldr	r3, [pc, #44]	; (d8fc <usb_d_ep_register_callback+0x54>)
    d8d0:	2a00      	cmp	r2, #0
    d8d2:	bf08      	it	eq
    d8d4:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    d8d6:	2901      	cmp	r1, #1
    d8d8:	d003      	beq.n	d8e2 <usb_d_ep_register_callback+0x3a>
    d8da:	d30a      	bcc.n	d8f2 <usb_d_ep_register_callback+0x4a>
    d8dc:	2902      	cmp	r1, #2
    d8de:	d004      	beq.n	d8ea <usb_d_ep_register_callback+0x42>
    d8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    d8e2:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d8e6:	61a2      	str	r2, [r4, #24]
		break;
    d8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    d8ea:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d8ee:	61e2      	str	r2, [r4, #28]
    d8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    d8f2:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d8f6:	6162      	str	r2, [r4, #20]
		break;
    d8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8fa:	bf00      	nop
    d8fc:	0000d205 	.word	0x0000d205
    d900:	20001c48 	.word	0x20001c48

0000d904 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    d904:	b900      	cbnz	r0, d908 <assert+0x4>
		__asm("BKPT #0");
    d906:	be00      	bkpt	0x0000
    d908:	4770      	bx	lr
    d90a:	bf00      	nop

0000d90c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    d90c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    d90e:	6804      	ldr	r4, [r0, #0]
{
    d910:	4606      	mov	r6, r0
    d912:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    d914:	b144      	cbz	r4, d928 <list_insert_at_end+0x1c>
		if (it == element) {
    d916:	428c      	cmp	r4, r1
    d918:	d015      	beq.n	d946 <list_insert_at_end+0x3a>
    d91a:	4623      	mov	r3, r4
    d91c:	e001      	b.n	d922 <list_insert_at_end+0x16>
    d91e:	429d      	cmp	r5, r3
    d920:	d011      	beq.n	d946 <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    d922:	681b      	ldr	r3, [r3, #0]
    d924:	2b00      	cmp	r3, #0
    d926:	d1fa      	bne.n	d91e <list_insert_at_end+0x12>
    d928:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    d92a:	224f      	movs	r2, #79	; 0x4f
    d92c:	4908      	ldr	r1, [pc, #32]	; (d950 <list_insert_at_end+0x44>)
    d92e:	f7ff ffe9 	bl	d904 <assert>

	if (!list->head) {
    d932:	6833      	ldr	r3, [r6, #0]
    d934:	b90b      	cbnz	r3, d93a <list_insert_at_end+0x2e>
    d936:	e008      	b.n	d94a <list_insert_at_end+0x3e>
    d938:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    d93a:	6823      	ldr	r3, [r4, #0]
    d93c:	2b00      	cmp	r3, #0
    d93e:	d1fb      	bne.n	d938 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    d940:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    d942:	602b      	str	r3, [r5, #0]
    d944:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    d946:	2000      	movs	r0, #0
    d948:	e7ef      	b.n	d92a <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    d94a:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    d94c:	602b      	str	r3, [r5, #0]
		return;
    d94e:	bd70      	pop	{r4, r5, r6, pc}
    d950:	00023e44 	.word	0x00023e44

0000d954 <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    d956:	4d1f      	ldr	r5, [pc, #124]	; (d9d4 <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    d958:	682c      	ldr	r4, [r5, #0]
    d95a:	f014 0401 	ands.w	r4, r4, #1
    d95e:	d002      	beq.n	d966 <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    d960:	4b1d      	ldr	r3, [pc, #116]	; (d9d8 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    d962:	6818      	ldr	r0, [r3, #0]
    d964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d966:	2074      	movs	r0, #116	; 0x74
    d968:	f006 faca 	bl	13f00 <_Znwj>
    d96c:	4e1a      	ldr	r6, [pc, #104]	; (d9d8 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    d96e:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    d970:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    d972:	210c      	movs	r1, #12
    d974:	f04f 30ff 	mov.w	r0, #4294967295
    d978:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    d97a:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    d97c:	605c      	str	r4, [r3, #4]
    d97e:	6658      	str	r0, [r3, #100]	; 0x64
    d980:	609c      	str	r4, [r3, #8]
    d982:	6698      	str	r0, [r3, #104]	; 0x68
    d984:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    d986:	841c      	strh	r4, [r3, #32]
    d988:	611c      	str	r4, [r3, #16]
    d98a:	625c      	str	r4, [r3, #36]	; 0x24
    d98c:	615c      	str	r4, [r3, #20]
    d98e:	851c      	strh	r4, [r3, #40]	; 0x28
    d990:	619c      	str	r4, [r3, #24]
    d992:	62dc      	str	r4, [r3, #44]	; 0x2c
    d994:	61dc      	str	r4, [r3, #28]
    d996:	861c      	strh	r4, [r3, #48]	; 0x30
    d998:	635c      	str	r4, [r3, #52]	; 0x34
    d99a:	871c      	strh	r4, [r3, #56]	; 0x38
    d99c:	63dc      	str	r4, [r3, #60]	; 0x3c
    d99e:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    d9a2:	645c      	str	r4, [r3, #68]	; 0x44
    d9a4:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    d9a8:	64dc      	str	r4, [r3, #76]	; 0x4c
    d9aa:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    d9ae:	655c      	str	r4, [r3, #84]	; 0x54
    d9b0:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    d9b4:	65dc      	str	r4, [r3, #92]	; 0x5c
    d9b6:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    d9ba:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    d9be:	671c      	str	r4, [r3, #112]	; 0x70
    d9c0:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    d9c4:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    d9c8:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    d9cc:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    d9ce:	6033      	str	r3, [r6, #0]
    d9d0:	602a      	str	r2, [r5, #0]
}
    d9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9d4:	20001de8 	.word	0x20001de8
    d9d8:	20001e20 	.word	0x20001e20

0000d9dc <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    d9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    d9de:	4bbd      	ldr	r3, [pc, #756]	; (dcd4 <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    d9e0:	4605      	mov	r5, r0
    };
    d9e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    d9e4:	b085      	sub	sp, #20
    };
    d9e6:	ac04      	add	r4, sp, #16
    d9e8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d9ec:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d9ee:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d9f0:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    d9f4:	2303      	movs	r3, #3
    d9f6:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    d9fa:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d9fe:	f245 03c3 	movw	r3, #20675	; 0x50c3
    da02:	842b      	strh	r3, [r5, #32]
    da04:	852b      	strh	r3, [r5, #40]	; 0x28
    da06:	862b      	strh	r3, [r5, #48]	; 0x30
    da08:	872b      	strh	r3, [r5, #56]	; 0x38
    da0a:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    da0e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    da12:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    da16:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    da1a:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    da1e:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    da20:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    da24:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    da28:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    da2c:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    da2e:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    da30:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    da32:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    da34:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    da36:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    da3a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    da3e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    da42:	07cf      	lsls	r7, r1, #31
    da44:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    da48:	f04f 0401 	mov.w	r4, #1
    da4c:	bf54      	ite	pl
    da4e:	f364 0003 	bfipl	r0, r4, #0, #4
    da52:	f364 1007 	bfimi	r0, r4, #4, #4
    da56:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    da5a:	4a9f      	ldr	r2, [pc, #636]	; (dcd8 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    da5c:	4413      	add	r3, r2
    da5e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    da60:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    da62:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    da66:	f041 0101 	orr.w	r1, r1, #1
    da6a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    da6e:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    da70:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    da72:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    da76:	01db      	lsls	r3, r3, #7
    da78:	441a      	add	r2, r3
    da7a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    da7e:	07ce      	lsls	r6, r1, #31
    da80:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    da84:	bf54      	ite	pl
    da86:	f364 0003 	bfipl	r0, r4, #0, #4
    da8a:	f364 1007 	bfimi	r0, r4, #4, #4
    da8e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    da92:	4a91      	ldr	r2, [pc, #580]	; (dcd8 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    da94:	4413      	add	r3, r2
    da96:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    da98:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    da9a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    da9e:	f041 0101 	orr.w	r1, r1, #1
    daa2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    daa6:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    daa8:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    daaa:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    daae:	01db      	lsls	r3, r3, #7
    dab0:	441a      	add	r2, r3
    dab2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    dab6:	07cf      	lsls	r7, r1, #31
    dab8:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    dabc:	bf54      	ite	pl
    dabe:	f364 0003 	bfipl	r0, r4, #0, #4
    dac2:	f364 1007 	bfimi	r0, r4, #4, #4
    dac6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    daca:	4a83      	ldr	r2, [pc, #524]	; (dcd8 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    dacc:	4413      	add	r3, r2
    dace:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    dad0:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    dad2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    dad6:	f041 0101 	orr.w	r1, r1, #1
    dada:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    dade:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    dae0:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    dae2:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    dae6:	01db      	lsls	r3, r3, #7
    dae8:	441a      	add	r2, r3
    daea:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    daee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    daf2:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    daf6:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    daf8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dafc:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    dafe:	bf4c      	ite	mi
    db00:	f364 1007 	bfimi	r0, r4, #4, #4
    db04:	f364 0003 	bfipl	r0, r4, #0, #4
    db08:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    db0c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    db10:	4a72      	ldr	r2, [pc, #456]	; (dcdc <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    db12:	f041 0101 	orr.w	r1, r1, #1
    db16:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    db1a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    db1e:	f36f 1386 	bfc	r3, #6, #1
    db22:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    db26:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    db2a:	065f      	lsls	r7, r3, #25
    db2c:	d4fb      	bmi.n	db26 <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    db2e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    db32:	496a      	ldr	r1, [pc, #424]	; (dcdc <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    db34:	2004      	movs	r0, #4
    db36:	f360 0303 	bfi	r3, r0, #0, #4
    db3a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    db3e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    db42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db46:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    db4a:	684b      	ldr	r3, [r1, #4]
    db4c:	06de      	lsls	r6, r3, #27
    db4e:	d4fc      	bmi.n	db4a <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    db50:	4963      	ldr	r1, [pc, #396]	; (dce0 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    db52:	4a64      	ldr	r2, [pc, #400]	; (dce4 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    db54:	6a0b      	ldr	r3, [r1, #32]
    db56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    db5a:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    db5c:	8813      	ldrh	r3, [r2, #0]
    db5e:	f043 0301 	orr.w	r3, r3, #1
    db62:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    db64:	6b13      	ldr	r3, [r2, #48]	; 0x30
    db66:	f013 0301 	ands.w	r3, r3, #1
    db6a:	d1fb      	bne.n	db64 <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    db6c:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    db70:	290a      	cmp	r1, #10
    db72:	f000 80e7 	beq.w	dd44 <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    db76:	290c      	cmp	r1, #12
    db78:	f000 80df 	beq.w	dd3a <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    db7c:	2908      	cmp	r1, #8
    db7e:	f000 80d5 	beq.w	dd2c <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    db82:	4b58      	ldr	r3, [pc, #352]	; (dce4 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    db84:	881a      	ldrh	r2, [r3, #0]
    db86:	2101      	movs	r1, #1
    db88:	f361 220a 	bfi	r2, r1, #8, #3
    db8c:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    db8e:	889a      	ldrh	r2, [r3, #4]
    db90:	b292      	uxth	r2, r2
    db92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    db96:	f042 0204 	orr.w	r2, r2, #4
    db9a:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    db9c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    db9e:	f014 0404 	ands.w	r4, r4, #4
    dba2:	d1fb      	bne.n	db9c <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    dba4:	4620      	mov	r0, r4
    dba6:	f001 fe33 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    dbaa:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    dbac:	4620      	mov	r0, r4
    dbae:	f001 fe39 	bl	f824 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    dbb2:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    dbb4:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    dbb6:	f023 0302 	bic.w	r3, r3, #2
    dbba:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    dbbc:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    dbbe:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    dbc0:	6833      	ldr	r3, [r6, #0]
    dbc2:	2b01      	cmp	r3, #1
    dbc4:	d0fc      	beq.n	dbc0 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    dbc6:	4b48      	ldr	r3, [pc, #288]	; (dce8 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    dbc8:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    dbca:	4948      	ldr	r1, [pc, #288]	; (dcec <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    dbcc:	4f48      	ldr	r7, [pc, #288]	; (dcf0 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    dbce:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    dbd2:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    dbd4:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    dbd6:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    dbd8:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    dbda:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    dbdc:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    dbde:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    dbe0:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    dbe2:	f001 fe15 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    dbe6:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    dbe8:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    dbea:	f023 0302 	bic.w	r3, r3, #2
    dbee:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    dbf0:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    dbf2:	6803      	ldr	r3, [r0, #0]
    dbf4:	2b01      	cmp	r3, #1
    dbf6:	d0fc      	beq.n	dbf2 <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    dbf8:	4b3e      	ldr	r3, [pc, #248]	; (dcf4 <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    dbfa:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    dbfc:	2001      	movs	r0, #1
    dbfe:	f001 fe11 	bl	f824 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    dc02:	2300      	movs	r3, #0
    dc04:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    dc06:	4a37      	ldr	r2, [pc, #220]	; (dce4 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    dc08:	4e3b      	ldr	r6, [pc, #236]	; (dcf8 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    dc0a:	493c      	ldr	r1, [pc, #240]	; (dcfc <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    dc0c:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    dc0e:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    dc12:	2408      	movs	r4, #8
    dc14:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    dc16:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    dc18:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    dc1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    dc1c:	f043 0301 	orr.w	r3, r3, #1
    dc20:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    dc22:	6b13      	ldr	r3, [r2, #48]	; 0x30
    dc24:	075c      	lsls	r4, r3, #29
    dc26:	d4fc      	bmi.n	dc22 <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    dc28:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    dc2a:	492e      	ldr	r1, [pc, #184]	; (dce4 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    dc2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dc30:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    dc32:	7a13      	ldrb	r3, [r2, #8]
    dc34:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    dc38:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    dc3a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    dc3c:	06d8      	lsls	r0, r3, #27
    dc3e:	d4fc      	bmi.n	dc3a <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    dc40:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    dc42:	4c28      	ldr	r4, [pc, #160]	; (dce4 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    dc44:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    dc46:	6b20      	ldr	r0, [r4, #48]	; 0x30
    dc48:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    dc4c:	d1fb      	bne.n	dc46 <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    dc4e:	78e3      	ldrb	r3, [r4, #3]
    dc50:	f043 0301 	orr.w	r3, r3, #1
    dc54:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    dc56:	f001 fddb 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    dc5a:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    dc5c:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    dc5e:	6813      	ldr	r3, [r2, #0]
    dc60:	f043 0302 	orr.w	r3, r3, #2
    dc64:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    dc66:	f001 fdd3 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    dc6a:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    dc6c:	4a1d      	ldr	r2, [pc, #116]	; (dce4 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    dc6e:	f043 0302 	orr.w	r3, r3, #2
    dc72:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    dc74:	88a3      	ldrh	r3, [r4, #4]
    dc76:	f3c3 030e 	ubfx	r3, r3, #0, #15
    dc7a:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    dc7c:	8823      	ldrh	r3, [r4, #0]
    dc7e:	f043 0302 	orr.w	r3, r3, #2
    dc82:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    dc84:	6b13      	ldr	r3, [r2, #48]	; 0x30
    dc86:	0799      	lsls	r1, r3, #30
    dc88:	d4fc      	bmi.n	dc84 <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    dc8a:	2000      	movs	r0, #0
    dc8c:	f001 fdc0 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    dc90:	6803      	ldr	r3, [r0, #0]
    dc92:	079a      	lsls	r2, r3, #30
    dc94:	d4f9      	bmi.n	dc8a <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    dc96:	2001      	movs	r0, #1
    dc98:	f001 fdba 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    dc9c:	6803      	ldr	r3, [r0, #0]
    dc9e:	079b      	lsls	r3, r3, #30
    dca0:	d4f9      	bmi.n	dc96 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    dca2:	4a10      	ldr	r2, [pc, #64]	; (dce4 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    dca4:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    dca8:	f013 0301 	ands.w	r3, r3, #1
    dcac:	d1fa      	bne.n	dca4 <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    dcae:	4e14      	ldr	r6, [pc, #80]	; (dd00 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    dcb0:	4c14      	ldr	r4, [pc, #80]	; (dd04 <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    dcb2:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    dcb4:	f242 51ff 	movw	r1, #9727	; 0x25ff
    dcb8:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    dcbc:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    dcbe:	8029      	strh	r1, [r5, #0]
    dcc0:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    dcc2:	8229      	strh	r1, [r5, #16]
    dcc4:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    dcc6:	806b      	strh	r3, [r5, #2]
    dcc8:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    dcca:	826b      	strh	r3, [r5, #18]
    dccc:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    dcce:	80aa      	strh	r2, [r5, #4]
    dcd0:	e01a      	b.n	dd08 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    dcd2:	bf00      	nop
    dcd4:	00023e64 	.word	0x00023e64
    dcd8:	41008000 	.word	0x41008000
    dcdc:	40001c00 	.word	0x40001c00
    dce0:	40000800 	.word	0x40000800
    dce4:	43002000 	.word	0x43002000
    dce8:	00204600 	.word	0x00204600
    dcec:	20001dfc 	.word	0x20001dfc
    dcf0:	43002040 	.word	0x43002040
    dcf4:	00204700 	.word	0x00204700
    dcf8:	20001e20 	.word	0x20001e20
    dcfc:	43002034 	.word	0x43002034
    dd00:	25ff0000 	.word	0x25ff0000
    dd04:	60f80000 	.word	0x60f80000
    dd08:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    dd0a:	82aa      	strh	r2, [r5, #20]
    dd0c:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    dd0e:	80eb      	strh	r3, [r5, #6]
    dd10:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    dd12:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    dd14:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    dd18:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    dd1a:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    dd1c:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    dd1e:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    dd20:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    dd22:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    dd24:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    dd26:	83eb      	strh	r3, [r5, #30]
}
    dd28:	b005      	add	sp, #20
    dd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    dd2c:	88d3      	ldrh	r3, [r2, #6]
    dd2e:	f043 0318 	orr.w	r3, r3, #24
    dd32:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    dd34:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    dd38:	e723      	b.n	db82 <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    dd3a:	88d0      	ldrh	r0, [r2, #6]
    dd3c:	f363 00c4 	bfi	r0, r3, #3, #2
    dd40:	80d0      	strh	r0, [r2, #6]
    dd42:	e7f7      	b.n	dd34 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    dd44:	88d3      	ldrh	r3, [r2, #6]
    dd46:	2002      	movs	r0, #2
    dd48:	f360 03c4 	bfi	r3, r0, #3, #2
    dd4c:	80d3      	strh	r3, [r2, #6]
    dd4e:	e7f1      	b.n	dd34 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000dd50 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    dd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    dd54:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    dd58:	2b00      	cmp	r3, #0
    dd5a:	f000 80ab 	beq.w	deb4 <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    dd5e:	4b89      	ldr	r3, [pc, #548]	; (df84 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    dd60:	4604      	mov	r4, r0
    dd62:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    dd66:	f010 0001 	ands.w	r0, r0, #1
    dd6a:	f000 80a5 	beq.w	deb8 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    dd6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    dd70:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    dd74:	3301      	adds	r3, #1
    dd76:	4293      	cmp	r3, r2
    dd78:	6723      	str	r3, [r4, #112]	; 0x70
    dd7a:	d302      	bcc.n	dd82 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    dd7c:	2301      	movs	r3, #1
    dd7e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    dd82:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    dd84:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    dd86:	8821      	ldrh	r1, [r4, #0]
    dd88:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    dd8a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    dd8c:	fb83 6706 	smull	r6, r7, r3, r6
    dd90:	0bf2      	lsrs	r2, r6, #15
    dd92:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    dd96:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    dd98:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    dd9c:	fb01 f103 	mul.w	r1, r1, r3
    dda0:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    dda4:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    dda6:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    dda8:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    ddaa:	6262      	str	r2, [r4, #36]	; 0x24
    ddac:	fb80 8905 	smull	r8, r9, r0, r5
    ddb0:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    ddb4:	b2b2      	uxth	r2, r6
    ddb6:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    ddba:	fb02 f000 	mul.w	r0, r2, r0
    ddbe:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    ddc2:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    ddc6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    ddc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    ddca:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    ddcc:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    ddce:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    ddd0:	88a0      	ldrh	r0, [r4, #4]
    ddd2:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    ddd4:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    ddd8:	fb81 2302 	smull	r2, r3, r1, r2
    dddc:	0bd2      	lsrs	r2, r2, #15
    ddde:	b280      	uxth	r0, r0
    dde0:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    dde4:	fb00 f101 	mul.w	r1, r0, r1
    dde8:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    ddec:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    ddf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ddf2:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    ddf4:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    ddf6:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    ddf8:	88e1      	ldrh	r1, [r4, #6]
    ddfa:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    ddfe:	fb86 8903 	smull	r8, r9, r6, r3
    de02:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    de06:	b289      	uxth	r1, r1
    de08:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    de0c:	fb01 f606 	mul.w	r6, r1, r6
    de10:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    de14:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    de18:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    de1a:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    de1c:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    de1e:	8923      	ldrh	r3, [r4, #8]
    de20:	63e1      	str	r1, [r4, #60]	; 0x3c
    de22:	fb85 6706 	smull	r6, r7, r5, r6
    de26:	0bf2      	lsrs	r2, r6, #15
    de28:	b29b      	uxth	r3, r3
    de2a:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    de2e:	fb03 f505 	mul.w	r5, r3, r5
    de32:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    de36:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    de3a:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    de3c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    de3e:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    de40:	8961      	ldrh	r1, [r4, #10]
    de42:	6462      	str	r2, [r4, #68]	; 0x44
    de44:	fb80 6706 	smull	r6, r7, r0, r6
    de48:	0bf3      	lsrs	r3, r6, #15
    de4a:	b28a      	uxth	r2, r1
    de4c:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    de50:	fb02 f000 	mul.w	r0, r2, r0
    de54:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    de58:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    de5c:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    de5e:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    de60:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    de62:	89a0      	ldrh	r0, [r4, #12]
    de64:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    de68:	6d62      	ldr	r2, [r4, #84]	; 0x54
    de6a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    de6e:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    de70:	fb83 8902 	smull	r8, r9, r3, r2
    de74:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    de78:	b280      	uxth	r0, r0
    de7a:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    de7e:	fb00 f303 	mul.w	r3, r0, r3
    de82:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    de86:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    de8a:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    de8c:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    de8e:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    de92:	89e0      	ldrh	r0, [r4, #14]
    de94:	6562      	str	r2, [r4, #84]	; 0x54
    de96:	0bf3      	lsrs	r3, r6, #15
    de98:	b282      	uxth	r2, r0
    de9a:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    de9e:	fb02 f101 	mul.w	r1, r2, r1
    dea2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    dea6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    deaa:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    deac:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    deae:	83e2      	strh	r2, [r4, #30]
    deb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    deb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    deb8:	f001 fcaa 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    debc:	6803      	ldr	r3, [r0, #0]
    debe:	f3c3 0340 	ubfx	r3, r3, #1, #1
    dec2:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    dec4:	2e00      	cmp	r6, #0
    dec6:	f47f af52 	bne.w	dd6e <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    deca:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    decc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    ded0:	2501      	movs	r5, #1
    ded2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; df90 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    ded6:	4f2c      	ldr	r7, [pc, #176]	; (df88 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    ded8:	e00f      	b.n	defa <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    deda:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    dede:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    dee2:	b29b      	uxth	r3, r3
    dee4:	f1c2 010f 	rsb	r1, r2, #15
    dee8:	408b      	lsls	r3, r1
    deea:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    deec:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    deee:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    def2:	462e      	mov	r6, r5
    def4:	dc0c      	bgt.n	df10 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    def6:	3501      	adds	r5, #1
    def8:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    defa:	2d01      	cmp	r5, #1
    defc:	d1ed      	bne.n	deda <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    defe:	f04f 31ff 	mov.w	r1, #4294967295
    df02:	6838      	ldr	r0, [r7, #0]
    df04:	f004 f9c8 	bl	12298 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    df08:	0703      	lsls	r3, r0, #28
    df0a:	d5e6      	bpl.n	deda <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    df0c:	462e      	mov	r6, r5
    df0e:	e7f2      	b.n	def6 <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    df10:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    df14:	429a      	cmp	r2, r3
    df16:	d005      	beq.n	df24 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    df18:	2b0a      	cmp	r3, #10
    df1a:	d02c      	beq.n	df76 <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    df1c:	2b0c      	cmp	r3, #12
    df1e:	d024      	beq.n	df6a <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    df20:	2b08      	cmp	r3, #8
    df22:	d01a      	beq.n	df5a <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    df24:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    df26:	4b19      	ldr	r3, [pc, #100]	; (df8c <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    df28:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    df2a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    df2e:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    df30:	2000      	movs	r0, #0
    df32:	f001 fc6d 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    df36:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    df38:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    df3a:	6813      	ldr	r3, [r2, #0]
    df3c:	f043 0302 	orr.w	r3, r3, #2
    df40:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    df42:	f001 fc65 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    df46:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    df48:	4a0e      	ldr	r2, [pc, #56]	; (df84 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    df4a:	f043 0302 	orr.w	r3, r3, #2
    df4e:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    df50:	8893      	ldrh	r3, [r2, #4]
    df52:	f3c3 030e 	ubfx	r3, r3, #0, #15
    df56:	8093      	strh	r3, [r2, #4]
    df58:	e713      	b.n	dd82 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    df5a:	490a      	ldr	r1, [pc, #40]	; (df84 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    df5c:	88ca      	ldrh	r2, [r1, #6]
    df5e:	f042 0218 	orr.w	r2, r2, #24
    df62:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    df64:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    df68:	e7dc      	b.n	df24 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    df6a:	4a06      	ldr	r2, [pc, #24]	; (df84 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    df6c:	88d1      	ldrh	r1, [r2, #6]
    df6e:	f36f 01c4 	bfc	r1, #3, #2
    df72:	80d1      	strh	r1, [r2, #6]
    df74:	e7f6      	b.n	df64 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    df76:	4a03      	ldr	r2, [pc, #12]	; (df84 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    df78:	88d1      	ldrh	r1, [r2, #6]
    df7a:	2002      	movs	r0, #2
    df7c:	f360 01c4 	bfi	r1, r0, #3, #2
    df80:	80d1      	strh	r1, [r2, #6]
    df82:	e7ef      	b.n	df64 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    df84:	43002000 	.word	0x43002000
    df88:	20001f18 	.word	0x20001f18
    df8c:	200019d0 	.word	0x200019d0
    df90:	20001dec 	.word	0x20001dec

0000df94 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    df94:	2907      	cmp	r1, #7
    df96:	dc33      	bgt.n	e000 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    df98:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    df9a:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    df9c:	b083      	sub	sp, #12
    df9e:	4605      	mov	r5, r0
    switch (theUnits) {
    dfa0:	d033      	beq.n	e00a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    dfa2:	d336      	bcc.n	e012 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    dfa4:	2b02      	cmp	r3, #2
    dfa6:	d12d      	bne.n	e004 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    dfa8:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    dfaa:	1d0c      	adds	r4, r1, #4
    dfac:	f00e fb10 	bl	1c5d0 <__aeabi_i2d>
    dfb0:	460b      	mov	r3, r1
    dfb2:	4602      	mov	r2, r0
    dfb4:	491a      	ldr	r1, [pc, #104]	; (e020 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    dfb6:	2000      	movs	r0, #0
    dfb8:	f00e fc9a 	bl	1c8f0 <__aeabi_ddiv>
    dfbc:	f00e fe50 	bl	1cc60 <__aeabi_d2f>
    dfc0:	ed9f 0a18 	vldr	s0, [pc, #96]	; e024 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    dfc4:	ee00 0a90 	vmov	s1, r0
    dfc8:	f00d fbaa 	bl	1b720 <powf>
    dfcc:	eddf 6a16 	vldr	s13, [pc, #88]	; e028 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    dfd0:	ed9f 7a16 	vldr	s14, [pc, #88]	; e02c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    dfd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    dfd8:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    dfdc:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    dfde:	eef4 7ac7 	vcmpe.f32	s15, s14
    dfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dfe6:	bf49      	itett	mi
    dfe8:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    dfec:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    dff0:	edcd 7a01 	vstrmi	s15, [sp, #4]
    dff4:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    dff8:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    dffc:	b003      	add	sp, #12
    dffe:	bd30      	pop	{r4, r5, pc}
        return false;
    e000:	2000      	movs	r0, #0
    e002:	4770      	bx	lr
            return false;
    e004:	2000      	movs	r0, #0
}
    e006:	b003      	add	sp, #12
    e008:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    e00a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    e00e:	b290      	uxth	r0, r2
    e010:	e7cb      	b.n	dfaa <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    e012:	3104      	adds	r1, #4
            return true;
    e014:	2001      	movs	r0, #1
        m_tc = newTc;
    e016:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    e01a:	b003      	add	sp, #12
    e01c:	bd30      	pop	{r4, r5, pc}
    e01e:	bf00      	nop
    e020:	3ff00000 	.word	0x3ff00000
    e024:	3c23d70a 	.word	0x3c23d70a
    e028:	47000000 	.word	0x47000000
    e02c:	46fffe00 	.word	0x46fffe00

0000e030 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    e032:	f7ff fc8f 	bl	d954 <_ZN9ClearCore10AdcManager8InstanceEv>
    e036:	4a0f      	ldr	r2, [pc, #60]	; (e074 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    e038:	4b0f      	ldr	r3, [pc, #60]	; (e078 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    e03a:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    e03c:	2104      	movs	r1, #4
    e03e:	2205      	movs	r2, #5
    e040:	2706      	movs	r7, #6
    e042:	2607      	movs	r6, #7
    e044:	2508      	movs	r5, #8
    e046:	2409      	movs	r4, #9
    e048:	200a      	movs	r0, #10
    e04a:	8019      	strh	r1, [r3, #0]
    e04c:	809a      	strh	r2, [r3, #4]
    e04e:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    e052:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    e054:	811f      	strh	r7, [r3, #8]
    e056:	819e      	strh	r6, [r3, #12]
    e058:	821d      	strh	r5, [r3, #16]
    e05a:	829c      	strh	r4, [r3, #20]
    e05c:	8318      	strh	r0, [r3, #24]
    e05e:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    e060:	805a      	strh	r2, [r3, #2]
    e062:	80da      	strh	r2, [r3, #6]
    e064:	815a      	strh	r2, [r3, #10]
    e066:	81da      	strh	r2, [r3, #14]
    e068:	825a      	strh	r2, [r3, #18]
    e06a:	82da      	strh	r2, [r3, #22]
    e06c:	835a      	strh	r2, [r3, #26]
    e06e:	83da      	strh	r2, [r3, #30]
    e070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e072:	bf00      	nop
    e074:	20001dfc 	.word	0x20001dfc
    e078:	20001e00 	.word	0x20001e00

0000e07c <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    e07c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    e080:	4770      	bx	lr
    e082:	bf00      	nop

0000e084 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e084:	7980      	ldrb	r0, [r0, #6]
    e086:	4770      	bx	lr

0000e088 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    e088:	2004      	movs	r0, #4
    e08a:	4770      	bx	lr

0000e08c <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    e08c:	7980      	ldrb	r0, [r0, #6]
    e08e:	1ec3      	subs	r3, r0, #3
    e090:	2b01      	cmp	r3, #1
    e092:	bf83      	ittte	hi
    e094:	3806      	subhi	r0, #6
    e096:	fab0 f080 	clzhi	r0, r0
    e09a:	0940      	lsrhi	r0, r0, #5
    e09c:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    e09e:	4770      	bx	lr

0000e0a0 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    e0a0:	b530      	push	{r4, r5, lr}
    e0a2:	b083      	sub	sp, #12
    e0a4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    e0a8:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e0aa:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    e0ac:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e0ae:	f000 fcfd 	bl	eaac <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    e0b2:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e0b6:	4a05      	ldr	r2, [pc, #20]	; (e0cc <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    e0b8:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e0ba:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    e0bc:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e0be:	4b04      	ldr	r3, [pc, #16]	; (e0d0 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    e0c0:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e0c2:	4620      	mov	r0, r4
    e0c4:	66a3      	str	r3, [r4, #104]	; 0x68
    e0c6:	b003      	add	sp, #12
    e0c8:	bd30      	pop	{r4, r5, pc}
    e0ca:	bf00      	nop
    e0cc:	00023ebc 	.word	0x00023ebc
    e0d0:	06a40000 	.word	0x06a40000

0000e0d4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    e0d4:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    e0d6:	4a3a      	ldr	r2, [pc, #232]	; (e1c0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    e0d8:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    e0dc:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    e0e0:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    e0e2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    e0e6:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    e0ea:	065d      	lsls	r5, r3, #25
    e0ec:	d4fb      	bmi.n	e0e6 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    e0ee:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    e0f2:	4933      	ldr	r1, [pc, #204]	; (e1c0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    e0f4:	2004      	movs	r0, #4
    e0f6:	f360 0303 	bfi	r3, r0, #0, #4
    e0fa:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    e0fe:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    e102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e106:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    e10a:	684b      	ldr	r3, [r1, #4]
    e10c:	06d8      	lsls	r0, r3, #27
    e10e:	d4fc      	bmi.n	e10a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    e110:	4a2c      	ldr	r2, [pc, #176]	; (e1c4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    e112:	492d      	ldr	r1, [pc, #180]	; (e1c8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    e114:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    e116:	4b2d      	ldr	r3, [pc, #180]	; (e1cc <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    e118:	2507      	movs	r5, #7
    e11a:	f365 4013 	bfi	r0, r5, #16, #4
    e11e:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    e120:	6a0a      	ldr	r2, [r1, #32]
    e122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    e126:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    e128:	781a      	ldrb	r2, [r3, #0]
    e12a:	f042 0201 	orr.w	r2, r2, #1
    e12e:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    e130:	689a      	ldr	r2, [r3, #8]
    e132:	07d2      	lsls	r2, r2, #31
    e134:	d4fc      	bmi.n	e130 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    e136:	785a      	ldrb	r2, [r3, #1]
    e138:	f042 0201 	orr.w	r2, r2, #1
    e13c:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    e13e:	785a      	ldrb	r2, [r3, #1]
    e140:	f042 0206 	orr.w	r2, r2, #6
    e144:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    e146:	899a      	ldrh	r2, [r3, #12]
    e148:	f042 0202 	orr.w	r2, r2, #2
    e14c:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    e14e:	899a      	ldrh	r2, [r3, #12]
    e150:	2105      	movs	r1, #5
    e152:	f361 220b 	bfi	r2, r1, #8, #4
    e156:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    e158:	899a      	ldrh	r2, [r3, #12]
    e15a:	2102      	movs	r1, #2
    e15c:	f361 0283 	bfi	r2, r1, #2, #2
    e160:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    e162:	8a1b      	ldrh	r3, [r3, #16]
    e164:	b29b      	uxth	r3, r3
    e166:	bb23      	cbnz	r3, e1b2 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    e168:	4b19      	ldr	r3, [pc, #100]	; (e1d0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    e16a:	681d      	ldr	r5, [r3, #0]
    e16c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    e170:	4628      	mov	r0, r5
    e172:	f004 fadd 	bl	12730 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e176:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    e17a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e17e:	4628      	mov	r0, r5
    e180:	f004 fad6 	bl	12730 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    e184:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e188:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    e18a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e18e:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    e192:	461a      	mov	r2, r3
    e194:	db03      	blt.n	e19e <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    e196:	2300      	movs	r3, #0
    e198:	461a      	mov	r2, r3
    e19a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    e19e:	4410      	add	r0, r2
    e1a0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    e1a4:	db04      	blt.n	e1b0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    e1a6:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    e1aa:	3304      	adds	r3, #4
    e1ac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    e1b0:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e1b2:	4a06      	ldr	r2, [pc, #24]	; (e1cc <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    e1b4:	6893      	ldr	r3, [r2, #8]
    e1b6:	f013 0304 	ands.w	r3, r3, #4
    e1ba:	d1fb      	bne.n	e1b4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    e1bc:	8213      	strh	r3, [r2, #16]
    e1be:	e7d3      	b.n	e168 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    e1c0:	40001c00 	.word	0x40001c00
    e1c4:	40001800 	.word	0x40001800
    e1c8:	40000800 	.word	0x40000800
    e1cc:	43002400 	.word	0x43002400
    e1d0:	20001f24 	.word	0x20001f24

0000e1d4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    e1d4:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    e1d6:	4a2e      	ldr	r2, [pc, #184]	; (e290 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    e1d8:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    e1dc:	8a13      	ldrh	r3, [r2, #16]
    e1de:	b29b      	uxth	r3, r3
    e1e0:	4299      	cmp	r1, r3
    e1e2:	d003      	beq.n	e1ec <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e1e4:	6893      	ldr	r3, [r2, #8]
    e1e6:	075d      	lsls	r5, r3, #29
    e1e8:	d4fc      	bmi.n	e1e4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    e1ea:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e1ec:	68c3      	ldr	r3, [r0, #12]
    e1ee:	4929      	ldr	r1, [pc, #164]	; (e294 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    e1f0:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e1f2:	4a27      	ldr	r2, [pc, #156]	; (e290 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e1f4:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e1f8:	4423      	add	r3, r4
    e1fa:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    e1fe:	f044 0401 	orr.w	r4, r4, #1
    e202:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    e206:	6e03      	ldr	r3, [r0, #96]	; 0x60
    e208:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e20a:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e20e:	4423      	add	r3, r4
    e210:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    e214:	f041 0101 	orr.w	r1, r1, #1
    e218:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e21c:	6893      	ldr	r3, [r2, #8]
    e21e:	079c      	lsls	r4, r3, #30
    e220:	d4fc      	bmi.n	e21c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    e222:	7813      	ldrb	r3, [r2, #0]
    e224:	0799      	lsls	r1, r3, #30
    e226:	d407      	bmi.n	e238 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    e228:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e22a:	4919      	ldr	r1, [pc, #100]	; (e290 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    e22c:	f043 0302 	orr.w	r3, r3, #2
    e230:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e232:	688b      	ldr	r3, [r1, #8]
    e234:	079a      	lsls	r2, r3, #30
    e236:	d4fc      	bmi.n	e232 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    e238:	4a15      	ldr	r2, [pc, #84]	; (e290 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    e23a:	79d3      	ldrb	r3, [r2, #7]
    e23c:	079b      	lsls	r3, r3, #30
    e23e:	d0fc      	beq.n	e23a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    e240:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e242:	4b15      	ldr	r3, [pc, #84]	; (e298 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    e244:	f002 010f 	and.w	r1, r2, #15
    e248:	185a      	adds	r2, r3, r1
    e24a:	2400      	movs	r4, #0
    e24c:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e250:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e252:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e256:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e25a:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e25c:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e260:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    e262:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e264:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    e266:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e26a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e26e:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e272:	33f4      	adds	r3, #244	; 0xf4
    e274:	f3bf 8f5b 	dmb	ish
    e278:	e853 2f00 	ldrex	r2, [r3]
    e27c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    e280:	e843 2100 	strex	r1, r2, [r3]
    e284:	2900      	cmp	r1, #0
    e286:	d1f7      	bne.n	e278 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    e288:	f3bf 8f5b 	dmb	ish
}
    e28c:	bc70      	pop	{r4, r5, r6}
    e28e:	4770      	bx	lr
    e290:	43002400 	.word	0x43002400
    e294:	41008000 	.word	0x41008000
    e298:	200019d0 	.word	0x200019d0

0000e29c <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    e29c:	7983      	ldrb	r3, [r0, #6]
    e29e:	2b06      	cmp	r3, #6
    e2a0:	d805      	bhi.n	e2ae <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    e2a2:	2201      	movs	r2, #1
    e2a4:	fa02 f303 	lsl.w	r3, r2, r3
    e2a8:	f013 0f54 	tst.w	r3, #84	; 0x54
    e2ac:	d100      	bne.n	e2b0 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    e2ae:	4770      	bx	lr
            DigitalInOut::Refresh();
    e2b0:	f000 bc32 	b.w	eb18 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000e2b4 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    e2b6:	7983      	ldrb	r3, [r0, #6]
    e2b8:	428b      	cmp	r3, r1
    e2ba:	d06e      	beq.n	e39a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    e2bc:	1e8a      	subs	r2, r1, #2
    e2be:	460c      	mov	r4, r1
    e2c0:	4605      	mov	r5, r0
    e2c2:	2a04      	cmp	r2, #4
    e2c4:	d80d      	bhi.n	e2e2 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e2c6:	e8df f002 	tbb	[pc, r2]
    e2ca:	0311      	.short	0x0311
    e2cc:	0c11      	.short	0x0c11
    e2ce:	11          	.byte	0x11
    e2cf:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    e2d0:	2102      	movs	r1, #2
    e2d2:	f000 fad9 	bl	e888 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    e2d6:	4628      	mov	r0, r5
    e2d8:	f7ff ff7c 	bl	e1d4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    e2dc:	2303      	movs	r3, #3
    e2de:	71ab      	strb	r3, [r5, #6]
            break;
    e2e0:	4623      	mov	r3, r4
    return (m_mode == newMode);
    e2e2:	1ae0      	subs	r0, r4, r3
    e2e4:	fab0 f080 	clz	r0, r0
    e2e8:	0940      	lsrs	r0, r0, #5
    e2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e2ec:	4b2c      	ldr	r3, [pc, #176]	; (e3a0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    e2ee:	f3bf 8f5b 	dmb	ish
    e2f2:	e853 2f00 	ldrex	r2, [r3]
    e2f6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    e2fa:	e843 2100 	strex	r1, r2, [r3]
    e2fe:	2900      	cmp	r1, #0
    e300:	d1f7      	bne.n	e2f2 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    e302:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    e306:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e308:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e30c:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e30e:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e310:	4924      	ldr	r1, [pc, #144]	; (e3a4 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e312:	3bf4      	subs	r3, #244	; 0xf4
    e314:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e318:	f04f 0e01 	mov.w	lr, #1
    e31c:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e320:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e324:	ea27 070e 	bic.w	r7, r7, lr
    e328:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    e32c:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e32e:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e332:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    e336:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    e33a:	4438      	add	r0, r7
    e33c:	ea22 0606 	bic.w	r6, r2, r6
    e340:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    e344:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e348:	4a17      	ldr	r2, [pc, #92]	; (e3a8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e34a:	f36f 0300 	bfc	r3, #0, #1
    e34e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    e352:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    e354:	6e68      	ldr	r0, [r5, #100]	; 0x64
    e356:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e35a:	4403      	add	r3, r0
    e35c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    e360:	f36f 0100 	bfc	r1, #0, #1
    e364:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e368:	6893      	ldr	r3, [r2, #8]
    e36a:	f013 0302 	ands.w	r3, r3, #2
    e36e:	d1fb      	bne.n	e368 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    e370:	7811      	ldrb	r1, [r2, #0]
    e372:	0789      	lsls	r1, r1, #30
    e374:	d507      	bpl.n	e386 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    e376:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e378:	490b      	ldr	r1, [pc, #44]	; (e3a8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    e37a:	f363 0041 	bfi	r0, r3, #1, #1
    e37e:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e380:	688b      	ldr	r3, [r1, #8]
    e382:	079b      	lsls	r3, r3, #30
    e384:	d4fc      	bmi.n	e380 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    e386:	4621      	mov	r1, r4
    e388:	4628      	mov	r0, r5
    e38a:	f000 fa7d 	bl	e888 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    e38e:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    e390:	1ae0      	subs	r0, r4, r3
    e392:	fab0 f080 	clz	r0, r0
    e396:	0940      	lsrs	r0, r0, #5
    e398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    e39a:	2001      	movs	r0, #1
}
    e39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e39e:	bf00      	nop
    e3a0:	20001ac4 	.word	0x20001ac4
    e3a4:	41008000 	.word	0x41008000
    e3a8:	43002400 	.word	0x43002400

0000e3ac <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    e3ac:	7983      	ldrb	r3, [r0, #6]
    e3ae:	2b06      	cmp	r3, #6
    e3b0:	d805      	bhi.n	e3be <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    e3b2:	2201      	movs	r2, #1
    e3b4:	fa02 f303 	lsl.w	r3, r2, r3
    e3b8:	f013 0f54 	tst.w	r3, #84	; 0x54
    e3bc:	d101      	bne.n	e3c2 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    e3be:	2000      	movs	r0, #0
    e3c0:	4770      	bx	lr
            state = DigitalInOut::State();
    e3c2:	f000 bcaf 	b.w	ed24 <_ZN9ClearCore12DigitalInOut5StateEv>
    e3c6:	bf00      	nop

0000e3c8 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    e3c8:	7983      	ldrb	r3, [r0, #6]
    e3ca:	3b02      	subs	r3, #2
    e3cc:	2b04      	cmp	r3, #4
    e3ce:	d83c      	bhi.n	e44a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    e3d0:	e8df f003 	tbb	[pc, r3]
    e3d4:	3b390339 	.word	0x3b390339
    e3d8:	39          	.byte	0x39
    e3d9:	00          	.byte	0x00
            newState = max(newState, 0);
    e3da:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    e3de:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    e3e0:	b289      	uxth	r1, r1
    e3e2:	f240 74ff 	movw	r4, #2047	; 0x7ff
    e3e6:	42a1      	cmp	r1, r4
    e3e8:	bf28      	it	cs
    e3ea:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    e3ec:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    e3ee:	4d19      	ldr	r5, [pc, #100]	; (e454 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    e3f0:	4e19      	ldr	r6, [pc, #100]	; (e458 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    e3f2:	4a1a      	ldr	r2, [pc, #104]	; (e45c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    e3f4:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    e3f8:	fb85 e503 	smull	lr, r5, r5, r3
    e3fc:	f007 070f 	and.w	r7, r7, #15
    e400:	441d      	add	r5, r3
    e402:	443e      	add	r6, r7
    e404:	17db      	asrs	r3, r3, #31
    e406:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    e40a:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    e40e:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    e412:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    e416:	4812      	ldr	r0, [pc, #72]	; (e460 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    e418:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    e41c:	fba2 5201 	umull	r5, r2, r2, r1
    e420:	1a89      	subs	r1, r1, r2
    e422:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    e426:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    e42a:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    e42c:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    e42e:	42a1      	cmp	r1, r4
    e430:	bf28      	it	cs
    e432:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    e434:	b29b      	uxth	r3, r3
    e436:	4299      	cmp	r1, r3
    e438:	d009      	beq.n	e44e <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e43a:	6883      	ldr	r3, [r0, #8]
    e43c:	075b      	lsls	r3, r3, #29
    e43e:	d4fc      	bmi.n	e43a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    e440:	8201      	strh	r1, [r0, #16]
            success = true;
    e442:	2001      	movs	r0, #1
    e444:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    e446:	f000 b9c3 	b.w	e7d0 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e44a:	2000      	movs	r0, #0
    e44c:	4770      	bx	lr
            success = true;
    e44e:	2001      	movs	r0, #1
}
    e450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e452:	bf00      	nop
    e454:	80100201 	.word	0x80100201
    e458:	200019d0 	.word	0x200019d0
    e45c:	00200401 	.word	0x00200401
    e460:	43002400 	.word	0x43002400

0000e464 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    e464:	b538      	push	{r3, r4, r5, lr}
    e466:	4604      	mov	r4, r0
    e468:	460d      	mov	r5, r1
    DacInitialize();
    e46a:	f7ff fe33 	bl	e0d4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    e46e:	4620      	mov	r0, r4
    e470:	4629      	mov	r1, r5
    e472:	f000 fc77 	bl	ed64 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    e476:	6920      	ldr	r0, [r4, #16]
    e478:	07c2      	lsls	r2, r0, #31
    e47a:	d521      	bpl.n	e4c0 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    e47c:	68e1      	ldr	r1, [r4, #12]
    e47e:	01c9      	lsls	r1, r1, #7
    e480:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    e484:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e488:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    e48c:	2101      	movs	r1, #1
    e48e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e492:	f361 1307 	bfi	r3, r1, #4, #4
    e496:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    e49a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    e49c:	07cb      	lsls	r3, r1, #31
    e49e:	d421      	bmi.n	e4e4 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    e4a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e4a2:	01db      	lsls	r3, r3, #7
    e4a4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e4a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e4ac:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    e4b0:	2101      	movs	r1, #1
    e4b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e4b6:	f361 0203 	bfi	r2, r1, #0, #4
    e4ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    e4be:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    e4c0:	68e2      	ldr	r2, [r4, #12]
    e4c2:	01d2      	lsls	r2, r2, #7
    e4c4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e4c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e4cc:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    e4d0:	2101      	movs	r1, #1
    e4d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e4d6:	f361 0203 	bfi	r2, r1, #0, #4
    e4da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    e4de:	6e61      	ldr	r1, [r4, #100]	; 0x64
    e4e0:	07cb      	lsls	r3, r1, #31
    e4e2:	d5dd      	bpl.n	e4a0 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    e4e4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    e4e6:	01d2      	lsls	r2, r2, #7
    e4e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    e4ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e4f0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    e4f4:	2101      	movs	r1, #1
    e4f6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e4fa:	f361 1307 	bfi	r3, r1, #4, #4
    e4fe:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e502:	bd38      	pop	{r3, r4, r5, pc}

0000e504 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
    }
    e504:	2000      	movs	r0, #0
    e506:	4770      	bx	lr

0000e508 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e508:	7980      	ldrb	r0, [r0, #6]
    e50a:	4770      	bx	lr

0000e50c <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    e50c:	2003      	movs	r0, #3
    e50e:	4770      	bx	lr

0000e510 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    e510:	2000      	movs	r0, #0
    e512:	4770      	bx	lr

0000e514 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    e514:	2000      	movs	r0, #0
    e516:	4770      	bx	lr

0000e518 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    e51a:	7983      	ldrb	r3, [r0, #6]
    e51c:	428b      	cmp	r3, r1
    e51e:	d072      	beq.n	e606 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    e520:	2901      	cmp	r1, #1
    e522:	460c      	mov	r4, r1
    e524:	4605      	mov	r5, r0
    e526:	d03c      	beq.n	e5a2 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    e528:	2902      	cmp	r1, #2
    e52a:	d135      	bne.n	e598 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e52c:	4e37      	ldr	r6, [pc, #220]	; (e60c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    e52e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e530:	f3bf 8f5b 	dmb	ish
    e534:	e856 2f00 	ldrex	r2, [r6]
    e538:	431a      	orrs	r2, r3
    e53a:	e846 2100 	strex	r1, r2, [r6]
    e53e:	2900      	cmp	r1, #0
    e540:	d1f8      	bne.n	e534 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    e542:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    e546:	3ef4      	subs	r6, #244	; 0xf4
    e548:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    e54c:	b143      	cbz	r3, e560 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    e54e:	4b30      	ldr	r3, [pc, #192]	; (e610 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    e550:	6b29      	ldr	r1, [r5, #48]	; 0x30
    e552:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    e554:	6e53      	ldr	r3, [r2, #100]	; 0x64
    e556:	420b      	tst	r3, r1
    e558:	d0fc      	beq.n	e554 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    e55a:	4628      	mov	r0, r5
    e55c:	f000 fda6 	bl	f0ac <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    e560:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e562:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e566:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e568:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e56c:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e570:	2001      	movs	r0, #1
    e572:	4098      	lsls	r0, r3
    e574:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e578:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e57c:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    e580:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    e582:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    e586:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e588:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e58c:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    e590:	4603      	mov	r3, r0
            m_mode = newMode;
    e592:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    e594:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    e598:	1ae0      	subs	r0, r4, r3
    e59a:	fab0 f080 	clz	r0, r0
    e59e:	0940      	lsrs	r0, r0, #5
    e5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e5a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e5a4:	4e19      	ldr	r6, [pc, #100]	; (e60c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    e5a6:	f3bf 8f5b 	dmb	ish
    e5aa:	43db      	mvns	r3, r3
    e5ac:	e856 2f00 	ldrex	r2, [r6]
    e5b0:	401a      	ands	r2, r3
    e5b2:	e846 2100 	strex	r1, r2, [r6]
    e5b6:	2900      	cmp	r1, #0
    e5b8:	d1f8      	bne.n	e5ac <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    e5ba:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    e5be:	3ef4      	subs	r6, #244	; 0xf4
    e5c0:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    e5c4:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    e5c6:	b11b      	cbz	r3, e5d0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    e5c8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    e5cc:	2b00      	cmp	r3, #0
    e5ce:	d0fb      	beq.n	e5c8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    e5d0:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e5d2:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e5d6:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    e5d8:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e5dc:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e5de:	f003 030f 	and.w	r3, r3, #15
    e5e2:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e5e6:	fa00 f303 	lsl.w	r3, r0, r3
    e5ea:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    e5ec:	4603      	mov	r3, r0
    return (m_mode == newMode);
    e5ee:	1ae0      	subs	r0, r4, r3
    e5f0:	4329      	orrs	r1, r5
    e5f2:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e5f6:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    e5fa:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e5fe:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    e602:	0940      	lsrs	r0, r0, #5
    e604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    e606:	2001      	movs	r0, #1
}
    e608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e60a:	bf00      	nop
    e60c:	20001ac4 	.word	0x20001ac4
    e610:	20001dfc 	.word	0x20001dfc

0000e614 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    e614:	b570      	push	{r4, r5, r6, lr}
    e616:	4604      	mov	r4, r0
    e618:	4616      	mov	r6, r2
      m_analogValid(false) {}
    e61a:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    e61c:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    e620:	f000 fd12 	bl	f048 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    e624:	2300      	movs	r3, #0
    e626:	4a05      	ldr	r2, [pc, #20]	; (e63c <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    e628:	6326      	str	r6, [r4, #48]	; 0x30
    e62a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    e62e:	6022      	str	r2, [r4, #0]
    e630:	63a3      	str	r3, [r4, #56]	; 0x38
    e632:	63e3      	str	r3, [r4, #60]	; 0x3c
    e634:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    e638:	4620      	mov	r0, r4
    e63a:	bd70      	pop	{r4, r5, r6, pc}
    e63c:	00023eec 	.word	0x00023eec

0000e640 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    e640:	7982      	ldrb	r2, [r0, #6]
    e642:	2a01      	cmp	r2, #1
    e644:	d004      	beq.n	e650 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    e646:	2a02      	cmp	r2, #2
    e648:	d101      	bne.n	e64e <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    e64a:	f000 bc4d 	b.w	eee8 <_ZN9ClearCore9DigitalIn7RefreshEv>
    e64e:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    e650:	4a17      	ldr	r2, [pc, #92]	; (e6b0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    e652:	6b01      	ldr	r1, [r0, #48]	; 0x30
    e654:	6812      	ldr	r2, [r2, #0]
    e656:	4603      	mov	r3, r0
    e658:	6e50      	ldr	r0, [r2, #100]	; 0x64
    e65a:	4208      	tst	r0, r1
    e65c:	d126      	bne.n	e6ac <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    e65e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    e662:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    e664:	b991      	cbnz	r1, e68c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    e666:	6b99      	ldr	r1, [r3, #56]	; 0x38
    e668:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    e66c:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    e66e:	2c07      	cmp	r4, #7
    e670:	b280      	uxth	r0, r0
    e672:	dc07      	bgt.n	e684 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    e674:	0400      	lsls	r0, r0, #16
    e676:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    e67a:	3408      	adds	r4, #8
        return (m_z >> 16);
    e67c:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    e67e:	6270      	str	r0, [r6, #36]	; 0x24
    e680:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    e684:	2201      	movs	r2, #1
    e686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    e68a:	e000      	b.n	e68e <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    e68c:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    e68e:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    e690:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e692:	4908      	ldr	r1, [pc, #32]	; (e6b4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    e694:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    e698:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    e69c:	b2d8      	uxtb	r0, r3
    e69e:	440a      	add	r2, r1
    e6a0:	2802      	cmp	r0, #2
    e6a2:	bfd8      	it	le
    e6a4:	2300      	movle	r3, #0
    e6a6:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    e6aa:	bc70      	pop	{r4, r5, r6}
    e6ac:	4770      	bx	lr
    e6ae:	bf00      	nop
    e6b0:	20001dfc 	.word	0x20001dfc
    e6b4:	200019d0 	.word	0x200019d0

0000e6b8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    e6b8:	4b29      	ldr	r3, [pc, #164]	; (e760 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    e6ba:	b570      	push	{r4, r5, r6, lr}
    e6bc:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    e6be:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    e6c0:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    e6c2:	4628      	mov	r0, r5
    e6c4:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    e6c8:	2301      	movs	r3, #1
    e6ca:	2202      	movs	r2, #2
    e6cc:	f7ff fc62 	bl	df94 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    e6d0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e6d4:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    e6d6:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    e6da:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    e6dc:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    e6de:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    e6e0:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    e6e2:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    e6e4:	4620      	mov	r0, r4
    e6e6:	f000 fb99 	bl	ee1c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    e6ea:	6823      	ldr	r3, [r4, #0]
    e6ec:	4a1d      	ldr	r2, [pc, #116]	; (e764 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    e6ee:	685b      	ldr	r3, [r3, #4]
    e6f0:	4293      	cmp	r3, r2
    e6f2:	d130      	bne.n	e756 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    e6f4:	79a3      	ldrb	r3, [r4, #6]
    e6f6:	2b01      	cmp	r3, #1
    e6f8:	d02c      	beq.n	e754 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e6fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e6fc:	4a1a      	ldr	r2, [pc, #104]	; (e768 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    e6fe:	f3bf 8f5b 	dmb	ish
    e702:	43db      	mvns	r3, r3
    e704:	e852 1f00 	ldrex	r1, [r2]
    e708:	4019      	ands	r1, r3
    e70a:	e842 1000 	strex	r0, r1, [r2]
    e70e:	2800      	cmp	r0, #0
    e710:	d1f8      	bne.n	e704 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    e712:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    e716:	3af4      	subs	r2, #244	; 0xf4
    e718:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    e71c:	2101      	movs	r1, #1
    e71e:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    e720:	b11b      	cbz	r3, e72a <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    e722:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    e726:	2b00      	cmp	r3, #0
    e728:	d0fb      	beq.n	e722 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    e72a:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e72c:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e730:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    e732:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e736:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e73a:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e73c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e740:	408b      	lsls	r3, r1
    e742:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    e744:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e746:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e74a:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e74e:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    e752:	bd70      	pop	{r4, r5, r6, pc}
    e754:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    e756:	4620      	mov	r0, r4
    e758:	2101      	movs	r1, #1
}
    e75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    e75e:	4718      	bx	r3
    e760:	20001dfc 	.word	0x20001dfc
    e764:	0000e519 	.word	0x0000e519
    e768:	20001ac4 	.word	0x20001ac4

0000e76c <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    e76c:	7982      	ldrb	r2, [r0, #6]
    e76e:	2a01      	cmp	r2, #1
    e770:	d005      	beq.n	e77e <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    e772:	2a02      	cmp	r2, #2
    e774:	d101      	bne.n	e77a <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    e776:	f000 bb3d 	b.w	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    e77a:	2000      	movs	r0, #0
    e77c:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    e77e:	4b0b      	ldr	r3, [pc, #44]	; (e7ac <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    e780:	b510      	push	{r4, lr}
    e782:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    e784:	6818      	ldr	r0, [r3, #0]
    e786:	f003 fd8d 	bl	122a4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    e78a:	b958      	cbnz	r0, e7a4 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    e78c:	4b08      	ldr	r3, [pc, #32]	; (e7b0 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    e78e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    e790:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    e792:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    e794:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    e798:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    e79a:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    e79e:	4118      	asrs	r0, r3
    e7a0:	b200      	sxth	r0, r0
    e7a2:	bd10      	pop	{r4, pc}
                state = -1;
    e7a4:	f04f 30ff 	mov.w	r0, #4294967295
}
    e7a8:	bd10      	pop	{r4, pc}
    e7aa:	bf00      	nop
    e7ac:	20001f18 	.word	0x20001f18
    e7b0:	20001dfc 	.word	0x20001dfc

0000e7b4 <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    e7b4:	7980      	ldrb	r0, [r0, #6]
    e7b6:	4770      	bx	lr

0000e7b8 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    e7b8:	2001      	movs	r0, #1
    e7ba:	4770      	bx	lr

0000e7bc <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    e7bc:	7980      	ldrb	r0, [r0, #6]
    e7be:	2804      	cmp	r0, #4
    e7c0:	bf1d      	ittte	ne
    e7c2:	3806      	subne	r0, #6
    e7c4:	fab0 f080 	clzne	r0, r0
    e7c8:	0940      	lsrne	r0, r0, #5
    e7ca:	2001      	moveq	r0, #1
    }
    e7cc:	4770      	bx	lr
    e7ce:	bf00      	nop

0000e7d0 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    e7d0:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    e7d2:	2300      	movs	r3, #0
    switch (m_mode) {
    e7d4:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    e7d6:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e7da:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    e7de:	d02a      	beq.n	e836 <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    e7e0:	2a06      	cmp	r2, #6
    e7e2:	d126      	bne.n	e832 <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e7e4:	b28b      	uxth	r3, r1
    e7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e7ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e7ee:	bf28      	it	cs
    e7f0:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    e7f2:	b470      	push	{r4, r5, r6}
    e7f4:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e7f6:	2b00      	cmp	r3, #0
    e7f8:	d040      	beq.n	e87c <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    e7fa:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e7fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    e7fe:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    e802:	18d6      	adds	r6, r2, r3
    e804:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    e808:	42ac      	cmp	r4, r5
    e80a:	d008      	beq.n	e81e <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e80c:	2b00      	cmp	r3, #0
    e80e:	bf0c      	ite	eq
    e810:	2440      	moveq	r4, #64	; 0x40
    e812:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e814:	6913      	ldr	r3, [r2, #16]
    e816:	4223      	tst	r3, r4
    e818:	d1fc      	bne.n	e814 <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e81a:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    e81e:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e820:	4b18      	ldr	r3, [pc, #96]	; (e884 <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    e822:	f002 020f 	and.w	r2, r2, #15
    e826:	4413      	add	r3, r2
    e828:	2001      	movs	r0, #1
    e82a:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    e82e:	bc70      	pop	{r4, r5, r6}
    e830:	4770      	bx	lr
    bool success = false;
    e832:	4618      	mov	r0, r3
    e834:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    e836:	1c0b      	adds	r3, r1, #0
    e838:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    e83c:	bf18      	it	ne
    e83e:	2301      	movne	r3, #1
    e840:	429a      	cmp	r2, r3
    e842:	d004      	beq.n	e84e <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e844:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    e846:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e84a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    e84e:	b121      	cbz	r1, e85a <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    e850:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    e854:	fab1 f181 	clz	r1, r1
    e858:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    e85a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    e85e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e860:	428b      	cmp	r3, r1
    e862:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e864:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e868:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e86c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e870:	f04f 0001 	mov.w	r0, #1
    e874:	bf14      	ite	ne
    e876:	619a      	strne	r2, [r3, #24]
    e878:	615a      	streq	r2, [r3, #20]
    e87a:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e87c:	43cd      	mvns	r5, r1
    e87e:	b2ed      	uxtb	r5, r5
    e880:	e7bc      	b.n	e7fc <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    e882:	bf00      	nop
    e884:	200019d0 	.word	0x200019d0

0000e888 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    e888:	7983      	ldrb	r3, [r0, #6]
    e88a:	428b      	cmp	r3, r1
    e88c:	f000 80cb 	beq.w	ea26 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    e894:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e896:	b082      	sub	sp, #8
    e898:	4604      	mov	r4, r0
    e89a:	460d      	mov	r5, r1
    switch (newMode) {
    e89c:	f000 8087 	beq.w	e9ae <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    e8a0:	2906      	cmp	r1, #6
    e8a2:	d008      	beq.n	e8b6 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e8a4:	2902      	cmp	r1, #2
    e8a6:	d033      	beq.n	e910 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    e8a8:	1ae8      	subs	r0, r5, r3
    e8aa:	fab0 f080 	clz	r0, r0
    e8ae:	0940      	lsrs	r0, r0, #5
}
    e8b0:	b002      	add	sp, #8
    e8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    e8b6:	6803      	ldr	r3, [r0, #0]
    e8b8:	4a79      	ldr	r2, [pc, #484]	; (eaa0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    e8ba:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    e8bc:	71a1      	strb	r1, [r4, #6]
    e8be:	4293      	cmp	r3, r2
    e8c0:	f040 80b3 	bne.w	ea2a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e8c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
    e8c6:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e8ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    e8ce:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e8d0:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e8d2:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    e8d6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    e8da:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e8de:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e8e0:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e8e4:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e8e6:	429a      	cmp	r2, r3
    e8e8:	d008      	beq.n	e8fc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e8ea:	2e00      	cmp	r6, #0
    e8ec:	bf0c      	ite	eq
    e8ee:	2640      	moveq	r6, #64	; 0x40
    e8f0:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e8f2:	690a      	ldr	r2, [r1, #16]
    e8f4:	4232      	tst	r2, r6
    e8f6:	d1fc      	bne.n	e8f2 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e8f8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    e8fc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e900:	4e68      	ldr	r6, [pc, #416]	; (eaa4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e902:	f001 020f 	and.w	r2, r1, #15
    e906:	18b3      	adds	r3, r6, r2
    e908:	2000      	movs	r0, #0
    e90a:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    e90e:	e093      	b.n	ea38 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    e910:	2300      	movs	r3, #0
    e912:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    e916:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    e918:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    e91c:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    e920:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e922:	6b81      	ldr	r1, [r0, #56]	; 0x38
    e924:	01db      	lsls	r3, r3, #7
    e926:	2a00      	cmp	r2, #0
    e928:	d177      	bne.n	ea1a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    e92a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e92e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e932:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e934:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e938:	4e5a      	ldr	r6, [pc, #360]	; (eaa4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e93a:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e93c:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e940:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e944:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e948:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e94c:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e950:	f04f 0e01 	mov.w	lr, #1
    e954:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e958:	443b      	add	r3, r7
    e95a:	fa0e f702 	lsl.w	r7, lr, r2
    e95e:	ea28 0707 	bic.w	r7, r8, r7
    e962:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e966:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    e96a:	ea6f 070c 	mvn.w	r7, ip
    e96e:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e970:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e974:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e978:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e97c:	f36f 0200 	bfc	r2, #0, #1
    e980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    e984:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e988:	2b00      	cmp	r3, #0
    e98a:	f000 8086 	beq.w	ea9a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e98e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e992:	4845      	ldr	r0, [pc, #276]	; (eaa8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e994:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    e998:	2200      	movs	r2, #0
    e99a:	401f      	ands	r7, r3
    e99c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e9a0:	6800      	ldr	r0, [r0, #0]
    e9a2:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    e9a6:	f003 fe71 	bl	1268c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    e9aa:	79a3      	ldrb	r3, [r4, #6]
    e9ac:	e77c      	b.n	e8a8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e9ae:	220c      	movs	r2, #12
            State(m_outState);
    e9b0:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e9b2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    e9b6:	2600      	movs	r6, #0
            m_mode = newMode;
    e9b8:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    e9ba:	695b      	ldr	r3, [r3, #20]
    e9bc:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    e9c0:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    e9c4:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    e9c6:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e9c8:	4936      	ldr	r1, [pc, #216]	; (eaa4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e9ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
    e9cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e9ce:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e9d2:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e9d6:	f04f 0e01 	mov.w	lr, #1
    e9da:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    e9de:	fa0e f002 	lsl.w	r0, lr, r2
    e9e2:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e9e6:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e9ea:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e9ee:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e9f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e9f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e9fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    e9fe:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea02:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ea06:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    ea0a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ea0e:	f366 0200 	bfi	r2, r6, #0, #1
    ea12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ea16:	79a3      	ldrb	r3, [r4, #6]
            break;
    ea18:	e746      	b.n	e8a8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    ea1a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    ea1e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    ea22:	6191      	str	r1, [r2, #24]
    ea24:	e786      	b.n	e934 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    ea26:	2001      	movs	r0, #1
    ea28:	4770      	bx	lr
            State(0);
    ea2a:	2100      	movs	r1, #0
    ea2c:	4798      	blx	r3
    ea2e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    ea32:	4e1c      	ldr	r6, [pc, #112]	; (eaa4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    ea34:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    ea38:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    ea3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ea3e:	9301      	str	r3, [sp, #4]
    ea40:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    ea42:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea44:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    ea48:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    ea4c:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    ea50:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea52:	fa0c fe02 	lsl.w	lr, ip, r2
    ea56:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea5a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    ea5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea62:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    ea66:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea68:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea6c:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    ea70:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    ea74:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ea78:	ea42 020c 	orr.w	r2, r2, ip
    ea7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    ea80:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    ea84:	2b00      	cmp	r3, #0
    ea86:	d090      	beq.n	e9aa <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    ea88:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ea8c:	4806      	ldr	r0, [pc, #24]	; (eaa8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    ea8e:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    ea92:	2200      	movs	r2, #0
    ea94:	ea23 0707 	bic.w	r7, r3, r7
    ea98:	e780      	b.n	e99c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    ea9a:	2302      	movs	r3, #2
    ea9c:	e704      	b.n	e8a8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    ea9e:	bf00      	nop
    eaa0:	0000e7d1 	.word	0x0000e7d1
    eaa4:	200019d0 	.word	0x200019d0
    eaa8:	20001f18 	.word	0x20001f18

0000eaac <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    eaac:	b570      	push	{r4, r5, r6, lr}
    eaae:	461d      	mov	r5, r3
    eab0:	4604      	mov	r4, r0
    eab2:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    eab6:	f000 fac7 	bl	f048 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    eaba:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    eabe:	4a14      	ldr	r2, [pc, #80]	; (eb10 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    eac0:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    eac2:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    eac4:	78aa      	ldrb	r2, [r5, #2]
    eac6:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    eac8:	2301      	movs	r3, #1
    eaca:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    eacc:	2200      	movs	r2, #0
    eace:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    ead2:	63a3      	str	r3, [r4, #56]	; 0x38
    ead4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    ead8:	7aeb      	ldrb	r3, [r5, #11]
    eada:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    eade:	230c      	movs	r3, #12
    eae0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    eae4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    eae8:	64a2      	str	r2, [r4, #72]	; 0x48
    eaea:	64e2      	str	r2, [r4, #76]	; 0x4c
    eaec:	6522      	str	r2, [r4, #80]	; 0x50
    eaee:	6562      	str	r2, [r4, #84]	; 0x54
    eaf0:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    eaf4:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    eaf8:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    eafc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    eb00:	7aaa      	ldrb	r2, [r5, #10]
    eb02:	4b04      	ldr	r3, [pc, #16]	; (eb14 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    eb04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    eb08:	6423      	str	r3, [r4, #64]	; 0x40
}
    eb0a:	4620      	mov	r0, r4
    eb0c:	bd70      	pop	{r4, r5, r6, pc}
    eb0e:	bf00      	nop
    eb10:	00023f1c 	.word	0x00023f1c
    eb14:	00023f44 	.word	0x00023f44

0000eb18 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    eb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb1a:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    eb1c:	f000 f9e4 	bl	eee8 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    eb20:	79a3      	ldrb	r3, [r4, #6]
    eb22:	2b04      	cmp	r3, #4
    eb24:	d12d      	bne.n	eb82 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    eb26:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    eb2a:	bb5b      	cbnz	r3, eb84 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    eb2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    eb30:	2b00      	cmp	r3, #0
    eb32:	f040 809d 	bne.w	ec70 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    eb36:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    eb3a:	220c      	movs	r2, #12
    eb3c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    eb40:	b19b      	cbz	r3, eb6a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    eb42:	4d75      	ldr	r5, [pc, #468]	; (ed18 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    eb44:	68a7      	ldr	r7, [r4, #8]
    eb46:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    eb4a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    eb4e:	4873      	ldr	r0, [pc, #460]	; (ed1c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    eb50:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    eb52:	2601      	movs	r6, #1
    eb54:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    eb58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    eb5c:	fa06 f101 	lsl.w	r1, r6, r1
    eb60:	6800      	ldr	r0, [r0, #0]
    eb62:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    eb66:	f003 fd91 	bl	1268c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    eb6a:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    eb6e:	b143      	cbz	r3, eb82 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    eb70:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    eb74:	b303      	cbz	r3, ebb8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    eb76:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    eb7a:	429a      	cmp	r2, r3
    eb7c:	db1c      	blt.n	ebb8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    eb7e:	4293      	cmp	r3, r2
    eb80:	d070      	beq.n	ec64 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    eb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    eb84:	3b01      	subs	r3, #1
    eb86:	b29b      	uxth	r3, r3
    eb88:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	d1ec      	bne.n	eb6a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    eb90:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    eb94:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    eb98:	429a      	cmp	r2, r3
    eb9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eb9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    eb9e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    eba2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    eba6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ebaa:	bf14      	ite	ne
    ebac:	619a      	strne	r2, [r3, #24]
    ebae:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ebb0:	230c      	movs	r3, #12
    ebb2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    ebb6:	e7d8      	b.n	eb6a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    ebb8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    ebbc:	bb5b      	cbnz	r3, ec16 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    ebbe:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    ebc2:	2b00      	cmp	r3, #0
    ebc4:	d14e      	bne.n	ec64 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    ebc6:	4a56      	ldr	r2, [pc, #344]	; (ed20 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    ebc8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ebca:	6813      	ldr	r3, [r2, #0]
    ebcc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ebce:	1a1b      	subs	r3, r3, r0
    ebd0:	428b      	cmp	r3, r1
    ebd2:	d3d6      	bcc.n	eb82 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    ebd4:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    ebd8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    ebdc:	6812      	ldr	r2, [r2, #0]
    ebde:	6522      	str	r2, [r4, #80]	; 0x50
    ebe0:	fab3 f383 	clz	r3, r3
    ebe4:	095b      	lsrs	r3, r3, #5
    ebe6:	428b      	cmp	r3, r1
    ebe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ebea:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    ebee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ebf2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ebf6:	f04f 020c 	mov.w	r2, #12
    ebfa:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    ebfe:	f04f 0001 	mov.w	r0, #1
    ec02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ec04:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    ec08:	bf14      	ite	ne
    ec0a:	619a      	strne	r2, [r3, #24]
    ec0c:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    ec0e:	2301      	movs	r3, #1
    ec10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    ec14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    ec16:	4a42      	ldr	r2, [pc, #264]	; (ed20 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    ec18:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ec1a:	6813      	ldr	r3, [r2, #0]
    ec1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    ec1e:	1a1b      	subs	r3, r3, r0
    ec20:	428b      	cmp	r3, r1
    ec22:	d3ae      	bcc.n	eb82 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    ec24:	6812      	ldr	r2, [r2, #0]
    ec26:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ec2a:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    ec2c:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ec2e:	220c      	movs	r2, #12
                        m_pulseValue = false;
    ec30:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ec34:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    ec38:	2b00      	cmp	r3, #0
    ec3a:	d15b      	bne.n	ecf4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    ec3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ec3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ec40:	01db      	lsls	r3, r3, #7
    ec42:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ec46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ec4a:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    ec4c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    ec50:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    ec54:	3301      	adds	r3, #1
                        m_outState = false;
    ec56:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    ec58:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    ec5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    ec60:	2a00      	cmp	r2, #0
    ec62:	d08e      	beq.n	eb82 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    ec64:	2300      	movs	r3, #0
    ec66:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    ec6a:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    ec6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    ec70:	4620      	mov	r0, r4
    ec72:	f000 fa0d 	bl	f090 <_ZN9ClearCore9DigitalIn7StateRTEv>
    ec76:	2800      	cmp	r0, #0
    ec78:	f47f af5d 	bne.w	eb36 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    ec7c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    ec80:	2b00      	cmp	r3, #0
    ec82:	f43f af72 	beq.w	eb6a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ec86:	3b01      	subs	r3, #1
    ec88:	b2db      	uxtb	r3, r3
    ec8a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    ec8e:	2b00      	cmp	r3, #0
    ec90:	f47f af6b 	bne.w	eb6a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    ec94:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    ec98:	b9e6      	cbnz	r6, ecd4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    ec9a:	4a1f      	ldr	r2, [pc, #124]	; (ed18 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ec9c:	491f      	ldr	r1, [pc, #124]	; (ed1c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    ec9e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    eca2:	68a3      	ldr	r3, [r4, #8]
    eca4:	680f      	ldr	r7, [r1, #0]
    eca6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    ecaa:	2501      	movs	r5, #1
    ecac:	4303      	orrs	r3, r0
    ecae:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ecb2:	fa05 f101 	lsl.w	r1, r5, r1
    ecb6:	4638      	mov	r0, r7
    ecb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    ecbc:	462a      	mov	r2, r5
    ecbe:	f003 fce5 	bl	1268c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    ecc2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    ecc6:	fa05 f202 	lsl.w	r2, r5, r2
    ecca:	4638      	mov	r0, r7
    eccc:	4631      	mov	r1, r6
    ecce:	b2d2      	uxtb	r2, r2
    ecd0:	f003 fb30 	bl	12334 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    ecd4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ecd8:	b9ab      	cbnz	r3, ed06 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    ecda:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ecdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ecde:	01db      	lsls	r3, r3, #7
    ece0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ece4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ece8:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    ecea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    ecee:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    ecf2:	e73a      	b.n	eb6a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ecf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ecf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ecf8:	01db      	lsls	r3, r3, #7
    ecfa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ecfe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ed02:	619a      	str	r2, [r3, #24]
    ed04:	e7a2      	b.n	ec4c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    ed06:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ed0a:	01db      	lsls	r3, r3, #7
    ed0c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ed10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ed14:	619a      	str	r2, [r3, #24]
    ed16:	e7e8      	b.n	ecea <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    ed18:	200019d0 	.word	0x200019d0
    ed1c:	20001f18 	.word	0x20001f18
    ed20:	20001be0 	.word	0x20001be0

0000ed24 <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    ed24:	7983      	ldrb	r3, [r0, #6]
    ed26:	2b04      	cmp	r3, #4
    ed28:	d014      	beq.n	ed54 <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    ed2a:	2b06      	cmp	r3, #6
    ed2c:	d005      	beq.n	ed3a <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    ed2e:	2b02      	cmp	r3, #2
    ed30:	d001      	beq.n	ed36 <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    ed32:	2000      	movs	r0, #0
    ed34:	4770      	bx	lr
            state = DigitalIn::State();
    ed36:	f000 b85d 	b.w	edf4 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    ed3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    ed3c:	b173      	cbz	r3, ed5c <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ed3e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    ed42:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ed46:	4413      	add	r3, r2
    ed48:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    ed4c:	b929      	cbnz	r1, ed5a <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ed4e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    ed52:	4770      	bx	lr
            state = m_outState;
    ed54:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    ed58:	4770      	bx	lr
    ed5a:	4770      	bx	lr
    int16_t state = -1;
    ed5c:	f04f 30ff 	mov.w	r0, #4294967295
}
    ed60:	4770      	bx	lr
    ed62:	bf00      	nop

0000ed64 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    ed64:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    ed66:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    ed68:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    ed6a:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    ed6c:	4604      	mov	r4, r0
    m_outState = false;
    ed6e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    ed72:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    ed76:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    ed7a:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    ed7e:	d41a      	bmi.n	edb6 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    ed80:	6b02      	ldr	r2, [r0, #48]	; 0x30
    ed82:	01d2      	lsls	r2, r2, #7
    ed84:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    ed88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ed8c:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    ed90:	2004      	movs	r0, #4
    ed92:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    ed96:	f360 0203 	bfi	r2, r0, #0, #4
    ed9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    ed9e:	4620      	mov	r0, r4
    eda0:	f000 f83c 	bl	ee1c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    eda4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eda6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    eda8:	01db      	lsls	r3, r3, #7
    edaa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    edae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    edb2:	609a      	str	r2, [r3, #8]
    edb4:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    edb6:	6b00      	ldr	r0, [r0, #48]	; 0x30
    edb8:	01c0      	lsls	r0, r0, #7
    edba:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    edbe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    edc2:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    edc6:	2004      	movs	r0, #4
    edc8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    edcc:	f360 1307 	bfi	r3, r0, #4, #4
    edd0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    edd4:	e7e3      	b.n	ed9e <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    edd6:	bf00      	nop

0000edd8 <_ZN9ClearCore9Connector4ModeEv>:
    }
    edd8:	7980      	ldrb	r0, [r0, #6]
    edda:	4770      	bx	lr

0000eddc <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    eddc:	7980      	ldrb	r0, [r0, #6]
    edde:	4770      	bx	lr

0000ede0 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    ede0:	2902      	cmp	r1, #2
            m_mode = newMode;
    ede2:	bf06      	itte	eq
    ede4:	7181      	strbeq	r1, [r0, #6]
            return true;
    ede6:	2001      	moveq	r0, #1
            return false;
    ede8:	2000      	movne	r0, #0
    }
    edea:	4770      	bx	lr

0000edec <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    edec:	2000      	movs	r0, #0
    edee:	4770      	bx	lr

0000edf0 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    edf0:	2000      	movs	r0, #0
    edf2:	4770      	bx	lr

0000edf4 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    edf4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    edf6:	b113      	cbz	r3, edfe <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    edf8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    edfc:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    edfe:	4b06      	ldr	r3, [pc, #24]	; (ee18 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    ee00:	68c1      	ldr	r1, [r0, #12]
    ee02:	681a      	ldr	r2, [r3, #0]
    ee04:	6943      	ldr	r3, [r0, #20]
    ee06:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    ee0a:	6812      	ldr	r2, [r2, #0]
    ee0c:	421a      	tst	r2, r3
    ee0e:	bf0c      	ite	eq
    ee10:	2001      	moveq	r0, #1
    ee12:	2000      	movne	r0, #0
    ee14:	4770      	bx	lr
    ee16:	bf00      	nop
    ee18:	20001f08 	.word	0x20001f08

0000ee1c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    ee1c:	4b2e      	ldr	r3, [pc, #184]	; (eed8 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    ee1e:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    ee20:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    ee24:	68c3      	ldr	r3, [r0, #12]
    ee26:	6904      	ldr	r4, [r0, #16]
    ee28:	01da      	lsls	r2, r3, #7
    ee2a:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    ee2e:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    ee30:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    ee34:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    ee38:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    ee3a:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    ee3e:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    ee42:	d034      	beq.n	eeae <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    ee44:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    ee48:	f366 1707 	bfi	r7, r6, #4, #4
    ee4c:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    ee50:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    ee54:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    ee56:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    ee5a:	4422      	add	r2, r4
    if (m_interruptAvail) {
    ee5c:	2d00      	cmp	r5, #0
    ee5e:	d134      	bne.n	eeca <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    ee60:	2402      	movs	r4, #2
    ee62:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    ee66:	4a1d      	ldr	r2, [pc, #116]	; (eedc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    ee68:	6884      	ldr	r4, [r0, #8]
    ee6a:	6812      	ldr	r2, [r2, #0]
    ee6c:	4e1c      	ldr	r6, [pc, #112]	; (eee0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    ee6e:	3306      	adds	r3, #6
    ee70:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    ee72:	f1a3 050c 	sub.w	r5, r3, #12
    ee76:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    ee78:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    ee7a:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    ee7c:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    ee7e:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    ee80:	6242      	str	r2, [r0, #36]	; 0x24
    ee82:	43e4      	mvns	r4, r4
    ee84:	f3bf 8f5b 	dmb	ish
    ee88:	e856 3f00 	ldrex	r3, [r6]
    ee8c:	4023      	ands	r3, r4
    ee8e:	e846 3200 	strex	r2, r3, [r6]
    ee92:	2a00      	cmp	r2, #0
    ee94:	d1f8      	bne.n	ee88 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    ee96:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    ee9a:	6803      	ldr	r3, [r0, #0]
    ee9c:	4a11      	ldr	r2, [pc, #68]	; (eee4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    ee9e:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    eea0:	8081      	strh	r1, [r0, #4]
    eea2:	4293      	cmp	r3, r2
    eea4:	d115      	bne.n	eed2 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    eea6:	2302      	movs	r3, #2
    eea8:	7183      	strb	r3, [r0, #6]
}
    eeaa:	bcf0      	pop	{r4, r5, r6, r7}
    eeac:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    eeae:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    eeb2:	f367 0603 	bfi	r6, r7, #0, #4
    eeb6:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    eeba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    eebe:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    eec0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    eec4:	4422      	add	r2, r4
    if (m_interruptAvail) {
    eec6:	2d00      	cmp	r5, #0
    eec8:	d0ca      	beq.n	ee60 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    eeca:	2403      	movs	r4, #3
    eecc:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    eed0:	e7c9      	b.n	ee66 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    eed2:	2102      	movs	r1, #2
}
    eed4:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    eed6:	4718      	bx	r3
    eed8:	00010003 	.word	0x00010003
    eedc:	20001f08 	.word	0x20001f08
    eee0:	20001ac4 	.word	0x20001ac4
    eee4:	0000ede1 	.word	0x0000ede1

0000eee8 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    eee8:	69c2      	ldr	r2, [r0, #28]
    eeea:	6943      	ldr	r3, [r0, #20]
    eeec:	6812      	ldr	r2, [r2, #0]
    eeee:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    eef0:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    eef2:	d005      	beq.n	ef00 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    eef4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    eef6:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    eef8:	2a00      	cmp	r2, #0
    eefa:	d039      	beq.n	ef70 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    eefc:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    ef00:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    ef02:	2a00      	cmp	r2, #0
    ef04:	d0fa      	beq.n	eefc <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    ef06:	3a01      	subs	r2, #1
    ef08:	b292      	uxth	r2, r2
    ef0a:	8582      	strh	r2, [r0, #44]	; 0x2c
    ef0c:	2a00      	cmp	r2, #0
    ef0e:	d1f5      	bne.n	eefc <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    ef10:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    ef12:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    ef14:	6809      	ldr	r1, [r1, #0]
    ef16:	400b      	ands	r3, r1
    ef18:	2b00      	cmp	r3, #0
    ef1a:	bf0c      	ite	eq
    ef1c:	2301      	moveq	r3, #1
    ef1e:	2300      	movne	r3, #0
    ef20:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    ef24:	d053      	beq.n	efce <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    ef26:	f3bf 8f5b 	dmb	ish
    ef2a:	4b41      	ldr	r3, [pc, #260]	; (f030 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    ef2c:	43d2      	mvns	r2, r2
    ef2e:	e853 1f00 	ldrex	r1, [r3]
    ef32:	4011      	ands	r1, r2
    ef34:	e843 1e00 	strex	lr, r1, [r3]
    ef38:	f1be 0f00 	cmp.w	lr, #0
    ef3c:	d1f7      	bne.n	ef2e <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    ef3e:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    ef42:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    ef46:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    ef4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    ef4c:	2b00      	cmp	r3, #0
    ef4e:	d14a      	bne.n	efe6 <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    ef50:	f3bf 8f5b 	dmb	ish
    ef54:	2301      	movs	r3, #1
    ef56:	408b      	lsls	r3, r1
    ef58:	43db      	mvns	r3, r3
    ef5a:	e852 1f00 	ldrex	r1, [r2]
    ef5e:	4019      	ands	r1, r3
    ef60:	e842 1000 	strex	r0, r1, [r2]
    ef64:	2800      	cmp	r0, #0
    ef66:	d1f8      	bne.n	ef5a <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    ef68:	f3bf 8f5b 	dmb	ish
}
    ef6c:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    ef70:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    ef72:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    ef74:	6809      	ldr	r1, [r1, #0]
    ef76:	400b      	ands	r3, r1
    ef78:	2b00      	cmp	r3, #0
    ef7a:	bf0c      	ite	eq
    ef7c:	2301      	moveq	r3, #1
    ef7e:	2300      	movne	r3, #0
    ef80:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    ef84:	d047      	beq.n	f016 <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    ef86:	f3bf 8f5b 	dmb	ish
    ef8a:	4b29      	ldr	r3, [pc, #164]	; (f030 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    ef8c:	43d2      	mvns	r2, r2
    ef8e:	e853 1f00 	ldrex	r1, [r3]
    ef92:	4011      	ands	r1, r2
    ef94:	e843 1e00 	strex	lr, r1, [r3]
    ef98:	f1be 0f00 	cmp.w	lr, #0
    ef9c:	d1f7      	bne.n	ef8e <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    ef9e:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    efa2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    efa6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    efaa:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    efac:	bb3b      	cbnz	r3, effe <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    efae:	f3bf 8f5b 	dmb	ish
    efb2:	2301      	movs	r3, #1
    efb4:	408b      	lsls	r3, r1
    efb6:	43db      	mvns	r3, r3
    efb8:	e852 1f00 	ldrex	r1, [r2]
    efbc:	4019      	ands	r1, r3
    efbe:	e842 1000 	strex	r0, r1, [r2]
    efc2:	2800      	cmp	r0, #0
    efc4:	d1f8      	bne.n	efb8 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    efc6:	f3bf 8f5b 	dmb	ish
}
    efca:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    efce:	4b18      	ldr	r3, [pc, #96]	; (f030 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    efd0:	f3bf 8f5b 	dmb	ish
    efd4:	e853 1f00 	ldrex	r1, [r3]
    efd8:	4311      	orrs	r1, r2
    efda:	e843 1e00 	strex	lr, r1, [r3]
    efde:	f1be 0f00 	cmp.w	lr, #0
    efe2:	d0ac      	beq.n	ef3e <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    efe4:	e7f6      	b.n	efd4 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    efe6:	2301      	movs	r3, #1
    efe8:	408b      	lsls	r3, r1
    efea:	f3bf 8f5b 	dmb	ish
    efee:	e852 1f00 	ldrex	r1, [r2]
    eff2:	4319      	orrs	r1, r3
    eff4:	e842 1000 	strex	r0, r1, [r2]
    eff8:	2800      	cmp	r0, #0
    effa:	d0e4      	beq.n	efc6 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    effc:	e7f7      	b.n	efee <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    effe:	2301      	movs	r3, #1
    f000:	408b      	lsls	r3, r1
    f002:	f3bf 8f5b 	dmb	ish
    f006:	e852 1f00 	ldrex	r1, [r2]
    f00a:	4319      	orrs	r1, r3
    f00c:	e842 1000 	strex	r0, r1, [r2]
    f010:	2800      	cmp	r0, #0
    f012:	d0d8      	beq.n	efc6 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    f014:	e7f7      	b.n	f006 <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    f016:	4b06      	ldr	r3, [pc, #24]	; (f030 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    f018:	f3bf 8f5b 	dmb	ish
    f01c:	e853 1f00 	ldrex	r1, [r3]
    f020:	4311      	orrs	r1, r2
    f022:	e843 1e00 	strex	lr, r1, [r3]
    f026:	f1be 0f00 	cmp.w	lr, #0
    f02a:	d0b8      	beq.n	ef9e <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    f02c:	e7f6      	b.n	f01c <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    f02e:	bf00      	nop
    f030:	20001ac4 	.word	0x20001ac4

0000f034 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    f034:	4a03      	ldr	r2, [pc, #12]	; (f044 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    f036:	6002      	str	r2, [r0, #0]
    f038:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f03c:	2200      	movs	r2, #0
    f03e:	8081      	strh	r1, [r0, #4]
    f040:	7182      	strb	r2, [r0, #6]
    f042:	4770      	bx	lr
    f044:	00023f6c 	.word	0x00023f6c

0000f048 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    f048:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    f04a:	f992 4001 	ldrsb.w	r4, [r2, #1]
    f04e:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    f050:	4d0d      	ldr	r5, [pc, #52]	; (f088 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    f052:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    f054:	2400      	movs	r4, #0
    f056:	f64f 76ff 	movw	r6, #65535	; 0xffff
    f05a:	8086      	strh	r6, [r0, #4]
    f05c:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    f05e:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    f060:	7895      	ldrb	r5, [r2, #2]
    f062:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    f064:	2101      	movs	r1, #1
    f066:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    f068:	6141      	str	r1, [r0, #20]
    f06a:	78d1      	ldrb	r1, [r2, #3]
    f06c:	7601      	strb	r1, [r0, #24]
    f06e:	7911      	ldrb	r1, [r2, #4]
    f070:	4a06      	ldr	r2, [pc, #24]	; (f08c <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    f072:	61c4      	str	r4, [r0, #28]
    f074:	6204      	str	r4, [r0, #32]
    f076:	6244      	str	r4, [r0, #36]	; 0x24
    f078:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    f07c:	7641      	strb	r1, [r0, #25]
    f07e:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    f082:	bc70      	pop	{r4, r5, r6}
    f084:	4770      	bx	lr
    f086:	bf00      	nop
    f088:	00023f9c 	.word	0x00023f9c
    f08c:	00010003 	.word	0x00010003

0000f090 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    f090:	4b05      	ldr	r3, [pc, #20]	; (f0a8 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    f092:	68c1      	ldr	r1, [r0, #12]
    f094:	681a      	ldr	r2, [r3, #0]
    f096:	6943      	ldr	r3, [r0, #20]
    f098:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    f09c:	6812      	ldr	r2, [r2, #0]
    f09e:	421a      	tst	r2, r3
}
    f0a0:	bf0c      	ite	eq
    f0a2:	2001      	moveq	r0, #1
    f0a4:	2000      	movne	r0, #0
    f0a6:	4770      	bx	lr
    f0a8:	20001f08 	.word	0x20001f08

0000f0ac <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    f0ac:	6a03      	ldr	r3, [r0, #32]
    f0ae:	6941      	ldr	r1, [r0, #20]
    f0b0:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    f0b2:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    f0b4:	400b      	ands	r3, r1
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	bf0c      	ite	eq
    f0ba:	2301      	moveq	r3, #1
    f0bc:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    f0be:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    f0c0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    f0c4:	d023      	beq.n	f10e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    f0c6:	f3bf 8f5b 	dmb	ish
    f0ca:	4b1e      	ldr	r3, [pc, #120]	; (f144 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    f0cc:	43d2      	mvns	r2, r2
    f0ce:	e853 1f00 	ldrex	r1, [r3]
    f0d2:	4011      	ands	r1, r2
    f0d4:	e843 1e00 	strex	lr, r1, [r3]
    f0d8:	f1be 0f00 	cmp.w	lr, #0
    f0dc:	d1f7      	bne.n	f0ce <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    f0de:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    f0e2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    f0e6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    f0ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    f0ec:	b9db      	cbnz	r3, f126 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    f0ee:	f3bf 8f5b 	dmb	ish
    f0f2:	2301      	movs	r3, #1
    f0f4:	408b      	lsls	r3, r1
    f0f6:	43db      	mvns	r3, r3
    f0f8:	e852 1f00 	ldrex	r1, [r2]
    f0fc:	4019      	ands	r1, r3
    f0fe:	e842 1000 	strex	r0, r1, [r2]
    f102:	2800      	cmp	r0, #0
    f104:	d1f8      	bne.n	f0f8 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    f106:	f3bf 8f5b 	dmb	ish
    f10a:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    f10e:	4b0d      	ldr	r3, [pc, #52]	; (f144 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    f110:	f3bf 8f5b 	dmb	ish
    f114:	e853 1f00 	ldrex	r1, [r3]
    f118:	4311      	orrs	r1, r2
    f11a:	e843 1e00 	strex	lr, r1, [r3]
    f11e:	f1be 0f00 	cmp.w	lr, #0
    f122:	d0dc      	beq.n	f0de <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    f124:	e7f6      	b.n	f114 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    f126:	2301      	movs	r3, #1
    f128:	408b      	lsls	r3, r1
    f12a:	f3bf 8f5b 	dmb	ish
    f12e:	e852 1f00 	ldrex	r1, [r2]
    f132:	4319      	orrs	r1, r3
    f134:	e842 1000 	strex	r0, r1, [r2]
    f138:	2800      	cmp	r0, #0
    f13a:	d1f8      	bne.n	f12e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    f13c:	f3bf 8f5b 	dmb	ish
    f140:	f85d fb04 	ldr.w	pc, [sp], #4
    f144:	20001ac4 	.word	0x20001ac4

0000f148 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    f148:	7980      	ldrb	r0, [r0, #6]
    f14a:	4770      	bx	lr

0000f14c <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    f14c:	2005      	movs	r0, #5
    f14e:	4770      	bx	lr

0000f150 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    f150:	7980      	ldrb	r0, [r0, #6]
    f152:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    f154:	2804      	cmp	r0, #4
    f156:	bf8c      	ite	hi
    f158:	2000      	movhi	r0, #0
    f15a:	2001      	movls	r0, #1
    f15c:	4770      	bx	lr
    f15e:	bf00      	nop

0000f160 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    f160:	b5f0      	push	{r4, r5, r6, r7, lr}
    f162:	b083      	sub	sp, #12
    f164:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    f168:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    f16a:	4604      	mov	r4, r0
    f16c:	9d08      	ldr	r5, [sp, #32]
    f16e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    f170:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    f174:	f7ff fc9a 	bl	eaac <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    f178:	2300      	movs	r3, #0
    f17a:	490f      	ldr	r1, [pc, #60]	; (f1b8 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    f17c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    f180:	f640 42cc 	movw	r2, #3276	; 0xccc
    f184:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    f188:	6663      	str	r3, [r4, #100]	; 0x64
    f18a:	66a3      	str	r3, [r4, #104]	; 0x68
    f18c:	66e3      	str	r3, [r4, #108]	; 0x6c
    f18e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    f192:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    f196:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    f19a:	6765      	str	r5, [r4, #116]	; 0x74
    f19c:	67a6      	str	r6, [r4, #120]	; 0x78
    f19e:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    f1a2:	6021      	str	r1, [r4, #0]
    f1a4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    f1a8:	7b2a      	ldrb	r2, [r5, #12]
    f1aa:	4b04      	ldr	r3, [pc, #16]	; (f1bc <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    f1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    f1b0:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    f1b2:	4620      	mov	r0, r4
    f1b4:	b003      	add	sp, #12
    f1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1b8:	00023fcc 	.word	0x00023fcc
    f1bc:	00023ff4 	.word	0x00023ff4

0000f1c0 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    f1c0:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    f1c2:	6803      	ldr	r3, [r0, #0]
    f1c4:	4a12      	ldr	r2, [pc, #72]	; (f210 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    f1c6:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    f1c8:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    f1cc:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    f1ce:	b082      	sub	sp, #8
    f1d0:	4604      	mov	r4, r0
    f1d2:	d115      	bne.n	f200 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    f1d4:	7980      	ldrb	r0, [r0, #6]
    f1d6:	2808      	cmp	r0, #8
    f1d8:	d805      	bhi.n	f1e6 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    f1da:	2301      	movs	r3, #1
    f1dc:	fa03 f000 	lsl.w	r0, r3, r0
    f1e0:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    f1e4:	d101      	bne.n	f1ea <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    f1e6:	b002      	add	sp, #8
    f1e8:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    f1ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f1ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f1ee:	01db      	lsls	r3, r3, #7
    f1f0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    f1f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    f1f8:	b131      	cbz	r1, f208 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    f1fa:	615a      	str	r2, [r3, #20]
}
    f1fc:	b002      	add	sp, #8
    f1fe:	bd10      	pop	{r4, pc}
    f200:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    f202:	4798      	blx	r3
    f204:	9901      	ldr	r1, [sp, #4]
    f206:	e7e6      	b.n	f1d6 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    f208:	619a      	str	r2, [r3, #24]
}
    f20a:	b002      	add	sp, #8
    f20c:	bd10      	pop	{r4, pc}
    f20e:	bf00      	nop
    f210:	0000f149 	.word	0x0000f149

0000f214 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    f214:	7982      	ldrb	r2, [r0, #6]
    f216:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    f218:	4601      	mov	r1, r0
    f21a:	d808      	bhi.n	f22e <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    f21c:	2301      	movs	r3, #1
    f21e:	4093      	lsls	r3, r2
    f220:	f013 0f54 	tst.w	r3, #84	; 0x54
    f224:	d112      	bne.n	f24c <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    f226:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    f22a:	d102      	bne.n	f232 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    f22c:	4770      	bx	lr
            state = 0;
    f22e:	2000      	movs	r0, #0
}
    f230:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    f232:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    f234:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    f236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    f23a:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    f23e:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    f242:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    f246:	f340 004f 	sbfx	r0, r0, #1, #16
    f24a:	4770      	bx	lr
            state = DigitalInOut::State();
    f24c:	f7ff bd6a 	b.w	ed24 <_ZN9ClearCore12DigitalInOut5StateEv>

0000f250 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    f250:	b510      	push	{r4, lr}
    switch (m_mode) {
    f252:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f254:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    f256:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f258:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    f25a:	2b05      	cmp	r3, #5
    f25c:	d82a      	bhi.n	f2b4 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    f25e:	e8df f003 	tbb	[pc, r3]
    f262:	2925      	.short	0x2925
    f264:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    f268:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f26a:	4b13      	ldr	r3, [pc, #76]	; (f2b8 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    f26c:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    f270:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    f274:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    f276:	bf1b      	ittet	ne
    f278:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    f27c:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    f280:	20ff      	moveq	r0, #255	; 0xff
    f282:	11c0      	asrne	r0, r0, #7
    f284:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f288:	f3c2 024f 	ubfx	r2, r2, #1, #16
    f28c:	4b0b      	ldr	r3, [pc, #44]	; (f2bc <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    f28e:	fb01 f102 	mul.w	r1, r1, r2
    f292:	fb83 0301 	smull	r0, r3, r3, r1
    f296:	440b      	add	r3, r1
    f298:	139b      	asrs	r3, r3, #14
    f29a:	17c9      	asrs	r1, r1, #31
    f29c:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f29e:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f2a0:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f2a2:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f2a4:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f2a6:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    f2a8:	2001      	movs	r0, #1
            break;
    f2aa:	bd10      	pop	{r4, pc}
}
    f2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    f2b0:	f7ff ba8e 	b.w	e7d0 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    f2b4:	2000      	movs	r0, #0
}
    f2b6:	bd10      	pop	{r4, pc}
    f2b8:	200019d0 	.word	0x200019d0
    f2bc:	80010003 	.word	0x80010003

0000f2c0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    f2c0:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    f2c4:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    f2c8:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    f2cc:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    f2ce:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    f2d0:	b302      	cbz	r2, f314 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    f2d2:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    f2d6:	2a04      	cmp	r2, #4
    f2d8:	d01c      	beq.n	f314 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    f2da:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    f2dc:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    f2e0:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    f2e2:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    f2e6:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    f2e8:	f004 fdee 	bl	13ec8 <arm_sin_q15>
    f2ec:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    f2f0:	4b41      	ldr	r3, [pc, #260]	; (f3f8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    f2f2:	fb11 f100 	smulbb	r1, r1, r0
    f2f6:	429d      	cmp	r5, r3
    f2f8:	f341 31cf 	sbfx	r1, r1, #15, #16
    f2fc:	d177      	bne.n	f3ee <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    f2fe:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f300:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    f302:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f304:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    f306:	2b05      	cmp	r3, #5
    f308:	d81e      	bhi.n	f348 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    f30a:	e8df f003 	tbb	[pc, r3]
    f30e:	1d6b      	.short	0x1d6b
    f310:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    f314:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    f316:	2a07      	cmp	r2, #7
    f318:	d017      	beq.n	f34a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    f31a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    f31c:	4c36      	ldr	r4, [pc, #216]	; (f3f8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    f31e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    f320:	f043 0301 	orr.w	r3, r3, #1
    f324:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    f326:	6803      	ldr	r3, [r0, #0]
    f328:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    f32a:	2500      	movs	r5, #0
    f32c:	42a3      	cmp	r3, r4
    f32e:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    f332:	d132      	bne.n	f39a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    f336:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f338:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    f33a:	2a04      	cmp	r2, #4
    f33c:	d804      	bhi.n	f348 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    f33e:	e8df f002 	tbb	[pc, r2]
    f342:	0327      	.short	0x0327
    f344:	1b27      	.short	0x1b27
    f346:	27          	.byte	0x27
    f347:	00          	.byte	0x00
    f348:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    f34a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    f34e:	4293      	cmp	r3, r2
    f350:	ddc3      	ble.n	f2da <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    f352:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    f354:	4a28      	ldr	r2, [pc, #160]	; (f3f8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    f356:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    f358:	f043 0301 	orr.w	r3, r3, #1
    f35c:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    f35e:	6803      	ldr	r3, [r0, #0]
    f360:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    f362:	2400      	movs	r4, #0
    f364:	4293      	cmp	r3, r2
    f366:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    f36a:	d116      	bne.n	f39a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f36c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    f36e:	085b      	lsrs	r3, r3, #1
    f370:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f372:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f374:	674b      	str	r3, [r1, #116]	; 0x74
    f376:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    f378:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f37a:	4a20      	ldr	r2, [pc, #128]	; (f3fc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    f37c:	f000 000f 	and.w	r0, r0, #15
    f380:	4402      	add	r2, r0
    f382:	b29b      	uxth	r3, r3
    f384:	2000      	movs	r0, #0
    f386:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f38a:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f38c:	674b      	str	r3, [r1, #116]	; 0x74
    f38e:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    f390:	2100      	movs	r1, #0
}
    f392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    f396:	f7ff ba1b 	b.w	e7d0 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    f39a:	2100      	movs	r1, #0
}
    f39c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    f3a0:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    f3a2:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f3a4:	4b15      	ldr	r3, [pc, #84]	; (f3fc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    f3a6:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    f3aa:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    f3ae:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    f3b0:	bf1b      	ittet	ne
    f3b2:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    f3b6:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    f3ba:	24ff      	moveq	r4, #255	; 0xff
    f3bc:	11e4      	asrne	r4, r4, #7
    f3be:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f3c2:	f3c2 024f 	ubfx	r2, r2, #1, #16
    f3c6:	4b0e      	ldr	r3, [pc, #56]	; (f400 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    f3c8:	fb01 f102 	mul.w	r1, r1, r2
    f3cc:	fb83 4301 	smull	r4, r3, r3, r1
    f3d0:	440b      	add	r3, r1
    f3d2:	139b      	asrs	r3, r3, #14
    f3d4:	17c9      	asrs	r1, r1, #31
    f3d6:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f3d8:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f3da:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f3dc:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f3de:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f3e0:	6741      	str	r1, [r0, #116]	; 0x74
    f3e2:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    f3e4:	4620      	mov	r0, r4
}
    f3e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    f3ea:	f7ff b9f1 	b.w	e7d0 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    f3ee:	4620      	mov	r0, r4
    f3f0:	462b      	mov	r3, r5
}
    f3f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    f3f6:	4718      	bx	r3
    f3f8:	0000f251 	.word	0x0000f251
    f3fc:	200019d0 	.word	0x200019d0
    f400:	80010003 	.word	0x80010003

0000f404 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    f404:	7983      	ldrb	r3, [r0, #6]
    f406:	3b02      	subs	r3, #2
    f408:	2b05      	cmp	r3, #5
    f40a:	d804      	bhi.n	f416 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    f40c:	e8df f003 	tbb	[pc, r3]
    f410:	03040304 	.word	0x03040304
    f414:	0604      	.short	0x0604
    f416:	4770      	bx	lr
            DigitalInOut::Refresh();
    f418:	f7ff bb7e 	b.w	eb18 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    f41c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    f420:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    f422:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    f424:	d02c      	beq.n	f480 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    f426:	2b04      	cmp	r3, #4
    f428:	d003      	beq.n	f432 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    f42a:	2b02      	cmp	r3, #2
    f42c:	d04c      	beq.n	f4c8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    f42e:	bcf0      	pop	{r4, r5, r6, r7}
    f430:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    f432:	4937      	ldr	r1, [pc, #220]	; (f510 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    f434:	6e44      	ldr	r4, [r0, #100]	; 0x64
    f436:	680b      	ldr	r3, [r1, #0]
    f438:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    f43a:	1b1b      	subs	r3, r3, r4
    f43c:	4293      	cmp	r3, r2
    f43e:	d9f6      	bls.n	f42e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    f440:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    f442:	2303      	movs	r3, #3
    f444:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    f448:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f44a:	4b32      	ldr	r3, [pc, #200]	; (f514 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    f44c:	f042 0201 	orr.w	r2, r2, #1
    f450:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    f452:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    f454:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    f456:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f458:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f45c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    f460:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f462:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f466:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f468:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f46c:	408a      	lsls	r2, r1
    f46e:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    f470:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f472:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f476:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f47a:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    f47e:	e7d6      	b.n	f42e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    f480:	4923      	ldr	r1, [pc, #140]	; (f510 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    f482:	6e44      	ldr	r4, [r0, #100]	; 0x64
    f484:	680b      	ldr	r3, [r1, #0]
    f486:	6e82      	ldr	r2, [r0, #104]	; 0x68
    f488:	1b1b      	subs	r3, r3, r4
    f48a:	4293      	cmp	r3, r2
    f48c:	d9cf      	bls.n	f42e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f48e:	4a21      	ldr	r2, [pc, #132]	; (f514 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    f490:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    f492:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    f494:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f496:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f49a:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    f49e:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4a0:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4a4:	2101      	movs	r1, #1
    f4a6:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4ac:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    f4b0:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    f4b2:	ea24 0406 	bic.w	r4, r4, r6
    f4b6:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4ba:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4be:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f4c2:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    f4c6:	e7b2      	b.n	f42e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    f4c8:	4b11      	ldr	r3, [pc, #68]	; (f510 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    f4ca:	6e41      	ldr	r1, [r0, #100]	; 0x64
    f4cc:	681b      	ldr	r3, [r3, #0]
    f4ce:	6e82      	ldr	r2, [r0, #104]	; 0x68
    f4d0:	1a5b      	subs	r3, r3, r1
    f4d2:	4293      	cmp	r3, r2
    f4d4:	d9ab      	bls.n	f42e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4d6:	4a0f      	ldr	r2, [pc, #60]	; (f514 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    f4d8:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    f4da:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    f4dc:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4e0:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4e4:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4e8:	2501      	movs	r5, #1
    f4ea:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4f0:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    f4f4:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    f4f8:	2500      	movs	r5, #0
    f4fa:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    f4fe:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f502:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f506:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f50a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    f50e:	e78e      	b.n	f42e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    f510:	20001be0 	.word	0x20001be0
    f514:	200019d0 	.word	0x200019d0

0000f518 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    f518:	b570      	push	{r4, r5, r6, lr}
    f51a:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    f51c:	f7ff fc22 	bl	ed64 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    f520:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    f522:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    f524:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    f528:	6813      	ldr	r3, [r2, #0]
    f52a:	f043 0301 	orr.w	r3, r3, #1
    f52e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    f530:	6893      	ldr	r3, [r2, #8]
    f532:	f013 0301 	ands.w	r3, r3, #1
    f536:	d1fb      	bne.n	f530 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    f538:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    f53a:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    f53c:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    f53e:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    f540:	4b24      	ldr	r3, [pc, #144]	; (f5d4 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    f542:	4e25      	ldr	r6, [pc, #148]	; (f5d8 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    f544:	4825      	ldr	r0, [pc, #148]	; (f5dc <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    f546:	f045 0502 	orr.w	r5, r5, #2
    f54a:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    f54c:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    f54e:	f045 0505 	orr.w	r5, r5, #5
    f552:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    f554:	6a55      	ldr	r5, [r2, #36]	; 0x24
    f556:	430d      	orrs	r5, r1
    f558:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    f55a:	681b      	ldr	r3, [r3, #0]
    f55c:	fba6 5303 	umull	r5, r3, r6, r3
    f560:	0bdb      	lsrs	r3, r3, #15
    f562:	3b01      	subs	r3, #1
    f564:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    f566:	6c13      	ldr	r3, [r2, #64]	; 0x40
    f568:	6453      	str	r3, [r2, #68]	; 0x44
    f56a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    f56c:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    f56e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    f570:	f993 2001 	ldrsb.w	r2, [r3, #1]
    f574:	789d      	ldrb	r5, [r3, #2]
    f576:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    f57a:	fa01 f605 	lsl.w	r6, r1, r5
    f57e:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    f580:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    f582:	f994 3001 	ldrsb.w	r3, [r4, #1]
    f586:	78a4      	ldrb	r4, [r4, #2]
    f588:	01db      	lsls	r3, r3, #7
    f58a:	4418      	add	r0, r3
    f58c:	40a1      	lsls	r1, r4
    f58e:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    f590:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f592:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    f596:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f598:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f59c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f5a0:	2005      	movs	r0, #5
    f5a2:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f5a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f5a8:	bf4c      	ite	mi
    f5aa:	f360 1107 	bfimi	r1, r0, #4, #4
    f5ae:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f5b2:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f5b6:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f5ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    f5be:	2105      	movs	r1, #5
    f5c0:	07e0      	lsls	r0, r4, #31
    f5c2:	bf4c      	ite	mi
    f5c4:	f361 1207 	bfimi	r2, r1, #4, #4
    f5c8:	f361 0203 	bfipl	r2, r1, #0, #4
    f5cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    f5d0:	bd70      	pop	{r4, r5, r6, pc}
    f5d2:	bf00      	nop
    f5d4:	200000e0 	.word	0x200000e0
    f5d8:	be37c63b 	.word	0xbe37c63b
    f5dc:	41008000 	.word	0x41008000

0000f5e0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    f5e0:	7982      	ldrb	r2, [r0, #6]
    f5e2:	428a      	cmp	r2, r1
    f5e4:	d07a      	beq.n	f6dc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    f5e6:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    f5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5ea:	460d      	mov	r5, r1
    f5ec:	d867      	bhi.n	f6be <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    f5ee:	2201      	movs	r2, #1
    f5f0:	fa02 f301 	lsl.w	r3, r2, r1
    f5f4:	f013 0f54 	tst.w	r3, #84	; 0x54
    f5f8:	4604      	mov	r4, r0
    f5fa:	d171      	bne.n	f6e0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    f5fc:	f413 7f90 	tst.w	r3, #288	; 0x120
    f600:	d05f      	beq.n	f6c2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    f602:	7901      	ldrb	r1, [r0, #4]
    f604:	4a5d      	ldr	r2, [pc, #372]	; (f77c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    f606:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    f60a:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    f60e:	2b00      	cmp	r3, #0
    f610:	f040 809e 	bne.w	f750 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    f614:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f616:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    f618:	01db      	lsls	r3, r3, #7
    f61a:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    f61e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    f622:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    f624:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f626:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    f62a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    f62e:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f630:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    f634:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    f638:	f36f 0000 	bfc	r0, #0, #1
    f63c:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    f640:	68a3      	ldr	r3, [r4, #8]
    f642:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f646:	2d05      	cmp	r5, #5
    f648:	f000 808b 	beq.w	f762 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    f64c:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f650:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f654:	2701      	movs	r7, #1
    f656:	fa07 f101 	lsl.w	r1, r7, r1
    f65a:	ea20 0101 	bic.w	r1, r0, r1
    f65e:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f662:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f666:	6f61      	ldr	r1, [r4, #116]	; 0x74
    f668:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    f66c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    f670:	4a43      	ldr	r2, [pc, #268]	; (f780 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    f672:	7889      	ldrb	r1, [r1, #2]
    f674:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f678:	440b      	add	r3, r1
    f67a:	2101      	movs	r1, #1
    f67c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    f680:	4308      	orrs	r0, r1
    f682:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f686:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    f688:	f990 3001 	ldrsb.w	r3, [r0, #1]
    f68c:	7880      	ldrb	r0, [r0, #2]
    f68e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f692:	4403      	add	r3, r0
    f694:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f698:	430a      	orrs	r2, r1
    f69a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    f69e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    f6a0:	6813      	ldr	r3, [r2, #0]
    f6a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f6a6:	428b      	cmp	r3, r1
    f6a8:	d006      	beq.n	f6b8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    f6aa:	6813      	ldr	r3, [r2, #0]
    f6ac:	f361 0341 	bfi	r3, r1, #1, #1
    f6b0:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    f6b2:	6893      	ldr	r3, [r2, #8]
    f6b4:	079b      	lsls	r3, r3, #30
    f6b6:	d4fc      	bmi.n	f6b2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    f6b8:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    f6ba:	2001      	movs	r0, #1
    f6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    f6be:	2000      	movs	r0, #0
    f6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f6c2:	061a      	lsls	r2, r3, #24
    f6c4:	d5fb      	bpl.n	f6be <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    f6c6:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f6c8:	4a2c      	ldr	r2, [pc, #176]	; (f77c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    f6ca:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    f6ce:	f001 010f 	and.w	r1, r1, #15
    f6d2:	1850      	adds	r0, r2, r1
    f6d4:	11db      	asrs	r3, r3, #7
    f6d6:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    f6da:	e796      	b.n	f60a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    f6dc:	2001      	movs	r0, #1
    f6de:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f6e0:	4f26      	ldr	r7, [pc, #152]	; (f77c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    f6e2:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    f6e4:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f6e8:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f6ec:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f6f0:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f6f4:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f6f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f6fa:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    f6fe:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f702:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f706:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f70a:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    f70e:	f7ff f8bb 	bl	e888 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    f712:	2800      	cmp	r0, #0
    f714:	d0d3      	beq.n	f6be <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f716:	6f61      	ldr	r1, [r4, #116]	; 0x74
    f718:	4b19      	ldr	r3, [pc, #100]	; (f780 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    f71a:	f991 2001 	ldrsb.w	r2, [r1, #1]
    f71e:	7889      	ldrb	r1, [r1, #2]
    f720:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    f724:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f726:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f728:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    f72c:	f36f 0000 	bfc	r0, #0, #1
    f730:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f734:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    f736:	f992 0001 	ldrsb.w	r0, [r2, #1]
    f73a:	7892      	ldrb	r2, [r2, #2]
    f73c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    f740:	4413      	add	r3, r2
    f742:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f746:	f36f 0200 	bfc	r2, #0, #1
    f74a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    f74e:	e7a6      	b.n	f69e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    f750:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f752:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    f754:	01db      	lsls	r3, r3, #7
    f756:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    f75a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    f75e:	6146      	str	r6, [r0, #20]
    f760:	e760      	b.n	f624 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f762:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f766:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f76a:	2601      	movs	r6, #1
    f76c:	fa06 f101 	lsl.w	r1, r6, r1
    f770:	4339      	orrs	r1, r7
    f772:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f776:	4303      	orrs	r3, r0
    f778:	e775      	b.n	f666 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    f77a:	bf00      	nop
    f77c:	200019d0 	.word	0x200019d0
    f780:	41008000 	.word	0x41008000

0000f784 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    f784:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    f786:	4c07      	ldr	r4, [pc, #28]	; (f7a4 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    f788:	6823      	ldr	r3, [r4, #0]
    f78a:	07db      	lsls	r3, r3, #31
    f78c:	d502      	bpl.n	f794 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    f78e:	4b06      	ldr	r3, [pc, #24]	; (f7a8 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    f790:	6818      	ldr	r0, [r3, #0]
    f792:	bd10      	pop	{r4, pc}
    f794:	2001      	movs	r0, #1
    f796:	f004 fbb3 	bl	13f00 <_Znwj>
    f79a:	4a03      	ldr	r2, [pc, #12]	; (f7a8 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    f79c:	2301      	movs	r3, #1
    f79e:	6010      	str	r0, [r2, #0]
    f7a0:	6023      	str	r3, [r4, #0]
    return *instance;
}
    f7a2:	bd10      	pop	{r4, pc}
    f7a4:	20001e24 	.word	0x20001e24
    f7a8:	20001ef4 	.word	0x20001ef4

0000f7ac <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    f7ac:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    f7ae:	4a13      	ldr	r2, [pc, #76]	; (f7fc <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    f7b0:	4913      	ldr	r1, [pc, #76]	; (f800 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    f7b2:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    f7b4:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    f7b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f7ba:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    f7bc:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    f7be:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    f7c0:	8813      	ldrh	r3, [r2, #0]
    f7c2:	b29b      	uxth	r3, r3
    f7c4:	2b01      	cmp	r3, #1
    f7c6:	d0fb      	beq.n	f7c0 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f7c8:	4b0e      	ldr	r3, [pc, #56]	; (f804 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    f7ca:	4d0f      	ldr	r5, [pc, #60]	; (f808 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    f7cc:	4c0f      	ldr	r4, [pc, #60]	; (f80c <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    f7ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f7d2:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    f7d4:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f7d8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f7dc:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    f7e0:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    f7e2:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    f7e4:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    f7e6:	7b51      	ldrb	r1, [r2, #13]
    f7e8:	f041 0101 	orr.w	r1, r1, #1
    f7ec:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f7ee:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    f7f0:	6913      	ldr	r3, [r2, #16]
    f7f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    f7f6:	6113      	str	r3, [r2, #16]
}
    f7f8:	bc70      	pop	{r4, r5, r6}
    f7fa:	4770      	bx	lr
    f7fc:	40000800 	.word	0x40000800
    f800:	4100a000 	.word	0x4100a000
    f804:	e000e100 	.word	0xe000e100
    f808:	20001e30 	.word	0x20001e30
    f80c:	20001e90 	.word	0x20001e90

0000f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    f810:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    f812:	bfda      	itte	le
    f814:	4b02      	ldrle	r3, [pc, #8]	; (f820 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    f816:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    f81a:	2000      	movgt	r0, #0
}
    f81c:	4770      	bx	lr
    f81e:	bf00      	nop
    f820:	4100a040 	.word	0x4100a040

0000f824 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    f824:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    f826:	bfda      	itte	le
    f828:	4b02      	ldrle	r3, [pc, #8]	; (f834 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    f82a:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    f82e:	2000      	movgt	r0, #0
}
    f830:	4770      	bx	lr
    f832:	bf00      	nop
    f834:	20001e30 	.word	0x20001e30

0000f838 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    f838:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    f83a:	f7ff ffa3 	bl	f784 <_ZN9ClearCore10DmaManager8InstanceEv>
    f83e:	4b01      	ldr	r3, [pc, #4]	; (f844 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    f840:	6018      	str	r0, [r3, #0]
    f842:	bd08      	pop	{r3, pc}
    f844:	20001ef0 	.word	0x20001ef0

0000f848 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    f848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f84c:	4604      	mov	r4, r0
    f84e:	4267      	negs	r7, r4
    f850:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    f854:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    f858:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    f85c:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f860:	4608      	mov	r0, r1
    f862:	ea4f 0999 	mov.w	r9, r9, lsr #2
    f866:	2101      	movs	r1, #1
    f868:	f002 f86e 	bl	11948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    f86c:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    f870:	2600      	movs	r6, #0
    bool sendData = true;
    f872:	2201      	movs	r2, #1
    f874:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f878:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    f87c:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    f880:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    f882:	4690      	mov	r8, r2
    f884:	2b02      	cmp	r3, #2
    f886:	f000 821b 	beq.w	fcc0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    f88a:	2d03      	cmp	r5, #3
    f88c:	f300 8159 	bgt.w	fb42 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    f890:	b1a3      	cbz	r3, f8bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    f892:	2b01      	cmp	r3, #1
    f894:	d1fc      	bne.n	f890 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    f896:	b1da      	cbz	r2, f8d0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    f898:	2e00      	cmp	r6, #0
    f89a:	f040 808d 	bne.w	f9b8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    f89e:	6026      	str	r6, [r4, #0]
    f8a0:	6066      	str	r6, [r4, #4]
    f8a2:	60a6      	str	r6, [r4, #8]
    f8a4:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    f8a6:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    f8a8:	f104 0212 	add.w	r2, r4, #18
    f8ac:	4621      	mov	r1, r4
    f8ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f8b0:	f002 f8f4 	bl	11a9c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    f8b4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f8b8:	2200      	movs	r2, #0
    f8ba:	e7e3      	b.n	f884 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    f8bc:	2a00      	cmp	r2, #0
    f8be:	d053      	beq.n	f968 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    f8c0:	f04f 33ff 	mov.w	r3, #4294967295
    f8c4:	6023      	str	r3, [r4, #0]
    f8c6:	6063      	str	r3, [r4, #4]
    f8c8:	60a3      	str	r3, [r4, #8]
    f8ca:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    f8cc:	2310      	movs	r3, #16
    f8ce:	e7eb      	b.n	f8a8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    f8d0:	2e00      	cmp	r6, #0
    f8d2:	f040 80a2 	bne.w	fa1a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    f8d6:	7ca2      	ldrb	r2, [r4, #18]
    f8d8:	2aff      	cmp	r2, #255	; 0xff
    f8da:	f040 8128 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f8de:	7ce2      	ldrb	r2, [r4, #19]
    f8e0:	2aff      	cmp	r2, #255	; 0xff
    f8e2:	f040 8124 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f8e6:	7d22      	ldrb	r2, [r4, #20]
    f8e8:	2aff      	cmp	r2, #255	; 0xff
    f8ea:	f040 8120 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f8ee:	7d62      	ldrb	r2, [r4, #21]
    f8f0:	2aff      	cmp	r2, #255	; 0xff
    f8f2:	f040 811c 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f8f6:	7da2      	ldrb	r2, [r4, #22]
    f8f8:	2aff      	cmp	r2, #255	; 0xff
    f8fa:	f040 8118 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f8fe:	7de2      	ldrb	r2, [r4, #23]
    f900:	2aff      	cmp	r2, #255	; 0xff
    f902:	f040 8114 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f906:	7e22      	ldrb	r2, [r4, #24]
    f908:	2aff      	cmp	r2, #255	; 0xff
    f90a:	f040 8110 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f90e:	7e62      	ldrb	r2, [r4, #25]
    f910:	2aff      	cmp	r2, #255	; 0xff
    f912:	f040 810c 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f916:	7ea2      	ldrb	r2, [r4, #26]
    f918:	2aff      	cmp	r2, #255	; 0xff
    f91a:	f040 8108 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f91e:	7ee2      	ldrb	r2, [r4, #27]
    f920:	2aff      	cmp	r2, #255	; 0xff
    f922:	f040 8104 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f926:	7f22      	ldrb	r2, [r4, #28]
    f928:	2aff      	cmp	r2, #255	; 0xff
    f92a:	f040 8100 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f92e:	7f62      	ldrb	r2, [r4, #29]
    f930:	2aff      	cmp	r2, #255	; 0xff
    f932:	f040 80fc 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f936:	7fa2      	ldrb	r2, [r4, #30]
    f938:	2aff      	cmp	r2, #255	; 0xff
    f93a:	f040 80f8 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f93e:	7fe2      	ldrb	r2, [r4, #31]
    f940:	2aff      	cmp	r2, #255	; 0xff
    f942:	f040 80f4 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f946:	f894 2020 	ldrb.w	r2, [r4, #32]
    f94a:	2aff      	cmp	r2, #255	; 0xff
    f94c:	f040 80ef 	bne.w	fb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f950:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    f954:	3eff      	subs	r6, #255	; 0xff
    f956:	bf18      	it	ne
    f958:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    f95a:	3501      	adds	r5, #1
    f95c:	b2ed      	uxtb	r5, r5
    f95e:	2d03      	cmp	r5, #3
    f960:	f04f 0201 	mov.w	r2, #1
    f964:	dd94      	ble.n	f890 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    f966:	e0ec      	b.n	fb42 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    f968:	7ca2      	ldrb	r2, [r4, #18]
    f96a:	bb02      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f96c:	7ce2      	ldrb	r2, [r4, #19]
    f96e:	b9f2      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f970:	7d22      	ldrb	r2, [r4, #20]
    f972:	b9e2      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f974:	7d62      	ldrb	r2, [r4, #21]
    f976:	b9d2      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f978:	7da2      	ldrb	r2, [r4, #22]
    f97a:	b9c2      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f97c:	7de2      	ldrb	r2, [r4, #23]
    f97e:	b9b2      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f980:	7e22      	ldrb	r2, [r4, #24]
    f982:	b9a2      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f984:	7e62      	ldrb	r2, [r4, #25]
    f986:	b992      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f988:	7ea2      	ldrb	r2, [r4, #26]
    f98a:	b982      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f98c:	7ee2      	ldrb	r2, [r4, #27]
    f98e:	b972      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f990:	7f22      	ldrb	r2, [r4, #28]
    f992:	b962      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f994:	7f62      	ldrb	r2, [r4, #29]
    f996:	b952      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f998:	7fa2      	ldrb	r2, [r4, #30]
    f99a:	b942      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f99c:	7fe2      	ldrb	r2, [r4, #31]
    f99e:	b932      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f9a0:	f894 2020 	ldrb.w	r2, [r4, #32]
    f9a4:	b91a      	cbnz	r2, f9ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f9a6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    f9aa:	2a00      	cmp	r2, #0
    f9ac:	d0d5      	beq.n	f95a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    f9ae:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    f9b2:	2501      	movs	r5, #1
                        flush0Success = false;
    f9b4:	2600      	movs	r6, #0
    f9b6:	e772      	b.n	f89e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    f9b8:	2f00      	cmp	r7, #0
    f9ba:	f000 80ba 	beq.w	fb32 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    f9be:	23aa      	movs	r3, #170	; 0xaa
    f9c0:	2f01      	cmp	r7, #1
    f9c2:	7023      	strb	r3, [r4, #0]
    f9c4:	f104 0101 	add.w	r1, r4, #1
    f9c8:	f000 80db 	beq.w	fb82 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    f9cc:	2f02      	cmp	r7, #2
    f9ce:	7063      	strb	r3, [r4, #1]
    f9d0:	f104 0102 	add.w	r1, r4, #2
    f9d4:	f000 80d3 	beq.w	fb7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    f9d8:	70a3      	strb	r3, [r4, #2]
    f9da:	1ce1      	adds	r1, r4, #3
    f9dc:	220e      	movs	r2, #14
    f9de:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    f9e2:	51e3      	str	r3, [r4, r7]
    f9e4:	19e3      	adds	r3, r4, r7
    f9e6:	3304      	adds	r3, #4
    f9e8:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    f9ec:	f1b9 0f03 	cmp.w	r9, #3
    f9f0:	6018      	str	r0, [r3, #0]
    f9f2:	6058      	str	r0, [r3, #4]
    f9f4:	d000      	beq.n	f9f8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    f9f6:	6098      	str	r0, [r3, #8]
    f9f8:	45d3      	cmp	fp, sl
    f9fa:	eba2 020a 	sub.w	r2, r2, sl
    f9fe:	eb01 000a 	add.w	r0, r1, sl
    fa02:	d008      	beq.n	fa16 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    fa04:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    fa06:	2a01      	cmp	r2, #1
            *buf++ = val;
    fa08:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    fa0c:	d003      	beq.n	fa16 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    fa0e:	2a02      	cmp	r2, #2
            *buf++ = val;
    fa10:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    fa12:	d000      	beq.n	fa16 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    fa14:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    fa16:	2311      	movs	r3, #17
    fa18:	e746      	b.n	f8a8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    fa1a:	7ca1      	ldrb	r1, [r4, #18]
    fa1c:	29aa      	cmp	r1, #170	; 0xaa
    fa1e:	f000 80aa 	beq.w	fb76 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    fa22:	7ce2      	ldrb	r2, [r4, #19]
    fa24:	2aaa      	cmp	r2, #170	; 0xaa
    fa26:	d040      	beq.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fa28:	7d23      	ldrb	r3, [r4, #20]
    fa2a:	2baa      	cmp	r3, #170	; 0xaa
    fa2c:	f000 80a5 	beq.w	fb7a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    fa30:	7d63      	ldrb	r3, [r4, #21]
    fa32:	2baa      	cmp	r3, #170	; 0xaa
    fa34:	f000 80a7 	beq.w	fb86 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    fa38:	7da3      	ldrb	r3, [r4, #22]
    fa3a:	2baa      	cmp	r3, #170	; 0xaa
    fa3c:	f000 8118 	beq.w	fc70 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    fa40:	7de3      	ldrb	r3, [r4, #23]
    fa42:	2baa      	cmp	r3, #170	; 0xaa
    fa44:	f000 80a1 	beq.w	fb8a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    fa48:	7e23      	ldrb	r3, [r4, #24]
    fa4a:	2baa      	cmp	r3, #170	; 0xaa
    fa4c:	f000 8112 	beq.w	fc74 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    fa50:	7e63      	ldrb	r3, [r4, #25]
    fa52:	2baa      	cmp	r3, #170	; 0xaa
    fa54:	f000 8110 	beq.w	fc78 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    fa58:	7ea3      	ldrb	r3, [r4, #26]
    fa5a:	2baa      	cmp	r3, #170	; 0xaa
    fa5c:	f000 810e 	beq.w	fc7c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    fa60:	7ee3      	ldrb	r3, [r4, #27]
    fa62:	2baa      	cmp	r3, #170	; 0xaa
    fa64:	f000 8102 	beq.w	fc6c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    fa68:	7f23      	ldrb	r3, [r4, #28]
    fa6a:	2baa      	cmp	r3, #170	; 0xaa
    fa6c:	f000 8108 	beq.w	fc80 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    fa70:	7f63      	ldrb	r3, [r4, #29]
    fa72:	2baa      	cmp	r3, #170	; 0xaa
    fa74:	f000 811c 	beq.w	fcb0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    fa78:	7fa3      	ldrb	r3, [r4, #30]
    fa7a:	2baa      	cmp	r3, #170	; 0xaa
    fa7c:	f000 811a 	beq.w	fcb4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    fa80:	7fe3      	ldrb	r3, [r4, #31]
    fa82:	2baa      	cmp	r3, #170	; 0xaa
    fa84:	f000 8118 	beq.w	fcb8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    fa88:	f894 3020 	ldrb.w	r3, [r4, #32]
    fa8c:	2baa      	cmp	r3, #170	; 0xaa
    fa8e:	f000 8115 	beq.w	fcbc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    fa92:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    fa96:	2baa      	cmp	r3, #170	; 0xaa
    fa98:	f000 8108 	beq.w	fcac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    fa9c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    faa0:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    faa2:	bf08      	it	eq
    faa4:	2310      	moveq	r3, #16
                        if (!foundAA &&
    faa6:	f040 80ed 	bne.w	fc84 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    faaa:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    faac:	2502      	movs	r5, #2
    faae:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    fab2:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    fab4:	74e2      	strb	r2, [r4, #19]
    fab6:	7522      	strb	r2, [r4, #20]
    fab8:	7562      	strb	r2, [r4, #21]
    faba:	75a2      	strb	r2, [r4, #22]
    fabc:	75e2      	strb	r2, [r4, #23]
    fabe:	7622      	strb	r2, [r4, #24]
    fac0:	7662      	strb	r2, [r4, #25]
    fac2:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    fac4:	76e2      	strb	r2, [r4, #27]
    fac6:	7722      	strb	r2, [r4, #28]
    fac8:	7762      	strb	r2, [r4, #29]
    faca:	77a2      	strb	r2, [r4, #30]
    facc:	77e2      	strb	r2, [r4, #31]
    face:	f884 2020 	strb.w	r2, [r4, #32]
    fad2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    fad6:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    fada:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    fade:	105b      	asrs	r3, r3, #1
    fae0:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    fae2:	2701      	movs	r7, #1
    fae4:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    fae6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    faea:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    faee:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    faf2:	3a01      	subs	r2, #1
    faf4:	4610      	mov	r0, r2
    faf6:	17d1      	asrs	r1, r2, #31
    faf8:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    fafa:	42ba      	cmp	r2, r7
    fafc:	bfc8      	it	gt
    fafe:	fa42 f707 	asrgt.w	r7, r2, r7
    fb02:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    fb06:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    fb0a:	2b00      	cmp	r3, #0
    fb0c:	d13f      	bne.n	fb8e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    fb0e:	4b6d      	ldr	r3, [pc, #436]	; (fcc4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    fb10:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fb14:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    fb18:	43c9      	mvns	r1, r1
    fb1a:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    fb1c:	4a6a      	ldr	r2, [pc, #424]	; (fcc8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    fb1e:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    fb22:	6813      	ldr	r3, [r2, #0]
    fb24:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    fb28:	4628      	mov	r0, r5
    fb2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    fb2e:	2601      	movs	r6, #1
    fb30:	e713      	b.n	f95a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    fb32:	4623      	mov	r3, r4
    fb34:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    fb38:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    fb3c:	4621      	mov	r1, r4
    fb3e:	2211      	movs	r2, #17
    fb40:	e752      	b.n	f9e8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    fb42:	4a62      	ldr	r2, [pc, #392]	; (fccc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fb44:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    fb46:	2301      	movs	r3, #1
    fb48:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fb4c:	2208      	movs	r2, #8
    fb4e:	2102      	movs	r1, #2
    fb50:	f002 fbf0 	bl	12334 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    fb54:	4a5b      	ldr	r2, [pc, #364]	; (fcc4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    fb56:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    fb5a:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    fb5e:	495a      	ldr	r1, [pc, #360]	; (fcc8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    fb60:	ea23 0300 	bic.w	r3, r3, r0
    fb64:	6809      	ldr	r1, [r1, #0]
    fb66:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    fb6a:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    fb6c:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    fb70:	4628      	mov	r0, r5
    fb72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    fb76:	4613      	mov	r3, r2
    fb78:	e797      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    fb7a:	2302      	movs	r3, #2
    fb7c:	e795      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fb7e:	220f      	movs	r2, #15
    fb80:	e72d      	b.n	f9de <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    fb82:	2210      	movs	r2, #16
    fb84:	e72b      	b.n	f9de <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    fb86:	2303      	movs	r3, #3
    fb88:	e78f      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fb8a:	2305      	movs	r3, #5
    fb8c:	e78d      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    fb8e:	f1c3 0108 	rsb	r1, r3, #8
    fb92:	00ce      	lsls	r6, r1, #3
    fb94:	f04f 30ff 	mov.w	r0, #4294967295
    fb98:	f1c6 0220 	rsb	r2, r6, #32
    fb9c:	fa00 f202 	lsl.w	r2, r0, r2
    fba0:	fa20 fe06 	lsr.w	lr, r0, r6
    fba4:	f1a6 0720 	sub.w	r7, r6, #32
    fba8:	fa20 f707 	lsr.w	r7, r0, r7
    fbac:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    fbb0:	4622      	mov	r2, r4
    fbb2:	ea4e 0e07 	orr.w	lr, lr, r7
    fbb6:	40f0      	lsrs	r0, r6
    fbb8:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    fbba:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    fbbe:	65e0      	str	r0, [r4, #92]	; 0x5c
    fbc0:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    fbc4:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    fbc6:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    fbc8:	f104 0812 	add.w	r8, r4, #18
    fbcc:	7056      	strb	r6, [r2, #1]
    fbce:	7096      	strb	r6, [r2, #2]
    fbd0:	70d6      	strb	r6, [r2, #3]
    fbd2:	7116      	strb	r6, [r2, #4]
    fbd4:	7156      	strb	r6, [r2, #5]
    fbd6:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    fbd8:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    fbdc:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    fbde:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    fbe2:	4442      	add	r2, r8
    fbe4:	3301      	adds	r3, #1
    fbe6:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    fbe8:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    fbec:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    fbee:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    fbf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fbf2:	f001 ff53 	bl	11a9c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    fbf6:	4631      	mov	r1, r6
    fbf8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fbfa:	f001 fea5 	bl	11948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fbfe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    fc02:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fc06:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fc08:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    fc0a:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fc0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fc0e:	f001 fe9b 	bl	11948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    fc12:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    fc16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    fc18:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    fc1c:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    fc20:	2701      	movs	r7, #1
    fc22:	4442      	add	r2, r8
    fc24:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    fc28:	4421      	add	r1, r4
    fc2a:	f001 ff37 	bl	11a9c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    fc2e:	4631      	mov	r1, r6
    fc30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fc32:	f001 fe89 	bl	11948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    fc36:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc3a:	4b22      	ldr	r3, [pc, #136]	; (fcc4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    fc3c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    fc40:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    fc44:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    fc48:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    fc4c:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc50:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    fc54:	f04f 0800 	mov.w	r8, #0
    fc58:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    fc5c:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    fc60:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    fc64:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc66:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    fc6a:	e757      	b.n	fb1c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    fc6c:	2309      	movs	r3, #9
    fc6e:	e71c      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fc70:	2304      	movs	r3, #4
    fc72:	e71a      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fc74:	2306      	movs	r3, #6
    fc76:	e718      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fc78:	2307      	movs	r3, #7
    fc7a:	e716      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fc7c:	2308      	movs	r3, #8
    fc7e:	e714      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fc80:	230a      	movs	r3, #10
    fc82:	e712      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    fc84:	2300      	movs	r3, #0
    fc86:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    fc8a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    fc8e:	4a0f      	ldr	r2, [pc, #60]	; (fccc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    fc90:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    fc92:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    fc94:	f04f 0000 	mov.w	r0, #0
    fc98:	f04f 0100 	mov.w	r1, #0
    fc9c:	bfcc      	ite	gt
    fc9e:	105b      	asrgt	r3, r3, #1
    fca0:	2301      	movle	r3, #1
    fca2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    fca6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    fcaa:	e74b      	b.n	fb44 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    fcac:	230f      	movs	r3, #15
    fcae:	e6fc      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fcb0:	230b      	movs	r3, #11
    fcb2:	e6fa      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fcb4:	230c      	movs	r3, #12
    fcb6:	e6f8      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fcb8:	230d      	movs	r3, #13
    fcba:	e6f6      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    fcbc:	230e      	movs	r3, #14
    fcbe:	e6f4      	b.n	faaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    fcc0:	2300      	movs	r3, #0
    fcc2:	e70c      	b.n	fade <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    fcc4:	200019d0 	.word	0x200019d0
    fcc8:	20001be0 	.word	0x20001be0
    fccc:	20001f18 	.word	0x20001f18

0000fcd0 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    fcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    fcd4:	4f42      	ldr	r7, [pc, #264]	; (fde0 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    fcd6:	683c      	ldr	r4, [r7, #0]
    fcd8:	f014 0401 	ands.w	r4, r4, #1
    fcdc:	d003      	beq.n	fce6 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    fcde:	4b41      	ldr	r3, [pc, #260]	; (fde4 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    fce0:	6818      	ldr	r0, [r3, #0]
    fce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fce6:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    fcea:	f004 f909 	bl	13f00 <_Znwj>
            buf64.writeMarker = 0;
    fcee:	4603      	mov	r3, r0
    fcf0:	4606      	mov	r6, r0
    fcf2:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    fcf6:	f04f 38ff 	mov.w	r8, #4294967295
    fcfa:	f04f 39ff 	mov.w	r9, #4294967295
    fcfe:	2200      	movs	r2, #0
            buf64.inputs = 0;
    fd00:	7074      	strb	r4, [r6, #1]
    fd02:	705c      	strb	r4, [r3, #1]
    fd04:	709c      	strb	r4, [r3, #2]
    fd06:	70dc      	strb	r4, [r3, #3]
    fd08:	711c      	strb	r4, [r3, #4]
    fd0a:	715c      	strb	r4, [r3, #5]
    fd0c:	719c      	strb	r4, [r3, #6]
    fd0e:	71dc      	strb	r4, [r3, #7]
    fd10:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    fd12:	7274      	strb	r4, [r6, #9]
    fd14:	72b4      	strb	r4, [r6, #10]
    fd16:	72f4      	strb	r4, [r6, #11]
    fd18:	7334      	strb	r4, [r6, #12]
    fd1a:	7374      	strb	r4, [r6, #13]
    fd1c:	73b4      	strb	r4, [r6, #14]
    fd1e:	73f4      	strb	r4, [r6, #15]
    fd20:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    fd22:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    fd24:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    fd26:	74f4      	strb	r4, [r6, #19]
    fd28:	7534      	strb	r4, [r6, #20]
    fd2a:	7574      	strb	r4, [r6, #21]
    fd2c:	75b4      	strb	r4, [r6, #22]
    fd2e:	75f4      	strb	r4, [r6, #23]
    fd30:	7634      	strb	r4, [r6, #24]
    fd32:	7674      	strb	r4, [r6, #25]
    fd34:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    fd36:	76f4      	strb	r4, [r6, #27]
    fd38:	7734      	strb	r4, [r6, #28]
    fd3a:	7774      	strb	r4, [r6, #29]
    fd3c:	77b4      	strb	r4, [r6, #30]
    fd3e:	77f4      	strb	r4, [r6, #31]
    fd40:	f886 4020 	strb.w	r4, [r6, #32]
    fd44:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    fd48:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    fd4c:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    fd50:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    fd54:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    fd58:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    fd5c:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    fd60:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    fd64:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    fd68:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    fd6c:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    fd70:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    fd74:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    fd78:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    fd7c:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    fd80:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    fd84:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    fd88:	2301      	movs	r3, #1
    fd8a:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    fd8e:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    fd92:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    fd96:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    fd9a:	62b4      	str	r4, [r6, #40]	; 0x28
    fd9c:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    fda0:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    fda4:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    fda8:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    fdac:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    fdb0:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    fdb4:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    fdb8:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    fdbc:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    fdc0:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    fdc4:	4620      	mov	r0, r4
    fdc6:	3428      	adds	r4, #40	; 0x28
    fdc8:	f000 fc8a 	bl	106e0 <_ZN9ClearCore7CcioPinC1Ev>
    fdcc:	42ac      	cmp	r4, r5
    fdce:	d1f9      	bne.n	fdc4 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    fdd0:	4a04      	ldr	r2, [pc, #16]	; (fde4 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    fdd2:	2301      	movs	r3, #1
    fdd4:	6016      	str	r6, [r2, #0]
    fdd6:	4630      	mov	r0, r6
    fdd8:	603b      	str	r3, [r7, #0]
}
    fdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fdde:	bf00      	nop
    fde0:	20001ef8 	.word	0x20001ef8
    fde4:	20001f00 	.word	0x20001f00

0000fde8 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    fde8:	b570      	push	{r4, r5, r6, lr}
    fdea:	4606      	mov	r6, r0
    fdec:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    fdf0:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    fdf2:	682b      	ldr	r3, [r5, #0]
    fdf4:	b221      	sxth	r1, r4
    fdf6:	3401      	adds	r4, #1
    fdf8:	4628      	mov	r0, r5
    fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fdfc:	b2a4      	uxth	r4, r4
    fdfe:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    fe00:	2c80      	cmp	r4, #128	; 0x80
    fe02:	f105 0528 	add.w	r5, r5, #40	; 0x28
    fe06:	d1f4      	bne.n	fdf2 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fe08:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    fe0c:	2b02      	cmp	r3, #2
    fe0e:	d00b      	beq.n	fe28 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    fe10:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    fe14:	2b00      	cmp	r3, #0
    fe16:	d13c      	bne.n	fe92 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    fe18:	4a20      	ldr	r2, [pc, #128]	; (fe9c <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    fe1a:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    fe1c:	6812      	ldr	r2, [r2, #0]
    fe1e:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    fe22:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    fe24:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    fe28:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    fe2a:	2001      	movs	r0, #1
    m_ccioMask = 0;
    fe2c:	2200      	movs	r2, #0
    fe2e:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    fe30:	f04f 34ff 	mov.w	r4, #4294967295
    fe34:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    fe38:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    fe3c:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    fe40:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    fe44:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    fe48:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    fe4c:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    fe50:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    fe54:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    fe58:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    fe5c:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    fe60:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    fe64:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    fe68:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    fe6c:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    fe70:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    fe74:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    fe78:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    fe7c:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    fe80:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    fe84:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    fe88:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    fe8c:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    fe90:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fe92:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    fe96:	2b00      	cmp	r3, #0
    fe98:	d1be      	bne.n	fe18 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    fe9a:	e7c5      	b.n	fe28 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    fe9c:	20001be0 	.word	0x20001be0

0000fea0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    fea0:	3940      	subs	r1, #64	; 0x40
    fea2:	b28b      	uxth	r3, r1
    fea4:	2b3f      	cmp	r3, #63	; 0x3f
    fea6:	d80f      	bhi.n	fec8 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    fea8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    feaa:	6c00      	ldr	r0, [r0, #64]	; 0x40
    feac:	b2c9      	uxtb	r1, r1
    feae:	f1c1 0320 	rsb	r3, r1, #32
    feb2:	fa02 f303 	lsl.w	r3, r2, r3
    feb6:	40c8      	lsrs	r0, r1
    feb8:	3920      	subs	r1, #32
    feba:	4318      	orrs	r0, r3
    febc:	fa22 f101 	lsr.w	r1, r2, r1
    fec0:	4308      	orrs	r0, r1
}
    fec2:	f000 0001 	and.w	r0, r0, #1
    fec6:	4770      	bx	lr
    fec8:	2000      	movs	r0, #0
    feca:	f000 0001 	and.w	r0, r0, #1
    fece:	4770      	bx	lr

0000fed0 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    fed0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fed2:	2900      	cmp	r1, #0
    fed4:	f000 8084 	beq.w	ffe0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    fed8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    fedc:	2b00      	cmp	r3, #0
    fede:	d07f      	beq.n	ffe0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    fee0:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    fee4:	2a00      	cmp	r2, #0
    fee6:	d17b      	bne.n	ffe0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    feec:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    fef0:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    fef4:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    fef6:	f000 80a3 	beq.w	10040 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    fefa:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    fefe:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    ff02:	2400      	movs	r4, #0
    ff04:	2500      	movs	r5, #0
    ff06:	4690      	mov	r8, r2
    ff08:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    ff0c:	4696      	mov	lr, r2
    ff0e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    ff12:	e9cd 4500 	strd	r4, r5, [sp]
    ff16:	2201      	movs	r2, #1
    ff18:	2300      	movs	r3, #0
    ff1a:	4626      	mov	r6, r4
    ff1c:	462f      	mov	r7, r5
    ff1e:	9106      	str	r1, [sp, #24]
    ff20:	e037      	b.n	ff92 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    ff22:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    ff26:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    ff2a:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    ff2e:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    ff32:	f108 0501 	add.w	r5, r8, #1
    ff36:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    ff38:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    ff3a:	ea46 0602 	orr.w	r6, r6, r2
    ff3e:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    ff42:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    ff46:	db06      	blt.n	ff56 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    ff48:	b12c      	cbz	r4, ff56 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    ff4a:	e9dd 4500 	ldrd	r4, r5, [sp]
    ff4e:	4314      	orrs	r4, r2
    ff50:	431d      	orrs	r5, r3
    ff52:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    ff56:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    ff5a:	ea04 0802 	and.w	r8, r4, r2
    ff5e:	ea05 0903 	and.w	r9, r5, r3
    ff62:	ea58 0109 	orrs.w	r1, r8, r9
    ff66:	d00b      	beq.n	ff80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    ff68:	ea24 0402 	bic.w	r4, r4, r2
    ff6c:	ea25 0503 	bic.w	r5, r5, r3
    ff70:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    ff74:	e9dd 4500 	ldrd	r4, r5, [sp]
    ff78:	4314      	orrs	r4, r2
    ff7a:	431d      	orrs	r5, r3
    ff7c:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    ff80:	f10e 0e01 	add.w	lr, lr, #1
    ff84:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    ff88:	1892      	adds	r2, r2, r2
    ff8a:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    ff8c:	45e6      	cmp	lr, ip
    ff8e:	46f0      	mov	r8, lr
    ff90:	da27      	bge.n	ffe2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    ff92:	ea0a 0402 	and.w	r4, sl, r2
    ff96:	ea0b 0503 	and.w	r5, fp, r3
    ff9a:	ea54 0105 	orrs.w	r1, r4, r5
    ff9e:	d0ef      	beq.n	ff80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    ffa0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    ffa4:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    ffa8:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    ffac:	3c01      	subs	r4, #1
    ffae:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    ffb2:	2c00      	cmp	r4, #0
    ffb4:	d1e4      	bne.n	ff80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    ffb6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    ffba:	4014      	ands	r4, r2
    ffbc:	401d      	ands	r5, r3
    ffbe:	432c      	orrs	r4, r5
    ffc0:	d1af      	bne.n	ff22 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    ffc2:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    ffc6:	ea04 0802 	and.w	r8, r4, r2
    ffca:	ea05 0903 	and.w	r9, r5, r3
    ffce:	e9cd 4508 	strd	r4, r5, [sp, #32]
    ffd2:	ea58 0409 	orrs.w	r4, r8, r9
    ffd6:	f000 8115 	beq.w	10204 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    ffda:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    ffde:	e7c3      	b.n	ff68 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    ffe0:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    ffe2:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    ffe6:	9906      	ldr	r1, [sp, #24]
    ffe8:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    ffec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    fff0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    fff4:	4642      	mov	r2, r8
    fff6:	464b      	mov	r3, r9
    fff8:	4322      	orrs	r2, r4
    fffa:	432b      	orrs	r3, r5
    fffc:	4614      	mov	r4, r2
    fffe:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
   10000:	4642      	mov	r2, r8
   10002:	464b      	mov	r3, r9
   10004:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   10008:	43f6      	mvns	r6, r6
   1000a:	43ff      	mvns	r7, r7
   1000c:	ea48 0802 	orr.w	r8, r8, r2
   10010:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
   10014:	ea04 0206 	and.w	r2, r4, r6
   10018:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
   1001c:	e9dd 4500 	ldrd	r4, r5, [sp]
   10020:	ea2a 0404 	bic.w	r4, sl, r4
   10024:	ea2b 0505 	bic.w	r5, fp, r5
   10028:	46a2      	mov	sl, r4
   1002a:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
   1002c:	ea08 0406 	and.w	r4, r8, r6
   10030:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
   10034:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
   10038:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
   1003c:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
   10040:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
   10044:	3d01      	subs	r5, #1
   10046:	b2ed      	uxtb	r5, r5
   10048:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
   1004c:	b115      	cbz	r5, 10054 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
   1004e:	b011      	add	sp, #68	; 0x44
   10050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10054:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
   10056:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1005a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
   1005e:	4608      	mov	r0, r1
   10060:	f001 fd9e 	bl	11ba0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
   10064:	4629      	mov	r1, r5
   10066:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10068:	f001 fc6e 	bl	11948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
   1006c:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
   10070:	f10c 0309 	add.w	r3, ip, #9
   10074:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
   10076:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
   1007a:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
   1007c:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
   1007e:	2acc      	cmp	r2, #204	; 0xcc
   10080:	f000 814e 	beq.w	10320 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
   10084:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
   10088:	1c5a      	adds	r2, r3, #1
   1008a:	b292      	uxth	r2, r2
   1008c:	3b04      	subs	r3, #4
   1008e:	4616      	mov	r6, r2
   10090:	920b      	str	r2, [sp, #44]	; 0x2c
   10092:	b29b      	uxth	r3, r3
   10094:	f64f 72fb 	movw	r2, #65531	; 0xfffb
   10098:	4293      	cmp	r3, r2
   1009a:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
   1009e:	f240 81c6 	bls.w	1042e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
   100a2:	2200      	movs	r2, #0
   100a4:	2300      	movs	r3, #0
   100a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   100aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
   100ae:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   100b2:	ea22 0000 	bic.w	r0, r2, r0
   100b6:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
   100ba:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
   100be:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
   100c2:	4610      	mov	r0, r2
   100c4:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
   100c6:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
   100ca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
   100ce:	f1bc 0f00 	cmp.w	ip, #0
   100d2:	f000 81d3 	beq.w	1047c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
   100d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   100da:	2200      	movs	r2, #0
   100dc:	2000      	movs	r0, #0
   100de:	2100      	movs	r1, #0
   100e0:	4613      	mov	r3, r2
   100e2:	e9cd 0100 	strd	r0, r1, [sp]
   100e6:	f04f 0801 	mov.w	r8, #1
   100ea:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
   100ee:	f04f 0a0c 	mov.w	sl, #12
   100f2:	e038      	b.n	10166 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
   100f4:	0099      	lsls	r1, r3, #2
   100f6:	18c8      	adds	r0, r1, r3
   100f8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   100fc:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
   10100:	f10b 3bff 	add.w	fp, fp, #4294967295
   10104:	fa1f fb8b 	uxth.w	fp, fp
   10108:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
   1010c:	f1bb 0f00 	cmp.w	fp, #0
   10110:	d107      	bne.n	10122 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
   10112:	ea26 0608 	bic.w	r6, r6, r8
   10116:	ea27 0709 	bic.w	r7, r7, r9
   1011a:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
   1011e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
   10122:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   10126:	ea06 0608 	and.w	r6, r6, r8
   1012a:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
   1012e:	4419      	add	r1, r3
        if (changedInputs & mask) {
   10130:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
   10134:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
   10138:	d04e      	beq.n	101d8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
   1013a:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
   1013e:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
   10142:	b93b      	cbnz	r3, 10154 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
   10144:	e9dd 0100 	ldrd	r0, r1, [sp]
   10148:	ea40 0008 	orr.w	r0, r0, r8
   1014c:	ea41 0109 	orr.w	r1, r1, r9
   10150:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
   10154:	3201      	adds	r2, #1
   10156:	b2d2      	uxtb	r2, r2
        mask <<= 1;
   10158:	eb18 0808 	adds.w	r8, r8, r8
   1015c:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
   10160:	4596      	cmp	lr, r2
   10162:	4613      	mov	r3, r2
   10164:	dd59      	ble.n	1021a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
   10166:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1016a:	4606      	mov	r6, r0
   1016c:	460f      	mov	r7, r1
   1016e:	ea00 0008 	and.w	r0, r0, r8
   10172:	ea01 0109 	and.w	r1, r1, r9
   10176:	4301      	orrs	r1, r0
   10178:	d1bc      	bne.n	100f4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
   1017a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1017e:	ea00 0008 	and.w	r0, r0, r8
   10182:	ea01 0109 	and.w	r1, r1, r9
   10186:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
   10188:	ea4f 0183 	mov.w	r1, r3, lsl #2
   1018c:	eb01 0003 	add.w	r0, r1, r3
   10190:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
   10194:	d02b      	beq.n	101ee <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
   10196:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
   1019a:	f1bb 0f00 	cmp.w	fp, #0
   1019e:	d0c0      	beq.n	10122 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
   101a0:	f10b 3bff 	add.w	fp, fp, #4294967295
   101a4:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
   101a8:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
   101ac:	f1bb 0f00 	cmp.w	fp, #0
   101b0:	d1b7      	bne.n	10122 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
   101b2:	ea46 0608 	orr.w	r6, r6, r8
   101b6:	ea47 0709 	orr.w	r7, r7, r9
   101ba:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
   101be:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   101c2:	ea46 0608 	orr.w	r6, r6, r8
   101c6:	ea47 0709 	orr.w	r7, r7, r9
   101ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
   101ce:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   101d2:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
   101d6:	e7a4      	b.n	10122 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
   101d8:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
   101dc:	2800      	cmp	r0, #0
   101de:	d0b9      	beq.n	10154 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
   101e0:	3801      	subs	r0, #1
   101e2:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
   101e4:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
   101e8:	2800      	cmp	r0, #0
   101ea:	d0ab      	beq.n	10144 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
   101ec:	e7b2      	b.n	10154 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
   101ee:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   101f2:	ea26 0608 	bic.w	r6, r6, r8
   101f6:	ea27 0709 	bic.w	r7, r7, r9
   101fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
   101fe:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
   10202:	e78e      	b.n	10122 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
   10204:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
   10208:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
   1020c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   10210:	4314      	orrs	r4, r2
   10212:	431d      	orrs	r5, r3
   10214:	e9cd 4504 	strd	r4, r5, [sp, #16]
   10218:	e6b2      	b.n	ff80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
   1021a:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
   1021e:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
   10222:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   10226:	ea80 000a 	eor.w	r0, r0, sl
   1022a:	ea81 010b 	eor.w	r1, r1, fp
   1022e:	4002      	ands	r2, r0
   10230:	400b      	ands	r3, r1
   10232:	ea82 080a 	eor.w	r8, r2, sl
   10236:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
   1023a:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
   1023e:	ea28 000a 	bic.w	r0, r8, sl
   10242:	ea29 010b 	bic.w	r1, r9, fp
   10246:	ea40 0602 	orr.w	r6, r0, r2
   1024a:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
   1024e:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
   10252:	e9cd 8900 	strd	r8, r9, [sp]
   10256:	ea2a 0808 	bic.w	r8, sl, r8
   1025a:	ea2b 0909 	bic.w	r9, fp, r9
   1025e:	ea43 0109 	orr.w	r1, r3, r9
   10262:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
   10266:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
   1026a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
   1026c:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
   10270:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
   10274:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
   10278:	2b00      	cmp	r3, #0
   1027a:	f000 8083 	beq.w	10384 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
   1027e:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
   10282:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
   10286:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1028a:	ea03 0907 	and.w	r9, r3, r7
   1028e:	ea29 0101 	bic.w	r1, r9, r1
   10292:	ea02 0806 	and.w	r8, r2, r6
   10296:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
   10298:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
   1029c:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
   1029e:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
   102a2:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
   102a4:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
   102a6:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
   102aa:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
   102ae:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
   102b2:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
   102b4:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
   102b6:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
   102ba:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
   102be:	fa01 f505 	lsl.w	r5, r1, r5
   102c2:	fa20 f203 	lsr.w	r2, r0, r3
   102c6:	432a      	orrs	r2, r5
   102c8:	f1a3 0520 	sub.w	r5, r3, #32
   102cc:	fa21 f505 	lsr.w	r5, r1, r5
   102d0:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
   102d2:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
   102d6:	f8d4 500d 	ldr.w	r5, [r4, #13]
   102da:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
   102de:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
   102e2:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
   102e6:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
   102e8:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
   102ec:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
   102ee:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
   102f2:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
   102f4:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   102f8:	2101      	movs	r1, #1
   102fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   102fc:	f001 fb24 	bl	11948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
   10300:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
   10304:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10306:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
   10308:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
   1030c:	2501      	movs	r5, #1
   1030e:	321b      	adds	r2, #27
   10310:	4421      	add	r1, r4
   10312:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
   10316:	b011      	add	sp, #68	; 0x44
   10318:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
   1031c:	f001 bbee 	b.w	11afc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
   10320:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   10324:	f8d4 701f 	ldr.w	r7, [r4, #31]
   10328:	f8d4 601b 	ldr.w	r6, [r4, #27]
   1032c:	42bb      	cmp	r3, r7
   1032e:	bf08      	it	eq
   10330:	42b2      	cmpeq	r2, r6
   10332:	f47f aea7 	bne.w	10084 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
   10336:	f8d4 2013 	ldr.w	r2, [r4, #19]
   1033a:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
   1033e:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
   10342:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
   10346:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
   10348:	ea6f 0903 	mvn.w	r9, r3
   1034c:	ea6f 0802 	mvn.w	r8, r2
   10350:	f1c6 0720 	rsb	r7, r6, #32
   10354:	fa28 f306 	lsr.w	r3, r8, r6
   10358:	fa09 f707 	lsl.w	r7, r9, r7
   1035c:	f1a6 0220 	sub.w	r2, r6, #32
   10360:	fa29 f202 	lsr.w	r2, r9, r2
   10364:	433b      	orrs	r3, r7
   10366:	4313      	orrs	r3, r2
   10368:	9308      	str	r3, [sp, #32]
   1036a:	fa29 f306 	lsr.w	r3, r9, r6
   1036e:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
   10370:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   10374:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   10378:	4042      	eors	r2, r0
   1037a:	404b      	eors	r3, r1
   1037c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   10380:	950b      	str	r5, [sp, #44]	; 0x2c
   10382:	e694      	b.n	100ae <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
   10384:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
   10388:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
   1038c:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
   10390:	4016      	ands	r6, r2
   10392:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
   10394:	ea40 0206 	orr.w	r2, r0, r6
   10398:	ea41 0307 	orr.w	r3, r1, r7
   1039c:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
   103a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   103a4:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
   103a6:	46b0      	mov	r8, r6
   103a8:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
   103aa:	bf08      	it	eq
   103ac:	42b2      	cmpeq	r2, r6
   103ae:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   103b2:	f43f af64 	beq.w	1027e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
   103b6:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
   103ba:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
   103be:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
   103c2:	d053      	beq.n	1046c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
   103c4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 10490 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
   103c8:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   103cc:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
   103d0:	433e      	orrs	r6, r7
   103d2:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
   103d6:	ea29 0701 	bic.w	r7, r9, r1
   103da:	ea28 0600 	bic.w	r6, r8, r0
   103de:	ea56 0307 	orrs.w	r3, r6, r7
   103e2:	f43f af4c 	beq.w	1027e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
   103e6:	ea48 0200 	orr.w	r2, r8, r0
   103ea:	ea49 0301 	orr.w	r3, r9, r1
   103ee:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
   103f2:	f1bc 0f00 	cmp.w	ip, #0
   103f6:	f43f af42 	beq.w	1027e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
   103fa:	4e24      	ldr	r6, [pc, #144]	; (1048c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
   103fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
   103fe:	2701      	movs	r7, #1
   10400:	e005      	b.n	1040e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
   10402:	3501      	adds	r5, #1
   10404:	b2ed      	uxtb	r5, r5
   10406:	4565      	cmp	r5, ip
   10408:	462a      	mov	r2, r5
   1040a:	f6bf af38 	bge.w	1027e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
   1040e:	ab10      	add	r3, sp, #64	; 0x40
   10410:	442b      	add	r3, r5
   10412:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   10416:	2b00      	cmp	r3, #0
   10418:	d0f3      	beq.n	10402 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
   1041a:	fa07 f202 	lsl.w	r2, r7, r2
   1041e:	b2d2      	uxtb	r2, r2
   10420:	2103      	movs	r1, #3
   10422:	6830      	ldr	r0, [r6, #0]
   10424:	f001 ff86 	bl	12334 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
   10428:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
   1042c:	e7e9      	b.n	10402 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
   1042e:	2101      	movs	r1, #1
   10430:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   10434:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10436:	f001 fa87 	bl	11948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
   1043a:	4914      	ldr	r1, [pc, #80]	; (1048c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
   1043c:	2300      	movs	r3, #0
   1043e:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
   10440:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
   10442:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
   10446:	2102      	movs	r1, #2
   10448:	2208      	movs	r2, #8
   1044a:	f001 ff73 	bl	12334 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   1044e:	4b10      	ldr	r3, [pc, #64]	; (10490 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
   10450:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   10454:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
   10458:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   1045c:	43d2      	mvns	r2, r2
   1045e:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
   10460:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   10462:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
   10466:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
   1046a:	e5f0      	b.n	1004e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
   1046c:	4a08      	ldr	r2, [pc, #32]	; (10490 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   1046e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
   10472:	ea23 0307 	bic.w	r3, r3, r7
   10476:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   1047a:	e700      	b.n	1027e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
   1047c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
   10480:	2200      	movs	r2, #0
   10482:	2300      	movs	r3, #0
   10484:	e9cd 2300 	strd	r2, r3, [sp]
   10488:	e6c9      	b.n	1021e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
   1048a:	bf00      	nop
   1048c:	20001f18 	.word	0x20001f18
   10490:	200019d0 	.word	0x200019d0

00010494 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
   10494:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10496:	b1c1      	cbz	r1, 104ca <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
   10498:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
   1049c:	b1aa      	cbz	r2, 104ca <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
   1049e:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
   104a2:	b192      	cbz	r2, 104ca <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
   104a4:	4a09      	ldr	r2, [pc, #36]	; (104cc <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
   104a6:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
   104a8:	6812      	ldr	r2, [r2, #0]
   104aa:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
   104ae:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
   104b2:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
   104b4:	42a2      	cmp	r2, r4
   104b6:	d907      	bls.n	104c8 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
   104b8:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
   104ba:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
   104be:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
   104c2:	bc30      	pop	{r4, r5}
   104c4:	f7ff b9c0 	b.w	f848 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
   104c8:	bc30      	pop	{r4, r5}
   104ca:	4770      	bx	lr
   104cc:	20001be0 	.word	0x20001be0

000104d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
   104d0:	4a0e      	ldr	r2, [pc, #56]	; (1050c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
   104d2:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
   104d4:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
   104d8:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
   104dc:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
   104e0:	43f3      	mvns	r3, r6
   104e2:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
   104e4:	2700      	movs	r7, #0
   104e6:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
   104ea:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
   104ee:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   104f2:	bf15      	itete	ne
   104f4:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   104f8:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   104fc:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   104fe:	400b      	andeq	r3, r1
   10500:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
   10504:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
   10506:	f7ff bc6f 	b.w	fde8 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
   1050a:	bf00      	nop
   1050c:	200019d0 	.word	0x200019d0

00010510 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
   10510:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   10514:	2b02      	cmp	r3, #2
   10516:	d005      	beq.n	10524 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
   10518:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
   1051c:	b12b      	cbz	r3, 1052a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
   1051e:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
   10522:	b913      	cbnz	r3, 1052a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
   10524:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
   10528:	4770      	bx	lr
    m_serPort = comInstance;
   1052a:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
   1052c:	b109      	cbz	r1, 10532 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
   1052e:	f7ff b98b 	b.w	f848 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
   10532:	4b04      	ldr	r3, [pc, #16]	; (10544 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
   10534:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
   10538:	681b      	ldr	r3, [r3, #0]
   1053a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
   1053e:	4608      	mov	r0, r1
   10540:	4770      	bx	lr
   10542:	bf00      	nop
   10544:	20001be0 	.word	0x20001be0

00010548 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
   10548:	3940      	subs	r1, #64	; 0x40
   1054a:	b28b      	uxth	r3, r1
   1054c:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
   1054e:	bf9d      	ittte	ls
   10550:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
   10554:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
   10558:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
   1055a:	2000      	movhi	r0, #0
    }
}
   1055c:	4770      	bx	lr
   1055e:	bf00      	nop

00010560 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
   10560:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
   10562:	f7ff fbb5 	bl	fcd0 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
   10566:	4b01      	ldr	r3, [pc, #4]	; (1056c <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
   10568:	6018      	str	r0, [r3, #0]
   1056a:	bd08      	pop	{r3, pc}
   1056c:	20001efc 	.word	0x20001efc

00010570 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   10570:	7980      	ldrb	r0, [r0, #6]
   10572:	4770      	bx	lr

00010574 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
   10574:	2009      	movs	r0, #9
   10576:	4770      	bx	lr

00010578 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
   10578:	7980      	ldrb	r0, [r0, #6]
    }
   1057a:	f1a0 0004 	sub.w	r0, r0, #4
   1057e:	fab0 f080 	clz	r0, r0
   10582:	0940      	lsrs	r0, r0, #5
   10584:	4770      	bx	lr
   10586:	bf00      	nop

00010588 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   10588:	4770      	bx	lr
   1058a:	bf00      	nop

0001058c <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
   1058c:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   1058e:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
   10592:	2201      	movs	r2, #1
   10594:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
   10598:	f1c5 0420 	rsb	r4, r5, #32
   1059c:	fa22 f404 	lsr.w	r4, r2, r4
   105a0:	fa02 f303 	lsl.w	r3, r2, r3
   105a4:	4323      	orrs	r3, r4
   105a6:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
   105a8:	2602      	movs	r6, #2
    m_filterLength = 3;
   105aa:	4d07      	ldr	r5, [pc, #28]	; (105c8 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
   105ac:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
   105ae:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   105b0:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
   105b2:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
   105b4:	6105      	str	r5, [r0, #16]
   105b6:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   105b8:	6082      	str	r2, [r0, #8]
   105ba:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
   105bc:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
   105be:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
   105c0:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
   105c2:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
   105c4:	bc70      	pop	{r4, r5, r6}
   105c6:	4770      	bx	lr
   105c8:	00010003 	.word	0x00010003

000105cc <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
   105cc:	7983      	ldrb	r3, [r0, #6]
   105ce:	428b      	cmp	r3, r1
   105d0:	d02f      	beq.n	10632 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
   105d2:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
   105d4:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
   105d8:	d014      	beq.n	10604 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
   105da:	2904      	cmp	r1, #4
   105dc:	d10b      	bne.n	105f6 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
   105de:	4b16      	ldr	r3, [pc, #88]	; (10638 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
   105e0:	681e      	ldr	r6, [r3, #0]
   105e2:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
   105e6:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
   105ea:	432b      	orrs	r3, r5
   105ec:	4322      	orrs	r2, r4
   105ee:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
   105f2:	460b      	mov	r3, r1
            m_mode = newMode;
   105f4:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
   105f6:	1ac8      	subs	r0, r1, r3
   105f8:	fab0 f080 	clz	r0, r0
   105fc:	0940      	lsrs	r0, r0, #5
}
   105fe:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
   10602:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
   10604:	4b0c      	ldr	r3, [pc, #48]	; (10638 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
   10606:	681e      	ldr	r6, [r3, #0]
   10608:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1060c:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
   10610:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
   10614:	43d2      	mvns	r2, r2
   10616:	43db      	mvns	r3, r3
   10618:	4014      	ands	r4, r2
   1061a:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
   1061c:	ea02 0208 	and.w	r2, r2, r8
   10620:	ea03 0309 	and.w	r3, r3, r9
   10624:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
   10628:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
   1062c:	460b      	mov	r3, r1
            m_mode = newMode;
   1062e:	7181      	strb	r1, [r0, #6]
            break;
   10630:	e7e1      	b.n	105f6 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
   10632:	2001      	movs	r0, #1
   10634:	4770      	bx	lr
   10636:	bf00      	nop
   10638:	20001efc 	.word	0x20001efc

0001063c <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
   1063c:	7983      	ldrb	r3, [r0, #6]
   1063e:	2b02      	cmp	r3, #2
   10640:	d010      	beq.n	10664 <_ZN9ClearCore7CcioPin5StateEv+0x28>
   10642:	2b04      	cmp	r3, #4
   10644:	d10c      	bne.n	10660 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
   10646:	4b0b      	ldr	r3, [pc, #44]	; (10674 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
   10648:	681b      	ldr	r3, [r3, #0]
   1064a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1064e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
   10652:	4002      	ands	r2, r0
   10654:	400b      	ands	r3, r1
   10656:	4313      	orrs	r3, r2
   10658:	bf14      	ite	ne
   1065a:	2001      	movne	r0, #1
   1065c:	2000      	moveq	r0, #0
            break;
   1065e:	4770      	bx	lr
    switch (m_mode) {
   10660:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
   10662:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
   10664:	4b03      	ldr	r3, [pc, #12]	; (10674 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
   10666:	681b      	ldr	r3, [r3, #0]
   10668:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1066c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
   10670:	e7ef      	b.n	10652 <_ZN9ClearCore7CcioPin5StateEv+0x16>
   10672:	bf00      	nop
   10674:	20001efc 	.word	0x20001efc

00010678 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
   10678:	4b06      	ldr	r3, [pc, #24]	; (10694 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
   1067a:	681b      	ldr	r3, [r3, #0]
   1067c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   10680:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
   10684:	4002      	ands	r2, r0
   10686:	400b      	ands	r3, r1
   10688:	4313      	orrs	r3, r2
}
   1068a:	bf14      	ite	ne
   1068c:	2001      	movne	r0, #1
   1068e:	2000      	moveq	r0, #0
   10690:	4770      	bx	lr
   10692:	bf00      	nop
   10694:	20001efc 	.word	0x20001efc

00010698 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
   10698:	7983      	ldrb	r3, [r0, #6]
   1069a:	2b04      	cmp	r3, #4
   1069c:	d11c      	bne.n	106d8 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
   1069e:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
   106a0:	4b0e      	ldr	r3, [pc, #56]	; (106dc <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
   106a2:	b969      	cbnz	r1, 106c0 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
   106a4:	6819      	ldr	r1, [r3, #0]
   106a6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   106aa:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
   106ae:	ea24 0202 	bic.w	r2, r4, r2
   106b2:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
   106b6:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
   106b8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
   106bc:	bc30      	pop	{r4, r5}
   106be:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
   106c0:	6819      	ldr	r1, [r3, #0]
   106c2:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
   106c6:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
   106ca:	4322      	orrs	r2, r4
   106cc:	432b      	orrs	r3, r5
   106ce:	2001      	movs	r0, #1
   106d0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
   106d4:	bc30      	pop	{r4, r5}
   106d6:	4770      	bx	lr
    bool success = false;
   106d8:	2000      	movs	r0, #0
   106da:	4770      	bx	lr
   106dc:	20001efc 	.word	0x20001efc

000106e0 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
   106e0:	b5d0      	push	{r4, r6, r7, lr}
   106e2:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
   106e4:	f7fe fca6 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
   106e8:	4b08      	ldr	r3, [pc, #32]	; (1070c <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
   106ea:	4909      	ldr	r1, [pc, #36]	; (10710 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
   106ec:	6023      	str	r3, [r4, #0]
   106ee:	2600      	movs	r6, #0
   106f0:	2300      	movs	r3, #0
   106f2:	2700      	movs	r7, #0
   106f4:	220c      	movs	r2, #12
   106f6:	e9c4 6702 	strd	r6, r7, [r4, #8]
   106fa:	6121      	str	r1, [r4, #16]
   106fc:	6162      	str	r2, [r4, #20]
   106fe:	61a3      	str	r3, [r4, #24]
   10700:	61e3      	str	r3, [r4, #28]
   10702:	6223      	str	r3, [r4, #32]
   10704:	6263      	str	r3, [r4, #36]	; 0x24
   10706:	4620      	mov	r0, r4
   10708:	bdd0      	pop	{r4, r6, r7, pc}
   1070a:	bf00      	nop
   1070c:	00024010 	.word	0x00024010
   10710:	00010003 	.word	0x00010003

00010714 <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
   10714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
   10716:	4e14      	ldr	r6, [pc, #80]	; (10768 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
   10718:	6834      	ldr	r4, [r6, #0]
   1071a:	f014 0401 	ands.w	r4, r4, #1
   1071e:	d002      	beq.n	10726 <_ZN9ClearCore12InputManager8InstanceEv+0x12>
   10720:	4b12      	ldr	r3, [pc, #72]	; (1076c <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
   10722:	6818      	ldr	r0, [r3, #0]
   10724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10726:	2080      	movs	r0, #128	; 0x80
   10728:	f003 fbea 	bl	13f00 <_Znwj>
   1072c:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
   1072e:	2701      	movs	r7, #1
   10730:	2240      	movs	r2, #64	; 0x40
   10732:	602c      	str	r4, [r5, #0]
   10734:	606c      	str	r4, [r5, #4]
   10736:	60ac      	str	r4, [r5, #8]
   10738:	60ec      	str	r4, [r5, #12]
   1073a:	612c      	str	r4, [r5, #16]
   1073c:	616c      	str	r4, [r5, #20]
   1073e:	4621      	mov	r1, r4
   10740:	61ac      	str	r4, [r5, #24]
   10742:	61ec      	str	r4, [r5, #28]
   10744:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
   10746:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
   10748:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
   1074a:	62ec      	str	r4, [r5, #44]	; 0x2c
   1074c:	632c      	str	r4, [r5, #48]	; 0x30
   1074e:	636c      	str	r4, [r5, #52]	; 0x34
   10750:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
   10754:	303c      	adds	r0, #60	; 0x3c
   10756:	f00e fc71 	bl	1f03c <memset>
    static InputManager *instance = new InputManager();
   1075a:	4b04      	ldr	r3, [pc, #16]	; (1076c <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
   1075c:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
   10760:	6037      	str	r7, [r6, #0]
   10762:	601d      	str	r5, [r3, #0]
   10764:	4628      	mov	r0, r5
}
   10766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10768:	20001f04 	.word	0x20001f04
   1076c:	20001f0c 	.word	0x20001f0c

00010770 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
   10770:	4902      	ldr	r1, [pc, #8]	; (1077c <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
   10772:	4a03      	ldr	r2, [pc, #12]	; (10780 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
   10774:	4b03      	ldr	r3, [pc, #12]	; (10784 <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
   10776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
   1077a:	4770      	bx	lr
   1077c:	41008020 	.word	0x41008020
   10780:	410080a0 	.word	0x410080a0
   10784:	41008120 	.word	0x41008120

00010788 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
   10788:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
   1078a:	b2cc      	uxtb	r4, r1
   1078c:	2c0f      	cmp	r4, #15
   1078e:	d82e      	bhi.n	107ee <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
   10790:	b1b2      	cbz	r2, 107c0 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
   10792:	bb6b      	cbnz	r3, 107f0 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
   10794:	2301      	movs	r3, #1
   10796:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
   1079a:	f100 0334 	add.w	r3, r0, #52	; 0x34
   1079e:	f3bf 8f5b 	dmb	ish
   107a2:	e853 2f00 	ldrex	r2, [r3]
   107a6:	430a      	orrs	r2, r1
   107a8:	e843 2400 	strex	r4, r2, [r3]
   107ac:	2c00      	cmp	r4, #0
   107ae:	d1f8      	bne.n	107a2 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
   107b0:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
   107b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   107b8:	b1cb      	cbz	r3, 107ee <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
   107ba:	4b10      	ldr	r3, [pc, #64]	; (107fc <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
   107bc:	6119      	str	r1, [r3, #16]
   107be:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
   107c0:	2301      	movs	r3, #1
   107c2:	fa03 f101 	lsl.w	r1, r3, r1
   107c6:	43ca      	mvns	r2, r1
   107c8:	f100 0334 	add.w	r3, r0, #52	; 0x34
   107cc:	f3bf 8f5b 	dmb	ish
   107d0:	e853 4f00 	ldrex	r4, [r3]
   107d4:	4014      	ands	r4, r2
   107d6:	e843 4e00 	strex	lr, r4, [r3]
   107da:	f1be 0f00 	cmp.w	lr, #0
   107de:	d1f7      	bne.n	107d0 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
   107e0:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
   107e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   107e8:	b10b      	cbz	r3, 107ee <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
   107ea:	4b04      	ldr	r3, [pc, #16]	; (107fc <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
   107ec:	60d9      	str	r1, [r3, #12]
   107ee:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
   107f0:	2201      	movs	r2, #1
   107f2:	4b02      	ldr	r3, [pc, #8]	; (107fc <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
   107f4:	fa02 f101 	lsl.w	r1, r2, r1
   107f8:	6159      	str	r1, [r3, #20]
   107fa:	e7ce      	b.n	1079a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
   107fc:	40002800 	.word	0x40002800

00010800 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
   10800:	290f      	cmp	r1, #15
   10802:	dc14      	bgt.n	1082e <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
   10804:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   10808:	40cb      	lsrs	r3, r1
   1080a:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
   1080e:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
   10812:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
   10814:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
   10818:	d10a      	bne.n	10830 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
   1081a:	4a0f      	ldr	r2, [pc, #60]	; (10858 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
   1081c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
   10820:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
   10822:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
   10824:	b113      	cbz	r3, 1082c <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
   10826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
   1082a:	4718      	bx	r3
   1082c:	bd10      	pop	{r4, pc}
   1082e:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
   10830:	43dc      	mvns	r4, r3
   10832:	f100 0234 	add.w	r2, r0, #52	; 0x34
   10836:	f3bf 8f5b 	dmb	ish
   1083a:	e852 ef00 	ldrex	lr, [r2]
   1083e:	ea0e 0e04 	and.w	lr, lr, r4
   10842:	e842 ec00 	strex	ip, lr, [r2]
   10846:	f1bc 0f00 	cmp.w	ip, #0
   1084a:	d1f6      	bne.n	1083a <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
   1084c:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
   10850:	4a01      	ldr	r2, [pc, #4]	; (10858 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
   10852:	60d3      	str	r3, [r2, #12]
   10854:	e7e1      	b.n	1081a <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
   10856:	bf00      	nop
   10858:	40002800 	.word	0x40002800

0001085c <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   1085c:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
   1085e:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   10860:	681b      	ldr	r3, [r3, #0]
   10862:	60c3      	str	r3, [r0, #12]
   10864:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   10866:	404b      	eors	r3, r1
   10868:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   1086a:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
   1086c:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   1086e:	6881      	ldr	r1, [r0, #8]
   10870:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   10872:	4053      	eors	r3, r2
   10874:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   10876:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
   10878:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   1087a:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   1087c:	4053      	eors	r3, r2
   1087e:	6203      	str	r3, [r0, #32]
   10880:	4770      	bx	lr
   10882:	bf00      	nop

00010884 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
   10884:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
   10886:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10888:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
   1088a:	f3bf 8f5b 	dmb	ish
   1088e:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
   10892:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
   10896:	e852 1f00 	ldrex	r1, [r2]
   1089a:	4319      	orrs	r1, r3
   1089c:	e842 1e00 	strex	lr, r1, [r2]
   108a0:	f1be 0f00 	cmp.w	lr, #0
   108a4:	d1f7      	bne.n	10896 <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
   108a6:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
   108aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
   108ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
   108ae:	f3bf 8f5b 	dmb	ish
   108b2:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
   108b6:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
   108ba:	e852 1f00 	ldrex	r1, [r2]
   108be:	4319      	orrs	r1, r3
   108c0:	e842 1e00 	strex	lr, r1, [r2]
   108c4:	f1be 0f00 	cmp.w	lr, #0
   108c8:	d1f7      	bne.n	108ba <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
   108ca:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
   108ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
   108d0:	6283      	str	r3, [r0, #40]	; 0x28
   108d2:	f85d fb04 	ldr.w	pc, [sp], #4
   108d6:	bf00      	nop

000108d8 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
   108d8:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
   108da:	f7ff ff1b 	bl	10714 <_ZN9ClearCore12InputManager8InstanceEv>
   108de:	4b01      	ldr	r3, [pc, #4]	; (108e4 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
   108e0:	6018      	str	r0, [r3, #0]
   108e2:	bd08      	pop	{r3, pc}
   108e4:	20001f08 	.word	0x20001f08

000108e8 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   108e8:	b530      	push	{r4, r5, lr}
   108ea:	b083      	sub	sp, #12
   108ec:	9d06      	ldr	r5, [sp, #24]
   108ee:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
   108f2:	9500      	str	r5, [sp, #0]
   108f4:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   108f6:	4604      	mov	r4, r0
      m_errorCode(0) {
   108f8:	2500      	movs	r5, #0
   108fa:	f000 ffbb 	bl	11874 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   108fe:	4b09      	ldr	r3, [pc, #36]	; (10924 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
   10900:	6023      	str	r3, [r4, #0]
   10902:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
   10906:	4620      	mov	r0, r4
   10908:	2101      	movs	r1, #1
   1090a:	f001 f811 	bl	11930 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
   1090e:	462a      	mov	r2, r5
   10910:	4629      	mov	r1, r5
   10912:	4620      	mov	r0, r4
   10914:	f001 f852 	bl	119bc <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
   10918:	4620      	mov	r0, r4
   1091a:	f000 ff9f 	bl	1185c <_ZN9ClearCore10SerialBase8PortOpenEv>
}
   1091e:	4620      	mov	r0, r4
   10920:	b003      	add	sp, #12
   10922:	bd30      	pop	{r4, r5, pc}
   10924:	00023954 	.word	0x00023954

00010928 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
   10928:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   1092c:	4770      	bx	lr
   1092e:	bf00      	nop

00010930 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
   10930:	2300      	movs	r3, #0
    m_outTail = 0;
   10932:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10936:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   1093a:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
   1093e:	4770      	bx	lr

00010940 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10940:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
   10942:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10944:	2104      	movs	r1, #4
    m_inTail = 0;
   10946:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
   1094a:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
   1094c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10950:	7591      	strb	r1, [r2, #22]
   10952:	4770      	bx	lr

00010954 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
   10954:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
   10958:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1095c:	4291      	cmp	r1, r2
   1095e:	d012      	beq.n	10986 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
   10960:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
   10962:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
   10966:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1096a:	6904      	ldr	r4, [r0, #16]
   1096c:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   1096e:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
   10970:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10972:	2504      	movs	r5, #4
   10974:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
   10978:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
   1097c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10980:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
   10982:	bc30      	pop	{r4, r5}
   10984:	4770      	bx	lr
        return SerialBase::EOB;
   10986:	f04f 30ff 	mov.w	r0, #4294967295
   1098a:	4770      	bx	lr

0001098c <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
   1098c:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   10990:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   10994:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
   10996:	bf1d      	ittte	ne
   10998:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
   1099c:	3318      	addne	r3, #24
   1099e:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
   109a2:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
   109a6:	4770      	bx	lr

000109a8 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
   109a8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   109ac:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
   109b0:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
   109b2:	bf48      	it	mi
   109b4:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
   109b6:	4770      	bx	lr

000109b8 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
   109b8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   109bc:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
   109c0:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
   109c2:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
   109c4:	bf48      	it	mi
   109c6:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
   109c8:	4770      	bx	lr
   109ca:	bf00      	nop

000109cc <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
   109cc:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
   109ce:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   109d2:	b1b8      	cbz	r0, 10a04 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
   109d4:	79d3      	ldrb	r3, [r2, #7]
   109d6:	2b01      	cmp	r3, #1
   109d8:	d015      	beq.n	10a06 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
   109da:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
   109dc:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
   109e0:	3401      	adds	r4, #1
   109e2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
   109e6:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   109ea:	429c      	cmp	r4, r3
   109ec:	d0fb      	beq.n	109e6 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
   109ee:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   109f2:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
   109f4:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   109f6:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
   109f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
   109fc:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10a00:	75ae      	strb	r6, [r5, #22]
}
   10a02:	bc70      	pop	{r4, r5, r6}
   10a04:	4770      	bx	lr
        return false;
   10a06:	2000      	movs	r0, #0
   10a08:	4770      	bx	lr
   10a0a:	bf00      	nop

00010a0c <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
   10a0c:	79c3      	ldrb	r3, [r0, #7]
   10a0e:	b113      	cbz	r3, 10a16 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
   10a10:	2b01      	cmp	r3, #1
   10a12:	d00e      	beq.n	10a32 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
   10a14:	4770      	bx	lr
        while (m_outHead != m_outTail) {
   10a16:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   10a1a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   10a1e:	429a      	cmp	r2, r3
   10a20:	d1f9      	bne.n	10a16 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10a22:	6902      	ldr	r2, [r0, #16]
   10a24:	7e13      	ldrb	r3, [r2, #24]
   10a26:	07d8      	lsls	r0, r3, #31
   10a28:	d4f4      	bmi.n	10a14 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10a2a:	7e13      	ldrb	r3, [r2, #24]
   10a2c:	0799      	lsls	r1, r3, #30
   10a2e:	d5fc      	bpl.n	10a2a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
   10a30:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10a32:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   10a36:	2b07      	cmp	r3, #7
   10a38:	d0ec      	beq.n	10a14 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
   10a3a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   10a3e:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
   10a40:	b510      	push	{r4, lr}
   10a42:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10a44:	d005      	beq.n	10a52 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
   10a46:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10a4a:	b113      	cbz	r3, 10a52 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
   10a4c:	79e3      	ldrb	r3, [r4, #7]
   10a4e:	2b01      	cmp	r3, #1
   10a50:	d000      	beq.n	10a54 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
   10a52:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10a54:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10a58:	f7fe feda 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10a5c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10a5e:	079b      	lsls	r3, r3, #30
   10a60:	d4f1      	bmi.n	10a46 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
   10a62:	e7f6      	b.n	10a52 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

00010a64 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a68:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
   10a6a:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a6c:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10a6e:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a70:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a74:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a76:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10a7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10a7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a82:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a84:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10a88:	f36f 0100 	bfc	r1, #0, #1
   10a8c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10a90:	6813      	ldr	r3, [r2, #0]
   10a92:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10a94:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a96:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10a9a:	d503      	bpl.n	10aa4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10a9c:	6813      	ldr	r3, [r2, #0]
   10a9e:	f36f 0341 	bfc	r3, #1, #1
   10aa2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10aa4:	69d3      	ldr	r3, [r2, #28]
   10aa6:	f013 0302 	ands.w	r3, r3, #2
   10aaa:	d1fb      	bne.n	10aa4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
   10aac:	6822      	ldr	r2, [r4, #0]
   10aae:	483a      	ldr	r0, [pc, #232]	; (10b98 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
   10ab0:	6811      	ldr	r1, [r2, #0]
   10ab2:	4281      	cmp	r1, r0
   10ab4:	d165      	bne.n	10b82 <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
   10ab6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10aba:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10abe:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10ac2:	6853      	ldr	r3, [r2, #4]
   10ac4:	4a35      	ldr	r2, [pc, #212]	; (10b9c <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   10ac6:	4293      	cmp	r3, r2
   10ac8:	d162      	bne.n	10b90 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10aca:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   10acc:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10ace:	2204      	movs	r2, #4
    m_inTail = 0;
   10ad0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10ad4:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10ad6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10ada:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   10adc:	79e0      	ldrb	r0, [r4, #7]
   10ade:	2801      	cmp	r0, #1
   10ae0:	d124      	bne.n	10b2c <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10ae2:	4b2f      	ldr	r3, [pc, #188]	; (10ba0 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
   10ae4:	443b      	add	r3, r7
   10ae6:	fbb3 f3f7 	udiv	r3, r3, r7
   10aea:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
   10aec:	2bff      	cmp	r3, #255	; 0xff
   10aee:	bf92      	itee	ls
   10af0:	b2db      	uxtbls	r3, r3
   10af2:	23ff      	movhi	r3, #255	; 0xff
                success = false;
   10af4:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10af6:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10af8:	b1b6      	cbz	r6, 10b28 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10afa:	682b      	ldr	r3, [r5, #0]
   10afc:	f043 0302 	orr.w	r3, r3, #2
   10b00:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10b02:	69eb      	ldr	r3, [r5, #28]
   10b04:	079b      	lsls	r3, r3, #30
   10b06:	d4fc      	bmi.n	10b02 <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b08:	6a22      	ldr	r2, [r4, #32]
   10b0a:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10b0e:	7893      	ldrb	r3, [r2, #2]
   10b10:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10b14:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10b18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10b1c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10b20:	f042 0201 	orr.w	r2, r2, #1
   10b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   10b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10b2c:	4638      	mov	r0, r7
   10b2e:	f00b fd3f 	bl	1c5b0 <__aeabi_ui2d>
   10b32:	2200      	movs	r2, #0
   10b34:	4b1b      	ldr	r3, [pc, #108]	; (10ba4 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   10b36:	f00b fdb1 	bl	1c69c <__aeabi_dmul>
   10b3a:	4b1b      	ldr	r3, [pc, #108]	; (10ba8 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   10b3c:	4680      	mov	r8, r0
   10b3e:	6818      	ldr	r0, [r3, #0]
   10b40:	4689      	mov	r9, r1
   10b42:	f00b fd35 	bl	1c5b0 <__aeabi_ui2d>
   10b46:	4602      	mov	r2, r0
   10b48:	460b      	mov	r3, r1
   10b4a:	4640      	mov	r0, r8
   10b4c:	4649      	mov	r1, r9
   10b4e:	f00b fecf 	bl	1c8f0 <__aeabi_ddiv>
   10b52:	4602      	mov	r2, r0
   10b54:	460b      	mov	r3, r1
   10b56:	2000      	movs	r0, #0
   10b58:	4914      	ldr	r1, [pc, #80]	; (10bac <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   10b5a:	f00b fbeb 	bl	1c334 <__aeabi_dsub>
   10b5e:	2200      	movs	r2, #0
   10b60:	4b13      	ldr	r3, [pc, #76]	; (10bb0 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   10b62:	f00b fd9b 	bl	1c69c <__aeabi_dmul>
   10b66:	f00c f87b 	bl	1cc60 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10b6a:	f00b fd43 	bl	1c5f4 <__aeabi_f2d>
   10b6e:	2200      	movs	r2, #0
   10b70:	4b10      	ldr	r3, [pc, #64]	; (10bb4 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   10b72:	f00b fbe1 	bl	1c338 <__adddf3>
   10b76:	f00c f853 	bl	1cc20 <__aeabi_d2uiz>
   10b7a:	b280      	uxth	r0, r0
   10b7c:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   10b7e:	2001      	movs	r0, #1
            break;
   10b80:	e7ba      	b.n	10af8 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   10b82:	4620      	mov	r0, r4
   10b84:	4788      	blx	r1
   10b86:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   10b88:	6853      	ldr	r3, [r2, #4]
   10b8a:	4a04      	ldr	r2, [pc, #16]	; (10b9c <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   10b8c:	4293      	cmp	r3, r2
   10b8e:	d09c      	beq.n	10aca <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   10b90:	4620      	mov	r0, r4
   10b92:	4798      	blx	r3
   10b94:	6925      	ldr	r5, [r4, #16]
   10b96:	e7a1      	b.n	10adc <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   10b98:	00010931 	.word	0x00010931
   10b9c:	00010941 	.word	0x00010941
   10ba0:	004c4b3f 	.word	0x004c4b3f
   10ba4:	40300000 	.word	0x40300000
   10ba8:	200000e0 	.word	0x200000e0
   10bac:	3ff00000 	.word	0x3ff00000
   10bb0:	40f00000 	.word	0x40f00000
   10bb4:	3fe00000 	.word	0x3fe00000

00010bb8 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   10bb8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   10bbc:	b903      	cbnz	r3, 10bc0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   10bbe:	4770      	bx	lr
void SerialBase::PortClose() {
   10bc0:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   10bc2:	6805      	ldr	r5, [r0, #0]
   10bc4:	4a3e      	ldr	r2, [pc, #248]	; (10cc0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   10bc6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   10bc8:	4293      	cmp	r3, r2
   10bca:	4604      	mov	r4, r0
   10bcc:	d157      	bne.n	10c7e <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   10bce:	79c3      	ldrb	r3, [r0, #7]
   10bd0:	2b00      	cmp	r3, #0
   10bd2:	d03f      	beq.n	10c54 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   10bd4:	2b01      	cmp	r3, #1
   10bd6:	d056      	beq.n	10c86 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   10bd8:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10bda:	69a0      	ldr	r0, [r4, #24]
   10bdc:	4939      	ldr	r1, [pc, #228]	; (10cc4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   10bde:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10be2:	7886      	ldrb	r6, [r0, #2]
   10be4:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10be8:	2001      	movs	r0, #1
   10bea:	40b0      	lsls	r0, r6
   10bec:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10bee:	6a20      	ldr	r0, [r4, #32]
   10bf0:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10bf4:	7880      	ldrb	r0, [r0, #2]
   10bf6:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10bfa:	4403      	add	r3, r0
   10bfc:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10c00:	f36f 0100 	bfc	r1, #0, #1
   10c04:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10c08:	6813      	ldr	r3, [r2, #0]
   10c0a:	079b      	lsls	r3, r3, #30
   10c0c:	d503      	bpl.n	10c16 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10c0e:	6813      	ldr	r3, [r2, #0]
   10c10:	f36f 0341 	bfc	r3, #1, #1
   10c14:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10c16:	69d3      	ldr	r3, [r2, #28]
   10c18:	f013 0302 	ands.w	r3, r3, #2
   10c1c:	d1fb      	bne.n	10c16 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   10c1e:	682a      	ldr	r2, [r5, #0]
   10c20:	4929      	ldr	r1, [pc, #164]	; (10cc8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   10c22:	428a      	cmp	r2, r1
   10c24:	d124      	bne.n	10c70 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   10c26:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10c2a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10c2e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10c32:	686b      	ldr	r3, [r5, #4]
   10c34:	4a25      	ldr	r2, [pc, #148]	; (10ccc <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   10c36:	4293      	cmp	r3, r2
   10c38:	d11e      	bne.n	10c78 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10c3a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10c3c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10c3e:	2104      	movs	r1, #4
    m_inTail = 0;
   10c40:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10c44:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10c46:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10c4a:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   10c4c:	2300      	movs	r3, #0
   10c4e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   10c52:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   10c54:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10c58:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10c5c:	429a      	cmp	r2, r3
   10c5e:	d1f9      	bne.n	10c54 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10c60:	6922      	ldr	r2, [r4, #16]
   10c62:	7e13      	ldrb	r3, [r2, #24]
   10c64:	07d8      	lsls	r0, r3, #31
   10c66:	d4b8      	bmi.n	10bda <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10c68:	7e13      	ldrb	r3, [r2, #24]
   10c6a:	0799      	lsls	r1, r3, #30
   10c6c:	d5fc      	bpl.n	10c68 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   10c6e:	e7b4      	b.n	10bda <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   10c70:	4620      	mov	r0, r4
   10c72:	4790      	blx	r2
   10c74:	6825      	ldr	r5, [r4, #0]
   10c76:	e7dc      	b.n	10c32 <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   10c78:	4620      	mov	r0, r4
   10c7a:	4798      	blx	r3
   10c7c:	e7e6      	b.n	10c4c <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   10c7e:	4798      	blx	r3
   10c80:	6922      	ldr	r2, [r4, #16]
   10c82:	6825      	ldr	r5, [r4, #0]
   10c84:	e7a9      	b.n	10bda <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10c86:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   10c8a:	2807      	cmp	r0, #7
   10c8c:	d0a4      	beq.n	10bd8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   10c8e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10c92:	2b07      	cmp	r3, #7
   10c94:	d0a0      	beq.n	10bd8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10c96:	f7fe fdbb 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10c9a:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10c9c:	079a      	lsls	r2, r3, #30
   10c9e:	d5ef      	bpl.n	10c80 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10ca0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	d0eb      	beq.n	10c80 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10ca8:	79e3      	ldrb	r3, [r4, #7]
   10caa:	2b01      	cmp	r3, #1
   10cac:	d1e8      	bne.n	10c80 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10cae:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10cb2:	f7fe fdad 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10cb6:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10cb8:	079a      	lsls	r2, r3, #30
   10cba:	d4f1      	bmi.n	10ca0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   10cbc:	e7e0      	b.n	10c80 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10cbe:	bf00      	nop
   10cc0:	00010a0d 	.word	0x00010a0d
   10cc4:	41008000 	.word	0x41008000
   10cc8:	00010931 	.word	0x00010931
   10ccc:	00010941 	.word	0x00010941

00010cd0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   10cd0:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   10cd2:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   10cd4:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   10cd6:	2b01      	cmp	r3, #1
   10cd8:	d101      	bne.n	10cde <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   10cda:	2000      	movs	r0, #0
   10cdc:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10cde:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ce0:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ce2:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10ce6:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ce8:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10cea:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   10cee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10cf2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10cf6:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10cfa:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10cfe:	f36f 0100 	bfc	r1, #0, #1
   10d02:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10d06:	6813      	ldr	r3, [r2, #0]
   10d08:	0799      	lsls	r1, r3, #30
   10d0a:	d503      	bpl.n	10d14 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10d0c:	6813      	ldr	r3, [r2, #0]
   10d0e:	f36f 0341 	bfc	r3, #1, #1
   10d12:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10d14:	69d3      	ldr	r3, [r2, #28]
   10d16:	f013 0302 	ands.w	r3, r3, #2
   10d1a:	d1fb      	bne.n	10d14 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   10d1c:	6802      	ldr	r2, [r0, #0]
   10d1e:	4604      	mov	r4, r0
   10d20:	6811      	ldr	r1, [r2, #0]
   10d22:	4825      	ldr	r0, [pc, #148]	; (10db8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   10d24:	4281      	cmp	r1, r0
   10d26:	d142      	bne.n	10dae <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10d28:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10d2c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10d30:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10d34:	6853      	ldr	r3, [r2, #4]
   10d36:	4a21      	ldr	r2, [pc, #132]	; (10dbc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10d38:	4293      	cmp	r3, r2
   10d3a:	d134      	bne.n	10da6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10d3c:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10d3e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10d40:	2104      	movs	r1, #4
    m_inTail = 0;
   10d42:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10d46:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10d48:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10d4c:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   10d4e:	7923      	ldrb	r3, [r4, #4]
   10d50:	2b02      	cmp	r3, #2
   10d52:	d023      	beq.n	10d9c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   10d54:	6811      	ldr	r1, [r2, #0]
   10d56:	2001      	movs	r0, #1
   10d58:	f360 611b 	bfi	r1, r0, #24, #4
   10d5c:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   10d5e:	6851      	ldr	r1, [r2, #4]
   10d60:	f363 314d 	bfi	r1, r3, #13, #1
   10d64:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   10d66:	b1bd      	cbz	r5, 10d98 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10d68:	6813      	ldr	r3, [r2, #0]
   10d6a:	f043 0302 	orr.w	r3, r3, #2
   10d6e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10d70:	69d3      	ldr	r3, [r2, #28]
   10d72:	079b      	lsls	r3, r3, #30
   10d74:	d4fc      	bmi.n	10d70 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10d76:	6a22      	ldr	r2, [r4, #32]
   10d78:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10d7c:	7893      	ldrb	r3, [r2, #2]
   10d7e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10d82:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10d8a:	2001      	movs	r0, #1
   10d8c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d90:	4302      	orrs	r2, r0
   10d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10d96:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   10d98:	2001      	movs	r0, #1
}
   10d9a:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   10d9c:	6813      	ldr	r3, [r2, #0]
   10d9e:	f36f 631b 	bfc	r3, #24, #4
   10da2:	6013      	str	r3, [r2, #0]
   10da4:	e7df      	b.n	10d66 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   10da6:	4620      	mov	r0, r4
   10da8:	4798      	blx	r3
   10daa:	6922      	ldr	r2, [r4, #16]
   10dac:	e7cf      	b.n	10d4e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   10dae:	4620      	mov	r0, r4
   10db0:	4788      	blx	r1
   10db2:	6822      	ldr	r2, [r4, #0]
   10db4:	e7be      	b.n	10d34 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   10db6:	bf00      	nop
   10db8:	00010931 	.word	0x00010931
   10dbc:	00010941 	.word	0x00010941

00010dc0 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   10dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   10dc2:	1f4b      	subs	r3, r1, #5
   10dc4:	2b04      	cmp	r3, #4
   10dc6:	d85d      	bhi.n	10e84 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10dc8:	79c3      	ldrb	r3, [r0, #7]
   10dca:	2b01      	cmp	r3, #1
   10dcc:	d056      	beq.n	10e7c <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10dce:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   10dd0:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10dd2:	f992 4001 	ldrsb.w	r4, [r2, #1]
   10dd6:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10dd8:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10dda:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   10dde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10de2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10de6:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10de8:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   10dec:	f36f 0400 	bfc	r4, #0, #1
   10df0:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10df4:	6813      	ldr	r3, [r2, #0]
   10df6:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10df8:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10dfc:	d503      	bpl.n	10e06 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10dfe:	6813      	ldr	r3, [r2, #0]
   10e00:	f36f 0341 	bfc	r3, #1, #1
   10e04:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10e06:	69d3      	ldr	r3, [r2, #28]
   10e08:	f013 0302 	ands.w	r3, r3, #2
   10e0c:	d1fb      	bne.n	10e06 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   10e0e:	6802      	ldr	r2, [r0, #0]
   10e10:	460f      	mov	r7, r1
   10e12:	6816      	ldr	r6, [r2, #0]
   10e14:	4921      	ldr	r1, [pc, #132]	; (10e9c <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   10e16:	428e      	cmp	r6, r1
   10e18:	4604      	mov	r4, r0
   10e1a:	d13b      	bne.n	10e94 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   10e1c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10e20:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10e24:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10e28:	6853      	ldr	r3, [r2, #4]
   10e2a:	4a1d      	ldr	r2, [pc, #116]	; (10ea0 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   10e2c:	4293      	cmp	r3, r2
   10e2e:	d12d      	bne.n	10e8c <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e30:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10e32:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e34:	2104      	movs	r1, #4
    m_inTail = 0;
   10e36:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10e3a:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10e3c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e40:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   10e42:	6853      	ldr	r3, [r2, #4]
   10e44:	f367 0302 	bfi	r3, r7, #0, #3
   10e48:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10e4a:	b1ed      	cbz	r5, 10e88 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10e4c:	6813      	ldr	r3, [r2, #0]
   10e4e:	f043 0302 	orr.w	r3, r3, #2
   10e52:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10e54:	69d3      	ldr	r3, [r2, #28]
   10e56:	079b      	lsls	r3, r3, #30
   10e58:	d4fc      	bmi.n	10e54 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10e5a:	6a22      	ldr	r2, [r4, #32]
   10e5c:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10e60:	7893      	ldrb	r3, [r2, #2]
   10e62:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10e66:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10e6e:	2001      	movs	r0, #1
   10e70:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e74:	4302      	orrs	r2, r0
   10e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10e7c:	f1a1 0308 	sub.w	r3, r1, #8
   10e80:	2b01      	cmp	r3, #1
   10e82:	d9a4      	bls.n	10dce <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   10e84:	2000      	movs	r0, #0
   10e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   10e88:	2001      	movs	r0, #1
}
   10e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   10e8c:	4620      	mov	r0, r4
   10e8e:	4798      	blx	r3
   10e90:	6922      	ldr	r2, [r4, #16]
   10e92:	e7d6      	b.n	10e42 <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   10e94:	47b0      	blx	r6
   10e96:	6822      	ldr	r2, [r4, #0]
   10e98:	e7c6      	b.n	10e28 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   10e9a:	bf00      	nop
   10e9c:	00010931 	.word	0x00010931
   10ea0:	00010941 	.word	0x00010941

00010ea4 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   10ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   10ea6:	1e4c      	subs	r4, r1, #1
   10ea8:	b2e4      	uxtb	r4, r4
   10eaa:	2c01      	cmp	r4, #1
   10eac:	d901      	bls.n	10eb2 <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   10eae:	2000      	movs	r0, #0
}
   10eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   10eb2:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   10eb4:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   10eb6:	b10d      	cbz	r5, 10ebc <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   10eb8:	2001      	movs	r0, #1
   10eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ebc:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ebe:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ec0:	f991 7001 	ldrsb.w	r7, [r1, #1]
   10ec4:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ec6:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ec8:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   10ecc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ed0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ed4:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ed8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10edc:	f365 0100 	bfi	r1, r5, #0, #1
   10ee0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10ee4:	6813      	ldr	r3, [r2, #0]
   10ee6:	0799      	lsls	r1, r3, #30
   10ee8:	d503      	bpl.n	10ef2 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10eea:	6813      	ldr	r3, [r2, #0]
   10eec:	f365 0341 	bfi	r3, r5, #1, #1
   10ef0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10ef2:	69d3      	ldr	r3, [r2, #28]
   10ef4:	f013 0302 	ands.w	r3, r3, #2
   10ef8:	d1fb      	bne.n	10ef2 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   10efa:	6802      	ldr	r2, [r0, #0]
   10efc:	4605      	mov	r5, r0
   10efe:	6811      	ldr	r1, [r2, #0]
   10f00:	481d      	ldr	r0, [pc, #116]	; (10f78 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   10f02:	4281      	cmp	r1, r0
   10f04:	d130      	bne.n	10f68 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   10f06:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10f0a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   10f0e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   10f12:	6853      	ldr	r3, [r2, #4]
   10f14:	4a19      	ldr	r2, [pc, #100]	; (10f7c <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   10f16:	4293      	cmp	r3, r2
   10f18:	d12a      	bne.n	10f70 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f1a:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   10f1c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f1e:	2104      	movs	r1, #4
    m_inTail = 0;
   10f20:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   10f24:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   10f26:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f2a:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   10f2c:	6853      	ldr	r3, [r2, #4]
   10f2e:	f364 1386 	bfi	r3, r4, #6, #1
   10f32:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10f34:	2e00      	cmp	r6, #0
   10f36:	d0bf      	beq.n	10eb8 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10f38:	6813      	ldr	r3, [r2, #0]
   10f3a:	f043 0302 	orr.w	r3, r3, #2
   10f3e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10f40:	69d3      	ldr	r3, [r2, #28]
   10f42:	079b      	lsls	r3, r3, #30
   10f44:	d4fc      	bmi.n	10f40 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10f46:	6a2a      	ldr	r2, [r5, #32]
   10f48:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10f4c:	7893      	ldrb	r3, [r2, #2]
   10f4e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10f52:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10f56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   10f5a:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10f5c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10f60:	4302      	orrs	r2, r0
   10f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10f68:	4628      	mov	r0, r5
   10f6a:	4788      	blx	r1
   10f6c:	682a      	ldr	r2, [r5, #0]
   10f6e:	e7d0      	b.n	10f12 <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   10f70:	4628      	mov	r0, r5
   10f72:	4798      	blx	r3
   10f74:	692a      	ldr	r2, [r5, #16]
   10f76:	e7d9      	b.n	10f2c <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   10f78:	00010931 	.word	0x00010931
   10f7c:	00010941 	.word	0x00010941

00010f80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   10f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   10f84:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   10f86:	682b      	ldr	r3, [r5, #0]
   10f88:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   10f8c:	b089      	sub	sp, #36	; 0x24
   10f8e:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   10f90:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   10f92:	69eb      	ldr	r3, [r5, #28]
   10f94:	f013 0301 	ands.w	r3, r3, #1
   10f98:	d1fb      	bne.n	10f92 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   10f9a:	6822      	ldr	r2, [r4, #0]
   10f9c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 11074 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   10fa0:	6811      	ldr	r1, [r2, #0]
   10fa2:	4541      	cmp	r1, r8
   10fa4:	d153      	bne.n	1104e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   10fa6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10faa:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10fae:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10fb2:	6853      	ldr	r3, [r2, #4]
   10fb4:	4a28      	ldr	r2, [pc, #160]	; (11058 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   10fb6:	4293      	cmp	r3, r2
   10fb8:	d122      	bne.n	11000 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   10fba:	2200      	movs	r2, #0
    m_inTail = 0;
   10fbc:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10fc0:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10fc2:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10fc4:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   10fc8:	4a24      	ldr	r2, [pc, #144]	; (1105c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10fca:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   10fcc:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10fce:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   10fd0:	d01c      	beq.n	1100c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   10fd2:	4a23      	ldr	r2, [pc, #140]	; (11060 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   10fd4:	4293      	cmp	r3, r2
   10fd6:	f000 8310 	beq.w	115fa <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   10fda:	4a22      	ldr	r2, [pc, #136]	; (11064 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   10fdc:	4293      	cmp	r3, r2
   10fde:	f000 8341 	beq.w	11664 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   10fe2:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   10fe6:	f000 839a 	beq.w	1171e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   10fea:	4a1f      	ldr	r2, [pc, #124]	; (11068 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   10fec:	4293      	cmp	r3, r2
   10fee:	d043      	beq.n	11078 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   10ff0:	4a1e      	ldr	r2, [pc, #120]	; (1106c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   10ff2:	4293      	cmp	r3, r2
   10ff4:	f000 8372 	beq.w	116dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   10ff8:	2000      	movs	r0, #0
}
   10ffa:	b009      	add	sp, #36	; 0x24
   10ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   11000:	4620      	mov	r0, r4
   11002:	4798      	blx	r3
   11004:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   11006:	4a15      	ldr	r2, [pc, #84]	; (1105c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   11008:	4293      	cmp	r3, r2
   1100a:	d1e2      	bne.n	10fd2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1100c:	2203      	movs	r2, #3
   1100e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   11012:	4a17      	ldr	r2, [pc, #92]	; (11070 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   11014:	9207      	str	r2, [sp, #28]
   11016:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   1101a:	9206      	str	r2, [sp, #24]
   1101c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11020:	9202      	str	r2, [sp, #8]
   11022:	2231      	movs	r2, #49	; 0x31
   11024:	9205      	str	r2, [sp, #20]
   11026:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1102a:	9201      	str	r2, [sp, #4]
   1102c:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1102e:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   11030:	2601      	movs	r6, #1
   11032:	f04f 092e 	mov.w	r9, #46	; 0x2e
   11036:	9204      	str	r2, [sp, #16]
   11038:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1103c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   11040:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   11042:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   11046:	f04f 0a07 	mov.w	sl, #7
   1104a:	9200      	str	r2, [sp, #0]
   1104c:	e02f      	b.n	110ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   1104e:	4620      	mov	r0, r4
   11050:	4788      	blx	r1
   11052:	6822      	ldr	r2, [r4, #0]
   11054:	e7ad      	b.n	10fb2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   11056:	bf00      	nop
   11058:	00010941 	.word	0x00010941
   1105c:	40003000 	.word	0x40003000
   11060:	41012000 	.word	0x41012000
   11064:	41014000 	.word	0x41014000
   11068:	43000400 	.word	0x43000400
   1106c:	43000c00 	.word	0x43000c00
   11070:	00200500 	.word	0x00200500
   11074:	00010931 	.word	0x00010931
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11078:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1107c:	9207      	str	r2, [sp, #28]
   1107e:	9206      	str	r2, [sp, #24]
   11080:	2220      	movs	r2, #32
   11082:	9202      	str	r2, [sp, #8]
   11084:	2245      	movs	r2, #69	; 0x45
   11086:	9205      	str	r2, [sp, #20]
   11088:	2210      	movs	r2, #16
   1108a:	9201      	str	r2, [sp, #4]
   1108c:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1108e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11090:	2602      	movs	r6, #2
   11092:	f04f 0942 	mov.w	r9, #66	; 0x42
   11096:	9204      	str	r2, [sp, #16]
   11098:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1109a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1109e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   110a2:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   110a4:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   110a8:	f04f 0a23 	mov.w	sl, #35	; 0x23
   110ac:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   110ae:	6a21      	ldr	r1, [r4, #32]
   110b0:	f991 2001 	ldrsb.w	r2, [r1, #1]
   110b4:	f891 b002 	ldrb.w	fp, [r1, #2]
   110b8:	01d2      	lsls	r2, r2, #7
   110ba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   110be:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   110c2:	f04f 0e01 	mov.w	lr, #1
   110c6:	fa0e fc0b 	lsl.w	ip, lr, fp
   110ca:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   110ce:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   110d2:	f894 c007 	ldrb.w	ip, [r4, #7]
   110d6:	45f4      	cmp	ip, lr
   110d8:	f040 819d 	bne.w	11416 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   110dc:	4dc4      	ldr	r5, [pc, #784]	; (113f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   110de:	4ac5      	ldr	r2, [pc, #788]	; (113f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   110e0:	f107 0e20 	add.w	lr, r7, #32
   110e4:	3620      	adds	r6, #32
   110e6:	9f00      	ldr	r7, [sp, #0]
   110e8:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   110ec:	9f01      	ldr	r7, [sp, #4]
   110ee:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   110f2:	9f02      	ldr	r7, [sp, #8]
   110f4:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   110f8:	f10a 0e20 	add.w	lr, sl, #32
   110fc:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   11100:	f36f 1586 	bfc	r5, #6, #1
   11104:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   11108:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   1110c:	066d      	lsls	r5, r5, #25
   1110e:	d4fb      	bmi.n	11108 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   11110:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   11114:	4eb7      	ldr	r6, [pc, #732]	; (113f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   11116:	f04f 0c07 	mov.w	ip, #7
   1111a:	f36c 0503 	bfi	r5, ip, #0, #4
   1111e:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   11122:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   11126:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1112a:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   1112e:	6875      	ldr	r5, [r6, #4]
   11130:	f015 051c 	ands.w	r5, r5, #28
   11134:	d1fb      	bne.n	1112e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   11136:	681a      	ldr	r2, [r3, #0]
   11138:	2603      	movs	r6, #3
   1113a:	f366 0284 	bfi	r2, r6, #2, #3
   1113e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   11140:	681a      	ldr	r2, [r3, #0]
   11142:	7a26      	ldrb	r6, [r4, #8]
   11144:	f366 725d 	bfi	r2, r6, #29, #1
   11148:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   1114a:	681a      	ldr	r2, [r3, #0]
   1114c:	7a66      	ldrb	r6, [r4, #9]
   1114e:	f366 721c 	bfi	r2, r6, #28, #1
   11152:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   11154:	681a      	ldr	r2, [r3, #0]
   11156:	f365 621b 	bfi	r2, r5, #24, #4
   1115a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   1115c:	6962      	ldr	r2, [r4, #20]
   1115e:	681e      	ldr	r6, [r3, #0]
   11160:	7a52      	ldrb	r2, [r2, #9]
   11162:	f362 5615 	bfi	r6, r2, #20, #2
   11166:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   11168:	7a49      	ldrb	r1, [r1, #9]
   1116a:	681a      	ldr	r2, [r3, #0]
   1116c:	2900      	cmp	r1, #0
   1116e:	bf0c      	ite	eq
   11170:	2100      	moveq	r1, #0
   11172:	2102      	movne	r1, #2
   11174:	f361 4211 	bfi	r2, r1, #16, #2
   11178:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   1117a:	685a      	ldr	r2, [r3, #4]
   1117c:	79a1      	ldrb	r1, [r4, #6]
   1117e:	f361 0202 	bfi	r2, r1, #0, #3
   11182:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   11184:	681a      	ldr	r2, [r3, #0]
   11186:	f365 729e 	bfi	r2, r5, #30, #1
   1118a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   1118c:	681a      	ldr	r2, [r3, #0]
   1118e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   11192:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   11194:	685a      	ldr	r2, [r3, #4]
   11196:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1119a:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   1119c:	685a      	ldr	r2, [r3, #4]
   1119e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   111a2:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   111a4:	69a3      	ldr	r3, [r4, #24]
   111a6:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   111aa:	789a      	ldrb	r2, [r3, #2]
   111ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
   111b0:	01db      	lsls	r3, r3, #7
   111b2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   111b6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   111ba:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   111be:	07d7      	lsls	r7, r2, #31
   111c0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   111c4:	bf4c      	ite	mi
   111c6:	f366 1507 	bfimi	r5, r6, #4, #4
   111ca:	f366 0503 	bfipl	r5, r6, #0, #4
   111ce:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   111d2:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   111d4:	2901      	cmp	r1, #1
   111d6:	f240 822f 	bls.w	11638 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   111da:	2902      	cmp	r1, #2
   111dc:	d10a      	bne.n	111f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   111de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   111e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   111e6:	4413      	add	r3, r2
   111e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   111ec:	f042 0201 	orr.w	r2, r2, #1
   111f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   111f4:	2807      	cmp	r0, #7
   111f6:	d031      	beq.n	1125c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   111f8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   111fc:	2b07      	cmp	r3, #7
   111fe:	d02d      	beq.n	1125c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   11200:	f7fe fb06 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   11204:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   11206:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   11208:	f023 0302 	bic.w	r3, r3, #2
   1120c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1120e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   11210:	6803      	ldr	r3, [r0, #0]
   11212:	2b01      	cmp	r3, #1
   11214:	d0fc      	beq.n	11210 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   11216:	9b06      	ldr	r3, [sp, #24]
   11218:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   1121a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   1121e:	f7fe fb01 	bl	f824 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   11222:	2300      	movs	r3, #0
   11224:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   11226:	6923      	ldr	r3, [r4, #16]
   11228:	3328      	adds	r3, #40	; 0x28
   1122a:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   1122c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11230:	f7fe faee 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   11234:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   11236:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   11238:	f023 0302 	bic.w	r3, r3, #2
   1123c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1123e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   11240:	6803      	ldr	r3, [r0, #0]
   11242:	2b01      	cmp	r3, #1
   11244:	d0fc      	beq.n	11240 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   11246:	9b07      	ldr	r3, [sp, #28]
   11248:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   1124a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1124e:	f7fe fae9 	bl	f824 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   11252:	2300      	movs	r3, #0
   11254:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   11256:	6923      	ldr	r3, [r4, #16]
   11258:	3328      	adds	r3, #40	; 0x28
   1125a:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   1125c:	6820      	ldr	r0, [r4, #0]
   1125e:	4a66      	ldr	r2, [pc, #408]	; (113f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   11260:	6903      	ldr	r3, [r0, #16]
   11262:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   11266:	4293      	cmp	r3, r2
   11268:	f040 81bd 	bne.w	115e6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1126c:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1126e:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11270:	f991 5001 	ldrsb.w	r5, [r1, #1]
   11274:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11276:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11278:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   1127c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11280:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11284:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11288:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1128c:	f36f 0100 	bfc	r1, #0, #1
   11290:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   11294:	6813      	ldr	r3, [r2, #0]
   11296:	0799      	lsls	r1, r3, #30
   11298:	d503      	bpl.n	112a2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1129a:	6813      	ldr	r3, [r2, #0]
   1129c:	f36f 0341 	bfc	r3, #1, #1
   112a0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   112a2:	69d3      	ldr	r3, [r2, #28]
   112a4:	f013 0302 	ands.w	r3, r3, #2
   112a8:	d1fb      	bne.n	112a2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   112aa:	6802      	ldr	r2, [r0, #0]
   112ac:	4542      	cmp	r2, r8
   112ae:	f040 8211 	bne.w	116d4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   112b2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   112b6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   112ba:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   112be:	6843      	ldr	r3, [r0, #4]
   112c0:	4a4e      	ldr	r2, [pc, #312]	; (113fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   112c2:	4293      	cmp	r3, r2
   112c4:	f040 8202 	bne.w	116cc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   112c8:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   112ca:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   112cc:	2204      	movs	r2, #4
    m_inTail = 0;
   112ce:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   112d2:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   112d4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   112d8:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   112da:	79e3      	ldrb	r3, [r4, #7]
   112dc:	2b01      	cmp	r3, #1
   112de:	f040 8150 	bne.w	11582 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   112e2:	4b47      	ldr	r3, [pc, #284]	; (11400 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   112e4:	444b      	add	r3, r9
   112e6:	fbb3 f3f9 	udiv	r3, r3, r9
   112ea:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   112ec:	2bff      	cmp	r3, #255	; 0xff
   112ee:	bf28      	it	cs
   112f0:	23ff      	movcs	r3, #255	; 0xff
   112f2:	b2db      	uxtb	r3, r3
   112f4:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   112f6:	2e00      	cmp	r6, #0
   112f8:	f000 816f 	beq.w	115da <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   112fc:	682b      	ldr	r3, [r5, #0]
   112fe:	f043 0302 	orr.w	r3, r3, #2
   11302:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11304:	69eb      	ldr	r3, [r5, #28]
   11306:	079b      	lsls	r3, r3, #30
   11308:	d4fc      	bmi.n	11304 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1130a:	6a22      	ldr	r2, [r4, #32]
   1130c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   11310:	7890      	ldrb	r0, [r2, #2]
   11312:	01db      	lsls	r3, r3, #7
   11314:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   11318:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   1131c:	4402      	add	r2, r0
   1131e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   11322:	f041 0101 	orr.w	r1, r1, #1
   11326:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1132a:	69a6      	ldr	r6, [r4, #24]
   1132c:	4a35      	ldr	r2, [pc, #212]	; (11404 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   1132e:	f996 1001 	ldrsb.w	r1, [r6, #1]
   11332:	78b7      	ldrb	r7, [r6, #2]
   11334:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   11338:	2601      	movs	r6, #1
   1133a:	40be      	lsls	r6, r7
   1133c:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1133e:	6961      	ldr	r1, [r4, #20]
   11340:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   11344:	f891 c002 	ldrb.w	ip, [r1, #2]
   11348:	f991 e001 	ldrsb.w	lr, [r1, #1]
   1134c:	f01c 0f01 	tst.w	ip, #1
   11350:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   11354:	f000 8108 	beq.w	11568 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   11358:	4472      	add	r2, lr
   1135a:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   1135e:	f006 060f 	and.w	r6, r6, #15
   11362:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   11366:	f366 1107 	bfi	r1, r6, #4, #4
   1136a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1136e:	4925      	ldr	r1, [pc, #148]	; (11404 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   11370:	eb01 020e 	add.w	r2, r1, lr
   11374:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   11378:	2701      	movs	r7, #1
   1137a:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1137e:	f04f 0803 	mov.w	r8, #3
   11382:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   11386:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   11388:	69e2      	ldr	r2, [r4, #28]
   1138a:	7894      	ldrb	r4, [r2, #2]
   1138c:	f992 2001 	ldrsb.w	r2, [r2, #1]
   11390:	01d2      	lsls	r2, r2, #7
   11392:	4411      	add	r1, r2
   11394:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   11398:	f014 0f01 	tst.w	r4, #1
   1139c:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   113a0:	bf14      	ite	ne
   113a2:	f366 1707 	bfine	r7, r6, #4, #4
   113a6:	f366 0703 	bfieq	r7, r6, #0, #4
   113aa:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   113ae:	4915      	ldr	r1, [pc, #84]	; (11404 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   113b0:	440a      	add	r2, r1
   113b2:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113b4:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   113b6:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113b8:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   113bc:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113c0:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113c8:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113ce:	bf4c      	ite	mi
   113d0:	f366 1207 	bfimi	r2, r6, #4, #4
   113d4:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113d8:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113da:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   113de:	2201      	movs	r2, #1
   113e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   113e4:	682b      	ldr	r3, [r5, #0]
   113e6:	f043 0302 	orr.w	r3, r3, #2
   113ea:	602b      	str	r3, [r5, #0]
   113ec:	e00c      	b.n	11408 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   113ee:	bf00      	nop
   113f0:	e000e100 	.word	0xe000e100
   113f4:	40001c00 	.word	0x40001c00
   113f8:	00010a65 	.word	0x00010a65
   113fc:	00010941 	.word	0x00010941
   11400:	004c4b3f 	.word	0x004c4b3f
   11404:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11408:	69eb      	ldr	r3, [r5, #28]
   1140a:	079b      	lsls	r3, r3, #30
   1140c:	d4fc      	bmi.n	11408 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   1140e:	2001      	movs	r0, #1
}
   11410:	b009      	add	sp, #36	; 0x24
   11412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   11416:	6829      	ldr	r1, [r5, #0]
   11418:	f36e 0184 	bfi	r1, lr, #2, #3
   1141c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   1141e:	6829      	ldr	r1, [r5, #0]
   11420:	f36f 314f 	bfc	r1, #13, #3
   11424:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   11426:	6829      	ldr	r1, [r5, #0]
   11428:	f36f 711c 	bfc	r1, #28, #1
   1142c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   1142e:	6829      	ldr	r1, [r5, #0]
   11430:	f36e 5115 	bfi	r1, lr, #20, #2
   11434:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   11436:	f1bc 0f00 	cmp.w	ip, #0
   1143a:	d104      	bne.n	11446 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   1143c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   11440:	2900      	cmp	r1, #0
   11442:	f040 81af 	bne.w	117a4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   11446:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   11448:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   1144a:	f362 0302 	bfi	r3, r2, #0, #3
   1144e:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   11450:	682b      	ldr	r3, [r5, #0]
   11452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   11456:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   11458:	7923      	ldrb	r3, [r4, #4]
   1145a:	2b02      	cmp	r3, #2
   1145c:	f000 817c 	beq.w	11758 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   11460:	682a      	ldr	r2, [r5, #0]
   11462:	2101      	movs	r1, #1
   11464:	f361 621b 	bfi	r2, r1, #24, #4
   11468:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   1146a:	686a      	ldr	r2, [r5, #4]
   1146c:	f363 324d 	bfi	r2, r3, #13, #1
   11470:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   11472:	7963      	ldrb	r3, [r4, #5]
   11474:	686a      	ldr	r2, [r5, #4]
   11476:	3b01      	subs	r3, #1
   11478:	f363 1286 	bfi	r2, r3, #6, #1
   1147c:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   1147e:	686b      	ldr	r3, [r5, #4]
   11480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11484:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   11486:	686b      	ldr	r3, [r5, #4]
   11488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1148c:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   1148e:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   11490:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   11492:	f36f 2349 	bfc	r3, #9, #1
   11496:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   11498:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   1149a:	69eb      	ldr	r3, [r5, #28]
   1149c:	075b      	lsls	r3, r3, #29
   1149e:	d4fc      	bmi.n	1149a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   114a0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   114a4:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   114a6:	4bb7      	ldr	r3, [pc, #732]	; (11784 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114a8:	9a04      	ldr	r2, [sp, #16]
   114aa:	441a      	add	r2, r3
   114ac:	4610      	mov	r0, r2
   114ae:	9a05      	ldr	r2, [sp, #20]
   114b0:	eb03 0109 	add.w	r1, r3, r9
   114b4:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   114b6:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114b8:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   114ba:	9f00      	ldr	r7, [sp, #0]
   114bc:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114c0:	2220      	movs	r2, #32
   114c2:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   114c6:	9901      	ldr	r1, [sp, #4]
   114c8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114cc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   114d0:	9a02      	ldr	r2, [sp, #8]
   114d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114d6:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   114da:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   114de:	69a3      	ldr	r3, [r4, #24]
   114e0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   114e4:	789a      	ldrb	r2, [r3, #2]
   114e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
   114ea:	01db      	lsls	r3, r3, #7
   114ec:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   114f0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   114f4:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   114f8:	07d6      	lsls	r6, r2, #31
   114fa:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   114fe:	bf4c      	ite	mi
   11500:	f365 1007 	bfimi	r0, r5, #4, #4
   11504:	f365 0003 	bfipl	r0, r5, #0, #4
   11508:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   1150c:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   1150e:	2901      	cmp	r1, #1
   11510:	f240 80c7 	bls.w	116a2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   11514:	2902      	cmp	r1, #2
   11516:	d10a      	bne.n	1152e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11518:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1151c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11520:	4413      	add	r3, r2
   11522:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11526:	f042 0201 	orr.w	r2, r2, #1
   1152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   1152e:	f10a 0e20 	add.w	lr, sl, #32
   11532:	4a95      	ldr	r2, [pc, #596]	; (11788 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   11534:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   11538:	f36f 1386 	bfc	r3, #6, #1
   1153c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   11540:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   11544:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11548:	2b00      	cmp	r3, #0
   1154a:	d1f9      	bne.n	11540 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   1154c:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   11550:	f363 0103 	bfi	r1, r3, #0, #4
   11554:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   11558:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   1155c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11560:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   11564:	6853      	ldr	r3, [r2, #4]
   11566:	e679      	b.n	1125c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   11568:	eb02 010e 	add.w	r1, r2, lr
   1156c:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   11570:	f006 060f 	and.w	r6, r6, #15
   11574:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   11578:	f366 0203 	bfi	r2, r6, #0, #4
   1157c:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   11580:	e6f5      	b.n	1136e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   11582:	4648      	mov	r0, r9
   11584:	f00b f814 	bl	1c5b0 <__aeabi_ui2d>
   11588:	2200      	movs	r2, #0
   1158a:	4b80      	ldr	r3, [pc, #512]	; (1178c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   1158c:	f00b f886 	bl	1c69c <__aeabi_dmul>
   11590:	4b7f      	ldr	r3, [pc, #508]	; (11790 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   11592:	4680      	mov	r8, r0
   11594:	6818      	ldr	r0, [r3, #0]
   11596:	4689      	mov	r9, r1
   11598:	f00b f80a 	bl	1c5b0 <__aeabi_ui2d>
   1159c:	4602      	mov	r2, r0
   1159e:	460b      	mov	r3, r1
   115a0:	4640      	mov	r0, r8
   115a2:	4649      	mov	r1, r9
   115a4:	f00b f9a4 	bl	1c8f0 <__aeabi_ddiv>
   115a8:	4602      	mov	r2, r0
   115aa:	460b      	mov	r3, r1
   115ac:	2000      	movs	r0, #0
   115ae:	4979      	ldr	r1, [pc, #484]	; (11794 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   115b0:	f00a fec0 	bl	1c334 <__aeabi_dsub>
   115b4:	2200      	movs	r2, #0
   115b6:	4b78      	ldr	r3, [pc, #480]	; (11798 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   115b8:	f00b f870 	bl	1c69c <__aeabi_dmul>
   115bc:	f00b fb50 	bl	1cc60 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   115c0:	f00b f818 	bl	1c5f4 <__aeabi_f2d>
   115c4:	2200      	movs	r2, #0
   115c6:	4b75      	ldr	r3, [pc, #468]	; (1179c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   115c8:	f00a feb6 	bl	1c338 <__adddf3>
   115cc:	f00b fb28 	bl	1cc20 <__aeabi_d2uiz>
   115d0:	b280      	uxth	r0, r0
   115d2:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   115d4:	2e00      	cmp	r6, #0
   115d6:	f47f ae91 	bne.w	112fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   115da:	6a22      	ldr	r2, [r4, #32]
   115dc:	f992 3001 	ldrsb.w	r3, [r2, #1]
   115e0:	7890      	ldrb	r0, [r2, #2]
   115e2:	01db      	lsls	r3, r3, #7
   115e4:	e6a1      	b.n	1132a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   115e6:	4649      	mov	r1, r9
   115e8:	4620      	mov	r0, r4
   115ea:	4798      	blx	r3
   115ec:	6a22      	ldr	r2, [r4, #32]
   115ee:	6925      	ldr	r5, [r4, #16]
   115f0:	f992 3001 	ldrsb.w	r3, [r2, #1]
   115f4:	7890      	ldrb	r0, [r2, #2]
   115f6:	01db      	lsls	r3, r3, #7
   115f8:	e697      	b.n	1132a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   115fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   115fe:	9207      	str	r2, [sp, #28]
   11600:	9206      	str	r2, [sp, #24]
   11602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   11606:	9202      	str	r2, [sp, #8]
   11608:	2239      	movs	r2, #57	; 0x39
   1160a:	9205      	str	r2, [sp, #20]
   1160c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   11610:	9201      	str	r2, [sp, #4]
   11612:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   11614:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11616:	2601      	movs	r6, #1
   11618:	f04f 0936 	mov.w	r9, #54	; 0x36
   1161c:	9204      	str	r2, [sp, #16]
   1161e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   11622:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11626:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   1162a:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   1162c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11630:	f04f 0a17 	mov.w	sl, #23
   11634:	9200      	str	r2, [sp, #0]
   11636:	e53a      	b.n	110ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   11638:	2900      	cmp	r1, #0
   1163a:	f040 8092 	bne.w	11762 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   1163e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11642:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11646:	2501      	movs	r5, #1
   11648:	4095      	lsls	r5, r2
   1164a:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   1164c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11650:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11654:	4413      	add	r3, r2
   11656:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1165a:	f36f 0200 	bfc	r2, #0, #1
   1165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11662:	e5c7      	b.n	111f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11664:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   11668:	9207      	str	r2, [sp, #28]
   1166a:	9206      	str	r2, [sp, #24]
   1166c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11670:	9202      	str	r2, [sp, #8]
   11672:	223d      	movs	r2, #61	; 0x3d
   11674:	9205      	str	r2, [sp, #20]
   11676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1167a:	9201      	str	r2, [sp, #4]
   1167c:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1167e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11680:	2601      	movs	r6, #1
   11682:	f04f 093a 	mov.w	r9, #58	; 0x3a
   11686:	9204      	str	r2, [sp, #16]
   11688:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1168c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11690:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   11694:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   11696:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1169a:	f04f 0a18 	mov.w	sl, #24
   1169e:	9200      	str	r2, [sp, #0]
   116a0:	e505      	b.n	110ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   116a2:	2900      	cmp	r1, #0
   116a4:	d165      	bne.n	11772 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   116a6:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   116aa:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   116ae:	2001      	movs	r0, #1
   116b0:	4090      	lsls	r0, r2
   116b2:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   116b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   116b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   116bc:	4413      	add	r3, r2
   116be:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   116c2:	f36f 0200 	bfc	r2, #0, #1
   116c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   116ca:	e730      	b.n	1152e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   116cc:	4620      	mov	r0, r4
   116ce:	4798      	blx	r3
   116d0:	6925      	ldr	r5, [r4, #16]
   116d2:	e602      	b.n	112da <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   116d4:	4620      	mov	r0, r4
   116d6:	4790      	blx	r2
   116d8:	6820      	ldr	r0, [r4, #0]
   116da:	e5f0      	b.n	112be <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   116dc:	2205      	movs	r2, #5
   116de:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   116e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   116e6:	9202      	str	r2, [sp, #8]
   116e8:	224d      	movs	r2, #77	; 0x4d
   116ea:	492d      	ldr	r1, [pc, #180]	; (117a0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   116ec:	9205      	str	r2, [sp, #20]
   116ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   116f2:	9201      	str	r2, [sp, #4]
   116f4:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   116f6:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   116f8:	2602      	movs	r6, #2
   116fa:	f04f 094a 	mov.w	r9, #74	; 0x4a
   116fe:	9107      	str	r1, [sp, #28]
   11700:	9204      	str	r2, [sp, #16]
   11702:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   11706:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1170a:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   1170c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   11710:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   11712:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   11716:	f04f 0a25 	mov.w	sl, #37	; 0x25
   1171a:	9200      	str	r2, [sp, #0]
   1171c:	e4c7      	b.n	110ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1171e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   11722:	9207      	str	r2, [sp, #28]
   11724:	9206      	str	r2, [sp, #24]
   11726:	2241      	movs	r2, #65	; 0x41
   11728:	9205      	str	r2, [sp, #20]
   1172a:	2240      	movs	r2, #64	; 0x40
   1172c:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1172e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11730:	2102      	movs	r1, #2
   11732:	f04f 093e 	mov.w	r9, #62	; 0x3e
   11736:	9204      	str	r2, [sp, #16]
   11738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1173c:	4637      	mov	r7, r6
   1173e:	9601      	str	r6, [sp, #4]
   11740:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   11742:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11746:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   1174a:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   1174c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11750:	f04f 0a22 	mov.w	sl, #34	; 0x22
   11754:	9200      	str	r2, [sp, #0]
   11756:	e4aa      	b.n	110ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   11758:	682b      	ldr	r3, [r5, #0]
   1175a:	f36f 631b 	bfc	r3, #24, #4
   1175e:	602b      	str	r3, [r5, #0]
   11760:	e687      	b.n	11472 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   11762:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11766:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   1176a:	2501      	movs	r5, #1
   1176c:	4095      	lsls	r5, r2
   1176e:	614d      	str	r5, [r1, #20]
   11770:	e76c      	b.n	1164c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   11772:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11776:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   1177a:	2001      	movs	r0, #1
   1177c:	4090      	lsls	r0, r2
   1177e:	6148      	str	r0, [r1, #20]
   11780:	e798      	b.n	116b4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   11782:	bf00      	nop
   11784:	e000e100 	.word	0xe000e100
   11788:	40001c00 	.word	0x40001c00
   1178c:	40300000 	.word	0x40300000
   11790:	200000e0 	.word	0x200000e0
   11794:	3ff00000 	.word	0x3ff00000
   11798:	40f00000 	.word	0x40f00000
   1179c:	3fe00000 	.word	0x3fe00000
   117a0:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   117a4:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   117a6:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   117a8:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   117ac:	f36c 0100 	bfi	r1, ip, #0, #1
   117b0:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   117b4:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   117b6:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   117ba:	0790      	lsls	r0, r2, #30
   117bc:	d503      	bpl.n	117c6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   117be:	681a      	ldr	r2, [r3, #0]
   117c0:	f36c 0241 	bfi	r2, ip, #1, #1
   117c4:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   117c6:	69da      	ldr	r2, [r3, #28]
   117c8:	f012 0202 	ands.w	r2, r2, #2
   117cc:	d1fb      	bne.n	117c6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   117ce:	6821      	ldr	r1, [r4, #0]
   117d0:	680b      	ldr	r3, [r1, #0]
   117d2:	4543      	cmp	r3, r8
   117d4:	d13b      	bne.n	1184e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   117d6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   117da:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   117de:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   117e2:	684b      	ldr	r3, [r1, #4]
   117e4:	4a1c      	ldr	r2, [pc, #112]	; (11858 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   117e6:	4293      	cmp	r3, r2
   117e8:	d12d      	bne.n	11846 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   117ea:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   117ec:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   117ee:	2104      	movs	r1, #4
    m_inTail = 0;
   117f0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   117f4:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   117f6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   117fa:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   117fc:	7b21      	ldrb	r1, [r4, #12]
   117fe:	6813      	ldr	r3, [r2, #0]
   11800:	2900      	cmp	r1, #0
   11802:	bf0c      	ite	eq
   11804:	2100      	moveq	r1, #0
   11806:	2102      	movne	r1, #2
   11808:	f361 4311 	bfi	r3, r1, #16, #2
   1180c:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   1180e:	f1bb 0f00 	cmp.w	fp, #0
   11812:	f43f ae18 	beq.w	11446 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   11816:	6813      	ldr	r3, [r2, #0]
   11818:	f043 0302 	orr.w	r3, r3, #2
   1181c:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1181e:	69d3      	ldr	r3, [r2, #28]
   11820:	0799      	lsls	r1, r3, #30
   11822:	d4fc      	bmi.n	1181e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11824:	6a23      	ldr	r3, [r4, #32]
   11826:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1182a:	789b      	ldrb	r3, [r3, #2]
   1182c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   11830:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11834:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11838:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1183c:	f042 0201 	orr.w	r2, r2, #1
   11840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11844:	e5ff      	b.n	11446 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   11846:	4620      	mov	r0, r4
   11848:	4798      	blx	r3
   1184a:	6922      	ldr	r2, [r4, #16]
   1184c:	e7d6      	b.n	117fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   1184e:	4620      	mov	r0, r4
   11850:	4798      	blx	r3
   11852:	6821      	ldr	r1, [r4, #0]
   11854:	e7c5      	b.n	117e2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   11856:	bf00      	nop
   11858:	00010941 	.word	0x00010941

0001185c <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   1185c:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   11860:	b92a      	cbnz	r2, 1186e <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   11862:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   11864:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   11866:	428a      	cmp	r2, r1
        m_portOpen = true;
   11868:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   1186c:	d900      	bls.n	11870 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   1186e:	4770      	bx	lr
   11870:	f7ff bb86 	b.w	10f80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00011874 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   11874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11876:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   11878:	4f20      	ldr	r7, [pc, #128]	; (118fc <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   1187a:	6182      	str	r2, [r0, #24]
   1187c:	61c3      	str	r3, [r0, #28]
   1187e:	4d20      	ldr	r5, [pc, #128]	; (11900 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   11880:	60a7      	str	r7, [r4, #8]
   11882:	9f06      	ldr	r7, [sp, #24]
   11884:	f8df c080 	ldr.w	ip, [pc, #128]	; 11908 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   11888:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   1188c:	6065      	str	r5, [r4, #4]
   1188e:	2307      	movs	r3, #7
   11890:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   11892:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   11894:	6227      	str	r7, [r4, #32]
   11896:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   1189a:	2780      	movs	r7, #128	; 0x80
   1189c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   118a0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   118a4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   118a8:	f8c4 c000 	str.w	ip, [r4]
   118ac:	6261      	str	r1, [r4, #36]	; 0x24
   118ae:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   118b2:	85a2      	strh	r2, [r4, #44]	; 0x2c
   118b4:	4629      	mov	r1, r5
   118b6:	463a      	mov	r2, r7
   118b8:	6166      	str	r6, [r4, #20]
   118ba:	7325      	strb	r5, [r4, #12]
   118bc:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   118c0:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   118c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   118c8:	f00d fbb8 	bl	1f03c <memset>
   118cc:	463a      	mov	r2, r7
   118ce:	4629      	mov	r1, r5
   118d0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   118d4:	f00d fbb2 	bl	1f03c <memset>
   118d8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   118dc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   118e0:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   118e4:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   118e8:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   118ec:	7a32      	ldrb	r2, [r6, #8]
   118ee:	4b05      	ldr	r3, [pc, #20]	; (11904 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   118f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   118f4:	6123      	str	r3, [r4, #16]
}
   118f6:	4620      	mov	r0, r4
   118f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118fa:	bf00      	nop
   118fc:	02000100 	.word	0x02000100
   11900:	00080102 	.word	0x00080102
   11904:	00024088 	.word	0x00024088
   11908:	00024040 	.word	0x00024040

0001190c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   1190c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   1190e:	4907      	ldr	r1, [pc, #28]	; (1192c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   11910:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   11914:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   11916:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   11918:	fbb2 f2f3 	udiv	r2, r2, r3
   1191c:	2a02      	cmp	r2, #2
   1191e:	bf38      	it	cc
   11920:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   11922:	680b      	ldr	r3, [r1, #0]
   11924:	1a1b      	subs	r3, r3, r0
   11926:	429a      	cmp	r2, r3
   11928:	d8fb      	bhi.n	11922 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   1192a:	4770      	bx	lr
   1192c:	20001be0 	.word	0x20001be0

00011930 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   11930:	2901      	cmp	r1, #1
   11932:	d901      	bls.n	11938 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   11934:	2000      	movs	r0, #0
   11936:	4770      	bx	lr
    if (!m_portOpen) {
   11938:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   1193c:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   1193e:	b10a      	cbz	r2, 11944 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   11940:	f7ff bb1e 	b.w	10f80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   11944:	2001      	movs	r0, #1
}
   11946:	4770      	bx	lr

00011948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   11948:	2901      	cmp	r1, #1
    m_ssMode = mode;
   1194a:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   1194c:	d914      	bls.n	11978 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   1194e:	2902      	cmp	r1, #2
   11950:	d110      	bne.n	11974 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11952:	6982      	ldr	r2, [r0, #24]
   11954:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11958:	7893      	ldrb	r3, [r2, #2]
   1195a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1195e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11962:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   11966:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11968:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1196c:	4302      	orrs	r2, r0
   1196e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11972:	4770      	bx	lr
            success = false;
   11974:	2000      	movs	r0, #0
}
   11976:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   11978:	6982      	ldr	r2, [r0, #24]
   1197a:	f992 3001 	ldrsb.w	r3, [r2, #1]
   1197e:	7892      	ldrb	r2, [r2, #2]
   11980:	01db      	lsls	r3, r3, #7
   11982:	b199      	cbz	r1, 119ac <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   11984:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11988:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   1198c:	2001      	movs	r0, #1
   1198e:	4090      	lsls	r0, r2
   11990:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11992:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11996:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1199a:	4413      	add	r3, r2
   1199c:	2001      	movs	r0, #1
   1199e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   119a2:	f36f 0200 	bfc	r2, #0, #1
   119a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   119aa:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   119ac:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   119b0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   119b4:	2001      	movs	r0, #1
   119b6:	4090      	lsls	r0, r2
   119b8:	6188      	str	r0, [r1, #24]
   119ba:	e7ea      	b.n	11992 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

000119bc <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   119bc:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   119be:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   119c0:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   119c2:	2b01      	cmp	r3, #1
    m_phase = phase;
   119c4:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   119c6:	d000      	beq.n	119ca <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   119c8:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   119ca:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   119cc:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   119ce:	f991 4001 	ldrsb.w	r4, [r1, #1]
   119d2:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   119d4:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   119d6:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   119da:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   119de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   119e2:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   119e6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   119ea:	f36f 0100 	bfc	r1, #0, #1
   119ee:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   119f2:	6813      	ldr	r3, [r2, #0]
   119f4:	0799      	lsls	r1, r3, #30
   119f6:	d503      	bpl.n	11a00 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   119f8:	6813      	ldr	r3, [r2, #0]
   119fa:	f36f 0341 	bfc	r3, #1, #1
   119fe:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11a00:	69d3      	ldr	r3, [r2, #28]
   11a02:	f013 0302 	ands.w	r3, r3, #2
   11a06:	d1fb      	bne.n	11a00 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   11a08:	6802      	ldr	r2, [r0, #0]
   11a0a:	4604      	mov	r4, r0
   11a0c:	6811      	ldr	r1, [r2, #0]
   11a0e:	4821      	ldr	r0, [pc, #132]	; (11a94 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   11a10:	4281      	cmp	r1, r0
   11a12:	d136      	bne.n	11a82 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   11a14:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   11a18:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   11a1c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   11a20:	6853      	ldr	r3, [r2, #4]
   11a22:	4a1d      	ldr	r2, [pc, #116]	; (11a98 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   11a24:	4293      	cmp	r3, r2
   11a26:	d130      	bne.n	11a8a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11a28:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   11a2a:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11a2c:	2104      	movs	r1, #4
    m_inTail = 0;
   11a2e:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   11a32:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   11a34:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11a38:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   11a3a:	7a21      	ldrb	r1, [r4, #8]
   11a3c:	681a      	ldr	r2, [r3, #0]
   11a3e:	f361 725d 	bfi	r2, r1, #29, #1
   11a42:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   11a44:	7a61      	ldrb	r1, [r4, #9]
   11a46:	681a      	ldr	r2, [r3, #0]
   11a48:	f361 721c 	bfi	r2, r1, #28, #1
   11a4c:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   11a4e:	2d00      	cmp	r5, #0
   11a50:	d0ba      	beq.n	119c8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   11a52:	681a      	ldr	r2, [r3, #0]
   11a54:	f042 0202 	orr.w	r2, r2, #2
   11a58:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11a5a:	69da      	ldr	r2, [r3, #28]
   11a5c:	0792      	lsls	r2, r2, #30
   11a5e:	d4fc      	bmi.n	11a5a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11a60:	6a22      	ldr	r2, [r4, #32]
   11a62:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11a66:	7893      	ldrb	r3, [r2, #2]
   11a68:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   11a6c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11a70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11a74:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11a78:	f042 0201 	orr.w	r2, r2, #1
   11a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11a80:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   11a82:	4620      	mov	r0, r4
   11a84:	4788      	blx	r1
   11a86:	6822      	ldr	r2, [r4, #0]
   11a88:	e7ca      	b.n	11a20 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   11a8a:	4620      	mov	r0, r4
   11a8c:	4798      	blx	r3
   11a8e:	6923      	ldr	r3, [r4, #16]
   11a90:	e7d3      	b.n	11a3a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   11a92:	bf00      	nop
   11a94:	00010931 	.word	0x00010931
   11a98:	00010941 	.word	0x00010941

00011a9c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   11a9c:	b470      	push	{r4, r5, r6}
   11a9e:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   11aa0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   11aa4:	b120      	cbz	r0, 11ab0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   11aa6:	79e0      	ldrb	r0, [r4, #7]
   11aa8:	2801      	cmp	r0, #1
        return 0;
   11aaa:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   11aae:	d001      	beq.n	11ab4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   11ab0:	bc70      	pop	{r4, r5, r6}
   11ab2:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   11ab4:	2b00      	cmp	r3, #0
   11ab6:	ddfb      	ble.n	11ab0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   11ab8:	6925      	ldr	r5, [r4, #16]
   11aba:	b1b9      	cbz	r1, 11aec <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   11abc:	1c4e      	adds	r6, r1, #1
   11abe:	7809      	ldrb	r1, [r1, #0]
   11ac0:	62a9      	str	r1, [r5, #40]	; 0x28
   11ac2:	e003      	b.n	11acc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   11ac4:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   11ac8:	2900      	cmp	r1, #0
   11aca:	d0f1      	beq.n	11ab0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   11acc:	7e29      	ldrb	r1, [r5, #24]
   11ace:	0749      	lsls	r1, r1, #29
   11ad0:	d5f8      	bpl.n	11ac4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   11ad2:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   11ad4:	0789      	lsls	r1, r1, #30
   11ad6:	d5f5      	bpl.n	11ac4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   11ad8:	b152      	cbz	r2, 11af0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   11ada:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   11adc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   11ade:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   11ae0:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   11ae2:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   11ae6:	d007      	beq.n	11af8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   11ae8:	4631      	mov	r1, r6
   11aea:	e7e5      	b.n	11ab8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   11aec:	460e      	mov	r6, r1
   11aee:	e7e7      	b.n	11ac0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   11af0:	3001      	adds	r0, #1
   11af2:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   11af4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   11af6:	d1f7      	bne.n	11ae8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   11af8:	4618      	mov	r0, r3
   11afa:	e7d9      	b.n	11ab0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

00011afc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   11afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   11b00:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   11b04:	b12d      	cbz	r5, 11b12 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   11b06:	f890 8007 	ldrb.w	r8, [r0, #7]
   11b0a:	f1b8 0f01 	cmp.w	r8, #1
   11b0e:	d003      	beq.n	11b18 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   11b10:	2500      	movs	r5, #0
}
   11b12:	4628      	mov	r0, r5
   11b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11b18:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   11b1c:	f1be 0f07 	cmp.w	lr, #7
   11b20:	d0f6      	beq.n	11b10 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   11b22:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   11b26:	2c07      	cmp	r4, #7
   11b28:	d0f2      	beq.n	11b10 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   11b2a:	4616      	mov	r6, r2
   11b2c:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   11b2e:	4670      	mov	r0, lr
   11b30:	461f      	mov	r7, r3
   11b32:	4689      	mov	r9, r1
   11b34:	f7fd fe76 	bl	f824 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   11b38:	b336      	cbz	r6, 11b88 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11b3a:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   11b3c:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11b40:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   11b42:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11b44:	b2be      	uxth	r6, r7
   11b46:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11b48:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11b4c:	f7fd fe60 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11b50:	6803      	ldr	r3, [r0, #0]
   11b52:	f043 0302 	orr.w	r3, r3, #2
   11b56:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   11b58:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11b5c:	f7fd fe62 	bl	f824 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   11b60:	f1b9 0f00 	cmp.w	r9, #0
   11b64:	d015      	beq.n	11b92 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11b66:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   11b68:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11b6c:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   11b6e:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11b70:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11b72:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11b76:	f7fd fe4b 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11b7a:	6803      	ldr	r3, [r0, #0]
   11b7c:	f043 0302 	orr.w	r3, r3, #2
   11b80:	6003      	str	r3, [r0, #0]
}
   11b82:	4628      	mov	r0, r5
   11b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   11b88:	4b04      	ldr	r3, [pc, #16]	; (11b9c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   11b8a:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   11b8c:	f8a0 8000 	strh.w	r8, [r0]
   11b90:	e7d8      	b.n	11b44 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   11b92:	4b02      	ldr	r3, [pc, #8]	; (11b9c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   11b94:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   11b96:	2301      	movs	r3, #1
   11b98:	8003      	strh	r3, [r0, #0]
   11b9a:	e7e9      	b.n	11b70 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   11b9c:	20001f10 	.word	0x20001f10

00011ba0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11ba0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   11ba4:	2b07      	cmp	r3, #7
   11ba6:	d016      	beq.n	11bd6 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   11ba8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   11bac:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   11bae:	b510      	push	{r4, lr}
   11bb0:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11bb2:	d005      	beq.n	11bc0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   11bb4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11bb8:	b113      	cbz	r3, 11bc0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   11bba:	79e3      	ldrb	r3, [r4, #7]
   11bbc:	2b01      	cmp	r3, #1
   11bbe:	d001      	beq.n	11bc4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   11bc0:	2001      	movs	r0, #1
   11bc2:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   11bc4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11bc8:	f7fd fe22 	bl	f810 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11bcc:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   11bce:	079b      	lsls	r3, r3, #30
   11bd0:	d4f0      	bmi.n	11bb4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   11bd2:	2001      	movs	r0, #1
   11bd4:	bd10      	pop	{r4, pc}
   11bd6:	2001      	movs	r0, #1
   11bd8:	4770      	bx	lr
   11bda:	bf00      	nop

00011bdc <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   11bdc:	79c3      	ldrb	r3, [r0, #7]
   11bde:	2b01      	cmp	r3, #1
   11be0:	d022      	beq.n	11c28 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   11be2:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11be6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   11bea:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   11bec:	429a      	cmp	r2, r3
   11bee:	d019      	beq.n	11c24 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   11bf0:	7e0b      	ldrb	r3, [r1, #24]
   11bf2:	07da      	lsls	r2, r3, #31
   11bf4:	d403      	bmi.n	11bfe <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   11bf6:	e018      	b.n	11c2a <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   11bf8:	7e0b      	ldrb	r3, [r1, #24]
   11bfa:	07db      	lsls	r3, r3, #31
   11bfc:	d514      	bpl.n	11c28 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   11bfe:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   11c02:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11c06:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   11c08:	3301      	adds	r3, #1
   11c0a:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   11c0e:	628a      	str	r2, [r1, #40]	; 0x28
   11c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   11c14:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11c18:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11c1c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11c20:	429a      	cmp	r2, r3
   11c22:	d1e9      	bne.n	11bf8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   11c24:	2301      	movs	r3, #1
   11c26:	750b      	strb	r3, [r1, #20]
   11c28:	4770      	bx	lr
   11c2a:	4770      	bx	lr

00011c2c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   11c2c:	79c3      	ldrb	r3, [r0, #7]
   11c2e:	2b01      	cmp	r3, #1
   11c30:	d100      	bne.n	11c34 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   11c32:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   11c34:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   11c36:	6901      	ldr	r1, [r0, #16]
   11c38:	f891 3020 	ldrb.w	r3, [r1, #32]
   11c3c:	b303      	cbz	r3, 11c80 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   11c3e:	2300      	movs	r3, #0
   11c40:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   11c44:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11c48:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   11c4c:	f103 0218 	add.w	r2, r3, #24
   11c50:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   11c54:	3301      	adds	r3, #1
   11c56:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   11c5a:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   11c5e:	7e0b      	ldrb	r3, [r1, #24]
   11c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11c64:	760b      	strb	r3, [r1, #24]
   11c66:	e00b      	b.n	11c80 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11c68:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11c6c:	429a      	cmp	r2, r3
   11c6e:	d00f      	beq.n	11c90 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   11c70:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   11c74:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   11c76:	3218      	adds	r2, #24
   11c78:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   11c7c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   11c80:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11c84:	7e0a      	ldrb	r2, [r1, #24]
   11c86:	3301      	adds	r3, #1
   11c88:	0752      	lsls	r2, r2, #29
   11c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11c8e:	d4eb      	bmi.n	11c68 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   11c90:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11c94:	429a      	cmp	r2, r3
   11c96:	d002      	beq.n	11c9e <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   11c98:	f85d 4b04 	ldr.w	r4, [sp], #4
   11c9c:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   11c9e:	2304      	movs	r3, #4
   11ca0:	750b      	strb	r3, [r1, #20]
}
   11ca2:	e7f9      	b.n	11c98 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

00011ca4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   11ca4:	79c3      	ldrb	r3, [r0, #7]
   11ca6:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11ca8:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   11caa:	d022      	beq.n	11cf2 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   11cac:	7e1a      	ldrb	r2, [r3, #24]
   11cae:	09d2      	lsrs	r2, r2, #7
   11cb0:	d01e      	beq.n	11cf0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11cb2:	2280      	movs	r2, #128	; 0x80
   11cb4:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   11cb6:	8b5a      	ldrh	r2, [r3, #26]
   11cb8:	0792      	lsls	r2, r2, #30
   11cba:	d509      	bpl.n	11cd0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   11cbc:	8b5a      	ldrh	r2, [r3, #26]
   11cbe:	f042 0202 	orr.w	r2, r2, #2
   11cc2:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   11cc4:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11cc8:	f042 0201 	orr.w	r2, r2, #1
   11ccc:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   11cd0:	8b5a      	ldrh	r2, [r3, #26]
   11cd2:	07d1      	lsls	r1, r2, #31
   11cd4:	d410      	bmi.n	11cf8 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   11cd6:	8b5a      	ldrh	r2, [r3, #26]
   11cd8:	0752      	lsls	r2, r2, #29
   11cda:	d509      	bpl.n	11cf0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   11cdc:	8b5a      	ldrh	r2, [r3, #26]
   11cde:	f042 0204 	orr.w	r2, r2, #4
   11ce2:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   11ce4:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   11ce8:	f043 0304 	orr.w	r3, r3, #4
   11cec:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   11cf0:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11cf2:	2280      	movs	r2, #128	; 0x80
   11cf4:	761a      	strb	r2, [r3, #24]
            break;
   11cf6:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   11cf8:	8b5a      	ldrh	r2, [r3, #26]
   11cfa:	f042 0201 	orr.w	r2, r2, #1
   11cfe:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   11d00:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11d04:	f042 0202 	orr.w	r2, r2, #2
   11d08:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   11d0c:	e7e3      	b.n	11cd6 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   11d0e:	bf00      	nop

00011d10 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11d10:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   11d14:	4770      	bx	lr
   11d16:	bf00      	nop

00011d18 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11d18:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11d1c:	e7f8      	b.n	11d10 <_ZN9ClearCore12SerialDriver4ModeEv>
   11d1e:	bf00      	nop

00011d20 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   11d20:	2007      	movs	r0, #7
   11d22:	4770      	bx	lr

00011d24 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   11d24:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11d28:	e7fa      	b.n	11d20 <_ZN9ClearCore12SerialDriver4TypeEv>
   11d2a:	bf00      	nop

00011d2c <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   11d2c:	6803      	ldr	r3, [r0, #0]
   11d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11d30:	4718      	bx	r3
   11d32:	bf00      	nop

00011d34 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   11d34:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11d38:	e7f8      	b.n	11d2c <_ZN9ClearCore12SerialDriver10IsWritableEv>
   11d3a:	bf00      	nop

00011d3c <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   11d3c:	b508      	push	{r3, lr}
        return PortIsOpen();
   11d3e:	6803      	ldr	r3, [r0, #0]
   11d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11d42:	4798      	blx	r3
    }
   11d44:	b200      	sxth	r0, r0
   11d46:	bd08      	pop	{r3, pc}

00011d48 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11d48:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11d4c:	e7f6      	b.n	11d3c <_ZN9ClearCore12SerialDriver5StateEv>
   11d4e:	bf00      	nop

00011d50 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   11d50:	2000      	movs	r0, #0
   11d52:	4770      	bx	lr

00011d54 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   11d54:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11d58:	e7fa      	b.n	11d50 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   11d5a:	bf00      	nop

00011d5c <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   11d5c:	4770      	bx	lr
   11d5e:	bf00      	nop

00011d60 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   11d60:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11d64:	e7fa      	b.n	11d5c <_ZN9ClearCore12SerialDriver7RefreshEv>
   11d66:	bf00      	nop

00011d68 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d6c:	b082      	sub	sp, #8
   11d6e:	4688      	mov	r8, r1
   11d70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11d72:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   11d76:	9500      	str	r5, [sp, #0]
   11d78:	9401      	str	r4, [sp, #4]
   11d7a:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   11d7c:	4604      	mov	r4, r0
   11d7e:	4617      	mov	r7, r2
   11d80:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   11d82:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   11d84:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   11d86:	f7ff fd75 	bl	11874 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11d8a:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   11d8e:	f7fd f951 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
   11d92:	4b09      	ldr	r3, [pc, #36]	; (11db8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   11d94:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   11d98:	f103 0208 	add.w	r2, r3, #8
   11d9c:	4620      	mov	r0, r4
   11d9e:	337c      	adds	r3, #124	; 0x7c
   11da0:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   11da4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   11da8:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   11dac:	6022      	str	r2, [r4, #0]
   11dae:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   11db2:	b002      	add	sp, #8
   11db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11db8:	000240a8 	.word	0x000240a8

00011dbc <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   11dbc:	b538      	push	{r3, r4, r5, lr}
   11dbe:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11dc0:	f7fe fe50 	bl	10a64 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   11dc4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11dc8:	4605      	mov	r5, r0
        if (m_portOpen) {
   11dca:	b113      	cbz	r3, 11dd2 <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   11dcc:	4620      	mov	r0, r4
   11dce:	f7ff fd9d 	bl	1190c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   11dd2:	4628      	mov	r0, r5
   11dd4:	bd38      	pop	{r3, r4, r5, pc}
   11dd6:	bf00      	nop

00011dd8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   11dd8:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   11dda:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   11dde:	428b      	cmp	r3, r1
   11de0:	d00d      	beq.n	11dfe <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   11de2:	2b10      	cmp	r3, #16
   11de4:	460d      	mov	r5, r1
   11de6:	4604      	mov	r4, r0
   11de8:	f000 808c 	beq.w	11f04 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   11dec:	f1a5 030d 	sub.w	r3, r5, #13
   11df0:	2b03      	cmp	r3, #3
   11df2:	f200 808c 	bhi.w	11f0e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   11df6:	e8df f003 	tbb	[pc, r3]
   11dfa:	3169      	.short	0x3169
   11dfc:	4f06      	.short	0x4f06
        return true;
   11dfe:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   11e00:	4628      	mov	r0, r5
   11e02:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11e04:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11e06:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11e0a:	4b42      	ldr	r3, [pc, #264]	; (11f14 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11e0c:	f3bf 8f5b 	dmb	ish
   11e10:	43d2      	mvns	r2, r2
   11e12:	e853 1f00 	ldrex	r1, [r3]
   11e16:	4011      	ands	r1, r2
   11e18:	e843 1000 	strex	r0, r1, [r3]
   11e1c:	2800      	cmp	r0, #0
   11e1e:	d1f8      	bne.n	11e12 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   11e20:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11e24:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11e28:	f3bf 8f5b 	dmb	ish
   11e2c:	e853 1f00 	ldrex	r1, [r3]
   11e30:	4311      	orrs	r1, r2
   11e32:	e843 1000 	strex	r0, r1, [r3]
   11e36:	2800      	cmp	r0, #0
   11e38:	d1f8      	bne.n	11e2c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   11e3a:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   11e3e:	2101      	movs	r1, #1
    m_mode = newMode;
   11e40:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   11e44:	4620      	mov	r0, r4
   11e46:	f7ff fd73 	bl	11930 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   11e4a:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   11e4e:	2d00      	cmp	r5, #0
   11e50:	d0d5      	beq.n	11dfe <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   11e52:	4620      	mov	r0, r4
   11e54:	f7ff fd5a 	bl	1190c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11e58:	4628      	mov	r0, r5
   11e5a:	bd38      	pop	{r3, r4, r5, pc}
   11e5c:	4b2d      	ldr	r3, [pc, #180]	; (11f14 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11e5e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11e62:	f3bf 8f5b 	dmb	ish
   11e66:	e853 1f00 	ldrex	r1, [r3]
   11e6a:	4311      	orrs	r1, r2
   11e6c:	e843 1000 	strex	r0, r1, [r3]
   11e70:	2800      	cmp	r0, #0
   11e72:	d1f8      	bne.n	11e66 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   11e74:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11e78:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11e7c:	f3bf 8f5b 	dmb	ish
   11e80:	43d2      	mvns	r2, r2
   11e82:	e853 1f00 	ldrex	r1, [r3]
   11e86:	4011      	ands	r1, r2
   11e88:	e843 1000 	strex	r0, r1, [r3]
   11e8c:	2800      	cmp	r0, #0
   11e8e:	d1f8      	bne.n	11e82 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   11e90:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   11e94:	2100      	movs	r1, #0
   11e96:	e7d3      	b.n	11e40 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   11e98:	2201      	movs	r2, #1
   11e9a:	2100      	movs	r1, #0
   11e9c:	4620      	mov	r0, r4
   11e9e:	f7ff fd8d 	bl	119bc <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   11ea2:	2101      	movs	r1, #1
   11ea4:	4620      	mov	r0, r4
   11ea6:	f7ff fd4f 	bl	11948 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11eaa:	6823      	ldr	r3, [r4, #0]
   11eac:	4a1a      	ldr	r2, [pc, #104]	; (11f18 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   11eae:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11eb0:	491a      	ldr	r1, [pc, #104]	; (11f1c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   11eb2:	4293      	cmp	r3, r2
   11eb4:	4620      	mov	r0, r4
   11eb6:	d1a5      	bne.n	11e04 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   11eb8:	f7fe fdd4 	bl	10a64 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   11ebc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11ec0:	2b00      	cmp	r3, #0
   11ec2:	d0a0      	beq.n	11e06 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   11ec4:	4620      	mov	r0, r4
   11ec6:	f7ff fd21 	bl	1190c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   11eca:	e79c      	b.n	11e06 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   11ecc:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11ed0:	4b10      	ldr	r3, [pc, #64]	; (11f14 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11ed2:	f3bf 8f5b 	dmb	ish
   11ed6:	43d2      	mvns	r2, r2
   11ed8:	e853 1f00 	ldrex	r1, [r3]
   11edc:	4011      	ands	r1, r2
   11ede:	e843 1000 	strex	r0, r1, [r3]
   11ee2:	2800      	cmp	r0, #0
   11ee4:	d1f8      	bne.n	11ed8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   11ee6:	f3bf 8f5b 	dmb	ish
   11eea:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11eee:	f3bf 8f5b 	dmb	ish
   11ef2:	43d2      	mvns	r2, r2
   11ef4:	e853 1f00 	ldrex	r1, [r3]
   11ef8:	4011      	ands	r1, r2
   11efa:	e843 1000 	strex	r0, r1, [r3]
   11efe:	2800      	cmp	r0, #0
   11f00:	d0c6      	beq.n	11e90 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   11f02:	e7f7      	b.n	11ef4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   11f04:	4b06      	ldr	r3, [pc, #24]	; (11f20 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   11f06:	6818      	ldr	r0, [r3, #0]
   11f08:	f7fe fae2 	bl	104d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11f0c:	e76e      	b.n	11dec <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   11f0e:	2500      	movs	r5, #0
   11f10:	e776      	b.n	11e00 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   11f12:	bf00      	nop
   11f14:	20001ac4 	.word	0x20001ac4
   11f18:	00011dbd 	.word	0x00011dbd
   11f1c:	0007a120 	.word	0x0007a120
   11f20:	20001efc 	.word	0x20001efc

00011f24 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   11f24:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11f28:	f7ff bf56 	b.w	11dd8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

00011f2c <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   11f2c:	b510      	push	{r4, lr}
   11f2e:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11f30:	f7fe fcfa 	bl	10928 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11f34:	b100      	cbz	r0, 11f38 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   11f36:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11f38:	4620      	mov	r0, r4
   11f3a:	f7ff fc8f 	bl	1185c <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   11f3e:	4620      	mov	r0, r4
   11f40:	f7ff fce4 	bl	1190c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11f44:	4b0c      	ldr	r3, [pc, #48]	; (11f78 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   11f46:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11f4a:	f3bf 8f5b 	dmb	ish
   11f4e:	e853 1f00 	ldrex	r1, [r3]
   11f52:	4311      	orrs	r1, r2
   11f54:	e843 1000 	strex	r0, r1, [r3]
   11f58:	2800      	cmp	r0, #0
   11f5a:	d1f8      	bne.n	11f4e <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   11f5c:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   11f60:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11f64:	2b10      	cmp	r3, #16
   11f66:	d1e6      	bne.n	11f36 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11f68:	4b04      	ldr	r3, [pc, #16]	; (11f7c <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   11f6a:	4621      	mov	r1, r4
   11f6c:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   11f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   11f72:	f7fe bacd 	b.w	10510 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11f76:	bf00      	nop
   11f78:	20001ac4 	.word	0x20001ac4
   11f7c:	20001efc 	.word	0x20001efc

00011f80 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   11f80:	b510      	push	{r4, lr}
   11f82:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   11f84:	f7fe fcd0 	bl	10928 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11f88:	b1a8      	cbz	r0, 11fb6 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   11f8a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11f8e:	2b10      	cmp	r3, #16
   11f90:	d012      	beq.n	11fb8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   11f92:	4620      	mov	r0, r4
   11f94:	f7fe fe10 	bl	10bb8 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11f98:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11f9c:	4a09      	ldr	r2, [pc, #36]	; (11fc4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   11f9e:	f3bf 8f5b 	dmb	ish
   11fa2:	43db      	mvns	r3, r3
   11fa4:	e852 1f00 	ldrex	r1, [r2]
   11fa8:	4019      	ands	r1, r3
   11faa:	e842 1000 	strex	r0, r1, [r2]
   11fae:	2800      	cmp	r0, #0
   11fb0:	d1f8      	bne.n	11fa4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   11fb2:	f3bf 8f5b 	dmb	ish
   11fb6:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   11fb8:	4b03      	ldr	r3, [pc, #12]	; (11fc8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   11fba:	6818      	ldr	r0, [r3, #0]
   11fbc:	f7fe fa88 	bl	104d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11fc0:	e7e7      	b.n	11f92 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   11fc2:	bf00      	nop
   11fc4:	20001ac4 	.word	0x20001ac4
   11fc8:	20001efc 	.word	0x20001efc

00011fcc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   11fcc:	6803      	ldr	r3, [r0, #0]
   11fce:	4a37      	ldr	r2, [pc, #220]	; (120ac <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   11fd0:	68db      	ldr	r3, [r3, #12]
   11fd2:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   11fd4:	b510      	push	{r4, lr}
   11fd6:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   11fd8:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   11fdc:	d150      	bne.n	12080 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   11fde:	f7fe fca3 	bl	10928 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11fe2:	b1a8      	cbz	r0, 12010 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   11fe4:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11fe8:	2b10      	cmp	r3, #16
   11fea:	d059      	beq.n	120a0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   11fec:	4620      	mov	r0, r4
   11fee:	f7fe fde3 	bl	10bb8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11ff2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11ff6:	4a2e      	ldr	r2, [pc, #184]	; (120b0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11ff8:	f3bf 8f5b 	dmb	ish
   11ffc:	43db      	mvns	r3, r3
   11ffe:	e852 1f00 	ldrex	r1, [r2]
   12002:	4019      	ands	r1, r3
   12004:	e842 1000 	strex	r0, r1, [r2]
   12008:	2800      	cmp	r0, #0
   1200a:	d1f8      	bne.n	11ffe <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   1200c:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   12010:	6823      	ldr	r3, [r4, #0]
   12012:	4a28      	ldr	r2, [pc, #160]	; (120b4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   12014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12016:	4293      	cmp	r3, r2
   12018:	d138      	bne.n	1208c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   1201a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1201e:	2b0d      	cmp	r3, #13
   12020:	d028      	beq.n	12074 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   12022:	2b10      	cmp	r3, #16
   12024:	d037      	beq.n	12096 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   12026:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1202a:	4b21      	ldr	r3, [pc, #132]	; (120b0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   1202c:	f3bf 8f5b 	dmb	ish
   12030:	43d2      	mvns	r2, r2
   12032:	e853 1f00 	ldrex	r1, [r3]
   12036:	4011      	ands	r1, r2
   12038:	e843 1000 	strex	r0, r1, [r3]
   1203c:	2800      	cmp	r0, #0
   1203e:	d1f8      	bne.n	12032 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   12040:	f3bf 8f5b 	dmb	ish
   12044:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   12048:	f3bf 8f5b 	dmb	ish
   1204c:	43d2      	mvns	r2, r2
   1204e:	e853 1f00 	ldrex	r1, [r3]
   12052:	4011      	ands	r1, r2
   12054:	e843 1000 	strex	r0, r1, [r3]
   12058:	2800      	cmp	r0, #0
   1205a:	d1f8      	bne.n	1204e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   1205c:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   12060:	230d      	movs	r3, #13
   12062:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   12066:	4620      	mov	r0, r4
   12068:	2100      	movs	r1, #0
   1206a:	f7ff fc61 	bl	11930 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1206e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   12072:	b903      	cbnz	r3, 12076 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   12074:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   12076:	4620      	mov	r0, r4
}
   12078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   1207c:	f7ff bc46 	b.w	1190c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   12080:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   12082:	6823      	ldr	r3, [r4, #0]
   12084:	4a0b      	ldr	r2, [pc, #44]	; (120b4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   12086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12088:	4293      	cmp	r3, r2
   1208a:	d0c6      	beq.n	1201a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   1208c:	4620      	mov	r0, r4
   1208e:	210d      	movs	r1, #13
}
   12090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   12094:	4718      	bx	r3
        CcioMgr.LinkClose();
   12096:	4b08      	ldr	r3, [pc, #32]	; (120b8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   12098:	6818      	ldr	r0, [r3, #0]
   1209a:	f7fe fa19 	bl	104d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1209e:	e7c2      	b.n	12026 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   120a0:	4b05      	ldr	r3, [pc, #20]	; (120b8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   120a2:	6818      	ldr	r0, [r3, #0]
   120a4:	f7fe fa14 	bl	104d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   120a8:	e7a0      	b.n	11fec <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   120aa:	bf00      	nop
   120ac:	00011f81 	.word	0x00011f81
   120b0:	20001ac4 	.word	0x20001ac4
   120b4:	00011dd9 	.word	0x00011dd9
   120b8:	20001efc 	.word	0x20001efc

000120bc <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   120bc:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   120c0:	f7ff bf84 	b.w	11fcc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

000120c4 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   120c4:	b510      	push	{r4, lr}
            PortOpen();
   120c6:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   120c8:	4604      	mov	r4, r0
        if (newState) {
   120ca:	bb09      	cbnz	r1, 12110 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   120cc:	4a26      	ldr	r2, [pc, #152]	; (12168 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   120ce:	68db      	ldr	r3, [r3, #12]
   120d0:	4293      	cmp	r3, r2
   120d2:	d11a      	bne.n	1210a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   120d4:	f7fe fc28 	bl	10928 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   120d8:	b1a8      	cbz	r0, 12106 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   120da:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   120de:	2b10      	cmp	r3, #16
   120e0:	d03c      	beq.n	1215c <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   120e2:	4620      	mov	r0, r4
   120e4:	f7fe fd68 	bl	10bb8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   120e8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   120ec:	4a1f      	ldr	r2, [pc, #124]	; (1216c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   120ee:	f3bf 8f5b 	dmb	ish
   120f2:	43db      	mvns	r3, r3
   120f4:	e852 1f00 	ldrex	r1, [r2]
   120f8:	4019      	ands	r1, r3
   120fa:	e842 1000 	strex	r0, r1, [r2]
   120fe:	2800      	cmp	r0, #0
   12100:	d1f8      	bne.n	120f4 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   12102:	f3bf 8f5b 	dmb	ish
    }
   12106:	2001      	movs	r0, #1
   12108:	bd10      	pop	{r4, pc}
            PortClose();
   1210a:	4798      	blx	r3
    }
   1210c:	2001      	movs	r0, #1
   1210e:	bd10      	pop	{r4, pc}
   12110:	4a17      	ldr	r2, [pc, #92]	; (12170 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   12112:	689b      	ldr	r3, [r3, #8]
   12114:	4293      	cmp	r3, r2
   12116:	d1f8      	bne.n	1210a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   12118:	f7fe fc06 	bl	10928 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   1211c:	2800      	cmp	r0, #0
   1211e:	d1f2      	bne.n	12106 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   12120:	4620      	mov	r0, r4
   12122:	f7ff fb9b 	bl	1185c <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   12126:	4620      	mov	r0, r4
   12128:	f7ff fbf0 	bl	1190c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1212c:	4b0f      	ldr	r3, [pc, #60]	; (1216c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1212e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   12132:	f3bf 8f5b 	dmb	ish
   12136:	e853 1f00 	ldrex	r1, [r3]
   1213a:	4311      	orrs	r1, r2
   1213c:	e843 1000 	strex	r0, r1, [r3]
   12140:	2800      	cmp	r0, #0
   12142:	d1f8      	bne.n	12136 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   12144:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   12148:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1214c:	2b10      	cmp	r3, #16
   1214e:	d1da      	bne.n	12106 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   12150:	4b08      	ldr	r3, [pc, #32]	; (12174 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   12152:	4621      	mov	r1, r4
   12154:	6818      	ldr	r0, [r3, #0]
   12156:	f7fe f9db 	bl	10510 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   1215a:	e7d4      	b.n	12106 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   1215c:	4b05      	ldr	r3, [pc, #20]	; (12174 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   1215e:	6818      	ldr	r0, [r3, #0]
   12160:	f7fe f9b6 	bl	104d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   12164:	e7bd      	b.n	120e2 <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   12166:	bf00      	nop
   12168:	00011f81 	.word	0x00011f81
   1216c:	20001ac4 	.word	0x20001ac4
   12170:	00011f2d 	.word	0x00011f2d
   12174:	20001efc 	.word	0x20001efc

00012178 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   12178:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1217c:	e7a2      	b.n	120c4 <_ZN9ClearCore12SerialDriver5StateEs>
   1217e:	bf00      	nop

00012180 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   12180:	7980      	ldrb	r0, [r0, #6]
   12182:	4770      	bx	lr

00012184 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   12184:	f1a1 0004 	sub.w	r0, r1, #4
   12188:	fab0 f080 	clz	r0, r0
   1218c:	0940      	lsrs	r0, r0, #5
   1218e:	4770      	bx	lr

00012190 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   12190:	2002      	movs	r0, #2
   12192:	4770      	bx	lr

00012194 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   12194:	2001      	movs	r0, #1
   12196:	4770      	bx	lr

00012198 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   12198:	2000      	movs	r0, #0
   1219a:	4770      	bx	lr

0001219c <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   1219c:	4770      	bx	lr
   1219e:	bf00      	nop

000121a0 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   121a0:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   121a2:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   121a4:	7183      	strb	r3, [r0, #6]
   121a6:	4770      	bx	lr

000121a8 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   121a8:	4b04      	ldr	r3, [pc, #16]	; (121bc <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   121aa:	681a      	ldr	r2, [r3, #0]
   121ac:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   121b0:	6883      	ldr	r3, [r0, #8]
   121b2:	421a      	tst	r2, r3
}
   121b4:	bf14      	ite	ne
   121b6:	2001      	movne	r0, #1
   121b8:	2000      	moveq	r0, #0
   121ba:	4770      	bx	lr
   121bc:	20001ac4 	.word	0x20001ac4

000121c0 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   121c0:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   121c2:	b971      	cbnz	r1, 121e2 <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   121c4:	f3bf 8f5b 	dmb	ish
   121c8:	4a0d      	ldr	r2, [pc, #52]	; (12200 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   121ca:	43db      	mvns	r3, r3
   121cc:	e852 1f00 	ldrex	r1, [r2]
   121d0:	4019      	ands	r1, r3
   121d2:	e842 1000 	strex	r0, r1, [r2]
   121d6:	2800      	cmp	r0, #0
   121d8:	d1f8      	bne.n	121cc <_ZN9ClearCore9LedDriver5StateEs+0xc>
   121da:	f3bf 8f5b 	dmb	ish
    return true;
}
   121de:	2001      	movs	r0, #1
   121e0:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   121e2:	4a07      	ldr	r2, [pc, #28]	; (12200 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   121e4:	f3bf 8f5b 	dmb	ish
   121e8:	e852 1f00 	ldrex	r1, [r2]
   121ec:	4319      	orrs	r1, r3
   121ee:	e842 1000 	strex	r0, r1, [r2]
   121f2:	2800      	cmp	r0, #0
   121f4:	d1f8      	bne.n	121e8 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   121f6:	f3bf 8f5b 	dmb	ish
   121fa:	2001      	movs	r0, #1
   121fc:	4770      	bx	lr
   121fe:	bf00      	nop
   12200:	20001ac4 	.word	0x20001ac4

00012204 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   12204:	b538      	push	{r3, r4, r5, lr}
   12206:	4604      	mov	r4, r0
   12208:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   1220a:	f7fc ff13 	bl	f034 <_ZN9ClearCore9ConnectorC1Ev>
   1220e:	4b02      	ldr	r3, [pc, #8]	; (12218 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   12210:	60a5      	str	r5, [r4, #8]
   12212:	6023      	str	r3, [r4, #0]
   12214:	4620      	mov	r0, r4
   12216:	bd38      	pop	{r3, r4, r5, pc}
   12218:	00024154 	.word	0x00024154

0001221c <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   1221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   1221e:	4d19      	ldr	r5, [pc, #100]	; (12284 <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   12220:	682c      	ldr	r4, [r5, #0]
   12222:	f014 0401 	ands.w	r4, r4, #1
   12226:	d002      	beq.n	1222e <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   12228:	4b17      	ldr	r3, [pc, #92]	; (12288 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   1222a:	6818      	ldr	r0, [r3, #0]
   1222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1222e:	2044      	movs	r0, #68	; 0x44
   12230:	f001 fe66 	bl	13f00 <_Znwj>
   12234:	4a14      	ldr	r2, [pc, #80]	; (12288 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   12236:	4f15      	ldr	r7, [pc, #84]	; (1228c <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   12238:	4e15      	ldr	r6, [pc, #84]	; (12290 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   1223a:	4916      	ldr	r1, [pc, #88]	; (12294 <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   1223c:	6004      	str	r4, [r0, #0]
   1223e:	2301      	movs	r3, #1
   12240:	6044      	str	r4, [r0, #4]
   12242:	6084      	str	r4, [r0, #8]
   12244:	60c4      	str	r4, [r0, #12]
   12246:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   12248:	6144      	str	r4, [r0, #20]
   1224a:	6184      	str	r4, [r0, #24]
   1224c:	61c4      	str	r4, [r0, #28]
   1224e:	6244      	str	r4, [r0, #36]	; 0x24
   12250:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   12254:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   12258:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   1225c:	6204      	str	r4, [r0, #32]
   1225e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   12262:	8584      	strh	r4, [r0, #44]	; 0x2c
   12264:	85c4      	strh	r4, [r0, #46]	; 0x2e
   12266:	8604      	strh	r4, [r0, #48]	; 0x30
   12268:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   1226c:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   12270:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   12274:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   12278:	6347      	str	r7, [r0, #52]	; 0x34
   1227a:	6386      	str	r6, [r0, #56]	; 0x38
   1227c:	63c1      	str	r1, [r0, #60]	; 0x3c
   1227e:	6010      	str	r0, [r2, #0]
   12280:	602b      	str	r3, [r5, #0]
    return *instance;
}
   12282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12284:	20001f14 	.word	0x20001f14
   12288:	20001f1c 	.word	0x20001f1c
   1228c:	09c400fa 	.word	0x09c400fa
   12290:	2cec1388 	.word	0x2cec1388
   12294:	09c41388 	.word	0x09c41388

00012298 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   12298:	6840      	ldr	r0, [r0, #4]
   1229a:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   1229e:	4008      	ands	r0, r1
   122a0:	4770      	bx	lr
   122a2:	bf00      	nop

000122a4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   122a4:	6840      	ldr	r0, [r0, #4]
   122a6:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   122aa:	f3c0 2000 	ubfx	r0, r0, #8, #1
   122ae:	4770      	bx	lr

000122b0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   122b0:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   122b2:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   122b4:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   122b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   122ba:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   122bc:	4802      	ldr	r0, [pc, #8]	; (122c8 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   122be:	f7f9 f9cd 	bl	b65c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   122c2:	2001      	movs	r0, #1
   122c4:	bd08      	pop	{r3, pc}
   122c6:	bf00      	nop
   122c8:	200019d0 	.word	0x200019d0

000122cc <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   122cc:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   122d0:	b951      	cbnz	r1, 122e8 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   122d2:	4b17      	ldr	r3, [pc, #92]	; (12330 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   122d4:	2204      	movs	r2, #4
   122d6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   122da:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   122de:	f042 0201 	orr.w	r2, r2, #1
   122e2:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   122e6:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   122e8:	1d03      	adds	r3, r0, #4
   122ea:	f3bf 8f5b 	dmb	ish
   122ee:	e853 2f00 	ldrex	r2, [r3]
   122f2:	f042 0208 	orr.w	r2, r2, #8
   122f6:	e843 2100 	strex	r1, r2, [r3]
   122fa:	2900      	cmp	r1, #0
   122fc:	d1f7      	bne.n	122ee <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   122fe:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   12302:	f3bf 8f5b 	dmb	ish
   12306:	300c      	adds	r0, #12
   12308:	e850 3f00 	ldrex	r3, [r0]
   1230c:	f043 0308 	orr.w	r3, r3, #8
   12310:	e840 3200 	strex	r2, r3, [r0]
   12314:	2a00      	cmp	r2, #0
   12316:	d1f7      	bne.n	12308 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   12318:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   1231c:	4b04      	ldr	r3, [pc, #16]	; (12330 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   1231e:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   12320:	2102      	movs	r1, #2
   12322:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   12326:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   1232a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1232e:	4770      	bx	lr
   12330:	41008000 	.word	0x41008000

00012334 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   12334:	4401      	add	r1, r0
   12336:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   1233a:	431a      	orrs	r2, r3
   1233c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   12340:	4770      	bx	lr
   12342:	bf00      	nop

00012344 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   12344:	b2cb      	uxtb	r3, r1
   12346:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   12348:	b510      	push	{r4, lr}
   1234a:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   1234c:	d505      	bpl.n	1235a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   1234e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   12352:	f042 0202 	orr.w	r2, r2, #2
   12356:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   1235a:	0798      	lsls	r0, r3, #30
   1235c:	d505      	bpl.n	1236a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   1235e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   12362:	f042 0201 	orr.w	r2, r2, #1
   12366:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   1236a:	075a      	lsls	r2, r3, #29
   1236c:	d505      	bpl.n	1237a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   1236e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   12372:	f042 0201 	orr.w	r2, r2, #1
   12376:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   1237a:	06d8      	lsls	r0, r3, #27
   1237c:	d505      	bpl.n	1238a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   1237e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   12382:	f042 0204 	orr.w	r2, r2, #4
   12386:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   1238a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1238e:	06ca      	lsls	r2, r1, #27
   12390:	d505      	bpl.n	1239e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   12392:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   12396:	f042 0202 	orr.w	r2, r2, #2
   1239a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   1239e:	4a14      	ldr	r2, [pc, #80]	; (123f0 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   123a0:	6812      	ldr	r2, [r2, #0]
   123a2:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   123a6:	b112      	cbz	r2, 123ae <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   123a8:	f011 0f0c 	tst.w	r1, #12
   123ac:	d118      	bne.n	123e0 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   123ae:	061b      	lsls	r3, r3, #24
   123b0:	d505      	bpl.n	123be <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   123b2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   123b6:	f043 0308 	orr.w	r3, r3, #8
   123ba:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   123be:	f104 0024 	add.w	r0, r4, #36	; 0x24
   123c2:	f001 fc29 	bl	13c18 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   123c6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   123ca:	4a0a      	ldr	r2, [pc, #40]	; (123f4 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   123cc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   123d0:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   123d4:	3300      	adds	r3, #0
   123d6:	bf18      	it	ne
   123d8:	2301      	movne	r3, #1
   123da:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   123de:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   123e0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   123e4:	f042 0204 	orr.w	r2, r2, #4
   123e8:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   123ec:	e7df      	b.n	123ae <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   123ee:	bf00      	nop
   123f0:	20001bf0 	.word	0x20001bf0
   123f4:	200019d0 	.word	0x200019d0

000123f8 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   123f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123fc:	b082      	sub	sp, #8
            reg = 0;
   123fe:	2300      	movs	r3, #0
   12400:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   12402:	4b98      	ldr	r3, [pc, #608]	; (12664 <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   12404:	6844      	ldr	r4, [r0, #4]
   12406:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1240a:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   1240c:	4f96      	ldr	r7, [pc, #600]	; (12668 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1240e:	8a13      	ldrh	r3, [r2, #16]
   12410:	f8df 8274 	ldr.w	r8, [pc, #628]	; 12688 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   12414:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   12416:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   12418:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1241a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   1241c:	bf4c      	ite	mi
   1241e:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   12422:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   12426:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   12428:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1242c:	4e8f      	ldr	r6, [pc, #572]	; (1266c <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1242e:	bfd4      	ite	le
   12430:	2300      	movle	r3, #0
   12432:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   12434:	f363 0000 	bfi	r0, r3, #0, #1
   12438:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   1243c:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1243e:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   12440:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   12442:	b29b      	uxth	r3, r3
    return (currentStatus &&
   12444:	bf4c      	ite	mi
   12446:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1244a:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   1244e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   12450:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   12454:	bfcc      	ite	gt
   12456:	2300      	movgt	r3, #0
   12458:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   1245a:	f363 0041 	bfi	r0, r3, #1, #1
   1245e:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   12462:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   12464:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   12468:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   1246a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   1246c:	bf4c      	ite	mi
   1246e:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   12472:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   12476:	428b      	cmp	r3, r1
   12478:	bfcc      	ite	gt
   1247a:	2300      	movgt	r3, #0
   1247c:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   1247e:	f363 1004 	bfi	r0, r3, #4, #1
   12482:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   12486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   1248a:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   1248e:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   12492:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   12496:	4976      	ldr	r1, [pc, #472]	; (12670 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   12498:	4f76      	ldr	r7, [pc, #472]	; (12674 <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   1249a:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   1249c:	43db      	mvns	r3, r3
   1249e:	b2c0      	uxtb	r0, r0
   124a0:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   124a4:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   124a8:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   124aa:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   124ae:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   124b2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   124b6:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   124ba:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   124be:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   124c2:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   124c4:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   124c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   124cc:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   124d0:	bf18      	it	ne
   124d2:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   124d4:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   124d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   124dc:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   124e0:	f083 0301 	eor.w	r3, r3, #1
   124e4:	f363 0241 	bfi	r2, r3, #1, #1
   124e8:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   124ec:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   124ee:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   124f2:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   124f6:	b2d2      	uxtb	r2, r2
   124f8:	f361 0282 	bfi	r2, r1, #2, #1
   124fc:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   12500:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   12504:	4a5c      	ldr	r2, [pc, #368]	; (12678 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   12506:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   1250a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1250e:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   12512:	f89d 3005 	ldrb.w	r3, [sp, #5]
   12516:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   12518:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   1251c:	4857      	ldr	r0, [pc, #348]	; (1267c <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   1251e:	f88d 1004 	strb.w	r1, [sp, #4]
   12522:	bf18      	it	ne
   12524:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   12526:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   1252a:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   1252e:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   12530:	4e53      	ldr	r6, [pc, #332]	; (12680 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   12532:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   12536:	f362 1345 	bfi	r3, r2, #5, #1
   1253a:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   1253e:	4628      	mov	r0, r5
   12540:	9901      	ldr	r1, [sp, #4]
   12542:	f7ff feff 	bl	12344 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   12546:	6830      	ldr	r0, [r6, #0]
   12548:	6803      	ldr	r3, [r0, #0]
   1254a:	681b      	ldr	r3, [r3, #0]
   1254c:	4543      	cmp	r3, r8
   1254e:	f040 8084 	bne.w	1265a <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   12552:	7980      	ldrb	r0, [r0, #6]
   12554:	2804      	cmp	r0, #4
   12556:	d00c      	beq.n	12572 <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   12558:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   1255c:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   12560:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   12564:	bf14      	ite	ne
   12566:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   1256a:	f023 0308 	biceq.w	r3, r3, #8
   1256e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   12572:	6870      	ldr	r0, [r6, #4]
   12574:	6803      	ldr	r3, [r0, #0]
   12576:	681b      	ldr	r3, [r3, #0]
   12578:	4543      	cmp	r3, r8
   1257a:	d170      	bne.n	1265e <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   1257c:	7980      	ldrb	r0, [r0, #6]
   1257e:	2804      	cmp	r0, #4
   12580:	d00c      	beq.n	1259c <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   12582:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   12586:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   1258a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1258e:	bf14      	ite	ne
   12590:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   12594:	f023 0304 	biceq.w	r3, r3, #4
   12598:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   1259c:	9a01      	ldr	r2, [sp, #4]
   1259e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   125a2:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   125a4:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   125a6:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   125aa:	f105 0210 	add.w	r2, r5, #16
   125ae:	f3bf 8f5b 	dmb	ish
   125b2:	e852 1f00 	ldrex	r1, [r2]
   125b6:	4319      	orrs	r1, r3
   125b8:	e842 1000 	strex	r0, r1, [r2]
   125bc:	2800      	cmp	r0, #0
   125be:	d1f8      	bne.n	125b2 <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   125c0:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   125c4:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   125c6:	f3bf 8f5b 	dmb	ish
   125ca:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   125ce:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   125d2:	e853 2f00 	ldrex	r2, [r3]
   125d6:	4322      	orrs	r2, r4
   125d8:	e843 2100 	strex	r1, r2, [r3]
   125dc:	2900      	cmp	r1, #0
   125de:	d1f8      	bne.n	125d2 <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   125e0:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   125e4:	f105 0308 	add.w	r3, r5, #8
   125e8:	9a01      	ldr	r2, [sp, #4]
   125ea:	f3bf 8f5b 	dmb	ish
   125ee:	e853 1f00 	ldrex	r1, [r3]
   125f2:	4311      	orrs	r1, r2
   125f4:	e843 1000 	strex	r0, r1, [r3]
   125f8:	2800      	cmp	r0, #0
   125fa:	d1f8      	bne.n	125ee <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   125fc:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   12600:	9b01      	ldr	r3, [sp, #4]
   12602:	f3bf 8f5b 	dmb	ish
   12606:	e855 2f00 	ldrex	r2, [r5]
   1260a:	431a      	orrs	r2, r3
   1260c:	e845 2100 	strex	r1, r2, [r5]
   12610:	2900      	cmp	r1, #0
   12612:	d1f8      	bne.n	12606 <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   12614:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   12618:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   1261a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   1261e:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   12622:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   12626:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   12628:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   1262c:	d012      	beq.n	12654 <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   1262e:	4c15      	ldr	r4, [pc, #84]	; (12684 <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   12630:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   12634:	f854 0b04 	ldr.w	r0, [r4], #4
   12638:	f7f3 f9f4 	bl	5a24 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   1263c:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   1263e:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   12642:	d1f7      	bne.n	12634 <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   12644:	6830      	ldr	r0, [r6, #0]
   12646:	f7fc fdbb 	bl	f1c0 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   1264a:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   1264e:	6870      	ldr	r0, [r6, #4]
   12650:	f7fc fdb6 	bl	f1c0 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   12654:	b002      	add	sp, #8
   12656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   1265a:	4798      	blx	r3
   1265c:	e77a      	b.n	12554 <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   1265e:	4798      	blx	r3
   12660:	e78d      	b.n	1257e <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   12662:	bf00      	nop
   12664:	20001dfc 	.word	0x20001dfc
   12668:	41008000 	.word	0x41008000
   1266c:	20001bf0 	.word	0x20001bf0
   12670:	20001efc 	.word	0x20001efc
   12674:	200019d0 	.word	0x200019d0
   12678:	20001884 	.word	0x20001884
   1267c:	20001f24 	.word	0x20001f24
   12680:	000239f8 	.word	0x000239f8
   12684:	00023a00 	.word	0x00023a00
   12688:	0000f149 	.word	0x0000f149

0001268c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   1268c:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   1268e:	b94a      	cbnz	r2, 126a4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   12690:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   12694:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   12696:	6983      	ldr	r3, [r0, #24]
   12698:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   1269a:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   1269c:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   1269e:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   126a0:	6181      	str	r1, [r0, #24]
   126a2:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   126a4:	4319      	orrs	r1, r3
   126a6:	e7f5      	b.n	12694 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

000126a8 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   126a8:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   126aa:	f7ff fdb7 	bl	1221c <_ZN9ClearCore13StatusManager8InstanceEv>
   126ae:	4b01      	ldr	r3, [pc, #4]	; (126b4 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   126b0:	6018      	str	r0, [r3, #0]
   126b2:	bd08      	pop	{r3, pc}
   126b4:	20001f18 	.word	0x20001f18

000126b8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   126b8:	b530      	push	{r4, r5, lr}
   126ba:	b083      	sub	sp, #12
   126bc:	f89d 401c 	ldrb.w	r4, [sp, #28]
   126c0:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   126c2:	9401      	str	r4, [sp, #4]
   126c4:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   126c6:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   126c8:	f7ff f8d4 	bl	11874 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   126cc:	4b04      	ldr	r3, [pc, #16]	; (126e0 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   126ce:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   126d0:	4620      	mov	r0, r4
   126d2:	2100      	movs	r1, #0
   126d4:	f7ff f92c 	bl	11930 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   126d8:	4620      	mov	r0, r4
   126da:	b003      	add	sp, #12
   126dc:	bd30      	pop	{r4, r5, pc}
   126de:	bf00      	nop
   126e0:	000239a4 	.word	0x000239a4

000126e4 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   126e4:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   126e6:	4d0f      	ldr	r5, [pc, #60]	; (12724 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   126e8:	682b      	ldr	r3, [r5, #0]
   126ea:	f013 0401 	ands.w	r4, r3, #1
   126ee:	d002      	beq.n	126f6 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   126f0:	4b0d      	ldr	r3, [pc, #52]	; (12728 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   126f2:	6818      	ldr	r0, [r3, #0]
   126f4:	bd38      	pop	{r3, r4, r5, pc}
   126f6:	f44f 7002 	mov.w	r0, #520	; 0x208
   126fa:	f001 fc01 	bl	13f00 <_Znwj>
   126fe:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   12700:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   12704:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   12708:	4908      	ldr	r1, [pc, #32]	; (1272c <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   1270a:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   1270e:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   12712:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   12716:	f00c fb93 	bl	1ee40 <memcpy>
    static NvmManager *instance = new NvmManager();
   1271a:	4903      	ldr	r1, [pc, #12]	; (12728 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   1271c:	2201      	movs	r2, #1
   1271e:	6008      	str	r0, [r1, #0]
   12720:	602a      	str	r2, [r5, #0]
}
   12722:	bd38      	pop	{r3, r4, r5, pc}
   12724:	20001f20 	.word	0x20001f20
   12728:	20001f28 	.word	0x20001f28
   1272c:	00804000 	.word	0x00804000

00012730 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   12730:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   12734:	bf9a      	itte	ls
   12736:	1840      	addls	r0, r0, r1
   12738:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   1273c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   12740:	4770      	bx	lr
   12742:	bf00      	nop

00012744 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   12744:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   12746:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   1274a:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   1274e:	2400      	movs	r4, #0
   12750:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   12754:	1c6b      	adds	r3, r5, #1
   12756:	bf08      	it	eq
   12758:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1275c:	d005      	beq.n	1276a <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   1275e:	0c2e      	lsrs	r6, r5, #16
   12760:	4627      	mov	r7, r4
   12762:	ea56 0007 	orrs.w	r0, r6, r7
   12766:	462b      	mov	r3, r5
   12768:	d002      	beq.n	12770 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   1276a:	4a07      	ldr	r2, [pc, #28]	; (12788 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   1276c:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   12770:	0a1e      	lsrs	r6, r3, #8
   12772:	0e15      	lsrs	r5, r2, #24
   12774:	0c14      	lsrs	r4, r2, #16
   12776:	0a10      	lsrs	r0, r2, #8
   12778:	700e      	strb	r6, [r1, #0]
   1277a:	708d      	strb	r5, [r1, #2]
   1277c:	70cc      	strb	r4, [r1, #3]
   1277e:	704b      	strb	r3, [r1, #1]
   12780:	714a      	strb	r2, [r1, #5]
   12782:	7108      	strb	r0, [r1, #4]
    }
}
   12784:	bcf0      	pop	{r4, r5, r6, r7}
   12786:	4770      	bx	lr
   12788:	10b00000 	.word	0x10b00000

0001278c <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   1278c:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   1278e:	f7ff ffa9 	bl	126e4 <_ZN9ClearCore10NvmManager8InstanceEv>
   12792:	4b01      	ldr	r3, [pc, #4]	; (12798 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   12794:	6018      	str	r0, [r3, #0]
   12796:	bd08      	pop	{r3, pc}
   12798:	20001f24 	.word	0x20001f24

0001279c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   1279c:	2000      	movs	r0, #0
   1279e:	4770      	bx	lr

000127a0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   127a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127a4:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   127a6:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   127a8:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   127aa:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   127ae:	2900      	cmp	r1, #0
   127b0:	d04f      	beq.n	12852 <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   127b2:	4b55      	ldr	r3, [pc, #340]	; (12908 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   127b4:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   127b8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   127bc:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   127c0:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   127c2:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   127c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
   127c8:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   127ca:	f000 8095 	beq.w	128f8 <_usb_d_dev_in_next+0x158>
   127ce:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   127d2:	f895 c013 	ldrb.w	ip, [r5, #19]
   127d6:	401a      	ands	r2, r3
   127d8:	b292      	uxth	r2, r2
   127da:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127de:	0163      	lsls	r3, r4, #5
   127e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   127e4:	2602      	movs	r6, #2
   127e6:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   127ea:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   127ec:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   127ee:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   127f0:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   127f2:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   127f4:	d235      	bcs.n	12862 <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   127f6:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   127f8:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   127fc:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   127fe:	d05e      	beq.n	128be <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   12800:	682b      	ldr	r3, [r5, #0]
   12802:	68e8      	ldr	r0, [r5, #12]
   12804:	4576      	cmp	r6, lr
   12806:	bf28      	it	cs
   12808:	4676      	movcs	r6, lr
   1280a:	4419      	add	r1, r3
   1280c:	4632      	mov	r2, r6
   1280e:	f00c fb17 	bl	1ee40 <memcpy>
	bank->ADDR.reg          = addr;
   12812:	4b3d      	ldr	r3, [pc, #244]	; (12908 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   12814:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   12816:	0162      	lsls	r2, r4, #5
   12818:	1899      	adds	r1, r3, r2
   1281a:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   1281c:	4413      	add	r3, r2
   1281e:	6959      	ldr	r1, [r3, #20]
   12820:	f366 010d 	bfi	r1, r6, #0, #14
   12824:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   12826:	6959      	ldr	r1, [r3, #20]
   12828:	f36f 319b 	bfc	r1, #14, #14
   1282c:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   1282e:	b947      	cbnz	r7, 12842 <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12830:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   12834:	f1b8 0f01 	cmp.w	r8, #1
   12838:	bf14      	ite	ne
   1283a:	224a      	movne	r2, #74	; 0x4a
   1283c:	224e      	moveq	r2, #78	; 0x4e
   1283e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12842:	0164      	lsls	r4, r4, #5
   12844:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   12848:	2380      	movs	r3, #128	; 0x80
   1284a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   1284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12852:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   12856:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   1285a:	f00c 0807 	and.w	r8, ip, #7
   1285e:	460a      	mov	r2, r1
   12860:	e7c3      	b.n	127ea <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   12862:	f01c 0f10 	tst.w	ip, #16
   12866:	d11a      	bne.n	1289e <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12868:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   1286a:	f1b8 0f01 	cmp.w	r8, #1
   1286e:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   12872:	bf0c      	ite	eq
   12874:	234b      	moveq	r3, #75	; 0x4b
   12876:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   12878:	4596      	cmp	lr, r2
   1287a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1287e:	d02c      	beq.n	128da <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12880:	28ff      	cmp	r0, #255	; 0xff
   12882:	d028      	beq.n	128d6 <_usb_d_dev_in_next+0x136>
   12884:	7ceb      	ldrb	r3, [r5, #19]
   12886:	065a      	lsls	r2, r3, #25
   12888:	d525      	bpl.n	128d6 <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   1288a:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1288e:	491f      	ldr	r1, [pc, #124]	; (1290c <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   12890:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12892:	68aa      	ldr	r2, [r5, #8]
   12894:	690b      	ldr	r3, [r1, #16]
}
   12896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1289a:	2100      	movs	r1, #0
   1289c:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   1289e:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   128a0:	4b1b      	ldr	r3, [pc, #108]	; (12910 <_usb_d_dev_in_next+0x170>)
   128a2:	0162      	lsls	r2, r4, #5
   128a4:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   128a6:	f36f 1104 	bfc	r1, #4, #1
   128aa:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   128ac:	6859      	ldr	r1, [r3, #4]
   128ae:	f36f 010d 	bfc	r1, #0, #14
   128b2:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   128b4:	6859      	ldr	r1, [r3, #4]
   128b6:	f36f 319b 	bfc	r1, #14, #14
   128ba:	6059      	str	r1, [r3, #4]
   128bc:	e7b7      	b.n	1282e <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   128be:	4b12      	ldr	r3, [pc, #72]	; (12908 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   128c0:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   128c2:	0162      	lsls	r2, r4, #5
   128c4:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   128c6:	4401      	add	r1, r0
   128c8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   128cc:	bf28      	it	cs
   128ce:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   128d2:	6129      	str	r1, [r5, #16]
   128d4:	e7a2      	b.n	1281c <_usb_d_dev_in_next+0x7c>
   128d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   128da:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   128dc:	4a0b      	ldr	r2, [pc, #44]	; (1290c <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   128de:	f36f 1386 	bfc	r3, #6, #1
   128e2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   128e4:	68d3      	ldr	r3, [r2, #12]
   128e6:	4798      	blx	r3
   128e8:	2800      	cmp	r0, #0
   128ea:	d1f4      	bne.n	128d6 <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   128ec:	7ceb      	ldrb	r3, [r5, #19]
   128ee:	7ca8      	ldrb	r0, [r5, #18]
   128f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   128f4:	74eb      	strb	r3, [r5, #19]
   128f6:	e7c3      	b.n	12880 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   128f8:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   128fc:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12900:	f00c 0807 	and.w	r8, ip, #7
   12904:	e76b      	b.n	127de <_usb_d_dev_in_next+0x3e>
   12906:	bf00      	nop
   12908:	2000221c 	.word	0x2000221c
   1290c:	20001fec 	.word	0x20001fec
   12910:	2000222c 	.word	0x2000222c

00012914 <_usb_d_dev_out_next>:
{
   12914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   12918:	7c85      	ldrb	r5, [r0, #18]
{
   1291a:	b083      	sub	sp, #12
   1291c:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1291e:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   12920:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12924:	2900      	cmp	r1, #0
   12926:	f000 8085 	beq.w	12a34 <_usb_d_dev_out_next+0x120>
   1292a:	4b76      	ldr	r3, [pc, #472]	; (12b04 <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1292c:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1292e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12932:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12934:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12938:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   1293a:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1293c:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1293e:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12942:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12946:	f000 80d7 	beq.w	12af8 <_usb_d_dev_out_next+0x1e4>
   1294a:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1294c:	7cc2      	ldrb	r2, [r0, #19]
   1294e:	b2b6      	uxth	r6, r6
   12950:	ea09 0306 	and.w	r3, r9, r6
   12954:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12958:	0169      	lsls	r1, r5, #5
   1295a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   1295e:	2001      	movs	r0, #1
   12960:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   12964:	0691      	lsls	r1, r2, #26
   12966:	d512      	bpl.n	1298e <_usb_d_dev_out_next+0x7a>
   12968:	f8d4 e004 	ldr.w	lr, [r4, #4]
   1296c:	f1be 0f00 	cmp.w	lr, #0
   12970:	d048      	beq.n	12a04 <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   12972:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   12974:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   12976:	ebae 0200 	sub.w	r2, lr, r0
   1297a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   1297c:	429a      	cmp	r2, r3
   1297e:	bf28      	it	cs
   12980:	461a      	movcs	r2, r3
   12982:	6823      	ldr	r3, [r4, #0]
   12984:	68e1      	ldr	r1, [r4, #12]
   12986:	4418      	add	r0, r3
   12988:	f00c fa5a 	bl	1ee40 <memcpy>
   1298c:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   1298e:	6862      	ldr	r2, [r4, #4]
   12990:	2a00      	cmp	r2, #0
   12992:	d036      	beq.n	12a02 <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   12994:	2f00      	cmp	r7, #0
   12996:	d15b      	bne.n	12a50 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   12998:	68a3      	ldr	r3, [r4, #8]
   1299a:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   1299c:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   1299e:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   129a0:	d960      	bls.n	12a64 <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   129a2:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   129a4:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   129a6:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   129a8:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   129aa:	f140 808b 	bpl.w	12ac4 <_usb_d_dev_out_next+0x1b0>
   129ae:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   129b0:	4954      	ldr	r1, [pc, #336]	; (12b04 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   129b2:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   129b4:	f841 3008 	str.w	r3, [r1, r8]
   129b8:	42b2      	cmp	r2, r6
   129ba:	bf28      	it	cs
   129bc:	4632      	movcs	r2, r6
   129be:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   129c2:	eb01 0308 	add.w	r3, r1, r8
   129c6:	6858      	ldr	r0, [r3, #4]
   129c8:	f362 309b 	bfi	r0, r2, #14, #14
   129cc:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   129ce:	685a      	ldr	r2, [r3, #4]
   129d0:	f36f 020d 	bfc	r2, #0, #14
   129d4:	605a      	str	r2, [r3, #4]
	if (!isr) {
   129d6:	b95f      	cbnz	r7, 129f0 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   129d8:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   129dc:	bf08      	it	eq
   129de:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   129e0:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   129e4:	bf0a      	itet	eq
   129e6:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   129e8:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   129ea:	768f      	strbeq	r7, [r1, #26]
   129ec:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   129f0:	016d      	lsls	r5, r5, #5
   129f2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   129f6:	2340      	movs	r3, #64	; 0x40
   129f8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   129fc:	b003      	add	sp, #12
   129fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a02:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   12a04:	06d6      	lsls	r6, r2, #27
   12a06:	d54b      	bpl.n	12aa0 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   12a08:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   12a0a:	493e      	ldr	r1, [pc, #248]	; (12b04 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12a0c:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   12a0e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12a12:	f043 0320 	orr.w	r3, r3, #32
   12a16:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   12a18:	f841 2008 	str.w	r2, [r1, r8]
   12a1c:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12a20:	8a20      	ldrh	r0, [r4, #16]
   12a22:	685a      	ldr	r2, [r3, #4]
   12a24:	f360 329b 	bfi	r2, r0, #14, #14
   12a28:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12a2a:	685a      	ldr	r2, [r3, #4]
   12a2c:	f36f 020d 	bfc	r2, #0, #14
   12a30:	605a      	str	r2, [r3, #4]
   12a32:	e7d0      	b.n	129d6 <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12a34:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12a36:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12a38:	f240 33ff 	movw	r3, #1023	; 0x3ff
   12a3c:	429e      	cmp	r6, r3
   12a3e:	d137      	bne.n	12ab0 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12a40:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12a42:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   12a46:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12a48:	46b9      	mov	r9, r7
   12a4a:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12a4e:	e789      	b.n	12964 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   12a50:	8a21      	ldrh	r1, [r4, #16]
   12a52:	4299      	cmp	r1, r3
   12a54:	d9a0      	bls.n	12998 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   12a56:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   12a58:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   12a5a:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   12a5e:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   12a60:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   12a62:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   12a64:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12a68:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   12a6c:	bf0c      	ite	eq
   12a6e:	232d      	moveq	r3, #45	; 0x2d
   12a70:	2325      	movne	r3, #37	; 0x25
   12a72:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   12a76:	b915      	cbnz	r5, 12a7e <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   12a78:	4b22      	ldr	r3, [pc, #136]	; (12b04 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12a7a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   12a7c:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12a7e:	7ca0      	ldrb	r0, [r4, #18]
   12a80:	28ff      	cmp	r0, #255	; 0xff
   12a82:	d0bb      	beq.n	129fc <_usb_d_dev_out_next+0xe8>
   12a84:	7ce3      	ldrb	r3, [r4, #19]
   12a86:	065a      	lsls	r2, r3, #25
   12a88:	d5b8      	bpl.n	129fc <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   12a8a:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a8e:	491e      	ldr	r1, [pc, #120]	; (12b08 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   12a90:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a92:	690b      	ldr	r3, [r1, #16]
   12a94:	68a2      	ldr	r2, [r4, #8]
   12a96:	2100      	movs	r1, #0
}
   12a98:	b003      	add	sp, #12
   12a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a9e:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   12aa0:	b117      	cbz	r7, 12aa8 <_usb_d_dev_out_next+0x194>
   12aa2:	8a22      	ldrh	r2, [r4, #16]
   12aa4:	429a      	cmp	r2, r3
   12aa6:	d8d6      	bhi.n	12a56 <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   12aa8:	68a3      	ldr	r3, [r4, #8]
   12aaa:	4453      	add	r3, sl
   12aac:	60a3      	str	r3, [r4, #8]
   12aae:	e7d9      	b.n	12a64 <_usb_d_dev_out_next+0x150>
   12ab0:	3e01      	subs	r6, #1
   12ab2:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12ab4:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12ab8:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12aba:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12abc:	4689      	mov	r9, r1
   12abe:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12ac2:	e74f      	b.n	12964 <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   12ac4:	8a20      	ldrh	r0, [r4, #16]
   12ac6:	4282      	cmp	r2, r0
   12ac8:	d905      	bls.n	12ad6 <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   12aca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   12ace:	d90e      	bls.n	12aee <_usb_d_dev_out_next+0x1da>
   12ad0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   12ad4:	e005      	b.n	12ae2 <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   12ad6:	bf3c      	itt	cc
   12ad8:	f041 0120 	orrcc.w	r1, r1, #32
   12adc:	74e1      	strbcc	r1, [r4, #19]
   12ade:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12ae2:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   12ae4:	4907      	ldr	r1, [pc, #28]	; (12b04 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12ae6:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   12ae8:	f841 3008 	str.w	r3, [r1, r8]
   12aec:	e769      	b.n	129c2 <_usb_d_dev_out_next+0xae>
   12aee:	ea22 0206 	bic.w	r2, r2, r6
   12af2:	f3c2 020d 	ubfx	r2, r2, #0, #14
   12af6:	e7f4      	b.n	12ae2 <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12af8:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   12afa:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12afe:	f002 0b07 	and.w	fp, r2, #7
   12b02:	e729      	b.n	12958 <_usb_d_dev_out_next+0x44>
   12b04:	2000221c 	.word	0x2000221c
   12b08:	20001fec 	.word	0x20001fec

00012b0c <_usb_d_dev_handler>:
{
   12b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   12b10:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   12b14:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   12b16:	8c16      	ldrh	r6, [r2, #32]
   12b18:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   12b1a:	2e00      	cmp	r6, #0
   12b1c:	f000 812c 	beq.w	12d78 <_usb_d_dev_handler+0x26c>
   12b20:	4dc4      	ldr	r5, [pc, #784]	; (12e34 <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12b22:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   12b24:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   12b26:	7ca8      	ldrb	r0, [r5, #18]
   12b28:	28ff      	cmp	r0, #255	; 0xff
   12b2a:	d030      	beq.n	12b8e <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12b2c:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   12b30:	fa07 f203 	lsl.w	r2, r7, r3
   12b34:	4232      	tst	r2, r6
   12b36:	d02a      	beq.n	12b8e <_usb_d_dev_handler+0x82>
   12b38:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   12b3c:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12b40:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   12b42:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12b46:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   12b4a:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12b4c:	46c1      	mov	r9, r8
	if (flags) {
   12b4e:	d01e      	beq.n	12b8e <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   12b50:	49b9      	ldr	r1, [pc, #740]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12b52:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   12b56:	eb0a 0c04 	add.w	ip, sl, r4
   12b5a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   12b5e:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   12b62:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   12b66:	2901      	cmp	r1, #1
   12b68:	f000 80f4 	beq.w	12d54 <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   12b6c:	f01b 0f80 	tst.w	fp, #128	; 0x80
   12b70:	d115      	bne.n	12b9e <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   12b72:	f013 0120 	ands.w	r1, r3, #32
   12b76:	d15a      	bne.n	12c2e <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   12b78:	f013 0f04 	tst.w	r3, #4
   12b7c:	f040 8098 	bne.w	12cb0 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   12b80:	07d9      	lsls	r1, r3, #31
   12b82:	f100 80e2 	bmi.w	12d4a <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   12b86:	f00b 0107 	and.w	r1, fp, #7
   12b8a:	2901      	cmp	r1, #1
   12b8c:	d058      	beq.n	12c40 <_usb_d_dev_handler+0x134>
   12b8e:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   12b90:	2c1b      	cmp	r4, #27
   12b92:	f105 0514 	add.w	r5, r5, #20
   12b96:	d1c6      	bne.n	12b26 <_usb_d_dev_handler+0x1a>
}
   12b98:	b001      	add	sp, #4
   12b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   12b9e:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   12ba2:	f040 8143 	bne.w	12e2c <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12ba6:	f013 0f08 	tst.w	r3, #8
   12baa:	f040 8189 	bne.w	12ec0 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   12bae:	0799      	lsls	r1, r3, #30
   12bb0:	f100 8137 	bmi.w	12e22 <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   12bb4:	f00b 0107 	and.w	r1, fp, #7
   12bb8:	2901      	cmp	r1, #1
   12bba:	d1e8      	bne.n	12b8e <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   12bbc:	0759      	lsls	r1, r3, #29
   12bbe:	f100 8241 	bmi.w	13044 <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12bc2:	06db      	lsls	r3, r3, #27
   12bc4:	d5e3      	bpl.n	12b8e <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12bc6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12bca:	d011      	beq.n	12bf0 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   12bcc:	499a      	ldr	r1, [pc, #616]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12bce:	eb0a 0304 	add.w	r3, sl, r4
   12bd2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12bd6:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12bda:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   12bde:	f36f 1186 	bfc	r1, #6, #1
   12be2:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12be6:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12be8:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12bec:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12bf0:	4b91      	ldr	r3, [pc, #580]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12bf2:	eb0a 0104 	add.w	r1, sl, r4
   12bf6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   12bfa:	4b90      	ldr	r3, [pc, #576]	; (12e3c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   12bfc:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12c00:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12c04:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12c08:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12c0c:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12c10:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12c14:	216f      	movs	r1, #111	; 0x6f
   12c16:	f88e c00a 	strb.w	ip, [lr, #10]
   12c1a:	f88e c01a 	strb.w	ip, [lr, #26]
   12c1e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12c22:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12c26:	4b84      	ldr	r3, [pc, #528]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12c28:	689b      	ldr	r3, [r3, #8]
   12c2a:	4798      	blx	r3
   12c2c:	e7af      	b.n	12b8e <_usb_d_dev_handler+0x82>
   12c2e:	68aa      	ldr	r2, [r5, #8]
   12c30:	2320      	movs	r3, #32
   12c32:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12c36:	4b80      	ldr	r3, [pc, #512]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12c38:	2101      	movs	r1, #1
   12c3a:	691b      	ldr	r3, [r3, #16]
   12c3c:	4798      	blx	r3
   12c3e:	e7a6      	b.n	12b8e <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12c40:	0719      	lsls	r1, r3, #28
   12c42:	f100 80fd 	bmi.w	12e40 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12c46:	06db      	lsls	r3, r3, #27
   12c48:	d5a1      	bpl.n	12b8e <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12c4a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12c4e:	d011      	beq.n	12c74 <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   12c50:	4979      	ldr	r1, [pc, #484]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12c52:	eb0a 0304 	add.w	r3, sl, r4
   12c56:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c5a:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12c5e:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   12c62:	f36f 1186 	bfc	r1, #6, #1
   12c66:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c6a:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c6c:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c70:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12c74:	4b70      	ldr	r3, [pc, #448]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12c76:	eb0a 0104 	add.w	r1, sl, r4
   12c7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   12c7e:	4b6f      	ldr	r3, [pc, #444]	; (12e3c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   12c80:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12c84:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12c88:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12c8c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12c90:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12c94:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   12c96:	2100      	movs	r1, #0
   12c98:	f88e 100a 	strb.w	r1, [lr, #10]
   12c9c:	f88e 101a 	strb.w	r1, [lr, #26]
   12ca0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12ca4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12ca8:	4b63      	ldr	r3, [pc, #396]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12caa:	689b      	ldr	r3, [r3, #8]
   12cac:	4798      	blx	r3
   12cae:	e76e      	b.n	12b8e <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12cb0:	4b62      	ldr	r3, [pc, #392]	; (12e3c <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12cb2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   12cb6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12cb8:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12cbc:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12cc0:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12cc4:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12cc6:	d07c      	beq.n	12dc2 <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   12cc8:	f013 0302 	ands.w	r3, r3, #2
   12ccc:	d032      	beq.n	12d34 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12cce:	f89e 100a 	ldrb.w	r1, [lr, #10]
   12cd2:	f36f 0141 	bfc	r1, #1, #1
   12cd6:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12cda:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12cde:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12ce2:	2204      	movs	r2, #4
   12ce4:	2901      	cmp	r1, #1
   12ce6:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12cea:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   12cee:	f47f af4e 	bne.w	12b8e <_usb_d_dev_handler+0x82>
   12cf2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12cf6:	f43f af4a 	beq.w	12b8e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12cfa:	494f      	ldr	r1, [pc, #316]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12cfc:	eb0a 0204 	add.w	r2, sl, r4
   12d00:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   12d04:	3220      	adds	r2, #32
   12d06:	79d1      	ldrb	r1, [r2, #7]
   12d08:	09c9      	lsrs	r1, r1, #7
   12d0a:	f43f af40 	beq.w	12b8e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d0e:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12d10:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12d14:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d18:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d1c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12d20:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12d22:	4b45      	ldr	r3, [pc, #276]	; (12e38 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12d24:	f36f 1186 	bfc	r1, #6, #1
   12d28:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12d2a:	691b      	ldr	r3, [r3, #16]
   12d2c:	68aa      	ldr	r2, [r5, #8]
   12d2e:	2100      	movs	r1, #0
   12d30:	4798      	blx	r3
   12d32:	e72c      	b.n	12b8e <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   12d34:	4941      	ldr	r1, [pc, #260]	; (12e3c <_usb_d_dev_handler+0x330>)
   12d36:	1888      	adds	r0, r1, r2
   12d38:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d3c:	2104      	movs	r1, #4
   12d3e:	7283      	strb	r3, [r0, #10]
   12d40:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d44:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12d48:	e721      	b.n	12b8e <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   12d4a:	2101      	movs	r1, #1
   12d4c:	4628      	mov	r0, r5
   12d4e:	f7ff fde1 	bl	12914 <_usb_d_dev_out_next>
   12d52:	e71c      	b.n	12b8e <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12d54:	f013 0f10 	tst.w	r3, #16
   12d58:	f040 80e0 	bne.w	12f1c <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   12d5c:	065a      	lsls	r2, r3, #25
   12d5e:	f100 80e7 	bmi.w	12f30 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   12d62:	069b      	lsls	r3, r3, #26
   12d64:	f57f af13 	bpl.w	12b8e <_usb_d_dev_handler+0x82>
   12d68:	2320      	movs	r3, #32
   12d6a:	68aa      	ldr	r2, [r5, #8]
   12d6c:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12d70:	4b31      	ldr	r3, [pc, #196]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12d72:	691b      	ldr	r3, [r3, #16]
   12d74:	4798      	blx	r3
   12d76:	e70a      	b.n	12b8e <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   12d78:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   12d7a:	8b13      	ldrh	r3, [r2, #24]
   12d7c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   12d7e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   12d80:	f013 0004 	ands.w	r0, r3, #4
   12d84:	f040 80dc 	bne.w	12f40 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   12d88:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   12d8c:	f040 80e0 	bne.w	12f50 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   12d90:	0618      	lsls	r0, r3, #24
   12d92:	f100 8140 	bmi.w	13016 <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   12d96:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   12d9a:	f040 8191 	bne.w	130c0 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   12d9e:	f013 0108 	ands.w	r1, r3, #8
   12da2:	f040 819e 	bne.w	130e2 <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   12da6:	07db      	lsls	r3, r3, #31
   12da8:	f57f aeba 	bpl.w	12b20 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12dac:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12db0:	4821      	ldr	r0, [pc, #132]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12db2:	8393      	strh	r3, [r2, #28]
   12db4:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12db6:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12db8:	2570      	movs	r5, #112	; 0x70
   12dba:	2004      	movs	r0, #4
   12dbc:	8315      	strh	r5, [r2, #24]
   12dbe:	4623      	mov	r3, r4
   12dc0:	e0de      	b.n	12f80 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12dc2:	f013 0f01 	tst.w	r3, #1
   12dc6:	f43f af7f 	beq.w	12cc8 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12dca:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12dce:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12dd2:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12dd6:	f04f 0104 	mov.w	r1, #4
   12dda:	f88e 300a 	strb.w	r3, [lr, #10]
   12dde:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12de2:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12de6:	f43f aed2 	beq.w	12b8e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12dea:	4b13      	ldr	r3, [pc, #76]	; (12e38 <_usb_d_dev_handler+0x32c>)
   12dec:	eb0a 0104 	add.w	r1, sl, r4
   12df0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12df4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12df8:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12dfc:	2240      	movs	r2, #64	; 0x40
   12dfe:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12e02:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12e06:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   12e0a:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12e0e:	4b0a      	ldr	r3, [pc, #40]	; (12e38 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12e10:	f36f 1286 	bfc	r2, #6, #1
   12e14:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12e18:	691b      	ldr	r3, [r3, #16]
   12e1a:	68aa      	ldr	r2, [r5, #8]
   12e1c:	2104      	movs	r1, #4
   12e1e:	4798      	blx	r3
   12e20:	e6b5      	b.n	12b8e <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   12e22:	2101      	movs	r1, #1
   12e24:	4628      	mov	r0, r5
   12e26:	f7ff fcbb 	bl	127a0 <_usb_d_dev_in_next>
   12e2a:	e6b0      	b.n	12b8e <_usb_d_dev_handler+0x82>
   12e2c:	68aa      	ldr	r2, [r5, #8]
   12e2e:	2340      	movs	r3, #64	; 0x40
   12e30:	e6ff      	b.n	12c32 <_usb_d_dev_handler+0x126>
   12e32:	bf00      	nop
   12e34:	20002000 	.word	0x20002000
   12e38:	20001fec 	.word	0x20001fec
   12e3c:	2000221c 	.word	0x2000221c
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12e40:	4bc3      	ldr	r3, [pc, #780]	; (13150 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12e42:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12e46:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12e48:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   12e4c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12e50:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12e52:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12e54:	f000 8098 	beq.w	12f88 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   12e58:	f013 0302 	ands.w	r3, r3, #2
   12e5c:	d053      	beq.n	12f06 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12e5e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12e62:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12e66:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12e6a:	2208      	movs	r2, #8
   12e6c:	f88e 101a 	strb.w	r1, [lr, #26]
   12e70:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12e74:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12e78:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12e7c:	f43f ae87 	beq.w	12b8e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12e80:	4ab4      	ldr	r2, [pc, #720]	; (13154 <_usb_d_dev_handler+0x648>)
   12e82:	eb0a 0e04 	add.w	lr, sl, r4
   12e86:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   12e8a:	f10e 0e20 	add.w	lr, lr, #32
   12e8e:	f89e 1007 	ldrb.w	r1, [lr, #7]
   12e92:	09c9      	lsrs	r1, r1, #7
   12e94:	f47f ae7b 	bne.w	12b8e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12e98:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12e9a:	f04f 0c40 	mov.w	ip, #64	; 0x40
   12e9e:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12ea2:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12ea6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12eaa:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12eae:	4ba9      	ldr	r3, [pc, #676]	; (13154 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12eb0:	f361 1286 	bfi	r2, r1, #6, #1
   12eb4:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12eb8:	691b      	ldr	r3, [r3, #16]
   12eba:	68aa      	ldr	r2, [r5, #8]
   12ebc:	4798      	blx	r3
   12ebe:	e666      	b.n	12b8e <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12ec0:	4ba3      	ldr	r3, [pc, #652]	; (13150 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12ec2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   12ec6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12ec8:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   12ecc:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12ed0:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12ed4:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12ed6:	d07a      	beq.n	12fce <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   12ed8:	f013 0302 	ands.w	r3, r3, #2
   12edc:	d013      	beq.n	12f06 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12ede:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12ee2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12ee6:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12eea:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12eee:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12ef2:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12ef4:	f88e 101a 	strb.w	r1, [lr, #26]
   12ef8:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12efc:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12f00:	f47f ae45 	bne.w	12b8e <_usb_d_dev_handler+0x82>
   12f04:	e7b8      	b.n	12e78 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   12f06:	4992      	ldr	r1, [pc, #584]	; (13150 <_usb_d_dev_handler+0x644>)
   12f08:	1888      	adds	r0, r1, r2
   12f0a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12f0e:	2108      	movs	r1, #8
   12f10:	7683      	strb	r3, [r0, #26]
   12f12:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12f16:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12f1a:	e638      	b.n	12b8e <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   12f1c:	f00b 0307 	and.w	r3, fp, #7
   12f20:	2b01      	cmp	r3, #1
   12f22:	d07e      	beq.n	13022 <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12f24:	2310      	movs	r3, #16
   12f26:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   12f2a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   12f2e:	e62e      	b.n	12b8e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12f30:	2340      	movs	r3, #64	; 0x40
   12f32:	68aa      	ldr	r2, [r5, #8]
   12f34:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12f38:	4b86      	ldr	r3, [pc, #536]	; (13154 <_usb_d_dev_handler+0x648>)
   12f3a:	691b      	ldr	r3, [r3, #16]
   12f3c:	4798      	blx	r3
   12f3e:	e626      	b.n	12b8e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12f40:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   12f42:	4b84      	ldr	r3, [pc, #528]	; (13154 <_usb_d_dev_handler+0x648>)
   12f44:	8391      	strh	r1, [r2, #28]
   12f46:	681b      	ldr	r3, [r3, #0]
}
   12f48:	b001      	add	sp, #4
   12f4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   12f4e:	4718      	bx	r3
   12f50:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12f54:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12f56:	4b7e      	ldr	r3, [pc, #504]	; (13150 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12f58:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12f5a:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12f5c:	8314      	strh	r4, [r2, #24]
   12f5e:	891a      	ldrh	r2, [r3, #8]
   12f60:	f002 020f 	and.w	r2, r2, #15
   12f64:	2a03      	cmp	r2, #3
   12f66:	f000 8128 	beq.w	131ba <_usb_d_dev_handler+0x6ae>
   12f6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   12f6c:	f002 020f 	and.w	r2, r2, #15
   12f70:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   12f72:	bf18      	it	ne
   12f74:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12f76:	f000 811f 	beq.w	131b8 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   12f7a:	4b76      	ldr	r3, [pc, #472]	; (13154 <_usb_d_dev_handler+0x648>)
   12f7c:	685b      	ldr	r3, [r3, #4]
   12f7e:	2003      	movs	r0, #3
}
   12f80:	b001      	add	sp, #4
   12f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12f86:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12f88:	07d9      	lsls	r1, r3, #31
   12f8a:	f57f af65 	bpl.w	12e58 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12f8e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12f92:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12f96:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12f9a:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12f9c:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12fa0:	f88e 101a 	strb.w	r1, [lr, #26]
   12fa4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12fa8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12fac:	f43f adef 	beq.w	12b8e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12fb0:	4a68      	ldr	r2, [pc, #416]	; (13154 <_usb_d_dev_handler+0x648>)
   12fb2:	eb0a 0104 	add.w	r1, sl, r4
   12fb6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12fba:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12fbe:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12fc0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12fc4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12fc8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   12fcc:	e71d      	b.n	12e0a <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12fce:	f013 0f01 	tst.w	r3, #1
   12fd2:	d081      	beq.n	12ed8 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12fd4:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12fd8:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12fdc:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12fe0:	f04f 0108 	mov.w	r1, #8
   12fe4:	f88e 301a 	strb.w	r3, [lr, #26]
   12fe8:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12fec:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12ff0:	f43f adcd 	beq.w	12b8e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12ff4:	4b57      	ldr	r3, [pc, #348]	; (13154 <_usb_d_dev_handler+0x648>)
   12ff6:	eb0a 0104 	add.w	r1, sl, r4
   12ffa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12ffe:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13002:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13006:	2280      	movs	r2, #128	; 0x80
   13008:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1300c:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13010:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   13014:	e6f9      	b.n	12e0a <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   13016:	4b4f      	ldr	r3, [pc, #316]	; (13154 <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   13018:	2080      	movs	r0, #128	; 0x80
   1301a:	685b      	ldr	r3, [r3, #4]
   1301c:	8390      	strh	r0, [r2, #28]
   1301e:	2005      	movs	r0, #5
   13020:	e7ae      	b.n	12f80 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   13022:	f01b 0f40 	tst.w	fp, #64	; 0x40
   13026:	f43f ade3 	beq.w	12bf0 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1302a:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   1302e:	f36f 1386 	bfc	r3, #6, #1
   13032:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13036:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13038:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1303a:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1303e:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   13042:	e5d5      	b.n	12bf0 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   13044:	4b42      	ldr	r3, [pc, #264]	; (13150 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   13046:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1304a:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1304c:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   13050:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   13054:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   13056:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   13058:	f000 8080 	beq.w	1315c <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   1305c:	f013 0302 	ands.w	r3, r3, #2
   13060:	f43f ae68 	beq.w	12d34 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   13064:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13068:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1306c:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13070:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   13072:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   13076:	f88e 100a 	strb.w	r1, [lr, #10]
   1307a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1307e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   13082:	f43f ad84 	beq.w	12b8e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   13086:	4a33      	ldr	r2, [pc, #204]	; (13154 <_usb_d_dev_handler+0x648>)
   13088:	eb0a 0104 	add.w	r1, sl, r4
   1308c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   13090:	3120      	adds	r1, #32
   13092:	79ca      	ldrb	r2, [r1, #7]
   13094:	09d2      	lsrs	r2, r2, #7
   13096:	f43f ad7a 	beq.w	12b8e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1309a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1309c:	f04f 0e80 	mov.w	lr, #128	; 0x80
   130a0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   130a4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   130a8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   130ac:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   130ae:	4b29      	ldr	r3, [pc, #164]	; (13154 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   130b0:	f36f 1286 	bfc	r2, #6, #1
   130b4:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   130b6:	691b      	ldr	r3, [r3, #16]
   130b8:	68aa      	ldr	r2, [r5, #8]
   130ba:	2100      	movs	r1, #0
   130bc:	4798      	blx	r3
   130be:	e566      	b.n	12b8e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   130c0:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   130c2:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   130c6:	4924      	ldr	r1, [pc, #144]	; (13158 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   130c8:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   130ca:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   130cc:	8310      	strh	r0, [r2, #24]
   130ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   130d0:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   130d4:	2b03      	cmp	r3, #3
   130d6:	d1fa      	bne.n	130ce <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   130d8:	4b1e      	ldr	r3, [pc, #120]	; (13154 <_usb_d_dev_handler+0x648>)
   130da:	2100      	movs	r1, #0
   130dc:	685b      	ldr	r3, [r3, #4]
   130de:	2002      	movs	r0, #2
   130e0:	e74e      	b.n	12f80 <_usb_d_dev_handler+0x474>
   130e2:	4e1c      	ldr	r6, [pc, #112]	; (13154 <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   130e4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   130e8:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   130ea:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   130ec:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   130f0:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   130f2:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   130f4:	8291      	strh	r1, [r2, #20]
   130f6:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   130f8:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   130fa:	f04f 08ff 	mov.w	r8, #255	; 0xff
   130fe:	e007      	b.n	13110 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   13100:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   13102:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   13106:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   1310a:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1310e:	d016      	beq.n	1313e <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13110:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   13114:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   13118:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1311c:	28ff      	cmp	r0, #255	; 0xff
   1311e:	f103 0320 	add.w	r3, r3, #32
   13122:	f104 0401 	add.w	r4, r4, #1
   13126:	d0eb      	beq.n	13100 <_usb_d_dev_handler+0x5f4>
   13128:	79da      	ldrb	r2, [r3, #7]
   1312a:	0651      	lsls	r1, r2, #25
   1312c:	d5e8      	bpl.n	13100 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   1312e:	f36f 1286 	bfc	r2, #6, #1
   13132:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13134:	69ea      	ldr	r2, [r5, #28]
   13136:	6933      	ldr	r3, [r6, #16]
   13138:	2103      	movs	r1, #3
   1313a:	4798      	blx	r3
   1313c:	e7e0      	b.n	13100 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1313e:	2100      	movs	r1, #0
   13140:	2260      	movs	r2, #96	; 0x60
   13142:	4803      	ldr	r0, [pc, #12]	; (13150 <_usb_d_dev_handler+0x644>)
   13144:	f00b ff7a 	bl	1f03c <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   13148:	6873      	ldr	r3, [r6, #4]
   1314a:	2100      	movs	r1, #0
   1314c:	2001      	movs	r0, #1
   1314e:	e717      	b.n	12f80 <_usb_d_dev_handler+0x474>
   13150:	2000221c 	.word	0x2000221c
   13154:	20001fec 	.word	0x20001fec
   13158:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1315c:	07d9      	lsls	r1, r3, #31
   1315e:	f57f af7d 	bpl.w	1305c <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   13162:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13166:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1316a:	460a      	mov	r2, r1
   1316c:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13170:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13172:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   13176:	f88e 200a 	strb.w	r2, [lr, #10]
   1317a:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1317e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13182:	f43f ad04 	beq.w	12b8e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   13186:	4a11      	ldr	r2, [pc, #68]	; (131cc <_usb_d_dev_handler+0x6c0>)
   13188:	eb0a 0e04 	add.w	lr, sl, r4
   1318c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13190:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13194:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13196:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1319a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1319e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   131a2:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   131a6:	4b09      	ldr	r3, [pc, #36]	; (131cc <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   131a8:	f36f 1286 	bfc	r2, #6, #1
   131ac:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   131b0:	691b      	ldr	r3, [r3, #16]
   131b2:	68aa      	ldr	r2, [r5, #8]
   131b4:	4798      	blx	r3
   131b6:	e4ea      	b.n	12b8e <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   131b8:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   131ba:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   131be:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   131c0:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   131c2:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   131c4:	f3c1 110a 	ubfx	r1, r1, #4, #11
   131c8:	e6d7      	b.n	12f7a <_usb_d_dev_handler+0x46e>
   131ca:	bf00      	nop
   131cc:	20001fec 	.word	0x20001fec

000131d0 <_usb_d_dev_init>:
{
   131d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   131d4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   131d8:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   131da:	07db      	lsls	r3, r3, #31
   131dc:	d551      	bpl.n	13282 <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   131de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   131e2:	789c      	ldrb	r4, [r3, #2]
   131e4:	f014 0401 	ands.w	r4, r4, #1
   131e8:	d1fb      	bne.n	131e2 <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   131ea:	4b45      	ldr	r3, [pc, #276]	; (13300 <_usb_d_dev_init+0x130>)
   131ec:	4a45      	ldr	r2, [pc, #276]	; (13304 <_usb_d_dev_init+0x134>)
   131ee:	601a      	str	r2, [r3, #0]
   131f0:	461e      	mov	r6, r3
   131f2:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   131f4:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   131f6:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   131f8:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   131fa:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   131fc:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   131fe:	27ff      	movs	r7, #255	; 0xff
   13200:	e007      	b.n	13212 <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   13202:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   13204:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   13208:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   1320c:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   13210:	d01d      	beq.n	1324e <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13212:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   13216:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1321a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1321e:	28ff      	cmp	r0, #255	; 0xff
   13220:	f103 0320 	add.w	r3, r3, #32
   13224:	f104 0401 	add.w	r4, r4, #1
   13228:	d0eb      	beq.n	13202 <_usb_d_dev_init+0x32>
   1322a:	79da      	ldrb	r2, [r3, #7]
   1322c:	0651      	lsls	r1, r2, #25
   1322e:	d5e8      	bpl.n	13202 <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   13230:	f36f 1286 	bfc	r2, #6, #1
   13234:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13236:	69ea      	ldr	r2, [r5, #28]
   13238:	6933      	ldr	r3, [r6, #16]
   1323a:	2103      	movs	r1, #3
   1323c:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   1323e:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   13240:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   13244:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   13248:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1324c:	d1e1      	bne.n	13212 <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1324e:	2260      	movs	r2, #96	; 0x60
   13250:	2100      	movs	r1, #0
   13252:	482d      	ldr	r0, [pc, #180]	; (13308 <_usb_d_dev_init+0x138>)
   13254:	f00b fef2 	bl	1f03c <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   13258:	4b2c      	ldr	r3, [pc, #176]	; (1330c <_usb_d_dev_init+0x13c>)
   1325a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   1325c:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   13260:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   13264:	f013 031f 	ands.w	r3, r3, #31
   13268:	d027      	beq.n	132ba <_usb_d_dev_init+0xea>
   1326a:	2b1f      	cmp	r3, #31
   1326c:	d025      	beq.n	132ba <_usb_d_dev_init+0xea>
   1326e:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   13270:	b338      	cbz	r0, 132c2 <_usb_d_dev_init+0xf2>
   13272:	281f      	cmp	r0, #31
   13274:	d025      	beq.n	132c2 <_usb_d_dev_init+0xf2>
   13276:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   13278:	b332      	cbz	r2, 132c8 <_usb_d_dev_init+0xf8>
   1327a:	2a07      	cmp	r2, #7
   1327c:	d024      	beq.n	132c8 <_usb_d_dev_init+0xf8>
   1327e:	0311      	lsls	r1, r2, #12
   13280:	e024      	b.n	132cc <_usb_d_dev_init+0xfc>
   13282:	7893      	ldrb	r3, [r2, #2]
   13284:	079f      	lsls	r7, r3, #30
   13286:	d1fc      	bne.n	13282 <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   13288:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   1328a:	079e      	lsls	r6, r3, #30
   1328c:	d50d      	bpl.n	132aa <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   1328e:	7813      	ldrb	r3, [r2, #0]
   13290:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   13294:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   13296:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1329a:	7893      	ldrb	r3, [r2, #2]
   1329c:	079d      	lsls	r5, r3, #30
   1329e:	d1fc      	bne.n	1329a <_usb_d_dev_init+0xca>
   132a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   132a4:	7893      	ldrb	r3, [r2, #2]
   132a6:	079c      	lsls	r4, r3, #30
   132a8:	d4fc      	bmi.n	132a4 <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   132aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   132ae:	2301      	movs	r3, #1
   132b0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   132b2:	7893      	ldrb	r3, [r2, #2]
   132b4:	0798      	lsls	r0, r3, #30
   132b6:	d1fc      	bne.n	132b2 <_usb_d_dev_init+0xe2>
   132b8:	e791      	b.n	131de <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   132ba:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   132be:	2800      	cmp	r0, #0
   132c0:	d1d7      	bne.n	13272 <_usb_d_dev_init+0xa2>
   132c2:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   132c4:	2a00      	cmp	r2, #0
   132c6:	d1d8      	bne.n	1327a <_usb_d_dev_init+0xaa>
   132c8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   132cc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   132d0:	4303      	orrs	r3, r0
   132d2:	430b      	orrs	r3, r1
   132d4:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   132d6:	78d3      	ldrb	r3, [r2, #3]
   132d8:	f043 0303 	orr.w	r3, r3, #3
   132dc:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   132de:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   132e0:	2104      	movs	r1, #4
   132e2:	f043 030c 	orr.w	r3, r3, #12
   132e6:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   132e8:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   132ea:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   132ec:	7898      	ldrb	r0, [r3, #2]
   132ee:	f010 0003 	ands.w	r0, r0, #3
   132f2:	d1fb      	bne.n	132ec <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   132f4:	4a04      	ldr	r2, [pc, #16]	; (13308 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   132f6:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   132f8:	2201      	movs	r2, #1
   132fa:	811a      	strh	r2, [r3, #8]
}
   132fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13300:	20001fec 	.word	0x20001fec
   13304:	0001279d 	.word	0x0001279d
   13308:	2000221c 	.word	0x2000221c
   1330c:	00800084 	.word	0x00800084

00013310 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   13310:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   13314:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   13316:	079b      	lsls	r3, r3, #30
   13318:	d124      	bne.n	13364 <_usb_d_dev_enable+0x54>
{
   1331a:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1331c:	7893      	ldrb	r3, [r2, #2]
   1331e:	0798      	lsls	r0, r3, #30
   13320:	d1fc      	bne.n	1331c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   13322:	7813      	ldrb	r3, [r2, #0]
   13324:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   13326:	0799      	lsls	r1, r3, #30
   13328:	d407      	bmi.n	1333a <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   1332a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1332e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   13330:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   13334:	7893      	ldrb	r3, [r2, #2]
   13336:	079b      	lsls	r3, r3, #30
   13338:	d1fc      	bne.n	13334 <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1333a:	4b0c      	ldr	r3, [pc, #48]	; (1336c <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1333c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   13340:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   13344:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   13348:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1334c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   13350:	f240 218d 	movw	r1, #653	; 0x28d
   13354:	6098      	str	r0, [r3, #8]
   13356:	609e      	str	r6, [r3, #8]
   13358:	609d      	str	r5, [r3, #8]
   1335a:	609c      	str	r4, [r3, #8]
   1335c:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   1335e:	2000      	movs	r0, #0
}
   13360:	bc70      	pop	{r4, r5, r6}
   13362:	4770      	bx	lr
		return -USB_ERR_DENIED;
   13364:	f06f 0010 	mvn.w	r0, #16
   13368:	4770      	bx	lr
   1336a:	bf00      	nop
   1336c:	e000e100 	.word	0xe000e100

00013370 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   13370:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   13374:	8913      	ldrh	r3, [r2, #8]
   13376:	f023 0301 	bic.w	r3, r3, #1
   1337a:	041b      	lsls	r3, r3, #16
   1337c:	0c1b      	lsrs	r3, r3, #16
   1337e:	8113      	strh	r3, [r2, #8]
   13380:	4770      	bx	lr
   13382:	bf00      	nop

00013384 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   13384:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   13388:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1338c:	7298      	strb	r0, [r3, #10]
   1338e:	4770      	bx	lr

00013390 <_usb_d_dev_ep_init>:
{
   13390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13394:	f010 050f 	ands.w	r5, r0, #15
   13398:	fa4f fc80 	sxtb.w	ip, r0
   1339c:	d02a      	beq.n	133f4 <_usb_d_dev_ep_init+0x64>
   1339e:	f1bc 0f00 	cmp.w	ip, #0
   133a2:	bfb4      	ite	lt
   133a4:	1cab      	addlt	r3, r5, #2
   133a6:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   133a8:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   133aa:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   133ae:	d859      	bhi.n	13464 <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   133b0:	009c      	lsls	r4, r3, #2
   133b2:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 1346c <_usb_d_dev_ep_init+0xdc>
   133b6:	18e6      	adds	r6, r4, r3
   133b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   133bc:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   133c0:	2eff      	cmp	r6, #255	; 0xff
   133c2:	d14b      	bne.n	1345c <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   133c4:	b1d1      	cbz	r1, 133fc <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   133c6:	f1bc 0f00 	cmp.w	ip, #0
   133ca:	db3a      	blt.n	13442 <_usb_d_dev_ep_init+0xb2>
   133cc:	006f      	lsls	r7, r5, #1
   133ce:	197e      	adds	r6, r7, r5
   133d0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 13470 <_usb_d_dev_ep_init+0xe0>
   133d4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   133d8:	bb4e      	cbnz	r6, 1342e <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   133da:	4423      	add	r3, r4
   133dc:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   133e0:	3101      	adds	r1, #1
   133e2:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   133e6:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   133ea:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   133ec:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   133ee:	2000      	movs	r0, #0
   133f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   133f4:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   133f8:	462b      	mov	r3, r5
   133fa:	e7d9      	b.n	133b0 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   133fc:	b125      	cbz	r5, 13408 <_usb_d_dev_ep_init+0x78>
   133fe:	f1bc 0f00 	cmp.w	ip, #0
   13402:	db01      	blt.n	13408 <_usb_d_dev_ep_init+0x78>
   13404:	1cae      	adds	r6, r5, #2
   13406:	e000      	b.n	1340a <_usb_d_dev_ep_init+0x7a>
   13408:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   1340a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1340e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   13412:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   13416:	2eff      	cmp	r6, #255	; 0xff
   13418:	d120      	bne.n	1345c <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   1341a:	006f      	lsls	r7, r5, #1
   1341c:	197e      	adds	r6, r7, r5
   1341e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 13470 <_usb_d_dev_ep_init+0xe0>
   13422:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   13426:	b146      	cbz	r6, 1343a <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   13428:	f1bc 0f00 	cmp.w	ip, #0
   1342c:	db0c      	blt.n	13448 <_usb_d_dev_ep_init+0xb8>
   1342e:	443d      	add	r5, r7
   13430:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   13434:	892d      	ldrh	r5, [r5, #8]
   13436:	4295      	cmp	r5, r2
   13438:	dacf      	bge.n	133da <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   1343a:	f06f 0012 	mvn.w	r0, #18
   1343e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13442:	f8df 802c 	ldr.w	r8, [pc, #44]	; 13470 <_usb_d_dev_ep_init+0xe0>
   13446:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   13448:	442f      	add	r7, r5
   1344a:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   1344e:	687d      	ldr	r5, [r7, #4]
   13450:	b115      	cbz	r5, 13458 <_usb_d_dev_ep_init+0xc8>
   13452:	897e      	ldrh	r6, [r7, #10]
   13454:	4296      	cmp	r6, r2
   13456:	dbf0      	blt.n	1343a <_usb_d_dev_ep_init+0xaa>
   13458:	462e      	mov	r6, r5
   1345a:	e7be      	b.n	133da <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   1345c:	f06f 0013 	mvn.w	r0, #19
   13460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   13464:	f06f 0011 	mvn.w	r0, #17
   13468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1346c:	20001fec 	.word	0x20001fec
   13470:	0002417c 	.word	0x0002417c

00013474 <_usb_d_dev_ep_deinit>:
{
   13474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13478:	f010 070f 	ands.w	r7, r0, #15
{
   1347c:	b082      	sub	sp, #8
   1347e:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13482:	d009      	beq.n	13498 <_usb_d_dev_ep_deinit+0x24>
   13484:	f1b9 0f00 	cmp.w	r9, #0
   13488:	bfb4      	ite	lt
   1348a:	1cbe      	addlt	r6, r7, #2
   1348c:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   1348e:	2f02      	cmp	r7, #2
   13490:	d903      	bls.n	1349a <_usb_d_dev_ep_deinit+0x26>
}
   13492:	b002      	add	sp, #8
   13494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   13498:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   1349a:	ea4f 0886 	mov.w	r8, r6, lsl #2
   1349e:	4d3d      	ldr	r5, [pc, #244]	; (13594 <_usb_d_dev_ep_deinit+0x120>)
   134a0:	eb08 0306 	add.w	r3, r8, r6
   134a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   134a8:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   134ac:	29ff      	cmp	r1, #255	; 0xff
   134ae:	d0f0      	beq.n	13492 <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   134b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   134b4:	224a      	movs	r2, #74	; 0x4a
   134b6:	4604      	mov	r4, r0
   134b8:	f88d 2005 	strb.w	r2, [sp, #5]
   134bc:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   134be:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   134c0:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   134c4:	d41b      	bmi.n	134fe <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   134c6:	f003 0307 	and.w	r3, r3, #7
   134ca:	2b01      	cmp	r3, #1
   134cc:	d050      	beq.n	13570 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   134ce:	f1b9 0f00 	cmp.w	r9, #0
   134d2:	db54      	blt.n	1357e <_usb_d_dev_ep_deinit+0x10a>
   134d4:	0160      	lsls	r0, r4, #5
   134d6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   134da:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   134de:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   134e2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   134e6:	4446      	add	r6, r8
   134e8:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   134ec:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   134ee:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   134f0:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   134f4:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   134f8:	b002      	add	sp, #8
   134fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   134fe:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13502:	f103 0208 	add.w	r2, r3, #8
   13506:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   13508:	f1b9 0f00 	cmp.w	r9, #0
   1350c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   13510:	bfb5      	itete	lt
   13512:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13516:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1351a:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1351e:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   13522:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13526:	0150      	lsls	r0, r2, #5
   13528:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1352c:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1352e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13532:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   13536:	eb08 0306 	add.w	r3, r8, r6
   1353a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   1353e:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13542:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13546:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1354a:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1354e:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   13550:	f103 0a20 	add.w	sl, r3, #32
   13554:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13558:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   1355a:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1355e:	4608      	mov	r0, r1
   13560:	2103      	movs	r1, #3
   13562:	4798      	blx	r3
   13564:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   13568:	f003 0307 	and.w	r3, r3, #7
   1356c:	2b01      	cmp	r3, #1
   1356e:	d1ae      	bne.n	134ce <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   13570:	0160      	lsls	r0, r4, #5
   13572:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   13576:	2300      	movs	r3, #0
   13578:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   1357c:	e7b3      	b.n	134e6 <_usb_d_dev_ep_deinit+0x72>
   1357e:	017f      	lsls	r7, r7, #5
   13580:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   13584:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   13588:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   1358c:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   13590:	e7a9      	b.n	134e6 <_usb_d_dev_ep_deinit+0x72>
   13592:	bf00      	nop
   13594:	20001fec 	.word	0x20001fec

00013598 <_usb_d_dev_ep_enable>:
{
   13598:	b5f0      	push	{r4, r5, r6, r7, lr}
   1359a:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1359c:	f010 000f 	ands.w	r0, r0, #15
   135a0:	d045      	beq.n	1362e <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   135a2:	0142      	lsls	r2, r0, #5
   135a4:	2e00      	cmp	r6, #0
   135a6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   135aa:	bfb4      	ite	lt
   135ac:	1c83      	addlt	r3, r0, #2
   135ae:	4603      	movge	r3, r0
   135b0:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   135b4:	4a84      	ldr	r2, [pc, #528]	; (137c8 <_usb_d_dev_ep_enable+0x230>)
   135b6:	1c59      	adds	r1, r3, #1
   135b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   135bc:	2802      	cmp	r0, #2
   135be:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   135c0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   135c4:	f200 809f 	bhi.w	13706 <_usb_d_dev_ep_enable+0x16e>
   135c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   135cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   135d0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   135d4:	2aff      	cmp	r2, #255	; 0xff
   135d6:	f000 8096 	beq.w	13706 <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   135da:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   135de:	4d7b      	ldr	r5, [pc, #492]	; (137cc <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   135e0:	f002 0e07 	and.w	lr, r2, #7
   135e4:	0140      	lsls	r0, r0, #5
   135e6:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   135ea:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   135ee:	d028      	beq.n	13642 <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   135f0:	2e00      	cmp	r6, #0
   135f2:	db65      	blt.n	136c0 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   135f4:	0761      	lsls	r1, r4, #29
   135f6:	f040 80a4 	bne.w	13742 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   135fa:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   135fc:	4b74      	ldr	r3, [pc, #464]	; (137d0 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   135fe:	f002 0207 	and.w	r2, r2, #7
   13602:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   13606:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   13608:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   1360c:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   13610:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   13614:	d97a      	bls.n	1370c <_usb_d_dev_ep_enable+0x174>
   13616:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   1361a:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   1361c:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1361e:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   13620:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   13622:	607a      	str	r2, [r7, #4]
   13624:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   13628:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   1362a:	4608      	mov	r0, r1
   1362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1362e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   13632:	4968      	ldr	r1, [pc, #416]	; (137d4 <_usb_d_dev_ep_enable+0x23c>)
   13634:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   13638:	f1a1 0214 	sub.w	r2, r1, #20
   1363c:	b2e4      	uxtb	r4, r4
   1363e:	4603      	mov	r3, r0
   13640:	e7c2      	b.n	135c8 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   13642:	f014 0f77 	tst.w	r4, #119	; 0x77
   13646:	d17c      	bne.n	13742 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   13648:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1364a:	4a61      	ldr	r2, [pc, #388]	; (137d0 <_usb_d_dev_ep_enable+0x238>)
   1364c:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   13650:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   13652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   13656:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   1365a:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   1365e:	d94c      	bls.n	136fa <_usb_d_dev_ep_enable+0x162>
   13660:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   13664:	f3c3 030d 	ubfx	r3, r3, #0, #14
   13668:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   1366a:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1366c:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13670:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   13672:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   13674:	617b      	str	r3, [r7, #20]
   13676:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1367a:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1367e:	7c8a      	ldrb	r2, [r1, #18]
   13680:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   13682:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13686:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   1368a:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   1368c:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   1368e:	2000      	movs	r0, #0
   13690:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   13692:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   13694:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   13696:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   1369a:	6873      	ldr	r3, [r6, #4]
   1369c:	f367 339b 	bfi	r3, r7, #14, #14
   136a0:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   136a2:	6872      	ldr	r2, [r6, #4]
   136a4:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   136a8:	f360 020d 	bfi	r2, r0, #0, #14
   136ac:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   136ae:	2510      	movs	r5, #16
   136b0:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   136b2:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   136b6:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   136ba:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   136be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   136c0:	f014 0f70 	tst.w	r4, #112	; 0x70
   136c4:	d13d      	bne.n	13742 <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   136c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   136c8:	0112      	lsls	r2, r2, #4
   136ca:	f002 0270 	and.w	r2, r2, #112	; 0x70
   136ce:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   136d2:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   136d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   136d8:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   136dc:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   136e0:	d91a      	bls.n	13718 <_usb_d_dev_ep_enable+0x180>
   136e2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   136e6:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   136e8:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   136ea:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   136ec:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   136ee:	617a      	str	r2, [r7, #20]
   136f0:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   136f4:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   136f6:	4608      	mov	r0, r1
   136f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   136fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   136fe:	d923      	bls.n	13748 <_usb_d_dev_ep_enable+0x1b0>
   13700:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   13704:	e7ae      	b.n	13664 <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   13706:	f06f 0011 	mvn.w	r0, #17
   1370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   1370c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   13710:	d908      	bls.n	13724 <_usb_d_dev_ep_enable+0x18c>
   13712:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   13716:	e780      	b.n	1361a <_usb_d_dev_ep_enable+0x82>
   13718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1371c:	d907      	bls.n	1372e <_usb_d_dev_ep_enable+0x196>
   1371e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   13722:	e7e0      	b.n	136e6 <_usb_d_dev_ep_enable+0x14e>
   13724:	2980      	cmp	r1, #128	; 0x80
   13726:	d907      	bls.n	13738 <_usb_d_dev_ep_enable+0x1a0>
   13728:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1372c:	e775      	b.n	1361a <_usb_d_dev_ep_enable+0x82>
   1372e:	2b80      	cmp	r3, #128	; 0x80
   13730:	d914      	bls.n	1375c <_usb_d_dev_ep_enable+0x1c4>
   13732:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13736:	e7d6      	b.n	136e6 <_usb_d_dev_ep_enable+0x14e>
   13738:	2940      	cmp	r1, #64	; 0x40
   1373a:	d914      	bls.n	13766 <_usb_d_dev_ep_enable+0x1ce>
   1373c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13740:	e76b      	b.n	1361a <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   13742:	f06f 0013 	mvn.w	r0, #19
   13746:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   13748:	2b80      	cmp	r3, #128	; 0x80
   1374a:	d902      	bls.n	13752 <_usb_d_dev_ep_enable+0x1ba>
   1374c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   13750:	e788      	b.n	13664 <_usb_d_dev_ep_enable+0xcc>
   13752:	2b40      	cmp	r3, #64	; 0x40
   13754:	d90c      	bls.n	13770 <_usb_d_dev_ep_enable+0x1d8>
   13756:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1375a:	e783      	b.n	13664 <_usb_d_dev_ep_enable+0xcc>
   1375c:	2b40      	cmp	r3, #64	; 0x40
   1375e:	d90c      	bls.n	1377a <_usb_d_dev_ep_enable+0x1e2>
   13760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13764:	e7bf      	b.n	136e6 <_usb_d_dev_ep_enable+0x14e>
   13766:	2920      	cmp	r1, #32
   13768:	d90c      	bls.n	13784 <_usb_d_dev_ep_enable+0x1ec>
   1376a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   1376e:	e754      	b.n	1361a <_usb_d_dev_ep_enable+0x82>
   13770:	2b20      	cmp	r3, #32
   13772:	d90c      	bls.n	1378e <_usb_d_dev_ep_enable+0x1f6>
   13774:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   13778:	e774      	b.n	13664 <_usb_d_dev_ep_enable+0xcc>
   1377a:	2b20      	cmp	r3, #32
   1377c:	d90c      	bls.n	13798 <_usb_d_dev_ep_enable+0x200>
   1377e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   13782:	e7b0      	b.n	136e6 <_usb_d_dev_ep_enable+0x14e>
   13784:	2910      	cmp	r1, #16
   13786:	d90c      	bls.n	137a2 <_usb_d_dev_ep_enable+0x20a>
   13788:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1378c:	e745      	b.n	1361a <_usb_d_dev_ep_enable+0x82>
   1378e:	2b10      	cmp	r3, #16
   13790:	d90d      	bls.n	137ae <_usb_d_dev_ep_enable+0x216>
   13792:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   13796:	e765      	b.n	13664 <_usb_d_dev_ep_enable+0xcc>
   13798:	2b10      	cmp	r3, #16
   1379a:	d90e      	bls.n	137ba <_usb_d_dev_ep_enable+0x222>
   1379c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   137a0:	e7a1      	b.n	136e6 <_usb_d_dev_ep_enable+0x14e>
   137a2:	2908      	cmp	r1, #8
   137a4:	bf94      	ite	ls
   137a6:	2100      	movls	r1, #0
   137a8:	2101      	movhi	r1, #1
   137aa:	0709      	lsls	r1, r1, #28
   137ac:	e735      	b.n	1361a <_usb_d_dev_ep_enable+0x82>
   137ae:	2b08      	cmp	r3, #8
   137b0:	bf94      	ite	ls
   137b2:	2400      	movls	r4, #0
   137b4:	2401      	movhi	r4, #1
   137b6:	0724      	lsls	r4, r4, #28
   137b8:	e754      	b.n	13664 <_usb_d_dev_ep_enable+0xcc>
   137ba:	2b08      	cmp	r3, #8
   137bc:	bf94      	ite	ls
   137be:	2300      	movls	r3, #0
   137c0:	2301      	movhi	r3, #1
   137c2:	071a      	lsls	r2, r3, #28
   137c4:	e78f      	b.n	136e6 <_usb_d_dev_ep_enable+0x14e>
   137c6:	bf00      	nop
   137c8:	20001fec 	.word	0x20001fec
   137cc:	2000221c 	.word	0x2000221c
   137d0:	0fffc000 	.word	0x0fffc000
   137d4:	20002000 	.word	0x20002000

000137d8 <_usb_d_dev_ep_stall>:
{
   137d8:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   137da:	f010 000f 	ands.w	r0, r0, #15
{
   137de:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   137e0:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   137e4:	d01e      	beq.n	13824 <_usb_d_dev_ep_stall+0x4c>
   137e6:	2b00      	cmp	r3, #0
   137e8:	bfb4      	ite	lt
   137ea:	1c83      	addlt	r3, r0, #2
   137ec:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   137ee:	1c5c      	adds	r4, r3, #1
   137f0:	4a40      	ldr	r2, [pc, #256]	; (138f4 <_usb_d_dev_ep_stall+0x11c>)
   137f2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   137f6:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   137f8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   137fc:	d86d      	bhi.n	138da <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   137fe:	2901      	cmp	r1, #1
   13800:	d014      	beq.n	1382c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   13802:	b389      	cbz	r1, 13868 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13804:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   13806:	f003 030f 	and.w	r3, r3, #15
   1380a:	015b      	lsls	r3, r3, #5
   1380c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13810:	2210      	movs	r2, #16
   13812:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   13816:	fa02 f305 	lsl.w	r3, r2, r5
   1381a:	420b      	tst	r3, r1
   1381c:	bf14      	ite	ne
   1381e:	2001      	movne	r0, #1
   13820:	2000      	moveq	r0, #0
   13822:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   13824:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   13826:	4a34      	ldr	r2, [pc, #208]	; (138f8 <_usb_d_dev_ep_stall+0x120>)
   13828:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   1382a:	d1ea      	bne.n	13802 <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1382c:	4931      	ldr	r1, [pc, #196]	; (138f4 <_usb_d_dev_ep_stall+0x11c>)
   1382e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13832:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13836:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13838:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1383c:	f002 020f 	and.w	r2, r2, #15
   13840:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   13842:	2320      	movs	r3, #32
   13844:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13848:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   1384a:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   1384c:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   1384e:	b2db      	uxtb	r3, r3
   13850:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   13854:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   13858:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   1385c:	f043 0308 	orr.w	r3, r3, #8
   13860:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   13864:	2000      	movs	r0, #0
   13866:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   13868:	009e      	lsls	r6, r3, #2
   1386a:	4c22      	ldr	r4, [pc, #136]	; (138f4 <_usb_d_dev_ep_stall+0x11c>)
   1386c:	18f2      	adds	r2, r6, r3
   1386e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13872:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   13874:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   13878:	f002 020f 	and.w	r2, r2, #15
   1387c:	0151      	lsls	r1, r2, #5
   1387e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13882:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   13884:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   13888:	4207      	tst	r7, r0
   1388a:	d01b      	beq.n	138c4 <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1388c:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   1388e:	2720      	movs	r7, #32
   13890:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13894:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13896:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   13898:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1389c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   138a0:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   138a4:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   138a8:	423a      	tst	r2, r7
   138aa:	d10d      	bne.n	138c8 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   138ac:	4433      	add	r3, r6
   138ae:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   138b2:	3420      	adds	r4, #32
   138b4:	79e3      	ldrb	r3, [r4, #7]
   138b6:	f003 0207 	and.w	r2, r3, #7
   138ba:	2a01      	cmp	r2, #1
   138bc:	d010      	beq.n	138e0 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   138be:	f36f 03c3 	bfc	r3, #3, #1
   138c2:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   138c4:	2000      	movs	r0, #0
   138c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   138c8:	2201      	movs	r2, #1
   138ca:	fa02 f505 	lsl.w	r5, r2, r5
   138ce:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   138d0:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   138d4:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   138d8:	e7e8      	b.n	138ac <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   138da:	f06f 0011 	mvn.w	r0, #17
}
   138de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   138e0:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   138e4:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   138e8:	d1ec      	bne.n	138c4 <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   138ea:	f360 03c3 	bfi	r3, r0, #3, #1
   138ee:	71e3      	strb	r3, [r4, #7]
   138f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   138f2:	bf00      	nop
   138f4:	20001fec 	.word	0x20001fec
   138f8:	20002000 	.word	0x20002000

000138fc <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   138fc:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   138fe:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   13902:	4a12      	ldr	r2, [pc, #72]	; (1394c <_usb_d_dev_ep_read_req+0x50>)
   13904:	0143      	lsls	r3, r0, #5
   13906:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   13908:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   1390a:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   1390c:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   1390e:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   13912:	d818      	bhi.n	13946 <_usb_d_dev_ep_read_req+0x4a>
   13914:	b1b9      	cbz	r1, 13946 <_usb_d_dev_ep_read_req+0x4a>
   13916:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1391a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   1391e:	2a11      	cmp	r2, #17
   13920:	d10e      	bne.n	13940 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   13922:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   13926:	f012 0010 	ands.w	r0, r2, #16
   1392a:	d007      	beq.n	1393c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   1392c:	686a      	ldr	r2, [r5, #4]
   1392e:	682e      	ldr	r6, [r5, #0]
   13930:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13932:	2210      	movs	r2, #16
   13934:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   13936:	4620      	mov	r0, r4
   13938:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   1393c:	bc70      	pop	{r4, r5, r6}
   1393e:	4770      	bx	lr
		return -USB_ERR_FUNC;
   13940:	f06f 0012 	mvn.w	r0, #18
   13944:	e7fa      	b.n	1393c <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   13946:	f06f 0011 	mvn.w	r0, #17
   1394a:	e7f7      	b.n	1393c <_usb_d_dev_ep_read_req+0x40>
   1394c:	2000221c 	.word	0x2000221c

00013950 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   13950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   13954:	7a03      	ldrb	r3, [r0, #8]
   13956:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1395a:	f013 030f 	ands.w	r3, r3, #15
{
   1395e:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13960:	d03a      	beq.n	139d8 <_usb_d_dev_ep_trans+0x88>
   13962:	f1b9 0f00 	cmp.w	r9, #0
   13966:	bfb4      	ite	lt
   13968:	1c9d      	addlt	r5, r3, #2
   1396a:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   1396c:	4e5d      	ldr	r6, [pc, #372]	; (13ae4 <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1396e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   13972:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   13976:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1397a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   1397c:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   13980:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   13984:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   13986:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1398a:	d050      	beq.n	13a2e <_usb_d_dev_ep_trans+0xde>
   1398c:	1e57      	subs	r7, r2, #1
   1398e:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   13990:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   13992:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   13994:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   13998:	f200 8091 	bhi.w	13abe <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   1399c:	6803      	ldr	r3, [r0, #0]
   1399e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   139a2:	d223      	bcs.n	139ec <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   139a4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   139a8:	eb0b 0305 	add.w	r3, fp, r5
   139ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   139b0:	6a1b      	ldr	r3, [r3, #32]
   139b2:	2b00      	cmp	r3, #0
   139b4:	f000 8092 	beq.w	13adc <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   139b8:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   139bc:	eb0b 0405 	add.w	r4, fp, r5
   139c0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   139c4:	f104 0220 	add.w	r2, r4, #32
   139c8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   139cc:	071b      	lsls	r3, r3, #28
   139ce:	d530      	bpl.n	13a32 <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   139d0:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   139d2:	b007      	add	sp, #28
   139d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   139d8:	4e42      	ldr	r6, [pc, #264]	; (13ae4 <_usb_d_dev_ep_trans+0x194>)
   139da:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   139dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
   139e0:	428a      	cmp	r2, r1
   139e2:	d01d      	beq.n	13a20 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   139e4:	f106 0814 	add.w	r8, r6, #20
   139e8:	461d      	mov	r5, r3
   139ea:	e7cf      	b.n	1398c <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   139ec:	4c3e      	ldr	r4, [pc, #248]	; (13ae8 <_usb_d_dev_ep_trans+0x198>)
   139ee:	eb03 0e01 	add.w	lr, r3, r1
   139f2:	45a6      	cmp	lr, r4
   139f4:	d8d6      	bhi.n	139a4 <_usb_d_dev_ep_trans+0x54>
   139f6:	f013 0303 	ands.w	r3, r3, #3
   139fa:	d1d3      	bne.n	139a4 <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   139fc:	f1b9 0f00 	cmp.w	r9, #0
   13a00:	db60      	blt.n	13ac4 <_usb_d_dev_ep_trans+0x174>
   13a02:	428a      	cmp	r2, r1
   13a04:	d8ce      	bhi.n	139a4 <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   13a06:	2f00      	cmp	r7, #0
   13a08:	d060      	beq.n	13acc <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   13a0a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13a0e:	eb0b 0205 	add.w	r2, fp, r5
   13a12:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   13a16:	6a12      	ldr	r2, [r2, #32]
   13a18:	2a00      	cmp	r2, #0
   13a1a:	d050      	beq.n	13abe <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   13a1c:	469a      	mov	sl, r3
   13a1e:	e7cd      	b.n	139bc <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   13a20:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   13a22:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   13a24:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   13a28:	f106 0814 	add.w	r8, r6, #20
   13a2c:	e7b6      	b.n	1399c <_usb_d_dev_ep_trans+0x4c>
   13a2e:	4617      	mov	r7, r2
   13a30:	e7ae      	b.n	13990 <_usb_d_dev_ep_trans+0x40>
   13a32:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   13a34:	a805      	add	r0, sp, #20
   13a36:	9202      	str	r2, [sp, #8]
   13a38:	f000 f8e0 	bl	13bfc <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   13a3c:	9a02      	ldr	r2, [sp, #8]
   13a3e:	9b01      	ldr	r3, [sp, #4]
   13a40:	79d0      	ldrb	r0, [r2, #7]
   13a42:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   13a46:	d131      	bne.n	13aac <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   13a48:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   13a4c:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   13a50:	a805      	add	r0, sp, #20
   13a52:	9303      	str	r3, [sp, #12]
   13a54:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   13a56:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   13a58:	f000 f8d8 	bl	13c0c <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   13a5c:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   13a5e:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   13a60:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   13a62:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   13a66:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   13a68:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   13a6c:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   13a70:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   13a74:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   13a76:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   13a78:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   13a7a:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   13a7e:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13a80:	7a5b      	ldrb	r3, [r3, #9]
   13a82:	b9c3      	cbnz	r3, 13ab6 <_usb_d_dev_ep_trans+0x166>
   13a84:	461f      	mov	r7, r3
   13a86:	445d      	add	r5, fp
   13a88:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   13a8c:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13a90:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   13a94:	f367 1304 	bfi	r3, r7, #4, #1
   13a98:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   13a9c:	4640      	mov	r0, r8
   13a9e:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   13aa2:	db17      	blt.n	13ad4 <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   13aa4:	f7fe ff36 	bl	12914 <_usb_d_dev_out_next>
	return ERR_NONE;
   13aa8:	2000      	movs	r0, #0
   13aaa:	e792      	b.n	139d2 <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   13aac:	a805      	add	r0, sp, #20
   13aae:	f000 f8ad 	bl	13c0c <atomic_leave_critical>
		return USB_BUSY;
   13ab2:	2001      	movs	r0, #1
   13ab4:	e78d      	b.n	139d2 <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13ab6:	fab7 f787 	clz	r7, r7
   13aba:	097f      	lsrs	r7, r7, #5
   13abc:	e7e3      	b.n	13a86 <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   13abe:	f06f 0011 	mvn.w	r0, #17
   13ac2:	e786      	b.n	139d2 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   13ac4:	469a      	mov	sl, r3
   13ac6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13aca:	e777      	b.n	139bc <_usb_d_dev_ep_trans+0x6c>
   13acc:	46ba      	mov	sl, r7
   13ace:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13ad2:	e773      	b.n	139bc <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   13ad4:	f7fe fe64 	bl	127a0 <_usb_d_dev_in_next>
	return ERR_NONE;
   13ad8:	2000      	movs	r0, #0
   13ada:	e77a      	b.n	139d2 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   13adc:	f06f 0012 	mvn.w	r0, #18
   13ae0:	e777      	b.n	139d2 <_usb_d_dev_ep_trans+0x82>
   13ae2:	bf00      	nop
   13ae4:	20001fec 	.word	0x20001fec
   13ae8:	20031fff 	.word	0x20031fff

00013aec <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   13aec:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13aee:	f010 000f 	ands.w	r0, r0, #15
   13af2:	d117      	bne.n	13b24 <_usb_d_dev_ep_abort+0x38>
{
   13af4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13af6:	0081      	lsls	r1, r0, #2
   13af8:	4d27      	ldr	r5, [pc, #156]	; (13b98 <_usb_d_dev_ep_abort+0xac>)
   13afa:	180a      	adds	r2, r1, r0
   13afc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   13b00:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13b02:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   13b06:	2625      	movs	r6, #37	; 0x25
   13b08:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13b0c:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   13b0e:	f04f 064a 	mov.w	r6, #74	; 0x4a
   13b12:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13b16:	d003      	beq.n	13b20 <_usb_d_dev_ep_abort+0x34>
   13b18:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   13b1c:	0652      	lsls	r2, r2, #25
   13b1e:	d408      	bmi.n	13b32 <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   13b20:	b003      	add	sp, #12
   13b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13b24:	2b00      	cmp	r3, #0
   13b26:	bfb4      	ite	lt
   13b28:	1c82      	addlt	r2, r0, #2
   13b2a:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   13b2c:	2802      	cmp	r0, #2
   13b2e:	d931      	bls.n	13b94 <_usb_d_dev_ep_abort+0xa8>
   13b30:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13b32:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13b36:	f102 0608 	add.w	r6, r2, #8
   13b3a:	0177      	lsls	r7, r6, #5
	if (dir) {
   13b3c:	2b00      	cmp	r3, #0
   13b3e:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   13b42:	bfb5      	itete	lt
   13b44:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13b48:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13b4c:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13b50:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   13b54:	af02      	add	r7, sp, #8
   13b56:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13b5a:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13b5c:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   13b5e:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13b60:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13b64:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13b68:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   13b6c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13b70:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13b72:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   13b76:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13b7a:	692d      	ldr	r5, [r5, #16]
   13b7c:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   13b7e:	f36f 1686 	bfc	r6, #6, #1
   13b82:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13b86:	4620      	mov	r0, r4
   13b88:	2102      	movs	r1, #2
   13b8a:	462b      	mov	r3, r5
}
   13b8c:	b003      	add	sp, #12
   13b8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13b92:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   13b94:	4610      	mov	r0, r2
   13b96:	e7ad      	b.n	13af4 <_usb_d_dev_ep_abort+0x8>
   13b98:	20001fec 	.word	0x20001fec

00013b9c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13b9c:	4b06      	ldr	r3, [pc, #24]	; (13bb8 <_usb_d_dev_register_callback+0x1c>)
   13b9e:	2900      	cmp	r1, #0
   13ba0:	bf08      	it	eq
   13ba2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   13ba4:	2801      	cmp	r0, #1
   13ba6:	d003      	beq.n	13bb0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   13ba8:	b908      	cbnz	r0, 13bae <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   13baa:	4b04      	ldr	r3, [pc, #16]	; (13bbc <_usb_d_dev_register_callback+0x20>)
   13bac:	6019      	str	r1, [r3, #0]
   13bae:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   13bb0:	4b02      	ldr	r3, [pc, #8]	; (13bbc <_usb_d_dev_register_callback+0x20>)
   13bb2:	6059      	str	r1, [r3, #4]
   13bb4:	4770      	bx	lr
   13bb6:	bf00      	nop
   13bb8:	0001279d 	.word	0x0001279d
   13bbc:	20001fec 	.word	0x20001fec

00013bc0 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13bc0:	4b08      	ldr	r3, [pc, #32]	; (13be4 <_usb_d_dev_register_ep_callback+0x24>)
   13bc2:	2900      	cmp	r1, #0
   13bc4:	bf08      	it	eq
   13bc6:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   13bc8:	b130      	cbz	r0, 13bd8 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   13bca:	2801      	cmp	r0, #1
   13bcc:	d007      	beq.n	13bde <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   13bce:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   13bd0:	bf04      	itt	eq
   13bd2:	4b05      	ldreq	r3, [pc, #20]	; (13be8 <_usb_d_dev_register_ep_callback+0x28>)
   13bd4:	6119      	streq	r1, [r3, #16]
   13bd6:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   13bd8:	4b03      	ldr	r3, [pc, #12]	; (13be8 <_usb_d_dev_register_ep_callback+0x28>)
   13bda:	6099      	str	r1, [r3, #8]
   13bdc:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   13bde:	4b02      	ldr	r3, [pc, #8]	; (13be8 <_usb_d_dev_register_ep_callback+0x28>)
   13be0:	60d9      	str	r1, [r3, #12]
   13be2:	4770      	bx	lr
   13be4:	0001279d 	.word	0x0001279d
   13be8:	20001fec 	.word	0x20001fec

00013bec <USB_0_Handler>:
   13bec:	f7fe bf8e 	b.w	12b0c <_usb_d_dev_handler>

00013bf0 <USB_1_Handler>:
   13bf0:	f7fe bf8c 	b.w	12b0c <_usb_d_dev_handler>

00013bf4 <USB_2_Handler>:
   13bf4:	f7fe bf8a 	b.w	12b0c <_usb_d_dev_handler>

00013bf8 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   13bf8:	f7fe bf88 	b.w	12b0c <_usb_d_dev_handler>

00013bfc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   13bfc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   13c00:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   13c02:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   13c04:	f3bf 8f5f 	dmb	sy
   13c08:	4770      	bx	lr
   13c0a:	bf00      	nop

00013c0c <atomic_leave_critical>:
   13c0c:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   13c10:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   13c12:	f383 8810 	msr	PRIMASK, r3
   13c16:	4770      	bx	lr

00013c18 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   13c18:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   13c1a:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   13c1c:	2b08      	cmp	r3, #8
   13c1e:	d810      	bhi.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13c20:	e8df f003 	tbb	[pc, r3]
   13c24:	604d3b25 	.word	0x604d3b25
   13c28:	05a18a74 	.word	0x05a18a74
   13c2c:	11          	.byte	0x11
   13c2d:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   13c2e:	8903      	ldrh	r3, [r0, #8]
   13c30:	3b01      	subs	r3, #1
   13c32:	b29b      	uxth	r3, r3
   13c34:	8103      	strh	r3, [r0, #8]
   13c36:	b923      	cbnz	r3, 13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   13c38:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   13c3a:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   13c3c:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   13c3e:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   13c40:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   13c42:	bc30      	pop	{r4, r5}
   13c44:	4770      	bx	lr
            if (--m_timer) {
   13c46:	8903      	ldrh	r3, [r0, #8]
   13c48:	3b01      	subs	r3, #1
   13c4a:	b29b      	uxth	r3, r3
   13c4c:	8103      	strh	r3, [r0, #8]
   13c4e:	2b00      	cmp	r3, #0
   13c50:	d1f7      	bne.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13c52:	8981      	ldrh	r1, [r0, #12]
   13c54:	3901      	subs	r1, #1
   13c56:	b289      	uxth	r1, r1
   13c58:	8181      	strh	r1, [r0, #12]
   13c5a:	2900      	cmp	r1, #0
   13c5c:	f000 80b3 	beq.w	13dc6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   13c60:	8a43      	ldrh	r3, [r0, #18]
   13c62:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   13c64:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   13c66:	2307      	movs	r3, #7
                m_ledOn = true;
   13c68:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   13c6a:	7143      	strb	r3, [r0, #5]
                break;
   13c6c:	e7e9      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   13c6e:	7801      	ldrb	r1, [r0, #0]
   13c70:	2900      	cmp	r1, #0
   13c72:	f040 8089 	bne.w	13d88 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   13c76:	7841      	ldrb	r1, [r0, #1]
   13c78:	2900      	cmp	r1, #0
   13c7a:	f040 80cb 	bne.w	13e14 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   13c7e:	7883      	ldrb	r3, [r0, #2]
   13c80:	2b00      	cmp	r3, #0
   13c82:	f040 811a 	bne.w	13eba <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   13c86:	78c3      	ldrb	r3, [r0, #3]
   13c88:	2b00      	cmp	r3, #0
   13c8a:	f040 8118 	bne.w	13ebe <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   13c8e:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13c90:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   13c92:	2b00      	cmp	r3, #0
   13c94:	d0d5      	beq.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13c96:	5d41      	ldrb	r1, [r0, r5]
   13c98:	e077      	b.n	13d8a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   13c9a:	8903      	ldrh	r3, [r0, #8]
   13c9c:	3b01      	subs	r3, #1
   13c9e:	b29b      	uxth	r3, r3
   13ca0:	8103      	strh	r3, [r0, #8]
   13ca2:	2b00      	cmp	r3, #0
   13ca4:	d1cd      	bne.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13ca6:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   13ca8:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   13caa:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   13cac:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13cae:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   13cb0:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13cb2:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   13cb6:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   13cb8:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13cba:	8143      	strh	r3, [r0, #10]
            break;
   13cbc:	e7c1      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13cbe:	8903      	ldrh	r3, [r0, #8]
   13cc0:	3b01      	subs	r3, #1
   13cc2:	b29b      	uxth	r3, r3
   13cc4:	8103      	strh	r3, [r0, #8]
   13cc6:	2b00      	cmp	r3, #0
   13cc8:	d1bb      	bne.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13cca:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13ccc:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13cce:	3b01      	subs	r3, #1
   13cd0:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13cd2:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13cd6:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13cd8:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13cda:	2b00      	cmp	r3, #0
   13cdc:	d06d      	beq.n	13dba <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   13cde:	8a03      	ldrh	r3, [r0, #16]
   13ce0:	8103      	strh	r3, [r0, #8]
                break;
   13ce2:	e7ae      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13ce4:	8903      	ldrh	r3, [r0, #8]
   13ce6:	3b01      	subs	r3, #1
   13ce8:	b29b      	uxth	r3, r3
   13cea:	8103      	strh	r3, [r0, #8]
   13cec:	2b00      	cmp	r3, #0
   13cee:	d1a8      	bne.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   13cf0:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13cf2:	8a01      	ldrh	r1, [r0, #16]
   13cf4:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   13cf6:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   13cf8:	3201      	adds	r2, #1
            m_ledOn = true;
   13cfa:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   13cfc:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13cfe:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   13d02:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   13d04:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   13d06:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13d08:	8143      	strh	r3, [r0, #10]
            break;
   13d0a:	e79a      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13d0c:	8903      	ldrh	r3, [r0, #8]
   13d0e:	3b01      	subs	r3, #1
   13d10:	b29b      	uxth	r3, r3
   13d12:	8103      	strh	r3, [r0, #8]
   13d14:	2b00      	cmp	r3, #0
   13d16:	d194      	bne.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13d18:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13d1a:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13d1c:	3b01      	subs	r3, #1
   13d1e:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13d20:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13d24:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13d26:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13d28:	2b00      	cmp	r3, #0
   13d2a:	d1d8      	bne.n	13cde <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   13d2c:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   13d2e:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   13d30:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   13d32:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   13d34:	7143      	strb	r3, [r0, #5]
            break;
   13d36:	e784      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13d38:	8903      	ldrh	r3, [r0, #8]
   13d3a:	3b01      	subs	r3, #1
   13d3c:	b29b      	uxth	r3, r3
   13d3e:	8103      	strh	r3, [r0, #8]
   13d40:	2b00      	cmp	r3, #0
   13d42:	f47f af7e 	bne.w	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13d46:	8983      	ldrh	r3, [r0, #12]
   13d48:	3b01      	subs	r3, #1
   13d4a:	b29b      	uxth	r3, r3
   13d4c:	8183      	strh	r3, [r0, #12]
   13d4e:	b373      	cbz	r3, 13dae <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13d50:	8a02      	ldrh	r2, [r0, #16]
   13d52:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   13d54:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   13d56:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   13d58:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13d5a:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   13d5e:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   13d60:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13d62:	8143      	strh	r3, [r0, #10]
                break;
   13d64:	e76d      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13d66:	8903      	ldrh	r3, [r0, #8]
   13d68:	3b01      	subs	r3, #1
   13d6a:	b29b      	uxth	r3, r3
   13d6c:	8103      	strh	r3, [r0, #8]
   13d6e:	2b00      	cmp	r3, #0
   13d70:	f47f af67 	bne.w	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   13d74:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   13d76:	8a42      	ldrh	r2, [r0, #18]
   13d78:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   13d7a:	3301      	adds	r3, #1
            m_ledOn = true;
   13d7c:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   13d7e:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   13d80:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   13d82:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   13d84:	7142      	strb	r2, [r0, #5]
            break;
   13d86:	e75c      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   13d88:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   13d8a:	f011 0301 	ands.w	r3, r1, #1
   13d8e:	d149      	bne.n	13e24 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   13d90:	3301      	adds	r3, #1
   13d92:	b2db      	uxtb	r3, r3
   13d94:	fa41 f203 	asr.w	r2, r1, r3
   13d98:	07d4      	lsls	r4, r2, #31
   13d9a:	d5f9      	bpl.n	13d90 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   13d9c:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   13d9e:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   13da0:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   13da2:	2201      	movs	r2, #1
    m_currentCode = code;
   13da4:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   13da6:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   13da8:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   13daa:	7142      	strb	r2, [r0, #5]
            break;
   13dac:	e749      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   13dae:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   13db0:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   13db2:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   13db4:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   13db6:	7143      	strb	r3, [r0, #5]
            break;
   13db8:	e743      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   13dba:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   13dbc:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   13dbe:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   13dc0:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   13dc2:	7143      	strb	r3, [r0, #5]
            break;
   13dc4:	e73d      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   13dc6:	7983      	ldrb	r3, [r0, #6]
   13dc8:	79c2      	ldrb	r2, [r0, #7]
   13dca:	3301      	adds	r3, #1
   13dcc:	b2db      	uxtb	r3, r3
    if (code > 7) {
   13dce:	2b07      	cmp	r3, #7
        group++;
   13dd0:	bf85      	ittet	hi
   13dd2:	3201      	addhi	r2, #1
   13dd4:	b2d2      	uxtbhi	r2, r2
   13dd6:	4619      	movls	r1, r3
        code = 0;
   13dd8:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   13dda:	2a04      	cmp	r2, #4
   13ddc:	4615      	mov	r5, r2
   13dde:	dd1b      	ble.n	13e18 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   13de0:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   13de2:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   13de4:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   13de8:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   13dea:	d01d      	beq.n	13e28 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   13dec:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   13dee:	07e9      	lsls	r1, r5, #31
   13df0:	d452      	bmi.n	13e98 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   13df2:	2501      	movs	r5, #1
   13df4:	3301      	adds	r3, #1
   13df6:	b2db      	uxtb	r3, r3
   13df8:	fa44 f103 	asr.w	r1, r4, r3
   13dfc:	07c9      	lsls	r1, r1, #31
   13dfe:	d5f9      	bpl.n	13df4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   13e00:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13e02:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   13e04:	2d00      	cmp	r5, #0
   13e06:	d149      	bne.n	13e9c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   13e08:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   13e0a:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   13e0c:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   13e0e:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   13e10:	7143      	strb	r3, [r0, #5]
}
   13e12:	e716      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   13e14:	2501      	movs	r5, #1
   13e16:	e7b8      	b.n	13d8a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   13e18:	5c84      	ldrb	r4, [r0, r2]
   13e1a:	fa54 f101 	asrs.w	r1, r4, r1
   13e1e:	d029      	beq.n	13e74 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   13e20:	7bc5      	ldrb	r5, [r0, #15]
   13e22:	e7eb      	b.n	13dfc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   13e24:	2300      	movs	r3, #0
   13e26:	e7b9      	b.n	13d9c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   13e28:	7843      	ldrb	r3, [r0, #1]
   13e2a:	bb83      	cbnz	r3, 13e8e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13e2c:	2102      	movs	r1, #2
   13e2e:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   13e30:	5cc3      	ldrb	r3, [r0, r3]
   13e32:	2b00      	cmp	r3, #0
   13e34:	d145      	bne.n	13ec2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13e36:	1c4a      	adds	r2, r1, #1
   13e38:	b2d2      	uxtb	r2, r2
   13e3a:	2a05      	cmp	r2, #5
   13e3c:	d00d      	beq.n	13e5a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13e3e:	5c83      	ldrb	r3, [r0, r2]
   13e40:	bb2b      	cbnz	r3, 13e8e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13e42:	1c8a      	adds	r2, r1, #2
   13e44:	b2d2      	uxtb	r2, r2
   13e46:	2a05      	cmp	r2, #5
   13e48:	d007      	beq.n	13e5a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13e4a:	5c83      	ldrb	r3, [r0, r2]
   13e4c:	b9fb      	cbnz	r3, 13e8e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13e4e:	1ccb      	adds	r3, r1, #3
   13e50:	b2db      	uxtb	r3, r3
   13e52:	2b05      	cmp	r3, #5
   13e54:	d001      	beq.n	13e5a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13e56:	5cc3      	ldrb	r3, [r0, r3]
   13e58:	b9c3      	cbnz	r3, 13e8c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   13e5a:	7802      	ldrb	r2, [r0, #0]
   13e5c:	b112      	cbz	r2, 13e64 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   13e5e:	e024      	b.n	13eaa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   13e60:	5c83      	ldrb	r3, [r0, r2]
   13e62:	bb23      	cbnz	r3, 13eae <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   13e64:	3201      	adds	r2, #1
   13e66:	b2d2      	uxtb	r2, r2
   13e68:	42aa      	cmp	r2, r5
   13e6a:	ddf9      	ble.n	13e60 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   13e6c:	2300      	movs	r3, #0
   13e6e:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   13e70:	7143      	strb	r3, [r0, #5]
   13e72:	e6e6      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13e74:	3201      	adds	r2, #1
   13e76:	b2d2      	uxtb	r2, r2
   13e78:	2a04      	cmp	r2, #4
   13e7a:	d8ee      	bhi.n	13e5a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13e7c:	5c83      	ldrb	r3, [r0, r2]
   13e7e:	b933      	cbnz	r3, 13e8e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13e80:	1ca9      	adds	r1, r5, #2
   13e82:	b2c9      	uxtb	r1, r1
   13e84:	2905      	cmp	r1, #5
   13e86:	460b      	mov	r3, r1
   13e88:	d1d2      	bne.n	13e30 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   13e8a:	e7e6      	b.n	13e5a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13e8c:	2204      	movs	r2, #4
   13e8e:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13e90:	461c      	mov	r4, r3
   13e92:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   13e94:	2300      	movs	r3, #0
   13e96:	e7b1      	b.n	13dfc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   13e98:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13e9a:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   13e9c:	8a83      	ldrh	r3, [r0, #20]
   13e9e:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   13ea0:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   13ea2:	2301      	movs	r3, #1
                m_ledOn = false;
   13ea4:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   13ea6:	7143      	strb	r3, [r0, #5]
   13ea8:	e6cb      	b.n	13c42 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   13eaa:	4613      	mov	r3, r2
   13eac:	2200      	movs	r2, #0
   13eae:	461d      	mov	r5, r3
            m_patternWrap = true;
   13eb0:	2301      	movs	r3, #1
   13eb2:	73c3      	strb	r3, [r0, #15]
   13eb4:	462c      	mov	r4, r5
        code = 0;
   13eb6:	2300      	movs	r3, #0
   13eb8:	e799      	b.n	13dee <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   13eba:	2502      	movs	r5, #2
   13ebc:	e6eb      	b.n	13c96 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13ebe:	2503      	movs	r5, #3
   13ec0:	e6e9      	b.n	13c96 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   13ec2:	460a      	mov	r2, r1
   13ec4:	e7e3      	b.n	13e8e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   13ec6:	bf00      	nop

00013ec8 <arm_sin_q15>:
   13ec8:	0982      	lsrs	r2, r0, #6
   13eca:	490c      	ldr	r1, [pc, #48]	; (13efc <arm_sin_q15+0x34>)
   13ecc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13ed0:	0240      	lsls	r0, r0, #9
   13ed2:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   13ed6:	b410      	push	{r4}
   13ed8:	3201      	adds	r2, #1
   13eda:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   13ede:	fb03 f304 	mul.w	r3, r3, r4
   13ee2:	0c1b      	lsrs	r3, r3, #16
   13ee4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   13ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
   13eec:	041b      	lsls	r3, r3, #16
   13eee:	fb10 3002 	smlabb	r0, r0, r2, r3
   13ef2:	f340 30cf 	sbfx	r0, r0, #15, #16
   13ef6:	f020 0001 	bic.w	r0, r0, #1
   13efa:	4770      	bx	lr
   13efc:	000241a0 	.word	0x000241a0

00013f00 <_Znwj>:
   13f00:	b510      	push	{r4, lr}
   13f02:	2800      	cmp	r0, #0
   13f04:	bf14      	ite	ne
   13f06:	4604      	movne	r4, r0
   13f08:	2401      	moveq	r4, #1
   13f0a:	4620      	mov	r0, r4
   13f0c:	f00a fc40 	bl	1e790 <malloc>
   13f10:	b100      	cbz	r0, 13f14 <_Znwj+0x14>
   13f12:	bd10      	pop	{r4, pc}
   13f14:	f000 f9c8 	bl	142a8 <_ZSt15get_new_handlerv>
   13f18:	b108      	cbz	r0, 13f1e <_Znwj+0x1e>
   13f1a:	4780      	blx	r0
   13f1c:	e7f5      	b.n	13f0a <_Znwj+0xa>
   13f1e:	2004      	movs	r0, #4
   13f20:	f000 f8a2 	bl	14068 <__cxa_allocate_exception>
   13f24:	4b02      	ldr	r3, [pc, #8]	; (13f30 <_Znwj+0x30>)
   13f26:	6003      	str	r3, [r0, #0]
   13f28:	4a02      	ldr	r2, [pc, #8]	; (13f34 <_Znwj+0x34>)
   13f2a:	4903      	ldr	r1, [pc, #12]	; (13f38 <_Znwj+0x38>)
   13f2c:	f000 f946 	bl	141bc <__cxa_throw>
   13f30:	000245f4 	.word	0x000245f4
   13f34:	00013f59 	.word	0x00013f59
   13f38:	000245d0 	.word	0x000245d0

00013f3c <__cxa_pure_virtual>:
   13f3c:	b508      	push	{r3, lr}
   13f3e:	221b      	movs	r2, #27
   13f40:	4902      	ldr	r1, [pc, #8]	; (13f4c <__cxa_pure_virtual+0x10>)
   13f42:	2002      	movs	r0, #2
   13f44:	f00c ffc6 	bl	20ed4 <write>
   13f48:	f000 f8ee 	bl	14128 <_ZSt9terminatev>
   13f4c:	000245a4 	.word	0x000245a4

00013f50 <_ZNKSt9bad_alloc4whatEv>:
   13f50:	4800      	ldr	r0, [pc, #0]	; (13f54 <_ZNKSt9bad_alloc4whatEv+0x4>)
   13f52:	4770      	bx	lr
   13f54:	000245c0 	.word	0x000245c0

00013f58 <_ZNSt9bad_allocD1Ev>:
   13f58:	b510      	push	{r4, lr}
   13f5a:	4b03      	ldr	r3, [pc, #12]	; (13f68 <_ZNSt9bad_allocD1Ev+0x10>)
   13f5c:	6003      	str	r3, [r0, #0]
   13f5e:	4604      	mov	r4, r0
   13f60:	f000 f8be 	bl	140e0 <_ZNSt9exceptionD1Ev>
   13f64:	4620      	mov	r0, r4
   13f66:	bd10      	pop	{r4, pc}
   13f68:	000245f4 	.word	0x000245f4

00013f6c <_ZNSt9bad_allocD0Ev>:
   13f6c:	b510      	push	{r4, lr}
   13f6e:	4b05      	ldr	r3, [pc, #20]	; (13f84 <_ZNSt9bad_allocD0Ev+0x18>)
   13f70:	6003      	str	r3, [r0, #0]
   13f72:	4604      	mov	r4, r0
   13f74:	f000 f8b4 	bl	140e0 <_ZNSt9exceptionD1Ev>
   13f78:	4620      	mov	r0, r4
   13f7a:	2104      	movs	r1, #4
   13f7c:	f000 f804 	bl	13f88 <_ZdlPvj>
   13f80:	4620      	mov	r0, r4
   13f82:	bd10      	pop	{r4, pc}
   13f84:	000245f4 	.word	0x000245f4

00013f88 <_ZdlPvj>:
   13f88:	f000 bac0 	b.w	1450c <_ZdlPv>

00013f8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   13f8c:	b4f0      	push	{r4, r5, r6, r7}
   13f8e:	4c1b      	ldr	r4, [pc, #108]	; (13ffc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   13f90:	f850 7c08 	ldr.w	r7, [r0, #-8]
   13f94:	6861      	ldr	r1, [r4, #4]
   13f96:	f1a0 0608 	sub.w	r6, r0, #8
   13f9a:	b1c9      	cbz	r1, 13fd0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   13f9c:	19f5      	adds	r5, r6, r7
   13f9e:	42a9      	cmp	r1, r5
   13fa0:	d01b      	beq.n	13fda <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   13fa2:	684a      	ldr	r2, [r1, #4]
   13fa4:	b32a      	cbz	r2, 13ff2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   13fa6:	4295      	cmp	r5, r2
   13fa8:	d303      	bcc.n	13fb2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   13faa:	e022      	b.n	13ff2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   13fac:	429d      	cmp	r5, r3
   13fae:	d205      	bcs.n	13fbc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13fb0:	461a      	mov	r2, r3
   13fb2:	6853      	ldr	r3, [r2, #4]
   13fb4:	1d0c      	adds	r4, r1, #4
   13fb6:	4611      	mov	r1, r2
   13fb8:	2b00      	cmp	r3, #0
   13fba:	d1f7      	bne.n	13fac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   13fbc:	6811      	ldr	r1, [r2, #0]
   13fbe:	1855      	adds	r5, r2, r1
   13fc0:	42ae      	cmp	r6, r5
   13fc2:	d013      	beq.n	13fec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   13fc4:	f840 3c04 	str.w	r3, [r0, #-4]
   13fc8:	6823      	ldr	r3, [r4, #0]
   13fca:	605e      	str	r6, [r3, #4]
   13fcc:	bcf0      	pop	{r4, r5, r6, r7}
   13fce:	4770      	bx	lr
   13fd0:	f840 1c04 	str.w	r1, [r0, #-4]
   13fd4:	6066      	str	r6, [r4, #4]
   13fd6:	bcf0      	pop	{r4, r5, r6, r7}
   13fd8:	4770      	bx	lr
   13fda:	680b      	ldr	r3, [r1, #0]
   13fdc:	684a      	ldr	r2, [r1, #4]
   13fde:	f840 2c04 	str.w	r2, [r0, #-4]
   13fe2:	441f      	add	r7, r3
   13fe4:	f840 7c08 	str.w	r7, [r0, #-8]
   13fe8:	6066      	str	r6, [r4, #4]
   13fea:	e7ef      	b.n	13fcc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   13fec:	440f      	add	r7, r1
   13fee:	6017      	str	r7, [r2, #0]
   13ff0:	e7ec      	b.n	13fcc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   13ff2:	4613      	mov	r3, r2
   13ff4:	3404      	adds	r4, #4
   13ff6:	460a      	mov	r2, r1
   13ff8:	e7e0      	b.n	13fbc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13ffa:	bf00      	nop
   13ffc:	2000227c 	.word	0x2000227c

00014000 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   14000:	b430      	push	{r4, r5}
   14002:	4c18      	ldr	r4, [pc, #96]	; (14064 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   14004:	f100 0108 	add.w	r1, r0, #8
   14008:	6863      	ldr	r3, [r4, #4]
   1400a:	2908      	cmp	r1, #8
   1400c:	bf38      	it	cc
   1400e:	2108      	movcc	r1, #8
   14010:	b313      	cbz	r3, 14058 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   14012:	3107      	adds	r1, #7
   14014:	681a      	ldr	r2, [r3, #0]
   14016:	f021 0107 	bic.w	r1, r1, #7
   1401a:	4291      	cmp	r1, r2
   1401c:	d804      	bhi.n	14028 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   1401e:	e01d      	b.n	1405c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   14020:	6802      	ldr	r2, [r0, #0]
   14022:	4291      	cmp	r1, r2
   14024:	d905      	bls.n	14032 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   14026:	4603      	mov	r3, r0
   14028:	6858      	ldr	r0, [r3, #4]
   1402a:	2800      	cmp	r0, #0
   1402c:	d1f8      	bne.n	14020 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   1402e:	bc30      	pop	{r4, r5}
   14030:	4770      	bx	lr
   14032:	3304      	adds	r3, #4
   14034:	1a52      	subs	r2, r2, r1
   14036:	2a07      	cmp	r2, #7
   14038:	d90a      	bls.n	14050 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   1403a:	1845      	adds	r5, r0, r1
   1403c:	6844      	ldr	r4, [r0, #4]
   1403e:	606c      	str	r4, [r5, #4]
   14040:	681c      	ldr	r4, [r3, #0]
   14042:	5042      	str	r2, [r0, r1]
   14044:	6021      	str	r1, [r4, #0]
   14046:	601d      	str	r5, [r3, #0]
   14048:	f104 0008 	add.w	r0, r4, #8
   1404c:	bc30      	pop	{r4, r5}
   1404e:	4770      	bx	lr
   14050:	6842      	ldr	r2, [r0, #4]
   14052:	601a      	str	r2, [r3, #0]
   14054:	4604      	mov	r4, r0
   14056:	e7f7      	b.n	14048 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   14058:	4618      	mov	r0, r3
   1405a:	e7e8      	b.n	1402e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   1405c:	4618      	mov	r0, r3
   1405e:	1d23      	adds	r3, r4, #4
   14060:	e7e8      	b.n	14034 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   14062:	bf00      	nop
   14064:	2000227c 	.word	0x2000227c

00014068 <__cxa_allocate_exception>:
   14068:	b538      	push	{r3, r4, r5, lr}
   1406a:	f100 0580 	add.w	r5, r0, #128	; 0x80
   1406e:	4628      	mov	r0, r5
   14070:	f00a fb8e 	bl	1e790 <malloc>
   14074:	4604      	mov	r4, r0
   14076:	b138      	cbz	r0, 14088 <__cxa_allocate_exception+0x20>
   14078:	2280      	movs	r2, #128	; 0x80
   1407a:	2100      	movs	r1, #0
   1407c:	4620      	mov	r0, r4
   1407e:	f00a ffdd 	bl	1f03c <memset>
   14082:	f104 0080 	add.w	r0, r4, #128	; 0x80
   14086:	bd38      	pop	{r3, r4, r5, pc}
   14088:	4628      	mov	r0, r5
   1408a:	f7ff ffb9 	bl	14000 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   1408e:	4604      	mov	r4, r0
   14090:	2800      	cmp	r0, #0
   14092:	d1f1      	bne.n	14078 <__cxa_allocate_exception+0x10>
   14094:	f000 f848 	bl	14128 <_ZSt9terminatev>

00014098 <__cxa_free_exception>:
   14098:	4a06      	ldr	r2, [pc, #24]	; (140b4 <__cxa_free_exception+0x1c>)
   1409a:	6893      	ldr	r3, [r2, #8]
   1409c:	3880      	subs	r0, #128	; 0x80
   1409e:	4298      	cmp	r0, r3
   140a0:	d905      	bls.n	140ae <__cxa_free_exception+0x16>
   140a2:	68d2      	ldr	r2, [r2, #12]
   140a4:	4413      	add	r3, r2
   140a6:	4298      	cmp	r0, r3
   140a8:	d201      	bcs.n	140ae <__cxa_free_exception+0x16>
   140aa:	f7ff bf6f 	b.w	13f8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   140ae:	f00a bb77 	b.w	1e7a0 <free>
   140b2:	bf00      	nop
   140b4:	2000227c 	.word	0x2000227c

000140b8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   140b8:	b538      	push	{r3, r4, r5, lr}
   140ba:	4c08      	ldr	r4, [pc, #32]	; (140dc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   140bc:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   140c0:	4628      	mov	r0, r5
   140c2:	60e5      	str	r5, [r4, #12]
   140c4:	f00a fb64 	bl	1e790 <malloc>
   140c8:	60a0      	str	r0, [r4, #8]
   140ca:	b120      	cbz	r0, 140d6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   140cc:	2300      	movs	r3, #0
   140ce:	6060      	str	r0, [r4, #4]
   140d0:	6005      	str	r5, [r0, #0]
   140d2:	6043      	str	r3, [r0, #4]
   140d4:	bd38      	pop	{r3, r4, r5, pc}
   140d6:	60e0      	str	r0, [r4, #12]
   140d8:	6060      	str	r0, [r4, #4]
   140da:	bd38      	pop	{r3, r4, r5, pc}
   140dc:	2000227c 	.word	0x2000227c

000140e0 <_ZNSt9exceptionD1Ev>:
   140e0:	4770      	bx	lr
   140e2:	bf00      	nop

000140e4 <_ZNSt13bad_exceptionD1Ev>:
   140e4:	4770      	bx	lr
   140e6:	bf00      	nop

000140e8 <_ZGTtNKSt13bad_exception4whatEv>:
   140e8:	4800      	ldr	r0, [pc, #0]	; (140ec <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   140ea:	4770      	bx	lr
   140ec:	00024600 	.word	0x00024600

000140f0 <_ZNSt13bad_exceptionD0Ev>:
   140f0:	b510      	push	{r4, lr}
   140f2:	2104      	movs	r1, #4
   140f4:	4604      	mov	r4, r0
   140f6:	f7ff ff47 	bl	13f88 <_ZdlPvj>
   140fa:	4620      	mov	r0, r4
   140fc:	bd10      	pop	{r4, pc}
   140fe:	bf00      	nop

00014100 <_ZN10__cxxabiv111__terminateEPFvvE>:
   14100:	b508      	push	{r3, lr}
   14102:	4780      	blx	r0
   14104:	f00a f896 	bl	1e234 <abort>
   14108:	f000 fb6c 	bl	147e4 <__cxa_begin_catch>
   1410c:	f00a f892 	bl	1e234 <abort>
   14110:	460d      	mov	r5, r1
   14112:	4604      	mov	r4, r0
   14114:	f000 fba4 	bl	14860 <__cxa_end_catch>
   14118:	3501      	adds	r5, #1
   1411a:	d001      	beq.n	14120 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   1411c:	f000 f9f8 	bl	14510 <__cxa_end_cleanup>
   14120:	4620      	mov	r0, r4
   14122:	f000 faef 	bl	14704 <__cxa_call_unexpected>
   14126:	bf00      	nop

00014128 <_ZSt9terminatev>:
   14128:	b508      	push	{r3, lr}
   1412a:	4b03      	ldr	r3, [pc, #12]	; (14138 <_ZSt9terminatev+0x10>)
   1412c:	6818      	ldr	r0, [r3, #0]
   1412e:	f3bf 8f5b 	dmb	ish
   14132:	f7ff ffe5 	bl	14100 <_ZN10__cxxabiv111__terminateEPFvvE>
   14136:	bf00      	nop
   14138:	200000f0 	.word	0x200000f0

0001413c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1413c:	b508      	push	{r3, lr}
   1413e:	4780      	blx	r0
   14140:	f7ff fff2 	bl	14128 <_ZSt9terminatev>

00014144 <_ZSt10unexpectedv>:
   14144:	b508      	push	{r3, lr}
   14146:	4b03      	ldr	r3, [pc, #12]	; (14154 <_ZSt10unexpectedv+0x10>)
   14148:	6818      	ldr	r0, [r3, #0]
   1414a:	f3bf 8f5b 	dmb	ish
   1414e:	f7ff fff5 	bl	1413c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   14152:	bf00      	nop
   14154:	200000ec 	.word	0x200000ec

00014158 <_ZSt13get_terminatev>:
   14158:	4b02      	ldr	r3, [pc, #8]	; (14164 <_ZSt13get_terminatev+0xc>)
   1415a:	6818      	ldr	r0, [r3, #0]
   1415c:	f3bf 8f5b 	dmb	ish
   14160:	4770      	bx	lr
   14162:	bf00      	nop
   14164:	200000f0 	.word	0x200000f0

00014168 <_ZSt14get_unexpectedv>:
   14168:	4b02      	ldr	r3, [pc, #8]	; (14174 <_ZSt14get_unexpectedv+0xc>)
   1416a:	6818      	ldr	r0, [r3, #0]
   1416c:	f3bf 8f5b 	dmb	ish
   14170:	4770      	bx	lr
   14172:	bf00      	nop
   14174:	200000ec 	.word	0x200000ec

00014178 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   14178:	2801      	cmp	r0, #1
   1417a:	b510      	push	{r4, lr}
   1417c:	d81a      	bhi.n	141b4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   1417e:	f3bf 8f5b 	dmb	ish
   14182:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   14186:	e853 2f00 	ldrex	r2, [r3]
   1418a:	3a01      	subs	r2, #1
   1418c:	e843 2000 	strex	r0, r2, [r3]
   14190:	2800      	cmp	r0, #0
   14192:	d1f8      	bne.n	14186 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   14194:	f3bf 8f5b 	dmb	ish
   14198:	b95a      	cbnz	r2, 141b2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   1419a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   1419e:	f101 0458 	add.w	r4, r1, #88	; 0x58
   141a2:	b10b      	cbz	r3, 141a8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   141a4:	4620      	mov	r0, r4
   141a6:	4798      	blx	r3
   141a8:	4620      	mov	r0, r4
   141aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   141ae:	f7ff bf73 	b.w	14098 <__cxa_free_exception>
   141b2:	bd10      	pop	{r4, pc}
   141b4:	f851 0c14 	ldr.w	r0, [r1, #-20]
   141b8:	f7ff ffa2 	bl	14100 <_ZN10__cxxabiv111__terminateEPFvvE>

000141bc <__cxa_throw>:
   141bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   141be:	4604      	mov	r4, r0
   141c0:	460f      	mov	r7, r1
   141c2:	4616      	mov	r6, r2
   141c4:	f000 fb96 	bl	148f4 <__cxa_get_globals>
   141c8:	6843      	ldr	r3, [r0, #4]
   141ca:	2501      	movs	r5, #1
   141cc:	442b      	add	r3, r5
   141ce:	6043      	str	r3, [r0, #4]
   141d0:	f844 7c78 	str.w	r7, [r4, #-120]
   141d4:	f844 6c74 	str.w	r6, [r4, #-116]
   141d8:	f844 5c80 	str.w	r5, [r4, #-128]
   141dc:	f7ff ffc4 	bl	14168 <_ZSt14get_unexpectedv>
   141e0:	f844 0c70 	str.w	r0, [r4, #-112]
   141e4:	f7ff ffb8 	bl	14158 <_ZSt13get_terminatev>
   141e8:	2347      	movs	r3, #71	; 0x47
   141ea:	2243      	movs	r2, #67	; 0x43
   141ec:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   141f0:	4910      	ldr	r1, [pc, #64]	; (14234 <__cxa_throw+0x78>)
   141f2:	f804 3c58 	strb.w	r3, [r4, #-88]
   141f6:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   141fa:	232b      	movs	r3, #43	; 0x2b
   141fc:	2755      	movs	r7, #85	; 0x55
   141fe:	2600      	movs	r6, #0
   14200:	f844 0c6c 	str.w	r0, [r4, #-108]
   14204:	f804 ec57 	strb.w	lr, [r4, #-87]
   14208:	f844 1c50 	str.w	r1, [r4, #-80]
   1420c:	f804 2c55 	strb.w	r2, [r4, #-85]
   14210:	f804 2c54 	strb.w	r2, [r4, #-84]
   14214:	f804 3c53 	strb.w	r3, [r4, #-83]
   14218:	f804 3c52 	strb.w	r3, [r4, #-82]
   1421c:	f804 7c56 	strb.w	r7, [r4, #-86]
   14220:	f804 6c51 	strb.w	r6, [r4, #-81]
   14224:	4628      	mov	r0, r5
   14226:	f009 fde9 	bl	1ddfc <_Unwind_RaiseException>
   1422a:	4628      	mov	r0, r5
   1422c:	f000 fada 	bl	147e4 <__cxa_begin_catch>
   14230:	f7ff ff7a 	bl	14128 <_ZSt9terminatev>
   14234:	00014179 	.word	0x00014179

00014238 <__cxa_rethrow>:
   14238:	b510      	push	{r4, lr}
   1423a:	f000 fb5b 	bl	148f4 <__cxa_get_globals>
   1423e:	6842      	ldr	r2, [r0, #4]
   14240:	6804      	ldr	r4, [r0, #0]
   14242:	3201      	adds	r2, #1
   14244:	6042      	str	r2, [r0, #4]
   14246:	b164      	cbz	r4, 14262 <__cxa_rethrow+0x2a>
   14248:	f894 2020 	ldrb.w	r2, [r4, #32]
   1424c:	2a47      	cmp	r2, #71	; 0x47
   1424e:	d00a      	beq.n	14266 <__cxa_rethrow+0x2e>
   14250:	2200      	movs	r2, #0
   14252:	6002      	str	r2, [r0, #0]
   14254:	3420      	adds	r4, #32
   14256:	4620      	mov	r0, r4
   14258:	f009 fdf4 	bl	1de44 <_Unwind_Resume_or_Rethrow>
   1425c:	4620      	mov	r0, r4
   1425e:	f000 fac1 	bl	147e4 <__cxa_begin_catch>
   14262:	f7ff ff61 	bl	14128 <_ZSt9terminatev>
   14266:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1426a:	2a4e      	cmp	r2, #78	; 0x4e
   1426c:	d1f0      	bne.n	14250 <__cxa_rethrow+0x18>
   1426e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   14272:	2a55      	cmp	r2, #85	; 0x55
   14274:	d1ec      	bne.n	14250 <__cxa_rethrow+0x18>
   14276:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   1427a:	2a43      	cmp	r2, #67	; 0x43
   1427c:	d1e8      	bne.n	14250 <__cxa_rethrow+0x18>
   1427e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   14282:	2a43      	cmp	r2, #67	; 0x43
   14284:	d1e4      	bne.n	14250 <__cxa_rethrow+0x18>
   14286:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1428a:	2a2b      	cmp	r2, #43	; 0x2b
   1428c:	d1e0      	bne.n	14250 <__cxa_rethrow+0x18>
   1428e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   14292:	2a2b      	cmp	r2, #43	; 0x2b
   14294:	d1dc      	bne.n	14250 <__cxa_rethrow+0x18>
   14296:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   1429a:	2a01      	cmp	r2, #1
   1429c:	d8d8      	bhi.n	14250 <__cxa_rethrow+0x18>
   1429e:	6962      	ldr	r2, [r4, #20]
   142a0:	4252      	negs	r2, r2
   142a2:	6162      	str	r2, [r4, #20]
   142a4:	e7d6      	b.n	14254 <__cxa_rethrow+0x1c>
   142a6:	bf00      	nop

000142a8 <_ZSt15get_new_handlerv>:
   142a8:	4b02      	ldr	r3, [pc, #8]	; (142b4 <_ZSt15get_new_handlerv+0xc>)
   142aa:	6818      	ldr	r0, [r3, #0]
   142ac:	f3bf 8f5b 	dmb	ish
   142b0:	4770      	bx	lr
   142b2:	bf00      	nop
   142b4:	2000228c 	.word	0x2000228c

000142b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   142b8:	b510      	push	{r4, lr}
   142ba:	4b03      	ldr	r3, [pc, #12]	; (142c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   142bc:	6003      	str	r3, [r0, #0]
   142be:	4604      	mov	r4, r0
   142c0:	f000 f8ca 	bl	14458 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   142c4:	4620      	mov	r0, r4
   142c6:	bd10      	pop	{r4, pc}
   142c8:	000246f0 	.word	0x000246f0

000142cc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   142cc:	b510      	push	{r4, lr}
   142ce:	4b05      	ldr	r3, [pc, #20]	; (142e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   142d0:	6003      	str	r3, [r0, #0]
   142d2:	4604      	mov	r4, r0
   142d4:	f000 f8c0 	bl	14458 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   142d8:	4620      	mov	r0, r4
   142da:	210c      	movs	r1, #12
   142dc:	f7ff fe54 	bl	13f88 <_ZdlPvj>
   142e0:	4620      	mov	r0, r4
   142e2:	bd10      	pop	{r4, pc}
   142e4:	000246f0 	.word	0x000246f0

000142e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   142e8:	b570      	push	{r4, r5, r6, lr}
   142ea:	b082      	sub	sp, #8
   142ec:	460d      	mov	r5, r1
   142ee:	9c06      	ldr	r4, [sp, #24]
   142f0:	4294      	cmp	r4, r2
   142f2:	4606      	mov	r6, r0
   142f4:	d009      	beq.n	1430a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   142f6:	68b0      	ldr	r0, [r6, #8]
   142f8:	6806      	ldr	r6, [r0, #0]
   142fa:	9406      	str	r4, [sp, #24]
   142fc:	6a34      	ldr	r4, [r6, #32]
   142fe:	4629      	mov	r1, r5
   14300:	46a4      	mov	ip, r4
   14302:	b002      	add	sp, #8
   14304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14308:	4760      	bx	ip
   1430a:	4619      	mov	r1, r3
   1430c:	9201      	str	r2, [sp, #4]
   1430e:	9300      	str	r3, [sp, #0]
   14310:	f000 f86a 	bl	143e8 <_ZNKSt9type_infoeqERKS_>
   14314:	9b00      	ldr	r3, [sp, #0]
   14316:	9a01      	ldr	r2, [sp, #4]
   14318:	2800      	cmp	r0, #0
   1431a:	d0ec      	beq.n	142f6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   1431c:	2006      	movs	r0, #6
   1431e:	b002      	add	sp, #8
   14320:	bd70      	pop	{r4, r5, r6, pc}
   14322:	bf00      	nop

00014324 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   14324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14328:	b081      	sub	sp, #4
   1432a:	460e      	mov	r6, r1
   1432c:	4619      	mov	r1, r3
   1432e:	461f      	mov	r7, r3
   14330:	4691      	mov	r9, r2
   14332:	4683      	mov	fp, r0
   14334:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14336:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1433a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1433e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14340:	f000 f852 	bl	143e8 <_ZNKSt9type_infoeqERKS_>
   14344:	b170      	cbz	r0, 14364 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   14346:	2e00      	cmp	r6, #0
   14348:	602c      	str	r4, [r5, #0]
   1434a:	f885 9004 	strb.w	r9, [r5, #4]
   1434e:	db1f      	blt.n	14390 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   14350:	4434      	add	r4, r6
   14352:	45a0      	cmp	r8, r4
   14354:	bf0c      	ite	eq
   14356:	2406      	moveq	r4, #6
   14358:	2401      	movne	r4, #1
   1435a:	71ac      	strb	r4, [r5, #6]
   1435c:	2000      	movs	r0, #0
   1435e:	b001      	add	sp, #4
   14360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14364:	4544      	cmp	r4, r8
   14366:	d018      	beq.n	1439a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   14368:	f8db 0008 	ldr.w	r0, [fp, #8]
   1436c:	f8d0 e000 	ldr.w	lr, [r0]
   14370:	950d      	str	r5, [sp, #52]	; 0x34
   14372:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   14376:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   1437a:	940a      	str	r4, [sp, #40]	; 0x28
   1437c:	f8de 401c 	ldr.w	r4, [lr, #28]
   14380:	463b      	mov	r3, r7
   14382:	464a      	mov	r2, r9
   14384:	4631      	mov	r1, r6
   14386:	46a4      	mov	ip, r4
   14388:	b001      	add	sp, #4
   1438a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1438e:	4760      	bx	ip
   14390:	3602      	adds	r6, #2
   14392:	d1e3      	bne.n	1435c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   14394:	2301      	movs	r3, #1
   14396:	71ab      	strb	r3, [r5, #6]
   14398:	e7e0      	b.n	1435c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   1439a:	4651      	mov	r1, sl
   1439c:	4658      	mov	r0, fp
   1439e:	f000 f823 	bl	143e8 <_ZNKSt9type_infoeqERKS_>
   143a2:	2800      	cmp	r0, #0
   143a4:	d0e0      	beq.n	14368 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   143a6:	2000      	movs	r0, #0
   143a8:	f885 9005 	strb.w	r9, [r5, #5]
   143ac:	b001      	add	sp, #4
   143ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143b2:	bf00      	nop

000143b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   143b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143b8:	4607      	mov	r7, r0
   143ba:	460c      	mov	r4, r1
   143bc:	4615      	mov	r5, r2
   143be:	461e      	mov	r6, r3
   143c0:	f000 f862 	bl	14488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   143c4:	b108      	cbz	r0, 143ca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   143c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143ca:	68b8      	ldr	r0, [r7, #8]
   143cc:	6807      	ldr	r7, [r0, #0]
   143ce:	4621      	mov	r1, r4
   143d0:	69bc      	ldr	r4, [r7, #24]
   143d2:	4633      	mov	r3, r6
   143d4:	462a      	mov	r2, r5
   143d6:	46a4      	mov	ip, r4
   143d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   143dc:	4760      	bx	ip
   143de:	bf00      	nop

000143e0 <_ZNSt9type_infoD1Ev>:
   143e0:	4770      	bx	lr
   143e2:	bf00      	nop

000143e4 <_ZNKSt9type_info14__is_pointer_pEv>:
   143e4:	2000      	movs	r0, #0
   143e6:	4770      	bx	lr

000143e8 <_ZNKSt9type_infoeqERKS_>:
   143e8:	4281      	cmp	r1, r0
   143ea:	d011      	beq.n	14410 <_ZNKSt9type_infoeqERKS_+0x28>
   143ec:	b508      	push	{r3, lr}
   143ee:	6840      	ldr	r0, [r0, #4]
   143f0:	7803      	ldrb	r3, [r0, #0]
   143f2:	2b2a      	cmp	r3, #42	; 0x2a
   143f4:	d00a      	beq.n	1440c <_ZNKSt9type_infoeqERKS_+0x24>
   143f6:	6849      	ldr	r1, [r1, #4]
   143f8:	780b      	ldrb	r3, [r1, #0]
   143fa:	2b2a      	cmp	r3, #42	; 0x2a
   143fc:	bf08      	it	eq
   143fe:	3101      	addeq	r1, #1
   14400:	f00b f8f2 	bl	1f5e8 <strcmp>
   14404:	fab0 f080 	clz	r0, r0
   14408:	0940      	lsrs	r0, r0, #5
   1440a:	bd08      	pop	{r3, pc}
   1440c:	2000      	movs	r0, #0
   1440e:	bd08      	pop	{r3, pc}
   14410:	2001      	movs	r0, #1
   14412:	4770      	bx	lr

00014414 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   14414:	b570      	push	{r4, r5, r6, lr}
   14416:	6803      	ldr	r3, [r0, #0]
   14418:	b084      	sub	sp, #16
   1441a:	2400      	movs	r4, #0
   1441c:	699e      	ldr	r6, [r3, #24]
   1441e:	9400      	str	r4, [sp, #0]
   14420:	2310      	movs	r3, #16
   14422:	4615      	mov	r5, r2
   14424:	9302      	str	r3, [sp, #8]
   14426:	6812      	ldr	r2, [r2, #0]
   14428:	f88d 4004 	strb.w	r4, [sp, #4]
   1442c:	466b      	mov	r3, sp
   1442e:	9403      	str	r4, [sp, #12]
   14430:	47b0      	blx	r6
   14432:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14436:	f003 0306 	and.w	r3, r3, #6
   1443a:	2b06      	cmp	r3, #6
   1443c:	bf03      	ittte	eq
   1443e:	9b00      	ldreq	r3, [sp, #0]
   14440:	602b      	streq	r3, [r5, #0]
   14442:	2001      	moveq	r0, #1
   14444:	4620      	movne	r0, r4
   14446:	b004      	add	sp, #16
   14448:	bd70      	pop	{r4, r5, r6, pc}
   1444a:	bf00      	nop

0001444c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1444c:	9800      	ldr	r0, [sp, #0]
   1444e:	4290      	cmp	r0, r2
   14450:	bf0c      	ite	eq
   14452:	2006      	moveq	r0, #6
   14454:	2001      	movne	r0, #1
   14456:	4770      	bx	lr

00014458 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   14458:	b510      	push	{r4, lr}
   1445a:	4b03      	ldr	r3, [pc, #12]	; (14468 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1445c:	6003      	str	r3, [r0, #0]
   1445e:	4604      	mov	r4, r0
   14460:	f7ff ffbe 	bl	143e0 <_ZNSt9type_infoD1Ev>
   14464:	4620      	mov	r0, r4
   14466:	bd10      	pop	{r4, pc}
   14468:	00024764 	.word	0x00024764

0001446c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   1446c:	b510      	push	{r4, lr}
   1446e:	4b05      	ldr	r3, [pc, #20]	; (14484 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   14470:	6003      	str	r3, [r0, #0]
   14472:	4604      	mov	r4, r0
   14474:	f7ff ffb4 	bl	143e0 <_ZNSt9type_infoD1Ev>
   14478:	4620      	mov	r0, r4
   1447a:	2108      	movs	r1, #8
   1447c:	f7ff fd84 	bl	13f88 <_ZdlPvj>
   14480:	4620      	mov	r0, r4
   14482:	bd10      	pop	{r4, pc}
   14484:	00024764 	.word	0x00024764

00014488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   14488:	b538      	push	{r3, r4, r5, lr}
   1448a:	4615      	mov	r5, r2
   1448c:	461c      	mov	r4, r3
   1448e:	f7ff ffab 	bl	143e8 <_ZNKSt9type_infoeqERKS_>
   14492:	b120      	cbz	r0, 1449e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   14494:	2208      	movs	r2, #8
   14496:	2306      	movs	r3, #6
   14498:	6025      	str	r5, [r4, #0]
   1449a:	60e2      	str	r2, [r4, #12]
   1449c:	7123      	strb	r3, [r4, #4]
   1449e:	bd38      	pop	{r3, r4, r5, pc}

000144a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   144a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   144a4:	4617      	mov	r7, r2
   144a6:	461c      	mov	r4, r3
   144a8:	4606      	mov	r6, r0
   144aa:	460d      	mov	r5, r1
   144ac:	f7ff ff9c 	bl	143e8 <_ZNKSt9type_infoeqERKS_>
   144b0:	b908      	cbnz	r0, 144b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   144b2:	2c03      	cmp	r4, #3
   144b4:	d901      	bls.n	144ba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   144b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144ba:	682b      	ldr	r3, [r5, #0]
   144bc:	463a      	mov	r2, r7
   144be:	4631      	mov	r1, r6
   144c0:	4628      	mov	r0, r5
   144c2:	695b      	ldr	r3, [r3, #20]
   144c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   144c8:	4718      	bx	r3
   144ca:	bf00      	nop

000144cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   144cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ce:	b083      	sub	sp, #12
   144d0:	4617      	mov	r7, r2
   144d2:	9d08      	ldr	r5, [sp, #32]
   144d4:	990a      	ldr	r1, [sp, #40]	; 0x28
   144d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   144d8:	428d      	cmp	r5, r1
   144da:	4606      	mov	r6, r0
   144dc:	d00b      	beq.n	144f6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   144de:	4619      	mov	r1, r3
   144e0:	4630      	mov	r0, r6
   144e2:	f7ff ff81 	bl	143e8 <_ZNKSt9type_infoeqERKS_>
   144e6:	b118      	cbz	r0, 144f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   144e8:	2301      	movs	r3, #1
   144ea:	6025      	str	r5, [r4, #0]
   144ec:	7127      	strb	r7, [r4, #4]
   144ee:	71a3      	strb	r3, [r4, #6]
   144f0:	2000      	movs	r0, #0
   144f2:	b003      	add	sp, #12
   144f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   144f8:	9301      	str	r3, [sp, #4]
   144fa:	f7ff ff75 	bl	143e8 <_ZNKSt9type_infoeqERKS_>
   144fe:	b118      	cbz	r0, 14508 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   14500:	2000      	movs	r0, #0
   14502:	7167      	strb	r7, [r4, #5]
   14504:	b003      	add	sp, #12
   14506:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14508:	9b01      	ldr	r3, [sp, #4]
   1450a:	e7e8      	b.n	144de <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0001450c <_ZdlPv>:
   1450c:	f00a b948 	b.w	1e7a0 <free>

00014510 <__cxa_end_cleanup>:
   14510:	b41e      	push	{r1, r2, r3, r4}
   14512:	f000 f891 	bl	14638 <__gnu_end_cleanup>
   14516:	bc1e      	pop	{r1, r2, r3, r4}
   14518:	f009 fc82 	bl	1de20 <_Unwind_Resume>

0001451c <__cxa_type_match>:
   1451c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1451e:	7802      	ldrb	r2, [r0, #0]
   14520:	2a47      	cmp	r2, #71	; 0x47
   14522:	b083      	sub	sp, #12
   14524:	460d      	mov	r5, r1
   14526:	461f      	mov	r7, r3
   14528:	d01e      	beq.n	14568 <__cxa_type_match+0x4c>
   1452a:	2300      	movs	r3, #0
   1452c:	4c27      	ldr	r4, [pc, #156]	; (145cc <__cxa_type_match+0xb0>)
   1452e:	9301      	str	r3, [sp, #4]
   14530:	6823      	ldr	r3, [r4, #0]
   14532:	4620      	mov	r0, r4
   14534:	689b      	ldr	r3, [r3, #8]
   14536:	4798      	blx	r3
   14538:	b180      	cbz	r0, 1455c <__cxa_type_match+0x40>
   1453a:	9b01      	ldr	r3, [sp, #4]
   1453c:	681b      	ldr	r3, [r3, #0]
   1453e:	9301      	str	r3, [sp, #4]
   14540:	2602      	movs	r6, #2
   14542:	682b      	ldr	r3, [r5, #0]
   14544:	4621      	mov	r1, r4
   14546:	4628      	mov	r0, r5
   14548:	691c      	ldr	r4, [r3, #16]
   1454a:	aa01      	add	r2, sp, #4
   1454c:	2301      	movs	r3, #1
   1454e:	47a0      	blx	r4
   14550:	b130      	cbz	r0, 14560 <__cxa_type_match+0x44>
   14552:	9b01      	ldr	r3, [sp, #4]
   14554:	603b      	str	r3, [r7, #0]
   14556:	4630      	mov	r0, r6
   14558:	b003      	add	sp, #12
   1455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1455c:	2601      	movs	r6, #1
   1455e:	e7f0      	b.n	14542 <__cxa_type_match+0x26>
   14560:	4606      	mov	r6, r0
   14562:	4630      	mov	r0, r6
   14564:	b003      	add	sp, #12
   14566:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14568:	7843      	ldrb	r3, [r0, #1]
   1456a:	2b4e      	cmp	r3, #78	; 0x4e
   1456c:	d1dd      	bne.n	1452a <__cxa_type_match+0xe>
   1456e:	7883      	ldrb	r3, [r0, #2]
   14570:	2b55      	cmp	r3, #85	; 0x55
   14572:	d1da      	bne.n	1452a <__cxa_type_match+0xe>
   14574:	78c3      	ldrb	r3, [r0, #3]
   14576:	2b43      	cmp	r3, #67	; 0x43
   14578:	d019      	beq.n	145ae <__cxa_type_match+0x92>
   1457a:	78c3      	ldrb	r3, [r0, #3]
   1457c:	2b43      	cmp	r3, #67	; 0x43
   1457e:	d1d4      	bne.n	1452a <__cxa_type_match+0xe>
   14580:	7903      	ldrb	r3, [r0, #4]
   14582:	2b43      	cmp	r3, #67	; 0x43
   14584:	d1d1      	bne.n	1452a <__cxa_type_match+0xe>
   14586:	7943      	ldrb	r3, [r0, #5]
   14588:	2b2b      	cmp	r3, #43	; 0x2b
   1458a:	d1ce      	bne.n	1452a <__cxa_type_match+0xe>
   1458c:	7983      	ldrb	r3, [r0, #6]
   1458e:	2b2b      	cmp	r3, #43	; 0x2b
   14590:	d1cb      	bne.n	1452a <__cxa_type_match+0xe>
   14592:	79c3      	ldrb	r3, [r0, #7]
   14594:	2b01      	cmp	r3, #1
   14596:	d8c8      	bhi.n	1452a <__cxa_type_match+0xe>
   14598:	d004      	beq.n	145a4 <__cxa_type_match+0x88>
   1459a:	f850 4c20 	ldr.w	r4, [r0, #-32]
   1459e:	3058      	adds	r0, #88	; 0x58
   145a0:	9001      	str	r0, [sp, #4]
   145a2:	e7c5      	b.n	14530 <__cxa_type_match+0x14>
   145a4:	f850 0c20 	ldr.w	r0, [r0, #-32]
   145a8:	f850 4c78 	ldr.w	r4, [r0, #-120]
   145ac:	e7f8      	b.n	145a0 <__cxa_type_match+0x84>
   145ae:	7903      	ldrb	r3, [r0, #4]
   145b0:	2b46      	cmp	r3, #70	; 0x46
   145b2:	d1e2      	bne.n	1457a <__cxa_type_match+0x5e>
   145b4:	7943      	ldrb	r3, [r0, #5]
   145b6:	2b4f      	cmp	r3, #79	; 0x4f
   145b8:	d1df      	bne.n	1457a <__cxa_type_match+0x5e>
   145ba:	7983      	ldrb	r3, [r0, #6]
   145bc:	2b52      	cmp	r3, #82	; 0x52
   145be:	d1dc      	bne.n	1457a <__cxa_type_match+0x5e>
   145c0:	79c3      	ldrb	r3, [r0, #7]
   145c2:	2b00      	cmp	r3, #0
   145c4:	d1d9      	bne.n	1457a <__cxa_type_match+0x5e>
   145c6:	9301      	str	r3, [sp, #4]
   145c8:	4c01      	ldr	r4, [pc, #4]	; (145d0 <__cxa_type_match+0xb4>)
   145ca:	e7b1      	b.n	14530 <__cxa_type_match+0x14>
   145cc:	0002461c 	.word	0x0002461c
   145d0:	00024614 	.word	0x00024614

000145d4 <__cxa_begin_cleanup>:
   145d4:	b510      	push	{r4, lr}
   145d6:	4604      	mov	r4, r0
   145d8:	f000 f98c 	bl	148f4 <__cxa_get_globals>
   145dc:	7823      	ldrb	r3, [r4, #0]
   145de:	2b47      	cmp	r3, #71	; 0x47
   145e0:	f1a4 0220 	sub.w	r2, r4, #32
   145e4:	d004      	beq.n	145f0 <__cxa_begin_cleanup+0x1c>
   145e6:	6883      	ldr	r3, [r0, #8]
   145e8:	bb23      	cbnz	r3, 14634 <__cxa_begin_cleanup+0x60>
   145ea:	6082      	str	r2, [r0, #8]
   145ec:	2001      	movs	r0, #1
   145ee:	bd10      	pop	{r4, pc}
   145f0:	7863      	ldrb	r3, [r4, #1]
   145f2:	2b4e      	cmp	r3, #78	; 0x4e
   145f4:	d1f7      	bne.n	145e6 <__cxa_begin_cleanup+0x12>
   145f6:	78a3      	ldrb	r3, [r4, #2]
   145f8:	2b55      	cmp	r3, #85	; 0x55
   145fa:	d1f4      	bne.n	145e6 <__cxa_begin_cleanup+0x12>
   145fc:	78e3      	ldrb	r3, [r4, #3]
   145fe:	2b43      	cmp	r3, #67	; 0x43
   14600:	d1f1      	bne.n	145e6 <__cxa_begin_cleanup+0x12>
   14602:	7923      	ldrb	r3, [r4, #4]
   14604:	2b43      	cmp	r3, #67	; 0x43
   14606:	d1ee      	bne.n	145e6 <__cxa_begin_cleanup+0x12>
   14608:	7963      	ldrb	r3, [r4, #5]
   1460a:	2b2b      	cmp	r3, #43	; 0x2b
   1460c:	d1eb      	bne.n	145e6 <__cxa_begin_cleanup+0x12>
   1460e:	79a3      	ldrb	r3, [r4, #6]
   14610:	2b2b      	cmp	r3, #43	; 0x2b
   14612:	d1e8      	bne.n	145e6 <__cxa_begin_cleanup+0x12>
   14614:	79e3      	ldrb	r3, [r4, #7]
   14616:	2b01      	cmp	r3, #1
   14618:	d8e5      	bhi.n	145e6 <__cxa_begin_cleanup+0x12>
   1461a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1461e:	3301      	adds	r3, #1
   14620:	2b01      	cmp	r3, #1
   14622:	f844 3c04 	str.w	r3, [r4, #-4]
   14626:	d1e1      	bne.n	145ec <__cxa_begin_cleanup+0x18>
   14628:	6883      	ldr	r3, [r0, #8]
   1462a:	f844 3c08 	str.w	r3, [r4, #-8]
   1462e:	6082      	str	r2, [r0, #8]
   14630:	2001      	movs	r0, #1
   14632:	bd10      	pop	{r4, pc}
   14634:	f7ff fd78 	bl	14128 <_ZSt9terminatev>

00014638 <__gnu_end_cleanup>:
   14638:	b508      	push	{r3, lr}
   1463a:	f000 f95b 	bl	148f4 <__cxa_get_globals>
   1463e:	6883      	ldr	r3, [r0, #8]
   14640:	b383      	cbz	r3, 146a4 <__gnu_end_cleanup+0x6c>
   14642:	f893 2020 	ldrb.w	r2, [r3, #32]
   14646:	2a47      	cmp	r2, #71	; 0x47
   14648:	d004      	beq.n	14654 <__gnu_end_cleanup+0x1c>
   1464a:	2200      	movs	r2, #0
   1464c:	6082      	str	r2, [r0, #8]
   1464e:	f103 0020 	add.w	r0, r3, #32
   14652:	bd08      	pop	{r3, pc}
   14654:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   14658:	2a4e      	cmp	r2, #78	; 0x4e
   1465a:	d1f6      	bne.n	1464a <__gnu_end_cleanup+0x12>
   1465c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   14660:	2a55      	cmp	r2, #85	; 0x55
   14662:	d1f2      	bne.n	1464a <__gnu_end_cleanup+0x12>
   14664:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   14668:	2a43      	cmp	r2, #67	; 0x43
   1466a:	d1ee      	bne.n	1464a <__gnu_end_cleanup+0x12>
   1466c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   14670:	2a43      	cmp	r2, #67	; 0x43
   14672:	d1ea      	bne.n	1464a <__gnu_end_cleanup+0x12>
   14674:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   14678:	2a2b      	cmp	r2, #43	; 0x2b
   1467a:	d1e6      	bne.n	1464a <__gnu_end_cleanup+0x12>
   1467c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   14680:	2a2b      	cmp	r2, #43	; 0x2b
   14682:	d1e2      	bne.n	1464a <__gnu_end_cleanup+0x12>
   14684:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   14688:	2a01      	cmp	r2, #1
   1468a:	d8de      	bhi.n	1464a <__gnu_end_cleanup+0x12>
   1468c:	69da      	ldr	r2, [r3, #28]
   1468e:	3a01      	subs	r2, #1
   14690:	61da      	str	r2, [r3, #28]
   14692:	2a00      	cmp	r2, #0
   14694:	d1db      	bne.n	1464e <__gnu_end_cleanup+0x16>
   14696:	699a      	ldr	r2, [r3, #24]
   14698:	6082      	str	r2, [r0, #8]
   1469a:	2200      	movs	r2, #0
   1469c:	619a      	str	r2, [r3, #24]
   1469e:	f103 0020 	add.w	r0, r3, #32
   146a2:	bd08      	pop	{r3, pc}
   146a4:	f7ff fd40 	bl	14128 <_ZSt9terminatev>

000146a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   146a8:	7803      	ldrb	r3, [r0, #0]
   146aa:	2b47      	cmp	r3, #71	; 0x47
   146ac:	d001      	beq.n	146b2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   146ae:	2000      	movs	r0, #0
   146b0:	4770      	bx	lr
   146b2:	7843      	ldrb	r3, [r0, #1]
   146b4:	2b4e      	cmp	r3, #78	; 0x4e
   146b6:	d1fa      	bne.n	146ae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   146b8:	7883      	ldrb	r3, [r0, #2]
   146ba:	2b55      	cmp	r3, #85	; 0x55
   146bc:	d1f7      	bne.n	146ae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   146be:	78c3      	ldrb	r3, [r0, #3]
   146c0:	2b43      	cmp	r3, #67	; 0x43
   146c2:	d1f4      	bne.n	146ae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   146c4:	7903      	ldrb	r3, [r0, #4]
   146c6:	2b43      	cmp	r3, #67	; 0x43
   146c8:	d1f1      	bne.n	146ae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   146ca:	7943      	ldrb	r3, [r0, #5]
   146cc:	2b2b      	cmp	r3, #43	; 0x2b
   146ce:	d1ee      	bne.n	146ae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   146d0:	7983      	ldrb	r3, [r0, #6]
   146d2:	2b2b      	cmp	r3, #43	; 0x2b
   146d4:	d1eb      	bne.n	146ae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   146d6:	79c0      	ldrb	r0, [r0, #7]
   146d8:	2801      	cmp	r0, #1
   146da:	bf8c      	ite	hi
   146dc:	2000      	movhi	r0, #0
   146de:	2001      	movls	r0, #1
   146e0:	4770      	bx	lr
   146e2:	bf00      	nop

000146e4 <__cxa_call_terminate>:
   146e4:	b510      	push	{r4, lr}
   146e6:	b130      	cbz	r0, 146f6 <__cxa_call_terminate+0x12>
   146e8:	4604      	mov	r4, r0
   146ea:	f000 f87b 	bl	147e4 <__cxa_begin_catch>
   146ee:	4620      	mov	r0, r4
   146f0:	f7ff ffda 	bl	146a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   146f4:	b908      	cbnz	r0, 146fa <__cxa_call_terminate+0x16>
   146f6:	f7ff fd17 	bl	14128 <_ZSt9terminatev>
   146fa:	f854 0c14 	ldr.w	r0, [r4, #-20]
   146fe:	f7ff fcff 	bl	14100 <_ZN10__cxxabiv111__terminateEPFvvE>
   14702:	bf00      	nop

00014704 <__cxa_call_unexpected>:
   14704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14708:	b085      	sub	sp, #20
   1470a:	4602      	mov	r2, r0
   1470c:	f7ff ffcc 	bl	146a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   14710:	b160      	cbz	r0, 1472c <__cxa_call_unexpected+0x28>
   14712:	f852 8c18 	ldr.w	r8, [r2, #-24]
   14716:	f852 5c14 	ldr.w	r5, [r2, #-20]
   1471a:	6a96      	ldr	r6, [r2, #40]	; 0x28
   1471c:	6b17      	ldr	r7, [r2, #48]	; 0x30
   1471e:	6b54      	ldr	r4, [r2, #52]	; 0x34
   14720:	4610      	mov	r0, r2
   14722:	f000 f85f 	bl	147e4 <__cxa_begin_catch>
   14726:	4640      	mov	r0, r8
   14728:	f7ff fd08 	bl	1413c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1472c:	4610      	mov	r0, r2
   1472e:	f000 f859 	bl	147e4 <__cxa_begin_catch>
   14732:	f7ff fd07 	bl	14144 <_ZSt10unexpectedv>
   14736:	f000 f855 	bl	147e4 <__cxa_begin_catch>
   1473a:	f7ff fcf5 	bl	14128 <_ZSt9terminatev>
   1473e:	f000 f851 	bl	147e4 <__cxa_begin_catch>
   14742:	f000 f8d3 	bl	148ec <__cxa_get_globals_fast>
   14746:	6803      	ldr	r3, [r0, #0]
   14748:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   1474c:	2a01      	cmp	r2, #1
   1474e:	d036      	beq.n	147be <__cxa_call_unexpected+0xba>
   14750:	f103 0278 	add.w	r2, r3, #120	; 0x78
   14754:	f10d 0a10 	add.w	sl, sp, #16
   14758:	f04f 0800 	mov.w	r8, #0
   1475c:	3320      	adds	r3, #32
   1475e:	f84a 2d08 	str.w	r2, [sl, #-8]!
   14762:	f027 0b03 	bic.w	fp, r7, #3
   14766:	9301      	str	r3, [sp, #4]
   14768:	46c1      	mov	r9, r8
   1476a:	45b1      	cmp	r9, r6
   1476c:	da1b      	bge.n	147a6 <__cxa_call_unexpected+0xa2>
   1476e:	6827      	ldr	r7, [r4, #0]
   14770:	b107      	cbz	r7, 14774 <__cxa_call_unexpected+0x70>
   14772:	4427      	add	r7, r4
   14774:	4653      	mov	r3, sl
   14776:	2200      	movs	r2, #0
   14778:	4639      	mov	r1, r7
   1477a:	9801      	ldr	r0, [sp, #4]
   1477c:	f7ff fece 	bl	1451c <__cxa_type_match>
   14780:	bb10      	cbnz	r0, 147c8 <__cxa_call_unexpected+0xc4>
   14782:	683b      	ldr	r3, [r7, #0]
   14784:	4914      	ldr	r1, [pc, #80]	; (147d8 <__cxa_call_unexpected+0xd4>)
   14786:	691b      	ldr	r3, [r3, #16]
   14788:	9300      	str	r3, [sp, #0]
   1478a:	aa04      	add	r2, sp, #16
   1478c:	2301      	movs	r3, #1
   1478e:	f842 0d04 	str.w	r0, [r2, #-4]!
   14792:	4638      	mov	r0, r7
   14794:	9f00      	ldr	r7, [sp, #0]
   14796:	47b8      	blx	r7
   14798:	2800      	cmp	r0, #0
   1479a:	bf18      	it	ne
   1479c:	4680      	movne	r8, r0
   1479e:	f109 0901 	add.w	r9, r9, #1
   147a2:	445c      	add	r4, fp
   147a4:	e7e1      	b.n	1476a <__cxa_call_unexpected+0x66>
   147a6:	f1b8 0f00 	cmp.w	r8, #0
   147aa:	d00a      	beq.n	147c2 <__cxa_call_unexpected+0xbe>
   147ac:	2004      	movs	r0, #4
   147ae:	f7ff fc5b 	bl	14068 <__cxa_allocate_exception>
   147b2:	4b0a      	ldr	r3, [pc, #40]	; (147dc <__cxa_call_unexpected+0xd8>)
   147b4:	6003      	str	r3, [r0, #0]
   147b6:	4a0a      	ldr	r2, [pc, #40]	; (147e0 <__cxa_call_unexpected+0xdc>)
   147b8:	4907      	ldr	r1, [pc, #28]	; (147d8 <__cxa_call_unexpected+0xd4>)
   147ba:	f7ff fcff 	bl	141bc <__cxa_throw>
   147be:	681a      	ldr	r2, [r3, #0]
   147c0:	e7c8      	b.n	14754 <__cxa_call_unexpected+0x50>
   147c2:	4628      	mov	r0, r5
   147c4:	f7ff fc9c 	bl	14100 <_ZN10__cxxabiv111__terminateEPFvvE>
   147c8:	f7ff fd36 	bl	14238 <__cxa_rethrow>
   147cc:	f000 f848 	bl	14860 <__cxa_end_catch>
   147d0:	f000 f846 	bl	14860 <__cxa_end_catch>
   147d4:	f7ff fe9c 	bl	14510 <__cxa_end_cleanup>
   147d8:	00024624 	.word	0x00024624
   147dc:	000246a8 	.word	0x000246a8
   147e0:	000140e5 	.word	0x000140e5

000147e4 <__cxa_begin_catch>:
   147e4:	b538      	push	{r3, r4, r5, lr}
   147e6:	4604      	mov	r4, r0
   147e8:	f000 f884 	bl	148f4 <__cxa_get_globals>
   147ec:	7822      	ldrb	r2, [r4, #0]
   147ee:	6803      	ldr	r3, [r0, #0]
   147f0:	2a47      	cmp	r2, #71	; 0x47
   147f2:	f1a4 0120 	sub.w	r1, r4, #32
   147f6:	d004      	beq.n	14802 <__cxa_begin_catch+0x1e>
   147f8:	bb83      	cbnz	r3, 1485c <__cxa_begin_catch+0x78>
   147fa:	461c      	mov	r4, r3
   147fc:	6001      	str	r1, [r0, #0]
   147fe:	4620      	mov	r0, r4
   14800:	bd38      	pop	{r3, r4, r5, pc}
   14802:	7862      	ldrb	r2, [r4, #1]
   14804:	2a4e      	cmp	r2, #78	; 0x4e
   14806:	d1f7      	bne.n	147f8 <__cxa_begin_catch+0x14>
   14808:	78a2      	ldrb	r2, [r4, #2]
   1480a:	2a55      	cmp	r2, #85	; 0x55
   1480c:	d1f4      	bne.n	147f8 <__cxa_begin_catch+0x14>
   1480e:	78e2      	ldrb	r2, [r4, #3]
   14810:	2a43      	cmp	r2, #67	; 0x43
   14812:	d1f1      	bne.n	147f8 <__cxa_begin_catch+0x14>
   14814:	7922      	ldrb	r2, [r4, #4]
   14816:	2a43      	cmp	r2, #67	; 0x43
   14818:	d1ee      	bne.n	147f8 <__cxa_begin_catch+0x14>
   1481a:	7962      	ldrb	r2, [r4, #5]
   1481c:	2a2b      	cmp	r2, #43	; 0x2b
   1481e:	d1eb      	bne.n	147f8 <__cxa_begin_catch+0x14>
   14820:	79a2      	ldrb	r2, [r4, #6]
   14822:	2a2b      	cmp	r2, #43	; 0x2b
   14824:	d1e8      	bne.n	147f8 <__cxa_begin_catch+0x14>
   14826:	79e2      	ldrb	r2, [r4, #7]
   14828:	2a01      	cmp	r2, #1
   1482a:	d8e5      	bhi.n	147f8 <__cxa_begin_catch+0x14>
   1482c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   14830:	2a00      	cmp	r2, #0
   14832:	db10      	blt.n	14856 <__cxa_begin_catch+0x72>
   14834:	3201      	adds	r2, #1
   14836:	6845      	ldr	r5, [r0, #4]
   14838:	f844 2c0c 	str.w	r2, [r4, #-12]
   1483c:	3d01      	subs	r5, #1
   1483e:	6045      	str	r5, [r0, #4]
   14840:	428b      	cmp	r3, r1
   14842:	bf1c      	itt	ne
   14844:	f844 3c10 	strne.w	r3, [r4, #-16]
   14848:	6001      	strne	r1, [r0, #0]
   1484a:	4620      	mov	r0, r4
   1484c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   1484e:	f008 ff39 	bl	1d6c4 <_Unwind_Complete>
   14852:	4620      	mov	r0, r4
   14854:	bd38      	pop	{r3, r4, r5, pc}
   14856:	f1c2 0201 	rsb	r2, r2, #1
   1485a:	e7ec      	b.n	14836 <__cxa_begin_catch+0x52>
   1485c:	f7ff fc64 	bl	14128 <_ZSt9terminatev>

00014860 <__cxa_end_catch>:
   14860:	b508      	push	{r3, lr}
   14862:	f000 f843 	bl	148ec <__cxa_get_globals_fast>
   14866:	4602      	mov	r2, r0
   14868:	6800      	ldr	r0, [r0, #0]
   1486a:	2800      	cmp	r0, #0
   1486c:	d03d      	beq.n	148ea <__cxa_end_catch+0x8a>
   1486e:	f890 3020 	ldrb.w	r3, [r0, #32]
   14872:	2b47      	cmp	r3, #71	; 0x47
   14874:	d006      	beq.n	14884 <__cxa_end_catch+0x24>
   14876:	2300      	movs	r3, #0
   14878:	6013      	str	r3, [r2, #0]
   1487a:	3020      	adds	r0, #32
   1487c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14880:	f008 bf22 	b.w	1d6c8 <_Unwind_DeleteException>
   14884:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   14888:	2b4e      	cmp	r3, #78	; 0x4e
   1488a:	d1f4      	bne.n	14876 <__cxa_end_catch+0x16>
   1488c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   14890:	2b55      	cmp	r3, #85	; 0x55
   14892:	d1f0      	bne.n	14876 <__cxa_end_catch+0x16>
   14894:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   14898:	2b43      	cmp	r3, #67	; 0x43
   1489a:	d1ec      	bne.n	14876 <__cxa_end_catch+0x16>
   1489c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   148a0:	2b43      	cmp	r3, #67	; 0x43
   148a2:	d1e8      	bne.n	14876 <__cxa_end_catch+0x16>
   148a4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   148a8:	2b2b      	cmp	r3, #43	; 0x2b
   148aa:	d1e4      	bne.n	14876 <__cxa_end_catch+0x16>
   148ac:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   148b0:	2b2b      	cmp	r3, #43	; 0x2b
   148b2:	d1e0      	bne.n	14876 <__cxa_end_catch+0x16>
   148b4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   148b8:	2b01      	cmp	r3, #1
   148ba:	d8dc      	bhi.n	14876 <__cxa_end_catch+0x16>
   148bc:	6943      	ldr	r3, [r0, #20]
   148be:	2b00      	cmp	r3, #0
   148c0:	db05      	blt.n	148ce <__cxa_end_catch+0x6e>
   148c2:	3b01      	subs	r3, #1
   148c4:	d008      	beq.n	148d8 <__cxa_end_catch+0x78>
   148c6:	1c5a      	adds	r2, r3, #1
   148c8:	d00d      	beq.n	148e6 <__cxa_end_catch+0x86>
   148ca:	6143      	str	r3, [r0, #20]
   148cc:	bd08      	pop	{r3, pc}
   148ce:	3301      	adds	r3, #1
   148d0:	d1fb      	bne.n	148ca <__cxa_end_catch+0x6a>
   148d2:	6901      	ldr	r1, [r0, #16]
   148d4:	6011      	str	r1, [r2, #0]
   148d6:	e7f8      	b.n	148ca <__cxa_end_catch+0x6a>
   148d8:	6903      	ldr	r3, [r0, #16]
   148da:	6013      	str	r3, [r2, #0]
   148dc:	3020      	adds	r0, #32
   148de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   148e2:	f008 bef1 	b.w	1d6c8 <_Unwind_DeleteException>
   148e6:	f7ff fc1f 	bl	14128 <_ZSt9terminatev>
   148ea:	bd08      	pop	{r3, pc}

000148ec <__cxa_get_globals_fast>:
   148ec:	4800      	ldr	r0, [pc, #0]	; (148f0 <__cxa_get_globals_fast+0x4>)
   148ee:	4770      	bx	lr
   148f0:	20002290 	.word	0x20002290

000148f4 <__cxa_get_globals>:
   148f4:	4800      	ldr	r0, [pc, #0]	; (148f8 <__cxa_get_globals+0x4>)
   148f6:	4770      	bx	lr
   148f8:	20002290 	.word	0x20002290

000148fc <_ZL28read_encoded_value_with_basehjPKhPj>:
   148fc:	2850      	cmp	r0, #80	; 0x50
   148fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14900:	d054      	beq.n	149ac <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   14902:	f000 040f 	and.w	r4, r0, #15
   14906:	2c0c      	cmp	r4, #12
   14908:	d84e      	bhi.n	149a8 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   1490a:	e8df f004 	tbb	[pc, r4]
   1490e:	3907      	.short	0x3907
   14910:	4d170749 	.word	0x4d170749
   14914:	1f4d4d4d 	.word	0x1f4d4d4d
   14918:	071b      	.short	0x071b
   1491a:	17          	.byte	0x17
   1491b:	00          	.byte	0x00
   1491c:	4615      	mov	r5, r2
   1491e:	f855 4b04 	ldr.w	r4, [r5], #4
   14922:	b144      	cbz	r4, 14936 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   14924:	f000 0670 	and.w	r6, r0, #112	; 0x70
   14928:	2e10      	cmp	r6, #16
   1492a:	bf08      	it	eq
   1492c:	4611      	moveq	r1, r2
   1492e:	440c      	add	r4, r1
   14930:	0602      	lsls	r2, r0, #24
   14932:	bf48      	it	mi
   14934:	6824      	ldrmi	r4, [r4, #0]
   14936:	601c      	str	r4, [r3, #0]
   14938:	4628      	mov	r0, r5
   1493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1493c:	4615      	mov	r5, r2
   1493e:	f855 4b08 	ldr.w	r4, [r5], #8
   14942:	e7ee      	b.n	14922 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   14944:	4615      	mov	r5, r2
   14946:	f935 4b02 	ldrsh.w	r4, [r5], #2
   1494a:	e7ea      	b.n	14922 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1494c:	2400      	movs	r4, #0
   1494e:	4627      	mov	r7, r4
   14950:	4615      	mov	r5, r2
   14952:	f815 eb01 	ldrb.w	lr, [r5], #1
   14956:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   1495a:	40be      	lsls	r6, r7
   1495c:	f01e 0f80 	tst.w	lr, #128	; 0x80
   14960:	ea44 0406 	orr.w	r4, r4, r6
   14964:	f107 0707 	add.w	r7, r7, #7
   14968:	d1f3      	bne.n	14952 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   1496a:	2f1f      	cmp	r7, #31
   1496c:	d8d9      	bhi.n	14922 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1496e:	f01e 0f40 	tst.w	lr, #64	; 0x40
   14972:	d0d6      	beq.n	14922 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   14974:	f04f 36ff 	mov.w	r6, #4294967295
   14978:	fa06 f707 	lsl.w	r7, r6, r7
   1497c:	433c      	orrs	r4, r7
   1497e:	e7d1      	b.n	14924 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   14980:	2400      	movs	r4, #0
   14982:	4627      	mov	r7, r4
   14984:	4615      	mov	r5, r2
   14986:	f815 eb01 	ldrb.w	lr, [r5], #1
   1498a:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   1498e:	40be      	lsls	r6, r7
   14990:	f01e 0f80 	tst.w	lr, #128	; 0x80
   14994:	ea44 0406 	orr.w	r4, r4, r6
   14998:	f107 0707 	add.w	r7, r7, #7
   1499c:	d1f3      	bne.n	14986 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   1499e:	e7c0      	b.n	14922 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   149a0:	4615      	mov	r5, r2
   149a2:	f835 4b02 	ldrh.w	r4, [r5], #2
   149a6:	e7bc      	b.n	14922 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   149a8:	f009 fc44 	bl	1e234 <abort>
   149ac:	3203      	adds	r2, #3
   149ae:	f022 0503 	bic.w	r5, r2, #3
   149b2:	f855 4b04 	ldr.w	r4, [r5], #4
   149b6:	601c      	str	r4, [r3, #0]
   149b8:	4628      	mov	r0, r5
   149ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000149bc <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   149bc:	28ff      	cmp	r0, #255	; 0xff
   149be:	d00d      	beq.n	149dc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   149c0:	f000 0070 	and.w	r0, r0, #112	; 0x70
   149c4:	2820      	cmp	r0, #32
   149c6:	d015      	beq.n	149f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   149c8:	d90a      	bls.n	149e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   149ca:	2840      	cmp	r0, #64	; 0x40
   149cc:	d00f      	beq.n	149ee <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   149ce:	2850      	cmp	r0, #80	; 0x50
   149d0:	d004      	beq.n	149dc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   149d2:	2830      	cmp	r0, #48	; 0x30
   149d4:	d108      	bne.n	149e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   149d6:	4608      	mov	r0, r1
   149d8:	f009 bc26 	b.w	1e228 <_Unwind_GetDataRelBase>
   149dc:	2000      	movs	r0, #0
   149de:	4770      	bx	lr
   149e0:	2800      	cmp	r0, #0
   149e2:	d0fb      	beq.n	149dc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   149e4:	2810      	cmp	r0, #16
   149e6:	d0f9      	beq.n	149dc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   149e8:	b508      	push	{r3, lr}
   149ea:	f009 fc23 	bl	1e234 <abort>
   149ee:	4608      	mov	r0, r1
   149f0:	f009 bc06 	b.w	1e200 <_Unwind_GetRegionStart>
   149f4:	4608      	mov	r0, r1
   149f6:	f009 bc13 	b.w	1e220 <_Unwind_GetTextRelBase>
   149fa:	bf00      	nop

000149fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   149fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149fe:	460c      	mov	r4, r1
   14a00:	4615      	mov	r5, r2
   14a02:	4607      	mov	r7, r0
   14a04:	2800      	cmp	r0, #0
   14a06:	d044      	beq.n	14a92 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   14a08:	f009 fbfa 	bl	1e200 <_Unwind_GetRegionStart>
   14a0c:	6028      	str	r0, [r5, #0]
   14a0e:	7826      	ldrb	r6, [r4, #0]
   14a10:	2eff      	cmp	r6, #255	; 0xff
   14a12:	f104 0401 	add.w	r4, r4, #1
   14a16:	d032      	beq.n	14a7e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   14a18:	4639      	mov	r1, r7
   14a1a:	4630      	mov	r0, r6
   14a1c:	f7ff ffce 	bl	149bc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14a20:	4622      	mov	r2, r4
   14a22:	4601      	mov	r1, r0
   14a24:	1d2b      	adds	r3, r5, #4
   14a26:	4630      	mov	r0, r6
   14a28:	f7ff ff68 	bl	148fc <_ZL28read_encoded_value_with_basehjPKhPj>
   14a2c:	4604      	mov	r4, r0
   14a2e:	1c60      	adds	r0, r4, #1
   14a30:	7823      	ldrb	r3, [r4, #0]
   14a32:	752b      	strb	r3, [r5, #20]
   14a34:	2bff      	cmp	r3, #255	; 0xff
   14a36:	d029      	beq.n	14a8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   14a38:	2310      	movs	r3, #16
   14a3a:	2400      	movs	r4, #0
   14a3c:	752b      	strb	r3, [r5, #20]
   14a3e:	4622      	mov	r2, r4
   14a40:	f810 1b01 	ldrb.w	r1, [r0], #1
   14a44:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   14a48:	4093      	lsls	r3, r2
   14a4a:	0609      	lsls	r1, r1, #24
   14a4c:	ea44 0403 	orr.w	r4, r4, r3
   14a50:	f102 0207 	add.w	r2, r2, #7
   14a54:	d4f4      	bmi.n	14a40 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   14a56:	4404      	add	r4, r0
   14a58:	60ec      	str	r4, [r5, #12]
   14a5a:	7803      	ldrb	r3, [r0, #0]
   14a5c:	756b      	strb	r3, [r5, #21]
   14a5e:	2400      	movs	r4, #0
   14a60:	3001      	adds	r0, #1
   14a62:	4622      	mov	r2, r4
   14a64:	f810 1b01 	ldrb.w	r1, [r0], #1
   14a68:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   14a6c:	4093      	lsls	r3, r2
   14a6e:	431c      	orrs	r4, r3
   14a70:	060b      	lsls	r3, r1, #24
   14a72:	f102 0207 	add.w	r2, r2, #7
   14a76:	d4f5      	bmi.n	14a64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   14a78:	4404      	add	r4, r0
   14a7a:	612c      	str	r4, [r5, #16]
   14a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a7e:	6068      	str	r0, [r5, #4]
   14a80:	7823      	ldrb	r3, [r4, #0]
   14a82:	752b      	strb	r3, [r5, #20]
   14a84:	2bff      	cmp	r3, #255	; 0xff
   14a86:	f104 0001 	add.w	r0, r4, #1
   14a8a:	d1d5      	bne.n	14a38 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   14a8c:	2300      	movs	r3, #0
   14a8e:	60eb      	str	r3, [r5, #12]
   14a90:	e7e3      	b.n	14a5a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   14a92:	e7bb      	b.n	14a0c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00014a94 <__gxx_personality_v0>:
   14a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a98:	f000 0403 	and.w	r4, r0, #3
   14a9c:	b097      	sub	sp, #92	; 0x5c
   14a9e:	2300      	movs	r3, #0
   14aa0:	2c01      	cmp	r4, #1
   14aa2:	4689      	mov	r9, r1
   14aa4:	4617      	mov	r7, r2
   14aa6:	930a      	str	r3, [sp, #40]	; 0x28
   14aa8:	d01e      	beq.n	14ae8 <__gxx_personality_v0+0x54>
   14aaa:	d30e      	bcc.n	14aca <__gxx_personality_v0+0x36>
   14aac:	2c02      	cmp	r4, #2
   14aae:	d10a      	bne.n	14ac6 <__gxx_personality_v0+0x32>
   14ab0:	4639      	mov	r1, r7
   14ab2:	4648      	mov	r0, r9
   14ab4:	f009 fb90 	bl	1e1d8 <__gnu_unwind_frame>
   14ab8:	2800      	cmp	r0, #0
   14aba:	f000 80a5 	beq.w	14c08 <__gxx_personality_v0+0x174>
   14abe:	2009      	movs	r0, #9
   14ac0:	b017      	add	sp, #92	; 0x5c
   14ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac6:	f009 fbb5 	bl	1e234 <abort>
   14aca:	0700      	lsls	r0, r0, #28
   14acc:	d4f0      	bmi.n	14ab0 <__gxx_personality_v0+0x1c>
   14ace:	2301      	movs	r3, #1
   14ad0:	9303      	str	r3, [sp, #12]
   14ad2:	aa16      	add	r2, sp, #88	; 0x58
   14ad4:	2300      	movs	r3, #0
   14ad6:	f842 9d2c 	str.w	r9, [r2, #-44]!
   14ada:	4619      	mov	r1, r3
   14adc:	9200      	str	r2, [sp, #0]
   14ade:	4638      	mov	r0, r7
   14ae0:	220c      	movs	r2, #12
   14ae2:	f008 fe1d 	bl	1d720 <_Unwind_VRS_Set>
   14ae6:	e00f      	b.n	14b08 <__gxx_personality_v0+0x74>
   14ae8:	f010 0408 	ands.w	r4, r0, #8
   14aec:	f000 8090 	beq.w	14c10 <__gxx_personality_v0+0x17c>
   14af0:	aa16      	add	r2, sp, #88	; 0x58
   14af2:	f044 0402 	orr.w	r4, r4, #2
   14af6:	f842 1d2c 	str.w	r1, [r2, #-44]!
   14afa:	4638      	mov	r0, r7
   14afc:	9200      	str	r2, [sp, #0]
   14afe:	4619      	mov	r1, r3
   14b00:	220c      	movs	r2, #12
   14b02:	9403      	str	r4, [sp, #12]
   14b04:	f008 fe0c 	bl	1d720 <_Unwind_VRS_Set>
   14b08:	4638      	mov	r0, r7
   14b0a:	f009 fb7f 	bl	1e20c <_Unwind_GetLanguageSpecificData>
   14b0e:	9005      	str	r0, [sp, #20]
   14b10:	2800      	cmp	r0, #0
   14b12:	d0cd      	beq.n	14ab0 <__gxx_personality_v0+0x1c>
   14b14:	ab10      	add	r3, sp, #64	; 0x40
   14b16:	461a      	mov	r2, r3
   14b18:	9905      	ldr	r1, [sp, #20]
   14b1a:	9306      	str	r3, [sp, #24]
   14b1c:	4638      	mov	r0, r7
   14b1e:	f7ff ff6d 	bl	149fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   14b22:	4639      	mov	r1, r7
   14b24:	4604      	mov	r4, r0
   14b26:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14b2a:	f7ff ff47 	bl	149bc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14b2e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   14b32:	2300      	movs	r3, #0
   14b34:	9012      	str	r0, [sp, #72]	; 0x48
   14b36:	4619      	mov	r1, r3
   14b38:	220f      	movs	r2, #15
   14b3a:	f8cd b000 	str.w	fp, [sp]
   14b3e:	4638      	mov	r0, r7
   14b40:	f008 fdc8 	bl	1d6d4 <_Unwind_VRS_Get>
   14b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14b46:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14b48:	f023 0301 	bic.w	r3, r3, #1
   14b4c:	42a2      	cmp	r2, r4
   14b4e:	f103 36ff 	add.w	r6, r3, #4294967295
   14b52:	d975      	bls.n	14c40 <__gxx_personality_v0+0x1ac>
   14b54:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14b58:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14b5c:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   14b60:	2100      	movs	r1, #0
   14b62:	4628      	mov	r0, r5
   14b64:	f7ff ff2a 	bl	149bc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14b68:	4622      	mov	r2, r4
   14b6a:	4653      	mov	r3, sl
   14b6c:	4601      	mov	r1, r0
   14b6e:	4628      	mov	r0, r5
   14b70:	f7ff fec4 	bl	148fc <_ZL28read_encoded_value_with_basehjPKhPj>
   14b74:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   14b78:	4605      	mov	r5, r0
   14b7a:	2100      	movs	r1, #0
   14b7c:	4620      	mov	r0, r4
   14b7e:	f7ff ff1d 	bl	149bc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14b82:	462a      	mov	r2, r5
   14b84:	4643      	mov	r3, r8
   14b86:	4601      	mov	r1, r0
   14b88:	4620      	mov	r0, r4
   14b8a:	f7ff feb7 	bl	148fc <_ZL28read_encoded_value_with_basehjPKhPj>
   14b8e:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   14b92:	4605      	mov	r5, r0
   14b94:	2100      	movs	r1, #0
   14b96:	4620      	mov	r0, r4
   14b98:	f7ff ff10 	bl	149bc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14b9c:	462a      	mov	r2, r5
   14b9e:	4601      	mov	r1, r0
   14ba0:	465b      	mov	r3, fp
   14ba2:	4620      	mov	r0, r4
   14ba4:	f7ff feaa 	bl	148fc <_ZL28read_encoded_value_with_basehjPKhPj>
   14ba8:	4604      	mov	r4, r0
   14baa:	2000      	movs	r0, #0
   14bac:	4602      	mov	r2, r0
   14bae:	f814 1b01 	ldrb.w	r1, [r4], #1
   14bb2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   14bb6:	4093      	lsls	r3, r2
   14bb8:	0609      	lsls	r1, r1, #24
   14bba:	ea40 0003 	orr.w	r0, r0, r3
   14bbe:	f102 0207 	add.w	r2, r2, #7
   14bc2:	d4f4      	bmi.n	14bae <__gxx_personality_v0+0x11a>
   14bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14bc8:	4413      	add	r3, r2
   14bca:	429e      	cmp	r6, r3
   14bcc:	d231      	bcs.n	14c32 <__gxx_personality_v0+0x19e>
   14bce:	9b03      	ldr	r3, [sp, #12]
   14bd0:	07db      	lsls	r3, r3, #31
   14bd2:	d539      	bpl.n	14c48 <__gxx_personality_v0+0x1b4>
   14bd4:	2500      	movs	r5, #0
   14bd6:	9504      	str	r5, [sp, #16]
   14bd8:	2300      	movs	r3, #0
   14bda:	4619      	mov	r1, r3
   14bdc:	220d      	movs	r2, #13
   14bde:	f8cd 8000 	str.w	r8, [sp]
   14be2:	4638      	mov	r0, r7
   14be4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14be6:	f008 fd75 	bl	1d6d4 <_Unwind_VRS_Get>
   14bea:	9a05      	ldr	r2, [sp, #20]
   14bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14bee:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   14bf2:	9a04      	ldr	r2, [sp, #16]
   14bf4:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   14bf8:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   14bfc:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14c00:	f8c9 3020 	str.w	r3, [r9, #32]
   14c04:	2006      	movs	r0, #6
   14c06:	e75b      	b.n	14ac0 <__gxx_personality_v0+0x2c>
   14c08:	2008      	movs	r0, #8
   14c0a:	b017      	add	sp, #92	; 0x5c
   14c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c10:	ab10      	add	r3, sp, #64	; 0x40
   14c12:	9300      	str	r3, [sp, #0]
   14c14:	9306      	str	r3, [sp, #24]
   14c16:	220d      	movs	r2, #13
   14c18:	4623      	mov	r3, r4
   14c1a:	4621      	mov	r1, r4
   14c1c:	4638      	mov	r0, r7
   14c1e:	f8d9 5020 	ldr.w	r5, [r9, #32]
   14c22:	f008 fd57 	bl	1d6d4 <_Unwind_VRS_Get>
   14c26:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14c28:	429d      	cmp	r5, r3
   14c2a:	d012      	beq.n	14c52 <__gxx_personality_v0+0x1be>
   14c2c:	2302      	movs	r3, #2
   14c2e:	9303      	str	r3, [sp, #12]
   14c30:	e74f      	b.n	14ad2 <__gxx_personality_v0+0x3e>
   14c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14c34:	4413      	add	r3, r2
   14c36:	429e      	cmp	r6, r3
   14c38:	d359      	bcc.n	14cee <__gxx_personality_v0+0x25a>
   14c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14c3c:	42a3      	cmp	r3, r4
   14c3e:	d88d      	bhi.n	14b5c <__gxx_personality_v0+0xc8>
   14c40:	2500      	movs	r5, #0
   14c42:	9504      	str	r5, [sp, #16]
   14c44:	2401      	movs	r4, #1
   14c46:	e105      	b.n	14e54 <__gxx_personality_v0+0x3c0>
   14c48:	9b03      	ldr	r3, [sp, #12]
   14c4a:	071b      	lsls	r3, r3, #28
   14c4c:	d54c      	bpl.n	14ce8 <__gxx_personality_v0+0x254>
   14c4e:	f7ff fa6b 	bl	14128 <_ZSt9terminatev>
   14c52:	aa16      	add	r2, sp, #88	; 0x58
   14c54:	4623      	mov	r3, r4
   14c56:	f842 9d2c 	str.w	r9, [r2, #-44]!
   14c5a:	4621      	mov	r1, r4
   14c5c:	9200      	str	r2, [sp, #0]
   14c5e:	4638      	mov	r0, r7
   14c60:	220c      	movs	r2, #12
   14c62:	f008 fd5d 	bl	1d720 <_Unwind_VRS_Set>
   14c66:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   14c6a:	9304      	str	r3, [sp, #16]
   14c6c:	2b00      	cmp	r3, #0
   14c6e:	d03b      	beq.n	14ce8 <__gxx_personality_v0+0x254>
   14c70:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   14c74:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   14c78:	2403      	movs	r4, #3
   14c7a:	2d00      	cmp	r5, #0
   14c7c:	f2c0 8106 	blt.w	14e8c <__gxx_personality_v0+0x3f8>
   14c80:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14c84:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14c88:	a916      	add	r1, sp, #88	; 0x58
   14c8a:	2300      	movs	r3, #0
   14c8c:	f841 9d28 	str.w	r9, [r1, #-40]!
   14c90:	461a      	mov	r2, r3
   14c92:	9100      	str	r1, [sp, #0]
   14c94:	4638      	mov	r0, r7
   14c96:	4619      	mov	r1, r3
   14c98:	f008 fd42 	bl	1d720 <_Unwind_VRS_Set>
   14c9c:	2300      	movs	r3, #0
   14c9e:	4619      	mov	r1, r3
   14ca0:	2201      	movs	r2, #1
   14ca2:	f8cd a000 	str.w	sl, [sp]
   14ca6:	4638      	mov	r0, r7
   14ca8:	950d      	str	r5, [sp, #52]	; 0x34
   14caa:	f008 fd39 	bl	1d720 <_Unwind_VRS_Set>
   14cae:	2300      	movs	r3, #0
   14cb0:	4619      	mov	r1, r3
   14cb2:	220f      	movs	r2, #15
   14cb4:	f8cd 8000 	str.w	r8, [sp]
   14cb8:	4638      	mov	r0, r7
   14cba:	f008 fd0b 	bl	1d6d4 <_Unwind_VRS_Get>
   14cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14cc0:	9a04      	ldr	r2, [sp, #16]
   14cc2:	f8cd 8000 	str.w	r8, [sp]
   14cc6:	f003 0501 	and.w	r5, r3, #1
   14cca:	2300      	movs	r3, #0
   14ccc:	4315      	orrs	r5, r2
   14cce:	4638      	mov	r0, r7
   14cd0:	4619      	mov	r1, r3
   14cd2:	220f      	movs	r2, #15
   14cd4:	950e      	str	r5, [sp, #56]	; 0x38
   14cd6:	f008 fd23 	bl	1d720 <_Unwind_VRS_Set>
   14cda:	2c02      	cmp	r4, #2
   14cdc:	f000 8080 	beq.w	14de0 <__gxx_personality_v0+0x34c>
   14ce0:	2007      	movs	r0, #7
   14ce2:	b017      	add	sp, #92	; 0x5c
   14ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ce8:	4648      	mov	r0, r9
   14cea:	f7ff fcfb 	bl	146e4 <__cxa_call_terminate>
   14cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14cf0:	9304      	str	r3, [sp, #16]
   14cf2:	461a      	mov	r2, r3
   14cf4:	2b00      	cmp	r3, #0
   14cf6:	d178      	bne.n	14dea <__gxx_personality_v0+0x356>
   14cf8:	2800      	cmp	r0, #0
   14cfa:	f43f aed9 	beq.w	14ab0 <__gxx_personality_v0+0x1c>
   14cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14d00:	9a04      	ldr	r2, [sp, #16]
   14d02:	3801      	subs	r0, #1
   14d04:	4403      	add	r3, r0
   14d06:	2a00      	cmp	r2, #0
   14d08:	f43f aed2 	beq.w	14ab0 <__gxx_personality_v0+0x1c>
   14d0c:	2b00      	cmp	r3, #0
   14d0e:	d075      	beq.n	14dfc <__gxx_personality_v0+0x368>
   14d10:	9a03      	ldr	r2, [sp, #12]
   14d12:	f012 0208 	ands.w	r2, r2, #8
   14d16:	9209      	str	r2, [sp, #36]	; 0x24
   14d18:	f000 80f6 	beq.w	14f08 <__gxx_personality_v0+0x474>
   14d1c:	2147      	movs	r1, #71	; 0x47
   14d1e:	224e      	movs	r2, #78	; 0x4e
   14d20:	f889 1000 	strb.w	r1, [r9]
   14d24:	f889 2001 	strb.w	r2, [r9, #1]
   14d28:	2155      	movs	r1, #85	; 0x55
   14d2a:	2243      	movs	r2, #67	; 0x43
   14d2c:	f889 1002 	strb.w	r1, [r9, #2]
   14d30:	f889 2003 	strb.w	r2, [r9, #3]
   14d34:	2146      	movs	r1, #70	; 0x46
   14d36:	224f      	movs	r2, #79	; 0x4f
   14d38:	f889 1004 	strb.w	r1, [r9, #4]
   14d3c:	f889 2005 	strb.w	r2, [r9, #5]
   14d40:	2152      	movs	r1, #82	; 0x52
   14d42:	2200      	movs	r2, #0
   14d44:	f889 1006 	strb.w	r1, [r9, #6]
   14d48:	f889 2007 	strb.w	r2, [r9, #7]
   14d4c:	2200      	movs	r2, #0
   14d4e:	9208      	str	r2, [sp, #32]
   14d50:	9707      	str	r7, [sp, #28]
   14d52:	2500      	movs	r5, #0
   14d54:	4629      	mov	r1, r5
   14d56:	e000      	b.n	14d5a <__gxx_personality_v0+0x2c6>
   14d58:	4623      	mov	r3, r4
   14d5a:	461c      	mov	r4, r3
   14d5c:	f814 0b01 	ldrb.w	r0, [r4], #1
   14d60:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   14d64:	408a      	lsls	r2, r1
   14d66:	0606      	lsls	r6, r0, #24
   14d68:	ea45 0502 	orr.w	r5, r5, r2
   14d6c:	f101 0107 	add.w	r1, r1, #7
   14d70:	d4f2      	bmi.n	14d58 <__gxx_personality_v0+0x2c4>
   14d72:	291f      	cmp	r1, #31
   14d74:	d805      	bhi.n	14d82 <__gxx_personality_v0+0x2ee>
   14d76:	0642      	lsls	r2, r0, #25
   14d78:	d503      	bpl.n	14d82 <__gxx_personality_v0+0x2ee>
   14d7a:	2201      	movs	r2, #1
   14d7c:	408a      	lsls	r2, r1
   14d7e:	4252      	negs	r2, r2
   14d80:	4315      	orrs	r5, r2
   14d82:	2600      	movs	r6, #0
   14d84:	4631      	mov	r1, r6
   14d86:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   14d8a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   14d8e:	408a      	lsls	r2, r1
   14d90:	0607      	lsls	r7, r0, #24
   14d92:	ea46 0602 	orr.w	r6, r6, r2
   14d96:	f101 0107 	add.w	r1, r1, #7
   14d9a:	d4f4      	bmi.n	14d86 <__gxx_personality_v0+0x2f2>
   14d9c:	291f      	cmp	r1, #31
   14d9e:	d805      	bhi.n	14dac <__gxx_personality_v0+0x318>
   14da0:	0640      	lsls	r0, r0, #25
   14da2:	d503      	bpl.n	14dac <__gxx_personality_v0+0x318>
   14da4:	2301      	movs	r3, #1
   14da6:	408b      	lsls	r3, r1
   14da8:	425b      	negs	r3, r3
   14daa:	431e      	orrs	r6, r3
   14dac:	2d00      	cmp	r5, #0
   14dae:	d05c      	beq.n	14e6a <__gxx_personality_v0+0x3d6>
   14db0:	dd5e      	ble.n	14e70 <__gxx_personality_v0+0x3dc>
   14db2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14db6:	28ff      	cmp	r0, #255	; 0xff
   14db8:	f000 80a4 	beq.w	14f04 <__gxx_personality_v0+0x470>
   14dbc:	f000 0307 	and.w	r3, r0, #7
   14dc0:	2b04      	cmp	r3, #4
   14dc2:	f63f ae80 	bhi.w	14ac6 <__gxx_personality_v0+0x32>
   14dc6:	a201      	add	r2, pc, #4	; (adr r2, 14dcc <__gxx_personality_v0+0x338>)
   14dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14dcc:	00014e37 	.word	0x00014e37
   14dd0:	00014ac7 	.word	0x00014ac7
   14dd4:	00014e3d 	.word	0x00014e3d
   14dd8:	00014e37 	.word	0x00014e37
   14ddc:	00014e15 	.word	0x00014e15
   14de0:	4648      	mov	r0, r9
   14de2:	f7ff fbf7 	bl	145d4 <__cxa_begin_cleanup>
   14de6:	2007      	movs	r0, #7
   14de8:	e66a      	b.n	14ac0 <__gxx_personality_v0+0x2c>
   14dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14dec:	441a      	add	r2, r3
   14dee:	9204      	str	r2, [sp, #16]
   14df0:	2800      	cmp	r0, #0
   14df2:	d184      	bne.n	14cfe <__gxx_personality_v0+0x26a>
   14df4:	9b04      	ldr	r3, [sp, #16]
   14df6:	2b00      	cmp	r3, #0
   14df8:	f43f ae5a 	beq.w	14ab0 <__gxx_personality_v0+0x1c>
   14dfc:	9b03      	ldr	r3, [sp, #12]
   14dfe:	f013 0301 	ands.w	r3, r3, #1
   14e02:	f47f ae55 	bne.w	14ab0 <__gxx_personality_v0+0x1c>
   14e06:	9a03      	ldr	r2, [sp, #12]
   14e08:	f012 0508 	ands.w	r5, r2, #8
   14e0c:	f040 8097 	bne.w	14f3e <__gxx_personality_v0+0x4aa>
   14e10:	2402      	movs	r4, #2
   14e12:	e739      	b.n	14c88 <__gxx_personality_v0+0x1f4>
   14e14:	00eb      	lsls	r3, r5, #3
   14e16:	425b      	negs	r3, r3
   14e18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14e1a:	9912      	ldr	r1, [sp, #72]	; 0x48
   14e1c:	441a      	add	r2, r3
   14e1e:	4643      	mov	r3, r8
   14e20:	f7ff fd6c 	bl	148fc <_ZL28read_encoded_value_with_basehjPKhPj>
   14e24:	990e      	ldr	r1, [sp, #56]	; 0x38
   14e26:	b199      	cbz	r1, 14e50 <__gxx_personality_v0+0x3bc>
   14e28:	f1b9 0f00 	cmp.w	r9, #0
   14e2c:	d109      	bne.n	14e42 <__gxx_personality_v0+0x3ae>
   14e2e:	2e00      	cmp	r6, #0
   14e30:	d077      	beq.n	14f22 <__gxx_personality_v0+0x48e>
   14e32:	19a3      	adds	r3, r4, r6
   14e34:	e78d      	b.n	14d52 <__gxx_personality_v0+0x2be>
   14e36:	00ab      	lsls	r3, r5, #2
   14e38:	425b      	negs	r3, r3
   14e3a:	e7ed      	b.n	14e18 <__gxx_personality_v0+0x384>
   14e3c:	006b      	lsls	r3, r5, #1
   14e3e:	425b      	negs	r3, r3
   14e40:	e7ea      	b.n	14e18 <__gxx_personality_v0+0x384>
   14e42:	ab0a      	add	r3, sp, #40	; 0x28
   14e44:	2200      	movs	r2, #0
   14e46:	4648      	mov	r0, r9
   14e48:	f7ff fb68 	bl	1451c <__cxa_type_match>
   14e4c:	2800      	cmp	r0, #0
   14e4e:	d0ee      	beq.n	14e2e <__gxx_personality_v0+0x39a>
   14e50:	9f07      	ldr	r7, [sp, #28]
   14e52:	2403      	movs	r4, #3
   14e54:	9b03      	ldr	r3, [sp, #12]
   14e56:	07da      	lsls	r2, r3, #31
   14e58:	d460      	bmi.n	14f1c <__gxx_personality_v0+0x488>
   14e5a:	9b03      	ldr	r3, [sp, #12]
   14e5c:	0719      	lsls	r1, r3, #28
   14e5e:	d466      	bmi.n	14f2e <__gxx_personality_v0+0x49a>
   14e60:	2c01      	cmp	r4, #1
   14e62:	f43f af41 	beq.w	14ce8 <__gxx_personality_v0+0x254>
   14e66:	9905      	ldr	r1, [sp, #20]
   14e68:	e707      	b.n	14c7a <__gxx_personality_v0+0x1e6>
   14e6a:	2301      	movs	r3, #1
   14e6c:	9308      	str	r3, [sp, #32]
   14e6e:	e7de      	b.n	14e2e <__gxx_personality_v0+0x39a>
   14e70:	f1b9 0f00 	cmp.w	r9, #0
   14e74:	d001      	beq.n	14e7a <__gxx_personality_v0+0x3e6>
   14e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14e78:	b35b      	cbz	r3, 14ed2 <__gxx_personality_v0+0x43e>
   14e7a:	1c6b      	adds	r3, r5, #1
   14e7c:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14e80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e86:	2b00      	cmp	r3, #0
   14e88:	d1d1      	bne.n	14e2e <__gxx_personality_v0+0x39a>
   14e8a:	e7e1      	b.n	14e50 <__gxx_personality_v0+0x3bc>
   14e8c:	9a06      	ldr	r2, [sp, #24]
   14e8e:	4638      	mov	r0, r7
   14e90:	f7ff fdb4 	bl	149fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   14e94:	4639      	mov	r1, r7
   14e96:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14e9a:	f7ff fd8f 	bl	149bc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14e9e:	00aa      	lsls	r2, r5, #2
   14ea0:	f082 0203 	eor.w	r2, r2, #3
   14ea4:	43d2      	mvns	r2, r2
   14ea6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14ea8:	9012      	str	r0, [sp, #72]	; 0x48
   14eaa:	58b3      	ldr	r3, [r6, r2]
   14eac:	4416      	add	r6, r2
   14eae:	b133      	cbz	r3, 14ebe <__gxx_personality_v0+0x42a>
   14eb0:	4632      	mov	r2, r6
   14eb2:	2300      	movs	r3, #0
   14eb4:	f852 1f04 	ldr.w	r1, [r2, #4]!
   14eb8:	3301      	adds	r3, #1
   14eba:	2900      	cmp	r1, #0
   14ebc:	d1fa      	bne.n	14eb4 <__gxx_personality_v0+0x420>
   14ebe:	2204      	movs	r2, #4
   14ec0:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   14ec4:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   14ec8:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   14ecc:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14ed0:	e6d6      	b.n	14c80 <__gxx_personality_v0+0x1ec>
   14ed2:	1c6f      	adds	r7, r5, #1
   14ed4:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   14ed8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   14eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14edc:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   14ee0:	920f      	str	r2, [sp, #60]	; 0x3c
   14ee2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   14ee6:	b921      	cbnz	r1, 14ef2 <__gxx_personality_v0+0x45e>
   14ee8:	e7b2      	b.n	14e50 <__gxx_personality_v0+0x3bc>
   14eea:	f857 1f04 	ldr.w	r1, [r7, #4]!
   14eee:	2900      	cmp	r1, #0
   14ef0:	d0ae      	beq.n	14e50 <__gxx_personality_v0+0x3bc>
   14ef2:	4439      	add	r1, r7
   14ef4:	465b      	mov	r3, fp
   14ef6:	2200      	movs	r2, #0
   14ef8:	4648      	mov	r0, r9
   14efa:	f7ff fb0f 	bl	1451c <__cxa_type_match>
   14efe:	2800      	cmp	r0, #0
   14f00:	d0f3      	beq.n	14eea <__gxx_personality_v0+0x456>
   14f02:	e794      	b.n	14e2e <__gxx_personality_v0+0x39a>
   14f04:	2300      	movs	r3, #0
   14f06:	e787      	b.n	14e18 <__gxx_personality_v0+0x384>
   14f08:	f899 2007 	ldrb.w	r2, [r9, #7]
   14f0c:	2a01      	cmp	r2, #1
   14f0e:	bf0c      	ite	eq
   14f10:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   14f14:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   14f18:	920a      	str	r2, [sp, #40]	; 0x28
   14f1a:	e717      	b.n	14d4c <__gxx_personality_v0+0x2b8>
   14f1c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14f20:	e65a      	b.n	14bd8 <__gxx_personality_v0+0x144>
   14f22:	9b08      	ldr	r3, [sp, #32]
   14f24:	9f07      	ldr	r7, [sp, #28]
   14f26:	2b00      	cmp	r3, #0
   14f28:	f47f af68 	bne.w	14dfc <__gxx_personality_v0+0x368>
   14f2c:	e5c0      	b.n	14ab0 <__gxx_personality_v0+0x1c>
   14f2e:	2c01      	cmp	r4, #1
   14f30:	f43f ae8d 	beq.w	14c4e <__gxx_personality_v0+0x1ba>
   14f34:	2d00      	cmp	r5, #0
   14f36:	f6bf aea3 	bge.w	14c80 <__gxx_personality_v0+0x1ec>
   14f3a:	f7ff f903 	bl	14144 <_ZSt10unexpectedv>
   14f3e:	461d      	mov	r5, r3
   14f40:	2402      	movs	r4, #2
   14f42:	e6a1      	b.n	14c88 <__gxx_personality_v0+0x1f4>
   14f44:	f7ff fc4e 	bl	147e4 <__cxa_begin_catch>
   14f48:	e681      	b.n	14c4e <__gxx_personality_v0+0x1ba>
   14f4a:	bf00      	nop

00014f4c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   14f4c:	b570      	push	{r4, r5, r6, lr}
   14f4e:	4b3c      	ldr	r3, [pc, #240]	; (15040 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   14f50:	781a      	ldrb	r2, [r3, #0]
   14f52:	b082      	sub	sp, #8
   14f54:	2a00      	cmp	r2, #0
   14f56:	d135      	bne.n	14fc4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   14f58:	2401      	movs	r4, #1
   14f5a:	701c      	strb	r4, [r3, #0]
   14f5c:	f006 fbd2 	bl	1b704 <__cxa_current_exception_type>
   14f60:	2800      	cmp	r0, #0
   14f62:	d05b      	beq.n	1501c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   14f64:	6844      	ldr	r4, [r0, #4]
   14f66:	4d37      	ldr	r5, [pc, #220]	; (15044 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14f68:	7823      	ldrb	r3, [r4, #0]
   14f6a:	2b2a      	cmp	r3, #42	; 0x2a
   14f6c:	ab02      	add	r3, sp, #8
   14f6e:	f04f 32ff 	mov.w	r2, #4294967295
   14f72:	bf08      	it	eq
   14f74:	3401      	addeq	r4, #1
   14f76:	f843 2d04 	str.w	r2, [r3, #-4]!
   14f7a:	2200      	movs	r2, #0
   14f7c:	4611      	mov	r1, r2
   14f7e:	4620      	mov	r0, r4
   14f80:	f006 fb52 	bl	1b628 <__cxa_demangle>
   14f84:	682b      	ldr	r3, [r5, #0]
   14f86:	4606      	mov	r6, r0
   14f88:	68db      	ldr	r3, [r3, #12]
   14f8a:	482f      	ldr	r0, [pc, #188]	; (15048 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   14f8c:	2230      	movs	r2, #48	; 0x30
   14f8e:	2101      	movs	r1, #1
   14f90:	f009 fba4 	bl	1e6dc <fwrite>
   14f94:	9b01      	ldr	r3, [sp, #4]
   14f96:	b17b      	cbz	r3, 14fb8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   14f98:	682b      	ldr	r3, [r5, #0]
   14f9a:	4620      	mov	r0, r4
   14f9c:	68d9      	ldr	r1, [r3, #12]
   14f9e:	f009 f9c7 	bl	1e330 <fputs>
   14fa2:	682b      	ldr	r3, [r5, #0]
   14fa4:	4829      	ldr	r0, [pc, #164]	; (1504c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   14fa6:	68db      	ldr	r3, [r3, #12]
   14fa8:	2202      	movs	r2, #2
   14faa:	2101      	movs	r1, #1
   14fac:	f009 fb96 	bl	1e6dc <fwrite>
   14fb0:	9b01      	ldr	r3, [sp, #4]
   14fb2:	b18b      	cbz	r3, 14fd8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   14fb4:	f7ff f940 	bl	14238 <__cxa_rethrow>
   14fb8:	682b      	ldr	r3, [r5, #0]
   14fba:	4630      	mov	r0, r6
   14fbc:	68d9      	ldr	r1, [r3, #12]
   14fbe:	f009 f9b7 	bl	1e330 <fputs>
   14fc2:	e7ee      	b.n	14fa2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   14fc4:	4b1f      	ldr	r3, [pc, #124]	; (15044 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14fc6:	4822      	ldr	r0, [pc, #136]	; (15050 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   14fc8:	681b      	ldr	r3, [r3, #0]
   14fca:	221d      	movs	r2, #29
   14fcc:	68db      	ldr	r3, [r3, #12]
   14fce:	2101      	movs	r1, #1
   14fd0:	f009 fb84 	bl	1e6dc <fwrite>
   14fd4:	f009 f92e 	bl	1e234 <abort>
   14fd8:	4630      	mov	r0, r6
   14fda:	f009 fbe1 	bl	1e7a0 <free>
   14fde:	e7e9      	b.n	14fb4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   14fe0:	2901      	cmp	r1, #1
   14fe2:	460c      	mov	r4, r1
   14fe4:	d127      	bne.n	15036 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   14fe6:	f7ff fbfd 	bl	147e4 <__cxa_begin_catch>
   14fea:	6803      	ldr	r3, [r0, #0]
   14fec:	689b      	ldr	r3, [r3, #8]
   14fee:	4798      	blx	r3
   14ff0:	682b      	ldr	r3, [r5, #0]
   14ff2:	4606      	mov	r6, r0
   14ff4:	68db      	ldr	r3, [r3, #12]
   14ff6:	4817      	ldr	r0, [pc, #92]	; (15054 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   14ff8:	4621      	mov	r1, r4
   14ffa:	220b      	movs	r2, #11
   14ffc:	f009 fb6e 	bl	1e6dc <fwrite>
   15000:	682b      	ldr	r3, [r5, #0]
   15002:	4630      	mov	r0, r6
   15004:	68d9      	ldr	r1, [r3, #12]
   15006:	f009 f993 	bl	1e330 <fputs>
   1500a:	682b      	ldr	r3, [r5, #0]
   1500c:	200a      	movs	r0, #10
   1500e:	68d9      	ldr	r1, [r3, #12]
   15010:	f009 f91e 	bl	1e250 <fputc>
   15014:	f7ff fc24 	bl	14860 <__cxa_end_catch>
   15018:	f009 f90c 	bl	1e234 <abort>
   1501c:	4b09      	ldr	r3, [pc, #36]	; (15044 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1501e:	480e      	ldr	r0, [pc, #56]	; (15058 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   15020:	681b      	ldr	r3, [r3, #0]
   15022:	4621      	mov	r1, r4
   15024:	68db      	ldr	r3, [r3, #12]
   15026:	222d      	movs	r2, #45	; 0x2d
   15028:	f009 fb58 	bl	1e6dc <fwrite>
   1502c:	e7f4      	b.n	15018 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   1502e:	f7ff fc17 	bl	14860 <__cxa_end_catch>
   15032:	f7ff fa6d 	bl	14510 <__cxa_end_cleanup>
   15036:	f7ff fbd5 	bl	147e4 <__cxa_begin_catch>
   1503a:	f7ff fc11 	bl	14860 <__cxa_end_catch>
   1503e:	e7eb      	b.n	15018 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   15040:	2000229c 	.word	0x2000229c
   15044:	200000f8 	.word	0x200000f8
   15048:	000247a8 	.word	0x000247a8
   1504c:	000247dc 	.word	0x000247dc
   15050:	00024788 	.word	0x00024788
   15054:	00024810 	.word	0x00024810
   15058:	000247e0 	.word	0x000247e0

0001505c <d_make_comp>:
   1505c:	b470      	push	{r4, r5, r6}
   1505e:	1e4c      	subs	r4, r1, #1
   15060:	2c4c      	cmp	r4, #76	; 0x4c
   15062:	d82d      	bhi.n	150c0 <d_make_comp+0x64>
   15064:	e8df f004 	tbb	[pc, r4]
   15068:	3c3c3c3c 	.word	0x3c3c3c3c
   1506c:	2c2c2c2c 	.word	0x2c2c2c2c
   15070:	273c2727 	.word	0x273c2727
   15074:	27272727 	.word	0x27272727
   15078:	27272727 	.word	0x27272727
   1507c:	2c272727 	.word	0x2c272727
   15080:	28282828 	.word	0x28282828
   15084:	28282828 	.word	0x28282828
   15088:	2727273c 	.word	0x2727273c
   1508c:	272c2727 	.word	0x272c2727
   15090:	2c3c3e28 	.word	0x2c3c3e28
   15094:	3e28283c 	.word	0x3e28283c
   15098:	27272c2c 	.word	0x27272c2c
   1509c:	3c3c3c27 	.word	0x3c3c3c27
   150a0:	3c273c3c 	.word	0x3c273c3c
   150a4:	2c3c273c 	.word	0x2c3c273c
   150a8:	2727272c 	.word	0x2727272c
   150ac:	272c2c2c 	.word	0x272c2c2c
   150b0:	283c2727 	.word	0x283c2727
   150b4:	3c          	.byte	0x3c
   150b5:	00          	.byte	0x00
   150b6:	b11a      	cbz	r2, 150c0 <d_make_comp+0x64>
   150b8:	6944      	ldr	r4, [r0, #20]
   150ba:	6985      	ldr	r5, [r0, #24]
   150bc:	42ac      	cmp	r4, r5
   150be:	db02      	blt.n	150c6 <d_make_comp+0x6a>
   150c0:	2000      	movs	r0, #0
   150c2:	bc70      	pop	{r4, r5, r6}
   150c4:	4770      	bx	lr
   150c6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   150ca:	6906      	ldr	r6, [r0, #16]
   150cc:	00ad      	lsls	r5, r5, #2
   150ce:	3401      	adds	r4, #1
   150d0:	6144      	str	r4, [r0, #20]
   150d2:	1970      	adds	r0, r6, r5
   150d4:	d0f5      	beq.n	150c2 <d_make_comp+0x66>
   150d6:	5571      	strb	r1, [r6, r5]
   150d8:	6042      	str	r2, [r0, #4]
   150da:	6083      	str	r3, [r0, #8]
   150dc:	bc70      	pop	{r4, r5, r6}
   150de:	4770      	bx	lr
   150e0:	2a00      	cmp	r2, #0
   150e2:	d0ed      	beq.n	150c0 <d_make_comp+0x64>
   150e4:	2b00      	cmp	r3, #0
   150e6:	d0eb      	beq.n	150c0 <d_make_comp+0x64>
   150e8:	6944      	ldr	r4, [r0, #20]
   150ea:	6985      	ldr	r5, [r0, #24]
   150ec:	42ac      	cmp	r4, r5
   150ee:	dae7      	bge.n	150c0 <d_make_comp+0x64>
   150f0:	e7e9      	b.n	150c6 <d_make_comp+0x6a>
   150f2:	bf00      	nop

000150f4 <d_cv_qualifiers>:
   150f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   150f8:	68c3      	ldr	r3, [r0, #12]
   150fa:	f1b2 0a00 	subs.w	sl, r2, #0
   150fe:	4604      	mov	r4, r0
   15100:	460e      	mov	r6, r1
   15102:	781a      	ldrb	r2, [r3, #0]
   15104:	bf15      	itete	ne
   15106:	f04f 091e 	movne.w	r9, #30
   1510a:	f04f 091b 	moveq.w	r9, #27
   1510e:	f04f 081d 	movne.w	r8, #29
   15112:	f04f 081a 	moveq.w	r8, #26
   15116:	bf14      	ite	ne
   15118:	271c      	movne	r7, #28
   1511a:	2719      	moveq	r7, #25
   1511c:	460d      	mov	r5, r1
   1511e:	e018      	b.n	15152 <d_cv_qualifiers+0x5e>
   15120:	2a56      	cmp	r2, #86	; 0x56
   15122:	d01f      	beq.n	15164 <d_cv_qualifiers+0x70>
   15124:	2a4b      	cmp	r2, #75	; 0x4b
   15126:	d024      	beq.n	15172 <d_cv_qualifiers+0x7e>
   15128:	2a44      	cmp	r2, #68	; 0x44
   1512a:	d12d      	bne.n	15188 <d_cv_qualifiers+0x94>
   1512c:	785a      	ldrb	r2, [r3, #1]
   1512e:	2a78      	cmp	r2, #120	; 0x78
   15130:	d127      	bne.n	15182 <d_cv_qualifiers+0x8e>
   15132:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15134:	3302      	adds	r3, #2
   15136:	3211      	adds	r2, #17
   15138:	60e3      	str	r3, [r4, #12]
   1513a:	6322      	str	r2, [r4, #48]	; 0x30
   1513c:	214c      	movs	r1, #76	; 0x4c
   1513e:	2300      	movs	r3, #0
   15140:	461a      	mov	r2, r3
   15142:	4620      	mov	r0, r4
   15144:	f7ff ff8a 	bl	1505c <d_make_comp>
   15148:	6028      	str	r0, [r5, #0]
   1514a:	b1c8      	cbz	r0, 15180 <d_cv_qualifiers+0x8c>
   1514c:	68e3      	ldr	r3, [r4, #12]
   1514e:	781a      	ldrb	r2, [r3, #0]
   15150:	1d05      	adds	r5, r0, #4
   15152:	2a72      	cmp	r2, #114	; 0x72
   15154:	d1e4      	bne.n	15120 <d_cv_qualifiers+0x2c>
   15156:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15158:	3301      	adds	r3, #1
   1515a:	3209      	adds	r2, #9
   1515c:	60e3      	str	r3, [r4, #12]
   1515e:	6322      	str	r2, [r4, #48]	; 0x30
   15160:	4639      	mov	r1, r7
   15162:	e7ec      	b.n	1513e <d_cv_qualifiers+0x4a>
   15164:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15166:	3301      	adds	r3, #1
   15168:	3209      	adds	r2, #9
   1516a:	60e3      	str	r3, [r4, #12]
   1516c:	6322      	str	r2, [r4, #48]	; 0x30
   1516e:	4641      	mov	r1, r8
   15170:	e7e5      	b.n	1513e <d_cv_qualifiers+0x4a>
   15172:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15174:	3301      	adds	r3, #1
   15176:	3206      	adds	r2, #6
   15178:	60e3      	str	r3, [r4, #12]
   1517a:	6322      	str	r2, [r4, #48]	; 0x30
   1517c:	4649      	mov	r1, r9
   1517e:	e7de      	b.n	1513e <d_cv_qualifiers+0x4a>
   15180:	4605      	mov	r5, r0
   15182:	4628      	mov	r0, r5
   15184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15188:	f1ba 0f00 	cmp.w	sl, #0
   1518c:	d1f9      	bne.n	15182 <d_cv_qualifiers+0x8e>
   1518e:	2a46      	cmp	r2, #70	; 0x46
   15190:	d1f7      	bne.n	15182 <d_cv_qualifiers+0x8e>
   15192:	42b5      	cmp	r5, r6
   15194:	d0f5      	beq.n	15182 <d_cv_qualifiers+0x8e>
   15196:	201d      	movs	r0, #29
   15198:	211e      	movs	r1, #30
   1519a:	221c      	movs	r2, #28
   1519c:	e007      	b.n	151ae <d_cv_qualifiers+0xba>
   1519e:	2b1b      	cmp	r3, #27
   151a0:	d00b      	beq.n	151ba <d_cv_qualifiers+0xc6>
   151a2:	2b19      	cmp	r3, #25
   151a4:	d100      	bne.n	151a8 <d_cv_qualifiers+0xb4>
   151a6:	7032      	strb	r2, [r6, #0]
   151a8:	3604      	adds	r6, #4
   151aa:	42b5      	cmp	r5, r6
   151ac:	d0e9      	beq.n	15182 <d_cv_qualifiers+0x8e>
   151ae:	6836      	ldr	r6, [r6, #0]
   151b0:	7833      	ldrb	r3, [r6, #0]
   151b2:	2b1a      	cmp	r3, #26
   151b4:	d1f3      	bne.n	1519e <d_cv_qualifiers+0xaa>
   151b6:	7030      	strb	r0, [r6, #0]
   151b8:	e7f6      	b.n	151a8 <d_cv_qualifiers+0xb4>
   151ba:	7031      	strb	r1, [r6, #0]
   151bc:	e7f4      	b.n	151a8 <d_cv_qualifiers+0xb4>
   151be:	bf00      	nop

000151c0 <d_ref_qualifier>:
   151c0:	b410      	push	{r4}
   151c2:	68c3      	ldr	r3, [r0, #12]
   151c4:	781c      	ldrb	r4, [r3, #0]
   151c6:	2c52      	cmp	r4, #82	; 0x52
   151c8:	460a      	mov	r2, r1
   151ca:	d00f      	beq.n	151ec <d_ref_qualifier+0x2c>
   151cc:	2c4f      	cmp	r4, #79	; 0x4f
   151ce:	d003      	beq.n	151d8 <d_ref_qualifier+0x18>
   151d0:	4608      	mov	r0, r1
   151d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   151d6:	4770      	bx	lr
   151d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
   151da:	3103      	adds	r1, #3
   151dc:	6301      	str	r1, [r0, #48]	; 0x30
   151de:	2120      	movs	r1, #32
   151e0:	3301      	adds	r3, #1
   151e2:	60c3      	str	r3, [r0, #12]
   151e4:	f85d 4b04 	ldr.w	r4, [sp], #4
   151e8:	2300      	movs	r3, #0
   151ea:	e737      	b.n	1505c <d_make_comp>
   151ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
   151ee:	3102      	adds	r1, #2
   151f0:	6301      	str	r1, [r0, #48]	; 0x30
   151f2:	211f      	movs	r1, #31
   151f4:	e7f4      	b.n	151e0 <d_ref_qualifier+0x20>
   151f6:	bf00      	nop

000151f8 <d_count_templates_scopes>:
   151f8:	2a00      	cmp	r2, #0
   151fa:	d04d      	beq.n	15298 <d_count_templates_scopes+0xa0>
   151fc:	b570      	push	{r4, r5, r6, lr}
   151fe:	4605      	mov	r5, r0
   15200:	460e      	mov	r6, r1
   15202:	4614      	mov	r4, r2
   15204:	7823      	ldrb	r3, [r4, #0]
   15206:	3b01      	subs	r3, #1
   15208:	2b4c      	cmp	r3, #76	; 0x4c
   1520a:	d82b      	bhi.n	15264 <d_count_templates_scopes+0x6c>
   1520c:	e8df f003 	tbb	[pc, r3]
   15210:	3f363636 	.word	0x3f363636
   15214:	27272a2a 	.word	0x27272a2a
   15218:	36363636 	.word	0x36363636
   1521c:	36363636 	.word	0x36363636
   15220:	36363636 	.word	0x36363636
   15224:	2a363636 	.word	0x2a363636
   15228:	36363636 	.word	0x36363636
   1522c:	36363636 	.word	0x36363636
   15230:	2f2f3636 	.word	0x2f2f3636
   15234:	362a3636 	.word	0x362a3636
   15238:	2b363636 	.word	0x2b363636
   1523c:	36363636 	.word	0x36363636
   15240:	3636272a 	.word	0x3636272a
   15244:	36363636 	.word	0x36363636
   15248:	36363636 	.word	0x36363636
   1524c:	2a363636 	.word	0x2a363636
   15250:	2b2b362a 	.word	0x2b2b362a
   15254:	362a2b2b 	.word	0x362a2b2b
   15258:	36363636 	.word	0x36363636
   1525c:	36          	.byte	0x36
   1525d:	00          	.byte	0x00
   1525e:	68a4      	ldr	r4, [r4, #8]
   15260:	2c00      	cmp	r4, #0
   15262:	d1cf      	bne.n	15204 <d_count_templates_scopes+0xc>
   15264:	bd70      	pop	{r4, r5, r6, pc}
   15266:	6864      	ldr	r4, [r4, #4]
   15268:	2c00      	cmp	r4, #0
   1526a:	d1cb      	bne.n	15204 <d_count_templates_scopes+0xc>
   1526c:	e7fa      	b.n	15264 <d_count_templates_scopes+0x6c>
   1526e:	6862      	ldr	r2, [r4, #4]
   15270:	7813      	ldrb	r3, [r2, #0]
   15272:	2b05      	cmp	r3, #5
   15274:	d103      	bne.n	1527e <d_count_templates_scopes+0x86>
   15276:	6833      	ldr	r3, [r6, #0]
   15278:	3301      	adds	r3, #1
   1527a:	6033      	str	r3, [r6, #0]
   1527c:	6862      	ldr	r2, [r4, #4]
   1527e:	4631      	mov	r1, r6
   15280:	4628      	mov	r0, r5
   15282:	f7ff ffb9 	bl	151f8 <d_count_templates_scopes>
   15286:	68a4      	ldr	r4, [r4, #8]
   15288:	2c00      	cmp	r4, #0
   1528a:	d1bb      	bne.n	15204 <d_count_templates_scopes+0xc>
   1528c:	e7ea      	b.n	15264 <d_count_templates_scopes+0x6c>
   1528e:	682b      	ldr	r3, [r5, #0]
   15290:	3301      	adds	r3, #1
   15292:	602b      	str	r3, [r5, #0]
   15294:	6862      	ldr	r2, [r4, #4]
   15296:	e7f2      	b.n	1527e <d_count_templates_scopes+0x86>
   15298:	4770      	bx	lr
   1529a:	bf00      	nop

0001529c <d_append_buffer>:
   1529c:	b37a      	cbz	r2, 152fe <d_append_buffer+0x62>
   1529e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152a2:	460d      	mov	r5, r1
   152a4:	4604      	mov	r4, r0
   152a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   152aa:	18af      	adds	r7, r5, r2
   152ac:	f04f 0800 	mov.w	r8, #0
   152b0:	e009      	b.n	152c6 <d_append_buffer+0x2a>
   152b2:	460b      	mov	r3, r1
   152b4:	42bd      	cmp	r5, r7
   152b6:	f101 0101 	add.w	r1, r1, #1
   152ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   152be:	54e6      	strb	r6, [r4, r3]
   152c0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   152c4:	d019      	beq.n	152fa <d_append_buffer+0x5e>
   152c6:	29ff      	cmp	r1, #255	; 0xff
   152c8:	f815 6b01 	ldrb.w	r6, [r5], #1
   152cc:	d1f1      	bne.n	152b2 <d_append_buffer+0x16>
   152ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   152d2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   152d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   152da:	4620      	mov	r0, r4
   152dc:	4798      	blx	r3
   152de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   152e2:	3301      	adds	r3, #1
   152e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   152e8:	2300      	movs	r3, #0
   152ea:	2101      	movs	r1, #1
   152ec:	42bd      	cmp	r5, r7
   152ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   152f2:	54e6      	strb	r6, [r4, r3]
   152f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   152f8:	d1e5      	bne.n	152c6 <d_append_buffer+0x2a>
   152fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   152fe:	4770      	bx	lr

00015300 <d_number.isra.0>:
   15300:	b470      	push	{r4, r5, r6}
   15302:	6802      	ldr	r2, [r0, #0]
   15304:	7811      	ldrb	r1, [r2, #0]
   15306:	296e      	cmp	r1, #110	; 0x6e
   15308:	d018      	beq.n	1533c <d_number.isra.0+0x3c>
   1530a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1530e:	2b09      	cmp	r3, #9
   15310:	d81e      	bhi.n	15350 <d_number.isra.0+0x50>
   15312:	2600      	movs	r6, #0
   15314:	2300      	movs	r3, #0
   15316:	3201      	adds	r2, #1
   15318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1531c:	6002      	str	r2, [r0, #0]
   1531e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   15322:	7811      	ldrb	r1, [r2, #0]
   15324:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   15328:	2d09      	cmp	r5, #9
   1532a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1532e:	d9f2      	bls.n	15316 <d_number.isra.0+0x16>
   15330:	b10e      	cbz	r6, 15336 <d_number.isra.0+0x36>
   15332:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   15336:	4618      	mov	r0, r3
   15338:	bc70      	pop	{r4, r5, r6}
   1533a:	4770      	bx	lr
   1533c:	1c53      	adds	r3, r2, #1
   1533e:	6003      	str	r3, [r0, #0]
   15340:	7851      	ldrb	r1, [r2, #1]
   15342:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   15346:	2a09      	cmp	r2, #9
   15348:	d802      	bhi.n	15350 <d_number.isra.0+0x50>
   1534a:	461a      	mov	r2, r3
   1534c:	2601      	movs	r6, #1
   1534e:	e7e1      	b.n	15314 <d_number.isra.0+0x14>
   15350:	2300      	movs	r3, #0
   15352:	e7f0      	b.n	15336 <d_number.isra.0+0x36>

00015354 <d_number_component>:
   15354:	6943      	ldr	r3, [r0, #20]
   15356:	6982      	ldr	r2, [r0, #24]
   15358:	4293      	cmp	r3, r2
   1535a:	b510      	push	{r4, lr}
   1535c:	da0f      	bge.n	1537e <d_number_component+0x2a>
   1535e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15362:	6901      	ldr	r1, [r0, #16]
   15364:	0092      	lsls	r2, r2, #2
   15366:	3301      	adds	r3, #1
   15368:	188c      	adds	r4, r1, r2
   1536a:	6143      	str	r3, [r0, #20]
   1536c:	d005      	beq.n	1537a <d_number_component+0x26>
   1536e:	2341      	movs	r3, #65	; 0x41
   15370:	300c      	adds	r0, #12
   15372:	548b      	strb	r3, [r1, r2]
   15374:	f7ff ffc4 	bl	15300 <d_number.isra.0>
   15378:	6060      	str	r0, [r4, #4]
   1537a:	4620      	mov	r0, r4
   1537c:	bd10      	pop	{r4, pc}
   1537e:	2400      	movs	r4, #0
   15380:	4620      	mov	r0, r4
   15382:	bd10      	pop	{r4, pc}

00015384 <d_compact_number>:
   15384:	b510      	push	{r4, lr}
   15386:	68c3      	ldr	r3, [r0, #12]
   15388:	781a      	ldrb	r2, [r3, #0]
   1538a:	2a5f      	cmp	r2, #95	; 0x5f
   1538c:	4604      	mov	r4, r0
   1538e:	d00d      	beq.n	153ac <d_compact_number+0x28>
   15390:	2a6e      	cmp	r2, #110	; 0x6e
   15392:	d00f      	beq.n	153b4 <d_compact_number+0x30>
   15394:	300c      	adds	r0, #12
   15396:	f7ff ffb3 	bl	15300 <d_number.isra.0>
   1539a:	3001      	adds	r0, #1
   1539c:	d40a      	bmi.n	153b4 <d_compact_number+0x30>
   1539e:	68e3      	ldr	r3, [r4, #12]
   153a0:	781a      	ldrb	r2, [r3, #0]
   153a2:	2a5f      	cmp	r2, #95	; 0x5f
   153a4:	d106      	bne.n	153b4 <d_compact_number+0x30>
   153a6:	3301      	adds	r3, #1
   153a8:	60e3      	str	r3, [r4, #12]
   153aa:	bd10      	pop	{r4, pc}
   153ac:	3301      	adds	r3, #1
   153ae:	2000      	movs	r0, #0
   153b0:	60e3      	str	r3, [r4, #12]
   153b2:	bd10      	pop	{r4, pc}
   153b4:	f04f 30ff 	mov.w	r0, #4294967295
   153b8:	bd10      	pop	{r4, pc}
   153ba:	bf00      	nop

000153bc <d_template_param>:
   153bc:	b538      	push	{r3, r4, r5, lr}
   153be:	68c3      	ldr	r3, [r0, #12]
   153c0:	781a      	ldrb	r2, [r3, #0]
   153c2:	2a54      	cmp	r2, #84	; 0x54
   153c4:	d001      	beq.n	153ca <d_template_param+0xe>
   153c6:	2000      	movs	r0, #0
   153c8:	bd38      	pop	{r3, r4, r5, pc}
   153ca:	3301      	adds	r3, #1
   153cc:	60c3      	str	r3, [r0, #12]
   153ce:	4604      	mov	r4, r0
   153d0:	f7ff ffd8 	bl	15384 <d_compact_number>
   153d4:	1e05      	subs	r5, r0, #0
   153d6:	dbf6      	blt.n	153c6 <d_template_param+0xa>
   153d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   153da:	6963      	ldr	r3, [r4, #20]
   153dc:	69a1      	ldr	r1, [r4, #24]
   153de:	3201      	adds	r2, #1
   153e0:	428b      	cmp	r3, r1
   153e2:	62a2      	str	r2, [r4, #40]	; 0x28
   153e4:	daef      	bge.n	153c6 <d_template_param+0xa>
   153e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   153ea:	6921      	ldr	r1, [r4, #16]
   153ec:	0092      	lsls	r2, r2, #2
   153ee:	3301      	adds	r3, #1
   153f0:	1888      	adds	r0, r1, r2
   153f2:	6163      	str	r3, [r4, #20]
   153f4:	d002      	beq.n	153fc <d_template_param+0x40>
   153f6:	2305      	movs	r3, #5
   153f8:	548b      	strb	r3, [r1, r2]
   153fa:	6045      	str	r5, [r0, #4]
   153fc:	bd38      	pop	{r3, r4, r5, pc}
   153fe:	bf00      	nop

00015400 <d_source_name>:
   15400:	b570      	push	{r4, r5, r6, lr}
   15402:	4604      	mov	r4, r0
   15404:	300c      	adds	r0, #12
   15406:	f7ff ff7b 	bl	15300 <d_number.isra.0>
   1540a:	1e06      	subs	r6, r0, #0
   1540c:	dd4d      	ble.n	154aa <d_source_name+0xaa>
   1540e:	68e5      	ldr	r5, [r4, #12]
   15410:	6863      	ldr	r3, [r4, #4]
   15412:	1b5b      	subs	r3, r3, r5
   15414:	429e      	cmp	r6, r3
   15416:	dc2b      	bgt.n	15470 <d_source_name+0x70>
   15418:	68a2      	ldr	r2, [r4, #8]
   1541a:	19ab      	adds	r3, r5, r6
   1541c:	0752      	lsls	r2, r2, #29
   1541e:	60e3      	str	r3, [r4, #12]
   15420:	d504      	bpl.n	1542c <d_source_name+0x2c>
   15422:	5daa      	ldrb	r2, [r5, r6]
   15424:	2a24      	cmp	r2, #36	; 0x24
   15426:	bf04      	itt	eq
   15428:	3301      	addeq	r3, #1
   1542a:	60e3      	streq	r3, [r4, #12]
   1542c:	2e09      	cmp	r6, #9
   1542e:	dd0c      	ble.n	1544a <d_source_name+0x4a>
   15430:	2208      	movs	r2, #8
   15432:	491f      	ldr	r1, [pc, #124]	; (154b0 <d_source_name+0xb0>)
   15434:	4628      	mov	r0, r5
   15436:	f009 fcd3 	bl	1ede0 <memcmp>
   1543a:	b930      	cbnz	r0, 1544a <d_source_name+0x4a>
   1543c:	7a2b      	ldrb	r3, [r5, #8]
   1543e:	2b2e      	cmp	r3, #46	; 0x2e
   15440:	d019      	beq.n	15476 <d_source_name+0x76>
   15442:	2b5f      	cmp	r3, #95	; 0x5f
   15444:	d017      	beq.n	15476 <d_source_name+0x76>
   15446:	2b24      	cmp	r3, #36	; 0x24
   15448:	d015      	beq.n	15476 <d_source_name+0x76>
   1544a:	6963      	ldr	r3, [r4, #20]
   1544c:	69a2      	ldr	r2, [r4, #24]
   1544e:	4293      	cmp	r3, r2
   15450:	da0e      	bge.n	15470 <d_source_name+0x70>
   15452:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15456:	6921      	ldr	r1, [r4, #16]
   15458:	0092      	lsls	r2, r2, #2
   1545a:	3301      	adds	r3, #1
   1545c:	1888      	adds	r0, r1, r2
   1545e:	6163      	str	r3, [r4, #20]
   15460:	d006      	beq.n	15470 <d_source_name+0x70>
   15462:	b12d      	cbz	r5, 15470 <d_source_name+0x70>
   15464:	2300      	movs	r3, #0
   15466:	548b      	strb	r3, [r1, r2]
   15468:	6045      	str	r5, [r0, #4]
   1546a:	6086      	str	r6, [r0, #8]
   1546c:	62e0      	str	r0, [r4, #44]	; 0x2c
   1546e:	bd70      	pop	{r4, r5, r6, pc}
   15470:	2000      	movs	r0, #0
   15472:	62e0      	str	r0, [r4, #44]	; 0x2c
   15474:	bd70      	pop	{r4, r5, r6, pc}
   15476:	7a6b      	ldrb	r3, [r5, #9]
   15478:	2b4e      	cmp	r3, #78	; 0x4e
   1547a:	d1e6      	bne.n	1544a <d_source_name+0x4a>
   1547c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1547e:	6962      	ldr	r2, [r4, #20]
   15480:	69a1      	ldr	r1, [r4, #24]
   15482:	3316      	adds	r3, #22
   15484:	1b9e      	subs	r6, r3, r6
   15486:	428a      	cmp	r2, r1
   15488:	6326      	str	r6, [r4, #48]	; 0x30
   1548a:	daf1      	bge.n	15470 <d_source_name+0x70>
   1548c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   15490:	6921      	ldr	r1, [r4, #16]
   15492:	009b      	lsls	r3, r3, #2
   15494:	3201      	adds	r2, #1
   15496:	18c8      	adds	r0, r1, r3
   15498:	6162      	str	r2, [r4, #20]
   1549a:	d0ea      	beq.n	15472 <d_source_name+0x72>
   1549c:	2500      	movs	r5, #0
   1549e:	54cd      	strb	r5, [r1, r3]
   154a0:	4a04      	ldr	r2, [pc, #16]	; (154b4 <d_source_name+0xb4>)
   154a2:	6042      	str	r2, [r0, #4]
   154a4:	2315      	movs	r3, #21
   154a6:	6083      	str	r3, [r0, #8]
   154a8:	e7e3      	b.n	15472 <d_source_name+0x72>
   154aa:	2000      	movs	r0, #0
   154ac:	bd70      	pop	{r4, r5, r6, pc}
   154ae:	bf00      	nop
   154b0:	00024fb4 	.word	0x00024fb4
   154b4:	00024fc0 	.word	0x00024fc0

000154b8 <d_abi_tags>:
   154b8:	b570      	push	{r4, r5, r6, lr}
   154ba:	68c3      	ldr	r3, [r0, #12]
   154bc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   154be:	781a      	ldrb	r2, [r3, #0]
   154c0:	2a42      	cmp	r2, #66	; 0x42
   154c2:	4604      	mov	r4, r0
   154c4:	460d      	mov	r5, r1
   154c6:	d10f      	bne.n	154e8 <d_abi_tags+0x30>
   154c8:	3301      	adds	r3, #1
   154ca:	60e3      	str	r3, [r4, #12]
   154cc:	4620      	mov	r0, r4
   154ce:	f7ff ff97 	bl	15400 <d_source_name>
   154d2:	462a      	mov	r2, r5
   154d4:	4603      	mov	r3, r0
   154d6:	214b      	movs	r1, #75	; 0x4b
   154d8:	4620      	mov	r0, r4
   154da:	f7ff fdbf 	bl	1505c <d_make_comp>
   154de:	68e3      	ldr	r3, [r4, #12]
   154e0:	781a      	ldrb	r2, [r3, #0]
   154e2:	2a42      	cmp	r2, #66	; 0x42
   154e4:	4605      	mov	r5, r0
   154e6:	d0ef      	beq.n	154c8 <d_abi_tags+0x10>
   154e8:	62e6      	str	r6, [r4, #44]	; 0x2c
   154ea:	4628      	mov	r0, r5
   154ec:	bd70      	pop	{r4, r5, r6, pc}
   154ee:	bf00      	nop

000154f0 <d_substitution>:
   154f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   154f4:	4605      	mov	r5, r0
   154f6:	68c0      	ldr	r0, [r0, #12]
   154f8:	7803      	ldrb	r3, [r0, #0]
   154fa:	2b53      	cmp	r3, #83	; 0x53
   154fc:	d002      	beq.n	15504 <d_substitution+0x14>
   154fe:	2000      	movs	r0, #0
   15500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15504:	1c43      	adds	r3, r0, #1
   15506:	60eb      	str	r3, [r5, #12]
   15508:	7842      	ldrb	r2, [r0, #1]
   1550a:	b1a2      	cbz	r2, 15536 <d_substitution+0x46>
   1550c:	1c83      	adds	r3, r0, #2
   1550e:	60eb      	str	r3, [r5, #12]
   15510:	7842      	ldrb	r2, [r0, #1]
   15512:	2a5f      	cmp	r2, #95	; 0x5f
   15514:	d15a      	bne.n	155cc <d_substitution+0xdc>
   15516:	2300      	movs	r3, #0
   15518:	6a2a      	ldr	r2, [r5, #32]
   1551a:	4293      	cmp	r3, r2
   1551c:	d2ef      	bcs.n	154fe <d_substitution+0xe>
   1551e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   15520:	69e9      	ldr	r1, [r5, #28]
   15522:	3201      	adds	r2, #1
   15524:	62aa      	str	r2, [r5, #40]	; 0x28
   15526:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   1552a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1552e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   15532:	2b19      	cmp	r3, #25
   15534:	d94f      	bls.n	155d6 <d_substitution+0xe6>
   15536:	68ab      	ldr	r3, [r5, #8]
   15538:	f003 0308 	and.w	r3, r3, #8
   1553c:	2b00      	cmp	r3, #0
   1553e:	bf14      	ite	ne
   15540:	2401      	movne	r4, #1
   15542:	2400      	moveq	r4, #0
   15544:	d101      	bne.n	1554a <d_substitution+0x5a>
   15546:	2900      	cmp	r1, #0
   15548:	d169      	bne.n	1561e <d_substitution+0x12e>
   1554a:	4b46      	ldr	r3, [pc, #280]	; (15664 <d_substitution+0x174>)
   1554c:	2174      	movs	r1, #116	; 0x74
   1554e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   15552:	e003      	b.n	1555c <d_substitution+0x6c>
   15554:	331c      	adds	r3, #28
   15556:	4283      	cmp	r3, r0
   15558:	d2d1      	bcs.n	154fe <d_substitution+0xe>
   1555a:	7819      	ldrb	r1, [r3, #0]
   1555c:	428a      	cmp	r2, r1
   1555e:	d1f9      	bne.n	15554 <d_substitution+0x64>
   15560:	695e      	ldr	r6, [r3, #20]
   15562:	2e00      	cmp	r6, #0
   15564:	d07b      	beq.n	1565e <d_substitution+0x16e>
   15566:	696a      	ldr	r2, [r5, #20]
   15568:	69a9      	ldr	r1, [r5, #24]
   1556a:	428a      	cmp	r2, r1
   1556c:	da63      	bge.n	15636 <d_substitution+0x146>
   1556e:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   15572:	f8d5 e010 	ldr.w	lr, [r5, #16]
   15576:	f8d3 8018 	ldr.w	r8, [r3, #24]
   1557a:	00bf      	lsls	r7, r7, #2
   1557c:	3201      	adds	r2, #1
   1557e:	eb1e 0007 	adds.w	r0, lr, r7
   15582:	616a      	str	r2, [r5, #20]
   15584:	d006      	beq.n	15594 <d_substitution+0xa4>
   15586:	f04f 0c18 	mov.w	ip, #24
   1558a:	f80e c007 	strb.w	ip, [lr, r7]
   1558e:	6046      	str	r6, [r0, #4]
   15590:	f8c0 8008 	str.w	r8, [r0, #8]
   15594:	62e8      	str	r0, [r5, #44]	; 0x2c
   15596:	2c00      	cmp	r4, #0
   15598:	d04a      	beq.n	15630 <d_substitution+0x140>
   1559a:	68de      	ldr	r6, [r3, #12]
   1559c:	691c      	ldr	r4, [r3, #16]
   1559e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   155a0:	4291      	cmp	r1, r2
   155a2:	4423      	add	r3, r4
   155a4:	632b      	str	r3, [r5, #48]	; 0x30
   155a6:	dd41      	ble.n	1562c <d_substitution+0x13c>
   155a8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   155ac:	6929      	ldr	r1, [r5, #16]
   155ae:	009b      	lsls	r3, r3, #2
   155b0:	3201      	adds	r2, #1
   155b2:	18c8      	adds	r0, r1, r3
   155b4:	616a      	str	r2, [r5, #20]
   155b6:	d003      	beq.n	155c0 <d_substitution+0xd0>
   155b8:	2218      	movs	r2, #24
   155ba:	54ca      	strb	r2, [r1, r3]
   155bc:	6046      	str	r6, [r0, #4]
   155be:	6084      	str	r4, [r0, #8]
   155c0:	68eb      	ldr	r3, [r5, #12]
   155c2:	781b      	ldrb	r3, [r3, #0]
   155c4:	2b42      	cmp	r3, #66	; 0x42
   155c6:	d038      	beq.n	1563a <d_substitution+0x14a>
   155c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   155cc:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   155d0:	b2e3      	uxtb	r3, r4
   155d2:	2b09      	cmp	r3, #9
   155d4:	d8ab      	bhi.n	1552e <d_substitution+0x3e>
   155d6:	2100      	movs	r1, #0
   155d8:	e00d      	b.n	155f6 <d_substitution+0x106>
   155da:	3b30      	subs	r3, #48	; 0x30
   155dc:	4299      	cmp	r1, r3
   155de:	d88e      	bhi.n	154fe <d_substitution+0xe>
   155e0:	68e9      	ldr	r1, [r5, #12]
   155e2:	780a      	ldrb	r2, [r1, #0]
   155e4:	1c48      	adds	r0, r1, #1
   155e6:	b11a      	cbz	r2, 155f0 <d_substitution+0x100>
   155e8:	60e8      	str	r0, [r5, #12]
   155ea:	780a      	ldrb	r2, [r1, #0]
   155ec:	2a5f      	cmp	r2, #95	; 0x5f
   155ee:	d014      	beq.n	1561a <d_substitution+0x12a>
   155f0:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   155f4:	4619      	mov	r1, r3
   155f6:	b2e4      	uxtb	r4, r4
   155f8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   155fc:	2c09      	cmp	r4, #9
   155fe:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   15602:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15606:	d9e8      	bls.n	155da <d_substitution+0xea>
   15608:	2819      	cmp	r0, #25
   1560a:	f63f af78 	bhi.w	154fe <d_substitution+0xe>
   1560e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   15612:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15616:	3b37      	subs	r3, #55	; 0x37
   15618:	e7e0      	b.n	155dc <d_substitution+0xec>
   1561a:	3301      	adds	r3, #1
   1561c:	e77c      	b.n	15518 <d_substitution+0x28>
   1561e:	68eb      	ldr	r3, [r5, #12]
   15620:	781b      	ldrb	r3, [r3, #0]
   15622:	3b43      	subs	r3, #67	; 0x43
   15624:	2b01      	cmp	r3, #1
   15626:	bf98      	it	ls
   15628:	2401      	movls	r4, #1
   1562a:	e78e      	b.n	1554a <d_substitution+0x5a>
   1562c:	2000      	movs	r0, #0
   1562e:	e7c7      	b.n	155c0 <d_substitution+0xd0>
   15630:	685e      	ldr	r6, [r3, #4]
   15632:	689c      	ldr	r4, [r3, #8]
   15634:	e7b3      	b.n	1559e <d_substitution+0xae>
   15636:	2000      	movs	r0, #0
   15638:	e7ac      	b.n	15594 <d_substitution+0xa4>
   1563a:	4601      	mov	r1, r0
   1563c:	4628      	mov	r0, r5
   1563e:	f7ff ff3b 	bl	154b8 <d_abi_tags>
   15642:	2800      	cmp	r0, #0
   15644:	f43f af5b 	beq.w	154fe <d_substitution+0xe>
   15648:	6a2b      	ldr	r3, [r5, #32]
   1564a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1564c:	4293      	cmp	r3, r2
   1564e:	dabb      	bge.n	155c8 <d_substitution+0xd8>
   15650:	69e9      	ldr	r1, [r5, #28]
   15652:	1c5a      	adds	r2, r3, #1
   15654:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15658:	622a      	str	r2, [r5, #32]
   1565a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1565e:	69a9      	ldr	r1, [r5, #24]
   15660:	696a      	ldr	r2, [r5, #20]
   15662:	e798      	b.n	15596 <d_substitution+0xa6>
   15664:	0002481c 	.word	0x0002481c

00015668 <d_call_offset>:
   15668:	b538      	push	{r3, r4, r5, lr}
   1566a:	4604      	mov	r4, r0
   1566c:	b929      	cbnz	r1, 1567a <d_call_offset+0x12>
   1566e:	68c3      	ldr	r3, [r0, #12]
   15670:	781a      	ldrb	r2, [r3, #0]
   15672:	b132      	cbz	r2, 15682 <d_call_offset+0x1a>
   15674:	1c5a      	adds	r2, r3, #1
   15676:	60c2      	str	r2, [r0, #12]
   15678:	7819      	ldrb	r1, [r3, #0]
   1567a:	2968      	cmp	r1, #104	; 0x68
   1567c:	d019      	beq.n	156b2 <d_call_offset+0x4a>
   1567e:	2976      	cmp	r1, #118	; 0x76
   15680:	d001      	beq.n	15686 <d_call_offset+0x1e>
   15682:	2000      	movs	r0, #0
   15684:	bd38      	pop	{r3, r4, r5, pc}
   15686:	f104 050c 	add.w	r5, r4, #12
   1568a:	4628      	mov	r0, r5
   1568c:	f7ff fe38 	bl	15300 <d_number.isra.0>
   15690:	68e3      	ldr	r3, [r4, #12]
   15692:	781a      	ldrb	r2, [r3, #0]
   15694:	2a5f      	cmp	r2, #95	; 0x5f
   15696:	d1f4      	bne.n	15682 <d_call_offset+0x1a>
   15698:	3301      	adds	r3, #1
   1569a:	60e3      	str	r3, [r4, #12]
   1569c:	4628      	mov	r0, r5
   1569e:	f7ff fe2f 	bl	15300 <d_number.isra.0>
   156a2:	68e3      	ldr	r3, [r4, #12]
   156a4:	781a      	ldrb	r2, [r3, #0]
   156a6:	2a5f      	cmp	r2, #95	; 0x5f
   156a8:	d1eb      	bne.n	15682 <d_call_offset+0x1a>
   156aa:	3301      	adds	r3, #1
   156ac:	60e3      	str	r3, [r4, #12]
   156ae:	2001      	movs	r0, #1
   156b0:	bd38      	pop	{r3, r4, r5, pc}
   156b2:	f104 000c 	add.w	r0, r4, #12
   156b6:	f7ff fe23 	bl	15300 <d_number.isra.0>
   156ba:	e7f2      	b.n	156a2 <d_call_offset+0x3a>

000156bc <d_lookup_template_argument.isra.6>:
   156bc:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   156c0:	b19b      	cbz	r3, 156ea <d_lookup_template_argument.isra.6+0x2e>
   156c2:	680a      	ldr	r2, [r1, #0]
   156c4:	685b      	ldr	r3, [r3, #4]
   156c6:	2a00      	cmp	r2, #0
   156c8:	689b      	ldr	r3, [r3, #8]
   156ca:	db09      	blt.n	156e0 <d_lookup_template_argument.isra.6+0x24>
   156cc:	b923      	cbnz	r3, 156d8 <d_lookup_template_argument.isra.6+0x1c>
   156ce:	e007      	b.n	156e0 <d_lookup_template_argument.isra.6+0x24>
   156d0:	b142      	cbz	r2, 156e4 <d_lookup_template_argument.isra.6+0x28>
   156d2:	689b      	ldr	r3, [r3, #8]
   156d4:	3a01      	subs	r2, #1
   156d6:	b11b      	cbz	r3, 156e0 <d_lookup_template_argument.isra.6+0x24>
   156d8:	7819      	ldrb	r1, [r3, #0]
   156da:	292f      	cmp	r1, #47	; 0x2f
   156dc:	d0f8      	beq.n	156d0 <d_lookup_template_argument.isra.6+0x14>
   156de:	2300      	movs	r3, #0
   156e0:	4618      	mov	r0, r3
   156e2:	4770      	bx	lr
   156e4:	685b      	ldr	r3, [r3, #4]
   156e6:	4618      	mov	r0, r3
   156e8:	4770      	bx	lr
   156ea:	2201      	movs	r2, #1
   156ec:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   156f0:	e7f6      	b.n	156e0 <d_lookup_template_argument.isra.6+0x24>
   156f2:	bf00      	nop

000156f4 <d_find_pack>:
   156f4:	2900      	cmp	r1, #0
   156f6:	d041      	beq.n	1577c <d_find_pack+0x88>
   156f8:	b538      	push	{r3, r4, r5, lr}
   156fa:	4605      	mov	r5, r0
   156fc:	460c      	mov	r4, r1
   156fe:	7823      	ldrb	r3, [r4, #0]
   15700:	2b4b      	cmp	r3, #75	; 0x4b
   15702:	d827      	bhi.n	15754 <d_find_pack+0x60>
   15704:	e8df f003 	tbb	[pc, r3]
   15708:	2626262e 	.word	0x2626262e
   1570c:	2b2e3026 	.word	0x2b2e3026
   15710:	2626262b 	.word	0x2626262b
   15714:	26262626 	.word	0x26262626
   15718:	26262626 	.word	0x26262626
   1571c:	26262626 	.word	0x26262626
   15720:	2626262e 	.word	0x2626262e
   15724:	26262626 	.word	0x26262626
   15728:	26262626 	.word	0x26262626
   1572c:	2e262626 	.word	0x2e262626
   15730:	26262626 	.word	0x26262626
   15734:	2626262e 	.word	0x2626262e
   15738:	262b2e26 	.word	0x262b2e26
   1573c:	26262626 	.word	0x26262626
   15740:	26262626 	.word	0x26262626
   15744:	26262626 	.word	0x26262626
   15748:	26262e2e 	.word	0x26262e2e
   1574c:	2e2e2e26 	.word	0x2e2e2e26
   15750:	2e2e2626 	.word	0x2e2e2626
   15754:	6861      	ldr	r1, [r4, #4]
   15756:	4628      	mov	r0, r5
   15758:	f7ff ffcc 	bl	156f4 <d_find_pack>
   1575c:	b918      	cbnz	r0, 15766 <d_find_pack+0x72>
   1575e:	68a4      	ldr	r4, [r4, #8]
   15760:	2c00      	cmp	r4, #0
   15762:	d1cc      	bne.n	156fe <d_find_pack+0xa>
   15764:	2000      	movs	r0, #0
   15766:	bd38      	pop	{r3, r4, r5, pc}
   15768:	1d21      	adds	r1, r4, #4
   1576a:	4628      	mov	r0, r5
   1576c:	f7ff ffa6 	bl	156bc <d_lookup_template_argument.isra.6>
   15770:	2800      	cmp	r0, #0
   15772:	d0f7      	beq.n	15764 <d_find_pack+0x70>
   15774:	7803      	ldrb	r3, [r0, #0]
   15776:	2b2f      	cmp	r3, #47	; 0x2f
   15778:	d1f4      	bne.n	15764 <d_find_pack+0x70>
   1577a:	bd38      	pop	{r3, r4, r5, pc}
   1577c:	2000      	movs	r0, #0
   1577e:	4770      	bx	lr

00015780 <d_growable_string_callback_adapter>:
   15780:	b5f0      	push	{r4, r5, r6, r7, lr}
   15782:	4615      	mov	r5, r2
   15784:	6852      	ldr	r2, [r2, #4]
   15786:	68ac      	ldr	r4, [r5, #8]
   15788:	1c4b      	adds	r3, r1, #1
   1578a:	4413      	add	r3, r2
   1578c:	42a3      	cmp	r3, r4
   1578e:	b083      	sub	sp, #12
   15790:	460e      	mov	r6, r1
   15792:	4607      	mov	r7, r0
   15794:	d813      	bhi.n	157be <d_growable_string_callback_adapter+0x3e>
   15796:	68ec      	ldr	r4, [r5, #12]
   15798:	b10c      	cbz	r4, 1579e <d_growable_string_callback_adapter+0x1e>
   1579a:	b003      	add	sp, #12
   1579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1579e:	e895 0009 	ldmia.w	r5, {r0, r3}
   157a2:	4632      	mov	r2, r6
   157a4:	4639      	mov	r1, r7
   157a6:	4418      	add	r0, r3
   157a8:	f009 fb4a 	bl	1ee40 <memcpy>
   157ac:	682b      	ldr	r3, [r5, #0]
   157ae:	686a      	ldr	r2, [r5, #4]
   157b0:	4433      	add	r3, r6
   157b2:	549c      	strb	r4, [r3, r2]
   157b4:	686b      	ldr	r3, [r5, #4]
   157b6:	441e      	add	r6, r3
   157b8:	606e      	str	r6, [r5, #4]
   157ba:	b003      	add	sp, #12
   157bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157be:	68ea      	ldr	r2, [r5, #12]
   157c0:	2a00      	cmp	r2, #0
   157c2:	d1ea      	bne.n	1579a <d_growable_string_callback_adapter+0x1a>
   157c4:	b91c      	cbnz	r4, 157ce <d_growable_string_callback_adapter+0x4e>
   157c6:	2b02      	cmp	r3, #2
   157c8:	f04f 0402 	mov.w	r4, #2
   157cc:	d902      	bls.n	157d4 <d_growable_string_callback_adapter+0x54>
   157ce:	0064      	lsls	r4, r4, #1
   157d0:	42a3      	cmp	r3, r4
   157d2:	d8fc      	bhi.n	157ce <d_growable_string_callback_adapter+0x4e>
   157d4:	4621      	mov	r1, r4
   157d6:	6828      	ldr	r0, [r5, #0]
   157d8:	f009 fcc2 	bl	1f160 <realloc>
   157dc:	b110      	cbz	r0, 157e4 <d_growable_string_callback_adapter+0x64>
   157de:	6028      	str	r0, [r5, #0]
   157e0:	60ac      	str	r4, [r5, #8]
   157e2:	e7d8      	b.n	15796 <d_growable_string_callback_adapter+0x16>
   157e4:	9001      	str	r0, [sp, #4]
   157e6:	6828      	ldr	r0, [r5, #0]
   157e8:	f008 ffda 	bl	1e7a0 <free>
   157ec:	9b01      	ldr	r3, [sp, #4]
   157ee:	602b      	str	r3, [r5, #0]
   157f0:	2201      	movs	r2, #1
   157f2:	606b      	str	r3, [r5, #4]
   157f4:	60ab      	str	r3, [r5, #8]
   157f6:	60ea      	str	r2, [r5, #12]
   157f8:	e7cf      	b.n	1579a <d_growable_string_callback_adapter+0x1a>
   157fa:	bf00      	nop

000157fc <d_append_num>:
   157fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15800:	b088      	sub	sp, #32
   15802:	460a      	mov	r2, r1
   15804:	4604      	mov	r4, r0
   15806:	491b      	ldr	r1, [pc, #108]	; (15874 <d_append_num+0x78>)
   15808:	a801      	add	r0, sp, #4
   1580a:	f009 feb7 	bl	1f57c <sprintf>
   1580e:	a801      	add	r0, sp, #4
   15810:	f00a f856 	bl	1f8c0 <strlen>
   15814:	b350      	cbz	r0, 1586c <d_append_num+0x70>
   15816:	ad01      	add	r5, sp, #4
   15818:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1581c:	182f      	adds	r7, r5, r0
   1581e:	f04f 0800 	mov.w	r8, #0
   15822:	e009      	b.n	15838 <d_append_num+0x3c>
   15824:	460b      	mov	r3, r1
   15826:	42bd      	cmp	r5, r7
   15828:	f101 0101 	add.w	r1, r1, #1
   1582c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   15830:	54e6      	strb	r6, [r4, r3]
   15832:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   15836:	d019      	beq.n	1586c <d_append_num+0x70>
   15838:	29ff      	cmp	r1, #255	; 0xff
   1583a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1583e:	d1f1      	bne.n	15824 <d_append_num+0x28>
   15840:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15844:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   15848:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1584c:	4620      	mov	r0, r4
   1584e:	4798      	blx	r3
   15850:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   15854:	3301      	adds	r3, #1
   15856:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1585a:	2300      	movs	r3, #0
   1585c:	2101      	movs	r1, #1
   1585e:	42bd      	cmp	r5, r7
   15860:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   15864:	54e6      	strb	r6, [r4, r3]
   15866:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1586a:	d1e5      	bne.n	15838 <d_append_num+0x3c>
   1586c:	b008      	add	sp, #32
   1586e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15872:	bf00      	nop
   15874:	00024fd8 	.word	0x00024fd8

00015878 <d_exprlist>:
   15878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1587c:	68c3      	ldr	r3, [r0, #12]
   1587e:	781d      	ldrb	r5, [r3, #0]
   15880:	b083      	sub	sp, #12
   15882:	2200      	movs	r2, #0
   15884:	428d      	cmp	r5, r1
   15886:	4604      	mov	r4, r0
   15888:	9201      	str	r2, [sp, #4]
   1588a:	f000 81c6 	beq.w	15c1a <d_exprlist+0x3a2>
   1588e:	4688      	mov	r8, r1
   15890:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 15d30 <d_exprlist+0x4b8>
   15894:	ae01      	add	r6, sp, #4
   15896:	e023      	b.n	158e0 <d_exprlist+0x68>
   15898:	2a66      	cmp	r2, #102	; 0x66
   1589a:	d04c      	beq.n	15936 <d_exprlist+0xbe>
   1589c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   158a0:	2909      	cmp	r1, #9
   158a2:	f200 8217 	bhi.w	15cd4 <d_exprlist+0x45c>
   158a6:	4620      	mov	r0, r4
   158a8:	f001 fb10 	bl	16ecc <d_unqualified_name>
   158ac:	4605      	mov	r5, r0
   158ae:	2800      	cmp	r0, #0
   158b0:	f000 8170 	beq.w	15b94 <d_exprlist+0x31c>
   158b4:	68e3      	ldr	r3, [r4, #12]
   158b6:	781b      	ldrb	r3, [r3, #0]
   158b8:	2b49      	cmp	r3, #73	; 0x49
   158ba:	f000 8092 	beq.w	159e2 <d_exprlist+0x16a>
   158be:	6367      	str	r7, [r4, #52]	; 0x34
   158c0:	462a      	mov	r2, r5
   158c2:	2300      	movs	r3, #0
   158c4:	212e      	movs	r1, #46	; 0x2e
   158c6:	4620      	mov	r0, r4
   158c8:	f7ff fbc8 	bl	1505c <d_make_comp>
   158cc:	6030      	str	r0, [r6, #0]
   158ce:	2800      	cmp	r0, #0
   158d0:	d05b      	beq.n	1598a <d_exprlist+0x112>
   158d2:	68e3      	ldr	r3, [r4, #12]
   158d4:	781a      	ldrb	r2, [r3, #0]
   158d6:	4542      	cmp	r2, r8
   158d8:	f100 0608 	add.w	r6, r0, #8
   158dc:	f000 8107 	beq.w	15aee <d_exprlist+0x276>
   158e0:	2501      	movs	r5, #1
   158e2:	6b67      	ldr	r7, [r4, #52]	; 0x34
   158e4:	6365      	str	r5, [r4, #52]	; 0x34
   158e6:	781a      	ldrb	r2, [r3, #0]
   158e8:	2a4c      	cmp	r2, #76	; 0x4c
   158ea:	d047      	beq.n	1597c <d_exprlist+0x104>
   158ec:	2a54      	cmp	r2, #84	; 0x54
   158ee:	d051      	beq.n	15994 <d_exprlist+0x11c>
   158f0:	2a73      	cmp	r2, #115	; 0x73
   158f2:	d1d1      	bne.n	15898 <d_exprlist+0x20>
   158f4:	785a      	ldrb	r2, [r3, #1]
   158f6:	2a72      	cmp	r2, #114	; 0x72
   158f8:	f000 80e2 	beq.w	15ac0 <d_exprlist+0x248>
   158fc:	2a70      	cmp	r2, #112	; 0x70
   158fe:	f000 80fd 	beq.w	15afc <d_exprlist+0x284>
   15902:	4620      	mov	r0, r4
   15904:	f001 fa22 	bl	16d4c <d_operator_name>
   15908:	4605      	mov	r5, r0
   1590a:	2800      	cmp	r0, #0
   1590c:	f000 8142 	beq.w	15b94 <d_exprlist+0x31c>
   15910:	782b      	ldrb	r3, [r5, #0]
   15912:	2b31      	cmp	r3, #49	; 0x31
   15914:	d043      	beq.n	1599e <d_exprlist+0x126>
   15916:	2b32      	cmp	r3, #50	; 0x32
   15918:	d05c      	beq.n	159d4 <d_exprlist+0x15c>
   1591a:	2b33      	cmp	r3, #51	; 0x33
   1591c:	d17b      	bne.n	15a16 <d_exprlist+0x19e>
   1591e:	68e3      	ldr	r3, [r4, #12]
   15920:	781a      	ldrb	r2, [r3, #0]
   15922:	2a5f      	cmp	r2, #95	; 0x5f
   15924:	f040 80c1 	bne.w	15aaa <d_exprlist+0x232>
   15928:	3301      	adds	r3, #1
   1592a:	60e3      	str	r3, [r4, #12]
   1592c:	2145      	movs	r1, #69	; 0x45
   1592e:	4620      	mov	r0, r4
   15930:	f7ff ffa2 	bl	15878 <d_exprlist>
   15934:	e0bc      	b.n	15ab0 <d_exprlist+0x238>
   15936:	785a      	ldrb	r2, [r3, #1]
   15938:	2a70      	cmp	r2, #112	; 0x70
   1593a:	d1e2      	bne.n	15902 <d_exprlist+0x8a>
   1593c:	1c9a      	adds	r2, r3, #2
   1593e:	60e2      	str	r2, [r4, #12]
   15940:	789a      	ldrb	r2, [r3, #2]
   15942:	2a54      	cmp	r2, #84	; 0x54
   15944:	d069      	beq.n	15a1a <d_exprlist+0x1a2>
   15946:	4620      	mov	r0, r4
   15948:	f7ff fd1c 	bl	15384 <d_compact_number>
   1594c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   15950:	4298      	cmp	r0, r3
   15952:	d060      	beq.n	15a16 <d_exprlist+0x19e>
   15954:	1c43      	adds	r3, r0, #1
   15956:	d05e      	beq.n	15a16 <d_exprlist+0x19e>
   15958:	3001      	adds	r0, #1
   1595a:	6963      	ldr	r3, [r4, #20]
   1595c:	69a2      	ldr	r2, [r4, #24]
   1595e:	4293      	cmp	r3, r2
   15960:	da59      	bge.n	15a16 <d_exprlist+0x19e>
   15962:	6922      	ldr	r2, [r4, #16]
   15964:	1c59      	adds	r1, r3, #1
   15966:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1596a:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   1596e:	6161      	str	r1, [r4, #20]
   15970:	d051      	beq.n	15a16 <d_exprlist+0x19e>
   15972:	2106      	movs	r1, #6
   15974:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   15978:	6068      	str	r0, [r5, #4]
   1597a:	e7a0      	b.n	158be <d_exprlist+0x46>
   1597c:	4620      	mov	r0, r4
   1597e:	f001 fef3 	bl	17768 <d_expr_primary>
   15982:	4605      	mov	r5, r0
   15984:	6367      	str	r7, [r4, #52]	; 0x34
   15986:	2d00      	cmp	r5, #0
   15988:	d19a      	bne.n	158c0 <d_exprlist+0x48>
   1598a:	2500      	movs	r5, #0
   1598c:	4628      	mov	r0, r5
   1598e:	b003      	add	sp, #12
   15990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15994:	4620      	mov	r0, r4
   15996:	f7ff fd11 	bl	153bc <d_template_param>
   1599a:	4605      	mov	r5, r0
   1599c:	e7f2      	b.n	15984 <d_exprlist+0x10c>
   1599e:	f8d5 b004 	ldr.w	fp, [r5, #4]
   159a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   159a4:	f8db 2008 	ldr.w	r2, [fp, #8]
   159a8:	f8db a000 	ldr.w	sl, [fp]
   159ac:	3a02      	subs	r2, #2
   159ae:	4413      	add	r3, r2
   159b0:	6323      	str	r3, [r4, #48]	; 0x30
   159b2:	4650      	mov	r0, sl
   159b4:	4649      	mov	r1, r9
   159b6:	f009 fe17 	bl	1f5e8 <strcmp>
   159ba:	2800      	cmp	r0, #0
   159bc:	f000 80e6 	beq.w	15b8c <d_exprlist+0x314>
   159c0:	f8db 300c 	ldr.w	r3, [fp, #12]
   159c4:	2b03      	cmp	r3, #3
   159c6:	d826      	bhi.n	15a16 <d_exprlist+0x19e>
   159c8:	e8df f013 	tbh	[pc, r3, lsl #1]
   159cc:	0135002b 	.word	0x0135002b
   159d0:	00a50033 	.word	0x00a50033
   159d4:	686b      	ldr	r3, [r5, #4]
   159d6:	2b03      	cmp	r3, #3
   159d8:	d81d      	bhi.n	15a16 <d_exprlist+0x19e>
   159da:	e8df f003 	tbb	[pc, r3]
   159de:	6622      	.short	0x6622
   159e0:	1c1c      	.short	0x1c1c
   159e2:	4620      	mov	r0, r4
   159e4:	f000 fc04 	bl	161f0 <d_template_args>
   159e8:	462a      	mov	r2, r5
   159ea:	4603      	mov	r3, r0
   159ec:	2104      	movs	r1, #4
   159ee:	4620      	mov	r0, r4
   159f0:	f7ff fb34 	bl	1505c <d_make_comp>
   159f4:	4605      	mov	r5, r0
   159f6:	e7c5      	b.n	15984 <d_exprlist+0x10c>
   159f8:	2a74      	cmp	r2, #116	; 0x74
   159fa:	d182      	bne.n	15902 <d_exprlist+0x8a>
   159fc:	785b      	ldrb	r3, [r3, #1]
   159fe:	2b6c      	cmp	r3, #108	; 0x6c
   15a00:	f47f af7f 	bne.w	15902 <d_exprlist+0x8a>
   15a04:	4620      	mov	r0, r4
   15a06:	f000 fdb9 	bl	1657c <d_type>
   15a0a:	68e3      	ldr	r3, [r4, #12]
   15a0c:	785a      	ldrb	r2, [r3, #1]
   15a0e:	4605      	mov	r5, r0
   15a10:	2a00      	cmp	r2, #0
   15a12:	f040 8169 	bne.w	15ce8 <d_exprlist+0x470>
   15a16:	6367      	str	r7, [r4, #52]	; 0x34
   15a18:	e7b7      	b.n	1598a <d_exprlist+0x112>
   15a1a:	3303      	adds	r3, #3
   15a1c:	60e3      	str	r3, [r4, #12]
   15a1e:	2000      	movs	r0, #0
   15a20:	e79b      	b.n	1595a <d_exprlist+0xe2>
   15a22:	462a      	mov	r2, r5
   15a24:	2300      	movs	r3, #0
   15a26:	2135      	movs	r1, #53	; 0x35
   15a28:	4620      	mov	r0, r4
   15a2a:	f7ff fb17 	bl	1505c <d_make_comp>
   15a2e:	4605      	mov	r5, r0
   15a30:	e7a8      	b.n	15984 <d_exprlist+0x10c>
   15a32:	f1ba 0f00 	cmp.w	sl, #0
   15a36:	d0ee      	beq.n	15a16 <d_exprlist+0x19e>
   15a38:	686b      	ldr	r3, [r5, #4]
   15a3a:	681b      	ldr	r3, [r3, #0]
   15a3c:	785a      	ldrb	r2, [r3, #1]
   15a3e:	2a63      	cmp	r2, #99	; 0x63
   15a40:	f000 80d2 	beq.w	15be8 <d_exprlist+0x370>
   15a44:	f89a 3000 	ldrb.w	r3, [sl]
   15a48:	2b66      	cmp	r3, #102	; 0x66
   15a4a:	f000 80ef 	beq.w	15c2c <d_exprlist+0x3b4>
   15a4e:	4620      	mov	r0, r4
   15a50:	f000 f970 	bl	15d34 <d_expression_1>
   15a54:	4683      	mov	fp, r0
   15a56:	49b1      	ldr	r1, [pc, #708]	; (15d1c <d_exprlist+0x4a4>)
   15a58:	4650      	mov	r0, sl
   15a5a:	f009 fdc5 	bl	1f5e8 <strcmp>
   15a5e:	2800      	cmp	r0, #0
   15a60:	f000 809d 	beq.w	15b9e <d_exprlist+0x326>
   15a64:	49ae      	ldr	r1, [pc, #696]	; (15d20 <d_exprlist+0x4a8>)
   15a66:	4650      	mov	r0, sl
   15a68:	f009 fdbe 	bl	1f5e8 <strcmp>
   15a6c:	b130      	cbz	r0, 15a7c <d_exprlist+0x204>
   15a6e:	4650      	mov	r0, sl
   15a70:	49ac      	ldr	r1, [pc, #688]	; (15d24 <d_exprlist+0x4ac>)
   15a72:	f009 fdb9 	bl	1f5e8 <strcmp>
   15a76:	2800      	cmp	r0, #0
   15a78:	f040 8083 	bne.w	15b82 <d_exprlist+0x30a>
   15a7c:	4620      	mov	r0, r4
   15a7e:	f001 fa25 	bl	16ecc <d_unqualified_name>
   15a82:	68e3      	ldr	r3, [r4, #12]
   15a84:	781b      	ldrb	r3, [r3, #0]
   15a86:	2b49      	cmp	r3, #73	; 0x49
   15a88:	4682      	mov	sl, r0
   15a8a:	f000 80e9 	beq.w	15c60 <d_exprlist+0x3e8>
   15a8e:	4653      	mov	r3, sl
   15a90:	465a      	mov	r2, fp
   15a92:	2138      	movs	r1, #56	; 0x38
   15a94:	4620      	mov	r0, r4
   15a96:	f7ff fae1 	bl	1505c <d_make_comp>
   15a9a:	462a      	mov	r2, r5
   15a9c:	4603      	mov	r3, r0
   15a9e:	2137      	movs	r1, #55	; 0x37
   15aa0:	4620      	mov	r0, r4
   15aa2:	f7ff fadb 	bl	1505c <d_make_comp>
   15aa6:	4605      	mov	r5, r0
   15aa8:	e76c      	b.n	15984 <d_exprlist+0x10c>
   15aaa:	4620      	mov	r0, r4
   15aac:	f000 f942 	bl	15d34 <d_expression_1>
   15ab0:	4603      	mov	r3, r0
   15ab2:	462a      	mov	r2, r5
   15ab4:	2136      	movs	r1, #54	; 0x36
   15ab6:	4620      	mov	r0, r4
   15ab8:	f7ff fad0 	bl	1505c <d_make_comp>
   15abc:	4605      	mov	r5, r0
   15abe:	e761      	b.n	15984 <d_exprlist+0x10c>
   15ac0:	3302      	adds	r3, #2
   15ac2:	60e3      	str	r3, [r4, #12]
   15ac4:	4620      	mov	r0, r4
   15ac6:	f000 fd59 	bl	1657c <d_type>
   15aca:	4682      	mov	sl, r0
   15acc:	4620      	mov	r0, r4
   15ace:	f001 f9fd 	bl	16ecc <d_unqualified_name>
   15ad2:	68e3      	ldr	r3, [r4, #12]
   15ad4:	781b      	ldrb	r3, [r3, #0]
   15ad6:	2b49      	cmp	r3, #73	; 0x49
   15ad8:	4683      	mov	fp, r0
   15ada:	f000 8093 	beq.w	15c04 <d_exprlist+0x38c>
   15ade:	4603      	mov	r3, r0
   15ae0:	4629      	mov	r1, r5
   15ae2:	4652      	mov	r2, sl
   15ae4:	4620      	mov	r0, r4
   15ae6:	f7ff fab9 	bl	1505c <d_make_comp>
   15aea:	4605      	mov	r5, r0
   15aec:	e74a      	b.n	15984 <d_exprlist+0x10c>
   15aee:	9d01      	ldr	r5, [sp, #4]
   15af0:	3301      	adds	r3, #1
   15af2:	4628      	mov	r0, r5
   15af4:	60e3      	str	r3, [r4, #12]
   15af6:	b003      	add	sp, #12
   15af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15afc:	3302      	adds	r3, #2
   15afe:	60e3      	str	r3, [r4, #12]
   15b00:	4620      	mov	r0, r4
   15b02:	f000 f917 	bl	15d34 <d_expression_1>
   15b06:	2300      	movs	r3, #0
   15b08:	4602      	mov	r2, r0
   15b0a:	214a      	movs	r1, #74	; 0x4a
   15b0c:	4620      	mov	r0, r4
   15b0e:	f7ff faa5 	bl	1505c <d_make_comp>
   15b12:	4605      	mov	r5, r0
   15b14:	e736      	b.n	15984 <d_exprlist+0x10c>
   15b16:	f1ba 0f00 	cmp.w	sl, #0
   15b1a:	f43f af7c 	beq.w	15a16 <d_exprlist+0x19e>
   15b1e:	4982      	ldr	r1, [pc, #520]	; (15d28 <d_exprlist+0x4b0>)
   15b20:	4650      	mov	r0, sl
   15b22:	f009 fd61 	bl	1f5e8 <strcmp>
   15b26:	2800      	cmp	r0, #0
   15b28:	d03f      	beq.n	15baa <d_exprlist+0x332>
   15b2a:	f89a 3000 	ldrb.w	r3, [sl]
   15b2e:	2b66      	cmp	r3, #102	; 0x66
   15b30:	f000 80bd 	beq.w	15cae <d_exprlist+0x436>
   15b34:	2b6e      	cmp	r3, #110	; 0x6e
   15b36:	f47f af6e 	bne.w	15a16 <d_exprlist+0x19e>
   15b3a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   15b3e:	2b77      	cmp	r3, #119	; 0x77
   15b40:	d002      	beq.n	15b48 <d_exprlist+0x2d0>
   15b42:	2b61      	cmp	r3, #97	; 0x61
   15b44:	f47f af67 	bne.w	15a16 <d_exprlist+0x19e>
   15b48:	215f      	movs	r1, #95	; 0x5f
   15b4a:	4620      	mov	r0, r4
   15b4c:	f7ff fe94 	bl	15878 <d_exprlist>
   15b50:	4682      	mov	sl, r0
   15b52:	4620      	mov	r0, r4
   15b54:	f000 fd12 	bl	1657c <d_type>
   15b58:	68e3      	ldr	r3, [r4, #12]
   15b5a:	781a      	ldrb	r2, [r3, #0]
   15b5c:	2a45      	cmp	r2, #69	; 0x45
   15b5e:	4683      	mov	fp, r0
   15b60:	f000 80a1 	beq.w	15ca6 <d_exprlist+0x42e>
   15b64:	2a70      	cmp	r2, #112	; 0x70
   15b66:	f000 80a6 	beq.w	15cb6 <d_exprlist+0x43e>
   15b6a:	2a69      	cmp	r2, #105	; 0x69
   15b6c:	f47f af53 	bne.w	15a16 <d_exprlist+0x19e>
   15b70:	785b      	ldrb	r3, [r3, #1]
   15b72:	2b6c      	cmp	r3, #108	; 0x6c
   15b74:	f47f af4f 	bne.w	15a16 <d_exprlist+0x19e>
   15b78:	4620      	mov	r0, r4
   15b7a:	f000 f8db 	bl	15d34 <d_expression_1>
   15b7e:	4603      	mov	r3, r0
   15b80:	e01f      	b.n	15bc2 <d_exprlist+0x34a>
   15b82:	4620      	mov	r0, r4
   15b84:	f000 f8d6 	bl	15d34 <d_expression_1>
   15b88:	4682      	mov	sl, r0
   15b8a:	e780      	b.n	15a8e <d_exprlist+0x216>
   15b8c:	4620      	mov	r0, r4
   15b8e:	f000 fcf5 	bl	1657c <d_type>
   15b92:	e78d      	b.n	15ab0 <d_exprlist+0x238>
   15b94:	4628      	mov	r0, r5
   15b96:	6367      	str	r7, [r4, #52]	; 0x34
   15b98:	b003      	add	sp, #12
   15b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b9e:	2145      	movs	r1, #69	; 0x45
   15ba0:	4620      	mov	r0, r4
   15ba2:	f7ff fe69 	bl	15878 <d_exprlist>
   15ba6:	4682      	mov	sl, r0
   15ba8:	e771      	b.n	15a8e <d_exprlist+0x216>
   15baa:	4620      	mov	r0, r4
   15bac:	f000 f8c2 	bl	15d34 <d_expression_1>
   15bb0:	4682      	mov	sl, r0
   15bb2:	4620      	mov	r0, r4
   15bb4:	f000 f8be 	bl	15d34 <d_expression_1>
   15bb8:	4683      	mov	fp, r0
   15bba:	4620      	mov	r0, r4
   15bbc:	f000 f8ba 	bl	15d34 <d_expression_1>
   15bc0:	4603      	mov	r3, r0
   15bc2:	465a      	mov	r2, fp
   15bc4:	213b      	movs	r1, #59	; 0x3b
   15bc6:	4620      	mov	r0, r4
   15bc8:	f7ff fa48 	bl	1505c <d_make_comp>
   15bcc:	4652      	mov	r2, sl
   15bce:	4603      	mov	r3, r0
   15bd0:	213a      	movs	r1, #58	; 0x3a
   15bd2:	4620      	mov	r0, r4
   15bd4:	f7ff fa42 	bl	1505c <d_make_comp>
   15bd8:	462a      	mov	r2, r5
   15bda:	4603      	mov	r3, r0
   15bdc:	2139      	movs	r1, #57	; 0x39
   15bde:	4620      	mov	r0, r4
   15be0:	f7ff fa3c 	bl	1505c <d_make_comp>
   15be4:	4605      	mov	r5, r0
   15be6:	e6cd      	b.n	15984 <d_exprlist+0x10c>
   15be8:	781b      	ldrb	r3, [r3, #0]
   15bea:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   15bee:	2a01      	cmp	r2, #1
   15bf0:	d903      	bls.n	15bfa <d_exprlist+0x382>
   15bf2:	3b72      	subs	r3, #114	; 0x72
   15bf4:	2b01      	cmp	r3, #1
   15bf6:	f63f af25 	bhi.w	15a44 <d_exprlist+0x1cc>
   15bfa:	4620      	mov	r0, r4
   15bfc:	f000 fcbe 	bl	1657c <d_type>
   15c00:	4683      	mov	fp, r0
   15c02:	e728      	b.n	15a56 <d_exprlist+0x1de>
   15c04:	4620      	mov	r0, r4
   15c06:	f000 faf3 	bl	161f0 <d_template_args>
   15c0a:	465a      	mov	r2, fp
   15c0c:	4603      	mov	r3, r0
   15c0e:	2104      	movs	r1, #4
   15c10:	4620      	mov	r0, r4
   15c12:	f7ff fa23 	bl	1505c <d_make_comp>
   15c16:	4603      	mov	r3, r0
   15c18:	e762      	b.n	15ae0 <d_exprlist+0x268>
   15c1a:	3301      	adds	r3, #1
   15c1c:	60c3      	str	r3, [r0, #12]
   15c1e:	212e      	movs	r1, #46	; 0x2e
   15c20:	4613      	mov	r3, r2
   15c22:	b003      	add	sp, #12
   15c24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c28:	f7ff ba18 	b.w	1505c <d_make_comp>
   15c2c:	4620      	mov	r0, r4
   15c2e:	f001 f88d 	bl	16d4c <d_operator_name>
   15c32:	4683      	mov	fp, r0
   15c34:	e70f      	b.n	15a56 <d_exprlist+0x1de>
   15c36:	f1ba 0f00 	cmp.w	sl, #0
   15c3a:	f43f af36 	beq.w	15aaa <d_exprlist+0x232>
   15c3e:	f89a 3000 	ldrb.w	r3, [sl]
   15c42:	2b70      	cmp	r3, #112	; 0x70
   15c44:	d017      	beq.n	15c76 <d_exprlist+0x3fe>
   15c46:	2b6d      	cmp	r3, #109	; 0x6d
   15c48:	d015      	beq.n	15c76 <d_exprlist+0x3fe>
   15c4a:	4650      	mov	r0, sl
   15c4c:	4937      	ldr	r1, [pc, #220]	; (15d2c <d_exprlist+0x4b4>)
   15c4e:	f009 fccb 	bl	1f5e8 <strcmp>
   15c52:	2800      	cmp	r0, #0
   15c54:	f47f af29 	bne.w	15aaa <d_exprlist+0x232>
   15c58:	4620      	mov	r0, r4
   15c5a:	f000 fa65 	bl	16128 <d_template_args_1>
   15c5e:	e727      	b.n	15ab0 <d_exprlist+0x238>
   15c60:	4620      	mov	r0, r4
   15c62:	f000 fac5 	bl	161f0 <d_template_args>
   15c66:	4652      	mov	r2, sl
   15c68:	4603      	mov	r3, r0
   15c6a:	2104      	movs	r1, #4
   15c6c:	4620      	mov	r0, r4
   15c6e:	f7ff f9f5 	bl	1505c <d_make_comp>
   15c72:	4682      	mov	sl, r0
   15c74:	e70b      	b.n	15a8e <d_exprlist+0x216>
   15c76:	f89a 2001 	ldrb.w	r2, [sl, #1]
   15c7a:	429a      	cmp	r2, r3
   15c7c:	d1e5      	bne.n	15c4a <d_exprlist+0x3d2>
   15c7e:	68e3      	ldr	r3, [r4, #12]
   15c80:	781a      	ldrb	r2, [r3, #0]
   15c82:	2a5f      	cmp	r2, #95	; 0x5f
   15c84:	d023      	beq.n	15cce <d_exprlist+0x456>
   15c86:	4650      	mov	r0, sl
   15c88:	4928      	ldr	r1, [pc, #160]	; (15d2c <d_exprlist+0x4b4>)
   15c8a:	f009 fcad 	bl	1f5e8 <strcmp>
   15c8e:	2800      	cmp	r0, #0
   15c90:	d03f      	beq.n	15d12 <d_exprlist+0x49a>
   15c92:	4620      	mov	r0, r4
   15c94:	f000 f84e 	bl	15d34 <d_expression_1>
   15c98:	4603      	mov	r3, r0
   15c9a:	461a      	mov	r2, r3
   15c9c:	2138      	movs	r1, #56	; 0x38
   15c9e:	4620      	mov	r0, r4
   15ca0:	f7ff f9dc 	bl	1505c <d_make_comp>
   15ca4:	e704      	b.n	15ab0 <d_exprlist+0x238>
   15ca6:	3301      	adds	r3, #1
   15ca8:	60e3      	str	r3, [r4, #12]
   15caa:	2300      	movs	r3, #0
   15cac:	e789      	b.n	15bc2 <d_exprlist+0x34a>
   15cae:	4620      	mov	r0, r4
   15cb0:	f001 f84c 	bl	16d4c <d_operator_name>
   15cb4:	e77c      	b.n	15bb0 <d_exprlist+0x338>
   15cb6:	785a      	ldrb	r2, [r3, #1]
   15cb8:	2a69      	cmp	r2, #105	; 0x69
   15cba:	f47f aeac 	bne.w	15a16 <d_exprlist+0x19e>
   15cbe:	3302      	adds	r3, #2
   15cc0:	60e3      	str	r3, [r4, #12]
   15cc2:	2145      	movs	r1, #69	; 0x45
   15cc4:	4620      	mov	r0, r4
   15cc6:	f7ff fdd7 	bl	15878 <d_exprlist>
   15cca:	4603      	mov	r3, r0
   15ccc:	e779      	b.n	15bc2 <d_exprlist+0x34a>
   15cce:	3301      	adds	r3, #1
   15cd0:	60e3      	str	r3, [r4, #12]
   15cd2:	e7ba      	b.n	15c4a <d_exprlist+0x3d2>
   15cd4:	2a6f      	cmp	r2, #111	; 0x6f
   15cd6:	d015      	beq.n	15d04 <d_exprlist+0x48c>
   15cd8:	2a69      	cmp	r2, #105	; 0x69
   15cda:	f47f ae8d 	bne.w	159f8 <d_exprlist+0x180>
   15cde:	785a      	ldrb	r2, [r3, #1]
   15ce0:	2a6c      	cmp	r2, #108	; 0x6c
   15ce2:	f47f ae0e 	bne.w	15902 <d_exprlist+0x8a>
   15ce6:	2500      	movs	r5, #0
   15ce8:	3302      	adds	r3, #2
   15cea:	60e3      	str	r3, [r4, #12]
   15cec:	2145      	movs	r1, #69	; 0x45
   15cee:	4620      	mov	r0, r4
   15cf0:	f7ff fdc2 	bl	15878 <d_exprlist>
   15cf4:	462a      	mov	r2, r5
   15cf6:	4603      	mov	r3, r0
   15cf8:	2130      	movs	r1, #48	; 0x30
   15cfa:	4620      	mov	r0, r4
   15cfc:	f7ff f9ae 	bl	1505c <d_make_comp>
   15d00:	4605      	mov	r5, r0
   15d02:	e63f      	b.n	15984 <d_exprlist+0x10c>
   15d04:	785a      	ldrb	r2, [r3, #1]
   15d06:	2a6e      	cmp	r2, #110	; 0x6e
   15d08:	f47f adfb 	bne.w	15902 <d_exprlist+0x8a>
   15d0c:	3302      	adds	r3, #2
   15d0e:	60e3      	str	r3, [r4, #12]
   15d10:	e5c9      	b.n	158a6 <d_exprlist+0x2e>
   15d12:	4620      	mov	r0, r4
   15d14:	f000 fa08 	bl	16128 <d_template_args_1>
   15d18:	4603      	mov	r3, r0
   15d1a:	e7be      	b.n	15c9a <d_exprlist+0x422>
   15d1c:	00024fe0 	.word	0x00024fe0
   15d20:	00024fe4 	.word	0x00024fe4
   15d24:	00024fe8 	.word	0x00024fe8
   15d28:	00024fec 	.word	0x00024fec
   15d2c:	00024fdc 	.word	0x00024fdc
   15d30:	000254e0 	.word	0x000254e0

00015d34 <d_expression_1>:
   15d34:	68c1      	ldr	r1, [r0, #12]
   15d36:	780b      	ldrb	r3, [r1, #0]
   15d38:	2b4c      	cmp	r3, #76	; 0x4c
   15d3a:	f000 8087 	beq.w	15e4c <d_expression_1+0x118>
   15d3e:	2b54      	cmp	r3, #84	; 0x54
   15d40:	f000 8086 	beq.w	15e50 <d_expression_1+0x11c>
   15d44:	2b73      	cmp	r3, #115	; 0x73
   15d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d4a:	4604      	mov	r4, r0
   15d4c:	d037      	beq.n	15dbe <d_expression_1+0x8a>
   15d4e:	2b66      	cmp	r3, #102	; 0x66
   15d50:	d012      	beq.n	15d78 <d_expression_1+0x44>
   15d52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15d56:	2a09      	cmp	r2, #9
   15d58:	f200 81b8 	bhi.w	160cc <d_expression_1+0x398>
   15d5c:	4620      	mov	r0, r4
   15d5e:	f001 f8b5 	bl	16ecc <d_unqualified_name>
   15d62:	4605      	mov	r5, r0
   15d64:	2800      	cmp	r0, #0
   15d66:	d06d      	beq.n	15e44 <d_expression_1+0x110>
   15d68:	68e3      	ldr	r3, [r4, #12]
   15d6a:	781b      	ldrb	r3, [r3, #0]
   15d6c:	2b49      	cmp	r3, #73	; 0x49
   15d6e:	f000 8088 	beq.w	15e82 <d_expression_1+0x14e>
   15d72:	4628      	mov	r0, r5
   15d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d78:	784b      	ldrb	r3, [r1, #1]
   15d7a:	2b70      	cmp	r3, #112	; 0x70
   15d7c:	d039      	beq.n	15df2 <d_expression_1+0xbe>
   15d7e:	4620      	mov	r0, r4
   15d80:	f000 ffe4 	bl	16d4c <d_operator_name>
   15d84:	4605      	mov	r5, r0
   15d86:	2800      	cmp	r0, #0
   15d88:	d05c      	beq.n	15e44 <d_expression_1+0x110>
   15d8a:	7803      	ldrb	r3, [r0, #0]
   15d8c:	2b31      	cmp	r3, #49	; 0x31
   15d8e:	d061      	beq.n	15e54 <d_expression_1+0x120>
   15d90:	2b32      	cmp	r3, #50	; 0x32
   15d92:	d025      	beq.n	15de0 <d_expression_1+0xac>
   15d94:	2b33      	cmp	r3, #51	; 0x33
   15d96:	d155      	bne.n	15e44 <d_expression_1+0x110>
   15d98:	68e3      	ldr	r3, [r4, #12]
   15d9a:	781a      	ldrb	r2, [r3, #0]
   15d9c:	2a5f      	cmp	r2, #95	; 0x5f
   15d9e:	f040 81b4 	bne.w	1610a <d_expression_1+0x3d6>
   15da2:	3301      	adds	r3, #1
   15da4:	60e3      	str	r3, [r4, #12]
   15da6:	2145      	movs	r1, #69	; 0x45
   15da8:	4620      	mov	r0, r4
   15daa:	f7ff fd65 	bl	15878 <d_exprlist>
   15dae:	4603      	mov	r3, r0
   15db0:	462a      	mov	r2, r5
   15db2:	4620      	mov	r0, r4
   15db4:	2136      	movs	r1, #54	; 0x36
   15db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15dba:	f7ff b94f 	b.w	1505c <d_make_comp>
   15dbe:	784b      	ldrb	r3, [r1, #1]
   15dc0:	2b72      	cmp	r3, #114	; 0x72
   15dc2:	d069      	beq.n	15e98 <d_expression_1+0x164>
   15dc4:	2b70      	cmp	r3, #112	; 0x70
   15dc6:	d1da      	bne.n	15d7e <d_expression_1+0x4a>
   15dc8:	3102      	adds	r1, #2
   15dca:	60c1      	str	r1, [r0, #12]
   15dcc:	f7ff ffb2 	bl	15d34 <d_expression_1>
   15dd0:	2300      	movs	r3, #0
   15dd2:	4602      	mov	r2, r0
   15dd4:	214a      	movs	r1, #74	; 0x4a
   15dd6:	4620      	mov	r0, r4
   15dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15ddc:	f7ff b93e 	b.w	1505c <d_make_comp>
   15de0:	6843      	ldr	r3, [r0, #4]
   15de2:	2b03      	cmp	r3, #3
   15de4:	d82e      	bhi.n	15e44 <d_expression_1+0x110>
   15de6:	e8df f013 	tbh	[pc, r3, lsl #1]
   15dea:	0071      	.short	0x0071
   15dec:	002d0190 	.word	0x002d0190
   15df0:	002d      	.short	0x002d
   15df2:	1c8b      	adds	r3, r1, #2
   15df4:	60c3      	str	r3, [r0, #12]
   15df6:	788b      	ldrb	r3, [r1, #2]
   15df8:	2b54      	cmp	r3, #84	; 0x54
   15dfa:	d063      	beq.n	15ec4 <d_expression_1+0x190>
   15dfc:	f7ff fac2 	bl	15384 <d_compact_number>
   15e00:	43c3      	mvns	r3, r0
   15e02:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   15e06:	d01d      	beq.n	15e44 <d_expression_1+0x110>
   15e08:	3001      	adds	r0, #1
   15e0a:	6963      	ldr	r3, [r4, #20]
   15e0c:	69a2      	ldr	r2, [r4, #24]
   15e0e:	4293      	cmp	r3, r2
   15e10:	da18      	bge.n	15e44 <d_expression_1+0x110>
   15e12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15e16:	6921      	ldr	r1, [r4, #16]
   15e18:	0092      	lsls	r2, r2, #2
   15e1a:	3301      	adds	r3, #1
   15e1c:	188d      	adds	r5, r1, r2
   15e1e:	6163      	str	r3, [r4, #20]
   15e20:	d0a7      	beq.n	15d72 <d_expression_1+0x3e>
   15e22:	2306      	movs	r3, #6
   15e24:	548b      	strb	r3, [r1, r2]
   15e26:	6068      	str	r0, [r5, #4]
   15e28:	e7a3      	b.n	15d72 <d_expression_1+0x3e>
   15e2a:	2b74      	cmp	r3, #116	; 0x74
   15e2c:	d1a7      	bne.n	15d7e <d_expression_1+0x4a>
   15e2e:	784b      	ldrb	r3, [r1, #1]
   15e30:	2b6c      	cmp	r3, #108	; 0x6c
   15e32:	d1a4      	bne.n	15d7e <d_expression_1+0x4a>
   15e34:	f000 fba2 	bl	1657c <d_type>
   15e38:	68e1      	ldr	r1, [r4, #12]
   15e3a:	784b      	ldrb	r3, [r1, #1]
   15e3c:	4605      	mov	r5, r0
   15e3e:	2b00      	cmp	r3, #0
   15e40:	f040 814e 	bne.w	160e0 <d_expression_1+0x3ac>
   15e44:	2500      	movs	r5, #0
   15e46:	4628      	mov	r0, r5
   15e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e4c:	f001 bc8c 	b.w	17768 <d_expr_primary>
   15e50:	f7ff bab4 	b.w	153bc <d_template_param>
   15e54:	6847      	ldr	r7, [r0, #4]
   15e56:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15e58:	68ba      	ldr	r2, [r7, #8]
   15e5a:	683e      	ldr	r6, [r7, #0]
   15e5c:	49ac      	ldr	r1, [pc, #688]	; (16110 <d_expression_1+0x3dc>)
   15e5e:	3a02      	subs	r2, #2
   15e60:	4413      	add	r3, r2
   15e62:	6323      	str	r3, [r4, #48]	; 0x30
   15e64:	4630      	mov	r0, r6
   15e66:	f009 fbbf 	bl	1f5e8 <strcmp>
   15e6a:	2800      	cmp	r0, #0
   15e6c:	f000 80ab 	beq.w	15fc6 <d_expression_1+0x292>
   15e70:	68ff      	ldr	r7, [r7, #12]
   15e72:	2f03      	cmp	r7, #3
   15e74:	d8e6      	bhi.n	15e44 <d_expression_1+0x110>
   15e76:	e8df f017 	tbh	[pc, r7, lsl #1]
   15e7a:	0029      	.short	0x0029
   15e7c:	007100ff 	.word	0x007100ff
   15e80:	0031      	.short	0x0031
   15e82:	4620      	mov	r0, r4
   15e84:	f000 f9b4 	bl	161f0 <d_template_args>
   15e88:	462a      	mov	r2, r5
   15e8a:	4603      	mov	r3, r0
   15e8c:	2104      	movs	r1, #4
   15e8e:	4620      	mov	r0, r4
   15e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15e94:	f7ff b8e2 	b.w	1505c <d_make_comp>
   15e98:	3102      	adds	r1, #2
   15e9a:	60c1      	str	r1, [r0, #12]
   15e9c:	f000 fb6e 	bl	1657c <d_type>
   15ea0:	4605      	mov	r5, r0
   15ea2:	4620      	mov	r0, r4
   15ea4:	f001 f812 	bl	16ecc <d_unqualified_name>
   15ea8:	68e3      	ldr	r3, [r4, #12]
   15eaa:	781b      	ldrb	r3, [r3, #0]
   15eac:	2b49      	cmp	r3, #73	; 0x49
   15eae:	4606      	mov	r6, r0
   15eb0:	f000 80ae 	beq.w	16010 <d_expression_1+0x2dc>
   15eb4:	4603      	mov	r3, r0
   15eb6:	462a      	mov	r2, r5
   15eb8:	4620      	mov	r0, r4
   15eba:	2101      	movs	r1, #1
   15ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15ec0:	f7ff b8cc 	b.w	1505c <d_make_comp>
   15ec4:	3103      	adds	r1, #3
   15ec6:	60c1      	str	r1, [r0, #12]
   15ec8:	2000      	movs	r0, #0
   15eca:	e79e      	b.n	15e0a <d_expression_1+0xd6>
   15ecc:	462a      	mov	r2, r5
   15ece:	4620      	mov	r0, r4
   15ed0:	2300      	movs	r3, #0
   15ed2:	2135      	movs	r1, #53	; 0x35
   15ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15ed8:	f7ff b8c0 	b.w	1505c <d_make_comp>
   15edc:	2e00      	cmp	r6, #0
   15ede:	d0b1      	beq.n	15e44 <d_expression_1+0x110>
   15ee0:	498c      	ldr	r1, [pc, #560]	; (16114 <d_expression_1+0x3e0>)
   15ee2:	4630      	mov	r0, r6
   15ee4:	f009 fb80 	bl	1f5e8 <strcmp>
   15ee8:	2800      	cmp	r0, #0
   15eea:	d071      	beq.n	15fd0 <d_expression_1+0x29c>
   15eec:	7833      	ldrb	r3, [r6, #0]
   15eee:	2b66      	cmp	r3, #102	; 0x66
   15ef0:	f000 80b2 	beq.w	16058 <d_expression_1+0x324>
   15ef4:	2b6e      	cmp	r3, #110	; 0x6e
   15ef6:	d1a5      	bne.n	15e44 <d_expression_1+0x110>
   15ef8:	7873      	ldrb	r3, [r6, #1]
   15efa:	2b77      	cmp	r3, #119	; 0x77
   15efc:	d001      	beq.n	15f02 <d_expression_1+0x1ce>
   15efe:	2b61      	cmp	r3, #97	; 0x61
   15f00:	d1a0      	bne.n	15e44 <d_expression_1+0x110>
   15f02:	215f      	movs	r1, #95	; 0x5f
   15f04:	4620      	mov	r0, r4
   15f06:	f7ff fcb7 	bl	15878 <d_exprlist>
   15f0a:	4606      	mov	r6, r0
   15f0c:	4620      	mov	r0, r4
   15f0e:	f000 fb35 	bl	1657c <d_type>
   15f12:	68e3      	ldr	r3, [r4, #12]
   15f14:	781a      	ldrb	r2, [r3, #0]
   15f16:	2a45      	cmp	r2, #69	; 0x45
   15f18:	4607      	mov	r7, r0
   15f1a:	f000 8099 	beq.w	16050 <d_expression_1+0x31c>
   15f1e:	2a70      	cmp	r2, #112	; 0x70
   15f20:	f000 809e 	beq.w	16060 <d_expression_1+0x32c>
   15f24:	2a69      	cmp	r2, #105	; 0x69
   15f26:	d18d      	bne.n	15e44 <d_expression_1+0x110>
   15f28:	785b      	ldrb	r3, [r3, #1]
   15f2a:	2b6c      	cmp	r3, #108	; 0x6c
   15f2c:	d18a      	bne.n	15e44 <d_expression_1+0x110>
   15f2e:	4620      	mov	r0, r4
   15f30:	f7ff ff00 	bl	15d34 <d_expression_1>
   15f34:	4603      	mov	r3, r0
   15f36:	463a      	mov	r2, r7
   15f38:	213b      	movs	r1, #59	; 0x3b
   15f3a:	4620      	mov	r0, r4
   15f3c:	f7ff f88e 	bl	1505c <d_make_comp>
   15f40:	4632      	mov	r2, r6
   15f42:	4603      	mov	r3, r0
   15f44:	213a      	movs	r1, #58	; 0x3a
   15f46:	4620      	mov	r0, r4
   15f48:	f7ff f888 	bl	1505c <d_make_comp>
   15f4c:	462a      	mov	r2, r5
   15f4e:	4603      	mov	r3, r0
   15f50:	2139      	movs	r1, #57	; 0x39
   15f52:	4620      	mov	r0, r4
   15f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15f58:	f7ff b880 	b.w	1505c <d_make_comp>
   15f5c:	2e00      	cmp	r6, #0
   15f5e:	f43f af71 	beq.w	15e44 <d_expression_1+0x110>
   15f62:	686b      	ldr	r3, [r5, #4]
   15f64:	681b      	ldr	r3, [r3, #0]
   15f66:	785a      	ldrb	r2, [r3, #1]
   15f68:	2a63      	cmp	r2, #99	; 0x63
   15f6a:	d044      	beq.n	15ff6 <d_expression_1+0x2c2>
   15f6c:	7833      	ldrb	r3, [r6, #0]
   15f6e:	2b66      	cmp	r3, #102	; 0x66
   15f70:	d059      	beq.n	16026 <d_expression_1+0x2f2>
   15f72:	4620      	mov	r0, r4
   15f74:	f7ff fede 	bl	15d34 <d_expression_1>
   15f78:	4607      	mov	r7, r0
   15f7a:	4967      	ldr	r1, [pc, #412]	; (16118 <d_expression_1+0x3e4>)
   15f7c:	4630      	mov	r0, r6
   15f7e:	f009 fb33 	bl	1f5e8 <strcmp>
   15f82:	b390      	cbz	r0, 15fea <d_expression_1+0x2b6>
   15f84:	4965      	ldr	r1, [pc, #404]	; (1611c <d_expression_1+0x3e8>)
   15f86:	4630      	mov	r0, r6
   15f88:	f009 fb2e 	bl	1f5e8 <strcmp>
   15f8c:	b128      	cbz	r0, 15f9a <d_expression_1+0x266>
   15f8e:	4630      	mov	r0, r6
   15f90:	4963      	ldr	r1, [pc, #396]	; (16120 <d_expression_1+0x3ec>)
   15f92:	f009 fb29 	bl	1f5e8 <strcmp>
   15f96:	2800      	cmp	r0, #0
   15f98:	d14a      	bne.n	16030 <d_expression_1+0x2fc>
   15f9a:	4620      	mov	r0, r4
   15f9c:	f000 ff96 	bl	16ecc <d_unqualified_name>
   15fa0:	68e3      	ldr	r3, [r4, #12]
   15fa2:	781b      	ldrb	r3, [r3, #0]
   15fa4:	2b49      	cmp	r3, #73	; 0x49
   15fa6:	4606      	mov	r6, r0
   15fa8:	d047      	beq.n	1603a <d_expression_1+0x306>
   15faa:	4633      	mov	r3, r6
   15fac:	463a      	mov	r2, r7
   15fae:	2138      	movs	r1, #56	; 0x38
   15fb0:	4620      	mov	r0, r4
   15fb2:	f7ff f853 	bl	1505c <d_make_comp>
   15fb6:	462a      	mov	r2, r5
   15fb8:	4603      	mov	r3, r0
   15fba:	2137      	movs	r1, #55	; 0x37
   15fbc:	4620      	mov	r0, r4
   15fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15fc2:	f7ff b84b 	b.w	1505c <d_make_comp>
   15fc6:	4620      	mov	r0, r4
   15fc8:	f000 fad8 	bl	1657c <d_type>
   15fcc:	4603      	mov	r3, r0
   15fce:	e6ef      	b.n	15db0 <d_expression_1+0x7c>
   15fd0:	4620      	mov	r0, r4
   15fd2:	f7ff feaf 	bl	15d34 <d_expression_1>
   15fd6:	4606      	mov	r6, r0
   15fd8:	4620      	mov	r0, r4
   15fda:	f7ff feab 	bl	15d34 <d_expression_1>
   15fde:	4607      	mov	r7, r0
   15fe0:	4620      	mov	r0, r4
   15fe2:	f7ff fea7 	bl	15d34 <d_expression_1>
   15fe6:	4603      	mov	r3, r0
   15fe8:	e7a5      	b.n	15f36 <d_expression_1+0x202>
   15fea:	2145      	movs	r1, #69	; 0x45
   15fec:	4620      	mov	r0, r4
   15fee:	f7ff fc43 	bl	15878 <d_exprlist>
   15ff2:	4606      	mov	r6, r0
   15ff4:	e7d9      	b.n	15faa <d_expression_1+0x276>
   15ff6:	781b      	ldrb	r3, [r3, #0]
   15ff8:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   15ffc:	2a01      	cmp	r2, #1
   15ffe:	d902      	bls.n	16006 <d_expression_1+0x2d2>
   16000:	3b72      	subs	r3, #114	; 0x72
   16002:	2b01      	cmp	r3, #1
   16004:	d8b2      	bhi.n	15f6c <d_expression_1+0x238>
   16006:	4620      	mov	r0, r4
   16008:	f000 fab8 	bl	1657c <d_type>
   1600c:	4607      	mov	r7, r0
   1600e:	e7b4      	b.n	15f7a <d_expression_1+0x246>
   16010:	4620      	mov	r0, r4
   16012:	f000 f8ed 	bl	161f0 <d_template_args>
   16016:	4632      	mov	r2, r6
   16018:	4603      	mov	r3, r0
   1601a:	2104      	movs	r1, #4
   1601c:	4620      	mov	r0, r4
   1601e:	f7ff f81d 	bl	1505c <d_make_comp>
   16022:	4603      	mov	r3, r0
   16024:	e747      	b.n	15eb6 <d_expression_1+0x182>
   16026:	4620      	mov	r0, r4
   16028:	f000 fe90 	bl	16d4c <d_operator_name>
   1602c:	4607      	mov	r7, r0
   1602e:	e7a4      	b.n	15f7a <d_expression_1+0x246>
   16030:	4620      	mov	r0, r4
   16032:	f7ff fe7f 	bl	15d34 <d_expression_1>
   16036:	4606      	mov	r6, r0
   16038:	e7b7      	b.n	15faa <d_expression_1+0x276>
   1603a:	4620      	mov	r0, r4
   1603c:	f000 f8d8 	bl	161f0 <d_template_args>
   16040:	4632      	mov	r2, r6
   16042:	4603      	mov	r3, r0
   16044:	2104      	movs	r1, #4
   16046:	4620      	mov	r0, r4
   16048:	f7ff f808 	bl	1505c <d_make_comp>
   1604c:	4606      	mov	r6, r0
   1604e:	e7ac      	b.n	15faa <d_expression_1+0x276>
   16050:	3301      	adds	r3, #1
   16052:	60e3      	str	r3, [r4, #12]
   16054:	2300      	movs	r3, #0
   16056:	e76e      	b.n	15f36 <d_expression_1+0x202>
   16058:	4620      	mov	r0, r4
   1605a:	f000 fe77 	bl	16d4c <d_operator_name>
   1605e:	e7ba      	b.n	15fd6 <d_expression_1+0x2a2>
   16060:	785a      	ldrb	r2, [r3, #1]
   16062:	2a69      	cmp	r2, #105	; 0x69
   16064:	f47f aeee 	bne.w	15e44 <d_expression_1+0x110>
   16068:	3302      	adds	r3, #2
   1606a:	60e3      	str	r3, [r4, #12]
   1606c:	2145      	movs	r1, #69	; 0x45
   1606e:	4620      	mov	r0, r4
   16070:	f7ff fc02 	bl	15878 <d_exprlist>
   16074:	4603      	mov	r3, r0
   16076:	e75e      	b.n	15f36 <d_expression_1+0x202>
   16078:	2e00      	cmp	r6, #0
   1607a:	d046      	beq.n	1610a <d_expression_1+0x3d6>
   1607c:	7833      	ldrb	r3, [r6, #0]
   1607e:	2b70      	cmp	r3, #112	; 0x70
   16080:	d015      	beq.n	160ae <d_expression_1+0x37a>
   16082:	2b6d      	cmp	r3, #109	; 0x6d
   16084:	d013      	beq.n	160ae <d_expression_1+0x37a>
   16086:	2700      	movs	r7, #0
   16088:	4630      	mov	r0, r6
   1608a:	4926      	ldr	r1, [pc, #152]	; (16124 <d_expression_1+0x3f0>)
   1608c:	f009 faac 	bl	1f5e8 <strcmp>
   16090:	b1b8      	cbz	r0, 160c2 <d_expression_1+0x38e>
   16092:	4620      	mov	r0, r4
   16094:	f7ff fe4e 	bl	15d34 <d_expression_1>
   16098:	4603      	mov	r3, r0
   1609a:	2f00      	cmp	r7, #0
   1609c:	f43f ae88 	beq.w	15db0 <d_expression_1+0x7c>
   160a0:	461a      	mov	r2, r3
   160a2:	2138      	movs	r1, #56	; 0x38
   160a4:	4620      	mov	r0, r4
   160a6:	f7fe ffd9 	bl	1505c <d_make_comp>
   160aa:	4603      	mov	r3, r0
   160ac:	e680      	b.n	15db0 <d_expression_1+0x7c>
   160ae:	7872      	ldrb	r2, [r6, #1]
   160b0:	429a      	cmp	r2, r3
   160b2:	d1e8      	bne.n	16086 <d_expression_1+0x352>
   160b4:	68e3      	ldr	r3, [r4, #12]
   160b6:	781a      	ldrb	r2, [r3, #0]
   160b8:	2a5f      	cmp	r2, #95	; 0x5f
   160ba:	d1e5      	bne.n	16088 <d_expression_1+0x354>
   160bc:	3301      	adds	r3, #1
   160be:	60e3      	str	r3, [r4, #12]
   160c0:	e7e1      	b.n	16086 <d_expression_1+0x352>
   160c2:	4620      	mov	r0, r4
   160c4:	f000 f830 	bl	16128 <d_template_args_1>
   160c8:	4603      	mov	r3, r0
   160ca:	e7e6      	b.n	1609a <d_expression_1+0x366>
   160cc:	2b6f      	cmp	r3, #111	; 0x6f
   160ce:	d015      	beq.n	160fc <d_expression_1+0x3c8>
   160d0:	2b69      	cmp	r3, #105	; 0x69
   160d2:	f47f aeaa 	bne.w	15e2a <d_expression_1+0xf6>
   160d6:	784b      	ldrb	r3, [r1, #1]
   160d8:	2b6c      	cmp	r3, #108	; 0x6c
   160da:	f47f ae50 	bne.w	15d7e <d_expression_1+0x4a>
   160de:	2500      	movs	r5, #0
   160e0:	3102      	adds	r1, #2
   160e2:	60e1      	str	r1, [r4, #12]
   160e4:	4620      	mov	r0, r4
   160e6:	2145      	movs	r1, #69	; 0x45
   160e8:	f7ff fbc6 	bl	15878 <d_exprlist>
   160ec:	462a      	mov	r2, r5
   160ee:	4603      	mov	r3, r0
   160f0:	2130      	movs	r1, #48	; 0x30
   160f2:	4620      	mov	r0, r4
   160f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   160f8:	f7fe bfb0 	b.w	1505c <d_make_comp>
   160fc:	784b      	ldrb	r3, [r1, #1]
   160fe:	2b6e      	cmp	r3, #110	; 0x6e
   16100:	f47f ae3d 	bne.w	15d7e <d_expression_1+0x4a>
   16104:	3102      	adds	r1, #2
   16106:	60c1      	str	r1, [r0, #12]
   16108:	e628      	b.n	15d5c <d_expression_1+0x28>
   1610a:	2700      	movs	r7, #0
   1610c:	e7c1      	b.n	16092 <d_expression_1+0x35e>
   1610e:	bf00      	nop
   16110:	000254e0 	.word	0x000254e0
   16114:	00024fec 	.word	0x00024fec
   16118:	00024fe0 	.word	0x00024fe0
   1611c:	00024fe4 	.word	0x00024fe4
   16120:	00024fe8 	.word	0x00024fe8
   16124:	00024fdc 	.word	0x00024fdc

00016128 <d_template_args_1>:
   16128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1612c:	68c2      	ldr	r2, [r0, #12]
   1612e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   16132:	7813      	ldrb	r3, [r2, #0]
   16134:	2b45      	cmp	r3, #69	; 0x45
   16136:	b083      	sub	sp, #12
   16138:	4604      	mov	r4, r0
   1613a:	d04e      	beq.n	161da <d_template_args_1+0xb2>
   1613c:	ae02      	add	r6, sp, #8
   1613e:	2100      	movs	r1, #0
   16140:	f846 1d04 	str.w	r1, [r6, #-4]!
   16144:	2701      	movs	r7, #1
   16146:	3b49      	subs	r3, #73	; 0x49
   16148:	2b0f      	cmp	r3, #15
   1614a:	d83e      	bhi.n	161ca <d_template_args_1+0xa2>
   1614c:	e8df f003 	tbb	[pc, r3]
   16150:	1b3d3838 	.word	0x1b3d3838
   16154:	3d3d3d3d 	.word	0x3d3d3d3d
   16158:	3d3d3d3d 	.word	0x3d3d3d3d
   1615c:	083d3d3d 	.word	0x083d3d3d
   16160:	3201      	adds	r2, #1
   16162:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   16166:	60e2      	str	r2, [r4, #12]
   16168:	6367      	str	r7, [r4, #52]	; 0x34
   1616a:	4620      	mov	r0, r4
   1616c:	f7ff fde2 	bl	15d34 <d_expression_1>
   16170:	68e3      	ldr	r3, [r4, #12]
   16172:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   16176:	781a      	ldrb	r2, [r3, #0]
   16178:	2a45      	cmp	r2, #69	; 0x45
   1617a:	4605      	mov	r5, r0
   1617c:	d02a      	beq.n	161d4 <d_template_args_1+0xac>
   1617e:	2000      	movs	r0, #0
   16180:	b003      	add	sp, #12
   16182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16186:	4620      	mov	r0, r4
   16188:	f001 faee 	bl	17768 <d_expr_primary>
   1618c:	4605      	mov	r5, r0
   1618e:	2300      	movs	r3, #0
   16190:	212f      	movs	r1, #47	; 0x2f
   16192:	462a      	mov	r2, r5
   16194:	4620      	mov	r0, r4
   16196:	2d00      	cmp	r5, #0
   16198:	d0f1      	beq.n	1617e <d_template_args_1+0x56>
   1619a:	f7fe ff5f 	bl	1505c <d_make_comp>
   1619e:	6030      	str	r0, [r6, #0]
   161a0:	f100 0608 	add.w	r6, r0, #8
   161a4:	2800      	cmp	r0, #0
   161a6:	d0ea      	beq.n	1617e <d_template_args_1+0x56>
   161a8:	68e2      	ldr	r2, [r4, #12]
   161aa:	7813      	ldrb	r3, [r2, #0]
   161ac:	2b45      	cmp	r3, #69	; 0x45
   161ae:	d1ca      	bne.n	16146 <d_template_args_1+0x1e>
   161b0:	9801      	ldr	r0, [sp, #4]
   161b2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   161b6:	3201      	adds	r2, #1
   161b8:	60e2      	str	r2, [r4, #12]
   161ba:	b003      	add	sp, #12
   161bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   161c0:	4620      	mov	r0, r4
   161c2:	f000 f815 	bl	161f0 <d_template_args>
   161c6:	4605      	mov	r5, r0
   161c8:	e7e1      	b.n	1618e <d_template_args_1+0x66>
   161ca:	4620      	mov	r0, r4
   161cc:	f000 f9d6 	bl	1657c <d_type>
   161d0:	4605      	mov	r5, r0
   161d2:	e7dc      	b.n	1618e <d_template_args_1+0x66>
   161d4:	3301      	adds	r3, #1
   161d6:	60e3      	str	r3, [r4, #12]
   161d8:	e7d9      	b.n	1618e <d_template_args_1+0x66>
   161da:	3201      	adds	r2, #1
   161dc:	2300      	movs	r3, #0
   161de:	60c2      	str	r2, [r0, #12]
   161e0:	212f      	movs	r1, #47	; 0x2f
   161e2:	461a      	mov	r2, r3
   161e4:	b003      	add	sp, #12
   161e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   161ea:	f7fe bf37 	b.w	1505c <d_make_comp>
   161ee:	bf00      	nop

000161f0 <d_template_args>:
   161f0:	68c2      	ldr	r2, [r0, #12]
   161f2:	7813      	ldrb	r3, [r2, #0]
   161f4:	3b49      	subs	r3, #73	; 0x49
   161f6:	2b01      	cmp	r3, #1
   161f8:	d802      	bhi.n	16200 <d_template_args+0x10>
   161fa:	3201      	adds	r2, #1
   161fc:	60c2      	str	r2, [r0, #12]
   161fe:	e793      	b.n	16128 <d_template_args_1>
   16200:	2000      	movs	r0, #0
   16202:	4770      	bx	lr

00016204 <d_name>:
   16204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16208:	68c2      	ldr	r2, [r0, #12]
   1620a:	7813      	ldrb	r3, [r2, #0]
   1620c:	3b4e      	subs	r3, #78	; 0x4e
   1620e:	b085      	sub	sp, #20
   16210:	4605      	mov	r5, r0
   16212:	2b0c      	cmp	r3, #12
   16214:	d870      	bhi.n	162f8 <d_name+0xf4>
   16216:	e8df f003 	tbb	[pc, r3]
   1621a:	6f1e      	.short	0x6f1e
   1621c:	5b6f6f6f 	.word	0x5b6f6f6f
   16220:	6f6f176f 	.word	0x6f6f176f
   16224:	6f6f      	.short	0x6f6f
   16226:	07          	.byte	0x07
   16227:	00          	.byte	0x00
   16228:	3201      	adds	r2, #1
   1622a:	2100      	movs	r1, #0
   1622c:	60c2      	str	r2, [r0, #12]
   1622e:	f000 ffbd 	bl	171ac <d_encoding>
   16232:	68eb      	ldr	r3, [r5, #12]
   16234:	7819      	ldrb	r1, [r3, #0]
   16236:	2945      	cmp	r1, #69	; 0x45
   16238:	4606      	mov	r6, r0
   1623a:	f000 8099 	beq.w	16370 <d_name+0x16c>
   1623e:	2200      	movs	r2, #0
   16240:	4610      	mov	r0, r2
   16242:	b005      	add	sp, #20
   16244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16248:	f000 fe40 	bl	16ecc <d_unqualified_name>
   1624c:	4602      	mov	r2, r0
   1624e:	4610      	mov	r0, r2
   16250:	b005      	add	sp, #20
   16252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16256:	3201      	adds	r2, #1
   16258:	60c2      	str	r2, [r0, #12]
   1625a:	a903      	add	r1, sp, #12
   1625c:	2201      	movs	r2, #1
   1625e:	f7fe ff49 	bl	150f4 <d_cv_qualifiers>
   16262:	4681      	mov	r9, r0
   16264:	2800      	cmp	r0, #0
   16266:	d0ea      	beq.n	1623e <d_name+0x3a>
   16268:	2100      	movs	r1, #0
   1626a:	4628      	mov	r0, r5
   1626c:	f7fe ffa8 	bl	151c0 <d_ref_qualifier>
   16270:	68ea      	ldr	r2, [r5, #12]
   16272:	4eb4      	ldr	r6, [pc, #720]	; (16544 <d_name+0x340>)
   16274:	7814      	ldrb	r4, [r2, #0]
   16276:	4680      	mov	r8, r0
   16278:	2700      	movs	r7, #0
   1627a:	2c00      	cmp	r4, #0
   1627c:	f000 80e8 	beq.w	16450 <d_name+0x24c>
   16280:	2c44      	cmp	r4, #68	; 0x44
   16282:	f000 80d1 	beq.w	16428 <d_name+0x224>
   16286:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1628a:	b2db      	uxtb	r3, r3
   1628c:	2b1c      	cmp	r3, #28
   1628e:	f240 80a8 	bls.w	163e2 <d_name+0x1de>
   16292:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   16296:	2b19      	cmp	r3, #25
   16298:	f240 80a8 	bls.w	163ec <d_name+0x1e8>
   1629c:	2c55      	cmp	r4, #85	; 0x55
   1629e:	f000 80de 	beq.w	1645e <d_name+0x25a>
   162a2:	2c53      	cmp	r4, #83	; 0x53
   162a4:	f000 80f1 	beq.w	1648a <d_name+0x286>
   162a8:	2c49      	cmp	r4, #73	; 0x49
   162aa:	f000 80da 	beq.w	16462 <d_name+0x25e>
   162ae:	2c54      	cmp	r4, #84	; 0x54
   162b0:	f000 811f 	beq.w	164f2 <d_name+0x2ee>
   162b4:	2c45      	cmp	r4, #69	; 0x45
   162b6:	f000 814b 	beq.w	16550 <d_name+0x34c>
   162ba:	2c4d      	cmp	r4, #77	; 0x4d
   162bc:	f040 80c8 	bne.w	16450 <d_name+0x24c>
   162c0:	2f00      	cmp	r7, #0
   162c2:	f000 80c5 	beq.w	16450 <d_name+0x24c>
   162c6:	1c53      	adds	r3, r2, #1
   162c8:	60eb      	str	r3, [r5, #12]
   162ca:	7854      	ldrb	r4, [r2, #1]
   162cc:	461a      	mov	r2, r3
   162ce:	e7d4      	b.n	1627a <d_name+0x76>
   162d0:	7853      	ldrb	r3, [r2, #1]
   162d2:	2b74      	cmp	r3, #116	; 0x74
   162d4:	d031      	beq.n	1633a <d_name+0x136>
   162d6:	2100      	movs	r1, #0
   162d8:	f7ff f90a 	bl	154f0 <d_substitution>
   162dc:	68eb      	ldr	r3, [r5, #12]
   162de:	7819      	ldrb	r1, [r3, #0]
   162e0:	2949      	cmp	r1, #73	; 0x49
   162e2:	4602      	mov	r2, r0
   162e4:	d1b3      	bne.n	1624e <d_name+0x4a>
   162e6:	3301      	adds	r3, #1
   162e8:	60eb      	str	r3, [r5, #12]
   162ea:	4628      	mov	r0, r5
   162ec:	9201      	str	r2, [sp, #4]
   162ee:	f7ff ff1b 	bl	16128 <d_template_args_1>
   162f2:	9a01      	ldr	r2, [sp, #4]
   162f4:	4603      	mov	r3, r0
   162f6:	e017      	b.n	16328 <d_name+0x124>
   162f8:	f000 fde8 	bl	16ecc <d_unqualified_name>
   162fc:	68eb      	ldr	r3, [r5, #12]
   162fe:	7819      	ldrb	r1, [r3, #0]
   16300:	2949      	cmp	r1, #73	; 0x49
   16302:	4602      	mov	r2, r0
   16304:	d1a3      	bne.n	1624e <d_name+0x4a>
   16306:	2a00      	cmp	r2, #0
   16308:	d099      	beq.n	1623e <d_name+0x3a>
   1630a:	6a29      	ldr	r1, [r5, #32]
   1630c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1630e:	4281      	cmp	r1, r0
   16310:	da95      	bge.n	1623e <d_name+0x3a>
   16312:	69ec      	ldr	r4, [r5, #28]
   16314:	1c48      	adds	r0, r1, #1
   16316:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   1631a:	6228      	str	r0, [r5, #32]
   1631c:	7819      	ldrb	r1, [r3, #0]
   1631e:	3949      	subs	r1, #73	; 0x49
   16320:	2901      	cmp	r1, #1
   16322:	bf88      	it	hi
   16324:	2300      	movhi	r3, #0
   16326:	d9de      	bls.n	162e6 <d_name+0xe2>
   16328:	4628      	mov	r0, r5
   1632a:	2104      	movs	r1, #4
   1632c:	f7fe fe96 	bl	1505c <d_make_comp>
   16330:	4602      	mov	r2, r0
   16332:	4610      	mov	r0, r2
   16334:	b005      	add	sp, #20
   16336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1633a:	6943      	ldr	r3, [r0, #20]
   1633c:	6981      	ldr	r1, [r0, #24]
   1633e:	3202      	adds	r2, #2
   16340:	428b      	cmp	r3, r1
   16342:	60c2      	str	r2, [r0, #12]
   16344:	f2c0 80ab 	blt.w	1649e <d_name+0x29a>
   16348:	2400      	movs	r4, #0
   1634a:	4628      	mov	r0, r5
   1634c:	f000 fdbe 	bl	16ecc <d_unqualified_name>
   16350:	4622      	mov	r2, r4
   16352:	4603      	mov	r3, r0
   16354:	2101      	movs	r1, #1
   16356:	4628      	mov	r0, r5
   16358:	f7fe fe80 	bl	1505c <d_make_comp>
   1635c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1635e:	68eb      	ldr	r3, [r5, #12]
   16360:	3103      	adds	r1, #3
   16362:	6329      	str	r1, [r5, #48]	; 0x30
   16364:	7819      	ldrb	r1, [r3, #0]
   16366:	2949      	cmp	r1, #73	; 0x49
   16368:	4602      	mov	r2, r0
   1636a:	f47f af70 	bne.w	1624e <d_name+0x4a>
   1636e:	e7ca      	b.n	16306 <d_name+0x102>
   16370:	1c5a      	adds	r2, r3, #1
   16372:	60ea      	str	r2, [r5, #12]
   16374:	7859      	ldrb	r1, [r3, #1]
   16376:	2973      	cmp	r1, #115	; 0x73
   16378:	f000 80a3 	beq.w	164c2 <d_name+0x2be>
   1637c:	2964      	cmp	r1, #100	; 0x64
   1637e:	f000 80bc 	beq.w	164fa <d_name+0x2f6>
   16382:	4628      	mov	r0, r5
   16384:	f7ff ff3e 	bl	16204 <d_name>
   16388:	4604      	mov	r4, r0
   1638a:	2800      	cmp	r0, #0
   1638c:	d072      	beq.n	16474 <d_name+0x270>
   1638e:	7803      	ldrb	r3, [r0, #0]
   16390:	2b45      	cmp	r3, #69	; 0x45
   16392:	f000 8094 	beq.w	164be <d_name+0x2ba>
   16396:	2b47      	cmp	r3, #71	; 0x47
   16398:	f000 8091 	beq.w	164be <d_name+0x2ba>
   1639c:	68eb      	ldr	r3, [r5, #12]
   1639e:	781a      	ldrb	r2, [r3, #0]
   163a0:	2a5f      	cmp	r2, #95	; 0x5f
   163a2:	f040 808c 	bne.w	164be <d_name+0x2ba>
   163a6:	f04f 37ff 	mov.w	r7, #4294967295
   163aa:	4628      	mov	r0, r5
   163ac:	3301      	adds	r3, #1
   163ae:	f840 3f0c 	str.w	r3, [r0, #12]!
   163b2:	f7fe ffa5 	bl	15300 <d_number.isra.0>
   163b6:	2800      	cmp	r0, #0
   163b8:	f6ff af41 	blt.w	1623e <d_name+0x3a>
   163bc:	1c7b      	adds	r3, r7, #1
   163be:	d07e      	beq.n	164be <d_name+0x2ba>
   163c0:	696b      	ldr	r3, [r5, #20]
   163c2:	69aa      	ldr	r2, [r5, #24]
   163c4:	4293      	cmp	r3, r2
   163c6:	da55      	bge.n	16474 <d_name+0x270>
   163c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   163cc:	6929      	ldr	r1, [r5, #16]
   163ce:	3301      	adds	r3, #1
   163d0:	0092      	lsls	r2, r2, #2
   163d2:	616b      	str	r3, [r5, #20]
   163d4:	188b      	adds	r3, r1, r2
   163d6:	d04e      	beq.n	16476 <d_name+0x272>
   163d8:	2046      	movs	r0, #70	; 0x46
   163da:	5488      	strb	r0, [r1, r2]
   163dc:	609f      	str	r7, [r3, #8]
   163de:	605c      	str	r4, [r3, #4]
   163e0:	e049      	b.n	16476 <d_name+0x272>
   163e2:	fa26 f303 	lsr.w	r3, r6, r3
   163e6:	07d9      	lsls	r1, r3, #31
   163e8:	f57f af53 	bpl.w	16292 <d_name+0x8e>
   163ec:	4628      	mov	r0, r5
   163ee:	f000 fd6d 	bl	16ecc <d_unqualified_name>
   163f2:	b347      	cbz	r7, 16446 <d_name+0x242>
   163f4:	2101      	movs	r1, #1
   163f6:	4603      	mov	r3, r0
   163f8:	463a      	mov	r2, r7
   163fa:	4628      	mov	r0, r5
   163fc:	f7fe fe2e 	bl	1505c <d_make_comp>
   16400:	4607      	mov	r7, r0
   16402:	2c53      	cmp	r4, #83	; 0x53
   16404:	d01c      	beq.n	16440 <d_name+0x23c>
   16406:	68ea      	ldr	r2, [r5, #12]
   16408:	7814      	ldrb	r4, [r2, #0]
   1640a:	2c45      	cmp	r4, #69	; 0x45
   1640c:	f43f af3b 	beq.w	16286 <d_name+0x82>
   16410:	b1f7      	cbz	r7, 16450 <d_name+0x24c>
   16412:	6a2b      	ldr	r3, [r5, #32]
   16414:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16416:	428b      	cmp	r3, r1
   16418:	da1a      	bge.n	16450 <d_name+0x24c>
   1641a:	69e9      	ldr	r1, [r5, #28]
   1641c:	1c58      	adds	r0, r3, #1
   1641e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   16422:	6228      	str	r0, [r5, #32]
   16424:	7814      	ldrb	r4, [r2, #0]
   16426:	e728      	b.n	1627a <d_name+0x76>
   16428:	7853      	ldrb	r3, [r2, #1]
   1642a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1642e:	2b54      	cmp	r3, #84	; 0x54
   16430:	4628      	mov	r0, r5
   16432:	d00a      	beq.n	1644a <d_name+0x246>
   16434:	f000 fd4a 	bl	16ecc <d_unqualified_name>
   16438:	2f00      	cmp	r7, #0
   1643a:	d1db      	bne.n	163f4 <d_name+0x1f0>
   1643c:	4607      	mov	r7, r0
   1643e:	e7e2      	b.n	16406 <d_name+0x202>
   16440:	68ea      	ldr	r2, [r5, #12]
   16442:	7814      	ldrb	r4, [r2, #0]
   16444:	e719      	b.n	1627a <d_name+0x76>
   16446:	4607      	mov	r7, r0
   16448:	e7db      	b.n	16402 <d_name+0x1fe>
   1644a:	f000 f897 	bl	1657c <d_type>
   1644e:	e7f3      	b.n	16438 <d_name+0x234>
   16450:	2200      	movs	r2, #0
   16452:	4610      	mov	r0, r2
   16454:	f8c9 2000 	str.w	r2, [r9]
   16458:	b005      	add	sp, #20
   1645a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1645e:	4628      	mov	r0, r5
   16460:	e7e8      	b.n	16434 <d_name+0x230>
   16462:	2f00      	cmp	r7, #0
   16464:	d0f4      	beq.n	16450 <d_name+0x24c>
   16466:	3201      	adds	r2, #1
   16468:	60ea      	str	r2, [r5, #12]
   1646a:	4628      	mov	r0, r5
   1646c:	f7ff fe5c 	bl	16128 <d_template_args_1>
   16470:	2104      	movs	r1, #4
   16472:	e7c0      	b.n	163f6 <d_name+0x1f2>
   16474:	2300      	movs	r3, #0
   16476:	4632      	mov	r2, r6
   16478:	4628      	mov	r0, r5
   1647a:	2102      	movs	r1, #2
   1647c:	f7fe fdee 	bl	1505c <d_make_comp>
   16480:	4602      	mov	r2, r0
   16482:	4610      	mov	r0, r2
   16484:	b005      	add	sp, #20
   16486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1648a:	2101      	movs	r1, #1
   1648c:	4628      	mov	r0, r5
   1648e:	f7ff f82f 	bl	154f0 <d_substitution>
   16492:	2f00      	cmp	r7, #0
   16494:	d1ae      	bne.n	163f4 <d_name+0x1f0>
   16496:	68ea      	ldr	r2, [r5, #12]
   16498:	4607      	mov	r7, r0
   1649a:	7814      	ldrb	r4, [r2, #0]
   1649c:	e6ed      	b.n	1627a <d_name+0x76>
   1649e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   164a2:	6901      	ldr	r1, [r0, #16]
   164a4:	0092      	lsls	r2, r2, #2
   164a6:	3301      	adds	r3, #1
   164a8:	188c      	adds	r4, r1, r2
   164aa:	6143      	str	r3, [r0, #20]
   164ac:	f43f af4d 	beq.w	1634a <d_name+0x146>
   164b0:	2300      	movs	r3, #0
   164b2:	548b      	strb	r3, [r1, r2]
   164b4:	4824      	ldr	r0, [pc, #144]	; (16548 <d_name+0x344>)
   164b6:	6060      	str	r0, [r4, #4]
   164b8:	2303      	movs	r3, #3
   164ba:	60a3      	str	r3, [r4, #8]
   164bc:	e745      	b.n	1634a <d_name+0x146>
   164be:	4623      	mov	r3, r4
   164c0:	e7d9      	b.n	16476 <d_name+0x272>
   164c2:	1c9a      	adds	r2, r3, #2
   164c4:	60ea      	str	r2, [r5, #12]
   164c6:	789a      	ldrb	r2, [r3, #2]
   164c8:	2a5f      	cmp	r2, #95	; 0x5f
   164ca:	d032      	beq.n	16532 <d_name+0x32e>
   164cc:	696b      	ldr	r3, [r5, #20]
   164ce:	69aa      	ldr	r2, [r5, #24]
   164d0:	4293      	cmp	r3, r2
   164d2:	dacf      	bge.n	16474 <d_name+0x270>
   164d4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   164d8:	6929      	ldr	r1, [r5, #16]
   164da:	3301      	adds	r3, #1
   164dc:	0092      	lsls	r2, r2, #2
   164de:	616b      	str	r3, [r5, #20]
   164e0:	188b      	adds	r3, r1, r2
   164e2:	d0c8      	beq.n	16476 <d_name+0x272>
   164e4:	2400      	movs	r4, #0
   164e6:	548c      	strb	r4, [r1, r2]
   164e8:	4818      	ldr	r0, [pc, #96]	; (1654c <d_name+0x348>)
   164ea:	6058      	str	r0, [r3, #4]
   164ec:	220e      	movs	r2, #14
   164ee:	609a      	str	r2, [r3, #8]
   164f0:	e7c1      	b.n	16476 <d_name+0x272>
   164f2:	4628      	mov	r0, r5
   164f4:	f7fe ff62 	bl	153bc <d_template_param>
   164f8:	e79e      	b.n	16438 <d_name+0x234>
   164fa:	3302      	adds	r3, #2
   164fc:	60eb      	str	r3, [r5, #12]
   164fe:	4628      	mov	r0, r5
   16500:	f7fe ff40 	bl	15384 <d_compact_number>
   16504:	1e07      	subs	r7, r0, #0
   16506:	f6ff ae9a 	blt.w	1623e <d_name+0x3a>
   1650a:	4628      	mov	r0, r5
   1650c:	f7ff fe7a 	bl	16204 <d_name>
   16510:	4604      	mov	r4, r0
   16512:	2800      	cmp	r0, #0
   16514:	f43f af54 	beq.w	163c0 <d_name+0x1bc>
   16518:	7803      	ldrb	r3, [r0, #0]
   1651a:	2b45      	cmp	r3, #69	; 0x45
   1651c:	f43f af50 	beq.w	163c0 <d_name+0x1bc>
   16520:	2b47      	cmp	r3, #71	; 0x47
   16522:	f43f af4d 	beq.w	163c0 <d_name+0x1bc>
   16526:	68eb      	ldr	r3, [r5, #12]
   16528:	781a      	ldrb	r2, [r3, #0]
   1652a:	2a5f      	cmp	r2, #95	; 0x5f
   1652c:	f47f af48 	bne.w	163c0 <d_name+0x1bc>
   16530:	e73b      	b.n	163aa <d_name+0x1a6>
   16532:	4628      	mov	r0, r5
   16534:	3303      	adds	r3, #3
   16536:	f840 3f0c 	str.w	r3, [r0, #12]!
   1653a:	f7fe fee1 	bl	15300 <d_number.isra.0>
   1653e:	2800      	cmp	r0, #0
   16540:	dac4      	bge.n	164cc <d_name+0x2c8>
   16542:	e67c      	b.n	1623e <d_name+0x3a>
   16544:	100803ff 	.word	0x100803ff
   16548:	00025000 	.word	0x00025000
   1654c:	00024ff0 	.word	0x00024ff0
   16550:	f8c9 7000 	str.w	r7, [r9]
   16554:	2f00      	cmp	r7, #0
   16556:	f43f ae72 	beq.w	1623e <d_name+0x3a>
   1655a:	f1b8 0f00 	cmp.w	r8, #0
   1655e:	d004      	beq.n	1656a <d_name+0x366>
   16560:	9b03      	ldr	r3, [sp, #12]
   16562:	f8c8 3004 	str.w	r3, [r8, #4]
   16566:	f8cd 800c 	str.w	r8, [sp, #12]
   1656a:	7813      	ldrb	r3, [r2, #0]
   1656c:	2b45      	cmp	r3, #69	; 0x45
   1656e:	f47f ae66 	bne.w	1623e <d_name+0x3a>
   16572:	3201      	adds	r2, #1
   16574:	60ea      	str	r2, [r5, #12]
   16576:	9a03      	ldr	r2, [sp, #12]
   16578:	e669      	b.n	1624e <d_name+0x4a>
   1657a:	bf00      	nop

0001657c <d_type>:
   1657c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16580:	68c2      	ldr	r2, [r0, #12]
   16582:	7813      	ldrb	r3, [r2, #0]
   16584:	2b72      	cmp	r3, #114	; 0x72
   16586:	b083      	sub	sp, #12
   16588:	4604      	mov	r4, r0
   1658a:	d058      	beq.n	1663e <d_type+0xc2>
   1658c:	2b56      	cmp	r3, #86	; 0x56
   1658e:	d056      	beq.n	1663e <d_type+0xc2>
   16590:	2b4b      	cmp	r3, #75	; 0x4b
   16592:	d054      	beq.n	1663e <d_type+0xc2>
   16594:	2b44      	cmp	r3, #68	; 0x44
   16596:	f000 809f 	beq.w	166d8 <d_type+0x15c>
   1659a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1659e:	294a      	cmp	r1, #74	; 0x4a
   165a0:	f200 808a 	bhi.w	166b8 <d_type+0x13c>
   165a4:	e8df f011 	tbh	[pc, r1, lsl #1]
   165a8:	012a012a 	.word	0x012a012a
   165ac:	012a012a 	.word	0x012a012a
   165b0:	012a012a 	.word	0x012a012a
   165b4:	012a012a 	.word	0x012a012a
   165b8:	012a012a 	.word	0x012a012a
   165bc:	00880088 	.word	0x00880088
   165c0:	00880088 	.word	0x00880088
   165c4:	00880088 	.word	0x00880088
   165c8:	020b0088 	.word	0x020b0088
   165cc:	01520088 	.word	0x01520088
   165d0:	00880088 	.word	0x00880088
   165d4:	0160014c 	.word	0x0160014c
   165d8:	00880088 	.word	0x00880088
   165dc:	00880088 	.word	0x00880088
   165e0:	016e0088 	.word	0x016e0088
   165e4:	0186012a 	.word	0x0186012a
   165e8:	008801c3 	.word	0x008801c3
   165ec:	01a20194 	.word	0x01a20194
   165f0:	01f301d1 	.word	0x01f301d1
   165f4:	00880088 	.word	0x00880088
   165f8:	00880088 	.word	0x00880088
   165fc:	0088012a 	.word	0x0088012a
   16600:	00880088 	.word	0x00880088
   16604:	00880088 	.word	0x00880088
   16608:	010c0088 	.word	0x010c0088
   1660c:	010c010c 	.word	0x010c010c
   16610:	010c010c 	.word	0x010c010c
   16614:	010c010c 	.word	0x010c010c
   16618:	010c010c 	.word	0x010c010c
   1661c:	0088010c 	.word	0x0088010c
   16620:	010c010c 	.word	0x010c010c
   16624:	010c010c 	.word	0x010c010c
   16628:	00880088 	.word	0x00880088
   1662c:	010c0088 	.word	0x010c0088
   16630:	013e010c 	.word	0x013e010c
   16634:	010c010c 	.word	0x010c010c
   16638:	010c010c 	.word	0x010c010c
   1663c:	010c      	.short	0x010c
   1663e:	2200      	movs	r2, #0
   16640:	a901      	add	r1, sp, #4
   16642:	4620      	mov	r0, r4
   16644:	f7fe fd56 	bl	150f4 <d_cv_qualifiers>
   16648:	4605      	mov	r5, r0
   1664a:	2800      	cmp	r0, #0
   1664c:	d034      	beq.n	166b8 <d_type+0x13c>
   1664e:	68e3      	ldr	r3, [r4, #12]
   16650:	781b      	ldrb	r3, [r3, #0]
   16652:	2b46      	cmp	r3, #70	; 0x46
   16654:	4620      	mov	r0, r4
   16656:	d034      	beq.n	166c2 <d_type+0x146>
   16658:	f7ff ff90 	bl	1657c <d_type>
   1665c:	6028      	str	r0, [r5, #0]
   1665e:	b358      	cbz	r0, 166b8 <d_type+0x13c>
   16660:	7803      	ldrb	r3, [r0, #0]
   16662:	3b1f      	subs	r3, #31
   16664:	2b01      	cmp	r3, #1
   16666:	d930      	bls.n	166ca <d_type+0x14e>
   16668:	9a01      	ldr	r2, [sp, #4]
   1666a:	b32a      	cbz	r2, 166b8 <d_type+0x13c>
   1666c:	6a23      	ldr	r3, [r4, #32]
   1666e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16670:	428b      	cmp	r3, r1
   16672:	da21      	bge.n	166b8 <d_type+0x13c>
   16674:	69e0      	ldr	r0, [r4, #28]
   16676:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   1667a:	9d01      	ldr	r5, [sp, #4]
   1667c:	1c59      	adds	r1, r3, #1
   1667e:	4628      	mov	r0, r5
   16680:	6221      	str	r1, [r4, #32]
   16682:	b003      	add	sp, #12
   16684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16688:	2301      	movs	r3, #1
   1668a:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1668c:	6343      	str	r3, [r0, #52]	; 0x34
   1668e:	f7ff fb51 	bl	15d34 <d_expression_1>
   16692:	6365      	str	r5, [r4, #52]	; 0x34
   16694:	4602      	mov	r2, r0
   16696:	2300      	movs	r3, #0
   16698:	2142      	movs	r1, #66	; 0x42
   1669a:	4620      	mov	r0, r4
   1669c:	f7fe fcde 	bl	1505c <d_make_comp>
   166a0:	4605      	mov	r5, r0
   166a2:	9001      	str	r0, [sp, #4]
   166a4:	b140      	cbz	r0, 166b8 <d_type+0x13c>
   166a6:	68e3      	ldr	r3, [r4, #12]
   166a8:	781a      	ldrb	r2, [r3, #0]
   166aa:	b12a      	cbz	r2, 166b8 <d_type+0x13c>
   166ac:	1c5a      	adds	r2, r3, #1
   166ae:	60e2      	str	r2, [r4, #12]
   166b0:	781b      	ldrb	r3, [r3, #0]
   166b2:	2b45      	cmp	r3, #69	; 0x45
   166b4:	f000 80aa 	beq.w	1680c <d_type+0x290>
   166b8:	2500      	movs	r5, #0
   166ba:	4628      	mov	r0, r5
   166bc:	b003      	add	sp, #12
   166be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   166c2:	f000 fd53 	bl	1716c <d_function_type>
   166c6:	6028      	str	r0, [r5, #0]
   166c8:	e7c9      	b.n	1665e <d_type+0xe2>
   166ca:	9a01      	ldr	r2, [sp, #4]
   166cc:	6843      	ldr	r3, [r0, #4]
   166ce:	6042      	str	r2, [r0, #4]
   166d0:	682a      	ldr	r2, [r5, #0]
   166d2:	9201      	str	r2, [sp, #4]
   166d4:	602b      	str	r3, [r5, #0]
   166d6:	e7c7      	b.n	16668 <d_type+0xec>
   166d8:	7853      	ldrb	r3, [r2, #1]
   166da:	2b78      	cmp	r3, #120	; 0x78
   166dc:	d0af      	beq.n	1663e <d_type+0xc2>
   166de:	1c53      	adds	r3, r2, #1
   166e0:	60c3      	str	r3, [r0, #12]
   166e2:	7853      	ldrb	r3, [r2, #1]
   166e4:	2b00      	cmp	r3, #0
   166e6:	d0e7      	beq.n	166b8 <d_type+0x13c>
   166e8:	1c93      	adds	r3, r2, #2
   166ea:	60c3      	str	r3, [r0, #12]
   166ec:	7853      	ldrb	r3, [r2, #1]
   166ee:	3b46      	subs	r3, #70	; 0x46
   166f0:	2b30      	cmp	r3, #48	; 0x30
   166f2:	d8e1      	bhi.n	166b8 <d_type+0x13c>
   166f4:	a101      	add	r1, pc, #4	; (adr r1, 166fc <d_type+0x180>)
   166f6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   166fa:	bf00      	nop
   166fc:	00016be7 	.word	0x00016be7
   16700:	000166b9 	.word	0x000166b9
   16704:	000166b9 	.word	0x000166b9
   16708:	000166b9 	.word	0x000166b9
   1670c:	000166b9 	.word	0x000166b9
   16710:	000166b9 	.word	0x000166b9
   16714:	000166b9 	.word	0x000166b9
   16718:	000166b9 	.word	0x000166b9
   1671c:	000166b9 	.word	0x000166b9
   16720:	000166b9 	.word	0x000166b9
   16724:	000166b9 	.word	0x000166b9
   16728:	000166b9 	.word	0x000166b9
   1672c:	000166b9 	.word	0x000166b9
   16730:	000166b9 	.word	0x000166b9
   16734:	00016689 	.word	0x00016689
   16738:	000166b9 	.word	0x000166b9
   1673c:	000166b9 	.word	0x000166b9
   16740:	000166b9 	.word	0x000166b9
   16744:	000166b9 	.word	0x000166b9
   16748:	000166b9 	.word	0x000166b9
   1674c:	000166b9 	.word	0x000166b9
   16750:	000166b9 	.word	0x000166b9
   16754:	000166b9 	.word	0x000166b9
   16758:	000166b9 	.word	0x000166b9
   1675c:	000166b9 	.word	0x000166b9
   16760:	000166b9 	.word	0x000166b9
   16764:	000166b9 	.word	0x000166b9
   16768:	00016bbb 	.word	0x00016bbb
   1676c:	000166b9 	.word	0x000166b9
   16770:	00016b8f 	.word	0x00016b8f
   16774:	00016b6f 	.word	0x00016b6f
   16778:	00016b45 	.word	0x00016b45
   1677c:	00016b17 	.word	0x00016b17
   16780:	000166b9 	.word	0x000166b9
   16784:	00016ae9 	.word	0x00016ae9
   16788:	00016ac5 	.word	0x00016ac5
   1678c:	000166b9 	.word	0x000166b9
   16790:	000166b9 	.word	0x000166b9
   16794:	000166b9 	.word	0x000166b9
   16798:	000166b9 	.word	0x000166b9
   1679c:	00016a8b 	.word	0x00016a8b
   167a0:	000166b9 	.word	0x000166b9
   167a4:	00016a75 	.word	0x00016a75
   167a8:	000166b9 	.word	0x000166b9
   167ac:	000166b9 	.word	0x000166b9
   167b0:	00016a47 	.word	0x00016a47
   167b4:	00016689 	.word	0x00016689
   167b8:	000166b9 	.word	0x000166b9
   167bc:	00016a11 	.word	0x00016a11
   167c0:	6960      	ldr	r0, [r4, #20]
   167c2:	69a5      	ldr	r5, [r4, #24]
   167c4:	49bc      	ldr	r1, [pc, #752]	; (16ab8 <d_type+0x53c>)
   167c6:	3b61      	subs	r3, #97	; 0x61
   167c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   167cc:	42a8      	cmp	r0, r5
   167ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   167d2:	f280 823a 	bge.w	16c4a <d_type+0x6ce>
   167d6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   167da:	6926      	ldr	r6, [r4, #16]
   167dc:	0089      	lsls	r1, r1, #2
   167de:	3001      	adds	r0, #1
   167e0:	1875      	adds	r5, r6, r1
   167e2:	6160      	str	r0, [r4, #20]
   167e4:	f000 8231 	beq.w	16c4a <d_type+0x6ce>
   167e8:	2027      	movs	r0, #39	; 0x27
   167ea:	5470      	strb	r0, [r6, r1]
   167ec:	606b      	str	r3, [r5, #4]
   167ee:	6859      	ldr	r1, [r3, #4]
   167f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   167f2:	3201      	adds	r2, #1
   167f4:	440b      	add	r3, r1
   167f6:	60e2      	str	r2, [r4, #12]
   167f8:	6323      	str	r3, [r4, #48]	; 0x30
   167fa:	e75e      	b.n	166ba <d_type+0x13e>
   167fc:	4620      	mov	r0, r4
   167fe:	f7ff fd01 	bl	16204 <d_name>
   16802:	4605      	mov	r5, r0
   16804:	9001      	str	r0, [sp, #4]
   16806:	2d00      	cmp	r5, #0
   16808:	f43f af56 	beq.w	166b8 <d_type+0x13c>
   1680c:	6a23      	ldr	r3, [r4, #32]
   1680e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16810:	4293      	cmp	r3, r2
   16812:	f6bf af51 	bge.w	166b8 <d_type+0x13c>
   16816:	69e1      	ldr	r1, [r4, #28]
   16818:	1c5a      	adds	r2, r3, #1
   1681a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1681e:	9d01      	ldr	r5, [sp, #4]
   16820:	6222      	str	r2, [r4, #32]
   16822:	e74a      	b.n	166ba <d_type+0x13e>
   16824:	3201      	adds	r2, #1
   16826:	60e2      	str	r2, [r4, #12]
   16828:	4620      	mov	r0, r4
   1682a:	f7fe fde9 	bl	15400 <d_source_name>
   1682e:	2300      	movs	r3, #0
   16830:	4602      	mov	r2, r0
   16832:	2128      	movs	r1, #40	; 0x28
   16834:	4620      	mov	r0, r4
   16836:	f7fe fc11 	bl	1505c <d_make_comp>
   1683a:	4605      	mov	r5, r0
   1683c:	9001      	str	r0, [sp, #4]
   1683e:	e7e2      	b.n	16806 <d_type+0x28a>
   16840:	4620      	mov	r0, r4
   16842:	f000 fc93 	bl	1716c <d_function_type>
   16846:	4605      	mov	r5, r0
   16848:	9001      	str	r0, [sp, #4]
   1684a:	e7dc      	b.n	16806 <d_type+0x28a>
   1684c:	3201      	adds	r2, #1
   1684e:	60e2      	str	r2, [r4, #12]
   16850:	4620      	mov	r0, r4
   16852:	f7ff fe93 	bl	1657c <d_type>
   16856:	2300      	movs	r3, #0
   16858:	4602      	mov	r2, r0
   1685a:	2125      	movs	r1, #37	; 0x25
   1685c:	4620      	mov	r0, r4
   1685e:	f7fe fbfd 	bl	1505c <d_make_comp>
   16862:	4605      	mov	r5, r0
   16864:	9001      	str	r0, [sp, #4]
   16866:	e7ce      	b.n	16806 <d_type+0x28a>
   16868:	3201      	adds	r2, #1
   1686a:	60e2      	str	r2, [r4, #12]
   1686c:	4620      	mov	r0, r4
   1686e:	f7ff fe85 	bl	1657c <d_type>
   16872:	2300      	movs	r3, #0
   16874:	4602      	mov	r2, r0
   16876:	2126      	movs	r1, #38	; 0x26
   16878:	4620      	mov	r0, r4
   1687a:	f7fe fbef 	bl	1505c <d_make_comp>
   1687e:	4605      	mov	r5, r0
   16880:	9001      	str	r0, [sp, #4]
   16882:	e7c0      	b.n	16806 <d_type+0x28a>
   16884:	3201      	adds	r2, #1
   16886:	60e2      	str	r2, [r4, #12]
   16888:	4620      	mov	r0, r4
   1688a:	f7ff fe77 	bl	1657c <d_type>
   1688e:	4605      	mov	r5, r0
   16890:	2800      	cmp	r0, #0
   16892:	f000 80bb 	beq.w	16a0c <d_type+0x490>
   16896:	4620      	mov	r0, r4
   16898:	f7ff fe70 	bl	1657c <d_type>
   1689c:	2800      	cmp	r0, #0
   1689e:	f000 80b5 	beq.w	16a0c <d_type+0x490>
   168a2:	4603      	mov	r3, r0
   168a4:	462a      	mov	r2, r5
   168a6:	212b      	movs	r1, #43	; 0x2b
   168a8:	4620      	mov	r0, r4
   168aa:	f7fe fbd7 	bl	1505c <d_make_comp>
   168ae:	4605      	mov	r5, r0
   168b0:	9501      	str	r5, [sp, #4]
   168b2:	e7a8      	b.n	16806 <d_type+0x28a>
   168b4:	3201      	adds	r2, #1
   168b6:	60e2      	str	r2, [r4, #12]
   168b8:	4620      	mov	r0, r4
   168ba:	f7ff fe5f 	bl	1657c <d_type>
   168be:	2300      	movs	r3, #0
   168c0:	4602      	mov	r2, r0
   168c2:	2124      	movs	r1, #36	; 0x24
   168c4:	4620      	mov	r0, r4
   168c6:	f7fe fbc9 	bl	1505c <d_make_comp>
   168ca:	4605      	mov	r5, r0
   168cc:	9001      	str	r0, [sp, #4]
   168ce:	e79a      	b.n	16806 <d_type+0x28a>
   168d0:	3201      	adds	r2, #1
   168d2:	60e2      	str	r2, [r4, #12]
   168d4:	4620      	mov	r0, r4
   168d6:	f7ff fe51 	bl	1657c <d_type>
   168da:	2300      	movs	r3, #0
   168dc:	4602      	mov	r2, r0
   168de:	2123      	movs	r1, #35	; 0x23
   168e0:	4620      	mov	r0, r4
   168e2:	f7fe fbbb 	bl	1505c <d_make_comp>
   168e6:	4605      	mov	r5, r0
   168e8:	9001      	str	r0, [sp, #4]
   168ea:	e78c      	b.n	16806 <d_type+0x28a>
   168ec:	7853      	ldrb	r3, [r2, #1]
   168ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   168f2:	2a09      	cmp	r2, #9
   168f4:	d905      	bls.n	16902 <d_type+0x386>
   168f6:	2b5f      	cmp	r3, #95	; 0x5f
   168f8:	d003      	beq.n	16902 <d_type+0x386>
   168fa:	3b41      	subs	r3, #65	; 0x41
   168fc:	2b19      	cmp	r3, #25
   168fe:	f200 81c3 	bhi.w	16c88 <d_type+0x70c>
   16902:	2100      	movs	r1, #0
   16904:	4620      	mov	r0, r4
   16906:	f7fe fdf3 	bl	154f0 <d_substitution>
   1690a:	68e3      	ldr	r3, [r4, #12]
   1690c:	9001      	str	r0, [sp, #4]
   1690e:	781b      	ldrb	r3, [r3, #0]
   16910:	2b49      	cmp	r3, #73	; 0x49
   16912:	4605      	mov	r5, r0
   16914:	f47f aed1 	bne.w	166ba <d_type+0x13e>
   16918:	4620      	mov	r0, r4
   1691a:	f7ff fc69 	bl	161f0 <d_template_args>
   1691e:	462a      	mov	r2, r5
   16920:	4603      	mov	r3, r0
   16922:	2104      	movs	r1, #4
   16924:	4620      	mov	r0, r4
   16926:	f7fe fb99 	bl	1505c <d_make_comp>
   1692a:	4605      	mov	r5, r0
   1692c:	e7c0      	b.n	168b0 <d_type+0x334>
   1692e:	3201      	adds	r2, #1
   16930:	60e2      	str	r2, [r4, #12]
   16932:	4620      	mov	r0, r4
   16934:	f7ff fe22 	bl	1657c <d_type>
   16938:	2300      	movs	r3, #0
   1693a:	4602      	mov	r2, r0
   1693c:	2122      	movs	r1, #34	; 0x22
   1693e:	4620      	mov	r0, r4
   16940:	f7fe fb8c 	bl	1505c <d_make_comp>
   16944:	4605      	mov	r5, r0
   16946:	9001      	str	r0, [sp, #4]
   16948:	e75d      	b.n	16806 <d_type+0x28a>
   1694a:	4620      	mov	r0, r4
   1694c:	f7fe fd36 	bl	153bc <d_template_param>
   16950:	68e6      	ldr	r6, [r4, #12]
   16952:	9001      	str	r0, [sp, #4]
   16954:	7833      	ldrb	r3, [r6, #0]
   16956:	2b49      	cmp	r3, #73	; 0x49
   16958:	4605      	mov	r5, r0
   1695a:	f47f af54 	bne.w	16806 <d_type+0x28a>
   1695e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16960:	2b00      	cmp	r3, #0
   16962:	f040 81a9 	bne.w	16cb8 <d_type+0x73c>
   16966:	2800      	cmp	r0, #0
   16968:	f43f aea6 	beq.w	166b8 <d_type+0x13c>
   1696c:	6a23      	ldr	r3, [r4, #32]
   1696e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16970:	4293      	cmp	r3, r2
   16972:	f6bf aea1 	bge.w	166b8 <d_type+0x13c>
   16976:	69e1      	ldr	r1, [r4, #28]
   16978:	1c5a      	adds	r2, r3, #1
   1697a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   1697e:	6222      	str	r2, [r4, #32]
   16980:	4620      	mov	r0, r4
   16982:	9d01      	ldr	r5, [sp, #4]
   16984:	f7ff fc34 	bl	161f0 <d_template_args>
   16988:	462a      	mov	r2, r5
   1698a:	4603      	mov	r3, r0
   1698c:	e7c9      	b.n	16922 <d_type+0x3a6>
   1698e:	3201      	adds	r2, #1
   16990:	60e2      	str	r2, [r4, #12]
   16992:	4620      	mov	r0, r4
   16994:	f7fe fd34 	bl	15400 <d_source_name>
   16998:	68e3      	ldr	r3, [r4, #12]
   1699a:	9001      	str	r0, [sp, #4]
   1699c:	781b      	ldrb	r3, [r3, #0]
   1699e:	2b49      	cmp	r3, #73	; 0x49
   169a0:	4605      	mov	r5, r0
   169a2:	f000 817e 	beq.w	16ca2 <d_type+0x726>
   169a6:	4620      	mov	r0, r4
   169a8:	f7ff fde8 	bl	1657c <d_type>
   169ac:	9b01      	ldr	r3, [sp, #4]
   169ae:	4602      	mov	r2, r0
   169b0:	2121      	movs	r1, #33	; 0x21
   169b2:	4620      	mov	r0, r4
   169b4:	f7fe fb52 	bl	1505c <d_make_comp>
   169b8:	4605      	mov	r5, r0
   169ba:	9001      	str	r0, [sp, #4]
   169bc:	e723      	b.n	16806 <d_type+0x28a>
   169be:	1c51      	adds	r1, r2, #1
   169c0:	60e1      	str	r1, [r4, #12]
   169c2:	7853      	ldrb	r3, [r2, #1]
   169c4:	2b5f      	cmp	r3, #95	; 0x5f
   169c6:	f000 8144 	beq.w	16c52 <d_type+0x6d6>
   169ca:	3b30      	subs	r3, #48	; 0x30
   169cc:	2b09      	cmp	r3, #9
   169ce:	f200 814e 	bhi.w	16c6e <d_type+0x6f2>
   169d2:	460b      	mov	r3, r1
   169d4:	3301      	adds	r3, #1
   169d6:	60e3      	str	r3, [r4, #12]
   169d8:	781a      	ldrb	r2, [r3, #0]
   169da:	3a30      	subs	r2, #48	; 0x30
   169dc:	2a09      	cmp	r2, #9
   169de:	d9f9      	bls.n	169d4 <d_type+0x458>
   169e0:	6962      	ldr	r2, [r4, #20]
   169e2:	69a0      	ldr	r0, [r4, #24]
   169e4:	4282      	cmp	r2, r0
   169e6:	da11      	bge.n	16a0c <d_type+0x490>
   169e8:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   169ec:	6926      	ldr	r6, [r4, #16]
   169ee:	0080      	lsls	r0, r0, #2
   169f0:	3201      	adds	r2, #1
   169f2:	1835      	adds	r5, r6, r0
   169f4:	6162      	str	r2, [r4, #20]
   169f6:	d009      	beq.n	16a0c <d_type+0x490>
   169f8:	1a5a      	subs	r2, r3, r1
   169fa:	d007      	beq.n	16a0c <d_type+0x490>
   169fc:	2700      	movs	r7, #0
   169fe:	5437      	strb	r7, [r6, r0]
   16a00:	6069      	str	r1, [r5, #4]
   16a02:	60aa      	str	r2, [r5, #8]
   16a04:	781a      	ldrb	r2, [r3, #0]
   16a06:	2a5f      	cmp	r2, #95	; 0x5f
   16a08:	f000 8190 	beq.w	16d2c <d_type+0x7b0>
   16a0c:	2500      	movs	r5, #0
   16a0e:	e74f      	b.n	168b0 <d_type+0x334>
   16a10:	7893      	ldrb	r3, [r2, #2]
   16a12:	2b5f      	cmp	r3, #95	; 0x5f
   16a14:	f000 8180 	beq.w	16d18 <d_type+0x79c>
   16a18:	f7fe fc9c 	bl	15354 <d_number_component>
   16a1c:	4605      	mov	r5, r0
   16a1e:	2d00      	cmp	r5, #0
   16a20:	f43f af46 	beq.w	168b0 <d_type+0x334>
   16a24:	68e3      	ldr	r3, [r4, #12]
   16a26:	781a      	ldrb	r2, [r3, #0]
   16a28:	2a5f      	cmp	r2, #95	; 0x5f
   16a2a:	d1ef      	bne.n	16a0c <d_type+0x490>
   16a2c:	3301      	adds	r3, #1
   16a2e:	60e3      	str	r3, [r4, #12]
   16a30:	4620      	mov	r0, r4
   16a32:	f7ff fda3 	bl	1657c <d_type>
   16a36:	462a      	mov	r2, r5
   16a38:	4603      	mov	r3, r0
   16a3a:	212d      	movs	r1, #45	; 0x2d
   16a3c:	4620      	mov	r0, r4
   16a3e:	f7fe fb0d 	bl	1505c <d_make_comp>
   16a42:	4605      	mov	r5, r0
   16a44:	e734      	b.n	168b0 <d_type+0x334>
   16a46:	6942      	ldr	r2, [r0, #20]
   16a48:	6983      	ldr	r3, [r0, #24]
   16a4a:	429a      	cmp	r2, r3
   16a4c:	f280 80fd 	bge.w	16c4a <d_type+0x6ce>
   16a50:	230c      	movs	r3, #12
   16a52:	6901      	ldr	r1, [r0, #16]
   16a54:	fb03 f302 	mul.w	r3, r3, r2
   16a58:	18cd      	adds	r5, r1, r3
   16a5a:	f102 0201 	add.w	r2, r2, #1
   16a5e:	6142      	str	r2, [r0, #20]
   16a60:	f000 80f3 	beq.w	16c4a <d_type+0x6ce>
   16a64:	4a15      	ldr	r2, [pc, #84]	; (16abc <d_type+0x540>)
   16a66:	2027      	movs	r0, #39	; 0x27
   16a68:	54c8      	strb	r0, [r1, r3]
   16a6a:	606a      	str	r2, [r5, #4]
   16a6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16a6e:	3308      	adds	r3, #8
   16a70:	6323      	str	r3, [r4, #48]	; 0x30
   16a72:	e622      	b.n	166ba <d_type+0x13e>
   16a74:	f7ff fd82 	bl	1657c <d_type>
   16a78:	2300      	movs	r3, #0
   16a7a:	4602      	mov	r2, r0
   16a7c:	214a      	movs	r1, #74	; 0x4a
   16a7e:	4620      	mov	r0, r4
   16a80:	f7fe faec 	bl	1505c <d_make_comp>
   16a84:	4605      	mov	r5, r0
   16a86:	9001      	str	r0, [sp, #4]
   16a88:	e6bd      	b.n	16806 <d_type+0x28a>
   16a8a:	6942      	ldr	r2, [r0, #20]
   16a8c:	6983      	ldr	r3, [r0, #24]
   16a8e:	429a      	cmp	r2, r3
   16a90:	f280 80db 	bge.w	16c4a <d_type+0x6ce>
   16a94:	230c      	movs	r3, #12
   16a96:	6901      	ldr	r1, [r0, #16]
   16a98:	fb03 f302 	mul.w	r3, r3, r2
   16a9c:	18cd      	adds	r5, r1, r3
   16a9e:	f102 0201 	add.w	r2, r2, #1
   16aa2:	6142      	str	r2, [r0, #20]
   16aa4:	f000 80d1 	beq.w	16c4a <d_type+0x6ce>
   16aa8:	2027      	movs	r0, #39	; 0x27
   16aaa:	4a05      	ldr	r2, [pc, #20]	; (16ac0 <d_type+0x544>)
   16aac:	54c8      	strb	r0, [r1, r3]
   16aae:	606a      	str	r2, [r5, #4]
   16ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16ab2:	3311      	adds	r3, #17
   16ab4:	6323      	str	r3, [r4, #48]	; 0x30
   16ab6:	e600      	b.n	166ba <d_type+0x13e>
   16ab8:	000248e0 	.word	0x000248e0
   16abc:	00024b38 	.word	0x00024b38
   16ac0:	00024b60 	.word	0x00024b60
   16ac4:	6942      	ldr	r2, [r0, #20]
   16ac6:	6983      	ldr	r3, [r0, #24]
   16ac8:	429a      	cmp	r2, r3
   16aca:	f280 80be 	bge.w	16c4a <d_type+0x6ce>
   16ace:	230c      	movs	r3, #12
   16ad0:	6901      	ldr	r1, [r0, #16]
   16ad2:	fb03 f302 	mul.w	r3, r3, r2
   16ad6:	18cd      	adds	r5, r1, r3
   16ad8:	f102 0201 	add.w	r2, r2, #1
   16adc:	6142      	str	r2, [r0, #20]
   16ade:	f000 80b4 	beq.w	16c4a <d_type+0x6ce>
   16ae2:	2027      	movs	r0, #39	; 0x27
   16ae4:	4a92      	ldr	r2, [pc, #584]	; (16d30 <d_type+0x7b4>)
   16ae6:	e7bf      	b.n	16a68 <d_type+0x4ec>
   16ae8:	6942      	ldr	r2, [r0, #20]
   16aea:	6983      	ldr	r3, [r0, #24]
   16aec:	429a      	cmp	r2, r3
   16aee:	f280 80ac 	bge.w	16c4a <d_type+0x6ce>
   16af2:	230c      	movs	r3, #12
   16af4:	6901      	ldr	r1, [r0, #16]
   16af6:	fb03 f302 	mul.w	r3, r3, r2
   16afa:	18cd      	adds	r5, r1, r3
   16afc:	f102 0201 	add.w	r2, r2, #1
   16b00:	6142      	str	r2, [r0, #20]
   16b02:	f000 80a2 	beq.w	16c4a <d_type+0x6ce>
   16b06:	2027      	movs	r0, #39	; 0x27
   16b08:	4a8a      	ldr	r2, [pc, #552]	; (16d34 <d_type+0x7b8>)
   16b0a:	54c8      	strb	r0, [r1, r3]
   16b0c:	606a      	str	r2, [r5, #4]
   16b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16b10:	3304      	adds	r3, #4
   16b12:	6323      	str	r3, [r4, #48]	; 0x30
   16b14:	e5d1      	b.n	166ba <d_type+0x13e>
   16b16:	6942      	ldr	r2, [r0, #20]
   16b18:	6983      	ldr	r3, [r0, #24]
   16b1a:	429a      	cmp	r2, r3
   16b1c:	f280 8095 	bge.w	16c4a <d_type+0x6ce>
   16b20:	230c      	movs	r3, #12
   16b22:	6901      	ldr	r1, [r0, #16]
   16b24:	fb03 f302 	mul.w	r3, r3, r2
   16b28:	18cd      	adds	r5, r1, r3
   16b2a:	f102 0201 	add.w	r2, r2, #1
   16b2e:	6142      	str	r2, [r0, #20]
   16b30:	f000 808b 	beq.w	16c4a <d_type+0x6ce>
   16b34:	4a80      	ldr	r2, [pc, #512]	; (16d38 <d_type+0x7bc>)
   16b36:	2027      	movs	r0, #39	; 0x27
   16b38:	54c8      	strb	r0, [r1, r3]
   16b3a:	606a      	str	r2, [r5, #4]
   16b3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16b3e:	3309      	adds	r3, #9
   16b40:	6323      	str	r3, [r4, #48]	; 0x30
   16b42:	e5ba      	b.n	166ba <d_type+0x13e>
   16b44:	6942      	ldr	r2, [r0, #20]
   16b46:	6983      	ldr	r3, [r0, #24]
   16b48:	429a      	cmp	r2, r3
   16b4a:	da7e      	bge.n	16c4a <d_type+0x6ce>
   16b4c:	230c      	movs	r3, #12
   16b4e:	6901      	ldr	r1, [r0, #16]
   16b50:	fb03 f302 	mul.w	r3, r3, r2
   16b54:	18cd      	adds	r5, r1, r3
   16b56:	f102 0201 	add.w	r2, r2, #1
   16b5a:	6142      	str	r2, [r0, #20]
   16b5c:	d075      	beq.n	16c4a <d_type+0x6ce>
   16b5e:	2027      	movs	r0, #39	; 0x27
   16b60:	4a76      	ldr	r2, [pc, #472]	; (16d3c <d_type+0x7c0>)
   16b62:	54c8      	strb	r0, [r1, r3]
   16b64:	606a      	str	r2, [r5, #4]
   16b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16b68:	330a      	adds	r3, #10
   16b6a:	6323      	str	r3, [r4, #48]	; 0x30
   16b6c:	e5a5      	b.n	166ba <d_type+0x13e>
   16b6e:	6942      	ldr	r2, [r0, #20]
   16b70:	6983      	ldr	r3, [r0, #24]
   16b72:	429a      	cmp	r2, r3
   16b74:	da69      	bge.n	16c4a <d_type+0x6ce>
   16b76:	230c      	movs	r3, #12
   16b78:	6901      	ldr	r1, [r0, #16]
   16b7a:	fb03 f302 	mul.w	r3, r3, r2
   16b7e:	18cd      	adds	r5, r1, r3
   16b80:	f102 0201 	add.w	r2, r2, #1
   16b84:	6142      	str	r2, [r0, #20]
   16b86:	d060      	beq.n	16c4a <d_type+0x6ce>
   16b88:	2027      	movs	r0, #39	; 0x27
   16b8a:	4a6d      	ldr	r2, [pc, #436]	; (16d40 <d_type+0x7c4>)
   16b8c:	e7d4      	b.n	16b38 <d_type+0x5bc>
   16b8e:	6942      	ldr	r2, [r0, #20]
   16b90:	6983      	ldr	r3, [r0, #24]
   16b92:	429a      	cmp	r2, r3
   16b94:	f6bf ad90 	bge.w	166b8 <d_type+0x13c>
   16b98:	230c      	movs	r3, #12
   16b9a:	6901      	ldr	r1, [r0, #16]
   16b9c:	fb03 f302 	mul.w	r3, r3, r2
   16ba0:	18cd      	adds	r5, r1, r3
   16ba2:	f102 0201 	add.w	r2, r2, #1
   16ba6:	6142      	str	r2, [r0, #20]
   16ba8:	f43f ad87 	beq.w	166ba <d_type+0x13e>
   16bac:	2000      	movs	r0, #0
   16bae:	54c8      	strb	r0, [r1, r3]
   16bb0:	4a64      	ldr	r2, [pc, #400]	; (16d44 <d_type+0x7c8>)
   16bb2:	606a      	str	r2, [r5, #4]
   16bb4:	230e      	movs	r3, #14
   16bb6:	60ab      	str	r3, [r5, #8]
   16bb8:	e57f      	b.n	166ba <d_type+0x13e>
   16bba:	6942      	ldr	r2, [r0, #20]
   16bbc:	6983      	ldr	r3, [r0, #24]
   16bbe:	429a      	cmp	r2, r3
   16bc0:	f6bf ad7a 	bge.w	166b8 <d_type+0x13c>
   16bc4:	230c      	movs	r3, #12
   16bc6:	6901      	ldr	r1, [r0, #16]
   16bc8:	fb03 f302 	mul.w	r3, r3, r2
   16bcc:	18cd      	adds	r5, r1, r3
   16bce:	f102 0201 	add.w	r2, r2, #1
   16bd2:	6142      	str	r2, [r0, #20]
   16bd4:	f43f ad71 	beq.w	166ba <d_type+0x13e>
   16bd8:	2000      	movs	r0, #0
   16bda:	54c8      	strb	r0, [r1, r3]
   16bdc:	4a5a      	ldr	r2, [pc, #360]	; (16d48 <d_type+0x7cc>)
   16bde:	606a      	str	r2, [r5, #4]
   16be0:	2304      	movs	r3, #4
   16be2:	60ab      	str	r3, [r5, #8]
   16be4:	e569      	b.n	166ba <d_type+0x13e>
   16be6:	6943      	ldr	r3, [r0, #20]
   16be8:	6981      	ldr	r1, [r0, #24]
   16bea:	428b      	cmp	r3, r1
   16bec:	da7a      	bge.n	16ce4 <d_type+0x768>
   16bee:	6900      	ldr	r0, [r0, #16]
   16bf0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16bf4:	0089      	lsls	r1, r1, #2
   16bf6:	3301      	adds	r3, #1
   16bf8:	1845      	adds	r5, r0, r1
   16bfa:	262c      	movs	r6, #44	; 0x2c
   16bfc:	6163      	str	r3, [r4, #20]
   16bfe:	9501      	str	r5, [sp, #4]
   16c00:	5446      	strb	r6, [r0, r1]
   16c02:	7893      	ldrb	r3, [r2, #2]
   16c04:	3b30      	subs	r3, #48	; 0x30
   16c06:	b2db      	uxtb	r3, r3
   16c08:	2b09      	cmp	r3, #9
   16c0a:	bf94      	ite	ls
   16c0c:	2301      	movls	r3, #1
   16c0e:	2300      	movhi	r3, #0
   16c10:	812b      	strh	r3, [r5, #8]
   16c12:	d97b      	bls.n	16d0c <d_type+0x790>
   16c14:	4620      	mov	r0, r4
   16c16:	f7ff fcb1 	bl	1657c <d_type>
   16c1a:	9b01      	ldr	r3, [sp, #4]
   16c1c:	6068      	str	r0, [r5, #4]
   16c1e:	685b      	ldr	r3, [r3, #4]
   16c20:	2b00      	cmp	r3, #0
   16c22:	f43f ad49 	beq.w	166b8 <d_type+0x13c>
   16c26:	f104 000c 	add.w	r0, r4, #12
   16c2a:	f7fe fb69 	bl	15300 <d_number.isra.0>
   16c2e:	68e2      	ldr	r2, [r4, #12]
   16c30:	7813      	ldrb	r3, [r2, #0]
   16c32:	b113      	cbz	r3, 16c3a <d_type+0x6be>
   16c34:	1c53      	adds	r3, r2, #1
   16c36:	60e3      	str	r3, [r4, #12]
   16c38:	7813      	ldrb	r3, [r2, #0]
   16c3a:	9d01      	ldr	r5, [sp, #4]
   16c3c:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   16c40:	fab3 f383 	clz	r3, r3
   16c44:	095b      	lsrs	r3, r3, #5
   16c46:	816b      	strh	r3, [r5, #10]
   16c48:	e537      	b.n	166ba <d_type+0x13e>
   16c4a:	2300      	movs	r3, #0
   16c4c:	9301      	str	r3, [sp, #4]
   16c4e:	685b      	ldr	r3, [r3, #4]
   16c50:	deff      	udf	#255	; 0xff
   16c52:	2500      	movs	r5, #0
   16c54:	3101      	adds	r1, #1
   16c56:	60e1      	str	r1, [r4, #12]
   16c58:	4620      	mov	r0, r4
   16c5a:	f7ff fc8f 	bl	1657c <d_type>
   16c5e:	462a      	mov	r2, r5
   16c60:	4603      	mov	r3, r0
   16c62:	212a      	movs	r1, #42	; 0x2a
   16c64:	4620      	mov	r0, r4
   16c66:	f7fe f9f9 	bl	1505c <d_make_comp>
   16c6a:	4605      	mov	r5, r0
   16c6c:	e620      	b.n	168b0 <d_type+0x334>
   16c6e:	2301      	movs	r3, #1
   16c70:	6b65      	ldr	r5, [r4, #52]	; 0x34
   16c72:	6363      	str	r3, [r4, #52]	; 0x34
   16c74:	4620      	mov	r0, r4
   16c76:	f7ff f85d 	bl	15d34 <d_expression_1>
   16c7a:	6365      	str	r5, [r4, #52]	; 0x34
   16c7c:	4605      	mov	r5, r0
   16c7e:	2800      	cmp	r0, #0
   16c80:	f43f aec4 	beq.w	16a0c <d_type+0x490>
   16c84:	68e3      	ldr	r3, [r4, #12]
   16c86:	e6bd      	b.n	16a04 <d_type+0x488>
   16c88:	4620      	mov	r0, r4
   16c8a:	f7ff fabb 	bl	16204 <d_name>
   16c8e:	4605      	mov	r5, r0
   16c90:	9001      	str	r0, [sp, #4]
   16c92:	2800      	cmp	r0, #0
   16c94:	f43f ad10 	beq.w	166b8 <d_type+0x13c>
   16c98:	7803      	ldrb	r3, [r0, #0]
   16c9a:	2b18      	cmp	r3, #24
   16c9c:	f47f adb6 	bne.w	1680c <d_type+0x290>
   16ca0:	e50b      	b.n	166ba <d_type+0x13e>
   16ca2:	4620      	mov	r0, r4
   16ca4:	f7ff faa4 	bl	161f0 <d_template_args>
   16ca8:	462a      	mov	r2, r5
   16caa:	4603      	mov	r3, r0
   16cac:	2104      	movs	r1, #4
   16cae:	4620      	mov	r0, r4
   16cb0:	f7fe f9d4 	bl	1505c <d_make_comp>
   16cb4:	9001      	str	r0, [sp, #4]
   16cb6:	e676      	b.n	169a6 <d_type+0x42a>
   16cb8:	4620      	mov	r0, r4
   16cba:	f8d4 9014 	ldr.w	r9, [r4, #20]
   16cbe:	f8d4 8020 	ldr.w	r8, [r4, #32]
   16cc2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   16cc4:	6b25      	ldr	r5, [r4, #48]	; 0x30
   16cc6:	f7ff fa93 	bl	161f0 <d_template_args>
   16cca:	68e2      	ldr	r2, [r4, #12]
   16ccc:	7812      	ldrb	r2, [r2, #0]
   16cce:	2a49      	cmp	r2, #73	; 0x49
   16cd0:	d00b      	beq.n	16cea <d_type+0x76e>
   16cd2:	6325      	str	r5, [r4, #48]	; 0x30
   16cd4:	60e6      	str	r6, [r4, #12]
   16cd6:	f8c4 9014 	str.w	r9, [r4, #20]
   16cda:	f8c4 8020 	str.w	r8, [r4, #32]
   16cde:	62a7      	str	r7, [r4, #40]	; 0x28
   16ce0:	9d01      	ldr	r5, [sp, #4]
   16ce2:	e590      	b.n	16806 <d_type+0x28a>
   16ce4:	2300      	movs	r3, #0
   16ce6:	701b      	strb	r3, [r3, #0]
   16ce8:	deff      	udf	#255	; 0xff
   16cea:	9b01      	ldr	r3, [sp, #4]
   16cec:	2b00      	cmp	r3, #0
   16cee:	f43f ace3 	beq.w	166b8 <d_type+0x13c>
   16cf2:	6a22      	ldr	r2, [r4, #32]
   16cf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16cf6:	428a      	cmp	r2, r1
   16cf8:	f6bf acde 	bge.w	166b8 <d_type+0x13c>
   16cfc:	69e5      	ldr	r5, [r4, #28]
   16cfe:	1c51      	adds	r1, r2, #1
   16d00:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   16d04:	9a01      	ldr	r2, [sp, #4]
   16d06:	6221      	str	r1, [r4, #32]
   16d08:	4603      	mov	r3, r0
   16d0a:	e60a      	b.n	16922 <d_type+0x3a6>
   16d0c:	f104 000c 	add.w	r0, r4, #12
   16d10:	f7fe faf6 	bl	15300 <d_number.isra.0>
   16d14:	9d01      	ldr	r5, [sp, #4]
   16d16:	e77d      	b.n	16c14 <d_type+0x698>
   16d18:	3203      	adds	r2, #3
   16d1a:	2301      	movs	r3, #1
   16d1c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   16d1e:	60c2      	str	r2, [r0, #12]
   16d20:	6343      	str	r3, [r0, #52]	; 0x34
   16d22:	f7ff f807 	bl	15d34 <d_expression_1>
   16d26:	6366      	str	r6, [r4, #52]	; 0x34
   16d28:	4605      	mov	r5, r0
   16d2a:	e678      	b.n	16a1e <d_type+0x4a2>
   16d2c:	4619      	mov	r1, r3
   16d2e:	e791      	b.n	16c54 <d_type+0x6d8>
   16d30:	00024b4c 	.word	0x00024b4c
   16d34:	00024b24 	.word	0x00024b24
   16d38:	00024ae8 	.word	0x00024ae8
   16d3c:	00024b10 	.word	0x00024b10
   16d40:	00024afc 	.word	0x00024afc
   16d44:	0002500c 	.word	0x0002500c
   16d48:	00025004 	.word	0x00025004

00016d4c <d_operator_name>:
   16d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d4e:	68c3      	ldr	r3, [r0, #12]
   16d50:	781e      	ldrb	r6, [r3, #0]
   16d52:	4684      	mov	ip, r0
   16d54:	b326      	cbz	r6, 16da0 <d_operator_name+0x54>
   16d56:	1c5a      	adds	r2, r3, #1
   16d58:	60c2      	str	r2, [r0, #12]
   16d5a:	785a      	ldrb	r2, [r3, #1]
   16d5c:	781e      	ldrb	r6, [r3, #0]
   16d5e:	2a00      	cmp	r2, #0
   16d60:	d058      	beq.n	16e14 <d_operator_name+0xc8>
   16d62:	1c9a      	adds	r2, r3, #2
   16d64:	60c2      	str	r2, [r0, #12]
   16d66:	2e76      	cmp	r6, #118	; 0x76
   16d68:	4604      	mov	r4, r0
   16d6a:	f893 e001 	ldrb.w	lr, [r3, #1]
   16d6e:	d043      	beq.n	16df8 <d_operator_name+0xac>
   16d70:	2e63      	cmp	r6, #99	; 0x63
   16d72:	d116      	bne.n	16da2 <d_operator_name+0x56>
   16d74:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   16d78:	d113      	bne.n	16da2 <d_operator_name+0x56>
   16d7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16d7c:	6b85      	ldr	r5, [r0, #56]	; 0x38
   16d7e:	fab3 f383 	clz	r3, r3
   16d82:	095b      	lsrs	r3, r3, #5
   16d84:	6383      	str	r3, [r0, #56]	; 0x38
   16d86:	f7ff fbf9 	bl	1657c <d_type>
   16d8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16d8c:	4602      	mov	r2, r0
   16d8e:	2b00      	cmp	r3, #0
   16d90:	d052      	beq.n	16e38 <d_operator_name+0xec>
   16d92:	2300      	movs	r3, #0
   16d94:	2134      	movs	r1, #52	; 0x34
   16d96:	4620      	mov	r0, r4
   16d98:	f7fe f960 	bl	1505c <d_make_comp>
   16d9c:	63a5      	str	r5, [r4, #56]	; 0x38
   16d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16da0:	46b6      	mov	lr, r6
   16da2:	4c28      	ldr	r4, [pc, #160]	; (16e44 <d_operator_name+0xf8>)
   16da4:	2043      	movs	r0, #67	; 0x43
   16da6:	2200      	movs	r2, #0
   16da8:	e004      	b.n	16db4 <d_operator_name+0x68>
   16daa:	bf94      	ite	ls
   16dac:	1c5a      	addls	r2, r3, #1
   16dae:	4618      	movhi	r0, r3
   16db0:	4282      	cmp	r2, r0
   16db2:	d02d      	beq.n	16e10 <d_operator_name+0xc4>
   16db4:	1a83      	subs	r3, r0, r2
   16db6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   16dba:	eb02 0363 	add.w	r3, r2, r3, asr #1
   16dbe:	0119      	lsls	r1, r3, #4
   16dc0:	1867      	adds	r7, r4, r1
   16dc2:	5861      	ldr	r1, [r4, r1]
   16dc4:	780d      	ldrb	r5, [r1, #0]
   16dc6:	42b5      	cmp	r5, r6
   16dc8:	d1ef      	bne.n	16daa <d_operator_name+0x5e>
   16dca:	7849      	ldrb	r1, [r1, #1]
   16dcc:	4571      	cmp	r1, lr
   16dce:	d1ec      	bne.n	16daa <d_operator_name+0x5e>
   16dd0:	f8dc 3014 	ldr.w	r3, [ip, #20]
   16dd4:	f8dc 2018 	ldr.w	r2, [ip, #24]
   16dd8:	4293      	cmp	r3, r2
   16dda:	da19      	bge.n	16e10 <d_operator_name+0xc4>
   16ddc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16de0:	f8dc 1010 	ldr.w	r1, [ip, #16]
   16de4:	0092      	lsls	r2, r2, #2
   16de6:	3301      	adds	r3, #1
   16de8:	1888      	adds	r0, r1, r2
   16dea:	f8cc 3014 	str.w	r3, [ip, #20]
   16dee:	d013      	beq.n	16e18 <d_operator_name+0xcc>
   16df0:	2331      	movs	r3, #49	; 0x31
   16df2:	548b      	strb	r3, [r1, r2]
   16df4:	6047      	str	r7, [r0, #4]
   16df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16df8:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   16dfc:	b2eb      	uxtb	r3, r5
   16dfe:	2b09      	cmp	r3, #9
   16e00:	d8cf      	bhi.n	16da2 <d_operator_name+0x56>
   16e02:	f7fe fafd 	bl	15400 <d_source_name>
   16e06:	6963      	ldr	r3, [r4, #20]
   16e08:	69a2      	ldr	r2, [r4, #24]
   16e0a:	4293      	cmp	r3, r2
   16e0c:	4601      	mov	r1, r0
   16e0e:	db04      	blt.n	16e1a <d_operator_name+0xce>
   16e10:	2000      	movs	r0, #0
   16e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e14:	4696      	mov	lr, r2
   16e16:	e7c4      	b.n	16da2 <d_operator_name+0x56>
   16e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16e1e:	6926      	ldr	r6, [r4, #16]
   16e20:	0092      	lsls	r2, r2, #2
   16e22:	3301      	adds	r3, #1
   16e24:	18b0      	adds	r0, r6, r2
   16e26:	6163      	str	r3, [r4, #20]
   16e28:	d0f2      	beq.n	16e10 <d_operator_name+0xc4>
   16e2a:	2900      	cmp	r1, #0
   16e2c:	d0f0      	beq.n	16e10 <d_operator_name+0xc4>
   16e2e:	2332      	movs	r3, #50	; 0x32
   16e30:	54b3      	strb	r3, [r6, r2]
   16e32:	6045      	str	r5, [r0, #4]
   16e34:	6081      	str	r1, [r0, #8]
   16e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e38:	2133      	movs	r1, #51	; 0x33
   16e3a:	4620      	mov	r0, r4
   16e3c:	f7fe f90e 	bl	1505c <d_make_comp>
   16e40:	e7ac      	b.n	16d9c <d_operator_name+0x50>
   16e42:	bf00      	nop
   16e44:	00024b74 	.word	0x00024b74

00016e48 <d_parmlist>:
   16e48:	b530      	push	{r4, r5, lr}
   16e4a:	68c2      	ldr	r2, [r0, #12]
   16e4c:	b083      	sub	sp, #12
   16e4e:	2300      	movs	r3, #0
   16e50:	9301      	str	r3, [sp, #4]
   16e52:	7813      	ldrb	r3, [r2, #0]
   16e54:	b343      	cbz	r3, 16ea8 <d_parmlist+0x60>
   16e56:	2b45      	cmp	r3, #69	; 0x45
   16e58:	d026      	beq.n	16ea8 <d_parmlist+0x60>
   16e5a:	2b2e      	cmp	r3, #46	; 0x2e
   16e5c:	d024      	beq.n	16ea8 <d_parmlist+0x60>
   16e5e:	4604      	mov	r4, r0
   16e60:	ad01      	add	r5, sp, #4
   16e62:	e015      	b.n	16e90 <d_parmlist+0x48>
   16e64:	2b4f      	cmp	r3, #79	; 0x4f
   16e66:	d016      	beq.n	16e96 <d_parmlist+0x4e>
   16e68:	f7ff fb88 	bl	1657c <d_type>
   16e6c:	2300      	movs	r3, #0
   16e6e:	4602      	mov	r2, r0
   16e70:	212e      	movs	r1, #46	; 0x2e
   16e72:	b1c8      	cbz	r0, 16ea8 <d_parmlist+0x60>
   16e74:	4620      	mov	r0, r4
   16e76:	f7fe f8f1 	bl	1505c <d_make_comp>
   16e7a:	6028      	str	r0, [r5, #0]
   16e7c:	b1a0      	cbz	r0, 16ea8 <d_parmlist+0x60>
   16e7e:	68e2      	ldr	r2, [r4, #12]
   16e80:	7813      	ldrb	r3, [r2, #0]
   16e82:	f100 0508 	add.w	r5, r0, #8
   16e86:	b14b      	cbz	r3, 16e9c <d_parmlist+0x54>
   16e88:	2b45      	cmp	r3, #69	; 0x45
   16e8a:	d007      	beq.n	16e9c <d_parmlist+0x54>
   16e8c:	2b2e      	cmp	r3, #46	; 0x2e
   16e8e:	d005      	beq.n	16e9c <d_parmlist+0x54>
   16e90:	2b52      	cmp	r3, #82	; 0x52
   16e92:	4620      	mov	r0, r4
   16e94:	d1e6      	bne.n	16e64 <d_parmlist+0x1c>
   16e96:	7853      	ldrb	r3, [r2, #1]
   16e98:	2b45      	cmp	r3, #69	; 0x45
   16e9a:	d1e5      	bne.n	16e68 <d_parmlist+0x20>
   16e9c:	9801      	ldr	r0, [sp, #4]
   16e9e:	b118      	cbz	r0, 16ea8 <d_parmlist+0x60>
   16ea0:	6883      	ldr	r3, [r0, #8]
   16ea2:	b123      	cbz	r3, 16eae <d_parmlist+0x66>
   16ea4:	b003      	add	sp, #12
   16ea6:	bd30      	pop	{r4, r5, pc}
   16ea8:	2000      	movs	r0, #0
   16eaa:	b003      	add	sp, #12
   16eac:	bd30      	pop	{r4, r5, pc}
   16eae:	6842      	ldr	r2, [r0, #4]
   16eb0:	7811      	ldrb	r1, [r2, #0]
   16eb2:	2927      	cmp	r1, #39	; 0x27
   16eb4:	d1f6      	bne.n	16ea4 <d_parmlist+0x5c>
   16eb6:	6852      	ldr	r2, [r2, #4]
   16eb8:	7c11      	ldrb	r1, [r2, #16]
   16eba:	2909      	cmp	r1, #9
   16ebc:	d1f2      	bne.n	16ea4 <d_parmlist+0x5c>
   16ebe:	6851      	ldr	r1, [r2, #4]
   16ec0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   16ec2:	1a52      	subs	r2, r2, r1
   16ec4:	6322      	str	r2, [r4, #48]	; 0x30
   16ec6:	6043      	str	r3, [r0, #4]
   16ec8:	e7ec      	b.n	16ea4 <d_parmlist+0x5c>
   16eca:	bf00      	nop

00016ecc <d_unqualified_name>:
   16ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ece:	68c1      	ldr	r1, [r0, #12]
   16ed0:	780b      	ldrb	r3, [r1, #0]
   16ed2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16ed6:	2a09      	cmp	r2, #9
   16ed8:	4604      	mov	r4, r0
   16eda:	d920      	bls.n	16f1e <d_unqualified_name+0x52>
   16edc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   16ee0:	2a19      	cmp	r2, #25
   16ee2:	d925      	bls.n	16f30 <d_unqualified_name+0x64>
   16ee4:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   16ee8:	2a01      	cmp	r2, #1
   16eea:	d92c      	bls.n	16f46 <d_unqualified_name+0x7a>
   16eec:	2b4c      	cmp	r3, #76	; 0x4c
   16eee:	f000 8088 	beq.w	17002 <d_unqualified_name+0x136>
   16ef2:	2b55      	cmp	r3, #85	; 0x55
   16ef4:	d133      	bne.n	16f5e <d_unqualified_name+0x92>
   16ef6:	784b      	ldrb	r3, [r1, #1]
   16ef8:	2b6c      	cmp	r3, #108	; 0x6c
   16efa:	d033      	beq.n	16f64 <d_unqualified_name+0x98>
   16efc:	2b74      	cmp	r3, #116	; 0x74
   16efe:	d12e      	bne.n	16f5e <d_unqualified_name+0x92>
   16f00:	1c4b      	adds	r3, r1, #1
   16f02:	60c3      	str	r3, [r0, #12]
   16f04:	784b      	ldrb	r3, [r1, #1]
   16f06:	2b74      	cmp	r3, #116	; 0x74
   16f08:	d05a      	beq.n	16fc0 <d_unqualified_name+0xf4>
   16f0a:	2b42      	cmp	r3, #66	; 0x42
   16f0c:	f04f 0500 	mov.w	r5, #0
   16f10:	d10c      	bne.n	16f2c <d_unqualified_name+0x60>
   16f12:	4629      	mov	r1, r5
   16f14:	4620      	mov	r0, r4
   16f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16f1a:	f7fe bacd 	b.w	154b8 <d_abi_tags>
   16f1e:	f7fe fa6f 	bl	15400 <d_source_name>
   16f22:	68e3      	ldr	r3, [r4, #12]
   16f24:	781b      	ldrb	r3, [r3, #0]
   16f26:	4605      	mov	r5, r0
   16f28:	2b42      	cmp	r3, #66	; 0x42
   16f2a:	d0f2      	beq.n	16f12 <d_unqualified_name+0x46>
   16f2c:	4628      	mov	r0, r5
   16f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f30:	f7ff ff0c 	bl	16d4c <d_operator_name>
   16f34:	4605      	mov	r5, r0
   16f36:	b118      	cbz	r0, 16f40 <d_unqualified_name+0x74>
   16f38:	7803      	ldrb	r3, [r0, #0]
   16f3a:	2b31      	cmp	r3, #49	; 0x31
   16f3c:	f000 80b2 	beq.w	170a4 <d_unqualified_name+0x1d8>
   16f40:	68e3      	ldr	r3, [r4, #12]
   16f42:	781b      	ldrb	r3, [r3, #0]
   16f44:	e7f0      	b.n	16f28 <d_unqualified_name+0x5c>
   16f46:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16f48:	b125      	cbz	r5, 16f54 <d_unqualified_name+0x88>
   16f4a:	782a      	ldrb	r2, [r5, #0]
   16f4c:	2a00      	cmp	r2, #0
   16f4e:	d06c      	beq.n	1702a <d_unqualified_name+0x15e>
   16f50:	2a18      	cmp	r2, #24
   16f52:	d06a      	beq.n	1702a <d_unqualified_name+0x15e>
   16f54:	2b43      	cmp	r3, #67	; 0x43
   16f56:	f000 80bf 	beq.w	170d8 <d_unqualified_name+0x20c>
   16f5a:	2b44      	cmp	r3, #68	; 0x44
   16f5c:	d06f      	beq.n	1703e <d_unqualified_name+0x172>
   16f5e:	2500      	movs	r5, #0
   16f60:	4628      	mov	r0, r5
   16f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f64:	1c4b      	adds	r3, r1, #1
   16f66:	60c3      	str	r3, [r0, #12]
   16f68:	784b      	ldrb	r3, [r1, #1]
   16f6a:	2b6c      	cmp	r3, #108	; 0x6c
   16f6c:	d1cd      	bne.n	16f0a <d_unqualified_name+0x3e>
   16f6e:	3102      	adds	r1, #2
   16f70:	60c1      	str	r1, [r0, #12]
   16f72:	f7ff ff69 	bl	16e48 <d_parmlist>
   16f76:	4606      	mov	r6, r0
   16f78:	b1f0      	cbz	r0, 16fb8 <d_unqualified_name+0xec>
   16f7a:	68e2      	ldr	r2, [r4, #12]
   16f7c:	7813      	ldrb	r3, [r2, #0]
   16f7e:	2b45      	cmp	r3, #69	; 0x45
   16f80:	d1c3      	bne.n	16f0a <d_unqualified_name+0x3e>
   16f82:	3201      	adds	r2, #1
   16f84:	60e2      	str	r2, [r4, #12]
   16f86:	4620      	mov	r0, r4
   16f88:	f7fe f9fc 	bl	15384 <d_compact_number>
   16f8c:	2800      	cmp	r0, #0
   16f8e:	db13      	blt.n	16fb8 <d_unqualified_name+0xec>
   16f90:	6963      	ldr	r3, [r4, #20]
   16f92:	69a2      	ldr	r2, [r4, #24]
   16f94:	4293      	cmp	r3, r2
   16f96:	da0f      	bge.n	16fb8 <d_unqualified_name+0xec>
   16f98:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16f9c:	6921      	ldr	r1, [r4, #16]
   16f9e:	0092      	lsls	r2, r2, #2
   16fa0:	3301      	adds	r3, #1
   16fa2:	188d      	adds	r5, r1, r2
   16fa4:	6163      	str	r3, [r4, #20]
   16fa6:	d0cb      	beq.n	16f40 <d_unqualified_name+0x74>
   16fa8:	2345      	movs	r3, #69	; 0x45
   16faa:	548b      	strb	r3, [r1, r2]
   16fac:	606e      	str	r6, [r5, #4]
   16fae:	60a8      	str	r0, [r5, #8]
   16fb0:	6a23      	ldr	r3, [r4, #32]
   16fb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16fb4:	4293      	cmp	r3, r2
   16fb6:	db1c      	blt.n	16ff2 <d_unqualified_name+0x126>
   16fb8:	68e3      	ldr	r3, [r4, #12]
   16fba:	2500      	movs	r5, #0
   16fbc:	781b      	ldrb	r3, [r3, #0]
   16fbe:	e7b3      	b.n	16f28 <d_unqualified_name+0x5c>
   16fc0:	3102      	adds	r1, #2
   16fc2:	60c1      	str	r1, [r0, #12]
   16fc4:	f7fe f9de 	bl	15384 <d_compact_number>
   16fc8:	2800      	cmp	r0, #0
   16fca:	dbf5      	blt.n	16fb8 <d_unqualified_name+0xec>
   16fcc:	6963      	ldr	r3, [r4, #20]
   16fce:	69a2      	ldr	r2, [r4, #24]
   16fd0:	4293      	cmp	r3, r2
   16fd2:	daf1      	bge.n	16fb8 <d_unqualified_name+0xec>
   16fd4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16fd8:	6921      	ldr	r1, [r4, #16]
   16fda:	0092      	lsls	r2, r2, #2
   16fdc:	3301      	adds	r3, #1
   16fde:	188d      	adds	r5, r1, r2
   16fe0:	6163      	str	r3, [r4, #20]
   16fe2:	d0ad      	beq.n	16f40 <d_unqualified_name+0x74>
   16fe4:	2347      	movs	r3, #71	; 0x47
   16fe6:	548b      	strb	r3, [r1, r2]
   16fe8:	6068      	str	r0, [r5, #4]
   16fea:	6a23      	ldr	r3, [r4, #32]
   16fec:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16fee:	4293      	cmp	r3, r2
   16ff0:	dae2      	bge.n	16fb8 <d_unqualified_name+0xec>
   16ff2:	69e1      	ldr	r1, [r4, #28]
   16ff4:	68e2      	ldr	r2, [r4, #12]
   16ff6:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   16ffa:	3301      	adds	r3, #1
   16ffc:	6223      	str	r3, [r4, #32]
   16ffe:	7813      	ldrb	r3, [r2, #0]
   17000:	e792      	b.n	16f28 <d_unqualified_name+0x5c>
   17002:	3101      	adds	r1, #1
   17004:	60c1      	str	r1, [r0, #12]
   17006:	f7fe f9fb 	bl	15400 <d_source_name>
   1700a:	4605      	mov	r5, r0
   1700c:	2800      	cmp	r0, #0
   1700e:	d0a6      	beq.n	16f5e <d_unqualified_name+0x92>
   17010:	68e2      	ldr	r2, [r4, #12]
   17012:	7813      	ldrb	r3, [r2, #0]
   17014:	2b5f      	cmp	r3, #95	; 0x5f
   17016:	d187      	bne.n	16f28 <d_unqualified_name+0x5c>
   17018:	4620      	mov	r0, r4
   1701a:	3201      	adds	r2, #1
   1701c:	f840 2f0c 	str.w	r2, [r0, #12]!
   17020:	f7fe f96e 	bl	15300 <d_number.isra.0>
   17024:	2800      	cmp	r0, #0
   17026:	da8b      	bge.n	16f40 <d_unqualified_name+0x74>
   17028:	e799      	b.n	16f5e <d_unqualified_name+0x92>
   1702a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1702c:	68aa      	ldr	r2, [r5, #8]
   1702e:	4413      	add	r3, r2
   17030:	6323      	str	r3, [r4, #48]	; 0x30
   17032:	780b      	ldrb	r3, [r1, #0]
   17034:	2b43      	cmp	r3, #67	; 0x43
   17036:	d04f      	beq.n	170d8 <d_unqualified_name+0x20c>
   17038:	2b44      	cmp	r3, #68	; 0x44
   1703a:	f47f af66 	bne.w	16f0a <d_unqualified_name+0x3e>
   1703e:	784b      	ldrb	r3, [r1, #1]
   17040:	3b30      	subs	r3, #48	; 0x30
   17042:	2b05      	cmp	r3, #5
   17044:	d88b      	bhi.n	16f5e <d_unqualified_name+0x92>
   17046:	a201      	add	r2, pc, #4	; (adr r2, 1704c <d_unqualified_name+0x180>)
   17048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1704c:	000170a1 	.word	0x000170a1
   17050:	00017065 	.word	0x00017065
   17054:	0001709d 	.word	0x0001709d
   17058:	00016f5f 	.word	0x00016f5f
   1705c:	00017099 	.word	0x00017099
   17060:	00017095 	.word	0x00017095
   17064:	2702      	movs	r7, #2
   17066:	6963      	ldr	r3, [r4, #20]
   17068:	69a2      	ldr	r2, [r4, #24]
   1706a:	1c88      	adds	r0, r1, #2
   1706c:	4293      	cmp	r3, r2
   1706e:	60e0      	str	r0, [r4, #12]
   17070:	da56      	bge.n	17120 <d_unqualified_name+0x254>
   17072:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   17076:	6920      	ldr	r0, [r4, #16]
   17078:	0092      	lsls	r2, r2, #2
   1707a:	3301      	adds	r3, #1
   1707c:	1886      	adds	r6, r0, r2
   1707e:	6163      	str	r3, [r4, #20]
   17080:	d005      	beq.n	1708e <d_unqualified_name+0x1c2>
   17082:	2d00      	cmp	r5, #0
   17084:	d04f      	beq.n	17126 <d_unqualified_name+0x25a>
   17086:	2308      	movs	r3, #8
   17088:	5483      	strb	r3, [r0, r2]
   1708a:	7137      	strb	r7, [r6, #4]
   1708c:	60b5      	str	r5, [r6, #8]
   1708e:	788b      	ldrb	r3, [r1, #2]
   17090:	4635      	mov	r5, r6
   17092:	e749      	b.n	16f28 <d_unqualified_name+0x5c>
   17094:	2705      	movs	r7, #5
   17096:	e7e6      	b.n	17066 <d_unqualified_name+0x19a>
   17098:	2704      	movs	r7, #4
   1709a:	e7e4      	b.n	17066 <d_unqualified_name+0x19a>
   1709c:	2703      	movs	r7, #3
   1709e:	e7e2      	b.n	17066 <d_unqualified_name+0x19a>
   170a0:	2701      	movs	r7, #1
   170a2:	e7e0      	b.n	17066 <d_unqualified_name+0x19a>
   170a4:	6842      	ldr	r2, [r0, #4]
   170a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   170a8:	6896      	ldr	r6, [r2, #8]
   170aa:	6810      	ldr	r0, [r2, #0]
   170ac:	491f      	ldr	r1, [pc, #124]	; (1712c <d_unqualified_name+0x260>)
   170ae:	3307      	adds	r3, #7
   170b0:	4433      	add	r3, r6
   170b2:	6323      	str	r3, [r4, #48]	; 0x30
   170b4:	f008 fa98 	bl	1f5e8 <strcmp>
   170b8:	2800      	cmp	r0, #0
   170ba:	f47f af41 	bne.w	16f40 <d_unqualified_name+0x74>
   170be:	4620      	mov	r0, r4
   170c0:	f7fe f99e 	bl	15400 <d_source_name>
   170c4:	462a      	mov	r2, r5
   170c6:	4603      	mov	r3, r0
   170c8:	2136      	movs	r1, #54	; 0x36
   170ca:	4620      	mov	r0, r4
   170cc:	f7fd ffc6 	bl	1505c <d_make_comp>
   170d0:	68e3      	ldr	r3, [r4, #12]
   170d2:	4605      	mov	r5, r0
   170d4:	781b      	ldrb	r3, [r3, #0]
   170d6:	e727      	b.n	16f28 <d_unqualified_name+0x5c>
   170d8:	784b      	ldrb	r3, [r1, #1]
   170da:	3b31      	subs	r3, #49	; 0x31
   170dc:	2b04      	cmp	r3, #4
   170de:	f63f af3e 	bhi.w	16f5e <d_unqualified_name+0x92>
   170e2:	e8df f003 	tbb	[pc, r3]
   170e6:	0315      	.short	0x0315
   170e8:	191b      	.short	0x191b
   170ea:	17          	.byte	0x17
   170eb:	00          	.byte	0x00
   170ec:	2702      	movs	r7, #2
   170ee:	6963      	ldr	r3, [r4, #20]
   170f0:	69a2      	ldr	r2, [r4, #24]
   170f2:	1c88      	adds	r0, r1, #2
   170f4:	4293      	cmp	r3, r2
   170f6:	60e0      	str	r0, [r4, #12]
   170f8:	da12      	bge.n	17120 <d_unqualified_name+0x254>
   170fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   170fe:	6920      	ldr	r0, [r4, #16]
   17100:	0092      	lsls	r2, r2, #2
   17102:	3301      	adds	r3, #1
   17104:	1886      	adds	r6, r0, r2
   17106:	6163      	str	r3, [r4, #20]
   17108:	d0c1      	beq.n	1708e <d_unqualified_name+0x1c2>
   1710a:	b165      	cbz	r5, 17126 <d_unqualified_name+0x25a>
   1710c:	2307      	movs	r3, #7
   1710e:	e7bb      	b.n	17088 <d_unqualified_name+0x1bc>
   17110:	2701      	movs	r7, #1
   17112:	e7ec      	b.n	170ee <d_unqualified_name+0x222>
   17114:	2705      	movs	r7, #5
   17116:	e7ea      	b.n	170ee <d_unqualified_name+0x222>
   17118:	2704      	movs	r7, #4
   1711a:	e7e8      	b.n	170ee <d_unqualified_name+0x222>
   1711c:	2703      	movs	r7, #3
   1711e:	e7e6      	b.n	170ee <d_unqualified_name+0x222>
   17120:	788b      	ldrb	r3, [r1, #2]
   17122:	2500      	movs	r5, #0
   17124:	e700      	b.n	16f28 <d_unqualified_name+0x5c>
   17126:	788b      	ldrb	r3, [r1, #2]
   17128:	e6fe      	b.n	16f28 <d_unqualified_name+0x5c>
   1712a:	bf00      	nop
   1712c:	0002501c 	.word	0x0002501c

00017130 <d_bare_function_type>:
   17130:	b570      	push	{r4, r5, r6, lr}
   17132:	68c3      	ldr	r3, [r0, #12]
   17134:	781a      	ldrb	r2, [r3, #0]
   17136:	2a4a      	cmp	r2, #74	; 0x4a
   17138:	4604      	mov	r4, r0
   1713a:	d00d      	beq.n	17158 <d_bare_function_type+0x28>
   1713c:	b971      	cbnz	r1, 1715c <d_bare_function_type+0x2c>
   1713e:	460d      	mov	r5, r1
   17140:	4620      	mov	r0, r4
   17142:	f7ff fe81 	bl	16e48 <d_parmlist>
   17146:	b178      	cbz	r0, 17168 <d_bare_function_type+0x38>
   17148:	4603      	mov	r3, r0
   1714a:	462a      	mov	r2, r5
   1714c:	4620      	mov	r0, r4
   1714e:	2129      	movs	r1, #41	; 0x29
   17150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17154:	f7fd bf82 	b.w	1505c <d_make_comp>
   17158:	3301      	adds	r3, #1
   1715a:	60c3      	str	r3, [r0, #12]
   1715c:	4620      	mov	r0, r4
   1715e:	f7ff fa0d 	bl	1657c <d_type>
   17162:	4605      	mov	r5, r0
   17164:	2800      	cmp	r0, #0
   17166:	d1eb      	bne.n	17140 <d_bare_function_type+0x10>
   17168:	2000      	movs	r0, #0
   1716a:	bd70      	pop	{r4, r5, r6, pc}

0001716c <d_function_type>:
   1716c:	68c3      	ldr	r3, [r0, #12]
   1716e:	781a      	ldrb	r2, [r3, #0]
   17170:	2a46      	cmp	r2, #70	; 0x46
   17172:	d001      	beq.n	17178 <d_function_type+0xc>
   17174:	2000      	movs	r0, #0
   17176:	4770      	bx	lr
   17178:	b510      	push	{r4, lr}
   1717a:	1c5a      	adds	r2, r3, #1
   1717c:	60c2      	str	r2, [r0, #12]
   1717e:	785a      	ldrb	r2, [r3, #1]
   17180:	2a59      	cmp	r2, #89	; 0x59
   17182:	bf04      	itt	eq
   17184:	3302      	addeq	r3, #2
   17186:	60c3      	streq	r3, [r0, #12]
   17188:	2101      	movs	r1, #1
   1718a:	4604      	mov	r4, r0
   1718c:	f7ff ffd0 	bl	17130 <d_bare_function_type>
   17190:	4601      	mov	r1, r0
   17192:	4620      	mov	r0, r4
   17194:	f7fe f814 	bl	151c0 <d_ref_qualifier>
   17198:	68e3      	ldr	r3, [r4, #12]
   1719a:	781a      	ldrb	r2, [r3, #0]
   1719c:	2a45      	cmp	r2, #69	; 0x45
   1719e:	d001      	beq.n	171a4 <d_function_type+0x38>
   171a0:	2000      	movs	r0, #0
   171a2:	bd10      	pop	{r4, pc}
   171a4:	3301      	adds	r3, #1
   171a6:	60e3      	str	r3, [r4, #12]
   171a8:	bd10      	pop	{r4, pc}
   171aa:	bf00      	nop

000171ac <d_encoding>:
   171ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171b0:	68c3      	ldr	r3, [r0, #12]
   171b2:	781a      	ldrb	r2, [r3, #0]
   171b4:	2a47      	cmp	r2, #71	; 0x47
   171b6:	4605      	mov	r5, r0
   171b8:	d01f      	beq.n	171fa <d_encoding+0x4e>
   171ba:	2a54      	cmp	r2, #84	; 0x54
   171bc:	d01d      	beq.n	171fa <d_encoding+0x4e>
   171be:	460e      	mov	r6, r1
   171c0:	f7ff f820 	bl	16204 <d_name>
   171c4:	4604      	mov	r4, r0
   171c6:	b310      	cbz	r0, 1720e <d_encoding+0x62>
   171c8:	b32e      	cbz	r6, 17216 <d_encoding+0x6a>
   171ca:	68ab      	ldr	r3, [r5, #8]
   171cc:	07db      	lsls	r3, r3, #31
   171ce:	d422      	bmi.n	17216 <d_encoding+0x6a>
   171d0:	7823      	ldrb	r3, [r4, #0]
   171d2:	f1a3 021c 	sub.w	r2, r3, #28
   171d6:	2a04      	cmp	r2, #4
   171d8:	d940      	bls.n	1725c <d_encoding+0xb0>
   171da:	2b4c      	cmp	r3, #76	; 0x4c
   171dc:	d03e      	beq.n	1725c <d_encoding+0xb0>
   171de:	2b02      	cmp	r3, #2
   171e0:	d116      	bne.n	17210 <d_encoding+0x64>
   171e2:	68a3      	ldr	r3, [r4, #8]
   171e4:	781a      	ldrb	r2, [r3, #0]
   171e6:	f1a2 011c 	sub.w	r1, r2, #28
   171ea:	2904      	cmp	r1, #4
   171ec:	f240 8283 	bls.w	176f6 <d_encoding+0x54a>
   171f0:	2a4c      	cmp	r2, #76	; 0x4c
   171f2:	f000 8280 	beq.w	176f6 <d_encoding+0x54a>
   171f6:	60a3      	str	r3, [r4, #8]
   171f8:	e00a      	b.n	17210 <d_encoding+0x64>
   171fa:	6b29      	ldr	r1, [r5, #48]	; 0x30
   171fc:	f101 0214 	add.w	r2, r1, #20
   17200:	632a      	str	r2, [r5, #48]	; 0x30
   17202:	781a      	ldrb	r2, [r3, #0]
   17204:	2a54      	cmp	r2, #84	; 0x54
   17206:	d02b      	beq.n	17260 <d_encoding+0xb4>
   17208:	2a47      	cmp	r2, #71	; 0x47
   1720a:	f000 809f 	beq.w	1734c <d_encoding+0x1a0>
   1720e:	2400      	movs	r4, #0
   17210:	4620      	mov	r0, r4
   17212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17216:	68eb      	ldr	r3, [r5, #12]
   17218:	781b      	ldrb	r3, [r3, #0]
   1721a:	2b00      	cmp	r3, #0
   1721c:	d0f8      	beq.n	17210 <d_encoding+0x64>
   1721e:	2b45      	cmp	r3, #69	; 0x45
   17220:	d0f6      	beq.n	17210 <d_encoding+0x64>
   17222:	4621      	mov	r1, r4
   17224:	780a      	ldrb	r2, [r1, #0]
   17226:	2a20      	cmp	r2, #32
   17228:	f200 8113 	bhi.w	17452 <d_encoding+0x2a6>
   1722c:	2a1c      	cmp	r2, #28
   1722e:	f080 8112 	bcs.w	17456 <d_encoding+0x2aa>
   17232:	2a04      	cmp	r2, #4
   17234:	f040 8101 	bne.w	1743a <d_encoding+0x28e>
   17238:	684a      	ldr	r2, [r1, #4]
   1723a:	b16a      	cbz	r2, 17258 <d_encoding+0xac>
   1723c:	7813      	ldrb	r3, [r2, #0]
   1723e:	2b08      	cmp	r3, #8
   17240:	f103 31ff 	add.w	r1, r3, #4294967295
   17244:	f200 80f6 	bhi.w	17434 <d_encoding+0x288>
   17248:	2b07      	cmp	r3, #7
   1724a:	f080 80f6 	bcs.w	1743a <d_encoding+0x28e>
   1724e:	2901      	cmp	r1, #1
   17250:	d802      	bhi.n	17258 <d_encoding+0xac>
   17252:	6892      	ldr	r2, [r2, #8]
   17254:	2a00      	cmp	r2, #0
   17256:	d1f1      	bne.n	1723c <d_encoding+0x90>
   17258:	2101      	movs	r1, #1
   1725a:	e0ef      	b.n	1743c <d_encoding+0x290>
   1725c:	6864      	ldr	r4, [r4, #4]
   1725e:	e7b7      	b.n	171d0 <d_encoding+0x24>
   17260:	1c5a      	adds	r2, r3, #1
   17262:	60ea      	str	r2, [r5, #12]
   17264:	785a      	ldrb	r2, [r3, #1]
   17266:	2a00      	cmp	r2, #0
   17268:	d0d1      	beq.n	1720e <d_encoding+0x62>
   1726a:	1c9a      	adds	r2, r3, #2
   1726c:	60ea      	str	r2, [r5, #12]
   1726e:	785b      	ldrb	r3, [r3, #1]
   17270:	3b43      	subs	r3, #67	; 0x43
   17272:	2b33      	cmp	r3, #51	; 0x33
   17274:	d8cb      	bhi.n	1720e <d_encoding+0x62>
   17276:	a201      	add	r2, pc, #4	; (adr r2, 1727c <d_encoding+0xd0>)
   17278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1727c:	000176b7 	.word	0x000176b7
   17280:	0001720f 	.word	0x0001720f
   17284:	0001720f 	.word	0x0001720f
   17288:	000176a1 	.word	0x000176a1
   1728c:	0001720f 	.word	0x0001720f
   17290:	0001768b 	.word	0x0001768b
   17294:	00017675 	.word	0x00017675
   17298:	0001765f 	.word	0x0001765f
   1729c:	0001720f 	.word	0x0001720f
   172a0:	0001720f 	.word	0x0001720f
   172a4:	0001720f 	.word	0x0001720f
   172a8:	0001720f 	.word	0x0001720f
   172ac:	0001720f 	.word	0x0001720f
   172b0:	0001720f 	.word	0x0001720f
   172b4:	0001720f 	.word	0x0001720f
   172b8:	0001720f 	.word	0x0001720f
   172bc:	00017649 	.word	0x00017649
   172c0:	0001762f 	.word	0x0001762f
   172c4:	0001720f 	.word	0x0001720f
   172c8:	00017615 	.word	0x00017615
   172cc:	000175ff 	.word	0x000175ff
   172d0:	0001720f 	.word	0x0001720f
   172d4:	0001720f 	.word	0x0001720f
   172d8:	0001720f 	.word	0x0001720f
   172dc:	0001720f 	.word	0x0001720f
   172e0:	0001720f 	.word	0x0001720f
   172e4:	0001720f 	.word	0x0001720f
   172e8:	0001720f 	.word	0x0001720f
   172ec:	0001720f 	.word	0x0001720f
   172f0:	0001720f 	.word	0x0001720f
   172f4:	0001720f 	.word	0x0001720f
   172f8:	0001720f 	.word	0x0001720f
   172fc:	000175cb 	.word	0x000175cb
   17300:	0001720f 	.word	0x0001720f
   17304:	0001720f 	.word	0x0001720f
   17308:	0001720f 	.word	0x0001720f
   1730c:	0001720f 	.word	0x0001720f
   17310:	000175a5 	.word	0x000175a5
   17314:	0001720f 	.word	0x0001720f
   17318:	0001720f 	.word	0x0001720f
   1731c:	0001720f 	.word	0x0001720f
   17320:	0001720f 	.word	0x0001720f
   17324:	0001720f 	.word	0x0001720f
   17328:	0001720f 	.word	0x0001720f
   1732c:	0001720f 	.word	0x0001720f
   17330:	0001720f 	.word	0x0001720f
   17334:	0001720f 	.word	0x0001720f
   17338:	0001720f 	.word	0x0001720f
   1733c:	0001720f 	.word	0x0001720f
   17340:	0001720f 	.word	0x0001720f
   17344:	0001720f 	.word	0x0001720f
   17348:	0001757f 	.word	0x0001757f
   1734c:	1c5a      	adds	r2, r3, #1
   1734e:	60ea      	str	r2, [r5, #12]
   17350:	785a      	ldrb	r2, [r3, #1]
   17352:	2a00      	cmp	r2, #0
   17354:	f43f af5b 	beq.w	1720e <d_encoding+0x62>
   17358:	1c9a      	adds	r2, r3, #2
   1735a:	60ea      	str	r2, [r5, #12]
   1735c:	785a      	ldrb	r2, [r3, #1]
   1735e:	3a41      	subs	r2, #65	; 0x41
   17360:	2a31      	cmp	r2, #49	; 0x31
   17362:	f63f af54 	bhi.w	1720e <d_encoding+0x62>
   17366:	a101      	add	r1, pc, #4	; (adr r1, 1736c <d_encoding+0x1c0>)
   17368:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1736c:	00017461 	.word	0x00017461
   17370:	0001720f 	.word	0x0001720f
   17374:	0001720f 	.word	0x0001720f
   17378:	0001720f 	.word	0x0001720f
   1737c:	0001720f 	.word	0x0001720f
   17380:	0001720f 	.word	0x0001720f
   17384:	0001720f 	.word	0x0001720f
   17388:	0001720f 	.word	0x0001720f
   1738c:	0001720f 	.word	0x0001720f
   17390:	0001720f 	.word	0x0001720f
   17394:	0001720f 	.word	0x0001720f
   17398:	0001720f 	.word	0x0001720f
   1739c:	0001720f 	.word	0x0001720f
   173a0:	0001720f 	.word	0x0001720f
   173a4:	0001720f 	.word	0x0001720f
   173a8:	0001720f 	.word	0x0001720f
   173ac:	0001720f 	.word	0x0001720f
   173b0:	00017561 	.word	0x00017561
   173b4:	0001720f 	.word	0x0001720f
   173b8:	00017535 	.word	0x00017535
   173bc:	0001720f 	.word	0x0001720f
   173c0:	0001751f 	.word	0x0001751f
   173c4:	0001720f 	.word	0x0001720f
   173c8:	0001720f 	.word	0x0001720f
   173cc:	0001720f 	.word	0x0001720f
   173d0:	0001720f 	.word	0x0001720f
   173d4:	0001720f 	.word	0x0001720f
   173d8:	0001720f 	.word	0x0001720f
   173dc:	0001720f 	.word	0x0001720f
   173e0:	0001720f 	.word	0x0001720f
   173e4:	0001720f 	.word	0x0001720f
   173e8:	0001720f 	.word	0x0001720f
   173ec:	0001720f 	.word	0x0001720f
   173f0:	0001720f 	.word	0x0001720f
   173f4:	0001720f 	.word	0x0001720f
   173f8:	0001720f 	.word	0x0001720f
   173fc:	0001720f 	.word	0x0001720f
   17400:	0001720f 	.word	0x0001720f
   17404:	0001720f 	.word	0x0001720f
   17408:	0001720f 	.word	0x0001720f
   1740c:	0001720f 	.word	0x0001720f
   17410:	0001720f 	.word	0x0001720f
   17414:	0001720f 	.word	0x0001720f
   17418:	0001720f 	.word	0x0001720f
   1741c:	0001720f 	.word	0x0001720f
   17420:	0001720f 	.word	0x0001720f
   17424:	0001720f 	.word	0x0001720f
   17428:	0001720f 	.word	0x0001720f
   1742c:	0001720f 	.word	0x0001720f
   17430:	00017479 	.word	0x00017479
   17434:	2b34      	cmp	r3, #52	; 0x34
   17436:	f47f af0f 	bne.w	17258 <d_encoding+0xac>
   1743a:	2100      	movs	r1, #0
   1743c:	4628      	mov	r0, r5
   1743e:	f7ff fe77 	bl	17130 <d_bare_function_type>
   17442:	4622      	mov	r2, r4
   17444:	4603      	mov	r3, r0
   17446:	2103      	movs	r1, #3
   17448:	4628      	mov	r0, r5
   1744a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1744e:	f7fd be05 	b.w	1505c <d_make_comp>
   17452:	2a4c      	cmp	r2, #76	; 0x4c
   17454:	d1f1      	bne.n	1743a <d_encoding+0x28e>
   17456:	6849      	ldr	r1, [r1, #4]
   17458:	2900      	cmp	r1, #0
   1745a:	f47f aee3 	bne.w	17224 <d_encoding+0x78>
   1745e:	e7ed      	b.n	1743c <d_encoding+0x290>
   17460:	2100      	movs	r1, #0
   17462:	4628      	mov	r0, r5
   17464:	f7ff fea2 	bl	171ac <d_encoding>
   17468:	2300      	movs	r3, #0
   1746a:	4602      	mov	r2, r0
   1746c:	2117      	movs	r1, #23
   1746e:	4628      	mov	r0, r5
   17470:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17474:	f7fd bdf2 	b.w	1505c <d_make_comp>
   17478:	f105 000c 	add.w	r0, r5, #12
   1747c:	f7fd ff40 	bl	15300 <d_number.isra.0>
   17480:	2801      	cmp	r0, #1
   17482:	f77f aec4 	ble.w	1720e <d_encoding+0x62>
   17486:	68eb      	ldr	r3, [r5, #12]
   17488:	781a      	ldrb	r2, [r3, #0]
   1748a:	2a00      	cmp	r2, #0
   1748c:	f43f aebf 	beq.w	1720e <d_encoding+0x62>
   17490:	1c5f      	adds	r7, r3, #1
   17492:	60ef      	str	r7, [r5, #12]
   17494:	781b      	ldrb	r3, [r3, #0]
   17496:	2b5f      	cmp	r3, #95	; 0x5f
   17498:	f47f aeb9 	bne.w	1720e <d_encoding+0x62>
   1749c:	2200      	movs	r2, #0
   1749e:	1e46      	subs	r6, r0, #1
   174a0:	4690      	mov	r8, r2
   174a2:	f04f 0940 	mov.w	r9, #64	; 0x40
   174a6:	783b      	ldrb	r3, [r7, #0]
   174a8:	2b00      	cmp	r3, #0
   174aa:	f43f aeb0 	beq.w	1720e <d_encoding+0x62>
   174ae:	2b24      	cmp	r3, #36	; 0x24
   174b0:	f000 8128 	beq.w	17704 <d_encoding+0x558>
   174b4:	463c      	mov	r4, r7
   174b6:	2100      	movs	r1, #0
   174b8:	e004      	b.n	174c4 <d_encoding+0x318>
   174ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   174be:	b123      	cbz	r3, 174ca <d_encoding+0x31e>
   174c0:	2b24      	cmp	r3, #36	; 0x24
   174c2:	d002      	beq.n	174ca <d_encoding+0x31e>
   174c4:	3101      	adds	r1, #1
   174c6:	42b1      	cmp	r1, r6
   174c8:	dbf7      	blt.n	174ba <d_encoding+0x30e>
   174ca:	696c      	ldr	r4, [r5, #20]
   174cc:	69a8      	ldr	r0, [r5, #24]
   174ce:	4284      	cmp	r4, r0
   174d0:	f280 8113 	bge.w	176fa <d_encoding+0x54e>
   174d4:	6928      	ldr	r0, [r5, #16]
   174d6:	1c63      	adds	r3, r4, #1
   174d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   174dc:	616b      	str	r3, [r5, #20]
   174de:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   174e2:	f000 810a 	beq.w	176fa <d_encoding+0x54e>
   174e6:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   174ea:	605f      	str	r7, [r3, #4]
   174ec:	6099      	str	r1, [r3, #8]
   174ee:	68ef      	ldr	r7, [r5, #12]
   174f0:	440f      	add	r7, r1
   174f2:	1a76      	subs	r6, r6, r1
   174f4:	60ef      	str	r7, [r5, #12]
   174f6:	2a00      	cmp	r2, #0
   174f8:	f000 8121 	beq.w	1773e <d_encoding+0x592>
   174fc:	213f      	movs	r1, #63	; 0x3f
   174fe:	4628      	mov	r0, r5
   17500:	f7fd fdac 	bl	1505c <d_make_comp>
   17504:	4602      	mov	r2, r0
   17506:	2800      	cmp	r0, #0
   17508:	f43f ae81 	beq.w	1720e <d_encoding+0x62>
   1750c:	2e00      	cmp	r6, #0
   1750e:	dcca      	bgt.n	174a6 <d_encoding+0x2fa>
   17510:	4628      	mov	r0, r5
   17512:	2300      	movs	r3, #0
   17514:	213e      	movs	r1, #62	; 0x3e
   17516:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1751a:	f7fd bd9f 	b.w	1505c <d_make_comp>
   1751e:	4628      	mov	r0, r5
   17520:	f7fe fe70 	bl	16204 <d_name>
   17524:	2300      	movs	r3, #0
   17526:	4602      	mov	r2, r0
   17528:	2113      	movs	r1, #19
   1752a:	4628      	mov	r0, r5
   1752c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17530:	f7fd bd94 	b.w	1505c <d_make_comp>
   17534:	789a      	ldrb	r2, [r3, #2]
   17536:	2100      	movs	r1, #0
   17538:	4628      	mov	r0, r5
   1753a:	2a00      	cmp	r2, #0
   1753c:	f000 8101 	beq.w	17742 <d_encoding+0x596>
   17540:	1cda      	adds	r2, r3, #3
   17542:	60ea      	str	r2, [r5, #12]
   17544:	789b      	ldrb	r3, [r3, #2]
   17546:	2b6e      	cmp	r3, #110	; 0x6e
   17548:	f040 80fb 	bne.w	17742 <d_encoding+0x596>
   1754c:	f7ff fe2e 	bl	171ac <d_encoding>
   17550:	2300      	movs	r3, #0
   17552:	4602      	mov	r2, r0
   17554:	2149      	movs	r1, #73	; 0x49
   17556:	4628      	mov	r0, r5
   17558:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1755c:	f7fd bd7e 	b.w	1505c <d_make_comp>
   17560:	4628      	mov	r0, r5
   17562:	f7fe fe4f 	bl	16204 <d_name>
   17566:	4604      	mov	r4, r0
   17568:	4628      	mov	r0, r5
   1756a:	f7fd fef3 	bl	15354 <d_number_component>
   1756e:	4622      	mov	r2, r4
   17570:	4603      	mov	r3, r0
   17572:	2116      	movs	r1, #22
   17574:	4628      	mov	r0, r5
   17576:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1757a:	f7fd bd6f 	b.w	1505c <d_make_comp>
   1757e:	2176      	movs	r1, #118	; 0x76
   17580:	4628      	mov	r0, r5
   17582:	f7fe f871 	bl	15668 <d_call_offset>
   17586:	2800      	cmp	r0, #0
   17588:	f43f ae41 	beq.w	1720e <d_encoding+0x62>
   1758c:	2100      	movs	r1, #0
   1758e:	4628      	mov	r0, r5
   17590:	f7ff fe0c 	bl	171ac <d_encoding>
   17594:	2300      	movs	r3, #0
   17596:	4602      	mov	r2, r0
   17598:	2110      	movs	r1, #16
   1759a:	4628      	mov	r0, r5
   1759c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   175a0:	f7fd bd5c 	b.w	1505c <d_make_comp>
   175a4:	2168      	movs	r1, #104	; 0x68
   175a6:	4628      	mov	r0, r5
   175a8:	f7fe f85e 	bl	15668 <d_call_offset>
   175ac:	2800      	cmp	r0, #0
   175ae:	f43f ae2e 	beq.w	1720e <d_encoding+0x62>
   175b2:	2100      	movs	r1, #0
   175b4:	4628      	mov	r0, r5
   175b6:	f7ff fdf9 	bl	171ac <d_encoding>
   175ba:	2300      	movs	r3, #0
   175bc:	4602      	mov	r2, r0
   175be:	210f      	movs	r1, #15
   175c0:	4628      	mov	r0, r5
   175c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   175c6:	f7fd bd49 	b.w	1505c <d_make_comp>
   175ca:	2100      	movs	r1, #0
   175cc:	4628      	mov	r0, r5
   175ce:	f7fe f84b 	bl	15668 <d_call_offset>
   175d2:	2800      	cmp	r0, #0
   175d4:	f43f ae1b 	beq.w	1720e <d_encoding+0x62>
   175d8:	2100      	movs	r1, #0
   175da:	4628      	mov	r0, r5
   175dc:	f7fe f844 	bl	15668 <d_call_offset>
   175e0:	2800      	cmp	r0, #0
   175e2:	f43f ae14 	beq.w	1720e <d_encoding+0x62>
   175e6:	2100      	movs	r1, #0
   175e8:	4628      	mov	r0, r5
   175ea:	f7ff fddf 	bl	171ac <d_encoding>
   175ee:	2300      	movs	r3, #0
   175f0:	4602      	mov	r2, r0
   175f2:	2111      	movs	r1, #17
   175f4:	4628      	mov	r0, r5
   175f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   175fa:	f7fd bd2f 	b.w	1505c <d_make_comp>
   175fe:	4628      	mov	r0, r5
   17600:	f7fe fe00 	bl	16204 <d_name>
   17604:	2300      	movs	r3, #0
   17606:	4602      	mov	r2, r0
   17608:	2115      	movs	r1, #21
   1760a:	4628      	mov	r0, r5
   1760c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17610:	f7fd bd24 	b.w	1505c <d_make_comp>
   17614:	310f      	adds	r1, #15
   17616:	6329      	str	r1, [r5, #48]	; 0x30
   17618:	4628      	mov	r0, r5
   1761a:	f7fe ffaf 	bl	1657c <d_type>
   1761e:	2300      	movs	r3, #0
   17620:	4602      	mov	r2, r0
   17622:	2109      	movs	r1, #9
   17624:	4628      	mov	r0, r5
   17626:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1762a:	f7fd bd17 	b.w	1505c <d_make_comp>
   1762e:	310a      	adds	r1, #10
   17630:	6329      	str	r1, [r5, #48]	; 0x30
   17632:	4628      	mov	r0, r5
   17634:	f7fe ffa2 	bl	1657c <d_type>
   17638:	2300      	movs	r3, #0
   1763a:	4602      	mov	r2, r0
   1763c:	210a      	movs	r1, #10
   1763e:	4628      	mov	r0, r5
   17640:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17644:	f7fd bd0a 	b.w	1505c <d_make_comp>
   17648:	4628      	mov	r0, r5
   1764a:	f7fe ff97 	bl	1657c <d_type>
   1764e:	2300      	movs	r3, #0
   17650:	4602      	mov	r2, r0
   17652:	210d      	movs	r1, #13
   17654:	4628      	mov	r0, r5
   17656:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1765a:	f7fd bcff 	b.w	1505c <d_make_comp>
   1765e:	4628      	mov	r0, r5
   17660:	f7fe ff8c 	bl	1657c <d_type>
   17664:	2300      	movs	r3, #0
   17666:	4602      	mov	r2, r0
   17668:	2112      	movs	r1, #18
   1766a:	4628      	mov	r0, r5
   1766c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17670:	f7fd bcf4 	b.w	1505c <d_make_comp>
   17674:	4628      	mov	r0, r5
   17676:	f7fe ff81 	bl	1657c <d_type>
   1767a:	2300      	movs	r3, #0
   1767c:	4602      	mov	r2, r0
   1767e:	210c      	movs	r1, #12
   17680:	4628      	mov	r0, r5
   17682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17686:	f7fd bce9 	b.w	1505c <d_make_comp>
   1768a:	4628      	mov	r0, r5
   1768c:	f7fe fdba 	bl	16204 <d_name>
   17690:	2300      	movs	r3, #0
   17692:	4602      	mov	r2, r0
   17694:	2114      	movs	r1, #20
   17696:	4628      	mov	r0, r5
   17698:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1769c:	f7fd bcde 	b.w	1505c <d_make_comp>
   176a0:	4628      	mov	r0, r5
   176a2:	f7fe ff6b 	bl	1657c <d_type>
   176a6:	2300      	movs	r3, #0
   176a8:	4602      	mov	r2, r0
   176aa:	210e      	movs	r1, #14
   176ac:	4628      	mov	r0, r5
   176ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   176b2:	f7fd bcd3 	b.w	1505c <d_make_comp>
   176b6:	4628      	mov	r0, r5
   176b8:	f7fe ff60 	bl	1657c <d_type>
   176bc:	4604      	mov	r4, r0
   176be:	f105 000c 	add.w	r0, r5, #12
   176c2:	f7fd fe1d 	bl	15300 <d_number.isra.0>
   176c6:	2800      	cmp	r0, #0
   176c8:	f6ff ada1 	blt.w	1720e <d_encoding+0x62>
   176cc:	68eb      	ldr	r3, [r5, #12]
   176ce:	781a      	ldrb	r2, [r3, #0]
   176d0:	2a5f      	cmp	r2, #95	; 0x5f
   176d2:	f47f ad9c 	bne.w	1720e <d_encoding+0x62>
   176d6:	3301      	adds	r3, #1
   176d8:	60eb      	str	r3, [r5, #12]
   176da:	4628      	mov	r0, r5
   176dc:	f7fe ff4e 	bl	1657c <d_type>
   176e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   176e2:	1d59      	adds	r1, r3, #5
   176e4:	6329      	str	r1, [r5, #48]	; 0x30
   176e6:	4602      	mov	r2, r0
   176e8:	4623      	mov	r3, r4
   176ea:	4628      	mov	r0, r5
   176ec:	210b      	movs	r1, #11
   176ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   176f2:	f7fd bcb3 	b.w	1505c <d_make_comp>
   176f6:	685b      	ldr	r3, [r3, #4]
   176f8:	e574      	b.n	171e4 <d_encoding+0x38>
   176fa:	68eb      	ldr	r3, [r5, #12]
   176fc:	440b      	add	r3, r1
   176fe:	60eb      	str	r3, [r5, #12]
   17700:	2400      	movs	r4, #0
   17702:	e585      	b.n	17210 <d_encoding+0x64>
   17704:	787b      	ldrb	r3, [r7, #1]
   17706:	2b53      	cmp	r3, #83	; 0x53
   17708:	d027      	beq.n	1775a <d_encoding+0x5ae>
   1770a:	2b5f      	cmp	r3, #95	; 0x5f
   1770c:	d023      	beq.n	17756 <d_encoding+0x5aa>
   1770e:	2b24      	cmp	r3, #36	; 0x24
   17710:	f47f ad7d 	bne.w	1720e <d_encoding+0x62>
   17714:	4618      	mov	r0, r3
   17716:	6969      	ldr	r1, [r5, #20]
   17718:	69ab      	ldr	r3, [r5, #24]
   1771a:	4299      	cmp	r1, r3
   1771c:	da1f      	bge.n	1775e <d_encoding+0x5b2>
   1771e:	692c      	ldr	r4, [r5, #16]
   17720:	1c4f      	adds	r7, r1, #1
   17722:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   17726:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   1772a:	616f      	str	r7, [r5, #20]
   1772c:	d017      	beq.n	1775e <d_encoding+0x5b2>
   1772e:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   17732:	6058      	str	r0, [r3, #4]
   17734:	68ef      	ldr	r7, [r5, #12]
   17736:	3702      	adds	r7, #2
   17738:	3e02      	subs	r6, #2
   1773a:	60ef      	str	r7, [r5, #12]
   1773c:	e6db      	b.n	174f6 <d_encoding+0x34a>
   1773e:	461a      	mov	r2, r3
   17740:	e6e4      	b.n	1750c <d_encoding+0x360>
   17742:	f7ff fd33 	bl	171ac <d_encoding>
   17746:	2300      	movs	r3, #0
   17748:	4602      	mov	r2, r0
   1774a:	2148      	movs	r1, #72	; 0x48
   1774c:	4628      	mov	r0, r5
   1774e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17752:	f7fd bc83 	b.w	1505c <d_make_comp>
   17756:	202e      	movs	r0, #46	; 0x2e
   17758:	e7dd      	b.n	17716 <d_encoding+0x56a>
   1775a:	202f      	movs	r0, #47	; 0x2f
   1775c:	e7db      	b.n	17716 <d_encoding+0x56a>
   1775e:	68eb      	ldr	r3, [r5, #12]
   17760:	3302      	adds	r3, #2
   17762:	60eb      	str	r3, [r5, #12]
   17764:	2400      	movs	r4, #0
   17766:	e553      	b.n	17210 <d_encoding+0x64>

00017768 <d_expr_primary>:
   17768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1776a:	68c2      	ldr	r2, [r0, #12]
   1776c:	7813      	ldrb	r3, [r2, #0]
   1776e:	2b4c      	cmp	r3, #76	; 0x4c
   17770:	d001      	beq.n	17776 <d_expr_primary+0xe>
   17772:	2000      	movs	r0, #0
   17774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17776:	1c53      	adds	r3, r2, #1
   17778:	60c3      	str	r3, [r0, #12]
   1777a:	7851      	ldrb	r1, [r2, #1]
   1777c:	295f      	cmp	r1, #95	; 0x5f
   1777e:	4605      	mov	r5, r0
   17780:	d03a      	beq.n	177f8 <d_expr_primary+0x90>
   17782:	295a      	cmp	r1, #90	; 0x5a
   17784:	d03f      	beq.n	17806 <d_expr_primary+0x9e>
   17786:	f7fe fef9 	bl	1657c <d_type>
   1778a:	2800      	cmp	r0, #0
   1778c:	d0f1      	beq.n	17772 <d_expr_primary+0xa>
   1778e:	7803      	ldrb	r3, [r0, #0]
   17790:	2b27      	cmp	r3, #39	; 0x27
   17792:	d046      	beq.n	17822 <d_expr_primary+0xba>
   17794:	68ee      	ldr	r6, [r5, #12]
   17796:	7833      	ldrb	r3, [r6, #0]
   17798:	2b6e      	cmp	r3, #110	; 0x6e
   1779a:	d04b      	beq.n	17834 <d_expr_primary+0xcc>
   1779c:	213c      	movs	r1, #60	; 0x3c
   1779e:	2b45      	cmp	r3, #69	; 0x45
   177a0:	d04e      	beq.n	17840 <d_expr_primary+0xd8>
   177a2:	2b00      	cmp	r3, #0
   177a4:	d0e5      	beq.n	17772 <d_expr_primary+0xa>
   177a6:	4633      	mov	r3, r6
   177a8:	e001      	b.n	177ae <d_expr_primary+0x46>
   177aa:	2c00      	cmp	r4, #0
   177ac:	d0e1      	beq.n	17772 <d_expr_primary+0xa>
   177ae:	3301      	adds	r3, #1
   177b0:	60eb      	str	r3, [r5, #12]
   177b2:	781c      	ldrb	r4, [r3, #0]
   177b4:	2c45      	cmp	r4, #69	; 0x45
   177b6:	d1f8      	bne.n	177aa <d_expr_primary+0x42>
   177b8:	1b9c      	subs	r4, r3, r6
   177ba:	696b      	ldr	r3, [r5, #20]
   177bc:	69aa      	ldr	r2, [r5, #24]
   177be:	4293      	cmp	r3, r2
   177c0:	da2d      	bge.n	1781e <d_expr_primary+0xb6>
   177c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   177c6:	692f      	ldr	r7, [r5, #16]
   177c8:	3301      	adds	r3, #1
   177ca:	0092      	lsls	r2, r2, #2
   177cc:	616b      	str	r3, [r5, #20]
   177ce:	18bb      	adds	r3, r7, r2
   177d0:	d025      	beq.n	1781e <d_expr_primary+0xb6>
   177d2:	b326      	cbz	r6, 1781e <d_expr_primary+0xb6>
   177d4:	b31c      	cbz	r4, 1781e <d_expr_primary+0xb6>
   177d6:	f04f 0e00 	mov.w	lr, #0
   177da:	f807 e002 	strb.w	lr, [r7, r2]
   177de:	605e      	str	r6, [r3, #4]
   177e0:	609c      	str	r4, [r3, #8]
   177e2:	4602      	mov	r2, r0
   177e4:	4628      	mov	r0, r5
   177e6:	f7fd fc39 	bl	1505c <d_make_comp>
   177ea:	68eb      	ldr	r3, [r5, #12]
   177ec:	781a      	ldrb	r2, [r3, #0]
   177ee:	2a45      	cmp	r2, #69	; 0x45
   177f0:	d1bf      	bne.n	17772 <d_expr_primary+0xa>
   177f2:	3301      	adds	r3, #1
   177f4:	60eb      	str	r3, [r5, #12]
   177f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177f8:	1c93      	adds	r3, r2, #2
   177fa:	60c3      	str	r3, [r0, #12]
   177fc:	7892      	ldrb	r2, [r2, #2]
   177fe:	2a5a      	cmp	r2, #90	; 0x5a
   17800:	bf18      	it	ne
   17802:	2000      	movne	r0, #0
   17804:	d107      	bne.n	17816 <d_expr_primary+0xae>
   17806:	3301      	adds	r3, #1
   17808:	60eb      	str	r3, [r5, #12]
   1780a:	2100      	movs	r1, #0
   1780c:	4628      	mov	r0, r5
   1780e:	f7ff fccd 	bl	171ac <d_encoding>
   17812:	68eb      	ldr	r3, [r5, #12]
   17814:	781a      	ldrb	r2, [r3, #0]
   17816:	2a45      	cmp	r2, #69	; 0x45
   17818:	d0eb      	beq.n	177f2 <d_expr_primary+0x8a>
   1781a:	2000      	movs	r0, #0
   1781c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1781e:	2300      	movs	r3, #0
   17820:	e7df      	b.n	177e2 <d_expr_primary+0x7a>
   17822:	6843      	ldr	r3, [r0, #4]
   17824:	7c1a      	ldrb	r2, [r3, #16]
   17826:	2a00      	cmp	r2, #0
   17828:	d0b4      	beq.n	17794 <d_expr_primary+0x2c>
   1782a:	685a      	ldr	r2, [r3, #4]
   1782c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1782e:	1a9b      	subs	r3, r3, r2
   17830:	632b      	str	r3, [r5, #48]	; 0x30
   17832:	e7af      	b.n	17794 <d_expr_primary+0x2c>
   17834:	1c72      	adds	r2, r6, #1
   17836:	60ea      	str	r2, [r5, #12]
   17838:	7873      	ldrb	r3, [r6, #1]
   1783a:	213d      	movs	r1, #61	; 0x3d
   1783c:	4616      	mov	r6, r2
   1783e:	e7ae      	b.n	1779e <d_expr_primary+0x36>
   17840:	2400      	movs	r4, #0
   17842:	e7ba      	b.n	177ba <d_expr_primary+0x52>

00017844 <d_print_comp_inner>:
   17844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17848:	4604      	mov	r4, r0
   1784a:	b095      	sub	sp, #84	; 0x54
   1784c:	2a00      	cmp	r2, #0
   1784e:	f000 80db 	beq.w	17a08 <d_print_comp_inner+0x1c4>
   17852:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   17856:	2f00      	cmp	r7, #0
   17858:	f040 80c2 	bne.w	179e0 <d_print_comp_inner+0x19c>
   1785c:	7813      	ldrb	r3, [r2, #0]
   1785e:	4688      	mov	r8, r1
   17860:	4615      	mov	r5, r2
   17862:	2b4d      	cmp	r3, #77	; 0x4d
   17864:	f201 81e6 	bhi.w	18c34 <d_print_comp_inner+0x13f0>
   17868:	e8df f013 	tbh	[pc, r3, lsl #1]
   1786c:	043c045a 	.word	0x043c045a
   17870:	03a4043c 	.word	0x03a4043c
   17874:	048904a5 	.word	0x048904a5
   17878:	038e04ea 	.word	0x038e04ea
   1787c:	0330037c 	.word	0x0330037c
   17880:	030a0356 	.word	0x030a0356
   17884:	029802e4 	.word	0x029802e4
   17888:	027202be 	.word	0x027202be
   1788c:	01f0024c 	.word	0x01f0024c
   17890:	01ca0226 	.word	0x01ca0226
   17894:	015801a4 	.word	0x015801a4
   17898:	0132017e 	.word	0x0132017e
   1789c:	00f2010b 	.word	0x00f2010b
   178a0:	00f200f2 	.word	0x00f200f2
   178a4:	00d400d4 	.word	0x00d400d4
   178a8:	00d400d4 	.word	0x00d400d4
   178ac:	00d400d4 	.word	0x00d400d4
   178b0:	06d500d4 	.word	0x06d500d4
   178b4:	00d406d5 	.word	0x00d406d5
   178b8:	06a900d4 	.word	0x06a900d4
   178bc:	069306fc 	.word	0x069306fc
   178c0:	0701071d 	.word	0x0701071d
   178c4:	07010788 	.word	0x07010788
   178c8:	057b057b 	.word	0x057b057b
   178cc:	06060630 	.word	0x06060630
   178d0:	09e405e0 	.word	0x09e405e0
   178d4:	068e05ad 	.word	0x068e05ad
   178d8:	004e0654 	.word	0x004e0654
   178dc:	094c0485 	.word	0x094c0485
   178e0:	08df08df 	.word	0x08df08df
   178e4:	08ae08ae 	.word	0x08ae08ae
   178e8:	05480888 	.word	0x05480888
   178ec:	08e4053a 	.word	0x08e4053a
   178f0:	09be0514 	.word	0x09be0514
   178f4:	09980914 	.word	0x09980914
   178f8:	07cb09e4 	.word	0x07cb09e4
   178fc:	07f10862 	.word	0x07f10862
   17900:	04130817 	.word	0x04130817
   17904:	055200d4 	.word	0x055200d4
   17908:	68ab      	ldr	r3, [r5, #8]
   1790a:	781b      	ldrb	r3, [r3, #0]
   1790c:	2b38      	cmp	r3, #56	; 0x38
   1790e:	d17b      	bne.n	17a08 <d_print_comp_inner+0x1c4>
   17910:	686a      	ldr	r2, [r5, #4]
   17912:	6853      	ldr	r3, [r2, #4]
   17914:	681b      	ldr	r3, [r3, #0]
   17916:	7859      	ldrb	r1, [r3, #1]
   17918:	2963      	cmp	r1, #99	; 0x63
   1791a:	f002 814a 	beq.w	19bb2 <d_print_comp_inner+0x236e>
   1791e:	f105 0308 	add.w	r3, r5, #8
   17922:	4641      	mov	r1, r8
   17924:	4620      	mov	r0, r4
   17926:	f003 fbbb 	bl	1b0a0 <d_maybe_print_fold_expression.isra.15>
   1792a:	4606      	mov	r6, r0
   1792c:	2800      	cmp	r0, #0
   1792e:	d157      	bne.n	179e0 <d_print_comp_inner+0x19c>
   17930:	686b      	ldr	r3, [r5, #4]
   17932:	781a      	ldrb	r2, [r3, #0]
   17934:	2a31      	cmp	r2, #49	; 0x31
   17936:	f002 836b 	beq.w	1a010 <d_print_comp_inner+0x27cc>
   1793a:	685b      	ldr	r3, [r3, #4]
   1793c:	49c7      	ldr	r1, [pc, #796]	; (17c5c <d_print_comp_inner+0x418>)
   1793e:	6818      	ldr	r0, [r3, #0]
   17940:	f007 fe52 	bl	1f5e8 <strcmp>
   17944:	68ab      	ldr	r3, [r5, #8]
   17946:	b920      	cbnz	r0, 17952 <d_print_comp_inner+0x10e>
   17948:	685a      	ldr	r2, [r3, #4]
   1794a:	7811      	ldrb	r1, [r2, #0]
   1794c:	2903      	cmp	r1, #3
   1794e:	f002 83a5 	beq.w	1a09c <d_print_comp_inner+0x2858>
   17952:	685a      	ldr	r2, [r3, #4]
   17954:	4641      	mov	r1, r8
   17956:	4620      	mov	r0, r4
   17958:	f003 fb3e 	bl	1afd8 <d_print_subexpr>
   1795c:	686f      	ldr	r7, [r5, #4]
   1795e:	49c0      	ldr	r1, [pc, #768]	; (17c60 <d_print_comp_inner+0x41c>)
   17960:	687b      	ldr	r3, [r7, #4]
   17962:	f8d3 9000 	ldr.w	r9, [r3]
   17966:	4648      	mov	r0, r9
   17968:	f007 fe3e 	bl	1f5e8 <strcmp>
   1796c:	4606      	mov	r6, r0
   1796e:	2800      	cmp	r0, #0
   17970:	f042 826f 	bne.w	19e52 <d_print_comp_inner+0x260e>
   17974:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17978:	29ff      	cmp	r1, #255	; 0xff
   1797a:	f002 844a 	beq.w	1a212 <d_print_comp_inner+0x29ce>
   1797e:	1c4a      	adds	r2, r1, #1
   17980:	235b      	movs	r3, #91	; 0x5b
   17982:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17986:	5463      	strb	r3, [r4, r1]
   17988:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1798c:	68ab      	ldr	r3, [r5, #8]
   1798e:	4641      	mov	r1, r8
   17990:	689a      	ldr	r2, [r3, #8]
   17992:	4620      	mov	r0, r4
   17994:	f002 fcfa 	bl	1a38c <d_print_comp>
   17998:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1799c:	29ff      	cmp	r1, #255	; 0xff
   1799e:	f002 8425 	beq.w	1a1ec <d_print_comp_inner+0x29a8>
   179a2:	235d      	movs	r3, #93	; 0x5d
   179a4:	1c4a      	adds	r2, r1, #1
   179a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   179aa:	5463      	strb	r3, [r4, r1]
   179ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   179b0:	686b      	ldr	r3, [r5, #4]
   179b2:	781a      	ldrb	r2, [r3, #0]
   179b4:	2a31      	cmp	r2, #49	; 0x31
   179b6:	d113      	bne.n	179e0 <d_print_comp_inner+0x19c>
   179b8:	685b      	ldr	r3, [r3, #4]
   179ba:	689a      	ldr	r2, [r3, #8]
   179bc:	2a01      	cmp	r2, #1
   179be:	d10f      	bne.n	179e0 <d_print_comp_inner+0x19c>
   179c0:	685b      	ldr	r3, [r3, #4]
   179c2:	781b      	ldrb	r3, [r3, #0]
   179c4:	2b3e      	cmp	r3, #62	; 0x3e
   179c6:	d10b      	bne.n	179e0 <d_print_comp_inner+0x19c>
   179c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   179cc:	29ff      	cmp	r1, #255	; 0xff
   179ce:	f002 8482 	beq.w	1a2d6 <d_print_comp_inner+0x2a92>
   179d2:	2329      	movs	r3, #41	; 0x29
   179d4:	1c4a      	adds	r2, r1, #1
   179d6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   179da:	5463      	strb	r3, [r4, r1]
   179dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   179e0:	b015      	add	sp, #84	; 0x54
   179e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179e6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   179ea:	2b00      	cmp	r3, #0
   179ec:	f2c1 84a4 	blt.w	19338 <d_print_comp_inner+0x1af4>
   179f0:	2b00      	cmp	r3, #0
   179f2:	f002 8432 	beq.w	1a25a <d_print_comp_inner+0x2a16>
   179f6:	6880      	ldr	r0, [r0, #8]
   179f8:	3b01      	subs	r3, #1
   179fa:	b110      	cbz	r0, 17a02 <d_print_comp_inner+0x1be>
   179fc:	7802      	ldrb	r2, [r0, #0]
   179fe:	2a2f      	cmp	r2, #47	; 0x2f
   17a00:	d0f6      	beq.n	179f0 <d_print_comp_inner+0x1ac>
   17a02:	b10f      	cbz	r7, 17a08 <d_print_comp_inner+0x1c4>
   17a04:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   17a08:	2301      	movs	r3, #1
   17a0a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   17a0e:	b015      	add	sp, #84	; 0x54
   17a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a14:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   17a18:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17a1c:	9505      	str	r5, [sp, #20]
   17a1e:	ab14      	add	r3, sp, #80	; 0x50
   17a20:	2100      	movs	r1, #0
   17a22:	f843 cd40 	str.w	ip, [r3, #-64]!
   17a26:	9106      	str	r1, [sp, #24]
   17a28:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17a2c:	9207      	str	r2, [sp, #28]
   17a2e:	686a      	ldr	r2, [r5, #4]
   17a30:	4641      	mov	r1, r8
   17a32:	4620      	mov	r0, r4
   17a34:	f002 fcaa 	bl	1a38c <d_print_comp>
   17a38:	9b06      	ldr	r3, [sp, #24]
   17a3a:	2b00      	cmp	r3, #0
   17a3c:	f001 8389 	beq.w	19152 <d_print_comp_inner+0x190e>
   17a40:	9b04      	ldr	r3, [sp, #16]
   17a42:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17a46:	2f00      	cmp	r7, #0
   17a48:	d0ca      	beq.n	179e0 <d_print_comp_inner+0x19c>
   17a4a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   17a4e:	e7c7      	b.n	179e0 <d_print_comp_inner+0x19c>
   17a50:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   17a54:	f1bc 0f00 	cmp.w	ip, #0
   17a58:	d0de      	beq.n	17a18 <d_print_comp_inner+0x1d4>
   17a5a:	4662      	mov	r2, ip
   17a5c:	e005      	b.n	17a6a <d_print_comp_inner+0x226>
   17a5e:	428b      	cmp	r3, r1
   17a60:	f001 86b8 	beq.w	197d4 <d_print_comp_inner+0x1f90>
   17a64:	6812      	ldr	r2, [r2, #0]
   17a66:	2a00      	cmp	r2, #0
   17a68:	d0d6      	beq.n	17a18 <d_print_comp_inner+0x1d4>
   17a6a:	6890      	ldr	r0, [r2, #8]
   17a6c:	2800      	cmp	r0, #0
   17a6e:	d1f9      	bne.n	17a64 <d_print_comp_inner+0x220>
   17a70:	6851      	ldr	r1, [r2, #4]
   17a72:	7809      	ldrb	r1, [r1, #0]
   17a74:	f1a1 0e19 	sub.w	lr, r1, #25
   17a78:	f1be 0f02 	cmp.w	lr, #2
   17a7c:	d9ef      	bls.n	17a5e <d_print_comp_inner+0x21a>
   17a7e:	4607      	mov	r7, r0
   17a80:	e7ca      	b.n	17a18 <d_print_comp_inner+0x1d4>
   17a82:	68af      	ldr	r7, [r5, #8]
   17a84:	686d      	ldr	r5, [r5, #4]
   17a86:	2f00      	cmp	r7, #0
   17a88:	d0aa      	beq.n	179e0 <d_print_comp_inner+0x19c>
   17a8a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a8e:	442f      	add	r7, r5
   17a90:	f04f 0800 	mov.w	r8, #0
   17a94:	e008      	b.n	17aa8 <d_print_comp_inner+0x264>
   17a96:	460b      	mov	r3, r1
   17a98:	3101      	adds	r1, #1
   17a9a:	42bd      	cmp	r5, r7
   17a9c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17aa0:	54e6      	strb	r6, [r4, r3]
   17aa2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17aa6:	d09b      	beq.n	179e0 <d_print_comp_inner+0x19c>
   17aa8:	29ff      	cmp	r1, #255	; 0xff
   17aaa:	f815 6b01 	ldrb.w	r6, [r5], #1
   17aae:	d1f2      	bne.n	17a96 <d_print_comp_inner+0x252>
   17ab0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ab4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17ab8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17abc:	4620      	mov	r0, r4
   17abe:	4798      	blx	r3
   17ac0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ac4:	3301      	adds	r3, #1
   17ac6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17aca:	2101      	movs	r1, #1
   17acc:	2300      	movs	r3, #0
   17ace:	e7e4      	b.n	17a9a <d_print_comp_inner+0x256>
   17ad0:	4e64      	ldr	r6, [pc, #400]	; (17c64 <d_print_comp_inner+0x420>)
   17ad2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17ad6:	f106 0a11 	add.w	sl, r6, #17
   17ada:	f04f 0900 	mov.w	r9, #0
   17ade:	e009      	b.n	17af4 <d_print_comp_inner+0x2b0>
   17ae0:	460b      	mov	r3, r1
   17ae2:	3101      	adds	r1, #1
   17ae4:	4556      	cmp	r6, sl
   17ae6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17aea:	54e7      	strb	r7, [r4, r3]
   17aec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17af0:	f001 8296 	beq.w	19020 <d_print_comp_inner+0x17dc>
   17af4:	29ff      	cmp	r1, #255	; 0xff
   17af6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17afa:	d1f1      	bne.n	17ae0 <d_print_comp_inner+0x29c>
   17afc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b00:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17b04:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b08:	4620      	mov	r0, r4
   17b0a:	4798      	blx	r3
   17b0c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b10:	3301      	adds	r3, #1
   17b12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b16:	2101      	movs	r1, #1
   17b18:	2300      	movs	r3, #0
   17b1a:	e7e3      	b.n	17ae4 <d_print_comp_inner+0x2a0>
   17b1c:	4e52      	ldr	r6, [pc, #328]	; (17c68 <d_print_comp_inner+0x424>)
   17b1e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b22:	f106 0a19 	add.w	sl, r6, #25
   17b26:	f04f 0900 	mov.w	r9, #0
   17b2a:	e009      	b.n	17b40 <d_print_comp_inner+0x2fc>
   17b2c:	460b      	mov	r3, r1
   17b2e:	3101      	adds	r1, #1
   17b30:	4556      	cmp	r6, sl
   17b32:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b36:	54e7      	strb	r7, [r4, r3]
   17b38:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17b3c:	f001 82a8 	beq.w	19090 <d_print_comp_inner+0x184c>
   17b40:	29ff      	cmp	r1, #255	; 0xff
   17b42:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17b46:	d1f1      	bne.n	17b2c <d_print_comp_inner+0x2e8>
   17b48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b4c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17b50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b54:	4620      	mov	r0, r4
   17b56:	4798      	blx	r3
   17b58:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b5c:	3301      	adds	r3, #1
   17b5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b62:	2101      	movs	r1, #1
   17b64:	2300      	movs	r3, #0
   17b66:	e7e3      	b.n	17b30 <d_print_comp_inner+0x2ec>
   17b68:	4e40      	ldr	r6, [pc, #256]	; (17c6c <d_print_comp_inner+0x428>)
   17b6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b6e:	f106 0a15 	add.w	sl, r6, #21
   17b72:	f04f 0900 	mov.w	r9, #0
   17b76:	e009      	b.n	17b8c <d_print_comp_inner+0x348>
   17b78:	460b      	mov	r3, r1
   17b7a:	3101      	adds	r1, #1
   17b7c:	4556      	cmp	r6, sl
   17b7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b82:	54e7      	strb	r7, [r4, r3]
   17b84:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17b88:	f001 8251 	beq.w	1902e <d_print_comp_inner+0x17ea>
   17b8c:	29ff      	cmp	r1, #255	; 0xff
   17b8e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17b92:	d1f1      	bne.n	17b78 <d_print_comp_inner+0x334>
   17b94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b98:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17b9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ba0:	4620      	mov	r0, r4
   17ba2:	4798      	blx	r3
   17ba4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ba8:	3301      	adds	r3, #1
   17baa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17bae:	2101      	movs	r1, #1
   17bb0:	2300      	movs	r3, #0
   17bb2:	e7e3      	b.n	17b7c <d_print_comp_inner+0x338>
   17bb4:	4e2e      	ldr	r6, [pc, #184]	; (17c70 <d_print_comp_inner+0x42c>)
   17bb6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17bba:	f106 0a16 	add.w	sl, r6, #22
   17bbe:	f04f 0900 	mov.w	r9, #0
   17bc2:	e009      	b.n	17bd8 <d_print_comp_inner+0x394>
   17bc4:	460b      	mov	r3, r1
   17bc6:	3101      	adds	r1, #1
   17bc8:	4556      	cmp	r6, sl
   17bca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17bce:	54e7      	strb	r7, [r4, r3]
   17bd0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17bd4:	f001 8263 	beq.w	1909e <d_print_comp_inner+0x185a>
   17bd8:	29ff      	cmp	r1, #255	; 0xff
   17bda:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17bde:	d1f1      	bne.n	17bc4 <d_print_comp_inner+0x380>
   17be0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17be4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17be8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17bec:	4620      	mov	r0, r4
   17bee:	4798      	blx	r3
   17bf0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17bf4:	3301      	adds	r3, #1
   17bf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17bfa:	2101      	movs	r1, #1
   17bfc:	2300      	movs	r3, #0
   17bfe:	e7e3      	b.n	17bc8 <d_print_comp_inner+0x384>
   17c00:	4e1c      	ldr	r6, [pc, #112]	; (17c74 <d_print_comp_inner+0x430>)
   17c02:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c06:	f106 0a13 	add.w	sl, r6, #19
   17c0a:	f04f 0900 	mov.w	r9, #0
   17c0e:	e009      	b.n	17c24 <d_print_comp_inner+0x3e0>
   17c10:	460b      	mov	r3, r1
   17c12:	3101      	adds	r1, #1
   17c14:	45b2      	cmp	sl, r6
   17c16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c1a:	54e7      	strb	r7, [r4, r3]
   17c1c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c20:	f001 8077 	beq.w	18d12 <d_print_comp_inner+0x14ce>
   17c24:	29ff      	cmp	r1, #255	; 0xff
   17c26:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c2a:	d1f1      	bne.n	17c10 <d_print_comp_inner+0x3cc>
   17c2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c30:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17c34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c38:	4620      	mov	r0, r4
   17c3a:	4798      	blx	r3
   17c3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c40:	3301      	adds	r3, #1
   17c42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c46:	2101      	movs	r1, #1
   17c48:	2300      	movs	r3, #0
   17c4a:	e7e3      	b.n	17c14 <d_print_comp_inner+0x3d0>
   17c4c:	4e0a      	ldr	r6, [pc, #40]	; (17c78 <d_print_comp_inner+0x434>)
   17c4e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c52:	f106 0a1a 	add.w	sl, r6, #26
   17c56:	f04f 0900 	mov.w	r9, #0
   17c5a:	e019      	b.n	17c90 <d_print_comp_inner+0x44c>
   17c5c:	00024fe0 	.word	0x00024fe0
   17c60:	000251dc 	.word	0x000251dc
   17c64:	0002516b 	.word	0x0002516b
   17c68:	00025137 	.word	0x00025137
   17c6c:	00025153 	.word	0x00025153
   17c70:	0002511f 	.word	0x0002511f
   17c74:	0002510b 	.word	0x0002510b
   17c78:	000250df 	.word	0x000250df
   17c7c:	460b      	mov	r3, r1
   17c7e:	3101      	adds	r1, #1
   17c80:	4556      	cmp	r6, sl
   17c82:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c86:	54e7      	strb	r7, [r4, r3]
   17c88:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c8c:	f001 804f 	beq.w	18d2e <d_print_comp_inner+0x14ea>
   17c90:	29ff      	cmp	r1, #255	; 0xff
   17c92:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c96:	d1f1      	bne.n	17c7c <d_print_comp_inner+0x438>
   17c98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c9c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17ca0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ca4:	4620      	mov	r0, r4
   17ca6:	4798      	blx	r3
   17ca8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17cac:	3301      	adds	r3, #1
   17cae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17cb2:	2101      	movs	r1, #1
   17cb4:	2300      	movs	r3, #0
   17cb6:	e7e3      	b.n	17c80 <d_print_comp_inner+0x43c>
   17cb8:	4eb5      	ldr	r6, [pc, #724]	; (17f90 <d_print_comp_inner+0x74c>)
   17cba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17cbe:	f106 0a0f 	add.w	sl, r6, #15
   17cc2:	f04f 0900 	mov.w	r9, #0
   17cc6:	e009      	b.n	17cdc <d_print_comp_inner+0x498>
   17cc8:	460b      	mov	r3, r1
   17cca:	3101      	adds	r1, #1
   17ccc:	4556      	cmp	r6, sl
   17cce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cd2:	54e7      	strb	r7, [r4, r3]
   17cd4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17cd8:	f001 8022 	beq.w	18d20 <d_print_comp_inner+0x14dc>
   17cdc:	29ff      	cmp	r1, #255	; 0xff
   17cde:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17ce2:	d1f1      	bne.n	17cc8 <d_print_comp_inner+0x484>
   17ce4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ce8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17cec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17cf0:	4620      	mov	r0, r4
   17cf2:	4798      	blx	r3
   17cf4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17cf8:	3301      	adds	r3, #1
   17cfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17cfe:	2101      	movs	r1, #1
   17d00:	2300      	movs	r3, #0
   17d02:	e7e3      	b.n	17ccc <d_print_comp_inner+0x488>
   17d04:	4ea3      	ldr	r6, [pc, #652]	; (17f94 <d_print_comp_inner+0x750>)
   17d06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d0a:	f106 0a11 	add.w	sl, r6, #17
   17d0e:	f04f 0900 	mov.w	r9, #0
   17d12:	e009      	b.n	17d28 <d_print_comp_inner+0x4e4>
   17d14:	460b      	mov	r3, r1
   17d16:	3101      	adds	r1, #1
   17d18:	4556      	cmp	r6, sl
   17d1a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d1e:	54e7      	strb	r7, [r4, r3]
   17d20:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d24:	f001 800a 	beq.w	18d3c <d_print_comp_inner+0x14f8>
   17d28:	29ff      	cmp	r1, #255	; 0xff
   17d2a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17d2e:	d1f1      	bne.n	17d14 <d_print_comp_inner+0x4d0>
   17d30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d34:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17d38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d3c:	4620      	mov	r0, r4
   17d3e:	4798      	blx	r3
   17d40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d44:	3301      	adds	r3, #1
   17d46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d4a:	2101      	movs	r1, #1
   17d4c:	2300      	movs	r3, #0
   17d4e:	e7e3      	b.n	17d18 <d_print_comp_inner+0x4d4>
   17d50:	4e91      	ldr	r6, [pc, #580]	; (17f98 <d_print_comp_inner+0x754>)
   17d52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d56:	f106 0a15 	add.w	sl, r6, #21
   17d5a:	f04f 0900 	mov.w	r9, #0
   17d5e:	e009      	b.n	17d74 <d_print_comp_inner+0x530>
   17d60:	460b      	mov	r3, r1
   17d62:	3101      	adds	r1, #1
   17d64:	4556      	cmp	r6, sl
   17d66:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d6a:	54e7      	strb	r7, [r4, r3]
   17d6c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d70:	f000 87b3 	beq.w	18cda <d_print_comp_inner+0x1496>
   17d74:	29ff      	cmp	r1, #255	; 0xff
   17d76:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17d7a:	d1f1      	bne.n	17d60 <d_print_comp_inner+0x51c>
   17d7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d80:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17d84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d88:	4620      	mov	r0, r4
   17d8a:	4798      	blx	r3
   17d8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d90:	3301      	adds	r3, #1
   17d92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d96:	2101      	movs	r1, #1
   17d98:	2300      	movs	r3, #0
   17d9a:	e7e3      	b.n	17d64 <d_print_comp_inner+0x520>
   17d9c:	4e7f      	ldr	r6, [pc, #508]	; (17f9c <d_print_comp_inner+0x758>)
   17d9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17da2:	f106 0a12 	add.w	sl, r6, #18
   17da6:	f04f 0900 	mov.w	r9, #0
   17daa:	e009      	b.n	17dc0 <d_print_comp_inner+0x57c>
   17dac:	460b      	mov	r3, r1
   17dae:	3101      	adds	r1, #1
   17db0:	45b2      	cmp	sl, r6
   17db2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17db6:	54e7      	strb	r7, [r4, r3]
   17db8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17dbc:	f000 879b 	beq.w	18cf6 <d_print_comp_inner+0x14b2>
   17dc0:	29ff      	cmp	r1, #255	; 0xff
   17dc2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17dc6:	d1f1      	bne.n	17dac <d_print_comp_inner+0x568>
   17dc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17dcc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17dd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17dd4:	4620      	mov	r0, r4
   17dd6:	4798      	blx	r3
   17dd8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ddc:	3301      	adds	r3, #1
   17dde:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17de2:	2101      	movs	r1, #1
   17de4:	2300      	movs	r3, #0
   17de6:	e7e3      	b.n	17db0 <d_print_comp_inner+0x56c>
   17de8:	4e6d      	ldr	r6, [pc, #436]	; (17fa0 <d_print_comp_inner+0x75c>)
   17dea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17dee:	f106 0a10 	add.w	sl, r6, #16
   17df2:	f04f 0900 	mov.w	r9, #0
   17df6:	e009      	b.n	17e0c <d_print_comp_inner+0x5c8>
   17df8:	460b      	mov	r3, r1
   17dfa:	3101      	adds	r1, #1
   17dfc:	4556      	cmp	r6, sl
   17dfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e02:	54e7      	strb	r7, [r4, r3]
   17e04:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e08:	f000 876e 	beq.w	18ce8 <d_print_comp_inner+0x14a4>
   17e0c:	29ff      	cmp	r1, #255	; 0xff
   17e0e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17e12:	d1f1      	bne.n	17df8 <d_print_comp_inner+0x5b4>
   17e14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e18:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17e1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e20:	4620      	mov	r0, r4
   17e22:	4798      	blx	r3
   17e24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e28:	3301      	adds	r3, #1
   17e2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e2e:	2101      	movs	r1, #1
   17e30:	2300      	movs	r3, #0
   17e32:	e7e3      	b.n	17dfc <d_print_comp_inner+0x5b8>
   17e34:	4e5b      	ldr	r6, [pc, #364]	; (17fa4 <d_print_comp_inner+0x760>)
   17e36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e3a:	f106 0a0d 	add.w	sl, r6, #13
   17e3e:	f04f 0900 	mov.w	r9, #0
   17e42:	e009      	b.n	17e58 <d_print_comp_inner+0x614>
   17e44:	460b      	mov	r3, r1
   17e46:	3101      	adds	r1, #1
   17e48:	4556      	cmp	r6, sl
   17e4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e4e:	54e7      	strb	r7, [r4, r3]
   17e50:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e54:	f000 8756 	beq.w	18d04 <d_print_comp_inner+0x14c0>
   17e58:	29ff      	cmp	r1, #255	; 0xff
   17e5a:	f816 7b01 	ldrb.w	r7, [r6], #1
   17e5e:	d1f1      	bne.n	17e44 <d_print_comp_inner+0x600>
   17e60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e64:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17e68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e6c:	4620      	mov	r0, r4
   17e6e:	4798      	blx	r3
   17e70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e74:	3301      	adds	r3, #1
   17e76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e7a:	2101      	movs	r1, #1
   17e7c:	2300      	movs	r3, #0
   17e7e:	e7e3      	b.n	17e48 <d_print_comp_inner+0x604>
   17e80:	4e49      	ldr	r6, [pc, #292]	; (17fa8 <d_print_comp_inner+0x764>)
   17e82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e86:	f106 0a18 	add.w	sl, r6, #24
   17e8a:	f04f 0900 	mov.w	r9, #0
   17e8e:	e009      	b.n	17ea4 <d_print_comp_inner+0x660>
   17e90:	460b      	mov	r3, r1
   17e92:	3101      	adds	r1, #1
   17e94:	45b2      	cmp	sl, r6
   17e96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e9a:	54e7      	strb	r7, [r4, r3]
   17e9c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ea0:	f000 86e3 	beq.w	18c6a <d_print_comp_inner+0x1426>
   17ea4:	29ff      	cmp	r1, #255	; 0xff
   17ea6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17eaa:	d1f1      	bne.n	17e90 <d_print_comp_inner+0x64c>
   17eac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17eb0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17eb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17eb8:	4620      	mov	r0, r4
   17eba:	4798      	blx	r3
   17ebc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ec0:	3301      	adds	r3, #1
   17ec2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ec6:	2101      	movs	r1, #1
   17ec8:	2300      	movs	r3, #0
   17eca:	e7e3      	b.n	17e94 <d_print_comp_inner+0x650>
   17ecc:	4e37      	ldr	r6, [pc, #220]	; (17fac <d_print_comp_inner+0x768>)
   17ece:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17ed2:	f106 0a0b 	add.w	sl, r6, #11
   17ed6:	f04f 0900 	mov.w	r9, #0
   17eda:	e009      	b.n	17ef0 <d_print_comp_inner+0x6ac>
   17edc:	460b      	mov	r3, r1
   17ede:	3101      	adds	r1, #1
   17ee0:	45b2      	cmp	sl, r6
   17ee2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ee6:	54e7      	strb	r7, [r4, r3]
   17ee8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17eec:	f000 87ca 	beq.w	18e84 <d_print_comp_inner+0x1640>
   17ef0:	29ff      	cmp	r1, #255	; 0xff
   17ef2:	f816 7b01 	ldrb.w	r7, [r6], #1
   17ef6:	d1f1      	bne.n	17edc <d_print_comp_inner+0x698>
   17ef8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17efc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17f00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f04:	4620      	mov	r0, r4
   17f06:	4798      	blx	r3
   17f08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f0c:	3301      	adds	r3, #1
   17f0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f12:	2101      	movs	r1, #1
   17f14:	2300      	movs	r3, #0
   17f16:	e7e3      	b.n	17ee0 <d_print_comp_inner+0x69c>
   17f18:	4e25      	ldr	r6, [pc, #148]	; (17fb0 <d_print_comp_inner+0x76c>)
   17f1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17f1e:	f106 0a08 	add.w	sl, r6, #8
   17f22:	f04f 0900 	mov.w	r9, #0
   17f26:	e009      	b.n	17f3c <d_print_comp_inner+0x6f8>
   17f28:	460b      	mov	r3, r1
   17f2a:	3101      	adds	r1, #1
   17f2c:	45b2      	cmp	sl, r6
   17f2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f32:	54e7      	strb	r7, [r4, r3]
   17f34:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17f38:	f000 86c8 	beq.w	18ccc <d_print_comp_inner+0x1488>
   17f3c:	29ff      	cmp	r1, #255	; 0xff
   17f3e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17f42:	d1f1      	bne.n	17f28 <d_print_comp_inner+0x6e4>
   17f44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f48:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17f4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f50:	4620      	mov	r0, r4
   17f52:	4798      	blx	r3
   17f54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f58:	3301      	adds	r3, #1
   17f5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f5e:	2101      	movs	r1, #1
   17f60:	2300      	movs	r3, #0
   17f62:	e7e3      	b.n	17f2c <d_print_comp_inner+0x6e8>
   17f64:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17f68:	29ff      	cmp	r1, #255	; 0xff
   17f6a:	f001 847c 	beq.w	19866 <d_print_comp_inner+0x2022>
   17f6e:	1c4a      	adds	r2, r1, #1
   17f70:	237e      	movs	r3, #126	; 0x7e
   17f72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17f76:	5463      	strb	r3, [r4, r1]
   17f78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17f7c:	4641      	mov	r1, r8
   17f7e:	68aa      	ldr	r2, [r5, #8]
   17f80:	4620      	mov	r0, r4
   17f82:	f002 fa03 	bl	1a38c <d_print_comp>
   17f86:	e52b      	b.n	179e0 <d_print_comp_inner+0x19c>
   17f88:	68aa      	ldr	r2, [r5, #8]
   17f8a:	f002 f9ff 	bl	1a38c <d_print_comp>
   17f8e:	e527      	b.n	179e0 <d_print_comp_inner+0x19c>
   17f90:	000250fb 	.word	0x000250fb
   17f94:	000250cb 	.word	0x000250cb
   17f98:	000250c7 	.word	0x000250c7
   17f9c:	0002509f 	.word	0x0002509f
   17fa0:	000250b3 	.word	0x000250b3
   17fa4:	00025090 	.word	0x00025090
   17fa8:	0002506b 	.word	0x0002506b
   17fac:	00025054 	.word	0x00025054
   17fb0:	0002505f 	.word	0x0002505f
   17fb4:	2200      	movs	r2, #0
   17fb6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   17fba:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   17fbe:	686e      	ldr	r6, [r5, #4]
   17fc0:	9300      	str	r3, [sp, #0]
   17fc2:	2e00      	cmp	r6, #0
   17fc4:	f000 864c 	beq.w	18c60 <d_print_comp_inner+0x141c>
   17fc8:	f10d 0910 	add.w	r9, sp, #16
   17fcc:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   17fd0:	4617      	mov	r7, r2
   17fd2:	4696      	mov	lr, r2
   17fd4:	464b      	mov	r3, r9
   17fd6:	7831      	ldrb	r1, [r6, #0]
   17fd8:	601a      	str	r2, [r3, #0]
   17fda:	f1a1 021c 	sub.w	r2, r1, #28
   17fde:	2a04      	cmp	r2, #4
   17fe0:	605e      	str	r6, [r3, #4]
   17fe2:	f8c3 e008 	str.w	lr, [r3, #8]
   17fe6:	f8c3 c00c 	str.w	ip, [r3, #12]
   17fea:	f107 0701 	add.w	r7, r7, #1
   17fee:	4618      	mov	r0, r3
   17ff0:	461a      	mov	r2, r3
   17ff2:	f240 862a 	bls.w	18c4a <d_print_comp_inner+0x1406>
   17ff6:	294c      	cmp	r1, #76	; 0x4c
   17ff8:	f000 8627 	beq.w	18c4a <d_print_comp_inner+0x1406>
   17ffc:	2904      	cmp	r1, #4
   17ffe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18002:	f001 87bb 	beq.w	19f7c <d_print_comp_inner+0x2738>
   18006:	2902      	cmp	r1, #2
   18008:	d11a      	bne.n	18040 <d_print_comp_inner+0x7fc>
   1800a:	f8d6 b008 	ldr.w	fp, [r6, #8]
   1800e:	f89b 3000 	ldrb.w	r3, [fp]
   18012:	2b46      	cmp	r3, #70	; 0x46
   18014:	f002 8035 	beq.w	1a082 <d_print_comp_inner+0x283e>
   18018:	462b      	mov	r3, r5
   1801a:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   1801e:	9601      	str	r6, [sp, #4]
   18020:	465d      	mov	r5, fp
   18022:	4676      	mov	r6, lr
   18024:	46a2      	mov	sl, r4
   18026:	469b      	mov	fp, r3
   18028:	782b      	ldrb	r3, [r5, #0]
   1802a:	f1a3 021c 	sub.w	r2, r3, #28
   1802e:	2a04      	cmp	r2, #4
   18030:	f241 805d 	bls.w	190ee <d_print_comp_inner+0x18aa>
   18034:	2b4c      	cmp	r3, #76	; 0x4c
   18036:	f001 805a 	beq.w	190ee <d_print_comp_inner+0x18aa>
   1803a:	9e01      	ldr	r6, [sp, #4]
   1803c:	4654      	mov	r4, sl
   1803e:	465d      	mov	r5, fp
   18040:	68aa      	ldr	r2, [r5, #8]
   18042:	4641      	mov	r1, r8
   18044:	4620      	mov	r0, r4
   18046:	f002 f9a1 	bl	1a38c <d_print_comp>
   1804a:	7833      	ldrb	r3, [r6, #0]
   1804c:	2b04      	cmp	r3, #4
   1804e:	f002 8020 	beq.w	1a092 <d_print_comp_inner+0x284e>
   18052:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   18056:	2620      	movs	r6, #32
   18058:	f859 5c08 	ldr.w	r5, [r9, #-8]
   1805c:	3f01      	subs	r7, #1
   1805e:	b985      	cbnz	r5, 18082 <d_print_comp_inner+0x83e>
   18060:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18064:	29ff      	cmp	r1, #255	; 0xff
   18066:	f002 8043 	beq.w	1a0f0 <d_print_comp_inner+0x28ac>
   1806a:	1c4b      	adds	r3, r1, #1
   1806c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18070:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   18074:	5466      	strb	r6, [r4, r1]
   18076:	4620      	mov	r0, r4
   18078:	4641      	mov	r1, r8
   1807a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1807e:	f002 f995 	bl	1a3ac <d_print_mod>
   18082:	f1a9 0910 	sub.w	r9, r9, #16
   18086:	2f00      	cmp	r7, #0
   18088:	d1e6      	bne.n	18058 <d_print_comp_inner+0x814>
   1808a:	9b00      	ldr	r3, [sp, #0]
   1808c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18090:	e4a6      	b.n	179e0 <d_print_comp_inner+0x19c>
   18092:	4ed1      	ldr	r6, [pc, #836]	; (183d8 <d_print_comp_inner+0xb94>)
   18094:	686a      	ldr	r2, [r5, #4]
   18096:	f002 f979 	bl	1a38c <d_print_comp>
   1809a:	f106 0a05 	add.w	sl, r6, #5
   1809e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   180a2:	f04f 0900 	mov.w	r9, #0
   180a6:	e009      	b.n	180bc <d_print_comp_inner+0x878>
   180a8:	460b      	mov	r3, r1
   180aa:	3101      	adds	r1, #1
   180ac:	45b2      	cmp	sl, r6
   180ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   180b2:	54e7      	strb	r7, [r4, r3]
   180b4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   180b8:	f000 86d1 	beq.w	18e5e <d_print_comp_inner+0x161a>
   180bc:	29ff      	cmp	r1, #255	; 0xff
   180be:	f816 7b01 	ldrb.w	r7, [r6], #1
   180c2:	d1f1      	bne.n	180a8 <d_print_comp_inner+0x864>
   180c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180c8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   180cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   180d0:	4620      	mov	r0, r4
   180d2:	4798      	blx	r3
   180d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180d8:	3301      	adds	r3, #1
   180da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180de:	2101      	movs	r1, #1
   180e0:	2300      	movs	r3, #0
   180e2:	e7e3      	b.n	180ac <d_print_comp_inner+0x868>
   180e4:	686a      	ldr	r2, [r5, #4]
   180e6:	f002 f951 	bl	1a38c <d_print_comp>
   180ea:	f018 0904 	ands.w	r9, r8, #4
   180ee:	f001 82aa 	beq.w	19646 <d_print_comp_inner+0x1e02>
   180f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   180f6:	29ff      	cmp	r1, #255	; 0xff
   180f8:	f001 859a 	beq.w	19c30 <d_print_comp_inner+0x23ec>
   180fc:	1c4a      	adds	r2, r1, #1
   180fe:	232e      	movs	r3, #46	; 0x2e
   18100:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18104:	5463      	strb	r3, [r4, r1]
   18106:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1810a:	68ad      	ldr	r5, [r5, #8]
   1810c:	782b      	ldrb	r3, [r5, #0]
   1810e:	2b46      	cmp	r3, #70	; 0x46
   18110:	f001 83cc 	beq.w	198ac <d_print_comp_inner+0x2068>
   18114:	462a      	mov	r2, r5
   18116:	4641      	mov	r1, r8
   18118:	4620      	mov	r0, r4
   1811a:	f002 f937 	bl	1a38c <d_print_comp>
   1811e:	e45f      	b.n	179e0 <d_print_comp_inner+0x19c>
   18120:	f011 0804 	ands.w	r8, r1, #4
   18124:	f041 808b 	bne.w	1923e <d_print_comp_inner+0x19fa>
   18128:	68af      	ldr	r7, [r5, #8]
   1812a:	686d      	ldr	r5, [r5, #4]
   1812c:	2f00      	cmp	r7, #0
   1812e:	f43f ac57 	beq.w	179e0 <d_print_comp_inner+0x19c>
   18132:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18136:	442f      	add	r7, r5
   18138:	e009      	b.n	1814e <d_print_comp_inner+0x90a>
   1813a:	460b      	mov	r3, r1
   1813c:	3101      	adds	r1, #1
   1813e:	42bd      	cmp	r5, r7
   18140:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18144:	54e6      	strb	r6, [r4, r3]
   18146:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1814a:	f43f ac49 	beq.w	179e0 <d_print_comp_inner+0x19c>
   1814e:	29ff      	cmp	r1, #255	; 0xff
   18150:	f815 6b01 	ldrb.w	r6, [r5], #1
   18154:	d1f1      	bne.n	1813a <d_print_comp_inner+0x8f6>
   18156:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1815a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1815e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18162:	4620      	mov	r0, r4
   18164:	4798      	blx	r3
   18166:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1816a:	3301      	adds	r3, #1
   1816c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18170:	2101      	movs	r1, #1
   18172:	2300      	movs	r3, #0
   18174:	e7e3      	b.n	1813e <d_print_comp_inner+0x8fa>
   18176:	2301      	movs	r3, #1
   18178:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1817c:	e430      	b.n	179e0 <d_print_comp_inner+0x19c>
   1817e:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   18182:	2b00      	cmp	r3, #0
   18184:	f041 8106 	bne.w	19394 <d_print_comp_inner+0x1b50>
   18188:	1d29      	adds	r1, r5, #4
   1818a:	f7fd fa97 	bl	156bc <d_lookup_template_argument.isra.6>
   1818e:	2800      	cmp	r0, #0
   18190:	f43f ac3a 	beq.w	17a08 <d_print_comp_inner+0x1c4>
   18194:	7803      	ldrb	r3, [r0, #0]
   18196:	2b2f      	cmp	r3, #47	; 0x2f
   18198:	f001 83fc 	beq.w	19994 <d_print_comp_inner+0x2150>
   1819c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   181a0:	682b      	ldr	r3, [r5, #0]
   181a2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   181a6:	4602      	mov	r2, r0
   181a8:	4641      	mov	r1, r8
   181aa:	4620      	mov	r0, r4
   181ac:	f002 f8ee 	bl	1a38c <d_print_comp>
   181b0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   181b4:	e414      	b.n	179e0 <d_print_comp_inner+0x19c>
   181b6:	2300      	movs	r3, #0
   181b8:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   181bc:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   181c0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   181c4:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   181c8:	f011 0f04 	tst.w	r1, #4
   181cc:	686e      	ldr	r6, [r5, #4]
   181ce:	d005      	beq.n	181dc <d_print_comp_inner+0x998>
   181d0:	7833      	ldrb	r3, [r6, #0]
   181d2:	b91b      	cbnz	r3, 181dc <d_print_comp_inner+0x998>
   181d4:	68b2      	ldr	r2, [r6, #8]
   181d6:	2a06      	cmp	r2, #6
   181d8:	f001 853c 	beq.w	19c54 <d_print_comp_inner+0x2410>
   181dc:	4632      	mov	r2, r6
   181de:	4641      	mov	r1, r8
   181e0:	4620      	mov	r0, r4
   181e2:	f002 f8d3 	bl	1a38c <d_print_comp>
   181e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   181ea:	2b3c      	cmp	r3, #60	; 0x3c
   181ec:	f001 8274 	beq.w	196d8 <d_print_comp_inner+0x1e94>
   181f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   181f4:	2bff      	cmp	r3, #255	; 0xff
   181f6:	f001 8489 	beq.w	19b0c <d_print_comp_inner+0x22c8>
   181fa:	1c59      	adds	r1, r3, #1
   181fc:	223c      	movs	r2, #60	; 0x3c
   181fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18202:	54e2      	strb	r2, [r4, r3]
   18204:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18208:	4641      	mov	r1, r8
   1820a:	68aa      	ldr	r2, [r5, #8]
   1820c:	4620      	mov	r0, r4
   1820e:	f002 f8bd 	bl	1a38c <d_print_comp>
   18212:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18216:	2b3e      	cmp	r3, #62	; 0x3e
   18218:	f001 8239 	beq.w	1968e <d_print_comp_inner+0x1e4a>
   1821c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18220:	2bff      	cmp	r3, #255	; 0xff
   18222:	f001 8460 	beq.w	19ae6 <d_print_comp_inner+0x22a2>
   18226:	1c59      	adds	r1, r3, #1
   18228:	223e      	movs	r2, #62	; 0x3e
   1822a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1822e:	54e2      	strb	r2, [r4, r3]
   18230:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18234:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   18238:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   1823c:	f7ff bbd0 	b.w	179e0 <d_print_comp_inner+0x19c>
   18240:	686f      	ldr	r7, [r5, #4]
   18242:	2f00      	cmp	r7, #0
   18244:	f001 8082 	beq.w	1934c <d_print_comp_inner+0x1b08>
   18248:	4d64      	ldr	r5, [pc, #400]	; (183dc <d_print_comp_inner+0xb98>)
   1824a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1824e:	f105 0906 	add.w	r9, r5, #6
   18252:	f04f 0800 	mov.w	r8, #0
   18256:	e009      	b.n	1826c <d_print_comp_inner+0xa28>
   18258:	460b      	mov	r3, r1
   1825a:	3101      	adds	r1, #1
   1825c:	45a9      	cmp	r9, r5
   1825e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18262:	54e6      	strb	r6, [r4, r3]
   18264:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18268:	f000 8782 	beq.w	19170 <d_print_comp_inner+0x192c>
   1826c:	29ff      	cmp	r1, #255	; 0xff
   1826e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18272:	d1f1      	bne.n	18258 <d_print_comp_inner+0xa14>
   18274:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18278:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1827c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18280:	4620      	mov	r0, r4
   18282:	4798      	blx	r3
   18284:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18288:	3301      	adds	r3, #1
   1828a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1828e:	2101      	movs	r1, #1
   18290:	2300      	movs	r3, #0
   18292:	e7e3      	b.n	1825c <d_print_comp_inner+0xa18>
   18294:	4e52      	ldr	r6, [pc, #328]	; (183e0 <d_print_comp_inner+0xb9c>)
   18296:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1829a:	f106 0a0a 	add.w	sl, r6, #10
   1829e:	f04f 0900 	mov.w	r9, #0
   182a2:	e009      	b.n	182b8 <d_print_comp_inner+0xa74>
   182a4:	460b      	mov	r3, r1
   182a6:	3101      	adds	r1, #1
   182a8:	4556      	cmp	r6, sl
   182aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182ae:	54e7      	strb	r7, [r4, r3]
   182b0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   182b4:	f000 8701 	beq.w	190ba <d_print_comp_inner+0x1876>
   182b8:	29ff      	cmp	r1, #255	; 0xff
   182ba:	f816 7b01 	ldrb.w	r7, [r6], #1
   182be:	d1f1      	bne.n	182a4 <d_print_comp_inner+0xa60>
   182c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   182c4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   182c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   182cc:	4620      	mov	r0, r4
   182ce:	4798      	blx	r3
   182d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   182d4:	3301      	adds	r3, #1
   182d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   182da:	2101      	movs	r1, #1
   182dc:	2300      	movs	r3, #0
   182de:	e7e3      	b.n	182a8 <d_print_comp_inner+0xa64>
   182e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   182e4:	792d      	ldrb	r5, [r5, #4]
   182e6:	29ff      	cmp	r1, #255	; 0xff
   182e8:	f001 82ab 	beq.w	19842 <d_print_comp_inner+0x1ffe>
   182ec:	1c4b      	adds	r3, r1, #1
   182ee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   182f2:	5465      	strb	r5, [r4, r1]
   182f4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   182f8:	f7ff bb72 	b.w	179e0 <d_print_comp_inner+0x19c>
   182fc:	686a      	ldr	r2, [r5, #4]
   182fe:	f002 f845 	bl	1a38c <d_print_comp>
   18302:	68aa      	ldr	r2, [r5, #8]
   18304:	4641      	mov	r1, r8
   18306:	4620      	mov	r0, r4
   18308:	f002 f840 	bl	1a38c <d_print_comp>
   1830c:	f7ff bb68 	b.w	179e0 <d_print_comp_inner+0x19c>
   18310:	4e34      	ldr	r6, [pc, #208]	; (183e4 <d_print_comp_inner+0xba0>)
   18312:	686a      	ldr	r2, [r5, #4]
   18314:	f002 f83a 	bl	1a38c <d_print_comp>
   18318:	f106 0a08 	add.w	sl, r6, #8
   1831c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18320:	f04f 0900 	mov.w	r9, #0
   18324:	e009      	b.n	1833a <d_print_comp_inner+0xaf6>
   18326:	460b      	mov	r3, r1
   18328:	3101      	adds	r1, #1
   1832a:	4556      	cmp	r6, sl
   1832c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18330:	54e7      	strb	r7, [r4, r3]
   18332:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18336:	f000 8508 	beq.w	18d4a <d_print_comp_inner+0x1506>
   1833a:	29ff      	cmp	r1, #255	; 0xff
   1833c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18340:	d1f1      	bne.n	18326 <d_print_comp_inner+0xae2>
   18342:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18346:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1834a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1834e:	4620      	mov	r0, r4
   18350:	4798      	blx	r3
   18352:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18356:	3301      	adds	r3, #1
   18358:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1835c:	2101      	movs	r1, #1
   1835e:	2300      	movs	r3, #0
   18360:	e7e3      	b.n	1832a <d_print_comp_inner+0xae6>
   18362:	686a      	ldr	r2, [r5, #4]
   18364:	b10a      	cbz	r2, 1836a <d_print_comp_inner+0xb26>
   18366:	f002 f811 	bl	1a38c <d_print_comp>
   1836a:	68ab      	ldr	r3, [r5, #8]
   1836c:	2b00      	cmp	r3, #0
   1836e:	f43f ab37 	beq.w	179e0 <d_print_comp_inner+0x19c>
   18372:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   18376:	2efd      	cmp	r6, #253	; 0xfd
   18378:	f201 81bc 	bhi.w	196f4 <d_print_comp_inner+0x1eb0>
   1837c:	4f1a      	ldr	r7, [pc, #104]	; (183e8 <d_print_comp_inner+0xba4>)
   1837e:	f04f 0a00 	mov.w	sl, #0
   18382:	f107 0b02 	add.w	fp, r7, #2
   18386:	4631      	mov	r1, r6
   18388:	e009      	b.n	1839e <d_print_comp_inner+0xb5a>
   1838a:	460b      	mov	r3, r1
   1838c:	3101      	adds	r1, #1
   1838e:	455f      	cmp	r7, fp
   18390:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18394:	54e6      	strb	r6, [r4, r3]
   18396:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1839a:	f000 86c1 	beq.w	19120 <d_print_comp_inner+0x18dc>
   1839e:	29ff      	cmp	r1, #255	; 0xff
   183a0:	f817 6b01 	ldrb.w	r6, [r7], #1
   183a4:	d1f1      	bne.n	1838a <d_print_comp_inner+0xb46>
   183a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   183aa:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   183ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   183b2:	4620      	mov	r0, r4
   183b4:	4798      	blx	r3
   183b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   183ba:	3301      	adds	r3, #1
   183bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   183c0:	2101      	movs	r1, #1
   183c2:	2300      	movs	r3, #0
   183c4:	e7e3      	b.n	1838e <d_print_comp_inner+0xb4a>
   183c6:	4e09      	ldr	r6, [pc, #36]	; (183ec <d_print_comp_inner+0xba8>)
   183c8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   183cc:	f106 0a09 	add.w	sl, r6, #9
   183d0:	f04f 0900 	mov.w	r9, #0
   183d4:	e016      	b.n	18404 <d_print_comp_inner+0xbc0>
   183d6:	bf00      	nop
   183d8:	00025020 	.word	0x00025020
   183dc:	0002522c 	.word	0x0002522c
   183e0:	00025218 	.word	0x00025218
   183e4:	00025293 	.word	0x00025293
   183e8:	000251b4 	.word	0x000251b4
   183ec:	000251c3 	.word	0x000251c3
   183f0:	460b      	mov	r3, r1
   183f2:	3101      	adds	r1, #1
   183f4:	4556      	cmp	r6, sl
   183f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   183fa:	54e7      	strb	r7, [r4, r3]
   183fc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18400:	f000 8594 	beq.w	18f2c <d_print_comp_inner+0x16e8>
   18404:	29ff      	cmp	r1, #255	; 0xff
   18406:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1840a:	d1f1      	bne.n	183f0 <d_print_comp_inner+0xbac>
   1840c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18410:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18414:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18418:	4620      	mov	r0, r4
   1841a:	4798      	blx	r3
   1841c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18420:	3301      	adds	r3, #1
   18422:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18426:	2101      	movs	r1, #1
   18428:	2300      	movs	r3, #0
   1842a:	e7e3      	b.n	183f4 <d_print_comp_inner+0xbb0>
   1842c:	4ed1      	ldr	r6, [pc, #836]	; (18774 <d_print_comp_inner+0xf30>)
   1842e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18432:	f106 0a09 	add.w	sl, r6, #9
   18436:	f04f 0900 	mov.w	r9, #0
   1843a:	e009      	b.n	18450 <d_print_comp_inner+0xc0c>
   1843c:	460b      	mov	r3, r1
   1843e:	3101      	adds	r1, #1
   18440:	4556      	cmp	r6, sl
   18442:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18446:	54e7      	strb	r7, [r4, r3]
   18448:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1844c:	f000 8597 	beq.w	18f7e <d_print_comp_inner+0x173a>
   18450:	29ff      	cmp	r1, #255	; 0xff
   18452:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18456:	d1f1      	bne.n	1843c <d_print_comp_inner+0xbf8>
   18458:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1845c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18460:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18464:	4620      	mov	r0, r4
   18466:	4798      	blx	r3
   18468:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1846c:	3301      	adds	r3, #1
   1846e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18472:	2101      	movs	r1, #1
   18474:	2300      	movs	r3, #0
   18476:	e7e3      	b.n	18440 <d_print_comp_inner+0xbfc>
   18478:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1847c:	4dbe      	ldr	r5, [pc, #760]	; (18778 <d_print_comp_inner+0xf34>)
   1847e:	f8da 7008 	ldr.w	r7, [sl, #8]
   18482:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18486:	f105 0808 	add.w	r8, r5, #8
   1848a:	f04f 0900 	mov.w	r9, #0
   1848e:	e009      	b.n	184a4 <d_print_comp_inner+0xc60>
   18490:	460b      	mov	r3, r1
   18492:	3101      	adds	r1, #1
   18494:	45a8      	cmp	r8, r5
   18496:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1849a:	54e6      	strb	r6, [r4, r3]
   1849c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   184a0:	f000 8506 	beq.w	18eb0 <d_print_comp_inner+0x166c>
   184a4:	29ff      	cmp	r1, #255	; 0xff
   184a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   184aa:	d1f1      	bne.n	18490 <d_print_comp_inner+0xc4c>
   184ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184b0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   184b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   184b8:	4620      	mov	r0, r4
   184ba:	4798      	blx	r3
   184bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   184c0:	3301      	adds	r3, #1
   184c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   184c6:	2101      	movs	r1, #1
   184c8:	2300      	movs	r3, #0
   184ca:	e7e3      	b.n	18494 <d_print_comp_inner+0xc50>
   184cc:	686a      	ldr	r2, [r5, #4]
   184ce:	68ae      	ldr	r6, [r5, #8]
   184d0:	b10a      	cbz	r2, 184d6 <d_print_comp_inner+0xc92>
   184d2:	f001 ff5b 	bl	1a38c <d_print_comp>
   184d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   184da:	2bff      	cmp	r3, #255	; 0xff
   184dc:	f001 82b1 	beq.w	19a42 <d_print_comp_inner+0x21fe>
   184e0:	1c5a      	adds	r2, r3, #1
   184e2:	257b      	movs	r5, #123	; 0x7b
   184e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   184e8:	4641      	mov	r1, r8
   184ea:	54e5      	strb	r5, [r4, r3]
   184ec:	4632      	mov	r2, r6
   184ee:	4620      	mov	r0, r4
   184f0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   184f4:	f001 ff4a 	bl	1a38c <d_print_comp>
   184f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184fc:	29ff      	cmp	r1, #255	; 0xff
   184fe:	f001 81e7 	beq.w	198d0 <d_print_comp_inner+0x208c>
   18502:	1c4a      	adds	r2, r1, #1
   18504:	237d      	movs	r3, #125	; 0x7d
   18506:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1850a:	5463      	strb	r3, [r4, r1]
   1850c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18510:	f7ff ba66 	b.w	179e0 <d_print_comp_inner+0x19c>
   18514:	f8d5 9004 	ldr.w	r9, [r5, #4]
   18518:	68ae      	ldr	r6, [r5, #8]
   1851a:	f899 3000 	ldrb.w	r3, [r9]
   1851e:	2b31      	cmp	r3, #49	; 0x31
   18520:	f000 87cb 	beq.w	194ba <d_print_comp_inner+0x1c76>
   18524:	2b33      	cmp	r3, #51	; 0x33
   18526:	f041 86d3 	bne.w	1a2d0 <d_print_comp_inner+0x2a8c>
   1852a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1852e:	29ff      	cmp	r1, #255	; 0xff
   18530:	f001 84c3 	beq.w	19eba <d_print_comp_inner+0x2676>
   18534:	1c4a      	adds	r2, r1, #1
   18536:	2328      	movs	r3, #40	; 0x28
   18538:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1853c:	5463      	strb	r3, [r4, r1]
   1853e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18542:	a904      	add	r1, sp, #16
   18544:	f8d9 2004 	ldr.w	r2, [r9, #4]
   18548:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1854c:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   18550:	4620      	mov	r0, r4
   18552:	4641      	mov	r1, r8
   18554:	9305      	str	r3, [sp, #20]
   18556:	9204      	str	r2, [sp, #16]
   18558:	f7ff f974 	bl	17844 <d_print_comp_inner>
   1855c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18560:	9b05      	ldr	r3, [sp, #20]
   18562:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   18566:	29ff      	cmp	r1, #255	; 0xff
   18568:	f001 8496 	beq.w	19e98 <d_print_comp_inner+0x2654>
   1856c:	2329      	movs	r3, #41	; 0x29
   1856e:	1c4a      	adds	r2, r1, #1
   18570:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18574:	5463      	strb	r3, [r4, r1]
   18576:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1857a:	4632      	mov	r2, r6
   1857c:	4641      	mov	r1, r8
   1857e:	4620      	mov	r0, r4
   18580:	f002 fd2a 	bl	1afd8 <d_print_subexpr>
   18584:	f7ff ba2c 	b.w	179e0 <d_print_comp_inner+0x19c>
   18588:	686a      	ldr	r2, [r5, #4]
   1858a:	f002 fce7 	bl	1af5c <d_print_expr_op>
   1858e:	f7ff ba27 	b.w	179e0 <d_print_comp_inner+0x19c>
   18592:	f011 0f20 	tst.w	r1, #32
   18596:	f040 8753 	bne.w	19440 <d_print_comp_inner+0x1bfc>
   1859a:	686a      	ldr	r2, [r5, #4]
   1859c:	b11a      	cbz	r2, 185a6 <d_print_comp_inner+0xd62>
   1859e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   185a2:	f001 81d0 	beq.w	19946 <d_print_comp_inner+0x2102>
   185a6:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   185aa:	f105 0208 	add.w	r2, r5, #8
   185ae:	4641      	mov	r1, r8
   185b0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   185b4:	4620      	mov	r0, r4
   185b6:	f002 fbdd 	bl	1ad74 <d_print_function_type.isra.11>
   185ba:	f7ff ba11 	b.w	179e0 <d_print_comp_inner+0x19c>
   185be:	f011 0804 	ands.w	r8, r1, #4
   185c2:	686b      	ldr	r3, [r5, #4]
   185c4:	f040 8612 	bne.w	191ec <d_print_comp_inner+0x19a8>
   185c8:	e893 00a0 	ldmia.w	r3, {r5, r7}
   185cc:	2f00      	cmp	r7, #0
   185ce:	f43f aa07 	beq.w	179e0 <d_print_comp_inner+0x19c>
   185d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   185d6:	442f      	add	r7, r5
   185d8:	e009      	b.n	185ee <d_print_comp_inner+0xdaa>
   185da:	460b      	mov	r3, r1
   185dc:	3101      	adds	r1, #1
   185de:	42bd      	cmp	r5, r7
   185e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   185e4:	54e6      	strb	r6, [r4, r3]
   185e6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   185ea:	f43f a9f9 	beq.w	179e0 <d_print_comp_inner+0x19c>
   185ee:	29ff      	cmp	r1, #255	; 0xff
   185f0:	f815 6b01 	ldrb.w	r6, [r5], #1
   185f4:	d1f1      	bne.n	185da <d_print_comp_inner+0xd96>
   185f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   185fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18602:	4620      	mov	r0, r4
   18604:	4798      	blx	r3
   18606:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1860a:	3301      	adds	r3, #1
   1860c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18610:	2101      	movs	r1, #1
   18612:	2300      	movs	r3, #0
   18614:	e7e3      	b.n	185de <d_print_comp_inner+0xd9a>
   18616:	6869      	ldr	r1, [r5, #4]
   18618:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   1861c:	780b      	ldrb	r3, [r1, #0]
   1861e:	2f00      	cmp	r7, #0
   18620:	f040 85e1 	bne.w	191e6 <d_print_comp_inner+0x19a2>
   18624:	2b05      	cmp	r3, #5
   18626:	f001 81c7 	beq.w	199b8 <d_print_comp_inner+0x2174>
   1862a:	2b23      	cmp	r3, #35	; 0x23
   1862c:	f000 8689 	beq.w	19342 <d_print_comp_inner+0x1afe>
   18630:	782a      	ldrb	r2, [r5, #0]
   18632:	429a      	cmp	r2, r3
   18634:	f000 8685 	beq.w	19342 <d_print_comp_inner+0x1afe>
   18638:	2b24      	cmp	r3, #36	; 0x24
   1863a:	f47f a9eb 	bne.w	17a14 <d_print_comp_inner+0x1d0>
   1863e:	a814      	add	r0, sp, #80	; 0x50
   18640:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18644:	684a      	ldr	r2, [r1, #4]
   18646:	f840 3d40 	str.w	r3, [r0, #-64]!
   1864a:	2100      	movs	r1, #0
   1864c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   18650:	9505      	str	r5, [sp, #20]
   18652:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   18656:	9106      	str	r1, [sp, #24]
   18658:	9307      	str	r3, [sp, #28]
   1865a:	2a00      	cmp	r2, #0
   1865c:	f47f a9e8 	bne.w	17a30 <d_print_comp_inner+0x1ec>
   18660:	f7ff b9e5 	b.w	17a2e <d_print_comp_inner+0x1ea>
   18664:	686a      	ldr	r2, [r5, #4]
   18666:	f001 fe91 	bl	1a38c <d_print_comp>
   1866a:	f7ff b9b9 	b.w	179e0 <d_print_comp_inner+0x19c>
   1866e:	ab14      	add	r3, sp, #80	; 0x50
   18670:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   18674:	f843 2d40 	str.w	r2, [r3, #-64]!
   18678:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1867c:	68aa      	ldr	r2, [r5, #8]
   1867e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   18682:	9307      	str	r3, [sp, #28]
   18684:	2600      	movs	r6, #0
   18686:	9505      	str	r5, [sp, #20]
   18688:	9606      	str	r6, [sp, #24]
   1868a:	f001 fe7f 	bl	1a38c <d_print_comp>
   1868e:	9b06      	ldr	r3, [sp, #24]
   18690:	b923      	cbnz	r3, 1869c <d_print_comp_inner+0xe58>
   18692:	462a      	mov	r2, r5
   18694:	4641      	mov	r1, r8
   18696:	4620      	mov	r0, r4
   18698:	f001 fe88 	bl	1a3ac <d_print_mod>
   1869c:	9b04      	ldr	r3, [sp, #16]
   1869e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   186a2:	f7ff b99d 	b.w	179e0 <d_print_comp_inner+0x19c>
   186a6:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   186aa:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   186ae:	f849 bd40 	str.w	fp, [r9, #-64]!
   186b2:	2200      	movs	r2, #0
   186b4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   186b8:	f8cd b000 	str.w	fp, [sp]
   186bc:	4659      	mov	r1, fp
   186be:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   186c2:	9505      	str	r5, [sp, #20]
   186c4:	9206      	str	r2, [sp, #24]
   186c6:	9307      	str	r3, [sp, #28]
   186c8:	2900      	cmp	r1, #0
   186ca:	f001 83a0 	beq.w	19e0e <d_print_comp_inner+0x25ca>
   186ce:	684b      	ldr	r3, [r1, #4]
   186d0:	781b      	ldrb	r3, [r3, #0]
   186d2:	3b19      	subs	r3, #25
   186d4:	2b02      	cmp	r3, #2
   186d6:	f201 839a 	bhi.w	19e0e <d_print_comp_inner+0x25ca>
   186da:	46ac      	mov	ip, r5
   186dc:	2701      	movs	r7, #1
   186de:	460e      	mov	r6, r1
   186e0:	464d      	mov	r5, r9
   186e2:	e004      	b.n	186ee <d_print_comp_inner+0xeaa>
   186e4:	6873      	ldr	r3, [r6, #4]
   186e6:	781b      	ldrb	r3, [r3, #0]
   186e8:	3b19      	subs	r3, #25
   186ea:	2b02      	cmp	r3, #2
   186ec:	d81b      	bhi.n	18726 <d_print_comp_inner+0xee2>
   186ee:	68b3      	ldr	r3, [r6, #8]
   186f0:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   186f4:	aa14      	add	r2, sp, #80	; 0x50
   186f6:	eb02 0b0e 	add.w	fp, r2, lr
   186fa:	b98b      	cbnz	r3, 18720 <d_print_comp_inner+0xedc>
   186fc:	2f03      	cmp	r7, #3
   186fe:	f201 80f9 	bhi.w	198f4 <d_print_comp_inner+0x20b0>
   18702:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   18706:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   1870a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1870e:	f84b 5c40 	str.w	r5, [fp, #-64]
   18712:	2301      	movs	r3, #1
   18714:	eb09 050e 	add.w	r5, r9, lr
   18718:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1871c:	3701      	adds	r7, #1
   1871e:	60b3      	str	r3, [r6, #8]
   18720:	6836      	ldr	r6, [r6, #0]
   18722:	2e00      	cmp	r6, #0
   18724:	d1de      	bne.n	186e4 <d_print_comp_inner+0xea0>
   18726:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1872a:	4641      	mov	r1, r8
   1872c:	4620      	mov	r0, r4
   1872e:	4665      	mov	r5, ip
   18730:	f001 fe2c 	bl	1a38c <d_print_comp>
   18734:	9b06      	ldr	r3, [sp, #24]
   18736:	9a00      	ldr	r2, [sp, #0]
   18738:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   1873c:	2b00      	cmp	r3, #0
   1873e:	f47f a94f 	bne.w	179e0 <d_print_comp_inner+0x19c>
   18742:	2f01      	cmp	r7, #1
   18744:	d00c      	beq.n	18760 <d_print_comp_inner+0xf1c>
   18746:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   1874a:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   1874e:	3f01      	subs	r7, #1
   18750:	4641      	mov	r1, r8
   18752:	4620      	mov	r0, r4
   18754:	f001 fe2a 	bl	1a3ac <d_print_mod>
   18758:	2f01      	cmp	r7, #1
   1875a:	f1a9 0910 	sub.w	r9, r9, #16
   1875e:	d1f4      	bne.n	1874a <d_print_comp_inner+0xf06>
   18760:	1d2a      	adds	r2, r5, #4
   18762:	4641      	mov	r1, r8
   18764:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18768:	4620      	mov	r0, r4
   1876a:	f002 fa27 	bl	1abbc <d_print_array_type.isra.10>
   1876e:	f7ff b937 	b.w	179e0 <d_print_comp_inner+0x19c>
   18772:	bf00      	nop
   18774:	000251c3 	.word	0x000251c3
   18778:	000251b7 	.word	0x000251b7
   1877c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   18780:	2b00      	cmp	r3, #0
   18782:	f040 8674 	bne.w	1946e <d_print_comp_inner+0x1c2a>
   18786:	686a      	ldr	r2, [r5, #4]
   18788:	4bd5      	ldr	r3, [pc, #852]	; (18ae0 <d_print_comp_inner+0x129c>)
   1878a:	6851      	ldr	r1, [r2, #4]
   1878c:	4299      	cmp	r1, r3
   1878e:	f000 866a 	beq.w	19466 <d_print_comp_inner+0x1c22>
   18792:	4641      	mov	r1, r8
   18794:	4620      	mov	r0, r4
   18796:	f001 fdf9 	bl	1a38c <d_print_comp>
   1879a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1879e:	2bff      	cmp	r3, #255	; 0xff
   187a0:	f001 82b2 	beq.w	19d08 <d_print_comp_inner+0x24c4>
   187a4:	1c59      	adds	r1, r3, #1
   187a6:	2220      	movs	r2, #32
   187a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187ac:	54e2      	strb	r2, [r4, r3]
   187ae:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   187b2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   187b6:	2b00      	cmp	r3, #0
   187b8:	f000 8595 	beq.w	192e6 <d_print_comp_inner+0x1aa2>
   187bc:	4dc9      	ldr	r5, [pc, #804]	; (18ae4 <d_print_comp_inner+0x12a0>)
   187be:	f04f 0800 	mov.w	r8, #0
   187c2:	1daf      	adds	r7, r5, #6
   187c4:	e009      	b.n	187da <d_print_comp_inner+0xf96>
   187c6:	460b      	mov	r3, r1
   187c8:	3101      	adds	r1, #1
   187ca:	42bd      	cmp	r5, r7
   187cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187d0:	54e6      	strb	r6, [r4, r3]
   187d2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   187d6:	f43f a903 	beq.w	179e0 <d_print_comp_inner+0x19c>
   187da:	29ff      	cmp	r1, #255	; 0xff
   187dc:	f815 6b01 	ldrb.w	r6, [r5], #1
   187e0:	d1f1      	bne.n	187c6 <d_print_comp_inner+0xf82>
   187e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   187e6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   187ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   187ee:	4620      	mov	r0, r4
   187f0:	4798      	blx	r3
   187f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   187f6:	3301      	adds	r3, #1
   187f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   187fc:	2101      	movs	r1, #1
   187fe:	2300      	movs	r3, #0
   18800:	e7e3      	b.n	187ca <d_print_comp_inner+0xf86>
   18802:	4eb9      	ldr	r6, [pc, #740]	; (18ae8 <d_print_comp_inner+0x12a4>)
   18804:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18808:	f106 090e 	add.w	r9, r6, #14
   1880c:	f04f 0800 	mov.w	r8, #0
   18810:	e009      	b.n	18826 <d_print_comp_inner+0xfe2>
   18812:	460b      	mov	r3, r1
   18814:	3101      	adds	r1, #1
   18816:	45b1      	cmp	r9, r6
   18818:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1881c:	54e7      	strb	r7, [r4, r3]
   1881e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18822:	f000 83b3 	beq.w	18f8c <d_print_comp_inner+0x1748>
   18826:	29ff      	cmp	r1, #255	; 0xff
   18828:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1882c:	d1f1      	bne.n	18812 <d_print_comp_inner+0xfce>
   1882e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18832:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18836:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1883a:	4620      	mov	r0, r4
   1883c:	4798      	blx	r3
   1883e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18842:	3301      	adds	r3, #1
   18844:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18848:	2101      	movs	r1, #1
   1884a:	2300      	movs	r3, #0
   1884c:	e7e3      	b.n	18816 <d_print_comp_inner+0xfd2>
   1884e:	4ea7      	ldr	r6, [pc, #668]	; (18aec <d_print_comp_inner+0x12a8>)
   18850:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18854:	f106 0a1a 	add.w	sl, r6, #26
   18858:	f04f 0900 	mov.w	r9, #0
   1885c:	e009      	b.n	18872 <d_print_comp_inner+0x102e>
   1885e:	460b      	mov	r3, r1
   18860:	3101      	adds	r1, #1
   18862:	4556      	cmp	r6, sl
   18864:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18868:	54e7      	strb	r7, [r4, r3]
   1886a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1886e:	f000 82ef 	beq.w	18e50 <d_print_comp_inner+0x160c>
   18872:	29ff      	cmp	r1, #255	; 0xff
   18874:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18878:	d1f1      	bne.n	1885e <d_print_comp_inner+0x101a>
   1887a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1887e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18882:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18886:	4620      	mov	r0, r4
   18888:	4798      	blx	r3
   1888a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1888e:	3301      	adds	r3, #1
   18890:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18894:	2101      	movs	r1, #1
   18896:	2300      	movs	r3, #0
   18898:	e7e3      	b.n	18862 <d_print_comp_inner+0x101e>
   1889a:	6869      	ldr	r1, [r5, #4]
   1889c:	f7fc ff2a 	bl	156f4 <d_find_pack>
   188a0:	f04f 0900 	mov.w	r9, #0
   188a4:	2800      	cmp	r0, #0
   188a6:	f001 835d 	beq.w	19f64 <d_print_comp_inner+0x2720>
   188aa:	7803      	ldrb	r3, [r0, #0]
   188ac:	2b2f      	cmp	r3, #47	; 0x2f
   188ae:	f040 8457 	bne.w	19160 <d_print_comp_inner+0x191c>
   188b2:	6843      	ldr	r3, [r0, #4]
   188b4:	2b00      	cmp	r3, #0
   188b6:	f000 8453 	beq.w	19160 <d_print_comp_inner+0x191c>
   188ba:	6880      	ldr	r0, [r0, #8]
   188bc:	f109 0901 	add.w	r9, r9, #1
   188c0:	2800      	cmp	r0, #0
   188c2:	d1f2      	bne.n	188aa <d_print_comp_inner+0x1066>
   188c4:	686b      	ldr	r3, [r5, #4]
   188c6:	9300      	str	r3, [sp, #0]
   188c8:	f109 33ff 	add.w	r3, r9, #4294967295
   188cc:	9301      	str	r3, [sp, #4]
   188ce:	f04f 0a00 	mov.w	sl, #0
   188d2:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   188d6:	9a00      	ldr	r2, [sp, #0]
   188d8:	4641      	mov	r1, r8
   188da:	4620      	mov	r0, r4
   188dc:	f001 fd56 	bl	1a38c <d_print_comp>
   188e0:	9b01      	ldr	r3, [sp, #4]
   188e2:	42bb      	cmp	r3, r7
   188e4:	f340 81ab 	ble.w	18c3e <d_print_comp_inner+0x13fa>
   188e8:	4d81      	ldr	r5, [pc, #516]	; (18af0 <d_print_comp_inner+0x12ac>)
   188ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   188ee:	f105 0b02 	add.w	fp, r5, #2
   188f2:	e009      	b.n	18908 <d_print_comp_inner+0x10c4>
   188f4:	460b      	mov	r3, r1
   188f6:	3101      	adds	r1, #1
   188f8:	45ab      	cmp	fp, r5
   188fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   188fe:	54e6      	strb	r6, [r4, r3]
   18900:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18904:	f000 819b 	beq.w	18c3e <d_print_comp_inner+0x13fa>
   18908:	29ff      	cmp	r1, #255	; 0xff
   1890a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1890e:	d1f1      	bne.n	188f4 <d_print_comp_inner+0x10b0>
   18910:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18914:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   18918:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1891c:	4620      	mov	r0, r4
   1891e:	4798      	blx	r3
   18920:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18924:	3301      	adds	r3, #1
   18926:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1892a:	2101      	movs	r1, #1
   1892c:	2300      	movs	r3, #0
   1892e:	e7e3      	b.n	188f8 <d_print_comp_inner+0x10b4>
   18930:	4e70      	ldr	r6, [pc, #448]	; (18af4 <d_print_comp_inner+0x12b0>)
   18932:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18936:	f106 0a16 	add.w	sl, r6, #22
   1893a:	f04f 0900 	mov.w	r9, #0
   1893e:	e009      	b.n	18954 <d_print_comp_inner+0x1110>
   18940:	460b      	mov	r3, r1
   18942:	3101      	adds	r1, #1
   18944:	45b2      	cmp	sl, r6
   18946:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1894a:	54e7      	strb	r7, [r4, r3]
   1894c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18950:	f000 835f 	beq.w	19012 <d_print_comp_inner+0x17ce>
   18954:	29ff      	cmp	r1, #255	; 0xff
   18956:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1895a:	d1f1      	bne.n	18940 <d_print_comp_inner+0x10fc>
   1895c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18960:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18964:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18968:	4620      	mov	r0, r4
   1896a:	4798      	blx	r3
   1896c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18970:	3301      	adds	r3, #1
   18972:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18976:	2101      	movs	r1, #1
   18978:	2300      	movs	r3, #0
   1897a:	e7e3      	b.n	18944 <d_print_comp_inner+0x1100>
   1897c:	4e5e      	ldr	r6, [pc, #376]	; (18af8 <d_print_comp_inner+0x12b4>)
   1897e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18982:	f106 0a0e 	add.w	sl, r6, #14
   18986:	f04f 0900 	mov.w	r9, #0
   1898a:	e009      	b.n	189a0 <d_print_comp_inner+0x115c>
   1898c:	460b      	mov	r3, r1
   1898e:	3101      	adds	r1, #1
   18990:	4556      	cmp	r6, sl
   18992:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18996:	54e7      	strb	r7, [r4, r3]
   18998:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1899c:	f000 83a0 	beq.w	190e0 <d_print_comp_inner+0x189c>
   189a0:	29ff      	cmp	r1, #255	; 0xff
   189a2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   189a6:	d1f1      	bne.n	1898c <d_print_comp_inner+0x1148>
   189a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   189ac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   189b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189b4:	4620      	mov	r0, r4
   189b6:	4798      	blx	r3
   189b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189bc:	3301      	adds	r3, #1
   189be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189c2:	2101      	movs	r1, #1
   189c4:	2300      	movs	r3, #0
   189c6:	e7e3      	b.n	18990 <d_print_comp_inner+0x114c>
   189c8:	686a      	ldr	r2, [r5, #4]
   189ca:	7811      	ldrb	r1, [r2, #0]
   189cc:	2927      	cmp	r1, #39	; 0x27
   189ce:	f000 8615 	beq.w	195fc <d_print_comp_inner+0x1db8>
   189d2:	2600      	movs	r6, #0
   189d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189d8:	29ff      	cmp	r1, #255	; 0xff
   189da:	f001 80c5 	beq.w	19b68 <d_print_comp_inner+0x2324>
   189de:	2328      	movs	r3, #40	; 0x28
   189e0:	1c4a      	adds	r2, r1, #1
   189e2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   189e6:	5463      	strb	r3, [r4, r1]
   189e8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   189ec:	686a      	ldr	r2, [r5, #4]
   189ee:	4641      	mov	r1, r8
   189f0:	4620      	mov	r0, r4
   189f2:	f001 fccb 	bl	1a38c <d_print_comp>
   189f6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   189fa:	2bff      	cmp	r3, #255	; 0xff
   189fc:	f001 8099 	beq.w	19b32 <d_print_comp_inner+0x22ee>
   18a00:	1c59      	adds	r1, r3, #1
   18a02:	2229      	movs	r2, #41	; 0x29
   18a04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18a08:	54e2      	strb	r2, [r4, r3]
   18a0a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18a0e:	782b      	ldrb	r3, [r5, #0]
   18a10:	2b3d      	cmp	r3, #61	; 0x3d
   18a12:	f000 86e6 	beq.w	197e2 <d_print_comp_inner+0x1f9e>
   18a16:	2e08      	cmp	r6, #8
   18a18:	f000 867f 	beq.w	1971a <d_print_comp_inner+0x1ed6>
   18a1c:	68aa      	ldr	r2, [r5, #8]
   18a1e:	4641      	mov	r1, r8
   18a20:	4620      	mov	r0, r4
   18a22:	f001 fcb3 	bl	1a38c <d_print_comp>
   18a26:	f7fe bfdb 	b.w	179e0 <d_print_comp_inner+0x19c>
   18a2a:	2301      	movs	r3, #1
   18a2c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   18a30:	f7fe bfd6 	b.w	179e0 <d_print_comp_inner+0x19c>
   18a34:	686a      	ldr	r2, [r5, #4]
   18a36:	4931      	ldr	r1, [pc, #196]	; (18afc <d_print_comp_inner+0x12b8>)
   18a38:	a804      	add	r0, sp, #16
   18a3a:	f006 fd9f 	bl	1f57c <sprintf>
   18a3e:	a804      	add	r0, sp, #16
   18a40:	f006 ff3e 	bl	1f8c0 <strlen>
   18a44:	2800      	cmp	r0, #0
   18a46:	f43e afcb 	beq.w	179e0 <d_print_comp_inner+0x19c>
   18a4a:	ad04      	add	r5, sp, #16
   18a4c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a50:	182f      	adds	r7, r5, r0
   18a52:	f04f 0800 	mov.w	r8, #0
   18a56:	e009      	b.n	18a6c <d_print_comp_inner+0x1228>
   18a58:	460b      	mov	r3, r1
   18a5a:	3101      	adds	r1, #1
   18a5c:	42bd      	cmp	r5, r7
   18a5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18a62:	54e6      	strb	r6, [r4, r3]
   18a64:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18a68:	f43e afba 	beq.w	179e0 <d_print_comp_inner+0x19c>
   18a6c:	29ff      	cmp	r1, #255	; 0xff
   18a6e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18a72:	d1f1      	bne.n	18a58 <d_print_comp_inner+0x1214>
   18a74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a78:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18a7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a80:	4620      	mov	r0, r4
   18a82:	4798      	blx	r3
   18a84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a88:	3301      	adds	r3, #1
   18a8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a8e:	2101      	movs	r1, #1
   18a90:	2300      	movs	r3, #0
   18a92:	e7e3      	b.n	18a5c <d_print_comp_inner+0x1218>
   18a94:	4e1a      	ldr	r6, [pc, #104]	; (18b00 <d_print_comp_inner+0x12bc>)
   18a96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18a9a:	f106 0a1c 	add.w	sl, r6, #28
   18a9e:	f04f 0900 	mov.w	r9, #0
   18aa2:	e009      	b.n	18ab8 <d_print_comp_inner+0x1274>
   18aa4:	460b      	mov	r3, r1
   18aa6:	3101      	adds	r1, #1
   18aa8:	4556      	cmp	r6, sl
   18aaa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18aae:	54e7      	strb	r7, [r4, r3]
   18ab0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18ab4:	f000 82fa 	beq.w	190ac <d_print_comp_inner+0x1868>
   18ab8:	29ff      	cmp	r1, #255	; 0xff
   18aba:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18abe:	d1f1      	bne.n	18aa4 <d_print_comp_inner+0x1260>
   18ac0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ac4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18ac8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18acc:	4620      	mov	r0, r4
   18ace:	4798      	blx	r3
   18ad0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ad4:	3301      	adds	r3, #1
   18ad6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ada:	2101      	movs	r1, #1
   18adc:	2300      	movs	r3, #0
   18ade:	e7e3      	b.n	18aa8 <d_print_comp_inner+0x1264>
   18ae0:	00024980 	.word	0x00024980
   18ae4:	000251a4 	.word	0x000251a4
   18ae8:	00025283 	.word	0x00025283
   18aec:	0002517f 	.word	0x0002517f
   18af0:	000251b4 	.word	0x000251b4
   18af4:	00025183 	.word	0x00025183
   18af8:	00025207 	.word	0x00025207
   18afc:	00024fd8 	.word	0x00024fd8
   18b00:	00025253 	.word	0x00025253
   18b04:	68ab      	ldr	r3, [r5, #8]
   18b06:	781a      	ldrb	r2, [r3, #0]
   18b08:	2a3a      	cmp	r2, #58	; 0x3a
   18b0a:	f47e af7d 	bne.w	17a08 <d_print_comp_inner+0x1c4>
   18b0e:	689b      	ldr	r3, [r3, #8]
   18b10:	781b      	ldrb	r3, [r3, #0]
   18b12:	2b3b      	cmp	r3, #59	; 0x3b
   18b14:	f47e af78 	bne.w	17a08 <d_print_comp_inner+0x1c4>
   18b18:	f105 0308 	add.w	r3, r5, #8
   18b1c:	686a      	ldr	r2, [r5, #4]
   18b1e:	f002 fabf 	bl	1b0a0 <d_maybe_print_fold_expression.isra.15>
   18b22:	4606      	mov	r6, r0
   18b24:	2800      	cmp	r0, #0
   18b26:	f47e af5b 	bne.w	179e0 <d_print_comp_inner+0x19c>
   18b2a:	f8d5 a004 	ldr.w	sl, [r5, #4]
   18b2e:	68aa      	ldr	r2, [r5, #8]
   18b30:	f8da 1004 	ldr.w	r1, [sl, #4]
   18b34:	6893      	ldr	r3, [r2, #8]
   18b36:	6808      	ldr	r0, [r1, #0]
   18b38:	49d6      	ldr	r1, [pc, #856]	; (18e94 <d_print_comp_inner+0x1650>)
   18b3a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   18b3e:	685f      	ldr	r7, [r3, #4]
   18b40:	689d      	ldr	r5, [r3, #8]
   18b42:	f006 fd51 	bl	1f5e8 <strcmp>
   18b46:	2800      	cmp	r0, #0
   18b48:	f001 82e2 	beq.w	1a110 <d_print_comp_inner+0x28cc>
   18b4c:	2204      	movs	r2, #4
   18b4e:	49d2      	ldr	r1, [pc, #840]	; (18e98 <d_print_comp_inner+0x1654>)
   18b50:	4620      	mov	r0, r4
   18b52:	f7fc fba3 	bl	1529c <d_append_buffer>
   18b56:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18b5a:	b183      	cbz	r3, 18b7e <d_print_comp_inner+0x133a>
   18b5c:	4641      	mov	r1, r8
   18b5e:	464a      	mov	r2, r9
   18b60:	4620      	mov	r0, r4
   18b62:	f002 fa39 	bl	1afd8 <d_print_subexpr>
   18b66:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b6a:	29ff      	cmp	r1, #255	; 0xff
   18b6c:	f001 83ec 	beq.w	1a348 <d_print_comp_inner+0x2b04>
   18b70:	2320      	movs	r3, #32
   18b72:	1c4a      	adds	r2, r1, #1
   18b74:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b78:	5463      	strb	r3, [r4, r1]
   18b7a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18b7e:	463a      	mov	r2, r7
   18b80:	4641      	mov	r1, r8
   18b82:	4620      	mov	r0, r4
   18b84:	f001 fc02 	bl	1a38c <d_print_comp>
   18b88:	2d00      	cmp	r5, #0
   18b8a:	f43e af29 	beq.w	179e0 <d_print_comp_inner+0x19c>
   18b8e:	462a      	mov	r2, r5
   18b90:	4641      	mov	r1, r8
   18b92:	4620      	mov	r0, r4
   18b94:	f002 fa20 	bl	1afd8 <d_print_subexpr>
   18b98:	f7fe bf22 	b.w	179e0 <d_print_comp_inner+0x19c>
   18b9c:	4ebf      	ldr	r6, [pc, #764]	; (18e9c <d_print_comp_inner+0x1658>)
   18b9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18ba2:	f106 0a08 	add.w	sl, r6, #8
   18ba6:	f04f 0900 	mov.w	r9, #0
   18baa:	e009      	b.n	18bc0 <d_print_comp_inner+0x137c>
   18bac:	460b      	mov	r3, r1
   18bae:	3101      	adds	r1, #1
   18bb0:	4556      	cmp	r6, sl
   18bb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18bb6:	54e7      	strb	r7, [r4, r3]
   18bb8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18bbc:	f000 80d8 	beq.w	18d70 <d_print_comp_inner+0x152c>
   18bc0:	29ff      	cmp	r1, #255	; 0xff
   18bc2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18bc6:	d1f1      	bne.n	18bac <d_print_comp_inner+0x1368>
   18bc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18bcc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18bd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bd4:	4620      	mov	r0, r4
   18bd6:	4798      	blx	r3
   18bd8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bdc:	3301      	adds	r3, #1
   18bde:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18be2:	2101      	movs	r1, #1
   18be4:	2300      	movs	r3, #0
   18be6:	e7e3      	b.n	18bb0 <d_print_comp_inner+0x136c>
   18be8:	4ead      	ldr	r6, [pc, #692]	; (18ea0 <d_print_comp_inner+0x165c>)
   18bea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18bee:	f106 0a1d 	add.w	sl, r6, #29
   18bf2:	f04f 0900 	mov.w	r9, #0
   18bf6:	e009      	b.n	18c0c <d_print_comp_inner+0x13c8>
   18bf8:	460b      	mov	r3, r1
   18bfa:	3101      	adds	r1, #1
   18bfc:	45b2      	cmp	sl, r6
   18bfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18c02:	54e7      	strb	r7, [r4, r3]
   18c04:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18c08:	f000 81fc 	beq.w	19004 <d_print_comp_inner+0x17c0>
   18c0c:	29ff      	cmp	r1, #255	; 0xff
   18c0e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18c12:	d1f1      	bne.n	18bf8 <d_print_comp_inner+0x13b4>
   18c14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c18:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18c1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c20:	4620      	mov	r0, r4
   18c22:	4798      	blx	r3
   18c24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c28:	3301      	adds	r3, #1
   18c2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c2e:	2101      	movs	r1, #1
   18c30:	2300      	movs	r3, #0
   18c32:	e7e3      	b.n	18bfc <d_print_comp_inner+0x13b8>
   18c34:	2301      	movs	r3, #1
   18c36:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   18c3a:	f7fe bed1 	b.w	179e0 <d_print_comp_inner+0x19c>
   18c3e:	3701      	adds	r7, #1
   18c40:	454f      	cmp	r7, r9
   18c42:	f47f ae46 	bne.w	188d2 <d_print_comp_inner+0x108e>
   18c46:	f7fe becb 	b.w	179e0 <d_print_comp_inner+0x19c>
   18c4a:	6876      	ldr	r6, [r6, #4]
   18c4c:	2e00      	cmp	r6, #0
   18c4e:	f001 806e 	beq.w	19d2e <d_print_comp_inner+0x24ea>
   18c52:	2f04      	cmp	r7, #4
   18c54:	f103 0310 	add.w	r3, r3, #16
   18c58:	f47f a9bd 	bne.w	17fd6 <d_print_comp_inner+0x792>
   18c5c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   18c60:	2301      	movs	r3, #1
   18c62:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18c66:	f7fe bebb 	b.w	179e0 <d_print_comp_inner+0x19c>
   18c6a:	4e8e      	ldr	r6, [pc, #568]	; (18ea4 <d_print_comp_inner+0x1660>)
   18c6c:	686a      	ldr	r2, [r5, #4]
   18c6e:	4641      	mov	r1, r8
   18c70:	4620      	mov	r0, r4
   18c72:	f001 fb8b 	bl	1a38c <d_print_comp>
   18c76:	f106 0a04 	add.w	sl, r6, #4
   18c7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c7e:	f04f 0900 	mov.w	r9, #0
   18c82:	e008      	b.n	18c96 <d_print_comp_inner+0x1452>
   18c84:	460b      	mov	r3, r1
   18c86:	3101      	adds	r1, #1
   18c88:	45b2      	cmp	sl, r6
   18c8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18c8e:	54e7      	strb	r7, [r4, r3]
   18c90:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18c94:	d013      	beq.n	18cbe <d_print_comp_inner+0x147a>
   18c96:	29ff      	cmp	r1, #255	; 0xff
   18c98:	f816 7b01 	ldrb.w	r7, [r6], #1
   18c9c:	d1f2      	bne.n	18c84 <d_print_comp_inner+0x1440>
   18c9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ca2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18ca6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18caa:	4620      	mov	r0, r4
   18cac:	4798      	blx	r3
   18cae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cb2:	3301      	adds	r3, #1
   18cb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cb8:	2101      	movs	r1, #1
   18cba:	2300      	movs	r3, #0
   18cbc:	e7e4      	b.n	18c88 <d_print_comp_inner+0x1444>
   18cbe:	68aa      	ldr	r2, [r5, #8]
   18cc0:	4641      	mov	r1, r8
   18cc2:	4620      	mov	r0, r4
   18cc4:	f001 fb62 	bl	1a38c <d_print_comp>
   18cc8:	f7fe be8a 	b.w	179e0 <d_print_comp_inner+0x19c>
   18ccc:	686a      	ldr	r2, [r5, #4]
   18cce:	4641      	mov	r1, r8
   18cd0:	4620      	mov	r0, r4
   18cd2:	f001 fb5b 	bl	1a38c <d_print_comp>
   18cd6:	f7fe be83 	b.w	179e0 <d_print_comp_inner+0x19c>
   18cda:	686a      	ldr	r2, [r5, #4]
   18cdc:	4641      	mov	r1, r8
   18cde:	4620      	mov	r0, r4
   18ce0:	f001 fb54 	bl	1a38c <d_print_comp>
   18ce4:	f7fe be7c 	b.w	179e0 <d_print_comp_inner+0x19c>
   18ce8:	686a      	ldr	r2, [r5, #4]
   18cea:	4641      	mov	r1, r8
   18cec:	4620      	mov	r0, r4
   18cee:	f001 fb4d 	bl	1a38c <d_print_comp>
   18cf2:	f7fe be75 	b.w	179e0 <d_print_comp_inner+0x19c>
   18cf6:	686a      	ldr	r2, [r5, #4]
   18cf8:	4641      	mov	r1, r8
   18cfa:	4620      	mov	r0, r4
   18cfc:	f001 fb46 	bl	1a38c <d_print_comp>
   18d00:	f7fe be6e 	b.w	179e0 <d_print_comp_inner+0x19c>
   18d04:	686a      	ldr	r2, [r5, #4]
   18d06:	4641      	mov	r1, r8
   18d08:	4620      	mov	r0, r4
   18d0a:	f001 fb3f 	bl	1a38c <d_print_comp>
   18d0e:	f7fe be67 	b.w	179e0 <d_print_comp_inner+0x19c>
   18d12:	686a      	ldr	r2, [r5, #4]
   18d14:	4641      	mov	r1, r8
   18d16:	4620      	mov	r0, r4
   18d18:	f001 fb38 	bl	1a38c <d_print_comp>
   18d1c:	f7fe be60 	b.w	179e0 <d_print_comp_inner+0x19c>
   18d20:	686a      	ldr	r2, [r5, #4]
   18d22:	4641      	mov	r1, r8
   18d24:	4620      	mov	r0, r4
   18d26:	f001 fb31 	bl	1a38c <d_print_comp>
   18d2a:	f7fe be59 	b.w	179e0 <d_print_comp_inner+0x19c>
   18d2e:	686a      	ldr	r2, [r5, #4]
   18d30:	4641      	mov	r1, r8
   18d32:	4620      	mov	r0, r4
   18d34:	f001 fb2a 	bl	1a38c <d_print_comp>
   18d38:	f7fe be52 	b.w	179e0 <d_print_comp_inner+0x19c>
   18d3c:	686a      	ldr	r2, [r5, #4]
   18d3e:	4641      	mov	r1, r8
   18d40:	4620      	mov	r0, r4
   18d42:	f001 fb23 	bl	1a38c <d_print_comp>
   18d46:	f7fe be4b 	b.w	179e0 <d_print_comp_inner+0x19c>
   18d4a:	4641      	mov	r1, r8
   18d4c:	68aa      	ldr	r2, [r5, #8]
   18d4e:	4620      	mov	r0, r4
   18d50:	f001 fb1c 	bl	1a38c <d_print_comp>
   18d54:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d58:	29ff      	cmp	r1, #255	; 0xff
   18d5a:	f000 8560 	beq.w	1981e <d_print_comp_inner+0x1fda>
   18d5e:	1c4a      	adds	r2, r1, #1
   18d60:	235d      	movs	r3, #93	; 0x5d
   18d62:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d66:	5463      	strb	r3, [r4, r1]
   18d68:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18d6c:	f7fe be38 	b.w	179e0 <d_print_comp_inner+0x19c>
   18d70:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   18d74:	4e4c      	ldr	r6, [pc, #304]	; (18ea8 <d_print_comp_inner+0x1664>)
   18d76:	3301      	adds	r3, #1
   18d78:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18d7c:	4641      	mov	r1, r8
   18d7e:	686a      	ldr	r2, [r5, #4]
   18d80:	4620      	mov	r0, r4
   18d82:	f001 fb03 	bl	1a38c <d_print_comp>
   18d86:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   18d8a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d8e:	3b01      	subs	r3, #1
   18d90:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18d94:	f106 0902 	add.w	r9, r6, #2
   18d98:	f04f 0800 	mov.w	r8, #0
   18d9c:	e008      	b.n	18db0 <d_print_comp_inner+0x156c>
   18d9e:	460b      	mov	r3, r1
   18da0:	3101      	adds	r1, #1
   18da2:	454e      	cmp	r6, r9
   18da4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18da8:	54e7      	strb	r7, [r4, r3]
   18daa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18dae:	d013      	beq.n	18dd8 <d_print_comp_inner+0x1594>
   18db0:	29ff      	cmp	r1, #255	; 0xff
   18db2:	f816 7b01 	ldrb.w	r7, [r6], #1
   18db6:	d1f2      	bne.n	18d9e <d_print_comp_inner+0x155a>
   18db8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18dbc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18dc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18dc4:	4620      	mov	r0, r4
   18dc6:	4798      	blx	r3
   18dc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18dcc:	3301      	adds	r3, #1
   18dce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18dd2:	2101      	movs	r1, #1
   18dd4:	2300      	movs	r3, #0
   18dd6:	e7e4      	b.n	18da2 <d_print_comp_inner+0x155e>
   18dd8:	68aa      	ldr	r2, [r5, #8]
   18dda:	4934      	ldr	r1, [pc, #208]	; (18eac <d_print_comp_inner+0x1668>)
   18ddc:	3201      	adds	r2, #1
   18dde:	a804      	add	r0, sp, #16
   18de0:	f006 fbcc 	bl	1f57c <sprintf>
   18de4:	a804      	add	r0, sp, #16
   18de6:	f006 fd6b 	bl	1f8c0 <strlen>
   18dea:	b318      	cbz	r0, 18e34 <d_print_comp_inner+0x15f0>
   18dec:	ad04      	add	r5, sp, #16
   18dee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18df2:	182f      	adds	r7, r5, r0
   18df4:	f04f 0800 	mov.w	r8, #0
   18df8:	e008      	b.n	18e0c <d_print_comp_inner+0x15c8>
   18dfa:	460b      	mov	r3, r1
   18dfc:	3101      	adds	r1, #1
   18dfe:	42af      	cmp	r7, r5
   18e00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18e04:	54e6      	strb	r6, [r4, r3]
   18e06:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18e0a:	d015      	beq.n	18e38 <d_print_comp_inner+0x15f4>
   18e0c:	29ff      	cmp	r1, #255	; 0xff
   18e0e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18e12:	d1f2      	bne.n	18dfa <d_print_comp_inner+0x15b6>
   18e14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18e1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e20:	4620      	mov	r0, r4
   18e22:	4798      	blx	r3
   18e24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e28:	3301      	adds	r3, #1
   18e2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e2e:	2101      	movs	r1, #1
   18e30:	2300      	movs	r3, #0
   18e32:	e7e4      	b.n	18dfe <d_print_comp_inner+0x15ba>
   18e34:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e38:	29ff      	cmp	r1, #255	; 0xff
   18e3a:	f000 8560 	beq.w	198fe <d_print_comp_inner+0x20ba>
   18e3e:	1c4a      	adds	r2, r1, #1
   18e40:	237d      	movs	r3, #125	; 0x7d
   18e42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18e46:	5463      	strb	r3, [r4, r1]
   18e48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18e4c:	f7fe bdc8 	b.w	179e0 <d_print_comp_inner+0x19c>
   18e50:	686a      	ldr	r2, [r5, #4]
   18e52:	4641      	mov	r1, r8
   18e54:	4620      	mov	r0, r4
   18e56:	f001 fa99 	bl	1a38c <d_print_comp>
   18e5a:	f7fe bdc1 	b.w	179e0 <d_print_comp_inner+0x19c>
   18e5e:	4641      	mov	r1, r8
   18e60:	68aa      	ldr	r2, [r5, #8]
   18e62:	4620      	mov	r0, r4
   18e64:	f001 fa92 	bl	1a38c <d_print_comp>
   18e68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e6c:	29ff      	cmp	r1, #255	; 0xff
   18e6e:	f000 850b 	beq.w	19888 <d_print_comp_inner+0x2044>
   18e72:	1c4a      	adds	r2, r1, #1
   18e74:	235d      	movs	r3, #93	; 0x5d
   18e76:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18e7a:	5463      	strb	r3, [r4, r1]
   18e7c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18e80:	f7fe bdae 	b.w	179e0 <d_print_comp_inner+0x19c>
   18e84:	686a      	ldr	r2, [r5, #4]
   18e86:	4641      	mov	r1, r8
   18e88:	4620      	mov	r0, r4
   18e8a:	f001 fa7f 	bl	1a38c <d_print_comp>
   18e8e:	f7fe bda7 	b.w	179e0 <d_print_comp_inner+0x19c>
   18e92:	bf00      	nop
   18e94:	00024fec 	.word	0x00024fec
   18e98:	000251e4 	.word	0x000251e4
   18e9c:	00025273 	.word	0x00025273
   18ea0:	00025233 	.word	0x00025233
   18ea4:	00025088 	.word	0x00025088
   18ea8:	00025280 	.word	0x00025280
   18eac:	00024fd8 	.word	0x00024fd8
   18eb0:	f8da 5004 	ldr.w	r5, [sl, #4]
   18eb4:	782b      	ldrb	r3, [r5, #0]
   18eb6:	3b61      	subs	r3, #97	; 0x61
   18eb8:	2b19      	cmp	r3, #25
   18eba:	d809      	bhi.n	18ed0 <d_print_comp_inner+0x168c>
   18ebc:	29ff      	cmp	r1, #255	; 0xff
   18ebe:	f000 8793 	beq.w	19de8 <d_print_comp_inner+0x25a4>
   18ec2:	2320      	movs	r3, #32
   18ec4:	1c4a      	adds	r2, r1, #1
   18ec6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18eca:	5463      	strb	r3, [r4, r1]
   18ecc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ed0:	19eb      	adds	r3, r5, r7
   18ed2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18ed6:	2b20      	cmp	r3, #32
   18ed8:	bf08      	it	eq
   18eda:	f107 37ff 	addeq.w	r7, r7, #4294967295
   18ede:	2f00      	cmp	r7, #0
   18ee0:	f43e ad7e 	beq.w	179e0 <d_print_comp_inner+0x19c>
   18ee4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ee8:	442f      	add	r7, r5
   18eea:	f04f 0800 	mov.w	r8, #0
   18eee:	e009      	b.n	18f04 <d_print_comp_inner+0x16c0>
   18ef0:	460b      	mov	r3, r1
   18ef2:	3101      	adds	r1, #1
   18ef4:	42af      	cmp	r7, r5
   18ef6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18efa:	54e6      	strb	r6, [r4, r3]
   18efc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18f00:	f43e ad6e 	beq.w	179e0 <d_print_comp_inner+0x19c>
   18f04:	29ff      	cmp	r1, #255	; 0xff
   18f06:	f815 6b01 	ldrb.w	r6, [r5], #1
   18f0a:	d1f1      	bne.n	18ef0 <d_print_comp_inner+0x16ac>
   18f0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f10:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18f14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f18:	4620      	mov	r0, r4
   18f1a:	4798      	blx	r3
   18f1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f20:	3301      	adds	r3, #1
   18f22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f26:	2101      	movs	r1, #1
   18f28:	2300      	movs	r3, #0
   18f2a:	e7e3      	b.n	18ef4 <d_print_comp_inner+0x16b0>
   18f2c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18f30:	b13a      	cbz	r2, 18f42 <d_print_comp_inner+0x16fe>
   18f32:	ab14      	add	r3, sp, #80	; 0x50
   18f34:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18f38:	f843 1d48 	str.w	r1, [r3, #-72]!
   18f3c:	9203      	str	r2, [sp, #12]
   18f3e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18f42:	686b      	ldr	r3, [r5, #4]
   18f44:	781a      	ldrb	r2, [r3, #0]
   18f46:	2a04      	cmp	r2, #4
   18f48:	f000 830e 	beq.w	19568 <d_print_comp_inner+0x1d24>
   18f4c:	a804      	add	r0, sp, #16
   18f4e:	461a      	mov	r2, r3
   18f50:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18f54:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   18f58:	4641      	mov	r1, r8
   18f5a:	4620      	mov	r0, r4
   18f5c:	9304      	str	r3, [sp, #16]
   18f5e:	9505      	str	r5, [sp, #20]
   18f60:	f7fe fc70 	bl	17844 <d_print_comp_inner>
   18f64:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18f68:	9a05      	ldr	r2, [sp, #20]
   18f6a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18f6e:	2b00      	cmp	r3, #0
   18f70:	f43e ad36 	beq.w	179e0 <d_print_comp_inner+0x19c>
   18f74:	9b02      	ldr	r3, [sp, #8]
   18f76:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18f7a:	f7fe bd31 	b.w	179e0 <d_print_comp_inner+0x19c>
   18f7e:	68aa      	ldr	r2, [r5, #8]
   18f80:	4641      	mov	r1, r8
   18f82:	4620      	mov	r0, r4
   18f84:	f001 fa02 	bl	1a38c <d_print_comp>
   18f88:	f7fe bd2a 	b.w	179e0 <d_print_comp_inner+0x19c>
   18f8c:	686a      	ldr	r2, [r5, #4]
   18f8e:	49d8      	ldr	r1, [pc, #864]	; (192f0 <d_print_comp_inner+0x1aac>)
   18f90:	3201      	adds	r2, #1
   18f92:	a804      	add	r0, sp, #16
   18f94:	f006 faf2 	bl	1f57c <sprintf>
   18f98:	a804      	add	r0, sp, #16
   18f9a:	f006 fc91 	bl	1f8c0 <strlen>
   18f9e:	b318      	cbz	r0, 18fe8 <d_print_comp_inner+0x17a4>
   18fa0:	ad04      	add	r5, sp, #16
   18fa2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18fa6:	182f      	adds	r7, r5, r0
   18fa8:	f04f 0800 	mov.w	r8, #0
   18fac:	e008      	b.n	18fc0 <d_print_comp_inner+0x177c>
   18fae:	460b      	mov	r3, r1
   18fb0:	3101      	adds	r1, #1
   18fb2:	42bd      	cmp	r5, r7
   18fb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18fb8:	54e6      	strb	r6, [r4, r3]
   18fba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18fbe:	d015      	beq.n	18fec <d_print_comp_inner+0x17a8>
   18fc0:	29ff      	cmp	r1, #255	; 0xff
   18fc2:	f815 6b01 	ldrb.w	r6, [r5], #1
   18fc6:	d1f2      	bne.n	18fae <d_print_comp_inner+0x176a>
   18fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fcc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18fd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18fd4:	4620      	mov	r0, r4
   18fd6:	4798      	blx	r3
   18fd8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18fdc:	3301      	adds	r3, #1
   18fde:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18fe2:	2101      	movs	r1, #1
   18fe4:	2300      	movs	r3, #0
   18fe6:	e7e4      	b.n	18fb2 <d_print_comp_inner+0x176e>
   18fe8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18fec:	29ff      	cmp	r1, #255	; 0xff
   18fee:	f000 8404 	beq.w	197fa <d_print_comp_inner+0x1fb6>
   18ff2:	1c4a      	adds	r2, r1, #1
   18ff4:	237d      	movs	r3, #125	; 0x7d
   18ff6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18ffa:	5463      	strb	r3, [r4, r1]
   18ffc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19000:	f7fe bcee 	b.w	179e0 <d_print_comp_inner+0x19c>
   19004:	686a      	ldr	r2, [r5, #4]
   19006:	4641      	mov	r1, r8
   19008:	4620      	mov	r0, r4
   1900a:	f001 f9bf 	bl	1a38c <d_print_comp>
   1900e:	f7fe bce7 	b.w	179e0 <d_print_comp_inner+0x19c>
   19012:	686a      	ldr	r2, [r5, #4]
   19014:	4641      	mov	r1, r8
   19016:	4620      	mov	r0, r4
   19018:	f001 f9b8 	bl	1a38c <d_print_comp>
   1901c:	f7fe bce0 	b.w	179e0 <d_print_comp_inner+0x19c>
   19020:	686a      	ldr	r2, [r5, #4]
   19022:	4641      	mov	r1, r8
   19024:	4620      	mov	r0, r4
   19026:	f001 f9b1 	bl	1a38c <d_print_comp>
   1902a:	f7fe bcd9 	b.w	179e0 <d_print_comp_inner+0x19c>
   1902e:	4eb1      	ldr	r6, [pc, #708]	; (192f4 <d_print_comp_inner+0x1ab0>)
   19030:	68aa      	ldr	r2, [r5, #8]
   19032:	4641      	mov	r1, r8
   19034:	4620      	mov	r0, r4
   19036:	f001 f9a9 	bl	1a38c <d_print_comp>
   1903a:	f106 0a05 	add.w	sl, r6, #5
   1903e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19042:	f04f 0900 	mov.w	r9, #0
   19046:	e008      	b.n	1905a <d_print_comp_inner+0x1816>
   19048:	460b      	mov	r3, r1
   1904a:	3101      	adds	r1, #1
   1904c:	4556      	cmp	r6, sl
   1904e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19052:	54e7      	strb	r7, [r4, r3]
   19054:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19058:	d013      	beq.n	19082 <d_print_comp_inner+0x183e>
   1905a:	29ff      	cmp	r1, #255	; 0xff
   1905c:	f816 7b01 	ldrb.w	r7, [r6], #1
   19060:	d1f2      	bne.n	19048 <d_print_comp_inner+0x1804>
   19062:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19066:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1906a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1906e:	4620      	mov	r0, r4
   19070:	4798      	blx	r3
   19072:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19076:	3301      	adds	r3, #1
   19078:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1907c:	2101      	movs	r1, #1
   1907e:	2300      	movs	r3, #0
   19080:	e7e4      	b.n	1904c <d_print_comp_inner+0x1808>
   19082:	686a      	ldr	r2, [r5, #4]
   19084:	4641      	mov	r1, r8
   19086:	4620      	mov	r0, r4
   19088:	f001 f980 	bl	1a38c <d_print_comp>
   1908c:	f7fe bca8 	b.w	179e0 <d_print_comp_inner+0x19c>
   19090:	686a      	ldr	r2, [r5, #4]
   19092:	4641      	mov	r1, r8
   19094:	4620      	mov	r0, r4
   19096:	f001 f979 	bl	1a38c <d_print_comp>
   1909a:	f7fe bca1 	b.w	179e0 <d_print_comp_inner+0x19c>
   1909e:	686a      	ldr	r2, [r5, #4]
   190a0:	4641      	mov	r1, r8
   190a2:	4620      	mov	r0, r4
   190a4:	f001 f972 	bl	1a38c <d_print_comp>
   190a8:	f7fe bc9a 	b.w	179e0 <d_print_comp_inner+0x19c>
   190ac:	686a      	ldr	r2, [r5, #4]
   190ae:	4641      	mov	r1, r8
   190b0:	4620      	mov	r0, r4
   190b2:	f001 f96b 	bl	1a38c <d_print_comp>
   190b6:	f7fe bc93 	b.w	179e0 <d_print_comp_inner+0x19c>
   190ba:	4641      	mov	r1, r8
   190bc:	686a      	ldr	r2, [r5, #4]
   190be:	4620      	mov	r0, r4
   190c0:	f001 f964 	bl	1a38c <d_print_comp>
   190c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   190c8:	29ff      	cmp	r1, #255	; 0xff
   190ca:	f000 842a 	beq.w	19922 <d_print_comp_inner+0x20de>
   190ce:	1c4a      	adds	r2, r1, #1
   190d0:	2329      	movs	r3, #41	; 0x29
   190d2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   190d6:	5463      	strb	r3, [r4, r1]
   190d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   190dc:	f7fe bc80 	b.w	179e0 <d_print_comp_inner+0x19c>
   190e0:	686a      	ldr	r2, [r5, #4]
   190e2:	4641      	mov	r1, r8
   190e4:	4620      	mov	r0, r4
   190e6:	f001 f951 	bl	1a38c <d_print_comp>
   190ea:	f7fe bc79 	b.w	179e0 <d_print_comp_inner+0x19c>
   190ee:	2f04      	cmp	r7, #4
   190f0:	f1a6 0410 	sub.w	r4, r6, #16
   190f4:	f106 0e10 	add.w	lr, r6, #16
   190f8:	f000 8722 	beq.w	19f40 <d_print_comp_inner+0x26fc>
   190fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   19100:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   19104:	2300      	movs	r3, #0
   19106:	f84e 4c10 	str.w	r4, [lr, #-16]
   1910a:	e906 1008 	stmdb	r6, {r3, ip}
   1910e:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   19112:	f846 5c0c 	str.w	r5, [r6, #-12]
   19116:	686d      	ldr	r5, [r5, #4]
   19118:	3701      	adds	r7, #1
   1911a:	4676      	mov	r6, lr
   1911c:	f7fe bf84 	b.w	18028 <d_print_comp_inner+0x7e4>
   19120:	68aa      	ldr	r2, [r5, #8]
   19122:	9300      	str	r3, [sp, #0]
   19124:	460e      	mov	r6, r1
   19126:	4620      	mov	r0, r4
   19128:	4641      	mov	r1, r8
   1912a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   1912e:	f001 f92d 	bl	1a38c <d_print_comp>
   19132:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19136:	9b00      	ldr	r3, [sp, #0]
   19138:	4295      	cmp	r5, r2
   1913a:	f47e ac51 	bne.w	179e0 <d_print_comp_inner+0x19c>
   1913e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   19142:	42b2      	cmp	r2, r6
   19144:	f47e ac4c 	bne.w	179e0 <d_print_comp_inner+0x19c>
   19148:	3b01      	subs	r3, #1
   1914a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1914e:	f7fe bc47 	b.w	179e0 <d_print_comp_inner+0x19c>
   19152:	462a      	mov	r2, r5
   19154:	4641      	mov	r1, r8
   19156:	4620      	mov	r0, r4
   19158:	f001 f928 	bl	1a3ac <d_print_mod>
   1915c:	f7fe bc70 	b.w	17a40 <d_print_comp_inner+0x1fc>
   19160:	686b      	ldr	r3, [r5, #4]
   19162:	9300      	str	r3, [sp, #0]
   19164:	f1b9 0f00 	cmp.w	r9, #0
   19168:	f47f abae 	bne.w	188c8 <d_print_comp_inner+0x1084>
   1916c:	f7fe bc38 	b.w	179e0 <d_print_comp_inner+0x19c>
   19170:	463a      	mov	r2, r7
   19172:	a804      	add	r0, sp, #16
   19174:	495e      	ldr	r1, [pc, #376]	; (192f0 <d_print_comp_inner+0x1aac>)
   19176:	f006 fa01 	bl	1f57c <sprintf>
   1917a:	a804      	add	r0, sp, #16
   1917c:	f006 fba0 	bl	1f8c0 <strlen>
   19180:	b318      	cbz	r0, 191ca <d_print_comp_inner+0x1986>
   19182:	ad04      	add	r5, sp, #16
   19184:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19188:	182f      	adds	r7, r5, r0
   1918a:	f04f 0800 	mov.w	r8, #0
   1918e:	e008      	b.n	191a2 <d_print_comp_inner+0x195e>
   19190:	460b      	mov	r3, r1
   19192:	3101      	adds	r1, #1
   19194:	42af      	cmp	r7, r5
   19196:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1919a:	54e6      	strb	r6, [r4, r3]
   1919c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   191a0:	d015      	beq.n	191ce <d_print_comp_inner+0x198a>
   191a2:	29ff      	cmp	r1, #255	; 0xff
   191a4:	f815 6b01 	ldrb.w	r6, [r5], #1
   191a8:	d1f2      	bne.n	19190 <d_print_comp_inner+0x194c>
   191aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191ae:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   191b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191b6:	4620      	mov	r0, r4
   191b8:	4798      	blx	r3
   191ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191be:	3301      	adds	r3, #1
   191c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   191c4:	2101      	movs	r1, #1
   191c6:	2300      	movs	r3, #0
   191c8:	e7e4      	b.n	19194 <d_print_comp_inner+0x1950>
   191ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   191ce:	29ff      	cmp	r1, #255	; 0xff
   191d0:	f000 84dd 	beq.w	19b8e <d_print_comp_inner+0x234a>
   191d4:	1c4a      	adds	r2, r1, #1
   191d6:	237d      	movs	r3, #125	; 0x7d
   191d8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   191dc:	5463      	strb	r3, [r4, r1]
   191de:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   191e2:	f7fe bbfd 	b.w	179e0 <d_print_comp_inner+0x19c>
   191e6:	2700      	movs	r7, #0
   191e8:	f7ff ba1f 	b.w	1862a <d_print_comp_inner+0xde6>
   191ec:	68df      	ldr	r7, [r3, #12]
   191ee:	689d      	ldr	r5, [r3, #8]
   191f0:	2f00      	cmp	r7, #0
   191f2:	f43e abf5 	beq.w	179e0 <d_print_comp_inner+0x19c>
   191f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   191fa:	442f      	add	r7, r5
   191fc:	f04f 0800 	mov.w	r8, #0
   19200:	e009      	b.n	19216 <d_print_comp_inner+0x19d2>
   19202:	460b      	mov	r3, r1
   19204:	3101      	adds	r1, #1
   19206:	42bd      	cmp	r5, r7
   19208:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1920c:	54e6      	strb	r6, [r4, r3]
   1920e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19212:	f43e abe5 	beq.w	179e0 <d_print_comp_inner+0x19c>
   19216:	29ff      	cmp	r1, #255	; 0xff
   19218:	f815 6b01 	ldrb.w	r6, [r5], #1
   1921c:	d1f1      	bne.n	19202 <d_print_comp_inner+0x19be>
   1921e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19222:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19226:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1922a:	4620      	mov	r0, r4
   1922c:	4798      	blx	r3
   1922e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19232:	3301      	adds	r3, #1
   19234:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19238:	2101      	movs	r1, #1
   1923a:	2300      	movs	r3, #0
   1923c:	e7e3      	b.n	19206 <d_print_comp_inner+0x19c2>
   1923e:	686e      	ldr	r6, [r5, #4]
   19240:	68af      	ldr	r7, [r5, #8]
   19242:	4437      	add	r7, r6
   19244:	42be      	cmp	r6, r7
   19246:	f4be abcb 	bcs.w	179e0 <d_print_comp_inner+0x19c>
   1924a:	f04f 0800 	mov.w	r8, #0
   1924e:	e00d      	b.n	1926c <d_print_comp_inner+0x1a28>
   19250:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19254:	29ff      	cmp	r1, #255	; 0xff
   19256:	d036      	beq.n	192c6 <d_print_comp_inner+0x1a82>
   19258:	1c4b      	adds	r3, r1, #1
   1925a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1925e:	5465      	strb	r5, [r4, r1]
   19260:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19264:	3601      	adds	r6, #1
   19266:	42b7      	cmp	r7, r6
   19268:	f67e abba 	bls.w	179e0 <d_print_comp_inner+0x19c>
   1926c:	1bbb      	subs	r3, r7, r6
   1926e:	2b03      	cmp	r3, #3
   19270:	7835      	ldrb	r5, [r6, #0]
   19272:	dded      	ble.n	19250 <d_print_comp_inner+0x1a0c>
   19274:	2d5f      	cmp	r5, #95	; 0x5f
   19276:	d1eb      	bne.n	19250 <d_print_comp_inner+0x1a0c>
   19278:	7873      	ldrb	r3, [r6, #1]
   1927a:	2b5f      	cmp	r3, #95	; 0x5f
   1927c:	d1e8      	bne.n	19250 <d_print_comp_inner+0x1a0c>
   1927e:	78b3      	ldrb	r3, [r6, #2]
   19280:	2b55      	cmp	r3, #85	; 0x55
   19282:	d1e5      	bne.n	19250 <d_print_comp_inner+0x1a0c>
   19284:	1cf3      	adds	r3, r6, #3
   19286:	429f      	cmp	r7, r3
   19288:	d9e2      	bls.n	19250 <d_print_comp_inner+0x1a0c>
   1928a:	2000      	movs	r0, #0
   1928c:	e006      	b.n	1929c <d_print_comp_inner+0x1a58>
   1928e:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   19292:	429f      	cmp	r7, r3
   19294:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   19298:	f000 85c7 	beq.w	19e2a <d_print_comp_inner+0x25e6>
   1929c:	4699      	mov	r9, r3
   1929e:	f813 5b01 	ldrb.w	r5, [r3], #1
   192a2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   192a6:	b2d1      	uxtb	r1, r2
   192a8:	2909      	cmp	r1, #9
   192aa:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   192ae:	d9f0      	bls.n	19292 <d_print_comp_inner+0x1a4e>
   192b0:	f1be 0f05 	cmp.w	lr, #5
   192b4:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   192b8:	d9e9      	bls.n	1928e <d_print_comp_inner+0x1a4a>
   192ba:	2a05      	cmp	r2, #5
   192bc:	f200 8743 	bhi.w	1a146 <d_print_comp_inner+0x2902>
   192c0:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   192c4:	e7e5      	b.n	19292 <d_print_comp_inner+0x1a4e>
   192c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192ca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   192ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192d2:	4620      	mov	r0, r4
   192d4:	4798      	blx	r3
   192d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192da:	3301      	adds	r3, #1
   192dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192e0:	2100      	movs	r1, #0
   192e2:	2301      	movs	r3, #1
   192e4:	e7b9      	b.n	1925a <d_print_comp_inner+0x1a16>
   192e6:	4d04      	ldr	r5, [pc, #16]	; (192f8 <d_print_comp_inner+0x1ab4>)
   192e8:	4698      	mov	r8, r3
   192ea:	1daf      	adds	r7, r5, #6
   192ec:	e010      	b.n	19310 <d_print_comp_inner+0x1acc>
   192ee:	bf00      	nop
   192f0:	00024fd8 	.word	0x00024fd8
   192f4:	0002514c 	.word	0x0002514c
   192f8:	000251ac 	.word	0x000251ac
   192fc:	460b      	mov	r3, r1
   192fe:	3101      	adds	r1, #1
   19300:	42bd      	cmp	r5, r7
   19302:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19306:	54e6      	strb	r6, [r4, r3]
   19308:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1930c:	f43e ab68 	beq.w	179e0 <d_print_comp_inner+0x19c>
   19310:	29ff      	cmp	r1, #255	; 0xff
   19312:	f815 6b01 	ldrb.w	r6, [r5], #1
   19316:	d1f1      	bne.n	192fc <d_print_comp_inner+0x1ab8>
   19318:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1931c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19320:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19324:	4620      	mov	r0, r4
   19326:	4798      	blx	r3
   19328:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1932c:	3301      	adds	r3, #1
   1932e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19332:	2101      	movs	r1, #1
   19334:	2300      	movs	r3, #0
   19336:	e7e3      	b.n	19300 <d_print_comp_inner+0x1abc>
   19338:	782b      	ldrb	r3, [r5, #0]
   1933a:	2b2f      	cmp	r3, #47	; 0x2f
   1933c:	f47e ab6a 	bne.w	17a14 <d_print_comp_inner+0x1d0>
   19340:	4601      	mov	r1, r0
   19342:	460d      	mov	r5, r1
   19344:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   19348:	f7fe bb66 	b.w	17a18 <d_print_comp_inner+0x1d4>
   1934c:	4dd7      	ldr	r5, [pc, #860]	; (196ac <d_print_comp_inner+0x1e68>)
   1934e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19352:	f105 0804 	add.w	r8, r5, #4
   19356:	e009      	b.n	1936c <d_print_comp_inner+0x1b28>
   19358:	460b      	mov	r3, r1
   1935a:	3101      	adds	r1, #1
   1935c:	45a8      	cmp	r8, r5
   1935e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19362:	54e6      	strb	r6, [r4, r3]
   19364:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19368:	f43e ab3a 	beq.w	179e0 <d_print_comp_inner+0x19c>
   1936c:	29ff      	cmp	r1, #255	; 0xff
   1936e:	f815 6b01 	ldrb.w	r6, [r5], #1
   19372:	d1f1      	bne.n	19358 <d_print_comp_inner+0x1b14>
   19374:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19378:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1937c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19380:	4620      	mov	r0, r4
   19382:	4798      	blx	r3
   19384:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19388:	3301      	adds	r3, #1
   1938a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1938e:	2101      	movs	r1, #1
   19390:	2300      	movs	r3, #0
   19392:	e7e3      	b.n	1935c <d_print_comp_inner+0x1b18>
   19394:	4ec6      	ldr	r6, [pc, #792]	; (196b0 <d_print_comp_inner+0x1e6c>)
   19396:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1939a:	f106 0905 	add.w	r9, r6, #5
   1939e:	f04f 0800 	mov.w	r8, #0
   193a2:	e008      	b.n	193b6 <d_print_comp_inner+0x1b72>
   193a4:	460b      	mov	r3, r1
   193a6:	3101      	adds	r1, #1
   193a8:	45b1      	cmp	r9, r6
   193aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   193ae:	54e7      	strb	r7, [r4, r3]
   193b0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   193b4:	d013      	beq.n	193de <d_print_comp_inner+0x1b9a>
   193b6:	29ff      	cmp	r1, #255	; 0xff
   193b8:	f816 7b01 	ldrb.w	r7, [r6], #1
   193bc:	d1f2      	bne.n	193a4 <d_print_comp_inner+0x1b60>
   193be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   193c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193ca:	4620      	mov	r0, r4
   193cc:	4798      	blx	r3
   193ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193d2:	3301      	adds	r3, #1
   193d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193d8:	2101      	movs	r1, #1
   193da:	2300      	movs	r3, #0
   193dc:	e7e4      	b.n	193a8 <d_print_comp_inner+0x1b64>
   193de:	686a      	ldr	r2, [r5, #4]
   193e0:	49b4      	ldr	r1, [pc, #720]	; (196b4 <d_print_comp_inner+0x1e70>)
   193e2:	3201      	adds	r2, #1
   193e4:	a804      	add	r0, sp, #16
   193e6:	f006 f8c9 	bl	1f57c <sprintf>
   193ea:	a804      	add	r0, sp, #16
   193ec:	f006 fa68 	bl	1f8c0 <strlen>
   193f0:	2800      	cmp	r0, #0
   193f2:	f43e aaf5 	beq.w	179e0 <d_print_comp_inner+0x19c>
   193f6:	ad04      	add	r5, sp, #16
   193f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   193fc:	182f      	adds	r7, r5, r0
   193fe:	f04f 0800 	mov.w	r8, #0
   19402:	e009      	b.n	19418 <d_print_comp_inner+0x1bd4>
   19404:	460b      	mov	r3, r1
   19406:	3101      	adds	r1, #1
   19408:	42af      	cmp	r7, r5
   1940a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1940e:	54e6      	strb	r6, [r4, r3]
   19410:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19414:	f43e aae4 	beq.w	179e0 <d_print_comp_inner+0x19c>
   19418:	29ff      	cmp	r1, #255	; 0xff
   1941a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1941e:	d1f1      	bne.n	19404 <d_print_comp_inner+0x1bc0>
   19420:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19424:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19428:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1942c:	4620      	mov	r0, r4
   1942e:	4798      	blx	r3
   19430:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19434:	3301      	adds	r3, #1
   19436:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1943a:	2101      	movs	r1, #1
   1943c:	2300      	movs	r3, #0
   1943e:	e7e3      	b.n	19408 <d_print_comp_inner+0x1bc4>
   19440:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   19444:	f105 0208 	add.w	r2, r5, #8
   19448:	4641      	mov	r1, r8
   1944a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1944e:	f001 fc91 	bl	1ad74 <d_print_function_type.isra.11>
   19452:	686a      	ldr	r2, [r5, #4]
   19454:	2a00      	cmp	r2, #0
   19456:	f43e aac3 	beq.w	179e0 <d_print_comp_inner+0x19c>
   1945a:	4641      	mov	r1, r8
   1945c:	4620      	mov	r0, r4
   1945e:	f000 ff95 	bl	1a38c <d_print_comp>
   19462:	f7fe babd 	b.w	179e0 <d_print_comp_inner+0x19c>
   19466:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1946a:	f7ff b9a2 	b.w	187b2 <d_print_comp_inner+0xf6e>
   1946e:	4e92      	ldr	r6, [pc, #584]	; (196b8 <d_print_comp_inner+0x1e74>)
   19470:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19474:	f106 0a05 	add.w	sl, r6, #5
   19478:	f04f 0900 	mov.w	r9, #0
   1947c:	e009      	b.n	19492 <d_print_comp_inner+0x1c4e>
   1947e:	460b      	mov	r3, r1
   19480:	3101      	adds	r1, #1
   19482:	45b2      	cmp	sl, r6
   19484:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19488:	54e7      	strb	r7, [r4, r3]
   1948a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1948e:	f43f a97a 	beq.w	18786 <d_print_comp_inner+0xf42>
   19492:	29ff      	cmp	r1, #255	; 0xff
   19494:	f816 7b01 	ldrb.w	r7, [r6], #1
   19498:	d1f1      	bne.n	1947e <d_print_comp_inner+0x1c3a>
   1949a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1949e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   194a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194a6:	4620      	mov	r0, r4
   194a8:	4798      	blx	r3
   194aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194ae:	3301      	adds	r3, #1
   194b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194b4:	2101      	movs	r1, #1
   194b6:	2300      	movs	r3, #0
   194b8:	e7e3      	b.n	19482 <d_print_comp_inner+0x1c3e>
   194ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
   194be:	497f      	ldr	r1, [pc, #508]	; (196bc <d_print_comp_inner+0x1e78>)
   194c0:	681f      	ldr	r7, [r3, #0]
   194c2:	4638      	mov	r0, r7
   194c4:	f006 f890 	bl	1f5e8 <strcmp>
   194c8:	f896 a000 	ldrb.w	sl, [r6]
   194cc:	b918      	cbnz	r0, 194d6 <d_print_comp_inner+0x1c92>
   194ce:	f1ba 0f03 	cmp.w	sl, #3
   194d2:	f000 851b 	beq.w	19f0c <d_print_comp_inner+0x26c8>
   194d6:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   194da:	f000 85fd 	beq.w	1a0d8 <d_print_comp_inner+0x2894>
   194de:	4978      	ldr	r1, [pc, #480]	; (196c0 <d_print_comp_inner+0x1e7c>)
   194e0:	4638      	mov	r0, r7
   194e2:	f006 f881 	bl	1f5e8 <strcmp>
   194e6:	4605      	mov	r5, r0
   194e8:	2800      	cmp	r0, #0
   194ea:	f000 8135 	beq.w	19758 <d_print_comp_inner+0x1f14>
   194ee:	4975      	ldr	r1, [pc, #468]	; (196c4 <d_print_comp_inner+0x1e80>)
   194f0:	4638      	mov	r0, r7
   194f2:	f006 f879 	bl	1f5e8 <strcmp>
   194f6:	2800      	cmp	r0, #0
   194f8:	f000 82b6 	beq.w	19a68 <d_print_comp_inner+0x2224>
   194fc:	464a      	mov	r2, r9
   194fe:	4641      	mov	r1, r8
   19500:	4620      	mov	r0, r4
   19502:	f001 fd2b 	bl	1af5c <d_print_expr_op>
   19506:	2f00      	cmp	r7, #0
   19508:	f43f a837 	beq.w	1857a <d_print_comp_inner+0xd36>
   1950c:	496e      	ldr	r1, [pc, #440]	; (196c8 <d_print_comp_inner+0x1e84>)
   1950e:	4638      	mov	r0, r7
   19510:	f006 f86a 	bl	1f5e8 <strcmp>
   19514:	2800      	cmp	r0, #0
   19516:	f000 8384 	beq.w	19c22 <d_print_comp_inner+0x23de>
   1951a:	4638      	mov	r0, r7
   1951c:	496b      	ldr	r1, [pc, #428]	; (196cc <d_print_comp_inner+0x1e88>)
   1951e:	f006 f863 	bl	1f5e8 <strcmp>
   19522:	4605      	mov	r5, r0
   19524:	2800      	cmp	r0, #0
   19526:	f47f a828 	bne.w	1857a <d_print_comp_inner+0xd36>
   1952a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1952e:	2bff      	cmp	r3, #255	; 0xff
   19530:	f000 84db 	beq.w	19eea <d_print_comp_inner+0x26a6>
   19534:	1c58      	adds	r0, r3, #1
   19536:	2528      	movs	r5, #40	; 0x28
   19538:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1953c:	4641      	mov	r1, r8
   1953e:	54e5      	strb	r5, [r4, r3]
   19540:	4632      	mov	r2, r6
   19542:	4620      	mov	r0, r4
   19544:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19548:	f000 ff20 	bl	1a38c <d_print_comp>
   1954c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19550:	29ff      	cmp	r1, #255	; 0xff
   19552:	f000 846d 	beq.w	19e30 <d_print_comp_inner+0x25ec>
   19556:	2329      	movs	r3, #41	; 0x29
   19558:	1c4a      	adds	r2, r1, #1
   1955a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1955e:	5463      	strb	r3, [r4, r1]
   19560:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19564:	f7fe ba3c 	b.w	179e0 <d_print_comp_inner+0x19c>
   19568:	f10d 0910 	add.w	r9, sp, #16
   1956c:	685a      	ldr	r2, [r3, #4]
   1956e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19572:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   19576:	4641      	mov	r1, r8
   19578:	4620      	mov	r0, r4
   1957a:	9204      	str	r2, [sp, #16]
   1957c:	9305      	str	r3, [sp, #20]
   1957e:	f7fe f961 	bl	17844 <d_print_comp_inner>
   19582:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   19586:	9a05      	ldr	r2, [sp, #20]
   19588:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1958c:	b113      	cbz	r3, 19594 <d_print_comp_inner+0x1d50>
   1958e:	9b02      	ldr	r3, [sp, #8]
   19590:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19594:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   19598:	2b3c      	cmp	r3, #60	; 0x3c
   1959a:	f000 83d9 	beq.w	19d50 <d_print_comp_inner+0x250c>
   1959e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   195a2:	29ff      	cmp	r1, #255	; 0xff
   195a4:	f000 8467 	beq.w	19e76 <d_print_comp_inner+0x2632>
   195a8:	1c4a      	adds	r2, r1, #1
   195aa:	233c      	movs	r3, #60	; 0x3c
   195ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   195b0:	5463      	strb	r3, [r4, r1]
   195b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   195b6:	686b      	ldr	r3, [r5, #4]
   195b8:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   195bc:	689b      	ldr	r3, [r3, #8]
   195be:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   195c2:	461a      	mov	r2, r3
   195c4:	4641      	mov	r1, r8
   195c6:	4620      	mov	r0, r4
   195c8:	9304      	str	r3, [sp, #16]
   195ca:	9505      	str	r5, [sp, #20]
   195cc:	f7fe f93a 	bl	17844 <d_print_comp_inner>
   195d0:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   195d4:	9a05      	ldr	r2, [sp, #20]
   195d6:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   195da:	2b3e      	cmp	r3, #62	; 0x3e
   195dc:	f000 83ab 	beq.w	19d36 <d_print_comp_inner+0x24f2>
   195e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   195e4:	29ff      	cmp	r1, #255	; 0xff
   195e6:	f000 849a 	beq.w	19f1e <d_print_comp_inner+0x26da>
   195ea:	233e      	movs	r3, #62	; 0x3e
   195ec:	1c4a      	adds	r2, r1, #1
   195ee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   195f2:	5463      	strb	r3, [r4, r1]
   195f4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   195f8:	f7fe b9f2 	b.w	179e0 <d_print_comp_inner+0x19c>
   195fc:	6852      	ldr	r2, [r2, #4]
   195fe:	7c16      	ldrb	r6, [r2, #16]
   19600:	2e00      	cmp	r6, #0
   19602:	f43f a9e7 	beq.w	189d4 <d_print_comp_inner+0x1190>
   19606:	2e06      	cmp	r6, #6
   19608:	f240 8337 	bls.w	19c7a <d_print_comp_inner+0x2436>
   1960c:	2e07      	cmp	r6, #7
   1960e:	f47f a9e1 	bne.w	189d4 <d_print_comp_inner+0x1190>
   19612:	68aa      	ldr	r2, [r5, #8]
   19614:	7811      	ldrb	r1, [r2, #0]
   19616:	2900      	cmp	r1, #0
   19618:	f47f a9dc 	bne.w	189d4 <d_print_comp_inner+0x1190>
   1961c:	6891      	ldr	r1, [r2, #8]
   1961e:	2901      	cmp	r1, #1
   19620:	f47f a9d8 	bne.w	189d4 <d_print_comp_inner+0x1190>
   19624:	2b3c      	cmp	r3, #60	; 0x3c
   19626:	f47f a9d5 	bne.w	189d4 <d_print_comp_inner+0x1190>
   1962a:	6853      	ldr	r3, [r2, #4]
   1962c:	781b      	ldrb	r3, [r3, #0]
   1962e:	2b30      	cmp	r3, #48	; 0x30
   19630:	f000 8626 	beq.w	1a280 <d_print_comp_inner+0x2a3c>
   19634:	2b31      	cmp	r3, #49	; 0x31
   19636:	f47f a9cd 	bne.w	189d4 <d_print_comp_inner+0x1190>
   1963a:	2204      	movs	r2, #4
   1963c:	4924      	ldr	r1, [pc, #144]	; (196d0 <d_print_comp_inner+0x1e8c>)
   1963e:	f7fb fe2d 	bl	1529c <d_append_buffer>
   19642:	f7fe b9cd 	b.w	179e0 <d_print_comp_inner+0x19c>
   19646:	4e23      	ldr	r6, [pc, #140]	; (196d4 <d_print_comp_inner+0x1e90>)
   19648:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1964c:	f106 0a02 	add.w	sl, r6, #2
   19650:	e009      	b.n	19666 <d_print_comp_inner+0x1e22>
   19652:	460b      	mov	r3, r1
   19654:	3101      	adds	r1, #1
   19656:	45b2      	cmp	sl, r6
   19658:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1965c:	54e7      	strb	r7, [r4, r3]
   1965e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19662:	f43e ad52 	beq.w	1810a <d_print_comp_inner+0x8c6>
   19666:	29ff      	cmp	r1, #255	; 0xff
   19668:	f816 7b01 	ldrb.w	r7, [r6], #1
   1966c:	d1f1      	bne.n	19652 <d_print_comp_inner+0x1e0e>
   1966e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19672:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19676:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1967a:	4620      	mov	r0, r4
   1967c:	4798      	blx	r3
   1967e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19682:	3301      	adds	r3, #1
   19684:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19688:	2101      	movs	r1, #1
   1968a:	2300      	movs	r3, #0
   1968c:	e7e3      	b.n	19656 <d_print_comp_inner+0x1e12>
   1968e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19692:	29ff      	cmp	r1, #255	; 0xff
   19694:	f000 84e4 	beq.w	1a060 <d_print_comp_inner+0x281c>
   19698:	2220      	movs	r2, #32
   1969a:	1c4b      	adds	r3, r1, #1
   1969c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   196a0:	5462      	strb	r2, [r4, r1]
   196a2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   196a6:	f7fe bdbb 	b.w	18220 <d_print_comp_inner+0x9dc>
   196aa:	bf00      	nop
   196ac:	00025224 	.word	0x00025224
   196b0:	0002504c 	.word	0x0002504c
   196b4:	00024fd8 	.word	0x00024fd8
   196b8:	0002519c 	.word	0x0002519c
   196bc:	000251d0 	.word	0x000251d0
   196c0:	000252a0 	.word	0x000252a0
   196c4:	00024fdc 	.word	0x00024fdc
   196c8:	000251d4 	.word	0x000251d4
   196cc:	000254e0 	.word	0x000254e0
   196d0:	00025200 	.word	0x00025200
   196d4:	00025028 	.word	0x00025028
   196d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   196dc:	29ff      	cmp	r1, #255	; 0xff
   196de:	f000 8465 	beq.w	19fac <d_print_comp_inner+0x2768>
   196e2:	2220      	movs	r2, #32
   196e4:	1c4b      	adds	r3, r1, #1
   196e6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   196ea:	5462      	strb	r2, [r4, r1]
   196ec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   196f0:	f7fe bd80 	b.w	181f4 <d_print_comp_inner+0x9b0>
   196f4:	2700      	movs	r7, #0
   196f6:	55a7      	strb	r7, [r4, r6]
   196f8:	4631      	mov	r1, r6
   196fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19702:	4620      	mov	r0, r4
   19704:	4798      	blx	r3
   19706:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1970a:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1970e:	3301      	adds	r3, #1
   19710:	463e      	mov	r6, r7
   19712:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19716:	f7fe be31 	b.w	1837c <d_print_comp_inner+0xb38>
   1971a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1971e:	29ff      	cmp	r1, #255	; 0xff
   19720:	f000 8465 	beq.w	19fee <d_print_comp_inner+0x27aa>
   19724:	1c4a      	adds	r2, r1, #1
   19726:	235b      	movs	r3, #91	; 0x5b
   19728:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1972c:	5463      	strb	r3, [r4, r1]
   1972e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19732:	4641      	mov	r1, r8
   19734:	68aa      	ldr	r2, [r5, #8]
   19736:	4620      	mov	r0, r4
   19738:	f000 fe28 	bl	1a38c <d_print_comp>
   1973c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19740:	29ff      	cmp	r1, #255	; 0xff
   19742:	f000 8312 	beq.w	19d6a <d_print_comp_inner+0x2526>
   19746:	235d      	movs	r3, #93	; 0x5d
   19748:	1c4a      	adds	r2, r1, #1
   1974a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1974e:	5463      	strb	r3, [r4, r1]
   19750:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19754:	f7fe b944 	b.w	179e0 <d_print_comp_inner+0x19c>
   19758:	4631      	mov	r1, r6
   1975a:	4620      	mov	r0, r4
   1975c:	f7fb ffca 	bl	156f4 <d_find_pack>
   19760:	b928      	cbnz	r0, 1976e <d_print_comp_inner+0x1f2a>
   19762:	e007      	b.n	19774 <d_print_comp_inner+0x1f30>
   19764:	6843      	ldr	r3, [r0, #4]
   19766:	b12b      	cbz	r3, 19774 <d_print_comp_inner+0x1f30>
   19768:	6880      	ldr	r0, [r0, #8]
   1976a:	3501      	adds	r5, #1
   1976c:	b110      	cbz	r0, 19774 <d_print_comp_inner+0x1f30>
   1976e:	7803      	ldrb	r3, [r0, #0]
   19770:	2b2f      	cmp	r3, #47	; 0x2f
   19772:	d0f7      	beq.n	19764 <d_print_comp_inner+0x1f20>
   19774:	462a      	mov	r2, r5
   19776:	a804      	add	r0, sp, #16
   19778:	49d4      	ldr	r1, [pc, #848]	; (19acc <d_print_comp_inner+0x2288>)
   1977a:	f005 feff 	bl	1f57c <sprintf>
   1977e:	a804      	add	r0, sp, #16
   19780:	f006 f89e 	bl	1f8c0 <strlen>
   19784:	2800      	cmp	r0, #0
   19786:	f43e a92b 	beq.w	179e0 <d_print_comp_inner+0x19c>
   1978a:	ad04      	add	r5, sp, #16
   1978c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19790:	182f      	adds	r7, r5, r0
   19792:	f04f 0800 	mov.w	r8, #0
   19796:	e009      	b.n	197ac <d_print_comp_inner+0x1f68>
   19798:	460b      	mov	r3, r1
   1979a:	3101      	adds	r1, #1
   1979c:	42bd      	cmp	r5, r7
   1979e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   197a2:	54e6      	strb	r6, [r4, r3]
   197a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   197a8:	f43e a91a 	beq.w	179e0 <d_print_comp_inner+0x19c>
   197ac:	29ff      	cmp	r1, #255	; 0xff
   197ae:	f815 6b01 	ldrb.w	r6, [r5], #1
   197b2:	d1f1      	bne.n	19798 <d_print_comp_inner+0x1f54>
   197b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   197bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197c0:	4620      	mov	r0, r4
   197c2:	4798      	blx	r3
   197c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197c8:	3301      	adds	r3, #1
   197ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197ce:	2101      	movs	r1, #1
   197d0:	2300      	movs	r3, #0
   197d2:	e7e3      	b.n	1979c <d_print_comp_inner+0x1f58>
   197d4:	686a      	ldr	r2, [r5, #4]
   197d6:	4641      	mov	r1, r8
   197d8:	4620      	mov	r0, r4
   197da:	f000 fdd7 	bl	1a38c <d_print_comp>
   197de:	f7fe b8ff 	b.w	179e0 <d_print_comp_inner+0x19c>
   197e2:	29ff      	cmp	r1, #255	; 0xff
   197e4:	f000 83d2 	beq.w	19f8c <d_print_comp_inner+0x2748>
   197e8:	232d      	movs	r3, #45	; 0x2d
   197ea:	1c4a      	adds	r2, r1, #1
   197ec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   197f0:	5463      	strb	r3, [r4, r1]
   197f2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   197f6:	f7ff b90e 	b.w	18a16 <d_print_comp_inner+0x11d2>
   197fa:	2500      	movs	r5, #0
   197fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19800:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19804:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19808:	4620      	mov	r0, r4
   1980a:	4798      	blx	r3
   1980c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19810:	3301      	adds	r3, #1
   19812:	4629      	mov	r1, r5
   19814:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19818:	2201      	movs	r2, #1
   1981a:	f7ff bbeb 	b.w	18ff4 <d_print_comp_inner+0x17b0>
   1981e:	2500      	movs	r5, #0
   19820:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19824:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19828:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1982c:	4620      	mov	r0, r4
   1982e:	4798      	blx	r3
   19830:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19834:	3301      	adds	r3, #1
   19836:	4629      	mov	r1, r5
   19838:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1983c:	2201      	movs	r2, #1
   1983e:	f7ff ba8f 	b.w	18d60 <d_print_comp_inner+0x151c>
   19842:	2600      	movs	r6, #0
   19844:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19848:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1984c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19850:	4798      	blx	r3
   19852:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19856:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1985a:	3301      	adds	r3, #1
   1985c:	4631      	mov	r1, r6
   1985e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19862:	f7fe bd43 	b.w	182ec <d_print_comp_inner+0xaa8>
   19866:	2600      	movs	r6, #0
   19868:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1986c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19870:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19874:	4798      	blx	r3
   19876:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1987a:	3301      	adds	r3, #1
   1987c:	4631      	mov	r1, r6
   1987e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19882:	2201      	movs	r2, #1
   19884:	f7fe bb74 	b.w	17f70 <d_print_comp_inner+0x72c>
   19888:	2500      	movs	r5, #0
   1988a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1988e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19892:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19896:	4620      	mov	r0, r4
   19898:	4798      	blx	r3
   1989a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1989e:	3301      	adds	r3, #1
   198a0:	4629      	mov	r1, r5
   198a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198a6:	2201      	movs	r2, #1
   198a8:	f7ff bae4 	b.w	18e74 <d_print_comp_inner+0x1630>
   198ac:	220d      	movs	r2, #13
   198ae:	4988      	ldr	r1, [pc, #544]	; (19ad0 <d_print_comp_inner+0x228c>)
   198b0:	4620      	mov	r0, r4
   198b2:	f7fb fcf3 	bl	1529c <d_append_buffer>
   198b6:	68a9      	ldr	r1, [r5, #8]
   198b8:	4620      	mov	r0, r4
   198ba:	3101      	adds	r1, #1
   198bc:	f7fb ff9e 	bl	157fc <d_append_num>
   198c0:	2203      	movs	r2, #3
   198c2:	4984      	ldr	r1, [pc, #528]	; (19ad4 <d_print_comp_inner+0x2290>)
   198c4:	4620      	mov	r0, r4
   198c6:	f7fb fce9 	bl	1529c <d_append_buffer>
   198ca:	686d      	ldr	r5, [r5, #4]
   198cc:	f7fe bc22 	b.w	18114 <d_print_comp_inner+0x8d0>
   198d0:	2500      	movs	r5, #0
   198d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   198da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   198de:	4620      	mov	r0, r4
   198e0:	4798      	blx	r3
   198e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198e6:	3301      	adds	r3, #1
   198e8:	4629      	mov	r1, r5
   198ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198ee:	2201      	movs	r2, #1
   198f0:	f7fe be08 	b.w	18504 <d_print_comp_inner+0xcc0>
   198f4:	2301      	movs	r3, #1
   198f6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   198fa:	f7fe b871 	b.w	179e0 <d_print_comp_inner+0x19c>
   198fe:	2500      	movs	r5, #0
   19900:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19904:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19908:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1990c:	4620      	mov	r0, r4
   1990e:	4798      	blx	r3
   19910:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19914:	3301      	adds	r3, #1
   19916:	4629      	mov	r1, r5
   19918:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1991c:	2201      	movs	r2, #1
   1991e:	f7ff ba8f 	b.w	18e40 <d_print_comp_inner+0x15fc>
   19922:	2500      	movs	r5, #0
   19924:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19928:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1992c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19930:	4620      	mov	r0, r4
   19932:	4798      	blx	r3
   19934:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19938:	3301      	adds	r3, #1
   1993a:	4629      	mov	r1, r5
   1993c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19940:	2201      	movs	r2, #1
   19942:	f7ff bbc5 	b.w	190d0 <d_print_comp_inner+0x188c>
   19946:	a914      	add	r1, sp, #80	; 0x50
   19948:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1994c:	f841 0d40 	str.w	r0, [r1, #-64]!
   19950:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   19954:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   19958:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   1995c:	4620      	mov	r0, r4
   1995e:	4641      	mov	r1, r8
   19960:	9306      	str	r3, [sp, #24]
   19962:	9607      	str	r6, [sp, #28]
   19964:	9505      	str	r5, [sp, #20]
   19966:	f000 fd11 	bl	1a38c <d_print_comp>
   1996a:	9e06      	ldr	r6, [sp, #24]
   1996c:	9b04      	ldr	r3, [sp, #16]
   1996e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19972:	2e00      	cmp	r6, #0
   19974:	f47e a834 	bne.w	179e0 <d_print_comp_inner+0x19c>
   19978:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1997c:	29ff      	cmp	r1, #255	; 0xff
   1997e:	f000 8409 	beq.w	1a194 <d_print_comp_inner+0x2950>
   19982:	2320      	movs	r3, #32
   19984:	1c4a      	adds	r2, r1, #1
   19986:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1998a:	5463      	strb	r3, [r4, r1]
   1998c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19990:	f7fe be0b 	b.w	185aa <d_print_comp_inner+0xd66>
   19994:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   19998:	2b00      	cmp	r3, #0
   1999a:	f6fe abff 	blt.w	1819c <d_print_comp_inner+0x958>
   1999e:	2b00      	cmp	r3, #0
   199a0:	f000 829d 	beq.w	19ede <d_print_comp_inner+0x269a>
   199a4:	6880      	ldr	r0, [r0, #8]
   199a6:	3b01      	subs	r3, #1
   199a8:	2800      	cmp	r0, #0
   199aa:	f43e a82d 	beq.w	17a08 <d_print_comp_inner+0x1c4>
   199ae:	7802      	ldrb	r2, [r0, #0]
   199b0:	2a2f      	cmp	r2, #47	; 0x2f
   199b2:	d0f4      	beq.n	1999e <d_print_comp_inner+0x215a>
   199b4:	f7fe b828 	b.w	17a08 <d_print_comp_inner+0x1c4>
   199b8:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   199bc:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   199c0:	f1be 0f00 	cmp.w	lr, #0
   199c4:	dd14      	ble.n	199f0 <d_print_comp_inner+0x21ac>
   199c6:	6813      	ldr	r3, [r2, #0]
   199c8:	4299      	cmp	r1, r3
   199ca:	f000 83f5 	beq.w	1a1b8 <d_print_comp_inner+0x2974>
   199ce:	f102 0008 	add.w	r0, r2, #8
   199d2:	463b      	mov	r3, r7
   199d4:	46a4      	mov	ip, r4
   199d6:	e004      	b.n	199e2 <d_print_comp_inner+0x219e>
   199d8:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   199dc:	42a1      	cmp	r1, r4
   199de:	f000 81d4 	beq.w	19d8a <d_print_comp_inner+0x2546>
   199e2:	3301      	adds	r3, #1
   199e4:	459e      	cmp	lr, r3
   199e6:	4681      	mov	r9, r0
   199e8:	f100 0008 	add.w	r0, r0, #8
   199ec:	d1f4      	bne.n	199d8 <d_print_comp_inner+0x2194>
   199ee:	4664      	mov	r4, ip
   199f0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   199f4:	459e      	cmp	lr, r3
   199f6:	f280 84b9 	bge.w	1a36c <d_print_comp_inner+0x2b28>
   199fa:	f10e 0301 	add.w	r3, lr, #1
   199fe:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   19a02:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   19a06:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   19a0a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a0e:	3004      	adds	r0, #4
   19a10:	468e      	mov	lr, r1
   19a12:	2a00      	cmp	r2, #0
   19a14:	f000 848d 	beq.w	1a332 <d_print_comp_inner+0x2aee>
   19a18:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   19a1c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   19a20:	428b      	cmp	r3, r1
   19a22:	f103 0c01 	add.w	ip, r3, #1
   19a26:	f280 84a1 	bge.w	1a36c <d_print_comp_inner+0x2b28>
   19a2a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   19a2e:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   19a32:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   19a36:	6851      	ldr	r1, [r2, #4]
   19a38:	6059      	str	r1, [r3, #4]
   19a3a:	6003      	str	r3, [r0, #0]
   19a3c:	6812      	ldr	r2, [r2, #0]
   19a3e:	4618      	mov	r0, r3
   19a40:	e7e7      	b.n	19a12 <d_print_comp_inner+0x21ce>
   19a42:	2500      	movs	r5, #0
   19a44:	4619      	mov	r1, r3
   19a46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a4e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19a52:	4620      	mov	r0, r4
   19a54:	4798      	blx	r3
   19a56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a5a:	1c5a      	adds	r2, r3, #1
   19a5c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19a60:	462b      	mov	r3, r5
   19a62:	2201      	movs	r2, #1
   19a64:	f7fe bd3d 	b.w	184e2 <d_print_comp_inner+0xc9e>
   19a68:	2e00      	cmp	r6, #0
   19a6a:	f000 844d 	beq.w	1a308 <d_print_comp_inner+0x2ac4>
   19a6e:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   19a72:	f040 8488 	bne.w	1a386 <d_print_comp_inner+0x2b42>
   19a76:	6873      	ldr	r3, [r6, #4]
   19a78:	b373      	cbz	r3, 19ad8 <d_print_comp_inner+0x2294>
   19a7a:	4607      	mov	r7, r0
   19a7c:	e007      	b.n	19a8e <d_print_comp_inner+0x224a>
   19a7e:	3701      	adds	r7, #1
   19a80:	68b6      	ldr	r6, [r6, #8]
   19a82:	b356      	cbz	r6, 19ada <d_print_comp_inner+0x2296>
   19a84:	7833      	ldrb	r3, [r6, #0]
   19a86:	2b2f      	cmp	r3, #47	; 0x2f
   19a88:	d127      	bne.n	19ada <d_print_comp_inner+0x2296>
   19a8a:	6873      	ldr	r3, [r6, #4]
   19a8c:	b32b      	cbz	r3, 19ada <d_print_comp_inner+0x2296>
   19a8e:	781a      	ldrb	r2, [r3, #0]
   19a90:	2a4a      	cmp	r2, #74	; 0x4a
   19a92:	d1f4      	bne.n	19a7e <d_print_comp_inner+0x223a>
   19a94:	6859      	ldr	r1, [r3, #4]
   19a96:	4620      	mov	r0, r4
   19a98:	f7fb fe2c 	bl	156f4 <d_find_pack>
   19a9c:	b198      	cbz	r0, 19ac6 <d_print_comp_inner+0x2282>
   19a9e:	7803      	ldrb	r3, [r0, #0]
   19aa0:	2b2f      	cmp	r3, #47	; 0x2f
   19aa2:	f040 846c 	bne.w	1a37e <d_print_comp_inner+0x2b3a>
   19aa6:	6843      	ldr	r3, [r0, #4]
   19aa8:	2b00      	cmp	r3, #0
   19aaa:	f000 8464 	beq.w	1a376 <d_print_comp_inner+0x2b32>
   19aae:	4603      	mov	r3, r0
   19ab0:	2000      	movs	r0, #0
   19ab2:	e004      	b.n	19abe <d_print_comp_inner+0x227a>
   19ab4:	781a      	ldrb	r2, [r3, #0]
   19ab6:	2a2f      	cmp	r2, #47	; 0x2f
   19ab8:	d105      	bne.n	19ac6 <d_print_comp_inner+0x2282>
   19aba:	685a      	ldr	r2, [r3, #4]
   19abc:	b11a      	cbz	r2, 19ac6 <d_print_comp_inner+0x2282>
   19abe:	689b      	ldr	r3, [r3, #8]
   19ac0:	3001      	adds	r0, #1
   19ac2:	2b00      	cmp	r3, #0
   19ac4:	d1f6      	bne.n	19ab4 <d_print_comp_inner+0x2270>
   19ac6:	4407      	add	r7, r0
   19ac8:	e7da      	b.n	19a80 <d_print_comp_inner+0x223c>
   19aca:	bf00      	nop
   19acc:	00024fd8 	.word	0x00024fd8
   19ad0:	0002502c 	.word	0x0002502c
   19ad4:	0002503c 	.word	0x0002503c
   19ad8:	461f      	mov	r7, r3
   19ada:	4639      	mov	r1, r7
   19adc:	4620      	mov	r0, r4
   19ade:	f7fb fe8d 	bl	157fc <d_append_num>
   19ae2:	f7fd bf7d 	b.w	179e0 <d_print_comp_inner+0x19c>
   19ae6:	2500      	movs	r5, #0
   19ae8:	4619      	mov	r1, r3
   19aea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19aee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19af2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19af6:	4620      	mov	r0, r4
   19af8:	4798      	blx	r3
   19afa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19afe:	1c5a      	adds	r2, r3, #1
   19b00:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19b04:	462b      	mov	r3, r5
   19b06:	2101      	movs	r1, #1
   19b08:	f7fe bb8e 	b.w	18228 <d_print_comp_inner+0x9e4>
   19b0c:	2600      	movs	r6, #0
   19b0e:	4619      	mov	r1, r3
   19b10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b18:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19b1c:	4620      	mov	r0, r4
   19b1e:	4798      	blx	r3
   19b20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b24:	1c5a      	adds	r2, r3, #1
   19b26:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19b2a:	4633      	mov	r3, r6
   19b2c:	2101      	movs	r1, #1
   19b2e:	f7fe bb65 	b.w	181fc <d_print_comp_inner+0x9b8>
   19b32:	2200      	movs	r2, #0
   19b34:	4619      	mov	r1, r3
   19b36:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   19b3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b42:	4620      	mov	r0, r4
   19b44:	4798      	blx	r3
   19b46:	2329      	movs	r3, #41	; 0x29
   19b48:	7023      	strb	r3, [r4, #0]
   19b4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19b4e:	782a      	ldrb	r2, [r5, #0]
   19b50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b54:	2101      	movs	r1, #1
   19b56:	3301      	adds	r3, #1
   19b58:	2a3d      	cmp	r2, #61	; 0x3d
   19b5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b62:	f47e af58 	bne.w	18a16 <d_print_comp_inner+0x11d2>
   19b66:	e63f      	b.n	197e8 <d_print_comp_inner+0x1fa4>
   19b68:	2700      	movs	r7, #0
   19b6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b6e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   19b72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b76:	4620      	mov	r0, r4
   19b78:	4798      	blx	r3
   19b7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b7e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   19b82:	3301      	adds	r3, #1
   19b84:	4639      	mov	r1, r7
   19b86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b8a:	f7fe bf28 	b.w	189de <d_print_comp_inner+0x119a>
   19b8e:	2500      	movs	r5, #0
   19b90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b98:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19b9c:	4620      	mov	r0, r4
   19b9e:	4798      	blx	r3
   19ba0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ba4:	3301      	adds	r3, #1
   19ba6:	4629      	mov	r1, r5
   19ba8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bac:	2201      	movs	r2, #1
   19bae:	f7ff bb12 	b.w	191d6 <d_print_comp_inner+0x1992>
   19bb2:	781b      	ldrb	r3, [r3, #0]
   19bb4:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   19bb8:	2901      	cmp	r1, #1
   19bba:	d903      	bls.n	19bc4 <d_print_comp_inner+0x2380>
   19bbc:	3b72      	subs	r3, #114	; 0x72
   19bbe:	2b01      	cmp	r3, #1
   19bc0:	f63d aead 	bhi.w	1791e <d_print_comp_inner+0xda>
   19bc4:	4641      	mov	r1, r8
   19bc6:	4620      	mov	r0, r4
   19bc8:	f001 f9c8 	bl	1af5c <d_print_expr_op>
   19bcc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19bd0:	29ff      	cmp	r1, #255	; 0xff
   19bd2:	f000 8271 	beq.w	1a0b8 <d_print_comp_inner+0x2874>
   19bd6:	1c4a      	adds	r2, r1, #1
   19bd8:	233c      	movs	r3, #60	; 0x3c
   19bda:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19bde:	5463      	strb	r3, [r4, r1]
   19be0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19be4:	68ab      	ldr	r3, [r5, #8]
   19be6:	4641      	mov	r1, r8
   19be8:	685a      	ldr	r2, [r3, #4]
   19bea:	4620      	mov	r0, r4
   19bec:	f000 fbce 	bl	1a38c <d_print_comp>
   19bf0:	2202      	movs	r2, #2
   19bf2:	49d5      	ldr	r1, [pc, #852]	; (19f48 <d_print_comp_inner+0x2704>)
   19bf4:	4620      	mov	r0, r4
   19bf6:	f7fb fb51 	bl	1529c <d_append_buffer>
   19bfa:	68ab      	ldr	r3, [r5, #8]
   19bfc:	4641      	mov	r1, r8
   19bfe:	689a      	ldr	r2, [r3, #8]
   19c00:	4620      	mov	r0, r4
   19c02:	f000 fbc3 	bl	1a38c <d_print_comp>
   19c06:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19c0a:	29ff      	cmp	r1, #255	; 0xff
   19c0c:	f000 81df 	beq.w	19fce <d_print_comp_inner+0x278a>
   19c10:	2329      	movs	r3, #41	; 0x29
   19c12:	1c4a      	adds	r2, r1, #1
   19c14:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19c18:	5463      	strb	r3, [r4, r1]
   19c1a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19c1e:	f7fd bedf 	b.w	179e0 <d_print_comp_inner+0x19c>
   19c22:	4632      	mov	r2, r6
   19c24:	4641      	mov	r1, r8
   19c26:	4620      	mov	r0, r4
   19c28:	f000 fbb0 	bl	1a38c <d_print_comp>
   19c2c:	f7fd bed8 	b.w	179e0 <d_print_comp_inner+0x19c>
   19c30:	2600      	movs	r6, #0
   19c32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c3a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19c3e:	4620      	mov	r0, r4
   19c40:	4798      	blx	r3
   19c42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c46:	3301      	adds	r3, #1
   19c48:	4631      	mov	r1, r6
   19c4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c4e:	2201      	movs	r2, #1
   19c50:	f7fe ba55 	b.w	180fe <d_print_comp_inner+0x8ba>
   19c54:	49bd      	ldr	r1, [pc, #756]	; (19f4c <d_print_comp_inner+0x2708>)
   19c56:	6870      	ldr	r0, [r6, #4]
   19c58:	f005 fea0 	bl	1f99c <strncmp>
   19c5c:	2800      	cmp	r0, #0
   19c5e:	f47e aabd 	bne.w	181dc <d_print_comp_inner+0x998>
   19c62:	68aa      	ldr	r2, [r5, #8]
   19c64:	4641      	mov	r1, r8
   19c66:	4620      	mov	r0, r4
   19c68:	f000 fb90 	bl	1a38c <d_print_comp>
   19c6c:	2202      	movs	r2, #2
   19c6e:	49b8      	ldr	r1, [pc, #736]	; (19f50 <d_print_comp_inner+0x270c>)
   19c70:	4620      	mov	r0, r4
   19c72:	f7fb fb13 	bl	1529c <d_append_buffer>
   19c76:	f7fe badd 	b.w	18234 <d_print_comp_inner+0x9f0>
   19c7a:	68aa      	ldr	r2, [r5, #8]
   19c7c:	7817      	ldrb	r7, [r2, #0]
   19c7e:	2f00      	cmp	r7, #0
   19c80:	f47e aea8 	bne.w	189d4 <d_print_comp_inner+0x1190>
   19c84:	2b3d      	cmp	r3, #61	; 0x3d
   19c86:	f000 82ef 	beq.w	1a268 <d_print_comp_inner+0x2a24>
   19c8a:	68aa      	ldr	r2, [r5, #8]
   19c8c:	4641      	mov	r1, r8
   19c8e:	4620      	mov	r0, r4
   19c90:	3e02      	subs	r6, #2
   19c92:	f000 fb7b 	bl	1a38c <d_print_comp>
   19c96:	2e04      	cmp	r6, #4
   19c98:	f63d aea2 	bhi.w	179e0 <d_print_comp_inner+0x19c>
   19c9c:	e8df f006 	tbb	[pc, r6]
   19ca0:	0a111826 	.word	0x0a111826
   19ca4:	03          	.byte	0x03
   19ca5:	00          	.byte	0x00
   19ca6:	4620      	mov	r0, r4
   19ca8:	2203      	movs	r2, #3
   19caa:	49aa      	ldr	r1, [pc, #680]	; (19f54 <d_print_comp_inner+0x2710>)
   19cac:	f7fb faf6 	bl	1529c <d_append_buffer>
   19cb0:	f7fd be96 	b.w	179e0 <d_print_comp_inner+0x19c>
   19cb4:	4620      	mov	r0, r4
   19cb6:	2202      	movs	r2, #2
   19cb8:	49a7      	ldr	r1, [pc, #668]	; (19f58 <d_print_comp_inner+0x2714>)
   19cba:	f7fb faef 	bl	1529c <d_append_buffer>
   19cbe:	f7fd be8f 	b.w	179e0 <d_print_comp_inner+0x19c>
   19cc2:	4620      	mov	r0, r4
   19cc4:	2202      	movs	r2, #2
   19cc6:	49a5      	ldr	r1, [pc, #660]	; (19f5c <d_print_comp_inner+0x2718>)
   19cc8:	f7fb fae8 	bl	1529c <d_append_buffer>
   19ccc:	f7fd be88 	b.w	179e0 <d_print_comp_inner+0x19c>
   19cd0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19cd4:	29ff      	cmp	r1, #255	; 0xff
   19cd6:	f000 831a 	beq.w	1a30e <d_print_comp_inner+0x2aca>
   19cda:	236c      	movs	r3, #108	; 0x6c
   19cdc:	1c4a      	adds	r2, r1, #1
   19cde:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19ce2:	5463      	strb	r3, [r4, r1]
   19ce4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19ce8:	f7fd be7a 	b.w	179e0 <d_print_comp_inner+0x19c>
   19cec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19cf0:	29ff      	cmp	r1, #255	; 0xff
   19cf2:	f000 82db 	beq.w	1a2ac <d_print_comp_inner+0x2a68>
   19cf6:	2375      	movs	r3, #117	; 0x75
   19cf8:	1c4a      	adds	r2, r1, #1
   19cfa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19cfe:	5463      	strb	r3, [r4, r1]
   19d00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19d04:	f7fd be6c 	b.w	179e0 <d_print_comp_inner+0x19c>
   19d08:	2600      	movs	r6, #0
   19d0a:	4619      	mov	r1, r3
   19d0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d14:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19d18:	4620      	mov	r0, r4
   19d1a:	4798      	blx	r3
   19d1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d20:	1c5a      	adds	r2, r3, #1
   19d22:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19d26:	4633      	mov	r3, r6
   19d28:	2101      	movs	r1, #1
   19d2a:	f7fe bd3c 	b.w	187a6 <d_print_comp_inner+0xf62>
   19d2e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19d32:	f7fe bf95 	b.w	18c60 <d_print_comp_inner+0x141c>
   19d36:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19d3a:	29ff      	cmp	r1, #255	; 0xff
   19d3c:	f000 8244 	beq.w	1a1c8 <d_print_comp_inner+0x2984>
   19d40:	2320      	movs	r3, #32
   19d42:	1c4a      	adds	r2, r1, #1
   19d44:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19d48:	5463      	strb	r3, [r4, r1]
   19d4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19d4e:	e447      	b.n	195e0 <d_print_comp_inner+0x1d9c>
   19d50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19d54:	29ff      	cmp	r1, #255	; 0xff
   19d56:	f000 826e 	beq.w	1a236 <d_print_comp_inner+0x29f2>
   19d5a:	2320      	movs	r3, #32
   19d5c:	1c4a      	adds	r2, r1, #1
   19d5e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19d62:	5463      	strb	r3, [r4, r1]
   19d64:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19d68:	e419      	b.n	1959e <d_print_comp_inner+0x1d5a>
   19d6a:	2500      	movs	r5, #0
   19d6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d70:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19d74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d78:	4620      	mov	r0, r4
   19d7a:	4798      	blx	r3
   19d7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d80:	3301      	adds	r3, #1
   19d82:	4629      	mov	r1, r5
   19d84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d88:	e4dd      	b.n	19746 <d_print_comp_inner+0x1f02>
   19d8a:	4664      	mov	r4, ip
   19d8c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   19d90:	b1d8      	cbz	r0, 19dca <d_print_comp_inner+0x2586>
   19d92:	6802      	ldr	r2, [r0, #0]
   19d94:	4291      	cmp	r1, r2
   19d96:	d00a      	beq.n	19dae <d_print_comp_inner+0x256a>
   19d98:	4603      	mov	r3, r0
   19d9a:	e004      	b.n	19da6 <d_print_comp_inner+0x2562>
   19d9c:	685b      	ldr	r3, [r3, #4]
   19d9e:	b1a3      	cbz	r3, 19dca <d_print_comp_inner+0x2586>
   19da0:	681a      	ldr	r2, [r3, #0]
   19da2:	4291      	cmp	r1, r2
   19da4:	d003      	beq.n	19dae <d_print_comp_inner+0x256a>
   19da6:	4295      	cmp	r5, r2
   19da8:	d1f8      	bne.n	19d9c <d_print_comp_inner+0x2558>
   19daa:	4298      	cmp	r0, r3
   19dac:	d0f6      	beq.n	19d9c <d_print_comp_inner+0x2558>
   19dae:	3104      	adds	r1, #4
   19db0:	4620      	mov	r0, r4
   19db2:	f7fb fc83 	bl	156bc <d_lookup_template_argument.isra.6>
   19db6:	2800      	cmp	r0, #0
   19db8:	f43d ae26 	beq.w	17a08 <d_print_comp_inner+0x1c4>
   19dbc:	7803      	ldrb	r3, [r0, #0]
   19dbe:	2b2f      	cmp	r3, #47	; 0x2f
   19dc0:	f43d ae11 	beq.w	179e6 <d_print_comp_inner+0x1a2>
   19dc4:	4601      	mov	r1, r0
   19dc6:	f7fe bc30 	b.w	1862a <d_print_comp_inner+0xde6>
   19dca:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19dce:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   19dd2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19dd6:	3104      	adds	r1, #4
   19dd8:	4620      	mov	r0, r4
   19dda:	f7fb fc6f 	bl	156bc <d_lookup_template_argument.isra.6>
   19dde:	2800      	cmp	r0, #0
   19de0:	f43d ae10 	beq.w	17a04 <d_print_comp_inner+0x1c0>
   19de4:	2701      	movs	r7, #1
   19de6:	e7e9      	b.n	19dbc <d_print_comp_inner+0x2578>
   19de8:	2600      	movs	r6, #0
   19dea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19dee:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19df2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19df6:	4620      	mov	r0, r4
   19df8:	4798      	blx	r3
   19dfa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19dfe:	f8da 5004 	ldr.w	r5, [sl, #4]
   19e02:	3301      	adds	r3, #1
   19e04:	4631      	mov	r1, r6
   19e06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e0a:	f7ff b85a 	b.w	18ec2 <d_print_comp_inner+0x167e>
   19e0e:	68aa      	ldr	r2, [r5, #8]
   19e10:	4641      	mov	r1, r8
   19e12:	4620      	mov	r0, r4
   19e14:	f000 faba 	bl	1a38c <d_print_comp>
   19e18:	9b06      	ldr	r3, [sp, #24]
   19e1a:	9a00      	ldr	r2, [sp, #0]
   19e1c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   19e20:	2b00      	cmp	r3, #0
   19e22:	f43e ac9d 	beq.w	18760 <d_print_comp_inner+0xf1c>
   19e26:	f7fd bddb 	b.w	179e0 <d_print_comp_inner+0x19c>
   19e2a:	255f      	movs	r5, #95	; 0x5f
   19e2c:	f7ff ba10 	b.w	19250 <d_print_comp_inner+0x1a0c>
   19e30:	2500      	movs	r5, #0
   19e32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e36:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19e3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19e3e:	4620      	mov	r0, r4
   19e40:	4798      	blx	r3
   19e42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e46:	3301      	adds	r3, #1
   19e48:	4629      	mov	r1, r5
   19e4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e4e:	f7ff bb82 	b.w	19556 <d_print_comp_inner+0x1d12>
   19e52:	4648      	mov	r0, r9
   19e54:	4942      	ldr	r1, [pc, #264]	; (19f60 <d_print_comp_inner+0x271c>)
   19e56:	f005 fbc7 	bl	1f5e8 <strcmp>
   19e5a:	b120      	cbz	r0, 19e66 <d_print_comp_inner+0x2622>
   19e5c:	463a      	mov	r2, r7
   19e5e:	4641      	mov	r1, r8
   19e60:	4620      	mov	r0, r4
   19e62:	f001 f87b 	bl	1af5c <d_print_expr_op>
   19e66:	68ab      	ldr	r3, [r5, #8]
   19e68:	4641      	mov	r1, r8
   19e6a:	689a      	ldr	r2, [r3, #8]
   19e6c:	4620      	mov	r0, r4
   19e6e:	f001 f8b3 	bl	1afd8 <d_print_subexpr>
   19e72:	f7fd bd9d 	b.w	179b0 <d_print_comp_inner+0x16c>
   19e76:	2600      	movs	r6, #0
   19e78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e7c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19e80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19e84:	4620      	mov	r0, r4
   19e86:	4798      	blx	r3
   19e88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e8c:	3301      	adds	r3, #1
   19e8e:	4631      	mov	r1, r6
   19e90:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e94:	f7ff bb88 	b.w	195a8 <d_print_comp_inner+0x1d64>
   19e98:	2500      	movs	r5, #0
   19e9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e9e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19ea6:	4620      	mov	r0, r4
   19ea8:	4798      	blx	r3
   19eaa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19eae:	3301      	adds	r3, #1
   19eb0:	4629      	mov	r1, r5
   19eb2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19eb6:	f7fe bb59 	b.w	1856c <d_print_comp_inner+0xd28>
   19eba:	2500      	movs	r5, #0
   19ebc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19ec0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19ec4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19ec8:	4798      	blx	r3
   19eca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ece:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19ed2:	3301      	adds	r3, #1
   19ed4:	4629      	mov	r1, r5
   19ed6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19eda:	f7fe bb2b 	b.w	18534 <d_print_comp_inner+0xcf0>
   19ede:	6840      	ldr	r0, [r0, #4]
   19ee0:	2800      	cmp	r0, #0
   19ee2:	f43d ad91 	beq.w	17a08 <d_print_comp_inner+0x1c4>
   19ee6:	f7fe b959 	b.w	1819c <d_print_comp_inner+0x958>
   19eea:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   19eee:	4619      	mov	r1, r3
   19ef0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19ef4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ef8:	4620      	mov	r0, r4
   19efa:	4798      	blx	r3
   19efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f00:	1c5a      	adds	r2, r3, #1
   19f02:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19f06:	462b      	mov	r3, r5
   19f08:	f7ff bb14 	b.w	19534 <d_print_comp_inner+0x1cf0>
   19f0c:	6873      	ldr	r3, [r6, #4]
   19f0e:	781a      	ldrb	r2, [r3, #0]
   19f10:	2a01      	cmp	r2, #1
   19f12:	f000 8153 	beq.w	1a1bc <d_print_comp_inner+0x2978>
   19f16:	f896 a000 	ldrb.w	sl, [r6]
   19f1a:	f7ff bae0 	b.w	194de <d_print_comp_inner+0x1c9a>
   19f1e:	2500      	movs	r5, #0
   19f20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f24:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19f28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f2c:	4620      	mov	r0, r4
   19f2e:	4798      	blx	r3
   19f30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f34:	3301      	adds	r3, #1
   19f36:	4629      	mov	r1, r5
   19f38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19f3c:	f7ff bb55 	b.w	195ea <d_print_comp_inner+0x1da6>
   19f40:	4654      	mov	r4, sl
   19f42:	f7fe be8d 	b.w	18c60 <d_print_comp_inner+0x141c>
   19f46:	bf00      	nop
   19f48:	000251d8 	.word	0x000251d8
   19f4c:	00025040 	.word	0x00025040
   19f50:	00025048 	.word	0x00025048
   19f54:	000251f4 	.word	0x000251f4
   19f58:	000251f0 	.word	0x000251f0
   19f5c:	000251ec 	.word	0x000251ec
   19f60:	00024fe0 	.word	0x00024fe0
   19f64:	686a      	ldr	r2, [r5, #4]
   19f66:	4641      	mov	r1, r8
   19f68:	4620      	mov	r0, r4
   19f6a:	f001 f835 	bl	1afd8 <d_print_subexpr>
   19f6e:	4620      	mov	r0, r4
   19f70:	2203      	movs	r2, #3
   19f72:	49e2      	ldr	r1, [pc, #904]	; (1a2fc <d_print_comp_inner+0x2ab8>)
   19f74:	f7fb f992 	bl	1529c <d_append_buffer>
   19f78:	f7fd bd32 	b.w	179e0 <d_print_comp_inner+0x19c>
   19f7c:	ab14      	add	r3, sp, #80	; 0x50
   19f7e:	9603      	str	r6, [sp, #12]
   19f80:	f843 cd48 	str.w	ip, [r3, #-72]!
   19f84:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19f88:	f7fe b85a 	b.w	18040 <d_print_comp_inner+0x7fc>
   19f8c:	2700      	movs	r7, #0
   19f8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f92:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   19f96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f9a:	4620      	mov	r0, r4
   19f9c:	4798      	blx	r3
   19f9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fa2:	3301      	adds	r3, #1
   19fa4:	4639      	mov	r1, r7
   19fa6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19faa:	e41d      	b.n	197e8 <d_print_comp_inner+0x1fa4>
   19fac:	2600      	movs	r6, #0
   19fae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19fb2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19fb6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19fba:	4620      	mov	r0, r4
   19fbc:	4798      	blx	r3
   19fbe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fc2:	3301      	adds	r3, #1
   19fc4:	4631      	mov	r1, r6
   19fc6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19fca:	f7ff bb8a 	b.w	196e2 <d_print_comp_inner+0x1e9e>
   19fce:	2500      	movs	r5, #0
   19fd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19fd4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19fd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19fdc:	4620      	mov	r0, r4
   19fde:	4798      	blx	r3
   19fe0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fe4:	3301      	adds	r3, #1
   19fe6:	4629      	mov	r1, r5
   19fe8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19fec:	e610      	b.n	19c10 <d_print_comp_inner+0x23cc>
   19fee:	2600      	movs	r6, #0
   19ff0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ff4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19ff8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19ffc:	4620      	mov	r0, r4
   19ffe:	4798      	blx	r3
   1a000:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a004:	3301      	adds	r3, #1
   1a006:	4631      	mov	r1, r6
   1a008:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a00c:	f7ff bb8a 	b.w	19724 <d_print_comp_inner+0x1ee0>
   1a010:	685a      	ldr	r2, [r3, #4]
   1a012:	6891      	ldr	r1, [r2, #8]
   1a014:	2901      	cmp	r1, #1
   1a016:	f47d ac90 	bne.w	1793a <d_print_comp_inner+0xf6>
   1a01a:	6852      	ldr	r2, [r2, #4]
   1a01c:	7812      	ldrb	r2, [r2, #0]
   1a01e:	2a3e      	cmp	r2, #62	; 0x3e
   1a020:	f47d ac8b 	bne.w	1793a <d_print_comp_inner+0xf6>
   1a024:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a028:	29ff      	cmp	r1, #255	; 0xff
   1a02a:	d10f      	bne.n	1a04c <d_print_comp_inner+0x2808>
   1a02c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a030:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1a034:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a038:	4620      	mov	r0, r4
   1a03a:	4798      	blx	r3
   1a03c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a040:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a044:	3301      	adds	r3, #1
   1a046:	4631      	mov	r1, r6
   1a048:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a04c:	2328      	movs	r3, #40	; 0x28
   1a04e:	1c4a      	adds	r2, r1, #1
   1a050:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a054:	5463      	strb	r3, [r4, r1]
   1a056:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a05a:	686b      	ldr	r3, [r5, #4]
   1a05c:	f7fd bc6d 	b.w	1793a <d_print_comp_inner+0xf6>
   1a060:	2500      	movs	r5, #0
   1a062:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a066:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a06a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a06e:	4620      	mov	r0, r4
   1a070:	4798      	blx	r3
   1a072:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a076:	3301      	adds	r3, #1
   1a078:	4629      	mov	r1, r5
   1a07a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a07e:	f7ff bb0b 	b.w	19698 <d_print_comp_inner+0x1e54>
   1a082:	f8db b004 	ldr.w	fp, [fp, #4]
   1a086:	f1bb 0f00 	cmp.w	fp, #0
   1a08a:	f43e ade9 	beq.w	18c60 <d_print_comp_inner+0x141c>
   1a08e:	f7fd bfc3 	b.w	18018 <d_print_comp_inner+0x7d4>
   1a092:	9b02      	ldr	r3, [sp, #8]
   1a094:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1a098:	f7fd bfdb 	b.w	18052 <d_print_comp_inner+0x80e>
   1a09c:	6893      	ldr	r3, [r2, #8]
   1a09e:	781b      	ldrb	r3, [r3, #0]
   1a0a0:	2b29      	cmp	r3, #41	; 0x29
   1a0a2:	bf1c      	itt	ne
   1a0a4:	2301      	movne	r3, #1
   1a0a6:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1a0aa:	6852      	ldr	r2, [r2, #4]
   1a0ac:	4641      	mov	r1, r8
   1a0ae:	4620      	mov	r0, r4
   1a0b0:	f000 ff92 	bl	1afd8 <d_print_subexpr>
   1a0b4:	f7fd bc52 	b.w	1795c <d_print_comp_inner+0x118>
   1a0b8:	2600      	movs	r6, #0
   1a0ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a0be:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1a0c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a0c6:	4620      	mov	r0, r4
   1a0c8:	4798      	blx	r3
   1a0ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0ce:	3301      	adds	r3, #1
   1a0d0:	4631      	mov	r1, r6
   1a0d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a0d6:	e57e      	b.n	19bd6 <d_print_comp_inner+0x2392>
   1a0d8:	6872      	ldr	r2, [r6, #4]
   1a0da:	4641      	mov	r1, r8
   1a0dc:	4620      	mov	r0, r4
   1a0de:	f000 ff7b 	bl	1afd8 <d_print_subexpr>
   1a0e2:	464a      	mov	r2, r9
   1a0e4:	4641      	mov	r1, r8
   1a0e6:	4620      	mov	r0, r4
   1a0e8:	f000 ff38 	bl	1af5c <d_print_expr_op>
   1a0ec:	f7fd bc78 	b.w	179e0 <d_print_comp_inner+0x19c>
   1a0f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a0f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a0f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a0fc:	4620      	mov	r0, r4
   1a0fe:	4798      	blx	r3
   1a100:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a104:	3301      	adds	r3, #1
   1a106:	4629      	mov	r1, r5
   1a108:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a10c:	f7fd bfad 	b.w	1806a <d_print_comp_inner+0x826>
   1a110:	464a      	mov	r2, r9
   1a112:	4641      	mov	r1, r8
   1a114:	4620      	mov	r0, r4
   1a116:	f000 ff5f 	bl	1afd8 <d_print_subexpr>
   1a11a:	4652      	mov	r2, sl
   1a11c:	4641      	mov	r1, r8
   1a11e:	4620      	mov	r0, r4
   1a120:	f000 ff1c 	bl	1af5c <d_print_expr_op>
   1a124:	463a      	mov	r2, r7
   1a126:	4641      	mov	r1, r8
   1a128:	4620      	mov	r0, r4
   1a12a:	f000 ff55 	bl	1afd8 <d_print_subexpr>
   1a12e:	4620      	mov	r0, r4
   1a130:	2203      	movs	r2, #3
   1a132:	4973      	ldr	r1, [pc, #460]	; (1a300 <d_print_comp_inner+0x2abc>)
   1a134:	f7fb f8b2 	bl	1529c <d_append_buffer>
   1a138:	462a      	mov	r2, r5
   1a13a:	4641      	mov	r1, r8
   1a13c:	4620      	mov	r0, r4
   1a13e:	f000 ff4b 	bl	1afd8 <d_print_subexpr>
   1a142:	f7fd bc4d 	b.w	179e0 <d_print_comp_inner+0x19c>
   1a146:	454f      	cmp	r7, r9
   1a148:	f67f ae6f 	bls.w	19e2a <d_print_comp_inner+0x25e6>
   1a14c:	2d5f      	cmp	r5, #95	; 0x5f
   1a14e:	f47f ae6c 	bne.w	19e2a <d_print_comp_inner+0x25e6>
   1a152:	28ff      	cmp	r0, #255	; 0xff
   1a154:	f63f a87c 	bhi.w	19250 <d_print_comp_inner+0x1a0c>
   1a158:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a15c:	29ff      	cmp	r1, #255	; 0xff
   1a15e:	b2c5      	uxtb	r5, r0
   1a160:	d10f      	bne.n	1a182 <d_print_comp_inner+0x293e>
   1a162:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a166:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a16a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a16e:	4620      	mov	r0, r4
   1a170:	4798      	blx	r3
   1a172:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a176:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1a17a:	3301      	adds	r3, #1
   1a17c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a180:	2100      	movs	r1, #0
   1a182:	1c4b      	adds	r3, r1, #1
   1a184:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a188:	464e      	mov	r6, r9
   1a18a:	5465      	strb	r5, [r4, r1]
   1a18c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1a190:	f7ff b868 	b.w	19264 <d_print_comp_inner+0x1a20>
   1a194:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a198:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1a19c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1a0:	4620      	mov	r0, r4
   1a1a2:	4798      	blx	r3
   1a1a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1a8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a1ac:	3301      	adds	r3, #1
   1a1ae:	4631      	mov	r1, r6
   1a1b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1b4:	f7ff bbe5 	b.w	19982 <d_print_comp_inner+0x213e>
   1a1b8:	4691      	mov	r9, r2
   1a1ba:	e5e7      	b.n	19d8c <d_print_comp_inner+0x2548>
   1a1bc:	68b2      	ldr	r2, [r6, #8]
   1a1be:	7812      	ldrb	r2, [r2, #0]
   1a1c0:	2a29      	cmp	r2, #41	; 0x29
   1a1c2:	bf08      	it	eq
   1a1c4:	461e      	moveq	r6, r3
   1a1c6:	e6a6      	b.n	19f16 <d_print_comp_inner+0x26d2>
   1a1c8:	2500      	movs	r5, #0
   1a1ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1ce:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a1d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1d6:	4620      	mov	r0, r4
   1a1d8:	4798      	blx	r3
   1a1da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1de:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a1e2:	3301      	adds	r3, #1
   1a1e4:	4629      	mov	r1, r5
   1a1e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1ea:	e5a9      	b.n	19d40 <d_print_comp_inner+0x24fc>
   1a1ec:	2600      	movs	r6, #0
   1a1ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1f2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1a1f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1fa:	4620      	mov	r0, r4
   1a1fc:	4798      	blx	r3
   1a1fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a202:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a206:	3301      	adds	r3, #1
   1a208:	4631      	mov	r1, r6
   1a20a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a20e:	f7fd bbc8 	b.w	179a2 <d_print_comp_inner+0x15e>
   1a212:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   1a216:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a21a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a21e:	4620      	mov	r0, r4
   1a220:	4798      	blx	r3
   1a222:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a226:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a22a:	3301      	adds	r3, #1
   1a22c:	4631      	mov	r1, r6
   1a22e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a232:	f7fd bba4 	b.w	1797e <d_print_comp_inner+0x13a>
   1a236:	2600      	movs	r6, #0
   1a238:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a23c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1a240:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a244:	4620      	mov	r0, r4
   1a246:	4798      	blx	r3
   1a248:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a24c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a250:	3301      	adds	r3, #1
   1a252:	4631      	mov	r1, r6
   1a254:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a258:	e57f      	b.n	19d5a <d_print_comp_inner+0x2516>
   1a25a:	6841      	ldr	r1, [r0, #4]
   1a25c:	2900      	cmp	r1, #0
   1a25e:	f43d abd0 	beq.w	17a02 <d_print_comp_inner+0x1be>
   1a262:	780b      	ldrb	r3, [r1, #0]
   1a264:	f7fe b9e1 	b.w	1862a <d_print_comp_inner+0xde6>
   1a268:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a26c:	29ff      	cmp	r1, #255	; 0xff
   1a26e:	d00d      	beq.n	1a28c <d_print_comp_inner+0x2a48>
   1a270:	232d      	movs	r3, #45	; 0x2d
   1a272:	1c4a      	adds	r2, r1, #1
   1a274:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a278:	5463      	strb	r3, [r4, r1]
   1a27a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a27e:	e504      	b.n	19c8a <d_print_comp_inner+0x2446>
   1a280:	2205      	movs	r2, #5
   1a282:	4920      	ldr	r1, [pc, #128]	; (1a304 <d_print_comp_inner+0x2ac0>)
   1a284:	f7fb f80a 	bl	1529c <d_append_buffer>
   1a288:	f7fd bbaa 	b.w	179e0 <d_print_comp_inner+0x19c>
   1a28c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a290:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   1a294:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a298:	4798      	blx	r3
   1a29a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a29e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1a2a2:	3301      	adds	r3, #1
   1a2a4:	4639      	mov	r1, r7
   1a2a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a2aa:	e7e1      	b.n	1a270 <d_print_comp_inner+0x2a2c>
   1a2ac:	2500      	movs	r5, #0
   1a2ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2b2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a2b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2ba:	4620      	mov	r0, r4
   1a2bc:	4798      	blx	r3
   1a2be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2c2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a2c6:	3301      	adds	r3, #1
   1a2c8:	4629      	mov	r1, r5
   1a2ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a2ce:	e512      	b.n	19cf6 <d_print_comp_inner+0x24b2>
   1a2d0:	2700      	movs	r7, #0
   1a2d2:	f7ff b913 	b.w	194fc <d_print_comp_inner+0x1cb8>
   1a2d6:	2500      	movs	r5, #0
   1a2d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2dc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a2e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2e4:	4620      	mov	r0, r4
   1a2e6:	4798      	blx	r3
   1a2e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2ec:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a2f0:	3301      	adds	r3, #1
   1a2f2:	4629      	mov	r1, r5
   1a2f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a2f8:	f7fd bb6b 	b.w	179d2 <d_print_comp_inner+0x18e>
   1a2fc:	00023768 	.word	0x00023768
   1a300:	000251e0 	.word	0x000251e0
   1a304:	000251f8 	.word	0x000251f8
   1a308:	4637      	mov	r7, r6
   1a30a:	f7ff bbe6 	b.w	19ada <d_print_comp_inner+0x2296>
   1a30e:	2500      	movs	r5, #0
   1a310:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a314:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a318:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a31c:	4620      	mov	r0, r4
   1a31e:	4798      	blx	r3
   1a320:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a324:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a328:	3301      	adds	r3, #1
   1a32a:	4629      	mov	r1, r5
   1a32c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a330:	e4d3      	b.n	19cda <d_print_comp_inner+0x2496>
   1a332:	4671      	mov	r1, lr
   1a334:	6002      	str	r2, [r0, #0]
   1a336:	3104      	adds	r1, #4
   1a338:	4620      	mov	r0, r4
   1a33a:	f7fb f9bf 	bl	156bc <d_lookup_template_argument.isra.6>
   1a33e:	2800      	cmp	r0, #0
   1a340:	f47f ad3c 	bne.w	19dbc <d_print_comp_inner+0x2578>
   1a344:	f7fd bb60 	b.w	17a08 <d_print_comp_inner+0x1c4>
   1a348:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a34c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1a350:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a354:	4620      	mov	r0, r4
   1a356:	4798      	blx	r3
   1a358:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a35c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a360:	3301      	adds	r3, #1
   1a362:	4631      	mov	r1, r6
   1a364:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a368:	f7fe bc02 	b.w	18b70 <d_print_comp_inner+0x132c>
   1a36c:	2301      	movs	r3, #1
   1a36e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1a372:	f7fd bb35 	b.w	179e0 <d_print_comp_inner+0x19c>
   1a376:	4618      	mov	r0, r3
   1a378:	4407      	add	r7, r0
   1a37a:	f7ff bb81 	b.w	19a80 <d_print_comp_inner+0x223c>
   1a37e:	2000      	movs	r0, #0
   1a380:	4407      	add	r7, r0
   1a382:	f7ff bb7d 	b.w	19a80 <d_print_comp_inner+0x223c>
   1a386:	4607      	mov	r7, r0
   1a388:	f7ff bba7 	b.w	19ada <d_print_comp_inner+0x2296>

0001a38c <d_print_comp>:
   1a38c:	b510      	push	{r4, lr}
   1a38e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1a392:	b082      	sub	sp, #8
   1a394:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a398:	4604      	mov	r4, r0
   1a39a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1a39e:	f7fd fa51 	bl	17844 <d_print_comp_inner>
   1a3a2:	9b01      	ldr	r3, [sp, #4]
   1a3a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a3a8:	b002      	add	sp, #8
   1a3aa:	bd10      	pop	{r4, pc}

0001a3ac <d_print_mod>:
   1a3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3b0:	7813      	ldrb	r3, [r2, #0]
   1a3b2:	3b03      	subs	r3, #3
   1a3b4:	b082      	sub	sp, #8
   1a3b6:	4615      	mov	r5, r2
   1a3b8:	4604      	mov	r4, r0
   1a3ba:	4688      	mov	r8, r1
   1a3bc:	2b49      	cmp	r3, #73	; 0x49
   1a3be:	f200 8223 	bhi.w	1a808 <d_print_mod+0x45c>
   1a3c2:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a3c6:	01e7      	.short	0x01e7
   1a3c8:	02210221 	.word	0x02210221
   1a3cc:	02210221 	.word	0x02210221
   1a3d0:	02210221 	.word	0x02210221
   1a3d4:	02210221 	.word	0x02210221
   1a3d8:	02210221 	.word	0x02210221
   1a3dc:	02210221 	.word	0x02210221
   1a3e0:	02210221 	.word	0x02210221
   1a3e4:	02210221 	.word	0x02210221
   1a3e8:	02210221 	.word	0x02210221
   1a3ec:	02210221 	.word	0x02210221
   1a3f0:	01e90221 	.word	0x01e90221
   1a3f4:	01a80182 	.word	0x01a80182
   1a3f8:	018201e9 	.word	0x018201e9
   1a3fc:	01cd01a8 	.word	0x01cd01a8
   1a400:	006f01da 	.word	0x006f01da
   1a404:	009c008c 	.word	0x009c008c
   1a408:	00cf00ab 	.word	0x00cf00ab
   1a40c:	022100f4 	.word	0x022100f4
   1a410:	02210221 	.word	0x02210221
   1a414:	01190221 	.word	0x01190221
   1a418:	015c0221 	.word	0x015c0221
   1a41c:	02210221 	.word	0x02210221
   1a420:	02210221 	.word	0x02210221
   1a424:	02210221 	.word	0x02210221
   1a428:	02210221 	.word	0x02210221
   1a42c:	02210221 	.word	0x02210221
   1a430:	02210221 	.word	0x02210221
   1a434:	02210221 	.word	0x02210221
   1a438:	02210221 	.word	0x02210221
   1a43c:	02210221 	.word	0x02210221
   1a440:	02210221 	.word	0x02210221
   1a444:	02210221 	.word	0x02210221
   1a448:	02210221 	.word	0x02210221
   1a44c:	02210221 	.word	0x02210221
   1a450:	02210221 	.word	0x02210221
   1a454:	02210221 	.word	0x02210221
   1a458:	004a      	.short	0x004a
   1a45a:	4dd3      	ldr	r5, [pc, #844]	; (1a7a8 <d_print_mod+0x3fc>)
   1a45c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a460:	f105 0711 	add.w	r7, r5, #17
   1a464:	f04f 0800 	mov.w	r8, #0
   1a468:	e008      	b.n	1a47c <d_print_mod+0xd0>
   1a46a:	460b      	mov	r3, r1
   1a46c:	3101      	adds	r1, #1
   1a46e:	42bd      	cmp	r5, r7
   1a470:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a474:	54e6      	strb	r6, [r4, r3]
   1a476:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a47a:	d02d      	beq.n	1a4d8 <d_print_mod+0x12c>
   1a47c:	29ff      	cmp	r1, #255	; 0xff
   1a47e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1a482:	d1f2      	bne.n	1a46a <d_print_mod+0xbe>
   1a484:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a488:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a48c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a490:	4620      	mov	r0, r4
   1a492:	4798      	blx	r3
   1a494:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a498:	3301      	adds	r3, #1
   1a49a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a49e:	2101      	movs	r1, #1
   1a4a0:	2300      	movs	r3, #0
   1a4a2:	e7e4      	b.n	1a46e <d_print_mod+0xc2>
   1a4a4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a4a8:	29ff      	cmp	r1, #255	; 0xff
   1a4aa:	f000 81f7 	beq.w	1a89c <d_print_mod+0x4f0>
   1a4ae:	1c4a      	adds	r2, r1, #1
   1a4b0:	2320      	movs	r3, #32
   1a4b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a4b6:	5463      	strb	r3, [r4, r1]
   1a4b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a4bc:	68aa      	ldr	r2, [r5, #8]
   1a4be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a4c2:	9200      	str	r2, [sp, #0]
   1a4c4:	4641      	mov	r1, r8
   1a4c6:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a4ca:	4620      	mov	r0, r4
   1a4cc:	9301      	str	r3, [sp, #4]
   1a4ce:	f7fd f9b9 	bl	17844 <d_print_comp_inner>
   1a4d2:	9b01      	ldr	r3, [sp, #4]
   1a4d4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a4d8:	b002      	add	sp, #8
   1a4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a4de:	f011 0504 	ands.w	r5, r1, #4
   1a4e2:	d1f9      	bne.n	1a4d8 <d_print_mod+0x12c>
   1a4e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a4e8:	2bff      	cmp	r3, #255	; 0xff
   1a4ea:	f000 821c 	beq.w	1a926 <d_print_mod+0x57a>
   1a4ee:	222a      	movs	r2, #42	; 0x2a
   1a4f0:	1c59      	adds	r1, r3, #1
   1a4f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a4f6:	54e2      	strb	r2, [r4, r3]
   1a4f8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a4fc:	e7ec      	b.n	1a4d8 <d_print_mod+0x12c>
   1a4fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a502:	29ff      	cmp	r1, #255	; 0xff
   1a504:	f000 81b9 	beq.w	1a87a <d_print_mod+0x4ce>
   1a508:	1c4a      	adds	r2, r1, #1
   1a50a:	2326      	movs	r3, #38	; 0x26
   1a50c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a510:	5463      	strb	r3, [r4, r1]
   1a512:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a516:	b002      	add	sp, #8
   1a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a51c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a520:	4da2      	ldr	r5, [pc, #648]	; (1a7ac <d_print_mod+0x400>)
   1a522:	f04f 0800 	mov.w	r8, #0
   1a526:	1caf      	adds	r7, r5, #2
   1a528:	e008      	b.n	1a53c <d_print_mod+0x190>
   1a52a:	460b      	mov	r3, r1
   1a52c:	3101      	adds	r1, #1
   1a52e:	42bd      	cmp	r5, r7
   1a530:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a534:	54e6      	strb	r6, [r4, r3]
   1a536:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a53a:	d0cd      	beq.n	1a4d8 <d_print_mod+0x12c>
   1a53c:	29ff      	cmp	r1, #255	; 0xff
   1a53e:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a542:	d1f2      	bne.n	1a52a <d_print_mod+0x17e>
   1a544:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a548:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a54c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a550:	4620      	mov	r0, r4
   1a552:	4798      	blx	r3
   1a554:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a558:	3301      	adds	r3, #1
   1a55a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a55e:	2101      	movs	r1, #1
   1a560:	2300      	movs	r3, #0
   1a562:	e7e4      	b.n	1a52e <d_print_mod+0x182>
   1a564:	4d92      	ldr	r5, [pc, #584]	; (1a7b0 <d_print_mod+0x404>)
   1a566:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a56a:	f105 0708 	add.w	r7, r5, #8
   1a56e:	f04f 0800 	mov.w	r8, #0
   1a572:	e008      	b.n	1a586 <d_print_mod+0x1da>
   1a574:	460b      	mov	r3, r1
   1a576:	3101      	adds	r1, #1
   1a578:	42bd      	cmp	r5, r7
   1a57a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a57e:	54e6      	strb	r6, [r4, r3]
   1a580:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a584:	d0a8      	beq.n	1a4d8 <d_print_mod+0x12c>
   1a586:	29ff      	cmp	r1, #255	; 0xff
   1a588:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1a58c:	d1f2      	bne.n	1a574 <d_print_mod+0x1c8>
   1a58e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a592:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a596:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a59a:	4620      	mov	r0, r4
   1a59c:	4798      	blx	r3
   1a59e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5a2:	3301      	adds	r3, #1
   1a5a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5a8:	2101      	movs	r1, #1
   1a5aa:	2300      	movs	r3, #0
   1a5ac:	e7e4      	b.n	1a578 <d_print_mod+0x1cc>
   1a5ae:	4d81      	ldr	r5, [pc, #516]	; (1a7b4 <d_print_mod+0x408>)
   1a5b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a5b4:	f105 070a 	add.w	r7, r5, #10
   1a5b8:	f04f 0800 	mov.w	r8, #0
   1a5bc:	e008      	b.n	1a5d0 <d_print_mod+0x224>
   1a5be:	460b      	mov	r3, r1
   1a5c0:	3101      	adds	r1, #1
   1a5c2:	42bd      	cmp	r5, r7
   1a5c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a5c8:	54e6      	strb	r6, [r4, r3]
   1a5ca:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a5ce:	d083      	beq.n	1a4d8 <d_print_mod+0x12c>
   1a5d0:	29ff      	cmp	r1, #255	; 0xff
   1a5d2:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a5d6:	d1f2      	bne.n	1a5be <d_print_mod+0x212>
   1a5d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5dc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a5e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a5e4:	4620      	mov	r0, r4
   1a5e6:	4798      	blx	r3
   1a5e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5ec:	3301      	adds	r3, #1
   1a5ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5f2:	2101      	movs	r1, #1
   1a5f4:	2300      	movs	r3, #0
   1a5f6:	e7e4      	b.n	1a5c2 <d_print_mod+0x216>
   1a5f8:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   1a5fc:	2b28      	cmp	r3, #40	; 0x28
   1a5fe:	d00b      	beq.n	1a618 <d_print_mod+0x26c>
   1a600:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a604:	2bff      	cmp	r3, #255	; 0xff
   1a606:	f000 8126 	beq.w	1a856 <d_print_mod+0x4aa>
   1a60a:	2220      	movs	r2, #32
   1a60c:	1c59      	adds	r1, r3, #1
   1a60e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a612:	54e2      	strb	r2, [r4, r3]
   1a614:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a618:	686a      	ldr	r2, [r5, #4]
   1a61a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a61e:	4d66      	ldr	r5, [pc, #408]	; (1a7b8 <d_print_mod+0x40c>)
   1a620:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a624:	4641      	mov	r1, r8
   1a626:	4620      	mov	r0, r4
   1a628:	9301      	str	r3, [sp, #4]
   1a62a:	9200      	str	r2, [sp, #0]
   1a62c:	f7fd f90a 	bl	17844 <d_print_comp_inner>
   1a630:	9b01      	ldr	r3, [sp, #4]
   1a632:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a636:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a63a:	1cef      	adds	r7, r5, #3
   1a63c:	f04f 0800 	mov.w	r8, #0
   1a640:	e009      	b.n	1a656 <d_print_mod+0x2aa>
   1a642:	460b      	mov	r3, r1
   1a644:	3101      	adds	r1, #1
   1a646:	42bd      	cmp	r5, r7
   1a648:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a64c:	54e6      	strb	r6, [r4, r3]
   1a64e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a652:	f43f af41 	beq.w	1a4d8 <d_print_mod+0x12c>
   1a656:	29ff      	cmp	r1, #255	; 0xff
   1a658:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a65c:	d1f1      	bne.n	1a642 <d_print_mod+0x296>
   1a65e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a662:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a666:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a66a:	4620      	mov	r0, r4
   1a66c:	4798      	blx	r3
   1a66e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a672:	3301      	adds	r3, #1
   1a674:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a678:	2101      	movs	r1, #1
   1a67a:	2300      	movs	r3, #0
   1a67c:	e7e3      	b.n	1a646 <d_print_mod+0x29a>
   1a67e:	4e4f      	ldr	r6, [pc, #316]	; (1a7bc <d_print_mod+0x410>)
   1a680:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a684:	f106 0a0a 	add.w	sl, r6, #10
   1a688:	f04f 0900 	mov.w	r9, #0
   1a68c:	e009      	b.n	1a6a2 <d_print_mod+0x2f6>
   1a68e:	460b      	mov	r3, r1
   1a690:	3101      	adds	r1, #1
   1a692:	4556      	cmp	r6, sl
   1a694:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a698:	54e7      	strb	r7, [r4, r3]
   1a69a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1a69e:	f000 80c0 	beq.w	1a822 <d_print_mod+0x476>
   1a6a2:	29ff      	cmp	r1, #255	; 0xff
   1a6a4:	f816 7b01 	ldrb.w	r7, [r6], #1
   1a6a8:	d1f1      	bne.n	1a68e <d_print_mod+0x2e2>
   1a6aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a6b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a6b6:	4620      	mov	r0, r4
   1a6b8:	4798      	blx	r3
   1a6ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6be:	3301      	adds	r3, #1
   1a6c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a6c4:	2101      	movs	r1, #1
   1a6c6:	2300      	movs	r3, #0
   1a6c8:	e7e3      	b.n	1a692 <d_print_mod+0x2e6>
   1a6ca:	4d3d      	ldr	r5, [pc, #244]	; (1a7c0 <d_print_mod+0x414>)
   1a6cc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a6d0:	f105 0709 	add.w	r7, r5, #9
   1a6d4:	f04f 0800 	mov.w	r8, #0
   1a6d8:	e009      	b.n	1a6ee <d_print_mod+0x342>
   1a6da:	460b      	mov	r3, r1
   1a6dc:	3101      	adds	r1, #1
   1a6de:	42bd      	cmp	r5, r7
   1a6e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a6e4:	54e6      	strb	r6, [r4, r3]
   1a6e6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a6ea:	f43f aef5 	beq.w	1a4d8 <d_print_mod+0x12c>
   1a6ee:	29ff      	cmp	r1, #255	; 0xff
   1a6f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1a6f4:	d1f1      	bne.n	1a6da <d_print_mod+0x32e>
   1a6f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a6fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a702:	4620      	mov	r0, r4
   1a704:	4798      	blx	r3
   1a706:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a70a:	3301      	adds	r3, #1
   1a70c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a710:	2101      	movs	r1, #1
   1a712:	2300      	movs	r3, #0
   1a714:	e7e3      	b.n	1a6de <d_print_mod+0x332>
   1a716:	4d2b      	ldr	r5, [pc, #172]	; (1a7c4 <d_print_mod+0x418>)
   1a718:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a71c:	1daf      	adds	r7, r5, #6
   1a71e:	f04f 0800 	mov.w	r8, #0
   1a722:	e009      	b.n	1a738 <d_print_mod+0x38c>
   1a724:	460b      	mov	r3, r1
   1a726:	3101      	adds	r1, #1
   1a728:	42bd      	cmp	r5, r7
   1a72a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a72e:	54e6      	strb	r6, [r4, r3]
   1a730:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a734:	f43f aed0 	beq.w	1a4d8 <d_print_mod+0x12c>
   1a738:	29ff      	cmp	r1, #255	; 0xff
   1a73a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a73e:	d1f1      	bne.n	1a724 <d_print_mod+0x378>
   1a740:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a744:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a748:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a74c:	4620      	mov	r0, r4
   1a74e:	4798      	blx	r3
   1a750:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a754:	3301      	adds	r3, #1
   1a756:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a75a:	2101      	movs	r1, #1
   1a75c:	2300      	movs	r3, #0
   1a75e:	e7e3      	b.n	1a728 <d_print_mod+0x37c>
   1a760:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a764:	2bff      	cmp	r3, #255	; 0xff
   1a766:	f000 80cc 	beq.w	1a902 <d_print_mod+0x556>
   1a76a:	2220      	movs	r2, #32
   1a76c:	1c59      	adds	r1, r3, #1
   1a76e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a772:	54e2      	strb	r2, [r4, r3]
   1a774:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a778:	e6c3      	b.n	1a502 <d_print_mod+0x156>
   1a77a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a77e:	2bff      	cmp	r3, #255	; 0xff
   1a780:	f000 80ad 	beq.w	1a8de <d_print_mod+0x532>
   1a784:	2220      	movs	r2, #32
   1a786:	1c59      	adds	r1, r3, #1
   1a788:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a78c:	54e2      	strb	r2, [r4, r3]
   1a78e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a792:	e6c5      	b.n	1a520 <d_print_mod+0x174>
   1a794:	686a      	ldr	r2, [r5, #4]
   1a796:	e692      	b.n	1a4be <d_print_mod+0x112>
   1a798:	4d0b      	ldr	r5, [pc, #44]	; (1a7c8 <d_print_mod+0x41c>)
   1a79a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a79e:	f105 0709 	add.w	r7, r5, #9
   1a7a2:	f04f 0800 	mov.w	r8, #0
   1a7a6:	e01b      	b.n	1a7e0 <d_print_mod+0x434>
   1a7a8:	000252c3 	.word	0x000252c3
   1a7ac:	000252d8 	.word	0x000252d8
   1a7b0:	000252db 	.word	0x000252db
   1a7b4:	000252e8 	.word	0x000252e8
   1a7b8:	000252f4 	.word	0x000252f4
   1a7bc:	000252f8 	.word	0x000252f8
   1a7c0:	000252af 	.word	0x000252af
   1a7c4:	000252bc 	.word	0x000252bc
   1a7c8:	000252a3 	.word	0x000252a3
   1a7cc:	460b      	mov	r3, r1
   1a7ce:	3101      	adds	r1, #1
   1a7d0:	42af      	cmp	r7, r5
   1a7d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a7d6:	54e6      	strb	r6, [r4, r3]
   1a7d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a7dc:	f43f ae7c 	beq.w	1a4d8 <d_print_mod+0x12c>
   1a7e0:	29ff      	cmp	r1, #255	; 0xff
   1a7e2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1a7e6:	d1f1      	bne.n	1a7cc <d_print_mod+0x420>
   1a7e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a7ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a7f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a7f4:	4620      	mov	r0, r4
   1a7f6:	4798      	blx	r3
   1a7f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7fc:	3301      	adds	r3, #1
   1a7fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a802:	2101      	movs	r1, #1
   1a804:	2300      	movs	r3, #0
   1a806:	e7e3      	b.n	1a7d0 <d_print_mod+0x424>
   1a808:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1a80c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a810:	462a      	mov	r2, r5
   1a812:	9301      	str	r3, [sp, #4]
   1a814:	9500      	str	r5, [sp, #0]
   1a816:	f7fd f815 	bl	17844 <d_print_comp_inner>
   1a81a:	9b01      	ldr	r3, [sp, #4]
   1a81c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a820:	e65a      	b.n	1a4d8 <d_print_mod+0x12c>
   1a822:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a826:	686a      	ldr	r2, [r5, #4]
   1a828:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a82c:	4641      	mov	r1, r8
   1a82e:	4620      	mov	r0, r4
   1a830:	9301      	str	r3, [sp, #4]
   1a832:	9200      	str	r2, [sp, #0]
   1a834:	f7fd f806 	bl	17844 <d_print_comp_inner>
   1a838:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a83c:	9b01      	ldr	r3, [sp, #4]
   1a83e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a842:	29ff      	cmp	r1, #255	; 0xff
   1a844:	d03a      	beq.n	1a8bc <d_print_mod+0x510>
   1a846:	1c4a      	adds	r2, r1, #1
   1a848:	2329      	movs	r3, #41	; 0x29
   1a84a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a84e:	5463      	strb	r3, [r4, r1]
   1a850:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a854:	e640      	b.n	1a4d8 <d_print_mod+0x12c>
   1a856:	2600      	movs	r6, #0
   1a858:	4619      	mov	r1, r3
   1a85a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a85e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a862:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1a866:	4798      	blx	r3
   1a868:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a86c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a870:	1c5a      	adds	r2, r3, #1
   1a872:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a876:	4633      	mov	r3, r6
   1a878:	e6c7      	b.n	1a60a <d_print_mod+0x25e>
   1a87a:	2500      	movs	r5, #0
   1a87c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a880:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a884:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a888:	4620      	mov	r0, r4
   1a88a:	4798      	blx	r3
   1a88c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a890:	3301      	adds	r3, #1
   1a892:	4629      	mov	r1, r5
   1a894:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a898:	2201      	movs	r2, #1
   1a89a:	e636      	b.n	1a50a <d_print_mod+0x15e>
   1a89c:	2600      	movs	r6, #0
   1a89e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a8a2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a8a6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1a8aa:	4798      	blx	r3
   1a8ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8b0:	3301      	adds	r3, #1
   1a8b2:	4631      	mov	r1, r6
   1a8b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a8b8:	2201      	movs	r2, #1
   1a8ba:	e5f9      	b.n	1a4b0 <d_print_mod+0x104>
   1a8bc:	2500      	movs	r5, #0
   1a8be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a8c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a8c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a8ca:	4620      	mov	r0, r4
   1a8cc:	4798      	blx	r3
   1a8ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8d2:	3301      	adds	r3, #1
   1a8d4:	4629      	mov	r1, r5
   1a8d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a8da:	2201      	movs	r2, #1
   1a8dc:	e7b4      	b.n	1a848 <d_print_mod+0x49c>
   1a8de:	2500      	movs	r5, #0
   1a8e0:	4619      	mov	r1, r3
   1a8e2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a8e6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a8ea:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a8ee:	4798      	blx	r3
   1a8f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8f4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a8f8:	1c5a      	adds	r2, r3, #1
   1a8fa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a8fe:	462b      	mov	r3, r5
   1a900:	e740      	b.n	1a784 <d_print_mod+0x3d8>
   1a902:	2500      	movs	r5, #0
   1a904:	4619      	mov	r1, r3
   1a906:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a90a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a90e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a912:	4798      	blx	r3
   1a914:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a918:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a91c:	1c5a      	adds	r2, r3, #1
   1a91e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a922:	462b      	mov	r3, r5
   1a924:	e721      	b.n	1a76a <d_print_mod+0x3be>
   1a926:	4619      	mov	r1, r3
   1a928:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a92c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a930:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a934:	4798      	blx	r3
   1a936:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a93a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a93e:	1c5a      	adds	r2, r3, #1
   1a940:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a944:	462b      	mov	r3, r5
   1a946:	e5d2      	b.n	1a4ee <d_print_mod+0x142>

0001a948 <d_print_mod_list>:
   1a948:	2a00      	cmp	r2, #0
   1a94a:	f000 80a1 	beq.w	1aa90 <d_print_mod_list+0x148>
   1a94e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a952:	461e      	mov	r6, r3
   1a954:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   1a958:	b089      	sub	sp, #36	; 0x24
   1a95a:	4605      	mov	r5, r0
   1a95c:	bb43      	cbnz	r3, 1a9b0 <d_print_mod_list+0x68>
   1a95e:	460f      	mov	r7, r1
   1a960:	4614      	mov	r4, r2
   1a962:	f04f 0801 	mov.w	r8, #1
   1a966:	e002      	b.n	1a96e <d_print_mod_list+0x26>
   1a968:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1a96c:	bb03      	cbnz	r3, 1a9b0 <d_print_mod_list+0x68>
   1a96e:	68a3      	ldr	r3, [r4, #8]
   1a970:	b9db      	cbnz	r3, 1a9aa <d_print_mod_list+0x62>
   1a972:	6862      	ldr	r2, [r4, #4]
   1a974:	7813      	ldrb	r3, [r2, #0]
   1a976:	b92e      	cbnz	r6, 1a984 <d_print_mod_list+0x3c>
   1a978:	f1a3 011c 	sub.w	r1, r3, #28
   1a97c:	2904      	cmp	r1, #4
   1a97e:	d914      	bls.n	1a9aa <d_print_mod_list+0x62>
   1a980:	2b4c      	cmp	r3, #76	; 0x4c
   1a982:	d012      	beq.n	1a9aa <d_print_mod_list+0x62>
   1a984:	68e1      	ldr	r1, [r4, #12]
   1a986:	f8c4 8008 	str.w	r8, [r4, #8]
   1a98a:	2b29      	cmp	r3, #41	; 0x29
   1a98c:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   1a990:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   1a994:	d00f      	beq.n	1a9b6 <d_print_mod_list+0x6e>
   1a996:	2b2a      	cmp	r3, #42	; 0x2a
   1a998:	d018      	beq.n	1a9cc <d_print_mod_list+0x84>
   1a99a:	2b02      	cmp	r3, #2
   1a99c:	d021      	beq.n	1a9e2 <d_print_mod_list+0x9a>
   1a99e:	4639      	mov	r1, r7
   1a9a0:	4628      	mov	r0, r5
   1a9a2:	f7ff fd03 	bl	1a3ac <d_print_mod>
   1a9a6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a9aa:	6824      	ldr	r4, [r4, #0]
   1a9ac:	2c00      	cmp	r4, #0
   1a9ae:	d1db      	bne.n	1a968 <d_print_mod_list+0x20>
   1a9b0:	b009      	add	sp, #36	; 0x24
   1a9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9b6:	6823      	ldr	r3, [r4, #0]
   1a9b8:	3208      	adds	r2, #8
   1a9ba:	4639      	mov	r1, r7
   1a9bc:	4628      	mov	r0, r5
   1a9be:	f000 f9d9 	bl	1ad74 <d_print_function_type.isra.11>
   1a9c2:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a9c6:	b009      	add	sp, #36	; 0x24
   1a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9cc:	6823      	ldr	r3, [r4, #0]
   1a9ce:	3204      	adds	r2, #4
   1a9d0:	4639      	mov	r1, r7
   1a9d2:	4628      	mov	r0, r5
   1a9d4:	f000 f8f2 	bl	1abbc <d_print_array_type.isra.10>
   1a9d8:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a9dc:	b009      	add	sp, #36	; 0x24
   1a9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9e2:	2600      	movs	r6, #0
   1a9e4:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   1a9e8:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   1a9ec:	6852      	ldr	r2, [r2, #4]
   1a9ee:	4639      	mov	r1, r7
   1a9f0:	4628      	mov	r0, r5
   1a9f2:	f7ff fccb 	bl	1a38c <d_print_comp>
   1a9f6:	f017 0a04 	ands.w	sl, r7, #4
   1a9fa:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   1a9fe:	d023      	beq.n	1aa48 <d_print_mod_list+0x100>
   1aa00:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1aa04:	29ff      	cmp	r1, #255	; 0xff
   1aa06:	f000 80c1 	beq.w	1ab8c <d_print_mod_list+0x244>
   1aa0a:	1c4a      	adds	r2, r1, #1
   1aa0c:	232e      	movs	r3, #46	; 0x2e
   1aa0e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   1aa12:	546b      	strb	r3, [r5, r1]
   1aa14:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   1aa18:	6863      	ldr	r3, [r4, #4]
   1aa1a:	689c      	ldr	r4, [r3, #8]
   1aa1c:	7823      	ldrb	r3, [r4, #0]
   1aa1e:	2b46      	cmp	r3, #70	; 0x46
   1aa20:	d037      	beq.n	1aa92 <d_print_mod_list+0x14a>
   1aa22:	f1a3 021c 	sub.w	r2, r3, #28
   1aa26:	2a04      	cmp	r2, #4
   1aa28:	d90b      	bls.n	1aa42 <d_print_mod_list+0xfa>
   1aa2a:	2b4c      	cmp	r3, #76	; 0x4c
   1aa2c:	d009      	beq.n	1aa42 <d_print_mod_list+0xfa>
   1aa2e:	4622      	mov	r2, r4
   1aa30:	4639      	mov	r1, r7
   1aa32:	4628      	mov	r0, r5
   1aa34:	f7ff fcaa 	bl	1a38c <d_print_comp>
   1aa38:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1aa3c:	b009      	add	sp, #36	; 0x24
   1aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa42:	6864      	ldr	r4, [r4, #4]
   1aa44:	7823      	ldrb	r3, [r4, #0]
   1aa46:	e7ec      	b.n	1aa22 <d_print_mod_list+0xda>
   1aa48:	4e58      	ldr	r6, [pc, #352]	; (1abac <d_print_mod_list+0x264>)
   1aa4a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1aa4e:	f106 0b02 	add.w	fp, r6, #2
   1aa52:	e009      	b.n	1aa68 <d_print_mod_list+0x120>
   1aa54:	460b      	mov	r3, r1
   1aa56:	3101      	adds	r1, #1
   1aa58:	455e      	cmp	r6, fp
   1aa5a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1aa5e:	f805 8003 	strb.w	r8, [r5, r3]
   1aa62:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1aa66:	d0d7      	beq.n	1aa18 <d_print_mod_list+0xd0>
   1aa68:	29ff      	cmp	r1, #255	; 0xff
   1aa6a:	f816 8b01 	ldrb.w	r8, [r6], #1
   1aa6e:	d1f1      	bne.n	1aa54 <d_print_mod_list+0x10c>
   1aa70:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1aa74:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   1aa78:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1aa7c:	4628      	mov	r0, r5
   1aa7e:	4798      	blx	r3
   1aa80:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1aa84:	3301      	adds	r3, #1
   1aa86:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1aa8a:	2101      	movs	r1, #1
   1aa8c:	2300      	movs	r3, #0
   1aa8e:	e7e3      	b.n	1aa58 <d_print_mod_list+0x110>
   1aa90:	4770      	bx	lr
   1aa92:	4e47      	ldr	r6, [pc, #284]	; (1abb0 <d_print_mod_list+0x268>)
   1aa94:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1aa98:	f106 0a0d 	add.w	sl, r6, #13
   1aa9c:	f04f 0b00 	mov.w	fp, #0
   1aaa0:	e009      	b.n	1aab6 <d_print_mod_list+0x16e>
   1aaa2:	460b      	mov	r3, r1
   1aaa4:	3101      	adds	r1, #1
   1aaa6:	45b2      	cmp	sl, r6
   1aaa8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1aaac:	f805 8003 	strb.w	r8, [r5, r3]
   1aab0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1aab4:	d013      	beq.n	1aade <d_print_mod_list+0x196>
   1aab6:	29ff      	cmp	r1, #255	; 0xff
   1aab8:	f816 8b01 	ldrb.w	r8, [r6], #1
   1aabc:	d1f1      	bne.n	1aaa2 <d_print_mod_list+0x15a>
   1aabe:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1aac2:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1aac6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1aaca:	4628      	mov	r0, r5
   1aacc:	4798      	blx	r3
   1aace:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1aad2:	3301      	adds	r3, #1
   1aad4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1aad8:	2101      	movs	r1, #1
   1aada:	2300      	movs	r3, #0
   1aadc:	e7e3      	b.n	1aaa6 <d_print_mod_list+0x15e>
   1aade:	68a2      	ldr	r2, [r4, #8]
   1aae0:	4934      	ldr	r1, [pc, #208]	; (1abb4 <d_print_mod_list+0x26c>)
   1aae2:	3201      	adds	r2, #1
   1aae4:	a801      	add	r0, sp, #4
   1aae6:	f004 fd49 	bl	1f57c <sprintf>
   1aaea:	a801      	add	r0, sp, #4
   1aaec:	f004 fee8 	bl	1f8c0 <strlen>
   1aaf0:	b328      	cbz	r0, 1ab3e <d_print_mod_list+0x1f6>
   1aaf2:	ae01      	add	r6, sp, #4
   1aaf4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1aaf8:	eb06 0a00 	add.w	sl, r6, r0
   1aafc:	f04f 0b00 	mov.w	fp, #0
   1ab00:	e009      	b.n	1ab16 <d_print_mod_list+0x1ce>
   1ab02:	460b      	mov	r3, r1
   1ab04:	3101      	adds	r1, #1
   1ab06:	45b2      	cmp	sl, r6
   1ab08:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1ab0c:	f805 8003 	strb.w	r8, [r5, r3]
   1ab10:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1ab14:	d015      	beq.n	1ab42 <d_print_mod_list+0x1fa>
   1ab16:	29ff      	cmp	r1, #255	; 0xff
   1ab18:	f816 8b01 	ldrb.w	r8, [r6], #1
   1ab1c:	d1f1      	bne.n	1ab02 <d_print_mod_list+0x1ba>
   1ab1e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1ab22:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1ab26:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1ab2a:	4628      	mov	r0, r5
   1ab2c:	4798      	blx	r3
   1ab2e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1ab32:	3301      	adds	r3, #1
   1ab34:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1ab38:	2101      	movs	r1, #1
   1ab3a:	2300      	movs	r3, #0
   1ab3c:	e7e3      	b.n	1ab06 <d_print_mod_list+0x1be>
   1ab3e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1ab42:	4e1d      	ldr	r6, [pc, #116]	; (1abb8 <d_print_mod_list+0x270>)
   1ab44:	f04f 0b00 	mov.w	fp, #0
   1ab48:	f106 0a03 	add.w	sl, r6, #3
   1ab4c:	e00a      	b.n	1ab64 <d_print_mod_list+0x21c>
   1ab4e:	460b      	mov	r3, r1
   1ab50:	3101      	adds	r1, #1
   1ab52:	45b2      	cmp	sl, r6
   1ab54:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1ab58:	f805 8003 	strb.w	r8, [r5, r3]
   1ab5c:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1ab60:	f43f af6f 	beq.w	1aa42 <d_print_mod_list+0xfa>
   1ab64:	29ff      	cmp	r1, #255	; 0xff
   1ab66:	f816 8b01 	ldrb.w	r8, [r6], #1
   1ab6a:	d1f0      	bne.n	1ab4e <d_print_mod_list+0x206>
   1ab6c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1ab70:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1ab74:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1ab78:	4628      	mov	r0, r5
   1ab7a:	4798      	blx	r3
   1ab7c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1ab80:	3301      	adds	r3, #1
   1ab82:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1ab86:	2101      	movs	r1, #1
   1ab88:	2300      	movs	r3, #0
   1ab8a:	e7e2      	b.n	1ab52 <d_print_mod_list+0x20a>
   1ab8c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1ab90:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1ab94:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1ab98:	4628      	mov	r0, r5
   1ab9a:	4798      	blx	r3
   1ab9c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1aba0:	3301      	adds	r3, #1
   1aba2:	4631      	mov	r1, r6
   1aba4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1aba8:	2201      	movs	r2, #1
   1abaa:	e72f      	b.n	1aa0c <d_print_mod_list+0xc4>
   1abac:	00025028 	.word	0x00025028
   1abb0:	0002502c 	.word	0x0002502c
   1abb4:	00024fd8 	.word	0x00024fd8
   1abb8:	0002503c 	.word	0x0002503c

0001abbc <d_print_array_type.isra.10>:
   1abbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abc0:	4604      	mov	r4, r0
   1abc2:	460f      	mov	r7, r1
   1abc4:	4690      	mov	r8, r2
   1abc6:	b163      	cbz	r3, 1abe2 <d_print_array_type.isra.10+0x26>
   1abc8:	461e      	mov	r6, r3
   1abca:	461a      	mov	r2, r3
   1abcc:	6893      	ldr	r3, [r2, #8]
   1abce:	b393      	cbz	r3, 1ac36 <d_print_array_type.isra.10+0x7a>
   1abd0:	6812      	ldr	r2, [r2, #0]
   1abd2:	2a00      	cmp	r2, #0
   1abd4:	d1fa      	bne.n	1abcc <d_print_array_type.isra.10+0x10>
   1abd6:	4613      	mov	r3, r2
   1abd8:	4639      	mov	r1, r7
   1abda:	4632      	mov	r2, r6
   1abdc:	4620      	mov	r0, r4
   1abde:	f7ff feb3 	bl	1a948 <d_print_mod_list>
   1abe2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1abe6:	29ff      	cmp	r1, #255	; 0xff
   1abe8:	f000 808d 	beq.w	1ad06 <d_print_array_type.isra.10+0x14a>
   1abec:	1c4b      	adds	r3, r1, #1
   1abee:	2220      	movs	r2, #32
   1abf0:	2bff      	cmp	r3, #255	; 0xff
   1abf2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1abf6:	5462      	strb	r2, [r4, r1]
   1abf8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1abfc:	d068      	beq.n	1acd0 <d_print_array_type.isra.10+0x114>
   1abfe:	225b      	movs	r2, #91	; 0x5b
   1ac00:	1c59      	adds	r1, r3, #1
   1ac02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ac06:	54e2      	strb	r2, [r4, r3]
   1ac08:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1ac0c:	f8d8 2000 	ldr.w	r2, [r8]
   1ac10:	b12a      	cbz	r2, 1ac1e <d_print_array_type.isra.10+0x62>
   1ac12:	4639      	mov	r1, r7
   1ac14:	4620      	mov	r0, r4
   1ac16:	f7ff fbb9 	bl	1a38c <d_print_comp>
   1ac1a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ac1e:	29ff      	cmp	r1, #255	; 0xff
   1ac20:	f000 8082 	beq.w	1ad28 <d_print_array_type.isra.10+0x16c>
   1ac24:	1c4a      	adds	r2, r1, #1
   1ac26:	235d      	movs	r3, #93	; 0x5d
   1ac28:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ac2c:	5463      	strb	r3, [r4, r1]
   1ac2e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ac32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac36:	6852      	ldr	r2, [r2, #4]
   1ac38:	7812      	ldrb	r2, [r2, #0]
   1ac3a:	2a2a      	cmp	r2, #42	; 0x2a
   1ac3c:	d03f      	beq.n	1acbe <d_print_array_type.isra.10+0x102>
   1ac3e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1ad70 <d_print_array_type.isra.10+0x1b4>
   1ac42:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ac46:	461d      	mov	r5, r3
   1ac48:	f109 0b02 	add.w	fp, r9, #2
   1ac4c:	e00a      	b.n	1ac64 <d_print_array_type.isra.10+0xa8>
   1ac4e:	460b      	mov	r3, r1
   1ac50:	45cb      	cmp	fp, r9
   1ac52:	f101 0101 	add.w	r1, r1, #1
   1ac56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ac5a:	f804 a003 	strb.w	sl, [r4, r3]
   1ac5e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1ac62:	d01a      	beq.n	1ac9a <d_print_array_type.isra.10+0xde>
   1ac64:	29ff      	cmp	r1, #255	; 0xff
   1ac66:	f819 ab01 	ldrb.w	sl, [r9], #1
   1ac6a:	d1f0      	bne.n	1ac4e <d_print_array_type.isra.10+0x92>
   1ac6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ac70:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ac74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ac78:	4620      	mov	r0, r4
   1ac7a:	4798      	blx	r3
   1ac7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ac80:	3301      	adds	r3, #1
   1ac82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ac86:	2300      	movs	r3, #0
   1ac88:	2101      	movs	r1, #1
   1ac8a:	45cb      	cmp	fp, r9
   1ac8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ac90:	f804 a003 	strb.w	sl, [r4, r3]
   1ac94:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1ac98:	d1e4      	bne.n	1ac64 <d_print_array_type.isra.10+0xa8>
   1ac9a:	2300      	movs	r3, #0
   1ac9c:	4632      	mov	r2, r6
   1ac9e:	4639      	mov	r1, r7
   1aca0:	4620      	mov	r0, r4
   1aca2:	f7ff fe51 	bl	1a948 <d_print_mod_list>
   1aca6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1acaa:	2bff      	cmp	r3, #255	; 0xff
   1acac:	d04d      	beq.n	1ad4a <d_print_array_type.isra.10+0x18e>
   1acae:	1c59      	adds	r1, r3, #1
   1acb0:	2229      	movs	r2, #41	; 0x29
   1acb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1acb6:	54e2      	strb	r2, [r4, r3]
   1acb8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1acbc:	e793      	b.n	1abe6 <d_print_array_type.isra.10+0x2a>
   1acbe:	4632      	mov	r2, r6
   1acc0:	4639      	mov	r1, r7
   1acc2:	4620      	mov	r0, r4
   1acc4:	f7ff fe40 	bl	1a948 <d_print_mod_list>
   1acc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1accc:	2bff      	cmp	r3, #255	; 0xff
   1acce:	d196      	bne.n	1abfe <d_print_array_type.isra.10+0x42>
   1acd0:	2200      	movs	r2, #0
   1acd2:	4619      	mov	r1, r3
   1acd4:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1acd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1acdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ace0:	4620      	mov	r0, r4
   1ace2:	4798      	blx	r3
   1ace4:	235b      	movs	r3, #91	; 0x5b
   1ace6:	7023      	strb	r3, [r4, #0]
   1ace8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1acec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1acf0:	f8d8 2000 	ldr.w	r2, [r8]
   1acf4:	3301      	adds	r3, #1
   1acf6:	2101      	movs	r1, #1
   1acf8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1acfc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ad00:	2a00      	cmp	r2, #0
   1ad02:	d186      	bne.n	1ac12 <d_print_array_type.isra.10+0x56>
   1ad04:	e78e      	b.n	1ac24 <d_print_array_type.isra.10+0x68>
   1ad06:	2500      	movs	r5, #0
   1ad08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ad0c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ad10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ad14:	4620      	mov	r0, r4
   1ad16:	4798      	blx	r3
   1ad18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad1c:	3301      	adds	r3, #1
   1ad1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad22:	4629      	mov	r1, r5
   1ad24:	2301      	movs	r3, #1
   1ad26:	e762      	b.n	1abee <d_print_array_type.isra.10+0x32>
   1ad28:	2500      	movs	r5, #0
   1ad2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ad2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ad32:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ad36:	4620      	mov	r0, r4
   1ad38:	4798      	blx	r3
   1ad3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad3e:	3301      	adds	r3, #1
   1ad40:	4629      	mov	r1, r5
   1ad42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad46:	2201      	movs	r2, #1
   1ad48:	e76d      	b.n	1ac26 <d_print_array_type.isra.10+0x6a>
   1ad4a:	2500      	movs	r5, #0
   1ad4c:	4619      	mov	r1, r3
   1ad4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ad52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ad56:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ad5a:	4620      	mov	r0, r4
   1ad5c:	4798      	blx	r3
   1ad5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad62:	1c5a      	adds	r2, r3, #1
   1ad64:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1ad68:	462b      	mov	r3, r5
   1ad6a:	2101      	movs	r1, #1
   1ad6c:	e7a0      	b.n	1acb0 <d_print_array_type.isra.10+0xf4>
   1ad6e:	bf00      	nop
   1ad70:	00025220 	.word	0x00025220

0001ad74 <d_print_function_type.isra.11>:
   1ad74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ad78:	4604      	mov	r4, r0
   1ad7a:	b083      	sub	sp, #12
   1ad7c:	460e      	mov	r6, r1
   1ad7e:	4617      	mov	r7, r2
   1ad80:	461d      	mov	r5, r3
   1ad82:	b34b      	cbz	r3, 1add8 <d_print_function_type.isra.11+0x64>
   1ad84:	689b      	ldr	r3, [r3, #8]
   1ad86:	bb3b      	cbnz	r3, 1add8 <d_print_function_type.isra.11+0x64>
   1ad88:	462a      	mov	r2, r5
   1ad8a:	2001      	movs	r0, #1
   1ad8c:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1af58 <d_print_function_type.isra.11+0x1e4>
   1ad90:	e006      	b.n	1ada0 <d_print_function_type.isra.11+0x2c>
   1ad92:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1ad96:	d15a      	bne.n	1ae4e <d_print_function_type.isra.11+0xda>
   1ad98:	6812      	ldr	r2, [r2, #0]
   1ad9a:	b1ea      	cbz	r2, 1add8 <d_print_function_type.isra.11+0x64>
   1ad9c:	6893      	ldr	r3, [r2, #8]
   1ad9e:	b9db      	cbnz	r3, 1add8 <d_print_function_type.isra.11+0x64>
   1ada0:	6853      	ldr	r3, [r2, #4]
   1ada2:	781b      	ldrb	r3, [r3, #0]
   1ada4:	3b19      	subs	r3, #25
   1ada6:	b2db      	uxtb	r3, r3
   1ada8:	2b12      	cmp	r3, #18
   1adaa:	fa00 f103 	lsl.w	r1, r0, r3
   1adae:	d8f3      	bhi.n	1ad98 <d_print_function_type.isra.11+0x24>
   1adb0:	ea11 0f0e 	tst.w	r1, lr
   1adb4:	d0ed      	beq.n	1ad92 <d_print_function_type.isra.11+0x1e>
   1adb6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1adba:	2b20      	cmp	r3, #32
   1adbc:	d04d      	beq.n	1ae5a <d_print_function_type.isra.11+0xe6>
   1adbe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1adc2:	2bff      	cmp	r3, #255	; 0xff
   1adc4:	f000 80b4 	beq.w	1af30 <d_print_function_type.isra.11+0x1bc>
   1adc8:	1c59      	adds	r1, r3, #1
   1adca:	2220      	movs	r2, #32
   1adcc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1add0:	54e2      	strb	r2, [r4, r3]
   1add2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1add6:	e042      	b.n	1ae5e <d_print_function_type.isra.11+0xea>
   1add8:	2300      	movs	r3, #0
   1adda:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1adde:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1ade2:	4631      	mov	r1, r6
   1ade4:	462a      	mov	r2, r5
   1ade6:	4620      	mov	r0, r4
   1ade8:	f7ff fdae 	bl	1a948 <d_print_mod_list>
   1adec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1adf0:	29ff      	cmp	r1, #255	; 0xff
   1adf2:	d056      	beq.n	1aea2 <d_print_function_type.isra.11+0x12e>
   1adf4:	1c4b      	adds	r3, r1, #1
   1adf6:	2228      	movs	r2, #40	; 0x28
   1adf8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1adfc:	5462      	strb	r2, [r4, r1]
   1adfe:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1ae02:	6838      	ldr	r0, [r7, #0]
   1ae04:	b178      	cbz	r0, 1ae26 <d_print_function_type.isra.11+0xb2>
   1ae06:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ae0a:	9000      	str	r0, [sp, #0]
   1ae0c:	4602      	mov	r2, r0
   1ae0e:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1ae12:	4631      	mov	r1, r6
   1ae14:	4620      	mov	r0, r4
   1ae16:	9301      	str	r3, [sp, #4]
   1ae18:	f7fc fd14 	bl	17844 <d_print_comp_inner>
   1ae1c:	9a01      	ldr	r2, [sp, #4]
   1ae1e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1ae22:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1ae26:	2bff      	cmp	r3, #255	; 0xff
   1ae28:	d04d      	beq.n	1aec6 <d_print_function_type.isra.11+0x152>
   1ae2a:	1c5a      	adds	r2, r3, #1
   1ae2c:	2029      	movs	r0, #41	; 0x29
   1ae2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ae32:	4631      	mov	r1, r6
   1ae34:	54e0      	strb	r0, [r4, r3]
   1ae36:	462a      	mov	r2, r5
   1ae38:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1ae3c:	2301      	movs	r3, #1
   1ae3e:	4620      	mov	r0, r4
   1ae40:	f7ff fd82 	bl	1a948 <d_print_mod_list>
   1ae44:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1ae48:	b003      	add	sp, #12
   1ae4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ae4e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1ae52:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1ae56:	2a28      	cmp	r2, #40	; 0x28
   1ae58:	d1af      	bne.n	1adba <d_print_function_type.isra.11+0x46>
   1ae5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ae5e:	29ff      	cmp	r1, #255	; 0xff
   1ae60:	d054      	beq.n	1af0c <d_print_function_type.isra.11+0x198>
   1ae62:	1c4a      	adds	r2, r1, #1
   1ae64:	2328      	movs	r3, #40	; 0x28
   1ae66:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ae6a:	5463      	strb	r3, [r4, r1]
   1ae6c:	f04f 0900 	mov.w	r9, #0
   1ae70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ae74:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1ae78:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1ae7c:	464b      	mov	r3, r9
   1ae7e:	462a      	mov	r2, r5
   1ae80:	4631      	mov	r1, r6
   1ae82:	4620      	mov	r0, r4
   1ae84:	f7ff fd60 	bl	1a948 <d_print_mod_list>
   1ae88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1ae8c:	2bff      	cmp	r3, #255	; 0xff
   1ae8e:	d02c      	beq.n	1aeea <d_print_function_type.isra.11+0x176>
   1ae90:	1c59      	adds	r1, r3, #1
   1ae92:	2229      	movs	r2, #41	; 0x29
   1ae94:	29ff      	cmp	r1, #255	; 0xff
   1ae96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ae9a:	54e2      	strb	r2, [r4, r3]
   1ae9c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1aea0:	d1a8      	bne.n	1adf4 <d_print_function_type.isra.11+0x80>
   1aea2:	f04f 0900 	mov.w	r9, #0
   1aea6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aeaa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1aeae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aeb2:	4620      	mov	r0, r4
   1aeb4:	4798      	blx	r3
   1aeb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aeba:	3301      	adds	r3, #1
   1aebc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aec0:	4649      	mov	r1, r9
   1aec2:	2301      	movs	r3, #1
   1aec4:	e797      	b.n	1adf6 <d_print_function_type.isra.11+0x82>
   1aec6:	2700      	movs	r7, #0
   1aec8:	4619      	mov	r1, r3
   1aeca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aece:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aed2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1aed6:	4620      	mov	r0, r4
   1aed8:	4798      	blx	r3
   1aeda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aede:	1c5a      	adds	r2, r3, #1
   1aee0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1aee4:	463b      	mov	r3, r7
   1aee6:	2201      	movs	r2, #1
   1aee8:	e7a0      	b.n	1ae2c <d_print_function_type.isra.11+0xb8>
   1aeea:	4619      	mov	r1, r3
   1aeec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aef4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1aef8:	4620      	mov	r0, r4
   1aefa:	4798      	blx	r3
   1aefc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af00:	1c5a      	adds	r2, r3, #1
   1af02:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1af06:	464b      	mov	r3, r9
   1af08:	2101      	movs	r1, #1
   1af0a:	e7c2      	b.n	1ae92 <d_print_function_type.isra.11+0x11e>
   1af0c:	f04f 0800 	mov.w	r8, #0
   1af10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1af14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1af18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1af1c:	4620      	mov	r0, r4
   1af1e:	4798      	blx	r3
   1af20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af24:	3301      	adds	r3, #1
   1af26:	4641      	mov	r1, r8
   1af28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1af2c:	2201      	movs	r2, #1
   1af2e:	e799      	b.n	1ae64 <d_print_function_type.isra.11+0xf0>
   1af30:	f04f 0800 	mov.w	r8, #0
   1af34:	4619      	mov	r1, r3
   1af36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1af3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1af3e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1af42:	4620      	mov	r0, r4
   1af44:	4798      	blx	r3
   1af46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af4a:	1c5a      	adds	r2, r3, #1
   1af4c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1af50:	4643      	mov	r3, r8
   1af52:	2101      	movs	r1, #1
   1af54:	e739      	b.n	1adca <d_print_function_type.isra.11+0x56>
   1af56:	bf00      	nop
   1af58:	00043107 	.word	0x00043107

0001af5c <d_print_expr_op>:
   1af5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af60:	7815      	ldrb	r5, [r2, #0]
   1af62:	2d31      	cmp	r5, #49	; 0x31
   1af64:	b082      	sub	sp, #8
   1af66:	4613      	mov	r3, r2
   1af68:	4604      	mov	r4, r0
   1af6a:	d00d      	beq.n	1af88 <d_print_expr_op+0x2c>
   1af6c:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1af70:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1af74:	e88d 0028 	stmia.w	sp, {r3, r5}
   1af78:	f7fc fc64 	bl	17844 <d_print_comp_inner>
   1af7c:	9b01      	ldr	r3, [sp, #4]
   1af7e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1af82:	b002      	add	sp, #8
   1af84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1af88:	6853      	ldr	r3, [r2, #4]
   1af8a:	689f      	ldr	r7, [r3, #8]
   1af8c:	685d      	ldr	r5, [r3, #4]
   1af8e:	2f00      	cmp	r7, #0
   1af90:	d0f7      	beq.n	1af82 <d_print_expr_op+0x26>
   1af92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1af96:	442f      	add	r7, r5
   1af98:	f04f 0800 	mov.w	r8, #0
   1af9c:	e008      	b.n	1afb0 <d_print_expr_op+0x54>
   1af9e:	460b      	mov	r3, r1
   1afa0:	3101      	adds	r1, #1
   1afa2:	42bd      	cmp	r5, r7
   1afa4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1afa8:	54e6      	strb	r6, [r4, r3]
   1afaa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1afae:	d0e8      	beq.n	1af82 <d_print_expr_op+0x26>
   1afb0:	29ff      	cmp	r1, #255	; 0xff
   1afb2:	f815 6b01 	ldrb.w	r6, [r5], #1
   1afb6:	d1f2      	bne.n	1af9e <d_print_expr_op+0x42>
   1afb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1afbc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1afc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1afc4:	4620      	mov	r0, r4
   1afc6:	4798      	blx	r3
   1afc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1afcc:	3301      	adds	r3, #1
   1afce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1afd2:	2101      	movs	r1, #1
   1afd4:	2300      	movs	r3, #0
   1afd6:	e7e4      	b.n	1afa2 <d_print_expr_op+0x46>

0001afd8 <d_print_subexpr>:
   1afd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afda:	7813      	ldrb	r3, [r2, #0]
   1afdc:	2b01      	cmp	r3, #1
   1afde:	b083      	sub	sp, #12
   1afe0:	4615      	mov	r5, r2
   1afe2:	460e      	mov	r6, r1
   1afe4:	4604      	mov	r4, r0
   1afe6:	d929      	bls.n	1b03c <d_print_subexpr+0x64>
   1afe8:	2b30      	cmp	r3, #48	; 0x30
   1afea:	d027      	beq.n	1b03c <d_print_subexpr+0x64>
   1afec:	2b06      	cmp	r3, #6
   1afee:	d025      	beq.n	1b03c <d_print_subexpr+0x64>
   1aff0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1aff4:	29ff      	cmp	r1, #255	; 0xff
   1aff6:	d031      	beq.n	1b05c <d_print_subexpr+0x84>
   1aff8:	1c4a      	adds	r2, r1, #1
   1affa:	2328      	movs	r3, #40	; 0x28
   1affc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1b000:	5463      	strb	r3, [r4, r1]
   1b002:	462a      	mov	r2, r5
   1b004:	4631      	mov	r1, r6
   1b006:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1b00a:	4620      	mov	r0, r4
   1b00c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1b010:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1b014:	9301      	str	r3, [sp, #4]
   1b016:	9500      	str	r5, [sp, #0]
   1b018:	f7fc fc14 	bl	17844 <d_print_comp_inner>
   1b01c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1b020:	9b01      	ldr	r3, [sp, #4]
   1b022:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1b026:	29ff      	cmp	r1, #255	; 0xff
   1b028:	d028      	beq.n	1b07c <d_print_subexpr+0xa4>
   1b02a:	1c4a      	adds	r2, r1, #1
   1b02c:	2329      	movs	r3, #41	; 0x29
   1b02e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1b032:	5463      	strb	r3, [r4, r1]
   1b034:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1b038:	b003      	add	sp, #12
   1b03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b03c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1b040:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1b044:	4631      	mov	r1, r6
   1b046:	462a      	mov	r2, r5
   1b048:	4620      	mov	r0, r4
   1b04a:	9301      	str	r3, [sp, #4]
   1b04c:	9500      	str	r5, [sp, #0]
   1b04e:	f7fc fbf9 	bl	17844 <d_print_comp_inner>
   1b052:	9b01      	ldr	r3, [sp, #4]
   1b054:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1b058:	b003      	add	sp, #12
   1b05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b05c:	2700      	movs	r7, #0
   1b05e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b062:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1b066:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1b06a:	4798      	blx	r3
   1b06c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b070:	3301      	adds	r3, #1
   1b072:	4639      	mov	r1, r7
   1b074:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b078:	2201      	movs	r2, #1
   1b07a:	e7be      	b.n	1affa <d_print_subexpr+0x22>
   1b07c:	2500      	movs	r5, #0
   1b07e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b082:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1b086:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1b08a:	4620      	mov	r0, r4
   1b08c:	4798      	blx	r3
   1b08e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b092:	3301      	adds	r3, #1
   1b094:	4629      	mov	r1, r5
   1b096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b09a:	2201      	movs	r2, #1
   1b09c:	e7c6      	b.n	1b02c <d_print_subexpr+0x54>
   1b09e:	bf00      	nop

0001b0a0 <d_maybe_print_fold_expression.isra.15>:
   1b0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0a4:	6852      	ldr	r2, [r2, #4]
   1b0a6:	6812      	ldr	r2, [r2, #0]
   1b0a8:	7815      	ldrb	r5, [r2, #0]
   1b0aa:	2d66      	cmp	r5, #102	; 0x66
   1b0ac:	d002      	beq.n	1b0b4 <d_maybe_print_fold_expression.isra.15+0x14>
   1b0ae:	2000      	movs	r0, #0
   1b0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0b4:	681b      	ldr	r3, [r3, #0]
   1b0b6:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1b0ba:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1b0be:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1b0c2:	f899 3000 	ldrb.w	r3, [r9]
   1b0c6:	2b3b      	cmp	r3, #59	; 0x3b
   1b0c8:	f04f 33ff 	mov.w	r3, #4294967295
   1b0cc:	bf04      	itt	eq
   1b0ce:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1b0d2:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1b0d6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1b0da:	7853      	ldrb	r3, [r2, #1]
   1b0dc:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1b0e0:	bf18      	it	ne
   1b0e2:	2500      	movne	r5, #0
   1b0e4:	460e      	mov	r6, r1
   1b0e6:	4604      	mov	r4, r0
   1b0e8:	2b26      	cmp	r3, #38	; 0x26
   1b0ea:	d82b      	bhi.n	1b144 <d_maybe_print_fold_expression.isra.15+0xa4>
   1b0ec:	e8df f003 	tbb	[pc, r3]
   1b0f0:	2a2a2a90 	.word	0x2a2a2a90
   1b0f4:	2a902a2a 	.word	0x2a902a2a
   1b0f8:	2a2a2a2a 	.word	0x2a2a2a2a
   1b0fc:	2a2a2a2a 	.word	0x2a2a2a2a
   1b100:	2a2a2a2a 	.word	0x2a2a2a2a
   1b104:	2a2a2a2a 	.word	0x2a2a2a2a
   1b108:	2a2a2a2a 	.word	0x2a2a2a2a
   1b10c:	2a2a2a2a 	.word	0x2a2a2a2a
   1b110:	2a2a2a6a 	.word	0x2a2a2a6a
   1b114:	2a2a      	.short	0x2a2a
   1b116:	2f          	.byte	0x2f
   1b117:	00          	.byte	0x00
   1b118:	4642      	mov	r2, r8
   1b11a:	4631      	mov	r1, r6
   1b11c:	4620      	mov	r0, r4
   1b11e:	f7ff ff1d 	bl	1af5c <d_print_expr_op>
   1b122:	464a      	mov	r2, r9
   1b124:	4631      	mov	r1, r6
   1b126:	4620      	mov	r0, r4
   1b128:	f7ff ff56 	bl	1afd8 <d_print_subexpr>
   1b12c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1b130:	29ff      	cmp	r1, #255	; 0xff
   1b132:	f000 80b2 	beq.w	1b29a <d_maybe_print_fold_expression.isra.15+0x1fa>
   1b136:	1c4a      	adds	r2, r1, #1
   1b138:	2329      	movs	r3, #41	; 0x29
   1b13a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1b13e:	5463      	strb	r3, [r4, r1]
   1b140:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1b144:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1b148:	2001      	movs	r0, #1
   1b14a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b14e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1b152:	29ff      	cmp	r1, #255	; 0xff
   1b154:	f000 80c5 	beq.w	1b2e2 <d_maybe_print_fold_expression.isra.15+0x242>
   1b158:	1c4a      	adds	r2, r1, #1
   1b15a:	2328      	movs	r3, #40	; 0x28
   1b15c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1b160:	4620      	mov	r0, r4
   1b162:	5463      	strb	r3, [r4, r1]
   1b164:	464a      	mov	r2, r9
   1b166:	4631      	mov	r1, r6
   1b168:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1b16c:	4d65      	ldr	r5, [pc, #404]	; (1b304 <d_maybe_print_fold_expression.isra.15+0x264>)
   1b16e:	f7ff ff33 	bl	1afd8 <d_print_subexpr>
   1b172:	4642      	mov	r2, r8
   1b174:	4631      	mov	r1, r6
   1b176:	4620      	mov	r0, r4
   1b178:	f7ff fef0 	bl	1af5c <d_print_expr_op>
   1b17c:	f105 0904 	add.w	r9, r5, #4
   1b180:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1b184:	f04f 0800 	mov.w	r8, #0
   1b188:	e008      	b.n	1b19c <d_maybe_print_fold_expression.isra.15+0xfc>
   1b18a:	460b      	mov	r3, r1
   1b18c:	3101      	adds	r1, #1
   1b18e:	45a9      	cmp	r9, r5
   1b190:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1b194:	54e6      	strb	r6, [r4, r3]
   1b196:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1b19a:	d0d3      	beq.n	1b144 <d_maybe_print_fold_expression.isra.15+0xa4>
   1b19c:	29ff      	cmp	r1, #255	; 0xff
   1b19e:	f815 6b01 	ldrb.w	r6, [r5], #1
   1b1a2:	d1f2      	bne.n	1b18a <d_maybe_print_fold_expression.isra.15+0xea>
   1b1a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b1a8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1b1ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1b1b0:	4620      	mov	r0, r4
   1b1b2:	4798      	blx	r3
   1b1b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b1b8:	3301      	adds	r3, #1
   1b1ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b1be:	2101      	movs	r1, #1
   1b1c0:	2300      	movs	r3, #0
   1b1c2:	e7e4      	b.n	1b18e <d_maybe_print_fold_expression.isra.15+0xee>
   1b1c4:	4d50      	ldr	r5, [pc, #320]	; (1b308 <d_maybe_print_fold_expression.isra.15+0x268>)
   1b1c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1b1ca:	f105 0b04 	add.w	fp, r5, #4
   1b1ce:	e009      	b.n	1b1e4 <d_maybe_print_fold_expression.isra.15+0x144>
   1b1d0:	460b      	mov	r3, r1
   1b1d2:	3101      	adds	r1, #1
   1b1d4:	455d      	cmp	r5, fp
   1b1d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1b1da:	f804 a003 	strb.w	sl, [r4, r3]
   1b1de:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1b1e2:	d099      	beq.n	1b118 <d_maybe_print_fold_expression.isra.15+0x78>
   1b1e4:	29ff      	cmp	r1, #255	; 0xff
   1b1e6:	f815 ab01 	ldrb.w	sl, [r5], #1
   1b1ea:	d1f1      	bne.n	1b1d0 <d_maybe_print_fold_expression.isra.15+0x130>
   1b1ec:	f04f 0300 	mov.w	r3, #0
   1b1f0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1b1f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1b1f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b1fc:	4620      	mov	r0, r4
   1b1fe:	4798      	blx	r3
   1b200:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b204:	3301      	adds	r3, #1
   1b206:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b20a:	2101      	movs	r1, #1
   1b20c:	2300      	movs	r3, #0
   1b20e:	e7e1      	b.n	1b1d4 <d_maybe_print_fold_expression.isra.15+0x134>
   1b210:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1b214:	2bff      	cmp	r3, #255	; 0xff
   1b216:	d051      	beq.n	1b2bc <d_maybe_print_fold_expression.isra.15+0x21c>
   1b218:	1c59      	adds	r1, r3, #1
   1b21a:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1b21e:	464a      	mov	r2, r9
   1b220:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1b224:	4620      	mov	r0, r4
   1b226:	f804 e003 	strb.w	lr, [r4, r3]
   1b22a:	4631      	mov	r1, r6
   1b22c:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1b230:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1b30c <d_maybe_print_fold_expression.isra.15+0x26c>
   1b234:	f7ff fed0 	bl	1afd8 <d_print_subexpr>
   1b238:	4631      	mov	r1, r6
   1b23a:	4642      	mov	r2, r8
   1b23c:	4620      	mov	r0, r4
   1b23e:	f7ff fe8d 	bl	1af5c <d_print_expr_op>
   1b242:	f109 0b03 	add.w	fp, r9, #3
   1b246:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1b24a:	e009      	b.n	1b260 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1b24c:	460b      	mov	r3, r1
   1b24e:	3101      	adds	r1, #1
   1b250:	45cb      	cmp	fp, r9
   1b252:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1b256:	f804 a003 	strb.w	sl, [r4, r3]
   1b25a:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1b25e:	d015      	beq.n	1b28c <d_maybe_print_fold_expression.isra.15+0x1ec>
   1b260:	29ff      	cmp	r1, #255	; 0xff
   1b262:	f819 ab01 	ldrb.w	sl, [r9], #1
   1b266:	d1f1      	bne.n	1b24c <d_maybe_print_fold_expression.isra.15+0x1ac>
   1b268:	f04f 0300 	mov.w	r3, #0
   1b26c:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1b270:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1b274:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b278:	4620      	mov	r0, r4
   1b27a:	4798      	blx	r3
   1b27c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b280:	3301      	adds	r3, #1
   1b282:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b286:	2101      	movs	r1, #1
   1b288:	2300      	movs	r3, #0
   1b28a:	e7e1      	b.n	1b250 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1b28c:	4642      	mov	r2, r8
   1b28e:	4631      	mov	r1, r6
   1b290:	4620      	mov	r0, r4
   1b292:	f7ff fe63 	bl	1af5c <d_print_expr_op>
   1b296:	462a      	mov	r2, r5
   1b298:	e744      	b.n	1b124 <d_maybe_print_fold_expression.isra.15+0x84>
   1b29a:	2500      	movs	r5, #0
   1b29c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b2a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1b2a4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1b2a8:	4620      	mov	r0, r4
   1b2aa:	4798      	blx	r3
   1b2ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b2b0:	3301      	adds	r3, #1
   1b2b2:	4629      	mov	r1, r5
   1b2b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b2b8:	2201      	movs	r2, #1
   1b2ba:	e73d      	b.n	1b138 <d_maybe_print_fold_expression.isra.15+0x98>
   1b2bc:	f04f 0a00 	mov.w	sl, #0
   1b2c0:	4619      	mov	r1, r3
   1b2c2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1b2c6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1b2ca:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1b2ce:	4798      	blx	r3
   1b2d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b2d4:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1b2d8:	1c5a      	adds	r2, r3, #1
   1b2da:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b2de:	4653      	mov	r3, sl
   1b2e0:	e79a      	b.n	1b218 <d_maybe_print_fold_expression.isra.15+0x178>
   1b2e2:	2500      	movs	r5, #0
   1b2e4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1b2e8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1b2ec:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1b2f0:	4798      	blx	r3
   1b2f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b2f6:	3301      	adds	r3, #1
   1b2f8:	4629      	mov	r1, r5
   1b2fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b2fe:	2201      	movs	r2, #1
   1b300:	e72b      	b.n	1b15a <d_maybe_print_fold_expression.isra.15+0xba>
   1b302:	bf00      	nop
   1b304:	0002530c 	.word	0x0002530c
   1b308:	00025304 	.word	0x00025304
   1b30c:	00023768 	.word	0x00023768

0001b310 <d_demangle_callback.constprop.17>:
   1b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b314:	b0e7      	sub	sp, #412	; 0x19c
   1b316:	f890 9000 	ldrb.w	r9, [r0]
   1b31a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1b31e:	af00      	add	r7, sp, #0
   1b320:	4605      	mov	r5, r0
   1b322:	4688      	mov	r8, r1
   1b324:	4616      	mov	r6, r2
   1b326:	f000 80f1 	beq.w	1b50c <d_demangle_callback.constprop.17+0x1fc>
   1b32a:	2208      	movs	r2, #8
   1b32c:	49bd      	ldr	r1, [pc, #756]	; (1b624 <d_demangle_callback.constprop.17+0x314>)
   1b32e:	4628      	mov	r0, r5
   1b330:	f004 fb34 	bl	1f99c <strncmp>
   1b334:	b948      	cbnz	r0, 1b34a <d_demangle_callback.constprop.17+0x3a>
   1b336:	7a2b      	ldrb	r3, [r5, #8]
   1b338:	2b2e      	cmp	r3, #46	; 0x2e
   1b33a:	f000 80d6 	beq.w	1b4ea <d_demangle_callback.constprop.17+0x1da>
   1b33e:	2b5f      	cmp	r3, #95	; 0x5f
   1b340:	f000 80d3 	beq.w	1b4ea <d_demangle_callback.constprop.17+0x1da>
   1b344:	2b24      	cmp	r3, #36	; 0x24
   1b346:	f000 80d0 	beq.w	1b4ea <d_demangle_callback.constprop.17+0x1da>
   1b34a:	f04f 0a00 	mov.w	sl, #0
   1b34e:	4628      	mov	r0, r5
   1b350:	f004 fab6 	bl	1f8c0 <strlen>
   1b354:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1b358:	0083      	lsls	r3, r0, #2
   1b35a:	eb03 020b 	add.w	r2, r3, fp
   1b35e:	0092      	lsls	r2, r2, #2
   1b360:	3208      	adds	r2, #8
   1b362:	330a      	adds	r3, #10
   1b364:	ebad 0d02 	sub.w	sp, sp, r2
   1b368:	f023 0307 	bic.w	r3, r3, #7
   1b36c:	2400      	movs	r4, #0
   1b36e:	466a      	mov	r2, sp
   1b370:	1829      	adds	r1, r5, r0
   1b372:	ebad 0d03 	sub.w	sp, sp, r3
   1b376:	f1ba 0f01 	cmp.w	sl, #1
   1b37a:	f04f 0311 	mov.w	r3, #17
   1b37e:	627a      	str	r2, [r7, #36]	; 0x24
   1b380:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1b384:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1b388:	617d      	str	r5, [r7, #20]
   1b38a:	623d      	str	r5, [r7, #32]
   1b38c:	63b8      	str	r0, [r7, #56]	; 0x38
   1b38e:	61b9      	str	r1, [r7, #24]
   1b390:	61fb      	str	r3, [r7, #28]
   1b392:	62bc      	str	r4, [r7, #40]	; 0x28
   1b394:	637c      	str	r4, [r7, #52]	; 0x34
   1b396:	63fc      	str	r4, [r7, #60]	; 0x3c
   1b398:	643c      	str	r4, [r7, #64]	; 0x40
   1b39a:	647c      	str	r4, [r7, #68]	; 0x44
   1b39c:	64bc      	str	r4, [r7, #72]	; 0x48
   1b39e:	64fc      	str	r4, [r7, #76]	; 0x4c
   1b3a0:	f000 80bb 	beq.w	1b51a <d_demangle_callback.constprop.17+0x20a>
   1b3a4:	f0c0 80cf 	bcc.w	1b546 <d_demangle_callback.constprop.17+0x236>
   1b3a8:	7aeb      	ldrb	r3, [r5, #11]
   1b3aa:	f1ba 0f02 	cmp.w	sl, #2
   1b3ae:	bf18      	it	ne
   1b3b0:	f04f 0944 	movne.w	r9, #68	; 0x44
   1b3b4:	f105 0a0b 	add.w	sl, r5, #11
   1b3b8:	bf08      	it	eq
   1b3ba:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1b3be:	2b5f      	cmp	r3, #95	; 0x5f
   1b3c0:	f8c7 a020 	str.w	sl, [r7, #32]
   1b3c4:	f000 80b2 	beq.w	1b52c <d_demangle_callback.constprop.17+0x21c>
   1b3c8:	4650      	mov	r0, sl
   1b3ca:	607a      	str	r2, [r7, #4]
   1b3cc:	f004 fa78 	bl	1f8c0 <strlen>
   1b3d0:	f1bb 0f00 	cmp.w	fp, #0
   1b3d4:	687a      	ldr	r2, [r7, #4]
   1b3d6:	f340 80bf 	ble.w	1b558 <d_demangle_callback.constprop.17+0x248>
   1b3da:	2301      	movs	r3, #1
   1b3dc:	62bb      	str	r3, [r7, #40]	; 0x28
   1b3de:	2800      	cmp	r0, #0
   1b3e0:	f000 80ba 	beq.w	1b558 <d_demangle_callback.constprop.17+0x248>
   1b3e4:	2300      	movs	r3, #0
   1b3e6:	f8c2 a004 	str.w	sl, [r2, #4]
   1b3ea:	6090      	str	r0, [r2, #8]
   1b3ec:	7013      	strb	r3, [r2, #0]
   1b3ee:	4649      	mov	r1, r9
   1b3f0:	2300      	movs	r3, #0
   1b3f2:	f107 0014 	add.w	r0, r7, #20
   1b3f6:	f7f9 fe31 	bl	1505c <d_make_comp>
   1b3fa:	6a3c      	ldr	r4, [r7, #32]
   1b3fc:	4605      	mov	r5, r0
   1b3fe:	4620      	mov	r0, r4
   1b400:	f004 fa5e 	bl	1f8c0 <strlen>
   1b404:	1823      	adds	r3, r4, r0
   1b406:	623b      	str	r3, [r7, #32]
   1b408:	f814 9000 	ldrb.w	r9, [r4, r0]
   1b40c:	f1b9 0f00 	cmp.w	r9, #0
   1b410:	f040 8086 	bne.w	1b520 <d_demangle_callback.constprop.17+0x210>
   1b414:	2d00      	cmp	r5, #0
   1b416:	f000 8083 	beq.w	1b520 <d_demangle_callback.constprop.17+0x210>
   1b41a:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1b41e:	462a      	mov	r2, r5
   1b420:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1b424:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1b428:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1b42c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1b430:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1b434:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1b438:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1b43c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1b440:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1b444:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1b448:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1b44c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1b450:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1b454:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1b458:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1b45c:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1b460:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1b464:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1b468:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1b46c:	f7f9 fec4 	bl	151f8 <d_count_templates_scopes>
   1b470:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1b474:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1b478:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1b47c:	613b      	str	r3, [r7, #16]
   1b47e:	00d0      	lsls	r0, r2, #3
   1b480:	fb01 f102 	mul.w	r1, r1, r2
   1b484:	3008      	adds	r0, #8
   1b486:	46e8      	mov	r8, sp
   1b488:	00ca      	lsls	r2, r1, #3
   1b48a:	ebad 0d00 	sub.w	sp, sp, r0
   1b48e:	4668      	mov	r0, sp
   1b490:	3208      	adds	r2, #8
   1b492:	ebad 0d02 	sub.w	sp, sp, r2
   1b496:	f107 060c 	add.w	r6, r7, #12
   1b49a:	462a      	mov	r2, r5
   1b49c:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1b4a0:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1b4a4:	4620      	mov	r0, r4
   1b4a6:	2111      	movs	r1, #17
   1b4a8:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1b4ac:	60fd      	str	r5, [r7, #12]
   1b4ae:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1b4b2:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1b4b6:	f7fc f9c5 	bl	17844 <d_print_comp_inner>
   1b4ba:	693b      	ldr	r3, [r7, #16]
   1b4bc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1b4c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1b4c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b4c8:	f804 9001 	strb.w	r9, [r4, r1]
   1b4cc:	4620      	mov	r0, r4
   1b4ce:	46c5      	mov	sp, r8
   1b4d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1b4d4:	4798      	blx	r3
   1b4d6:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1b4da:	fab0 f080 	clz	r0, r0
   1b4de:	0940      	lsrs	r0, r0, #5
   1b4e0:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1b4e4:	46bd      	mov	sp, r7
   1b4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4ea:	7a6b      	ldrb	r3, [r5, #9]
   1b4ec:	2b44      	cmp	r3, #68	; 0x44
   1b4ee:	d002      	beq.n	1b4f6 <d_demangle_callback.constprop.17+0x1e6>
   1b4f0:	2b49      	cmp	r3, #73	; 0x49
   1b4f2:	f47f af2a 	bne.w	1b34a <d_demangle_callback.constprop.17+0x3a>
   1b4f6:	7aaa      	ldrb	r2, [r5, #10]
   1b4f8:	2a5f      	cmp	r2, #95	; 0x5f
   1b4fa:	f47f af26 	bne.w	1b34a <d_demangle_callback.constprop.17+0x3a>
   1b4fe:	2b49      	cmp	r3, #73	; 0x49
   1b500:	bf14      	ite	ne
   1b502:	f04f 0a03 	movne.w	sl, #3
   1b506:	f04f 0a02 	moveq.w	sl, #2
   1b50a:	e720      	b.n	1b34e <d_demangle_callback.constprop.17+0x3e>
   1b50c:	7843      	ldrb	r3, [r0, #1]
   1b50e:	2b5a      	cmp	r3, #90	; 0x5a
   1b510:	f47f af0b 	bne.w	1b32a <d_demangle_callback.constprop.17+0x1a>
   1b514:	f04f 0a01 	mov.w	sl, #1
   1b518:	e719      	b.n	1b34e <d_demangle_callback.constprop.17+0x3e>
   1b51a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1b51e:	d01d      	beq.n	1b55c <d_demangle_callback.constprop.17+0x24c>
   1b520:	2000      	movs	r0, #0
   1b522:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1b526:	46bd      	mov	sp, r7
   1b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b52c:	7b2b      	ldrb	r3, [r5, #12]
   1b52e:	2b5a      	cmp	r3, #90	; 0x5a
   1b530:	f47f af4a 	bne.w	1b3c8 <d_demangle_callback.constprop.17+0xb8>
   1b534:	350d      	adds	r5, #13
   1b536:	4621      	mov	r1, r4
   1b538:	f107 0014 	add.w	r0, r7, #20
   1b53c:	623d      	str	r5, [r7, #32]
   1b53e:	f7fb fe35 	bl	171ac <d_encoding>
   1b542:	4602      	mov	r2, r0
   1b544:	e753      	b.n	1b3ee <d_demangle_callback.constprop.17+0xde>
   1b546:	f107 0014 	add.w	r0, r7, #20
   1b54a:	f7fb f817 	bl	1657c <d_type>
   1b54e:	6a3b      	ldr	r3, [r7, #32]
   1b550:	4605      	mov	r5, r0
   1b552:	f893 9000 	ldrb.w	r9, [r3]
   1b556:	e759      	b.n	1b40c <d_demangle_callback.constprop.17+0xfc>
   1b558:	2200      	movs	r2, #0
   1b55a:	e748      	b.n	1b3ee <d_demangle_callback.constprop.17+0xde>
   1b55c:	786b      	ldrb	r3, [r5, #1]
   1b55e:	2b5a      	cmp	r3, #90	; 0x5a
   1b560:	d1de      	bne.n	1b520 <d_demangle_callback.constprop.17+0x210>
   1b562:	3502      	adds	r5, #2
   1b564:	4651      	mov	r1, sl
   1b566:	f107 0014 	add.w	r0, r7, #20
   1b56a:	623d      	str	r5, [r7, #32]
   1b56c:	f7fb fe1e 	bl	171ac <d_encoding>
   1b570:	69fb      	ldr	r3, [r7, #28]
   1b572:	07db      	lsls	r3, r3, #31
   1b574:	4605      	mov	r5, r0
   1b576:	d551      	bpl.n	1b61c <d_demangle_callback.constprop.17+0x30c>
   1b578:	6a38      	ldr	r0, [r7, #32]
   1b57a:	f890 9000 	ldrb.w	r9, [r0]
   1b57e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1b582:	f47f af43 	bne.w	1b40c <d_demangle_callback.constprop.17+0xfc>
   1b586:	7843      	ldrb	r3, [r0, #1]
   1b588:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1b58c:	2a19      	cmp	r2, #25
   1b58e:	d939      	bls.n	1b604 <d_demangle_callback.constprop.17+0x2f4>
   1b590:	2b5f      	cmp	r3, #95	; 0x5f
   1b592:	d037      	beq.n	1b604 <d_demangle_callback.constprop.17+0x2f4>
   1b594:	3b30      	subs	r3, #48	; 0x30
   1b596:	2b09      	cmp	r3, #9
   1b598:	d840      	bhi.n	1b61c <d_demangle_callback.constprop.17+0x30c>
   1b59a:	7803      	ldrb	r3, [r0, #0]
   1b59c:	4602      	mov	r2, r0
   1b59e:	2b2e      	cmp	r3, #46	; 0x2e
   1b5a0:	d112      	bne.n	1b5c8 <d_demangle_callback.constprop.17+0x2b8>
   1b5a2:	7853      	ldrb	r3, [r2, #1]
   1b5a4:	3b30      	subs	r3, #48	; 0x30
   1b5a6:	2b09      	cmp	r3, #9
   1b5a8:	d80e      	bhi.n	1b5c8 <d_demangle_callback.constprop.17+0x2b8>
   1b5aa:	7893      	ldrb	r3, [r2, #2]
   1b5ac:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1b5b0:	2909      	cmp	r1, #9
   1b5b2:	f102 0202 	add.w	r2, r2, #2
   1b5b6:	d8f2      	bhi.n	1b59e <d_demangle_callback.constprop.17+0x28e>
   1b5b8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1b5bc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1b5c0:	2909      	cmp	r1, #9
   1b5c2:	d9f9      	bls.n	1b5b8 <d_demangle_callback.constprop.17+0x2a8>
   1b5c4:	2b2e      	cmp	r3, #46	; 0x2e
   1b5c6:	d0ec      	beq.n	1b5a2 <d_demangle_callback.constprop.17+0x292>
   1b5c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b5cc:	623a      	str	r2, [r7, #32]
   1b5ce:	4299      	cmp	r1, r3
   1b5d0:	da16      	bge.n	1b600 <d_demangle_callback.constprop.17+0x2f0>
   1b5d2:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1b5d6:	1c4b      	adds	r3, r1, #1
   1b5d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1b5dc:	62bb      	str	r3, [r7, #40]	; 0x28
   1b5de:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1b5e2:	d00d      	beq.n	1b600 <d_demangle_callback.constprop.17+0x2f0>
   1b5e4:	1a12      	subs	r2, r2, r0
   1b5e6:	d00b      	beq.n	1b600 <d_demangle_callback.constprop.17+0x2f0>
   1b5e8:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1b5ec:	6058      	str	r0, [r3, #4]
   1b5ee:	609a      	str	r2, [r3, #8]
   1b5f0:	462a      	mov	r2, r5
   1b5f2:	214d      	movs	r1, #77	; 0x4d
   1b5f4:	f107 0014 	add.w	r0, r7, #20
   1b5f8:	f7f9 fd30 	bl	1505c <d_make_comp>
   1b5fc:	4605      	mov	r5, r0
   1b5fe:	e7bb      	b.n	1b578 <d_demangle_callback.constprop.17+0x268>
   1b600:	2300      	movs	r3, #0
   1b602:	e7f5      	b.n	1b5f0 <d_demangle_callback.constprop.17+0x2e0>
   1b604:	1c81      	adds	r1, r0, #2
   1b606:	460a      	mov	r2, r1
   1b608:	f811 3b01 	ldrb.w	r3, [r1], #1
   1b60c:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1b610:	f1be 0f19 	cmp.w	lr, #25
   1b614:	d9f7      	bls.n	1b606 <d_demangle_callback.constprop.17+0x2f6>
   1b616:	2b5f      	cmp	r3, #95	; 0x5f
   1b618:	d0f5      	beq.n	1b606 <d_demangle_callback.constprop.17+0x2f6>
   1b61a:	e7c0      	b.n	1b59e <d_demangle_callback.constprop.17+0x28e>
   1b61c:	6a3b      	ldr	r3, [r7, #32]
   1b61e:	f893 9000 	ldrb.w	r9, [r3]
   1b622:	e6f3      	b.n	1b40c <d_demangle_callback.constprop.17+0xfc>
   1b624:	00024fb4 	.word	0x00024fb4

0001b628 <__cxa_demangle>:
   1b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b62c:	b084      	sub	sp, #16
   1b62e:	b378      	cbz	r0, 1b690 <__cxa_demangle+0x68>
   1b630:	b101      	cbz	r1, 1b634 <__cxa_demangle+0xc>
   1b632:	b36a      	cbz	r2, 1b690 <__cxa_demangle+0x68>
   1b634:	2400      	movs	r4, #0
   1b636:	4616      	mov	r6, r2
   1b638:	460d      	mov	r5, r1
   1b63a:	466a      	mov	r2, sp
   1b63c:	4927      	ldr	r1, [pc, #156]	; (1b6dc <__cxa_demangle+0xb4>)
   1b63e:	9400      	str	r4, [sp, #0]
   1b640:	461f      	mov	r7, r3
   1b642:	9401      	str	r4, [sp, #4]
   1b644:	9402      	str	r4, [sp, #8]
   1b646:	9403      	str	r4, [sp, #12]
   1b648:	f7ff fe62 	bl	1b310 <d_demangle_callback.constprop.17>
   1b64c:	2800      	cmp	r0, #0
   1b64e:	d03f      	beq.n	1b6d0 <__cxa_demangle+0xa8>
   1b650:	9b03      	ldr	r3, [sp, #12]
   1b652:	b1d3      	cbz	r3, 1b68a <__cxa_demangle+0x62>
   1b654:	f04f 0801 	mov.w	r8, #1
   1b658:	9c00      	ldr	r4, [sp, #0]
   1b65a:	b35c      	cbz	r4, 1b6b4 <__cxa_demangle+0x8c>
   1b65c:	b33d      	cbz	r5, 1b6ae <__cxa_demangle+0x86>
   1b65e:	4620      	mov	r0, r4
   1b660:	f004 f92e 	bl	1f8c0 <strlen>
   1b664:	6833      	ldr	r3, [r6, #0]
   1b666:	4298      	cmp	r0, r3
   1b668:	d21b      	bcs.n	1b6a2 <__cxa_demangle+0x7a>
   1b66a:	1c42      	adds	r2, r0, #1
   1b66c:	4621      	mov	r1, r4
   1b66e:	4628      	mov	r0, r5
   1b670:	f003 fbe6 	bl	1ee40 <memcpy>
   1b674:	4620      	mov	r0, r4
   1b676:	f003 f893 	bl	1e7a0 <free>
   1b67a:	462c      	mov	r4, r5
   1b67c:	b10f      	cbz	r7, 1b682 <__cxa_demangle+0x5a>
   1b67e:	2300      	movs	r3, #0
   1b680:	603b      	str	r3, [r7, #0]
   1b682:	4620      	mov	r0, r4
   1b684:	b004      	add	sp, #16
   1b686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b68a:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1b68e:	e7e3      	b.n	1b658 <__cxa_demangle+0x30>
   1b690:	b113      	cbz	r3, 1b698 <__cxa_demangle+0x70>
   1b692:	f06f 0202 	mvn.w	r2, #2
   1b696:	601a      	str	r2, [r3, #0]
   1b698:	2400      	movs	r4, #0
   1b69a:	4620      	mov	r0, r4
   1b69c:	b004      	add	sp, #16
   1b69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b6a2:	4628      	mov	r0, r5
   1b6a4:	f003 f87c 	bl	1e7a0 <free>
   1b6a8:	f8c6 8000 	str.w	r8, [r6]
   1b6ac:	e7e6      	b.n	1b67c <__cxa_demangle+0x54>
   1b6ae:	2e00      	cmp	r6, #0
   1b6b0:	d1fa      	bne.n	1b6a8 <__cxa_demangle+0x80>
   1b6b2:	e7e3      	b.n	1b67c <__cxa_demangle+0x54>
   1b6b4:	2f00      	cmp	r7, #0
   1b6b6:	d0ef      	beq.n	1b698 <__cxa_demangle+0x70>
   1b6b8:	f1b8 0f01 	cmp.w	r8, #1
   1b6bc:	d004      	beq.n	1b6c8 <__cxa_demangle+0xa0>
   1b6be:	f06f 0301 	mvn.w	r3, #1
   1b6c2:	603b      	str	r3, [r7, #0]
   1b6c4:	2400      	movs	r4, #0
   1b6c6:	e7dc      	b.n	1b682 <__cxa_demangle+0x5a>
   1b6c8:	f04f 33ff 	mov.w	r3, #4294967295
   1b6cc:	603b      	str	r3, [r7, #0]
   1b6ce:	e7d8      	b.n	1b682 <__cxa_demangle+0x5a>
   1b6d0:	9800      	ldr	r0, [sp, #0]
   1b6d2:	f003 f865 	bl	1e7a0 <free>
   1b6d6:	2f00      	cmp	r7, #0
   1b6d8:	d1f1      	bne.n	1b6be <__cxa_demangle+0x96>
   1b6da:	e7dd      	b.n	1b698 <__cxa_demangle+0x70>
   1b6dc:	00015781 	.word	0x00015781

0001b6e0 <__gcclibcxx_demangle_callback>:
   1b6e0:	b160      	cbz	r0, 1b6fc <__gcclibcxx_demangle_callback+0x1c>
   1b6e2:	b508      	push	{r3, lr}
   1b6e4:	b139      	cbz	r1, 1b6f6 <__gcclibcxx_demangle_callback+0x16>
   1b6e6:	f7ff fe13 	bl	1b310 <d_demangle_callback.constprop.17>
   1b6ea:	2800      	cmp	r0, #0
   1b6ec:	bf0c      	ite	eq
   1b6ee:	f06f 0001 	mvneq.w	r0, #1
   1b6f2:	2000      	movne	r0, #0
   1b6f4:	bd08      	pop	{r3, pc}
   1b6f6:	f06f 0002 	mvn.w	r0, #2
   1b6fa:	bd08      	pop	{r3, pc}
   1b6fc:	f06f 0002 	mvn.w	r0, #2
   1b700:	4770      	bx	lr
   1b702:	bf00      	nop

0001b704 <__cxa_current_exception_type>:
   1b704:	b508      	push	{r3, lr}
   1b706:	f7f9 f8f5 	bl	148f4 <__cxa_get_globals>
   1b70a:	6800      	ldr	r0, [r0, #0]
   1b70c:	b130      	cbz	r0, 1b71c <__cxa_current_exception_type+0x18>
   1b70e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1b712:	2b01      	cmp	r3, #1
   1b714:	bf04      	itt	eq
   1b716:	6800      	ldreq	r0, [r0, #0]
   1b718:	3878      	subeq	r0, #120	; 0x78
   1b71a:	6800      	ldr	r0, [r0, #0]
   1b71c:	bd08      	pop	{r3, pc}
   1b71e:	bf00      	nop

0001b720 <powf>:
   1b720:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b722:	ed2d 8b04 	vpush	{d8-d9}
   1b726:	4db3      	ldr	r5, [pc, #716]	; (1b9f4 <powf+0x2d4>)
   1b728:	b08b      	sub	sp, #44	; 0x2c
   1b72a:	eef0 8a40 	vmov.f32	s17, s0
   1b72e:	eeb0 8a60 	vmov.f32	s16, s1
   1b732:	f000 f9df 	bl	1baf4 <__ieee754_powf>
   1b736:	f995 4000 	ldrsb.w	r4, [r5]
   1b73a:	1c63      	adds	r3, r4, #1
   1b73c:	eeb0 9a40 	vmov.f32	s18, s0
   1b740:	d02e      	beq.n	1b7a0 <powf+0x80>
   1b742:	eeb4 8a48 	vcmp.f32	s16, s16
   1b746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b74a:	d629      	bvs.n	1b7a0 <powf+0x80>
   1b74c:	eef4 8a68 	vcmp.f32	s17, s17
   1b750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b754:	f180 80a2 	bvs.w	1b89c <powf+0x17c>
   1b758:	eef5 8a40 	vcmp.f32	s17, #0.0
   1b75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b760:	d124      	bne.n	1b7ac <powf+0x8c>
   1b762:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1b766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b76a:	d159      	bne.n	1b820 <powf+0x100>
   1b76c:	2301      	movs	r3, #1
   1b76e:	4aa2      	ldr	r2, [pc, #648]	; (1b9f8 <powf+0x2d8>)
   1b770:	9300      	str	r3, [sp, #0]
   1b772:	ee18 0a90 	vmov	r0, s17
   1b776:	2300      	movs	r3, #0
   1b778:	9201      	str	r2, [sp, #4]
   1b77a:	9308      	str	r3, [sp, #32]
   1b77c:	f000 ff3a 	bl	1c5f4 <__aeabi_f2d>
   1b780:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b784:	ee18 0a10 	vmov	r0, s16
   1b788:	f000 ff34 	bl	1c5f4 <__aeabi_f2d>
   1b78c:	2200      	movs	r2, #0
   1b78e:	2300      	movs	r3, #0
   1b790:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b794:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b798:	2c00      	cmp	r4, #0
   1b79a:	d067      	beq.n	1b86c <powf+0x14c>
   1b79c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1b7a0:	eeb0 0a49 	vmov.f32	s0, s18
   1b7a4:	b00b      	add	sp, #44	; 0x2c
   1b7a6:	ecbd 8b04 	vpop	{d8-d9}
   1b7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7ac:	f000 fd3a 	bl	1c224 <finitef>
   1b7b0:	4604      	mov	r4, r0
   1b7b2:	2800      	cmp	r0, #0
   1b7b4:	f000 8091 	beq.w	1b8da <powf+0x1ba>
   1b7b8:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1b7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b7c0:	d1ee      	bne.n	1b7a0 <powf+0x80>
   1b7c2:	eeb0 0a68 	vmov.f32	s0, s17
   1b7c6:	f000 fd2d 	bl	1c224 <finitef>
   1b7ca:	2800      	cmp	r0, #0
   1b7cc:	d0e8      	beq.n	1b7a0 <powf+0x80>
   1b7ce:	eeb0 0a48 	vmov.f32	s0, s16
   1b7d2:	f000 fd27 	bl	1c224 <finitef>
   1b7d6:	2800      	cmp	r0, #0
   1b7d8:	d0e2      	beq.n	1b7a0 <powf+0x80>
   1b7da:	2304      	movs	r3, #4
   1b7dc:	4a86      	ldr	r2, [pc, #536]	; (1b9f8 <powf+0x2d8>)
   1b7de:	9300      	str	r3, [sp, #0]
   1b7e0:	ee18 0a90 	vmov	r0, s17
   1b7e4:	2300      	movs	r3, #0
   1b7e6:	9308      	str	r3, [sp, #32]
   1b7e8:	9201      	str	r2, [sp, #4]
   1b7ea:	f000 ff03 	bl	1c5f4 <__aeabi_f2d>
   1b7ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b7f2:	ee18 0a10 	vmov	r0, s16
   1b7f6:	f000 fefd 	bl	1c5f4 <__aeabi_f2d>
   1b7fa:	2600      	movs	r6, #0
   1b7fc:	2700      	movs	r7, #0
   1b7fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b802:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b806:	f995 3000 	ldrsb.w	r3, [r5]
   1b80a:	2b02      	cmp	r3, #2
   1b80c:	d003      	beq.n	1b816 <powf+0xf6>
   1b80e:	4668      	mov	r0, sp
   1b810:	f000 fc6c 	bl	1c0ec <matherr>
   1b814:	bb80      	cbnz	r0, 1b878 <powf+0x158>
   1b816:	f002 fd15 	bl	1e244 <__errno>
   1b81a:	2322      	movs	r3, #34	; 0x22
   1b81c:	6003      	str	r3, [r0, #0]
   1b81e:	e02b      	b.n	1b878 <powf+0x158>
   1b820:	eeb0 0a48 	vmov.f32	s0, s16
   1b824:	f000 fcfe 	bl	1c224 <finitef>
   1b828:	2800      	cmp	r0, #0
   1b82a:	d0b9      	beq.n	1b7a0 <powf+0x80>
   1b82c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1b830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b834:	d5b4      	bpl.n	1b7a0 <powf+0x80>
   1b836:	2301      	movs	r3, #1
   1b838:	4a6f      	ldr	r2, [pc, #444]	; (1b9f8 <powf+0x2d8>)
   1b83a:	9300      	str	r3, [sp, #0]
   1b83c:	ee18 0a90 	vmov	r0, s17
   1b840:	2300      	movs	r3, #0
   1b842:	9308      	str	r3, [sp, #32]
   1b844:	9201      	str	r2, [sp, #4]
   1b846:	f000 fed5 	bl	1c5f4 <__aeabi_f2d>
   1b84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b84e:	ee18 0a10 	vmov	r0, s16
   1b852:	f000 fecf 	bl	1c5f4 <__aeabi_f2d>
   1b856:	f995 3000 	ldrsb.w	r3, [r5]
   1b85a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b85e:	2b00      	cmp	r3, #0
   1b860:	f040 809b 	bne.w	1b99a <powf+0x27a>
   1b864:	2200      	movs	r2, #0
   1b866:	2300      	movs	r3, #0
   1b868:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b86c:	4668      	mov	r0, sp
   1b86e:	f000 fc3d 	bl	1c0ec <matherr>
   1b872:	2800      	cmp	r0, #0
   1b874:	f000 808c 	beq.w	1b990 <powf+0x270>
   1b878:	9b08      	ldr	r3, [sp, #32]
   1b87a:	b11b      	cbz	r3, 1b884 <powf+0x164>
   1b87c:	f002 fce2 	bl	1e244 <__errno>
   1b880:	9b08      	ldr	r3, [sp, #32]
   1b882:	6003      	str	r3, [r0, #0]
   1b884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b888:	f001 f9ea 	bl	1cc60 <__aeabi_d2f>
   1b88c:	ee09 0a10 	vmov	s18, r0
   1b890:	eeb0 0a49 	vmov.f32	s0, s18
   1b894:	b00b      	add	sp, #44	; 0x2c
   1b896:	ecbd 8b04 	vpop	{d8-d9}
   1b89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b89c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1b8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b8a4:	f47f af7c 	bne.w	1b7a0 <powf+0x80>
   1b8a8:	2301      	movs	r3, #1
   1b8aa:	4a53      	ldr	r2, [pc, #332]	; (1b9f8 <powf+0x2d8>)
   1b8ac:	9300      	str	r3, [sp, #0]
   1b8ae:	ee18 0a90 	vmov	r0, s17
   1b8b2:	2300      	movs	r3, #0
   1b8b4:	9201      	str	r2, [sp, #4]
   1b8b6:	9308      	str	r3, [sp, #32]
   1b8b8:	f000 fe9c 	bl	1c5f4 <__aeabi_f2d>
   1b8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b8c0:	ee18 0a10 	vmov	r0, s16
   1b8c4:	f000 fe96 	bl	1c5f4 <__aeabi_f2d>
   1b8c8:	4b4c      	ldr	r3, [pc, #304]	; (1b9fc <powf+0x2dc>)
   1b8ca:	2200      	movs	r2, #0
   1b8cc:	2c02      	cmp	r4, #2
   1b8ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b8d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b8d6:	d1c9      	bne.n	1b86c <powf+0x14c>
   1b8d8:	e760      	b.n	1b79c <powf+0x7c>
   1b8da:	eeb0 0a68 	vmov.f32	s0, s17
   1b8de:	f000 fca1 	bl	1c224 <finitef>
   1b8e2:	2800      	cmp	r0, #0
   1b8e4:	f43f af68 	beq.w	1b7b8 <powf+0x98>
   1b8e8:	eeb0 0a48 	vmov.f32	s0, s16
   1b8ec:	f000 fc9a 	bl	1c224 <finitef>
   1b8f0:	2800      	cmp	r0, #0
   1b8f2:	f43f af61 	beq.w	1b7b8 <powf+0x98>
   1b8f6:	eeb4 9a49 	vcmp.f32	s18, s18
   1b8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b8fe:	f180 8087 	bvs.w	1ba10 <powf+0x2f0>
   1b902:	4b3d      	ldr	r3, [pc, #244]	; (1b9f8 <powf+0x2d8>)
   1b904:	9408      	str	r4, [sp, #32]
   1b906:	2203      	movs	r2, #3
   1b908:	ee18 0a90 	vmov	r0, s17
   1b90c:	e88d 000c 	stmia.w	sp, {r2, r3}
   1b910:	f000 fe70 	bl	1c5f4 <__aeabi_f2d>
   1b914:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b918:	ee18 0a10 	vmov	r0, s16
   1b91c:	f000 fe6a 	bl	1c5f4 <__aeabi_f2d>
   1b920:	f995 3000 	ldrsb.w	r3, [r5]
   1b924:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b928:	2b00      	cmp	r3, #0
   1b92a:	d13d      	bne.n	1b9a8 <powf+0x288>
   1b92c:	4b34      	ldr	r3, [pc, #208]	; (1ba00 <powf+0x2e0>)
   1b92e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1b932:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1b936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b93a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b93e:	f57f af66 	bpl.w	1b80e <powf+0xee>
   1b942:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1b946:	ee68 7a27 	vmul.f32	s15, s16, s15
   1b94a:	ee17 0a90 	vmov	r0, s15
   1b94e:	f000 fe51 	bl	1c5f4 <__aeabi_f2d>
   1b952:	4606      	mov	r6, r0
   1b954:	460f      	mov	r7, r1
   1b956:	ec47 6b10 	vmov	d0, r6, r7
   1b95a:	f000 fbc9 	bl	1c0f0 <rint>
   1b95e:	4630      	mov	r0, r6
   1b960:	ec53 2b10 	vmov	r2, r3, d0
   1b964:	4639      	mov	r1, r7
   1b966:	f001 f901 	bl	1cb6c <__aeabi_dcmpeq>
   1b96a:	2800      	cmp	r0, #0
   1b96c:	d13f      	bne.n	1b9ee <powf+0x2ce>
   1b96e:	4925      	ldr	r1, [pc, #148]	; (1ba04 <powf+0x2e4>)
   1b970:	f995 3000 	ldrsb.w	r3, [r5]
   1b974:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1b978:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b97c:	e745      	b.n	1b80a <powf+0xea>
   1b97e:	4610      	mov	r0, r2
   1b980:	4619      	mov	r1, r3
   1b982:	f000 ffb5 	bl	1c8f0 <__aeabi_ddiv>
   1b986:	2c02      	cmp	r4, #2
   1b988:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b98c:	f47f af6e 	bne.w	1b86c <powf+0x14c>
   1b990:	f002 fc58 	bl	1e244 <__errno>
   1b994:	2321      	movs	r3, #33	; 0x21
   1b996:	6003      	str	r3, [r0, #0]
   1b998:	e76e      	b.n	1b878 <powf+0x158>
   1b99a:	491b      	ldr	r1, [pc, #108]	; (1ba08 <powf+0x2e8>)
   1b99c:	2000      	movs	r0, #0
   1b99e:	2b02      	cmp	r3, #2
   1b9a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b9a4:	d0f4      	beq.n	1b990 <powf+0x270>
   1b9a6:	e761      	b.n	1b86c <powf+0x14c>
   1b9a8:	4918      	ldr	r1, [pc, #96]	; (1ba0c <powf+0x2ec>)
   1b9aa:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1b9ae:	2000      	movs	r0, #0
   1b9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b9b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b9b8:	f57f af27 	bpl.w	1b80a <powf+0xea>
   1b9bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1b9c0:	ee68 7a27 	vmul.f32	s15, s16, s15
   1b9c4:	ee17 0a90 	vmov	r0, s15
   1b9c8:	f000 fe14 	bl	1c5f4 <__aeabi_f2d>
   1b9cc:	4606      	mov	r6, r0
   1b9ce:	460f      	mov	r7, r1
   1b9d0:	ec47 6b10 	vmov	d0, r6, r7
   1b9d4:	f000 fb8c 	bl	1c0f0 <rint>
   1b9d8:	4630      	mov	r0, r6
   1b9da:	ec53 2b10 	vmov	r2, r3, d0
   1b9de:	4639      	mov	r1, r7
   1b9e0:	f001 f8c4 	bl	1cb6c <__aeabi_dcmpeq>
   1b9e4:	b918      	cbnz	r0, 1b9ee <powf+0x2ce>
   1b9e6:	4b08      	ldr	r3, [pc, #32]	; (1ba08 <powf+0x2e8>)
   1b9e8:	2200      	movs	r2, #0
   1b9ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b9ee:	f995 3000 	ldrsb.w	r3, [r5]
   1b9f2:	e70a      	b.n	1b80a <powf+0xea>
   1b9f4:	200000f4 	.word	0x200000f4
   1b9f8:	00025800 	.word	0x00025800
   1b9fc:	3ff00000 	.word	0x3ff00000
   1ba00:	47efffff 	.word	0x47efffff
   1ba04:	c7efffff 	.word	0xc7efffff
   1ba08:	fff00000 	.word	0xfff00000
   1ba0c:	7ff00000 	.word	0x7ff00000
   1ba10:	4b0c      	ldr	r3, [pc, #48]	; (1ba44 <powf+0x324>)
   1ba12:	9408      	str	r4, [sp, #32]
   1ba14:	2201      	movs	r2, #1
   1ba16:	ee18 0a90 	vmov	r0, s17
   1ba1a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1ba1e:	f000 fde9 	bl	1c5f4 <__aeabi_f2d>
   1ba22:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ba26:	ee18 0a10 	vmov	r0, s16
   1ba2a:	f000 fde3 	bl	1c5f4 <__aeabi_f2d>
   1ba2e:	f995 4000 	ldrsb.w	r4, [r5]
   1ba32:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ba36:	2200      	movs	r2, #0
   1ba38:	2300      	movs	r3, #0
   1ba3a:	2c00      	cmp	r4, #0
   1ba3c:	d19f      	bne.n	1b97e <powf+0x25e>
   1ba3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ba42:	e713      	b.n	1b86c <powf+0x14c>
   1ba44:	00025800 	.word	0x00025800

0001ba48 <sqrtf>:
   1ba48:	b510      	push	{r4, lr}
   1ba4a:	ed2d 8b02 	vpush	{d8}
   1ba4e:	b08a      	sub	sp, #40	; 0x28
   1ba50:	eeb0 8a40 	vmov.f32	s16, s0
   1ba54:	f000 fb46 	bl	1c0e4 <__ieee754_sqrtf>
   1ba58:	4b24      	ldr	r3, [pc, #144]	; (1baec <sqrtf+0xa4>)
   1ba5a:	f993 4000 	ldrsb.w	r4, [r3]
   1ba5e:	1c63      	adds	r3, r4, #1
   1ba60:	d009      	beq.n	1ba76 <sqrtf+0x2e>
   1ba62:	eeb4 8a48 	vcmp.f32	s16, s16
   1ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ba6a:	d604      	bvs.n	1ba76 <sqrtf+0x2e>
   1ba6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ba70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ba74:	d403      	bmi.n	1ba7e <sqrtf+0x36>
   1ba76:	b00a      	add	sp, #40	; 0x28
   1ba78:	ecbd 8b02 	vpop	{d8}
   1ba7c:	bd10      	pop	{r4, pc}
   1ba7e:	2301      	movs	r3, #1
   1ba80:	4a1b      	ldr	r2, [pc, #108]	; (1baf0 <sqrtf+0xa8>)
   1ba82:	9300      	str	r3, [sp, #0]
   1ba84:	ee18 0a10 	vmov	r0, s16
   1ba88:	2300      	movs	r3, #0
   1ba8a:	9201      	str	r2, [sp, #4]
   1ba8c:	9308      	str	r3, [sp, #32]
   1ba8e:	f000 fdb1 	bl	1c5f4 <__aeabi_f2d>
   1ba92:	2200      	movs	r2, #0
   1ba94:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ba98:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ba9c:	2300      	movs	r3, #0
   1ba9e:	b1bc      	cbz	r4, 1bad0 <sqrtf+0x88>
   1baa0:	4610      	mov	r0, r2
   1baa2:	4619      	mov	r1, r3
   1baa4:	f000 ff24 	bl	1c8f0 <__aeabi_ddiv>
   1baa8:	2c02      	cmp	r4, #2
   1baaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1baae:	d111      	bne.n	1bad4 <sqrtf+0x8c>
   1bab0:	f002 fbc8 	bl	1e244 <__errno>
   1bab4:	2321      	movs	r3, #33	; 0x21
   1bab6:	6003      	str	r3, [r0, #0]
   1bab8:	9b08      	ldr	r3, [sp, #32]
   1baba:	b98b      	cbnz	r3, 1bae0 <sqrtf+0x98>
   1babc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1bac0:	f001 f8ce 	bl	1cc60 <__aeabi_d2f>
   1bac4:	ee00 0a10 	vmov	s0, r0
   1bac8:	b00a      	add	sp, #40	; 0x28
   1baca:	ecbd 8b02 	vpop	{d8}
   1bace:	bd10      	pop	{r4, pc}
   1bad0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bad4:	4668      	mov	r0, sp
   1bad6:	f000 fb09 	bl	1c0ec <matherr>
   1bada:	2800      	cmp	r0, #0
   1badc:	d1ec      	bne.n	1bab8 <sqrtf+0x70>
   1bade:	e7e7      	b.n	1bab0 <sqrtf+0x68>
   1bae0:	f002 fbb0 	bl	1e244 <__errno>
   1bae4:	9b08      	ldr	r3, [sp, #32]
   1bae6:	6003      	str	r3, [r0, #0]
   1bae8:	e7e8      	b.n	1babc <sqrtf+0x74>
   1baea:	bf00      	nop
   1baec:	200000f4 	.word	0x200000f4
   1baf0:	00025808 	.word	0x00025808

0001baf4 <__ieee754_powf>:
   1baf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1baf8:	ed2d 8b02 	vpush	{d8}
   1bafc:	b082      	sub	sp, #8
   1bafe:	edcd 0a00 	vstr	s1, [sp]
   1bb02:	9c00      	ldr	r4, [sp, #0]
   1bb04:	ed8d 0a01 	vstr	s0, [sp, #4]
   1bb08:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1bb0c:	d014      	beq.n	1bb38 <__ieee754_powf+0x44>
   1bb0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1bb12:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1bb16:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1bb1a:	dd07      	ble.n	1bb2c <__ieee754_powf+0x38>
   1bb1c:	4858      	ldr	r0, [pc, #352]	; (1bc80 <__ieee754_powf+0x18c>)
   1bb1e:	b002      	add	sp, #8
   1bb20:	ecbd 8b02 	vpop	{d8}
   1bb24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bb28:	f000 bb86 	b.w	1c238 <nanf>
   1bb2c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1bb30:	dd09      	ble.n	1bb46 <__ieee754_powf+0x52>
   1bb32:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1bb36:	d1f1      	bne.n	1bb1c <__ieee754_powf+0x28>
   1bb38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1bb3c:	b002      	add	sp, #8
   1bb3e:	ecbd 8b02 	vpop	{d8}
   1bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bb46:	f1b8 0f00 	cmp.w	r8, #0
   1bb4a:	db4d      	blt.n	1bbe8 <__ieee754_powf+0xf4>
   1bb4c:	f04f 0a00 	mov.w	sl, #0
   1bb50:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1bb54:	d03f      	beq.n	1bbd6 <__ieee754_powf+0xe2>
   1bb56:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1bb5a:	d058      	beq.n	1bc0e <__ieee754_powf+0x11a>
   1bb5c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1bb60:	d06e      	beq.n	1bc40 <__ieee754_powf+0x14c>
   1bb62:	9d01      	ldr	r5, [sp, #4]
   1bb64:	f8dd 9000 	ldr.w	r9, [sp]
   1bb68:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1bb6c:	ee00 5a10 	vmov	s0, r5
   1bb70:	d01c      	beq.n	1bbac <__ieee754_powf+0xb8>
   1bb72:	f000 fb4f 	bl	1c214 <fabsf>
   1bb76:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1bb7a:	d04d      	beq.n	1bc18 <__ieee754_powf+0x124>
   1bb7c:	2f00      	cmp	r7, #0
   1bb7e:	d04b      	beq.n	1bc18 <__ieee754_powf+0x124>
   1bb80:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1bb84:	d048      	beq.n	1bc18 <__ieee754_powf+0x124>
   1bb86:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1bb8a:	3b01      	subs	r3, #1
   1bb8c:	ea5a 0203 	orrs.w	r2, sl, r3
   1bb90:	d06e      	beq.n	1bc70 <__ieee754_powf+0x17c>
   1bb92:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1bb96:	dd7b      	ble.n	1bc90 <__ieee754_powf+0x19c>
   1bb98:	4a3a      	ldr	r2, [pc, #232]	; (1bc84 <__ieee754_powf+0x190>)
   1bb9a:	4297      	cmp	r7, r2
   1bb9c:	f300 81c8 	bgt.w	1bf30 <__ieee754_powf+0x43c>
   1bba0:	2c00      	cmp	r4, #0
   1bba2:	f2c0 81cb 	blt.w	1bf3c <__ieee754_powf+0x448>
   1bba6:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1bc88 <__ieee754_powf+0x194>
   1bbaa:	e7c7      	b.n	1bb3c <__ieee754_powf+0x48>
   1bbac:	f1b8 0f00 	cmp.w	r8, #0
   1bbb0:	da4b      	bge.n	1bc4a <__ieee754_powf+0x156>
   1bbb2:	f000 fb2f 	bl	1c214 <fabsf>
   1bbb6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1bbba:	d001      	beq.n	1bbc0 <__ieee754_powf+0xcc>
   1bbbc:	2f00      	cmp	r7, #0
   1bbbe:	d1df      	bne.n	1bb80 <__ieee754_powf+0x8c>
   1bbc0:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1bbc4:	ea57 030a 	orrs.w	r3, r7, sl
   1bbc8:	d04d      	beq.n	1bc66 <__ieee754_powf+0x172>
   1bbca:	f1ba 0f01 	cmp.w	sl, #1
   1bbce:	d1b5      	bne.n	1bb3c <__ieee754_powf+0x48>
   1bbd0:	eeb1 0a40 	vneg.f32	s0, s0
   1bbd4:	e7b2      	b.n	1bb3c <__ieee754_powf+0x48>
   1bbd6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1bbda:	d0ad      	beq.n	1bb38 <__ieee754_powf+0x44>
   1bbdc:	dd29      	ble.n	1bc32 <__ieee754_powf+0x13e>
   1bbde:	2c00      	cmp	r4, #0
   1bbe0:	dbe1      	blt.n	1bba6 <__ieee754_powf+0xb2>
   1bbe2:	ed9d 0a00 	vldr	s0, [sp]
   1bbe6:	e7a9      	b.n	1bb3c <__ieee754_powf+0x48>
   1bbe8:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1bbec:	da1e      	bge.n	1bc2c <__ieee754_powf+0x138>
   1bbee:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1bbf2:	db09      	blt.n	1bc08 <__ieee754_powf+0x114>
   1bbf4:	15f3      	asrs	r3, r6, #23
   1bbf6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1bbfa:	fa46 f203 	asr.w	r2, r6, r3
   1bbfe:	fa02 f303 	lsl.w	r3, r2, r3
   1bc02:	429e      	cmp	r6, r3
   1bc04:	f000 818f 	beq.w	1bf26 <__ieee754_powf+0x432>
   1bc08:	f04f 0a00 	mov.w	sl, #0
   1bc0c:	e7a3      	b.n	1bb56 <__ieee754_powf+0x62>
   1bc0e:	2c00      	cmp	r4, #0
   1bc10:	db22      	blt.n	1bc58 <__ieee754_powf+0x164>
   1bc12:	ed9d 0a01 	vldr	s0, [sp, #4]
   1bc16:	e791      	b.n	1bb3c <__ieee754_powf+0x48>
   1bc18:	2c00      	cmp	r4, #0
   1bc1a:	bfbc      	itt	lt
   1bc1c:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1bc20:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1bc24:	f1b8 0f00 	cmp.w	r8, #0
   1bc28:	da88      	bge.n	1bb3c <__ieee754_powf+0x48>
   1bc2a:	e7c9      	b.n	1bbc0 <__ieee754_powf+0xcc>
   1bc2c:	f04f 0a02 	mov.w	sl, #2
   1bc30:	e78e      	b.n	1bb50 <__ieee754_powf+0x5c>
   1bc32:	2c00      	cmp	r4, #0
   1bc34:	dab7      	bge.n	1bba6 <__ieee754_powf+0xb2>
   1bc36:	eddd 7a00 	vldr	s15, [sp]
   1bc3a:	eeb1 0a67 	vneg.f32	s0, s15
   1bc3e:	e77d      	b.n	1bb3c <__ieee754_powf+0x48>
   1bc40:	eddd 7a01 	vldr	s15, [sp, #4]
   1bc44:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1bc48:	e778      	b.n	1bb3c <__ieee754_powf+0x48>
   1bc4a:	b002      	add	sp, #8
   1bc4c:	ecbd 8b02 	vpop	{d8}
   1bc50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc54:	f000 ba46 	b.w	1c0e4 <__ieee754_sqrtf>
   1bc58:	ed9d 7a01 	vldr	s14, [sp, #4]
   1bc5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1bc60:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1bc64:	e76a      	b.n	1bb3c <__ieee754_powf+0x48>
   1bc66:	ee70 7a40 	vsub.f32	s15, s0, s0
   1bc6a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1bc6e:	e765      	b.n	1bb3c <__ieee754_powf+0x48>
   1bc70:	ee07 5a90 	vmov	s15, r5
   1bc74:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1bc78:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1bc7c:	e75e      	b.n	1bb3c <__ieee754_powf+0x48>
   1bc7e:	bf00      	nop
   1bc80:	00023560 	.word	0x00023560
   1bc84:	3f7ffff7 	.word	0x3f7ffff7
   1bc88:	00000000 	.word	0x00000000
   1bc8c:	4b800000 	.word	0x4b800000
   1bc90:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1bc94:	f280 815f 	bge.w	1bf56 <__ieee754_powf+0x462>
   1bc98:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1bc8c <__ieee754_powf+0x198>
   1bc9c:	ee60 7a27 	vmul.f32	s15, s0, s15
   1bca0:	f06f 0217 	mvn.w	r2, #23
   1bca4:	ee17 7a90 	vmov	r7, s15
   1bca8:	48ee      	ldr	r0, [pc, #952]	; (1c064 <__ieee754_powf+0x570>)
   1bcaa:	15f9      	asrs	r1, r7, #23
   1bcac:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1bcb0:	397f      	subs	r1, #127	; 0x7f
   1bcb2:	4287      	cmp	r7, r0
   1bcb4:	4411      	add	r1, r2
   1bcb6:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1bcba:	f340 8144 	ble.w	1bf46 <__ieee754_powf+0x452>
   1bcbe:	48ea      	ldr	r0, [pc, #936]	; (1c068 <__ieee754_powf+0x574>)
   1bcc0:	4287      	cmp	r7, r0
   1bcc2:	f340 8191 	ble.w	1bfe8 <__ieee754_powf+0x4f4>
   1bcc6:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1c06c <__ieee754_powf+0x578>
   1bcca:	3101      	adds	r1, #1
   1bccc:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1bcd0:	eef0 3a64 	vmov.f32	s7, s9
   1bcd4:	2500      	movs	r5, #0
   1bcd6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1bcda:	ee06 2a90 	vmov	s13, r2
   1bcde:	ee76 7a86 	vadd.f32	s15, s13, s12
   1bce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1bce6:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1bcea:	1052      	asrs	r2, r2, #1
   1bcec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1bcf0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1bcf4:	442a      	add	r2, r5
   1bcf6:	48de      	ldr	r0, [pc, #888]	; (1c070 <__ieee754_powf+0x57c>)
   1bcf8:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1bcfc:	ee07 2a90 	vmov	s15, r2
   1bd00:	ee27 4a08 	vmul.f32	s8, s14, s16
   1bd04:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1bd08:	eddf 8ada 	vldr	s17, [pc, #872]	; 1c074 <__ieee754_powf+0x580>
   1bd0c:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1c078 <__ieee754_powf+0x584>
   1bd10:	eddf 1ada 	vldr	s3, [pc, #872]	; 1c07c <__ieee754_powf+0x588>
   1bd14:	eddf 0ada 	vldr	s1, [pc, #872]	; 1c080 <__ieee754_powf+0x58c>
   1bd18:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1c084 <__ieee754_powf+0x590>
   1bd1c:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1c088 <__ieee754_powf+0x594>
   1bd20:	eddf 2ada 	vldr	s5, [pc, #872]	; 1c08c <__ieee754_powf+0x598>
   1bd24:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1c090 <__ieee754_powf+0x59c>
   1bd28:	ee24 6a04 	vmul.f32	s12, s8, s8
   1bd2c:	ee14 2a10 	vmov	r2, s8
   1bd30:	eea6 0a28 	vfma.f32	s0, s12, s17
   1bd34:	4002      	ands	r2, r0
   1bd36:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1bd3a:	eeb0 5a61 	vmov.f32	s10, s3
   1bd3e:	ee05 2a90 	vmov	s11, r2
   1bd42:	eea6 5a00 	vfma.f32	s10, s12, s0
   1bd46:	eef1 1a65 	vneg.f32	s3, s11
   1bd4a:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1bd4e:	eef0 7a60 	vmov.f32	s15, s1
   1bd52:	eee6 7a05 	vfma.f32	s15, s12, s10
   1bd56:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1bd5a:	eeb0 5a41 	vmov.f32	s10, s2
   1bd5e:	eea6 5a27 	vfma.f32	s10, s12, s15
   1bd62:	ee67 6a08 	vmul.f32	s13, s14, s16
   1bd66:	eeb0 7a42 	vmov.f32	s14, s4
   1bd6a:	eea6 7a05 	vfma.f32	s14, s12, s10
   1bd6e:	ee75 7a84 	vadd.f32	s15, s11, s8
   1bd72:	ee26 6a06 	vmul.f32	s12, s12, s12
   1bd76:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1bd7a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1bd7e:	eee6 7a07 	vfma.f32	s15, s12, s14
   1bd82:	eeb0 7a45 	vmov.f32	s14, s10
   1bd86:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1bd8a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1c094 <__ieee754_powf+0x5a0>
   1bd8e:	ee37 6a27 	vadd.f32	s12, s14, s15
   1bd92:	ee07 1a10 	vmov	s14, r1
   1bd96:	ee16 2a10 	vmov	r2, s12
   1bd9a:	4002      	ands	r2, r0
   1bd9c:	ee06 2a10 	vmov	s12, r2
   1bda0:	ee36 5a45 	vsub.f32	s10, s12, s10
   1bda4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1bda8:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1bdac:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1bdb0:	ee67 7a84 	vmul.f32	s15, s15, s8
   1bdb4:	eee6 7a26 	vfma.f32	s15, s12, s13
   1bdb8:	eef0 6a67 	vmov.f32	s13, s15
   1bdbc:	eee5 6a86 	vfma.f32	s13, s11, s12
   1bdc0:	ee16 2a90 	vmov	r2, s13
   1bdc4:	4002      	ands	r2, r0
   1bdc6:	ee06 2a90 	vmov	s13, r2
   1bdca:	eee1 6a86 	vfma.f32	s13, s3, s12
   1bdce:	ee05 2a90 	vmov	s11, r2
   1bdd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1bdd6:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1bdda:	eee5 7a83 	vfma.f32	s15, s11, s6
   1bdde:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1bde2:	eef0 6a67 	vmov.f32	s13, s15
   1bde6:	eee5 6a82 	vfma.f32	s13, s11, s4
   1bdea:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1bdee:	ee76 6a87 	vadd.f32	s13, s13, s14
   1bdf2:	ee16 2a90 	vmov	r2, s13
   1bdf6:	4002      	ands	r2, r0
   1bdf8:	ee06 2a90 	vmov	s13, r2
   1bdfc:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1be00:	ee37 7a64 	vsub.f32	s14, s14, s9
   1be04:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1be08:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1be0c:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1be10:	f024 040f 	bic.w	r4, r4, #15
   1be14:	ee07 9a10 	vmov	s14, r9
   1be18:	ee06 4a10 	vmov	s12, r4
   1be1c:	ee67 7a87 	vmul.f32	s15, s15, s14
   1be20:	ee37 6a46 	vsub.f32	s12, s14, s12
   1be24:	ee07 4a10 	vmov	s14, r4
   1be28:	eee6 7a86 	vfma.f32	s15, s13, s12
   1be2c:	f10a 3aff 	add.w	sl, sl, #4294967295
   1be30:	ea5a 0303 	orrs.w	r3, sl, r3
   1be34:	ee26 7a87 	vmul.f32	s14, s13, s14
   1be38:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1be3c:	ee77 6a87 	vadd.f32	s13, s15, s14
   1be40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1be44:	ee16 2a90 	vmov	r2, s13
   1be48:	bf14      	ite	ne
   1be4a:	eeb0 8a46 	vmovne.f32	s16, s12
   1be4e:	eeb0 8a40 	vmoveq.f32	s16, s0
   1be52:	2a00      	cmp	r2, #0
   1be54:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1be58:	f340 80b3 	ble.w	1bfc2 <__ieee754_powf+0x4ce>
   1be5c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1be60:	f300 8086 	bgt.w	1bf70 <__ieee754_powf+0x47c>
   1be64:	d079      	beq.n	1bf5a <__ieee754_powf+0x466>
   1be66:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1be6a:	f300 8088 	bgt.w	1bf7e <__ieee754_powf+0x48a>
   1be6e:	2100      	movs	r1, #0
   1be70:	4608      	mov	r0, r1
   1be72:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1be76:	f023 030f 	bic.w	r3, r3, #15
   1be7a:	ee06 3a10 	vmov	s12, r3
   1be7e:	eddf 6a86 	vldr	s13, [pc, #536]	; 1c098 <__ieee754_powf+0x5a4>
   1be82:	eddf 5a86 	vldr	s11, [pc, #536]	; 1c09c <__ieee754_powf+0x5a8>
   1be86:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1c0a0 <__ieee754_powf+0x5ac>
   1be8a:	eddf 3a86 	vldr	s7, [pc, #536]	; 1c0a4 <__ieee754_powf+0x5b0>
   1be8e:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1c0a8 <__ieee754_powf+0x5b4>
   1be92:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1c0ac <__ieee754_powf+0x5b8>
   1be96:	eddf 4a86 	vldr	s9, [pc, #536]	; 1c0b0 <__ieee754_powf+0x5bc>
   1be9a:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1c0b4 <__ieee754_powf+0x5c0>
   1be9e:	ee36 7a47 	vsub.f32	s14, s12, s14
   1bea2:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1bea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1beaa:	ee26 7a26 	vmul.f32	s14, s12, s13
   1beae:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1beb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1beb6:	eef0 7a47 	vmov.f32	s15, s14
   1beba:	eea6 7a03 	vfma.f32	s14, s12, s6
   1bebe:	ee67 6a07 	vmul.f32	s13, s14, s14
   1bec2:	eef0 1a47 	vmov.f32	s3, s14
   1bec6:	eee6 1a43 	vfms.f32	s3, s12, s6
   1beca:	eeb0 6a63 	vmov.f32	s12, s7
   1bece:	eea6 6a82 	vfma.f32	s12, s13, s4
   1bed2:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1bed6:	eea6 4a86 	vfma.f32	s8, s13, s12
   1beda:	eee7 7a27 	vfma.f32	s15, s14, s15
   1bede:	eee6 4a84 	vfma.f32	s9, s13, s8
   1bee2:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1bee6:	eeb0 6a45 	vmov.f32	s12, s10
   1beea:	eeb0 5a47 	vmov.f32	s10, s14
   1beee:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1bef2:	eef0 6a45 	vmov.f32	s13, s10
   1bef6:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1befa:	ee27 5a05 	vmul.f32	s10, s14, s10
   1befe:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1bf02:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1bf06:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1bf0a:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1bf0e:	ee10 3a10 	vmov	r3, s0
   1bf12:	440b      	add	r3, r1
   1bf14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1bf18:	f2c0 80a0 	blt.w	1c05c <__ieee754_powf+0x568>
   1bf1c:	ee00 3a10 	vmov	s0, r3
   1bf20:	ee20 0a08 	vmul.f32	s0, s0, s16
   1bf24:	e60a      	b.n	1bb3c <__ieee754_powf+0x48>
   1bf26:	f002 0201 	and.w	r2, r2, #1
   1bf2a:	f1c2 0a02 	rsb	sl, r2, #2
   1bf2e:	e612      	b.n	1bb56 <__ieee754_powf+0x62>
   1bf30:	4a61      	ldr	r2, [pc, #388]	; (1c0b8 <__ieee754_powf+0x5c4>)
   1bf32:	4297      	cmp	r7, r2
   1bf34:	dd61      	ble.n	1bffa <__ieee754_powf+0x506>
   1bf36:	2c00      	cmp	r4, #0
   1bf38:	f77f ae35 	ble.w	1bba6 <__ieee754_powf+0xb2>
   1bf3c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1c0bc <__ieee754_powf+0x5c8>
   1bf40:	ee20 0a00 	vmul.f32	s0, s0, s0
   1bf44:	e5fa      	b.n	1bb3c <__ieee754_powf+0x48>
   1bf46:	eddf 4a49 	vldr	s9, [pc, #292]	; 1c06c <__ieee754_powf+0x578>
   1bf4a:	2500      	movs	r5, #0
   1bf4c:	eef0 3a64 	vmov.f32	s7, s9
   1bf50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1bf54:	e6c1      	b.n	1bcda <__ieee754_powf+0x1e6>
   1bf56:	2200      	movs	r2, #0
   1bf58:	e6a6      	b.n	1bca8 <__ieee754_powf+0x1b4>
   1bf5a:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1c0c0 <__ieee754_powf+0x5cc>
   1bf5e:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1bf62:	ee37 6a86 	vadd.f32	s12, s15, s12
   1bf66:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1bf6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1bf6e:	dd06      	ble.n	1bf7e <__ieee754_powf+0x48a>
   1bf70:	eddf 7a52 	vldr	s15, [pc, #328]	; 1c0bc <__ieee754_powf+0x5c8>
   1bf74:	ee28 0a27 	vmul.f32	s0, s16, s15
   1bf78:	ee20 0a27 	vmul.f32	s0, s0, s15
   1bf7c:	e5de      	b.n	1bb3c <__ieee754_powf+0x48>
   1bf7e:	15db      	asrs	r3, r3, #23
   1bf80:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1bf84:	3b7e      	subs	r3, #126	; 0x7e
   1bf86:	fa41 f303 	asr.w	r3, r1, r3
   1bf8a:	4413      	add	r3, r2
   1bf8c:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1bf90:	4c4c      	ldr	r4, [pc, #304]	; (1c0c4 <__ieee754_powf+0x5d0>)
   1bf92:	397f      	subs	r1, #127	; 0x7f
   1bf94:	410c      	asrs	r4, r1
   1bf96:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1bf9a:	ea23 0304 	bic.w	r3, r3, r4
   1bf9e:	ee06 3a90 	vmov	s13, r3
   1bfa2:	ee37 7a66 	vsub.f32	s14, s14, s13
   1bfa6:	f1c1 0117 	rsb	r1, r1, #23
   1bfaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bfae:	4108      	asrs	r0, r1
   1bfb0:	2a00      	cmp	r2, #0
   1bfb2:	ee77 6a87 	vadd.f32	s13, s15, s14
   1bfb6:	bfb8      	it	lt
   1bfb8:	4240      	neglt	r0, r0
   1bfba:	05c1      	lsls	r1, r0, #23
   1bfbc:	ee16 2a90 	vmov	r2, s13
   1bfc0:	e757      	b.n	1be72 <__ieee754_powf+0x37e>
   1bfc2:	4941      	ldr	r1, [pc, #260]	; (1c0c8 <__ieee754_powf+0x5d4>)
   1bfc4:	428b      	cmp	r3, r1
   1bfc6:	dc08      	bgt.n	1bfda <__ieee754_powf+0x4e6>
   1bfc8:	f47f af4d 	bne.w	1be66 <__ieee754_powf+0x372>
   1bfcc:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1bfd0:	eef4 7ae6 	vcmpe.f32	s15, s13
   1bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1bfd8:	d8d1      	bhi.n	1bf7e <__ieee754_powf+0x48a>
   1bfda:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1c0cc <__ieee754_powf+0x5d8>
   1bfde:	ee28 0a27 	vmul.f32	s0, s16, s15
   1bfe2:	ee20 0a27 	vmul.f32	s0, s0, s15
   1bfe6:	e5a9      	b.n	1bb3c <__ieee754_powf+0x48>
   1bfe8:	eddf 4a39 	vldr	s9, [pc, #228]	; 1c0d0 <__ieee754_powf+0x5dc>
   1bfec:	eddf 3a39 	vldr	s7, [pc, #228]	; 1c0d4 <__ieee754_powf+0x5e0>
   1bff0:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1bff4:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1bff8:	e66f      	b.n	1bcda <__ieee754_powf+0x1e6>
   1bffa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1bffe:	ee30 0a67 	vsub.f32	s0, s0, s15
   1c002:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1c080 <__ieee754_powf+0x58c>
   1c006:	eddf 7a34 	vldr	s15, [pc, #208]	; 1c0d8 <__ieee754_powf+0x5e4>
   1c00a:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1c0dc <__ieee754_powf+0x5e8>
   1c00e:	eddf 5a34 	vldr	s11, [pc, #208]	; 1c0e0 <__ieee754_powf+0x5ec>
   1c012:	eeb1 6a40 	vneg.f32	s12, s0
   1c016:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1c01a:	eee6 6a07 	vfma.f32	s13, s12, s14
   1c01e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1c022:	eea6 7a26 	vfma.f32	s14, s12, s13
   1c026:	ee60 6a00 	vmul.f32	s13, s0, s0
   1c02a:	ee27 7a26 	vmul.f32	s14, s14, s13
   1c02e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1c032:	eee0 7a05 	vfma.f32	s15, s0, s10
   1c036:	eef0 6a67 	vmov.f32	s13, s15
   1c03a:	eee0 6a25 	vfma.f32	s13, s0, s11
   1c03e:	ee16 2a90 	vmov	r2, s13
   1c042:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1c046:	f022 020f 	bic.w	r2, r2, #15
   1c04a:	ee07 2a10 	vmov	s14, r2
   1c04e:	eea6 7a25 	vfma.f32	s14, s12, s11
   1c052:	ee06 2a90 	vmov	s13, r2
   1c056:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1c05a:	e6d7      	b.n	1be0c <__ieee754_powf+0x318>
   1c05c:	f000 f8f2 	bl	1c244 <scalbnf>
   1c060:	e75e      	b.n	1bf20 <__ieee754_powf+0x42c>
   1c062:	bf00      	nop
   1c064:	001cc471 	.word	0x001cc471
   1c068:	005db3d6 	.word	0x005db3d6
   1c06c:	00000000 	.word	0x00000000
   1c070:	fffff000 	.word	0xfffff000
   1c074:	3e53f142 	.word	0x3e53f142
   1c078:	3e6c3255 	.word	0x3e6c3255
   1c07c:	3e8ba305 	.word	0x3e8ba305
   1c080:	3eaaaaab 	.word	0x3eaaaaab
   1c084:	3edb6db7 	.word	0x3edb6db7
   1c088:	3f19999a 	.word	0x3f19999a
   1c08c:	3f76384f 	.word	0x3f76384f
   1c090:	369dc3a0 	.word	0x369dc3a0
   1c094:	3f763800 	.word	0x3f763800
   1c098:	35bfbe8c 	.word	0x35bfbe8c
   1c09c:	3f317218 	.word	0x3f317218
   1c0a0:	3f317200 	.word	0x3f317200
   1c0a4:	b5ddea0e 	.word	0xb5ddea0e
   1c0a8:	3331bb4c 	.word	0x3331bb4c
   1c0ac:	388ab355 	.word	0x388ab355
   1c0b0:	bb360b61 	.word	0xbb360b61
   1c0b4:	3e2aaaab 	.word	0x3e2aaaab
   1c0b8:	3f800007 	.word	0x3f800007
   1c0bc:	7149f2ca 	.word	0x7149f2ca
   1c0c0:	3338aa3c 	.word	0x3338aa3c
   1c0c4:	007fffff 	.word	0x007fffff
   1c0c8:	43160000 	.word	0x43160000
   1c0cc:	0da24260 	.word	0x0da24260
   1c0d0:	3f15c000 	.word	0x3f15c000
   1c0d4:	35d1cfdc 	.word	0x35d1cfdc
   1c0d8:	3fb8aa3b 	.word	0x3fb8aa3b
   1c0dc:	36eca570 	.word	0x36eca570
   1c0e0:	3fb8aa00 	.word	0x3fb8aa00

0001c0e4 <__ieee754_sqrtf>:
   1c0e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1c0e8:	4770      	bx	lr
   1c0ea:	bf00      	nop

0001c0ec <matherr>:
   1c0ec:	2000      	movs	r0, #0
   1c0ee:	4770      	bx	lr

0001c0f0 <rint>:
   1c0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c0f2:	ec53 2b10 	vmov	r2, r3, d0
   1c0f6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1c0fa:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1c0fe:	2813      	cmp	r0, #19
   1c100:	b083      	sub	sp, #12
   1c102:	4619      	mov	r1, r3
   1c104:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1c108:	ee10 5a10 	vmov	r5, s0
   1c10c:	dc2f      	bgt.n	1c16e <rint+0x7e>
   1c10e:	2800      	cmp	r0, #0
   1c110:	db49      	blt.n	1c1a6 <rint+0xb6>
   1c112:	4e3e      	ldr	r6, [pc, #248]	; (1c20c <rint+0x11c>)
   1c114:	4106      	asrs	r6, r0
   1c116:	ea03 0706 	and.w	r7, r3, r6
   1c11a:	4317      	orrs	r7, r2
   1c11c:	d02c      	beq.n	1c178 <rint+0x88>
   1c11e:	0876      	lsrs	r6, r6, #1
   1c120:	4033      	ands	r3, r6
   1c122:	431d      	orrs	r5, r3
   1c124:	d00c      	beq.n	1c140 <rint+0x50>
   1c126:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1c12a:	2813      	cmp	r0, #19
   1c12c:	ea21 0606 	bic.w	r6, r1, r6
   1c130:	fa43 f100 	asr.w	r1, r3, r0
   1c134:	ea41 0106 	orr.w	r1, r1, r6
   1c138:	bf0c      	ite	eq
   1c13a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1c13e:	2500      	movne	r5, #0
   1c140:	4833      	ldr	r0, [pc, #204]	; (1c210 <rint+0x120>)
   1c142:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1c146:	462a      	mov	r2, r5
   1c148:	e9d4 4500 	ldrd	r4, r5, [r4]
   1c14c:	4610      	mov	r0, r2
   1c14e:	462b      	mov	r3, r5
   1c150:	4622      	mov	r2, r4
   1c152:	f000 f8f1 	bl	1c338 <__adddf3>
   1c156:	e9cd 0100 	strd	r0, r1, [sp]
   1c15a:	4622      	mov	r2, r4
   1c15c:	462b      	mov	r3, r5
   1c15e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c162:	f000 f8e7 	bl	1c334 <__aeabi_dsub>
   1c166:	ec41 0b10 	vmov	d0, r0, r1
   1c16a:	b003      	add	sp, #12
   1c16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c16e:	2833      	cmp	r0, #51	; 0x33
   1c170:	dd06      	ble.n	1c180 <rint+0x90>
   1c172:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1c176:	d040      	beq.n	1c1fa <rint+0x10a>
   1c178:	ec43 2b10 	vmov	d0, r2, r3
   1c17c:	b003      	add	sp, #12
   1c17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c180:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1c184:	f04f 30ff 	mov.w	r0, #4294967295
   1c188:	40f0      	lsrs	r0, r6
   1c18a:	4202      	tst	r2, r0
   1c18c:	d0f4      	beq.n	1c178 <rint+0x88>
   1c18e:	0840      	lsrs	r0, r0, #1
   1c190:	4202      	tst	r2, r0
   1c192:	d0d5      	beq.n	1c140 <rint+0x50>
   1c194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c198:	ea25 0000 	bic.w	r0, r5, r0
   1c19c:	fa43 f606 	asr.w	r6, r3, r6
   1c1a0:	ea46 0500 	orr.w	r5, r6, r0
   1c1a4:	e7cc      	b.n	1c140 <rint+0x50>
   1c1a6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1c1aa:	4310      	orrs	r0, r2
   1c1ac:	d0e4      	beq.n	1c178 <rint+0x88>
   1c1ae:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1c1b2:	4310      	orrs	r0, r2
   1c1b4:	4247      	negs	r7, r0
   1c1b6:	4307      	orrs	r7, r0
   1c1b8:	4d15      	ldr	r5, [pc, #84]	; (1c210 <rint+0x120>)
   1c1ba:	0c5e      	lsrs	r6, r3, #17
   1c1bc:	0b3f      	lsrs	r7, r7, #12
   1c1be:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1c1c2:	0476      	lsls	r6, r6, #17
   1c1c4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1c1c8:	ea43 0106 	orr.w	r1, r3, r6
   1c1cc:	e9d2 6700 	ldrd	r6, r7, [r2]
   1c1d0:	ee10 0a10 	vmov	r0, s0
   1c1d4:	4632      	mov	r2, r6
   1c1d6:	463b      	mov	r3, r7
   1c1d8:	f000 f8ae 	bl	1c338 <__adddf3>
   1c1dc:	e9cd 0100 	strd	r0, r1, [sp]
   1c1e0:	463b      	mov	r3, r7
   1c1e2:	4632      	mov	r2, r6
   1c1e4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c1e8:	f000 f8a4 	bl	1c334 <__aeabi_dsub>
   1c1ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1c1f0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1c1f4:	ec41 0b10 	vmov	d0, r0, r1
   1c1f8:	e7c0      	b.n	1c17c <rint+0x8c>
   1c1fa:	ee10 0a10 	vmov	r0, s0
   1c1fe:	4619      	mov	r1, r3
   1c200:	f000 f89a 	bl	1c338 <__adddf3>
   1c204:	ec41 0b10 	vmov	d0, r0, r1
   1c208:	e7b8      	b.n	1c17c <rint+0x8c>
   1c20a:	bf00      	nop
   1c20c:	000fffff 	.word	0x000fffff
   1c210:	00025810 	.word	0x00025810

0001c214 <fabsf>:
   1c214:	ee10 3a10 	vmov	r3, s0
   1c218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1c21c:	ee00 3a10 	vmov	s0, r3
   1c220:	4770      	bx	lr
   1c222:	bf00      	nop

0001c224 <finitef>:
   1c224:	ee10 3a10 	vmov	r3, s0
   1c228:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1c22c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1c230:	bfac      	ite	ge
   1c232:	2000      	movge	r0, #0
   1c234:	2001      	movlt	r0, #1
   1c236:	4770      	bx	lr

0001c238 <nanf>:
   1c238:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1c240 <nanf+0x8>
   1c23c:	4770      	bx	lr
   1c23e:	bf00      	nop
   1c240:	7fc00000 	.word	0x7fc00000

0001c244 <scalbnf>:
   1c244:	b508      	push	{r3, lr}
   1c246:	ee10 3a10 	vmov	r3, s0
   1c24a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1c24e:	ed2d 8b02 	vpush	{d8}
   1c252:	d011      	beq.n	1c278 <scalbnf+0x34>
   1c254:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1c258:	d211      	bcs.n	1c27e <scalbnf+0x3a>
   1c25a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1c25e:	d313      	bcc.n	1c288 <scalbnf+0x44>
   1c260:	0dd2      	lsrs	r2, r2, #23
   1c262:	4402      	add	r2, r0
   1c264:	2afe      	cmp	r2, #254	; 0xfe
   1c266:	dc2e      	bgt.n	1c2c6 <scalbnf+0x82>
   1c268:	2a00      	cmp	r2, #0
   1c26a:	dd1a      	ble.n	1c2a2 <scalbnf+0x5e>
   1c26c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1c270:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1c274:	ee00 3a10 	vmov	s0, r3
   1c278:	ecbd 8b02 	vpop	{d8}
   1c27c:	bd08      	pop	{r3, pc}
   1c27e:	ecbd 8b02 	vpop	{d8}
   1c282:	ee30 0a00 	vadd.f32	s0, s0, s0
   1c286:	bd08      	pop	{r3, pc}
   1c288:	4b1d      	ldr	r3, [pc, #116]	; (1c300 <scalbnf+0xbc>)
   1c28a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1c304 <scalbnf+0xc0>
   1c28e:	4298      	cmp	r0, r3
   1c290:	ee20 0a27 	vmul.f32	s0, s0, s15
   1c294:	db22      	blt.n	1c2dc <scalbnf+0x98>
   1c296:	ee10 3a10 	vmov	r3, s0
   1c29a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1c29e:	3a19      	subs	r2, #25
   1c2a0:	e7df      	b.n	1c262 <scalbnf+0x1e>
   1c2a2:	f112 0f16 	cmn.w	r2, #22
   1c2a6:	da1e      	bge.n	1c2e6 <scalbnf+0xa2>
   1c2a8:	f24c 3350 	movw	r3, #50000	; 0xc350
   1c2ac:	4298      	cmp	r0, r3
   1c2ae:	dc0a      	bgt.n	1c2c6 <scalbnf+0x82>
   1c2b0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1c308 <scalbnf+0xc4>
   1c2b4:	eef0 0a40 	vmov.f32	s1, s0
   1c2b8:	eeb0 0a48 	vmov.f32	s0, s16
   1c2bc:	f000 f82a 	bl	1c314 <copysignf>
   1c2c0:	ee20 0a08 	vmul.f32	s0, s0, s16
   1c2c4:	e7d8      	b.n	1c278 <scalbnf+0x34>
   1c2c6:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1c30c <scalbnf+0xc8>
   1c2ca:	eef0 0a40 	vmov.f32	s1, s0
   1c2ce:	eeb0 0a48 	vmov.f32	s0, s16
   1c2d2:	f000 f81f 	bl	1c314 <copysignf>
   1c2d6:	ee20 0a08 	vmul.f32	s0, s0, s16
   1c2da:	e7cd      	b.n	1c278 <scalbnf+0x34>
   1c2dc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1c308 <scalbnf+0xc4>
   1c2e0:	ee20 0a20 	vmul.f32	s0, s0, s1
   1c2e4:	e7c8      	b.n	1c278 <scalbnf+0x34>
   1c2e6:	3219      	adds	r2, #25
   1c2e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1c2ec:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1c2f0:	eddf 7a07 	vldr	s15, [pc, #28]	; 1c310 <scalbnf+0xcc>
   1c2f4:	ee00 3a10 	vmov	s0, r3
   1c2f8:	ee20 0a27 	vmul.f32	s0, s0, s15
   1c2fc:	e7bc      	b.n	1c278 <scalbnf+0x34>
   1c2fe:	bf00      	nop
   1c300:	ffff3cb0 	.word	0xffff3cb0
   1c304:	4c000000 	.word	0x4c000000
   1c308:	0da24260 	.word	0x0da24260
   1c30c:	7149f2ca 	.word	0x7149f2ca
   1c310:	33000000 	.word	0x33000000

0001c314 <copysignf>:
   1c314:	ee10 3a10 	vmov	r3, s0
   1c318:	ee10 2a90 	vmov	r2, s1
   1c31c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1c320:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1c324:	4313      	orrs	r3, r2
   1c326:	ee00 3a10 	vmov	s0, r3
   1c32a:	4770      	bx	lr

0001c32c <__aeabi_drsub>:
   1c32c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c330:	e002      	b.n	1c338 <__adddf3>
   1c332:	bf00      	nop

0001c334 <__aeabi_dsub>:
   1c334:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c338 <__adddf3>:
   1c338:	b530      	push	{r4, r5, lr}
   1c33a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c33e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c342:	ea94 0f05 	teq	r4, r5
   1c346:	bf08      	it	eq
   1c348:	ea90 0f02 	teqeq	r0, r2
   1c34c:	bf1f      	itttt	ne
   1c34e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c352:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c356:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c35a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c35e:	f000 80e2 	beq.w	1c526 <__adddf3+0x1ee>
   1c362:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c366:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c36a:	bfb8      	it	lt
   1c36c:	426d      	neglt	r5, r5
   1c36e:	dd0c      	ble.n	1c38a <__adddf3+0x52>
   1c370:	442c      	add	r4, r5
   1c372:	ea80 0202 	eor.w	r2, r0, r2
   1c376:	ea81 0303 	eor.w	r3, r1, r3
   1c37a:	ea82 0000 	eor.w	r0, r2, r0
   1c37e:	ea83 0101 	eor.w	r1, r3, r1
   1c382:	ea80 0202 	eor.w	r2, r0, r2
   1c386:	ea81 0303 	eor.w	r3, r1, r3
   1c38a:	2d36      	cmp	r5, #54	; 0x36
   1c38c:	bf88      	it	hi
   1c38e:	bd30      	pophi	{r4, r5, pc}
   1c390:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c394:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c398:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c39c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c3a0:	d002      	beq.n	1c3a8 <__adddf3+0x70>
   1c3a2:	4240      	negs	r0, r0
   1c3a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c3ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c3b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c3b4:	d002      	beq.n	1c3bc <__adddf3+0x84>
   1c3b6:	4252      	negs	r2, r2
   1c3b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c3bc:	ea94 0f05 	teq	r4, r5
   1c3c0:	f000 80a7 	beq.w	1c512 <__adddf3+0x1da>
   1c3c4:	f1a4 0401 	sub.w	r4, r4, #1
   1c3c8:	f1d5 0e20 	rsbs	lr, r5, #32
   1c3cc:	db0d      	blt.n	1c3ea <__adddf3+0xb2>
   1c3ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c3d2:	fa22 f205 	lsr.w	r2, r2, r5
   1c3d6:	1880      	adds	r0, r0, r2
   1c3d8:	f141 0100 	adc.w	r1, r1, #0
   1c3dc:	fa03 f20e 	lsl.w	r2, r3, lr
   1c3e0:	1880      	adds	r0, r0, r2
   1c3e2:	fa43 f305 	asr.w	r3, r3, r5
   1c3e6:	4159      	adcs	r1, r3
   1c3e8:	e00e      	b.n	1c408 <__adddf3+0xd0>
   1c3ea:	f1a5 0520 	sub.w	r5, r5, #32
   1c3ee:	f10e 0e20 	add.w	lr, lr, #32
   1c3f2:	2a01      	cmp	r2, #1
   1c3f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c3f8:	bf28      	it	cs
   1c3fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c3fe:	fa43 f305 	asr.w	r3, r3, r5
   1c402:	18c0      	adds	r0, r0, r3
   1c404:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c408:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c40c:	d507      	bpl.n	1c41e <__adddf3+0xe6>
   1c40e:	f04f 0e00 	mov.w	lr, #0
   1c412:	f1dc 0c00 	rsbs	ip, ip, #0
   1c416:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c41a:	eb6e 0101 	sbc.w	r1, lr, r1
   1c41e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c422:	d31b      	bcc.n	1c45c <__adddf3+0x124>
   1c424:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c428:	d30c      	bcc.n	1c444 <__adddf3+0x10c>
   1c42a:	0849      	lsrs	r1, r1, #1
   1c42c:	ea5f 0030 	movs.w	r0, r0, rrx
   1c430:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c434:	f104 0401 	add.w	r4, r4, #1
   1c438:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c43c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c440:	f080 809a 	bcs.w	1c578 <__adddf3+0x240>
   1c444:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c448:	bf08      	it	eq
   1c44a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c44e:	f150 0000 	adcs.w	r0, r0, #0
   1c452:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c456:	ea41 0105 	orr.w	r1, r1, r5
   1c45a:	bd30      	pop	{r4, r5, pc}
   1c45c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c460:	4140      	adcs	r0, r0
   1c462:	eb41 0101 	adc.w	r1, r1, r1
   1c466:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c46a:	f1a4 0401 	sub.w	r4, r4, #1
   1c46e:	d1e9      	bne.n	1c444 <__adddf3+0x10c>
   1c470:	f091 0f00 	teq	r1, #0
   1c474:	bf04      	itt	eq
   1c476:	4601      	moveq	r1, r0
   1c478:	2000      	moveq	r0, #0
   1c47a:	fab1 f381 	clz	r3, r1
   1c47e:	bf08      	it	eq
   1c480:	3320      	addeq	r3, #32
   1c482:	f1a3 030b 	sub.w	r3, r3, #11
   1c486:	f1b3 0220 	subs.w	r2, r3, #32
   1c48a:	da0c      	bge.n	1c4a6 <__adddf3+0x16e>
   1c48c:	320c      	adds	r2, #12
   1c48e:	dd08      	ble.n	1c4a2 <__adddf3+0x16a>
   1c490:	f102 0c14 	add.w	ip, r2, #20
   1c494:	f1c2 020c 	rsb	r2, r2, #12
   1c498:	fa01 f00c 	lsl.w	r0, r1, ip
   1c49c:	fa21 f102 	lsr.w	r1, r1, r2
   1c4a0:	e00c      	b.n	1c4bc <__adddf3+0x184>
   1c4a2:	f102 0214 	add.w	r2, r2, #20
   1c4a6:	bfd8      	it	le
   1c4a8:	f1c2 0c20 	rsble	ip, r2, #32
   1c4ac:	fa01 f102 	lsl.w	r1, r1, r2
   1c4b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c4b4:	bfdc      	itt	le
   1c4b6:	ea41 010c 	orrle.w	r1, r1, ip
   1c4ba:	4090      	lslle	r0, r2
   1c4bc:	1ae4      	subs	r4, r4, r3
   1c4be:	bfa2      	ittt	ge
   1c4c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c4c4:	4329      	orrge	r1, r5
   1c4c6:	bd30      	popge	{r4, r5, pc}
   1c4c8:	ea6f 0404 	mvn.w	r4, r4
   1c4cc:	3c1f      	subs	r4, #31
   1c4ce:	da1c      	bge.n	1c50a <__adddf3+0x1d2>
   1c4d0:	340c      	adds	r4, #12
   1c4d2:	dc0e      	bgt.n	1c4f2 <__adddf3+0x1ba>
   1c4d4:	f104 0414 	add.w	r4, r4, #20
   1c4d8:	f1c4 0220 	rsb	r2, r4, #32
   1c4dc:	fa20 f004 	lsr.w	r0, r0, r4
   1c4e0:	fa01 f302 	lsl.w	r3, r1, r2
   1c4e4:	ea40 0003 	orr.w	r0, r0, r3
   1c4e8:	fa21 f304 	lsr.w	r3, r1, r4
   1c4ec:	ea45 0103 	orr.w	r1, r5, r3
   1c4f0:	bd30      	pop	{r4, r5, pc}
   1c4f2:	f1c4 040c 	rsb	r4, r4, #12
   1c4f6:	f1c4 0220 	rsb	r2, r4, #32
   1c4fa:	fa20 f002 	lsr.w	r0, r0, r2
   1c4fe:	fa01 f304 	lsl.w	r3, r1, r4
   1c502:	ea40 0003 	orr.w	r0, r0, r3
   1c506:	4629      	mov	r1, r5
   1c508:	bd30      	pop	{r4, r5, pc}
   1c50a:	fa21 f004 	lsr.w	r0, r1, r4
   1c50e:	4629      	mov	r1, r5
   1c510:	bd30      	pop	{r4, r5, pc}
   1c512:	f094 0f00 	teq	r4, #0
   1c516:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c51a:	bf06      	itte	eq
   1c51c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c520:	3401      	addeq	r4, #1
   1c522:	3d01      	subne	r5, #1
   1c524:	e74e      	b.n	1c3c4 <__adddf3+0x8c>
   1c526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c52a:	bf18      	it	ne
   1c52c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c530:	d029      	beq.n	1c586 <__adddf3+0x24e>
   1c532:	ea94 0f05 	teq	r4, r5
   1c536:	bf08      	it	eq
   1c538:	ea90 0f02 	teqeq	r0, r2
   1c53c:	d005      	beq.n	1c54a <__adddf3+0x212>
   1c53e:	ea54 0c00 	orrs.w	ip, r4, r0
   1c542:	bf04      	itt	eq
   1c544:	4619      	moveq	r1, r3
   1c546:	4610      	moveq	r0, r2
   1c548:	bd30      	pop	{r4, r5, pc}
   1c54a:	ea91 0f03 	teq	r1, r3
   1c54e:	bf1e      	ittt	ne
   1c550:	2100      	movne	r1, #0
   1c552:	2000      	movne	r0, #0
   1c554:	bd30      	popne	{r4, r5, pc}
   1c556:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c55a:	d105      	bne.n	1c568 <__adddf3+0x230>
   1c55c:	0040      	lsls	r0, r0, #1
   1c55e:	4149      	adcs	r1, r1
   1c560:	bf28      	it	cs
   1c562:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c566:	bd30      	pop	{r4, r5, pc}
   1c568:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c56c:	bf3c      	itt	cc
   1c56e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c572:	bd30      	popcc	{r4, r5, pc}
   1c574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c578:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c57c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c580:	f04f 0000 	mov.w	r0, #0
   1c584:	bd30      	pop	{r4, r5, pc}
   1c586:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c58a:	bf1a      	itte	ne
   1c58c:	4619      	movne	r1, r3
   1c58e:	4610      	movne	r0, r2
   1c590:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c594:	bf1c      	itt	ne
   1c596:	460b      	movne	r3, r1
   1c598:	4602      	movne	r2, r0
   1c59a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c59e:	bf06      	itte	eq
   1c5a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c5a4:	ea91 0f03 	teqeq	r1, r3
   1c5a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c5ac:	bd30      	pop	{r4, r5, pc}
   1c5ae:	bf00      	nop

0001c5b0 <__aeabi_ui2d>:
   1c5b0:	f090 0f00 	teq	r0, #0
   1c5b4:	bf04      	itt	eq
   1c5b6:	2100      	moveq	r1, #0
   1c5b8:	4770      	bxeq	lr
   1c5ba:	b530      	push	{r4, r5, lr}
   1c5bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c5c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c5c4:	f04f 0500 	mov.w	r5, #0
   1c5c8:	f04f 0100 	mov.w	r1, #0
   1c5cc:	e750      	b.n	1c470 <__adddf3+0x138>
   1c5ce:	bf00      	nop

0001c5d0 <__aeabi_i2d>:
   1c5d0:	f090 0f00 	teq	r0, #0
   1c5d4:	bf04      	itt	eq
   1c5d6:	2100      	moveq	r1, #0
   1c5d8:	4770      	bxeq	lr
   1c5da:	b530      	push	{r4, r5, lr}
   1c5dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c5e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c5e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c5e8:	bf48      	it	mi
   1c5ea:	4240      	negmi	r0, r0
   1c5ec:	f04f 0100 	mov.w	r1, #0
   1c5f0:	e73e      	b.n	1c470 <__adddf3+0x138>
   1c5f2:	bf00      	nop

0001c5f4 <__aeabi_f2d>:
   1c5f4:	0042      	lsls	r2, r0, #1
   1c5f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c5fa:	ea4f 0131 	mov.w	r1, r1, rrx
   1c5fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c602:	bf1f      	itttt	ne
   1c604:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c608:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c60c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c610:	4770      	bxne	lr
   1c612:	f092 0f00 	teq	r2, #0
   1c616:	bf14      	ite	ne
   1c618:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c61c:	4770      	bxeq	lr
   1c61e:	b530      	push	{r4, r5, lr}
   1c620:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c624:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c62c:	e720      	b.n	1c470 <__adddf3+0x138>
   1c62e:	bf00      	nop

0001c630 <__aeabi_ul2d>:
   1c630:	ea50 0201 	orrs.w	r2, r0, r1
   1c634:	bf08      	it	eq
   1c636:	4770      	bxeq	lr
   1c638:	b530      	push	{r4, r5, lr}
   1c63a:	f04f 0500 	mov.w	r5, #0
   1c63e:	e00a      	b.n	1c656 <__aeabi_l2d+0x16>

0001c640 <__aeabi_l2d>:
   1c640:	ea50 0201 	orrs.w	r2, r0, r1
   1c644:	bf08      	it	eq
   1c646:	4770      	bxeq	lr
   1c648:	b530      	push	{r4, r5, lr}
   1c64a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c64e:	d502      	bpl.n	1c656 <__aeabi_l2d+0x16>
   1c650:	4240      	negs	r0, r0
   1c652:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c656:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c65a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c65e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c662:	f43f aedc 	beq.w	1c41e <__adddf3+0xe6>
   1c666:	f04f 0203 	mov.w	r2, #3
   1c66a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c66e:	bf18      	it	ne
   1c670:	3203      	addne	r2, #3
   1c672:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c676:	bf18      	it	ne
   1c678:	3203      	addne	r2, #3
   1c67a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c67e:	f1c2 0320 	rsb	r3, r2, #32
   1c682:	fa00 fc03 	lsl.w	ip, r0, r3
   1c686:	fa20 f002 	lsr.w	r0, r0, r2
   1c68a:	fa01 fe03 	lsl.w	lr, r1, r3
   1c68e:	ea40 000e 	orr.w	r0, r0, lr
   1c692:	fa21 f102 	lsr.w	r1, r1, r2
   1c696:	4414      	add	r4, r2
   1c698:	e6c1      	b.n	1c41e <__adddf3+0xe6>
   1c69a:	bf00      	nop

0001c69c <__aeabi_dmul>:
   1c69c:	b570      	push	{r4, r5, r6, lr}
   1c69e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c6a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c6a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c6aa:	bf1d      	ittte	ne
   1c6ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c6b0:	ea94 0f0c 	teqne	r4, ip
   1c6b4:	ea95 0f0c 	teqne	r5, ip
   1c6b8:	f000 f8de 	bleq	1c878 <__aeabi_dmul+0x1dc>
   1c6bc:	442c      	add	r4, r5
   1c6be:	ea81 0603 	eor.w	r6, r1, r3
   1c6c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c6c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c6ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c6ce:	bf18      	it	ne
   1c6d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c6d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c6d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c6dc:	d038      	beq.n	1c750 <__aeabi_dmul+0xb4>
   1c6de:	fba0 ce02 	umull	ip, lr, r0, r2
   1c6e2:	f04f 0500 	mov.w	r5, #0
   1c6e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c6ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c6ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c6f2:	f04f 0600 	mov.w	r6, #0
   1c6f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c6fa:	f09c 0f00 	teq	ip, #0
   1c6fe:	bf18      	it	ne
   1c700:	f04e 0e01 	orrne.w	lr, lr, #1
   1c704:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c708:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c70c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c710:	d204      	bcs.n	1c71c <__aeabi_dmul+0x80>
   1c712:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c716:	416d      	adcs	r5, r5
   1c718:	eb46 0606 	adc.w	r6, r6, r6
   1c71c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c720:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c724:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c728:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c72c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c730:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c734:	bf88      	it	hi
   1c736:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c73a:	d81e      	bhi.n	1c77a <__aeabi_dmul+0xde>
   1c73c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c740:	bf08      	it	eq
   1c742:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c746:	f150 0000 	adcs.w	r0, r0, #0
   1c74a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c74e:	bd70      	pop	{r4, r5, r6, pc}
   1c750:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c754:	ea46 0101 	orr.w	r1, r6, r1
   1c758:	ea40 0002 	orr.w	r0, r0, r2
   1c75c:	ea81 0103 	eor.w	r1, r1, r3
   1c760:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c764:	bfc2      	ittt	gt
   1c766:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c76a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c76e:	bd70      	popgt	{r4, r5, r6, pc}
   1c770:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c774:	f04f 0e00 	mov.w	lr, #0
   1c778:	3c01      	subs	r4, #1
   1c77a:	f300 80ab 	bgt.w	1c8d4 <__aeabi_dmul+0x238>
   1c77e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c782:	bfde      	ittt	le
   1c784:	2000      	movle	r0, #0
   1c786:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c78a:	bd70      	pople	{r4, r5, r6, pc}
   1c78c:	f1c4 0400 	rsb	r4, r4, #0
   1c790:	3c20      	subs	r4, #32
   1c792:	da35      	bge.n	1c800 <__aeabi_dmul+0x164>
   1c794:	340c      	adds	r4, #12
   1c796:	dc1b      	bgt.n	1c7d0 <__aeabi_dmul+0x134>
   1c798:	f104 0414 	add.w	r4, r4, #20
   1c79c:	f1c4 0520 	rsb	r5, r4, #32
   1c7a0:	fa00 f305 	lsl.w	r3, r0, r5
   1c7a4:	fa20 f004 	lsr.w	r0, r0, r4
   1c7a8:	fa01 f205 	lsl.w	r2, r1, r5
   1c7ac:	ea40 0002 	orr.w	r0, r0, r2
   1c7b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c7b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c7b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c7bc:	fa21 f604 	lsr.w	r6, r1, r4
   1c7c0:	eb42 0106 	adc.w	r1, r2, r6
   1c7c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c7c8:	bf08      	it	eq
   1c7ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c7ce:	bd70      	pop	{r4, r5, r6, pc}
   1c7d0:	f1c4 040c 	rsb	r4, r4, #12
   1c7d4:	f1c4 0520 	rsb	r5, r4, #32
   1c7d8:	fa00 f304 	lsl.w	r3, r0, r4
   1c7dc:	fa20 f005 	lsr.w	r0, r0, r5
   1c7e0:	fa01 f204 	lsl.w	r2, r1, r4
   1c7e4:	ea40 0002 	orr.w	r0, r0, r2
   1c7e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c7ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c7f0:	f141 0100 	adc.w	r1, r1, #0
   1c7f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c7f8:	bf08      	it	eq
   1c7fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c7fe:	bd70      	pop	{r4, r5, r6, pc}
   1c800:	f1c4 0520 	rsb	r5, r4, #32
   1c804:	fa00 f205 	lsl.w	r2, r0, r5
   1c808:	ea4e 0e02 	orr.w	lr, lr, r2
   1c80c:	fa20 f304 	lsr.w	r3, r0, r4
   1c810:	fa01 f205 	lsl.w	r2, r1, r5
   1c814:	ea43 0302 	orr.w	r3, r3, r2
   1c818:	fa21 f004 	lsr.w	r0, r1, r4
   1c81c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c820:	fa21 f204 	lsr.w	r2, r1, r4
   1c824:	ea20 0002 	bic.w	r0, r0, r2
   1c828:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c82c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c830:	bf08      	it	eq
   1c832:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c836:	bd70      	pop	{r4, r5, r6, pc}
   1c838:	f094 0f00 	teq	r4, #0
   1c83c:	d10f      	bne.n	1c85e <__aeabi_dmul+0x1c2>
   1c83e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c842:	0040      	lsls	r0, r0, #1
   1c844:	eb41 0101 	adc.w	r1, r1, r1
   1c848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c84c:	bf08      	it	eq
   1c84e:	3c01      	subeq	r4, #1
   1c850:	d0f7      	beq.n	1c842 <__aeabi_dmul+0x1a6>
   1c852:	ea41 0106 	orr.w	r1, r1, r6
   1c856:	f095 0f00 	teq	r5, #0
   1c85a:	bf18      	it	ne
   1c85c:	4770      	bxne	lr
   1c85e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c862:	0052      	lsls	r2, r2, #1
   1c864:	eb43 0303 	adc.w	r3, r3, r3
   1c868:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c86c:	bf08      	it	eq
   1c86e:	3d01      	subeq	r5, #1
   1c870:	d0f7      	beq.n	1c862 <__aeabi_dmul+0x1c6>
   1c872:	ea43 0306 	orr.w	r3, r3, r6
   1c876:	4770      	bx	lr
   1c878:	ea94 0f0c 	teq	r4, ip
   1c87c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c880:	bf18      	it	ne
   1c882:	ea95 0f0c 	teqne	r5, ip
   1c886:	d00c      	beq.n	1c8a2 <__aeabi_dmul+0x206>
   1c888:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c88c:	bf18      	it	ne
   1c88e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c892:	d1d1      	bne.n	1c838 <__aeabi_dmul+0x19c>
   1c894:	ea81 0103 	eor.w	r1, r1, r3
   1c898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c89c:	f04f 0000 	mov.w	r0, #0
   1c8a0:	bd70      	pop	{r4, r5, r6, pc}
   1c8a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c8a6:	bf06      	itte	eq
   1c8a8:	4610      	moveq	r0, r2
   1c8aa:	4619      	moveq	r1, r3
   1c8ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c8b0:	d019      	beq.n	1c8e6 <__aeabi_dmul+0x24a>
   1c8b2:	ea94 0f0c 	teq	r4, ip
   1c8b6:	d102      	bne.n	1c8be <__aeabi_dmul+0x222>
   1c8b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c8bc:	d113      	bne.n	1c8e6 <__aeabi_dmul+0x24a>
   1c8be:	ea95 0f0c 	teq	r5, ip
   1c8c2:	d105      	bne.n	1c8d0 <__aeabi_dmul+0x234>
   1c8c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c8c8:	bf1c      	itt	ne
   1c8ca:	4610      	movne	r0, r2
   1c8cc:	4619      	movne	r1, r3
   1c8ce:	d10a      	bne.n	1c8e6 <__aeabi_dmul+0x24a>
   1c8d0:	ea81 0103 	eor.w	r1, r1, r3
   1c8d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c8d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c8dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c8e0:	f04f 0000 	mov.w	r0, #0
   1c8e4:	bd70      	pop	{r4, r5, r6, pc}
   1c8e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c8ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1c8ee:	bd70      	pop	{r4, r5, r6, pc}

0001c8f0 <__aeabi_ddiv>:
   1c8f0:	b570      	push	{r4, r5, r6, lr}
   1c8f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c8f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c8fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c8fe:	bf1d      	ittte	ne
   1c900:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c904:	ea94 0f0c 	teqne	r4, ip
   1c908:	ea95 0f0c 	teqne	r5, ip
   1c90c:	f000 f8a7 	bleq	1ca5e <__aeabi_ddiv+0x16e>
   1c910:	eba4 0405 	sub.w	r4, r4, r5
   1c914:	ea81 0e03 	eor.w	lr, r1, r3
   1c918:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c91c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c920:	f000 8088 	beq.w	1ca34 <__aeabi_ddiv+0x144>
   1c924:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c928:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c92c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1c930:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c934:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1c938:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1c93c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1c940:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1c944:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1c948:	429d      	cmp	r5, r3
   1c94a:	bf08      	it	eq
   1c94c:	4296      	cmpeq	r6, r2
   1c94e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1c952:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1c956:	d202      	bcs.n	1c95e <__aeabi_ddiv+0x6e>
   1c958:	085b      	lsrs	r3, r3, #1
   1c95a:	ea4f 0232 	mov.w	r2, r2, rrx
   1c95e:	1ab6      	subs	r6, r6, r2
   1c960:	eb65 0503 	sbc.w	r5, r5, r3
   1c964:	085b      	lsrs	r3, r3, #1
   1c966:	ea4f 0232 	mov.w	r2, r2, rrx
   1c96a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1c96e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1c972:	ebb6 0e02 	subs.w	lr, r6, r2
   1c976:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c97a:	bf22      	ittt	cs
   1c97c:	1ab6      	subcs	r6, r6, r2
   1c97e:	4675      	movcs	r5, lr
   1c980:	ea40 000c 	orrcs.w	r0, r0, ip
   1c984:	085b      	lsrs	r3, r3, #1
   1c986:	ea4f 0232 	mov.w	r2, r2, rrx
   1c98a:	ebb6 0e02 	subs.w	lr, r6, r2
   1c98e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c992:	bf22      	ittt	cs
   1c994:	1ab6      	subcs	r6, r6, r2
   1c996:	4675      	movcs	r5, lr
   1c998:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1c99c:	085b      	lsrs	r3, r3, #1
   1c99e:	ea4f 0232 	mov.w	r2, r2, rrx
   1c9a2:	ebb6 0e02 	subs.w	lr, r6, r2
   1c9a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c9aa:	bf22      	ittt	cs
   1c9ac:	1ab6      	subcs	r6, r6, r2
   1c9ae:	4675      	movcs	r5, lr
   1c9b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1c9b4:	085b      	lsrs	r3, r3, #1
   1c9b6:	ea4f 0232 	mov.w	r2, r2, rrx
   1c9ba:	ebb6 0e02 	subs.w	lr, r6, r2
   1c9be:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c9c2:	bf22      	ittt	cs
   1c9c4:	1ab6      	subcs	r6, r6, r2
   1c9c6:	4675      	movcs	r5, lr
   1c9c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1c9cc:	ea55 0e06 	orrs.w	lr, r5, r6
   1c9d0:	d018      	beq.n	1ca04 <__aeabi_ddiv+0x114>
   1c9d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1c9d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1c9da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1c9de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1c9e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1c9e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1c9ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1c9ee:	d1c0      	bne.n	1c972 <__aeabi_ddiv+0x82>
   1c9f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c9f4:	d10b      	bne.n	1ca0e <__aeabi_ddiv+0x11e>
   1c9f6:	ea41 0100 	orr.w	r1, r1, r0
   1c9fa:	f04f 0000 	mov.w	r0, #0
   1c9fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1ca02:	e7b6      	b.n	1c972 <__aeabi_ddiv+0x82>
   1ca04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ca08:	bf04      	itt	eq
   1ca0a:	4301      	orreq	r1, r0
   1ca0c:	2000      	moveq	r0, #0
   1ca0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ca12:	bf88      	it	hi
   1ca14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ca18:	f63f aeaf 	bhi.w	1c77a <__aeabi_dmul+0xde>
   1ca1c:	ebb5 0c03 	subs.w	ip, r5, r3
   1ca20:	bf04      	itt	eq
   1ca22:	ebb6 0c02 	subseq.w	ip, r6, r2
   1ca26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ca2a:	f150 0000 	adcs.w	r0, r0, #0
   1ca2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ca32:	bd70      	pop	{r4, r5, r6, pc}
   1ca34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1ca38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1ca3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1ca40:	bfc2      	ittt	gt
   1ca42:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ca46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ca4a:	bd70      	popgt	{r4, r5, r6, pc}
   1ca4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ca50:	f04f 0e00 	mov.w	lr, #0
   1ca54:	3c01      	subs	r4, #1
   1ca56:	e690      	b.n	1c77a <__aeabi_dmul+0xde>
   1ca58:	ea45 0e06 	orr.w	lr, r5, r6
   1ca5c:	e68d      	b.n	1c77a <__aeabi_dmul+0xde>
   1ca5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ca62:	ea94 0f0c 	teq	r4, ip
   1ca66:	bf08      	it	eq
   1ca68:	ea95 0f0c 	teqeq	r5, ip
   1ca6c:	f43f af3b 	beq.w	1c8e6 <__aeabi_dmul+0x24a>
   1ca70:	ea94 0f0c 	teq	r4, ip
   1ca74:	d10a      	bne.n	1ca8c <__aeabi_ddiv+0x19c>
   1ca76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ca7a:	f47f af34 	bne.w	1c8e6 <__aeabi_dmul+0x24a>
   1ca7e:	ea95 0f0c 	teq	r5, ip
   1ca82:	f47f af25 	bne.w	1c8d0 <__aeabi_dmul+0x234>
   1ca86:	4610      	mov	r0, r2
   1ca88:	4619      	mov	r1, r3
   1ca8a:	e72c      	b.n	1c8e6 <__aeabi_dmul+0x24a>
   1ca8c:	ea95 0f0c 	teq	r5, ip
   1ca90:	d106      	bne.n	1caa0 <__aeabi_ddiv+0x1b0>
   1ca92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca96:	f43f aefd 	beq.w	1c894 <__aeabi_dmul+0x1f8>
   1ca9a:	4610      	mov	r0, r2
   1ca9c:	4619      	mov	r1, r3
   1ca9e:	e722      	b.n	1c8e6 <__aeabi_dmul+0x24a>
   1caa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1caa4:	bf18      	it	ne
   1caa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1caaa:	f47f aec5 	bne.w	1c838 <__aeabi_dmul+0x19c>
   1caae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cab2:	f47f af0d 	bne.w	1c8d0 <__aeabi_dmul+0x234>
   1cab6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1caba:	f47f aeeb 	bne.w	1c894 <__aeabi_dmul+0x1f8>
   1cabe:	e712      	b.n	1c8e6 <__aeabi_dmul+0x24a>

0001cac0 <__gedf2>:
   1cac0:	f04f 3cff 	mov.w	ip, #4294967295
   1cac4:	e006      	b.n	1cad4 <__cmpdf2+0x4>
   1cac6:	bf00      	nop

0001cac8 <__ledf2>:
   1cac8:	f04f 0c01 	mov.w	ip, #1
   1cacc:	e002      	b.n	1cad4 <__cmpdf2+0x4>
   1cace:	bf00      	nop

0001cad0 <__cmpdf2>:
   1cad0:	f04f 0c01 	mov.w	ip, #1
   1cad4:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cadc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cae4:	bf18      	it	ne
   1cae6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1caea:	d01b      	beq.n	1cb24 <__cmpdf2+0x54>
   1caec:	b001      	add	sp, #4
   1caee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1caf2:	bf0c      	ite	eq
   1caf4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1caf8:	ea91 0f03 	teqne	r1, r3
   1cafc:	bf02      	ittt	eq
   1cafe:	ea90 0f02 	teqeq	r0, r2
   1cb02:	2000      	moveq	r0, #0
   1cb04:	4770      	bxeq	lr
   1cb06:	f110 0f00 	cmn.w	r0, #0
   1cb0a:	ea91 0f03 	teq	r1, r3
   1cb0e:	bf58      	it	pl
   1cb10:	4299      	cmppl	r1, r3
   1cb12:	bf08      	it	eq
   1cb14:	4290      	cmpeq	r0, r2
   1cb16:	bf2c      	ite	cs
   1cb18:	17d8      	asrcs	r0, r3, #31
   1cb1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cb1e:	f040 0001 	orr.w	r0, r0, #1
   1cb22:	4770      	bx	lr
   1cb24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cb28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cb2c:	d102      	bne.n	1cb34 <__cmpdf2+0x64>
   1cb2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cb32:	d107      	bne.n	1cb44 <__cmpdf2+0x74>
   1cb34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cb38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cb3c:	d1d6      	bne.n	1caec <__cmpdf2+0x1c>
   1cb3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cb42:	d0d3      	beq.n	1caec <__cmpdf2+0x1c>
   1cb44:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cb48:	4770      	bx	lr
   1cb4a:	bf00      	nop

0001cb4c <__aeabi_cdrcmple>:
   1cb4c:	4684      	mov	ip, r0
   1cb4e:	4610      	mov	r0, r2
   1cb50:	4662      	mov	r2, ip
   1cb52:	468c      	mov	ip, r1
   1cb54:	4619      	mov	r1, r3
   1cb56:	4663      	mov	r3, ip
   1cb58:	e000      	b.n	1cb5c <__aeabi_cdcmpeq>
   1cb5a:	bf00      	nop

0001cb5c <__aeabi_cdcmpeq>:
   1cb5c:	b501      	push	{r0, lr}
   1cb5e:	f7ff ffb7 	bl	1cad0 <__cmpdf2>
   1cb62:	2800      	cmp	r0, #0
   1cb64:	bf48      	it	mi
   1cb66:	f110 0f00 	cmnmi.w	r0, #0
   1cb6a:	bd01      	pop	{r0, pc}

0001cb6c <__aeabi_dcmpeq>:
   1cb6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cb70:	f7ff fff4 	bl	1cb5c <__aeabi_cdcmpeq>
   1cb74:	bf0c      	ite	eq
   1cb76:	2001      	moveq	r0, #1
   1cb78:	2000      	movne	r0, #0
   1cb7a:	f85d fb08 	ldr.w	pc, [sp], #8
   1cb7e:	bf00      	nop

0001cb80 <__aeabi_dcmplt>:
   1cb80:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cb84:	f7ff ffea 	bl	1cb5c <__aeabi_cdcmpeq>
   1cb88:	bf34      	ite	cc
   1cb8a:	2001      	movcc	r0, #1
   1cb8c:	2000      	movcs	r0, #0
   1cb8e:	f85d fb08 	ldr.w	pc, [sp], #8
   1cb92:	bf00      	nop

0001cb94 <__aeabi_dcmple>:
   1cb94:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cb98:	f7ff ffe0 	bl	1cb5c <__aeabi_cdcmpeq>
   1cb9c:	bf94      	ite	ls
   1cb9e:	2001      	movls	r0, #1
   1cba0:	2000      	movhi	r0, #0
   1cba2:	f85d fb08 	ldr.w	pc, [sp], #8
   1cba6:	bf00      	nop

0001cba8 <__aeabi_dcmpge>:
   1cba8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cbac:	f7ff ffce 	bl	1cb4c <__aeabi_cdrcmple>
   1cbb0:	bf94      	ite	ls
   1cbb2:	2001      	movls	r0, #1
   1cbb4:	2000      	movhi	r0, #0
   1cbb6:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbba:	bf00      	nop

0001cbbc <__aeabi_dcmpgt>:
   1cbbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cbc0:	f7ff ffc4 	bl	1cb4c <__aeabi_cdrcmple>
   1cbc4:	bf34      	ite	cc
   1cbc6:	2001      	movcc	r0, #1
   1cbc8:	2000      	movcs	r0, #0
   1cbca:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbce:	bf00      	nop

0001cbd0 <__aeabi_d2iz>:
   1cbd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cbd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cbd8:	d215      	bcs.n	1cc06 <__aeabi_d2iz+0x36>
   1cbda:	d511      	bpl.n	1cc00 <__aeabi_d2iz+0x30>
   1cbdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cbe0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cbe4:	d912      	bls.n	1cc0c <__aeabi_d2iz+0x3c>
   1cbe6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cbea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cbee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cbf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cbf6:	fa23 f002 	lsr.w	r0, r3, r2
   1cbfa:	bf18      	it	ne
   1cbfc:	4240      	negne	r0, r0
   1cbfe:	4770      	bx	lr
   1cc00:	f04f 0000 	mov.w	r0, #0
   1cc04:	4770      	bx	lr
   1cc06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cc0a:	d105      	bne.n	1cc18 <__aeabi_d2iz+0x48>
   1cc0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cc10:	bf08      	it	eq
   1cc12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cc16:	4770      	bx	lr
   1cc18:	f04f 0000 	mov.w	r0, #0
   1cc1c:	4770      	bx	lr
   1cc1e:	bf00      	nop

0001cc20 <__aeabi_d2uiz>:
   1cc20:	004a      	lsls	r2, r1, #1
   1cc22:	d211      	bcs.n	1cc48 <__aeabi_d2uiz+0x28>
   1cc24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cc28:	d211      	bcs.n	1cc4e <__aeabi_d2uiz+0x2e>
   1cc2a:	d50d      	bpl.n	1cc48 <__aeabi_d2uiz+0x28>
   1cc2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cc30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cc34:	d40e      	bmi.n	1cc54 <__aeabi_d2uiz+0x34>
   1cc36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cc3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cc3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cc42:	fa23 f002 	lsr.w	r0, r3, r2
   1cc46:	4770      	bx	lr
   1cc48:	f04f 0000 	mov.w	r0, #0
   1cc4c:	4770      	bx	lr
   1cc4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cc52:	d102      	bne.n	1cc5a <__aeabi_d2uiz+0x3a>
   1cc54:	f04f 30ff 	mov.w	r0, #4294967295
   1cc58:	4770      	bx	lr
   1cc5a:	f04f 0000 	mov.w	r0, #0
   1cc5e:	4770      	bx	lr

0001cc60 <__aeabi_d2f>:
   1cc60:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cc64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cc68:	bf24      	itt	cs
   1cc6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cc6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cc72:	d90d      	bls.n	1cc90 <__aeabi_d2f+0x30>
   1cc74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cc78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cc7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cc80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cc84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cc88:	bf08      	it	eq
   1cc8a:	f020 0001 	biceq.w	r0, r0, #1
   1cc8e:	4770      	bx	lr
   1cc90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cc94:	d121      	bne.n	1ccda <__aeabi_d2f+0x7a>
   1cc96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cc9a:	bfbc      	itt	lt
   1cc9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cca0:	4770      	bxlt	lr
   1cca2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cca6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1ccaa:	f1c2 0218 	rsb	r2, r2, #24
   1ccae:	f1c2 0c20 	rsb	ip, r2, #32
   1ccb2:	fa10 f30c 	lsls.w	r3, r0, ip
   1ccb6:	fa20 f002 	lsr.w	r0, r0, r2
   1ccba:	bf18      	it	ne
   1ccbc:	f040 0001 	orrne.w	r0, r0, #1
   1ccc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ccc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1ccc8:	fa03 fc0c 	lsl.w	ip, r3, ip
   1cccc:	ea40 000c 	orr.w	r0, r0, ip
   1ccd0:	fa23 f302 	lsr.w	r3, r3, r2
   1ccd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ccd8:	e7cc      	b.n	1cc74 <__aeabi_d2f+0x14>
   1ccda:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1ccde:	d107      	bne.n	1ccf0 <__aeabi_d2f+0x90>
   1cce0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1cce4:	bf1e      	ittt	ne
   1cce6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ccea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ccee:	4770      	bxne	lr
   1ccf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ccf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ccf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ccfc:	4770      	bx	lr
   1ccfe:	bf00      	nop

0001cd00 <__aeabi_frsub>:
   1cd00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1cd04:	e002      	b.n	1cd0c <__addsf3>
   1cd06:	bf00      	nop

0001cd08 <__aeabi_fsub>:
   1cd08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001cd0c <__addsf3>:
   1cd0c:	0042      	lsls	r2, r0, #1
   1cd0e:	bf1f      	itttt	ne
   1cd10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1cd14:	ea92 0f03 	teqne	r2, r3
   1cd18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1cd1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1cd20:	d06a      	beq.n	1cdf8 <__addsf3+0xec>
   1cd22:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1cd26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1cd2a:	bfc1      	itttt	gt
   1cd2c:	18d2      	addgt	r2, r2, r3
   1cd2e:	4041      	eorgt	r1, r0
   1cd30:	4048      	eorgt	r0, r1
   1cd32:	4041      	eorgt	r1, r0
   1cd34:	bfb8      	it	lt
   1cd36:	425b      	neglt	r3, r3
   1cd38:	2b19      	cmp	r3, #25
   1cd3a:	bf88      	it	hi
   1cd3c:	4770      	bxhi	lr
   1cd3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1cd42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1cd46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1cd4a:	bf18      	it	ne
   1cd4c:	4240      	negne	r0, r0
   1cd4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1cd56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1cd5a:	bf18      	it	ne
   1cd5c:	4249      	negne	r1, r1
   1cd5e:	ea92 0f03 	teq	r2, r3
   1cd62:	d03f      	beq.n	1cde4 <__addsf3+0xd8>
   1cd64:	f1a2 0201 	sub.w	r2, r2, #1
   1cd68:	fa41 fc03 	asr.w	ip, r1, r3
   1cd6c:	eb10 000c 	adds.w	r0, r0, ip
   1cd70:	f1c3 0320 	rsb	r3, r3, #32
   1cd74:	fa01 f103 	lsl.w	r1, r1, r3
   1cd78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1cd7c:	d502      	bpl.n	1cd84 <__addsf3+0x78>
   1cd7e:	4249      	negs	r1, r1
   1cd80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1cd84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cd88:	d313      	bcc.n	1cdb2 <__addsf3+0xa6>
   1cd8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1cd8e:	d306      	bcc.n	1cd9e <__addsf3+0x92>
   1cd90:	0840      	lsrs	r0, r0, #1
   1cd92:	ea4f 0131 	mov.w	r1, r1, rrx
   1cd96:	f102 0201 	add.w	r2, r2, #1
   1cd9a:	2afe      	cmp	r2, #254	; 0xfe
   1cd9c:	d251      	bcs.n	1ce42 <__addsf3+0x136>
   1cd9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1cda2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1cda6:	bf08      	it	eq
   1cda8:	f020 0001 	biceq.w	r0, r0, #1
   1cdac:	ea40 0003 	orr.w	r0, r0, r3
   1cdb0:	4770      	bx	lr
   1cdb2:	0049      	lsls	r1, r1, #1
   1cdb4:	eb40 0000 	adc.w	r0, r0, r0
   1cdb8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1cdbc:	f1a2 0201 	sub.w	r2, r2, #1
   1cdc0:	d1ed      	bne.n	1cd9e <__addsf3+0x92>
   1cdc2:	fab0 fc80 	clz	ip, r0
   1cdc6:	f1ac 0c08 	sub.w	ip, ip, #8
   1cdca:	ebb2 020c 	subs.w	r2, r2, ip
   1cdce:	fa00 f00c 	lsl.w	r0, r0, ip
   1cdd2:	bfaa      	itet	ge
   1cdd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1cdd8:	4252      	neglt	r2, r2
   1cdda:	4318      	orrge	r0, r3
   1cddc:	bfbc      	itt	lt
   1cdde:	40d0      	lsrlt	r0, r2
   1cde0:	4318      	orrlt	r0, r3
   1cde2:	4770      	bx	lr
   1cde4:	f092 0f00 	teq	r2, #0
   1cde8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1cdec:	bf06      	itte	eq
   1cdee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1cdf2:	3201      	addeq	r2, #1
   1cdf4:	3b01      	subne	r3, #1
   1cdf6:	e7b5      	b.n	1cd64 <__addsf3+0x58>
   1cdf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1cdfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1ce00:	bf18      	it	ne
   1ce02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1ce06:	d021      	beq.n	1ce4c <__addsf3+0x140>
   1ce08:	ea92 0f03 	teq	r2, r3
   1ce0c:	d004      	beq.n	1ce18 <__addsf3+0x10c>
   1ce0e:	f092 0f00 	teq	r2, #0
   1ce12:	bf08      	it	eq
   1ce14:	4608      	moveq	r0, r1
   1ce16:	4770      	bx	lr
   1ce18:	ea90 0f01 	teq	r0, r1
   1ce1c:	bf1c      	itt	ne
   1ce1e:	2000      	movne	r0, #0
   1ce20:	4770      	bxne	lr
   1ce22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1ce26:	d104      	bne.n	1ce32 <__addsf3+0x126>
   1ce28:	0040      	lsls	r0, r0, #1
   1ce2a:	bf28      	it	cs
   1ce2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1ce30:	4770      	bx	lr
   1ce32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1ce36:	bf3c      	itt	cc
   1ce38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1ce3c:	4770      	bxcc	lr
   1ce3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1ce42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1ce46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce4a:	4770      	bx	lr
   1ce4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1ce50:	bf16      	itet	ne
   1ce52:	4608      	movne	r0, r1
   1ce54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1ce58:	4601      	movne	r1, r0
   1ce5a:	0242      	lsls	r2, r0, #9
   1ce5c:	bf06      	itte	eq
   1ce5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1ce62:	ea90 0f01 	teqeq	r0, r1
   1ce66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1ce6a:	4770      	bx	lr

0001ce6c <__aeabi_ui2f>:
   1ce6c:	f04f 0300 	mov.w	r3, #0
   1ce70:	e004      	b.n	1ce7c <__aeabi_i2f+0x8>
   1ce72:	bf00      	nop

0001ce74 <__aeabi_i2f>:
   1ce74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1ce78:	bf48      	it	mi
   1ce7a:	4240      	negmi	r0, r0
   1ce7c:	ea5f 0c00 	movs.w	ip, r0
   1ce80:	bf08      	it	eq
   1ce82:	4770      	bxeq	lr
   1ce84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1ce88:	4601      	mov	r1, r0
   1ce8a:	f04f 0000 	mov.w	r0, #0
   1ce8e:	e01c      	b.n	1ceca <__aeabi_l2f+0x2a>

0001ce90 <__aeabi_ul2f>:
   1ce90:	ea50 0201 	orrs.w	r2, r0, r1
   1ce94:	bf08      	it	eq
   1ce96:	4770      	bxeq	lr
   1ce98:	f04f 0300 	mov.w	r3, #0
   1ce9c:	e00a      	b.n	1ceb4 <__aeabi_l2f+0x14>
   1ce9e:	bf00      	nop

0001cea0 <__aeabi_l2f>:
   1cea0:	ea50 0201 	orrs.w	r2, r0, r1
   1cea4:	bf08      	it	eq
   1cea6:	4770      	bxeq	lr
   1cea8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1ceac:	d502      	bpl.n	1ceb4 <__aeabi_l2f+0x14>
   1ceae:	4240      	negs	r0, r0
   1ceb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ceb4:	ea5f 0c01 	movs.w	ip, r1
   1ceb8:	bf02      	ittt	eq
   1ceba:	4684      	moveq	ip, r0
   1cebc:	4601      	moveq	r1, r0
   1cebe:	2000      	moveq	r0, #0
   1cec0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1cec4:	bf08      	it	eq
   1cec6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1ceca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1cece:	fabc f28c 	clz	r2, ip
   1ced2:	3a08      	subs	r2, #8
   1ced4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1ced8:	db10      	blt.n	1cefc <__aeabi_l2f+0x5c>
   1ceda:	fa01 fc02 	lsl.w	ip, r1, r2
   1cede:	4463      	add	r3, ip
   1cee0:	fa00 fc02 	lsl.w	ip, r0, r2
   1cee4:	f1c2 0220 	rsb	r2, r2, #32
   1cee8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1ceec:	fa20 f202 	lsr.w	r2, r0, r2
   1cef0:	eb43 0002 	adc.w	r0, r3, r2
   1cef4:	bf08      	it	eq
   1cef6:	f020 0001 	biceq.w	r0, r0, #1
   1cefa:	4770      	bx	lr
   1cefc:	f102 0220 	add.w	r2, r2, #32
   1cf00:	fa01 fc02 	lsl.w	ip, r1, r2
   1cf04:	f1c2 0220 	rsb	r2, r2, #32
   1cf08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1cf0c:	fa21 f202 	lsr.w	r2, r1, r2
   1cf10:	eb43 0002 	adc.w	r0, r3, r2
   1cf14:	bf08      	it	eq
   1cf16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1cf1a:	4770      	bx	lr

0001cf1c <__aeabi_ldivmod>:
   1cf1c:	b97b      	cbnz	r3, 1cf3e <__aeabi_ldivmod+0x22>
   1cf1e:	b972      	cbnz	r2, 1cf3e <__aeabi_ldivmod+0x22>
   1cf20:	2900      	cmp	r1, #0
   1cf22:	bfbe      	ittt	lt
   1cf24:	2000      	movlt	r0, #0
   1cf26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1cf2a:	e006      	blt.n	1cf3a <__aeabi_ldivmod+0x1e>
   1cf2c:	bf08      	it	eq
   1cf2e:	2800      	cmpeq	r0, #0
   1cf30:	bf1c      	itt	ne
   1cf32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1cf36:	f04f 30ff 	movne.w	r0, #4294967295
   1cf3a:	f001 b979 	b.w	1e230 <__aeabi_idiv0>
   1cf3e:	f1ad 0c08 	sub.w	ip, sp, #8
   1cf42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cf46:	2900      	cmp	r1, #0
   1cf48:	db09      	blt.n	1cf5e <__aeabi_ldivmod+0x42>
   1cf4a:	2b00      	cmp	r3, #0
   1cf4c:	db1a      	blt.n	1cf84 <__aeabi_ldivmod+0x68>
   1cf4e:	f000 f885 	bl	1d05c <__udivmoddi4>
   1cf52:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cf56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf5a:	b004      	add	sp, #16
   1cf5c:	4770      	bx	lr
   1cf5e:	4240      	negs	r0, r0
   1cf60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf64:	2b00      	cmp	r3, #0
   1cf66:	db1b      	blt.n	1cfa0 <__aeabi_ldivmod+0x84>
   1cf68:	f000 f878 	bl	1d05c <__udivmoddi4>
   1cf6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cf70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf74:	b004      	add	sp, #16
   1cf76:	4240      	negs	r0, r0
   1cf78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf7c:	4252      	negs	r2, r2
   1cf7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cf82:	4770      	bx	lr
   1cf84:	4252      	negs	r2, r2
   1cf86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cf8a:	f000 f867 	bl	1d05c <__udivmoddi4>
   1cf8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cf92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf96:	b004      	add	sp, #16
   1cf98:	4240      	negs	r0, r0
   1cf9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf9e:	4770      	bx	lr
   1cfa0:	4252      	negs	r2, r2
   1cfa2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cfa6:	f000 f859 	bl	1d05c <__udivmoddi4>
   1cfaa:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cfae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cfb2:	b004      	add	sp, #16
   1cfb4:	4252      	negs	r2, r2
   1cfb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cfba:	4770      	bx	lr

0001cfbc <__aeabi_uldivmod>:
   1cfbc:	b953      	cbnz	r3, 1cfd4 <__aeabi_uldivmod+0x18>
   1cfbe:	b94a      	cbnz	r2, 1cfd4 <__aeabi_uldivmod+0x18>
   1cfc0:	2900      	cmp	r1, #0
   1cfc2:	bf08      	it	eq
   1cfc4:	2800      	cmpeq	r0, #0
   1cfc6:	bf1c      	itt	ne
   1cfc8:	f04f 31ff 	movne.w	r1, #4294967295
   1cfcc:	f04f 30ff 	movne.w	r0, #4294967295
   1cfd0:	f001 b92e 	b.w	1e230 <__aeabi_idiv0>
   1cfd4:	f1ad 0c08 	sub.w	ip, sp, #8
   1cfd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cfdc:	f000 f83e 	bl	1d05c <__udivmoddi4>
   1cfe0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cfe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cfe8:	b004      	add	sp, #16
   1cfea:	4770      	bx	lr

0001cfec <__aeabi_f2lz>:
   1cfec:	ee07 0a90 	vmov	s15, r0
   1cff0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1cff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cff8:	d401      	bmi.n	1cffe <__aeabi_f2lz+0x12>
   1cffa:	f000 b809 	b.w	1d010 <__aeabi_f2ulz>
   1cffe:	b508      	push	{r3, lr}
   1d000:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1d004:	f000 f804 	bl	1d010 <__aeabi_f2ulz>
   1d008:	4240      	negs	r0, r0
   1d00a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d00e:	bd08      	pop	{r3, pc}

0001d010 <__aeabi_f2ulz>:
   1d010:	b5d0      	push	{r4, r6, r7, lr}
   1d012:	f7ff faef 	bl	1c5f4 <__aeabi_f2d>
   1d016:	2200      	movs	r2, #0
   1d018:	4b0e      	ldr	r3, [pc, #56]	; (1d054 <__aeabi_f2ulz+0x44>)
   1d01a:	4606      	mov	r6, r0
   1d01c:	460f      	mov	r7, r1
   1d01e:	f7ff fb3d 	bl	1c69c <__aeabi_dmul>
   1d022:	f7ff fdfd 	bl	1cc20 <__aeabi_d2uiz>
   1d026:	4604      	mov	r4, r0
   1d028:	f7ff fac2 	bl	1c5b0 <__aeabi_ui2d>
   1d02c:	2200      	movs	r2, #0
   1d02e:	4b0a      	ldr	r3, [pc, #40]	; (1d058 <__aeabi_f2ulz+0x48>)
   1d030:	f7ff fb34 	bl	1c69c <__aeabi_dmul>
   1d034:	4602      	mov	r2, r0
   1d036:	460b      	mov	r3, r1
   1d038:	4630      	mov	r0, r6
   1d03a:	4639      	mov	r1, r7
   1d03c:	f7ff f97a 	bl	1c334 <__aeabi_dsub>
   1d040:	f7ff fdee 	bl	1cc20 <__aeabi_d2uiz>
   1d044:	4623      	mov	r3, r4
   1d046:	2200      	movs	r2, #0
   1d048:	ea42 0200 	orr.w	r2, r2, r0
   1d04c:	4610      	mov	r0, r2
   1d04e:	4619      	mov	r1, r3
   1d050:	bdd0      	pop	{r4, r6, r7, pc}
   1d052:	bf00      	nop
   1d054:	3df00000 	.word	0x3df00000
   1d058:	41f00000 	.word	0x41f00000

0001d05c <__udivmoddi4>:
   1d05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d060:	468c      	mov	ip, r1
   1d062:	460d      	mov	r5, r1
   1d064:	4604      	mov	r4, r0
   1d066:	9e08      	ldr	r6, [sp, #32]
   1d068:	2b00      	cmp	r3, #0
   1d06a:	d151      	bne.n	1d110 <__udivmoddi4+0xb4>
   1d06c:	428a      	cmp	r2, r1
   1d06e:	4617      	mov	r7, r2
   1d070:	d96d      	bls.n	1d14e <__udivmoddi4+0xf2>
   1d072:	fab2 fe82 	clz	lr, r2
   1d076:	f1be 0f00 	cmp.w	lr, #0
   1d07a:	d00b      	beq.n	1d094 <__udivmoddi4+0x38>
   1d07c:	f1ce 0c20 	rsb	ip, lr, #32
   1d080:	fa01 f50e 	lsl.w	r5, r1, lr
   1d084:	fa20 fc0c 	lsr.w	ip, r0, ip
   1d088:	fa02 f70e 	lsl.w	r7, r2, lr
   1d08c:	ea4c 0c05 	orr.w	ip, ip, r5
   1d090:	fa00 f40e 	lsl.w	r4, r0, lr
   1d094:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1d098:	0c25      	lsrs	r5, r4, #16
   1d09a:	fbbc f8fa 	udiv	r8, ip, sl
   1d09e:	fa1f f987 	uxth.w	r9, r7
   1d0a2:	fb0a cc18 	mls	ip, sl, r8, ip
   1d0a6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1d0aa:	fb08 f309 	mul.w	r3, r8, r9
   1d0ae:	42ab      	cmp	r3, r5
   1d0b0:	d90a      	bls.n	1d0c8 <__udivmoddi4+0x6c>
   1d0b2:	19ed      	adds	r5, r5, r7
   1d0b4:	f108 32ff 	add.w	r2, r8, #4294967295
   1d0b8:	f080 8123 	bcs.w	1d302 <__udivmoddi4+0x2a6>
   1d0bc:	42ab      	cmp	r3, r5
   1d0be:	f240 8120 	bls.w	1d302 <__udivmoddi4+0x2a6>
   1d0c2:	f1a8 0802 	sub.w	r8, r8, #2
   1d0c6:	443d      	add	r5, r7
   1d0c8:	1aed      	subs	r5, r5, r3
   1d0ca:	b2a4      	uxth	r4, r4
   1d0cc:	fbb5 f0fa 	udiv	r0, r5, sl
   1d0d0:	fb0a 5510 	mls	r5, sl, r0, r5
   1d0d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1d0d8:	fb00 f909 	mul.w	r9, r0, r9
   1d0dc:	45a1      	cmp	r9, r4
   1d0de:	d909      	bls.n	1d0f4 <__udivmoddi4+0x98>
   1d0e0:	19e4      	adds	r4, r4, r7
   1d0e2:	f100 33ff 	add.w	r3, r0, #4294967295
   1d0e6:	f080 810a 	bcs.w	1d2fe <__udivmoddi4+0x2a2>
   1d0ea:	45a1      	cmp	r9, r4
   1d0ec:	f240 8107 	bls.w	1d2fe <__udivmoddi4+0x2a2>
   1d0f0:	3802      	subs	r0, #2
   1d0f2:	443c      	add	r4, r7
   1d0f4:	eba4 0409 	sub.w	r4, r4, r9
   1d0f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1d0fc:	2100      	movs	r1, #0
   1d0fe:	2e00      	cmp	r6, #0
   1d100:	d061      	beq.n	1d1c6 <__udivmoddi4+0x16a>
   1d102:	fa24 f40e 	lsr.w	r4, r4, lr
   1d106:	2300      	movs	r3, #0
   1d108:	6034      	str	r4, [r6, #0]
   1d10a:	6073      	str	r3, [r6, #4]
   1d10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d110:	428b      	cmp	r3, r1
   1d112:	d907      	bls.n	1d124 <__udivmoddi4+0xc8>
   1d114:	2e00      	cmp	r6, #0
   1d116:	d054      	beq.n	1d1c2 <__udivmoddi4+0x166>
   1d118:	2100      	movs	r1, #0
   1d11a:	e886 0021 	stmia.w	r6, {r0, r5}
   1d11e:	4608      	mov	r0, r1
   1d120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d124:	fab3 f183 	clz	r1, r3
   1d128:	2900      	cmp	r1, #0
   1d12a:	f040 808e 	bne.w	1d24a <__udivmoddi4+0x1ee>
   1d12e:	42ab      	cmp	r3, r5
   1d130:	d302      	bcc.n	1d138 <__udivmoddi4+0xdc>
   1d132:	4282      	cmp	r2, r0
   1d134:	f200 80fa 	bhi.w	1d32c <__udivmoddi4+0x2d0>
   1d138:	1a84      	subs	r4, r0, r2
   1d13a:	eb65 0503 	sbc.w	r5, r5, r3
   1d13e:	2001      	movs	r0, #1
   1d140:	46ac      	mov	ip, r5
   1d142:	2e00      	cmp	r6, #0
   1d144:	d03f      	beq.n	1d1c6 <__udivmoddi4+0x16a>
   1d146:	e886 1010 	stmia.w	r6, {r4, ip}
   1d14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d14e:	b912      	cbnz	r2, 1d156 <__udivmoddi4+0xfa>
   1d150:	2701      	movs	r7, #1
   1d152:	fbb7 f7f2 	udiv	r7, r7, r2
   1d156:	fab7 fe87 	clz	lr, r7
   1d15a:	f1be 0f00 	cmp.w	lr, #0
   1d15e:	d134      	bne.n	1d1ca <__udivmoddi4+0x16e>
   1d160:	1beb      	subs	r3, r5, r7
   1d162:	0c3a      	lsrs	r2, r7, #16
   1d164:	fa1f fc87 	uxth.w	ip, r7
   1d168:	2101      	movs	r1, #1
   1d16a:	fbb3 f8f2 	udiv	r8, r3, r2
   1d16e:	0c25      	lsrs	r5, r4, #16
   1d170:	fb02 3318 	mls	r3, r2, r8, r3
   1d174:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1d178:	fb0c f308 	mul.w	r3, ip, r8
   1d17c:	42ab      	cmp	r3, r5
   1d17e:	d907      	bls.n	1d190 <__udivmoddi4+0x134>
   1d180:	19ed      	adds	r5, r5, r7
   1d182:	f108 30ff 	add.w	r0, r8, #4294967295
   1d186:	d202      	bcs.n	1d18e <__udivmoddi4+0x132>
   1d188:	42ab      	cmp	r3, r5
   1d18a:	f200 80d1 	bhi.w	1d330 <__udivmoddi4+0x2d4>
   1d18e:	4680      	mov	r8, r0
   1d190:	1aed      	subs	r5, r5, r3
   1d192:	b2a3      	uxth	r3, r4
   1d194:	fbb5 f0f2 	udiv	r0, r5, r2
   1d198:	fb02 5510 	mls	r5, r2, r0, r5
   1d19c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1d1a0:	fb0c fc00 	mul.w	ip, ip, r0
   1d1a4:	45a4      	cmp	ip, r4
   1d1a6:	d907      	bls.n	1d1b8 <__udivmoddi4+0x15c>
   1d1a8:	19e4      	adds	r4, r4, r7
   1d1aa:	f100 33ff 	add.w	r3, r0, #4294967295
   1d1ae:	d202      	bcs.n	1d1b6 <__udivmoddi4+0x15a>
   1d1b0:	45a4      	cmp	ip, r4
   1d1b2:	f200 80b8 	bhi.w	1d326 <__udivmoddi4+0x2ca>
   1d1b6:	4618      	mov	r0, r3
   1d1b8:	eba4 040c 	sub.w	r4, r4, ip
   1d1bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1d1c0:	e79d      	b.n	1d0fe <__udivmoddi4+0xa2>
   1d1c2:	4631      	mov	r1, r6
   1d1c4:	4630      	mov	r0, r6
   1d1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d1ca:	f1ce 0420 	rsb	r4, lr, #32
   1d1ce:	fa05 f30e 	lsl.w	r3, r5, lr
   1d1d2:	fa07 f70e 	lsl.w	r7, r7, lr
   1d1d6:	fa20 f804 	lsr.w	r8, r0, r4
   1d1da:	0c3a      	lsrs	r2, r7, #16
   1d1dc:	fa25 f404 	lsr.w	r4, r5, r4
   1d1e0:	ea48 0803 	orr.w	r8, r8, r3
   1d1e4:	fbb4 f1f2 	udiv	r1, r4, r2
   1d1e8:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1d1ec:	fb02 4411 	mls	r4, r2, r1, r4
   1d1f0:	fa1f fc87 	uxth.w	ip, r7
   1d1f4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1d1f8:	fb01 f30c 	mul.w	r3, r1, ip
   1d1fc:	42ab      	cmp	r3, r5
   1d1fe:	fa00 f40e 	lsl.w	r4, r0, lr
   1d202:	d909      	bls.n	1d218 <__udivmoddi4+0x1bc>
   1d204:	19ed      	adds	r5, r5, r7
   1d206:	f101 30ff 	add.w	r0, r1, #4294967295
   1d20a:	f080 808a 	bcs.w	1d322 <__udivmoddi4+0x2c6>
   1d20e:	42ab      	cmp	r3, r5
   1d210:	f240 8087 	bls.w	1d322 <__udivmoddi4+0x2c6>
   1d214:	3902      	subs	r1, #2
   1d216:	443d      	add	r5, r7
   1d218:	1aeb      	subs	r3, r5, r3
   1d21a:	fa1f f588 	uxth.w	r5, r8
   1d21e:	fbb3 f0f2 	udiv	r0, r3, r2
   1d222:	fb02 3310 	mls	r3, r2, r0, r3
   1d226:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1d22a:	fb00 f30c 	mul.w	r3, r0, ip
   1d22e:	42ab      	cmp	r3, r5
   1d230:	d907      	bls.n	1d242 <__udivmoddi4+0x1e6>
   1d232:	19ed      	adds	r5, r5, r7
   1d234:	f100 38ff 	add.w	r8, r0, #4294967295
   1d238:	d26f      	bcs.n	1d31a <__udivmoddi4+0x2be>
   1d23a:	42ab      	cmp	r3, r5
   1d23c:	d96d      	bls.n	1d31a <__udivmoddi4+0x2be>
   1d23e:	3802      	subs	r0, #2
   1d240:	443d      	add	r5, r7
   1d242:	1aeb      	subs	r3, r5, r3
   1d244:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1d248:	e78f      	b.n	1d16a <__udivmoddi4+0x10e>
   1d24a:	f1c1 0720 	rsb	r7, r1, #32
   1d24e:	fa22 f807 	lsr.w	r8, r2, r7
   1d252:	408b      	lsls	r3, r1
   1d254:	fa05 f401 	lsl.w	r4, r5, r1
   1d258:	ea48 0303 	orr.w	r3, r8, r3
   1d25c:	fa20 fe07 	lsr.w	lr, r0, r7
   1d260:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1d264:	40fd      	lsrs	r5, r7
   1d266:	ea4e 0e04 	orr.w	lr, lr, r4
   1d26a:	fbb5 f9fc 	udiv	r9, r5, ip
   1d26e:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1d272:	fb0c 5519 	mls	r5, ip, r9, r5
   1d276:	fa1f f883 	uxth.w	r8, r3
   1d27a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1d27e:	fb09 f408 	mul.w	r4, r9, r8
   1d282:	42ac      	cmp	r4, r5
   1d284:	fa02 f201 	lsl.w	r2, r2, r1
   1d288:	fa00 fa01 	lsl.w	sl, r0, r1
   1d28c:	d908      	bls.n	1d2a0 <__udivmoddi4+0x244>
   1d28e:	18ed      	adds	r5, r5, r3
   1d290:	f109 30ff 	add.w	r0, r9, #4294967295
   1d294:	d243      	bcs.n	1d31e <__udivmoddi4+0x2c2>
   1d296:	42ac      	cmp	r4, r5
   1d298:	d941      	bls.n	1d31e <__udivmoddi4+0x2c2>
   1d29a:	f1a9 0902 	sub.w	r9, r9, #2
   1d29e:	441d      	add	r5, r3
   1d2a0:	1b2d      	subs	r5, r5, r4
   1d2a2:	fa1f fe8e 	uxth.w	lr, lr
   1d2a6:	fbb5 f0fc 	udiv	r0, r5, ip
   1d2aa:	fb0c 5510 	mls	r5, ip, r0, r5
   1d2ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1d2b2:	fb00 f808 	mul.w	r8, r0, r8
   1d2b6:	45a0      	cmp	r8, r4
   1d2b8:	d907      	bls.n	1d2ca <__udivmoddi4+0x26e>
   1d2ba:	18e4      	adds	r4, r4, r3
   1d2bc:	f100 35ff 	add.w	r5, r0, #4294967295
   1d2c0:	d229      	bcs.n	1d316 <__udivmoddi4+0x2ba>
   1d2c2:	45a0      	cmp	r8, r4
   1d2c4:	d927      	bls.n	1d316 <__udivmoddi4+0x2ba>
   1d2c6:	3802      	subs	r0, #2
   1d2c8:	441c      	add	r4, r3
   1d2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1d2ce:	eba4 0408 	sub.w	r4, r4, r8
   1d2d2:	fba0 8902 	umull	r8, r9, r0, r2
   1d2d6:	454c      	cmp	r4, r9
   1d2d8:	46c6      	mov	lr, r8
   1d2da:	464d      	mov	r5, r9
   1d2dc:	d315      	bcc.n	1d30a <__udivmoddi4+0x2ae>
   1d2de:	d012      	beq.n	1d306 <__udivmoddi4+0x2aa>
   1d2e0:	b156      	cbz	r6, 1d2f8 <__udivmoddi4+0x29c>
   1d2e2:	ebba 030e 	subs.w	r3, sl, lr
   1d2e6:	eb64 0405 	sbc.w	r4, r4, r5
   1d2ea:	fa04 f707 	lsl.w	r7, r4, r7
   1d2ee:	40cb      	lsrs	r3, r1
   1d2f0:	431f      	orrs	r7, r3
   1d2f2:	40cc      	lsrs	r4, r1
   1d2f4:	6037      	str	r7, [r6, #0]
   1d2f6:	6074      	str	r4, [r6, #4]
   1d2f8:	2100      	movs	r1, #0
   1d2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d2fe:	4618      	mov	r0, r3
   1d300:	e6f8      	b.n	1d0f4 <__udivmoddi4+0x98>
   1d302:	4690      	mov	r8, r2
   1d304:	e6e0      	b.n	1d0c8 <__udivmoddi4+0x6c>
   1d306:	45c2      	cmp	sl, r8
   1d308:	d2ea      	bcs.n	1d2e0 <__udivmoddi4+0x284>
   1d30a:	ebb8 0e02 	subs.w	lr, r8, r2
   1d30e:	eb69 0503 	sbc.w	r5, r9, r3
   1d312:	3801      	subs	r0, #1
   1d314:	e7e4      	b.n	1d2e0 <__udivmoddi4+0x284>
   1d316:	4628      	mov	r0, r5
   1d318:	e7d7      	b.n	1d2ca <__udivmoddi4+0x26e>
   1d31a:	4640      	mov	r0, r8
   1d31c:	e791      	b.n	1d242 <__udivmoddi4+0x1e6>
   1d31e:	4681      	mov	r9, r0
   1d320:	e7be      	b.n	1d2a0 <__udivmoddi4+0x244>
   1d322:	4601      	mov	r1, r0
   1d324:	e778      	b.n	1d218 <__udivmoddi4+0x1bc>
   1d326:	3802      	subs	r0, #2
   1d328:	443c      	add	r4, r7
   1d32a:	e745      	b.n	1d1b8 <__udivmoddi4+0x15c>
   1d32c:	4608      	mov	r0, r1
   1d32e:	e708      	b.n	1d142 <__udivmoddi4+0xe6>
   1d330:	f1a8 0802 	sub.w	r8, r8, #2
   1d334:	443d      	add	r5, r7
   1d336:	e72b      	b.n	1d190 <__udivmoddi4+0x134>

0001d338 <selfrel_offset31>:
   1d338:	6803      	ldr	r3, [r0, #0]
   1d33a:	005a      	lsls	r2, r3, #1
   1d33c:	bf4c      	ite	mi
   1d33e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1d342:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1d346:	4418      	add	r0, r3
   1d348:	4770      	bx	lr
   1d34a:	bf00      	nop

0001d34c <search_EIT_table>:
   1d34c:	b361      	cbz	r1, 1d3a8 <search_EIT_table+0x5c>
   1d34e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d352:	f101 3aff 	add.w	sl, r1, #4294967295
   1d356:	4690      	mov	r8, r2
   1d358:	4606      	mov	r6, r0
   1d35a:	46d1      	mov	r9, sl
   1d35c:	2700      	movs	r7, #0
   1d35e:	eb07 0409 	add.w	r4, r7, r9
   1d362:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1d366:	1064      	asrs	r4, r4, #1
   1d368:	00e5      	lsls	r5, r4, #3
   1d36a:	1971      	adds	r1, r6, r5
   1d36c:	4608      	mov	r0, r1
   1d36e:	f7ff ffe3 	bl	1d338 <selfrel_offset31>
   1d372:	45a2      	cmp	sl, r4
   1d374:	4683      	mov	fp, r0
   1d376:	f105 0008 	add.w	r0, r5, #8
   1d37a:	4430      	add	r0, r6
   1d37c:	d009      	beq.n	1d392 <search_EIT_table+0x46>
   1d37e:	f7ff ffdb 	bl	1d338 <selfrel_offset31>
   1d382:	45c3      	cmp	fp, r8
   1d384:	f100 30ff 	add.w	r0, r0, #4294967295
   1d388:	d805      	bhi.n	1d396 <search_EIT_table+0x4a>
   1d38a:	4540      	cmp	r0, r8
   1d38c:	d209      	bcs.n	1d3a2 <search_EIT_table+0x56>
   1d38e:	1c67      	adds	r7, r4, #1
   1d390:	e7e5      	b.n	1d35e <search_EIT_table+0x12>
   1d392:	45c3      	cmp	fp, r8
   1d394:	d905      	bls.n	1d3a2 <search_EIT_table+0x56>
   1d396:	42a7      	cmp	r7, r4
   1d398:	d002      	beq.n	1d3a0 <search_EIT_table+0x54>
   1d39a:	f104 39ff 	add.w	r9, r4, #4294967295
   1d39e:	e7de      	b.n	1d35e <search_EIT_table+0x12>
   1d3a0:	2100      	movs	r1, #0
   1d3a2:	4608      	mov	r0, r1
   1d3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3a8:	4608      	mov	r0, r1
   1d3aa:	4770      	bx	lr

0001d3ac <__gnu_unwind_get_pr_addr>:
   1d3ac:	2801      	cmp	r0, #1
   1d3ae:	d007      	beq.n	1d3c0 <__gnu_unwind_get_pr_addr+0x14>
   1d3b0:	2802      	cmp	r0, #2
   1d3b2:	d007      	beq.n	1d3c4 <__gnu_unwind_get_pr_addr+0x18>
   1d3b4:	4b04      	ldr	r3, [pc, #16]	; (1d3c8 <__gnu_unwind_get_pr_addr+0x1c>)
   1d3b6:	2800      	cmp	r0, #0
   1d3b8:	bf0c      	ite	eq
   1d3ba:	4618      	moveq	r0, r3
   1d3bc:	2000      	movne	r0, #0
   1d3be:	4770      	bx	lr
   1d3c0:	4802      	ldr	r0, [pc, #8]	; (1d3cc <__gnu_unwind_get_pr_addr+0x20>)
   1d3c2:	4770      	bx	lr
   1d3c4:	4802      	ldr	r0, [pc, #8]	; (1d3d0 <__gnu_unwind_get_pr_addr+0x24>)
   1d3c6:	4770      	bx	lr
   1d3c8:	0001dab1 	.word	0x0001dab1
   1d3cc:	0001dab5 	.word	0x0001dab5
   1d3d0:	0001dab9 	.word	0x0001dab9

0001d3d4 <get_eit_entry>:
   1d3d4:	b530      	push	{r4, r5, lr}
   1d3d6:	4b24      	ldr	r3, [pc, #144]	; (1d468 <get_eit_entry+0x94>)
   1d3d8:	b083      	sub	sp, #12
   1d3da:	4604      	mov	r4, r0
   1d3dc:	1e8d      	subs	r5, r1, #2
   1d3de:	b37b      	cbz	r3, 1d440 <get_eit_entry+0x6c>
   1d3e0:	a901      	add	r1, sp, #4
   1d3e2:	4628      	mov	r0, r5
   1d3e4:	f3af 8000 	nop.w
   1d3e8:	b320      	cbz	r0, 1d434 <get_eit_entry+0x60>
   1d3ea:	9901      	ldr	r1, [sp, #4]
   1d3ec:	462a      	mov	r2, r5
   1d3ee:	f7ff ffad 	bl	1d34c <search_EIT_table>
   1d3f2:	4601      	mov	r1, r0
   1d3f4:	b1f0      	cbz	r0, 1d434 <get_eit_entry+0x60>
   1d3f6:	f7ff ff9f 	bl	1d338 <selfrel_offset31>
   1d3fa:	684b      	ldr	r3, [r1, #4]
   1d3fc:	64a0      	str	r0, [r4, #72]	; 0x48
   1d3fe:	2b01      	cmp	r3, #1
   1d400:	d012      	beq.n	1d428 <get_eit_entry+0x54>
   1d402:	2b00      	cmp	r3, #0
   1d404:	f101 0004 	add.w	r0, r1, #4
   1d408:	db20      	blt.n	1d44c <get_eit_entry+0x78>
   1d40a:	f7ff ff95 	bl	1d338 <selfrel_offset31>
   1d40e:	2300      	movs	r3, #0
   1d410:	64e0      	str	r0, [r4, #76]	; 0x4c
   1d412:	6523      	str	r3, [r4, #80]	; 0x50
   1d414:	6803      	ldr	r3, [r0, #0]
   1d416:	2b00      	cmp	r3, #0
   1d418:	db1c      	blt.n	1d454 <get_eit_entry+0x80>
   1d41a:	f7ff ff8d 	bl	1d338 <selfrel_offset31>
   1d41e:	2300      	movs	r3, #0
   1d420:	6120      	str	r0, [r4, #16]
   1d422:	4618      	mov	r0, r3
   1d424:	b003      	add	sp, #12
   1d426:	bd30      	pop	{r4, r5, pc}
   1d428:	2300      	movs	r3, #0
   1d42a:	6123      	str	r3, [r4, #16]
   1d42c:	2305      	movs	r3, #5
   1d42e:	4618      	mov	r0, r3
   1d430:	b003      	add	sp, #12
   1d432:	bd30      	pop	{r4, r5, pc}
   1d434:	2300      	movs	r3, #0
   1d436:	6123      	str	r3, [r4, #16]
   1d438:	2309      	movs	r3, #9
   1d43a:	4618      	mov	r0, r3
   1d43c:	b003      	add	sp, #12
   1d43e:	bd30      	pop	{r4, r5, pc}
   1d440:	490a      	ldr	r1, [pc, #40]	; (1d46c <get_eit_entry+0x98>)
   1d442:	480b      	ldr	r0, [pc, #44]	; (1d470 <get_eit_entry+0x9c>)
   1d444:	1a09      	subs	r1, r1, r0
   1d446:	10c9      	asrs	r1, r1, #3
   1d448:	9101      	str	r1, [sp, #4]
   1d44a:	e7cf      	b.n	1d3ec <get_eit_entry+0x18>
   1d44c:	2301      	movs	r3, #1
   1d44e:	64e0      	str	r0, [r4, #76]	; 0x4c
   1d450:	6523      	str	r3, [r4, #80]	; 0x50
   1d452:	e7df      	b.n	1d414 <get_eit_entry+0x40>
   1d454:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1d458:	f7ff ffa8 	bl	1d3ac <__gnu_unwind_get_pr_addr>
   1d45c:	2800      	cmp	r0, #0
   1d45e:	6120      	str	r0, [r4, #16]
   1d460:	bf14      	ite	ne
   1d462:	2300      	movne	r3, #0
   1d464:	2309      	moveq	r3, #9
   1d466:	e7dc      	b.n	1d422 <get_eit_entry+0x4e>
   1d468:	00000000 	.word	0x00000000
   1d46c:	00025d54 	.word	0x00025d54
   1d470:	00025bcc 	.word	0x00025bcc

0001d474 <restore_non_core_regs>:
   1d474:	6803      	ldr	r3, [r0, #0]
   1d476:	07da      	lsls	r2, r3, #31
   1d478:	b510      	push	{r4, lr}
   1d47a:	4604      	mov	r4, r0
   1d47c:	d406      	bmi.n	1d48c <restore_non_core_regs+0x18>
   1d47e:	079b      	lsls	r3, r3, #30
   1d480:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1d484:	d509      	bpl.n	1d49a <restore_non_core_regs+0x26>
   1d486:	f000 fc51 	bl	1dd2c <__gnu_Unwind_Restore_VFP_D>
   1d48a:	6823      	ldr	r3, [r4, #0]
   1d48c:	0759      	lsls	r1, r3, #29
   1d48e:	d509      	bpl.n	1d4a4 <restore_non_core_regs+0x30>
   1d490:	071a      	lsls	r2, r3, #28
   1d492:	d50e      	bpl.n	1d4b2 <restore_non_core_regs+0x3e>
   1d494:	06db      	lsls	r3, r3, #27
   1d496:	d513      	bpl.n	1d4c0 <restore_non_core_regs+0x4c>
   1d498:	bd10      	pop	{r4, pc}
   1d49a:	f000 fc3f 	bl	1dd1c <__gnu_Unwind_Restore_VFP>
   1d49e:	6823      	ldr	r3, [r4, #0]
   1d4a0:	0759      	lsls	r1, r3, #29
   1d4a2:	d4f5      	bmi.n	1d490 <restore_non_core_regs+0x1c>
   1d4a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1d4a8:	f000 fc48 	bl	1dd3c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d4ac:	6823      	ldr	r3, [r4, #0]
   1d4ae:	071a      	lsls	r2, r3, #28
   1d4b0:	d4f0      	bmi.n	1d494 <restore_non_core_regs+0x20>
   1d4b2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d4b6:	f000 fc49 	bl	1dd4c <__gnu_Unwind_Restore_WMMXD>
   1d4ba:	6823      	ldr	r3, [r4, #0]
   1d4bc:	06db      	lsls	r3, r3, #27
   1d4be:	d4eb      	bmi.n	1d498 <restore_non_core_regs+0x24>
   1d4c0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d4c8:	f000 bc84 	b.w	1ddd4 <__gnu_Unwind_Restore_WMMXC>

0001d4cc <_Unwind_decode_typeinfo_ptr.isra.0>:
   1d4cc:	6803      	ldr	r3, [r0, #0]
   1d4ce:	b103      	cbz	r3, 1d4d2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1d4d0:	4403      	add	r3, r0
   1d4d2:	4618      	mov	r0, r3
   1d4d4:	4770      	bx	lr
   1d4d6:	bf00      	nop

0001d4d8 <__gnu_unwind_24bit.isra.1>:
   1d4d8:	2009      	movs	r0, #9
   1d4da:	4770      	bx	lr

0001d4dc <_Unwind_DebugHook>:
   1d4dc:	4770      	bx	lr
   1d4de:	bf00      	nop

0001d4e0 <unwind_phase2>:
   1d4e0:	b570      	push	{r4, r5, r6, lr}
   1d4e2:	4604      	mov	r4, r0
   1d4e4:	460d      	mov	r5, r1
   1d4e6:	e008      	b.n	1d4fa <unwind_phase2+0x1a>
   1d4e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1d4ea:	6163      	str	r3, [r4, #20]
   1d4ec:	462a      	mov	r2, r5
   1d4ee:	6923      	ldr	r3, [r4, #16]
   1d4f0:	4621      	mov	r1, r4
   1d4f2:	2001      	movs	r0, #1
   1d4f4:	4798      	blx	r3
   1d4f6:	2808      	cmp	r0, #8
   1d4f8:	d108      	bne.n	1d50c <unwind_phase2+0x2c>
   1d4fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1d4fc:	4620      	mov	r0, r4
   1d4fe:	f7ff ff69 	bl	1d3d4 <get_eit_entry>
   1d502:	4606      	mov	r6, r0
   1d504:	2800      	cmp	r0, #0
   1d506:	d0ef      	beq.n	1d4e8 <unwind_phase2+0x8>
   1d508:	f000 fe94 	bl	1e234 <abort>
   1d50c:	2807      	cmp	r0, #7
   1d50e:	d1fb      	bne.n	1d508 <unwind_phase2+0x28>
   1d510:	4630      	mov	r0, r6
   1d512:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1d514:	f7ff ffe2 	bl	1d4dc <_Unwind_DebugHook>
   1d518:	1d28      	adds	r0, r5, #4
   1d51a:	f000 fbf3 	bl	1dd04 <__restore_core_regs>
   1d51e:	bf00      	nop

0001d520 <unwind_phase2_forced>:
   1d520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d524:	1d0c      	adds	r4, r1, #4
   1d526:	4605      	mov	r5, r0
   1d528:	4692      	mov	sl, r2
   1d52a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1d52c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1d530:	ae03      	add	r6, sp, #12
   1d532:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1d534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1d536:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1d538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1d53a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1d53c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1d540:	ac02      	add	r4, sp, #8
   1d542:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1d546:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1d54a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1d54e:	2300      	movs	r3, #0
   1d550:	4628      	mov	r0, r5
   1d552:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1d554:	6023      	str	r3, [r4, #0]
   1d556:	f7ff ff3d 	bl	1d3d4 <get_eit_entry>
   1d55a:	f1ba 0f00 	cmp.w	sl, #0
   1d55e:	4607      	mov	r7, r0
   1d560:	bf14      	ite	ne
   1d562:	260a      	movne	r6, #10
   1d564:	2609      	moveq	r6, #9
   1d566:	b17f      	cbz	r7, 1d588 <unwind_phase2_forced+0x68>
   1d568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d56a:	f046 0110 	orr.w	r1, r6, #16
   1d56e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1d572:	462a      	mov	r2, r5
   1d574:	6463      	str	r3, [r4, #68]	; 0x44
   1d576:	2001      	movs	r0, #1
   1d578:	462b      	mov	r3, r5
   1d57a:	47c0      	blx	r8
   1d57c:	bb78      	cbnz	r0, 1d5de <unwind_phase2_forced+0xbe>
   1d57e:	4638      	mov	r0, r7
   1d580:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1d584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d588:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1d58a:	616b      	str	r3, [r5, #20]
   1d58c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1d590:	4621      	mov	r1, r4
   1d592:	a87a      	add	r0, sp, #488	; 0x1e8
   1d594:	f001 fc54 	bl	1ee40 <memcpy>
   1d598:	692b      	ldr	r3, [r5, #16]
   1d59a:	aa7a      	add	r2, sp, #488	; 0x1e8
   1d59c:	4629      	mov	r1, r5
   1d59e:	4630      	mov	r0, r6
   1d5a0:	4798      	blx	r3
   1d5a2:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1d5a4:	4682      	mov	sl, r0
   1d5a6:	e88d 0210 	stmia.w	sp, {r4, r9}
   1d5aa:	4631      	mov	r1, r6
   1d5ac:	6463      	str	r3, [r4, #68]	; 0x44
   1d5ae:	462a      	mov	r2, r5
   1d5b0:	462b      	mov	r3, r5
   1d5b2:	2001      	movs	r0, #1
   1d5b4:	47c0      	blx	r8
   1d5b6:	b990      	cbnz	r0, 1d5de <unwind_phase2_forced+0xbe>
   1d5b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1d5bc:	a97a      	add	r1, sp, #488	; 0x1e8
   1d5be:	4620      	mov	r0, r4
   1d5c0:	f001 fc3e 	bl	1ee40 <memcpy>
   1d5c4:	f1ba 0f08 	cmp.w	sl, #8
   1d5c8:	d106      	bne.n	1d5d8 <unwind_phase2_forced+0xb8>
   1d5ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1d5cc:	4628      	mov	r0, r5
   1d5ce:	f7ff ff01 	bl	1d3d4 <get_eit_entry>
   1d5d2:	2609      	movs	r6, #9
   1d5d4:	4607      	mov	r7, r0
   1d5d6:	e7c6      	b.n	1d566 <unwind_phase2_forced+0x46>
   1d5d8:	f1ba 0f07 	cmp.w	sl, #7
   1d5dc:	d005      	beq.n	1d5ea <unwind_phase2_forced+0xca>
   1d5de:	2709      	movs	r7, #9
   1d5e0:	4638      	mov	r0, r7
   1d5e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1d5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d5ea:	4638      	mov	r0, r7
   1d5ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1d5ee:	f7ff ff75 	bl	1d4dc <_Unwind_DebugHook>
   1d5f2:	a803      	add	r0, sp, #12
   1d5f4:	f000 fb86 	bl	1dd04 <__restore_core_regs>

0001d5f8 <_Unwind_GetCFA>:
   1d5f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1d5fa:	4770      	bx	lr

0001d5fc <__gnu_Unwind_RaiseException>:
   1d5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1d600:	640b      	str	r3, [r1, #64]	; 0x40
   1d602:	1d0e      	adds	r6, r1, #4
   1d604:	460f      	mov	r7, r1
   1d606:	4604      	mov	r4, r0
   1d608:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d60a:	b0f9      	sub	sp, #484	; 0x1e4
   1d60c:	ad01      	add	r5, sp, #4
   1d60e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d610:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d614:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d618:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1d61c:	f04f 36ff 	mov.w	r6, #4294967295
   1d620:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1d624:	9600      	str	r6, [sp, #0]
   1d626:	e006      	b.n	1d636 <__gnu_Unwind_RaiseException+0x3a>
   1d628:	6923      	ldr	r3, [r4, #16]
   1d62a:	466a      	mov	r2, sp
   1d62c:	4621      	mov	r1, r4
   1d62e:	4798      	blx	r3
   1d630:	2808      	cmp	r0, #8
   1d632:	4605      	mov	r5, r0
   1d634:	d108      	bne.n	1d648 <__gnu_Unwind_RaiseException+0x4c>
   1d636:	9910      	ldr	r1, [sp, #64]	; 0x40
   1d638:	4620      	mov	r0, r4
   1d63a:	f7ff fecb 	bl	1d3d4 <get_eit_entry>
   1d63e:	2800      	cmp	r0, #0
   1d640:	d0f2      	beq.n	1d628 <__gnu_Unwind_RaiseException+0x2c>
   1d642:	2009      	movs	r0, #9
   1d644:	b079      	add	sp, #484	; 0x1e4
   1d646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d648:	4668      	mov	r0, sp
   1d64a:	f7ff ff13 	bl	1d474 <restore_non_core_regs>
   1d64e:	2d06      	cmp	r5, #6
   1d650:	d1f7      	bne.n	1d642 <__gnu_Unwind_RaiseException+0x46>
   1d652:	4639      	mov	r1, r7
   1d654:	4620      	mov	r0, r4
   1d656:	f7ff ff43 	bl	1d4e0 <unwind_phase2>
   1d65a:	bf00      	nop

0001d65c <__gnu_Unwind_ForcedUnwind>:
   1d65c:	b430      	push	{r4, r5}
   1d65e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1d660:	60c1      	str	r1, [r0, #12]
   1d662:	6182      	str	r2, [r0, #24]
   1d664:	4619      	mov	r1, r3
   1d666:	641d      	str	r5, [r3, #64]	; 0x40
   1d668:	2200      	movs	r2, #0
   1d66a:	bc30      	pop	{r4, r5}
   1d66c:	e758      	b.n	1d520 <unwind_phase2_forced>
   1d66e:	bf00      	nop

0001d670 <__gnu_Unwind_Resume>:
   1d670:	b570      	push	{r4, r5, r6, lr}
   1d672:	68c6      	ldr	r6, [r0, #12]
   1d674:	6943      	ldr	r3, [r0, #20]
   1d676:	640b      	str	r3, [r1, #64]	; 0x40
   1d678:	b126      	cbz	r6, 1d684 <__gnu_Unwind_Resume+0x14>
   1d67a:	2201      	movs	r2, #1
   1d67c:	f7ff ff50 	bl	1d520 <unwind_phase2_forced>
   1d680:	f000 fdd8 	bl	1e234 <abort>
   1d684:	6903      	ldr	r3, [r0, #16]
   1d686:	460a      	mov	r2, r1
   1d688:	4604      	mov	r4, r0
   1d68a:	460d      	mov	r5, r1
   1d68c:	4601      	mov	r1, r0
   1d68e:	2002      	movs	r0, #2
   1d690:	4798      	blx	r3
   1d692:	2807      	cmp	r0, #7
   1d694:	d007      	beq.n	1d6a6 <__gnu_Unwind_Resume+0x36>
   1d696:	2808      	cmp	r0, #8
   1d698:	d103      	bne.n	1d6a2 <__gnu_Unwind_Resume+0x32>
   1d69a:	4629      	mov	r1, r5
   1d69c:	4620      	mov	r0, r4
   1d69e:	f7ff ff1f 	bl	1d4e0 <unwind_phase2>
   1d6a2:	f000 fdc7 	bl	1e234 <abort>
   1d6a6:	4630      	mov	r0, r6
   1d6a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1d6aa:	f7ff ff17 	bl	1d4dc <_Unwind_DebugHook>
   1d6ae:	1d28      	adds	r0, r5, #4
   1d6b0:	f000 fb28 	bl	1dd04 <__restore_core_regs>

0001d6b4 <__gnu_Unwind_Resume_or_Rethrow>:
   1d6b4:	68c2      	ldr	r2, [r0, #12]
   1d6b6:	b11a      	cbz	r2, 1d6c0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1d6b8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1d6ba:	640a      	str	r2, [r1, #64]	; 0x40
   1d6bc:	2200      	movs	r2, #0
   1d6be:	e72f      	b.n	1d520 <unwind_phase2_forced>
   1d6c0:	e79c      	b.n	1d5fc <__gnu_Unwind_RaiseException>
   1d6c2:	bf00      	nop

0001d6c4 <_Unwind_Complete>:
   1d6c4:	4770      	bx	lr
   1d6c6:	bf00      	nop

0001d6c8 <_Unwind_DeleteException>:
   1d6c8:	6883      	ldr	r3, [r0, #8]
   1d6ca:	b113      	cbz	r3, 1d6d2 <_Unwind_DeleteException+0xa>
   1d6cc:	4601      	mov	r1, r0
   1d6ce:	2001      	movs	r0, #1
   1d6d0:	4718      	bx	r3
   1d6d2:	4770      	bx	lr

0001d6d4 <_Unwind_VRS_Get>:
   1d6d4:	b500      	push	{lr}
   1d6d6:	2904      	cmp	r1, #4
   1d6d8:	d807      	bhi.n	1d6ea <_Unwind_VRS_Get+0x16>
   1d6da:	e8df f001 	tbb	[pc, r1]
   1d6de:	0903      	.short	0x0903
   1d6e0:	0906      	.short	0x0906
   1d6e2:	09          	.byte	0x09
   1d6e3:	00          	.byte	0x00
   1d6e4:	b90b      	cbnz	r3, 1d6ea <_Unwind_VRS_Get+0x16>
   1d6e6:	2a0f      	cmp	r2, #15
   1d6e8:	d905      	bls.n	1d6f6 <_Unwind_VRS_Get+0x22>
   1d6ea:	2002      	movs	r0, #2
   1d6ec:	f85d fb04 	ldr.w	pc, [sp], #4
   1d6f0:	2001      	movs	r0, #1
   1d6f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1d6f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1d6fa:	4618      	mov	r0, r3
   1d6fc:	6853      	ldr	r3, [r2, #4]
   1d6fe:	9a01      	ldr	r2, [sp, #4]
   1d700:	6013      	str	r3, [r2, #0]
   1d702:	f85d fb04 	ldr.w	pc, [sp], #4
   1d706:	bf00      	nop

0001d708 <_Unwind_GetGR>:
   1d708:	b510      	push	{r4, lr}
   1d70a:	b084      	sub	sp, #16
   1d70c:	2300      	movs	r3, #0
   1d70e:	ac03      	add	r4, sp, #12
   1d710:	460a      	mov	r2, r1
   1d712:	9400      	str	r4, [sp, #0]
   1d714:	4619      	mov	r1, r3
   1d716:	f7ff ffdd 	bl	1d6d4 <_Unwind_VRS_Get>
   1d71a:	9803      	ldr	r0, [sp, #12]
   1d71c:	b004      	add	sp, #16
   1d71e:	bd10      	pop	{r4, pc}

0001d720 <_Unwind_VRS_Set>:
   1d720:	b500      	push	{lr}
   1d722:	2904      	cmp	r1, #4
   1d724:	d807      	bhi.n	1d736 <_Unwind_VRS_Set+0x16>
   1d726:	e8df f001 	tbb	[pc, r1]
   1d72a:	0903      	.short	0x0903
   1d72c:	0906      	.short	0x0906
   1d72e:	09          	.byte	0x09
   1d72f:	00          	.byte	0x00
   1d730:	b90b      	cbnz	r3, 1d736 <_Unwind_VRS_Set+0x16>
   1d732:	2a0f      	cmp	r2, #15
   1d734:	d905      	bls.n	1d742 <_Unwind_VRS_Set+0x22>
   1d736:	2002      	movs	r0, #2
   1d738:	f85d fb04 	ldr.w	pc, [sp], #4
   1d73c:	2001      	movs	r0, #1
   1d73e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d742:	9901      	ldr	r1, [sp, #4]
   1d744:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1d748:	6809      	ldr	r1, [r1, #0]
   1d74a:	6051      	str	r1, [r2, #4]
   1d74c:	4618      	mov	r0, r3
   1d74e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d752:	bf00      	nop

0001d754 <_Unwind_SetGR>:
   1d754:	b510      	push	{r4, lr}
   1d756:	b084      	sub	sp, #16
   1d758:	ac04      	add	r4, sp, #16
   1d75a:	2300      	movs	r3, #0
   1d75c:	f844 2d04 	str.w	r2, [r4, #-4]!
   1d760:	460a      	mov	r2, r1
   1d762:	9400      	str	r4, [sp, #0]
   1d764:	4619      	mov	r1, r3
   1d766:	f7ff ffdb 	bl	1d720 <_Unwind_VRS_Set>
   1d76a:	b004      	add	sp, #16
   1d76c:	bd10      	pop	{r4, pc}
   1d76e:	bf00      	nop

0001d770 <__gnu_Unwind_Backtrace>:
   1d770:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d772:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1d774:	6413      	str	r3, [r2, #64]	; 0x40
   1d776:	1d15      	adds	r5, r2, #4
   1d778:	4607      	mov	r7, r0
   1d77a:	460e      	mov	r6, r1
   1d77c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d77e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1d782:	ac17      	add	r4, sp, #92	; 0x5c
   1d784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d78a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d78c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d78e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d792:	f04f 35ff 	mov.w	r5, #4294967295
   1d796:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1d79a:	9516      	str	r5, [sp, #88]	; 0x58
   1d79c:	e010      	b.n	1d7c0 <__gnu_Unwind_Backtrace+0x50>
   1d79e:	a816      	add	r0, sp, #88	; 0x58
   1d7a0:	f7ff ffd8 	bl	1d754 <_Unwind_SetGR>
   1d7a4:	4631      	mov	r1, r6
   1d7a6:	a816      	add	r0, sp, #88	; 0x58
   1d7a8:	47b8      	blx	r7
   1d7aa:	aa16      	add	r2, sp, #88	; 0x58
   1d7ac:	4669      	mov	r1, sp
   1d7ae:	b978      	cbnz	r0, 1d7d0 <__gnu_Unwind_Backtrace+0x60>
   1d7b0:	9b04      	ldr	r3, [sp, #16]
   1d7b2:	2008      	movs	r0, #8
   1d7b4:	4798      	blx	r3
   1d7b6:	2805      	cmp	r0, #5
   1d7b8:	4604      	mov	r4, r0
   1d7ba:	d00a      	beq.n	1d7d2 <__gnu_Unwind_Backtrace+0x62>
   1d7bc:	2809      	cmp	r0, #9
   1d7be:	d007      	beq.n	1d7d0 <__gnu_Unwind_Backtrace+0x60>
   1d7c0:	9926      	ldr	r1, [sp, #152]	; 0x98
   1d7c2:	4668      	mov	r0, sp
   1d7c4:	f7ff fe06 	bl	1d3d4 <get_eit_entry>
   1d7c8:	466a      	mov	r2, sp
   1d7ca:	210c      	movs	r1, #12
   1d7cc:	2800      	cmp	r0, #0
   1d7ce:	d0e6      	beq.n	1d79e <__gnu_Unwind_Backtrace+0x2e>
   1d7d0:	2409      	movs	r4, #9
   1d7d2:	a816      	add	r0, sp, #88	; 0x58
   1d7d4:	f7ff fe4e 	bl	1d474 <restore_non_core_regs>
   1d7d8:	4620      	mov	r0, r4
   1d7da:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1d7de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d7e0 <__gnu_unwind_pr_common>:
   1d7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7e4:	460d      	mov	r5, r1
   1d7e6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1d7e8:	b08b      	sub	sp, #44	; 0x2c
   1d7ea:	1d0c      	adds	r4, r1, #4
   1d7ec:	6809      	ldr	r1, [r1, #0]
   1d7ee:	9107      	str	r1, [sp, #28]
   1d7f0:	4691      	mov	r9, r2
   1d7f2:	9408      	str	r4, [sp, #32]
   1d7f4:	f000 0b03 	and.w	fp, r0, #3
   1d7f8:	461e      	mov	r6, r3
   1d7fa:	2b00      	cmp	r3, #0
   1d7fc:	d160      	bne.n	1d8c0 <__gnu_unwind_pr_common+0xe0>
   1d7fe:	0209      	lsls	r1, r1, #8
   1d800:	2303      	movs	r3, #3
   1d802:	9107      	str	r1, [sp, #28]
   1d804:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1d808:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1d80c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1d80e:	f1bb 0f02 	cmp.w	fp, #2
   1d812:	bf08      	it	eq
   1d814:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1d816:	f013 0301 	ands.w	r3, r3, #1
   1d81a:	d140      	bne.n	1d89e <__gnu_unwind_pr_common+0xbe>
   1d81c:	9301      	str	r3, [sp, #4]
   1d81e:	f000 0308 	and.w	r3, r0, #8
   1d822:	9303      	str	r3, [sp, #12]
   1d824:	f8d4 8000 	ldr.w	r8, [r4]
   1d828:	f1b8 0f00 	cmp.w	r8, #0
   1d82c:	d039      	beq.n	1d8a2 <__gnu_unwind_pr_common+0xc2>
   1d82e:	2e02      	cmp	r6, #2
   1d830:	d043      	beq.n	1d8ba <__gnu_unwind_pr_common+0xda>
   1d832:	f8b4 8000 	ldrh.w	r8, [r4]
   1d836:	8867      	ldrh	r7, [r4, #2]
   1d838:	3404      	adds	r4, #4
   1d83a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1d83c:	f027 0a01 	bic.w	sl, r7, #1
   1d840:	210f      	movs	r1, #15
   1d842:	4648      	mov	r0, r9
   1d844:	449a      	add	sl, r3
   1d846:	f7ff ff5f 	bl	1d708 <_Unwind_GetGR>
   1d84a:	4582      	cmp	sl, r0
   1d84c:	d833      	bhi.n	1d8b6 <__gnu_unwind_pr_common+0xd6>
   1d84e:	f028 0301 	bic.w	r3, r8, #1
   1d852:	449a      	add	sl, r3
   1d854:	4550      	cmp	r0, sl
   1d856:	bf2c      	ite	cs
   1d858:	2000      	movcs	r0, #0
   1d85a:	2001      	movcc	r0, #1
   1d85c:	007f      	lsls	r7, r7, #1
   1d85e:	f007 0702 	and.w	r7, r7, #2
   1d862:	f008 0801 	and.w	r8, r8, #1
   1d866:	ea47 0708 	orr.w	r7, r7, r8
   1d86a:	2f01      	cmp	r7, #1
   1d86c:	d03e      	beq.n	1d8ec <__gnu_unwind_pr_common+0x10c>
   1d86e:	d335      	bcc.n	1d8dc <__gnu_unwind_pr_common+0xfc>
   1d870:	2f02      	cmp	r7, #2
   1d872:	d11c      	bne.n	1d8ae <__gnu_unwind_pr_common+0xce>
   1d874:	6823      	ldr	r3, [r4, #0]
   1d876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1d87a:	9202      	str	r2, [sp, #8]
   1d87c:	f1bb 0f00 	cmp.w	fp, #0
   1d880:	d176      	bne.n	1d970 <__gnu_unwind_pr_common+0x190>
   1d882:	b128      	cbz	r0, 1d890 <__gnu_unwind_pr_common+0xb0>
   1d884:	9903      	ldr	r1, [sp, #12]
   1d886:	2900      	cmp	r1, #0
   1d888:	d07e      	beq.n	1d988 <__gnu_unwind_pr_common+0x1a8>
   1d88a:	2a00      	cmp	r2, #0
   1d88c:	f000 80a6 	beq.w	1d9dc <__gnu_unwind_pr_common+0x1fc>
   1d890:	2b00      	cmp	r3, #0
   1d892:	db77      	blt.n	1d984 <__gnu_unwind_pr_common+0x1a4>
   1d894:	9b02      	ldr	r3, [sp, #8]
   1d896:	3301      	adds	r3, #1
   1d898:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1d89c:	e7c2      	b.n	1d824 <__gnu_unwind_pr_common+0x44>
   1d89e:	2300      	movs	r3, #0
   1d8a0:	9301      	str	r3, [sp, #4]
   1d8a2:	2e02      	cmp	r6, #2
   1d8a4:	dd3e      	ble.n	1d924 <__gnu_unwind_pr_common+0x144>
   1d8a6:	f7ff fe17 	bl	1d4d8 <__gnu_unwind_24bit.isra.1>
   1d8aa:	2800      	cmp	r0, #0
   1d8ac:	d040      	beq.n	1d930 <__gnu_unwind_pr_common+0x150>
   1d8ae:	2009      	movs	r0, #9
   1d8b0:	b00b      	add	sp, #44	; 0x2c
   1d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8b6:	2000      	movs	r0, #0
   1d8b8:	e7d0      	b.n	1d85c <__gnu_unwind_pr_common+0x7c>
   1d8ba:	6867      	ldr	r7, [r4, #4]
   1d8bc:	3408      	adds	r4, #8
   1d8be:	e7bc      	b.n	1d83a <__gnu_unwind_pr_common+0x5a>
   1d8c0:	2b02      	cmp	r3, #2
   1d8c2:	dca3      	bgt.n	1d80c <__gnu_unwind_pr_common+0x2c>
   1d8c4:	0c0b      	lsrs	r3, r1, #16
   1d8c6:	b2da      	uxtb	r2, r3
   1d8c8:	0409      	lsls	r1, r1, #16
   1d8ca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1d8ce:	2302      	movs	r3, #2
   1d8d0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1d8d4:	9107      	str	r1, [sp, #28]
   1d8d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1d8da:	e797      	b.n	1d80c <__gnu_unwind_pr_common+0x2c>
   1d8dc:	f1bb 0f00 	cmp.w	fp, #0
   1d8e0:	d002      	beq.n	1d8e8 <__gnu_unwind_pr_common+0x108>
   1d8e2:	2800      	cmp	r0, #0
   1d8e4:	f040 80bd 	bne.w	1da62 <__gnu_unwind_pr_common+0x282>
   1d8e8:	3404      	adds	r4, #4
   1d8ea:	e79b      	b.n	1d824 <__gnu_unwind_pr_common+0x44>
   1d8ec:	f1bb 0f00 	cmp.w	fp, #0
   1d8f0:	d125      	bne.n	1d93e <__gnu_unwind_pr_common+0x15e>
   1d8f2:	b1a8      	cbz	r0, 1d920 <__gnu_unwind_pr_common+0x140>
   1d8f4:	e894 000c 	ldmia.w	r4, {r2, r3}
   1d8f8:	1c99      	adds	r1, r3, #2
   1d8fa:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1d8fe:	d0d6      	beq.n	1d8ae <__gnu_unwind_pr_common+0xce>
   1d900:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1d904:	3301      	adds	r3, #1
   1d906:	9106      	str	r1, [sp, #24]
   1d908:	f000 80a3 	beq.w	1da52 <__gnu_unwind_pr_common+0x272>
   1d90c:	1d20      	adds	r0, r4, #4
   1d90e:	f7ff fddd 	bl	1d4cc <_Unwind_decode_typeinfo_ptr.isra.0>
   1d912:	ab06      	add	r3, sp, #24
   1d914:	4601      	mov	r1, r0
   1d916:	4628      	mov	r0, r5
   1d918:	f7f6 fe00 	bl	1451c <__cxa_type_match>
   1d91c:	2800      	cmp	r0, #0
   1d91e:	d177      	bne.n	1da10 <__gnu_unwind_pr_common+0x230>
   1d920:	3408      	adds	r4, #8
   1d922:	e77f      	b.n	1d824 <__gnu_unwind_pr_common+0x44>
   1d924:	a907      	add	r1, sp, #28
   1d926:	4648      	mov	r0, r9
   1d928:	f000 faee 	bl	1df08 <__gnu_unwind_execute>
   1d92c:	2800      	cmp	r0, #0
   1d92e:	d1be      	bne.n	1d8ae <__gnu_unwind_pr_common+0xce>
   1d930:	9b01      	ldr	r3, [sp, #4]
   1d932:	2b00      	cmp	r3, #0
   1d934:	d15c      	bne.n	1d9f0 <__gnu_unwind_pr_common+0x210>
   1d936:	2008      	movs	r0, #8
   1d938:	b00b      	add	sp, #44	; 0x2c
   1d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d93e:	210d      	movs	r1, #13
   1d940:	4648      	mov	r0, r9
   1d942:	6a2f      	ldr	r7, [r5, #32]
   1d944:	f7ff fee0 	bl	1d708 <_Unwind_GetGR>
   1d948:	4287      	cmp	r7, r0
   1d94a:	d1e9      	bne.n	1d920 <__gnu_unwind_pr_common+0x140>
   1d94c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d94e:	429c      	cmp	r4, r3
   1d950:	d1e6      	bne.n	1d920 <__gnu_unwind_pr_common+0x140>
   1d952:	4620      	mov	r0, r4
   1d954:	f7ff fcf0 	bl	1d338 <selfrel_offset31>
   1d958:	210f      	movs	r1, #15
   1d95a:	4602      	mov	r2, r0
   1d95c:	4648      	mov	r0, r9
   1d95e:	f7ff fef9 	bl	1d754 <_Unwind_SetGR>
   1d962:	4648      	mov	r0, r9
   1d964:	462a      	mov	r2, r5
   1d966:	2100      	movs	r1, #0
   1d968:	f7ff fef4 	bl	1d754 <_Unwind_SetGR>
   1d96c:	2007      	movs	r0, #7
   1d96e:	e79f      	b.n	1d8b0 <__gnu_unwind_pr_common+0xd0>
   1d970:	210d      	movs	r1, #13
   1d972:	4648      	mov	r0, r9
   1d974:	6a2f      	ldr	r7, [r5, #32]
   1d976:	f7ff fec7 	bl	1d708 <_Unwind_GetGR>
   1d97a:	4287      	cmp	r7, r0
   1d97c:	d058      	beq.n	1da30 <__gnu_unwind_pr_common+0x250>
   1d97e:	6823      	ldr	r3, [r4, #0]
   1d980:	2b00      	cmp	r3, #0
   1d982:	da87      	bge.n	1d894 <__gnu_unwind_pr_common+0xb4>
   1d984:	3404      	adds	r4, #4
   1d986:	e785      	b.n	1d894 <__gnu_unwind_pr_common+0xb4>
   1d988:	9b02      	ldr	r3, [sp, #8]
   1d98a:	b33b      	cbz	r3, 1d9dc <__gnu_unwind_pr_common+0x1fc>
   1d98c:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1d990:	1d27      	adds	r7, r4, #4
   1d992:	f8cd b010 	str.w	fp, [sp, #16]
   1d996:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1d99a:	f8dd a008 	ldr.w	sl, [sp, #8]
   1d99e:	9605      	str	r6, [sp, #20]
   1d9a0:	46a3      	mov	fp, r4
   1d9a2:	461c      	mov	r4, r3
   1d9a4:	e002      	b.n	1d9ac <__gnu_unwind_pr_common+0x1cc>
   1d9a6:	45b2      	cmp	sl, r6
   1d9a8:	46b0      	mov	r8, r6
   1d9aa:	d016      	beq.n	1d9da <__gnu_unwind_pr_common+0x1fa>
   1d9ac:	4638      	mov	r0, r7
   1d9ae:	9406      	str	r4, [sp, #24]
   1d9b0:	f7ff fd8c 	bl	1d4cc <_Unwind_decode_typeinfo_ptr.isra.0>
   1d9b4:	ab06      	add	r3, sp, #24
   1d9b6:	4601      	mov	r1, r0
   1d9b8:	2200      	movs	r2, #0
   1d9ba:	4628      	mov	r0, r5
   1d9bc:	f7f6 fdae 	bl	1451c <__cxa_type_match>
   1d9c0:	f108 0601 	add.w	r6, r8, #1
   1d9c4:	3704      	adds	r7, #4
   1d9c6:	2800      	cmp	r0, #0
   1d9c8:	d0ed      	beq.n	1d9a6 <__gnu_unwind_pr_common+0x1c6>
   1d9ca:	9b02      	ldr	r3, [sp, #8]
   1d9cc:	9e05      	ldr	r6, [sp, #20]
   1d9ce:	4543      	cmp	r3, r8
   1d9d0:	465c      	mov	r4, fp
   1d9d2:	f8dd b010 	ldr.w	fp, [sp, #16]
   1d9d6:	d1d2      	bne.n	1d97e <__gnu_unwind_pr_common+0x19e>
   1d9d8:	e000      	b.n	1d9dc <__gnu_unwind_pr_common+0x1fc>
   1d9da:	465c      	mov	r4, fp
   1d9dc:	4648      	mov	r0, r9
   1d9de:	210d      	movs	r1, #13
   1d9e0:	f7ff fe92 	bl	1d708 <_Unwind_GetGR>
   1d9e4:	9b06      	ldr	r3, [sp, #24]
   1d9e6:	6228      	str	r0, [r5, #32]
   1d9e8:	62ac      	str	r4, [r5, #40]	; 0x28
   1d9ea:	626b      	str	r3, [r5, #36]	; 0x24
   1d9ec:	2006      	movs	r0, #6
   1d9ee:	e75f      	b.n	1d8b0 <__gnu_unwind_pr_common+0xd0>
   1d9f0:	210f      	movs	r1, #15
   1d9f2:	4648      	mov	r0, r9
   1d9f4:	f7ff fe88 	bl	1d708 <_Unwind_GetGR>
   1d9f8:	210e      	movs	r1, #14
   1d9fa:	4602      	mov	r2, r0
   1d9fc:	4648      	mov	r0, r9
   1d9fe:	f7ff fea9 	bl	1d754 <_Unwind_SetGR>
   1da02:	4648      	mov	r0, r9
   1da04:	4a29      	ldr	r2, [pc, #164]	; (1daac <__gnu_unwind_pr_common+0x2cc>)
   1da06:	210f      	movs	r1, #15
   1da08:	f7ff fea4 	bl	1d754 <_Unwind_SetGR>
   1da0c:	2007      	movs	r0, #7
   1da0e:	e74f      	b.n	1d8b0 <__gnu_unwind_pr_common+0xd0>
   1da10:	4607      	mov	r7, r0
   1da12:	210d      	movs	r1, #13
   1da14:	4648      	mov	r0, r9
   1da16:	f7ff fe77 	bl	1d708 <_Unwind_GetGR>
   1da1a:	2f02      	cmp	r7, #2
   1da1c:	6228      	str	r0, [r5, #32]
   1da1e:	d11d      	bne.n	1da5c <__gnu_unwind_pr_common+0x27c>
   1da20:	462b      	mov	r3, r5
   1da22:	9a06      	ldr	r2, [sp, #24]
   1da24:	f843 2f2c 	str.w	r2, [r3, #44]!
   1da28:	626b      	str	r3, [r5, #36]	; 0x24
   1da2a:	62ac      	str	r4, [r5, #40]	; 0x28
   1da2c:	2006      	movs	r0, #6
   1da2e:	e73f      	b.n	1d8b0 <__gnu_unwind_pr_common+0xd0>
   1da30:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1da32:	429c      	cmp	r4, r3
   1da34:	d1a3      	bne.n	1d97e <__gnu_unwind_pr_common+0x19e>
   1da36:	2204      	movs	r2, #4
   1da38:	2700      	movs	r7, #0
   1da3a:	18a3      	adds	r3, r4, r2
   1da3c:	9902      	ldr	r1, [sp, #8]
   1da3e:	62a9      	str	r1, [r5, #40]	; 0x28
   1da40:	62ef      	str	r7, [r5, #44]	; 0x2c
   1da42:	632a      	str	r2, [r5, #48]	; 0x30
   1da44:	636b      	str	r3, [r5, #52]	; 0x34
   1da46:	6823      	ldr	r3, [r4, #0]
   1da48:	42bb      	cmp	r3, r7
   1da4a:	db1d      	blt.n	1da88 <__gnu_unwind_pr_common+0x2a8>
   1da4c:	2301      	movs	r3, #1
   1da4e:	9301      	str	r3, [sp, #4]
   1da50:	e720      	b.n	1d894 <__gnu_unwind_pr_common+0xb4>
   1da52:	4648      	mov	r0, r9
   1da54:	210d      	movs	r1, #13
   1da56:	f7ff fe57 	bl	1d708 <_Unwind_GetGR>
   1da5a:	6228      	str	r0, [r5, #32]
   1da5c:	9b06      	ldr	r3, [sp, #24]
   1da5e:	626b      	str	r3, [r5, #36]	; 0x24
   1da60:	e7e3      	b.n	1da2a <__gnu_unwind_pr_common+0x24a>
   1da62:	4620      	mov	r0, r4
   1da64:	f7ff fc68 	bl	1d338 <selfrel_offset31>
   1da68:	3404      	adds	r4, #4
   1da6a:	4606      	mov	r6, r0
   1da6c:	63ac      	str	r4, [r5, #56]	; 0x38
   1da6e:	4628      	mov	r0, r5
   1da70:	f7f6 fdb0 	bl	145d4 <__cxa_begin_cleanup>
   1da74:	2800      	cmp	r0, #0
   1da76:	f43f af1a 	beq.w	1d8ae <__gnu_unwind_pr_common+0xce>
   1da7a:	4648      	mov	r0, r9
   1da7c:	4632      	mov	r2, r6
   1da7e:	210f      	movs	r1, #15
   1da80:	f7ff fe68 	bl	1d754 <_Unwind_SetGR>
   1da84:	2007      	movs	r0, #7
   1da86:	e713      	b.n	1d8b0 <__gnu_unwind_pr_common+0xd0>
   1da88:	4608      	mov	r0, r1
   1da8a:	3001      	adds	r0, #1
   1da8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1da90:	f7ff fc52 	bl	1d338 <selfrel_offset31>
   1da94:	210f      	movs	r1, #15
   1da96:	4602      	mov	r2, r0
   1da98:	4648      	mov	r0, r9
   1da9a:	f7ff fe5b 	bl	1d754 <_Unwind_SetGR>
   1da9e:	4648      	mov	r0, r9
   1daa0:	462a      	mov	r2, r5
   1daa2:	4639      	mov	r1, r7
   1daa4:	f7ff fe56 	bl	1d754 <_Unwind_SetGR>
   1daa8:	2007      	movs	r0, #7
   1daaa:	e701      	b.n	1d8b0 <__gnu_unwind_pr_common+0xd0>
   1daac:	00014705 	.word	0x00014705

0001dab0 <__aeabi_unwind_cpp_pr0>:
   1dab0:	2300      	movs	r3, #0
   1dab2:	e695      	b.n	1d7e0 <__gnu_unwind_pr_common>

0001dab4 <__aeabi_unwind_cpp_pr1>:
   1dab4:	2301      	movs	r3, #1
   1dab6:	e693      	b.n	1d7e0 <__gnu_unwind_pr_common>

0001dab8 <__aeabi_unwind_cpp_pr2>:
   1dab8:	2302      	movs	r3, #2
   1daba:	e691      	b.n	1d7e0 <__gnu_unwind_pr_common>

0001dabc <_Unwind_VRS_Pop>:
   1dabc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dabe:	4604      	mov	r4, r0
   1dac0:	b0c5      	sub	sp, #276	; 0x114
   1dac2:	2904      	cmp	r1, #4
   1dac4:	d80d      	bhi.n	1dae2 <_Unwind_VRS_Pop+0x26>
   1dac6:	e8df f001 	tbb	[pc, r1]
   1daca:	0353      	.short	0x0353
   1dacc:	310c      	.short	0x310c
   1dace:	0f          	.byte	0x0f
   1dacf:	00          	.byte	0x00
   1dad0:	2b01      	cmp	r3, #1
   1dad2:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1dad6:	b295      	uxth	r5, r2
   1dad8:	d162      	bne.n	1dba0 <_Unwind_VRS_Pop+0xe4>
   1dada:	1972      	adds	r2, r6, r5
   1dadc:	2a10      	cmp	r2, #16
   1dade:	f240 809b 	bls.w	1dc18 <_Unwind_VRS_Pop+0x15c>
   1dae2:	2002      	movs	r0, #2
   1dae4:	b045      	add	sp, #276	; 0x114
   1dae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dae8:	2b00      	cmp	r3, #0
   1daea:	d1fa      	bne.n	1dae2 <_Unwind_VRS_Pop+0x26>
   1daec:	2a10      	cmp	r2, #16
   1daee:	d8f8      	bhi.n	1dae2 <_Unwind_VRS_Pop+0x26>
   1daf0:	6823      	ldr	r3, [r4, #0]
   1daf2:	06d8      	lsls	r0, r3, #27
   1daf4:	f100 80c6 	bmi.w	1dc84 <_Unwind_VRS_Pop+0x1c8>
   1daf8:	ae22      	add	r6, sp, #136	; 0x88
   1dafa:	4630      	mov	r0, r6
   1dafc:	9201      	str	r2, [sp, #4]
   1dafe:	f000 f973 	bl	1dde8 <__gnu_Unwind_Save_WMMXC>
   1db02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1db04:	9a01      	ldr	r2, [sp, #4]
   1db06:	2300      	movs	r3, #0
   1db08:	2501      	movs	r5, #1
   1db0a:	fa05 f103 	lsl.w	r1, r5, r3
   1db0e:	4211      	tst	r1, r2
   1db10:	d003      	beq.n	1db1a <_Unwind_VRS_Pop+0x5e>
   1db12:	6801      	ldr	r1, [r0, #0]
   1db14:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1db18:	3004      	adds	r0, #4
   1db1a:	3301      	adds	r3, #1
   1db1c:	2b04      	cmp	r3, #4
   1db1e:	d1f4      	bne.n	1db0a <_Unwind_VRS_Pop+0x4e>
   1db20:	63a0      	str	r0, [r4, #56]	; 0x38
   1db22:	4630      	mov	r0, r6
   1db24:	f000 f956 	bl	1ddd4 <__gnu_Unwind_Restore_WMMXC>
   1db28:	2000      	movs	r0, #0
   1db2a:	e7db      	b.n	1dae4 <_Unwind_VRS_Pop+0x28>
   1db2c:	2b03      	cmp	r3, #3
   1db2e:	d1d8      	bne.n	1dae2 <_Unwind_VRS_Pop+0x26>
   1db30:	0c15      	lsrs	r5, r2, #16
   1db32:	b297      	uxth	r7, r2
   1db34:	19eb      	adds	r3, r5, r7
   1db36:	2b10      	cmp	r3, #16
   1db38:	d8d3      	bhi.n	1dae2 <_Unwind_VRS_Pop+0x26>
   1db3a:	6823      	ldr	r3, [r4, #0]
   1db3c:	071e      	lsls	r6, r3, #28
   1db3e:	f100 80b5 	bmi.w	1dcac <_Unwind_VRS_Pop+0x1f0>
   1db42:	ae22      	add	r6, sp, #136	; 0x88
   1db44:	4630      	mov	r0, r6
   1db46:	f000 f923 	bl	1dd90 <__gnu_Unwind_Save_WMMXD>
   1db4a:	00ed      	lsls	r5, r5, #3
   1db4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1db4e:	b14f      	cbz	r7, 1db64 <_Unwind_VRS_Pop+0xa8>
   1db50:	3d04      	subs	r5, #4
   1db52:	1971      	adds	r1, r6, r5
   1db54:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1db58:	f853 2b04 	ldr.w	r2, [r3], #4
   1db5c:	f841 2f04 	str.w	r2, [r1, #4]!
   1db60:	4283      	cmp	r3, r0
   1db62:	d1f9      	bne.n	1db58 <_Unwind_VRS_Pop+0x9c>
   1db64:	4630      	mov	r0, r6
   1db66:	63a3      	str	r3, [r4, #56]	; 0x38
   1db68:	f000 f8f0 	bl	1dd4c <__gnu_Unwind_Restore_WMMXD>
   1db6c:	2000      	movs	r0, #0
   1db6e:	e7b9      	b.n	1dae4 <_Unwind_VRS_Pop+0x28>
   1db70:	2b00      	cmp	r3, #0
   1db72:	d1b6      	bne.n	1dae2 <_Unwind_VRS_Pop+0x26>
   1db74:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1db76:	b297      	uxth	r7, r2
   1db78:	1d20      	adds	r0, r4, #4
   1db7a:	2601      	movs	r6, #1
   1db7c:	fa06 f103 	lsl.w	r1, r6, r3
   1db80:	4239      	tst	r1, r7
   1db82:	f103 0301 	add.w	r3, r3, #1
   1db86:	d002      	beq.n	1db8e <_Unwind_VRS_Pop+0xd2>
   1db88:	6829      	ldr	r1, [r5, #0]
   1db8a:	6001      	str	r1, [r0, #0]
   1db8c:	3504      	adds	r5, #4
   1db8e:	2b10      	cmp	r3, #16
   1db90:	f100 0004 	add.w	r0, r0, #4
   1db94:	d1f2      	bne.n	1db7c <_Unwind_VRS_Pop+0xc0>
   1db96:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1db9a:	d13b      	bne.n	1dc14 <_Unwind_VRS_Pop+0x158>
   1db9c:	63a5      	str	r5, [r4, #56]	; 0x38
   1db9e:	e7a1      	b.n	1dae4 <_Unwind_VRS_Pop+0x28>
   1dba0:	2b05      	cmp	r3, #5
   1dba2:	d19e      	bne.n	1dae2 <_Unwind_VRS_Pop+0x26>
   1dba4:	1977      	adds	r7, r6, r5
   1dba6:	2f20      	cmp	r7, #32
   1dba8:	d89b      	bhi.n	1dae2 <_Unwind_VRS_Pop+0x26>
   1dbaa:	2e0f      	cmp	r6, #15
   1dbac:	d966      	bls.n	1dc7c <_Unwind_VRS_Pop+0x1c0>
   1dbae:	462f      	mov	r7, r5
   1dbb0:	2d00      	cmp	r5, #0
   1dbb2:	d13a      	bne.n	1dc2a <_Unwind_VRS_Pop+0x16e>
   1dbb4:	462a      	mov	r2, r5
   1dbb6:	2700      	movs	r7, #0
   1dbb8:	2a00      	cmp	r2, #0
   1dbba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1dbbc:	dd72      	ble.n	1dca4 <_Unwind_VRS_Pop+0x1e8>
   1dbbe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1dbc2:	4601      	mov	r1, r0
   1dbc4:	a844      	add	r0, sp, #272	; 0x110
   1dbc6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1dbca:	388c      	subs	r0, #140	; 0x8c
   1dbcc:	f851 5b04 	ldr.w	r5, [r1], #4
   1dbd0:	f840 5f04 	str.w	r5, [r0, #4]!
   1dbd4:	4291      	cmp	r1, r2
   1dbd6:	d1f9      	bne.n	1dbcc <_Unwind_VRS_Pop+0x110>
   1dbd8:	4608      	mov	r0, r1
   1dbda:	b197      	cbz	r7, 1dc02 <_Unwind_VRS_Pop+0x146>
   1dbdc:	2e10      	cmp	r6, #16
   1dbde:	4632      	mov	r2, r6
   1dbe0:	a944      	add	r1, sp, #272	; 0x110
   1dbe2:	bf38      	it	cc
   1dbe4:	2210      	movcc	r2, #16
   1dbe6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1dbea:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1dbee:	0079      	lsls	r1, r7, #1
   1dbf0:	3a04      	subs	r2, #4
   1dbf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1dbf6:	f850 5b04 	ldr.w	r5, [r0], #4
   1dbfa:	f842 5f04 	str.w	r5, [r2, #4]!
   1dbfe:	4288      	cmp	r0, r1
   1dc00:	d1f9      	bne.n	1dbf6 <_Unwind_VRS_Pop+0x13a>
   1dc02:	2b01      	cmp	r3, #1
   1dc04:	d048      	beq.n	1dc98 <_Unwind_VRS_Pop+0x1dc>
   1dc06:	2e0f      	cmp	r6, #15
   1dc08:	63a1      	str	r1, [r4, #56]	; 0x38
   1dc0a:	d933      	bls.n	1dc74 <_Unwind_VRS_Pop+0x1b8>
   1dc0c:	b117      	cbz	r7, 1dc14 <_Unwind_VRS_Pop+0x158>
   1dc0e:	a802      	add	r0, sp, #8
   1dc10:	f000 f894 	bl	1dd3c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1dc14:	2000      	movs	r0, #0
   1dc16:	e765      	b.n	1dae4 <_Unwind_VRS_Pop+0x28>
   1dc18:	2e0f      	cmp	r6, #15
   1dc1a:	f63f af62 	bhi.w	1dae2 <_Unwind_VRS_Pop+0x26>
   1dc1e:	2700      	movs	r7, #0
   1dc20:	6822      	ldr	r2, [r4, #0]
   1dc22:	07d1      	lsls	r1, r2, #31
   1dc24:	d417      	bmi.n	1dc56 <_Unwind_VRS_Pop+0x19a>
   1dc26:	2f00      	cmp	r7, #0
   1dc28:	d060      	beq.n	1dcec <_Unwind_VRS_Pop+0x230>
   1dc2a:	6822      	ldr	r2, [r4, #0]
   1dc2c:	0751      	lsls	r1, r2, #29
   1dc2e:	d445      	bmi.n	1dcbc <_Unwind_VRS_Pop+0x200>
   1dc30:	2b01      	cmp	r3, #1
   1dc32:	d04d      	beq.n	1dcd0 <_Unwind_VRS_Pop+0x214>
   1dc34:	2e0f      	cmp	r6, #15
   1dc36:	d806      	bhi.n	1dc46 <_Unwind_VRS_Pop+0x18a>
   1dc38:	a822      	add	r0, sp, #136	; 0x88
   1dc3a:	9301      	str	r3, [sp, #4]
   1dc3c:	f000 f87a 	bl	1dd34 <__gnu_Unwind_Save_VFP_D>
   1dc40:	9b01      	ldr	r3, [sp, #4]
   1dc42:	2f00      	cmp	r7, #0
   1dc44:	d0b6      	beq.n	1dbb4 <_Unwind_VRS_Pop+0xf8>
   1dc46:	a802      	add	r0, sp, #8
   1dc48:	9301      	str	r3, [sp, #4]
   1dc4a:	f000 f87b 	bl	1dd44 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1dc4e:	9b01      	ldr	r3, [sp, #4]
   1dc50:	f1c6 0210 	rsb	r2, r6, #16
   1dc54:	e7b0      	b.n	1dbb8 <_Unwind_VRS_Pop+0xfc>
   1dc56:	f022 0101 	bic.w	r1, r2, #1
   1dc5a:	2b05      	cmp	r3, #5
   1dc5c:	6021      	str	r1, [r4, #0]
   1dc5e:	9301      	str	r3, [sp, #4]
   1dc60:	4620      	mov	r0, r4
   1dc62:	d03b      	beq.n	1dcdc <_Unwind_VRS_Pop+0x220>
   1dc64:	f022 0203 	bic.w	r2, r2, #3
   1dc68:	f840 2b48 	str.w	r2, [r0], #72
   1dc6c:	f000 f85a 	bl	1dd24 <__gnu_Unwind_Save_VFP>
   1dc70:	9b01      	ldr	r3, [sp, #4]
   1dc72:	e7d8      	b.n	1dc26 <_Unwind_VRS_Pop+0x16a>
   1dc74:	a822      	add	r0, sp, #136	; 0x88
   1dc76:	f000 f859 	bl	1dd2c <__gnu_Unwind_Restore_VFP_D>
   1dc7a:	e7c7      	b.n	1dc0c <_Unwind_VRS_Pop+0x150>
   1dc7c:	2f10      	cmp	r7, #16
   1dc7e:	d9ce      	bls.n	1dc1e <_Unwind_VRS_Pop+0x162>
   1dc80:	3f10      	subs	r7, #16
   1dc82:	e7cd      	b.n	1dc20 <_Unwind_VRS_Pop+0x164>
   1dc84:	f023 0310 	bic.w	r3, r3, #16
   1dc88:	6023      	str	r3, [r4, #0]
   1dc8a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1dc8e:	9201      	str	r2, [sp, #4]
   1dc90:	f000 f8aa 	bl	1dde8 <__gnu_Unwind_Save_WMMXC>
   1dc94:	9a01      	ldr	r2, [sp, #4]
   1dc96:	e72f      	b.n	1daf8 <_Unwind_VRS_Pop+0x3c>
   1dc98:	3104      	adds	r1, #4
   1dc9a:	63a1      	str	r1, [r4, #56]	; 0x38
   1dc9c:	a822      	add	r0, sp, #136	; 0x88
   1dc9e:	f000 f83d 	bl	1dd1c <__gnu_Unwind_Restore_VFP>
   1dca2:	e7b7      	b.n	1dc14 <_Unwind_VRS_Pop+0x158>
   1dca4:	2f00      	cmp	r7, #0
   1dca6:	d199      	bne.n	1dbdc <_Unwind_VRS_Pop+0x120>
   1dca8:	4601      	mov	r1, r0
   1dcaa:	e7aa      	b.n	1dc02 <_Unwind_VRS_Pop+0x146>
   1dcac:	f023 0308 	bic.w	r3, r3, #8
   1dcb0:	6023      	str	r3, [r4, #0]
   1dcb2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1dcb6:	f000 f86b 	bl	1dd90 <__gnu_Unwind_Save_WMMXD>
   1dcba:	e742      	b.n	1db42 <_Unwind_VRS_Pop+0x86>
   1dcbc:	4620      	mov	r0, r4
   1dcbe:	f022 0204 	bic.w	r2, r2, #4
   1dcc2:	f840 2bd0 	str.w	r2, [r0], #208
   1dcc6:	9301      	str	r3, [sp, #4]
   1dcc8:	f000 f83c 	bl	1dd44 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1dccc:	9b01      	ldr	r3, [sp, #4]
   1dcce:	e7af      	b.n	1dc30 <_Unwind_VRS_Pop+0x174>
   1dcd0:	a822      	add	r0, sp, #136	; 0x88
   1dcd2:	9301      	str	r3, [sp, #4]
   1dcd4:	f000 f826 	bl	1dd24 <__gnu_Unwind_Save_VFP>
   1dcd8:	9b01      	ldr	r3, [sp, #4]
   1dcda:	e7b9      	b.n	1dc50 <_Unwind_VRS_Pop+0x194>
   1dcdc:	f041 0102 	orr.w	r1, r1, #2
   1dce0:	f840 1b48 	str.w	r1, [r0], #72
   1dce4:	f000 f826 	bl	1dd34 <__gnu_Unwind_Save_VFP_D>
   1dce8:	9b01      	ldr	r3, [sp, #4]
   1dcea:	e79c      	b.n	1dc26 <_Unwind_VRS_Pop+0x16a>
   1dcec:	2b01      	cmp	r3, #1
   1dcee:	d003      	beq.n	1dcf8 <_Unwind_VRS_Pop+0x23c>
   1dcf0:	2e0f      	cmp	r6, #15
   1dcf2:	f63f af5f 	bhi.w	1dbb4 <_Unwind_VRS_Pop+0xf8>
   1dcf6:	e79f      	b.n	1dc38 <_Unwind_VRS_Pop+0x17c>
   1dcf8:	a822      	add	r0, sp, #136	; 0x88
   1dcfa:	9301      	str	r3, [sp, #4]
   1dcfc:	f000 f812 	bl	1dd24 <__gnu_Unwind_Save_VFP>
   1dd00:	9b01      	ldr	r3, [sp, #4]
   1dd02:	e757      	b.n	1dbb4 <_Unwind_VRS_Pop+0xf8>

0001dd04 <__restore_core_regs>:
   1dd04:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1dd08:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1dd0c:	469c      	mov	ip, r3
   1dd0e:	46a6      	mov	lr, r4
   1dd10:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1dd14:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1dd18:	46e5      	mov	sp, ip
   1dd1a:	bd00      	pop	{pc}

0001dd1c <__gnu_Unwind_Restore_VFP>:
   1dd1c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1dd20:	4770      	bx	lr
   1dd22:	bf00      	nop

0001dd24 <__gnu_Unwind_Save_VFP>:
   1dd24:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1dd28:	4770      	bx	lr
   1dd2a:	bf00      	nop

0001dd2c <__gnu_Unwind_Restore_VFP_D>:
   1dd2c:	ec90 0b20 	vldmia	r0, {d0-d15}
   1dd30:	4770      	bx	lr
   1dd32:	bf00      	nop

0001dd34 <__gnu_Unwind_Save_VFP_D>:
   1dd34:	ec80 0b20 	vstmia	r0, {d0-d15}
   1dd38:	4770      	bx	lr
   1dd3a:	bf00      	nop

0001dd3c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1dd3c:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1dd40:	4770      	bx	lr
   1dd42:	bf00      	nop

0001dd44 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1dd44:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1dd48:	4770      	bx	lr
   1dd4a:	bf00      	nop

0001dd4c <__gnu_Unwind_Restore_WMMXD>:
   1dd4c:	ecf0 0102 	ldfe	f0, [r0], #8
   1dd50:	ecf0 1102 	ldfe	f1, [r0], #8
   1dd54:	ecf0 2102 	ldfe	f2, [r0], #8
   1dd58:	ecf0 3102 	ldfe	f3, [r0], #8
   1dd5c:	ecf0 4102 	ldfe	f4, [r0], #8
   1dd60:	ecf0 5102 	ldfe	f5, [r0], #8
   1dd64:	ecf0 6102 	ldfe	f6, [r0], #8
   1dd68:	ecf0 7102 	ldfe	f7, [r0], #8
   1dd6c:	ecf0 8102 	ldfp	f0, [r0], #8
   1dd70:	ecf0 9102 	ldfp	f1, [r0], #8
   1dd74:	ecf0 a102 	ldfp	f2, [r0], #8
   1dd78:	ecf0 b102 	ldfp	f3, [r0], #8
   1dd7c:	ecf0 c102 	ldfp	f4, [r0], #8
   1dd80:	ecf0 d102 	ldfp	f5, [r0], #8
   1dd84:	ecf0 e102 	ldfp	f6, [r0], #8
   1dd88:	ecf0 f102 	ldfp	f7, [r0], #8
   1dd8c:	4770      	bx	lr
   1dd8e:	bf00      	nop

0001dd90 <__gnu_Unwind_Save_WMMXD>:
   1dd90:	ece0 0102 	stfe	f0, [r0], #8
   1dd94:	ece0 1102 	stfe	f1, [r0], #8
   1dd98:	ece0 2102 	stfe	f2, [r0], #8
   1dd9c:	ece0 3102 	stfe	f3, [r0], #8
   1dda0:	ece0 4102 	stfe	f4, [r0], #8
   1dda4:	ece0 5102 	stfe	f5, [r0], #8
   1dda8:	ece0 6102 	stfe	f6, [r0], #8
   1ddac:	ece0 7102 	stfe	f7, [r0], #8
   1ddb0:	ece0 8102 	stfp	f0, [r0], #8
   1ddb4:	ece0 9102 	stfp	f1, [r0], #8
   1ddb8:	ece0 a102 	stfp	f2, [r0], #8
   1ddbc:	ece0 b102 	stfp	f3, [r0], #8
   1ddc0:	ece0 c102 	stfp	f4, [r0], #8
   1ddc4:	ece0 d102 	stfp	f5, [r0], #8
   1ddc8:	ece0 e102 	stfp	f6, [r0], #8
   1ddcc:	ece0 f102 	stfp	f7, [r0], #8
   1ddd0:	4770      	bx	lr
   1ddd2:	bf00      	nop

0001ddd4 <__gnu_Unwind_Restore_WMMXC>:
   1ddd4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1ddd8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1dddc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1dde0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1dde4:	4770      	bx	lr
   1dde6:	bf00      	nop

0001dde8 <__gnu_Unwind_Save_WMMXC>:
   1dde8:	fca0 8101 	stc2	1, cr8, [r0], #4
   1ddec:	fca0 9101 	stc2	1, cr9, [r0], #4
   1ddf0:	fca0 a101 	stc2	1, cr10, [r0], #4
   1ddf4:	fca0 b101 	stc2	1, cr11, [r0], #4
   1ddf8:	4770      	bx	lr
   1ddfa:	bf00      	nop

0001ddfc <_Unwind_RaiseException>:
   1ddfc:	46ec      	mov	ip, sp
   1ddfe:	b500      	push	{lr}
   1de00:	e92d 5000 	stmdb	sp!, {ip, lr}
   1de04:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1de08:	f04f 0300 	mov.w	r3, #0
   1de0c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1de10:	a901      	add	r1, sp, #4
   1de12:	f7ff fbf3 	bl	1d5fc <__gnu_Unwind_RaiseException>
   1de16:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1de1a:	b012      	add	sp, #72	; 0x48
   1de1c:	4770      	bx	lr
   1de1e:	bf00      	nop

0001de20 <_Unwind_Resume>:
   1de20:	46ec      	mov	ip, sp
   1de22:	b500      	push	{lr}
   1de24:	e92d 5000 	stmdb	sp!, {ip, lr}
   1de28:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1de2c:	f04f 0300 	mov.w	r3, #0
   1de30:	e92d 000c 	stmdb	sp!, {r2, r3}
   1de34:	a901      	add	r1, sp, #4
   1de36:	f7ff fc1b 	bl	1d670 <__gnu_Unwind_Resume>
   1de3a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1de3e:	b012      	add	sp, #72	; 0x48
   1de40:	4770      	bx	lr
   1de42:	bf00      	nop

0001de44 <_Unwind_Resume_or_Rethrow>:
   1de44:	46ec      	mov	ip, sp
   1de46:	b500      	push	{lr}
   1de48:	e92d 5000 	stmdb	sp!, {ip, lr}
   1de4c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1de50:	f04f 0300 	mov.w	r3, #0
   1de54:	e92d 000c 	stmdb	sp!, {r2, r3}
   1de58:	a901      	add	r1, sp, #4
   1de5a:	f7ff fc2b 	bl	1d6b4 <__gnu_Unwind_Resume_or_Rethrow>
   1de5e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1de62:	b012      	add	sp, #72	; 0x48
   1de64:	4770      	bx	lr
   1de66:	bf00      	nop

0001de68 <_Unwind_ForcedUnwind>:
   1de68:	46ec      	mov	ip, sp
   1de6a:	b500      	push	{lr}
   1de6c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1de70:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1de74:	f04f 0300 	mov.w	r3, #0
   1de78:	e92d 000c 	stmdb	sp!, {r2, r3}
   1de7c:	ab01      	add	r3, sp, #4
   1de7e:	f7ff fbed 	bl	1d65c <__gnu_Unwind_ForcedUnwind>
   1de82:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1de86:	b012      	add	sp, #72	; 0x48
   1de88:	4770      	bx	lr
   1de8a:	bf00      	nop

0001de8c <_Unwind_Backtrace>:
   1de8c:	46ec      	mov	ip, sp
   1de8e:	b500      	push	{lr}
   1de90:	e92d 5000 	stmdb	sp!, {ip, lr}
   1de94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1de98:	f04f 0300 	mov.w	r3, #0
   1de9c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1dea0:	aa01      	add	r2, sp, #4
   1dea2:	f7ff fc65 	bl	1d770 <__gnu_Unwind_Backtrace>
   1dea6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1deaa:	b012      	add	sp, #72	; 0x48
   1deac:	4770      	bx	lr
   1deae:	bf00      	nop

0001deb0 <next_unwind_byte>:
   1deb0:	7a02      	ldrb	r2, [r0, #8]
   1deb2:	b91a      	cbnz	r2, 1debc <next_unwind_byte+0xc>
   1deb4:	7a43      	ldrb	r3, [r0, #9]
   1deb6:	b943      	cbnz	r3, 1deca <next_unwind_byte+0x1a>
   1deb8:	20b0      	movs	r0, #176	; 0xb0
   1deba:	4770      	bx	lr
   1debc:	6803      	ldr	r3, [r0, #0]
   1debe:	3a01      	subs	r2, #1
   1dec0:	7202      	strb	r2, [r0, #8]
   1dec2:	021a      	lsls	r2, r3, #8
   1dec4:	6002      	str	r2, [r0, #0]
   1dec6:	0e18      	lsrs	r0, r3, #24
   1dec8:	4770      	bx	lr
   1deca:	6842      	ldr	r2, [r0, #4]
   1decc:	3b01      	subs	r3, #1
   1dece:	b410      	push	{r4}
   1ded0:	7243      	strb	r3, [r0, #9]
   1ded2:	6813      	ldr	r3, [r2, #0]
   1ded4:	2103      	movs	r1, #3
   1ded6:	1d14      	adds	r4, r2, #4
   1ded8:	7201      	strb	r1, [r0, #8]
   1deda:	021a      	lsls	r2, r3, #8
   1dedc:	6044      	str	r4, [r0, #4]
   1dede:	6002      	str	r2, [r0, #0]
   1dee0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dee4:	0e18      	lsrs	r0, r3, #24
   1dee6:	4770      	bx	lr

0001dee8 <_Unwind_GetGR.constprop.0>:
   1dee8:	b500      	push	{lr}
   1deea:	b085      	sub	sp, #20
   1deec:	aa03      	add	r2, sp, #12
   1deee:	2300      	movs	r3, #0
   1def0:	9200      	str	r2, [sp, #0]
   1def2:	4619      	mov	r1, r3
   1def4:	220c      	movs	r2, #12
   1def6:	f7ff fbed 	bl	1d6d4 <_Unwind_VRS_Get>
   1defa:	9803      	ldr	r0, [sp, #12]
   1defc:	b005      	add	sp, #20
   1defe:	f85d fb04 	ldr.w	pc, [sp], #4
   1df02:	bf00      	nop

0001df04 <unwind_UCB_from_context>:
   1df04:	e7f0      	b.n	1dee8 <_Unwind_GetGR.constprop.0>
   1df06:	bf00      	nop

0001df08 <__gnu_unwind_execute>:
   1df08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1df0c:	4606      	mov	r6, r0
   1df0e:	b085      	sub	sp, #20
   1df10:	460f      	mov	r7, r1
   1df12:	f04f 0800 	mov.w	r8, #0
   1df16:	4638      	mov	r0, r7
   1df18:	f7ff ffca 	bl	1deb0 <next_unwind_byte>
   1df1c:	28b0      	cmp	r0, #176	; 0xb0
   1df1e:	4604      	mov	r4, r0
   1df20:	d023      	beq.n	1df6a <__gnu_unwind_execute+0x62>
   1df22:	0605      	lsls	r5, r0, #24
   1df24:	d427      	bmi.n	1df76 <__gnu_unwind_execute+0x6e>
   1df26:	2300      	movs	r3, #0
   1df28:	f10d 090c 	add.w	r9, sp, #12
   1df2c:	4619      	mov	r1, r3
   1df2e:	0085      	lsls	r5, r0, #2
   1df30:	220d      	movs	r2, #13
   1df32:	f8cd 9000 	str.w	r9, [sp]
   1df36:	4630      	mov	r0, r6
   1df38:	f7ff fbcc 	bl	1d6d4 <_Unwind_VRS_Get>
   1df3c:	b2ed      	uxtb	r5, r5
   1df3e:	9b03      	ldr	r3, [sp, #12]
   1df40:	f8cd 9000 	str.w	r9, [sp]
   1df44:	0660      	lsls	r0, r4, #25
   1df46:	f105 0504 	add.w	r5, r5, #4
   1df4a:	bf4c      	ite	mi
   1df4c:	1b5d      	submi	r5, r3, r5
   1df4e:	18ed      	addpl	r5, r5, r3
   1df50:	2300      	movs	r3, #0
   1df52:	4619      	mov	r1, r3
   1df54:	220d      	movs	r2, #13
   1df56:	4630      	mov	r0, r6
   1df58:	9503      	str	r5, [sp, #12]
   1df5a:	f7ff fbe1 	bl	1d720 <_Unwind_VRS_Set>
   1df5e:	4638      	mov	r0, r7
   1df60:	f7ff ffa6 	bl	1deb0 <next_unwind_byte>
   1df64:	28b0      	cmp	r0, #176	; 0xb0
   1df66:	4604      	mov	r4, r0
   1df68:	d1db      	bne.n	1df22 <__gnu_unwind_execute+0x1a>
   1df6a:	f1b8 0f00 	cmp.w	r8, #0
   1df6e:	f000 8095 	beq.w	1e09c <__gnu_unwind_execute+0x194>
   1df72:	2000      	movs	r0, #0
   1df74:	e01c      	b.n	1dfb0 <__gnu_unwind_execute+0xa8>
   1df76:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1df7a:	2b80      	cmp	r3, #128	; 0x80
   1df7c:	d05d      	beq.n	1e03a <__gnu_unwind_execute+0x132>
   1df7e:	2b90      	cmp	r3, #144	; 0x90
   1df80:	d019      	beq.n	1dfb6 <__gnu_unwind_execute+0xae>
   1df82:	2ba0      	cmp	r3, #160	; 0xa0
   1df84:	d02c      	beq.n	1dfe0 <__gnu_unwind_execute+0xd8>
   1df86:	2bb0      	cmp	r3, #176	; 0xb0
   1df88:	d03f      	beq.n	1e00a <__gnu_unwind_execute+0x102>
   1df8a:	2bc0      	cmp	r3, #192	; 0xc0
   1df8c:	d06c      	beq.n	1e068 <__gnu_unwind_execute+0x160>
   1df8e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1df92:	2bd0      	cmp	r3, #208	; 0xd0
   1df94:	d10b      	bne.n	1dfae <__gnu_unwind_execute+0xa6>
   1df96:	f000 0207 	and.w	r2, r0, #7
   1df9a:	3201      	adds	r2, #1
   1df9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1dfa0:	2305      	movs	r3, #5
   1dfa2:	2101      	movs	r1, #1
   1dfa4:	4630      	mov	r0, r6
   1dfa6:	f7ff fd89 	bl	1dabc <_Unwind_VRS_Pop>
   1dfaa:	2800      	cmp	r0, #0
   1dfac:	d0b3      	beq.n	1df16 <__gnu_unwind_execute+0xe>
   1dfae:	2009      	movs	r0, #9
   1dfb0:	b005      	add	sp, #20
   1dfb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dfb6:	f000 030d 	and.w	r3, r0, #13
   1dfba:	2b0d      	cmp	r3, #13
   1dfbc:	d0f7      	beq.n	1dfae <__gnu_unwind_execute+0xa6>
   1dfbe:	ad03      	add	r5, sp, #12
   1dfc0:	2300      	movs	r3, #0
   1dfc2:	f000 020f 	and.w	r2, r0, #15
   1dfc6:	4619      	mov	r1, r3
   1dfc8:	9500      	str	r5, [sp, #0]
   1dfca:	4630      	mov	r0, r6
   1dfcc:	f7ff fb82 	bl	1d6d4 <_Unwind_VRS_Get>
   1dfd0:	2300      	movs	r3, #0
   1dfd2:	9500      	str	r5, [sp, #0]
   1dfd4:	4619      	mov	r1, r3
   1dfd6:	220d      	movs	r2, #13
   1dfd8:	4630      	mov	r0, r6
   1dfda:	f7ff fba1 	bl	1d720 <_Unwind_VRS_Set>
   1dfde:	e79a      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1dfe0:	43c2      	mvns	r2, r0
   1dfe2:	f002 0307 	and.w	r3, r2, #7
   1dfe6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1dfea:	411a      	asrs	r2, r3
   1dfec:	0701      	lsls	r1, r0, #28
   1dfee:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1dff2:	f04f 0300 	mov.w	r3, #0
   1dff6:	bf48      	it	mi
   1dff8:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1dffc:	4619      	mov	r1, r3
   1dffe:	4630      	mov	r0, r6
   1e000:	f7ff fd5c 	bl	1dabc <_Unwind_VRS_Pop>
   1e004:	2800      	cmp	r0, #0
   1e006:	d1d2      	bne.n	1dfae <__gnu_unwind_execute+0xa6>
   1e008:	e785      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1e00a:	28b1      	cmp	r0, #177	; 0xb1
   1e00c:	d057      	beq.n	1e0be <__gnu_unwind_execute+0x1b6>
   1e00e:	28b2      	cmp	r0, #178	; 0xb2
   1e010:	d068      	beq.n	1e0e4 <__gnu_unwind_execute+0x1dc>
   1e012:	28b3      	cmp	r0, #179	; 0xb3
   1e014:	f000 8095 	beq.w	1e142 <__gnu_unwind_execute+0x23a>
   1e018:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1e01c:	2bb4      	cmp	r3, #180	; 0xb4
   1e01e:	d0c6      	beq.n	1dfae <__gnu_unwind_execute+0xa6>
   1e020:	f000 0207 	and.w	r2, r0, #7
   1e024:	3201      	adds	r2, #1
   1e026:	2301      	movs	r3, #1
   1e028:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1e02c:	4619      	mov	r1, r3
   1e02e:	4630      	mov	r0, r6
   1e030:	f7ff fd44 	bl	1dabc <_Unwind_VRS_Pop>
   1e034:	2800      	cmp	r0, #0
   1e036:	d1ba      	bne.n	1dfae <__gnu_unwind_execute+0xa6>
   1e038:	e76d      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1e03a:	4638      	mov	r0, r7
   1e03c:	f7ff ff38 	bl	1deb0 <next_unwind_byte>
   1e040:	0224      	lsls	r4, r4, #8
   1e042:	4304      	orrs	r4, r0
   1e044:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e048:	d0b1      	beq.n	1dfae <__gnu_unwind_execute+0xa6>
   1e04a:	0124      	lsls	r4, r4, #4
   1e04c:	2300      	movs	r3, #0
   1e04e:	b2a2      	uxth	r2, r4
   1e050:	4619      	mov	r1, r3
   1e052:	4630      	mov	r0, r6
   1e054:	f7ff fd32 	bl	1dabc <_Unwind_VRS_Pop>
   1e058:	2800      	cmp	r0, #0
   1e05a:	d1a8      	bne.n	1dfae <__gnu_unwind_execute+0xa6>
   1e05c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1e060:	bf18      	it	ne
   1e062:	f04f 0801 	movne.w	r8, #1
   1e066:	e756      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1e068:	28c6      	cmp	r0, #198	; 0xc6
   1e06a:	d07d      	beq.n	1e168 <__gnu_unwind_execute+0x260>
   1e06c:	28c7      	cmp	r0, #199	; 0xc7
   1e06e:	f000 8086 	beq.w	1e17e <__gnu_unwind_execute+0x276>
   1e072:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1e076:	2bc0      	cmp	r3, #192	; 0xc0
   1e078:	f000 8094 	beq.w	1e1a4 <__gnu_unwind_execute+0x29c>
   1e07c:	28c8      	cmp	r0, #200	; 0xc8
   1e07e:	f000 809f 	beq.w	1e1c0 <__gnu_unwind_execute+0x2b8>
   1e082:	28c9      	cmp	r0, #201	; 0xc9
   1e084:	d193      	bne.n	1dfae <__gnu_unwind_execute+0xa6>
   1e086:	4638      	mov	r0, r7
   1e088:	f7ff ff12 	bl	1deb0 <next_unwind_byte>
   1e08c:	0302      	lsls	r2, r0, #12
   1e08e:	f000 000f 	and.w	r0, r0, #15
   1e092:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1e096:	3001      	adds	r0, #1
   1e098:	4302      	orrs	r2, r0
   1e09a:	e781      	b.n	1dfa0 <__gnu_unwind_execute+0x98>
   1e09c:	ac03      	add	r4, sp, #12
   1e09e:	4643      	mov	r3, r8
   1e0a0:	220e      	movs	r2, #14
   1e0a2:	4641      	mov	r1, r8
   1e0a4:	9400      	str	r4, [sp, #0]
   1e0a6:	4630      	mov	r0, r6
   1e0a8:	f7ff fb14 	bl	1d6d4 <_Unwind_VRS_Get>
   1e0ac:	9400      	str	r4, [sp, #0]
   1e0ae:	4630      	mov	r0, r6
   1e0b0:	4643      	mov	r3, r8
   1e0b2:	220f      	movs	r2, #15
   1e0b4:	4641      	mov	r1, r8
   1e0b6:	f7ff fb33 	bl	1d720 <_Unwind_VRS_Set>
   1e0ba:	4640      	mov	r0, r8
   1e0bc:	e778      	b.n	1dfb0 <__gnu_unwind_execute+0xa8>
   1e0be:	4638      	mov	r0, r7
   1e0c0:	f7ff fef6 	bl	1deb0 <next_unwind_byte>
   1e0c4:	2800      	cmp	r0, #0
   1e0c6:	f43f af72 	beq.w	1dfae <__gnu_unwind_execute+0xa6>
   1e0ca:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1e0ce:	f47f af6e 	bne.w	1dfae <__gnu_unwind_execute+0xa6>
   1e0d2:	4602      	mov	r2, r0
   1e0d4:	4619      	mov	r1, r3
   1e0d6:	4630      	mov	r0, r6
   1e0d8:	f7ff fcf0 	bl	1dabc <_Unwind_VRS_Pop>
   1e0dc:	2800      	cmp	r0, #0
   1e0de:	f47f af66 	bne.w	1dfae <__gnu_unwind_execute+0xa6>
   1e0e2:	e718      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1e0e4:	2300      	movs	r3, #0
   1e0e6:	f10d 090c 	add.w	r9, sp, #12
   1e0ea:	220d      	movs	r2, #13
   1e0ec:	4619      	mov	r1, r3
   1e0ee:	f8cd 9000 	str.w	r9, [sp]
   1e0f2:	4630      	mov	r0, r6
   1e0f4:	f7ff faee 	bl	1d6d4 <_Unwind_VRS_Get>
   1e0f8:	4638      	mov	r0, r7
   1e0fa:	f7ff fed9 	bl	1deb0 <next_unwind_byte>
   1e0fe:	0602      	lsls	r2, r0, #24
   1e100:	f04f 0402 	mov.w	r4, #2
   1e104:	d50c      	bpl.n	1e120 <__gnu_unwind_execute+0x218>
   1e106:	9b03      	ldr	r3, [sp, #12]
   1e108:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1e10c:	40a0      	lsls	r0, r4
   1e10e:	4403      	add	r3, r0
   1e110:	4638      	mov	r0, r7
   1e112:	9303      	str	r3, [sp, #12]
   1e114:	f7ff fecc 	bl	1deb0 <next_unwind_byte>
   1e118:	0603      	lsls	r3, r0, #24
   1e11a:	f104 0407 	add.w	r4, r4, #7
   1e11e:	d4f2      	bmi.n	1e106 <__gnu_unwind_execute+0x1fe>
   1e120:	9b03      	ldr	r3, [sp, #12]
   1e122:	f8cd 9000 	str.w	r9, [sp]
   1e126:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1e12a:	40a2      	lsls	r2, r4
   1e12c:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1e130:	2300      	movs	r3, #0
   1e132:	4414      	add	r4, r2
   1e134:	4619      	mov	r1, r3
   1e136:	220d      	movs	r2, #13
   1e138:	4630      	mov	r0, r6
   1e13a:	9403      	str	r4, [sp, #12]
   1e13c:	f7ff faf0 	bl	1d720 <_Unwind_VRS_Set>
   1e140:	e6e9      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1e142:	4638      	mov	r0, r7
   1e144:	f7ff feb4 	bl	1deb0 <next_unwind_byte>
   1e148:	0301      	lsls	r1, r0, #12
   1e14a:	f000 000f 	and.w	r0, r0, #15
   1e14e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1e152:	1c42      	adds	r2, r0, #1
   1e154:	2301      	movs	r3, #1
   1e156:	430a      	orrs	r2, r1
   1e158:	4630      	mov	r0, r6
   1e15a:	4619      	mov	r1, r3
   1e15c:	f7ff fcae 	bl	1dabc <_Unwind_VRS_Pop>
   1e160:	2800      	cmp	r0, #0
   1e162:	f47f af24 	bne.w	1dfae <__gnu_unwind_execute+0xa6>
   1e166:	e6d6      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1e168:	4638      	mov	r0, r7
   1e16a:	f7ff fea1 	bl	1deb0 <next_unwind_byte>
   1e16e:	0301      	lsls	r1, r0, #12
   1e170:	f000 000f 	and.w	r0, r0, #15
   1e174:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1e178:	1c42      	adds	r2, r0, #1
   1e17a:	2303      	movs	r3, #3
   1e17c:	e7eb      	b.n	1e156 <__gnu_unwind_execute+0x24e>
   1e17e:	4638      	mov	r0, r7
   1e180:	f7ff fe96 	bl	1deb0 <next_unwind_byte>
   1e184:	2800      	cmp	r0, #0
   1e186:	f43f af12 	beq.w	1dfae <__gnu_unwind_execute+0xa6>
   1e18a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1e18e:	f47f af0e 	bne.w	1dfae <__gnu_unwind_execute+0xa6>
   1e192:	4602      	mov	r2, r0
   1e194:	2104      	movs	r1, #4
   1e196:	4630      	mov	r0, r6
   1e198:	f7ff fc90 	bl	1dabc <_Unwind_VRS_Pop>
   1e19c:	2800      	cmp	r0, #0
   1e19e:	f47f af06 	bne.w	1dfae <__gnu_unwind_execute+0xa6>
   1e1a2:	e6b8      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1e1a4:	f000 020f 	and.w	r2, r0, #15
   1e1a8:	3201      	adds	r2, #1
   1e1aa:	2303      	movs	r3, #3
   1e1ac:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1e1b0:	4619      	mov	r1, r3
   1e1b2:	4630      	mov	r0, r6
   1e1b4:	f7ff fc82 	bl	1dabc <_Unwind_VRS_Pop>
   1e1b8:	2800      	cmp	r0, #0
   1e1ba:	f47f aef8 	bne.w	1dfae <__gnu_unwind_execute+0xa6>
   1e1be:	e6aa      	b.n	1df16 <__gnu_unwind_execute+0xe>
   1e1c0:	4638      	mov	r0, r7
   1e1c2:	f7ff fe75 	bl	1deb0 <next_unwind_byte>
   1e1c6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1e1ca:	f000 030f 	and.w	r3, r0, #15
   1e1ce:	3210      	adds	r2, #16
   1e1d0:	3301      	adds	r3, #1
   1e1d2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1e1d6:	e6e3      	b.n	1dfa0 <__gnu_unwind_execute+0x98>

0001e1d8 <__gnu_unwind_frame>:
   1e1d8:	b510      	push	{r4, lr}
   1e1da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1e1dc:	b084      	sub	sp, #16
   1e1de:	685a      	ldr	r2, [r3, #4]
   1e1e0:	2003      	movs	r0, #3
   1e1e2:	f88d 000c 	strb.w	r0, [sp, #12]
   1e1e6:	79dc      	ldrb	r4, [r3, #7]
   1e1e8:	f88d 400d 	strb.w	r4, [sp, #13]
   1e1ec:	0212      	lsls	r2, r2, #8
   1e1ee:	3308      	adds	r3, #8
   1e1f0:	4608      	mov	r0, r1
   1e1f2:	a901      	add	r1, sp, #4
   1e1f4:	9201      	str	r2, [sp, #4]
   1e1f6:	9302      	str	r3, [sp, #8]
   1e1f8:	f7ff fe86 	bl	1df08 <__gnu_unwind_execute>
   1e1fc:	b004      	add	sp, #16
   1e1fe:	bd10      	pop	{r4, pc}

0001e200 <_Unwind_GetRegionStart>:
   1e200:	b508      	push	{r3, lr}
   1e202:	f7ff fe7f 	bl	1df04 <unwind_UCB_from_context>
   1e206:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1e208:	bd08      	pop	{r3, pc}
   1e20a:	bf00      	nop

0001e20c <_Unwind_GetLanguageSpecificData>:
   1e20c:	b508      	push	{r3, lr}
   1e20e:	f7ff fe79 	bl	1df04 <unwind_UCB_from_context>
   1e212:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1e214:	79c3      	ldrb	r3, [r0, #7]
   1e216:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1e21a:	3008      	adds	r0, #8
   1e21c:	bd08      	pop	{r3, pc}
   1e21e:	bf00      	nop

0001e220 <_Unwind_GetTextRelBase>:
   1e220:	b508      	push	{r3, lr}
   1e222:	f000 f807 	bl	1e234 <abort>
   1e226:	bf00      	nop

0001e228 <_Unwind_GetDataRelBase>:
   1e228:	b508      	push	{r3, lr}
   1e22a:	f7ff fff9 	bl	1e220 <_Unwind_GetTextRelBase>
   1e22e:	bf00      	nop

0001e230 <__aeabi_idiv0>:
   1e230:	4770      	bx	lr
   1e232:	bf00      	nop

0001e234 <abort>:
   1e234:	b508      	push	{r3, lr}
   1e236:	2006      	movs	r0, #6
   1e238:	f001 f982 	bl	1f540 <raise>
   1e23c:	2001      	movs	r0, #1
   1e23e:	f005 f91f 	bl	23480 <_exit>
   1e242:	bf00      	nop

0001e244 <__errno>:
   1e244:	4b01      	ldr	r3, [pc, #4]	; (1e24c <__errno+0x8>)
   1e246:	6818      	ldr	r0, [r3, #0]
   1e248:	4770      	bx	lr
   1e24a:	bf00      	nop
   1e24c:	200000f8 	.word	0x200000f8

0001e250 <fputc>:
   1e250:	4b14      	ldr	r3, [pc, #80]	; (1e2a4 <fputc+0x54>)
   1e252:	b570      	push	{r4, r5, r6, lr}
   1e254:	681d      	ldr	r5, [r3, #0]
   1e256:	4606      	mov	r6, r0
   1e258:	460c      	mov	r4, r1
   1e25a:	b10d      	cbz	r5, 1e260 <fputc+0x10>
   1e25c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1e25e:	b1c3      	cbz	r3, 1e292 <fputc+0x42>
   1e260:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e262:	07d8      	lsls	r0, r3, #31
   1e264:	d402      	bmi.n	1e26c <fputc+0x1c>
   1e266:	89a3      	ldrh	r3, [r4, #12]
   1e268:	0599      	lsls	r1, r3, #22
   1e26a:	d516      	bpl.n	1e29a <fputc+0x4a>
   1e26c:	4628      	mov	r0, r5
   1e26e:	4622      	mov	r2, r4
   1e270:	4631      	mov	r1, r6
   1e272:	f000 ff3d 	bl	1f0f0 <_putc_r>
   1e276:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e278:	07da      	lsls	r2, r3, #31
   1e27a:	4605      	mov	r5, r0
   1e27c:	d402      	bmi.n	1e284 <fputc+0x34>
   1e27e:	89a3      	ldrh	r3, [r4, #12]
   1e280:	059b      	lsls	r3, r3, #22
   1e282:	d501      	bpl.n	1e288 <fputc+0x38>
   1e284:	4628      	mov	r0, r5
   1e286:	bd70      	pop	{r4, r5, r6, pc}
   1e288:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e28a:	f000 fa7f 	bl	1e78c <__retarget_lock_release_recursive>
   1e28e:	4628      	mov	r0, r5
   1e290:	bd70      	pop	{r4, r5, r6, pc}
   1e292:	4628      	mov	r0, r5
   1e294:	f004 f80e 	bl	222b4 <__sinit>
   1e298:	e7e2      	b.n	1e260 <fputc+0x10>
   1e29a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e29c:	f000 fa74 	bl	1e788 <__retarget_lock_acquire_recursive>
   1e2a0:	e7e4      	b.n	1e26c <fputc+0x1c>
   1e2a2:	bf00      	nop
   1e2a4:	200000f8 	.word	0x200000f8

0001e2a8 <_fputs_r>:
   1e2a8:	b530      	push	{r4, r5, lr}
   1e2aa:	b087      	sub	sp, #28
   1e2ac:	4605      	mov	r5, r0
   1e2ae:	4608      	mov	r0, r1
   1e2b0:	4614      	mov	r4, r2
   1e2b2:	9101      	str	r1, [sp, #4]
   1e2b4:	f001 fb04 	bl	1f8c0 <strlen>
   1e2b8:	aa01      	add	r2, sp, #4
   1e2ba:	2301      	movs	r3, #1
   1e2bc:	9005      	str	r0, [sp, #20]
   1e2be:	9002      	str	r0, [sp, #8]
   1e2c0:	9203      	str	r2, [sp, #12]
   1e2c2:	9304      	str	r3, [sp, #16]
   1e2c4:	b10d      	cbz	r5, 1e2ca <_fputs_r+0x22>
   1e2c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1e2c8:	b333      	cbz	r3, 1e318 <_fputs_r+0x70>
   1e2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e2cc:	f013 0f01 	tst.w	r3, #1
   1e2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1e2d4:	b29a      	uxth	r2, r3
   1e2d6:	d101      	bne.n	1e2dc <_fputs_r+0x34>
   1e2d8:	0590      	lsls	r0, r2, #22
   1e2da:	d521      	bpl.n	1e320 <_fputs_r+0x78>
   1e2dc:	0491      	lsls	r1, r2, #18
   1e2de:	d406      	bmi.n	1e2ee <_fputs_r+0x46>
   1e2e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1e2e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1e2e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1e2ea:	81a3      	strh	r3, [r4, #12]
   1e2ec:	6662      	str	r2, [r4, #100]	; 0x64
   1e2ee:	4628      	mov	r0, r5
   1e2f0:	aa03      	add	r2, sp, #12
   1e2f2:	4621      	mov	r1, r4
   1e2f4:	f000 f824 	bl	1e340 <__sfvwrite_r>
   1e2f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e2fa:	07da      	lsls	r2, r3, #31
   1e2fc:	4605      	mov	r5, r0
   1e2fe:	d402      	bmi.n	1e306 <_fputs_r+0x5e>
   1e300:	89a3      	ldrh	r3, [r4, #12]
   1e302:	059b      	lsls	r3, r3, #22
   1e304:	d502      	bpl.n	1e30c <_fputs_r+0x64>
   1e306:	4628      	mov	r0, r5
   1e308:	b007      	add	sp, #28
   1e30a:	bd30      	pop	{r4, r5, pc}
   1e30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e30e:	f000 fa3d 	bl	1e78c <__retarget_lock_release_recursive>
   1e312:	4628      	mov	r0, r5
   1e314:	b007      	add	sp, #28
   1e316:	bd30      	pop	{r4, r5, pc}
   1e318:	4628      	mov	r0, r5
   1e31a:	f003 ffcb 	bl	222b4 <__sinit>
   1e31e:	e7d4      	b.n	1e2ca <_fputs_r+0x22>
   1e320:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e322:	f000 fa31 	bl	1e788 <__retarget_lock_acquire_recursive>
   1e326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1e32a:	b29a      	uxth	r2, r3
   1e32c:	e7d6      	b.n	1e2dc <_fputs_r+0x34>
   1e32e:	bf00      	nop

0001e330 <fputs>:
   1e330:	4b02      	ldr	r3, [pc, #8]	; (1e33c <fputs+0xc>)
   1e332:	460a      	mov	r2, r1
   1e334:	4601      	mov	r1, r0
   1e336:	6818      	ldr	r0, [r3, #0]
   1e338:	f7ff bfb6 	b.w	1e2a8 <_fputs_r>
   1e33c:	200000f8 	.word	0x200000f8

0001e340 <__sfvwrite_r>:
   1e340:	6893      	ldr	r3, [r2, #8]
   1e342:	2b00      	cmp	r3, #0
   1e344:	d073      	beq.n	1e42e <__sfvwrite_r+0xee>
   1e346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e34a:	898b      	ldrh	r3, [r1, #12]
   1e34c:	b083      	sub	sp, #12
   1e34e:	460c      	mov	r4, r1
   1e350:	0719      	lsls	r1, r3, #28
   1e352:	9000      	str	r0, [sp, #0]
   1e354:	4616      	mov	r6, r2
   1e356:	d526      	bpl.n	1e3a6 <__sfvwrite_r+0x66>
   1e358:	6922      	ldr	r2, [r4, #16]
   1e35a:	b322      	cbz	r2, 1e3a6 <__sfvwrite_r+0x66>
   1e35c:	f013 0002 	ands.w	r0, r3, #2
   1e360:	6835      	ldr	r5, [r6, #0]
   1e362:	d02c      	beq.n	1e3be <__sfvwrite_r+0x7e>
   1e364:	f04f 0900 	mov.w	r9, #0
   1e368:	4fb0      	ldr	r7, [pc, #704]	; (1e62c <__sfvwrite_r+0x2ec>)
   1e36a:	46c8      	mov	r8, r9
   1e36c:	46b2      	mov	sl, r6
   1e36e:	45b8      	cmp	r8, r7
   1e370:	4643      	mov	r3, r8
   1e372:	464a      	mov	r2, r9
   1e374:	bf28      	it	cs
   1e376:	463b      	movcs	r3, r7
   1e378:	9800      	ldr	r0, [sp, #0]
   1e37a:	f1b8 0f00 	cmp.w	r8, #0
   1e37e:	d050      	beq.n	1e422 <__sfvwrite_r+0xe2>
   1e380:	69e1      	ldr	r1, [r4, #28]
   1e382:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1e384:	47b0      	blx	r6
   1e386:	2800      	cmp	r0, #0
   1e388:	dd58      	ble.n	1e43c <__sfvwrite_r+0xfc>
   1e38a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1e38e:	1a1b      	subs	r3, r3, r0
   1e390:	4481      	add	r9, r0
   1e392:	eba8 0800 	sub.w	r8, r8, r0
   1e396:	f8ca 3008 	str.w	r3, [sl, #8]
   1e39a:	2b00      	cmp	r3, #0
   1e39c:	d1e7      	bne.n	1e36e <__sfvwrite_r+0x2e>
   1e39e:	2000      	movs	r0, #0
   1e3a0:	b003      	add	sp, #12
   1e3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3a6:	4621      	mov	r1, r4
   1e3a8:	9800      	ldr	r0, [sp, #0]
   1e3aa:	f002 fe5b 	bl	21064 <__swsetup_r>
   1e3ae:	2800      	cmp	r0, #0
   1e3b0:	f040 8133 	bne.w	1e61a <__sfvwrite_r+0x2da>
   1e3b4:	89a3      	ldrh	r3, [r4, #12]
   1e3b6:	6835      	ldr	r5, [r6, #0]
   1e3b8:	f013 0002 	ands.w	r0, r3, #2
   1e3bc:	d1d2      	bne.n	1e364 <__sfvwrite_r+0x24>
   1e3be:	f013 0901 	ands.w	r9, r3, #1
   1e3c2:	d145      	bne.n	1e450 <__sfvwrite_r+0x110>
   1e3c4:	464f      	mov	r7, r9
   1e3c6:	9601      	str	r6, [sp, #4]
   1e3c8:	b337      	cbz	r7, 1e418 <__sfvwrite_r+0xd8>
   1e3ca:	059a      	lsls	r2, r3, #22
   1e3cc:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1e3d0:	f140 8083 	bpl.w	1e4da <__sfvwrite_r+0x19a>
   1e3d4:	4547      	cmp	r7, r8
   1e3d6:	46c3      	mov	fp, r8
   1e3d8:	f0c0 80ab 	bcc.w	1e532 <__sfvwrite_r+0x1f2>
   1e3dc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1e3e0:	f040 80ac 	bne.w	1e53c <__sfvwrite_r+0x1fc>
   1e3e4:	6820      	ldr	r0, [r4, #0]
   1e3e6:	46ba      	mov	sl, r7
   1e3e8:	465a      	mov	r2, fp
   1e3ea:	4649      	mov	r1, r9
   1e3ec:	f000 fdc2 	bl	1ef74 <memmove>
   1e3f0:	68a2      	ldr	r2, [r4, #8]
   1e3f2:	6823      	ldr	r3, [r4, #0]
   1e3f4:	eba2 0208 	sub.w	r2, r2, r8
   1e3f8:	445b      	add	r3, fp
   1e3fa:	60a2      	str	r2, [r4, #8]
   1e3fc:	6023      	str	r3, [r4, #0]
   1e3fe:	9a01      	ldr	r2, [sp, #4]
   1e400:	6893      	ldr	r3, [r2, #8]
   1e402:	eba3 030a 	sub.w	r3, r3, sl
   1e406:	44d1      	add	r9, sl
   1e408:	eba7 070a 	sub.w	r7, r7, sl
   1e40c:	6093      	str	r3, [r2, #8]
   1e40e:	2b00      	cmp	r3, #0
   1e410:	d0c5      	beq.n	1e39e <__sfvwrite_r+0x5e>
   1e412:	89a3      	ldrh	r3, [r4, #12]
   1e414:	2f00      	cmp	r7, #0
   1e416:	d1d8      	bne.n	1e3ca <__sfvwrite_r+0x8a>
   1e418:	f8d5 9000 	ldr.w	r9, [r5]
   1e41c:	686f      	ldr	r7, [r5, #4]
   1e41e:	3508      	adds	r5, #8
   1e420:	e7d2      	b.n	1e3c8 <__sfvwrite_r+0x88>
   1e422:	f8d5 9000 	ldr.w	r9, [r5]
   1e426:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1e42a:	3508      	adds	r5, #8
   1e42c:	e79f      	b.n	1e36e <__sfvwrite_r+0x2e>
   1e42e:	2000      	movs	r0, #0
   1e430:	4770      	bx	lr
   1e432:	4621      	mov	r1, r4
   1e434:	9800      	ldr	r0, [sp, #0]
   1e436:	f003 fee5 	bl	22204 <_fflush_r>
   1e43a:	b370      	cbz	r0, 1e49a <__sfvwrite_r+0x15a>
   1e43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1e440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e444:	f04f 30ff 	mov.w	r0, #4294967295
   1e448:	81a3      	strh	r3, [r4, #12]
   1e44a:	b003      	add	sp, #12
   1e44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e450:	4681      	mov	r9, r0
   1e452:	4633      	mov	r3, r6
   1e454:	464e      	mov	r6, r9
   1e456:	46a8      	mov	r8, r5
   1e458:	469a      	mov	sl, r3
   1e45a:	464d      	mov	r5, r9
   1e45c:	b34e      	cbz	r6, 1e4b2 <__sfvwrite_r+0x172>
   1e45e:	b380      	cbz	r0, 1e4c2 <__sfvwrite_r+0x182>
   1e460:	6820      	ldr	r0, [r4, #0]
   1e462:	6923      	ldr	r3, [r4, #16]
   1e464:	6962      	ldr	r2, [r4, #20]
   1e466:	45b1      	cmp	r9, r6
   1e468:	46cb      	mov	fp, r9
   1e46a:	bf28      	it	cs
   1e46c:	46b3      	movcs	fp, r6
   1e46e:	4298      	cmp	r0, r3
   1e470:	465f      	mov	r7, fp
   1e472:	d904      	bls.n	1e47e <__sfvwrite_r+0x13e>
   1e474:	68a3      	ldr	r3, [r4, #8]
   1e476:	4413      	add	r3, r2
   1e478:	459b      	cmp	fp, r3
   1e47a:	f300 80a6 	bgt.w	1e5ca <__sfvwrite_r+0x28a>
   1e47e:	4593      	cmp	fp, r2
   1e480:	db4b      	blt.n	1e51a <__sfvwrite_r+0x1da>
   1e482:	4613      	mov	r3, r2
   1e484:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1e486:	69e1      	ldr	r1, [r4, #28]
   1e488:	9800      	ldr	r0, [sp, #0]
   1e48a:	462a      	mov	r2, r5
   1e48c:	47b8      	blx	r7
   1e48e:	1e07      	subs	r7, r0, #0
   1e490:	ddd4      	ble.n	1e43c <__sfvwrite_r+0xfc>
   1e492:	ebb9 0907 	subs.w	r9, r9, r7
   1e496:	d0cc      	beq.n	1e432 <__sfvwrite_r+0xf2>
   1e498:	2001      	movs	r0, #1
   1e49a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1e49e:	1bdb      	subs	r3, r3, r7
   1e4a0:	443d      	add	r5, r7
   1e4a2:	1bf6      	subs	r6, r6, r7
   1e4a4:	f8ca 3008 	str.w	r3, [sl, #8]
   1e4a8:	2b00      	cmp	r3, #0
   1e4aa:	f43f af78 	beq.w	1e39e <__sfvwrite_r+0x5e>
   1e4ae:	2e00      	cmp	r6, #0
   1e4b0:	d1d5      	bne.n	1e45e <__sfvwrite_r+0x11e>
   1e4b2:	f108 0308 	add.w	r3, r8, #8
   1e4b6:	e913 0060 	ldmdb	r3, {r5, r6}
   1e4ba:	4698      	mov	r8, r3
   1e4bc:	3308      	adds	r3, #8
   1e4be:	2e00      	cmp	r6, #0
   1e4c0:	d0f9      	beq.n	1e4b6 <__sfvwrite_r+0x176>
   1e4c2:	4632      	mov	r2, r6
   1e4c4:	210a      	movs	r1, #10
   1e4c6:	4628      	mov	r0, r5
   1e4c8:	f000 fc3a 	bl	1ed40 <memchr>
   1e4cc:	2800      	cmp	r0, #0
   1e4ce:	f000 80a1 	beq.w	1e614 <__sfvwrite_r+0x2d4>
   1e4d2:	3001      	adds	r0, #1
   1e4d4:	eba0 0905 	sub.w	r9, r0, r5
   1e4d8:	e7c2      	b.n	1e460 <__sfvwrite_r+0x120>
   1e4da:	6820      	ldr	r0, [r4, #0]
   1e4dc:	6923      	ldr	r3, [r4, #16]
   1e4de:	4298      	cmp	r0, r3
   1e4e0:	d802      	bhi.n	1e4e8 <__sfvwrite_r+0x1a8>
   1e4e2:	6963      	ldr	r3, [r4, #20]
   1e4e4:	429f      	cmp	r7, r3
   1e4e6:	d25d      	bcs.n	1e5a4 <__sfvwrite_r+0x264>
   1e4e8:	45b8      	cmp	r8, r7
   1e4ea:	bf28      	it	cs
   1e4ec:	46b8      	movcs	r8, r7
   1e4ee:	4642      	mov	r2, r8
   1e4f0:	4649      	mov	r1, r9
   1e4f2:	f000 fd3f 	bl	1ef74 <memmove>
   1e4f6:	68a3      	ldr	r3, [r4, #8]
   1e4f8:	6822      	ldr	r2, [r4, #0]
   1e4fa:	eba3 0308 	sub.w	r3, r3, r8
   1e4fe:	4442      	add	r2, r8
   1e500:	60a3      	str	r3, [r4, #8]
   1e502:	6022      	str	r2, [r4, #0]
   1e504:	b10b      	cbz	r3, 1e50a <__sfvwrite_r+0x1ca>
   1e506:	46c2      	mov	sl, r8
   1e508:	e779      	b.n	1e3fe <__sfvwrite_r+0xbe>
   1e50a:	4621      	mov	r1, r4
   1e50c:	9800      	ldr	r0, [sp, #0]
   1e50e:	f003 fe79 	bl	22204 <_fflush_r>
   1e512:	2800      	cmp	r0, #0
   1e514:	d192      	bne.n	1e43c <__sfvwrite_r+0xfc>
   1e516:	46c2      	mov	sl, r8
   1e518:	e771      	b.n	1e3fe <__sfvwrite_r+0xbe>
   1e51a:	465a      	mov	r2, fp
   1e51c:	4629      	mov	r1, r5
   1e51e:	f000 fd29 	bl	1ef74 <memmove>
   1e522:	68a2      	ldr	r2, [r4, #8]
   1e524:	6823      	ldr	r3, [r4, #0]
   1e526:	eba2 020b 	sub.w	r2, r2, fp
   1e52a:	445b      	add	r3, fp
   1e52c:	60a2      	str	r2, [r4, #8]
   1e52e:	6023      	str	r3, [r4, #0]
   1e530:	e7af      	b.n	1e492 <__sfvwrite_r+0x152>
   1e532:	6820      	ldr	r0, [r4, #0]
   1e534:	46b8      	mov	r8, r7
   1e536:	46ba      	mov	sl, r7
   1e538:	46bb      	mov	fp, r7
   1e53a:	e755      	b.n	1e3e8 <__sfvwrite_r+0xa8>
   1e53c:	6962      	ldr	r2, [r4, #20]
   1e53e:	6820      	ldr	r0, [r4, #0]
   1e540:	6921      	ldr	r1, [r4, #16]
   1e542:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1e546:	eba0 0a01 	sub.w	sl, r0, r1
   1e54a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1e54e:	f10a 0001 	add.w	r0, sl, #1
   1e552:	ea4f 0868 	mov.w	r8, r8, asr #1
   1e556:	4438      	add	r0, r7
   1e558:	4540      	cmp	r0, r8
   1e55a:	4642      	mov	r2, r8
   1e55c:	bf84      	itt	hi
   1e55e:	4680      	movhi	r8, r0
   1e560:	4642      	movhi	r2, r8
   1e562:	055b      	lsls	r3, r3, #21
   1e564:	d544      	bpl.n	1e5f0 <__sfvwrite_r+0x2b0>
   1e566:	4611      	mov	r1, r2
   1e568:	9800      	ldr	r0, [sp, #0]
   1e56a:	f000 f921 	bl	1e7b0 <_malloc_r>
   1e56e:	4683      	mov	fp, r0
   1e570:	2800      	cmp	r0, #0
   1e572:	d055      	beq.n	1e620 <__sfvwrite_r+0x2e0>
   1e574:	4652      	mov	r2, sl
   1e576:	6921      	ldr	r1, [r4, #16]
   1e578:	f000 fc62 	bl	1ee40 <memcpy>
   1e57c:	89a3      	ldrh	r3, [r4, #12]
   1e57e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1e582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e586:	81a3      	strh	r3, [r4, #12]
   1e588:	eb0b 000a 	add.w	r0, fp, sl
   1e58c:	eba8 030a 	sub.w	r3, r8, sl
   1e590:	f8c4 b010 	str.w	fp, [r4, #16]
   1e594:	f8c4 8014 	str.w	r8, [r4, #20]
   1e598:	6020      	str	r0, [r4, #0]
   1e59a:	60a3      	str	r3, [r4, #8]
   1e59c:	46b8      	mov	r8, r7
   1e59e:	46ba      	mov	sl, r7
   1e5a0:	46bb      	mov	fp, r7
   1e5a2:	e721      	b.n	1e3e8 <__sfvwrite_r+0xa8>
   1e5a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e5a8:	42b9      	cmp	r1, r7
   1e5aa:	bf28      	it	cs
   1e5ac:	4639      	movcs	r1, r7
   1e5ae:	464a      	mov	r2, r9
   1e5b0:	fb91 f1f3 	sdiv	r1, r1, r3
   1e5b4:	9800      	ldr	r0, [sp, #0]
   1e5b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1e5b8:	fb03 f301 	mul.w	r3, r3, r1
   1e5bc:	69e1      	ldr	r1, [r4, #28]
   1e5be:	47b0      	blx	r6
   1e5c0:	f1b0 0a00 	subs.w	sl, r0, #0
   1e5c4:	f73f af1b 	bgt.w	1e3fe <__sfvwrite_r+0xbe>
   1e5c8:	e738      	b.n	1e43c <__sfvwrite_r+0xfc>
   1e5ca:	461a      	mov	r2, r3
   1e5cc:	4629      	mov	r1, r5
   1e5ce:	9301      	str	r3, [sp, #4]
   1e5d0:	f000 fcd0 	bl	1ef74 <memmove>
   1e5d4:	6822      	ldr	r2, [r4, #0]
   1e5d6:	9b01      	ldr	r3, [sp, #4]
   1e5d8:	9800      	ldr	r0, [sp, #0]
   1e5da:	441a      	add	r2, r3
   1e5dc:	6022      	str	r2, [r4, #0]
   1e5de:	4621      	mov	r1, r4
   1e5e0:	f003 fe10 	bl	22204 <_fflush_r>
   1e5e4:	9b01      	ldr	r3, [sp, #4]
   1e5e6:	2800      	cmp	r0, #0
   1e5e8:	f47f af28 	bne.w	1e43c <__sfvwrite_r+0xfc>
   1e5ec:	461f      	mov	r7, r3
   1e5ee:	e750      	b.n	1e492 <__sfvwrite_r+0x152>
   1e5f0:	9800      	ldr	r0, [sp, #0]
   1e5f2:	f000 fdbd 	bl	1f170 <_realloc_r>
   1e5f6:	4683      	mov	fp, r0
   1e5f8:	2800      	cmp	r0, #0
   1e5fa:	d1c5      	bne.n	1e588 <__sfvwrite_r+0x248>
   1e5fc:	9d00      	ldr	r5, [sp, #0]
   1e5fe:	6921      	ldr	r1, [r4, #16]
   1e600:	4628      	mov	r0, r5
   1e602:	f003 fef9 	bl	223f8 <_free_r>
   1e606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1e60a:	220c      	movs	r2, #12
   1e60c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1e610:	602a      	str	r2, [r5, #0]
   1e612:	e715      	b.n	1e440 <__sfvwrite_r+0x100>
   1e614:	f106 0901 	add.w	r9, r6, #1
   1e618:	e722      	b.n	1e460 <__sfvwrite_r+0x120>
   1e61a:	f04f 30ff 	mov.w	r0, #4294967295
   1e61e:	e6bf      	b.n	1e3a0 <__sfvwrite_r+0x60>
   1e620:	9a00      	ldr	r2, [sp, #0]
   1e622:	230c      	movs	r3, #12
   1e624:	6013      	str	r3, [r2, #0]
   1e626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1e62a:	e709      	b.n	1e440 <__sfvwrite_r+0x100>
   1e62c:	7ffffc00 	.word	0x7ffffc00

0001e630 <_fwrite_r>:
   1e630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e634:	b086      	sub	sp, #24
   1e636:	fb02 f503 	mul.w	r5, r2, r3
   1e63a:	4690      	mov	r8, r2
   1e63c:	461e      	mov	r6, r3
   1e63e:	aa01      	add	r2, sp, #4
   1e640:	2301      	movs	r3, #1
   1e642:	9101      	str	r1, [sp, #4]
   1e644:	9502      	str	r5, [sp, #8]
   1e646:	9505      	str	r5, [sp, #20]
   1e648:	9203      	str	r2, [sp, #12]
   1e64a:	9304      	str	r3, [sp, #16]
   1e64c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1e64e:	4607      	mov	r7, r0
   1e650:	b110      	cbz	r0, 1e658 <_fwrite_r+0x28>
   1e652:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e654:	2b00      	cmp	r3, #0
   1e656:	d031      	beq.n	1e6bc <_fwrite_r+0x8c>
   1e658:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e65a:	f013 0f01 	tst.w	r3, #1
   1e65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1e662:	b29a      	uxth	r2, r3
   1e664:	d101      	bne.n	1e66a <_fwrite_r+0x3a>
   1e666:	0591      	lsls	r1, r2, #22
   1e668:	d52b      	bpl.n	1e6c2 <_fwrite_r+0x92>
   1e66a:	0492      	lsls	r2, r2, #18
   1e66c:	d406      	bmi.n	1e67c <_fwrite_r+0x4c>
   1e66e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1e670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1e674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1e678:	81a3      	strh	r3, [r4, #12]
   1e67a:	6662      	str	r2, [r4, #100]	; 0x64
   1e67c:	4638      	mov	r0, r7
   1e67e:	aa03      	add	r2, sp, #12
   1e680:	4621      	mov	r1, r4
   1e682:	f7ff fe5d 	bl	1e340 <__sfvwrite_r>
   1e686:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e688:	b940      	cbnz	r0, 1e69c <_fwrite_r+0x6c>
   1e68a:	07d8      	lsls	r0, r3, #31
   1e68c:	d402      	bmi.n	1e694 <_fwrite_r+0x64>
   1e68e:	89a3      	ldrh	r3, [r4, #12]
   1e690:	0599      	lsls	r1, r3, #22
   1e692:	d51d      	bpl.n	1e6d0 <_fwrite_r+0xa0>
   1e694:	4630      	mov	r0, r6
   1e696:	b006      	add	sp, #24
   1e698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e69c:	07da      	lsls	r2, r3, #31
   1e69e:	d506      	bpl.n	1e6ae <_fwrite_r+0x7e>
   1e6a0:	9805      	ldr	r0, [sp, #20]
   1e6a2:	1a2d      	subs	r5, r5, r0
   1e6a4:	fbb5 f0f8 	udiv	r0, r5, r8
   1e6a8:	b006      	add	sp, #24
   1e6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6ae:	89a3      	ldrh	r3, [r4, #12]
   1e6b0:	059b      	lsls	r3, r3, #22
   1e6b2:	d4f5      	bmi.n	1e6a0 <_fwrite_r+0x70>
   1e6b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e6b6:	f000 f869 	bl	1e78c <__retarget_lock_release_recursive>
   1e6ba:	e7f1      	b.n	1e6a0 <_fwrite_r+0x70>
   1e6bc:	f003 fdfa 	bl	222b4 <__sinit>
   1e6c0:	e7ca      	b.n	1e658 <_fwrite_r+0x28>
   1e6c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e6c4:	f000 f860 	bl	1e788 <__retarget_lock_acquire_recursive>
   1e6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1e6cc:	b29a      	uxth	r2, r3
   1e6ce:	e7cc      	b.n	1e66a <_fwrite_r+0x3a>
   1e6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e6d2:	f000 f85b 	bl	1e78c <__retarget_lock_release_recursive>
   1e6d6:	4630      	mov	r0, r6
   1e6d8:	e7e6      	b.n	1e6a8 <_fwrite_r+0x78>
   1e6da:	bf00      	nop

0001e6dc <fwrite>:
   1e6dc:	b510      	push	{r4, lr}
   1e6de:	b082      	sub	sp, #8
   1e6e0:	4c05      	ldr	r4, [pc, #20]	; (1e6f8 <fwrite+0x1c>)
   1e6e2:	9300      	str	r3, [sp, #0]
   1e6e4:	6824      	ldr	r4, [r4, #0]
   1e6e6:	4613      	mov	r3, r2
   1e6e8:	460a      	mov	r2, r1
   1e6ea:	4601      	mov	r1, r0
   1e6ec:	4620      	mov	r0, r4
   1e6ee:	f7ff ff9f 	bl	1e630 <_fwrite_r>
   1e6f2:	b002      	add	sp, #8
   1e6f4:	bd10      	pop	{r4, pc}
   1e6f6:	bf00      	nop
   1e6f8:	200000f8 	.word	0x200000f8

0001e6fc <__libc_init_array>:
   1e6fc:	b570      	push	{r4, r5, r6, lr}
   1e6fe:	4e0f      	ldr	r6, [pc, #60]	; (1e73c <__libc_init_array+0x40>)
   1e700:	4d0f      	ldr	r5, [pc, #60]	; (1e740 <__libc_init_array+0x44>)
   1e702:	1b76      	subs	r6, r6, r5
   1e704:	10b6      	asrs	r6, r6, #2
   1e706:	bf18      	it	ne
   1e708:	2400      	movne	r4, #0
   1e70a:	d005      	beq.n	1e718 <__libc_init_array+0x1c>
   1e70c:	3401      	adds	r4, #1
   1e70e:	f855 3b04 	ldr.w	r3, [r5], #4
   1e712:	4798      	blx	r3
   1e714:	42a6      	cmp	r6, r4
   1e716:	d1f9      	bne.n	1e70c <__libc_init_array+0x10>
   1e718:	4e0a      	ldr	r6, [pc, #40]	; (1e744 <__libc_init_array+0x48>)
   1e71a:	4d0b      	ldr	r5, [pc, #44]	; (1e748 <__libc_init_array+0x4c>)
   1e71c:	1b76      	subs	r6, r6, r5
   1e71e:	f004 fec3 	bl	234a8 <_init>
   1e722:	10b6      	asrs	r6, r6, #2
   1e724:	bf18      	it	ne
   1e726:	2400      	movne	r4, #0
   1e728:	d006      	beq.n	1e738 <__libc_init_array+0x3c>
   1e72a:	3401      	adds	r4, #1
   1e72c:	f855 3b04 	ldr.w	r3, [r5], #4
   1e730:	4798      	blx	r3
   1e732:	42a6      	cmp	r6, r4
   1e734:	d1f9      	bne.n	1e72a <__libc_init_array+0x2e>
   1e736:	bd70      	pop	{r4, r5, r6, pc}
   1e738:	bd70      	pop	{r4, r5, r6, pc}
   1e73a:	bf00      	nop
   1e73c:	000234c0 	.word	0x000234c0
   1e740:	000234c0 	.word	0x000234c0
   1e744:	000234f8 	.word	0x000234f8
   1e748:	000234c0 	.word	0x000234c0

0001e74c <__itoa>:
   1e74c:	1e93      	subs	r3, r2, #2
   1e74e:	2b22      	cmp	r3, #34	; 0x22
   1e750:	d810      	bhi.n	1e774 <__itoa+0x28>
   1e752:	2a0a      	cmp	r2, #10
   1e754:	b510      	push	{r4, lr}
   1e756:	d006      	beq.n	1e766 <__itoa+0x1a>
   1e758:	2300      	movs	r3, #0
   1e75a:	460c      	mov	r4, r1
   1e75c:	4419      	add	r1, r3
   1e75e:	f002 fbc5 	bl	20eec <__utoa>
   1e762:	4620      	mov	r0, r4
   1e764:	bd10      	pop	{r4, pc}
   1e766:	2800      	cmp	r0, #0
   1e768:	daf6      	bge.n	1e758 <__itoa+0xc>
   1e76a:	232d      	movs	r3, #45	; 0x2d
   1e76c:	700b      	strb	r3, [r1, #0]
   1e76e:	4240      	negs	r0, r0
   1e770:	2301      	movs	r3, #1
   1e772:	e7f2      	b.n	1e75a <__itoa+0xe>
   1e774:	2000      	movs	r0, #0
   1e776:	7008      	strb	r0, [r1, #0]
   1e778:	4770      	bx	lr
   1e77a:	bf00      	nop

0001e77c <itoa>:
   1e77c:	f7ff bfe6 	b.w	1e74c <__itoa>

0001e780 <__retarget_lock_init_recursive>:
   1e780:	4770      	bx	lr
   1e782:	bf00      	nop

0001e784 <__retarget_lock_close_recursive>:
   1e784:	4770      	bx	lr
   1e786:	bf00      	nop

0001e788 <__retarget_lock_acquire_recursive>:
   1e788:	4770      	bx	lr
   1e78a:	bf00      	nop

0001e78c <__retarget_lock_release_recursive>:
   1e78c:	4770      	bx	lr
   1e78e:	bf00      	nop

0001e790 <malloc>:
   1e790:	4b02      	ldr	r3, [pc, #8]	; (1e79c <malloc+0xc>)
   1e792:	4601      	mov	r1, r0
   1e794:	6818      	ldr	r0, [r3, #0]
   1e796:	f000 b80b 	b.w	1e7b0 <_malloc_r>
   1e79a:	bf00      	nop
   1e79c:	200000f8 	.word	0x200000f8

0001e7a0 <free>:
   1e7a0:	4b02      	ldr	r3, [pc, #8]	; (1e7ac <free+0xc>)
   1e7a2:	4601      	mov	r1, r0
   1e7a4:	6818      	ldr	r0, [r3, #0]
   1e7a6:	f003 be27 	b.w	223f8 <_free_r>
   1e7aa:	bf00      	nop
   1e7ac:	200000f8 	.word	0x200000f8

0001e7b0 <_malloc_r>:
   1e7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7b4:	f101 060b 	add.w	r6, r1, #11
   1e7b8:	2e16      	cmp	r6, #22
   1e7ba:	b083      	sub	sp, #12
   1e7bc:	4605      	mov	r5, r0
   1e7be:	f240 809e 	bls.w	1e8fe <_malloc_r+0x14e>
   1e7c2:	f036 0607 	bics.w	r6, r6, #7
   1e7c6:	f100 80bd 	bmi.w	1e944 <_malloc_r+0x194>
   1e7ca:	42b1      	cmp	r1, r6
   1e7cc:	f200 80ba 	bhi.w	1e944 <_malloc_r+0x194>
   1e7d0:	f000 fc82 	bl	1f0d8 <__malloc_lock>
   1e7d4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1e7d8:	f0c0 8293 	bcc.w	1ed02 <_malloc_r+0x552>
   1e7dc:	0a73      	lsrs	r3, r6, #9
   1e7de:	f000 80b8 	beq.w	1e952 <_malloc_r+0x1a2>
   1e7e2:	2b04      	cmp	r3, #4
   1e7e4:	f200 8179 	bhi.w	1eada <_malloc_r+0x32a>
   1e7e8:	09b3      	lsrs	r3, r6, #6
   1e7ea:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1e7ee:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1e7f2:	00c3      	lsls	r3, r0, #3
   1e7f4:	4fbf      	ldr	r7, [pc, #764]	; (1eaf4 <_malloc_r+0x344>)
   1e7f6:	443b      	add	r3, r7
   1e7f8:	f1a3 0108 	sub.w	r1, r3, #8
   1e7fc:	685c      	ldr	r4, [r3, #4]
   1e7fe:	42a1      	cmp	r1, r4
   1e800:	d106      	bne.n	1e810 <_malloc_r+0x60>
   1e802:	e00c      	b.n	1e81e <_malloc_r+0x6e>
   1e804:	2a00      	cmp	r2, #0
   1e806:	f280 80aa 	bge.w	1e95e <_malloc_r+0x1ae>
   1e80a:	68e4      	ldr	r4, [r4, #12]
   1e80c:	42a1      	cmp	r1, r4
   1e80e:	d006      	beq.n	1e81e <_malloc_r+0x6e>
   1e810:	6863      	ldr	r3, [r4, #4]
   1e812:	f023 0303 	bic.w	r3, r3, #3
   1e816:	1b9a      	subs	r2, r3, r6
   1e818:	2a0f      	cmp	r2, #15
   1e81a:	ddf3      	ble.n	1e804 <_malloc_r+0x54>
   1e81c:	4670      	mov	r0, lr
   1e81e:	693c      	ldr	r4, [r7, #16]
   1e820:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1eb08 <_malloc_r+0x358>
   1e824:	4574      	cmp	r4, lr
   1e826:	f000 81ab 	beq.w	1eb80 <_malloc_r+0x3d0>
   1e82a:	6863      	ldr	r3, [r4, #4]
   1e82c:	f023 0303 	bic.w	r3, r3, #3
   1e830:	1b9a      	subs	r2, r3, r6
   1e832:	2a0f      	cmp	r2, #15
   1e834:	f300 8190 	bgt.w	1eb58 <_malloc_r+0x3a8>
   1e838:	2a00      	cmp	r2, #0
   1e83a:	f8c7 e014 	str.w	lr, [r7, #20]
   1e83e:	f8c7 e010 	str.w	lr, [r7, #16]
   1e842:	f280 809d 	bge.w	1e980 <_malloc_r+0x1d0>
   1e846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1e84a:	f080 8161 	bcs.w	1eb10 <_malloc_r+0x360>
   1e84e:	08db      	lsrs	r3, r3, #3
   1e850:	f103 0c01 	add.w	ip, r3, #1
   1e854:	1099      	asrs	r1, r3, #2
   1e856:	687a      	ldr	r2, [r7, #4]
   1e858:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1e85c:	f8c4 8008 	str.w	r8, [r4, #8]
   1e860:	2301      	movs	r3, #1
   1e862:	408b      	lsls	r3, r1
   1e864:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1e868:	4313      	orrs	r3, r2
   1e86a:	3908      	subs	r1, #8
   1e86c:	60e1      	str	r1, [r4, #12]
   1e86e:	607b      	str	r3, [r7, #4]
   1e870:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1e874:	f8c8 400c 	str.w	r4, [r8, #12]
   1e878:	1082      	asrs	r2, r0, #2
   1e87a:	2401      	movs	r4, #1
   1e87c:	4094      	lsls	r4, r2
   1e87e:	429c      	cmp	r4, r3
   1e880:	f200 808b 	bhi.w	1e99a <_malloc_r+0x1ea>
   1e884:	421c      	tst	r4, r3
   1e886:	d106      	bne.n	1e896 <_malloc_r+0xe6>
   1e888:	f020 0003 	bic.w	r0, r0, #3
   1e88c:	0064      	lsls	r4, r4, #1
   1e88e:	421c      	tst	r4, r3
   1e890:	f100 0004 	add.w	r0, r0, #4
   1e894:	d0fa      	beq.n	1e88c <_malloc_r+0xdc>
   1e896:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1e89a:	46cc      	mov	ip, r9
   1e89c:	4680      	mov	r8, r0
   1e89e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1e8a2:	459c      	cmp	ip, r3
   1e8a4:	d107      	bne.n	1e8b6 <_malloc_r+0x106>
   1e8a6:	e16d      	b.n	1eb84 <_malloc_r+0x3d4>
   1e8a8:	2a00      	cmp	r2, #0
   1e8aa:	f280 817b 	bge.w	1eba4 <_malloc_r+0x3f4>
   1e8ae:	68db      	ldr	r3, [r3, #12]
   1e8b0:	459c      	cmp	ip, r3
   1e8b2:	f000 8167 	beq.w	1eb84 <_malloc_r+0x3d4>
   1e8b6:	6859      	ldr	r1, [r3, #4]
   1e8b8:	f021 0103 	bic.w	r1, r1, #3
   1e8bc:	1b8a      	subs	r2, r1, r6
   1e8be:	2a0f      	cmp	r2, #15
   1e8c0:	ddf2      	ble.n	1e8a8 <_malloc_r+0xf8>
   1e8c2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1e8c6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e8ca:	9300      	str	r3, [sp, #0]
   1e8cc:	199c      	adds	r4, r3, r6
   1e8ce:	4628      	mov	r0, r5
   1e8d0:	f046 0601 	orr.w	r6, r6, #1
   1e8d4:	f042 0501 	orr.w	r5, r2, #1
   1e8d8:	605e      	str	r6, [r3, #4]
   1e8da:	f8c8 c00c 	str.w	ip, [r8, #12]
   1e8de:	f8cc 8008 	str.w	r8, [ip, #8]
   1e8e2:	617c      	str	r4, [r7, #20]
   1e8e4:	613c      	str	r4, [r7, #16]
   1e8e6:	f8c4 e00c 	str.w	lr, [r4, #12]
   1e8ea:	f8c4 e008 	str.w	lr, [r4, #8]
   1e8ee:	6065      	str	r5, [r4, #4]
   1e8f0:	505a      	str	r2, [r3, r1]
   1e8f2:	f000 fbf7 	bl	1f0e4 <__malloc_unlock>
   1e8f6:	9b00      	ldr	r3, [sp, #0]
   1e8f8:	f103 0408 	add.w	r4, r3, #8
   1e8fc:	e01e      	b.n	1e93c <_malloc_r+0x18c>
   1e8fe:	2910      	cmp	r1, #16
   1e900:	d820      	bhi.n	1e944 <_malloc_r+0x194>
   1e902:	f000 fbe9 	bl	1f0d8 <__malloc_lock>
   1e906:	2610      	movs	r6, #16
   1e908:	2318      	movs	r3, #24
   1e90a:	2002      	movs	r0, #2
   1e90c:	4f79      	ldr	r7, [pc, #484]	; (1eaf4 <_malloc_r+0x344>)
   1e90e:	443b      	add	r3, r7
   1e910:	f1a3 0208 	sub.w	r2, r3, #8
   1e914:	685c      	ldr	r4, [r3, #4]
   1e916:	4294      	cmp	r4, r2
   1e918:	f000 813d 	beq.w	1eb96 <_malloc_r+0x3e6>
   1e91c:	6863      	ldr	r3, [r4, #4]
   1e91e:	68e1      	ldr	r1, [r4, #12]
   1e920:	68a6      	ldr	r6, [r4, #8]
   1e922:	f023 0303 	bic.w	r3, r3, #3
   1e926:	4423      	add	r3, r4
   1e928:	4628      	mov	r0, r5
   1e92a:	685a      	ldr	r2, [r3, #4]
   1e92c:	60f1      	str	r1, [r6, #12]
   1e92e:	f042 0201 	orr.w	r2, r2, #1
   1e932:	608e      	str	r6, [r1, #8]
   1e934:	605a      	str	r2, [r3, #4]
   1e936:	f000 fbd5 	bl	1f0e4 <__malloc_unlock>
   1e93a:	3408      	adds	r4, #8
   1e93c:	4620      	mov	r0, r4
   1e93e:	b003      	add	sp, #12
   1e940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e944:	2400      	movs	r4, #0
   1e946:	230c      	movs	r3, #12
   1e948:	4620      	mov	r0, r4
   1e94a:	602b      	str	r3, [r5, #0]
   1e94c:	b003      	add	sp, #12
   1e94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e952:	2040      	movs	r0, #64	; 0x40
   1e954:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e958:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1e95c:	e74a      	b.n	1e7f4 <_malloc_r+0x44>
   1e95e:	4423      	add	r3, r4
   1e960:	68e1      	ldr	r1, [r4, #12]
   1e962:	685a      	ldr	r2, [r3, #4]
   1e964:	68a6      	ldr	r6, [r4, #8]
   1e966:	f042 0201 	orr.w	r2, r2, #1
   1e96a:	60f1      	str	r1, [r6, #12]
   1e96c:	4628      	mov	r0, r5
   1e96e:	608e      	str	r6, [r1, #8]
   1e970:	605a      	str	r2, [r3, #4]
   1e972:	f000 fbb7 	bl	1f0e4 <__malloc_unlock>
   1e976:	3408      	adds	r4, #8
   1e978:	4620      	mov	r0, r4
   1e97a:	b003      	add	sp, #12
   1e97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e980:	4423      	add	r3, r4
   1e982:	4628      	mov	r0, r5
   1e984:	685a      	ldr	r2, [r3, #4]
   1e986:	f042 0201 	orr.w	r2, r2, #1
   1e98a:	605a      	str	r2, [r3, #4]
   1e98c:	f000 fbaa 	bl	1f0e4 <__malloc_unlock>
   1e990:	3408      	adds	r4, #8
   1e992:	4620      	mov	r0, r4
   1e994:	b003      	add	sp, #12
   1e996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e99a:	68bc      	ldr	r4, [r7, #8]
   1e99c:	6863      	ldr	r3, [r4, #4]
   1e99e:	f023 0803 	bic.w	r8, r3, #3
   1e9a2:	45b0      	cmp	r8, r6
   1e9a4:	d304      	bcc.n	1e9b0 <_malloc_r+0x200>
   1e9a6:	eba8 0306 	sub.w	r3, r8, r6
   1e9aa:	2b0f      	cmp	r3, #15
   1e9ac:	f300 8085 	bgt.w	1eaba <_malloc_r+0x30a>
   1e9b0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1eb0c <_malloc_r+0x35c>
   1e9b4:	4b50      	ldr	r3, [pc, #320]	; (1eaf8 <_malloc_r+0x348>)
   1e9b6:	f8d9 2000 	ldr.w	r2, [r9]
   1e9ba:	681b      	ldr	r3, [r3, #0]
   1e9bc:	3201      	adds	r2, #1
   1e9be:	4433      	add	r3, r6
   1e9c0:	eb04 0a08 	add.w	sl, r4, r8
   1e9c4:	f000 8155 	beq.w	1ec72 <_malloc_r+0x4c2>
   1e9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1e9cc:	330f      	adds	r3, #15
   1e9ce:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1e9d2:	f02b 0b0f 	bic.w	fp, fp, #15
   1e9d6:	4659      	mov	r1, fp
   1e9d8:	4628      	mov	r0, r5
   1e9da:	f000 fd6f 	bl	1f4bc <_sbrk_r>
   1e9de:	1c41      	adds	r1, r0, #1
   1e9e0:	4602      	mov	r2, r0
   1e9e2:	f000 80fc 	beq.w	1ebde <_malloc_r+0x42e>
   1e9e6:	4582      	cmp	sl, r0
   1e9e8:	f200 80f7 	bhi.w	1ebda <_malloc_r+0x42a>
   1e9ec:	4b43      	ldr	r3, [pc, #268]	; (1eafc <_malloc_r+0x34c>)
   1e9ee:	6819      	ldr	r1, [r3, #0]
   1e9f0:	4459      	add	r1, fp
   1e9f2:	6019      	str	r1, [r3, #0]
   1e9f4:	f000 814d 	beq.w	1ec92 <_malloc_r+0x4e2>
   1e9f8:	f8d9 0000 	ldr.w	r0, [r9]
   1e9fc:	3001      	adds	r0, #1
   1e9fe:	bf1b      	ittet	ne
   1ea00:	eba2 0a0a 	subne.w	sl, r2, sl
   1ea04:	4451      	addne	r1, sl
   1ea06:	f8c9 2000 	streq.w	r2, [r9]
   1ea0a:	6019      	strne	r1, [r3, #0]
   1ea0c:	f012 0107 	ands.w	r1, r2, #7
   1ea10:	f000 8115 	beq.w	1ec3e <_malloc_r+0x48e>
   1ea14:	f1c1 0008 	rsb	r0, r1, #8
   1ea18:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1ea1c:	4402      	add	r2, r0
   1ea1e:	3108      	adds	r1, #8
   1ea20:	eb02 090b 	add.w	r9, r2, fp
   1ea24:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1ea28:	eba1 0909 	sub.w	r9, r1, r9
   1ea2c:	4649      	mov	r1, r9
   1ea2e:	4628      	mov	r0, r5
   1ea30:	9301      	str	r3, [sp, #4]
   1ea32:	9200      	str	r2, [sp, #0]
   1ea34:	f000 fd42 	bl	1f4bc <_sbrk_r>
   1ea38:	1c43      	adds	r3, r0, #1
   1ea3a:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1ea3e:	f000 8143 	beq.w	1ecc8 <_malloc_r+0x518>
   1ea42:	1a80      	subs	r0, r0, r2
   1ea44:	4448      	add	r0, r9
   1ea46:	f040 0001 	orr.w	r0, r0, #1
   1ea4a:	6819      	ldr	r1, [r3, #0]
   1ea4c:	60ba      	str	r2, [r7, #8]
   1ea4e:	4449      	add	r1, r9
   1ea50:	42bc      	cmp	r4, r7
   1ea52:	6050      	str	r0, [r2, #4]
   1ea54:	6019      	str	r1, [r3, #0]
   1ea56:	d017      	beq.n	1ea88 <_malloc_r+0x2d8>
   1ea58:	f1b8 0f0f 	cmp.w	r8, #15
   1ea5c:	f240 80fb 	bls.w	1ec56 <_malloc_r+0x4a6>
   1ea60:	6860      	ldr	r0, [r4, #4]
   1ea62:	f1a8 020c 	sub.w	r2, r8, #12
   1ea66:	f022 0207 	bic.w	r2, r2, #7
   1ea6a:	eb04 0e02 	add.w	lr, r4, r2
   1ea6e:	f000 0001 	and.w	r0, r0, #1
   1ea72:	f04f 0c05 	mov.w	ip, #5
   1ea76:	4310      	orrs	r0, r2
   1ea78:	2a0f      	cmp	r2, #15
   1ea7a:	6060      	str	r0, [r4, #4]
   1ea7c:	f8ce c004 	str.w	ip, [lr, #4]
   1ea80:	f8ce c008 	str.w	ip, [lr, #8]
   1ea84:	f200 8117 	bhi.w	1ecb6 <_malloc_r+0x506>
   1ea88:	4b1d      	ldr	r3, [pc, #116]	; (1eb00 <_malloc_r+0x350>)
   1ea8a:	68bc      	ldr	r4, [r7, #8]
   1ea8c:	681a      	ldr	r2, [r3, #0]
   1ea8e:	4291      	cmp	r1, r2
   1ea90:	bf88      	it	hi
   1ea92:	6019      	strhi	r1, [r3, #0]
   1ea94:	4b1b      	ldr	r3, [pc, #108]	; (1eb04 <_malloc_r+0x354>)
   1ea96:	681a      	ldr	r2, [r3, #0]
   1ea98:	4291      	cmp	r1, r2
   1ea9a:	6862      	ldr	r2, [r4, #4]
   1ea9c:	bf88      	it	hi
   1ea9e:	6019      	strhi	r1, [r3, #0]
   1eaa0:	f022 0203 	bic.w	r2, r2, #3
   1eaa4:	4296      	cmp	r6, r2
   1eaa6:	eba2 0306 	sub.w	r3, r2, r6
   1eaaa:	d801      	bhi.n	1eab0 <_malloc_r+0x300>
   1eaac:	2b0f      	cmp	r3, #15
   1eaae:	dc04      	bgt.n	1eaba <_malloc_r+0x30a>
   1eab0:	4628      	mov	r0, r5
   1eab2:	f000 fb17 	bl	1f0e4 <__malloc_unlock>
   1eab6:	2400      	movs	r4, #0
   1eab8:	e740      	b.n	1e93c <_malloc_r+0x18c>
   1eaba:	19a2      	adds	r2, r4, r6
   1eabc:	f043 0301 	orr.w	r3, r3, #1
   1eac0:	f046 0601 	orr.w	r6, r6, #1
   1eac4:	6066      	str	r6, [r4, #4]
   1eac6:	4628      	mov	r0, r5
   1eac8:	60ba      	str	r2, [r7, #8]
   1eaca:	6053      	str	r3, [r2, #4]
   1eacc:	f000 fb0a 	bl	1f0e4 <__malloc_unlock>
   1ead0:	3408      	adds	r4, #8
   1ead2:	4620      	mov	r0, r4
   1ead4:	b003      	add	sp, #12
   1ead6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eada:	2b14      	cmp	r3, #20
   1eadc:	d971      	bls.n	1ebc2 <_malloc_r+0x412>
   1eade:	2b54      	cmp	r3, #84	; 0x54
   1eae0:	f200 80a3 	bhi.w	1ec2a <_malloc_r+0x47a>
   1eae4:	0b33      	lsrs	r3, r6, #12
   1eae6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1eaea:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1eaee:	00c3      	lsls	r3, r0, #3
   1eaf0:	e680      	b.n	1e7f4 <_malloc_r+0x44>
   1eaf2:	bf00      	nop
   1eaf4:	20000694 	.word	0x20000694
   1eaf8:	200022d0 	.word	0x200022d0
   1eafc:	200022a0 	.word	0x200022a0
   1eb00:	200022c8 	.word	0x200022c8
   1eb04:	200022cc 	.word	0x200022cc
   1eb08:	2000069c 	.word	0x2000069c
   1eb0c:	20000a9c 	.word	0x20000a9c
   1eb10:	0a5a      	lsrs	r2, r3, #9
   1eb12:	2a04      	cmp	r2, #4
   1eb14:	d95b      	bls.n	1ebce <_malloc_r+0x41e>
   1eb16:	2a14      	cmp	r2, #20
   1eb18:	f200 80ae 	bhi.w	1ec78 <_malloc_r+0x4c8>
   1eb1c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1eb20:	00c9      	lsls	r1, r1, #3
   1eb22:	325b      	adds	r2, #91	; 0x5b
   1eb24:	eb07 0c01 	add.w	ip, r7, r1
   1eb28:	5879      	ldr	r1, [r7, r1]
   1eb2a:	f1ac 0c08 	sub.w	ip, ip, #8
   1eb2e:	458c      	cmp	ip, r1
   1eb30:	f000 8088 	beq.w	1ec44 <_malloc_r+0x494>
   1eb34:	684a      	ldr	r2, [r1, #4]
   1eb36:	f022 0203 	bic.w	r2, r2, #3
   1eb3a:	4293      	cmp	r3, r2
   1eb3c:	d273      	bcs.n	1ec26 <_malloc_r+0x476>
   1eb3e:	6889      	ldr	r1, [r1, #8]
   1eb40:	458c      	cmp	ip, r1
   1eb42:	d1f7      	bne.n	1eb34 <_malloc_r+0x384>
   1eb44:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1eb48:	687b      	ldr	r3, [r7, #4]
   1eb4a:	60e2      	str	r2, [r4, #12]
   1eb4c:	f8c4 c008 	str.w	ip, [r4, #8]
   1eb50:	6094      	str	r4, [r2, #8]
   1eb52:	f8cc 400c 	str.w	r4, [ip, #12]
   1eb56:	e68f      	b.n	1e878 <_malloc_r+0xc8>
   1eb58:	19a1      	adds	r1, r4, r6
   1eb5a:	f046 0c01 	orr.w	ip, r6, #1
   1eb5e:	f042 0601 	orr.w	r6, r2, #1
   1eb62:	f8c4 c004 	str.w	ip, [r4, #4]
   1eb66:	4628      	mov	r0, r5
   1eb68:	6179      	str	r1, [r7, #20]
   1eb6a:	6139      	str	r1, [r7, #16]
   1eb6c:	f8c1 e00c 	str.w	lr, [r1, #12]
   1eb70:	f8c1 e008 	str.w	lr, [r1, #8]
   1eb74:	604e      	str	r6, [r1, #4]
   1eb76:	50e2      	str	r2, [r4, r3]
   1eb78:	f000 fab4 	bl	1f0e4 <__malloc_unlock>
   1eb7c:	3408      	adds	r4, #8
   1eb7e:	e6dd      	b.n	1e93c <_malloc_r+0x18c>
   1eb80:	687b      	ldr	r3, [r7, #4]
   1eb82:	e679      	b.n	1e878 <_malloc_r+0xc8>
   1eb84:	f108 0801 	add.w	r8, r8, #1
   1eb88:	f018 0f03 	tst.w	r8, #3
   1eb8c:	f10c 0c08 	add.w	ip, ip, #8
   1eb90:	f47f ae85 	bne.w	1e89e <_malloc_r+0xee>
   1eb94:	e02d      	b.n	1ebf2 <_malloc_r+0x442>
   1eb96:	68dc      	ldr	r4, [r3, #12]
   1eb98:	42a3      	cmp	r3, r4
   1eb9a:	bf08      	it	eq
   1eb9c:	3002      	addeq	r0, #2
   1eb9e:	f43f ae3e 	beq.w	1e81e <_malloc_r+0x6e>
   1eba2:	e6bb      	b.n	1e91c <_malloc_r+0x16c>
   1eba4:	4419      	add	r1, r3
   1eba6:	461c      	mov	r4, r3
   1eba8:	684a      	ldr	r2, [r1, #4]
   1ebaa:	68db      	ldr	r3, [r3, #12]
   1ebac:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1ebb0:	f042 0201 	orr.w	r2, r2, #1
   1ebb4:	604a      	str	r2, [r1, #4]
   1ebb6:	4628      	mov	r0, r5
   1ebb8:	60f3      	str	r3, [r6, #12]
   1ebba:	609e      	str	r6, [r3, #8]
   1ebbc:	f000 fa92 	bl	1f0e4 <__malloc_unlock>
   1ebc0:	e6bc      	b.n	1e93c <_malloc_r+0x18c>
   1ebc2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1ebc6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1ebca:	00c3      	lsls	r3, r0, #3
   1ebcc:	e612      	b.n	1e7f4 <_malloc_r+0x44>
   1ebce:	099a      	lsrs	r2, r3, #6
   1ebd0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1ebd4:	00c9      	lsls	r1, r1, #3
   1ebd6:	3238      	adds	r2, #56	; 0x38
   1ebd8:	e7a4      	b.n	1eb24 <_malloc_r+0x374>
   1ebda:	42bc      	cmp	r4, r7
   1ebdc:	d054      	beq.n	1ec88 <_malloc_r+0x4d8>
   1ebde:	68bc      	ldr	r4, [r7, #8]
   1ebe0:	6862      	ldr	r2, [r4, #4]
   1ebe2:	f022 0203 	bic.w	r2, r2, #3
   1ebe6:	e75d      	b.n	1eaa4 <_malloc_r+0x2f4>
   1ebe8:	f859 3908 	ldr.w	r3, [r9], #-8
   1ebec:	4599      	cmp	r9, r3
   1ebee:	f040 8086 	bne.w	1ecfe <_malloc_r+0x54e>
   1ebf2:	f010 0f03 	tst.w	r0, #3
   1ebf6:	f100 30ff 	add.w	r0, r0, #4294967295
   1ebfa:	d1f5      	bne.n	1ebe8 <_malloc_r+0x438>
   1ebfc:	687b      	ldr	r3, [r7, #4]
   1ebfe:	ea23 0304 	bic.w	r3, r3, r4
   1ec02:	607b      	str	r3, [r7, #4]
   1ec04:	0064      	lsls	r4, r4, #1
   1ec06:	429c      	cmp	r4, r3
   1ec08:	f63f aec7 	bhi.w	1e99a <_malloc_r+0x1ea>
   1ec0c:	2c00      	cmp	r4, #0
   1ec0e:	f43f aec4 	beq.w	1e99a <_malloc_r+0x1ea>
   1ec12:	421c      	tst	r4, r3
   1ec14:	4640      	mov	r0, r8
   1ec16:	f47f ae3e 	bne.w	1e896 <_malloc_r+0xe6>
   1ec1a:	0064      	lsls	r4, r4, #1
   1ec1c:	421c      	tst	r4, r3
   1ec1e:	f100 0004 	add.w	r0, r0, #4
   1ec22:	d0fa      	beq.n	1ec1a <_malloc_r+0x46a>
   1ec24:	e637      	b.n	1e896 <_malloc_r+0xe6>
   1ec26:	468c      	mov	ip, r1
   1ec28:	e78c      	b.n	1eb44 <_malloc_r+0x394>
   1ec2a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1ec2e:	d815      	bhi.n	1ec5c <_malloc_r+0x4ac>
   1ec30:	0bf3      	lsrs	r3, r6, #15
   1ec32:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1ec36:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1ec3a:	00c3      	lsls	r3, r0, #3
   1ec3c:	e5da      	b.n	1e7f4 <_malloc_r+0x44>
   1ec3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1ec42:	e6ed      	b.n	1ea20 <_malloc_r+0x270>
   1ec44:	687b      	ldr	r3, [r7, #4]
   1ec46:	1092      	asrs	r2, r2, #2
   1ec48:	2101      	movs	r1, #1
   1ec4a:	fa01 f202 	lsl.w	r2, r1, r2
   1ec4e:	4313      	orrs	r3, r2
   1ec50:	607b      	str	r3, [r7, #4]
   1ec52:	4662      	mov	r2, ip
   1ec54:	e779      	b.n	1eb4a <_malloc_r+0x39a>
   1ec56:	2301      	movs	r3, #1
   1ec58:	6053      	str	r3, [r2, #4]
   1ec5a:	e729      	b.n	1eab0 <_malloc_r+0x300>
   1ec5c:	f240 5254 	movw	r2, #1364	; 0x554
   1ec60:	4293      	cmp	r3, r2
   1ec62:	d822      	bhi.n	1ecaa <_malloc_r+0x4fa>
   1ec64:	0cb3      	lsrs	r3, r6, #18
   1ec66:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1ec6a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1ec6e:	00c3      	lsls	r3, r0, #3
   1ec70:	e5c0      	b.n	1e7f4 <_malloc_r+0x44>
   1ec72:	f103 0b10 	add.w	fp, r3, #16
   1ec76:	e6ae      	b.n	1e9d6 <_malloc_r+0x226>
   1ec78:	2a54      	cmp	r2, #84	; 0x54
   1ec7a:	d829      	bhi.n	1ecd0 <_malloc_r+0x520>
   1ec7c:	0b1a      	lsrs	r2, r3, #12
   1ec7e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1ec82:	00c9      	lsls	r1, r1, #3
   1ec84:	326e      	adds	r2, #110	; 0x6e
   1ec86:	e74d      	b.n	1eb24 <_malloc_r+0x374>
   1ec88:	4b20      	ldr	r3, [pc, #128]	; (1ed0c <_malloc_r+0x55c>)
   1ec8a:	6819      	ldr	r1, [r3, #0]
   1ec8c:	4459      	add	r1, fp
   1ec8e:	6019      	str	r1, [r3, #0]
   1ec90:	e6b2      	b.n	1e9f8 <_malloc_r+0x248>
   1ec92:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1ec96:	2800      	cmp	r0, #0
   1ec98:	f47f aeae 	bne.w	1e9f8 <_malloc_r+0x248>
   1ec9c:	eb08 030b 	add.w	r3, r8, fp
   1eca0:	68ba      	ldr	r2, [r7, #8]
   1eca2:	f043 0301 	orr.w	r3, r3, #1
   1eca6:	6053      	str	r3, [r2, #4]
   1eca8:	e6ee      	b.n	1ea88 <_malloc_r+0x2d8>
   1ecaa:	207f      	movs	r0, #127	; 0x7f
   1ecac:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1ecb0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1ecb4:	e59e      	b.n	1e7f4 <_malloc_r+0x44>
   1ecb6:	f104 0108 	add.w	r1, r4, #8
   1ecba:	4628      	mov	r0, r5
   1ecbc:	9300      	str	r3, [sp, #0]
   1ecbe:	f003 fb9b 	bl	223f8 <_free_r>
   1ecc2:	9b00      	ldr	r3, [sp, #0]
   1ecc4:	6819      	ldr	r1, [r3, #0]
   1ecc6:	e6df      	b.n	1ea88 <_malloc_r+0x2d8>
   1ecc8:	2001      	movs	r0, #1
   1ecca:	f04f 0900 	mov.w	r9, #0
   1ecce:	e6bc      	b.n	1ea4a <_malloc_r+0x29a>
   1ecd0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1ecd4:	d805      	bhi.n	1ece2 <_malloc_r+0x532>
   1ecd6:	0bda      	lsrs	r2, r3, #15
   1ecd8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1ecdc:	00c9      	lsls	r1, r1, #3
   1ecde:	3277      	adds	r2, #119	; 0x77
   1ece0:	e720      	b.n	1eb24 <_malloc_r+0x374>
   1ece2:	f240 5154 	movw	r1, #1364	; 0x554
   1ece6:	428a      	cmp	r2, r1
   1ece8:	d805      	bhi.n	1ecf6 <_malloc_r+0x546>
   1ecea:	0c9a      	lsrs	r2, r3, #18
   1ecec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1ecf0:	00c9      	lsls	r1, r1, #3
   1ecf2:	327c      	adds	r2, #124	; 0x7c
   1ecf4:	e716      	b.n	1eb24 <_malloc_r+0x374>
   1ecf6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1ecfa:	227e      	movs	r2, #126	; 0x7e
   1ecfc:	e712      	b.n	1eb24 <_malloc_r+0x374>
   1ecfe:	687b      	ldr	r3, [r7, #4]
   1ed00:	e780      	b.n	1ec04 <_malloc_r+0x454>
   1ed02:	08f0      	lsrs	r0, r6, #3
   1ed04:	f106 0308 	add.w	r3, r6, #8
   1ed08:	e600      	b.n	1e90c <_malloc_r+0x15c>
   1ed0a:	bf00      	nop
   1ed0c:	200022a0 	.word	0x200022a0

0001ed10 <__ascii_mbtowc>:
   1ed10:	b082      	sub	sp, #8
   1ed12:	b149      	cbz	r1, 1ed28 <__ascii_mbtowc+0x18>
   1ed14:	b15a      	cbz	r2, 1ed2e <__ascii_mbtowc+0x1e>
   1ed16:	b16b      	cbz	r3, 1ed34 <__ascii_mbtowc+0x24>
   1ed18:	7813      	ldrb	r3, [r2, #0]
   1ed1a:	600b      	str	r3, [r1, #0]
   1ed1c:	7812      	ldrb	r2, [r2, #0]
   1ed1e:	1c10      	adds	r0, r2, #0
   1ed20:	bf18      	it	ne
   1ed22:	2001      	movne	r0, #1
   1ed24:	b002      	add	sp, #8
   1ed26:	4770      	bx	lr
   1ed28:	a901      	add	r1, sp, #4
   1ed2a:	2a00      	cmp	r2, #0
   1ed2c:	d1f3      	bne.n	1ed16 <__ascii_mbtowc+0x6>
   1ed2e:	4610      	mov	r0, r2
   1ed30:	b002      	add	sp, #8
   1ed32:	4770      	bx	lr
   1ed34:	f06f 0001 	mvn.w	r0, #1
   1ed38:	e7f4      	b.n	1ed24 <__ascii_mbtowc+0x14>
   1ed3a:	bf00      	nop
   1ed3c:	0000      	movs	r0, r0
	...

0001ed40 <memchr>:
   1ed40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ed44:	2a10      	cmp	r2, #16
   1ed46:	db2b      	blt.n	1eda0 <memchr+0x60>
   1ed48:	f010 0f07 	tst.w	r0, #7
   1ed4c:	d008      	beq.n	1ed60 <memchr+0x20>
   1ed4e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1ed52:	3a01      	subs	r2, #1
   1ed54:	428b      	cmp	r3, r1
   1ed56:	d02d      	beq.n	1edb4 <memchr+0x74>
   1ed58:	f010 0f07 	tst.w	r0, #7
   1ed5c:	b342      	cbz	r2, 1edb0 <memchr+0x70>
   1ed5e:	d1f6      	bne.n	1ed4e <memchr+0xe>
   1ed60:	b4f0      	push	{r4, r5, r6, r7}
   1ed62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1ed66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1ed6a:	f022 0407 	bic.w	r4, r2, #7
   1ed6e:	f07f 0700 	mvns.w	r7, #0
   1ed72:	2300      	movs	r3, #0
   1ed74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1ed78:	3c08      	subs	r4, #8
   1ed7a:	ea85 0501 	eor.w	r5, r5, r1
   1ed7e:	ea86 0601 	eor.w	r6, r6, r1
   1ed82:	fa85 f547 	uadd8	r5, r5, r7
   1ed86:	faa3 f587 	sel	r5, r3, r7
   1ed8a:	fa86 f647 	uadd8	r6, r6, r7
   1ed8e:	faa5 f687 	sel	r6, r5, r7
   1ed92:	b98e      	cbnz	r6, 1edb8 <memchr+0x78>
   1ed94:	d1ee      	bne.n	1ed74 <memchr+0x34>
   1ed96:	bcf0      	pop	{r4, r5, r6, r7}
   1ed98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ed9c:	f002 0207 	and.w	r2, r2, #7
   1eda0:	b132      	cbz	r2, 1edb0 <memchr+0x70>
   1eda2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1eda6:	3a01      	subs	r2, #1
   1eda8:	ea83 0301 	eor.w	r3, r3, r1
   1edac:	b113      	cbz	r3, 1edb4 <memchr+0x74>
   1edae:	d1f8      	bne.n	1eda2 <memchr+0x62>
   1edb0:	2000      	movs	r0, #0
   1edb2:	4770      	bx	lr
   1edb4:	3801      	subs	r0, #1
   1edb6:	4770      	bx	lr
   1edb8:	2d00      	cmp	r5, #0
   1edba:	bf06      	itte	eq
   1edbc:	4635      	moveq	r5, r6
   1edbe:	3803      	subeq	r0, #3
   1edc0:	3807      	subne	r0, #7
   1edc2:	f015 0f01 	tst.w	r5, #1
   1edc6:	d107      	bne.n	1edd8 <memchr+0x98>
   1edc8:	3001      	adds	r0, #1
   1edca:	f415 7f80 	tst.w	r5, #256	; 0x100
   1edce:	bf02      	ittt	eq
   1edd0:	3001      	addeq	r0, #1
   1edd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1edd6:	3001      	addeq	r0, #1
   1edd8:	bcf0      	pop	{r4, r5, r6, r7}
   1edda:	3801      	subs	r0, #1
   1eddc:	4770      	bx	lr
   1edde:	bf00      	nop

0001ede0 <memcmp>:
   1ede0:	2a03      	cmp	r2, #3
   1ede2:	b470      	push	{r4, r5, r6}
   1ede4:	d922      	bls.n	1ee2c <memcmp+0x4c>
   1ede6:	ea40 0301 	orr.w	r3, r0, r1
   1edea:	079b      	lsls	r3, r3, #30
   1edec:	d011      	beq.n	1ee12 <memcmp+0x32>
   1edee:	7803      	ldrb	r3, [r0, #0]
   1edf0:	780c      	ldrb	r4, [r1, #0]
   1edf2:	42a3      	cmp	r3, r4
   1edf4:	d11d      	bne.n	1ee32 <memcmp+0x52>
   1edf6:	440a      	add	r2, r1
   1edf8:	3101      	adds	r1, #1
   1edfa:	e005      	b.n	1ee08 <memcmp+0x28>
   1edfc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ee00:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ee04:	42a3      	cmp	r3, r4
   1ee06:	d114      	bne.n	1ee32 <memcmp+0x52>
   1ee08:	4291      	cmp	r1, r2
   1ee0a:	d1f7      	bne.n	1edfc <memcmp+0x1c>
   1ee0c:	2000      	movs	r0, #0
   1ee0e:	bc70      	pop	{r4, r5, r6}
   1ee10:	4770      	bx	lr
   1ee12:	680d      	ldr	r5, [r1, #0]
   1ee14:	6806      	ldr	r6, [r0, #0]
   1ee16:	42ae      	cmp	r6, r5
   1ee18:	460c      	mov	r4, r1
   1ee1a:	4603      	mov	r3, r0
   1ee1c:	f101 0104 	add.w	r1, r1, #4
   1ee20:	f100 0004 	add.w	r0, r0, #4
   1ee24:	d108      	bne.n	1ee38 <memcmp+0x58>
   1ee26:	3a04      	subs	r2, #4
   1ee28:	2a03      	cmp	r2, #3
   1ee2a:	d8f2      	bhi.n	1ee12 <memcmp+0x32>
   1ee2c:	2a00      	cmp	r2, #0
   1ee2e:	d1de      	bne.n	1edee <memcmp+0xe>
   1ee30:	e7ec      	b.n	1ee0c <memcmp+0x2c>
   1ee32:	1b18      	subs	r0, r3, r4
   1ee34:	bc70      	pop	{r4, r5, r6}
   1ee36:	4770      	bx	lr
   1ee38:	4621      	mov	r1, r4
   1ee3a:	4618      	mov	r0, r3
   1ee3c:	e7d7      	b.n	1edee <memcmp+0xe>
   1ee3e:	bf00      	nop

0001ee40 <memcpy>:
   1ee40:	4684      	mov	ip, r0
   1ee42:	ea41 0300 	orr.w	r3, r1, r0
   1ee46:	f013 0303 	ands.w	r3, r3, #3
   1ee4a:	d16d      	bne.n	1ef28 <memcpy+0xe8>
   1ee4c:	3a40      	subs	r2, #64	; 0x40
   1ee4e:	d341      	bcc.n	1eed4 <memcpy+0x94>
   1ee50:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee54:	f840 3b04 	str.w	r3, [r0], #4
   1ee58:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee5c:	f840 3b04 	str.w	r3, [r0], #4
   1ee60:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee64:	f840 3b04 	str.w	r3, [r0], #4
   1ee68:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee6c:	f840 3b04 	str.w	r3, [r0], #4
   1ee70:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee74:	f840 3b04 	str.w	r3, [r0], #4
   1ee78:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee7c:	f840 3b04 	str.w	r3, [r0], #4
   1ee80:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee84:	f840 3b04 	str.w	r3, [r0], #4
   1ee88:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee8c:	f840 3b04 	str.w	r3, [r0], #4
   1ee90:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee94:	f840 3b04 	str.w	r3, [r0], #4
   1ee98:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee9c:	f840 3b04 	str.w	r3, [r0], #4
   1eea0:	f851 3b04 	ldr.w	r3, [r1], #4
   1eea4:	f840 3b04 	str.w	r3, [r0], #4
   1eea8:	f851 3b04 	ldr.w	r3, [r1], #4
   1eeac:	f840 3b04 	str.w	r3, [r0], #4
   1eeb0:	f851 3b04 	ldr.w	r3, [r1], #4
   1eeb4:	f840 3b04 	str.w	r3, [r0], #4
   1eeb8:	f851 3b04 	ldr.w	r3, [r1], #4
   1eebc:	f840 3b04 	str.w	r3, [r0], #4
   1eec0:	f851 3b04 	ldr.w	r3, [r1], #4
   1eec4:	f840 3b04 	str.w	r3, [r0], #4
   1eec8:	f851 3b04 	ldr.w	r3, [r1], #4
   1eecc:	f840 3b04 	str.w	r3, [r0], #4
   1eed0:	3a40      	subs	r2, #64	; 0x40
   1eed2:	d2bd      	bcs.n	1ee50 <memcpy+0x10>
   1eed4:	3230      	adds	r2, #48	; 0x30
   1eed6:	d311      	bcc.n	1eefc <memcpy+0xbc>
   1eed8:	f851 3b04 	ldr.w	r3, [r1], #4
   1eedc:	f840 3b04 	str.w	r3, [r0], #4
   1eee0:	f851 3b04 	ldr.w	r3, [r1], #4
   1eee4:	f840 3b04 	str.w	r3, [r0], #4
   1eee8:	f851 3b04 	ldr.w	r3, [r1], #4
   1eeec:	f840 3b04 	str.w	r3, [r0], #4
   1eef0:	f851 3b04 	ldr.w	r3, [r1], #4
   1eef4:	f840 3b04 	str.w	r3, [r0], #4
   1eef8:	3a10      	subs	r2, #16
   1eefa:	d2ed      	bcs.n	1eed8 <memcpy+0x98>
   1eefc:	320c      	adds	r2, #12
   1eefe:	d305      	bcc.n	1ef0c <memcpy+0xcc>
   1ef00:	f851 3b04 	ldr.w	r3, [r1], #4
   1ef04:	f840 3b04 	str.w	r3, [r0], #4
   1ef08:	3a04      	subs	r2, #4
   1ef0a:	d2f9      	bcs.n	1ef00 <memcpy+0xc0>
   1ef0c:	3204      	adds	r2, #4
   1ef0e:	d008      	beq.n	1ef22 <memcpy+0xe2>
   1ef10:	07d2      	lsls	r2, r2, #31
   1ef12:	bf1c      	itt	ne
   1ef14:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1ef18:	f800 3b01 	strbne.w	r3, [r0], #1
   1ef1c:	d301      	bcc.n	1ef22 <memcpy+0xe2>
   1ef1e:	880b      	ldrh	r3, [r1, #0]
   1ef20:	8003      	strh	r3, [r0, #0]
   1ef22:	4660      	mov	r0, ip
   1ef24:	4770      	bx	lr
   1ef26:	bf00      	nop
   1ef28:	2a08      	cmp	r2, #8
   1ef2a:	d313      	bcc.n	1ef54 <memcpy+0x114>
   1ef2c:	078b      	lsls	r3, r1, #30
   1ef2e:	d08d      	beq.n	1ee4c <memcpy+0xc>
   1ef30:	f010 0303 	ands.w	r3, r0, #3
   1ef34:	d08a      	beq.n	1ee4c <memcpy+0xc>
   1ef36:	f1c3 0304 	rsb	r3, r3, #4
   1ef3a:	1ad2      	subs	r2, r2, r3
   1ef3c:	07db      	lsls	r3, r3, #31
   1ef3e:	bf1c      	itt	ne
   1ef40:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1ef44:	f800 3b01 	strbne.w	r3, [r0], #1
   1ef48:	d380      	bcc.n	1ee4c <memcpy+0xc>
   1ef4a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1ef4e:	f820 3b02 	strh.w	r3, [r0], #2
   1ef52:	e77b      	b.n	1ee4c <memcpy+0xc>
   1ef54:	3a04      	subs	r2, #4
   1ef56:	d3d9      	bcc.n	1ef0c <memcpy+0xcc>
   1ef58:	3a01      	subs	r2, #1
   1ef5a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ef5e:	f800 3b01 	strb.w	r3, [r0], #1
   1ef62:	d2f9      	bcs.n	1ef58 <memcpy+0x118>
   1ef64:	780b      	ldrb	r3, [r1, #0]
   1ef66:	7003      	strb	r3, [r0, #0]
   1ef68:	784b      	ldrb	r3, [r1, #1]
   1ef6a:	7043      	strb	r3, [r0, #1]
   1ef6c:	788b      	ldrb	r3, [r1, #2]
   1ef6e:	7083      	strb	r3, [r0, #2]
   1ef70:	4660      	mov	r0, ip
   1ef72:	4770      	bx	lr

0001ef74 <memmove>:
   1ef74:	4288      	cmp	r0, r1
   1ef76:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef78:	d90d      	bls.n	1ef96 <memmove+0x22>
   1ef7a:	188b      	adds	r3, r1, r2
   1ef7c:	4298      	cmp	r0, r3
   1ef7e:	d20a      	bcs.n	1ef96 <memmove+0x22>
   1ef80:	1884      	adds	r4, r0, r2
   1ef82:	2a00      	cmp	r2, #0
   1ef84:	d051      	beq.n	1f02a <memmove+0xb6>
   1ef86:	4622      	mov	r2, r4
   1ef88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1ef8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1ef90:	4299      	cmp	r1, r3
   1ef92:	d1f9      	bne.n	1ef88 <memmove+0x14>
   1ef94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef96:	2a0f      	cmp	r2, #15
   1ef98:	d948      	bls.n	1f02c <memmove+0xb8>
   1ef9a:	ea41 0300 	orr.w	r3, r1, r0
   1ef9e:	079b      	lsls	r3, r3, #30
   1efa0:	d146      	bne.n	1f030 <memmove+0xbc>
   1efa2:	f100 0410 	add.w	r4, r0, #16
   1efa6:	f101 0310 	add.w	r3, r1, #16
   1efaa:	4615      	mov	r5, r2
   1efac:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1efb0:	f844 6c10 	str.w	r6, [r4, #-16]
   1efb4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1efb8:	f844 6c0c 	str.w	r6, [r4, #-12]
   1efbc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1efc0:	f844 6c08 	str.w	r6, [r4, #-8]
   1efc4:	3d10      	subs	r5, #16
   1efc6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1efca:	f844 6c04 	str.w	r6, [r4, #-4]
   1efce:	2d0f      	cmp	r5, #15
   1efd0:	f103 0310 	add.w	r3, r3, #16
   1efd4:	f104 0410 	add.w	r4, r4, #16
   1efd8:	d8e8      	bhi.n	1efac <memmove+0x38>
   1efda:	f1a2 0310 	sub.w	r3, r2, #16
   1efde:	f023 030f 	bic.w	r3, r3, #15
   1efe2:	f002 0e0f 	and.w	lr, r2, #15
   1efe6:	3310      	adds	r3, #16
   1efe8:	f1be 0f03 	cmp.w	lr, #3
   1efec:	4419      	add	r1, r3
   1efee:	4403      	add	r3, r0
   1eff0:	d921      	bls.n	1f036 <memmove+0xc2>
   1eff2:	1f1e      	subs	r6, r3, #4
   1eff4:	460d      	mov	r5, r1
   1eff6:	4674      	mov	r4, lr
   1eff8:	3c04      	subs	r4, #4
   1effa:	f855 7b04 	ldr.w	r7, [r5], #4
   1effe:	f846 7f04 	str.w	r7, [r6, #4]!
   1f002:	2c03      	cmp	r4, #3
   1f004:	d8f8      	bhi.n	1eff8 <memmove+0x84>
   1f006:	f1ae 0404 	sub.w	r4, lr, #4
   1f00a:	f024 0403 	bic.w	r4, r4, #3
   1f00e:	3404      	adds	r4, #4
   1f010:	4421      	add	r1, r4
   1f012:	4423      	add	r3, r4
   1f014:	f002 0203 	and.w	r2, r2, #3
   1f018:	b162      	cbz	r2, 1f034 <memmove+0xc0>
   1f01a:	3b01      	subs	r3, #1
   1f01c:	440a      	add	r2, r1
   1f01e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f022:	f803 4f01 	strb.w	r4, [r3, #1]!
   1f026:	428a      	cmp	r2, r1
   1f028:	d1f9      	bne.n	1f01e <memmove+0xaa>
   1f02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f02c:	4603      	mov	r3, r0
   1f02e:	e7f3      	b.n	1f018 <memmove+0xa4>
   1f030:	4603      	mov	r3, r0
   1f032:	e7f2      	b.n	1f01a <memmove+0xa6>
   1f034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f036:	4672      	mov	r2, lr
   1f038:	e7ee      	b.n	1f018 <memmove+0xa4>
   1f03a:	bf00      	nop

0001f03c <memset>:
   1f03c:	b470      	push	{r4, r5, r6}
   1f03e:	0786      	lsls	r6, r0, #30
   1f040:	d046      	beq.n	1f0d0 <memset+0x94>
   1f042:	1e54      	subs	r4, r2, #1
   1f044:	2a00      	cmp	r2, #0
   1f046:	d041      	beq.n	1f0cc <memset+0x90>
   1f048:	b2ca      	uxtb	r2, r1
   1f04a:	4603      	mov	r3, r0
   1f04c:	e002      	b.n	1f054 <memset+0x18>
   1f04e:	f114 34ff 	adds.w	r4, r4, #4294967295
   1f052:	d33b      	bcc.n	1f0cc <memset+0x90>
   1f054:	f803 2b01 	strb.w	r2, [r3], #1
   1f058:	079d      	lsls	r5, r3, #30
   1f05a:	d1f8      	bne.n	1f04e <memset+0x12>
   1f05c:	2c03      	cmp	r4, #3
   1f05e:	d92e      	bls.n	1f0be <memset+0x82>
   1f060:	b2cd      	uxtb	r5, r1
   1f062:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1f066:	2c0f      	cmp	r4, #15
   1f068:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1f06c:	d919      	bls.n	1f0a2 <memset+0x66>
   1f06e:	f103 0210 	add.w	r2, r3, #16
   1f072:	4626      	mov	r6, r4
   1f074:	3e10      	subs	r6, #16
   1f076:	2e0f      	cmp	r6, #15
   1f078:	f842 5c10 	str.w	r5, [r2, #-16]
   1f07c:	f842 5c0c 	str.w	r5, [r2, #-12]
   1f080:	f842 5c08 	str.w	r5, [r2, #-8]
   1f084:	f842 5c04 	str.w	r5, [r2, #-4]
   1f088:	f102 0210 	add.w	r2, r2, #16
   1f08c:	d8f2      	bhi.n	1f074 <memset+0x38>
   1f08e:	f1a4 0210 	sub.w	r2, r4, #16
   1f092:	f022 020f 	bic.w	r2, r2, #15
   1f096:	f004 040f 	and.w	r4, r4, #15
   1f09a:	3210      	adds	r2, #16
   1f09c:	2c03      	cmp	r4, #3
   1f09e:	4413      	add	r3, r2
   1f0a0:	d90d      	bls.n	1f0be <memset+0x82>
   1f0a2:	461e      	mov	r6, r3
   1f0a4:	4622      	mov	r2, r4
   1f0a6:	3a04      	subs	r2, #4
   1f0a8:	2a03      	cmp	r2, #3
   1f0aa:	f846 5b04 	str.w	r5, [r6], #4
   1f0ae:	d8fa      	bhi.n	1f0a6 <memset+0x6a>
   1f0b0:	1f22      	subs	r2, r4, #4
   1f0b2:	f022 0203 	bic.w	r2, r2, #3
   1f0b6:	3204      	adds	r2, #4
   1f0b8:	4413      	add	r3, r2
   1f0ba:	f004 0403 	and.w	r4, r4, #3
   1f0be:	b12c      	cbz	r4, 1f0cc <memset+0x90>
   1f0c0:	b2c9      	uxtb	r1, r1
   1f0c2:	441c      	add	r4, r3
   1f0c4:	f803 1b01 	strb.w	r1, [r3], #1
   1f0c8:	429c      	cmp	r4, r3
   1f0ca:	d1fb      	bne.n	1f0c4 <memset+0x88>
   1f0cc:	bc70      	pop	{r4, r5, r6}
   1f0ce:	4770      	bx	lr
   1f0d0:	4614      	mov	r4, r2
   1f0d2:	4603      	mov	r3, r0
   1f0d4:	e7c2      	b.n	1f05c <memset+0x20>
   1f0d6:	bf00      	nop

0001f0d8 <__malloc_lock>:
   1f0d8:	4801      	ldr	r0, [pc, #4]	; (1f0e0 <__malloc_lock+0x8>)
   1f0da:	f7ff bb55 	b.w	1e788 <__retarget_lock_acquire_recursive>
   1f0de:	bf00      	nop
   1f0e0:	20002388 	.word	0x20002388

0001f0e4 <__malloc_unlock>:
   1f0e4:	4801      	ldr	r0, [pc, #4]	; (1f0ec <__malloc_unlock+0x8>)
   1f0e6:	f7ff bb51 	b.w	1e78c <__retarget_lock_release_recursive>
   1f0ea:	bf00      	nop
   1f0ec:	20002388 	.word	0x20002388

0001f0f0 <_putc_r>:
   1f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f0f2:	460e      	mov	r6, r1
   1f0f4:	4614      	mov	r4, r2
   1f0f6:	4607      	mov	r7, r0
   1f0f8:	b108      	cbz	r0, 1f0fe <_putc_r+0xe>
   1f0fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1f0fc:	b34b      	cbz	r3, 1f152 <_putc_r+0x62>
   1f0fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1f100:	07d8      	lsls	r0, r3, #31
   1f102:	d402      	bmi.n	1f10a <_putc_r+0x1a>
   1f104:	89a3      	ldrh	r3, [r4, #12]
   1f106:	0599      	lsls	r1, r3, #22
   1f108:	d526      	bpl.n	1f158 <_putc_r+0x68>
   1f10a:	68a3      	ldr	r3, [r4, #8]
   1f10c:	3b01      	subs	r3, #1
   1f10e:	2b00      	cmp	r3, #0
   1f110:	60a3      	str	r3, [r4, #8]
   1f112:	db11      	blt.n	1f138 <_putc_r+0x48>
   1f114:	b2f5      	uxtb	r5, r6
   1f116:	6823      	ldr	r3, [r4, #0]
   1f118:	1c5a      	adds	r2, r3, #1
   1f11a:	6022      	str	r2, [r4, #0]
   1f11c:	701e      	strb	r6, [r3, #0]
   1f11e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1f120:	07da      	lsls	r2, r3, #31
   1f122:	d402      	bmi.n	1f12a <_putc_r+0x3a>
   1f124:	89a3      	ldrh	r3, [r4, #12]
   1f126:	059b      	lsls	r3, r3, #22
   1f128:	d501      	bpl.n	1f12e <_putc_r+0x3e>
   1f12a:	4628      	mov	r0, r5
   1f12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f12e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1f130:	f7ff fb2c 	bl	1e78c <__retarget_lock_release_recursive>
   1f134:	4628      	mov	r0, r5
   1f136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f138:	69a2      	ldr	r2, [r4, #24]
   1f13a:	4293      	cmp	r3, r2
   1f13c:	db02      	blt.n	1f144 <_putc_r+0x54>
   1f13e:	b2f5      	uxtb	r5, r6
   1f140:	2d0a      	cmp	r5, #10
   1f142:	d1e8      	bne.n	1f116 <_putc_r+0x26>
   1f144:	4631      	mov	r1, r6
   1f146:	4638      	mov	r0, r7
   1f148:	4622      	mov	r2, r4
   1f14a:	f001 ff0f 	bl	20f6c <__swbuf_r>
   1f14e:	4605      	mov	r5, r0
   1f150:	e7e5      	b.n	1f11e <_putc_r+0x2e>
   1f152:	f003 f8af 	bl	222b4 <__sinit>
   1f156:	e7d2      	b.n	1f0fe <_putc_r+0xe>
   1f158:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1f15a:	f7ff fb15 	bl	1e788 <__retarget_lock_acquire_recursive>
   1f15e:	e7d4      	b.n	1f10a <_putc_r+0x1a>

0001f160 <realloc>:
   1f160:	4b02      	ldr	r3, [pc, #8]	; (1f16c <realloc+0xc>)
   1f162:	460a      	mov	r2, r1
   1f164:	4601      	mov	r1, r0
   1f166:	6818      	ldr	r0, [r3, #0]
   1f168:	f000 b802 	b.w	1f170 <_realloc_r>
   1f16c:	200000f8 	.word	0x200000f8

0001f170 <_realloc_r>:
   1f170:	2900      	cmp	r1, #0
   1f172:	f000 8095 	beq.w	1f2a0 <_realloc_r+0x130>
   1f176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f17a:	460d      	mov	r5, r1
   1f17c:	4616      	mov	r6, r2
   1f17e:	b083      	sub	sp, #12
   1f180:	4680      	mov	r8, r0
   1f182:	f106 070b 	add.w	r7, r6, #11
   1f186:	f7ff ffa7 	bl	1f0d8 <__malloc_lock>
   1f18a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1f18e:	2f16      	cmp	r7, #22
   1f190:	f02e 0403 	bic.w	r4, lr, #3
   1f194:	f1a5 0908 	sub.w	r9, r5, #8
   1f198:	d83c      	bhi.n	1f214 <_realloc_r+0xa4>
   1f19a:	2210      	movs	r2, #16
   1f19c:	4617      	mov	r7, r2
   1f19e:	42be      	cmp	r6, r7
   1f1a0:	d83d      	bhi.n	1f21e <_realloc_r+0xae>
   1f1a2:	4294      	cmp	r4, r2
   1f1a4:	da43      	bge.n	1f22e <_realloc_r+0xbe>
   1f1a6:	4bc4      	ldr	r3, [pc, #784]	; (1f4b8 <_realloc_r+0x348>)
   1f1a8:	6899      	ldr	r1, [r3, #8]
   1f1aa:	eb09 0004 	add.w	r0, r9, r4
   1f1ae:	4288      	cmp	r0, r1
   1f1b0:	f000 80b4 	beq.w	1f31c <_realloc_r+0x1ac>
   1f1b4:	6843      	ldr	r3, [r0, #4]
   1f1b6:	f023 0101 	bic.w	r1, r3, #1
   1f1ba:	4401      	add	r1, r0
   1f1bc:	6849      	ldr	r1, [r1, #4]
   1f1be:	07c9      	lsls	r1, r1, #31
   1f1c0:	d54c      	bpl.n	1f25c <_realloc_r+0xec>
   1f1c2:	f01e 0f01 	tst.w	lr, #1
   1f1c6:	f000 809b 	beq.w	1f300 <_realloc_r+0x190>
   1f1ca:	4631      	mov	r1, r6
   1f1cc:	4640      	mov	r0, r8
   1f1ce:	f7ff faef 	bl	1e7b0 <_malloc_r>
   1f1d2:	4606      	mov	r6, r0
   1f1d4:	2800      	cmp	r0, #0
   1f1d6:	d03a      	beq.n	1f24e <_realloc_r+0xde>
   1f1d8:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1f1dc:	f023 0301 	bic.w	r3, r3, #1
   1f1e0:	444b      	add	r3, r9
   1f1e2:	f1a0 0208 	sub.w	r2, r0, #8
   1f1e6:	429a      	cmp	r2, r3
   1f1e8:	f000 8121 	beq.w	1f42e <_realloc_r+0x2be>
   1f1ec:	1f22      	subs	r2, r4, #4
   1f1ee:	2a24      	cmp	r2, #36	; 0x24
   1f1f0:	f200 8107 	bhi.w	1f402 <_realloc_r+0x292>
   1f1f4:	2a13      	cmp	r2, #19
   1f1f6:	f200 80db 	bhi.w	1f3b0 <_realloc_r+0x240>
   1f1fa:	4603      	mov	r3, r0
   1f1fc:	462a      	mov	r2, r5
   1f1fe:	6811      	ldr	r1, [r2, #0]
   1f200:	6019      	str	r1, [r3, #0]
   1f202:	6851      	ldr	r1, [r2, #4]
   1f204:	6059      	str	r1, [r3, #4]
   1f206:	6892      	ldr	r2, [r2, #8]
   1f208:	609a      	str	r2, [r3, #8]
   1f20a:	4629      	mov	r1, r5
   1f20c:	4640      	mov	r0, r8
   1f20e:	f003 f8f3 	bl	223f8 <_free_r>
   1f212:	e01c      	b.n	1f24e <_realloc_r+0xde>
   1f214:	f027 0707 	bic.w	r7, r7, #7
   1f218:	2f00      	cmp	r7, #0
   1f21a:	463a      	mov	r2, r7
   1f21c:	dabf      	bge.n	1f19e <_realloc_r+0x2e>
   1f21e:	2600      	movs	r6, #0
   1f220:	230c      	movs	r3, #12
   1f222:	4630      	mov	r0, r6
   1f224:	f8c8 3000 	str.w	r3, [r8]
   1f228:	b003      	add	sp, #12
   1f22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f22e:	462e      	mov	r6, r5
   1f230:	1be3      	subs	r3, r4, r7
   1f232:	2b0f      	cmp	r3, #15
   1f234:	d81e      	bhi.n	1f274 <_realloc_r+0x104>
   1f236:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f23a:	f003 0301 	and.w	r3, r3, #1
   1f23e:	4323      	orrs	r3, r4
   1f240:	444c      	add	r4, r9
   1f242:	f8c9 3004 	str.w	r3, [r9, #4]
   1f246:	6863      	ldr	r3, [r4, #4]
   1f248:	f043 0301 	orr.w	r3, r3, #1
   1f24c:	6063      	str	r3, [r4, #4]
   1f24e:	4640      	mov	r0, r8
   1f250:	f7ff ff48 	bl	1f0e4 <__malloc_unlock>
   1f254:	4630      	mov	r0, r6
   1f256:	b003      	add	sp, #12
   1f258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f25c:	f023 0303 	bic.w	r3, r3, #3
   1f260:	18e1      	adds	r1, r4, r3
   1f262:	4291      	cmp	r1, r2
   1f264:	db1f      	blt.n	1f2a6 <_realloc_r+0x136>
   1f266:	68c3      	ldr	r3, [r0, #12]
   1f268:	6882      	ldr	r2, [r0, #8]
   1f26a:	462e      	mov	r6, r5
   1f26c:	60d3      	str	r3, [r2, #12]
   1f26e:	460c      	mov	r4, r1
   1f270:	609a      	str	r2, [r3, #8]
   1f272:	e7dd      	b.n	1f230 <_realloc_r+0xc0>
   1f274:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1f278:	eb09 0107 	add.w	r1, r9, r7
   1f27c:	f002 0201 	and.w	r2, r2, #1
   1f280:	444c      	add	r4, r9
   1f282:	f043 0301 	orr.w	r3, r3, #1
   1f286:	4317      	orrs	r7, r2
   1f288:	f8c9 7004 	str.w	r7, [r9, #4]
   1f28c:	604b      	str	r3, [r1, #4]
   1f28e:	6863      	ldr	r3, [r4, #4]
   1f290:	f043 0301 	orr.w	r3, r3, #1
   1f294:	3108      	adds	r1, #8
   1f296:	6063      	str	r3, [r4, #4]
   1f298:	4640      	mov	r0, r8
   1f29a:	f003 f8ad 	bl	223f8 <_free_r>
   1f29e:	e7d6      	b.n	1f24e <_realloc_r+0xde>
   1f2a0:	4611      	mov	r1, r2
   1f2a2:	f7ff ba85 	b.w	1e7b0 <_malloc_r>
   1f2a6:	f01e 0f01 	tst.w	lr, #1
   1f2aa:	d18e      	bne.n	1f1ca <_realloc_r+0x5a>
   1f2ac:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1f2b0:	eba9 0a01 	sub.w	sl, r9, r1
   1f2b4:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f2b8:	f021 0103 	bic.w	r1, r1, #3
   1f2bc:	440b      	add	r3, r1
   1f2be:	4423      	add	r3, r4
   1f2c0:	4293      	cmp	r3, r2
   1f2c2:	db25      	blt.n	1f310 <_realloc_r+0x1a0>
   1f2c4:	68c2      	ldr	r2, [r0, #12]
   1f2c6:	6881      	ldr	r1, [r0, #8]
   1f2c8:	4656      	mov	r6, sl
   1f2ca:	60ca      	str	r2, [r1, #12]
   1f2cc:	6091      	str	r1, [r2, #8]
   1f2ce:	f8da 100c 	ldr.w	r1, [sl, #12]
   1f2d2:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1f2d6:	1f22      	subs	r2, r4, #4
   1f2d8:	2a24      	cmp	r2, #36	; 0x24
   1f2da:	60c1      	str	r1, [r0, #12]
   1f2dc:	6088      	str	r0, [r1, #8]
   1f2de:	f200 8094 	bhi.w	1f40a <_realloc_r+0x29a>
   1f2e2:	2a13      	cmp	r2, #19
   1f2e4:	d96f      	bls.n	1f3c6 <_realloc_r+0x256>
   1f2e6:	6829      	ldr	r1, [r5, #0]
   1f2e8:	f8ca 1008 	str.w	r1, [sl, #8]
   1f2ec:	6869      	ldr	r1, [r5, #4]
   1f2ee:	f8ca 100c 	str.w	r1, [sl, #12]
   1f2f2:	2a1b      	cmp	r2, #27
   1f2f4:	f200 80a2 	bhi.w	1f43c <_realloc_r+0x2cc>
   1f2f8:	3508      	adds	r5, #8
   1f2fa:	f10a 0210 	add.w	r2, sl, #16
   1f2fe:	e063      	b.n	1f3c8 <_realloc_r+0x258>
   1f300:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1f304:	eba9 0a03 	sub.w	sl, r9, r3
   1f308:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f30c:	f021 0103 	bic.w	r1, r1, #3
   1f310:	1863      	adds	r3, r4, r1
   1f312:	4293      	cmp	r3, r2
   1f314:	f6ff af59 	blt.w	1f1ca <_realloc_r+0x5a>
   1f318:	4656      	mov	r6, sl
   1f31a:	e7d8      	b.n	1f2ce <_realloc_r+0x15e>
   1f31c:	6841      	ldr	r1, [r0, #4]
   1f31e:	f021 0b03 	bic.w	fp, r1, #3
   1f322:	44a3      	add	fp, r4
   1f324:	f107 0010 	add.w	r0, r7, #16
   1f328:	4583      	cmp	fp, r0
   1f32a:	da56      	bge.n	1f3da <_realloc_r+0x26a>
   1f32c:	f01e 0f01 	tst.w	lr, #1
   1f330:	f47f af4b 	bne.w	1f1ca <_realloc_r+0x5a>
   1f334:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1f338:	eba9 0a01 	sub.w	sl, r9, r1
   1f33c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f340:	f021 0103 	bic.w	r1, r1, #3
   1f344:	448b      	add	fp, r1
   1f346:	4558      	cmp	r0, fp
   1f348:	dce2      	bgt.n	1f310 <_realloc_r+0x1a0>
   1f34a:	4656      	mov	r6, sl
   1f34c:	f8da 100c 	ldr.w	r1, [sl, #12]
   1f350:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1f354:	1f22      	subs	r2, r4, #4
   1f356:	2a24      	cmp	r2, #36	; 0x24
   1f358:	60c1      	str	r1, [r0, #12]
   1f35a:	6088      	str	r0, [r1, #8]
   1f35c:	f200 808f 	bhi.w	1f47e <_realloc_r+0x30e>
   1f360:	2a13      	cmp	r2, #19
   1f362:	f240 808a 	bls.w	1f47a <_realloc_r+0x30a>
   1f366:	6829      	ldr	r1, [r5, #0]
   1f368:	f8ca 1008 	str.w	r1, [sl, #8]
   1f36c:	6869      	ldr	r1, [r5, #4]
   1f36e:	f8ca 100c 	str.w	r1, [sl, #12]
   1f372:	2a1b      	cmp	r2, #27
   1f374:	f200 808a 	bhi.w	1f48c <_realloc_r+0x31c>
   1f378:	3508      	adds	r5, #8
   1f37a:	f10a 0210 	add.w	r2, sl, #16
   1f37e:	6829      	ldr	r1, [r5, #0]
   1f380:	6011      	str	r1, [r2, #0]
   1f382:	6869      	ldr	r1, [r5, #4]
   1f384:	6051      	str	r1, [r2, #4]
   1f386:	68a9      	ldr	r1, [r5, #8]
   1f388:	6091      	str	r1, [r2, #8]
   1f38a:	eb0a 0107 	add.w	r1, sl, r7
   1f38e:	ebab 0207 	sub.w	r2, fp, r7
   1f392:	f042 0201 	orr.w	r2, r2, #1
   1f396:	6099      	str	r1, [r3, #8]
   1f398:	604a      	str	r2, [r1, #4]
   1f39a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1f39e:	f003 0301 	and.w	r3, r3, #1
   1f3a2:	431f      	orrs	r7, r3
   1f3a4:	4640      	mov	r0, r8
   1f3a6:	f8ca 7004 	str.w	r7, [sl, #4]
   1f3aa:	f7ff fe9b 	bl	1f0e4 <__malloc_unlock>
   1f3ae:	e751      	b.n	1f254 <_realloc_r+0xe4>
   1f3b0:	682b      	ldr	r3, [r5, #0]
   1f3b2:	6003      	str	r3, [r0, #0]
   1f3b4:	686b      	ldr	r3, [r5, #4]
   1f3b6:	6043      	str	r3, [r0, #4]
   1f3b8:	2a1b      	cmp	r2, #27
   1f3ba:	d82d      	bhi.n	1f418 <_realloc_r+0x2a8>
   1f3bc:	f100 0308 	add.w	r3, r0, #8
   1f3c0:	f105 0208 	add.w	r2, r5, #8
   1f3c4:	e71b      	b.n	1f1fe <_realloc_r+0x8e>
   1f3c6:	4632      	mov	r2, r6
   1f3c8:	6829      	ldr	r1, [r5, #0]
   1f3ca:	6011      	str	r1, [r2, #0]
   1f3cc:	6869      	ldr	r1, [r5, #4]
   1f3ce:	6051      	str	r1, [r2, #4]
   1f3d0:	68a9      	ldr	r1, [r5, #8]
   1f3d2:	6091      	str	r1, [r2, #8]
   1f3d4:	461c      	mov	r4, r3
   1f3d6:	46d1      	mov	r9, sl
   1f3d8:	e72a      	b.n	1f230 <_realloc_r+0xc0>
   1f3da:	eb09 0107 	add.w	r1, r9, r7
   1f3de:	ebab 0b07 	sub.w	fp, fp, r7
   1f3e2:	f04b 0201 	orr.w	r2, fp, #1
   1f3e6:	6099      	str	r1, [r3, #8]
   1f3e8:	604a      	str	r2, [r1, #4]
   1f3ea:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1f3ee:	f003 0301 	and.w	r3, r3, #1
   1f3f2:	431f      	orrs	r7, r3
   1f3f4:	4640      	mov	r0, r8
   1f3f6:	f845 7c04 	str.w	r7, [r5, #-4]
   1f3fa:	f7ff fe73 	bl	1f0e4 <__malloc_unlock>
   1f3fe:	462e      	mov	r6, r5
   1f400:	e728      	b.n	1f254 <_realloc_r+0xe4>
   1f402:	4629      	mov	r1, r5
   1f404:	f7ff fdb6 	bl	1ef74 <memmove>
   1f408:	e6ff      	b.n	1f20a <_realloc_r+0x9a>
   1f40a:	4629      	mov	r1, r5
   1f40c:	4630      	mov	r0, r6
   1f40e:	461c      	mov	r4, r3
   1f410:	46d1      	mov	r9, sl
   1f412:	f7ff fdaf 	bl	1ef74 <memmove>
   1f416:	e70b      	b.n	1f230 <_realloc_r+0xc0>
   1f418:	68ab      	ldr	r3, [r5, #8]
   1f41a:	6083      	str	r3, [r0, #8]
   1f41c:	68eb      	ldr	r3, [r5, #12]
   1f41e:	60c3      	str	r3, [r0, #12]
   1f420:	2a24      	cmp	r2, #36	; 0x24
   1f422:	d017      	beq.n	1f454 <_realloc_r+0x2e4>
   1f424:	f100 0310 	add.w	r3, r0, #16
   1f428:	f105 0210 	add.w	r2, r5, #16
   1f42c:	e6e7      	b.n	1f1fe <_realloc_r+0x8e>
   1f42e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1f432:	f023 0303 	bic.w	r3, r3, #3
   1f436:	441c      	add	r4, r3
   1f438:	462e      	mov	r6, r5
   1f43a:	e6f9      	b.n	1f230 <_realloc_r+0xc0>
   1f43c:	68a9      	ldr	r1, [r5, #8]
   1f43e:	f8ca 1010 	str.w	r1, [sl, #16]
   1f442:	68e9      	ldr	r1, [r5, #12]
   1f444:	f8ca 1014 	str.w	r1, [sl, #20]
   1f448:	2a24      	cmp	r2, #36	; 0x24
   1f44a:	d00c      	beq.n	1f466 <_realloc_r+0x2f6>
   1f44c:	3510      	adds	r5, #16
   1f44e:	f10a 0218 	add.w	r2, sl, #24
   1f452:	e7b9      	b.n	1f3c8 <_realloc_r+0x258>
   1f454:	692b      	ldr	r3, [r5, #16]
   1f456:	6103      	str	r3, [r0, #16]
   1f458:	696b      	ldr	r3, [r5, #20]
   1f45a:	6143      	str	r3, [r0, #20]
   1f45c:	f105 0218 	add.w	r2, r5, #24
   1f460:	f100 0318 	add.w	r3, r0, #24
   1f464:	e6cb      	b.n	1f1fe <_realloc_r+0x8e>
   1f466:	692a      	ldr	r2, [r5, #16]
   1f468:	f8ca 2018 	str.w	r2, [sl, #24]
   1f46c:	696a      	ldr	r2, [r5, #20]
   1f46e:	f8ca 201c 	str.w	r2, [sl, #28]
   1f472:	3518      	adds	r5, #24
   1f474:	f10a 0220 	add.w	r2, sl, #32
   1f478:	e7a6      	b.n	1f3c8 <_realloc_r+0x258>
   1f47a:	4632      	mov	r2, r6
   1f47c:	e77f      	b.n	1f37e <_realloc_r+0x20e>
   1f47e:	4629      	mov	r1, r5
   1f480:	4630      	mov	r0, r6
   1f482:	9301      	str	r3, [sp, #4]
   1f484:	f7ff fd76 	bl	1ef74 <memmove>
   1f488:	9b01      	ldr	r3, [sp, #4]
   1f48a:	e77e      	b.n	1f38a <_realloc_r+0x21a>
   1f48c:	68a9      	ldr	r1, [r5, #8]
   1f48e:	f8ca 1010 	str.w	r1, [sl, #16]
   1f492:	68e9      	ldr	r1, [r5, #12]
   1f494:	f8ca 1014 	str.w	r1, [sl, #20]
   1f498:	2a24      	cmp	r2, #36	; 0x24
   1f49a:	d003      	beq.n	1f4a4 <_realloc_r+0x334>
   1f49c:	3510      	adds	r5, #16
   1f49e:	f10a 0218 	add.w	r2, sl, #24
   1f4a2:	e76c      	b.n	1f37e <_realloc_r+0x20e>
   1f4a4:	692a      	ldr	r2, [r5, #16]
   1f4a6:	f8ca 2018 	str.w	r2, [sl, #24]
   1f4aa:	696a      	ldr	r2, [r5, #20]
   1f4ac:	f8ca 201c 	str.w	r2, [sl, #28]
   1f4b0:	3518      	adds	r5, #24
   1f4b2:	f10a 0220 	add.w	r2, sl, #32
   1f4b6:	e762      	b.n	1f37e <_realloc_r+0x20e>
   1f4b8:	20000694 	.word	0x20000694

0001f4bc <_sbrk_r>:
   1f4bc:	b538      	push	{r3, r4, r5, lr}
   1f4be:	4c07      	ldr	r4, [pc, #28]	; (1f4dc <_sbrk_r+0x20>)
   1f4c0:	2300      	movs	r3, #0
   1f4c2:	4605      	mov	r5, r0
   1f4c4:	4608      	mov	r0, r1
   1f4c6:	6023      	str	r3, [r4, #0]
   1f4c8:	f003 ff64 	bl	23394 <_sbrk>
   1f4cc:	1c43      	adds	r3, r0, #1
   1f4ce:	d000      	beq.n	1f4d2 <_sbrk_r+0x16>
   1f4d0:	bd38      	pop	{r3, r4, r5, pc}
   1f4d2:	6823      	ldr	r3, [r4, #0]
   1f4d4:	2b00      	cmp	r3, #0
   1f4d6:	d0fb      	beq.n	1f4d0 <_sbrk_r+0x14>
   1f4d8:	602b      	str	r3, [r5, #0]
   1f4da:	bd38      	pop	{r3, r4, r5, pc}
   1f4dc:	2000239c 	.word	0x2000239c

0001f4e0 <_raise_r>:
   1f4e0:	291f      	cmp	r1, #31
   1f4e2:	d828      	bhi.n	1f536 <_raise_r+0x56>
   1f4e4:	b520      	push	{r5, lr}
   1f4e6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1f4ea:	b082      	sub	sp, #8
   1f4ec:	4605      	mov	r5, r0
   1f4ee:	b1aa      	cbz	r2, 1f51c <_raise_r+0x3c>
   1f4f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1f4f4:	b193      	cbz	r3, 1f51c <_raise_r+0x3c>
   1f4f6:	2b01      	cmp	r3, #1
   1f4f8:	d00e      	beq.n	1f518 <_raise_r+0x38>
   1f4fa:	1c58      	adds	r0, r3, #1
   1f4fc:	d007      	beq.n	1f50e <_raise_r+0x2e>
   1f4fe:	2500      	movs	r5, #0
   1f500:	4608      	mov	r0, r1
   1f502:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1f506:	4798      	blx	r3
   1f508:	4628      	mov	r0, r5
   1f50a:	b002      	add	sp, #8
   1f50c:	bd20      	pop	{r5, pc}
   1f50e:	2316      	movs	r3, #22
   1f510:	2001      	movs	r0, #1
   1f512:	602b      	str	r3, [r5, #0]
   1f514:	b002      	add	sp, #8
   1f516:	bd20      	pop	{r5, pc}
   1f518:	2000      	movs	r0, #0
   1f51a:	e7f6      	b.n	1f50a <_raise_r+0x2a>
   1f51c:	4628      	mov	r0, r5
   1f51e:	9101      	str	r1, [sp, #4]
   1f520:	f000 f82a 	bl	1f578 <_getpid_r>
   1f524:	9901      	ldr	r1, [sp, #4]
   1f526:	460a      	mov	r2, r1
   1f528:	4601      	mov	r1, r0
   1f52a:	4628      	mov	r0, r5
   1f52c:	b002      	add	sp, #8
   1f52e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1f532:	f000 b80d 	b.w	1f550 <_kill_r>
   1f536:	2316      	movs	r3, #22
   1f538:	6003      	str	r3, [r0, #0]
   1f53a:	f04f 30ff 	mov.w	r0, #4294967295
   1f53e:	4770      	bx	lr

0001f540 <raise>:
   1f540:	4b02      	ldr	r3, [pc, #8]	; (1f54c <raise+0xc>)
   1f542:	4601      	mov	r1, r0
   1f544:	6818      	ldr	r0, [r3, #0]
   1f546:	f7ff bfcb 	b.w	1f4e0 <_raise_r>
   1f54a:	bf00      	nop
   1f54c:	200000f8 	.word	0x200000f8

0001f550 <_kill_r>:
   1f550:	b538      	push	{r3, r4, r5, lr}
   1f552:	460b      	mov	r3, r1
   1f554:	4c07      	ldr	r4, [pc, #28]	; (1f574 <_kill_r+0x24>)
   1f556:	4605      	mov	r5, r0
   1f558:	4611      	mov	r1, r2
   1f55a:	4618      	mov	r0, r3
   1f55c:	2300      	movs	r3, #0
   1f55e:	6023      	str	r3, [r4, #0]
   1f560:	f003 ff92 	bl	23488 <_kill>
   1f564:	1c43      	adds	r3, r0, #1
   1f566:	d000      	beq.n	1f56a <_kill_r+0x1a>
   1f568:	bd38      	pop	{r3, r4, r5, pc}
   1f56a:	6823      	ldr	r3, [r4, #0]
   1f56c:	2b00      	cmp	r3, #0
   1f56e:	d0fb      	beq.n	1f568 <_kill_r+0x18>
   1f570:	602b      	str	r3, [r5, #0]
   1f572:	bd38      	pop	{r3, r4, r5, pc}
   1f574:	2000239c 	.word	0x2000239c

0001f578 <_getpid_r>:
   1f578:	f003 bf0a 	b.w	23390 <_getpid>

0001f57c <sprintf>:
   1f57c:	b40e      	push	{r1, r2, r3}
   1f57e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f580:	b09c      	sub	sp, #112	; 0x70
   1f582:	ab21      	add	r3, sp, #132	; 0x84
   1f584:	490f      	ldr	r1, [pc, #60]	; (1f5c4 <sprintf+0x48>)
   1f586:	f853 2b04 	ldr.w	r2, [r3], #4
   1f58a:	9301      	str	r3, [sp, #4]
   1f58c:	4605      	mov	r5, r0
   1f58e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1f592:	6808      	ldr	r0, [r1, #0]
   1f594:	9502      	str	r5, [sp, #8]
   1f596:	f44f 7702 	mov.w	r7, #520	; 0x208
   1f59a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1f59e:	a902      	add	r1, sp, #8
   1f5a0:	9506      	str	r5, [sp, #24]
   1f5a2:	f8ad 7014 	strh.w	r7, [sp, #20]
   1f5a6:	9404      	str	r4, [sp, #16]
   1f5a8:	9407      	str	r4, [sp, #28]
   1f5aa:	f8ad 6016 	strh.w	r6, [sp, #22]
   1f5ae:	f000 fa47 	bl	1fa40 <_svfprintf_r>
   1f5b2:	9b02      	ldr	r3, [sp, #8]
   1f5b4:	2200      	movs	r2, #0
   1f5b6:	701a      	strb	r2, [r3, #0]
   1f5b8:	b01c      	add	sp, #112	; 0x70
   1f5ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1f5be:	b003      	add	sp, #12
   1f5c0:	4770      	bx	lr
   1f5c2:	bf00      	nop
   1f5c4:	200000f8 	.word	0x200000f8
	...
   1f5e0:	eba2 0003 	sub.w	r0, r2, r3
   1f5e4:	4770      	bx	lr
   1f5e6:	bf00      	nop

0001f5e8 <strcmp>:
   1f5e8:	7802      	ldrb	r2, [r0, #0]
   1f5ea:	780b      	ldrb	r3, [r1, #0]
   1f5ec:	2a01      	cmp	r2, #1
   1f5ee:	bf28      	it	cs
   1f5f0:	429a      	cmpcs	r2, r3
   1f5f2:	d1f5      	bne.n	1f5e0 <sprintf+0x64>
   1f5f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1f5f8:	ea40 0401 	orr.w	r4, r0, r1
   1f5fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1f600:	f06f 0c00 	mvn.w	ip, #0
   1f604:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1f608:	b312      	cbz	r2, 1f650 <strcmp+0x68>
   1f60a:	ea80 0401 	eor.w	r4, r0, r1
   1f60e:	f014 0f07 	tst.w	r4, #7
   1f612:	d16a      	bne.n	1f6ea <strcmp+0x102>
   1f614:	f000 0407 	and.w	r4, r0, #7
   1f618:	f020 0007 	bic.w	r0, r0, #7
   1f61c:	f004 0503 	and.w	r5, r4, #3
   1f620:	f021 0107 	bic.w	r1, r1, #7
   1f624:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1f628:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1f62c:	f014 0f04 	tst.w	r4, #4
   1f630:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1f634:	fa0c f405 	lsl.w	r4, ip, r5
   1f638:	ea62 0204 	orn	r2, r2, r4
   1f63c:	ea66 0604 	orn	r6, r6, r4
   1f640:	d00a      	beq.n	1f658 <strcmp+0x70>
   1f642:	ea63 0304 	orn	r3, r3, r4
   1f646:	4662      	mov	r2, ip
   1f648:	ea67 0704 	orn	r7, r7, r4
   1f64c:	4666      	mov	r6, ip
   1f64e:	e003      	b.n	1f658 <strcmp+0x70>
   1f650:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1f654:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1f658:	fa82 f54c 	uadd8	r5, r2, ip
   1f65c:	ea82 0406 	eor.w	r4, r2, r6
   1f660:	faa4 f48c 	sel	r4, r4, ip
   1f664:	bb6c      	cbnz	r4, 1f6c2 <strcmp+0xda>
   1f666:	fa83 f54c 	uadd8	r5, r3, ip
   1f66a:	ea83 0507 	eor.w	r5, r3, r7
   1f66e:	faa5 f58c 	sel	r5, r5, ip
   1f672:	b995      	cbnz	r5, 1f69a <strcmp+0xb2>
   1f674:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1f678:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1f67c:	fa82 f54c 	uadd8	r5, r2, ip
   1f680:	ea82 0406 	eor.w	r4, r2, r6
   1f684:	faa4 f48c 	sel	r4, r4, ip
   1f688:	fa83 f54c 	uadd8	r5, r3, ip
   1f68c:	ea83 0507 	eor.w	r5, r3, r7
   1f690:	faa5 f58c 	sel	r5, r5, ip
   1f694:	4325      	orrs	r5, r4
   1f696:	d0db      	beq.n	1f650 <strcmp+0x68>
   1f698:	b99c      	cbnz	r4, 1f6c2 <strcmp+0xda>
   1f69a:	ba2d      	rev	r5, r5
   1f69c:	fab5 f485 	clz	r4, r5
   1f6a0:	f024 0407 	bic.w	r4, r4, #7
   1f6a4:	fa27 f104 	lsr.w	r1, r7, r4
   1f6a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1f6ac:	fa23 f304 	lsr.w	r3, r3, r4
   1f6b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1f6b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1f6b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f6bc:	eba0 0001 	sub.w	r0, r0, r1
   1f6c0:	4770      	bx	lr
   1f6c2:	ba24      	rev	r4, r4
   1f6c4:	fab4 f484 	clz	r4, r4
   1f6c8:	f024 0407 	bic.w	r4, r4, #7
   1f6cc:	fa26 f104 	lsr.w	r1, r6, r4
   1f6d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1f6d4:	fa22 f204 	lsr.w	r2, r2, r4
   1f6d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1f6dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1f6e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f6e4:	eba0 0001 	sub.w	r0, r0, r1
   1f6e8:	4770      	bx	lr
   1f6ea:	f014 0f03 	tst.w	r4, #3
   1f6ee:	d13c      	bne.n	1f76a <strcmp+0x182>
   1f6f0:	f010 0403 	ands.w	r4, r0, #3
   1f6f4:	d128      	bne.n	1f748 <strcmp+0x160>
   1f6f6:	f850 2b08 	ldr.w	r2, [r0], #8
   1f6fa:	f851 3b08 	ldr.w	r3, [r1], #8
   1f6fe:	fa82 f54c 	uadd8	r5, r2, ip
   1f702:	ea82 0503 	eor.w	r5, r2, r3
   1f706:	faa5 f58c 	sel	r5, r5, ip
   1f70a:	b95d      	cbnz	r5, 1f724 <strcmp+0x13c>
   1f70c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1f710:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1f714:	fa82 f54c 	uadd8	r5, r2, ip
   1f718:	ea82 0503 	eor.w	r5, r2, r3
   1f71c:	faa5 f58c 	sel	r5, r5, ip
   1f720:	2d00      	cmp	r5, #0
   1f722:	d0e8      	beq.n	1f6f6 <strcmp+0x10e>
   1f724:	ba2d      	rev	r5, r5
   1f726:	fab5 f485 	clz	r4, r5
   1f72a:	f024 0407 	bic.w	r4, r4, #7
   1f72e:	fa23 f104 	lsr.w	r1, r3, r4
   1f732:	fa22 f204 	lsr.w	r2, r2, r4
   1f736:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1f73a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1f73e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f742:	eba0 0001 	sub.w	r0, r0, r1
   1f746:	4770      	bx	lr
   1f748:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1f74c:	f020 0003 	bic.w	r0, r0, #3
   1f750:	f850 2b08 	ldr.w	r2, [r0], #8
   1f754:	f021 0103 	bic.w	r1, r1, #3
   1f758:	f851 3b08 	ldr.w	r3, [r1], #8
   1f75c:	fa0c f404 	lsl.w	r4, ip, r4
   1f760:	ea62 0204 	orn	r2, r2, r4
   1f764:	ea63 0304 	orn	r3, r3, r4
   1f768:	e7c9      	b.n	1f6fe <strcmp+0x116>
   1f76a:	f010 0403 	ands.w	r4, r0, #3
   1f76e:	d01a      	beq.n	1f7a6 <strcmp+0x1be>
   1f770:	eba1 0104 	sub.w	r1, r1, r4
   1f774:	f020 0003 	bic.w	r0, r0, #3
   1f778:	07e4      	lsls	r4, r4, #31
   1f77a:	f850 2b04 	ldr.w	r2, [r0], #4
   1f77e:	d006      	beq.n	1f78e <strcmp+0x1a6>
   1f780:	d20f      	bcs.n	1f7a2 <strcmp+0x1ba>
   1f782:	788b      	ldrb	r3, [r1, #2]
   1f784:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1f788:	1ae4      	subs	r4, r4, r3
   1f78a:	d106      	bne.n	1f79a <strcmp+0x1b2>
   1f78c:	b12b      	cbz	r3, 1f79a <strcmp+0x1b2>
   1f78e:	78cb      	ldrb	r3, [r1, #3]
   1f790:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1f794:	1ae4      	subs	r4, r4, r3
   1f796:	d100      	bne.n	1f79a <strcmp+0x1b2>
   1f798:	b91b      	cbnz	r3, 1f7a2 <strcmp+0x1ba>
   1f79a:	4620      	mov	r0, r4
   1f79c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1f7a0:	4770      	bx	lr
   1f7a2:	f101 0104 	add.w	r1, r1, #4
   1f7a6:	f850 2b04 	ldr.w	r2, [r0], #4
   1f7aa:	07cc      	lsls	r4, r1, #31
   1f7ac:	f021 0103 	bic.w	r1, r1, #3
   1f7b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1f7b4:	d848      	bhi.n	1f848 <strcmp+0x260>
   1f7b6:	d224      	bcs.n	1f802 <strcmp+0x21a>
   1f7b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1f7bc:	fa82 f54c 	uadd8	r5, r2, ip
   1f7c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1f7c4:	faa5 f58c 	sel	r5, r5, ip
   1f7c8:	d10a      	bne.n	1f7e0 <strcmp+0x1f8>
   1f7ca:	b965      	cbnz	r5, 1f7e6 <strcmp+0x1fe>
   1f7cc:	f851 3b04 	ldr.w	r3, [r1], #4
   1f7d0:	ea84 0402 	eor.w	r4, r4, r2
   1f7d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1f7d8:	d10e      	bne.n	1f7f8 <strcmp+0x210>
   1f7da:	f850 2b04 	ldr.w	r2, [r0], #4
   1f7de:	e7eb      	b.n	1f7b8 <strcmp+0x1d0>
   1f7e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1f7e4:	e055      	b.n	1f892 <strcmp+0x2aa>
   1f7e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1f7ea:	d14d      	bne.n	1f888 <strcmp+0x2a0>
   1f7ec:	7808      	ldrb	r0, [r1, #0]
   1f7ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f7f2:	f1c0 0000 	rsb	r0, r0, #0
   1f7f6:	4770      	bx	lr
   1f7f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1f7fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1f800:	e047      	b.n	1f892 <strcmp+0x2aa>
   1f802:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1f806:	fa82 f54c 	uadd8	r5, r2, ip
   1f80a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1f80e:	faa5 f58c 	sel	r5, r5, ip
   1f812:	d10a      	bne.n	1f82a <strcmp+0x242>
   1f814:	b965      	cbnz	r5, 1f830 <strcmp+0x248>
   1f816:	f851 3b04 	ldr.w	r3, [r1], #4
   1f81a:	ea84 0402 	eor.w	r4, r4, r2
   1f81e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1f822:	d10c      	bne.n	1f83e <strcmp+0x256>
   1f824:	f850 2b04 	ldr.w	r2, [r0], #4
   1f828:	e7eb      	b.n	1f802 <strcmp+0x21a>
   1f82a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1f82e:	e030      	b.n	1f892 <strcmp+0x2aa>
   1f830:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1f834:	d128      	bne.n	1f888 <strcmp+0x2a0>
   1f836:	880b      	ldrh	r3, [r1, #0]
   1f838:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1f83c:	e029      	b.n	1f892 <strcmp+0x2aa>
   1f83e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1f842:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1f846:	e024      	b.n	1f892 <strcmp+0x2aa>
   1f848:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1f84c:	fa82 f54c 	uadd8	r5, r2, ip
   1f850:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1f854:	faa5 f58c 	sel	r5, r5, ip
   1f858:	d10a      	bne.n	1f870 <strcmp+0x288>
   1f85a:	b965      	cbnz	r5, 1f876 <strcmp+0x28e>
   1f85c:	f851 3b04 	ldr.w	r3, [r1], #4
   1f860:	ea84 0402 	eor.w	r4, r4, r2
   1f864:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1f868:	d109      	bne.n	1f87e <strcmp+0x296>
   1f86a:	f850 2b04 	ldr.w	r2, [r0], #4
   1f86e:	e7eb      	b.n	1f848 <strcmp+0x260>
   1f870:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1f874:	e00d      	b.n	1f892 <strcmp+0x2aa>
   1f876:	f015 0fff 	tst.w	r5, #255	; 0xff
   1f87a:	d105      	bne.n	1f888 <strcmp+0x2a0>
   1f87c:	680b      	ldr	r3, [r1, #0]
   1f87e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1f882:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f886:	e004      	b.n	1f892 <strcmp+0x2aa>
   1f888:	f04f 0000 	mov.w	r0, #0
   1f88c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f890:	4770      	bx	lr
   1f892:	ba12      	rev	r2, r2
   1f894:	ba1b      	rev	r3, r3
   1f896:	fa82 f44c 	uadd8	r4, r2, ip
   1f89a:	ea82 0403 	eor.w	r4, r2, r3
   1f89e:	faa4 f58c 	sel	r5, r4, ip
   1f8a2:	fab5 f485 	clz	r4, r5
   1f8a6:	fa02 f204 	lsl.w	r2, r2, r4
   1f8aa:	fa03 f304 	lsl.w	r3, r3, r4
   1f8ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1f8b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f8b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1f8ba:	4770      	bx	lr
   1f8bc:	0000      	movs	r0, r0
	...

0001f8c0 <strlen>:
   1f8c0:	f890 f000 	pld	[r0]
   1f8c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1f8c8:	f020 0107 	bic.w	r1, r0, #7
   1f8cc:	f06f 0c00 	mvn.w	ip, #0
   1f8d0:	f010 0407 	ands.w	r4, r0, #7
   1f8d4:	f891 f020 	pld	[r1, #32]
   1f8d8:	f040 8049 	bne.w	1f96e <strlen+0xae>
   1f8dc:	f04f 0400 	mov.w	r4, #0
   1f8e0:	f06f 0007 	mvn.w	r0, #7
   1f8e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1f8e8:	f891 f040 	pld	[r1, #64]	; 0x40
   1f8ec:	f100 0008 	add.w	r0, r0, #8
   1f8f0:	fa82 f24c 	uadd8	r2, r2, ip
   1f8f4:	faa4 f28c 	sel	r2, r4, ip
   1f8f8:	fa83 f34c 	uadd8	r3, r3, ip
   1f8fc:	faa2 f38c 	sel	r3, r2, ip
   1f900:	bb4b      	cbnz	r3, 1f956 <strlen+0x96>
   1f902:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1f906:	fa82 f24c 	uadd8	r2, r2, ip
   1f90a:	f100 0008 	add.w	r0, r0, #8
   1f90e:	faa4 f28c 	sel	r2, r4, ip
   1f912:	fa83 f34c 	uadd8	r3, r3, ip
   1f916:	faa2 f38c 	sel	r3, r2, ip
   1f91a:	b9e3      	cbnz	r3, 1f956 <strlen+0x96>
   1f91c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1f920:	fa82 f24c 	uadd8	r2, r2, ip
   1f924:	f100 0008 	add.w	r0, r0, #8
   1f928:	faa4 f28c 	sel	r2, r4, ip
   1f92c:	fa83 f34c 	uadd8	r3, r3, ip
   1f930:	faa2 f38c 	sel	r3, r2, ip
   1f934:	b97b      	cbnz	r3, 1f956 <strlen+0x96>
   1f936:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1f93a:	f101 0120 	add.w	r1, r1, #32
   1f93e:	fa82 f24c 	uadd8	r2, r2, ip
   1f942:	f100 0008 	add.w	r0, r0, #8
   1f946:	faa4 f28c 	sel	r2, r4, ip
   1f94a:	fa83 f34c 	uadd8	r3, r3, ip
   1f94e:	faa2 f38c 	sel	r3, r2, ip
   1f952:	2b00      	cmp	r3, #0
   1f954:	d0c6      	beq.n	1f8e4 <strlen+0x24>
   1f956:	2a00      	cmp	r2, #0
   1f958:	bf04      	itt	eq
   1f95a:	3004      	addeq	r0, #4
   1f95c:	461a      	moveq	r2, r3
   1f95e:	ba12      	rev	r2, r2
   1f960:	fab2 f282 	clz	r2, r2
   1f964:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1f968:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1f96c:	4770      	bx	lr
   1f96e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1f972:	f004 0503 	and.w	r5, r4, #3
   1f976:	f1c4 0000 	rsb	r0, r4, #0
   1f97a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1f97e:	f014 0f04 	tst.w	r4, #4
   1f982:	f891 f040 	pld	[r1, #64]	; 0x40
   1f986:	fa0c f505 	lsl.w	r5, ip, r5
   1f98a:	ea62 0205 	orn	r2, r2, r5
   1f98e:	bf1c      	itt	ne
   1f990:	ea63 0305 	ornne	r3, r3, r5
   1f994:	4662      	movne	r2, ip
   1f996:	f04f 0400 	mov.w	r4, #0
   1f99a:	e7a9      	b.n	1f8f0 <strlen+0x30>

0001f99c <strncmp>:
   1f99c:	2a00      	cmp	r2, #0
   1f99e:	d041      	beq.n	1fa24 <strncmp+0x88>
   1f9a0:	ea40 0301 	orr.w	r3, r0, r1
   1f9a4:	f013 0303 	ands.w	r3, r3, #3
   1f9a8:	b4f0      	push	{r4, r5, r6, r7}
   1f9aa:	d125      	bne.n	1f9f8 <strncmp+0x5c>
   1f9ac:	2a03      	cmp	r2, #3
   1f9ae:	d923      	bls.n	1f9f8 <strncmp+0x5c>
   1f9b0:	6804      	ldr	r4, [r0, #0]
   1f9b2:	680d      	ldr	r5, [r1, #0]
   1f9b4:	42ac      	cmp	r4, r5
   1f9b6:	d11f      	bne.n	1f9f8 <strncmp+0x5c>
   1f9b8:	3a04      	subs	r2, #4
   1f9ba:	d038      	beq.n	1fa2e <strncmp+0x92>
   1f9bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1f9c0:	ea25 0404 	bic.w	r4, r5, r4
   1f9c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1f9c8:	d12e      	bne.n	1fa28 <strncmp+0x8c>
   1f9ca:	3004      	adds	r0, #4
   1f9cc:	3104      	adds	r1, #4
   1f9ce:	e00f      	b.n	1f9f0 <strncmp+0x54>
   1f9d0:	f850 3b04 	ldr.w	r3, [r0], #4
   1f9d4:	680e      	ldr	r6, [r1, #0]
   1f9d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1f9da:	42b3      	cmp	r3, r6
   1f9dc:	ea24 0403 	bic.w	r4, r4, r3
   1f9e0:	f101 0104 	add.w	r1, r1, #4
   1f9e4:	d126      	bne.n	1fa34 <strncmp+0x98>
   1f9e6:	3a04      	subs	r2, #4
   1f9e8:	d021      	beq.n	1fa2e <strncmp+0x92>
   1f9ea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1f9ee:	d11b      	bne.n	1fa28 <strncmp+0x8c>
   1f9f0:	2a03      	cmp	r2, #3
   1f9f2:	4607      	mov	r7, r0
   1f9f4:	460d      	mov	r5, r1
   1f9f6:	d8eb      	bhi.n	1f9d0 <strncmp+0x34>
   1f9f8:	7805      	ldrb	r5, [r0, #0]
   1f9fa:	780c      	ldrb	r4, [r1, #0]
   1f9fc:	42ac      	cmp	r4, r5
   1f9fe:	f102 33ff 	add.w	r3, r2, #4294967295
   1fa02:	d11a      	bne.n	1fa3a <strncmp+0x9e>
   1fa04:	b183      	cbz	r3, 1fa28 <strncmp+0x8c>
   1fa06:	b914      	cbnz	r4, 1fa0e <strncmp+0x72>
   1fa08:	e00e      	b.n	1fa28 <strncmp+0x8c>
   1fa0a:	b16b      	cbz	r3, 1fa28 <strncmp+0x8c>
   1fa0c:	b17a      	cbz	r2, 1fa2e <strncmp+0x92>
   1fa0e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1fa12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1fa16:	42a2      	cmp	r2, r4
   1fa18:	f103 33ff 	add.w	r3, r3, #4294967295
   1fa1c:	d0f5      	beq.n	1fa0a <strncmp+0x6e>
   1fa1e:	1b10      	subs	r0, r2, r4
   1fa20:	bcf0      	pop	{r4, r5, r6, r7}
   1fa22:	4770      	bx	lr
   1fa24:	4610      	mov	r0, r2
   1fa26:	4770      	bx	lr
   1fa28:	2000      	movs	r0, #0
   1fa2a:	bcf0      	pop	{r4, r5, r6, r7}
   1fa2c:	4770      	bx	lr
   1fa2e:	4610      	mov	r0, r2
   1fa30:	bcf0      	pop	{r4, r5, r6, r7}
   1fa32:	4770      	bx	lr
   1fa34:	4629      	mov	r1, r5
   1fa36:	4638      	mov	r0, r7
   1fa38:	e7de      	b.n	1f9f8 <strncmp+0x5c>
   1fa3a:	462a      	mov	r2, r5
   1fa3c:	e7ef      	b.n	1fa1e <strncmp+0x82>
   1fa3e:	bf00      	nop

0001fa40 <_svfprintf_r>:
   1fa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa44:	b0c1      	sub	sp, #260	; 0x104
   1fa46:	460c      	mov	r4, r1
   1fa48:	9107      	str	r1, [sp, #28]
   1fa4a:	4692      	mov	sl, r2
   1fa4c:	930b      	str	r3, [sp, #44]	; 0x2c
   1fa4e:	9008      	str	r0, [sp, #32]
   1fa50:	f002 fde2 	bl	22618 <_localeconv_r>
   1fa54:	6803      	ldr	r3, [r0, #0]
   1fa56:	9314      	str	r3, [sp, #80]	; 0x50
   1fa58:	4618      	mov	r0, r3
   1fa5a:	f7ff ff31 	bl	1f8c0 <strlen>
   1fa5e:	89a3      	ldrh	r3, [r4, #12]
   1fa60:	9013      	str	r0, [sp, #76]	; 0x4c
   1fa62:	0619      	lsls	r1, r3, #24
   1fa64:	d503      	bpl.n	1fa6e <_svfprintf_r+0x2e>
   1fa66:	6923      	ldr	r3, [r4, #16]
   1fa68:	2b00      	cmp	r3, #0
   1fa6a:	f001 801b 	beq.w	20aa4 <_svfprintf_r+0x1064>
   1fa6e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1fcc0 <_svfprintf_r+0x280>
   1fa72:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fa76:	2300      	movs	r3, #0
   1fa78:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1fa7c:	930f      	str	r3, [sp, #60]	; 0x3c
   1fa7e:	9325      	str	r3, [sp, #148]	; 0x94
   1fa80:	9324      	str	r3, [sp, #144]	; 0x90
   1fa82:	9312      	str	r3, [sp, #72]	; 0x48
   1fa84:	9315      	str	r3, [sp, #84]	; 0x54
   1fa86:	9305      	str	r3, [sp, #20]
   1fa88:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1fa8c:	46c8      	mov	r8, r9
   1fa8e:	f89a 3000 	ldrb.w	r3, [sl]
   1fa92:	4654      	mov	r4, sl
   1fa94:	b1e3      	cbz	r3, 1fad0 <_svfprintf_r+0x90>
   1fa96:	2b25      	cmp	r3, #37	; 0x25
   1fa98:	d102      	bne.n	1faa0 <_svfprintf_r+0x60>
   1fa9a:	e019      	b.n	1fad0 <_svfprintf_r+0x90>
   1fa9c:	2b25      	cmp	r3, #37	; 0x25
   1fa9e:	d003      	beq.n	1faa8 <_svfprintf_r+0x68>
   1faa0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1faa4:	2b00      	cmp	r3, #0
   1faa6:	d1f9      	bne.n	1fa9c <_svfprintf_r+0x5c>
   1faa8:	eba4 050a 	sub.w	r5, r4, sl
   1faac:	b185      	cbz	r5, 1fad0 <_svfprintf_r+0x90>
   1faae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fab0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fab2:	f8c8 a000 	str.w	sl, [r8]
   1fab6:	3301      	adds	r3, #1
   1fab8:	442a      	add	r2, r5
   1faba:	2b07      	cmp	r3, #7
   1fabc:	f8c8 5004 	str.w	r5, [r8, #4]
   1fac0:	9225      	str	r2, [sp, #148]	; 0x94
   1fac2:	9324      	str	r3, [sp, #144]	; 0x90
   1fac4:	dc7f      	bgt.n	1fbc6 <_svfprintf_r+0x186>
   1fac6:	f108 0808 	add.w	r8, r8, #8
   1faca:	9b05      	ldr	r3, [sp, #20]
   1facc:	442b      	add	r3, r5
   1face:	9305      	str	r3, [sp, #20]
   1fad0:	7823      	ldrb	r3, [r4, #0]
   1fad2:	2b00      	cmp	r3, #0
   1fad4:	d07f      	beq.n	1fbd6 <_svfprintf_r+0x196>
   1fad6:	2300      	movs	r3, #0
   1fad8:	461a      	mov	r2, r3
   1fada:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1fade:	4619      	mov	r1, r3
   1fae0:	9309      	str	r3, [sp, #36]	; 0x24
   1fae2:	469b      	mov	fp, r3
   1fae4:	f04f 30ff 	mov.w	r0, #4294967295
   1fae8:	7863      	ldrb	r3, [r4, #1]
   1faea:	9006      	str	r0, [sp, #24]
   1faec:	f104 0a01 	add.w	sl, r4, #1
   1faf0:	f10a 0a01 	add.w	sl, sl, #1
   1faf4:	f1a3 0020 	sub.w	r0, r3, #32
   1faf8:	2858      	cmp	r0, #88	; 0x58
   1fafa:	f200 83d3 	bhi.w	202a4 <_svfprintf_r+0x864>
   1fafe:	e8df f010 	tbh	[pc, r0, lsl #1]
   1fb02:	023f      	.short	0x023f
   1fb04:	03d103d1 	.word	0x03d103d1
   1fb08:	03d10247 	.word	0x03d10247
   1fb0c:	03d103d1 	.word	0x03d103d1
   1fb10:	03d103d1 	.word	0x03d103d1
   1fb14:	024c03d1 	.word	0x024c03d1
   1fb18:	03d1020a 	.word	0x03d1020a
   1fb1c:	0273005d 	.word	0x0273005d
   1fb20:	028e03d1 	.word	0x028e03d1
   1fb24:	03c103c1 	.word	0x03c103c1
   1fb28:	03c103c1 	.word	0x03c103c1
   1fb2c:	03c103c1 	.word	0x03c103c1
   1fb30:	03c103c1 	.word	0x03c103c1
   1fb34:	03d103c1 	.word	0x03d103c1
   1fb38:	03d103d1 	.word	0x03d103d1
   1fb3c:	03d103d1 	.word	0x03d103d1
   1fb40:	03d103d1 	.word	0x03d103d1
   1fb44:	03d103d1 	.word	0x03d103d1
   1fb48:	033f03d1 	.word	0x033f03d1
   1fb4c:	03d1035f 	.word	0x03d1035f
   1fb50:	03d1035f 	.word	0x03d1035f
   1fb54:	03d103d1 	.word	0x03d103d1
   1fb58:	03aa03d1 	.word	0x03aa03d1
   1fb5c:	03d103d1 	.word	0x03d103d1
   1fb60:	03d103af 	.word	0x03d103af
   1fb64:	03d103d1 	.word	0x03d103d1
   1fb68:	03d103d1 	.word	0x03d103d1
   1fb6c:	03d10261 	.word	0x03d10261
   1fb70:	032603d1 	.word	0x032603d1
   1fb74:	03d103d1 	.word	0x03d103d1
   1fb78:	03d103d1 	.word	0x03d103d1
   1fb7c:	03d103d1 	.word	0x03d103d1
   1fb80:	03d103d1 	.word	0x03d103d1
   1fb84:	03d103d1 	.word	0x03d103d1
   1fb88:	02e302ce 	.word	0x02e302ce
   1fb8c:	035f035f 	.word	0x035f035f
   1fb90:	0293035f 	.word	0x0293035f
   1fb94:	03d102e3 	.word	0x03d102e3
   1fb98:	029803d1 	.word	0x029803d1
   1fb9c:	02a503d1 	.word	0x02a503d1
   1fba0:	02bc01d3 	.word	0x02bc01d3
   1fba4:	03d1020f 	.word	0x03d1020f
   1fba8:	03d101e8 	.word	0x03d101e8
   1fbac:	03d1007e 	.word	0x03d1007e
   1fbb0:	021403d1 	.word	0x021403d1
   1fbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fbb6:	930b      	str	r3, [sp, #44]	; 0x2c
   1fbb8:	4240      	negs	r0, r0
   1fbba:	9009      	str	r0, [sp, #36]	; 0x24
   1fbbc:	f04b 0b04 	orr.w	fp, fp, #4
   1fbc0:	f89a 3000 	ldrb.w	r3, [sl]
   1fbc4:	e794      	b.n	1faf0 <_svfprintf_r+0xb0>
   1fbc6:	aa23      	add	r2, sp, #140	; 0x8c
   1fbc8:	9907      	ldr	r1, [sp, #28]
   1fbca:	9808      	ldr	r0, [sp, #32]
   1fbcc:	f003 f8ea 	bl	22da4 <__ssprint_r>
   1fbd0:	b940      	cbnz	r0, 1fbe4 <_svfprintf_r+0x1a4>
   1fbd2:	46c8      	mov	r8, r9
   1fbd4:	e779      	b.n	1faca <_svfprintf_r+0x8a>
   1fbd6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1fbd8:	b123      	cbz	r3, 1fbe4 <_svfprintf_r+0x1a4>
   1fbda:	9808      	ldr	r0, [sp, #32]
   1fbdc:	9907      	ldr	r1, [sp, #28]
   1fbde:	aa23      	add	r2, sp, #140	; 0x8c
   1fbe0:	f003 f8e0 	bl	22da4 <__ssprint_r>
   1fbe4:	9b07      	ldr	r3, [sp, #28]
   1fbe6:	899b      	ldrh	r3, [r3, #12]
   1fbe8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fbec:	9b05      	ldr	r3, [sp, #20]
   1fbee:	bf18      	it	ne
   1fbf0:	f04f 33ff 	movne.w	r3, #4294967295
   1fbf4:	9305      	str	r3, [sp, #20]
   1fbf6:	9805      	ldr	r0, [sp, #20]
   1fbf8:	b041      	add	sp, #260	; 0x104
   1fbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbfe:	f01b 0f20 	tst.w	fp, #32
   1fc02:	930d      	str	r3, [sp, #52]	; 0x34
   1fc04:	f040 81e5 	bne.w	1ffd2 <_svfprintf_r+0x592>
   1fc08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fc0a:	f01b 0f10 	tst.w	fp, #16
   1fc0e:	4613      	mov	r3, r2
   1fc10:	f040 8588 	bne.w	20724 <_svfprintf_r+0xce4>
   1fc14:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1fc18:	f000 8584 	beq.w	20724 <_svfprintf_r+0xce4>
   1fc1c:	8814      	ldrh	r4, [r2, #0]
   1fc1e:	3204      	adds	r2, #4
   1fc20:	2500      	movs	r5, #0
   1fc22:	2301      	movs	r3, #1
   1fc24:	920b      	str	r2, [sp, #44]	; 0x2c
   1fc26:	2700      	movs	r7, #0
   1fc28:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1fc2c:	9906      	ldr	r1, [sp, #24]
   1fc2e:	1c4a      	adds	r2, r1, #1
   1fc30:	f000 826d 	beq.w	2010e <_svfprintf_r+0x6ce>
   1fc34:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1fc38:	9203      	str	r2, [sp, #12]
   1fc3a:	ea54 0205 	orrs.w	r2, r4, r5
   1fc3e:	f040 826c 	bne.w	2011a <_svfprintf_r+0x6da>
   1fc42:	2900      	cmp	r1, #0
   1fc44:	f040 8451 	bne.w	204ea <_svfprintf_r+0xaaa>
   1fc48:	2b00      	cmp	r3, #0
   1fc4a:	f040 850b 	bne.w	20664 <_svfprintf_r+0xc24>
   1fc4e:	f01b 0301 	ands.w	r3, fp, #1
   1fc52:	930a      	str	r3, [sp, #40]	; 0x28
   1fc54:	f000 861a 	beq.w	2088c <_svfprintf_r+0xe4c>
   1fc58:	ae40      	add	r6, sp, #256	; 0x100
   1fc5a:	2330      	movs	r3, #48	; 0x30
   1fc5c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1fc60:	9b06      	ldr	r3, [sp, #24]
   1fc62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fc64:	4293      	cmp	r3, r2
   1fc66:	bfb8      	it	lt
   1fc68:	4613      	movlt	r3, r2
   1fc6a:	9304      	str	r3, [sp, #16]
   1fc6c:	2300      	movs	r3, #0
   1fc6e:	930e      	str	r3, [sp, #56]	; 0x38
   1fc70:	b117      	cbz	r7, 1fc78 <_svfprintf_r+0x238>
   1fc72:	9b04      	ldr	r3, [sp, #16]
   1fc74:	3301      	adds	r3, #1
   1fc76:	9304      	str	r3, [sp, #16]
   1fc78:	9b03      	ldr	r3, [sp, #12]
   1fc7a:	f013 0302 	ands.w	r3, r3, #2
   1fc7e:	930c      	str	r3, [sp, #48]	; 0x30
   1fc80:	d002      	beq.n	1fc88 <_svfprintf_r+0x248>
   1fc82:	9b04      	ldr	r3, [sp, #16]
   1fc84:	3302      	adds	r3, #2
   1fc86:	9304      	str	r3, [sp, #16]
   1fc88:	9b03      	ldr	r3, [sp, #12]
   1fc8a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1fc8e:	f040 8320 	bne.w	202d2 <_svfprintf_r+0x892>
   1fc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc94:	9a04      	ldr	r2, [sp, #16]
   1fc96:	eba3 0b02 	sub.w	fp, r3, r2
   1fc9a:	f1bb 0f00 	cmp.w	fp, #0
   1fc9e:	f340 8318 	ble.w	202d2 <_svfprintf_r+0x892>
   1fca2:	f1bb 0f10 	cmp.w	fp, #16
   1fca6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fca8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1fcaa:	dd30      	ble.n	1fd0e <_svfprintf_r+0x2ce>
   1fcac:	4643      	mov	r3, r8
   1fcae:	4621      	mov	r1, r4
   1fcb0:	46a8      	mov	r8, r5
   1fcb2:	2710      	movs	r7, #16
   1fcb4:	9c08      	ldr	r4, [sp, #32]
   1fcb6:	9d07      	ldr	r5, [sp, #28]
   1fcb8:	e00d      	b.n	1fcd6 <_svfprintf_r+0x296>
   1fcba:	bf00      	nop
   1fcbc:	f3af 8000 	nop.w
	...
   1fcc8:	f1ab 0b10 	sub.w	fp, fp, #16
   1fccc:	f1bb 0f10 	cmp.w	fp, #16
   1fcd0:	f103 0308 	add.w	r3, r3, #8
   1fcd4:	dd18      	ble.n	1fd08 <_svfprintf_r+0x2c8>
   1fcd6:	3201      	adds	r2, #1
   1fcd8:	48b7      	ldr	r0, [pc, #732]	; (1ffb8 <_svfprintf_r+0x578>)
   1fcda:	9224      	str	r2, [sp, #144]	; 0x90
   1fcdc:	3110      	adds	r1, #16
   1fcde:	2a07      	cmp	r2, #7
   1fce0:	9125      	str	r1, [sp, #148]	; 0x94
   1fce2:	e883 0081 	stmia.w	r3, {r0, r7}
   1fce6:	ddef      	ble.n	1fcc8 <_svfprintf_r+0x288>
   1fce8:	aa23      	add	r2, sp, #140	; 0x8c
   1fcea:	4629      	mov	r1, r5
   1fcec:	4620      	mov	r0, r4
   1fcee:	f003 f859 	bl	22da4 <__ssprint_r>
   1fcf2:	2800      	cmp	r0, #0
   1fcf4:	f47f af76 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   1fcf8:	f1ab 0b10 	sub.w	fp, fp, #16
   1fcfc:	f1bb 0f10 	cmp.w	fp, #16
   1fd00:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fd02:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1fd04:	464b      	mov	r3, r9
   1fd06:	dce6      	bgt.n	1fcd6 <_svfprintf_r+0x296>
   1fd08:	4645      	mov	r5, r8
   1fd0a:	460c      	mov	r4, r1
   1fd0c:	4698      	mov	r8, r3
   1fd0e:	3201      	adds	r2, #1
   1fd10:	4ba9      	ldr	r3, [pc, #676]	; (1ffb8 <_svfprintf_r+0x578>)
   1fd12:	9224      	str	r2, [sp, #144]	; 0x90
   1fd14:	445c      	add	r4, fp
   1fd16:	2a07      	cmp	r2, #7
   1fd18:	9425      	str	r4, [sp, #148]	; 0x94
   1fd1a:	e888 0808 	stmia.w	r8, {r3, fp}
   1fd1e:	f300 84a6 	bgt.w	2066e <_svfprintf_r+0xc2e>
   1fd22:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fd26:	f108 0808 	add.w	r8, r8, #8
   1fd2a:	b177      	cbz	r7, 1fd4a <_svfprintf_r+0x30a>
   1fd2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd2e:	3301      	adds	r3, #1
   1fd30:	3401      	adds	r4, #1
   1fd32:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1fd36:	2201      	movs	r2, #1
   1fd38:	2b07      	cmp	r3, #7
   1fd3a:	9425      	str	r4, [sp, #148]	; 0x94
   1fd3c:	9324      	str	r3, [sp, #144]	; 0x90
   1fd3e:	e888 0006 	stmia.w	r8, {r1, r2}
   1fd42:	f300 83f4 	bgt.w	2052e <_svfprintf_r+0xaee>
   1fd46:	f108 0808 	add.w	r8, r8, #8
   1fd4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fd4c:	b16b      	cbz	r3, 1fd6a <_svfprintf_r+0x32a>
   1fd4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd50:	3301      	adds	r3, #1
   1fd52:	3402      	adds	r4, #2
   1fd54:	a91c      	add	r1, sp, #112	; 0x70
   1fd56:	2202      	movs	r2, #2
   1fd58:	2b07      	cmp	r3, #7
   1fd5a:	9425      	str	r4, [sp, #148]	; 0x94
   1fd5c:	9324      	str	r3, [sp, #144]	; 0x90
   1fd5e:	e888 0006 	stmia.w	r8, {r1, r2}
   1fd62:	f300 83d9 	bgt.w	20518 <_svfprintf_r+0xad8>
   1fd66:	f108 0808 	add.w	r8, r8, #8
   1fd6a:	2d80      	cmp	r5, #128	; 0x80
   1fd6c:	f000 8322 	beq.w	203b4 <_svfprintf_r+0x974>
   1fd70:	9b06      	ldr	r3, [sp, #24]
   1fd72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fd74:	1a9f      	subs	r7, r3, r2
   1fd76:	2f00      	cmp	r7, #0
   1fd78:	dd36      	ble.n	1fde8 <_svfprintf_r+0x3a8>
   1fd7a:	2f10      	cmp	r7, #16
   1fd7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd7e:	4d8f      	ldr	r5, [pc, #572]	; (1ffbc <_svfprintf_r+0x57c>)
   1fd80:	dd27      	ble.n	1fdd2 <_svfprintf_r+0x392>
   1fd82:	4642      	mov	r2, r8
   1fd84:	4621      	mov	r1, r4
   1fd86:	46b0      	mov	r8, r6
   1fd88:	f04f 0b10 	mov.w	fp, #16
   1fd8c:	462e      	mov	r6, r5
   1fd8e:	9c08      	ldr	r4, [sp, #32]
   1fd90:	9d07      	ldr	r5, [sp, #28]
   1fd92:	e004      	b.n	1fd9e <_svfprintf_r+0x35e>
   1fd94:	3f10      	subs	r7, #16
   1fd96:	2f10      	cmp	r7, #16
   1fd98:	f102 0208 	add.w	r2, r2, #8
   1fd9c:	dd15      	ble.n	1fdca <_svfprintf_r+0x38a>
   1fd9e:	3301      	adds	r3, #1
   1fda0:	3110      	adds	r1, #16
   1fda2:	2b07      	cmp	r3, #7
   1fda4:	9125      	str	r1, [sp, #148]	; 0x94
   1fda6:	9324      	str	r3, [sp, #144]	; 0x90
   1fda8:	e882 0840 	stmia.w	r2, {r6, fp}
   1fdac:	ddf2      	ble.n	1fd94 <_svfprintf_r+0x354>
   1fdae:	aa23      	add	r2, sp, #140	; 0x8c
   1fdb0:	4629      	mov	r1, r5
   1fdb2:	4620      	mov	r0, r4
   1fdb4:	f002 fff6 	bl	22da4 <__ssprint_r>
   1fdb8:	2800      	cmp	r0, #0
   1fdba:	f47f af13 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   1fdbe:	3f10      	subs	r7, #16
   1fdc0:	2f10      	cmp	r7, #16
   1fdc2:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fdc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdc6:	464a      	mov	r2, r9
   1fdc8:	dce9      	bgt.n	1fd9e <_svfprintf_r+0x35e>
   1fdca:	4635      	mov	r5, r6
   1fdcc:	460c      	mov	r4, r1
   1fdce:	4646      	mov	r6, r8
   1fdd0:	4690      	mov	r8, r2
   1fdd2:	3301      	adds	r3, #1
   1fdd4:	443c      	add	r4, r7
   1fdd6:	2b07      	cmp	r3, #7
   1fdd8:	9425      	str	r4, [sp, #148]	; 0x94
   1fdda:	9324      	str	r3, [sp, #144]	; 0x90
   1fddc:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fde0:	f300 838f 	bgt.w	20502 <_svfprintf_r+0xac2>
   1fde4:	f108 0808 	add.w	r8, r8, #8
   1fde8:	9b03      	ldr	r3, [sp, #12]
   1fdea:	05df      	lsls	r7, r3, #23
   1fdec:	f100 8273 	bmi.w	202d6 <_svfprintf_r+0x896>
   1fdf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdf2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1fdf4:	f8c8 6000 	str.w	r6, [r8]
   1fdf8:	3301      	adds	r3, #1
   1fdfa:	440c      	add	r4, r1
   1fdfc:	2b07      	cmp	r3, #7
   1fdfe:	9425      	str	r4, [sp, #148]	; 0x94
   1fe00:	f8c8 1004 	str.w	r1, [r8, #4]
   1fe04:	9324      	str	r3, [sp, #144]	; 0x90
   1fe06:	f300 835b 	bgt.w	204c0 <_svfprintf_r+0xa80>
   1fe0a:	f108 0808 	add.w	r8, r8, #8
   1fe0e:	9b03      	ldr	r3, [sp, #12]
   1fe10:	075b      	lsls	r3, r3, #29
   1fe12:	d53a      	bpl.n	1fe8a <_svfprintf_r+0x44a>
   1fe14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fe16:	9a04      	ldr	r2, [sp, #16]
   1fe18:	1a9d      	subs	r5, r3, r2
   1fe1a:	2d00      	cmp	r5, #0
   1fe1c:	dd35      	ble.n	1fe8a <_svfprintf_r+0x44a>
   1fe1e:	2d10      	cmp	r5, #16
   1fe20:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fe22:	dd20      	ble.n	1fe66 <_svfprintf_r+0x426>
   1fe24:	2610      	movs	r6, #16
   1fe26:	9f08      	ldr	r7, [sp, #32]
   1fe28:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1fe2c:	e004      	b.n	1fe38 <_svfprintf_r+0x3f8>
   1fe2e:	3d10      	subs	r5, #16
   1fe30:	2d10      	cmp	r5, #16
   1fe32:	f108 0808 	add.w	r8, r8, #8
   1fe36:	dd16      	ble.n	1fe66 <_svfprintf_r+0x426>
   1fe38:	3301      	adds	r3, #1
   1fe3a:	4a5f      	ldr	r2, [pc, #380]	; (1ffb8 <_svfprintf_r+0x578>)
   1fe3c:	9324      	str	r3, [sp, #144]	; 0x90
   1fe3e:	3410      	adds	r4, #16
   1fe40:	2b07      	cmp	r3, #7
   1fe42:	9425      	str	r4, [sp, #148]	; 0x94
   1fe44:	e888 0044 	stmia.w	r8, {r2, r6}
   1fe48:	ddf1      	ble.n	1fe2e <_svfprintf_r+0x3ee>
   1fe4a:	aa23      	add	r2, sp, #140	; 0x8c
   1fe4c:	4659      	mov	r1, fp
   1fe4e:	4638      	mov	r0, r7
   1fe50:	f002 ffa8 	bl	22da4 <__ssprint_r>
   1fe54:	2800      	cmp	r0, #0
   1fe56:	f47f aec5 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   1fe5a:	3d10      	subs	r5, #16
   1fe5c:	2d10      	cmp	r5, #16
   1fe5e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe60:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fe62:	46c8      	mov	r8, r9
   1fe64:	dce8      	bgt.n	1fe38 <_svfprintf_r+0x3f8>
   1fe66:	3301      	adds	r3, #1
   1fe68:	4a53      	ldr	r2, [pc, #332]	; (1ffb8 <_svfprintf_r+0x578>)
   1fe6a:	9324      	str	r3, [sp, #144]	; 0x90
   1fe6c:	442c      	add	r4, r5
   1fe6e:	2b07      	cmp	r3, #7
   1fe70:	9425      	str	r4, [sp, #148]	; 0x94
   1fe72:	e888 0024 	stmia.w	r8, {r2, r5}
   1fe76:	dd08      	ble.n	1fe8a <_svfprintf_r+0x44a>
   1fe78:	aa23      	add	r2, sp, #140	; 0x8c
   1fe7a:	9907      	ldr	r1, [sp, #28]
   1fe7c:	9808      	ldr	r0, [sp, #32]
   1fe7e:	f002 ff91 	bl	22da4 <__ssprint_r>
   1fe82:	2800      	cmp	r0, #0
   1fe84:	f47f aeae 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   1fe88:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe8a:	9b05      	ldr	r3, [sp, #20]
   1fe8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fe8e:	9904      	ldr	r1, [sp, #16]
   1fe90:	428a      	cmp	r2, r1
   1fe92:	bfac      	ite	ge
   1fe94:	189b      	addge	r3, r3, r2
   1fe96:	185b      	addlt	r3, r3, r1
   1fe98:	9305      	str	r3, [sp, #20]
   1fe9a:	2c00      	cmp	r4, #0
   1fe9c:	f040 831b 	bne.w	204d6 <_svfprintf_r+0xa96>
   1fea0:	2300      	movs	r3, #0
   1fea2:	9324      	str	r3, [sp, #144]	; 0x90
   1fea4:	46c8      	mov	r8, r9
   1fea6:	e5f2      	b.n	1fa8e <_svfprintf_r+0x4e>
   1fea8:	930d      	str	r3, [sp, #52]	; 0x34
   1feaa:	f01b 0320 	ands.w	r3, fp, #32
   1feae:	f040 81de 	bne.w	2026e <_svfprintf_r+0x82e>
   1feb2:	f01b 0210 	ands.w	r2, fp, #16
   1feb6:	f040 842d 	bne.w	20714 <_svfprintf_r+0xcd4>
   1feba:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1febe:	f000 8429 	beq.w	20714 <_svfprintf_r+0xcd4>
   1fec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fec4:	4613      	mov	r3, r2
   1fec6:	460a      	mov	r2, r1
   1fec8:	3204      	adds	r2, #4
   1feca:	880c      	ldrh	r4, [r1, #0]
   1fecc:	920b      	str	r2, [sp, #44]	; 0x2c
   1fece:	2500      	movs	r5, #0
   1fed0:	e6a9      	b.n	1fc26 <_svfprintf_r+0x1e6>
   1fed2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fed4:	930d      	str	r3, [sp, #52]	; 0x34
   1fed6:	6816      	ldr	r6, [r2, #0]
   1fed8:	2400      	movs	r4, #0
   1feda:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1fede:	1d15      	adds	r5, r2, #4
   1fee0:	2e00      	cmp	r6, #0
   1fee2:	f000 86b5 	beq.w	20c50 <_svfprintf_r+0x1210>
   1fee6:	9a06      	ldr	r2, [sp, #24]
   1fee8:	1c53      	adds	r3, r2, #1
   1feea:	f000 8617 	beq.w	20b1c <_svfprintf_r+0x10dc>
   1feee:	4621      	mov	r1, r4
   1fef0:	4630      	mov	r0, r6
   1fef2:	f7fe ff25 	bl	1ed40 <memchr>
   1fef6:	2800      	cmp	r0, #0
   1fef8:	f000 8708 	beq.w	20d0c <_svfprintf_r+0x12cc>
   1fefc:	1b83      	subs	r3, r0, r6
   1fefe:	930a      	str	r3, [sp, #40]	; 0x28
   1ff00:	9406      	str	r4, [sp, #24]
   1ff02:	950b      	str	r5, [sp, #44]	; 0x2c
   1ff04:	f8cd b00c 	str.w	fp, [sp, #12]
   1ff08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ff0c:	9304      	str	r3, [sp, #16]
   1ff0e:	940e      	str	r4, [sp, #56]	; 0x38
   1ff10:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1ff14:	e6ac      	b.n	1fc70 <_svfprintf_r+0x230>
   1ff16:	f89a 3000 	ldrb.w	r3, [sl]
   1ff1a:	2201      	movs	r2, #1
   1ff1c:	212b      	movs	r1, #43	; 0x2b
   1ff1e:	e5e7      	b.n	1faf0 <_svfprintf_r+0xb0>
   1ff20:	f04b 0b20 	orr.w	fp, fp, #32
   1ff24:	f89a 3000 	ldrb.w	r3, [sl]
   1ff28:	e5e2      	b.n	1faf0 <_svfprintf_r+0xb0>
   1ff2a:	930d      	str	r3, [sp, #52]	; 0x34
   1ff2c:	2a00      	cmp	r2, #0
   1ff2e:	f040 87aa 	bne.w	20e86 <_svfprintf_r+0x1446>
   1ff32:	4b23      	ldr	r3, [pc, #140]	; (1ffc0 <_svfprintf_r+0x580>)
   1ff34:	9312      	str	r3, [sp, #72]	; 0x48
   1ff36:	f01b 0f20 	tst.w	fp, #32
   1ff3a:	f040 8112 	bne.w	20162 <_svfprintf_r+0x722>
   1ff3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ff40:	f01b 0f10 	tst.w	fp, #16
   1ff44:	4613      	mov	r3, r2
   1ff46:	f040 83e0 	bne.w	2070a <_svfprintf_r+0xcca>
   1ff4a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1ff4e:	f000 83dc 	beq.w	2070a <_svfprintf_r+0xcca>
   1ff52:	3304      	adds	r3, #4
   1ff54:	8814      	ldrh	r4, [r2, #0]
   1ff56:	930b      	str	r3, [sp, #44]	; 0x2c
   1ff58:	2500      	movs	r5, #0
   1ff5a:	f01b 0f01 	tst.w	fp, #1
   1ff5e:	f000 810d 	beq.w	2017c <_svfprintf_r+0x73c>
   1ff62:	ea54 0305 	orrs.w	r3, r4, r5
   1ff66:	f000 8109 	beq.w	2017c <_svfprintf_r+0x73c>
   1ff6a:	2330      	movs	r3, #48	; 0x30
   1ff6c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1ff70:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1ff74:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1ff78:	f04b 0b02 	orr.w	fp, fp, #2
   1ff7c:	2302      	movs	r3, #2
   1ff7e:	e652      	b.n	1fc26 <_svfprintf_r+0x1e6>
   1ff80:	f89a 3000 	ldrb.w	r3, [sl]
   1ff84:	2900      	cmp	r1, #0
   1ff86:	f47f adb3 	bne.w	1faf0 <_svfprintf_r+0xb0>
   1ff8a:	2201      	movs	r2, #1
   1ff8c:	2120      	movs	r1, #32
   1ff8e:	e5af      	b.n	1faf0 <_svfprintf_r+0xb0>
   1ff90:	f04b 0b01 	orr.w	fp, fp, #1
   1ff94:	f89a 3000 	ldrb.w	r3, [sl]
   1ff98:	e5aa      	b.n	1faf0 <_svfprintf_r+0xb0>
   1ff9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1ff9c:	6823      	ldr	r3, [r4, #0]
   1ff9e:	9309      	str	r3, [sp, #36]	; 0x24
   1ffa0:	4618      	mov	r0, r3
   1ffa2:	2800      	cmp	r0, #0
   1ffa4:	4623      	mov	r3, r4
   1ffa6:	f103 0304 	add.w	r3, r3, #4
   1ffaa:	f6ff ae03 	blt.w	1fbb4 <_svfprintf_r+0x174>
   1ffae:	930b      	str	r3, [sp, #44]	; 0x2c
   1ffb0:	f89a 3000 	ldrb.w	r3, [sl]
   1ffb4:	e59c      	b.n	1faf0 <_svfprintf_r+0xb0>
   1ffb6:	bf00      	nop
   1ffb8:	00025874 	.word	0x00025874
   1ffbc:	00025884 	.word	0x00025884
   1ffc0:	00025854 	.word	0x00025854
   1ffc4:	f04b 0b10 	orr.w	fp, fp, #16
   1ffc8:	f01b 0f20 	tst.w	fp, #32
   1ffcc:	930d      	str	r3, [sp, #52]	; 0x34
   1ffce:	f43f ae1b 	beq.w	1fc08 <_svfprintf_r+0x1c8>
   1ffd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1ffd4:	3507      	adds	r5, #7
   1ffd6:	f025 0307 	bic.w	r3, r5, #7
   1ffda:	f103 0208 	add.w	r2, r3, #8
   1ffde:	e9d3 4500 	ldrd	r4, r5, [r3]
   1ffe2:	920b      	str	r2, [sp, #44]	; 0x2c
   1ffe4:	2301      	movs	r3, #1
   1ffe6:	e61e      	b.n	1fc26 <_svfprintf_r+0x1e6>
   1ffe8:	f89a 3000 	ldrb.w	r3, [sl]
   1ffec:	2b2a      	cmp	r3, #42	; 0x2a
   1ffee:	f10a 0401 	add.w	r4, sl, #1
   1fff2:	f000 873b 	beq.w	20e6c <_svfprintf_r+0x142c>
   1fff6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1fffa:	2809      	cmp	r0, #9
   1fffc:	46a2      	mov	sl, r4
   1fffe:	f200 8691 	bhi.w	20d24 <_svfprintf_r+0x12e4>
   20002:	2300      	movs	r3, #0
   20004:	461c      	mov	r4, r3
   20006:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2000a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2000e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   20012:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   20016:	2809      	cmp	r0, #9
   20018:	d9f5      	bls.n	20006 <_svfprintf_r+0x5c6>
   2001a:	9406      	str	r4, [sp, #24]
   2001c:	e56a      	b.n	1faf4 <_svfprintf_r+0xb4>
   2001e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   20022:	f89a 3000 	ldrb.w	r3, [sl]
   20026:	e563      	b.n	1faf0 <_svfprintf_r+0xb0>
   20028:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2002c:	f89a 3000 	ldrb.w	r3, [sl]
   20030:	e55e      	b.n	1faf0 <_svfprintf_r+0xb0>
   20032:	f89a 3000 	ldrb.w	r3, [sl]
   20036:	2b6c      	cmp	r3, #108	; 0x6c
   20038:	bf03      	ittte	eq
   2003a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2003e:	f04b 0b20 	orreq.w	fp, fp, #32
   20042:	f10a 0a01 	addeq.w	sl, sl, #1
   20046:	f04b 0b10 	orrne.w	fp, fp, #16
   2004a:	e551      	b.n	1faf0 <_svfprintf_r+0xb0>
   2004c:	2a00      	cmp	r2, #0
   2004e:	f040 871e 	bne.w	20e8e <_svfprintf_r+0x144e>
   20052:	f01b 0f20 	tst.w	fp, #32
   20056:	f040 8509 	bne.w	20a6c <_svfprintf_r+0x102c>
   2005a:	f01b 0f10 	tst.w	fp, #16
   2005e:	f040 84bc 	bne.w	209da <_svfprintf_r+0xf9a>
   20062:	f01b 0f40 	tst.w	fp, #64	; 0x40
   20066:	f000 84b8 	beq.w	209da <_svfprintf_r+0xf9a>
   2006a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2006c:	6813      	ldr	r3, [r2, #0]
   2006e:	3204      	adds	r2, #4
   20070:	920b      	str	r2, [sp, #44]	; 0x2c
   20072:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   20076:	801a      	strh	r2, [r3, #0]
   20078:	e509      	b.n	1fa8e <_svfprintf_r+0x4e>
   2007a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2007c:	4bb9      	ldr	r3, [pc, #740]	; (20364 <_svfprintf_r+0x924>)
   2007e:	680c      	ldr	r4, [r1, #0]
   20080:	9312      	str	r3, [sp, #72]	; 0x48
   20082:	2230      	movs	r2, #48	; 0x30
   20084:	2378      	movs	r3, #120	; 0x78
   20086:	3104      	adds	r1, #4
   20088:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   2008c:	930d      	str	r3, [sp, #52]	; 0x34
   2008e:	f04b 0b02 	orr.w	fp, fp, #2
   20092:	910b      	str	r1, [sp, #44]	; 0x2c
   20094:	2500      	movs	r5, #0
   20096:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   2009a:	2302      	movs	r3, #2
   2009c:	e5c3      	b.n	1fc26 <_svfprintf_r+0x1e6>
   2009e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   200a0:	930d      	str	r3, [sp, #52]	; 0x34
   200a2:	680a      	ldr	r2, [r1, #0]
   200a4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   200a8:	2300      	movs	r3, #0
   200aa:	460a      	mov	r2, r1
   200ac:	461f      	mov	r7, r3
   200ae:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   200b2:	3204      	adds	r2, #4
   200b4:	2301      	movs	r3, #1
   200b6:	9304      	str	r3, [sp, #16]
   200b8:	f8cd b00c 	str.w	fp, [sp, #12]
   200bc:	9706      	str	r7, [sp, #24]
   200be:	970e      	str	r7, [sp, #56]	; 0x38
   200c0:	920b      	str	r2, [sp, #44]	; 0x2c
   200c2:	930a      	str	r3, [sp, #40]	; 0x28
   200c4:	ae26      	add	r6, sp, #152	; 0x98
   200c6:	e5d7      	b.n	1fc78 <_svfprintf_r+0x238>
   200c8:	930d      	str	r3, [sp, #52]	; 0x34
   200ca:	2a00      	cmp	r2, #0
   200cc:	f040 86fe 	bne.w	20ecc <_svfprintf_r+0x148c>
   200d0:	f01b 0f20 	tst.w	fp, #32
   200d4:	d15d      	bne.n	20192 <_svfprintf_r+0x752>
   200d6:	f01b 0f10 	tst.w	fp, #16
   200da:	f040 8335 	bne.w	20748 <_svfprintf_r+0xd08>
   200de:	f01b 0f40 	tst.w	fp, #64	; 0x40
   200e2:	f000 8331 	beq.w	20748 <_svfprintf_r+0xd08>
   200e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   200e8:	f9b1 4000 	ldrsh.w	r4, [r1]
   200ec:	3104      	adds	r1, #4
   200ee:	17e5      	asrs	r5, r4, #31
   200f0:	4622      	mov	r2, r4
   200f2:	462b      	mov	r3, r5
   200f4:	910b      	str	r1, [sp, #44]	; 0x2c
   200f6:	2a00      	cmp	r2, #0
   200f8:	f173 0300 	sbcs.w	r3, r3, #0
   200fc:	db58      	blt.n	201b0 <_svfprintf_r+0x770>
   200fe:	9906      	ldr	r1, [sp, #24]
   20100:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20104:	1c4a      	adds	r2, r1, #1
   20106:	f04f 0301 	mov.w	r3, #1
   2010a:	f47f ad93 	bne.w	1fc34 <_svfprintf_r+0x1f4>
   2010e:	ea54 0205 	orrs.w	r2, r4, r5
   20112:	f000 81ec 	beq.w	204ee <_svfprintf_r+0xaae>
   20116:	f8cd b00c 	str.w	fp, [sp, #12]
   2011a:	2b01      	cmp	r3, #1
   2011c:	f000 8283 	beq.w	20626 <_svfprintf_r+0xbe6>
   20120:	2b02      	cmp	r3, #2
   20122:	f040 8213 	bne.w	2054c <_svfprintf_r+0xb0c>
   20126:	9812      	ldr	r0, [sp, #72]	; 0x48
   20128:	464e      	mov	r6, r9
   2012a:	0923      	lsrs	r3, r4, #4
   2012c:	f004 010f 	and.w	r1, r4, #15
   20130:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   20134:	092a      	lsrs	r2, r5, #4
   20136:	461c      	mov	r4, r3
   20138:	4615      	mov	r5, r2
   2013a:	5c43      	ldrb	r3, [r0, r1]
   2013c:	f806 3d01 	strb.w	r3, [r6, #-1]!
   20140:	ea54 0305 	orrs.w	r3, r4, r5
   20144:	d1f1      	bne.n	2012a <_svfprintf_r+0x6ea>
   20146:	eba9 0306 	sub.w	r3, r9, r6
   2014a:	930a      	str	r3, [sp, #40]	; 0x28
   2014c:	e588      	b.n	1fc60 <_svfprintf_r+0x220>
   2014e:	930d      	str	r3, [sp, #52]	; 0x34
   20150:	2a00      	cmp	r2, #0
   20152:	f040 86b7 	bne.w	20ec4 <_svfprintf_r+0x1484>
   20156:	4b84      	ldr	r3, [pc, #528]	; (20368 <_svfprintf_r+0x928>)
   20158:	9312      	str	r3, [sp, #72]	; 0x48
   2015a:	f01b 0f20 	tst.w	fp, #32
   2015e:	f43f aeee 	beq.w	1ff3e <_svfprintf_r+0x4fe>
   20162:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   20164:	3507      	adds	r5, #7
   20166:	f025 0307 	bic.w	r3, r5, #7
   2016a:	f103 0208 	add.w	r2, r3, #8
   2016e:	f01b 0f01 	tst.w	fp, #1
   20172:	920b      	str	r2, [sp, #44]	; 0x2c
   20174:	e9d3 4500 	ldrd	r4, r5, [r3]
   20178:	f47f aef3 	bne.w	1ff62 <_svfprintf_r+0x522>
   2017c:	2302      	movs	r3, #2
   2017e:	e552      	b.n	1fc26 <_svfprintf_r+0x1e6>
   20180:	930d      	str	r3, [sp, #52]	; 0x34
   20182:	2a00      	cmp	r2, #0
   20184:	f040 869a 	bne.w	20ebc <_svfprintf_r+0x147c>
   20188:	f04b 0b10 	orr.w	fp, fp, #16
   2018c:	f01b 0f20 	tst.w	fp, #32
   20190:	d0a1      	beq.n	200d6 <_svfprintf_r+0x696>
   20192:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   20194:	3507      	adds	r5, #7
   20196:	f025 0507 	bic.w	r5, r5, #7
   2019a:	e9d5 2300 	ldrd	r2, r3, [r5]
   2019e:	2a00      	cmp	r2, #0
   201a0:	f105 0108 	add.w	r1, r5, #8
   201a4:	461d      	mov	r5, r3
   201a6:	f173 0300 	sbcs.w	r3, r3, #0
   201aa:	910b      	str	r1, [sp, #44]	; 0x2c
   201ac:	4614      	mov	r4, r2
   201ae:	daa6      	bge.n	200fe <_svfprintf_r+0x6be>
   201b0:	272d      	movs	r7, #45	; 0x2d
   201b2:	4264      	negs	r4, r4
   201b4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   201b8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   201bc:	2301      	movs	r3, #1
   201be:	e535      	b.n	1fc2c <_svfprintf_r+0x1ec>
   201c0:	930d      	str	r3, [sp, #52]	; 0x34
   201c2:	2a00      	cmp	r2, #0
   201c4:	f040 8676 	bne.w	20eb4 <_svfprintf_r+0x1474>
   201c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   201ca:	f01b 0f08 	tst.w	fp, #8
   201ce:	f105 0507 	add.w	r5, r5, #7
   201d2:	f000 83e8 	beq.w	209a6 <_svfprintf_r+0xf66>
   201d6:	f025 0307 	bic.w	r3, r5, #7
   201da:	ed93 7b00 	vldr	d7, [r3]
   201de:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   201e2:	f103 0208 	add.w	r2, r3, #8
   201e6:	920b      	str	r2, [sp, #44]	; 0x2c
   201e8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   201ec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   201f0:	9116      	str	r1, [sp, #88]	; 0x58
   201f2:	9317      	str	r3, [sp, #92]	; 0x5c
   201f4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   201f8:	f04f 32ff 	mov.w	r2, #4294967295
   201fc:	4620      	mov	r0, r4
   201fe:	4629      	mov	r1, r5
   20200:	4b5a      	ldr	r3, [pc, #360]	; (2036c <_svfprintf_r+0x92c>)
   20202:	f002 ffa5 	bl	23150 <__aeabi_dcmpun>
   20206:	2800      	cmp	r0, #0
   20208:	f040 834f 	bne.w	208aa <_svfprintf_r+0xe6a>
   2020c:	f04f 32ff 	mov.w	r2, #4294967295
   20210:	4b56      	ldr	r3, [pc, #344]	; (2036c <_svfprintf_r+0x92c>)
   20212:	4620      	mov	r0, r4
   20214:	4629      	mov	r1, r5
   20216:	f7fc fcbd 	bl	1cb94 <__aeabi_dcmple>
   2021a:	2800      	cmp	r0, #0
   2021c:	f040 8345 	bne.w	208aa <_svfprintf_r+0xe6a>
   20220:	2200      	movs	r2, #0
   20222:	2300      	movs	r3, #0
   20224:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   20228:	f7fc fcaa 	bl	1cb80 <__aeabi_dcmplt>
   2022c:	2800      	cmp	r0, #0
   2022e:	f040 8533 	bne.w	20c98 <_svfprintf_r+0x1258>
   20232:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20236:	4e4e      	ldr	r6, [pc, #312]	; (20370 <_svfprintf_r+0x930>)
   20238:	4b4e      	ldr	r3, [pc, #312]	; (20374 <_svfprintf_r+0x934>)
   2023a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2023e:	9003      	str	r0, [sp, #12]
   20240:	980d      	ldr	r0, [sp, #52]	; 0x34
   20242:	2203      	movs	r2, #3
   20244:	2100      	movs	r1, #0
   20246:	9204      	str	r2, [sp, #16]
   20248:	9106      	str	r1, [sp, #24]
   2024a:	2847      	cmp	r0, #71	; 0x47
   2024c:	bfd8      	it	le
   2024e:	461e      	movle	r6, r3
   20250:	920a      	str	r2, [sp, #40]	; 0x28
   20252:	910e      	str	r1, [sp, #56]	; 0x38
   20254:	e50c      	b.n	1fc70 <_svfprintf_r+0x230>
   20256:	f04b 0b08 	orr.w	fp, fp, #8
   2025a:	f89a 3000 	ldrb.w	r3, [sl]
   2025e:	e447      	b.n	1faf0 <_svfprintf_r+0xb0>
   20260:	f04b 0b10 	orr.w	fp, fp, #16
   20264:	930d      	str	r3, [sp, #52]	; 0x34
   20266:	f01b 0320 	ands.w	r3, fp, #32
   2026a:	f43f ae22 	beq.w	1feb2 <_svfprintf_r+0x472>
   2026e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   20270:	3507      	adds	r5, #7
   20272:	f025 0307 	bic.w	r3, r5, #7
   20276:	f103 0208 	add.w	r2, r3, #8
   2027a:	e9d3 4500 	ldrd	r4, r5, [r3]
   2027e:	920b      	str	r2, [sp, #44]	; 0x2c
   20280:	2300      	movs	r3, #0
   20282:	e4d0      	b.n	1fc26 <_svfprintf_r+0x1e6>
   20284:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   20288:	2300      	movs	r3, #0
   2028a:	461c      	mov	r4, r3
   2028c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   20290:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   20294:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   20298:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2029c:	2809      	cmp	r0, #9
   2029e:	d9f5      	bls.n	2028c <_svfprintf_r+0x84c>
   202a0:	9409      	str	r4, [sp, #36]	; 0x24
   202a2:	e427      	b.n	1faf4 <_svfprintf_r+0xb4>
   202a4:	930d      	str	r3, [sp, #52]	; 0x34
   202a6:	2a00      	cmp	r2, #0
   202a8:	f040 85f5 	bne.w	20e96 <_svfprintf_r+0x1456>
   202ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   202ae:	2a00      	cmp	r2, #0
   202b0:	f43f ac91 	beq.w	1fbd6 <_svfprintf_r+0x196>
   202b4:	2300      	movs	r3, #0
   202b6:	2101      	movs	r1, #1
   202b8:	461f      	mov	r7, r3
   202ba:	9104      	str	r1, [sp, #16]
   202bc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   202c0:	f8cd b00c 	str.w	fp, [sp, #12]
   202c4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   202c8:	9306      	str	r3, [sp, #24]
   202ca:	930e      	str	r3, [sp, #56]	; 0x38
   202cc:	910a      	str	r1, [sp, #40]	; 0x28
   202ce:	ae26      	add	r6, sp, #152	; 0x98
   202d0:	e4d2      	b.n	1fc78 <_svfprintf_r+0x238>
   202d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   202d4:	e529      	b.n	1fd2a <_svfprintf_r+0x2ea>
   202d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   202d8:	2b65      	cmp	r3, #101	; 0x65
   202da:	f340 80a9 	ble.w	20430 <_svfprintf_r+0x9f0>
   202de:	2200      	movs	r2, #0
   202e0:	2300      	movs	r3, #0
   202e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   202e6:	f7fc fc41 	bl	1cb6c <__aeabi_dcmpeq>
   202ea:	2800      	cmp	r0, #0
   202ec:	f000 8152 	beq.w	20594 <_svfprintf_r+0xb54>
   202f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   202f2:	4a21      	ldr	r2, [pc, #132]	; (20378 <_svfprintf_r+0x938>)
   202f4:	f8c8 2000 	str.w	r2, [r8]
   202f8:	3301      	adds	r3, #1
   202fa:	3401      	adds	r4, #1
   202fc:	2201      	movs	r2, #1
   202fe:	2b07      	cmp	r3, #7
   20300:	9425      	str	r4, [sp, #148]	; 0x94
   20302:	9324      	str	r3, [sp, #144]	; 0x90
   20304:	f8c8 2004 	str.w	r2, [r8, #4]
   20308:	f300 836f 	bgt.w	209ea <_svfprintf_r+0xfaa>
   2030c:	f108 0808 	add.w	r8, r8, #8
   20310:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20314:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20316:	4293      	cmp	r3, r2
   20318:	db03      	blt.n	20322 <_svfprintf_r+0x8e2>
   2031a:	9b03      	ldr	r3, [sp, #12]
   2031c:	07dd      	lsls	r5, r3, #31
   2031e:	f57f ad76 	bpl.w	1fe0e <_svfprintf_r+0x3ce>
   20322:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20324:	9913      	ldr	r1, [sp, #76]	; 0x4c
   20326:	9a14      	ldr	r2, [sp, #80]	; 0x50
   20328:	f8c8 2000 	str.w	r2, [r8]
   2032c:	3301      	adds	r3, #1
   2032e:	440c      	add	r4, r1
   20330:	2b07      	cmp	r3, #7
   20332:	f8c8 1004 	str.w	r1, [r8, #4]
   20336:	9425      	str	r4, [sp, #148]	; 0x94
   20338:	9324      	str	r3, [sp, #144]	; 0x90
   2033a:	f300 83a3 	bgt.w	20a84 <_svfprintf_r+0x1044>
   2033e:	f108 0808 	add.w	r8, r8, #8
   20342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20344:	1e5e      	subs	r6, r3, #1
   20346:	2e00      	cmp	r6, #0
   20348:	f77f ad61 	ble.w	1fe0e <_svfprintf_r+0x3ce>
   2034c:	2e10      	cmp	r6, #16
   2034e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20350:	4d0a      	ldr	r5, [pc, #40]	; (2037c <_svfprintf_r+0x93c>)
   20352:	f340 81ef 	ble.w	20734 <_svfprintf_r+0xcf4>
   20356:	4622      	mov	r2, r4
   20358:	2710      	movs	r7, #16
   2035a:	f8dd b020 	ldr.w	fp, [sp, #32]
   2035e:	9c07      	ldr	r4, [sp, #28]
   20360:	e014      	b.n	2038c <_svfprintf_r+0x94c>
   20362:	bf00      	nop
   20364:	00025854 	.word	0x00025854
   20368:	00025840 	.word	0x00025840
   2036c:	7fefffff 	.word	0x7fefffff
   20370:	00025834 	.word	0x00025834
   20374:	00025830 	.word	0x00025830
   20378:	00025870 	.word	0x00025870
   2037c:	00025884 	.word	0x00025884
   20380:	f108 0808 	add.w	r8, r8, #8
   20384:	3e10      	subs	r6, #16
   20386:	2e10      	cmp	r6, #16
   20388:	f340 81d3 	ble.w	20732 <_svfprintf_r+0xcf2>
   2038c:	3301      	adds	r3, #1
   2038e:	3210      	adds	r2, #16
   20390:	2b07      	cmp	r3, #7
   20392:	9225      	str	r2, [sp, #148]	; 0x94
   20394:	9324      	str	r3, [sp, #144]	; 0x90
   20396:	e888 00a0 	stmia.w	r8, {r5, r7}
   2039a:	ddf1      	ble.n	20380 <_svfprintf_r+0x940>
   2039c:	aa23      	add	r2, sp, #140	; 0x8c
   2039e:	4621      	mov	r1, r4
   203a0:	4658      	mov	r0, fp
   203a2:	f002 fcff 	bl	22da4 <__ssprint_r>
   203a6:	2800      	cmp	r0, #0
   203a8:	f47f ac1c 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   203ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
   203ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   203b0:	46c8      	mov	r8, r9
   203b2:	e7e7      	b.n	20384 <_svfprintf_r+0x944>
   203b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   203b6:	9a04      	ldr	r2, [sp, #16]
   203b8:	1a9f      	subs	r7, r3, r2
   203ba:	2f00      	cmp	r7, #0
   203bc:	f77f acd8 	ble.w	1fd70 <_svfprintf_r+0x330>
   203c0:	2f10      	cmp	r7, #16
   203c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   203c4:	4db7      	ldr	r5, [pc, #732]	; (206a4 <_svfprintf_r+0xc64>)
   203c6:	dd27      	ble.n	20418 <_svfprintf_r+0x9d8>
   203c8:	4642      	mov	r2, r8
   203ca:	4621      	mov	r1, r4
   203cc:	46b0      	mov	r8, r6
   203ce:	f04f 0b10 	mov.w	fp, #16
   203d2:	462e      	mov	r6, r5
   203d4:	9c08      	ldr	r4, [sp, #32]
   203d6:	9d07      	ldr	r5, [sp, #28]
   203d8:	e004      	b.n	203e4 <_svfprintf_r+0x9a4>
   203da:	3f10      	subs	r7, #16
   203dc:	2f10      	cmp	r7, #16
   203de:	f102 0208 	add.w	r2, r2, #8
   203e2:	dd15      	ble.n	20410 <_svfprintf_r+0x9d0>
   203e4:	3301      	adds	r3, #1
   203e6:	3110      	adds	r1, #16
   203e8:	2b07      	cmp	r3, #7
   203ea:	9125      	str	r1, [sp, #148]	; 0x94
   203ec:	9324      	str	r3, [sp, #144]	; 0x90
   203ee:	e882 0840 	stmia.w	r2, {r6, fp}
   203f2:	ddf2      	ble.n	203da <_svfprintf_r+0x99a>
   203f4:	aa23      	add	r2, sp, #140	; 0x8c
   203f6:	4629      	mov	r1, r5
   203f8:	4620      	mov	r0, r4
   203fa:	f002 fcd3 	bl	22da4 <__ssprint_r>
   203fe:	2800      	cmp	r0, #0
   20400:	f47f abf0 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20404:	3f10      	subs	r7, #16
   20406:	2f10      	cmp	r7, #16
   20408:	9925      	ldr	r1, [sp, #148]	; 0x94
   2040a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2040c:	464a      	mov	r2, r9
   2040e:	dce9      	bgt.n	203e4 <_svfprintf_r+0x9a4>
   20410:	4635      	mov	r5, r6
   20412:	460c      	mov	r4, r1
   20414:	4646      	mov	r6, r8
   20416:	4690      	mov	r8, r2
   20418:	3301      	adds	r3, #1
   2041a:	443c      	add	r4, r7
   2041c:	2b07      	cmp	r3, #7
   2041e:	9425      	str	r4, [sp, #148]	; 0x94
   20420:	9324      	str	r3, [sp, #144]	; 0x90
   20422:	e888 00a0 	stmia.w	r8, {r5, r7}
   20426:	f300 8234 	bgt.w	20892 <_svfprintf_r+0xe52>
   2042a:	f108 0808 	add.w	r8, r8, #8
   2042e:	e49f      	b.n	1fd70 <_svfprintf_r+0x330>
   20430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20432:	9f24      	ldr	r7, [sp, #144]	; 0x90
   20434:	2b01      	cmp	r3, #1
   20436:	f340 8200 	ble.w	2083a <_svfprintf_r+0xdfa>
   2043a:	3701      	adds	r7, #1
   2043c:	3401      	adds	r4, #1
   2043e:	2301      	movs	r3, #1
   20440:	2f07      	cmp	r7, #7
   20442:	9425      	str	r4, [sp, #148]	; 0x94
   20444:	9724      	str	r7, [sp, #144]	; 0x90
   20446:	f8c8 6000 	str.w	r6, [r8]
   2044a:	f8c8 3004 	str.w	r3, [r8, #4]
   2044e:	f300 8205 	bgt.w	2085c <_svfprintf_r+0xe1c>
   20452:	f108 0808 	add.w	r8, r8, #8
   20456:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20458:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2045a:	f8c8 3000 	str.w	r3, [r8]
   2045e:	3701      	adds	r7, #1
   20460:	4414      	add	r4, r2
   20462:	2f07      	cmp	r7, #7
   20464:	9425      	str	r4, [sp, #148]	; 0x94
   20466:	9724      	str	r7, [sp, #144]	; 0x90
   20468:	f8c8 2004 	str.w	r2, [r8, #4]
   2046c:	f300 8202 	bgt.w	20874 <_svfprintf_r+0xe34>
   20470:	f108 0808 	add.w	r8, r8, #8
   20474:	2300      	movs	r3, #0
   20476:	2200      	movs	r2, #0
   20478:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2047c:	f7fc fb76 	bl	1cb6c <__aeabi_dcmpeq>
   20480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20482:	2800      	cmp	r0, #0
   20484:	f040 8101 	bne.w	2068a <_svfprintf_r+0xc4a>
   20488:	3b01      	subs	r3, #1
   2048a:	3701      	adds	r7, #1
   2048c:	3601      	adds	r6, #1
   2048e:	441c      	add	r4, r3
   20490:	2f07      	cmp	r7, #7
   20492:	9724      	str	r7, [sp, #144]	; 0x90
   20494:	9425      	str	r4, [sp, #148]	; 0x94
   20496:	f8c8 6000 	str.w	r6, [r8]
   2049a:	f8c8 3004 	str.w	r3, [r8, #4]
   2049e:	f300 8128 	bgt.w	206f2 <_svfprintf_r+0xcb2>
   204a2:	f108 0808 	add.w	r8, r8, #8
   204a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   204a8:	f8c8 2004 	str.w	r2, [r8, #4]
   204ac:	3701      	adds	r7, #1
   204ae:	4414      	add	r4, r2
   204b0:	ab1f      	add	r3, sp, #124	; 0x7c
   204b2:	2f07      	cmp	r7, #7
   204b4:	9425      	str	r4, [sp, #148]	; 0x94
   204b6:	9724      	str	r7, [sp, #144]	; 0x90
   204b8:	f8c8 3000 	str.w	r3, [r8]
   204bc:	f77f aca5 	ble.w	1fe0a <_svfprintf_r+0x3ca>
   204c0:	aa23      	add	r2, sp, #140	; 0x8c
   204c2:	9907      	ldr	r1, [sp, #28]
   204c4:	9808      	ldr	r0, [sp, #32]
   204c6:	f002 fc6d 	bl	22da4 <__ssprint_r>
   204ca:	2800      	cmp	r0, #0
   204cc:	f47f ab8a 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   204d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
   204d2:	46c8      	mov	r8, r9
   204d4:	e49b      	b.n	1fe0e <_svfprintf_r+0x3ce>
   204d6:	aa23      	add	r2, sp, #140	; 0x8c
   204d8:	9907      	ldr	r1, [sp, #28]
   204da:	9808      	ldr	r0, [sp, #32]
   204dc:	f002 fc62 	bl	22da4 <__ssprint_r>
   204e0:	2800      	cmp	r0, #0
   204e2:	f43f acdd 	beq.w	1fea0 <_svfprintf_r+0x460>
   204e6:	f7ff bb7d 	b.w	1fbe4 <_svfprintf_r+0x1a4>
   204ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
   204ee:	2b01      	cmp	r3, #1
   204f0:	f000 8135 	beq.w	2075e <_svfprintf_r+0xd1e>
   204f4:	2b02      	cmp	r3, #2
   204f6:	d125      	bne.n	20544 <_svfprintf_r+0xb04>
   204f8:	f8cd b00c 	str.w	fp, [sp, #12]
   204fc:	2400      	movs	r4, #0
   204fe:	2500      	movs	r5, #0
   20500:	e611      	b.n	20126 <_svfprintf_r+0x6e6>
   20502:	aa23      	add	r2, sp, #140	; 0x8c
   20504:	9907      	ldr	r1, [sp, #28]
   20506:	9808      	ldr	r0, [sp, #32]
   20508:	f002 fc4c 	bl	22da4 <__ssprint_r>
   2050c:	2800      	cmp	r0, #0
   2050e:	f47f ab69 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20512:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20514:	46c8      	mov	r8, r9
   20516:	e467      	b.n	1fde8 <_svfprintf_r+0x3a8>
   20518:	aa23      	add	r2, sp, #140	; 0x8c
   2051a:	9907      	ldr	r1, [sp, #28]
   2051c:	9808      	ldr	r0, [sp, #32]
   2051e:	f002 fc41 	bl	22da4 <__ssprint_r>
   20522:	2800      	cmp	r0, #0
   20524:	f47f ab5e 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20528:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2052a:	46c8      	mov	r8, r9
   2052c:	e41d      	b.n	1fd6a <_svfprintf_r+0x32a>
   2052e:	aa23      	add	r2, sp, #140	; 0x8c
   20530:	9907      	ldr	r1, [sp, #28]
   20532:	9808      	ldr	r0, [sp, #32]
   20534:	f002 fc36 	bl	22da4 <__ssprint_r>
   20538:	2800      	cmp	r0, #0
   2053a:	f47f ab53 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   2053e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20540:	46c8      	mov	r8, r9
   20542:	e402      	b.n	1fd4a <_svfprintf_r+0x30a>
   20544:	f8cd b00c 	str.w	fp, [sp, #12]
   20548:	2400      	movs	r4, #0
   2054a:	2500      	movs	r5, #0
   2054c:	4649      	mov	r1, r9
   2054e:	e000      	b.n	20552 <_svfprintf_r+0xb12>
   20550:	4631      	mov	r1, r6
   20552:	08e2      	lsrs	r2, r4, #3
   20554:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   20558:	08e8      	lsrs	r0, r5, #3
   2055a:	f004 0307 	and.w	r3, r4, #7
   2055e:	4605      	mov	r5, r0
   20560:	4614      	mov	r4, r2
   20562:	3330      	adds	r3, #48	; 0x30
   20564:	ea54 0205 	orrs.w	r2, r4, r5
   20568:	f801 3c01 	strb.w	r3, [r1, #-1]
   2056c:	f101 36ff 	add.w	r6, r1, #4294967295
   20570:	d1ee      	bne.n	20550 <_svfprintf_r+0xb10>
   20572:	9a03      	ldr	r2, [sp, #12]
   20574:	07d2      	lsls	r2, r2, #31
   20576:	f57f ade6 	bpl.w	20146 <_svfprintf_r+0x706>
   2057a:	2b30      	cmp	r3, #48	; 0x30
   2057c:	f43f ade3 	beq.w	20146 <_svfprintf_r+0x706>
   20580:	3902      	subs	r1, #2
   20582:	2330      	movs	r3, #48	; 0x30
   20584:	f806 3c01 	strb.w	r3, [r6, #-1]
   20588:	eba9 0301 	sub.w	r3, r9, r1
   2058c:	930a      	str	r3, [sp, #40]	; 0x28
   2058e:	460e      	mov	r6, r1
   20590:	f7ff bb66 	b.w	1fc60 <_svfprintf_r+0x220>
   20594:	991d      	ldr	r1, [sp, #116]	; 0x74
   20596:	2900      	cmp	r1, #0
   20598:	f340 8231 	ble.w	209fe <_svfprintf_r+0xfbe>
   2059c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2059e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   205a0:	4293      	cmp	r3, r2
   205a2:	bfa8      	it	ge
   205a4:	4613      	movge	r3, r2
   205a6:	2b00      	cmp	r3, #0
   205a8:	461f      	mov	r7, r3
   205aa:	dd0d      	ble.n	205c8 <_svfprintf_r+0xb88>
   205ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   205ae:	f8c8 6000 	str.w	r6, [r8]
   205b2:	3301      	adds	r3, #1
   205b4:	443c      	add	r4, r7
   205b6:	2b07      	cmp	r3, #7
   205b8:	9425      	str	r4, [sp, #148]	; 0x94
   205ba:	f8c8 7004 	str.w	r7, [r8, #4]
   205be:	9324      	str	r3, [sp, #144]	; 0x90
   205c0:	f300 8321 	bgt.w	20c06 <_svfprintf_r+0x11c6>
   205c4:	f108 0808 	add.w	r8, r8, #8
   205c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   205ca:	2f00      	cmp	r7, #0
   205cc:	bfa8      	it	ge
   205ce:	1bdb      	subge	r3, r3, r7
   205d0:	2b00      	cmp	r3, #0
   205d2:	461f      	mov	r7, r3
   205d4:	f340 80d7 	ble.w	20786 <_svfprintf_r+0xd46>
   205d8:	2f10      	cmp	r7, #16
   205da:	9b24      	ldr	r3, [sp, #144]	; 0x90
   205dc:	4d31      	ldr	r5, [pc, #196]	; (206a4 <_svfprintf_r+0xc64>)
   205de:	f340 81f0 	ble.w	209c2 <_svfprintf_r+0xf82>
   205e2:	4642      	mov	r2, r8
   205e4:	4621      	mov	r1, r4
   205e6:	46b0      	mov	r8, r6
   205e8:	f04f 0b10 	mov.w	fp, #16
   205ec:	462e      	mov	r6, r5
   205ee:	9c08      	ldr	r4, [sp, #32]
   205f0:	9d07      	ldr	r5, [sp, #28]
   205f2:	e004      	b.n	205fe <_svfprintf_r+0xbbe>
   205f4:	3208      	adds	r2, #8
   205f6:	3f10      	subs	r7, #16
   205f8:	2f10      	cmp	r7, #16
   205fa:	f340 81de 	ble.w	209ba <_svfprintf_r+0xf7a>
   205fe:	3301      	adds	r3, #1
   20600:	3110      	adds	r1, #16
   20602:	2b07      	cmp	r3, #7
   20604:	9125      	str	r1, [sp, #148]	; 0x94
   20606:	9324      	str	r3, [sp, #144]	; 0x90
   20608:	e882 0840 	stmia.w	r2, {r6, fp}
   2060c:	ddf2      	ble.n	205f4 <_svfprintf_r+0xbb4>
   2060e:	aa23      	add	r2, sp, #140	; 0x8c
   20610:	4629      	mov	r1, r5
   20612:	4620      	mov	r0, r4
   20614:	f002 fbc6 	bl	22da4 <__ssprint_r>
   20618:	2800      	cmp	r0, #0
   2061a:	f47f aae3 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   2061e:	9925      	ldr	r1, [sp, #148]	; 0x94
   20620:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20622:	464a      	mov	r2, r9
   20624:	e7e7      	b.n	205f6 <_svfprintf_r+0xbb6>
   20626:	2d00      	cmp	r5, #0
   20628:	bf08      	it	eq
   2062a:	2c0a      	cmpeq	r4, #10
   2062c:	f0c0 8095 	bcc.w	2075a <_svfprintf_r+0xd1a>
   20630:	464e      	mov	r6, r9
   20632:	4620      	mov	r0, r4
   20634:	4629      	mov	r1, r5
   20636:	220a      	movs	r2, #10
   20638:	2300      	movs	r3, #0
   2063a:	f7fc fcbf 	bl	1cfbc <__aeabi_uldivmod>
   2063e:	3230      	adds	r2, #48	; 0x30
   20640:	f806 2d01 	strb.w	r2, [r6, #-1]!
   20644:	4620      	mov	r0, r4
   20646:	4629      	mov	r1, r5
   20648:	2300      	movs	r3, #0
   2064a:	220a      	movs	r2, #10
   2064c:	f7fc fcb6 	bl	1cfbc <__aeabi_uldivmod>
   20650:	4604      	mov	r4, r0
   20652:	460d      	mov	r5, r1
   20654:	ea54 0305 	orrs.w	r3, r4, r5
   20658:	d1eb      	bne.n	20632 <_svfprintf_r+0xbf2>
   2065a:	eba9 0306 	sub.w	r3, r9, r6
   2065e:	930a      	str	r3, [sp, #40]	; 0x28
   20660:	f7ff bafe 	b.w	1fc60 <_svfprintf_r+0x220>
   20664:	9b06      	ldr	r3, [sp, #24]
   20666:	930a      	str	r3, [sp, #40]	; 0x28
   20668:	464e      	mov	r6, r9
   2066a:	f7ff baf9 	b.w	1fc60 <_svfprintf_r+0x220>
   2066e:	aa23      	add	r2, sp, #140	; 0x8c
   20670:	9907      	ldr	r1, [sp, #28]
   20672:	9808      	ldr	r0, [sp, #32]
   20674:	f002 fb96 	bl	22da4 <__ssprint_r>
   20678:	2800      	cmp	r0, #0
   2067a:	f47f aab3 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   2067e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20682:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20684:	46c8      	mov	r8, r9
   20686:	f7ff bb50 	b.w	1fd2a <_svfprintf_r+0x2ea>
   2068a:	1e5e      	subs	r6, r3, #1
   2068c:	2e00      	cmp	r6, #0
   2068e:	f77f af0a 	ble.w	204a6 <_svfprintf_r+0xa66>
   20692:	2e10      	cmp	r6, #16
   20694:	4d03      	ldr	r5, [pc, #12]	; (206a4 <_svfprintf_r+0xc64>)
   20696:	dd23      	ble.n	206e0 <_svfprintf_r+0xca0>
   20698:	4622      	mov	r2, r4
   2069a:	f04f 0b10 	mov.w	fp, #16
   2069e:	9c08      	ldr	r4, [sp, #32]
   206a0:	e007      	b.n	206b2 <_svfprintf_r+0xc72>
   206a2:	bf00      	nop
   206a4:	00025884 	.word	0x00025884
   206a8:	3e10      	subs	r6, #16
   206aa:	2e10      	cmp	r6, #16
   206ac:	f108 0808 	add.w	r8, r8, #8
   206b0:	dd15      	ble.n	206de <_svfprintf_r+0xc9e>
   206b2:	3701      	adds	r7, #1
   206b4:	3210      	adds	r2, #16
   206b6:	2f07      	cmp	r7, #7
   206b8:	9225      	str	r2, [sp, #148]	; 0x94
   206ba:	9724      	str	r7, [sp, #144]	; 0x90
   206bc:	e888 0820 	stmia.w	r8, {r5, fp}
   206c0:	ddf2      	ble.n	206a8 <_svfprintf_r+0xc68>
   206c2:	aa23      	add	r2, sp, #140	; 0x8c
   206c4:	9907      	ldr	r1, [sp, #28]
   206c6:	4620      	mov	r0, r4
   206c8:	f002 fb6c 	bl	22da4 <__ssprint_r>
   206cc:	2800      	cmp	r0, #0
   206ce:	f47f aa89 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   206d2:	3e10      	subs	r6, #16
   206d4:	2e10      	cmp	r6, #16
   206d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   206d8:	9f24      	ldr	r7, [sp, #144]	; 0x90
   206da:	46c8      	mov	r8, r9
   206dc:	dce9      	bgt.n	206b2 <_svfprintf_r+0xc72>
   206de:	4614      	mov	r4, r2
   206e0:	3701      	adds	r7, #1
   206e2:	4434      	add	r4, r6
   206e4:	2f07      	cmp	r7, #7
   206e6:	9425      	str	r4, [sp, #148]	; 0x94
   206e8:	9724      	str	r7, [sp, #144]	; 0x90
   206ea:	e888 0060 	stmia.w	r8, {r5, r6}
   206ee:	f77f aed8 	ble.w	204a2 <_svfprintf_r+0xa62>
   206f2:	aa23      	add	r2, sp, #140	; 0x8c
   206f4:	9907      	ldr	r1, [sp, #28]
   206f6:	9808      	ldr	r0, [sp, #32]
   206f8:	f002 fb54 	bl	22da4 <__ssprint_r>
   206fc:	2800      	cmp	r0, #0
   206fe:	f47f aa71 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20702:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20704:	9f24      	ldr	r7, [sp, #144]	; 0x90
   20706:	46c8      	mov	r8, r9
   20708:	e6cd      	b.n	204a6 <_svfprintf_r+0xa66>
   2070a:	681c      	ldr	r4, [r3, #0]
   2070c:	3304      	adds	r3, #4
   2070e:	930b      	str	r3, [sp, #44]	; 0x2c
   20710:	2500      	movs	r5, #0
   20712:	e422      	b.n	1ff5a <_svfprintf_r+0x51a>
   20714:	990b      	ldr	r1, [sp, #44]	; 0x2c
   20716:	460a      	mov	r2, r1
   20718:	3204      	adds	r2, #4
   2071a:	680c      	ldr	r4, [r1, #0]
   2071c:	920b      	str	r2, [sp, #44]	; 0x2c
   2071e:	2500      	movs	r5, #0
   20720:	f7ff ba81 	b.w	1fc26 <_svfprintf_r+0x1e6>
   20724:	3204      	adds	r2, #4
   20726:	681c      	ldr	r4, [r3, #0]
   20728:	920b      	str	r2, [sp, #44]	; 0x2c
   2072a:	2301      	movs	r3, #1
   2072c:	2500      	movs	r5, #0
   2072e:	f7ff ba7a 	b.w	1fc26 <_svfprintf_r+0x1e6>
   20732:	4614      	mov	r4, r2
   20734:	3301      	adds	r3, #1
   20736:	4434      	add	r4, r6
   20738:	2b07      	cmp	r3, #7
   2073a:	9425      	str	r4, [sp, #148]	; 0x94
   2073c:	9324      	str	r3, [sp, #144]	; 0x90
   2073e:	e888 0060 	stmia.w	r8, {r5, r6}
   20742:	f77f ab62 	ble.w	1fe0a <_svfprintf_r+0x3ca>
   20746:	e6bb      	b.n	204c0 <_svfprintf_r+0xa80>
   20748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2074a:	6814      	ldr	r4, [r2, #0]
   2074c:	4613      	mov	r3, r2
   2074e:	3304      	adds	r3, #4
   20750:	17e5      	asrs	r5, r4, #31
   20752:	930b      	str	r3, [sp, #44]	; 0x2c
   20754:	4622      	mov	r2, r4
   20756:	462b      	mov	r3, r5
   20758:	e4cd      	b.n	200f6 <_svfprintf_r+0x6b6>
   2075a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2075e:	f8cd b00c 	str.w	fp, [sp, #12]
   20762:	ae40      	add	r6, sp, #256	; 0x100
   20764:	3430      	adds	r4, #48	; 0x30
   20766:	2301      	movs	r3, #1
   20768:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2076c:	930a      	str	r3, [sp, #40]	; 0x28
   2076e:	f7ff ba77 	b.w	1fc60 <_svfprintf_r+0x220>
   20772:	aa23      	add	r2, sp, #140	; 0x8c
   20774:	9907      	ldr	r1, [sp, #28]
   20776:	9808      	ldr	r0, [sp, #32]
   20778:	f002 fb14 	bl	22da4 <__ssprint_r>
   2077c:	2800      	cmp	r0, #0
   2077e:	f47f aa31 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20782:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20784:	46c8      	mov	r8, r9
   20786:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2078a:	429a      	cmp	r2, r3
   2078c:	db44      	blt.n	20818 <_svfprintf_r+0xdd8>
   2078e:	9b03      	ldr	r3, [sp, #12]
   20790:	07d9      	lsls	r1, r3, #31
   20792:	d441      	bmi.n	20818 <_svfprintf_r+0xdd8>
   20794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20796:	980e      	ldr	r0, [sp, #56]	; 0x38
   20798:	1a9a      	subs	r2, r3, r2
   2079a:	1a1d      	subs	r5, r3, r0
   2079c:	4295      	cmp	r5, r2
   2079e:	bfa8      	it	ge
   207a0:	4615      	movge	r5, r2
   207a2:	2d00      	cmp	r5, #0
   207a4:	dd0e      	ble.n	207c4 <_svfprintf_r+0xd84>
   207a6:	9924      	ldr	r1, [sp, #144]	; 0x90
   207a8:	f8c8 5004 	str.w	r5, [r8, #4]
   207ac:	3101      	adds	r1, #1
   207ae:	4406      	add	r6, r0
   207b0:	442c      	add	r4, r5
   207b2:	2907      	cmp	r1, #7
   207b4:	f8c8 6000 	str.w	r6, [r8]
   207b8:	9425      	str	r4, [sp, #148]	; 0x94
   207ba:	9124      	str	r1, [sp, #144]	; 0x90
   207bc:	f300 823a 	bgt.w	20c34 <_svfprintf_r+0x11f4>
   207c0:	f108 0808 	add.w	r8, r8, #8
   207c4:	2d00      	cmp	r5, #0
   207c6:	bfac      	ite	ge
   207c8:	1b56      	subge	r6, r2, r5
   207ca:	4616      	movlt	r6, r2
   207cc:	2e00      	cmp	r6, #0
   207ce:	f77f ab1e 	ble.w	1fe0e <_svfprintf_r+0x3ce>
   207d2:	2e10      	cmp	r6, #16
   207d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   207d6:	4db1      	ldr	r5, [pc, #708]	; (20a9c <_svfprintf_r+0x105c>)
   207d8:	ddac      	ble.n	20734 <_svfprintf_r+0xcf4>
   207da:	4622      	mov	r2, r4
   207dc:	2710      	movs	r7, #16
   207de:	f8dd b020 	ldr.w	fp, [sp, #32]
   207e2:	9c07      	ldr	r4, [sp, #28]
   207e4:	e004      	b.n	207f0 <_svfprintf_r+0xdb0>
   207e6:	f108 0808 	add.w	r8, r8, #8
   207ea:	3e10      	subs	r6, #16
   207ec:	2e10      	cmp	r6, #16
   207ee:	dda0      	ble.n	20732 <_svfprintf_r+0xcf2>
   207f0:	3301      	adds	r3, #1
   207f2:	3210      	adds	r2, #16
   207f4:	2b07      	cmp	r3, #7
   207f6:	9225      	str	r2, [sp, #148]	; 0x94
   207f8:	9324      	str	r3, [sp, #144]	; 0x90
   207fa:	e888 00a0 	stmia.w	r8, {r5, r7}
   207fe:	ddf2      	ble.n	207e6 <_svfprintf_r+0xda6>
   20800:	aa23      	add	r2, sp, #140	; 0x8c
   20802:	4621      	mov	r1, r4
   20804:	4658      	mov	r0, fp
   20806:	f002 facd 	bl	22da4 <__ssprint_r>
   2080a:	2800      	cmp	r0, #0
   2080c:	f47f a9ea 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20810:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20812:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20814:	46c8      	mov	r8, r9
   20816:	e7e8      	b.n	207ea <_svfprintf_r+0xdaa>
   20818:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2081a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   2081c:	9914      	ldr	r1, [sp, #80]	; 0x50
   2081e:	f8c8 1000 	str.w	r1, [r8]
   20822:	3301      	adds	r3, #1
   20824:	4404      	add	r4, r0
   20826:	2b07      	cmp	r3, #7
   20828:	9425      	str	r4, [sp, #148]	; 0x94
   2082a:	f8c8 0004 	str.w	r0, [r8, #4]
   2082e:	9324      	str	r3, [sp, #144]	; 0x90
   20830:	f300 81f4 	bgt.w	20c1c <_svfprintf_r+0x11dc>
   20834:	f108 0808 	add.w	r8, r8, #8
   20838:	e7ac      	b.n	20794 <_svfprintf_r+0xd54>
   2083a:	9b03      	ldr	r3, [sp, #12]
   2083c:	07da      	lsls	r2, r3, #31
   2083e:	f53f adfc 	bmi.w	2043a <_svfprintf_r+0x9fa>
   20842:	3701      	adds	r7, #1
   20844:	3401      	adds	r4, #1
   20846:	2301      	movs	r3, #1
   20848:	2f07      	cmp	r7, #7
   2084a:	9425      	str	r4, [sp, #148]	; 0x94
   2084c:	9724      	str	r7, [sp, #144]	; 0x90
   2084e:	f8c8 6000 	str.w	r6, [r8]
   20852:	f8c8 3004 	str.w	r3, [r8, #4]
   20856:	f77f ae24 	ble.w	204a2 <_svfprintf_r+0xa62>
   2085a:	e74a      	b.n	206f2 <_svfprintf_r+0xcb2>
   2085c:	aa23      	add	r2, sp, #140	; 0x8c
   2085e:	9907      	ldr	r1, [sp, #28]
   20860:	9808      	ldr	r0, [sp, #32]
   20862:	f002 fa9f 	bl	22da4 <__ssprint_r>
   20866:	2800      	cmp	r0, #0
   20868:	f47f a9bc 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   2086c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2086e:	9f24      	ldr	r7, [sp, #144]	; 0x90
   20870:	46c8      	mov	r8, r9
   20872:	e5f0      	b.n	20456 <_svfprintf_r+0xa16>
   20874:	aa23      	add	r2, sp, #140	; 0x8c
   20876:	9907      	ldr	r1, [sp, #28]
   20878:	9808      	ldr	r0, [sp, #32]
   2087a:	f002 fa93 	bl	22da4 <__ssprint_r>
   2087e:	2800      	cmp	r0, #0
   20880:	f47f a9b0 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20884:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20886:	9f24      	ldr	r7, [sp, #144]	; 0x90
   20888:	46c8      	mov	r8, r9
   2088a:	e5f3      	b.n	20474 <_svfprintf_r+0xa34>
   2088c:	464e      	mov	r6, r9
   2088e:	f7ff b9e7 	b.w	1fc60 <_svfprintf_r+0x220>
   20892:	aa23      	add	r2, sp, #140	; 0x8c
   20894:	9907      	ldr	r1, [sp, #28]
   20896:	9808      	ldr	r0, [sp, #32]
   20898:	f002 fa84 	bl	22da4 <__ssprint_r>
   2089c:	2800      	cmp	r0, #0
   2089e:	f47f a9a1 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   208a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   208a4:	46c8      	mov	r8, r9
   208a6:	f7ff ba63 	b.w	1fd70 <_svfprintf_r+0x330>
   208aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   208ae:	4602      	mov	r2, r0
   208b0:	460b      	mov	r3, r1
   208b2:	f002 fc4d 	bl	23150 <__aeabi_dcmpun>
   208b6:	2800      	cmp	r0, #0
   208b8:	f040 8298 	bne.w	20dec <_svfprintf_r+0x13ac>
   208bc:	9b06      	ldr	r3, [sp, #24]
   208be:	3301      	adds	r3, #1
   208c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   208c2:	f023 0720 	bic.w	r7, r3, #32
   208c6:	f000 81d2 	beq.w	20c6e <_svfprintf_r+0x122e>
   208ca:	2f47      	cmp	r7, #71	; 0x47
   208cc:	f000 8120 	beq.w	20b10 <_svfprintf_r+0x10d0>
   208d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   208d2:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   208d6:	2b00      	cmp	r3, #0
   208d8:	9203      	str	r2, [sp, #12]
   208da:	f2c0 81f0 	blt.w	20cbe <_svfprintf_r+0x127e>
   208de:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   208e2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   208e6:	2300      	movs	r3, #0
   208e8:	930c      	str	r3, [sp, #48]	; 0x30
   208ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   208ec:	2b66      	cmp	r3, #102	; 0x66
   208ee:	f000 81c1 	beq.w	20c74 <_svfprintf_r+0x1234>
   208f2:	2b46      	cmp	r3, #70	; 0x46
   208f4:	f000 80f1 	beq.w	20ada <_svfprintf_r+0x109a>
   208f8:	2f45      	cmp	r7, #69	; 0x45
   208fa:	bf0c      	ite	eq
   208fc:	9b06      	ldreq	r3, [sp, #24]
   208fe:	9d06      	ldrne	r5, [sp, #24]
   20900:	9808      	ldr	r0, [sp, #32]
   20902:	bf08      	it	eq
   20904:	1c5d      	addeq	r5, r3, #1
   20906:	aa21      	add	r2, sp, #132	; 0x84
   20908:	ab1e      	add	r3, sp, #120	; 0x78
   2090a:	9201      	str	r2, [sp, #4]
   2090c:	9300      	str	r3, [sp, #0]
   2090e:	462a      	mov	r2, r5
   20910:	ab1d      	add	r3, sp, #116	; 0x74
   20912:	2102      	movs	r1, #2
   20914:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   20918:	f000 fcae 	bl	21278 <_dtoa_r>
   2091c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2091e:	2b67      	cmp	r3, #103	; 0x67
   20920:	4606      	mov	r6, r0
   20922:	f040 81d5 	bne.w	20cd0 <_svfprintf_r+0x1290>
   20926:	f01b 0f01 	tst.w	fp, #1
   2092a:	f000 824e 	beq.w	20dca <_svfprintf_r+0x138a>
   2092e:	1974      	adds	r4, r6, r5
   20930:	2200      	movs	r2, #0
   20932:	2300      	movs	r3, #0
   20934:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   20938:	f7fc f918 	bl	1cb6c <__aeabi_dcmpeq>
   2093c:	2800      	cmp	r0, #0
   2093e:	f040 8160 	bne.w	20c02 <_svfprintf_r+0x11c2>
   20942:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20944:	42a3      	cmp	r3, r4
   20946:	d206      	bcs.n	20956 <_svfprintf_r+0xf16>
   20948:	2130      	movs	r1, #48	; 0x30
   2094a:	1c5a      	adds	r2, r3, #1
   2094c:	9221      	str	r2, [sp, #132]	; 0x84
   2094e:	7019      	strb	r1, [r3, #0]
   20950:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20952:	429c      	cmp	r4, r3
   20954:	d8f9      	bhi.n	2094a <_svfprintf_r+0xf0a>
   20956:	1b9b      	subs	r3, r3, r6
   20958:	2f47      	cmp	r7, #71	; 0x47
   2095a:	930f      	str	r3, [sp, #60]	; 0x3c
   2095c:	f000 80f0 	beq.w	20b40 <_svfprintf_r+0x1100>
   20960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20962:	2b65      	cmp	r3, #101	; 0x65
   20964:	f340 81c3 	ble.w	20cee <_svfprintf_r+0x12ae>
   20968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2096a:	2b66      	cmp	r3, #102	; 0x66
   2096c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2096e:	930e      	str	r3, [sp, #56]	; 0x38
   20970:	f000 81c0 	beq.w	20cf4 <_svfprintf_r+0x12b4>
   20974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20978:	4619      	mov	r1, r3
   2097a:	4291      	cmp	r1, r2
   2097c:	f300 8191 	bgt.w	20ca2 <_svfprintf_r+0x1262>
   20980:	f01b 0f01 	tst.w	fp, #1
   20984:	f040 8223 	bne.w	20dce <_svfprintf_r+0x138e>
   20988:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2098c:	9304      	str	r3, [sp, #16]
   2098e:	2367      	movs	r3, #103	; 0x67
   20990:	920a      	str	r2, [sp, #40]	; 0x28
   20992:	930d      	str	r3, [sp, #52]	; 0x34
   20994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20996:	2b00      	cmp	r3, #0
   20998:	f040 80cb 	bne.w	20b32 <_svfprintf_r+0x10f2>
   2099c:	9306      	str	r3, [sp, #24]
   2099e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   209a2:	f7ff b965 	b.w	1fc70 <_svfprintf_r+0x230>
   209a6:	f025 0507 	bic.w	r5, r5, #7
   209aa:	ed95 7b00 	vldr	d7, [r5]
   209ae:	f105 0308 	add.w	r3, r5, #8
   209b2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   209b6:	930b      	str	r3, [sp, #44]	; 0x2c
   209b8:	e416      	b.n	201e8 <_svfprintf_r+0x7a8>
   209ba:	4635      	mov	r5, r6
   209bc:	460c      	mov	r4, r1
   209be:	4646      	mov	r6, r8
   209c0:	4690      	mov	r8, r2
   209c2:	3301      	adds	r3, #1
   209c4:	443c      	add	r4, r7
   209c6:	2b07      	cmp	r3, #7
   209c8:	9425      	str	r4, [sp, #148]	; 0x94
   209ca:	9324      	str	r3, [sp, #144]	; 0x90
   209cc:	e888 00a0 	stmia.w	r8, {r5, r7}
   209d0:	f73f aecf 	bgt.w	20772 <_svfprintf_r+0xd32>
   209d4:	f108 0808 	add.w	r8, r8, #8
   209d8:	e6d5      	b.n	20786 <_svfprintf_r+0xd46>
   209da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   209dc:	6813      	ldr	r3, [r2, #0]
   209de:	3204      	adds	r2, #4
   209e0:	920b      	str	r2, [sp, #44]	; 0x2c
   209e2:	9a05      	ldr	r2, [sp, #20]
   209e4:	601a      	str	r2, [r3, #0]
   209e6:	f7ff b852 	b.w	1fa8e <_svfprintf_r+0x4e>
   209ea:	aa23      	add	r2, sp, #140	; 0x8c
   209ec:	9907      	ldr	r1, [sp, #28]
   209ee:	9808      	ldr	r0, [sp, #32]
   209f0:	f002 f9d8 	bl	22da4 <__ssprint_r>
   209f4:	2800      	cmp	r0, #0
   209f6:	f47f a8f5 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   209fa:	46c8      	mov	r8, r9
   209fc:	e488      	b.n	20310 <_svfprintf_r+0x8d0>
   209fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20a00:	4a27      	ldr	r2, [pc, #156]	; (20aa0 <_svfprintf_r+0x1060>)
   20a02:	f8c8 2000 	str.w	r2, [r8]
   20a06:	3301      	adds	r3, #1
   20a08:	3401      	adds	r4, #1
   20a0a:	2201      	movs	r2, #1
   20a0c:	2b07      	cmp	r3, #7
   20a0e:	9425      	str	r4, [sp, #148]	; 0x94
   20a10:	9324      	str	r3, [sp, #144]	; 0x90
   20a12:	f8c8 2004 	str.w	r2, [r8, #4]
   20a16:	dc54      	bgt.n	20ac2 <_svfprintf_r+0x1082>
   20a18:	f108 0808 	add.w	r8, r8, #8
   20a1c:	b929      	cbnz	r1, 20a2a <_svfprintf_r+0xfea>
   20a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20a20:	b91b      	cbnz	r3, 20a2a <_svfprintf_r+0xfea>
   20a22:	9b03      	ldr	r3, [sp, #12]
   20a24:	07d8      	lsls	r0, r3, #31
   20a26:	f57f a9f2 	bpl.w	1fe0e <_svfprintf_r+0x3ce>
   20a2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20a2c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   20a2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   20a30:	f8c8 2000 	str.w	r2, [r8]
   20a34:	3301      	adds	r3, #1
   20a36:	4602      	mov	r2, r0
   20a38:	4422      	add	r2, r4
   20a3a:	2b07      	cmp	r3, #7
   20a3c:	9225      	str	r2, [sp, #148]	; 0x94
   20a3e:	f8c8 0004 	str.w	r0, [r8, #4]
   20a42:	9324      	str	r3, [sp, #144]	; 0x90
   20a44:	f300 8195 	bgt.w	20d72 <_svfprintf_r+0x1332>
   20a48:	f108 0808 	add.w	r8, r8, #8
   20a4c:	2900      	cmp	r1, #0
   20a4e:	f2c0 816d 	blt.w	20d2c <_svfprintf_r+0x12ec>
   20a52:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20a54:	f8c8 6000 	str.w	r6, [r8]
   20a58:	3301      	adds	r3, #1
   20a5a:	188c      	adds	r4, r1, r2
   20a5c:	2b07      	cmp	r3, #7
   20a5e:	9425      	str	r4, [sp, #148]	; 0x94
   20a60:	9324      	str	r3, [sp, #144]	; 0x90
   20a62:	f8c8 1004 	str.w	r1, [r8, #4]
   20a66:	f77f a9d0 	ble.w	1fe0a <_svfprintf_r+0x3ca>
   20a6a:	e529      	b.n	204c0 <_svfprintf_r+0xa80>
   20a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20a6e:	9905      	ldr	r1, [sp, #20]
   20a70:	6813      	ldr	r3, [r2, #0]
   20a72:	17cd      	asrs	r5, r1, #31
   20a74:	4608      	mov	r0, r1
   20a76:	3204      	adds	r2, #4
   20a78:	4629      	mov	r1, r5
   20a7a:	920b      	str	r2, [sp, #44]	; 0x2c
   20a7c:	e9c3 0100 	strd	r0, r1, [r3]
   20a80:	f7ff b805 	b.w	1fa8e <_svfprintf_r+0x4e>
   20a84:	aa23      	add	r2, sp, #140	; 0x8c
   20a86:	9907      	ldr	r1, [sp, #28]
   20a88:	9808      	ldr	r0, [sp, #32]
   20a8a:	f002 f98b 	bl	22da4 <__ssprint_r>
   20a8e:	2800      	cmp	r0, #0
   20a90:	f47f a8a8 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20a94:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20a96:	46c8      	mov	r8, r9
   20a98:	e453      	b.n	20342 <_svfprintf_r+0x902>
   20a9a:	bf00      	nop
   20a9c:	00025884 	.word	0x00025884
   20aa0:	00025870 	.word	0x00025870
   20aa4:	2140      	movs	r1, #64	; 0x40
   20aa6:	9808      	ldr	r0, [sp, #32]
   20aa8:	f7fd fe82 	bl	1e7b0 <_malloc_r>
   20aac:	9a07      	ldr	r2, [sp, #28]
   20aae:	6010      	str	r0, [r2, #0]
   20ab0:	6110      	str	r0, [r2, #16]
   20ab2:	2800      	cmp	r0, #0
   20ab4:	f000 81f6 	beq.w	20ea4 <_svfprintf_r+0x1464>
   20ab8:	9a07      	ldr	r2, [sp, #28]
   20aba:	2340      	movs	r3, #64	; 0x40
   20abc:	6153      	str	r3, [r2, #20]
   20abe:	f7fe bfd6 	b.w	1fa6e <_svfprintf_r+0x2e>
   20ac2:	aa23      	add	r2, sp, #140	; 0x8c
   20ac4:	9907      	ldr	r1, [sp, #28]
   20ac6:	9808      	ldr	r0, [sp, #32]
   20ac8:	f002 f96c 	bl	22da4 <__ssprint_r>
   20acc:	2800      	cmp	r0, #0
   20ace:	f47f a889 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20ad2:	991d      	ldr	r1, [sp, #116]	; 0x74
   20ad4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20ad6:	46c8      	mov	r8, r9
   20ad8:	e7a0      	b.n	20a1c <_svfprintf_r+0xfdc>
   20ada:	9d06      	ldr	r5, [sp, #24]
   20adc:	9808      	ldr	r0, [sp, #32]
   20ade:	aa21      	add	r2, sp, #132	; 0x84
   20ae0:	ab1e      	add	r3, sp, #120	; 0x78
   20ae2:	9201      	str	r2, [sp, #4]
   20ae4:	9300      	str	r3, [sp, #0]
   20ae6:	462a      	mov	r2, r5
   20ae8:	ab1d      	add	r3, sp, #116	; 0x74
   20aea:	2103      	movs	r1, #3
   20aec:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   20af0:	f000 fbc2 	bl	21278 <_dtoa_r>
   20af4:	4606      	mov	r6, r0
   20af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20af8:	2b46      	cmp	r3, #70	; 0x46
   20afa:	eb06 0405 	add.w	r4, r6, r5
   20afe:	f47f af17 	bne.w	20930 <_svfprintf_r+0xef0>
   20b02:	7833      	ldrb	r3, [r6, #0]
   20b04:	2b30      	cmp	r3, #48	; 0x30
   20b06:	f000 817d 	beq.w	20e04 <_svfprintf_r+0x13c4>
   20b0a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   20b0c:	442c      	add	r4, r5
   20b0e:	e70f      	b.n	20930 <_svfprintf_r+0xef0>
   20b10:	9b06      	ldr	r3, [sp, #24]
   20b12:	2b00      	cmp	r3, #0
   20b14:	bf08      	it	eq
   20b16:	2301      	moveq	r3, #1
   20b18:	9306      	str	r3, [sp, #24]
   20b1a:	e6d9      	b.n	208d0 <_svfprintf_r+0xe90>
   20b1c:	4630      	mov	r0, r6
   20b1e:	9406      	str	r4, [sp, #24]
   20b20:	f7fe fece 	bl	1f8c0 <strlen>
   20b24:	950b      	str	r5, [sp, #44]	; 0x2c
   20b26:	900a      	str	r0, [sp, #40]	; 0x28
   20b28:	f8cd b00c 	str.w	fp, [sp, #12]
   20b2c:	4603      	mov	r3, r0
   20b2e:	f7ff b9eb 	b.w	1ff08 <_svfprintf_r+0x4c8>
   20b32:	272d      	movs	r7, #45	; 0x2d
   20b34:	2300      	movs	r3, #0
   20b36:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   20b3a:	9306      	str	r3, [sp, #24]
   20b3c:	f7ff b899 	b.w	1fc72 <_svfprintf_r+0x232>
   20b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20b42:	930e      	str	r3, [sp, #56]	; 0x38
   20b44:	461a      	mov	r2, r3
   20b46:	3303      	adds	r3, #3
   20b48:	db04      	blt.n	20b54 <_svfprintf_r+0x1114>
   20b4a:	9b06      	ldr	r3, [sp, #24]
   20b4c:	4619      	mov	r1, r3
   20b4e:	4291      	cmp	r1, r2
   20b50:	f6bf af10 	bge.w	20974 <_svfprintf_r+0xf34>
   20b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20b56:	3b02      	subs	r3, #2
   20b58:	930d      	str	r3, [sp, #52]	; 0x34
   20b5a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   20b5e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   20b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20b64:	3b01      	subs	r3, #1
   20b66:	2b00      	cmp	r3, #0
   20b68:	931d      	str	r3, [sp, #116]	; 0x74
   20b6a:	bfbd      	ittte	lt
   20b6c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   20b6e:	f1c3 0301 	rsblt	r3, r3, #1
   20b72:	222d      	movlt	r2, #45	; 0x2d
   20b74:	222b      	movge	r2, #43	; 0x2b
   20b76:	2b09      	cmp	r3, #9
   20b78:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   20b7c:	f340 811d 	ble.w	20dba <_svfprintf_r+0x137a>
   20b80:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   20b84:	4620      	mov	r0, r4
   20b86:	4daf      	ldr	r5, [pc, #700]	; (20e44 <_svfprintf_r+0x1404>)
   20b88:	e000      	b.n	20b8c <_svfprintf_r+0x114c>
   20b8a:	4610      	mov	r0, r2
   20b8c:	fb85 1203 	smull	r1, r2, r5, r3
   20b90:	17d9      	asrs	r1, r3, #31
   20b92:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   20b96:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   20b9a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   20b9e:	3230      	adds	r2, #48	; 0x30
   20ba0:	2909      	cmp	r1, #9
   20ba2:	f800 2c01 	strb.w	r2, [r0, #-1]
   20ba6:	460b      	mov	r3, r1
   20ba8:	f100 32ff 	add.w	r2, r0, #4294967295
   20bac:	dced      	bgt.n	20b8a <_svfprintf_r+0x114a>
   20bae:	3330      	adds	r3, #48	; 0x30
   20bb0:	3802      	subs	r0, #2
   20bb2:	b2d9      	uxtb	r1, r3
   20bb4:	4284      	cmp	r4, r0
   20bb6:	f802 1c01 	strb.w	r1, [r2, #-1]
   20bba:	f240 8170 	bls.w	20e9e <_svfprintf_r+0x145e>
   20bbe:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   20bc2:	4613      	mov	r3, r2
   20bc4:	e001      	b.n	20bca <_svfprintf_r+0x118a>
   20bc6:	f813 1b01 	ldrb.w	r1, [r3], #1
   20bca:	f800 1b01 	strb.w	r1, [r0], #1
   20bce:	42a3      	cmp	r3, r4
   20bd0:	d1f9      	bne.n	20bc6 <_svfprintf_r+0x1186>
   20bd2:	3301      	adds	r3, #1
   20bd4:	1a9b      	subs	r3, r3, r2
   20bd6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   20bda:	4413      	add	r3, r2
   20bdc:	aa1f      	add	r2, sp, #124	; 0x7c
   20bde:	1a9b      	subs	r3, r3, r2
   20be0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20be2:	9315      	str	r3, [sp, #84]	; 0x54
   20be4:	2a01      	cmp	r2, #1
   20be6:	4413      	add	r3, r2
   20be8:	930a      	str	r3, [sp, #40]	; 0x28
   20bea:	f340 8120 	ble.w	20e2e <_svfprintf_r+0x13ee>
   20bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20bf2:	4413      	add	r3, r2
   20bf4:	930a      	str	r3, [sp, #40]	; 0x28
   20bf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20bfa:	9304      	str	r3, [sp, #16]
   20bfc:	2300      	movs	r3, #0
   20bfe:	930e      	str	r3, [sp, #56]	; 0x38
   20c00:	e6c8      	b.n	20994 <_svfprintf_r+0xf54>
   20c02:	4623      	mov	r3, r4
   20c04:	e6a7      	b.n	20956 <_svfprintf_r+0xf16>
   20c06:	aa23      	add	r2, sp, #140	; 0x8c
   20c08:	9907      	ldr	r1, [sp, #28]
   20c0a:	9808      	ldr	r0, [sp, #32]
   20c0c:	f002 f8ca 	bl	22da4 <__ssprint_r>
   20c10:	2800      	cmp	r0, #0
   20c12:	f47e afe7 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20c16:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20c18:	46c8      	mov	r8, r9
   20c1a:	e4d5      	b.n	205c8 <_svfprintf_r+0xb88>
   20c1c:	aa23      	add	r2, sp, #140	; 0x8c
   20c1e:	9907      	ldr	r1, [sp, #28]
   20c20:	9808      	ldr	r0, [sp, #32]
   20c22:	f002 f8bf 	bl	22da4 <__ssprint_r>
   20c26:	2800      	cmp	r0, #0
   20c28:	f47e afdc 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20c2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20c2e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20c30:	46c8      	mov	r8, r9
   20c32:	e5af      	b.n	20794 <_svfprintf_r+0xd54>
   20c34:	aa23      	add	r2, sp, #140	; 0x8c
   20c36:	9907      	ldr	r1, [sp, #28]
   20c38:	9808      	ldr	r0, [sp, #32]
   20c3a:	f002 f8b3 	bl	22da4 <__ssprint_r>
   20c3e:	2800      	cmp	r0, #0
   20c40:	f47e afd0 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20c44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20c48:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20c4a:	1a9a      	subs	r2, r3, r2
   20c4c:	46c8      	mov	r8, r9
   20c4e:	e5b9      	b.n	207c4 <_svfprintf_r+0xd84>
   20c50:	9b06      	ldr	r3, [sp, #24]
   20c52:	960e      	str	r6, [sp, #56]	; 0x38
   20c54:	2b06      	cmp	r3, #6
   20c56:	bf28      	it	cs
   20c58:	2306      	movcs	r3, #6
   20c5a:	9606      	str	r6, [sp, #24]
   20c5c:	4637      	mov	r7, r6
   20c5e:	9304      	str	r3, [sp, #16]
   20c60:	950b      	str	r5, [sp, #44]	; 0x2c
   20c62:	f8cd b00c 	str.w	fp, [sp, #12]
   20c66:	930a      	str	r3, [sp, #40]	; 0x28
   20c68:	4e77      	ldr	r6, [pc, #476]	; (20e48 <_svfprintf_r+0x1408>)
   20c6a:	f7ff b801 	b.w	1fc70 <_svfprintf_r+0x230>
   20c6e:	2306      	movs	r3, #6
   20c70:	9306      	str	r3, [sp, #24]
   20c72:	e62d      	b.n	208d0 <_svfprintf_r+0xe90>
   20c74:	9c06      	ldr	r4, [sp, #24]
   20c76:	9808      	ldr	r0, [sp, #32]
   20c78:	aa21      	add	r2, sp, #132	; 0x84
   20c7a:	ab1e      	add	r3, sp, #120	; 0x78
   20c7c:	9201      	str	r2, [sp, #4]
   20c7e:	9300      	str	r3, [sp, #0]
   20c80:	4622      	mov	r2, r4
   20c82:	ab1d      	add	r3, sp, #116	; 0x74
   20c84:	2103      	movs	r1, #3
   20c86:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   20c8a:	f000 faf5 	bl	21278 <_dtoa_r>
   20c8e:	4623      	mov	r3, r4
   20c90:	4606      	mov	r6, r0
   20c92:	1904      	adds	r4, r0, r4
   20c94:	461d      	mov	r5, r3
   20c96:	e734      	b.n	20b02 <_svfprintf_r+0x10c2>
   20c98:	272d      	movs	r7, #45	; 0x2d
   20c9a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   20c9e:	f7ff baca 	b.w	20236 <_svfprintf_r+0x7f6>
   20ca2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20ca6:	4413      	add	r3, r2
   20ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20caa:	930a      	str	r3, [sp, #40]	; 0x28
   20cac:	2a00      	cmp	r2, #0
   20cae:	f340 80b7 	ble.w	20e20 <_svfprintf_r+0x13e0>
   20cb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20cb6:	9304      	str	r3, [sp, #16]
   20cb8:	2367      	movs	r3, #103	; 0x67
   20cba:	930d      	str	r3, [sp, #52]	; 0x34
   20cbc:	e66a      	b.n	20994 <_svfprintf_r+0xf54>
   20cbe:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   20cc2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   20cc6:	9319      	str	r3, [sp, #100]	; 0x64
   20cc8:	232d      	movs	r3, #45	; 0x2d
   20cca:	9118      	str	r1, [sp, #96]	; 0x60
   20ccc:	930c      	str	r3, [sp, #48]	; 0x30
   20cce:	e60c      	b.n	208ea <_svfprintf_r+0xeaa>
   20cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20cd2:	2b47      	cmp	r3, #71	; 0x47
   20cd4:	f47f ae2b 	bne.w	2092e <_svfprintf_r+0xeee>
   20cd8:	f01b 0f01 	tst.w	fp, #1
   20cdc:	f47f af0b 	bne.w	20af6 <_svfprintf_r+0x10b6>
   20ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20ce2:	2f47      	cmp	r7, #71	; 0x47
   20ce4:	eba3 0306 	sub.w	r3, r3, r6
   20ce8:	930f      	str	r3, [sp, #60]	; 0x3c
   20cea:	f43f af29 	beq.w	20b40 <_svfprintf_r+0x1100>
   20cee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20cf0:	930e      	str	r3, [sp, #56]	; 0x38
   20cf2:	e732      	b.n	20b5a <_svfprintf_r+0x111a>
   20cf4:	2b00      	cmp	r3, #0
   20cf6:	f340 80af 	ble.w	20e58 <_svfprintf_r+0x1418>
   20cfa:	9a06      	ldr	r2, [sp, #24]
   20cfc:	2a00      	cmp	r2, #0
   20cfe:	d16b      	bne.n	20dd8 <_svfprintf_r+0x1398>
   20d00:	f01b 0f01 	tst.w	fp, #1
   20d04:	d168      	bne.n	20dd8 <_svfprintf_r+0x1398>
   20d06:	9304      	str	r3, [sp, #16]
   20d08:	930a      	str	r3, [sp, #40]	; 0x28
   20d0a:	e643      	b.n	20994 <_svfprintf_r+0xf54>
   20d0c:	9b06      	ldr	r3, [sp, #24]
   20d0e:	9304      	str	r3, [sp, #16]
   20d10:	930a      	str	r3, [sp, #40]	; 0x28
   20d12:	9006      	str	r0, [sp, #24]
   20d14:	950b      	str	r5, [sp, #44]	; 0x2c
   20d16:	f8cd b00c 	str.w	fp, [sp, #12]
   20d1a:	900e      	str	r0, [sp, #56]	; 0x38
   20d1c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20d20:	f7fe bfa6 	b.w	1fc70 <_svfprintf_r+0x230>
   20d24:	2000      	movs	r0, #0
   20d26:	9006      	str	r0, [sp, #24]
   20d28:	f7fe bee4 	b.w	1faf4 <_svfprintf_r+0xb4>
   20d2c:	424f      	negs	r7, r1
   20d2e:	3110      	adds	r1, #16
   20d30:	4d46      	ldr	r5, [pc, #280]	; (20e4c <_svfprintf_r+0x140c>)
   20d32:	da2b      	bge.n	20d8c <_svfprintf_r+0x134c>
   20d34:	2410      	movs	r4, #16
   20d36:	f8dd b020 	ldr.w	fp, [sp, #32]
   20d3a:	e004      	b.n	20d46 <_svfprintf_r+0x1306>
   20d3c:	f108 0808 	add.w	r8, r8, #8
   20d40:	3f10      	subs	r7, #16
   20d42:	2f10      	cmp	r7, #16
   20d44:	dd22      	ble.n	20d8c <_svfprintf_r+0x134c>
   20d46:	3301      	adds	r3, #1
   20d48:	3210      	adds	r2, #16
   20d4a:	2b07      	cmp	r3, #7
   20d4c:	9225      	str	r2, [sp, #148]	; 0x94
   20d4e:	9324      	str	r3, [sp, #144]	; 0x90
   20d50:	f8c8 5000 	str.w	r5, [r8]
   20d54:	f8c8 4004 	str.w	r4, [r8, #4]
   20d58:	ddf0      	ble.n	20d3c <_svfprintf_r+0x12fc>
   20d5a:	aa23      	add	r2, sp, #140	; 0x8c
   20d5c:	9907      	ldr	r1, [sp, #28]
   20d5e:	4658      	mov	r0, fp
   20d60:	f002 f820 	bl	22da4 <__ssprint_r>
   20d64:	2800      	cmp	r0, #0
   20d66:	f47e af3d 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20d6a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20d6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20d6e:	46c8      	mov	r8, r9
   20d70:	e7e6      	b.n	20d40 <_svfprintf_r+0x1300>
   20d72:	aa23      	add	r2, sp, #140	; 0x8c
   20d74:	9907      	ldr	r1, [sp, #28]
   20d76:	9808      	ldr	r0, [sp, #32]
   20d78:	f002 f814 	bl	22da4 <__ssprint_r>
   20d7c:	2800      	cmp	r0, #0
   20d7e:	f47e af31 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20d82:	991d      	ldr	r1, [sp, #116]	; 0x74
   20d84:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20d86:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20d88:	46c8      	mov	r8, r9
   20d8a:	e65f      	b.n	20a4c <_svfprintf_r+0x100c>
   20d8c:	3301      	adds	r3, #1
   20d8e:	443a      	add	r2, r7
   20d90:	2b07      	cmp	r3, #7
   20d92:	e888 00a0 	stmia.w	r8, {r5, r7}
   20d96:	9225      	str	r2, [sp, #148]	; 0x94
   20d98:	9324      	str	r3, [sp, #144]	; 0x90
   20d9a:	f108 0808 	add.w	r8, r8, #8
   20d9e:	f77f ae58 	ble.w	20a52 <_svfprintf_r+0x1012>
   20da2:	aa23      	add	r2, sp, #140	; 0x8c
   20da4:	9907      	ldr	r1, [sp, #28]
   20da6:	9808      	ldr	r0, [sp, #32]
   20da8:	f001 fffc 	bl	22da4 <__ssprint_r>
   20dac:	2800      	cmp	r0, #0
   20dae:	f47e af19 	bne.w	1fbe4 <_svfprintf_r+0x1a4>
   20db2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20db4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20db6:	46c8      	mov	r8, r9
   20db8:	e64b      	b.n	20a52 <_svfprintf_r+0x1012>
   20dba:	3330      	adds	r3, #48	; 0x30
   20dbc:	2230      	movs	r2, #48	; 0x30
   20dbe:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20dc2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20dc6:	ab20      	add	r3, sp, #128	; 0x80
   20dc8:	e708      	b.n	20bdc <_svfprintf_r+0x119c>
   20dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20dcc:	e5c3      	b.n	20956 <_svfprintf_r+0xf16>
   20dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20dd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20dd2:	4413      	add	r3, r2
   20dd4:	930a      	str	r3, [sp, #40]	; 0x28
   20dd6:	e76c      	b.n	20cb2 <_svfprintf_r+0x1272>
   20dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20dda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20ddc:	4413      	add	r3, r2
   20dde:	9a06      	ldr	r2, [sp, #24]
   20de0:	441a      	add	r2, r3
   20de2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20de6:	920a      	str	r2, [sp, #40]	; 0x28
   20de8:	9304      	str	r3, [sp, #16]
   20dea:	e5d3      	b.n	20994 <_svfprintf_r+0xf54>
   20dec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20dee:	4e18      	ldr	r6, [pc, #96]	; (20e50 <_svfprintf_r+0x1410>)
   20df0:	2b00      	cmp	r3, #0
   20df2:	bfb6      	itet	lt
   20df4:	272d      	movlt	r7, #45	; 0x2d
   20df6:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   20dfa:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   20dfe:	4b15      	ldr	r3, [pc, #84]	; (20e54 <_svfprintf_r+0x1414>)
   20e00:	f7ff ba1b 	b.w	2023a <_svfprintf_r+0x7fa>
   20e04:	2200      	movs	r2, #0
   20e06:	2300      	movs	r3, #0
   20e08:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   20e0c:	f7fb feae 	bl	1cb6c <__aeabi_dcmpeq>
   20e10:	2800      	cmp	r0, #0
   20e12:	f47f ae7a 	bne.w	20b0a <_svfprintf_r+0x10ca>
   20e16:	f1c5 0501 	rsb	r5, r5, #1
   20e1a:	951d      	str	r5, [sp, #116]	; 0x74
   20e1c:	442c      	add	r4, r5
   20e1e:	e587      	b.n	20930 <_svfprintf_r+0xef0>
   20e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20e24:	f1c3 0301 	rsb	r3, r3, #1
   20e28:	441a      	add	r2, r3
   20e2a:	4613      	mov	r3, r2
   20e2c:	e7d2      	b.n	20dd4 <_svfprintf_r+0x1394>
   20e2e:	f01b 0301 	ands.w	r3, fp, #1
   20e32:	930e      	str	r3, [sp, #56]	; 0x38
   20e34:	f47f aedb 	bne.w	20bee <_svfprintf_r+0x11ae>
   20e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20e3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20e3e:	9304      	str	r3, [sp, #16]
   20e40:	e5a8      	b.n	20994 <_svfprintf_r+0xf54>
   20e42:	bf00      	nop
   20e44:	66666667 	.word	0x66666667
   20e48:	00025868 	.word	0x00025868
   20e4c:	00025884 	.word	0x00025884
   20e50:	0002583c 	.word	0x0002583c
   20e54:	00025838 	.word	0x00025838
   20e58:	9b06      	ldr	r3, [sp, #24]
   20e5a:	b913      	cbnz	r3, 20e62 <_svfprintf_r+0x1422>
   20e5c:	f01b 0f01 	tst.w	fp, #1
   20e60:	d002      	beq.n	20e68 <_svfprintf_r+0x1428>
   20e62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20e64:	3301      	adds	r3, #1
   20e66:	e7ba      	b.n	20dde <_svfprintf_r+0x139e>
   20e68:	2301      	movs	r3, #1
   20e6a:	e74c      	b.n	20d06 <_svfprintf_r+0x12c6>
   20e6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   20e6e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   20e72:	6828      	ldr	r0, [r5, #0]
   20e74:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   20e78:	9006      	str	r0, [sp, #24]
   20e7a:	4628      	mov	r0, r5
   20e7c:	3004      	adds	r0, #4
   20e7e:	46a2      	mov	sl, r4
   20e80:	900b      	str	r0, [sp, #44]	; 0x2c
   20e82:	f7fe be35 	b.w	1faf0 <_svfprintf_r+0xb0>
   20e86:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20e8a:	f7ff b852 	b.w	1ff32 <_svfprintf_r+0x4f2>
   20e8e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20e92:	f7ff b8de 	b.w	20052 <_svfprintf_r+0x612>
   20e96:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20e9a:	f7ff ba07 	b.w	202ac <_svfprintf_r+0x86c>
   20e9e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   20ea2:	e69b      	b.n	20bdc <_svfprintf_r+0x119c>
   20ea4:	9a08      	ldr	r2, [sp, #32]
   20ea6:	230c      	movs	r3, #12
   20ea8:	6013      	str	r3, [r2, #0]
   20eaa:	f04f 33ff 	mov.w	r3, #4294967295
   20eae:	9305      	str	r3, [sp, #20]
   20eb0:	f7fe bea1 	b.w	1fbf6 <_svfprintf_r+0x1b6>
   20eb4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20eb8:	f7ff b986 	b.w	201c8 <_svfprintf_r+0x788>
   20ebc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20ec0:	f7ff b962 	b.w	20188 <_svfprintf_r+0x748>
   20ec4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20ec8:	f7ff b945 	b.w	20156 <_svfprintf_r+0x716>
   20ecc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20ed0:	f7ff b8fe 	b.w	200d0 <_svfprintf_r+0x690>

00020ed4 <write>:
   20ed4:	b410      	push	{r4}
   20ed6:	4c04      	ldr	r4, [pc, #16]	; (20ee8 <write+0x14>)
   20ed8:	4613      	mov	r3, r2
   20eda:	460a      	mov	r2, r1
   20edc:	4601      	mov	r1, r0
   20ede:	6820      	ldr	r0, [r4, #0]
   20ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
   20ee4:	f000 b8a8 	b.w	21038 <_write_r>
   20ee8:	200000f8 	.word	0x200000f8

00020eec <__utoa>:
   20eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   20eee:	f8df e078 	ldr.w	lr, [pc, #120]	; 20f68 <__utoa+0x7c>
   20ef2:	4616      	mov	r6, r2
   20ef4:	4604      	mov	r4, r0
   20ef6:	460f      	mov	r7, r1
   20ef8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20efc:	b08b      	sub	sp, #44	; 0x2c
   20efe:	466d      	mov	r5, sp
   20f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20f02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20f08:	e89e 0003 	ldmia.w	lr, {r0, r1}
   20f0c:	1eb3      	subs	r3, r6, #2
   20f0e:	f845 0b04 	str.w	r0, [r5], #4
   20f12:	2b22      	cmp	r3, #34	; 0x22
   20f14:	7029      	strb	r1, [r5, #0]
   20f16:	d822      	bhi.n	20f5e <__utoa+0x72>
   20f18:	1e7d      	subs	r5, r7, #1
   20f1a:	4628      	mov	r0, r5
   20f1c:	2200      	movs	r2, #0
   20f1e:	e000      	b.n	20f22 <__utoa+0x36>
   20f20:	461a      	mov	r2, r3
   20f22:	fbb4 f1f6 	udiv	r1, r4, r6
   20f26:	ab0a      	add	r3, sp, #40	; 0x28
   20f28:	fb06 4411 	mls	r4, r6, r1, r4
   20f2c:	4423      	add	r3, r4
   20f2e:	460c      	mov	r4, r1
   20f30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   20f34:	f800 3f01 	strb.w	r3, [r0, #1]!
   20f38:	1c53      	adds	r3, r2, #1
   20f3a:	2900      	cmp	r1, #0
   20f3c:	d1f0      	bne.n	20f20 <__utoa+0x34>
   20f3e:	54f9      	strb	r1, [r7, r3]
   20f40:	18bb      	adds	r3, r7, r2
   20f42:	b14a      	cbz	r2, 20f58 <__utoa+0x6c>
   20f44:	7819      	ldrb	r1, [r3, #0]
   20f46:	7868      	ldrb	r0, [r5, #1]
   20f48:	f805 1f01 	strb.w	r1, [r5, #1]!
   20f4c:	3401      	adds	r4, #1
   20f4e:	1b11      	subs	r1, r2, r4
   20f50:	428c      	cmp	r4, r1
   20f52:	f803 0901 	strb.w	r0, [r3], #-1
   20f56:	dbf5      	blt.n	20f44 <__utoa+0x58>
   20f58:	4638      	mov	r0, r7
   20f5a:	b00b      	add	sp, #44	; 0x2c
   20f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20f5e:	2000      	movs	r0, #0
   20f60:	7038      	strb	r0, [r7, #0]
   20f62:	b00b      	add	sp, #44	; 0x2c
   20f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20f66:	bf00      	nop
   20f68:	00025894 	.word	0x00025894

00020f6c <__swbuf_r>:
   20f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f6e:	460d      	mov	r5, r1
   20f70:	4614      	mov	r4, r2
   20f72:	4606      	mov	r6, r0
   20f74:	b110      	cbz	r0, 20f7c <__swbuf_r+0x10>
   20f76:	6b83      	ldr	r3, [r0, #56]	; 0x38
   20f78:	2b00      	cmp	r3, #0
   20f7a:	d04b      	beq.n	21014 <__swbuf_r+0xa8>
   20f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20f80:	69a3      	ldr	r3, [r4, #24]
   20f82:	60a3      	str	r3, [r4, #8]
   20f84:	b291      	uxth	r1, r2
   20f86:	0708      	lsls	r0, r1, #28
   20f88:	d539      	bpl.n	20ffe <__swbuf_r+0x92>
   20f8a:	6923      	ldr	r3, [r4, #16]
   20f8c:	2b00      	cmp	r3, #0
   20f8e:	d036      	beq.n	20ffe <__swbuf_r+0x92>
   20f90:	b2ed      	uxtb	r5, r5
   20f92:	0489      	lsls	r1, r1, #18
   20f94:	462f      	mov	r7, r5
   20f96:	d515      	bpl.n	20fc4 <__swbuf_r+0x58>
   20f98:	6822      	ldr	r2, [r4, #0]
   20f9a:	6961      	ldr	r1, [r4, #20]
   20f9c:	1ad3      	subs	r3, r2, r3
   20f9e:	428b      	cmp	r3, r1
   20fa0:	da1c      	bge.n	20fdc <__swbuf_r+0x70>
   20fa2:	3301      	adds	r3, #1
   20fa4:	68a1      	ldr	r1, [r4, #8]
   20fa6:	1c50      	adds	r0, r2, #1
   20fa8:	3901      	subs	r1, #1
   20faa:	60a1      	str	r1, [r4, #8]
   20fac:	6020      	str	r0, [r4, #0]
   20fae:	7015      	strb	r5, [r2, #0]
   20fb0:	6962      	ldr	r2, [r4, #20]
   20fb2:	429a      	cmp	r2, r3
   20fb4:	d01a      	beq.n	20fec <__swbuf_r+0x80>
   20fb6:	89a3      	ldrh	r3, [r4, #12]
   20fb8:	07db      	lsls	r3, r3, #31
   20fba:	d501      	bpl.n	20fc0 <__swbuf_r+0x54>
   20fbc:	2d0a      	cmp	r5, #10
   20fbe:	d015      	beq.n	20fec <__swbuf_r+0x80>
   20fc0:	4638      	mov	r0, r7
   20fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20fc4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   20fc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   20fca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   20fce:	81a2      	strh	r2, [r4, #12]
   20fd0:	6822      	ldr	r2, [r4, #0]
   20fd2:	6661      	str	r1, [r4, #100]	; 0x64
   20fd4:	6961      	ldr	r1, [r4, #20]
   20fd6:	1ad3      	subs	r3, r2, r3
   20fd8:	428b      	cmp	r3, r1
   20fda:	dbe2      	blt.n	20fa2 <__swbuf_r+0x36>
   20fdc:	4621      	mov	r1, r4
   20fde:	4630      	mov	r0, r6
   20fe0:	f001 f910 	bl	22204 <_fflush_r>
   20fe4:	b940      	cbnz	r0, 20ff8 <__swbuf_r+0x8c>
   20fe6:	6822      	ldr	r2, [r4, #0]
   20fe8:	2301      	movs	r3, #1
   20fea:	e7db      	b.n	20fa4 <__swbuf_r+0x38>
   20fec:	4621      	mov	r1, r4
   20fee:	4630      	mov	r0, r6
   20ff0:	f001 f908 	bl	22204 <_fflush_r>
   20ff4:	2800      	cmp	r0, #0
   20ff6:	d0e3      	beq.n	20fc0 <__swbuf_r+0x54>
   20ff8:	f04f 37ff 	mov.w	r7, #4294967295
   20ffc:	e7e0      	b.n	20fc0 <__swbuf_r+0x54>
   20ffe:	4621      	mov	r1, r4
   21000:	4630      	mov	r0, r6
   21002:	f000 f82f 	bl	21064 <__swsetup_r>
   21006:	2800      	cmp	r0, #0
   21008:	d1f6      	bne.n	20ff8 <__swbuf_r+0x8c>
   2100a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2100e:	6923      	ldr	r3, [r4, #16]
   21010:	b291      	uxth	r1, r2
   21012:	e7bd      	b.n	20f90 <__swbuf_r+0x24>
   21014:	f001 f94e 	bl	222b4 <__sinit>
   21018:	e7b0      	b.n	20f7c <__swbuf_r+0x10>
   2101a:	bf00      	nop

0002101c <__ascii_wctomb>:
   2101c:	b121      	cbz	r1, 21028 <__ascii_wctomb+0xc>
   2101e:	2aff      	cmp	r2, #255	; 0xff
   21020:	d804      	bhi.n	2102c <__ascii_wctomb+0x10>
   21022:	700a      	strb	r2, [r1, #0]
   21024:	2001      	movs	r0, #1
   21026:	4770      	bx	lr
   21028:	4608      	mov	r0, r1
   2102a:	4770      	bx	lr
   2102c:	238a      	movs	r3, #138	; 0x8a
   2102e:	6003      	str	r3, [r0, #0]
   21030:	f04f 30ff 	mov.w	r0, #4294967295
   21034:	4770      	bx	lr
   21036:	bf00      	nop

00021038 <_write_r>:
   21038:	b570      	push	{r4, r5, r6, lr}
   2103a:	460d      	mov	r5, r1
   2103c:	4c08      	ldr	r4, [pc, #32]	; (21060 <_write_r+0x28>)
   2103e:	4611      	mov	r1, r2
   21040:	4606      	mov	r6, r0
   21042:	461a      	mov	r2, r3
   21044:	4628      	mov	r0, r5
   21046:	2300      	movs	r3, #0
   21048:	6023      	str	r3, [r4, #0]
   2104a:	f002 f935 	bl	232b8 <_write>
   2104e:	1c43      	adds	r3, r0, #1
   21050:	d000      	beq.n	21054 <_write_r+0x1c>
   21052:	bd70      	pop	{r4, r5, r6, pc}
   21054:	6823      	ldr	r3, [r4, #0]
   21056:	2b00      	cmp	r3, #0
   21058:	d0fb      	beq.n	21052 <_write_r+0x1a>
   2105a:	6033      	str	r3, [r6, #0]
   2105c:	bd70      	pop	{r4, r5, r6, pc}
   2105e:	bf00      	nop
   21060:	2000239c 	.word	0x2000239c

00021064 <__swsetup_r>:
   21064:	b538      	push	{r3, r4, r5, lr}
   21066:	4b30      	ldr	r3, [pc, #192]	; (21128 <__swsetup_r+0xc4>)
   21068:	681b      	ldr	r3, [r3, #0]
   2106a:	4605      	mov	r5, r0
   2106c:	460c      	mov	r4, r1
   2106e:	b113      	cbz	r3, 21076 <__swsetup_r+0x12>
   21070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   21072:	2a00      	cmp	r2, #0
   21074:	d038      	beq.n	210e8 <__swsetup_r+0x84>
   21076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2107a:	b293      	uxth	r3, r2
   2107c:	0718      	lsls	r0, r3, #28
   2107e:	d50c      	bpl.n	2109a <__swsetup_r+0x36>
   21080:	6920      	ldr	r0, [r4, #16]
   21082:	b1a8      	cbz	r0, 210b0 <__swsetup_r+0x4c>
   21084:	f013 0201 	ands.w	r2, r3, #1
   21088:	d01e      	beq.n	210c8 <__swsetup_r+0x64>
   2108a:	6963      	ldr	r3, [r4, #20]
   2108c:	2200      	movs	r2, #0
   2108e:	425b      	negs	r3, r3
   21090:	61a3      	str	r3, [r4, #24]
   21092:	60a2      	str	r2, [r4, #8]
   21094:	b1f0      	cbz	r0, 210d4 <__swsetup_r+0x70>
   21096:	2000      	movs	r0, #0
   21098:	bd38      	pop	{r3, r4, r5, pc}
   2109a:	06d9      	lsls	r1, r3, #27
   2109c:	d53c      	bpl.n	21118 <__swsetup_r+0xb4>
   2109e:	0758      	lsls	r0, r3, #29
   210a0:	d426      	bmi.n	210f0 <__swsetup_r+0x8c>
   210a2:	6920      	ldr	r0, [r4, #16]
   210a4:	f042 0308 	orr.w	r3, r2, #8
   210a8:	81a3      	strh	r3, [r4, #12]
   210aa:	b29b      	uxth	r3, r3
   210ac:	2800      	cmp	r0, #0
   210ae:	d1e9      	bne.n	21084 <__swsetup_r+0x20>
   210b0:	f403 7220 	and.w	r2, r3, #640	; 0x280
   210b4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   210b8:	d0e4      	beq.n	21084 <__swsetup_r+0x20>
   210ba:	4628      	mov	r0, r5
   210bc:	4621      	mov	r1, r4
   210be:	f001 fae7 	bl	22690 <__smakebuf_r>
   210c2:	89a3      	ldrh	r3, [r4, #12]
   210c4:	6920      	ldr	r0, [r4, #16]
   210c6:	e7dd      	b.n	21084 <__swsetup_r+0x20>
   210c8:	0799      	lsls	r1, r3, #30
   210ca:	bf58      	it	pl
   210cc:	6962      	ldrpl	r2, [r4, #20]
   210ce:	60a2      	str	r2, [r4, #8]
   210d0:	2800      	cmp	r0, #0
   210d2:	d1e0      	bne.n	21096 <__swsetup_r+0x32>
   210d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   210d8:	061a      	lsls	r2, r3, #24
   210da:	d5dd      	bpl.n	21098 <__swsetup_r+0x34>
   210dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   210e0:	81a3      	strh	r3, [r4, #12]
   210e2:	f04f 30ff 	mov.w	r0, #4294967295
   210e6:	bd38      	pop	{r3, r4, r5, pc}
   210e8:	4618      	mov	r0, r3
   210ea:	f001 f8e3 	bl	222b4 <__sinit>
   210ee:	e7c2      	b.n	21076 <__swsetup_r+0x12>
   210f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   210f2:	b151      	cbz	r1, 2110a <__swsetup_r+0xa6>
   210f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   210f8:	4299      	cmp	r1, r3
   210fa:	d004      	beq.n	21106 <__swsetup_r+0xa2>
   210fc:	4628      	mov	r0, r5
   210fe:	f001 f97b 	bl	223f8 <_free_r>
   21102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   21106:	2300      	movs	r3, #0
   21108:	6323      	str	r3, [r4, #48]	; 0x30
   2110a:	2300      	movs	r3, #0
   2110c:	6920      	ldr	r0, [r4, #16]
   2110e:	6063      	str	r3, [r4, #4]
   21110:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   21114:	6020      	str	r0, [r4, #0]
   21116:	e7c5      	b.n	210a4 <__swsetup_r+0x40>
   21118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2111c:	2309      	movs	r3, #9
   2111e:	602b      	str	r3, [r5, #0]
   21120:	f04f 30ff 	mov.w	r0, #4294967295
   21124:	81a2      	strh	r2, [r4, #12]
   21126:	bd38      	pop	{r3, r4, r5, pc}
   21128:	200000f8 	.word	0x200000f8

0002112c <register_fini>:
   2112c:	4b02      	ldr	r3, [pc, #8]	; (21138 <register_fini+0xc>)
   2112e:	b113      	cbz	r3, 21136 <register_fini+0xa>
   21130:	4802      	ldr	r0, [pc, #8]	; (2113c <register_fini+0x10>)
   21132:	f000 b805 	b.w	21140 <atexit>
   21136:	4770      	bx	lr
   21138:	00000000 	.word	0x00000000
   2113c:	00022325 	.word	0x00022325

00021140 <atexit>:
   21140:	2300      	movs	r3, #0
   21142:	4601      	mov	r1, r0
   21144:	461a      	mov	r2, r3
   21146:	4618      	mov	r0, r3
   21148:	f001 beaa 	b.w	22ea0 <__register_exitproc>

0002114c <quorem>:
   2114c:	6902      	ldr	r2, [r0, #16]
   2114e:	690b      	ldr	r3, [r1, #16]
   21150:	4293      	cmp	r3, r2
   21152:	f300 808d 	bgt.w	21270 <quorem+0x124>
   21156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2115a:	f103 38ff 	add.w	r8, r3, #4294967295
   2115e:	f101 0714 	add.w	r7, r1, #20
   21162:	f100 0b14 	add.w	fp, r0, #20
   21166:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2116a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2116e:	ea4f 0488 	mov.w	r4, r8, lsl #2
   21172:	b083      	sub	sp, #12
   21174:	3201      	adds	r2, #1
   21176:	fbb3 f9f2 	udiv	r9, r3, r2
   2117a:	eb0b 0304 	add.w	r3, fp, r4
   2117e:	9400      	str	r4, [sp, #0]
   21180:	eb07 0a04 	add.w	sl, r7, r4
   21184:	9301      	str	r3, [sp, #4]
   21186:	f1b9 0f00 	cmp.w	r9, #0
   2118a:	d039      	beq.n	21200 <quorem+0xb4>
   2118c:	2500      	movs	r5, #0
   2118e:	462e      	mov	r6, r5
   21190:	46bc      	mov	ip, r7
   21192:	46de      	mov	lr, fp
   21194:	f85c 4b04 	ldr.w	r4, [ip], #4
   21198:	f8de 3000 	ldr.w	r3, [lr]
   2119c:	b2a2      	uxth	r2, r4
   2119e:	fb09 5502 	mla	r5, r9, r2, r5
   211a2:	0c22      	lsrs	r2, r4, #16
   211a4:	0c2c      	lsrs	r4, r5, #16
   211a6:	fb09 4202 	mla	r2, r9, r2, r4
   211aa:	b2ad      	uxth	r5, r5
   211ac:	1b75      	subs	r5, r6, r5
   211ae:	b296      	uxth	r6, r2
   211b0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   211b4:	fa15 f383 	uxtah	r3, r5, r3
   211b8:	eb06 4623 	add.w	r6, r6, r3, asr #16
   211bc:	b29b      	uxth	r3, r3
   211be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   211c2:	45e2      	cmp	sl, ip
   211c4:	ea4f 4512 	mov.w	r5, r2, lsr #16
   211c8:	f84e 3b04 	str.w	r3, [lr], #4
   211cc:	ea4f 4626 	mov.w	r6, r6, asr #16
   211d0:	d2e0      	bcs.n	21194 <quorem+0x48>
   211d2:	9b00      	ldr	r3, [sp, #0]
   211d4:	f85b 3003 	ldr.w	r3, [fp, r3]
   211d8:	b993      	cbnz	r3, 21200 <quorem+0xb4>
   211da:	9c01      	ldr	r4, [sp, #4]
   211dc:	1f23      	subs	r3, r4, #4
   211de:	459b      	cmp	fp, r3
   211e0:	d20c      	bcs.n	211fc <quorem+0xb0>
   211e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   211e6:	b94b      	cbnz	r3, 211fc <quorem+0xb0>
   211e8:	f1a4 0308 	sub.w	r3, r4, #8
   211ec:	e002      	b.n	211f4 <quorem+0xa8>
   211ee:	681a      	ldr	r2, [r3, #0]
   211f0:	3b04      	subs	r3, #4
   211f2:	b91a      	cbnz	r2, 211fc <quorem+0xb0>
   211f4:	459b      	cmp	fp, r3
   211f6:	f108 38ff 	add.w	r8, r8, #4294967295
   211fa:	d3f8      	bcc.n	211ee <quorem+0xa2>
   211fc:	f8c0 8010 	str.w	r8, [r0, #16]
   21200:	4604      	mov	r4, r0
   21202:	f001 fc8d 	bl	22b20 <__mcmp>
   21206:	2800      	cmp	r0, #0
   21208:	db2e      	blt.n	21268 <quorem+0x11c>
   2120a:	f109 0901 	add.w	r9, r9, #1
   2120e:	465d      	mov	r5, fp
   21210:	2300      	movs	r3, #0
   21212:	f857 1b04 	ldr.w	r1, [r7], #4
   21216:	6828      	ldr	r0, [r5, #0]
   21218:	b28a      	uxth	r2, r1
   2121a:	1a9a      	subs	r2, r3, r2
   2121c:	0c0b      	lsrs	r3, r1, #16
   2121e:	fa12 f280 	uxtah	r2, r2, r0
   21222:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   21226:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2122a:	b292      	uxth	r2, r2
   2122c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   21230:	45ba      	cmp	sl, r7
   21232:	f845 2b04 	str.w	r2, [r5], #4
   21236:	ea4f 4323 	mov.w	r3, r3, asr #16
   2123a:	d2ea      	bcs.n	21212 <quorem+0xc6>
   2123c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   21240:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   21244:	b982      	cbnz	r2, 21268 <quorem+0x11c>
   21246:	1f1a      	subs	r2, r3, #4
   21248:	4593      	cmp	fp, r2
   2124a:	d20b      	bcs.n	21264 <quorem+0x118>
   2124c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   21250:	b942      	cbnz	r2, 21264 <quorem+0x118>
   21252:	3b08      	subs	r3, #8
   21254:	e002      	b.n	2125c <quorem+0x110>
   21256:	681a      	ldr	r2, [r3, #0]
   21258:	3b04      	subs	r3, #4
   2125a:	b91a      	cbnz	r2, 21264 <quorem+0x118>
   2125c:	459b      	cmp	fp, r3
   2125e:	f108 38ff 	add.w	r8, r8, #4294967295
   21262:	d3f8      	bcc.n	21256 <quorem+0x10a>
   21264:	f8c4 8010 	str.w	r8, [r4, #16]
   21268:	4648      	mov	r0, r9
   2126a:	b003      	add	sp, #12
   2126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21270:	2000      	movs	r0, #0
   21272:	4770      	bx	lr
   21274:	0000      	movs	r0, r0
	...

00021278 <_dtoa_r>:
   21278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2127c:	ec57 6b10 	vmov	r6, r7, d0
   21280:	b097      	sub	sp, #92	; 0x5c
   21282:	6c05      	ldr	r5, [r0, #64]	; 0x40
   21284:	9102      	str	r1, [sp, #8]
   21286:	4604      	mov	r4, r0
   21288:	4693      	mov	fp, r2
   2128a:	9303      	str	r3, [sp, #12]
   2128c:	e9cd 6700 	strd	r6, r7, [sp]
   21290:	b14d      	cbz	r5, 212a6 <_dtoa_r+0x2e>
   21292:	6c42      	ldr	r2, [r0, #68]	; 0x44
   21294:	606a      	str	r2, [r5, #4]
   21296:	2301      	movs	r3, #1
   21298:	4093      	lsls	r3, r2
   2129a:	60ab      	str	r3, [r5, #8]
   2129c:	4629      	mov	r1, r5
   2129e:	f001 fa67 	bl	22770 <_Bfree>
   212a2:	2300      	movs	r3, #0
   212a4:	6423      	str	r3, [r4, #64]	; 0x40
   212a6:	e9dd 2300 	ldrd	r2, r3, [sp]
   212aa:	2b00      	cmp	r3, #0
   212ac:	4699      	mov	r9, r3
   212ae:	db38      	blt.n	21322 <_dtoa_r+0xaa>
   212b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   212b2:	2300      	movs	r3, #0
   212b4:	6013      	str	r3, [r2, #0]
   212b6:	4ba0      	ldr	r3, [pc, #640]	; (21538 <_dtoa_r+0x2c0>)
   212b8:	ea33 0309 	bics.w	r3, r3, r9
   212bc:	d017      	beq.n	212ee <_dtoa_r+0x76>
   212be:	e9dd 6700 	ldrd	r6, r7, [sp]
   212c2:	2200      	movs	r2, #0
   212c4:	2300      	movs	r3, #0
   212c6:	4630      	mov	r0, r6
   212c8:	4639      	mov	r1, r7
   212ca:	f7fb fc4f 	bl	1cb6c <__aeabi_dcmpeq>
   212ce:	4680      	mov	r8, r0
   212d0:	2800      	cmp	r0, #0
   212d2:	d02f      	beq.n	21334 <_dtoa_r+0xbc>
   212d4:	9a03      	ldr	r2, [sp, #12]
   212d6:	2301      	movs	r3, #1
   212d8:	6013      	str	r3, [r2, #0]
   212da:	9b21      	ldr	r3, [sp, #132]	; 0x84
   212dc:	2b00      	cmp	r3, #0
   212de:	f000 80c4 	beq.w	2146a <_dtoa_r+0x1f2>
   212e2:	4896      	ldr	r0, [pc, #600]	; (2153c <_dtoa_r+0x2c4>)
   212e4:	6018      	str	r0, [r3, #0]
   212e6:	3801      	subs	r0, #1
   212e8:	b017      	add	sp, #92	; 0x5c
   212ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212ee:	9a03      	ldr	r2, [sp, #12]
   212f0:	f242 730f 	movw	r3, #9999	; 0x270f
   212f4:	6013      	str	r3, [r2, #0]
   212f6:	9b00      	ldr	r3, [sp, #0]
   212f8:	b96b      	cbnz	r3, 21316 <_dtoa_r+0x9e>
   212fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   212fe:	b953      	cbnz	r3, 21316 <_dtoa_r+0x9e>
   21300:	9b21      	ldr	r3, [sp, #132]	; 0x84
   21302:	488f      	ldr	r0, [pc, #572]	; (21540 <_dtoa_r+0x2c8>)
   21304:	2b00      	cmp	r3, #0
   21306:	d0ef      	beq.n	212e8 <_dtoa_r+0x70>
   21308:	f100 0308 	add.w	r3, r0, #8
   2130c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   2130e:	6013      	str	r3, [r2, #0]
   21310:	b017      	add	sp, #92	; 0x5c
   21312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21316:	9b21      	ldr	r3, [sp, #132]	; 0x84
   21318:	488a      	ldr	r0, [pc, #552]	; (21544 <_dtoa_r+0x2cc>)
   2131a:	2b00      	cmp	r3, #0
   2131c:	d0e4      	beq.n	212e8 <_dtoa_r+0x70>
   2131e:	1cc3      	adds	r3, r0, #3
   21320:	e7f4      	b.n	2130c <_dtoa_r+0x94>
   21322:	9a01      	ldr	r2, [sp, #4]
   21324:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   21328:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2132a:	f8cd 9004 	str.w	r9, [sp, #4]
   2132e:	2301      	movs	r3, #1
   21330:	6013      	str	r3, [r2, #0]
   21332:	e7c0      	b.n	212b6 <_dtoa_r+0x3e>
   21334:	aa14      	add	r2, sp, #80	; 0x50
   21336:	a915      	add	r1, sp, #84	; 0x54
   21338:	ec47 6b10 	vmov	d0, r6, r7
   2133c:	4620      	mov	r0, r4
   2133e:	f001 fc8f 	bl	22c60 <__d2b>
   21342:	ea5f 5519 	movs.w	r5, r9, lsr #20
   21346:	4682      	mov	sl, r0
   21348:	d073      	beq.n	21432 <_dtoa_r+0x1ba>
   2134a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2134e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   21352:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   21356:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   2135a:	4630      	mov	r0, r6
   2135c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   21360:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   21364:	2200      	movs	r2, #0
   21366:	4b78      	ldr	r3, [pc, #480]	; (21548 <_dtoa_r+0x2d0>)
   21368:	f7fa ffe4 	bl	1c334 <__aeabi_dsub>
   2136c:	a36c      	add	r3, pc, #432	; (adr r3, 21520 <_dtoa_r+0x2a8>)
   2136e:	e9d3 2300 	ldrd	r2, r3, [r3]
   21372:	f7fb f993 	bl	1c69c <__aeabi_dmul>
   21376:	a36c      	add	r3, pc, #432	; (adr r3, 21528 <_dtoa_r+0x2b0>)
   21378:	e9d3 2300 	ldrd	r2, r3, [r3]
   2137c:	f7fa ffdc 	bl	1c338 <__adddf3>
   21380:	4606      	mov	r6, r0
   21382:	4628      	mov	r0, r5
   21384:	460f      	mov	r7, r1
   21386:	f7fb f923 	bl	1c5d0 <__aeabi_i2d>
   2138a:	a369      	add	r3, pc, #420	; (adr r3, 21530 <_dtoa_r+0x2b8>)
   2138c:	e9d3 2300 	ldrd	r2, r3, [r3]
   21390:	f7fb f984 	bl	1c69c <__aeabi_dmul>
   21394:	4602      	mov	r2, r0
   21396:	460b      	mov	r3, r1
   21398:	4630      	mov	r0, r6
   2139a:	4639      	mov	r1, r7
   2139c:	f7fa ffcc 	bl	1c338 <__adddf3>
   213a0:	4606      	mov	r6, r0
   213a2:	460f      	mov	r7, r1
   213a4:	f7fb fc14 	bl	1cbd0 <__aeabi_d2iz>
   213a8:	2200      	movs	r2, #0
   213aa:	9004      	str	r0, [sp, #16]
   213ac:	2300      	movs	r3, #0
   213ae:	4630      	mov	r0, r6
   213b0:	4639      	mov	r1, r7
   213b2:	f7fb fbe5 	bl	1cb80 <__aeabi_dcmplt>
   213b6:	2800      	cmp	r0, #0
   213b8:	f040 816f 	bne.w	2169a <_dtoa_r+0x422>
   213bc:	9e04      	ldr	r6, [sp, #16]
   213be:	2e16      	cmp	r6, #22
   213c0:	f200 8159 	bhi.w	21676 <_dtoa_r+0x3fe>
   213c4:	4b61      	ldr	r3, [pc, #388]	; (2154c <_dtoa_r+0x2d4>)
   213c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   213ca:	e9d3 0100 	ldrd	r0, r1, [r3]
   213ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   213d2:	f7fb fbf3 	bl	1cbbc <__aeabi_dcmpgt>
   213d6:	2800      	cmp	r0, #0
   213d8:	f000 81c4 	beq.w	21764 <_dtoa_r+0x4ec>
   213dc:	1e73      	subs	r3, r6, #1
   213de:	9304      	str	r3, [sp, #16]
   213e0:	2300      	movs	r3, #0
   213e2:	930c      	str	r3, [sp, #48]	; 0x30
   213e4:	eba8 0505 	sub.w	r5, r8, r5
   213e8:	1e6b      	subs	r3, r5, #1
   213ea:	9305      	str	r3, [sp, #20]
   213ec:	f100 814f 	bmi.w	2168e <_dtoa_r+0x416>
   213f0:	2300      	movs	r3, #0
   213f2:	9306      	str	r3, [sp, #24]
   213f4:	9b04      	ldr	r3, [sp, #16]
   213f6:	2b00      	cmp	r3, #0
   213f8:	f2c0 8140 	blt.w	2167c <_dtoa_r+0x404>
   213fc:	9a05      	ldr	r2, [sp, #20]
   213fe:	930b      	str	r3, [sp, #44]	; 0x2c
   21400:	4611      	mov	r1, r2
   21402:	4419      	add	r1, r3
   21404:	2300      	movs	r3, #0
   21406:	9105      	str	r1, [sp, #20]
   21408:	930a      	str	r3, [sp, #40]	; 0x28
   2140a:	9b02      	ldr	r3, [sp, #8]
   2140c:	2b09      	cmp	r3, #9
   2140e:	d82e      	bhi.n	2146e <_dtoa_r+0x1f6>
   21410:	2b05      	cmp	r3, #5
   21412:	f340 8651 	ble.w	220b8 <_dtoa_r+0xe40>
   21416:	3b04      	subs	r3, #4
   21418:	9302      	str	r3, [sp, #8]
   2141a:	2700      	movs	r7, #0
   2141c:	9b02      	ldr	r3, [sp, #8]
   2141e:	3b02      	subs	r3, #2
   21420:	2b03      	cmp	r3, #3
   21422:	f200 8633 	bhi.w	2208c <_dtoa_r+0xe14>
   21426:	e8df f013 	tbh	[pc, r3, lsl #1]
   2142a:	03d6      	.short	0x03d6
   2142c:	03e302cb 	.word	0x03e302cb
   21430:	0464      	.short	0x0464
   21432:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   21436:	9d15      	ldr	r5, [sp, #84]	; 0x54
   21438:	4445      	add	r5, r8
   2143a:	f205 4332 	addw	r3, r5, #1074	; 0x432
   2143e:	2b20      	cmp	r3, #32
   21440:	f340 818a 	ble.w	21758 <_dtoa_r+0x4e0>
   21444:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   21448:	fa09 f903 	lsl.w	r9, r9, r3
   2144c:	9b00      	ldr	r3, [sp, #0]
   2144e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   21452:	fa23 f000 	lsr.w	r0, r3, r0
   21456:	ea40 0009 	orr.w	r0, r0, r9
   2145a:	f7fb f8a9 	bl	1c5b0 <__aeabi_ui2d>
   2145e:	2301      	movs	r3, #1
   21460:	3d01      	subs	r5, #1
   21462:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   21466:	9310      	str	r3, [sp, #64]	; 0x40
   21468:	e77c      	b.n	21364 <_dtoa_r+0xec>
   2146a:	4839      	ldr	r0, [pc, #228]	; (21550 <_dtoa_r+0x2d8>)
   2146c:	e73c      	b.n	212e8 <_dtoa_r+0x70>
   2146e:	2100      	movs	r1, #0
   21470:	6461      	str	r1, [r4, #68]	; 0x44
   21472:	4620      	mov	r0, r4
   21474:	468b      	mov	fp, r1
   21476:	f001 f955 	bl	22724 <_Balloc>
   2147a:	f04f 33ff 	mov.w	r3, #4294967295
   2147e:	9308      	str	r3, [sp, #32]
   21480:	930d      	str	r3, [sp, #52]	; 0x34
   21482:	2301      	movs	r3, #1
   21484:	9007      	str	r0, [sp, #28]
   21486:	6420      	str	r0, [r4, #64]	; 0x40
   21488:	f8cd b008 	str.w	fp, [sp, #8]
   2148c:	9309      	str	r3, [sp, #36]	; 0x24
   2148e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21490:	2b00      	cmp	r3, #0
   21492:	f2c0 80d0 	blt.w	21636 <_dtoa_r+0x3be>
   21496:	9a04      	ldr	r2, [sp, #16]
   21498:	2a0e      	cmp	r2, #14
   2149a:	f300 80cc 	bgt.w	21636 <_dtoa_r+0x3be>
   2149e:	4b2b      	ldr	r3, [pc, #172]	; (2154c <_dtoa_r+0x2d4>)
   214a0:	f1bb 0f00 	cmp.w	fp, #0
   214a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   214a8:	e9d3 8900 	ldrd	r8, r9, [r3]
   214ac:	f2c0 83be 	blt.w	21c2c <_dtoa_r+0x9b4>
   214b0:	e9dd 6700 	ldrd	r6, r7, [sp]
   214b4:	4642      	mov	r2, r8
   214b6:	464b      	mov	r3, r9
   214b8:	4630      	mov	r0, r6
   214ba:	4639      	mov	r1, r7
   214bc:	f7fb fa18 	bl	1c8f0 <__aeabi_ddiv>
   214c0:	f7fb fb86 	bl	1cbd0 <__aeabi_d2iz>
   214c4:	4683      	mov	fp, r0
   214c6:	f7fb f883 	bl	1c5d0 <__aeabi_i2d>
   214ca:	4642      	mov	r2, r8
   214cc:	464b      	mov	r3, r9
   214ce:	f7fb f8e5 	bl	1c69c <__aeabi_dmul>
   214d2:	460b      	mov	r3, r1
   214d4:	4602      	mov	r2, r0
   214d6:	4639      	mov	r1, r7
   214d8:	4630      	mov	r0, r6
   214da:	f7fa ff2b 	bl	1c334 <__aeabi_dsub>
   214de:	9d07      	ldr	r5, [sp, #28]
   214e0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   214e4:	702b      	strb	r3, [r5, #0]
   214e6:	9b08      	ldr	r3, [sp, #32]
   214e8:	2b01      	cmp	r3, #1
   214ea:	4606      	mov	r6, r0
   214ec:	460f      	mov	r7, r1
   214ee:	f105 0501 	add.w	r5, r5, #1
   214f2:	d061      	beq.n	215b8 <_dtoa_r+0x340>
   214f4:	2200      	movs	r2, #0
   214f6:	4b17      	ldr	r3, [pc, #92]	; (21554 <_dtoa_r+0x2dc>)
   214f8:	f7fb f8d0 	bl	1c69c <__aeabi_dmul>
   214fc:	2200      	movs	r2, #0
   214fe:	2300      	movs	r3, #0
   21500:	4606      	mov	r6, r0
   21502:	460f      	mov	r7, r1
   21504:	f7fb fb32 	bl	1cb6c <__aeabi_dcmpeq>
   21508:	2800      	cmp	r0, #0
   2150a:	f040 8081 	bne.w	21610 <_dtoa_r+0x398>
   2150e:	f8cd a000 	str.w	sl, [sp]
   21512:	9402      	str	r4, [sp, #8]
   21514:	f8dd a01c 	ldr.w	sl, [sp, #28]
   21518:	9c08      	ldr	r4, [sp, #32]
   2151a:	e028      	b.n	2156e <_dtoa_r+0x2f6>
   2151c:	f3af 8000 	nop.w
   21520:	636f4361 	.word	0x636f4361
   21524:	3fd287a7 	.word	0x3fd287a7
   21528:	8b60c8b3 	.word	0x8b60c8b3
   2152c:	3fc68a28 	.word	0x3fc68a28
   21530:	509f79fb 	.word	0x509f79fb
   21534:	3fd34413 	.word	0x3fd34413
   21538:	7ff00000 	.word	0x7ff00000
   2153c:	00025871 	.word	0x00025871
   21540:	000259c0 	.word	0x000259c0
   21544:	000259cc 	.word	0x000259cc
   21548:	3ff80000 	.word	0x3ff80000
   2154c:	000259f8 	.word	0x000259f8
   21550:	00025870 	.word	0x00025870
   21554:	40240000 	.word	0x40240000
   21558:	f7fb f8a0 	bl	1c69c <__aeabi_dmul>
   2155c:	2200      	movs	r2, #0
   2155e:	2300      	movs	r3, #0
   21560:	4606      	mov	r6, r0
   21562:	460f      	mov	r7, r1
   21564:	f7fb fb02 	bl	1cb6c <__aeabi_dcmpeq>
   21568:	2800      	cmp	r0, #0
   2156a:	f040 83c5 	bne.w	21cf8 <_dtoa_r+0xa80>
   2156e:	4642      	mov	r2, r8
   21570:	464b      	mov	r3, r9
   21572:	4630      	mov	r0, r6
   21574:	4639      	mov	r1, r7
   21576:	f7fb f9bb 	bl	1c8f0 <__aeabi_ddiv>
   2157a:	f7fb fb29 	bl	1cbd0 <__aeabi_d2iz>
   2157e:	4683      	mov	fp, r0
   21580:	f7fb f826 	bl	1c5d0 <__aeabi_i2d>
   21584:	4642      	mov	r2, r8
   21586:	464b      	mov	r3, r9
   21588:	f7fb f888 	bl	1c69c <__aeabi_dmul>
   2158c:	4602      	mov	r2, r0
   2158e:	460b      	mov	r3, r1
   21590:	4630      	mov	r0, r6
   21592:	4639      	mov	r1, r7
   21594:	f7fa fece 	bl	1c334 <__aeabi_dsub>
   21598:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   2159c:	f805 eb01 	strb.w	lr, [r5], #1
   215a0:	eba5 0e0a 	sub.w	lr, r5, sl
   215a4:	45a6      	cmp	lr, r4
   215a6:	4606      	mov	r6, r0
   215a8:	460f      	mov	r7, r1
   215aa:	f04f 0200 	mov.w	r2, #0
   215ae:	4b6e      	ldr	r3, [pc, #440]	; (21768 <_dtoa_r+0x4f0>)
   215b0:	d1d2      	bne.n	21558 <_dtoa_r+0x2e0>
   215b2:	f8dd a000 	ldr.w	sl, [sp]
   215b6:	9c02      	ldr	r4, [sp, #8]
   215b8:	4632      	mov	r2, r6
   215ba:	463b      	mov	r3, r7
   215bc:	4630      	mov	r0, r6
   215be:	4639      	mov	r1, r7
   215c0:	f7fa feba 	bl	1c338 <__adddf3>
   215c4:	4606      	mov	r6, r0
   215c6:	460f      	mov	r7, r1
   215c8:	4602      	mov	r2, r0
   215ca:	460b      	mov	r3, r1
   215cc:	4640      	mov	r0, r8
   215ce:	4649      	mov	r1, r9
   215d0:	f7fb fad6 	bl	1cb80 <__aeabi_dcmplt>
   215d4:	b948      	cbnz	r0, 215ea <_dtoa_r+0x372>
   215d6:	4632      	mov	r2, r6
   215d8:	463b      	mov	r3, r7
   215da:	4640      	mov	r0, r8
   215dc:	4649      	mov	r1, r9
   215de:	f7fb fac5 	bl	1cb6c <__aeabi_dcmpeq>
   215e2:	b1a8      	cbz	r0, 21610 <_dtoa_r+0x398>
   215e4:	f01b 0f01 	tst.w	fp, #1
   215e8:	d012      	beq.n	21610 <_dtoa_r+0x398>
   215ea:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   215ee:	9a07      	ldr	r2, [sp, #28]
   215f0:	1e6b      	subs	r3, r5, #1
   215f2:	e004      	b.n	215fe <_dtoa_r+0x386>
   215f4:	429a      	cmp	r2, r3
   215f6:	f000 842d 	beq.w	21e54 <_dtoa_r+0xbdc>
   215fa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   215fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   21602:	f103 0501 	add.w	r5, r3, #1
   21606:	d0f5      	beq.n	215f4 <_dtoa_r+0x37c>
   21608:	f108 0801 	add.w	r8, r8, #1
   2160c:	f883 8000 	strb.w	r8, [r3]
   21610:	4651      	mov	r1, sl
   21612:	4620      	mov	r0, r4
   21614:	f001 f8ac 	bl	22770 <_Bfree>
   21618:	2200      	movs	r2, #0
   2161a:	9b04      	ldr	r3, [sp, #16]
   2161c:	702a      	strb	r2, [r5, #0]
   2161e:	9a03      	ldr	r2, [sp, #12]
   21620:	3301      	adds	r3, #1
   21622:	6013      	str	r3, [r2, #0]
   21624:	9b21      	ldr	r3, [sp, #132]	; 0x84
   21626:	2b00      	cmp	r3, #0
   21628:	f000 83a3 	beq.w	21d72 <_dtoa_r+0xafa>
   2162c:	9807      	ldr	r0, [sp, #28]
   2162e:	601d      	str	r5, [r3, #0]
   21630:	b017      	add	sp, #92	; 0x5c
   21632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21636:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21638:	2a00      	cmp	r2, #0
   2163a:	d040      	beq.n	216be <_dtoa_r+0x446>
   2163c:	9a02      	ldr	r2, [sp, #8]
   2163e:	2a01      	cmp	r2, #1
   21640:	f340 831c 	ble.w	21c7c <_dtoa_r+0xa04>
   21644:	9b08      	ldr	r3, [sp, #32]
   21646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21648:	1e5f      	subs	r7, r3, #1
   2164a:	42ba      	cmp	r2, r7
   2164c:	f2c0 8394 	blt.w	21d78 <_dtoa_r+0xb00>
   21650:	1bd7      	subs	r7, r2, r7
   21652:	9b08      	ldr	r3, [sp, #32]
   21654:	2b00      	cmp	r3, #0
   21656:	f2c0 847e 	blt.w	21f56 <_dtoa_r+0xcde>
   2165a:	9d06      	ldr	r5, [sp, #24]
   2165c:	9b08      	ldr	r3, [sp, #32]
   2165e:	9a06      	ldr	r2, [sp, #24]
   21660:	441a      	add	r2, r3
   21662:	9206      	str	r2, [sp, #24]
   21664:	9a05      	ldr	r2, [sp, #20]
   21666:	2101      	movs	r1, #1
   21668:	441a      	add	r2, r3
   2166a:	4620      	mov	r0, r4
   2166c:	9205      	str	r2, [sp, #20]
   2166e:	f001 f919 	bl	228a4 <__i2b>
   21672:	4606      	mov	r6, r0
   21674:	e026      	b.n	216c4 <_dtoa_r+0x44c>
   21676:	2301      	movs	r3, #1
   21678:	930c      	str	r3, [sp, #48]	; 0x30
   2167a:	e6b3      	b.n	213e4 <_dtoa_r+0x16c>
   2167c:	9a06      	ldr	r2, [sp, #24]
   2167e:	9b04      	ldr	r3, [sp, #16]
   21680:	1ad2      	subs	r2, r2, r3
   21682:	425b      	negs	r3, r3
   21684:	930a      	str	r3, [sp, #40]	; 0x28
   21686:	2300      	movs	r3, #0
   21688:	9206      	str	r2, [sp, #24]
   2168a:	930b      	str	r3, [sp, #44]	; 0x2c
   2168c:	e6bd      	b.n	2140a <_dtoa_r+0x192>
   2168e:	f1c5 0301 	rsb	r3, r5, #1
   21692:	9306      	str	r3, [sp, #24]
   21694:	2300      	movs	r3, #0
   21696:	9305      	str	r3, [sp, #20]
   21698:	e6ac      	b.n	213f4 <_dtoa_r+0x17c>
   2169a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   2169e:	4648      	mov	r0, r9
   216a0:	f7fa ff96 	bl	1c5d0 <__aeabi_i2d>
   216a4:	4602      	mov	r2, r0
   216a6:	460b      	mov	r3, r1
   216a8:	4630      	mov	r0, r6
   216aa:	4639      	mov	r1, r7
   216ac:	f7fb fa5e 	bl	1cb6c <__aeabi_dcmpeq>
   216b0:	2800      	cmp	r0, #0
   216b2:	f47f ae83 	bne.w	213bc <_dtoa_r+0x144>
   216b6:	f109 33ff 	add.w	r3, r9, #4294967295
   216ba:	9304      	str	r3, [sp, #16]
   216bc:	e67e      	b.n	213bc <_dtoa_r+0x144>
   216be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   216c0:	9d06      	ldr	r5, [sp, #24]
   216c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   216c4:	2d00      	cmp	r5, #0
   216c6:	dd0c      	ble.n	216e2 <_dtoa_r+0x46a>
   216c8:	9905      	ldr	r1, [sp, #20]
   216ca:	2900      	cmp	r1, #0
   216cc:	460b      	mov	r3, r1
   216ce:	dd08      	ble.n	216e2 <_dtoa_r+0x46a>
   216d0:	42a9      	cmp	r1, r5
   216d2:	9a06      	ldr	r2, [sp, #24]
   216d4:	bfa8      	it	ge
   216d6:	462b      	movge	r3, r5
   216d8:	1ad2      	subs	r2, r2, r3
   216da:	1aed      	subs	r5, r5, r3
   216dc:	1acb      	subs	r3, r1, r3
   216de:	9206      	str	r2, [sp, #24]
   216e0:	9305      	str	r3, [sp, #20]
   216e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   216e4:	b1d3      	cbz	r3, 2171c <_dtoa_r+0x4a4>
   216e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   216e8:	2b00      	cmp	r3, #0
   216ea:	f000 82c0 	beq.w	21c6e <_dtoa_r+0x9f6>
   216ee:	2f00      	cmp	r7, #0
   216f0:	dd10      	ble.n	21714 <_dtoa_r+0x49c>
   216f2:	4631      	mov	r1, r6
   216f4:	463a      	mov	r2, r7
   216f6:	4620      	mov	r0, r4
   216f8:	f001 f970 	bl	229dc <__pow5mult>
   216fc:	4652      	mov	r2, sl
   216fe:	4601      	mov	r1, r0
   21700:	4606      	mov	r6, r0
   21702:	4620      	mov	r0, r4
   21704:	f001 f8d8 	bl	228b8 <__multiply>
   21708:	4651      	mov	r1, sl
   2170a:	4680      	mov	r8, r0
   2170c:	4620      	mov	r0, r4
   2170e:	f001 f82f 	bl	22770 <_Bfree>
   21712:	46c2      	mov	sl, r8
   21714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21716:	1bda      	subs	r2, r3, r7
   21718:	f040 82aa 	bne.w	21c70 <_dtoa_r+0x9f8>
   2171c:	2101      	movs	r1, #1
   2171e:	4620      	mov	r0, r4
   21720:	f001 f8c0 	bl	228a4 <__i2b>
   21724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21726:	2b00      	cmp	r3, #0
   21728:	4681      	mov	r9, r0
   2172a:	dd1f      	ble.n	2176c <_dtoa_r+0x4f4>
   2172c:	4601      	mov	r1, r0
   2172e:	461a      	mov	r2, r3
   21730:	4620      	mov	r0, r4
   21732:	f001 f953 	bl	229dc <__pow5mult>
   21736:	9b02      	ldr	r3, [sp, #8]
   21738:	2b01      	cmp	r3, #1
   2173a:	4681      	mov	r9, r0
   2173c:	f340 825b 	ble.w	21bf6 <_dtoa_r+0x97e>
   21740:	f04f 0800 	mov.w	r8, #0
   21744:	f8d9 3010 	ldr.w	r3, [r9, #16]
   21748:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   2174c:	6918      	ldr	r0, [r3, #16]
   2174e:	f001 f859 	bl	22804 <__hi0bits>
   21752:	f1c0 0020 	rsb	r0, r0, #32
   21756:	e013      	b.n	21780 <_dtoa_r+0x508>
   21758:	f1c3 0920 	rsb	r9, r3, #32
   2175c:	9b00      	ldr	r3, [sp, #0]
   2175e:	fa03 f009 	lsl.w	r0, r3, r9
   21762:	e67a      	b.n	2145a <_dtoa_r+0x1e2>
   21764:	900c      	str	r0, [sp, #48]	; 0x30
   21766:	e63d      	b.n	213e4 <_dtoa_r+0x16c>
   21768:	40240000 	.word	0x40240000
   2176c:	9b02      	ldr	r3, [sp, #8]
   2176e:	2b01      	cmp	r3, #1
   21770:	f340 828d 	ble.w	21c8e <_dtoa_r+0xa16>
   21774:	f04f 0800 	mov.w	r8, #0
   21778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2177a:	2001      	movs	r0, #1
   2177c:	2b00      	cmp	r3, #0
   2177e:	d1e1      	bne.n	21744 <_dtoa_r+0x4cc>
   21780:	9a05      	ldr	r2, [sp, #20]
   21782:	4410      	add	r0, r2
   21784:	f010 001f 	ands.w	r0, r0, #31
   21788:	f000 80a1 	beq.w	218ce <_dtoa_r+0x656>
   2178c:	f1c0 0320 	rsb	r3, r0, #32
   21790:	2b04      	cmp	r3, #4
   21792:	f340 848c 	ble.w	220ae <_dtoa_r+0xe36>
   21796:	9b06      	ldr	r3, [sp, #24]
   21798:	f1c0 001c 	rsb	r0, r0, #28
   2179c:	4403      	add	r3, r0
   2179e:	9306      	str	r3, [sp, #24]
   217a0:	4613      	mov	r3, r2
   217a2:	4403      	add	r3, r0
   217a4:	4405      	add	r5, r0
   217a6:	9305      	str	r3, [sp, #20]
   217a8:	9b06      	ldr	r3, [sp, #24]
   217aa:	2b00      	cmp	r3, #0
   217ac:	dd05      	ble.n	217ba <_dtoa_r+0x542>
   217ae:	4651      	mov	r1, sl
   217b0:	461a      	mov	r2, r3
   217b2:	4620      	mov	r0, r4
   217b4:	f001 f962 	bl	22a7c <__lshift>
   217b8:	4682      	mov	sl, r0
   217ba:	9b05      	ldr	r3, [sp, #20]
   217bc:	2b00      	cmp	r3, #0
   217be:	dd05      	ble.n	217cc <_dtoa_r+0x554>
   217c0:	4649      	mov	r1, r9
   217c2:	461a      	mov	r2, r3
   217c4:	4620      	mov	r0, r4
   217c6:	f001 f959 	bl	22a7c <__lshift>
   217ca:	4681      	mov	r9, r0
   217cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   217ce:	2b00      	cmp	r3, #0
   217d0:	f040 8086 	bne.w	218e0 <_dtoa_r+0x668>
   217d4:	9b08      	ldr	r3, [sp, #32]
   217d6:	2b00      	cmp	r3, #0
   217d8:	f340 8269 	ble.w	21cae <_dtoa_r+0xa36>
   217dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   217de:	2b00      	cmp	r3, #0
   217e0:	f000 8098 	beq.w	21914 <_dtoa_r+0x69c>
   217e4:	2d00      	cmp	r5, #0
   217e6:	dd05      	ble.n	217f4 <_dtoa_r+0x57c>
   217e8:	4631      	mov	r1, r6
   217ea:	462a      	mov	r2, r5
   217ec:	4620      	mov	r0, r4
   217ee:	f001 f945 	bl	22a7c <__lshift>
   217f2:	4606      	mov	r6, r0
   217f4:	f1b8 0f00 	cmp.w	r8, #0
   217f8:	f040 8336 	bne.w	21e68 <_dtoa_r+0xbf0>
   217fc:	46b0      	mov	r8, r6
   217fe:	9b08      	ldr	r3, [sp, #32]
   21800:	9a07      	ldr	r2, [sp, #28]
   21802:	3b01      	subs	r3, #1
   21804:	18d3      	adds	r3, r2, r3
   21806:	9308      	str	r3, [sp, #32]
   21808:	9b00      	ldr	r3, [sp, #0]
   2180a:	f003 0301 	and.w	r3, r3, #1
   2180e:	9309      	str	r3, [sp, #36]	; 0x24
   21810:	4617      	mov	r7, r2
   21812:	4649      	mov	r1, r9
   21814:	4650      	mov	r0, sl
   21816:	f7ff fc99 	bl	2114c <quorem>
   2181a:	4631      	mov	r1, r6
   2181c:	4605      	mov	r5, r0
   2181e:	4650      	mov	r0, sl
   21820:	f001 f97e 	bl	22b20 <__mcmp>
   21824:	4642      	mov	r2, r8
   21826:	4649      	mov	r1, r9
   21828:	4683      	mov	fp, r0
   2182a:	4620      	mov	r0, r4
   2182c:	f001 f994 	bl	22b58 <__mdiff>
   21830:	f105 0230 	add.w	r2, r5, #48	; 0x30
   21834:	9200      	str	r2, [sp, #0]
   21836:	68c2      	ldr	r2, [r0, #12]
   21838:	4601      	mov	r1, r0
   2183a:	2a00      	cmp	r2, #0
   2183c:	f040 8232 	bne.w	21ca4 <_dtoa_r+0xa2c>
   21840:	9006      	str	r0, [sp, #24]
   21842:	4650      	mov	r0, sl
   21844:	f001 f96c 	bl	22b20 <__mcmp>
   21848:	9b06      	ldr	r3, [sp, #24]
   2184a:	9005      	str	r0, [sp, #20]
   2184c:	4619      	mov	r1, r3
   2184e:	4620      	mov	r0, r4
   21850:	f000 ff8e 	bl	22770 <_Bfree>
   21854:	9a05      	ldr	r2, [sp, #20]
   21856:	b932      	cbnz	r2, 21866 <_dtoa_r+0x5ee>
   21858:	9b02      	ldr	r3, [sp, #8]
   2185a:	b923      	cbnz	r3, 21866 <_dtoa_r+0x5ee>
   2185c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2185e:	2b00      	cmp	r3, #0
   21860:	f000 83de 	beq.w	22020 <_dtoa_r+0xda8>
   21864:	9a02      	ldr	r2, [sp, #8]
   21866:	f1bb 0f00 	cmp.w	fp, #0
   2186a:	f2c0 82a2 	blt.w	21db2 <_dtoa_r+0xb3a>
   2186e:	d105      	bne.n	2187c <_dtoa_r+0x604>
   21870:	9b02      	ldr	r3, [sp, #8]
   21872:	b91b      	cbnz	r3, 2187c <_dtoa_r+0x604>
   21874:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21876:	2b00      	cmp	r3, #0
   21878:	f000 829b 	beq.w	21db2 <_dtoa_r+0xb3a>
   2187c:	2a00      	cmp	r2, #0
   2187e:	f300 8307 	bgt.w	21e90 <_dtoa_r+0xc18>
   21882:	f89d 3000 	ldrb.w	r3, [sp]
   21886:	703b      	strb	r3, [r7, #0]
   21888:	9b08      	ldr	r3, [sp, #32]
   2188a:	f107 0b01 	add.w	fp, r7, #1
   2188e:	429f      	cmp	r7, r3
   21890:	465d      	mov	r5, fp
   21892:	f000 8308 	beq.w	21ea6 <_dtoa_r+0xc2e>
   21896:	4651      	mov	r1, sl
   21898:	2300      	movs	r3, #0
   2189a:	220a      	movs	r2, #10
   2189c:	4620      	mov	r0, r4
   2189e:	f000 ff71 	bl	22784 <__multadd>
   218a2:	4546      	cmp	r6, r8
   218a4:	4682      	mov	sl, r0
   218a6:	4631      	mov	r1, r6
   218a8:	f04f 0300 	mov.w	r3, #0
   218ac:	f04f 020a 	mov.w	r2, #10
   218b0:	4620      	mov	r0, r4
   218b2:	f000 81f1 	beq.w	21c98 <_dtoa_r+0xa20>
   218b6:	f000 ff65 	bl	22784 <__multadd>
   218ba:	4641      	mov	r1, r8
   218bc:	4606      	mov	r6, r0
   218be:	2300      	movs	r3, #0
   218c0:	220a      	movs	r2, #10
   218c2:	4620      	mov	r0, r4
   218c4:	f000 ff5e 	bl	22784 <__multadd>
   218c8:	465f      	mov	r7, fp
   218ca:	4680      	mov	r8, r0
   218cc:	e7a1      	b.n	21812 <_dtoa_r+0x59a>
   218ce:	201c      	movs	r0, #28
   218d0:	9b06      	ldr	r3, [sp, #24]
   218d2:	4403      	add	r3, r0
   218d4:	9306      	str	r3, [sp, #24]
   218d6:	9b05      	ldr	r3, [sp, #20]
   218d8:	4403      	add	r3, r0
   218da:	4405      	add	r5, r0
   218dc:	9305      	str	r3, [sp, #20]
   218de:	e763      	b.n	217a8 <_dtoa_r+0x530>
   218e0:	4649      	mov	r1, r9
   218e2:	4650      	mov	r0, sl
   218e4:	f001 f91c 	bl	22b20 <__mcmp>
   218e8:	2800      	cmp	r0, #0
   218ea:	f6bf af73 	bge.w	217d4 <_dtoa_r+0x55c>
   218ee:	9f04      	ldr	r7, [sp, #16]
   218f0:	4651      	mov	r1, sl
   218f2:	2300      	movs	r3, #0
   218f4:	220a      	movs	r2, #10
   218f6:	4620      	mov	r0, r4
   218f8:	3f01      	subs	r7, #1
   218fa:	9704      	str	r7, [sp, #16]
   218fc:	f000 ff42 	bl	22784 <__multadd>
   21900:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21902:	4682      	mov	sl, r0
   21904:	2b00      	cmp	r3, #0
   21906:	f040 83a7 	bne.w	22058 <_dtoa_r+0xde0>
   2190a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2190c:	2b00      	cmp	r3, #0
   2190e:	f340 83b0 	ble.w	22072 <_dtoa_r+0xdfa>
   21912:	9308      	str	r3, [sp, #32]
   21914:	f8dd b01c 	ldr.w	fp, [sp, #28]
   21918:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2191c:	465d      	mov	r5, fp
   2191e:	e002      	b.n	21926 <_dtoa_r+0x6ae>
   21920:	f000 ff30 	bl	22784 <__multadd>
   21924:	4682      	mov	sl, r0
   21926:	4649      	mov	r1, r9
   21928:	4650      	mov	r0, sl
   2192a:	f7ff fc0f 	bl	2114c <quorem>
   2192e:	f100 0730 	add.w	r7, r0, #48	; 0x30
   21932:	f805 7b01 	strb.w	r7, [r5], #1
   21936:	eba5 030b 	sub.w	r3, r5, fp
   2193a:	4543      	cmp	r3, r8
   2193c:	f04f 020a 	mov.w	r2, #10
   21940:	f04f 0300 	mov.w	r3, #0
   21944:	4651      	mov	r1, sl
   21946:	4620      	mov	r0, r4
   21948:	dbea      	blt.n	21920 <_dtoa_r+0x6a8>
   2194a:	9b07      	ldr	r3, [sp, #28]
   2194c:	9a08      	ldr	r2, [sp, #32]
   2194e:	9700      	str	r7, [sp, #0]
   21950:	2a01      	cmp	r2, #1
   21952:	bfac      	ite	ge
   21954:	189b      	addge	r3, r3, r2
   21956:	3301      	addlt	r3, #1
   21958:	461d      	mov	r5, r3
   2195a:	f04f 0b00 	mov.w	fp, #0
   2195e:	4651      	mov	r1, sl
   21960:	2201      	movs	r2, #1
   21962:	4620      	mov	r0, r4
   21964:	f001 f88a 	bl	22a7c <__lshift>
   21968:	4649      	mov	r1, r9
   2196a:	4682      	mov	sl, r0
   2196c:	f001 f8d8 	bl	22b20 <__mcmp>
   21970:	2800      	cmp	r0, #0
   21972:	f340 823a 	ble.w	21dea <_dtoa_r+0xb72>
   21976:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2197a:	9907      	ldr	r1, [sp, #28]
   2197c:	1e6b      	subs	r3, r5, #1
   2197e:	e004      	b.n	2198a <_dtoa_r+0x712>
   21980:	428b      	cmp	r3, r1
   21982:	f000 81af 	beq.w	21ce4 <_dtoa_r+0xa6c>
   21986:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2198a:	2a39      	cmp	r2, #57	; 0x39
   2198c:	f103 0501 	add.w	r5, r3, #1
   21990:	d0f6      	beq.n	21980 <_dtoa_r+0x708>
   21992:	3201      	adds	r2, #1
   21994:	701a      	strb	r2, [r3, #0]
   21996:	4649      	mov	r1, r9
   21998:	4620      	mov	r0, r4
   2199a:	f000 fee9 	bl	22770 <_Bfree>
   2199e:	2e00      	cmp	r6, #0
   219a0:	f43f ae36 	beq.w	21610 <_dtoa_r+0x398>
   219a4:	f1bb 0f00 	cmp.w	fp, #0
   219a8:	d005      	beq.n	219b6 <_dtoa_r+0x73e>
   219aa:	45b3      	cmp	fp, r6
   219ac:	d003      	beq.n	219b6 <_dtoa_r+0x73e>
   219ae:	4659      	mov	r1, fp
   219b0:	4620      	mov	r0, r4
   219b2:	f000 fedd 	bl	22770 <_Bfree>
   219b6:	4631      	mov	r1, r6
   219b8:	4620      	mov	r0, r4
   219ba:	f000 fed9 	bl	22770 <_Bfree>
   219be:	e627      	b.n	21610 <_dtoa_r+0x398>
   219c0:	2300      	movs	r3, #0
   219c2:	9309      	str	r3, [sp, #36]	; 0x24
   219c4:	9b04      	ldr	r3, [sp, #16]
   219c6:	445b      	add	r3, fp
   219c8:	930d      	str	r3, [sp, #52]	; 0x34
   219ca:	3301      	adds	r3, #1
   219cc:	2b01      	cmp	r3, #1
   219ce:	461e      	mov	r6, r3
   219d0:	461d      	mov	r5, r3
   219d2:	9308      	str	r3, [sp, #32]
   219d4:	bfb8      	it	lt
   219d6:	2601      	movlt	r6, #1
   219d8:	2100      	movs	r1, #0
   219da:	2e17      	cmp	r6, #23
   219dc:	6461      	str	r1, [r4, #68]	; 0x44
   219de:	d90a      	bls.n	219f6 <_dtoa_r+0x77e>
   219e0:	2201      	movs	r2, #1
   219e2:	2304      	movs	r3, #4
   219e4:	005b      	lsls	r3, r3, #1
   219e6:	f103 0014 	add.w	r0, r3, #20
   219ea:	4286      	cmp	r6, r0
   219ec:	4611      	mov	r1, r2
   219ee:	f102 0201 	add.w	r2, r2, #1
   219f2:	d2f7      	bcs.n	219e4 <_dtoa_r+0x76c>
   219f4:	6461      	str	r1, [r4, #68]	; 0x44
   219f6:	4620      	mov	r0, r4
   219f8:	f000 fe94 	bl	22724 <_Balloc>
   219fc:	2d0e      	cmp	r5, #14
   219fe:	9007      	str	r0, [sp, #28]
   21a00:	6420      	str	r0, [r4, #64]	; 0x40
   21a02:	f63f ad44 	bhi.w	2148e <_dtoa_r+0x216>
   21a06:	2f00      	cmp	r7, #0
   21a08:	f43f ad41 	beq.w	2148e <_dtoa_r+0x216>
   21a0c:	9904      	ldr	r1, [sp, #16]
   21a0e:	2900      	cmp	r1, #0
   21a10:	ed9d 7b00 	vldr	d7, [sp]
   21a14:	f340 81f6 	ble.w	21e04 <_dtoa_r+0xb8c>
   21a18:	4bb9      	ldr	r3, [pc, #740]	; (21d00 <_dtoa_r+0xa88>)
   21a1a:	f001 020f 	and.w	r2, r1, #15
   21a1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21a22:	110d      	asrs	r5, r1, #4
   21a24:	e9d3 6700 	ldrd	r6, r7, [r3]
   21a28:	06eb      	lsls	r3, r5, #27
   21a2a:	f140 81ad 	bpl.w	21d88 <_dtoa_r+0xb10>
   21a2e:	4bb5      	ldr	r3, [pc, #724]	; (21d04 <_dtoa_r+0xa8c>)
   21a30:	ec51 0b17 	vmov	r0, r1, d7
   21a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   21a38:	f7fa ff5a 	bl	1c8f0 <__aeabi_ddiv>
   21a3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   21a40:	f005 050f 	and.w	r5, r5, #15
   21a44:	f04f 0903 	mov.w	r9, #3
   21a48:	b18d      	cbz	r5, 21a6e <_dtoa_r+0x7f6>
   21a4a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 21d04 <_dtoa_r+0xa8c>
   21a4e:	07e8      	lsls	r0, r5, #31
   21a50:	d509      	bpl.n	21a66 <_dtoa_r+0x7ee>
   21a52:	4630      	mov	r0, r6
   21a54:	4639      	mov	r1, r7
   21a56:	e9d8 2300 	ldrd	r2, r3, [r8]
   21a5a:	f7fa fe1f 	bl	1c69c <__aeabi_dmul>
   21a5e:	f109 0901 	add.w	r9, r9, #1
   21a62:	4606      	mov	r6, r0
   21a64:	460f      	mov	r7, r1
   21a66:	106d      	asrs	r5, r5, #1
   21a68:	f108 0808 	add.w	r8, r8, #8
   21a6c:	d1ef      	bne.n	21a4e <_dtoa_r+0x7d6>
   21a6e:	463b      	mov	r3, r7
   21a70:	4632      	mov	r2, r6
   21a72:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21a76:	f7fa ff3b 	bl	1c8f0 <__aeabi_ddiv>
   21a7a:	4607      	mov	r7, r0
   21a7c:	4688      	mov	r8, r1
   21a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21a80:	b143      	cbz	r3, 21a94 <_dtoa_r+0x81c>
   21a82:	2200      	movs	r2, #0
   21a84:	4ba0      	ldr	r3, [pc, #640]	; (21d08 <_dtoa_r+0xa90>)
   21a86:	4638      	mov	r0, r7
   21a88:	4641      	mov	r1, r8
   21a8a:	f7fb f879 	bl	1cb80 <__aeabi_dcmplt>
   21a8e:	2800      	cmp	r0, #0
   21a90:	f040 8273 	bne.w	21f7a <_dtoa_r+0xd02>
   21a94:	4648      	mov	r0, r9
   21a96:	f7fa fd9b 	bl	1c5d0 <__aeabi_i2d>
   21a9a:	463a      	mov	r2, r7
   21a9c:	4643      	mov	r3, r8
   21a9e:	f7fa fdfd 	bl	1c69c <__aeabi_dmul>
   21aa2:	4b9a      	ldr	r3, [pc, #616]	; (21d0c <_dtoa_r+0xa94>)
   21aa4:	2200      	movs	r2, #0
   21aa6:	f7fa fc47 	bl	1c338 <__adddf3>
   21aaa:	9b08      	ldr	r3, [sp, #32]
   21aac:	4605      	mov	r5, r0
   21aae:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21ab2:	2b00      	cmp	r3, #0
   21ab4:	f000 8140 	beq.w	21d38 <_dtoa_r+0xac0>
   21ab8:	9b04      	ldr	r3, [sp, #16]
   21aba:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21abe:	9311      	str	r3, [sp, #68]	; 0x44
   21ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21ac2:	2b00      	cmp	r3, #0
   21ac4:	f000 81f6 	beq.w	21eb4 <_dtoa_r+0xc3c>
   21ac8:	4b8d      	ldr	r3, [pc, #564]	; (21d00 <_dtoa_r+0xa88>)
   21aca:	4991      	ldr	r1, [pc, #580]	; (21d10 <_dtoa_r+0xa98>)
   21acc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   21ad0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   21ad4:	2000      	movs	r0, #0
   21ad6:	f7fa ff0b 	bl	1c8f0 <__aeabi_ddiv>
   21ada:	462a      	mov	r2, r5
   21adc:	4633      	mov	r3, r6
   21ade:	f7fa fc29 	bl	1c334 <__aeabi_dsub>
   21ae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   21ae6:	4641      	mov	r1, r8
   21ae8:	4638      	mov	r0, r7
   21aea:	f7fb f871 	bl	1cbd0 <__aeabi_d2iz>
   21aee:	4605      	mov	r5, r0
   21af0:	f7fa fd6e 	bl	1c5d0 <__aeabi_i2d>
   21af4:	4602      	mov	r2, r0
   21af6:	460b      	mov	r3, r1
   21af8:	4638      	mov	r0, r7
   21afa:	4641      	mov	r1, r8
   21afc:	f7fa fc1a 	bl	1c334 <__aeabi_dsub>
   21b00:	3530      	adds	r5, #48	; 0x30
   21b02:	fa5f f885 	uxtb.w	r8, r5
   21b06:	9d07      	ldr	r5, [sp, #28]
   21b08:	4606      	mov	r6, r0
   21b0a:	460f      	mov	r7, r1
   21b0c:	f885 8000 	strb.w	r8, [r5]
   21b10:	4602      	mov	r2, r0
   21b12:	460b      	mov	r3, r1
   21b14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21b18:	3501      	adds	r5, #1
   21b1a:	f7fb f84f 	bl	1cbbc <__aeabi_dcmpgt>
   21b1e:	2800      	cmp	r0, #0
   21b20:	d156      	bne.n	21bd0 <_dtoa_r+0x958>
   21b22:	4632      	mov	r2, r6
   21b24:	463b      	mov	r3, r7
   21b26:	2000      	movs	r0, #0
   21b28:	4977      	ldr	r1, [pc, #476]	; (21d08 <_dtoa_r+0xa90>)
   21b2a:	f7fa fc03 	bl	1c334 <__aeabi_dsub>
   21b2e:	4602      	mov	r2, r0
   21b30:	460b      	mov	r3, r1
   21b32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21b36:	f7fb f841 	bl	1cbbc <__aeabi_dcmpgt>
   21b3a:	2800      	cmp	r0, #0
   21b3c:	f040 8262 	bne.w	22004 <_dtoa_r+0xd8c>
   21b40:	f1b9 0f01 	cmp.w	r9, #1
   21b44:	f43f aca3 	beq.w	2148e <_dtoa_r+0x216>
   21b48:	9b07      	ldr	r3, [sp, #28]
   21b4a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   21b4e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   21b52:	4499      	add	r9, r3
   21b54:	46a0      	mov	r8, r4
   21b56:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   21b5a:	e00d      	b.n	21b78 <_dtoa_r+0x900>
   21b5c:	2000      	movs	r0, #0
   21b5e:	496a      	ldr	r1, [pc, #424]	; (21d08 <_dtoa_r+0xa90>)
   21b60:	f7fa fbe8 	bl	1c334 <__aeabi_dsub>
   21b64:	4652      	mov	r2, sl
   21b66:	465b      	mov	r3, fp
   21b68:	f7fb f80a 	bl	1cb80 <__aeabi_dcmplt>
   21b6c:	2800      	cmp	r0, #0
   21b6e:	f040 8244 	bne.w	21ffa <_dtoa_r+0xd82>
   21b72:	454d      	cmp	r5, r9
   21b74:	f000 824a 	beq.w	2200c <_dtoa_r+0xd94>
   21b78:	4650      	mov	r0, sl
   21b7a:	4659      	mov	r1, fp
   21b7c:	2200      	movs	r2, #0
   21b7e:	4b65      	ldr	r3, [pc, #404]	; (21d14 <_dtoa_r+0xa9c>)
   21b80:	f7fa fd8c 	bl	1c69c <__aeabi_dmul>
   21b84:	2200      	movs	r2, #0
   21b86:	4b63      	ldr	r3, [pc, #396]	; (21d14 <_dtoa_r+0xa9c>)
   21b88:	4682      	mov	sl, r0
   21b8a:	468b      	mov	fp, r1
   21b8c:	4630      	mov	r0, r6
   21b8e:	4639      	mov	r1, r7
   21b90:	f7fa fd84 	bl	1c69c <__aeabi_dmul>
   21b94:	460f      	mov	r7, r1
   21b96:	4606      	mov	r6, r0
   21b98:	f7fb f81a 	bl	1cbd0 <__aeabi_d2iz>
   21b9c:	4604      	mov	r4, r0
   21b9e:	f7fa fd17 	bl	1c5d0 <__aeabi_i2d>
   21ba2:	4602      	mov	r2, r0
   21ba4:	460b      	mov	r3, r1
   21ba6:	4630      	mov	r0, r6
   21ba8:	4639      	mov	r1, r7
   21baa:	f7fa fbc3 	bl	1c334 <__aeabi_dsub>
   21bae:	3430      	adds	r4, #48	; 0x30
   21bb0:	b2e4      	uxtb	r4, r4
   21bb2:	4652      	mov	r2, sl
   21bb4:	465b      	mov	r3, fp
   21bb6:	f805 4b01 	strb.w	r4, [r5], #1
   21bba:	4606      	mov	r6, r0
   21bbc:	460f      	mov	r7, r1
   21bbe:	f7fa ffdf 	bl	1cb80 <__aeabi_dcmplt>
   21bc2:	4632      	mov	r2, r6
   21bc4:	463b      	mov	r3, r7
   21bc6:	2800      	cmp	r0, #0
   21bc8:	d0c8      	beq.n	21b5c <_dtoa_r+0x8e4>
   21bca:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21bce:	4644      	mov	r4, r8
   21bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21bd2:	9304      	str	r3, [sp, #16]
   21bd4:	e51c      	b.n	21610 <_dtoa_r+0x398>
   21bd6:	2300      	movs	r3, #0
   21bd8:	9309      	str	r3, [sp, #36]	; 0x24
   21bda:	f1bb 0f00 	cmp.w	fp, #0
   21bde:	f340 80da 	ble.w	21d96 <_dtoa_r+0xb1e>
   21be2:	465e      	mov	r6, fp
   21be4:	465d      	mov	r5, fp
   21be6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   21bea:	f8cd b020 	str.w	fp, [sp, #32]
   21bee:	e6f3      	b.n	219d8 <_dtoa_r+0x760>
   21bf0:	2301      	movs	r3, #1
   21bf2:	9309      	str	r3, [sp, #36]	; 0x24
   21bf4:	e7f1      	b.n	21bda <_dtoa_r+0x962>
   21bf6:	9b00      	ldr	r3, [sp, #0]
   21bf8:	2b00      	cmp	r3, #0
   21bfa:	f47f ada1 	bne.w	21740 <_dtoa_r+0x4c8>
   21bfe:	e9dd 1200 	ldrd	r1, r2, [sp]
   21c02:	f3c2 0313 	ubfx	r3, r2, #0, #20
   21c06:	2b00      	cmp	r3, #0
   21c08:	f47f adb4 	bne.w	21774 <_dtoa_r+0x4fc>
   21c0c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   21c10:	0d3f      	lsrs	r7, r7, #20
   21c12:	053f      	lsls	r7, r7, #20
   21c14:	2f00      	cmp	r7, #0
   21c16:	f000 8200 	beq.w	2201a <_dtoa_r+0xda2>
   21c1a:	9b06      	ldr	r3, [sp, #24]
   21c1c:	3301      	adds	r3, #1
   21c1e:	9306      	str	r3, [sp, #24]
   21c20:	9b05      	ldr	r3, [sp, #20]
   21c22:	3301      	adds	r3, #1
   21c24:	9305      	str	r3, [sp, #20]
   21c26:	f04f 0801 	mov.w	r8, #1
   21c2a:	e5a5      	b.n	21778 <_dtoa_r+0x500>
   21c2c:	9b08      	ldr	r3, [sp, #32]
   21c2e:	2b00      	cmp	r3, #0
   21c30:	f73f ac3e 	bgt.w	214b0 <_dtoa_r+0x238>
   21c34:	f040 8099 	bne.w	21d6a <_dtoa_r+0xaf2>
   21c38:	4649      	mov	r1, r9
   21c3a:	2200      	movs	r2, #0
   21c3c:	4b36      	ldr	r3, [pc, #216]	; (21d18 <_dtoa_r+0xaa0>)
   21c3e:	4640      	mov	r0, r8
   21c40:	f7fa fd2c 	bl	1c69c <__aeabi_dmul>
   21c44:	e9dd 2300 	ldrd	r2, r3, [sp]
   21c48:	f7fa ffae 	bl	1cba8 <__aeabi_dcmpge>
   21c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21c50:	464e      	mov	r6, r9
   21c52:	2800      	cmp	r0, #0
   21c54:	d03e      	beq.n	21cd4 <_dtoa_r+0xa5c>
   21c56:	ea6f 030b 	mvn.w	r3, fp
   21c5a:	9d07      	ldr	r5, [sp, #28]
   21c5c:	9304      	str	r3, [sp, #16]
   21c5e:	4649      	mov	r1, r9
   21c60:	4620      	mov	r0, r4
   21c62:	f000 fd85 	bl	22770 <_Bfree>
   21c66:	2e00      	cmp	r6, #0
   21c68:	f43f acd2 	beq.w	21610 <_dtoa_r+0x398>
   21c6c:	e6a3      	b.n	219b6 <_dtoa_r+0x73e>
   21c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21c70:	4651      	mov	r1, sl
   21c72:	4620      	mov	r0, r4
   21c74:	f000 feb2 	bl	229dc <__pow5mult>
   21c78:	4682      	mov	sl, r0
   21c7a:	e54f      	b.n	2171c <_dtoa_r+0x4a4>
   21c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   21c7e:	2a00      	cmp	r2, #0
   21c80:	f000 816f 	beq.w	21f62 <_dtoa_r+0xcea>
   21c84:	f203 4333 	addw	r3, r3, #1075	; 0x433
   21c88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21c8a:	9d06      	ldr	r5, [sp, #24]
   21c8c:	e4e7      	b.n	2165e <_dtoa_r+0x3e6>
   21c8e:	9b00      	ldr	r3, [sp, #0]
   21c90:	2b00      	cmp	r3, #0
   21c92:	f47f ad6f 	bne.w	21774 <_dtoa_r+0x4fc>
   21c96:	e7b2      	b.n	21bfe <_dtoa_r+0x986>
   21c98:	f000 fd74 	bl	22784 <__multadd>
   21c9c:	465f      	mov	r7, fp
   21c9e:	4606      	mov	r6, r0
   21ca0:	4680      	mov	r8, r0
   21ca2:	e5b6      	b.n	21812 <_dtoa_r+0x59a>
   21ca4:	4620      	mov	r0, r4
   21ca6:	f000 fd63 	bl	22770 <_Bfree>
   21caa:	2201      	movs	r2, #1
   21cac:	e5db      	b.n	21866 <_dtoa_r+0x5ee>
   21cae:	9b02      	ldr	r3, [sp, #8]
   21cb0:	2b02      	cmp	r3, #2
   21cb2:	f77f ad93 	ble.w	217dc <_dtoa_r+0x564>
   21cb6:	9b08      	ldr	r3, [sp, #32]
   21cb8:	2b00      	cmp	r3, #0
   21cba:	d1cc      	bne.n	21c56 <_dtoa_r+0x9de>
   21cbc:	4649      	mov	r1, r9
   21cbe:	2205      	movs	r2, #5
   21cc0:	4620      	mov	r0, r4
   21cc2:	f000 fd5f 	bl	22784 <__multadd>
   21cc6:	4601      	mov	r1, r0
   21cc8:	4681      	mov	r9, r0
   21cca:	4650      	mov	r0, sl
   21ccc:	f000 ff28 	bl	22b20 <__mcmp>
   21cd0:	2800      	cmp	r0, #0
   21cd2:	ddc0      	ble.n	21c56 <_dtoa_r+0x9de>
   21cd4:	9a04      	ldr	r2, [sp, #16]
   21cd6:	9907      	ldr	r1, [sp, #28]
   21cd8:	2331      	movs	r3, #49	; 0x31
   21cda:	3201      	adds	r2, #1
   21cdc:	9204      	str	r2, [sp, #16]
   21cde:	700b      	strb	r3, [r1, #0]
   21ce0:	1c4d      	adds	r5, r1, #1
   21ce2:	e7bc      	b.n	21c5e <_dtoa_r+0x9e6>
   21ce4:	9a04      	ldr	r2, [sp, #16]
   21ce6:	3201      	adds	r2, #1
   21ce8:	9204      	str	r2, [sp, #16]
   21cea:	9a07      	ldr	r2, [sp, #28]
   21cec:	2331      	movs	r3, #49	; 0x31
   21cee:	7013      	strb	r3, [r2, #0]
   21cf0:	e651      	b.n	21996 <_dtoa_r+0x71e>
   21cf2:	2301      	movs	r3, #1
   21cf4:	9309      	str	r3, [sp, #36]	; 0x24
   21cf6:	e665      	b.n	219c4 <_dtoa_r+0x74c>
   21cf8:	f8dd a000 	ldr.w	sl, [sp]
   21cfc:	9c02      	ldr	r4, [sp, #8]
   21cfe:	e487      	b.n	21610 <_dtoa_r+0x398>
   21d00:	000259f8 	.word	0x000259f8
   21d04:	000259d0 	.word	0x000259d0
   21d08:	3ff00000 	.word	0x3ff00000
   21d0c:	401c0000 	.word	0x401c0000
   21d10:	3fe00000 	.word	0x3fe00000
   21d14:	40240000 	.word	0x40240000
   21d18:	40140000 	.word	0x40140000
   21d1c:	4648      	mov	r0, r9
   21d1e:	f7fa fc57 	bl	1c5d0 <__aeabi_i2d>
   21d22:	463a      	mov	r2, r7
   21d24:	4643      	mov	r3, r8
   21d26:	f7fa fcb9 	bl	1c69c <__aeabi_dmul>
   21d2a:	2200      	movs	r2, #0
   21d2c:	4bc4      	ldr	r3, [pc, #784]	; (22040 <_dtoa_r+0xdc8>)
   21d2e:	f7fa fb03 	bl	1c338 <__adddf3>
   21d32:	4605      	mov	r5, r0
   21d34:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21d38:	4641      	mov	r1, r8
   21d3a:	2200      	movs	r2, #0
   21d3c:	4bc1      	ldr	r3, [pc, #772]	; (22044 <_dtoa_r+0xdcc>)
   21d3e:	4638      	mov	r0, r7
   21d40:	f7fa faf8 	bl	1c334 <__aeabi_dsub>
   21d44:	462a      	mov	r2, r5
   21d46:	4633      	mov	r3, r6
   21d48:	4680      	mov	r8, r0
   21d4a:	4689      	mov	r9, r1
   21d4c:	f7fa ff36 	bl	1cbbc <__aeabi_dcmpgt>
   21d50:	2800      	cmp	r0, #0
   21d52:	f040 80ab 	bne.w	21eac <_dtoa_r+0xc34>
   21d56:	462a      	mov	r2, r5
   21d58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   21d5c:	4640      	mov	r0, r8
   21d5e:	4649      	mov	r1, r9
   21d60:	f7fa ff0e 	bl	1cb80 <__aeabi_dcmplt>
   21d64:	2800      	cmp	r0, #0
   21d66:	f43f ab92 	beq.w	2148e <_dtoa_r+0x216>
   21d6a:	f04f 0900 	mov.w	r9, #0
   21d6e:	464e      	mov	r6, r9
   21d70:	e771      	b.n	21c56 <_dtoa_r+0x9de>
   21d72:	9807      	ldr	r0, [sp, #28]
   21d74:	f7ff bab8 	b.w	212e8 <_dtoa_r+0x70>
   21d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21d7c:	970a      	str	r7, [sp, #40]	; 0x28
   21d7e:	1afb      	subs	r3, r7, r3
   21d80:	441a      	add	r2, r3
   21d82:	920b      	str	r2, [sp, #44]	; 0x2c
   21d84:	2700      	movs	r7, #0
   21d86:	e464      	b.n	21652 <_dtoa_r+0x3da>
   21d88:	ed9d 7b00 	vldr	d7, [sp]
   21d8c:	f04f 0902 	mov.w	r9, #2
   21d90:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   21d94:	e658      	b.n	21a48 <_dtoa_r+0x7d0>
   21d96:	2100      	movs	r1, #0
   21d98:	6461      	str	r1, [r4, #68]	; 0x44
   21d9a:	4620      	mov	r0, r4
   21d9c:	f000 fcc2 	bl	22724 <_Balloc>
   21da0:	f04f 0b01 	mov.w	fp, #1
   21da4:	9007      	str	r0, [sp, #28]
   21da6:	6420      	str	r0, [r4, #64]	; 0x40
   21da8:	f8cd b020 	str.w	fp, [sp, #32]
   21dac:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   21db0:	e629      	b.n	21a06 <_dtoa_r+0x78e>
   21db2:	2a00      	cmp	r2, #0
   21db4:	dd12      	ble.n	21ddc <_dtoa_r+0xb64>
   21db6:	4651      	mov	r1, sl
   21db8:	2201      	movs	r2, #1
   21dba:	4620      	mov	r0, r4
   21dbc:	f000 fe5e 	bl	22a7c <__lshift>
   21dc0:	4649      	mov	r1, r9
   21dc2:	4682      	mov	sl, r0
   21dc4:	f000 feac 	bl	22b20 <__mcmp>
   21dc8:	2800      	cmp	r0, #0
   21dca:	f340 8131 	ble.w	22030 <_dtoa_r+0xdb8>
   21dce:	9b00      	ldr	r3, [sp, #0]
   21dd0:	2b39      	cmp	r3, #57	; 0x39
   21dd2:	f000 80f7 	beq.w	21fc4 <_dtoa_r+0xd4c>
   21dd6:	f105 0331 	add.w	r3, r5, #49	; 0x31
   21dda:	9300      	str	r3, [sp, #0]
   21ddc:	f89d 3000 	ldrb.w	r3, [sp]
   21de0:	703b      	strb	r3, [r7, #0]
   21de2:	46b3      	mov	fp, r6
   21de4:	1c7d      	adds	r5, r7, #1
   21de6:	4646      	mov	r6, r8
   21de8:	e5d5      	b.n	21996 <_dtoa_r+0x71e>
   21dea:	d104      	bne.n	21df6 <_dtoa_r+0xb7e>
   21dec:	9b00      	ldr	r3, [sp, #0]
   21dee:	07db      	lsls	r3, r3, #31
   21df0:	d501      	bpl.n	21df6 <_dtoa_r+0xb7e>
   21df2:	e5c0      	b.n	21976 <_dtoa_r+0x6fe>
   21df4:	4615      	mov	r5, r2
   21df6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   21dfa:	2b30      	cmp	r3, #48	; 0x30
   21dfc:	f105 32ff 	add.w	r2, r5, #4294967295
   21e00:	d0f8      	beq.n	21df4 <_dtoa_r+0xb7c>
   21e02:	e5c8      	b.n	21996 <_dtoa_r+0x71e>
   21e04:	f000 80b4 	beq.w	21f70 <_dtoa_r+0xcf8>
   21e08:	9b04      	ldr	r3, [sp, #16]
   21e0a:	425d      	negs	r5, r3
   21e0c:	4b8e      	ldr	r3, [pc, #568]	; (22048 <_dtoa_r+0xdd0>)
   21e0e:	f005 020f 	and.w	r2, r5, #15
   21e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   21e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
   21e1e:	f7fa fc3d 	bl	1c69c <__aeabi_dmul>
   21e22:	112d      	asrs	r5, r5, #4
   21e24:	4607      	mov	r7, r0
   21e26:	4688      	mov	r8, r1
   21e28:	f000 8128 	beq.w	2207c <_dtoa_r+0xe04>
   21e2c:	4e87      	ldr	r6, [pc, #540]	; (2204c <_dtoa_r+0xdd4>)
   21e2e:	f04f 0902 	mov.w	r9, #2
   21e32:	07e9      	lsls	r1, r5, #31
   21e34:	d509      	bpl.n	21e4a <_dtoa_r+0xbd2>
   21e36:	4638      	mov	r0, r7
   21e38:	4641      	mov	r1, r8
   21e3a:	e9d6 2300 	ldrd	r2, r3, [r6]
   21e3e:	f7fa fc2d 	bl	1c69c <__aeabi_dmul>
   21e42:	f109 0901 	add.w	r9, r9, #1
   21e46:	4607      	mov	r7, r0
   21e48:	4688      	mov	r8, r1
   21e4a:	106d      	asrs	r5, r5, #1
   21e4c:	f106 0608 	add.w	r6, r6, #8
   21e50:	d1ef      	bne.n	21e32 <_dtoa_r+0xbba>
   21e52:	e614      	b.n	21a7e <_dtoa_r+0x806>
   21e54:	9907      	ldr	r1, [sp, #28]
   21e56:	2230      	movs	r2, #48	; 0x30
   21e58:	700a      	strb	r2, [r1, #0]
   21e5a:	9a04      	ldr	r2, [sp, #16]
   21e5c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21e60:	3201      	adds	r2, #1
   21e62:	9204      	str	r2, [sp, #16]
   21e64:	f7ff bbd0 	b.w	21608 <_dtoa_r+0x390>
   21e68:	6871      	ldr	r1, [r6, #4]
   21e6a:	4620      	mov	r0, r4
   21e6c:	f000 fc5a 	bl	22724 <_Balloc>
   21e70:	6933      	ldr	r3, [r6, #16]
   21e72:	3302      	adds	r3, #2
   21e74:	009a      	lsls	r2, r3, #2
   21e76:	4605      	mov	r5, r0
   21e78:	f106 010c 	add.w	r1, r6, #12
   21e7c:	300c      	adds	r0, #12
   21e7e:	f7fc ffdf 	bl	1ee40 <memcpy>
   21e82:	4629      	mov	r1, r5
   21e84:	2201      	movs	r2, #1
   21e86:	4620      	mov	r0, r4
   21e88:	f000 fdf8 	bl	22a7c <__lshift>
   21e8c:	4680      	mov	r8, r0
   21e8e:	e4b6      	b.n	217fe <_dtoa_r+0x586>
   21e90:	9b00      	ldr	r3, [sp, #0]
   21e92:	2b39      	cmp	r3, #57	; 0x39
   21e94:	f000 8096 	beq.w	21fc4 <_dtoa_r+0xd4c>
   21e98:	9b00      	ldr	r3, [sp, #0]
   21e9a:	3301      	adds	r3, #1
   21e9c:	46b3      	mov	fp, r6
   21e9e:	703b      	strb	r3, [r7, #0]
   21ea0:	1c7d      	adds	r5, r7, #1
   21ea2:	4646      	mov	r6, r8
   21ea4:	e577      	b.n	21996 <_dtoa_r+0x71e>
   21ea6:	46b3      	mov	fp, r6
   21ea8:	4646      	mov	r6, r8
   21eaa:	e558      	b.n	2195e <_dtoa_r+0x6e6>
   21eac:	f04f 0900 	mov.w	r9, #0
   21eb0:	464e      	mov	r6, r9
   21eb2:	e70f      	b.n	21cd4 <_dtoa_r+0xa5c>
   21eb4:	4964      	ldr	r1, [pc, #400]	; (22048 <_dtoa_r+0xdd0>)
   21eb6:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   21eba:	462a      	mov	r2, r5
   21ebc:	4633      	mov	r3, r6
   21ebe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21ec2:	f7fa fbeb 	bl	1c69c <__aeabi_dmul>
   21ec6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   21eca:	4638      	mov	r0, r7
   21ecc:	4641      	mov	r1, r8
   21ece:	f7fa fe7f 	bl	1cbd0 <__aeabi_d2iz>
   21ed2:	4605      	mov	r5, r0
   21ed4:	f7fa fb7c 	bl	1c5d0 <__aeabi_i2d>
   21ed8:	4602      	mov	r2, r0
   21eda:	460b      	mov	r3, r1
   21edc:	4638      	mov	r0, r7
   21ede:	4641      	mov	r1, r8
   21ee0:	f7fa fa28 	bl	1c334 <__aeabi_dsub>
   21ee4:	9a07      	ldr	r2, [sp, #28]
   21ee6:	3530      	adds	r5, #48	; 0x30
   21ee8:	f1b9 0f01 	cmp.w	r9, #1
   21eec:	7015      	strb	r5, [r2, #0]
   21eee:	4606      	mov	r6, r0
   21ef0:	460f      	mov	r7, r1
   21ef2:	f102 0501 	add.w	r5, r2, #1
   21ef6:	d01c      	beq.n	21f32 <_dtoa_r+0xcba>
   21ef8:	9b07      	ldr	r3, [sp, #28]
   21efa:	4499      	add	r9, r3
   21efc:	2200      	movs	r2, #0
   21efe:	4b54      	ldr	r3, [pc, #336]	; (22050 <_dtoa_r+0xdd8>)
   21f00:	4630      	mov	r0, r6
   21f02:	4639      	mov	r1, r7
   21f04:	f7fa fbca 	bl	1c69c <__aeabi_dmul>
   21f08:	460f      	mov	r7, r1
   21f0a:	4606      	mov	r6, r0
   21f0c:	f7fa fe60 	bl	1cbd0 <__aeabi_d2iz>
   21f10:	4680      	mov	r8, r0
   21f12:	f7fa fb5d 	bl	1c5d0 <__aeabi_i2d>
   21f16:	f108 0830 	add.w	r8, r8, #48	; 0x30
   21f1a:	4602      	mov	r2, r0
   21f1c:	460b      	mov	r3, r1
   21f1e:	4630      	mov	r0, r6
   21f20:	4639      	mov	r1, r7
   21f22:	f7fa fa07 	bl	1c334 <__aeabi_dsub>
   21f26:	f805 8b01 	strb.w	r8, [r5], #1
   21f2a:	454d      	cmp	r5, r9
   21f2c:	4606      	mov	r6, r0
   21f2e:	460f      	mov	r7, r1
   21f30:	d1e4      	bne.n	21efc <_dtoa_r+0xc84>
   21f32:	2200      	movs	r2, #0
   21f34:	4b47      	ldr	r3, [pc, #284]	; (22054 <_dtoa_r+0xddc>)
   21f36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21f3a:	f7fa f9fd 	bl	1c338 <__adddf3>
   21f3e:	4632      	mov	r2, r6
   21f40:	463b      	mov	r3, r7
   21f42:	f7fa fe1d 	bl	1cb80 <__aeabi_dcmplt>
   21f46:	2800      	cmp	r0, #0
   21f48:	d042      	beq.n	21fd0 <_dtoa_r+0xd58>
   21f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21f4c:	9304      	str	r3, [sp, #16]
   21f4e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21f52:	f7ff bb4c 	b.w	215ee <_dtoa_r+0x376>
   21f56:	9b06      	ldr	r3, [sp, #24]
   21f58:	9a08      	ldr	r2, [sp, #32]
   21f5a:	1a9d      	subs	r5, r3, r2
   21f5c:	2300      	movs	r3, #0
   21f5e:	f7ff bb7e 	b.w	2165e <_dtoa_r+0x3e6>
   21f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21f64:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21f66:	9d06      	ldr	r5, [sp, #24]
   21f68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   21f6c:	f7ff bb77 	b.w	2165e <_dtoa_r+0x3e6>
   21f70:	e9dd 7800 	ldrd	r7, r8, [sp]
   21f74:	f04f 0902 	mov.w	r9, #2
   21f78:	e581      	b.n	21a7e <_dtoa_r+0x806>
   21f7a:	9b08      	ldr	r3, [sp, #32]
   21f7c:	2b00      	cmp	r3, #0
   21f7e:	f43f aecd 	beq.w	21d1c <_dtoa_r+0xaa4>
   21f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21f84:	2b00      	cmp	r3, #0
   21f86:	f77f aa82 	ble.w	2148e <_dtoa_r+0x216>
   21f8a:	2200      	movs	r2, #0
   21f8c:	4b30      	ldr	r3, [pc, #192]	; (22050 <_dtoa_r+0xdd8>)
   21f8e:	4638      	mov	r0, r7
   21f90:	4641      	mov	r1, r8
   21f92:	f7fa fb83 	bl	1c69c <__aeabi_dmul>
   21f96:	4607      	mov	r7, r0
   21f98:	4688      	mov	r8, r1
   21f9a:	f109 0001 	add.w	r0, r9, #1
   21f9e:	f7fa fb17 	bl	1c5d0 <__aeabi_i2d>
   21fa2:	463a      	mov	r2, r7
   21fa4:	4643      	mov	r3, r8
   21fa6:	f7fa fb79 	bl	1c69c <__aeabi_dmul>
   21faa:	2200      	movs	r2, #0
   21fac:	4b24      	ldr	r3, [pc, #144]	; (22040 <_dtoa_r+0xdc8>)
   21fae:	f7fa f9c3 	bl	1c338 <__adddf3>
   21fb2:	9a04      	ldr	r2, [sp, #16]
   21fb4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   21fb8:	3a01      	subs	r2, #1
   21fba:	4605      	mov	r5, r0
   21fbc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21fc0:	9211      	str	r2, [sp, #68]	; 0x44
   21fc2:	e57d      	b.n	21ac0 <_dtoa_r+0x848>
   21fc4:	2239      	movs	r2, #57	; 0x39
   21fc6:	46b3      	mov	fp, r6
   21fc8:	703a      	strb	r2, [r7, #0]
   21fca:	4646      	mov	r6, r8
   21fcc:	1c7d      	adds	r5, r7, #1
   21fce:	e4d4      	b.n	2197a <_dtoa_r+0x702>
   21fd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21fd4:	2000      	movs	r0, #0
   21fd6:	491f      	ldr	r1, [pc, #124]	; (22054 <_dtoa_r+0xddc>)
   21fd8:	f7fa f9ac 	bl	1c334 <__aeabi_dsub>
   21fdc:	4632      	mov	r2, r6
   21fde:	463b      	mov	r3, r7
   21fe0:	f7fa fdec 	bl	1cbbc <__aeabi_dcmpgt>
   21fe4:	b910      	cbnz	r0, 21fec <_dtoa_r+0xd74>
   21fe6:	f7ff ba52 	b.w	2148e <_dtoa_r+0x216>
   21fea:	4615      	mov	r5, r2
   21fec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   21ff0:	2b30      	cmp	r3, #48	; 0x30
   21ff2:	f105 32ff 	add.w	r2, r5, #4294967295
   21ff6:	d0f8      	beq.n	21fea <_dtoa_r+0xd72>
   21ff8:	e5ea      	b.n	21bd0 <_dtoa_r+0x958>
   21ffa:	4643      	mov	r3, r8
   21ffc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   22000:	46a0      	mov	r8, r4
   22002:	461c      	mov	r4, r3
   22004:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22006:	9304      	str	r3, [sp, #16]
   22008:	f7ff baf1 	b.w	215ee <_dtoa_r+0x376>
   2200c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   22010:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   22014:	4644      	mov	r4, r8
   22016:	f7ff ba3a 	b.w	2148e <_dtoa_r+0x216>
   2201a:	46b8      	mov	r8, r7
   2201c:	f7ff bbac 	b.w	21778 <_dtoa_r+0x500>
   22020:	9b00      	ldr	r3, [sp, #0]
   22022:	2b39      	cmp	r3, #57	; 0x39
   22024:	d0ce      	beq.n	21fc4 <_dtoa_r+0xd4c>
   22026:	f1bb 0f00 	cmp.w	fp, #0
   2202a:	f73f aed4 	bgt.w	21dd6 <_dtoa_r+0xb5e>
   2202e:	e6d5      	b.n	21ddc <_dtoa_r+0xb64>
   22030:	f47f aed4 	bne.w	21ddc <_dtoa_r+0xb64>
   22034:	9b00      	ldr	r3, [sp, #0]
   22036:	07da      	lsls	r2, r3, #31
   22038:	f57f aed0 	bpl.w	21ddc <_dtoa_r+0xb64>
   2203c:	e6c7      	b.n	21dce <_dtoa_r+0xb56>
   2203e:	bf00      	nop
   22040:	401c0000 	.word	0x401c0000
   22044:	40140000 	.word	0x40140000
   22048:	000259f8 	.word	0x000259f8
   2204c:	000259d0 	.word	0x000259d0
   22050:	40240000 	.word	0x40240000
   22054:	3fe00000 	.word	0x3fe00000
   22058:	4631      	mov	r1, r6
   2205a:	2300      	movs	r3, #0
   2205c:	220a      	movs	r2, #10
   2205e:	4620      	mov	r0, r4
   22060:	f000 fb90 	bl	22784 <__multadd>
   22064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22066:	2b00      	cmp	r3, #0
   22068:	4606      	mov	r6, r0
   2206a:	dd0a      	ble.n	22082 <_dtoa_r+0xe0a>
   2206c:	9308      	str	r3, [sp, #32]
   2206e:	f7ff bbb9 	b.w	217e4 <_dtoa_r+0x56c>
   22072:	9b02      	ldr	r3, [sp, #8]
   22074:	2b02      	cmp	r3, #2
   22076:	dc22      	bgt.n	220be <_dtoa_r+0xe46>
   22078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2207a:	e44a      	b.n	21912 <_dtoa_r+0x69a>
   2207c:	f04f 0902 	mov.w	r9, #2
   22080:	e4fd      	b.n	21a7e <_dtoa_r+0x806>
   22082:	9b02      	ldr	r3, [sp, #8]
   22084:	2b02      	cmp	r3, #2
   22086:	dc1a      	bgt.n	220be <_dtoa_r+0xe46>
   22088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2208a:	e7ef      	b.n	2206c <_dtoa_r+0xdf4>
   2208c:	2500      	movs	r5, #0
   2208e:	6465      	str	r5, [r4, #68]	; 0x44
   22090:	4629      	mov	r1, r5
   22092:	4620      	mov	r0, r4
   22094:	f000 fb46 	bl	22724 <_Balloc>
   22098:	f04f 33ff 	mov.w	r3, #4294967295
   2209c:	9308      	str	r3, [sp, #32]
   2209e:	930d      	str	r3, [sp, #52]	; 0x34
   220a0:	2301      	movs	r3, #1
   220a2:	9007      	str	r0, [sp, #28]
   220a4:	46ab      	mov	fp, r5
   220a6:	6420      	str	r0, [r4, #64]	; 0x40
   220a8:	9309      	str	r3, [sp, #36]	; 0x24
   220aa:	f7ff b9f0 	b.w	2148e <_dtoa_r+0x216>
   220ae:	f43f ab7b 	beq.w	217a8 <_dtoa_r+0x530>
   220b2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   220b6:	e40b      	b.n	218d0 <_dtoa_r+0x658>
   220b8:	2701      	movs	r7, #1
   220ba:	f7ff b9af 	b.w	2141c <_dtoa_r+0x1a4>
   220be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   220c0:	9308      	str	r3, [sp, #32]
   220c2:	e5f8      	b.n	21cb6 <_dtoa_r+0xa3e>

000220c4 <__sflush_r>:
   220c4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   220c8:	b29a      	uxth	r2, r3
   220ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220ce:	460d      	mov	r5, r1
   220d0:	0711      	lsls	r1, r2, #28
   220d2:	4680      	mov	r8, r0
   220d4:	d43a      	bmi.n	2214c <__sflush_r+0x88>
   220d6:	686a      	ldr	r2, [r5, #4]
   220d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   220dc:	2a00      	cmp	r2, #0
   220de:	81ab      	strh	r3, [r5, #12]
   220e0:	dd6f      	ble.n	221c2 <__sflush_r+0xfe>
   220e2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   220e4:	2c00      	cmp	r4, #0
   220e6:	d049      	beq.n	2217c <__sflush_r+0xb8>
   220e8:	2200      	movs	r2, #0
   220ea:	b29b      	uxth	r3, r3
   220ec:	f8d8 6000 	ldr.w	r6, [r8]
   220f0:	f8c8 2000 	str.w	r2, [r8]
   220f4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   220f8:	d067      	beq.n	221ca <__sflush_r+0x106>
   220fa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   220fc:	075f      	lsls	r7, r3, #29
   220fe:	d505      	bpl.n	2210c <__sflush_r+0x48>
   22100:	6869      	ldr	r1, [r5, #4]
   22102:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   22104:	1a52      	subs	r2, r2, r1
   22106:	b10b      	cbz	r3, 2210c <__sflush_r+0x48>
   22108:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2210a:	1ad2      	subs	r2, r2, r3
   2210c:	2300      	movs	r3, #0
   2210e:	69e9      	ldr	r1, [r5, #28]
   22110:	4640      	mov	r0, r8
   22112:	47a0      	blx	r4
   22114:	1c44      	adds	r4, r0, #1
   22116:	d03c      	beq.n	22192 <__sflush_r+0xce>
   22118:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   2211c:	692a      	ldr	r2, [r5, #16]
   2211e:	602a      	str	r2, [r5, #0]
   22120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   22124:	2200      	movs	r2, #0
   22126:	81ab      	strh	r3, [r5, #12]
   22128:	04db      	lsls	r3, r3, #19
   2212a:	606a      	str	r2, [r5, #4]
   2212c:	d447      	bmi.n	221be <__sflush_r+0xfa>
   2212e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   22130:	f8c8 6000 	str.w	r6, [r8]
   22134:	b311      	cbz	r1, 2217c <__sflush_r+0xb8>
   22136:	f105 0340 	add.w	r3, r5, #64	; 0x40
   2213a:	4299      	cmp	r1, r3
   2213c:	d002      	beq.n	22144 <__sflush_r+0x80>
   2213e:	4640      	mov	r0, r8
   22140:	f000 f95a 	bl	223f8 <_free_r>
   22144:	2000      	movs	r0, #0
   22146:	6328      	str	r0, [r5, #48]	; 0x30
   22148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2214c:	692e      	ldr	r6, [r5, #16]
   2214e:	b1ae      	cbz	r6, 2217c <__sflush_r+0xb8>
   22150:	682c      	ldr	r4, [r5, #0]
   22152:	602e      	str	r6, [r5, #0]
   22154:	0791      	lsls	r1, r2, #30
   22156:	bf0c      	ite	eq
   22158:	696b      	ldreq	r3, [r5, #20]
   2215a:	2300      	movne	r3, #0
   2215c:	1ba4      	subs	r4, r4, r6
   2215e:	60ab      	str	r3, [r5, #8]
   22160:	e00a      	b.n	22178 <__sflush_r+0xb4>
   22162:	4623      	mov	r3, r4
   22164:	4632      	mov	r2, r6
   22166:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   22168:	69e9      	ldr	r1, [r5, #28]
   2216a:	4640      	mov	r0, r8
   2216c:	47b8      	blx	r7
   2216e:	2800      	cmp	r0, #0
   22170:	eba4 0400 	sub.w	r4, r4, r0
   22174:	4406      	add	r6, r0
   22176:	dd04      	ble.n	22182 <__sflush_r+0xbe>
   22178:	2c00      	cmp	r4, #0
   2217a:	dcf2      	bgt.n	22162 <__sflush_r+0x9e>
   2217c:	2000      	movs	r0, #0
   2217e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22182:	89ab      	ldrh	r3, [r5, #12]
   22184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22188:	81ab      	strh	r3, [r5, #12]
   2218a:	f04f 30ff 	mov.w	r0, #4294967295
   2218e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22192:	f8d8 4000 	ldr.w	r4, [r8]
   22196:	2c1d      	cmp	r4, #29
   22198:	d8f3      	bhi.n	22182 <__sflush_r+0xbe>
   2219a:	4b19      	ldr	r3, [pc, #100]	; (22200 <__sflush_r+0x13c>)
   2219c:	40e3      	lsrs	r3, r4
   2219e:	43db      	mvns	r3, r3
   221a0:	f013 0301 	ands.w	r3, r3, #1
   221a4:	d1ed      	bne.n	22182 <__sflush_r+0xbe>
   221a6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   221aa:	606b      	str	r3, [r5, #4]
   221ac:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   221b0:	6929      	ldr	r1, [r5, #16]
   221b2:	81ab      	strh	r3, [r5, #12]
   221b4:	04da      	lsls	r2, r3, #19
   221b6:	6029      	str	r1, [r5, #0]
   221b8:	d5b9      	bpl.n	2212e <__sflush_r+0x6a>
   221ba:	2c00      	cmp	r4, #0
   221bc:	d1b7      	bne.n	2212e <__sflush_r+0x6a>
   221be:	6528      	str	r0, [r5, #80]	; 0x50
   221c0:	e7b5      	b.n	2212e <__sflush_r+0x6a>
   221c2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   221c4:	2a00      	cmp	r2, #0
   221c6:	dc8c      	bgt.n	220e2 <__sflush_r+0x1e>
   221c8:	e7d8      	b.n	2217c <__sflush_r+0xb8>
   221ca:	2301      	movs	r3, #1
   221cc:	69e9      	ldr	r1, [r5, #28]
   221ce:	4640      	mov	r0, r8
   221d0:	47a0      	blx	r4
   221d2:	1c43      	adds	r3, r0, #1
   221d4:	4602      	mov	r2, r0
   221d6:	d002      	beq.n	221de <__sflush_r+0x11a>
   221d8:	89ab      	ldrh	r3, [r5, #12]
   221da:	6aac      	ldr	r4, [r5, #40]	; 0x28
   221dc:	e78e      	b.n	220fc <__sflush_r+0x38>
   221de:	f8d8 3000 	ldr.w	r3, [r8]
   221e2:	2b00      	cmp	r3, #0
   221e4:	d0f8      	beq.n	221d8 <__sflush_r+0x114>
   221e6:	2b1d      	cmp	r3, #29
   221e8:	d001      	beq.n	221ee <__sflush_r+0x12a>
   221ea:	2b16      	cmp	r3, #22
   221ec:	d102      	bne.n	221f4 <__sflush_r+0x130>
   221ee:	f8c8 6000 	str.w	r6, [r8]
   221f2:	e7c3      	b.n	2217c <__sflush_r+0xb8>
   221f4:	89ab      	ldrh	r3, [r5, #12]
   221f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   221fa:	81ab      	strh	r3, [r5, #12]
   221fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22200:	20400001 	.word	0x20400001

00022204 <_fflush_r>:
   22204:	b538      	push	{r3, r4, r5, lr}
   22206:	460d      	mov	r5, r1
   22208:	4604      	mov	r4, r0
   2220a:	b108      	cbz	r0, 22210 <_fflush_r+0xc>
   2220c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2220e:	b1bb      	cbz	r3, 22240 <_fflush_r+0x3c>
   22210:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   22214:	b188      	cbz	r0, 2223a <_fflush_r+0x36>
   22216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   22218:	07db      	lsls	r3, r3, #31
   2221a:	d401      	bmi.n	22220 <_fflush_r+0x1c>
   2221c:	0581      	lsls	r1, r0, #22
   2221e:	d517      	bpl.n	22250 <_fflush_r+0x4c>
   22220:	4620      	mov	r0, r4
   22222:	4629      	mov	r1, r5
   22224:	f7ff ff4e 	bl	220c4 <__sflush_r>
   22228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2222a:	07da      	lsls	r2, r3, #31
   2222c:	4604      	mov	r4, r0
   2222e:	d402      	bmi.n	22236 <_fflush_r+0x32>
   22230:	89ab      	ldrh	r3, [r5, #12]
   22232:	059b      	lsls	r3, r3, #22
   22234:	d507      	bpl.n	22246 <_fflush_r+0x42>
   22236:	4620      	mov	r0, r4
   22238:	bd38      	pop	{r3, r4, r5, pc}
   2223a:	4604      	mov	r4, r0
   2223c:	4620      	mov	r0, r4
   2223e:	bd38      	pop	{r3, r4, r5, pc}
   22240:	f000 f838 	bl	222b4 <__sinit>
   22244:	e7e4      	b.n	22210 <_fflush_r+0xc>
   22246:	6da8      	ldr	r0, [r5, #88]	; 0x58
   22248:	f7fc faa0 	bl	1e78c <__retarget_lock_release_recursive>
   2224c:	4620      	mov	r0, r4
   2224e:	bd38      	pop	{r3, r4, r5, pc}
   22250:	6da8      	ldr	r0, [r5, #88]	; 0x58
   22252:	f7fc fa99 	bl	1e788 <__retarget_lock_acquire_recursive>
   22256:	e7e3      	b.n	22220 <_fflush_r+0x1c>

00022258 <_cleanup_r>:
   22258:	4901      	ldr	r1, [pc, #4]	; (22260 <_cleanup_r+0x8>)
   2225a:	f000 b9b3 	b.w	225c4 <_fwalk_reent>
   2225e:	bf00      	nop
   22260:	00022fe9 	.word	0x00022fe9

00022264 <std.isra.0>:
   22264:	b510      	push	{r4, lr}
   22266:	2300      	movs	r3, #0
   22268:	4604      	mov	r4, r0
   2226a:	8181      	strh	r1, [r0, #12]
   2226c:	81c2      	strh	r2, [r0, #14]
   2226e:	6003      	str	r3, [r0, #0]
   22270:	6043      	str	r3, [r0, #4]
   22272:	6083      	str	r3, [r0, #8]
   22274:	6643      	str	r3, [r0, #100]	; 0x64
   22276:	6103      	str	r3, [r0, #16]
   22278:	6143      	str	r3, [r0, #20]
   2227a:	6183      	str	r3, [r0, #24]
   2227c:	4619      	mov	r1, r3
   2227e:	2208      	movs	r2, #8
   22280:	305c      	adds	r0, #92	; 0x5c
   22282:	f7fc fedb 	bl	1f03c <memset>
   22286:	4807      	ldr	r0, [pc, #28]	; (222a4 <std.isra.0+0x40>)
   22288:	4907      	ldr	r1, [pc, #28]	; (222a8 <std.isra.0+0x44>)
   2228a:	4a08      	ldr	r2, [pc, #32]	; (222ac <std.isra.0+0x48>)
   2228c:	4b08      	ldr	r3, [pc, #32]	; (222b0 <std.isra.0+0x4c>)
   2228e:	6220      	str	r0, [r4, #32]
   22290:	61e4      	str	r4, [r4, #28]
   22292:	6261      	str	r1, [r4, #36]	; 0x24
   22294:	62a2      	str	r2, [r4, #40]	; 0x28
   22296:	62e3      	str	r3, [r4, #44]	; 0x2c
   22298:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2229c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   222a0:	f7fc ba6e 	b.w	1e780 <__retarget_lock_init_recursive>
   222a4:	00022d1d 	.word	0x00022d1d
   222a8:	00022d41 	.word	0x00022d41
   222ac:	00022d7d 	.word	0x00022d7d
   222b0:	00022d9d 	.word	0x00022d9d

000222b4 <__sinit>:
   222b4:	b510      	push	{r4, lr}
   222b6:	4604      	mov	r4, r0
   222b8:	4812      	ldr	r0, [pc, #72]	; (22304 <__sinit+0x50>)
   222ba:	f7fc fa65 	bl	1e788 <__retarget_lock_acquire_recursive>
   222be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   222c0:	b9d2      	cbnz	r2, 222f8 <__sinit+0x44>
   222c2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   222c6:	4810      	ldr	r0, [pc, #64]	; (22308 <__sinit+0x54>)
   222c8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   222cc:	2103      	movs	r1, #3
   222ce:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   222d2:	63e0      	str	r0, [r4, #60]	; 0x3c
   222d4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   222d8:	6860      	ldr	r0, [r4, #4]
   222da:	2104      	movs	r1, #4
   222dc:	f7ff ffc2 	bl	22264 <std.isra.0>
   222e0:	2201      	movs	r2, #1
   222e2:	2109      	movs	r1, #9
   222e4:	68a0      	ldr	r0, [r4, #8]
   222e6:	f7ff ffbd 	bl	22264 <std.isra.0>
   222ea:	2202      	movs	r2, #2
   222ec:	2112      	movs	r1, #18
   222ee:	68e0      	ldr	r0, [r4, #12]
   222f0:	f7ff ffb8 	bl	22264 <std.isra.0>
   222f4:	2301      	movs	r3, #1
   222f6:	63a3      	str	r3, [r4, #56]	; 0x38
   222f8:	4802      	ldr	r0, [pc, #8]	; (22304 <__sinit+0x50>)
   222fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   222fe:	f7fc ba45 	b.w	1e78c <__retarget_lock_release_recursive>
   22302:	bf00      	nop
   22304:	20002384 	.word	0x20002384
   22308:	00022259 	.word	0x00022259

0002230c <__sfp_lock_acquire>:
   2230c:	4801      	ldr	r0, [pc, #4]	; (22314 <__sfp_lock_acquire+0x8>)
   2230e:	f7fc ba3b 	b.w	1e788 <__retarget_lock_acquire_recursive>
   22312:	bf00      	nop
   22314:	20002398 	.word	0x20002398

00022318 <__sfp_lock_release>:
   22318:	4801      	ldr	r0, [pc, #4]	; (22320 <__sfp_lock_release+0x8>)
   2231a:	f7fc ba37 	b.w	1e78c <__retarget_lock_release_recursive>
   2231e:	bf00      	nop
   22320:	20002398 	.word	0x20002398

00022324 <__libc_fini_array>:
   22324:	b538      	push	{r3, r4, r5, lr}
   22326:	4c0a      	ldr	r4, [pc, #40]	; (22350 <__libc_fini_array+0x2c>)
   22328:	4d0a      	ldr	r5, [pc, #40]	; (22354 <__libc_fini_array+0x30>)
   2232a:	1b64      	subs	r4, r4, r5
   2232c:	10a4      	asrs	r4, r4, #2
   2232e:	d00a      	beq.n	22346 <__libc_fini_array+0x22>
   22330:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   22334:	3b01      	subs	r3, #1
   22336:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   2233a:	3c01      	subs	r4, #1
   2233c:	f855 3904 	ldr.w	r3, [r5], #-4
   22340:	4798      	blx	r3
   22342:	2c00      	cmp	r4, #0
   22344:	d1f9      	bne.n	2233a <__libc_fini_array+0x16>
   22346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2234a:	f001 b8b3 	b.w	234b4 <_fini>
   2234e:	bf00      	nop
   22350:	000234fc 	.word	0x000234fc
   22354:	000234f8 	.word	0x000234f8

00022358 <_malloc_trim_r>:
   22358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2235a:	4f24      	ldr	r7, [pc, #144]	; (223ec <_malloc_trim_r+0x94>)
   2235c:	460c      	mov	r4, r1
   2235e:	4606      	mov	r6, r0
   22360:	f7fc feba 	bl	1f0d8 <__malloc_lock>
   22364:	68bb      	ldr	r3, [r7, #8]
   22366:	685d      	ldr	r5, [r3, #4]
   22368:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2236c:	310f      	adds	r1, #15
   2236e:	f025 0503 	bic.w	r5, r5, #3
   22372:	4429      	add	r1, r5
   22374:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   22378:	f021 010f 	bic.w	r1, r1, #15
   2237c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   22380:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   22384:	db07      	blt.n	22396 <_malloc_trim_r+0x3e>
   22386:	2100      	movs	r1, #0
   22388:	4630      	mov	r0, r6
   2238a:	f7fd f897 	bl	1f4bc <_sbrk_r>
   2238e:	68bb      	ldr	r3, [r7, #8]
   22390:	442b      	add	r3, r5
   22392:	4298      	cmp	r0, r3
   22394:	d004      	beq.n	223a0 <_malloc_trim_r+0x48>
   22396:	4630      	mov	r0, r6
   22398:	f7fc fea4 	bl	1f0e4 <__malloc_unlock>
   2239c:	2000      	movs	r0, #0
   2239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   223a0:	4261      	negs	r1, r4
   223a2:	4630      	mov	r0, r6
   223a4:	f7fd f88a 	bl	1f4bc <_sbrk_r>
   223a8:	3001      	adds	r0, #1
   223aa:	d00d      	beq.n	223c8 <_malloc_trim_r+0x70>
   223ac:	4b10      	ldr	r3, [pc, #64]	; (223f0 <_malloc_trim_r+0x98>)
   223ae:	68ba      	ldr	r2, [r7, #8]
   223b0:	6819      	ldr	r1, [r3, #0]
   223b2:	1b2d      	subs	r5, r5, r4
   223b4:	f045 0501 	orr.w	r5, r5, #1
   223b8:	4630      	mov	r0, r6
   223ba:	1b09      	subs	r1, r1, r4
   223bc:	6055      	str	r5, [r2, #4]
   223be:	6019      	str	r1, [r3, #0]
   223c0:	f7fc fe90 	bl	1f0e4 <__malloc_unlock>
   223c4:	2001      	movs	r0, #1
   223c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   223c8:	2100      	movs	r1, #0
   223ca:	4630      	mov	r0, r6
   223cc:	f7fd f876 	bl	1f4bc <_sbrk_r>
   223d0:	68ba      	ldr	r2, [r7, #8]
   223d2:	1a83      	subs	r3, r0, r2
   223d4:	2b0f      	cmp	r3, #15
   223d6:	ddde      	ble.n	22396 <_malloc_trim_r+0x3e>
   223d8:	4c06      	ldr	r4, [pc, #24]	; (223f4 <_malloc_trim_r+0x9c>)
   223da:	4905      	ldr	r1, [pc, #20]	; (223f0 <_malloc_trim_r+0x98>)
   223dc:	6824      	ldr	r4, [r4, #0]
   223de:	f043 0301 	orr.w	r3, r3, #1
   223e2:	1b00      	subs	r0, r0, r4
   223e4:	6053      	str	r3, [r2, #4]
   223e6:	6008      	str	r0, [r1, #0]
   223e8:	e7d5      	b.n	22396 <_malloc_trim_r+0x3e>
   223ea:	bf00      	nop
   223ec:	20000694 	.word	0x20000694
   223f0:	200022a0 	.word	0x200022a0
   223f4:	20000a9c 	.word	0x20000a9c

000223f8 <_free_r>:
   223f8:	2900      	cmp	r1, #0
   223fa:	d044      	beq.n	22486 <_free_r+0x8e>
   223fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22400:	460d      	mov	r5, r1
   22402:	4680      	mov	r8, r0
   22404:	f7fc fe68 	bl	1f0d8 <__malloc_lock>
   22408:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2240c:	4969      	ldr	r1, [pc, #420]	; (225b4 <_free_r+0x1bc>)
   2240e:	f027 0301 	bic.w	r3, r7, #1
   22412:	f1a5 0408 	sub.w	r4, r5, #8
   22416:	18e2      	adds	r2, r4, r3
   22418:	688e      	ldr	r6, [r1, #8]
   2241a:	6850      	ldr	r0, [r2, #4]
   2241c:	42b2      	cmp	r2, r6
   2241e:	f020 0003 	bic.w	r0, r0, #3
   22422:	d05e      	beq.n	224e2 <_free_r+0xea>
   22424:	07fe      	lsls	r6, r7, #31
   22426:	6050      	str	r0, [r2, #4]
   22428:	d40b      	bmi.n	22442 <_free_r+0x4a>
   2242a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2242e:	1be4      	subs	r4, r4, r7
   22430:	f101 0e08 	add.w	lr, r1, #8
   22434:	68a5      	ldr	r5, [r4, #8]
   22436:	4575      	cmp	r5, lr
   22438:	443b      	add	r3, r7
   2243a:	d06d      	beq.n	22518 <_free_r+0x120>
   2243c:	68e7      	ldr	r7, [r4, #12]
   2243e:	60ef      	str	r7, [r5, #12]
   22440:	60bd      	str	r5, [r7, #8]
   22442:	1815      	adds	r5, r2, r0
   22444:	686d      	ldr	r5, [r5, #4]
   22446:	07ed      	lsls	r5, r5, #31
   22448:	d53e      	bpl.n	224c8 <_free_r+0xd0>
   2244a:	f043 0201 	orr.w	r2, r3, #1
   2244e:	6062      	str	r2, [r4, #4]
   22450:	50e3      	str	r3, [r4, r3]
   22452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   22456:	d217      	bcs.n	22488 <_free_r+0x90>
   22458:	08db      	lsrs	r3, r3, #3
   2245a:	1c58      	adds	r0, r3, #1
   2245c:	109a      	asrs	r2, r3, #2
   2245e:	684d      	ldr	r5, [r1, #4]
   22460:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   22464:	60a7      	str	r7, [r4, #8]
   22466:	2301      	movs	r3, #1
   22468:	4093      	lsls	r3, r2
   2246a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2246e:	432b      	orrs	r3, r5
   22470:	3a08      	subs	r2, #8
   22472:	60e2      	str	r2, [r4, #12]
   22474:	604b      	str	r3, [r1, #4]
   22476:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2247a:	60fc      	str	r4, [r7, #12]
   2247c:	4640      	mov	r0, r8
   2247e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22482:	f7fc be2f 	b.w	1f0e4 <__malloc_unlock>
   22486:	4770      	bx	lr
   22488:	0a5a      	lsrs	r2, r3, #9
   2248a:	2a04      	cmp	r2, #4
   2248c:	d852      	bhi.n	22534 <_free_r+0x13c>
   2248e:	099a      	lsrs	r2, r3, #6
   22490:	f102 0739 	add.w	r7, r2, #57	; 0x39
   22494:	00ff      	lsls	r7, r7, #3
   22496:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2249a:	19c8      	adds	r0, r1, r7
   2249c:	59ca      	ldr	r2, [r1, r7]
   2249e:	3808      	subs	r0, #8
   224a0:	4290      	cmp	r0, r2
   224a2:	d04f      	beq.n	22544 <_free_r+0x14c>
   224a4:	6851      	ldr	r1, [r2, #4]
   224a6:	f021 0103 	bic.w	r1, r1, #3
   224aa:	428b      	cmp	r3, r1
   224ac:	d232      	bcs.n	22514 <_free_r+0x11c>
   224ae:	6892      	ldr	r2, [r2, #8]
   224b0:	4290      	cmp	r0, r2
   224b2:	d1f7      	bne.n	224a4 <_free_r+0xac>
   224b4:	68c3      	ldr	r3, [r0, #12]
   224b6:	60a0      	str	r0, [r4, #8]
   224b8:	60e3      	str	r3, [r4, #12]
   224ba:	609c      	str	r4, [r3, #8]
   224bc:	60c4      	str	r4, [r0, #12]
   224be:	4640      	mov	r0, r8
   224c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   224c4:	f7fc be0e 	b.w	1f0e4 <__malloc_unlock>
   224c8:	6895      	ldr	r5, [r2, #8]
   224ca:	4f3b      	ldr	r7, [pc, #236]	; (225b8 <_free_r+0x1c0>)
   224cc:	42bd      	cmp	r5, r7
   224ce:	4403      	add	r3, r0
   224d0:	d040      	beq.n	22554 <_free_r+0x15c>
   224d2:	68d0      	ldr	r0, [r2, #12]
   224d4:	60e8      	str	r0, [r5, #12]
   224d6:	f043 0201 	orr.w	r2, r3, #1
   224da:	6085      	str	r5, [r0, #8]
   224dc:	6062      	str	r2, [r4, #4]
   224de:	50e3      	str	r3, [r4, r3]
   224e0:	e7b7      	b.n	22452 <_free_r+0x5a>
   224e2:	07ff      	lsls	r7, r7, #31
   224e4:	4403      	add	r3, r0
   224e6:	d407      	bmi.n	224f8 <_free_r+0x100>
   224e8:	f855 2c08 	ldr.w	r2, [r5, #-8]
   224ec:	1aa4      	subs	r4, r4, r2
   224ee:	4413      	add	r3, r2
   224f0:	68a0      	ldr	r0, [r4, #8]
   224f2:	68e2      	ldr	r2, [r4, #12]
   224f4:	60c2      	str	r2, [r0, #12]
   224f6:	6090      	str	r0, [r2, #8]
   224f8:	4a30      	ldr	r2, [pc, #192]	; (225bc <_free_r+0x1c4>)
   224fa:	6812      	ldr	r2, [r2, #0]
   224fc:	f043 0001 	orr.w	r0, r3, #1
   22500:	4293      	cmp	r3, r2
   22502:	6060      	str	r0, [r4, #4]
   22504:	608c      	str	r4, [r1, #8]
   22506:	d3b9      	bcc.n	2247c <_free_r+0x84>
   22508:	4b2d      	ldr	r3, [pc, #180]	; (225c0 <_free_r+0x1c8>)
   2250a:	4640      	mov	r0, r8
   2250c:	6819      	ldr	r1, [r3, #0]
   2250e:	f7ff ff23 	bl	22358 <_malloc_trim_r>
   22512:	e7b3      	b.n	2247c <_free_r+0x84>
   22514:	4610      	mov	r0, r2
   22516:	e7cd      	b.n	224b4 <_free_r+0xbc>
   22518:	1811      	adds	r1, r2, r0
   2251a:	6849      	ldr	r1, [r1, #4]
   2251c:	07c9      	lsls	r1, r1, #31
   2251e:	d444      	bmi.n	225aa <_free_r+0x1b2>
   22520:	6891      	ldr	r1, [r2, #8]
   22522:	68d2      	ldr	r2, [r2, #12]
   22524:	60ca      	str	r2, [r1, #12]
   22526:	4403      	add	r3, r0
   22528:	f043 0001 	orr.w	r0, r3, #1
   2252c:	6091      	str	r1, [r2, #8]
   2252e:	6060      	str	r0, [r4, #4]
   22530:	50e3      	str	r3, [r4, r3]
   22532:	e7a3      	b.n	2247c <_free_r+0x84>
   22534:	2a14      	cmp	r2, #20
   22536:	d816      	bhi.n	22566 <_free_r+0x16e>
   22538:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2253c:	00ff      	lsls	r7, r7, #3
   2253e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   22542:	e7aa      	b.n	2249a <_free_r+0xa2>
   22544:	10aa      	asrs	r2, r5, #2
   22546:	2301      	movs	r3, #1
   22548:	684d      	ldr	r5, [r1, #4]
   2254a:	4093      	lsls	r3, r2
   2254c:	432b      	orrs	r3, r5
   2254e:	604b      	str	r3, [r1, #4]
   22550:	4603      	mov	r3, r0
   22552:	e7b0      	b.n	224b6 <_free_r+0xbe>
   22554:	f043 0201 	orr.w	r2, r3, #1
   22558:	614c      	str	r4, [r1, #20]
   2255a:	610c      	str	r4, [r1, #16]
   2255c:	60e5      	str	r5, [r4, #12]
   2255e:	60a5      	str	r5, [r4, #8]
   22560:	6062      	str	r2, [r4, #4]
   22562:	50e3      	str	r3, [r4, r3]
   22564:	e78a      	b.n	2247c <_free_r+0x84>
   22566:	2a54      	cmp	r2, #84	; 0x54
   22568:	d806      	bhi.n	22578 <_free_r+0x180>
   2256a:	0b1a      	lsrs	r2, r3, #12
   2256c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   22570:	00ff      	lsls	r7, r7, #3
   22572:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   22576:	e790      	b.n	2249a <_free_r+0xa2>
   22578:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2257c:	d806      	bhi.n	2258c <_free_r+0x194>
   2257e:	0bda      	lsrs	r2, r3, #15
   22580:	f102 0778 	add.w	r7, r2, #120	; 0x78
   22584:	00ff      	lsls	r7, r7, #3
   22586:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2258a:	e786      	b.n	2249a <_free_r+0xa2>
   2258c:	f240 5054 	movw	r0, #1364	; 0x554
   22590:	4282      	cmp	r2, r0
   22592:	d806      	bhi.n	225a2 <_free_r+0x1aa>
   22594:	0c9a      	lsrs	r2, r3, #18
   22596:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2259a:	00ff      	lsls	r7, r7, #3
   2259c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   225a0:	e77b      	b.n	2249a <_free_r+0xa2>
   225a2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   225a6:	257e      	movs	r5, #126	; 0x7e
   225a8:	e777      	b.n	2249a <_free_r+0xa2>
   225aa:	f043 0101 	orr.w	r1, r3, #1
   225ae:	6061      	str	r1, [r4, #4]
   225b0:	6013      	str	r3, [r2, #0]
   225b2:	e763      	b.n	2247c <_free_r+0x84>
   225b4:	20000694 	.word	0x20000694
   225b8:	2000069c 	.word	0x2000069c
   225bc:	20000aa0 	.word	0x20000aa0
   225c0:	200022d0 	.word	0x200022d0

000225c4 <_fwalk_reent>:
   225c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   225c8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   225cc:	d01f      	beq.n	2260e <_fwalk_reent+0x4a>
   225ce:	4688      	mov	r8, r1
   225d0:	4606      	mov	r6, r0
   225d2:	f04f 0900 	mov.w	r9, #0
   225d6:	687d      	ldr	r5, [r7, #4]
   225d8:	68bc      	ldr	r4, [r7, #8]
   225da:	3d01      	subs	r5, #1
   225dc:	d411      	bmi.n	22602 <_fwalk_reent+0x3e>
   225de:	89a3      	ldrh	r3, [r4, #12]
   225e0:	2b01      	cmp	r3, #1
   225e2:	f105 35ff 	add.w	r5, r5, #4294967295
   225e6:	d908      	bls.n	225fa <_fwalk_reent+0x36>
   225e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   225ec:	3301      	adds	r3, #1
   225ee:	4621      	mov	r1, r4
   225f0:	4630      	mov	r0, r6
   225f2:	d002      	beq.n	225fa <_fwalk_reent+0x36>
   225f4:	47c0      	blx	r8
   225f6:	ea49 0900 	orr.w	r9, r9, r0
   225fa:	1c6b      	adds	r3, r5, #1
   225fc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   22600:	d1ed      	bne.n	225de <_fwalk_reent+0x1a>
   22602:	683f      	ldr	r7, [r7, #0]
   22604:	2f00      	cmp	r7, #0
   22606:	d1e6      	bne.n	225d6 <_fwalk_reent+0x12>
   22608:	4648      	mov	r0, r9
   2260a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2260e:	46b9      	mov	r9, r7
   22610:	4648      	mov	r0, r9
   22612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22616:	bf00      	nop

00022618 <_localeconv_r>:
   22618:	4a04      	ldr	r2, [pc, #16]	; (2262c <_localeconv_r+0x14>)
   2261a:	4b05      	ldr	r3, [pc, #20]	; (22630 <_localeconv_r+0x18>)
   2261c:	6812      	ldr	r2, [r2, #0]
   2261e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   22620:	2800      	cmp	r0, #0
   22622:	bf08      	it	eq
   22624:	4618      	moveq	r0, r3
   22626:	30f0      	adds	r0, #240	; 0xf0
   22628:	4770      	bx	lr
   2262a:	bf00      	nop
   2262c:	200000f8 	.word	0x200000f8
   22630:	20000528 	.word	0x20000528

00022634 <__swhatbuf_r>:
   22634:	b570      	push	{r4, r5, r6, lr}
   22636:	460c      	mov	r4, r1
   22638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2263c:	2900      	cmp	r1, #0
   2263e:	b090      	sub	sp, #64	; 0x40
   22640:	4615      	mov	r5, r2
   22642:	461e      	mov	r6, r3
   22644:	db14      	blt.n	22670 <__swhatbuf_r+0x3c>
   22646:	aa01      	add	r2, sp, #4
   22648:	f000 fd30 	bl	230ac <_fstat_r>
   2264c:	2800      	cmp	r0, #0
   2264e:	db0f      	blt.n	22670 <__swhatbuf_r+0x3c>
   22650:	9a02      	ldr	r2, [sp, #8]
   22652:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   22656:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   2265a:	fab2 f282 	clz	r2, r2
   2265e:	0952      	lsrs	r2, r2, #5
   22660:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22664:	f44f 6000 	mov.w	r0, #2048	; 0x800
   22668:	6032      	str	r2, [r6, #0]
   2266a:	602b      	str	r3, [r5, #0]
   2266c:	b010      	add	sp, #64	; 0x40
   2266e:	bd70      	pop	{r4, r5, r6, pc}
   22670:	89a2      	ldrh	r2, [r4, #12]
   22672:	2300      	movs	r3, #0
   22674:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   22678:	6033      	str	r3, [r6, #0]
   2267a:	d004      	beq.n	22686 <__swhatbuf_r+0x52>
   2267c:	2240      	movs	r2, #64	; 0x40
   2267e:	4618      	mov	r0, r3
   22680:	602a      	str	r2, [r5, #0]
   22682:	b010      	add	sp, #64	; 0x40
   22684:	bd70      	pop	{r4, r5, r6, pc}
   22686:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2268a:	602b      	str	r3, [r5, #0]
   2268c:	b010      	add	sp, #64	; 0x40
   2268e:	bd70      	pop	{r4, r5, r6, pc}

00022690 <__smakebuf_r>:
   22690:	898a      	ldrh	r2, [r1, #12]
   22692:	0792      	lsls	r2, r2, #30
   22694:	460b      	mov	r3, r1
   22696:	d506      	bpl.n	226a6 <__smakebuf_r+0x16>
   22698:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2269c:	2101      	movs	r1, #1
   2269e:	601a      	str	r2, [r3, #0]
   226a0:	611a      	str	r2, [r3, #16]
   226a2:	6159      	str	r1, [r3, #20]
   226a4:	4770      	bx	lr
   226a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   226a8:	b083      	sub	sp, #12
   226aa:	ab01      	add	r3, sp, #4
   226ac:	466a      	mov	r2, sp
   226ae:	460c      	mov	r4, r1
   226b0:	4606      	mov	r6, r0
   226b2:	f7ff ffbf 	bl	22634 <__swhatbuf_r>
   226b6:	9900      	ldr	r1, [sp, #0]
   226b8:	4605      	mov	r5, r0
   226ba:	4630      	mov	r0, r6
   226bc:	f7fc f878 	bl	1e7b0 <_malloc_r>
   226c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   226c4:	b1d8      	cbz	r0, 226fe <__smakebuf_r+0x6e>
   226c6:	9a01      	ldr	r2, [sp, #4]
   226c8:	4f15      	ldr	r7, [pc, #84]	; (22720 <__smakebuf_r+0x90>)
   226ca:	9900      	ldr	r1, [sp, #0]
   226cc:	63f7      	str	r7, [r6, #60]	; 0x3c
   226ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   226d2:	81a3      	strh	r3, [r4, #12]
   226d4:	6020      	str	r0, [r4, #0]
   226d6:	6120      	str	r0, [r4, #16]
   226d8:	6161      	str	r1, [r4, #20]
   226da:	b91a      	cbnz	r2, 226e4 <__smakebuf_r+0x54>
   226dc:	432b      	orrs	r3, r5
   226de:	81a3      	strh	r3, [r4, #12]
   226e0:	b003      	add	sp, #12
   226e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226e4:	4630      	mov	r0, r6
   226e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   226ea:	f000 fcf3 	bl	230d4 <_isatty_r>
   226ee:	b1a0      	cbz	r0, 2271a <__smakebuf_r+0x8a>
   226f0:	89a3      	ldrh	r3, [r4, #12]
   226f2:	f023 0303 	bic.w	r3, r3, #3
   226f6:	f043 0301 	orr.w	r3, r3, #1
   226fa:	b21b      	sxth	r3, r3
   226fc:	e7ee      	b.n	226dc <__smakebuf_r+0x4c>
   226fe:	059a      	lsls	r2, r3, #22
   22700:	d4ee      	bmi.n	226e0 <__smakebuf_r+0x50>
   22702:	f023 0303 	bic.w	r3, r3, #3
   22706:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2270a:	f043 0302 	orr.w	r3, r3, #2
   2270e:	2101      	movs	r1, #1
   22710:	81a3      	strh	r3, [r4, #12]
   22712:	6022      	str	r2, [r4, #0]
   22714:	6122      	str	r2, [r4, #16]
   22716:	6161      	str	r1, [r4, #20]
   22718:	e7e2      	b.n	226e0 <__smakebuf_r+0x50>
   2271a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2271e:	e7dd      	b.n	226dc <__smakebuf_r+0x4c>
   22720:	00022259 	.word	0x00022259

00022724 <_Balloc>:
   22724:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   22726:	b570      	push	{r4, r5, r6, lr}
   22728:	4605      	mov	r5, r0
   2272a:	460c      	mov	r4, r1
   2272c:	b14b      	cbz	r3, 22742 <_Balloc+0x1e>
   2272e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   22732:	b180      	cbz	r0, 22756 <_Balloc+0x32>
   22734:	6802      	ldr	r2, [r0, #0]
   22736:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2273a:	2300      	movs	r3, #0
   2273c:	6103      	str	r3, [r0, #16]
   2273e:	60c3      	str	r3, [r0, #12]
   22740:	bd70      	pop	{r4, r5, r6, pc}
   22742:	2221      	movs	r2, #33	; 0x21
   22744:	2104      	movs	r1, #4
   22746:	f000 fc0d 	bl	22f64 <_calloc_r>
   2274a:	64e8      	str	r0, [r5, #76]	; 0x4c
   2274c:	4603      	mov	r3, r0
   2274e:	2800      	cmp	r0, #0
   22750:	d1ed      	bne.n	2272e <_Balloc+0xa>
   22752:	2000      	movs	r0, #0
   22754:	bd70      	pop	{r4, r5, r6, pc}
   22756:	2101      	movs	r1, #1
   22758:	fa01 f604 	lsl.w	r6, r1, r4
   2275c:	1d72      	adds	r2, r6, #5
   2275e:	4628      	mov	r0, r5
   22760:	0092      	lsls	r2, r2, #2
   22762:	f000 fbff 	bl	22f64 <_calloc_r>
   22766:	2800      	cmp	r0, #0
   22768:	d0f3      	beq.n	22752 <_Balloc+0x2e>
   2276a:	6044      	str	r4, [r0, #4]
   2276c:	6086      	str	r6, [r0, #8]
   2276e:	e7e4      	b.n	2273a <_Balloc+0x16>

00022770 <_Bfree>:
   22770:	b131      	cbz	r1, 22780 <_Bfree+0x10>
   22772:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   22774:	684a      	ldr	r2, [r1, #4]
   22776:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2277a:	6008      	str	r0, [r1, #0]
   2277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   22780:	4770      	bx	lr
   22782:	bf00      	nop

00022784 <__multadd>:
   22784:	b5f0      	push	{r4, r5, r6, r7, lr}
   22786:	690c      	ldr	r4, [r1, #16]
   22788:	b083      	sub	sp, #12
   2278a:	460d      	mov	r5, r1
   2278c:	4606      	mov	r6, r0
   2278e:	f101 0e14 	add.w	lr, r1, #20
   22792:	2700      	movs	r7, #0
   22794:	f8de 0000 	ldr.w	r0, [lr]
   22798:	b281      	uxth	r1, r0
   2279a:	fb02 3301 	mla	r3, r2, r1, r3
   2279e:	0c01      	lsrs	r1, r0, #16
   227a0:	0c18      	lsrs	r0, r3, #16
   227a2:	fb02 0101 	mla	r1, r2, r1, r0
   227a6:	b29b      	uxth	r3, r3
   227a8:	3701      	adds	r7, #1
   227aa:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   227ae:	42bc      	cmp	r4, r7
   227b0:	f84e 3b04 	str.w	r3, [lr], #4
   227b4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   227b8:	dcec      	bgt.n	22794 <__multadd+0x10>
   227ba:	b13b      	cbz	r3, 227cc <__multadd+0x48>
   227bc:	68aa      	ldr	r2, [r5, #8]
   227be:	4294      	cmp	r4, r2
   227c0:	da07      	bge.n	227d2 <__multadd+0x4e>
   227c2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   227c6:	3401      	adds	r4, #1
   227c8:	6153      	str	r3, [r2, #20]
   227ca:	612c      	str	r4, [r5, #16]
   227cc:	4628      	mov	r0, r5
   227ce:	b003      	add	sp, #12
   227d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227d2:	6869      	ldr	r1, [r5, #4]
   227d4:	9301      	str	r3, [sp, #4]
   227d6:	3101      	adds	r1, #1
   227d8:	4630      	mov	r0, r6
   227da:	f7ff ffa3 	bl	22724 <_Balloc>
   227de:	692a      	ldr	r2, [r5, #16]
   227e0:	3202      	adds	r2, #2
   227e2:	f105 010c 	add.w	r1, r5, #12
   227e6:	4607      	mov	r7, r0
   227e8:	0092      	lsls	r2, r2, #2
   227ea:	300c      	adds	r0, #12
   227ec:	f7fc fb28 	bl	1ee40 <memcpy>
   227f0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   227f2:	6869      	ldr	r1, [r5, #4]
   227f4:	9b01      	ldr	r3, [sp, #4]
   227f6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   227fa:	6028      	str	r0, [r5, #0]
   227fc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   22800:	463d      	mov	r5, r7
   22802:	e7de      	b.n	227c2 <__multadd+0x3e>

00022804 <__hi0bits>:
   22804:	0c02      	lsrs	r2, r0, #16
   22806:	0412      	lsls	r2, r2, #16
   22808:	4603      	mov	r3, r0
   2280a:	b9b2      	cbnz	r2, 2283a <__hi0bits+0x36>
   2280c:	0403      	lsls	r3, r0, #16
   2280e:	2010      	movs	r0, #16
   22810:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   22814:	bf04      	itt	eq
   22816:	021b      	lsleq	r3, r3, #8
   22818:	3008      	addeq	r0, #8
   2281a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2281e:	bf04      	itt	eq
   22820:	011b      	lsleq	r3, r3, #4
   22822:	3004      	addeq	r0, #4
   22824:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   22828:	bf04      	itt	eq
   2282a:	009b      	lsleq	r3, r3, #2
   2282c:	3002      	addeq	r0, #2
   2282e:	2b00      	cmp	r3, #0
   22830:	db02      	blt.n	22838 <__hi0bits+0x34>
   22832:	005b      	lsls	r3, r3, #1
   22834:	d403      	bmi.n	2283e <__hi0bits+0x3a>
   22836:	2020      	movs	r0, #32
   22838:	4770      	bx	lr
   2283a:	2000      	movs	r0, #0
   2283c:	e7e8      	b.n	22810 <__hi0bits+0xc>
   2283e:	3001      	adds	r0, #1
   22840:	4770      	bx	lr
   22842:	bf00      	nop

00022844 <__lo0bits>:
   22844:	6803      	ldr	r3, [r0, #0]
   22846:	f013 0207 	ands.w	r2, r3, #7
   2284a:	4601      	mov	r1, r0
   2284c:	d007      	beq.n	2285e <__lo0bits+0x1a>
   2284e:	07da      	lsls	r2, r3, #31
   22850:	d421      	bmi.n	22896 <__lo0bits+0x52>
   22852:	0798      	lsls	r0, r3, #30
   22854:	d421      	bmi.n	2289a <__lo0bits+0x56>
   22856:	089b      	lsrs	r3, r3, #2
   22858:	600b      	str	r3, [r1, #0]
   2285a:	2002      	movs	r0, #2
   2285c:	4770      	bx	lr
   2285e:	b298      	uxth	r0, r3
   22860:	b198      	cbz	r0, 2288a <__lo0bits+0x46>
   22862:	4610      	mov	r0, r2
   22864:	f013 0fff 	tst.w	r3, #255	; 0xff
   22868:	bf04      	itt	eq
   2286a:	0a1b      	lsreq	r3, r3, #8
   2286c:	3008      	addeq	r0, #8
   2286e:	071a      	lsls	r2, r3, #28
   22870:	bf04      	itt	eq
   22872:	091b      	lsreq	r3, r3, #4
   22874:	3004      	addeq	r0, #4
   22876:	079a      	lsls	r2, r3, #30
   22878:	bf04      	itt	eq
   2287a:	089b      	lsreq	r3, r3, #2
   2287c:	3002      	addeq	r0, #2
   2287e:	07da      	lsls	r2, r3, #31
   22880:	d407      	bmi.n	22892 <__lo0bits+0x4e>
   22882:	085b      	lsrs	r3, r3, #1
   22884:	d104      	bne.n	22890 <__lo0bits+0x4c>
   22886:	2020      	movs	r0, #32
   22888:	4770      	bx	lr
   2288a:	0c1b      	lsrs	r3, r3, #16
   2288c:	2010      	movs	r0, #16
   2288e:	e7e9      	b.n	22864 <__lo0bits+0x20>
   22890:	3001      	adds	r0, #1
   22892:	600b      	str	r3, [r1, #0]
   22894:	4770      	bx	lr
   22896:	2000      	movs	r0, #0
   22898:	4770      	bx	lr
   2289a:	085b      	lsrs	r3, r3, #1
   2289c:	600b      	str	r3, [r1, #0]
   2289e:	2001      	movs	r0, #1
   228a0:	4770      	bx	lr
   228a2:	bf00      	nop

000228a4 <__i2b>:
   228a4:	b510      	push	{r4, lr}
   228a6:	460c      	mov	r4, r1
   228a8:	2101      	movs	r1, #1
   228aa:	f7ff ff3b 	bl	22724 <_Balloc>
   228ae:	2201      	movs	r2, #1
   228b0:	6144      	str	r4, [r0, #20]
   228b2:	6102      	str	r2, [r0, #16]
   228b4:	bd10      	pop	{r4, pc}
   228b6:	bf00      	nop

000228b8 <__multiply>:
   228b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228bc:	690c      	ldr	r4, [r1, #16]
   228be:	6915      	ldr	r5, [r2, #16]
   228c0:	42ac      	cmp	r4, r5
   228c2:	b083      	sub	sp, #12
   228c4:	468b      	mov	fp, r1
   228c6:	4616      	mov	r6, r2
   228c8:	da04      	bge.n	228d4 <__multiply+0x1c>
   228ca:	4622      	mov	r2, r4
   228cc:	46b3      	mov	fp, r6
   228ce:	462c      	mov	r4, r5
   228d0:	460e      	mov	r6, r1
   228d2:	4615      	mov	r5, r2
   228d4:	f8db 3008 	ldr.w	r3, [fp, #8]
   228d8:	f8db 1004 	ldr.w	r1, [fp, #4]
   228dc:	eb04 0805 	add.w	r8, r4, r5
   228e0:	4598      	cmp	r8, r3
   228e2:	bfc8      	it	gt
   228e4:	3101      	addgt	r1, #1
   228e6:	f7ff ff1d 	bl	22724 <_Balloc>
   228ea:	f100 0914 	add.w	r9, r0, #20
   228ee:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   228f2:	45d1      	cmp	r9, sl
   228f4:	9000      	str	r0, [sp, #0]
   228f6:	d205      	bcs.n	22904 <__multiply+0x4c>
   228f8:	464b      	mov	r3, r9
   228fa:	2100      	movs	r1, #0
   228fc:	f843 1b04 	str.w	r1, [r3], #4
   22900:	459a      	cmp	sl, r3
   22902:	d8fb      	bhi.n	228fc <__multiply+0x44>
   22904:	f106 0c14 	add.w	ip, r6, #20
   22908:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2290c:	f10b 0b14 	add.w	fp, fp, #20
   22910:	459c      	cmp	ip, r3
   22912:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   22916:	d24c      	bcs.n	229b2 <__multiply+0xfa>
   22918:	f8cd a004 	str.w	sl, [sp, #4]
   2291c:	469a      	mov	sl, r3
   2291e:	f8dc 5000 	ldr.w	r5, [ip]
   22922:	b2af      	uxth	r7, r5
   22924:	b1ef      	cbz	r7, 22962 <__multiply+0xaa>
   22926:	2100      	movs	r1, #0
   22928:	464d      	mov	r5, r9
   2292a:	465e      	mov	r6, fp
   2292c:	460c      	mov	r4, r1
   2292e:	f856 2b04 	ldr.w	r2, [r6], #4
   22932:	6828      	ldr	r0, [r5, #0]
   22934:	b293      	uxth	r3, r2
   22936:	b281      	uxth	r1, r0
   22938:	fb07 1303 	mla	r3, r7, r3, r1
   2293c:	0c12      	lsrs	r2, r2, #16
   2293e:	0c01      	lsrs	r1, r0, #16
   22940:	4423      	add	r3, r4
   22942:	fb07 1102 	mla	r1, r7, r2, r1
   22946:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2294a:	b29b      	uxth	r3, r3
   2294c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   22950:	45b6      	cmp	lr, r6
   22952:	f845 3b04 	str.w	r3, [r5], #4
   22956:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2295a:	d8e8      	bhi.n	2292e <__multiply+0x76>
   2295c:	602c      	str	r4, [r5, #0]
   2295e:	f8dc 5000 	ldr.w	r5, [ip]
   22962:	0c2d      	lsrs	r5, r5, #16
   22964:	d01d      	beq.n	229a2 <__multiply+0xea>
   22966:	f8d9 3000 	ldr.w	r3, [r9]
   2296a:	4648      	mov	r0, r9
   2296c:	461c      	mov	r4, r3
   2296e:	4659      	mov	r1, fp
   22970:	2200      	movs	r2, #0
   22972:	880e      	ldrh	r6, [r1, #0]
   22974:	0c24      	lsrs	r4, r4, #16
   22976:	fb05 4406 	mla	r4, r5, r6, r4
   2297a:	4422      	add	r2, r4
   2297c:	b29b      	uxth	r3, r3
   2297e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   22982:	f840 3b04 	str.w	r3, [r0], #4
   22986:	f851 3b04 	ldr.w	r3, [r1], #4
   2298a:	6804      	ldr	r4, [r0, #0]
   2298c:	0c1b      	lsrs	r3, r3, #16
   2298e:	b2a6      	uxth	r6, r4
   22990:	fb05 6303 	mla	r3, r5, r3, r6
   22994:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   22998:	458e      	cmp	lr, r1
   2299a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2299e:	d8e8      	bhi.n	22972 <__multiply+0xba>
   229a0:	6003      	str	r3, [r0, #0]
   229a2:	f10c 0c04 	add.w	ip, ip, #4
   229a6:	45e2      	cmp	sl, ip
   229a8:	f109 0904 	add.w	r9, r9, #4
   229ac:	d8b7      	bhi.n	2291e <__multiply+0x66>
   229ae:	f8dd a004 	ldr.w	sl, [sp, #4]
   229b2:	f1b8 0f00 	cmp.w	r8, #0
   229b6:	dd0b      	ble.n	229d0 <__multiply+0x118>
   229b8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   229bc:	f1aa 0a04 	sub.w	sl, sl, #4
   229c0:	b11b      	cbz	r3, 229ca <__multiply+0x112>
   229c2:	e005      	b.n	229d0 <__multiply+0x118>
   229c4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   229c8:	b913      	cbnz	r3, 229d0 <__multiply+0x118>
   229ca:	f1b8 0801 	subs.w	r8, r8, #1
   229ce:	d1f9      	bne.n	229c4 <__multiply+0x10c>
   229d0:	9800      	ldr	r0, [sp, #0]
   229d2:	f8c0 8010 	str.w	r8, [r0, #16]
   229d6:	b003      	add	sp, #12
   229d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000229dc <__pow5mult>:
   229dc:	f012 0303 	ands.w	r3, r2, #3
   229e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   229e4:	4614      	mov	r4, r2
   229e6:	4607      	mov	r7, r0
   229e8:	d12e      	bne.n	22a48 <__pow5mult+0x6c>
   229ea:	460d      	mov	r5, r1
   229ec:	10a4      	asrs	r4, r4, #2
   229ee:	d01c      	beq.n	22a2a <__pow5mult+0x4e>
   229f0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   229f2:	b396      	cbz	r6, 22a5a <__pow5mult+0x7e>
   229f4:	07e3      	lsls	r3, r4, #31
   229f6:	f04f 0800 	mov.w	r8, #0
   229fa:	d406      	bmi.n	22a0a <__pow5mult+0x2e>
   229fc:	1064      	asrs	r4, r4, #1
   229fe:	d014      	beq.n	22a2a <__pow5mult+0x4e>
   22a00:	6830      	ldr	r0, [r6, #0]
   22a02:	b1a8      	cbz	r0, 22a30 <__pow5mult+0x54>
   22a04:	4606      	mov	r6, r0
   22a06:	07e3      	lsls	r3, r4, #31
   22a08:	d5f8      	bpl.n	229fc <__pow5mult+0x20>
   22a0a:	4632      	mov	r2, r6
   22a0c:	4629      	mov	r1, r5
   22a0e:	4638      	mov	r0, r7
   22a10:	f7ff ff52 	bl	228b8 <__multiply>
   22a14:	b1b5      	cbz	r5, 22a44 <__pow5mult+0x68>
   22a16:	686a      	ldr	r2, [r5, #4]
   22a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   22a1a:	1064      	asrs	r4, r4, #1
   22a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   22a20:	6029      	str	r1, [r5, #0]
   22a22:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   22a26:	4605      	mov	r5, r0
   22a28:	d1ea      	bne.n	22a00 <__pow5mult+0x24>
   22a2a:	4628      	mov	r0, r5
   22a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22a30:	4632      	mov	r2, r6
   22a32:	4631      	mov	r1, r6
   22a34:	4638      	mov	r0, r7
   22a36:	f7ff ff3f 	bl	228b8 <__multiply>
   22a3a:	6030      	str	r0, [r6, #0]
   22a3c:	f8c0 8000 	str.w	r8, [r0]
   22a40:	4606      	mov	r6, r0
   22a42:	e7e0      	b.n	22a06 <__pow5mult+0x2a>
   22a44:	4605      	mov	r5, r0
   22a46:	e7d9      	b.n	229fc <__pow5mult+0x20>
   22a48:	1e5a      	subs	r2, r3, #1
   22a4a:	4d0b      	ldr	r5, [pc, #44]	; (22a78 <__pow5mult+0x9c>)
   22a4c:	2300      	movs	r3, #0
   22a4e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   22a52:	f7ff fe97 	bl	22784 <__multadd>
   22a56:	4605      	mov	r5, r0
   22a58:	e7c8      	b.n	229ec <__pow5mult+0x10>
   22a5a:	2101      	movs	r1, #1
   22a5c:	4638      	mov	r0, r7
   22a5e:	f7ff fe61 	bl	22724 <_Balloc>
   22a62:	f240 2171 	movw	r1, #625	; 0x271
   22a66:	2201      	movs	r2, #1
   22a68:	2300      	movs	r3, #0
   22a6a:	6141      	str	r1, [r0, #20]
   22a6c:	6102      	str	r2, [r0, #16]
   22a6e:	4606      	mov	r6, r0
   22a70:	64b8      	str	r0, [r7, #72]	; 0x48
   22a72:	6003      	str	r3, [r0, #0]
   22a74:	e7be      	b.n	229f4 <__pow5mult+0x18>
   22a76:	bf00      	nop
   22a78:	00025ac0 	.word	0x00025ac0

00022a7c <__lshift>:
   22a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22a80:	4691      	mov	r9, r2
   22a82:	690a      	ldr	r2, [r1, #16]
   22a84:	688b      	ldr	r3, [r1, #8]
   22a86:	ea4f 1469 	mov.w	r4, r9, asr #5
   22a8a:	eb04 0802 	add.w	r8, r4, r2
   22a8e:	f108 0501 	add.w	r5, r8, #1
   22a92:	429d      	cmp	r5, r3
   22a94:	460e      	mov	r6, r1
   22a96:	4607      	mov	r7, r0
   22a98:	6849      	ldr	r1, [r1, #4]
   22a9a:	dd04      	ble.n	22aa6 <__lshift+0x2a>
   22a9c:	005b      	lsls	r3, r3, #1
   22a9e:	429d      	cmp	r5, r3
   22aa0:	f101 0101 	add.w	r1, r1, #1
   22aa4:	dcfa      	bgt.n	22a9c <__lshift+0x20>
   22aa6:	4638      	mov	r0, r7
   22aa8:	f7ff fe3c 	bl	22724 <_Balloc>
   22aac:	2c00      	cmp	r4, #0
   22aae:	f100 0314 	add.w	r3, r0, #20
   22ab2:	dd06      	ble.n	22ac2 <__lshift+0x46>
   22ab4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   22ab8:	2100      	movs	r1, #0
   22aba:	f843 1b04 	str.w	r1, [r3], #4
   22abe:	429a      	cmp	r2, r3
   22ac0:	d1fb      	bne.n	22aba <__lshift+0x3e>
   22ac2:	6934      	ldr	r4, [r6, #16]
   22ac4:	f106 0114 	add.w	r1, r6, #20
   22ac8:	f019 091f 	ands.w	r9, r9, #31
   22acc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   22ad0:	d01d      	beq.n	22b0e <__lshift+0x92>
   22ad2:	f1c9 0c20 	rsb	ip, r9, #32
   22ad6:	2200      	movs	r2, #0
   22ad8:	680c      	ldr	r4, [r1, #0]
   22ada:	fa04 f409 	lsl.w	r4, r4, r9
   22ade:	4314      	orrs	r4, r2
   22ae0:	f843 4b04 	str.w	r4, [r3], #4
   22ae4:	f851 2b04 	ldr.w	r2, [r1], #4
   22ae8:	458e      	cmp	lr, r1
   22aea:	fa22 f20c 	lsr.w	r2, r2, ip
   22aee:	d8f3      	bhi.n	22ad8 <__lshift+0x5c>
   22af0:	601a      	str	r2, [r3, #0]
   22af2:	b10a      	cbz	r2, 22af8 <__lshift+0x7c>
   22af4:	f108 0502 	add.w	r5, r8, #2
   22af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   22afa:	6872      	ldr	r2, [r6, #4]
   22afc:	3d01      	subs	r5, #1
   22afe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   22b02:	6105      	str	r5, [r0, #16]
   22b04:	6031      	str	r1, [r6, #0]
   22b06:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   22b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22b0e:	3b04      	subs	r3, #4
   22b10:	f851 2b04 	ldr.w	r2, [r1], #4
   22b14:	f843 2f04 	str.w	r2, [r3, #4]!
   22b18:	458e      	cmp	lr, r1
   22b1a:	d8f9      	bhi.n	22b10 <__lshift+0x94>
   22b1c:	e7ec      	b.n	22af8 <__lshift+0x7c>
   22b1e:	bf00      	nop

00022b20 <__mcmp>:
   22b20:	b430      	push	{r4, r5}
   22b22:	690b      	ldr	r3, [r1, #16]
   22b24:	4605      	mov	r5, r0
   22b26:	6900      	ldr	r0, [r0, #16]
   22b28:	1ac0      	subs	r0, r0, r3
   22b2a:	d10f      	bne.n	22b4c <__mcmp+0x2c>
   22b2c:	009b      	lsls	r3, r3, #2
   22b2e:	3514      	adds	r5, #20
   22b30:	3114      	adds	r1, #20
   22b32:	4419      	add	r1, r3
   22b34:	442b      	add	r3, r5
   22b36:	e001      	b.n	22b3c <__mcmp+0x1c>
   22b38:	429d      	cmp	r5, r3
   22b3a:	d207      	bcs.n	22b4c <__mcmp+0x2c>
   22b3c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   22b40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   22b44:	4294      	cmp	r4, r2
   22b46:	d0f7      	beq.n	22b38 <__mcmp+0x18>
   22b48:	d302      	bcc.n	22b50 <__mcmp+0x30>
   22b4a:	2001      	movs	r0, #1
   22b4c:	bc30      	pop	{r4, r5}
   22b4e:	4770      	bx	lr
   22b50:	f04f 30ff 	mov.w	r0, #4294967295
   22b54:	e7fa      	b.n	22b4c <__mcmp+0x2c>
   22b56:	bf00      	nop

00022b58 <__mdiff>:
   22b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b5c:	690f      	ldr	r7, [r1, #16]
   22b5e:	460e      	mov	r6, r1
   22b60:	6911      	ldr	r1, [r2, #16]
   22b62:	1a7f      	subs	r7, r7, r1
   22b64:	2f00      	cmp	r7, #0
   22b66:	4690      	mov	r8, r2
   22b68:	d117      	bne.n	22b9a <__mdiff+0x42>
   22b6a:	0089      	lsls	r1, r1, #2
   22b6c:	f106 0514 	add.w	r5, r6, #20
   22b70:	f102 0e14 	add.w	lr, r2, #20
   22b74:	186b      	adds	r3, r5, r1
   22b76:	4471      	add	r1, lr
   22b78:	e001      	b.n	22b7e <__mdiff+0x26>
   22b7a:	429d      	cmp	r5, r3
   22b7c:	d25c      	bcs.n	22c38 <__mdiff+0xe0>
   22b7e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22b82:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   22b86:	42a2      	cmp	r2, r4
   22b88:	d0f7      	beq.n	22b7a <__mdiff+0x22>
   22b8a:	d25e      	bcs.n	22c4a <__mdiff+0xf2>
   22b8c:	4633      	mov	r3, r6
   22b8e:	462c      	mov	r4, r5
   22b90:	4646      	mov	r6, r8
   22b92:	4675      	mov	r5, lr
   22b94:	4698      	mov	r8, r3
   22b96:	2701      	movs	r7, #1
   22b98:	e005      	b.n	22ba6 <__mdiff+0x4e>
   22b9a:	db58      	blt.n	22c4e <__mdiff+0xf6>
   22b9c:	f106 0514 	add.w	r5, r6, #20
   22ba0:	f108 0414 	add.w	r4, r8, #20
   22ba4:	2700      	movs	r7, #0
   22ba6:	6871      	ldr	r1, [r6, #4]
   22ba8:	f7ff fdbc 	bl	22724 <_Balloc>
   22bac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22bb0:	6936      	ldr	r6, [r6, #16]
   22bb2:	60c7      	str	r7, [r0, #12]
   22bb4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   22bb8:	46a6      	mov	lr, r4
   22bba:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   22bbe:	f100 0414 	add.w	r4, r0, #20
   22bc2:	2300      	movs	r3, #0
   22bc4:	f85e 1b04 	ldr.w	r1, [lr], #4
   22bc8:	f855 8b04 	ldr.w	r8, [r5], #4
   22bcc:	b28a      	uxth	r2, r1
   22bce:	fa13 f388 	uxtah	r3, r3, r8
   22bd2:	0c09      	lsrs	r1, r1, #16
   22bd4:	1a9a      	subs	r2, r3, r2
   22bd6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   22bda:	eb03 4322 	add.w	r3, r3, r2, asr #16
   22bde:	b292      	uxth	r2, r2
   22be0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   22be4:	45f4      	cmp	ip, lr
   22be6:	f844 2b04 	str.w	r2, [r4], #4
   22bea:	ea4f 4323 	mov.w	r3, r3, asr #16
   22bee:	d8e9      	bhi.n	22bc4 <__mdiff+0x6c>
   22bf0:	42af      	cmp	r7, r5
   22bf2:	d917      	bls.n	22c24 <__mdiff+0xcc>
   22bf4:	46a4      	mov	ip, r4
   22bf6:	46ae      	mov	lr, r5
   22bf8:	f85e 2b04 	ldr.w	r2, [lr], #4
   22bfc:	fa13 f382 	uxtah	r3, r3, r2
   22c00:	1419      	asrs	r1, r3, #16
   22c02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   22c06:	b29b      	uxth	r3, r3
   22c08:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   22c0c:	4577      	cmp	r7, lr
   22c0e:	f84c 2b04 	str.w	r2, [ip], #4
   22c12:	ea4f 4321 	mov.w	r3, r1, asr #16
   22c16:	d8ef      	bhi.n	22bf8 <__mdiff+0xa0>
   22c18:	43ed      	mvns	r5, r5
   22c1a:	442f      	add	r7, r5
   22c1c:	f027 0703 	bic.w	r7, r7, #3
   22c20:	3704      	adds	r7, #4
   22c22:	443c      	add	r4, r7
   22c24:	3c04      	subs	r4, #4
   22c26:	b922      	cbnz	r2, 22c32 <__mdiff+0xda>
   22c28:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   22c2c:	3e01      	subs	r6, #1
   22c2e:	2b00      	cmp	r3, #0
   22c30:	d0fa      	beq.n	22c28 <__mdiff+0xd0>
   22c32:	6106      	str	r6, [r0, #16]
   22c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c38:	2100      	movs	r1, #0
   22c3a:	f7ff fd73 	bl	22724 <_Balloc>
   22c3e:	2201      	movs	r2, #1
   22c40:	2300      	movs	r3, #0
   22c42:	6102      	str	r2, [r0, #16]
   22c44:	6143      	str	r3, [r0, #20]
   22c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c4a:	4674      	mov	r4, lr
   22c4c:	e7ab      	b.n	22ba6 <__mdiff+0x4e>
   22c4e:	4633      	mov	r3, r6
   22c50:	f106 0414 	add.w	r4, r6, #20
   22c54:	f102 0514 	add.w	r5, r2, #20
   22c58:	4616      	mov	r6, r2
   22c5a:	2701      	movs	r7, #1
   22c5c:	4698      	mov	r8, r3
   22c5e:	e7a2      	b.n	22ba6 <__mdiff+0x4e>

00022c60 <__d2b>:
   22c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22c64:	ec57 6b10 	vmov	r6, r7, d0
   22c68:	b083      	sub	sp, #12
   22c6a:	4688      	mov	r8, r1
   22c6c:	2101      	movs	r1, #1
   22c6e:	463c      	mov	r4, r7
   22c70:	f3c7 550a 	ubfx	r5, r7, #20, #11
   22c74:	4617      	mov	r7, r2
   22c76:	f7ff fd55 	bl	22724 <_Balloc>
   22c7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   22c7e:	4681      	mov	r9, r0
   22c80:	b10d      	cbz	r5, 22c86 <__d2b+0x26>
   22c82:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   22c86:	9401      	str	r4, [sp, #4]
   22c88:	b31e      	cbz	r6, 22cd2 <__d2b+0x72>
   22c8a:	a802      	add	r0, sp, #8
   22c8c:	f840 6d08 	str.w	r6, [r0, #-8]!
   22c90:	f7ff fdd8 	bl	22844 <__lo0bits>
   22c94:	2800      	cmp	r0, #0
   22c96:	d134      	bne.n	22d02 <__d2b+0xa2>
   22c98:	e89d 000c 	ldmia.w	sp, {r2, r3}
   22c9c:	f8c9 2014 	str.w	r2, [r9, #20]
   22ca0:	2b00      	cmp	r3, #0
   22ca2:	bf0c      	ite	eq
   22ca4:	2101      	moveq	r1, #1
   22ca6:	2102      	movne	r1, #2
   22ca8:	f8c9 3018 	str.w	r3, [r9, #24]
   22cac:	f8c9 1010 	str.w	r1, [r9, #16]
   22cb0:	b9dd      	cbnz	r5, 22cea <__d2b+0x8a>
   22cb2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   22cb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   22cba:	f8c8 0000 	str.w	r0, [r8]
   22cbe:	6918      	ldr	r0, [r3, #16]
   22cc0:	f7ff fda0 	bl	22804 <__hi0bits>
   22cc4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   22cc8:	6038      	str	r0, [r7, #0]
   22cca:	4648      	mov	r0, r9
   22ccc:	b003      	add	sp, #12
   22cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22cd2:	a801      	add	r0, sp, #4
   22cd4:	f7ff fdb6 	bl	22844 <__lo0bits>
   22cd8:	9b01      	ldr	r3, [sp, #4]
   22cda:	f8c9 3014 	str.w	r3, [r9, #20]
   22cde:	2101      	movs	r1, #1
   22ce0:	3020      	adds	r0, #32
   22ce2:	f8c9 1010 	str.w	r1, [r9, #16]
   22ce6:	2d00      	cmp	r5, #0
   22ce8:	d0e3      	beq.n	22cb2 <__d2b+0x52>
   22cea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   22cee:	4405      	add	r5, r0
   22cf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   22cf4:	f8c8 5000 	str.w	r5, [r8]
   22cf8:	6038      	str	r0, [r7, #0]
   22cfa:	4648      	mov	r0, r9
   22cfc:	b003      	add	sp, #12
   22cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22d02:	e89d 000a 	ldmia.w	sp, {r1, r3}
   22d06:	f1c0 0220 	rsb	r2, r0, #32
   22d0a:	fa03 f202 	lsl.w	r2, r3, r2
   22d0e:	430a      	orrs	r2, r1
   22d10:	40c3      	lsrs	r3, r0
   22d12:	9301      	str	r3, [sp, #4]
   22d14:	f8c9 2014 	str.w	r2, [r9, #20]
   22d18:	e7c2      	b.n	22ca0 <__d2b+0x40>
   22d1a:	bf00      	nop

00022d1c <__sread>:
   22d1c:	b510      	push	{r4, lr}
   22d1e:	460c      	mov	r4, r1
   22d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22d24:	f000 f9fe 	bl	23124 <_read_r>
   22d28:	2800      	cmp	r0, #0
   22d2a:	db03      	blt.n	22d34 <__sread+0x18>
   22d2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   22d2e:	4403      	add	r3, r0
   22d30:	6523      	str	r3, [r4, #80]	; 0x50
   22d32:	bd10      	pop	{r4, pc}
   22d34:	89a3      	ldrh	r3, [r4, #12]
   22d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   22d3a:	81a3      	strh	r3, [r4, #12]
   22d3c:	bd10      	pop	{r4, pc}
   22d3e:	bf00      	nop

00022d40 <__swrite>:
   22d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d44:	4616      	mov	r6, r2
   22d46:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   22d4a:	461f      	mov	r7, r3
   22d4c:	05d3      	lsls	r3, r2, #23
   22d4e:	460c      	mov	r4, r1
   22d50:	4605      	mov	r5, r0
   22d52:	d507      	bpl.n	22d64 <__swrite+0x24>
   22d54:	2200      	movs	r2, #0
   22d56:	2302      	movs	r3, #2
   22d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22d5c:	f000 f9cc 	bl	230f8 <_lseek_r>
   22d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22d68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   22d6c:	81a2      	strh	r2, [r4, #12]
   22d6e:	463b      	mov	r3, r7
   22d70:	4632      	mov	r2, r6
   22d72:	4628      	mov	r0, r5
   22d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22d78:	f7fe b95e 	b.w	21038 <_write_r>

00022d7c <__sseek>:
   22d7c:	b510      	push	{r4, lr}
   22d7e:	460c      	mov	r4, r1
   22d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22d84:	f000 f9b8 	bl	230f8 <_lseek_r>
   22d88:	89a3      	ldrh	r3, [r4, #12]
   22d8a:	1c42      	adds	r2, r0, #1
   22d8c:	bf0e      	itee	eq
   22d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   22d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   22d96:	6520      	strne	r0, [r4, #80]	; 0x50
   22d98:	81a3      	strh	r3, [r4, #12]
   22d9a:	bd10      	pop	{r4, pc}

00022d9c <__sclose>:
   22d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22da0:	f000 b910 	b.w	22fc4 <_close_r>

00022da4 <__ssprint_r>:
   22da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22da8:	6893      	ldr	r3, [r2, #8]
   22daa:	b083      	sub	sp, #12
   22dac:	4690      	mov	r8, r2
   22dae:	2b00      	cmp	r3, #0
   22db0:	d070      	beq.n	22e94 <__ssprint_r+0xf0>
   22db2:	4682      	mov	sl, r0
   22db4:	460c      	mov	r4, r1
   22db6:	6817      	ldr	r7, [r2, #0]
   22db8:	688d      	ldr	r5, [r1, #8]
   22dba:	6808      	ldr	r0, [r1, #0]
   22dbc:	e042      	b.n	22e44 <__ssprint_r+0xa0>
   22dbe:	89a3      	ldrh	r3, [r4, #12]
   22dc0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22dc4:	d02e      	beq.n	22e24 <__ssprint_r+0x80>
   22dc6:	6965      	ldr	r5, [r4, #20]
   22dc8:	6921      	ldr	r1, [r4, #16]
   22dca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   22dce:	eba0 0b01 	sub.w	fp, r0, r1
   22dd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22dd6:	f10b 0001 	add.w	r0, fp, #1
   22dda:	106d      	asrs	r5, r5, #1
   22ddc:	4430      	add	r0, r6
   22dde:	42a8      	cmp	r0, r5
   22de0:	462a      	mov	r2, r5
   22de2:	bf84      	itt	hi
   22de4:	4605      	movhi	r5, r0
   22de6:	462a      	movhi	r2, r5
   22de8:	055b      	lsls	r3, r3, #21
   22dea:	d538      	bpl.n	22e5e <__ssprint_r+0xba>
   22dec:	4611      	mov	r1, r2
   22dee:	4650      	mov	r0, sl
   22df0:	f7fb fcde 	bl	1e7b0 <_malloc_r>
   22df4:	2800      	cmp	r0, #0
   22df6:	d03c      	beq.n	22e72 <__ssprint_r+0xce>
   22df8:	465a      	mov	r2, fp
   22dfa:	6921      	ldr	r1, [r4, #16]
   22dfc:	9001      	str	r0, [sp, #4]
   22dfe:	f7fc f81f 	bl	1ee40 <memcpy>
   22e02:	89a2      	ldrh	r2, [r4, #12]
   22e04:	9b01      	ldr	r3, [sp, #4]
   22e06:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   22e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   22e0e:	81a2      	strh	r2, [r4, #12]
   22e10:	eba5 020b 	sub.w	r2, r5, fp
   22e14:	eb03 000b 	add.w	r0, r3, fp
   22e18:	6165      	str	r5, [r4, #20]
   22e1a:	6123      	str	r3, [r4, #16]
   22e1c:	6020      	str	r0, [r4, #0]
   22e1e:	60a2      	str	r2, [r4, #8]
   22e20:	4635      	mov	r5, r6
   22e22:	46b3      	mov	fp, r6
   22e24:	465a      	mov	r2, fp
   22e26:	4649      	mov	r1, r9
   22e28:	f7fc f8a4 	bl	1ef74 <memmove>
   22e2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22e30:	68a2      	ldr	r2, [r4, #8]
   22e32:	6820      	ldr	r0, [r4, #0]
   22e34:	1b55      	subs	r5, r2, r5
   22e36:	4458      	add	r0, fp
   22e38:	1b9e      	subs	r6, r3, r6
   22e3a:	60a5      	str	r5, [r4, #8]
   22e3c:	6020      	str	r0, [r4, #0]
   22e3e:	f8c8 6008 	str.w	r6, [r8, #8]
   22e42:	b33e      	cbz	r6, 22e94 <__ssprint_r+0xf0>
   22e44:	687e      	ldr	r6, [r7, #4]
   22e46:	463b      	mov	r3, r7
   22e48:	3708      	adds	r7, #8
   22e4a:	2e00      	cmp	r6, #0
   22e4c:	d0fa      	beq.n	22e44 <__ssprint_r+0xa0>
   22e4e:	42ae      	cmp	r6, r5
   22e50:	f8d3 9000 	ldr.w	r9, [r3]
   22e54:	46ab      	mov	fp, r5
   22e56:	d2b2      	bcs.n	22dbe <__ssprint_r+0x1a>
   22e58:	4635      	mov	r5, r6
   22e5a:	46b3      	mov	fp, r6
   22e5c:	e7e2      	b.n	22e24 <__ssprint_r+0x80>
   22e5e:	4650      	mov	r0, sl
   22e60:	f7fc f986 	bl	1f170 <_realloc_r>
   22e64:	4603      	mov	r3, r0
   22e66:	2800      	cmp	r0, #0
   22e68:	d1d2      	bne.n	22e10 <__ssprint_r+0x6c>
   22e6a:	6921      	ldr	r1, [r4, #16]
   22e6c:	4650      	mov	r0, sl
   22e6e:	f7ff fac3 	bl	223f8 <_free_r>
   22e72:	230c      	movs	r3, #12
   22e74:	f8ca 3000 	str.w	r3, [sl]
   22e78:	89a3      	ldrh	r3, [r4, #12]
   22e7a:	2200      	movs	r2, #0
   22e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22e80:	f04f 30ff 	mov.w	r0, #4294967295
   22e84:	81a3      	strh	r3, [r4, #12]
   22e86:	f8c8 2008 	str.w	r2, [r8, #8]
   22e8a:	f8c8 2004 	str.w	r2, [r8, #4]
   22e8e:	b003      	add	sp, #12
   22e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e94:	2000      	movs	r0, #0
   22e96:	f8c8 0004 	str.w	r0, [r8, #4]
   22e9a:	b003      	add	sp, #12
   22e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022ea0 <__register_exitproc>:
   22ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ea4:	4d2c      	ldr	r5, [pc, #176]	; (22f58 <__register_exitproc+0xb8>)
   22ea6:	4606      	mov	r6, r0
   22ea8:	6828      	ldr	r0, [r5, #0]
   22eaa:	4698      	mov	r8, r3
   22eac:	460f      	mov	r7, r1
   22eae:	4691      	mov	r9, r2
   22eb0:	f7fb fc6a 	bl	1e788 <__retarget_lock_acquire_recursive>
   22eb4:	4b29      	ldr	r3, [pc, #164]	; (22f5c <__register_exitproc+0xbc>)
   22eb6:	681c      	ldr	r4, [r3, #0]
   22eb8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   22ebc:	2b00      	cmp	r3, #0
   22ebe:	d03e      	beq.n	22f3e <__register_exitproc+0x9e>
   22ec0:	685a      	ldr	r2, [r3, #4]
   22ec2:	2a1f      	cmp	r2, #31
   22ec4:	dc1c      	bgt.n	22f00 <__register_exitproc+0x60>
   22ec6:	f102 0e01 	add.w	lr, r2, #1
   22eca:	b176      	cbz	r6, 22eea <__register_exitproc+0x4a>
   22ecc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22ed0:	2401      	movs	r4, #1
   22ed2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22ed6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   22eda:	4094      	lsls	r4, r2
   22edc:	4320      	orrs	r0, r4
   22ede:	2e02      	cmp	r6, #2
   22ee0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   22ee4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   22ee8:	d023      	beq.n	22f32 <__register_exitproc+0x92>
   22eea:	3202      	adds	r2, #2
   22eec:	f8c3 e004 	str.w	lr, [r3, #4]
   22ef0:	6828      	ldr	r0, [r5, #0]
   22ef2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   22ef6:	f7fb fc49 	bl	1e78c <__retarget_lock_release_recursive>
   22efa:	2000      	movs	r0, #0
   22efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22f00:	4b17      	ldr	r3, [pc, #92]	; (22f60 <__register_exitproc+0xc0>)
   22f02:	b30b      	cbz	r3, 22f48 <__register_exitproc+0xa8>
   22f04:	f44f 70c8 	mov.w	r0, #400	; 0x190
   22f08:	f7fb fc42 	bl	1e790 <malloc>
   22f0c:	4603      	mov	r3, r0
   22f0e:	b1d8      	cbz	r0, 22f48 <__register_exitproc+0xa8>
   22f10:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   22f14:	6002      	str	r2, [r0, #0]
   22f16:	2100      	movs	r1, #0
   22f18:	6041      	str	r1, [r0, #4]
   22f1a:	460a      	mov	r2, r1
   22f1c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   22f20:	f04f 0e01 	mov.w	lr, #1
   22f24:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   22f28:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   22f2c:	2e00      	cmp	r6, #0
   22f2e:	d0dc      	beq.n	22eea <__register_exitproc+0x4a>
   22f30:	e7cc      	b.n	22ecc <__register_exitproc+0x2c>
   22f32:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   22f36:	430c      	orrs	r4, r1
   22f38:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   22f3c:	e7d5      	b.n	22eea <__register_exitproc+0x4a>
   22f3e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   22f42:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22f46:	e7bb      	b.n	22ec0 <__register_exitproc+0x20>
   22f48:	6828      	ldr	r0, [r5, #0]
   22f4a:	f7fb fc1f 	bl	1e78c <__retarget_lock_release_recursive>
   22f4e:	f04f 30ff 	mov.w	r0, #4294967295
   22f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22f56:	bf00      	nop
   22f58:	20000aa4 	.word	0x20000aa4
   22f5c:	00025820 	.word	0x00025820
   22f60:	0001e791 	.word	0x0001e791

00022f64 <_calloc_r>:
   22f64:	b510      	push	{r4, lr}
   22f66:	fb02 f101 	mul.w	r1, r2, r1
   22f6a:	f7fb fc21 	bl	1e7b0 <_malloc_r>
   22f6e:	4604      	mov	r4, r0
   22f70:	b1d8      	cbz	r0, 22faa <_calloc_r+0x46>
   22f72:	f850 2c04 	ldr.w	r2, [r0, #-4]
   22f76:	f022 0203 	bic.w	r2, r2, #3
   22f7a:	3a04      	subs	r2, #4
   22f7c:	2a24      	cmp	r2, #36	; 0x24
   22f7e:	d818      	bhi.n	22fb2 <_calloc_r+0x4e>
   22f80:	2a13      	cmp	r2, #19
   22f82:	d914      	bls.n	22fae <_calloc_r+0x4a>
   22f84:	2300      	movs	r3, #0
   22f86:	2a1b      	cmp	r2, #27
   22f88:	6003      	str	r3, [r0, #0]
   22f8a:	6043      	str	r3, [r0, #4]
   22f8c:	d916      	bls.n	22fbc <_calloc_r+0x58>
   22f8e:	2a24      	cmp	r2, #36	; 0x24
   22f90:	6083      	str	r3, [r0, #8]
   22f92:	60c3      	str	r3, [r0, #12]
   22f94:	bf11      	iteee	ne
   22f96:	f100 0210 	addne.w	r2, r0, #16
   22f9a:	6103      	streq	r3, [r0, #16]
   22f9c:	6143      	streq	r3, [r0, #20]
   22f9e:	f100 0218 	addeq.w	r2, r0, #24
   22fa2:	2300      	movs	r3, #0
   22fa4:	6013      	str	r3, [r2, #0]
   22fa6:	6053      	str	r3, [r2, #4]
   22fa8:	6093      	str	r3, [r2, #8]
   22faa:	4620      	mov	r0, r4
   22fac:	bd10      	pop	{r4, pc}
   22fae:	4602      	mov	r2, r0
   22fb0:	e7f7      	b.n	22fa2 <_calloc_r+0x3e>
   22fb2:	2100      	movs	r1, #0
   22fb4:	f7fc f842 	bl	1f03c <memset>
   22fb8:	4620      	mov	r0, r4
   22fba:	bd10      	pop	{r4, pc}
   22fbc:	f100 0208 	add.w	r2, r0, #8
   22fc0:	e7ef      	b.n	22fa2 <_calloc_r+0x3e>
   22fc2:	bf00      	nop

00022fc4 <_close_r>:
   22fc4:	b538      	push	{r3, r4, r5, lr}
   22fc6:	4c07      	ldr	r4, [pc, #28]	; (22fe4 <_close_r+0x20>)
   22fc8:	2300      	movs	r3, #0
   22fca:	4605      	mov	r5, r0
   22fcc:	4608      	mov	r0, r1
   22fce:	6023      	str	r3, [r4, #0]
   22fd0:	f000 f9ac 	bl	2332c <_close>
   22fd4:	1c43      	adds	r3, r0, #1
   22fd6:	d000      	beq.n	22fda <_close_r+0x16>
   22fd8:	bd38      	pop	{r3, r4, r5, pc}
   22fda:	6823      	ldr	r3, [r4, #0]
   22fdc:	2b00      	cmp	r3, #0
   22fde:	d0fb      	beq.n	22fd8 <_close_r+0x14>
   22fe0:	602b      	str	r3, [r5, #0]
   22fe2:	bd38      	pop	{r3, r4, r5, pc}
   22fe4:	2000239c 	.word	0x2000239c

00022fe8 <_fclose_r>:
   22fe8:	b570      	push	{r4, r5, r6, lr}
   22fea:	b159      	cbz	r1, 23004 <_fclose_r+0x1c>
   22fec:	4605      	mov	r5, r0
   22fee:	460c      	mov	r4, r1
   22ff0:	b110      	cbz	r0, 22ff8 <_fclose_r+0x10>
   22ff2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   22ff4:	2b00      	cmp	r3, #0
   22ff6:	d03c      	beq.n	23072 <_fclose_r+0x8a>
   22ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22ffa:	07d8      	lsls	r0, r3, #31
   22ffc:	d505      	bpl.n	2300a <_fclose_r+0x22>
   22ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23002:	b92b      	cbnz	r3, 23010 <_fclose_r+0x28>
   23004:	2600      	movs	r6, #0
   23006:	4630      	mov	r0, r6
   23008:	bd70      	pop	{r4, r5, r6, pc}
   2300a:	89a3      	ldrh	r3, [r4, #12]
   2300c:	0599      	lsls	r1, r3, #22
   2300e:	d53c      	bpl.n	2308a <_fclose_r+0xa2>
   23010:	4621      	mov	r1, r4
   23012:	4628      	mov	r0, r5
   23014:	f7ff f856 	bl	220c4 <__sflush_r>
   23018:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2301a:	4606      	mov	r6, r0
   2301c:	b133      	cbz	r3, 2302c <_fclose_r+0x44>
   2301e:	69e1      	ldr	r1, [r4, #28]
   23020:	4628      	mov	r0, r5
   23022:	4798      	blx	r3
   23024:	2800      	cmp	r0, #0
   23026:	bfb8      	it	lt
   23028:	f04f 36ff 	movlt.w	r6, #4294967295
   2302c:	89a3      	ldrh	r3, [r4, #12]
   2302e:	061a      	lsls	r2, r3, #24
   23030:	d422      	bmi.n	23078 <_fclose_r+0x90>
   23032:	6b21      	ldr	r1, [r4, #48]	; 0x30
   23034:	b141      	cbz	r1, 23048 <_fclose_r+0x60>
   23036:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2303a:	4299      	cmp	r1, r3
   2303c:	d002      	beq.n	23044 <_fclose_r+0x5c>
   2303e:	4628      	mov	r0, r5
   23040:	f7ff f9da 	bl	223f8 <_free_r>
   23044:	2300      	movs	r3, #0
   23046:	6323      	str	r3, [r4, #48]	; 0x30
   23048:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2304a:	b121      	cbz	r1, 23056 <_fclose_r+0x6e>
   2304c:	4628      	mov	r0, r5
   2304e:	f7ff f9d3 	bl	223f8 <_free_r>
   23052:	2300      	movs	r3, #0
   23054:	6463      	str	r3, [r4, #68]	; 0x44
   23056:	f7ff f959 	bl	2230c <__sfp_lock_acquire>
   2305a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2305c:	2200      	movs	r2, #0
   2305e:	07db      	lsls	r3, r3, #31
   23060:	81a2      	strh	r2, [r4, #12]
   23062:	d50e      	bpl.n	23082 <_fclose_r+0x9a>
   23064:	6da0      	ldr	r0, [r4, #88]	; 0x58
   23066:	f7fb fb8d 	bl	1e784 <__retarget_lock_close_recursive>
   2306a:	f7ff f955 	bl	22318 <__sfp_lock_release>
   2306e:	4630      	mov	r0, r6
   23070:	bd70      	pop	{r4, r5, r6, pc}
   23072:	f7ff f91f 	bl	222b4 <__sinit>
   23076:	e7bf      	b.n	22ff8 <_fclose_r+0x10>
   23078:	6921      	ldr	r1, [r4, #16]
   2307a:	4628      	mov	r0, r5
   2307c:	f7ff f9bc 	bl	223f8 <_free_r>
   23080:	e7d7      	b.n	23032 <_fclose_r+0x4a>
   23082:	6da0      	ldr	r0, [r4, #88]	; 0x58
   23084:	f7fb fb82 	bl	1e78c <__retarget_lock_release_recursive>
   23088:	e7ec      	b.n	23064 <_fclose_r+0x7c>
   2308a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2308c:	f7fb fb7c 	bl	1e788 <__retarget_lock_acquire_recursive>
   23090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23094:	2b00      	cmp	r3, #0
   23096:	d1bb      	bne.n	23010 <_fclose_r+0x28>
   23098:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2309a:	f016 0601 	ands.w	r6, r6, #1
   2309e:	d1b1      	bne.n	23004 <_fclose_r+0x1c>
   230a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   230a2:	f7fb fb73 	bl	1e78c <__retarget_lock_release_recursive>
   230a6:	4630      	mov	r0, r6
   230a8:	bd70      	pop	{r4, r5, r6, pc}
   230aa:	bf00      	nop

000230ac <_fstat_r>:
   230ac:	b538      	push	{r3, r4, r5, lr}
   230ae:	460b      	mov	r3, r1
   230b0:	4c07      	ldr	r4, [pc, #28]	; (230d0 <_fstat_r+0x24>)
   230b2:	4605      	mov	r5, r0
   230b4:	4611      	mov	r1, r2
   230b6:	4618      	mov	r0, r3
   230b8:	2300      	movs	r3, #0
   230ba:	6023      	str	r3, [r4, #0]
   230bc:	f000 f9b4 	bl	23428 <_fstat>
   230c0:	1c43      	adds	r3, r0, #1
   230c2:	d000      	beq.n	230c6 <_fstat_r+0x1a>
   230c4:	bd38      	pop	{r3, r4, r5, pc}
   230c6:	6823      	ldr	r3, [r4, #0]
   230c8:	2b00      	cmp	r3, #0
   230ca:	d0fb      	beq.n	230c4 <_fstat_r+0x18>
   230cc:	602b      	str	r3, [r5, #0]
   230ce:	bd38      	pop	{r3, r4, r5, pc}
   230d0:	2000239c 	.word	0x2000239c

000230d4 <_isatty_r>:
   230d4:	b538      	push	{r3, r4, r5, lr}
   230d6:	4c07      	ldr	r4, [pc, #28]	; (230f4 <_isatty_r+0x20>)
   230d8:	2300      	movs	r3, #0
   230da:	4605      	mov	r5, r0
   230dc:	4608      	mov	r0, r1
   230de:	6023      	str	r3, [r4, #0]
   230e0:	f000 f9b0 	bl	23444 <_isatty>
   230e4:	1c43      	adds	r3, r0, #1
   230e6:	d000      	beq.n	230ea <_isatty_r+0x16>
   230e8:	bd38      	pop	{r3, r4, r5, pc}
   230ea:	6823      	ldr	r3, [r4, #0]
   230ec:	2b00      	cmp	r3, #0
   230ee:	d0fb      	beq.n	230e8 <_isatty_r+0x14>
   230f0:	602b      	str	r3, [r5, #0]
   230f2:	bd38      	pop	{r3, r4, r5, pc}
   230f4:	2000239c 	.word	0x2000239c

000230f8 <_lseek_r>:
   230f8:	b570      	push	{r4, r5, r6, lr}
   230fa:	460d      	mov	r5, r1
   230fc:	4c08      	ldr	r4, [pc, #32]	; (23120 <_lseek_r+0x28>)
   230fe:	4611      	mov	r1, r2
   23100:	4606      	mov	r6, r0
   23102:	461a      	mov	r2, r3
   23104:	4628      	mov	r0, r5
   23106:	2300      	movs	r3, #0
   23108:	6023      	str	r3, [r4, #0]
   2310a:	f000 f8d3 	bl	232b4 <_lseek>
   2310e:	1c43      	adds	r3, r0, #1
   23110:	d000      	beq.n	23114 <_lseek_r+0x1c>
   23112:	bd70      	pop	{r4, r5, r6, pc}
   23114:	6823      	ldr	r3, [r4, #0]
   23116:	2b00      	cmp	r3, #0
   23118:	d0fb      	beq.n	23112 <_lseek_r+0x1a>
   2311a:	6033      	str	r3, [r6, #0]
   2311c:	bd70      	pop	{r4, r5, r6, pc}
   2311e:	bf00      	nop
   23120:	2000239c 	.word	0x2000239c

00023124 <_read_r>:
   23124:	b570      	push	{r4, r5, r6, lr}
   23126:	460d      	mov	r5, r1
   23128:	4c08      	ldr	r4, [pc, #32]	; (2314c <_read_r+0x28>)
   2312a:	4611      	mov	r1, r2
   2312c:	4606      	mov	r6, r0
   2312e:	461a      	mov	r2, r3
   23130:	4628      	mov	r0, r5
   23132:	2300      	movs	r3, #0
   23134:	6023      	str	r3, [r4, #0]
   23136:	f000 f84b 	bl	231d0 <_read>
   2313a:	1c43      	adds	r3, r0, #1
   2313c:	d000      	beq.n	23140 <_read_r+0x1c>
   2313e:	bd70      	pop	{r4, r5, r6, pc}
   23140:	6823      	ldr	r3, [r4, #0]
   23142:	2b00      	cmp	r3, #0
   23144:	d0fb      	beq.n	2313e <_read_r+0x1a>
   23146:	6033      	str	r3, [r6, #0]
   23148:	bd70      	pop	{r4, r5, r6, pc}
   2314a:	bf00      	nop
   2314c:	2000239c 	.word	0x2000239c

00023150 <__aeabi_dcmpun>:
   23150:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   23154:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   23158:	d102      	bne.n	23160 <__aeabi_dcmpun+0x10>
   2315a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2315e:	d10a      	bne.n	23176 <__aeabi_dcmpun+0x26>
   23160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   23164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   23168:	d102      	bne.n	23170 <__aeabi_dcmpun+0x20>
   2316a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2316e:	d102      	bne.n	23176 <__aeabi_dcmpun+0x26>
   23170:	f04f 0000 	mov.w	r0, #0
   23174:	4770      	bx	lr
   23176:	f04f 0001 	mov.w	r0, #1
   2317a:	4770      	bx	lr

0002317c <findslot>:
   2317c:	4b0b      	ldr	r3, [pc, #44]	; (231ac <findslot+0x30>)
   2317e:	681b      	ldr	r3, [r3, #0]
   23180:	b510      	push	{r4, lr}
   23182:	4604      	mov	r4, r0
   23184:	b10b      	cbz	r3, 2318a <findslot+0xe>
   23186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23188:	b14a      	cbz	r2, 2319e <findslot+0x22>
   2318a:	2c13      	cmp	r4, #19
   2318c:	d80c      	bhi.n	231a8 <findslot+0x2c>
   2318e:	4808      	ldr	r0, [pc, #32]	; (231b0 <findslot+0x34>)
   23190:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   23194:	3301      	adds	r3, #1
   23196:	d007      	beq.n	231a8 <findslot+0x2c>
   23198:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2319c:	bd10      	pop	{r4, pc}
   2319e:	4618      	mov	r0, r3
   231a0:	f7ff f888 	bl	222b4 <__sinit>
   231a4:	2c13      	cmp	r4, #19
   231a6:	d9f2      	bls.n	2318e <findslot+0x12>
   231a8:	2000      	movs	r0, #0
   231aa:	bd10      	pop	{r4, pc}
   231ac:	200000f8 	.word	0x200000f8
   231b0:	200022d8 	.word	0x200022d8

000231b4 <checkerror.part.0>:
   231b4:	b570      	push	{r4, r5, r6, lr}
   231b6:	f7fb f845 	bl	1e244 <__errno>
   231ba:	2413      	movs	r4, #19
   231bc:	4605      	mov	r5, r0
   231be:	2600      	movs	r6, #0
   231c0:	4620      	mov	r0, r4
   231c2:	4631      	mov	r1, r6
   231c4:	beab      	bkpt	0x00ab
   231c6:	4604      	mov	r4, r0
   231c8:	f04f 30ff 	mov.w	r0, #4294967295
   231cc:	602c      	str	r4, [r5, #0]
   231ce:	bd70      	pop	{r4, r5, r6, pc}

000231d0 <_read>:
   231d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   231d2:	b085      	sub	sp, #20
   231d4:	460c      	mov	r4, r1
   231d6:	4616      	mov	r6, r2
   231d8:	f7ff ffd0 	bl	2317c <findslot>
   231dc:	b1c8      	cbz	r0, 23212 <_read+0x42>
   231de:	6803      	ldr	r3, [r0, #0]
   231e0:	9301      	str	r3, [sp, #4]
   231e2:	9402      	str	r4, [sp, #8]
   231e4:	4605      	mov	r5, r0
   231e6:	9603      	str	r6, [sp, #12]
   231e8:	2406      	movs	r4, #6
   231ea:	af01      	add	r7, sp, #4
   231ec:	4620      	mov	r0, r4
   231ee:	4639      	mov	r1, r7
   231f0:	beab      	bkpt	0x00ab
   231f2:	4604      	mov	r4, r0
   231f4:	1c62      	adds	r2, r4, #1
   231f6:	4620      	mov	r0, r4
   231f8:	d005      	beq.n	23206 <_read+0x36>
   231fa:	686b      	ldr	r3, [r5, #4]
   231fc:	1a30      	subs	r0, r6, r0
   231fe:	4403      	add	r3, r0
   23200:	606b      	str	r3, [r5, #4]
   23202:	b005      	add	sp, #20
   23204:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23206:	f7ff ffd5 	bl	231b4 <checkerror.part.0>
   2320a:	1c43      	adds	r3, r0, #1
   2320c:	d1f5      	bne.n	231fa <_read+0x2a>
   2320e:	b005      	add	sp, #20
   23210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23212:	f7fb f817 	bl	1e244 <__errno>
   23216:	2309      	movs	r3, #9
   23218:	6003      	str	r3, [r0, #0]
   2321a:	f04f 30ff 	mov.w	r0, #4294967295
   2321e:	e7f0      	b.n	23202 <_read+0x32>

00023220 <_swilseek>:
   23220:	b5f0      	push	{r4, r5, r6, r7, lr}
   23222:	b083      	sub	sp, #12
   23224:	460d      	mov	r5, r1
   23226:	4614      	mov	r4, r2
   23228:	f7ff ffa8 	bl	2317c <findslot>
   2322c:	2800      	cmp	r0, #0
   2322e:	d03a      	beq.n	232a6 <_swilseek+0x86>
   23230:	2c02      	cmp	r4, #2
   23232:	d825      	bhi.n	23280 <_swilseek+0x60>
   23234:	2c01      	cmp	r4, #1
   23236:	4606      	mov	r6, r0
   23238:	d01f      	beq.n	2327a <_swilseek+0x5a>
   2323a:	2c02      	cmp	r4, #2
   2323c:	d010      	beq.n	23260 <_swilseek+0x40>
   2323e:	466f      	mov	r7, sp
   23240:	6833      	ldr	r3, [r6, #0]
   23242:	240a      	movs	r4, #10
   23244:	e88d 0028 	stmia.w	sp, {r3, r5}
   23248:	4620      	mov	r0, r4
   2324a:	4639      	mov	r1, r7
   2324c:	beab      	bkpt	0x00ab
   2324e:	4604      	mov	r4, r0
   23250:	1c63      	adds	r3, r4, #1
   23252:	d01c      	beq.n	2328e <_swilseek+0x6e>
   23254:	2c00      	cmp	r4, #0
   23256:	db23      	blt.n	232a0 <_swilseek+0x80>
   23258:	6075      	str	r5, [r6, #4]
   2325a:	4628      	mov	r0, r5
   2325c:	b003      	add	sp, #12
   2325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23260:	af02      	add	r7, sp, #8
   23262:	6803      	ldr	r3, [r0, #0]
   23264:	f847 3d08 	str.w	r3, [r7, #-8]!
   23268:	240c      	movs	r4, #12
   2326a:	4620      	mov	r0, r4
   2326c:	4639      	mov	r1, r7
   2326e:	beab      	bkpt	0x00ab
   23270:	4604      	mov	r4, r0
   23272:	1c61      	adds	r1, r4, #1
   23274:	d00f      	beq.n	23296 <_swilseek+0x76>
   23276:	4425      	add	r5, r4
   23278:	e7e2      	b.n	23240 <_swilseek+0x20>
   2327a:	6840      	ldr	r0, [r0, #4]
   2327c:	182d      	adds	r5, r5, r0
   2327e:	d5de      	bpl.n	2323e <_swilseek+0x1e>
   23280:	f7fa ffe0 	bl	1e244 <__errno>
   23284:	2316      	movs	r3, #22
   23286:	6003      	str	r3, [r0, #0]
   23288:	f04f 35ff 	mov.w	r5, #4294967295
   2328c:	e7e5      	b.n	2325a <_swilseek+0x3a>
   2328e:	f7ff ff91 	bl	231b4 <checkerror.part.0>
   23292:	4604      	mov	r4, r0
   23294:	e7de      	b.n	23254 <_swilseek+0x34>
   23296:	f7ff ff8d 	bl	231b4 <checkerror.part.0>
   2329a:	1c42      	adds	r2, r0, #1
   2329c:	4604      	mov	r4, r0
   2329e:	d1ea      	bne.n	23276 <_swilseek+0x56>
   232a0:	f04f 35ff 	mov.w	r5, #4294967295
   232a4:	e7d9      	b.n	2325a <_swilseek+0x3a>
   232a6:	f7fa ffcd 	bl	1e244 <__errno>
   232aa:	2309      	movs	r3, #9
   232ac:	6003      	str	r3, [r0, #0]
   232ae:	f04f 35ff 	mov.w	r5, #4294967295
   232b2:	e7d2      	b.n	2325a <_swilseek+0x3a>

000232b4 <_lseek>:
   232b4:	f7ff bfb4 	b.w	23220 <_swilseek>

000232b8 <_write>:
   232b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   232ba:	b085      	sub	sp, #20
   232bc:	460c      	mov	r4, r1
   232be:	4616      	mov	r6, r2
   232c0:	f7ff ff5c 	bl	2317c <findslot>
   232c4:	b350      	cbz	r0, 2331c <_write+0x64>
   232c6:	6803      	ldr	r3, [r0, #0]
   232c8:	9301      	str	r3, [sp, #4]
   232ca:	9402      	str	r4, [sp, #8]
   232cc:	4605      	mov	r5, r0
   232ce:	9603      	str	r6, [sp, #12]
   232d0:	2405      	movs	r4, #5
   232d2:	af01      	add	r7, sp, #4
   232d4:	4620      	mov	r0, r4
   232d6:	4639      	mov	r1, r7
   232d8:	beab      	bkpt	0x00ab
   232da:	4604      	mov	r4, r0
   232dc:	1c63      	adds	r3, r4, #1
   232de:	d016      	beq.n	2330e <_write+0x56>
   232e0:	2c00      	cmp	r4, #0
   232e2:	db18      	blt.n	23316 <_write+0x5e>
   232e4:	686a      	ldr	r2, [r5, #4]
   232e6:	1b30      	subs	r0, r6, r4
   232e8:	4402      	add	r2, r0
   232ea:	42a6      	cmp	r6, r4
   232ec:	606a      	str	r2, [r5, #4]
   232ee:	d001      	beq.n	232f4 <_write+0x3c>
   232f0:	b005      	add	sp, #20
   232f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   232f4:	f7fa ffa6 	bl	1e244 <__errno>
   232f8:	2513      	movs	r5, #19
   232fa:	4606      	mov	r6, r0
   232fc:	2400      	movs	r4, #0
   232fe:	4628      	mov	r0, r5
   23300:	4621      	mov	r1, r4
   23302:	beab      	bkpt	0x00ab
   23304:	4605      	mov	r5, r0
   23306:	4620      	mov	r0, r4
   23308:	6035      	str	r5, [r6, #0]
   2330a:	b005      	add	sp, #20
   2330c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2330e:	f7ff ff51 	bl	231b4 <checkerror.part.0>
   23312:	4604      	mov	r4, r0
   23314:	e7e4      	b.n	232e0 <_write+0x28>
   23316:	f04f 30ff 	mov.w	r0, #4294967295
   2331a:	e7e9      	b.n	232f0 <_write+0x38>
   2331c:	f7fa ff92 	bl	1e244 <__errno>
   23320:	2309      	movs	r3, #9
   23322:	6003      	str	r3, [r0, #0]
   23324:	f04f 30ff 	mov.w	r0, #4294967295
   23328:	e7e2      	b.n	232f0 <_write+0x38>
   2332a:	bf00      	nop

0002332c <_close>:
   2332c:	b570      	push	{r4, r5, r6, lr}
   2332e:	b082      	sub	sp, #8
   23330:	4604      	mov	r4, r0
   23332:	f7ff ff23 	bl	2317c <findslot>
   23336:	b310      	cbz	r0, 2337e <_close+0x52>
   23338:	3c01      	subs	r4, #1
   2333a:	2c01      	cmp	r4, #1
   2333c:	4606      	mov	r6, r0
   2333e:	d911      	bls.n	23364 <_close+0x38>
   23340:	ad02      	add	r5, sp, #8
   23342:	6833      	ldr	r3, [r6, #0]
   23344:	f845 3d04 	str.w	r3, [r5, #-4]!
   23348:	2402      	movs	r4, #2
   2334a:	4620      	mov	r0, r4
   2334c:	4629      	mov	r1, r5
   2334e:	beab      	bkpt	0x00ab
   23350:	4604      	mov	r4, r0
   23352:	1c63      	adds	r3, r4, #1
   23354:	4620      	mov	r0, r4
   23356:	d00f      	beq.n	23378 <_close+0x4c>
   23358:	b910      	cbnz	r0, 23360 <_close+0x34>
   2335a:	f04f 33ff 	mov.w	r3, #4294967295
   2335e:	6033      	str	r3, [r6, #0]
   23360:	b002      	add	sp, #8
   23362:	bd70      	pop	{r4, r5, r6, pc}
   23364:	4b09      	ldr	r3, [pc, #36]	; (2338c <_close+0x60>)
   23366:	689a      	ldr	r2, [r3, #8]
   23368:	691b      	ldr	r3, [r3, #16]
   2336a:	429a      	cmp	r2, r3
   2336c:	d1e8      	bne.n	23340 <_close+0x14>
   2336e:	f04f 33ff 	mov.w	r3, #4294967295
   23372:	6003      	str	r3, [r0, #0]
   23374:	2000      	movs	r0, #0
   23376:	e7f3      	b.n	23360 <_close+0x34>
   23378:	f7ff ff1c 	bl	231b4 <checkerror.part.0>
   2337c:	e7ec      	b.n	23358 <_close+0x2c>
   2337e:	f7fa ff61 	bl	1e244 <__errno>
   23382:	2309      	movs	r3, #9
   23384:	6003      	str	r3, [r0, #0]
   23386:	f04f 30ff 	mov.w	r0, #4294967295
   2338a:	e7e9      	b.n	23360 <_close+0x34>
   2338c:	200022d8 	.word	0x200022d8

00023390 <_getpid>:
   23390:	2001      	movs	r0, #1
   23392:	4770      	bx	lr

00023394 <_sbrk>:
   23394:	4a0e      	ldr	r2, [pc, #56]	; (233d0 <_sbrk+0x3c>)
   23396:	6813      	ldr	r3, [r2, #0]
   23398:	b510      	push	{r4, lr}
   2339a:	b1ab      	cbz	r3, 233c8 <_sbrk+0x34>
   2339c:	4418      	add	r0, r3
   2339e:	4669      	mov	r1, sp
   233a0:	4288      	cmp	r0, r1
   233a2:	d809      	bhi.n	233b8 <_sbrk+0x24>
   233a4:	490b      	ldr	r1, [pc, #44]	; (233d4 <_sbrk+0x40>)
   233a6:	4c0c      	ldr	r4, [pc, #48]	; (233d8 <_sbrk+0x44>)
   233a8:	6809      	ldr	r1, [r1, #0]
   233aa:	42a1      	cmp	r1, r4
   233ac:	d001      	beq.n	233b2 <_sbrk+0x1e>
   233ae:	4288      	cmp	r0, r1
   233b0:	d802      	bhi.n	233b8 <_sbrk+0x24>
   233b2:	6010      	str	r0, [r2, #0]
   233b4:	4618      	mov	r0, r3
   233b6:	bd10      	pop	{r4, pc}
   233b8:	f7fa ff44 	bl	1e244 <__errno>
   233bc:	230c      	movs	r3, #12
   233be:	6003      	str	r3, [r0, #0]
   233c0:	f04f 33ff 	mov.w	r3, #4294967295
   233c4:	4618      	mov	r0, r3
   233c6:	bd10      	pop	{r4, pc}
   233c8:	4b04      	ldr	r3, [pc, #16]	; (233dc <_sbrk+0x48>)
   233ca:	6013      	str	r3, [r2, #0]
   233cc:	e7e6      	b.n	2339c <_sbrk+0x8>
   233ce:	bf00      	nop
   233d0:	200022d4 	.word	0x200022d4
   233d4:	20000aa8 	.word	0x20000aa8
   233d8:	cafedead 	.word	0xcafedead
   233dc:	200023a0 	.word	0x200023a0

000233e0 <_swistat>:
   233e0:	b570      	push	{r4, r5, r6, lr}
   233e2:	460d      	mov	r5, r1
   233e4:	f7ff feca 	bl	2317c <findslot>
   233e8:	b1b8      	cbz	r0, 2341a <_swistat+0x3a>
   233ea:	686b      	ldr	r3, [r5, #4]
   233ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   233f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   233f4:	4606      	mov	r6, r0
   233f6:	606b      	str	r3, [r5, #4]
   233f8:	62ea      	str	r2, [r5, #44]	; 0x2c
   233fa:	240c      	movs	r4, #12
   233fc:	4620      	mov	r0, r4
   233fe:	4631      	mov	r1, r6
   23400:	beab      	bkpt	0x00ab
   23402:	4604      	mov	r4, r0
   23404:	1c62      	adds	r2, r4, #1
   23406:	4620      	mov	r0, r4
   23408:	d002      	beq.n	23410 <_swistat+0x30>
   2340a:	6128      	str	r0, [r5, #16]
   2340c:	2000      	movs	r0, #0
   2340e:	bd70      	pop	{r4, r5, r6, pc}
   23410:	f7ff fed0 	bl	231b4 <checkerror.part.0>
   23414:	1c43      	adds	r3, r0, #1
   23416:	d1f8      	bne.n	2340a <_swistat+0x2a>
   23418:	e7f9      	b.n	2340e <_swistat+0x2e>
   2341a:	f7fa ff13 	bl	1e244 <__errno>
   2341e:	2309      	movs	r3, #9
   23420:	6003      	str	r3, [r0, #0]
   23422:	f04f 30ff 	mov.w	r0, #4294967295
   23426:	bd70      	pop	{r4, r5, r6, pc}

00023428 <_fstat>:
   23428:	b538      	push	{r3, r4, r5, lr}
   2342a:	223c      	movs	r2, #60	; 0x3c
   2342c:	460c      	mov	r4, r1
   2342e:	4605      	mov	r5, r0
   23430:	4608      	mov	r0, r1
   23432:	2100      	movs	r1, #0
   23434:	f7fb fe02 	bl	1f03c <memset>
   23438:	4621      	mov	r1, r4
   2343a:	4628      	mov	r0, r5
   2343c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23440:	f7ff bfce 	b.w	233e0 <_swistat>

00023444 <_isatty>:
   23444:	b570      	push	{r4, r5, r6, lr}
   23446:	f7ff fe99 	bl	2317c <findslot>
   2344a:	4605      	mov	r5, r0
   2344c:	b190      	cbz	r0, 23474 <_isatty+0x30>
   2344e:	2409      	movs	r4, #9
   23450:	4620      	mov	r0, r4
   23452:	4629      	mov	r1, r5
   23454:	beab      	bkpt	0x00ab
   23456:	4604      	mov	r4, r0
   23458:	2c01      	cmp	r4, #1
   2345a:	d009      	beq.n	23470 <_isatty+0x2c>
   2345c:	f7fa fef2 	bl	1e244 <__errno>
   23460:	2513      	movs	r5, #19
   23462:	4606      	mov	r6, r0
   23464:	2400      	movs	r4, #0
   23466:	4628      	mov	r0, r5
   23468:	4621      	mov	r1, r4
   2346a:	beab      	bkpt	0x00ab
   2346c:	4605      	mov	r5, r0
   2346e:	6035      	str	r5, [r6, #0]
   23470:	4620      	mov	r0, r4
   23472:	bd70      	pop	{r4, r5, r6, pc}
   23474:	f7fa fee6 	bl	1e244 <__errno>
   23478:	2209      	movs	r2, #9
   2347a:	462c      	mov	r4, r5
   2347c:	6002      	str	r2, [r0, #0]
   2347e:	e7f7      	b.n	23470 <_isatty+0x2c>

00023480 <_exit>:
   23480:	f04f 31ff 	mov.w	r1, #4294967295
   23484:	f000 b800 	b.w	23488 <_kill>

00023488 <_kill>:
   23488:	2906      	cmp	r1, #6
   2348a:	b530      	push	{r4, r5, lr}
   2348c:	bf0c      	ite	eq
   2348e:	4d04      	ldreq	r5, [pc, #16]	; (234a0 <_kill+0x18>)
   23490:	4d04      	ldrne	r5, [pc, #16]	; (234a4 <_kill+0x1c>)
   23492:	2418      	movs	r4, #24
   23494:	4620      	mov	r0, r4
   23496:	4629      	mov	r1, r5
   23498:	beab      	bkpt	0x00ab
   2349a:	4604      	mov	r4, r0
   2349c:	4620      	mov	r0, r4
   2349e:	bd30      	pop	{r4, r5, pc}
   234a0:	00020023 	.word	0x00020023
   234a4:	00020026 	.word	0x00020026

000234a8 <_init>:
   234a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234aa:	bf00      	nop
   234ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   234ae:	bc08      	pop	{r3}
   234b0:	469e      	mov	lr, r3
   234b2:	4770      	bx	lr

000234b4 <_fini>:
   234b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234b6:	bf00      	nop
   234b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   234ba:	bc08      	pop	{r3}
   234bc:	469e      	mov	lr, r3
   234be:	4770      	bx	lr

000234c0 <__init_array_start>:
   234c0:	0002112d 	.word	0x0002112d

000234c4 <__frame_dummy_init_array_entry>:
   234c4:	00004289 00007f91 0000a095 0000a445     .B..........E...
   234d4:	0000af71 0000bb01 0000e031 0000f839     q.......1...9...
   234e4:	00010561 000108d9 000126a9 0001278d     a........&...'..
   234f4:	000140b9                                .@..

000234f8 <__do_global_dtors_aux_fini_array_entry>:
   234f8:	00004265                                eB..

000234fc <__fini_array_end>:
   234fc:	6c756146 	.word	0x6c756146
   23500:	70207374 	.word	0x70207374
   23504:	65736572 	.word	0x65736572
   23508:	202e746e 	.word	0x202e746e
   2350c:	6c637943 	.word	0x6c637943
   23510:	20676e69 	.word	0x20676e69
   23514:	62616e65 	.word	0x62616e65
   23518:	7320656c 	.word	0x7320656c
   2351c:	616e6769 	.word	0x616e6769
   23520:	6f74206c 	.word	0x6f74206c
   23524:	746f6d20 	.word	0x746f6d20
   23528:	7420726f 	.word	0x7420726f
   2352c:	6c63206f 	.word	0x6c63206f
   23530:	20726165 	.word	0x20726165
   23534:	6c756166 	.word	0x6c756166
   23538:	002e7374 	.word	0x002e7374
   2353c:	61656c43 	.word	0x61656c43
   23540:	676e6972 	.word	0x676e6972
   23544:	656c6120 	.word	0x656c6120
   23548:	2e737472 	.word	0x2e737472
   2354c:	00000000 	.word	0x00000000
   23550:	72656c41 	.word	0x72656c41
   23554:	70207374 	.word	0x70207374
   23558:	65736572 	.word	0x65736572
   2355c:	203a746e 	.word	0x203a746e
   23560:	00000000 	.word	0x00000000
   23564:	20202020 	.word	0x20202020
   23568:	69746f4d 	.word	0x69746f4d
   2356c:	61436e6f 	.word	0x61436e6f
   23570:	6c65636e 	.word	0x6c65636e
   23574:	6e496465 	.word	0x6e496465
   23578:	72656c41 	.word	0x72656c41
   2357c:	00002074 	.word	0x00002074
   23580:	20202020 	.word	0x20202020
   23584:	69746f4d 	.word	0x69746f4d
   23588:	61436e6f 	.word	0x61436e6f
   2358c:	6c65636e 	.word	0x6c65636e
   23590:	6f506465 	.word	0x6f506465
   23594:	69746973 	.word	0x69746973
   23598:	694c6576 	.word	0x694c6576
   2359c:	2074696d 	.word	0x2074696d
   235a0:	00000000 	.word	0x00000000
   235a4:	20202020 	.word	0x20202020
   235a8:	69746f4d 	.word	0x69746f4d
   235ac:	61436e6f 	.word	0x61436e6f
   235b0:	6c65636e 	.word	0x6c65636e
   235b4:	654e6465 	.word	0x654e6465
   235b8:	69746167 	.word	0x69746167
   235bc:	694c6576 	.word	0x694c6576
   235c0:	2074696d 	.word	0x2074696d
   235c4:	00000000 	.word	0x00000000
   235c8:	20202020 	.word	0x20202020
   235cc:	69746f4d 	.word	0x69746f4d
   235d0:	61436e6f 	.word	0x61436e6f
   235d4:	6c65636e 	.word	0x6c65636e
   235d8:	65536465 	.word	0x65536465
   235dc:	726f736e 	.word	0x726f736e
   235e0:	6f745345 	.word	0x6f745345
   235e4:	00002070 	.word	0x00002070
   235e8:	20202020 	.word	0x20202020
   235ec:	69746f4d 	.word	0x69746f4d
   235f0:	61436e6f 	.word	0x61436e6f
   235f4:	6c65636e 	.word	0x6c65636e
   235f8:	6f4d6465 	.word	0x6f4d6465
   235fc:	44726f74 	.word	0x44726f74
   23600:	62617369 	.word	0x62617369
   23604:	2064656c 	.word	0x2064656c
   23608:	00000000 	.word	0x00000000
   2360c:	20202020 	.word	0x20202020
   23610:	6f746f4d 	.word	0x6f746f4d
   23614:	75614672 	.word	0x75614672
   23618:	6465746c 	.word	0x6465746c
   2361c:	00000020 	.word	0x00000020
   23620:	6d6d6f43 	.word	0x6d6d6f43
   23624:	69646e61 	.word	0x69646e61
   23628:	0020676e 	.word	0x0020676e
   2362c:	6c757020 	.word	0x6c757020
   23630:	00736573 	.word	0x00736573
   23634:	69766f4d 	.word	0x69766f4d
   23638:	2e2e676e 	.word	0x2e2e676e
   2363c:	69615720 	.word	0x69615720
   23640:	676e6974 	.word	0x676e6974
   23644:	726f6620 	.word	0x726f6620
   23648:	464c4820 	.word	0x464c4820
   2364c:	00000042 	.word	0x00000042
   23650:	62616e45 	.word	0x62616e45
   23654:	6120656c 	.word	0x6120656c
   23658:	6d6f7475 	.word	0x6d6f7475
   2365c:	63697461 	.word	0x63697461
   23660:	75616620 	.word	0x75616620
   23664:	6820746c 	.word	0x6820746c
   23668:	6c646e61 	.word	0x6c646e61
   2366c:	20676e69 	.word	0x20676e69
   23670:	73207962 	.word	0x73207962
   23674:	69747465 	.word	0x69747465
   23678:	4820676e 	.word	0x4820676e
   2367c:	4c444e41 	.word	0x4c444e41
   23680:	4c415f45 	.word	0x4c415f45
   23684:	53545245 	.word	0x53545245
   23688:	206f7420 	.word	0x206f7420
   2368c:	00002e31 	.word	0x00002e31
   23690:	69746f4d 	.word	0x69746f4d
   23694:	6d206e6f 	.word	0x6d206e6f
   23698:	6e207961 	.word	0x6e207961
   2369c:	6820746f 	.word	0x6820746f
   236a0:	20657661 	.word	0x20657661
   236a4:	706d6f63 	.word	0x706d6f63
   236a8:	6574656c 	.word	0x6574656c
   236ac:	73612064 	.word	0x73612064
   236b0:	70786520 	.word	0x70786520
   236b4:	65746365 	.word	0x65746365
   236b8:	50202e64 	.word	0x50202e64
   236bc:	65636f72 	.word	0x65636f72
   236c0:	77206465 	.word	0x77206465
   236c4:	20687469 	.word	0x20687469
   236c8:	74756163 	.word	0x74756163
   236cc:	2e6e6f69 	.word	0x2e6e6f69
   236d0:	00000000 	.word	0x00000000
   236d4:	65766f4d 	.word	0x65766f4d
   236d8:	6e6f4420 	.word	0x6e6f4420
   236dc:	00000065 	.word	0x00000065
   236e0:	6f746f4d 	.word	0x6f746f4d
   236e4:	6c612072 	.word	0x6c612072
   236e8:	20747265 	.word	0x20747265
   236ec:	65746564 	.word	0x65746564
   236f0:	64657463 	.word	0x64657463
   236f4:	0000002e 	.word	0x0000002e
   236f8:	62616e45 	.word	0x62616e45
   236fc:	6120656c 	.word	0x6120656c
   23700:	6d6f7475 	.word	0x6d6f7475
   23704:	63697461 	.word	0x63697461
   23708:	656c6120 	.word	0x656c6120
   2370c:	68207472 	.word	0x68207472
   23710:	6c646e61 	.word	0x6c646e61
   23714:	20676e69 	.word	0x20676e69
   23718:	73207962 	.word	0x73207962
   2371c:	69747465 	.word	0x69747465
   23720:	4820676e 	.word	0x4820676e
   23724:	4c444e41 	.word	0x4c444e41
   23728:	4c415f45 	.word	0x4c415f45
   2372c:	53545245 	.word	0x53545245
   23730:	206f7420 	.word	0x206f7420
   23734:	00002e31 	.word	0x00002e31
   23738:	65766f4d 	.word	0x65766f4d
   2373c:	6e616320 	.word	0x6e616320
   23740:	656c6563 	.word	0x656c6563
   23744:	00002e64 	.word	0x00002e64
   23748:	6f746f4d 	.word	0x6f746f4d
   2374c:	6e452072 	.word	0x6e452072
   23750:	656c6261 	.word	0x656c6261
   23754:	00000064 	.word	0x00000064
   23758:	74696157 	.word	0x74696157
   2375c:	20676e69 	.word	0x20676e69
   23760:	20726f66 	.word	0x20726f66
   23764:	42464c48 	.word	0x42464c48
   23768:	002e2e2e 	.word	0x002e2e2e
   2376c:	62616e45 	.word	0x62616e45
   23770:	676e696c 	.word	0x676e696c
   23774:	79616d20 	.word	0x79616d20
   23778:	746f6e20 	.word	0x746f6e20
   2377c:	76616820 	.word	0x76616820
   23780:	6f632065 	.word	0x6f632065
   23784:	656c706d 	.word	0x656c706d
   23788:	20646574 	.word	0x20646574
   2378c:	65207361 	.word	0x65207361
   23790:	63657078 	.word	0x63657078
   23794:	2e646574 	.word	0x2e646574
   23798:	6f725020 	.word	0x6f725020
   2379c:	64656563 	.word	0x64656563
   237a0:	74697720 	.word	0x74697720
   237a4:	61632068 	.word	0x61632068
   237a8:	6f697475 	.word	0x6f697475
   237ac:	00002e6e 	.word	0x00002e6e
   237b0:	6f746f4d 	.word	0x6f746f4d
   237b4:	65522072 	.word	0x65522072
   237b8:	00796461 	.word	0x00796461

000237bc <CSWTCH.95>:
   237bc:	02030406 00000002                       ........

000237c4 <_ZN9ClearCoreL11tcc_modulesE>:
   237c4:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   237d4:	43001000                                ...C

000237d8 <_ZTVN9ClearCore11MotorDriverE>:
	...
   237e0:	00005435 00005439 00005425 00005429     5T..9T..%T..)T..
   237f0:	0000edf5 00005419 0000542d 0000541d     .....T..-T...T..
   23800:	00005b21 00006355 0000617d 00006275     ![..Uc..}a..ub..
   23810:	0000559d ffffffd0 00000000 0000626d     .U..........mb..
   23820:	0000634d 000055ed                       Mc...U..

00023828 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   23828:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   23838:	42001400 42001800 43001400 43001800     ...B...B...C...C

00023848 <_ZTVN9ClearCore7ISerialE>:
	...
   23850:	00013f3d 00013f3d 00013f3d 00013f3d     =?..=?..=?..=?..
   23860:	00013f3d 00013f3d 00013f3d 00013f3d     =?..=?..=?..=?..
   23870:	00013f3d 00013f3d 00013f3d 00013f3d     =?..=?..=?..=?..
   23880:	00013f3d 00013f3d 00013f3d 00013f3d     =?..=?..=?..=?..
   23890:	00013f3d 00013f3d                       =?..=?..

00023898 <_ZTVN9ClearCore9SerialUsbE>:
	...
   238a0:	000066f9 000066ed 00006711 0000671d     .f...f...g...g..
   238b0:	00006729 00006735 00006741 0000674d     )g..5g..Ag..Mg..
   238c0:	00006759 00006765 00006771 000066f9     Yg..eg..qg...f..
   238d0:	00006705 00006705 00006671 0000667d     .g...g..qf..}f..
   238e0:	00006681 0000668d 00006699 000066a5     .f...f...f...f..
   238f0:	000066b9 0000677d 000067a1 000067d1     .f..}g...g...g..
   23900:	000066c5 000066d1 000066e1 fffffffc     .f...f...f......
   23910:	00000000 0000669d 000066b1 000066bd     .....f...f...f..
   23920:	00006799 000067c9 00006811 000066c9     .g...g...h...f..
   23930:	00006669 000066e5 000066d9 008061fc     if...f...f...a..
   23940:	00806010 00806014 00806018              .`...`...`..

0002394c <_ZTVN9ClearCore12SdCardDriverE>:
	...
   23954:	00010931 00010941 0001185d 00010bb9     1...A...].......
   23964:	00010a65 00007fa1 00010955 0001098d     e.......U.......
   23974:	000109cd 000109a9 000109b9 00010a0d     ................
   23984:	00010929 00007fa9 00010cd1 00007fa5     )...............
   23994:	00010ea5 00010dc1                       ........

0002399c <_ZTVN9ClearCore10XBeeDriverE>:
	...
   239a4:	00010931 00010941 0001185d 00010bb9     1...A...].......
   239b4:	00010a65 00007fa1 00010955 0001098d     e.......U.......
   239c4:	000109cd 000109a9 000109b9 00010a0d     ................
   239d4:	00010929 00007fa9 00010cd1 00007fa5     )...............
   239e4:	00010ea5 00010dc1 40003c00 4101a000     .........<.@...A
   239f4:	43001400                                ...C

000239f8 <_ZN9ClearCore10hBridgeConE>:
   239f8:	2000136c 200013f0                       l.. ... 

00023a00 <_ZN9ClearCore15MotorConnectorsE>:
   23a00:	20000b60 20000ca8 20000df0 20000f38     `.. ... ... 8.. 

00023a10 <_ZN9ClearCoreL10ConnectorsE>:
   23a10:	200011e0 2000124c 200012ac 2000130c     ... L.. ... ... 
   23a20:	2000136c 200013f0 20001150 20001180     l.. ... P.. ... 
   23a30:	200011b0 20000b18 20001084 200010c8     ... ... ... ... 
   23a40:	2000110c 20001474 20000b60 20000ca8     ... t.. `.. ... 
   23a50:	20000df0 20000f38 200015d4 2000172c     ... 8.. ... ,.. 
   23a60:	20001484                                ... 

00023a64 <_ZN9ClearCoreL10MicroSD_SSE>:
   23a64:	0504003d ffffff00 ffffffff 00ff0500     =...............

00023a74 <_ZN9ClearCoreL10XBee_Rx_INE>:
   23a74:	08180150 ffffff00 ffff0102 00ffffff     P...............

00023a84 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   23a84:	02120142 ffffff00 ffff0207 00040001     B...............

00023a94 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   23a94:	04140144 ffffff00 ffff0107 00060201     D...............

00023aa4 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   23aa4:	0a0a001c ffffff00 00010200 00040200     ................

00023ab4 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   23ab4:	0909001b ff03ff00 01000100 00ff0100     ................

00023ac4 <_ZN9ClearCoreL11IN06n_QuadAE>:
   23ac4:	00100238 ffffff01 ffff0006 00ff0000     8...............

00023ad4 <_ZN9ClearCoreL11IN07n_QuadBE>:
   23ad4:	01110239 ffffff01 ffff0106 00ff0100     9...............

00023ae4 <_ZN9ClearCoreL11IN08n_QuadIE>:
   23ae4:	0212023a ffffff01 ffff0206 00ff0200     :...............

00023af4 <_ZN9ClearCoreL11IN09n_AIN09E>:
   23af4:	0707010e ff09ff01 ffffffff 00ffffff     ................

00023b04 <_ZN9ClearCoreL11IN10n_AIN10E>:
   23b04:	0606010d ff08ff01 ffffffff 00ffffff     ................

00023b14 <_ZN9ClearCoreL11IN11n_AIN11E>:
   23b14:	0505010a ff07ff01 ffffffff 00ffffff     ................

00023b24 <_ZN9ClearCoreL11IN12n_AIN12E>:
   23b24:	03030206 ff05ff01 ffffffff 00ffffff     ................

00023b34 <_ZN9ClearCoreL11MicroSD_SCKE>:
   23b34:	09090110 ff01ff00 01040104 00ffffff     ................

00023b44 <_ZN9ClearCoreL11XBee_CTS_INE>:
   23b44:	09190253 ffffff00 ffff0302 00ffffff     S...............

00023b54 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   23b54:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00023b64 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   23b64:	05150145 ffffff00 ffff0007 00070301     E...............

00023b74 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   23b74:	ff08001a ff02ff00 00000000 00ff0000     ................

00023b84 <_ZN9ClearCoreL12MicroSD_MISOE>:
   23b84:	0a0a0120 ffffff00 00050204 00040400      ...............

00023b94 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   23b94:	0808010f ff00ff00 00040004 00ffffff     ................

00023ba4 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   23ba4:	07170049 ffffff00 01040005 00ff0701     I...............

00023bb4 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   23bb4:	08180252 ffffff00 ffff0202 00ffffff     R...............

00023bc4 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   23bc4:	03130143 ffffff00 ffff0307 00050101     C...............

00023bd4 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   23bd4:	0b0b001d ffffff00 01010300 00050300     ................

00023be4 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   23be4:	05050012 01ffff00 0100ffff 00ffffff     ................

00023bf4 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   23bf4:	04140046 ffffff01 00070205 00ff0401     F...............

00023c04 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   23c04:	00100140 ffffff00 00060005 00020003     @...............

00023c14 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   23c14:	03030164 ffffff00 0106ffff 00ffffff     d...............

00023c24 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   23c24:	0e0e0124 ffffff00 00050204 00000004     $...............

00023c34 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   23c34:	0c0c0122 ffffff00 00040004 00060003     "...............

00023c44 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   23c44:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

00023c54 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   23c54:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

00023c64 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   23c64:	0f0f0125 ffffff00 01050304 00010104     %...............

00023c74 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   23c74:	0d0d0123 ffffff00 01040104 00070103     #...............

00023c84 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   23c84:	06160048 ffffff00 00040003 00ff0601     H...............

00023c94 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   23c94:	00100034 ffffff00 00020001 00020001     4...............

00023ca4 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   23ca4:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

00023cb4 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   23cb4:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

00023cc4 <_ZN9ClearCoreL5IN01nE>:
   23cc4:	02110107 00ffff00 ffffffff 00ffffff     ................

00023cd4 <_ZN9ClearCoreL5IN02nE>:
   23cd4:	03030008 ffffff00 ffffffff 00ffffff     ................

00023ce4 <_ZN9ClearCoreL5IN03nE>:
   23ce4:	04150211 ffffff00 0000ffff 00ffffff     ................

00023cf4 <_ZN9ClearCoreL5IN04nE>:
   23cf4:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

00023d04 <_ZN9ClearCoreL5IN05nE>:
   23d04:	0313023b ffffff00 ffff0306 00ff0300     ;...............

00023d14 <_ZN9ClearCoreL5OUT00E>:
   23d14:	00000001 ffffff00 0002ffff 00ffffff     ................

00023d24 <_ZN9ClearCoreL5OUT01E>:
   23d24:	01010002 ffffff00 0102ffff 00ffffff     ................

00023d34 <_ZN9ClearCoreL5OUT02E>:
   23d34:	06060013 ffffff00 0001ffff 00ffffff     ................

00023d44 <_ZN9ClearCoreL5OUT03E>:
   23d44:	07070014 ffffff00 0101ffff 00ffffff     ................

00023d54 <_ZN9ClearCoreL6Aout00E>:
   23d54:	02020007 01ffff00 0100ffff 00ffffff     ................

00023d64 <_ZN9ClearCoreL6Mtr0_BE>:
   23d64:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

00023d74 <_ZN9ClearCoreL6Mtr1_BE>:
   23d74:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

00023d84 <_ZN9ClearCoreL7Mtr1_AnE>:
   23d84:	05150047 ffffff00 01070305 00ff0501     G...............

00023d94 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   23d94:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   23da4:	00000080 00000040 00000020 00000010     ....@... .......
   23db4:	00000008 00000004 01000000 02000000     ................
   23dc4:	04000000 08000000 00800000 00400000     ..............@.
   23dd4:	00200000 00004000 00008000 00040000     .. ..@..........
   23de4:	00080000                                ....

00023de8 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   23df0:	0000bb11 0000bb85 00013f3d              ........=?..

00023dfc <_ZN9ClearCoreL11IN06n_QuadAE>:
   23dfc:	00100238 ffffff01 ffff0006 00ff0000     8...............

00023e0c <_ZN9ClearCoreL11IN07n_QuadBE>:
   23e0c:	01110239 ffffff01 ffff0106 00ff0100     9...............

00023e1c <_ZN9ClearCoreL11IN08n_QuadIE>:
   23e1c:	0212023a ffffff01 ffff0206 00ff0200     :...............
   23e2c:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   23e3c:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   23e4c:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   23e5c:	2e747369 00000063 00023ea4 00023e94     ist.c....>...>..
   23e6c:	00023e74 00023e84                       t>...>..

00023e74 <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   23e74:	01010204 ff0bff00 ffffffff 00ffffff     ................

00023e84 <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   23e84:	00000203 ff0aff00 ffffffff 00ffffff     ................

00023e94 <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   23e94:	02020205 ff04ff00 ffffffff 00ffffff     ................

00023ea4 <_ZN9ClearCoreL9_5VOB_MONE>:
   23ea4:	04040109 ff06ff00 ffffffff 00ffffff     ................

00023eb4 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   23ebc:	0000e085 0000e2b5 0000e089 0000e08d     ................
   23ecc:	0000e3ad 0000e3c9 0000e07d 0000541d     ........}....T..
   23edc:	0000e29d 0000e465                       ....e...

00023ee4 <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   23eec:	0000e509 0000e519 0000e50d 0000e511     ................
   23efc:	0000e76d 0000e515 0000e505 0000541d     m............T..
   23f0c:	0000e641 0000e6b9                       A.......

00023f14 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   23f1c:	0000e7b5 0000e889 0000e7b9 0000e7bd     ................
   23f2c:	0000ed25 0000e7d1 0000e07d 0000541d     %.......}....T..
   23f3c:	0000eb19 0000ed65                       ....e...

00023f44 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   23f44:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   23f54:	42001400 42001800 43001400 43001800     ...B...B...C...C

00023f64 <_ZTVN9ClearCore9ConnectorE>:
	...
   23f6c:	0000edd9 00013f3d 00013f3d 00013f3d     ....=?..=?..=?..
   23f7c:	00013f3d 00013f3d 00013f3d 00006669     =?..=?..=?..if..
   23f8c:	00013f3d 00013f3d                       =?..=?..

00023f94 <_ZTVN9ClearCore9DigitalInE>:
	...
   23f9c:	0000eddd 0000ede1 0000eded 0000edf1     ................
   23fac:	0000edf5 00005419 0000e505 0000541d     .....T.......T..
   23fbc:	0000eee9 0000ee1d                       ........

00023fc4 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   23fcc:	0000f149 0000f5e1 0000f14d 0000f151     I.......M...Q...
   23fdc:	0000f215 0000f251 0000e07d 0000541d     ....Q...}....T..
   23fec:	0000f405 0000f519                       ........

00023ff4 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   23ff4:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   24004:	43001000                                ...C

00024008 <_ZTVN9ClearCore7CcioPinE>:
	...
   24010:	00010571 000105cd 00010575 00010579     q.......u...y...
   24020:	0001063d 00010699 00010679 00006669     =.......y...if..
   24030:	00010589 0001058d                       ........

00024038 <_ZTVN9ClearCore10SerialBaseE>:
	...
   24040:	00010931 00010941 0001185d 00010bb9     1...A...].......
   24050:	00010a65 00007fa1 00010955 0001098d     e.......U.......
   24060:	000109cd 000109a9 000109b9 00010a0d     ................
   24070:	00010929 00007fa9 00010cd1 00007fa5     )...............
   24080:	00010ea5 00010dc1                       ........

00024088 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   24088:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   24098:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000240a8 <_ZTVN9ClearCore12SerialDriverE>:
	...
   240b0:	00010931 00010941 00011f2d 00011f81     1...A...-.......
   240c0:	00011dbd 00007fa1 00010955 0001098d     ........U.......
   240d0:	000109cd 000109a9 000109b9 00010a0d     ................
   240e0:	00010929 00007fa9 00010cd1 00007fa5     )...............
   240f0:	00010ea5 00010dc1 00011d11 00011dd9     ................
   24100:	00011d21 00011d2d 00011d3d 000120c5     !...-...=.... ..
   24110:	00011d51 00011fcd 00011d5d fffffebc     Q.......].......
   24120:	00000000 00011d19 00011f25 00011d25     ........%...%...
   24130:	00011d35 00011d49 00012179 00011d55     5...I...y!..U...
   24140:	00006669 00011d61 000120bd              if..a.... ..

0002414c <_ZTVN9ClearCore9LedDriverE>:
	...
   24154:	00012181 00012185 00012191 00012195     .!...!...!...!..
   24164:	000121a9 000121c1 00012199 00006669     .!...!...!..if..
   24174:	0001219d 000121a1                       .!...!..

0002417c <_usb_ep_cfgs>:
   2417c:	20001f2c 00000000 00000040 20001f6c     ,.. ....@...l.. 
   2418c:	00000000 00000040 20001fac 00000000     ....@...... ....
   2419c:	00000040                                @...

000241a0 <sinTable_q15>:
   241a0:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   241b0:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   241c0:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   241d0:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   241e0:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   241f0:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   24200:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   24210:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   24220:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   24230:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   24240:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   24250:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   24260:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   24270:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   24280:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   24290:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   242a0:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   242b0:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   242c0:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   242d0:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   242e0:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   242f0:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   24300:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   24310:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   24320:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   24330:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   24340:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   24350:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   24360:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   24370:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   24380:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   24390:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   243a0:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   243b0:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   243c0:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   243d0:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   243e0:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   243f0:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   24400:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   24410:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   24420:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   24430:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   24440:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   24450:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   24460:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   24470:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   24480:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   24490:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   244a0:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   244b0:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   244c0:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   244d0:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   244e0:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   244f0:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   24500:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   24510:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   24520:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   24530:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   24540:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   24550:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   24560:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   24570:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   24580:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   24590:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   245a0:	00000000 65727570 72697620 6c617574     ....pure virtual
   245b0:	74656d20 20646f68 6c6c6163 000a6465      method called..
   245c0:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

000245d0 <_ZTISt9bad_alloc>:
   245d0:	000246f0 000245dc 00024630              .F...E..0F..

000245dc <_ZTSSt9bad_alloc>:
   245dc:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

000245ec <_ZTVSt9bad_alloc>:
   245ec:	00000000 000245d0 00013f59 00013f6d     .....E..Y?..m?..
   245fc:	00013f51 3a647473 6461623a 6378655f     Q?..std::bad_exc
   2460c:	69747065 00006e6f                       eption..

00024614 <_ZTIN10__cxxabiv115__forced_unwindE>:
   24614:	00024764 00024638                       dG..8F..

0002461c <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   2461c:	00024764 00024658                       dG..XF..

00024624 <_ZTISt13bad_exception>:
   24624:	000246f0 0002467c 00024630              .F..|F..0F..

00024630 <_ZTISt9exception>:
   24630:	00024764 00024690                       dG...F..

00024638 <_ZTSN10__cxxabiv115__forced_unwindE>:
   24638:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   24648:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00024658 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   24658:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   24668:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   24678:	00456e6f                                onE.

0002467c <_ZTSSt13bad_exception>:
   2467c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   2468c:	0000006e                                n...

00024690 <_ZTSSt9exception>:
   24690:	65397453 70656378 6e6f6974 00000000     St9exception....

000246a0 <_ZTVSt13bad_exception>:
   246a0:	00000000 00024624 000140e5 000140f1     ....$F...@...@..
   246b0:	000140e9                                .@..

000246b4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   246b4:	000246f0 000246c0 0002472c              .F...F..,G..

000246c0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   246c0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   246d0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   246e0:	456f666e 00000000                       nfoE....

000246e8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   246e8:	00000000 000246b4 000142b9 000142cd     .....F...B...B..
   246f8:	000143e5 000143e5 000144a1 00014415     .C...C...D...D..
   24708:	000143b5 00014325 000142e9              .C..%C...B..

00024714 <_ZTISt9type_info>:
   24714:	00024764 0002471c                       dG...G..

0002471c <_ZTSSt9type_info>:
   2471c:	74397453 5f657079 6f666e69 00000000     St9type_info....

0002472c <_ZTIN10__cxxabiv117__class_type_infoE>:
   2472c:	000246f0 00024738 00024714              .F..8G...G..

00024738 <_ZTSN10__cxxabiv117__class_type_infoE>:
   24738:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   24748:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   24758:	00000045                                E...

0002475c <_ZTVN10__cxxabiv117__class_type_infoE>:
   2475c:	00000000 0002472c 00014459 0001446d     ....,G..YD..mD..
   2476c:	000143e5 000143e5 000144a1 00014415     .C...C...D...D..
   2477c:	00014489 000144cd 0001444d 6d726574     .D...D..MD..term
   2478c:	74616e69 61632065 64656c6c 63657220     inate called rec
   2479c:	69737275 796c6576 0000000a 6d726574     ursively....term
   247ac:	74616e69 61632065 64656c6c 74666120     inate called aft
   247bc:	74207265 776f7268 20676e69 69206e61     er throwing an i
   247cc:	6174736e 2065636e 2720666f 00000000     nstance of '....
   247dc:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   247ec:	64656c6c 74697720 74756f68 206e6120     lled without an 
   247fc:	69746361 65206576 70656378 6e6f6974     active exception
   2480c:	0000000a 68772020 29287461 0020203a     ....  what():  .

0002481c <standard_subs>:
   2481c:	00000074 00025000 00000003 00025000     t....P.......P..
   2482c:	00000003 00000000 00000000 00000061     ............a...
   2483c:	00025314 0000000e 00025314 0000000e     .S.......S......
   2484c:	00025324 00000009 00000062 00025330     $S......b...0S..
   2485c:	00000011 00025330 00000011 00025344     ....0S......DS..
   2486c:	0000000c 00000073 00025354 0000000b     ....s...TS......
   2487c:	00025360 00000046 00025344 0000000c     `S..F...DS......
   2488c:	00000069 000253a8 0000000c 000253b8     i....S.......S..
   2489c:	00000031 000253ec 0000000d 0000006f     1....S......o...
   248ac:	000253fc 0000000c 0002540c 00000031     .S.......T..1...
   248bc:	00025440 0000000d 00000064 00025450     @T......d...PT..
   248cc:	0000000d 00025460 00000032 00025494     ....`T..2....T..
   248dc:	0000000e                                ....

000248e0 <cplus_demangle_builtin_types>:
   248e0:	000256a4 0000000b 000256a4 0000000b     .V.......V......
   248f0:	00000000 000256b0 00000004 000256b8     .....V.......V..
   24900:	00000007 00000007 000256c0 00000004     .........V......
   24910:	000256c8 00000004 00000000 000256d0     .V...........V..
   24920:	00000006 000256d0 00000006 00000008     .....V..........
   24930:	000256d8 0000000b 000256d8 0000000b     .V.......V......
   24940:	00000008 000256e4 00000005 000256e4     .....V.......V..
   24950:	00000005 00000008 000256ec 0000000a     .........V......
   24960:	000256ec 0000000a 00000008 000256f8     .V...........V..
   24970:	0000000d 000256f8 0000000d 00000000     .....V..........
   24980:	00025708 00000003 00025708 00000003     .W.......W......
   24990:	00000001 0002570c 0000000c 0002571c     .....W.......W..
   249a0:	00000008 00000002 00000000 00000000     ................
	...
   249bc:	00025728 00000004 00025728 00000004     (W......(W......
   249cc:	00000003 00025730 0000000d 00025730     ....0W......0W..
   249dc:	0000000d 00000004 00025740 00000008     ........@W......
   249ec:	00025740 00000008 00000000 0002574c     @W..........LW..
   249fc:	00000011 0002574c 00000011 00000000     ....LW..........
	...
   24a48:	00025760 00000005 00025760 00000005     `W......`W......
   24a58:	00000000 00025768 0000000e 00025768     ....hW......hW..
   24a68:	0000000e 00000000 00000000 00000000     ................
	...
   24a84:	00025778 00000004 00025778 00000004     xW......xW......
   24a94:	00000009 00025780 00000007 000256c0     .....W.......V..
   24aa4:	00000004 00000000 00025788 00000009     .........W......
   24ab4:	00025728 00000004 00000005 00025794     (W...........W..
   24ac4:	00000012 00025794 00000012 00000006     .....W..........
   24ad4:	00023768 00000003 00023768 00000003     h7......h7......
   24ae4:	00000000 000257a8 00000009 000257a8     .....W.......W..
   24af4:	00000009 00000000 000257b4 00000009     .........W......
   24b04:	000257b4 00000009 00000000 000257c0     .W...........W..
   24b14:	0000000a 000257c0 0000000a 00000000     .....W..........
   24b24:	000257cc 00000004 000257cc 00000004     .W.......W......
   24b34:	00000008 000257d4 00000008 000257d4     .....W.......W..
   24b44:	00000008 00000000 000257e0 00000008     .........W......
   24b54:	000257e0 00000008 00000000 000257ec     .W...........W..
   24b64:	00000011 000257ec 00000011 00000000     .....W..........

00024b74 <cplus_demangle_operators>:
   24b74:	000254a4 000254a8 00000002 00000002     .T...T..........
   24b84:	000254ac 000254b0 00000001 00000002     .T...T..........
   24b94:	000254b4 000252d8 00000002 00000002     .T...R..........
   24ba4:	000251d0 000254b8 00000001 00000001     .Q...T..........
   24bb4:	000254bc 000254b8 00000001 00000002     .T...T..........
   24bc4:	000254c0 000254c4 00000008 00000001     .T...T..........
   24bd4:	000254d0 000254c4 00000008 00000001     .T...T..........
   24be4:	000254d4 000254d8 0000000a 00000002     .T...T..........
   24bf4:	00024fe0 000254e4 00000002 00000002     .O...T..........
   24c04:	000254e8 000254ec 00000001 00000002     .T...T..........
   24c14:	000254f0 000254f4 00000001 00000001     .T...T..........
   24c24:	000254f8 000254fc 00000002 00000002     .T...T..........
   24c34:	00025500 00025504 00000009 00000001     .U...U..........
   24c44:	00025510 00025514 0000000c 00000002     .U...U..........
   24c54:	00025524 00025528 00000001 00000001     $U..(U..........
   24c64:	0002552c 00025530 00000007 00000001     ,U..0U..........
   24c74:	00025538 0002553c 00000002 00000002     8U..<U..........
   24c84:	00024fe4 0002566c 00000001 00000002     .O..lV..........
   24c94:	00025540 00025544 00000001 00000002     @U..DU..........
   24ca4:	00025548 0002554c 00000002 00000002     HU..LU..........
   24cb4:	00025550 00025554 00000001 00000002     PU..TU..........
   24cc4:	00025558 0002555c 00000002 00000002     XU..\U..........
   24cd4:	00025560 00023768 00000003 00000003     `U..h7..........
   24ce4:	00025564 00023768 00000003 00000003     dU..h7..........
   24cf4:	00025568 00023768 00000003 00000002     hU..h7..........
   24d04:	0002556c 00023768 00000003 00000002     lU..h7..........
   24d14:	00025570 00025574 00000002 00000002     pU..tU..........
   24d24:	000251d4 00025028 00000002 00000001     .Q..(P..........
   24d34:	00025578 000253e8 00000001 00000002     xU...S..........
   24d44:	000251dc 00025048 00000002 00000002     .Q..HP..........
   24d54:	0002557c 00025580 00000003 00000002     |U...U..........
   24d64:	000256d4 00025584 00000002 00000002     .V...U..........
   24d74:	0002501c 00025588 0000000b 00000001     .P...U..........
   24d84:	00025594 00025598 00000002 00000002     .U...U..........
   24d94:	0002559c 000255a0 00000001 00000002     .U...U..........
   24da4:	000255a4 000255a8 00000002 00000002     .U...U..........
   24db4:	000255ac 000255b0 00000002 00000002     .U...U..........
   24dc4:	000255b4 000255b8 00000001 00000002     .U...U..........
   24dd4:	000255bc 00025528 00000001 00000002     .U..(U..........
   24de4:	000255c0 000255c4 00000002 00000001     .U...U..........
   24df4:	000255c8 000255cc 00000005 00000003     .U...U..........
   24e04:	000255d4 000255d8 00000002 00000002     .U...U..........
   24e14:	000257a4 000255b8 00000001 00000001     .W...U..........
   24e24:	000255dc 000255e0 00000001 00000001     .U...U..........
   24e34:	000255e4 000255e8 00000003 00000003     .U...U..........
   24e44:	000255ec 000255f0 00000002 00000002     .U...U..........
   24e54:	000255f4 000255f8 00000002 00000002     .U...U..........
   24e64:	00025320 000255fc 00000001 00000002      S...U..........
   24e74:	00025600 00025604 00000002 00000002     .V...V..........
   24e84:	00025608 0002560c 00000001 00000002     .V...V..........
   24e94:	00025610 00025614 00000003 00000002     .V...V..........
   24ea4:	00025618 0002561c 00000002 00000001     .V...V..........
   24eb4:	00025620 0002560c 00000001 00000001      V...V..........
   24ec4:	00024fe8 00025624 00000002 00000002     .O..$V..........
   24ed4:	00024fec 00025628 00000001 00000003     .O..(V..........
   24ee4:	0002562c 00025630 00000002 00000002     ,V..0V..........
   24ef4:	00025634 00025638 00000003 00000002     4V..8V..........
   24f04:	0002563c 00025640 00000010 00000002     <V..@V..........
   24f14:	00025654 00025658 00000001 00000002     TV..XV..........
   24f24:	0002565c 00025660 00000002 00000002     \V..`V..........
   24f34:	00024fdc 00025664 00000009 00000001     .O..dV..........
   24f44:	000252a0 00025664 00000009 00000001     .R..dV..........
   24f54:	00025670 00025674 0000000b 00000002     pV..tV..........
   24f64:	000254e0 00025680 00000007 00000001     .T...V..........
   24f74:	00025688 00025680 00000007 00000001     .V...V..........
   24f84:	0002568c 00025690 00000005 00000000     .V...V..........
   24f94:	00025698 0002569c 00000006 00000001     .V...V..........
	...
   24fb4:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   24fc4:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   24fd4:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   24fe4:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   24ff4:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   25004:	6f747561 00000000 6c636564 65707974     auto....decltype
   25014:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   25024:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   25034:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   25044:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   25054:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   25064:	20726f66 00000000 736e6f63 63757274     for ....construc
   25074:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   25084:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   25094:	6f666e69 726f6620 00000020 65707974     info for ...type
   250a4:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   250b4:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   250c4:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   250d4:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   250e4:	6e616972 65722074 6e727574 75687420     riant return thu
   250f4:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   25104:	66207373 0020726f 72617567 61762064     ss for .guard va
   25114:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   25124:	74696e69 6e756620 6f697463 6f66206e     init function fo
   25134:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   25144:	636e7566 6e6f6974 726f6620 00000020     function for ...
   25154:	65666572 636e6572 65742065 726f706d     reference tempor
   25164:	20797261 00000023 64646968 61206e65     ary #...hidden a
   25174:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   25184:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   25194:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   251a4:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   251b4:	0000202c 7265706f 726f7461 00000000     , ..operator....
   251c4:	7265706f 726f7461 00000020 00006461     operator ...ad..
   251d4:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   251e4:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   251f4:	006c6c75 736c6166 00000065 65757274     ull.false...true
   25204:	00000000 6176616a 73657220 6372756f     ....java resourc
   25214:	00002065 6c636564 65707974 00002820     e ..decltype (..
   25224:	73696874 00000000 7261707b 0000236d     this....{parm#..
   25234:	626f6c67 63206c61 74736e6f 74637572     global construct
   25244:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   25254:	626f6c67 64206c61 72747365 6f746375     global destructo
   25264:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   25274:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   25284:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   25294:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   252a4:	73657220 63697274 00000074 6c6f7620      restrict... vol
   252b4:	6c697461 00000065 6e6f6320 00007473     atile... const..
   252c4:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   252d4:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   252e4:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   252f4:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   25304:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   25314:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   25324:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   25334:	7361623a 735f6369 6e697274 00000067     :basic_string...
   25344:	69736162 74735f63 676e6972 00000000     basic_string....
   25354:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   25364:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   25374:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   25384:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   25394:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   253a4:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   253b4:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   253c4:	65727473 633c6d61 2c726168 64747320     stream<char, std
   253d4:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   253e4:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   253f4:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   25404:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   25414:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   25424:	64747320 68633a3a 745f7261 74696172      std::char_trait
   25434:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   25444:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   25454:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   25464:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   25474:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   25484:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   25494:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   254a4:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   254b4:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   254c4:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   254d4:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   254e4:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   254f4:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   25504:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   25514:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   25524:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   25534:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   25544:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   25554:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   25564:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   25574:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   25584:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   25594:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   255a4:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   255b4:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   255c4:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   255d4:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   255e4:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   255f4:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   25604:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   25614:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   25624:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   25634:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   25644:	70726574 5f746572 74736163 00000000     terpret_cast....
   25654:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   25664:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   25674:	74617473 635f6369 00747361 657a6973     static_cast.size
   25684:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   25694:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   256a4:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   256b4:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   256c4:	00000000 65747962 00000000 62756f64     ....byte....doub
   256d4:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   256e4:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   256f4:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   25704:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   25714:	746e6920 00000000 69736e75 64656e67      int....unsigned
   25724:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   25734:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   25744:	38323174 00000000 69736e75 64656e67     t128....unsigned
   25754:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   25764:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   25774:	00007472 64696f76 00000000 61686377     rt..void....wcha
   25784:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   25794:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   257a4:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   257b4:	69636564 366c616d 00000034 69636564     decimal64...deci
   257c4:	316c616d 00003832 666c6168 00000000     mal128..half....
   257d4:	72616863 745f3631 00000000 72616863     char16_t....char
   257e4:	745f3233 00000000 6c636564 65707974     32_t....decltype
   257f4:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   25804:	00000000 74727173 00000066              ....sqrtf...

00025810 <TWO52>:
   25810:	00000000 43300000 00000000 c3300000     ......0C......0.

00025820 <_global_impure_ptr>:
   25820:	20000100 00000043 49534f50 00000058     ... C...POSIX...
   25830:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   25840:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   25850:	00000000 33323130 37363534 62613938     ....0123456789ab
   25860:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   25870:	00000030                                0...

00025874 <blanks.8346>:
   25874:	20202020 20202020 20202020 20202020                     

00025884 <zeroes.8347>:
   25884:	30303030 30303030 30303030 30303030     0000000000000000
   25894:	33323130 37363534 62613938 66656463     0123456789abcdef
   258a4:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   258b4:	7a797877 00000000                       wxyz....

000258bc <_ctype_>:
   258bc:	20202000 20202020 28282020 20282828     .         ((((( 
   258cc:	20202020 20202020 20202020 20202020                     
   258dc:	10108820 10101010 10101010 10101010      ...............
   258ec:	04040410 04040404 10040404 10101010     ................
   258fc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2590c:	01010101 01010101 01010101 10101010     ................
   2591c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2592c:	02020202 02020202 02020202 10101010     ................
   2593c:	00000020 00000000 00000000 00000000      ...............
	...
   259c0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

000259d0 <__mprec_bigtens>:
   259d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   259e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   259f0:	7f73bf3c 75154fdd                       <.s..O.u

000259f8 <__mprec_tens>:
   259f8:	00000000 3ff00000 00000000 40240000     .......?......$@
   25a08:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   25a18:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   25a28:	00000000 412e8480 00000000 416312d0     .......A......cA
   25a38:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   25a48:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   25a58:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   25a68:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   25a78:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   25a88:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   25a98:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   25aa8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   25ab8:	79d99db4 44ea7843                       ...yCx.D

00025ac0 <p05.7178>:
   25ac0:	00000005 00000019 0000007d              ........}...

00025acc <__EH_FRAME_BEGIN__>:
   25acc:	00000000                                ....
