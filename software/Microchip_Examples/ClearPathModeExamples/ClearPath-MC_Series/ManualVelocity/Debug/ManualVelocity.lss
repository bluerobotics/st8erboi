
ManualVelocity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000212f0  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  000252f0  000252f0  000252f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  000253ec  000253ec  000253ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ac0  20000000  00025574  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018f0  20000ac0  00026040  00030ac0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a9c97  00000000  00000000  00030bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd66  00000000  00000000  000da850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f0  00000000  00000000  000ea5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007db0  00000000  00000000  000ebda6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f3b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001430b  00000000  00000000  001156d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f1986  00000000  00000000  001299dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000754c  00000000  00000000  0021b364  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000242ca  00000000  00000000  002228b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 ed 98 00 00 d1 42 00 00 d1 42 00 00     ... .....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	89 97 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 5d 96 00 00 6d 96 00 00 7d 96 00 00     .B..]...m...}...
    407c:	8d 96 00 00 9d 96 00 00 ad 96 00 00 bd 96 00 00     ................
    408c:	cd 96 00 00 dd 96 00 00 ed 96 00 00 fd 96 00 00     ................
    409c:	0d 97 00 00 1d 97 00 00 29 97 00 00 39 97 00 00     ........)...9...
    40ac:	49 97 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     I....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 f1 95 00 00 d1 42 00 00 fd 95 00 00     .B.......B......
    4104:	09 96 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    4114:	d1 42 00 00 15 96 00 00 d1 42 00 00 21 96 00 00     .B.......B..!...
    4124:	2d 96 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     -....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 39 96 00 00 d1 42 00 00 45 96 00 00     .B..9....B..E...
    4174:	51 96 00 00 00 00 00 00 00 00 00 00 2d 34 01 00     Q...........-4..
    4184:	31 34 01 00 35 34 01 00 39 34 01 00 e5 95 00 00     14..54..94......
    4194:	dd 97 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	59 97 00 00 d1 42 00 00 d1 42 00 00 71 97 00 00     Y....B...B..q...
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ac0 	.word	0x20000ac0
    4280:	00000000 	.word	0x00000000
    4284:	000252ec 	.word	0x000252ec

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	000252ec 	.word	0x000252ec
    42c4:	20000ac4 	.word	0x20000ac4
    42c8:	20000abc 	.word	0x20000abc
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    42d8:	f01a ff92 	bl	1f200 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42dc:	b168      	cbz	r0, 42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x26>
            if (!SendChar(buffer[iChar])) {
    42de:	4e0d      	ldr	r6, [pc, #52]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    42e0:	1825      	adds	r5, r4, r0
    42e2:	e001      	b.n	42e8 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42e4:	42a5      	cmp	r5, r4
    42e6:	d008      	beq.n	42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x26>
            if (!SendChar(buffer[iChar])) {
    42e8:	f814 1b01 	ldrb.w	r1, [r4], #1
    42ec:	4630      	mov	r0, r6
    42ee:	f001 fe93 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    42f2:	2800      	cmp	r0, #0
    42f4:	d1f6      	bne.n	42e4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x10>
        return Send(nullTermStr) && SendLine();
    }
    42f6:	2000      	movs	r0, #0
    42f8:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    42fa:	210d      	movs	r1, #13
    42fc:	4805      	ldr	r0, [pc, #20]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    42fe:	f001 fe8b 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4302:	2800      	cmp	r0, #0
    4304:	d0f7      	beq.n	42f6 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x22>
    4306:	210a      	movs	r1, #10
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    }
    430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    430e:	f001 be83 	b.w	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4312:	bf00      	nop
    4314:	20001498 	.word	0x20001498

00004318 <_Z14MoveAtVelocityd.part.2>:
 * Parameters:
 *    double velocity  - The velocity in RPM to command
 *
 * Returns: True/False depending on whether a new velocity was reached
 */
bool MoveAtVelocity(double velocity) {
    4318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    431c:	4cb0      	ldr	r4, [pc, #704]	; (45e0 <_Z14MoveAtVelocityd.part.2+0x2c8>)
            if (!SendChar(buffer[iChar])) {
    431e:	4db1      	ldr	r5, [pc, #708]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    4320:	b089      	sub	sp, #36	; 0x24
    4322:	4606      	mov	r6, r0
    4324:	460f      	mov	r7, r1
    4326:	f104 080b 	add.w	r8, r4, #11
    432a:	f814 1b01 	ldrb.w	r1, [r4], #1
    432e:	4628      	mov	r0, r5
    4330:	f001 fe72 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4334:	b108      	cbz	r0, 433a <_Z14MoveAtVelocityd.part.2+0x22>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4336:	45a0      	cmp	r8, r4
    4338:	d1f7      	bne.n	432a <_Z14MoveAtVelocityd.part.2+0x12>
        \note The string representation is capped at 20 characters.
        \return success
    **/
    bool Send(double number, uint8_t precision = 2) {
        char buffer[20];
        snprintf(buffer, sizeof(buffer), "%.*f", precision, number);
    433a:	e9cd 6700 	strd	r6, r7, [sp]
    433e:	a803      	add	r0, sp, #12
    4340:	2302      	movs	r3, #2
    4342:	4aa9      	ldr	r2, [pc, #676]	; (45e8 <_Z14MoveAtVelocityd.part.2+0x2d0>)
    4344:	2114      	movs	r1, #20
    4346:	f01a fd79 	bl	1ee3c <snprintf>
        return Send(nullTermStr, strlen(nullTermStr));
    434a:	a803      	add	r0, sp, #12
    434c:	f01a ff58 	bl	1f200 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4350:	b168      	cbz	r0, 436e <_Z14MoveAtVelocityd.part.2+0x56>
    4352:	ac03      	add	r4, sp, #12
            if (!SendChar(buffer[iChar])) {
    4354:	f8df 828c 	ldr.w	r8, [pc, #652]	; 45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>
    4358:	1825      	adds	r5, r4, r0
    435a:	e001      	b.n	4360 <_Z14MoveAtVelocityd.part.2+0x48>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    435c:	42a5      	cmp	r5, r4
    435e:	d006      	beq.n	436e <_Z14MoveAtVelocityd.part.2+0x56>
            if (!SendChar(buffer[iChar])) {
    4360:	f814 1b01 	ldrb.w	r1, [r4], #1
    4364:	4640      	mov	r0, r8
    4366:	f001 fe57 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    436a:	2800      	cmp	r0, #0
    436c:	d1f6      	bne.n	435c <_Z14MoveAtVelocityd.part.2+0x44>
    436e:	4c9f      	ldr	r4, [pc, #636]	; (45ec <_Z14MoveAtVelocityd.part.2+0x2d4>)
    4370:	4d9c      	ldr	r5, [pc, #624]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    4372:	f104 0804 	add.w	r8, r4, #4
    4376:	f814 1b01 	ldrb.w	r1, [r4], #1
    437a:	4628      	mov	r0, r5
    437c:	f001 fe4c 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4380:	b140      	cbz	r0, 4394 <_Z14MoveAtVelocityd.part.2+0x7c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4382:	4544      	cmp	r4, r8
    4384:	d1f7      	bne.n	4376 <_Z14MoveAtVelocityd.part.2+0x5e>
        return SendChar('\r') && SendChar('\n');
    4386:	210d      	movs	r1, #13
    4388:	4896      	ldr	r0, [pc, #600]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    438a:	f001 fe45 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    438e:	2800      	cmp	r0, #0
    4390:	f040 810d 	bne.w	45ae <_Z14MoveAtVelocityd.part.2+0x296>

    // Determine which order the quadrature must be sent by determining if the
    // new velocity is greater or less than the previously commanded velocity
    // If greater, Input A begins the quadrature. If less, Input B begins the
    // quadrature.
    int32_t currentVelocityRounded = round(commandedVelocity / velocityResolution);
    4394:	4b96      	ldr	r3, [pc, #600]	; (45f0 <_Z14MoveAtVelocityd.part.2+0x2d8>)
    4396:	f8df a274 	ldr.w	sl, [pc, #628]	; 460c <_Z14MoveAtVelocityd.part.2+0x2f4>
    439a:	e9d3 4500 	ldrd	r4, r5, [r3]
    439e:	e9da 8900 	ldrd	r8, r9, [sl]
    43a2:	462b      	mov	r3, r5
    43a4:	4622      	mov	r2, r4
    43a6:	4640      	mov	r0, r8
    43a8:	4649      	mov	r1, r9
    43aa:	f017 ff19 	bl	1c1e0 <__aeabi_ddiv>
    43ae:	ec41 0b10 	vmov	d0, r0, r1
    43b2:	f016 fdd5 	bl	1af60 <round>
    43b6:	ec51 0b10 	vmov	r0, r1, d0
    43ba:	f018 f881 	bl	1c4c0 <__aeabi_d2iz>
    int32_t targetVelocityRounded = round(velocity / velocityResolution);
    43be:	462b      	mov	r3, r5
    int32_t currentVelocityRounded = round(commandedVelocity / velocityResolution);
    43c0:	4683      	mov	fp, r0
    int32_t targetVelocityRounded = round(velocity / velocityResolution);
    43c2:	4622      	mov	r2, r4
    43c4:	4630      	mov	r0, r6
    43c6:	4639      	mov	r1, r7
    43c8:	f017 ff0a 	bl	1c1e0 <__aeabi_ddiv>
    43cc:	ec41 0b10 	vmov	d0, r0, r1
    43d0:	f016 fdc6 	bl	1af60 <round>
    43d4:	ec51 0b10 	vmov	r0, r1, d0
    43d8:	f018 f872 	bl	1c4c0 <__aeabi_d2iz>
    int32_t velocityDifference = labs(targetVelocityRounded - currentVelocityRounded);
    43dc:	eba0 050b 	sub.w	r5, r0, fp
    43e0:	2d00      	cmp	r5, #0
    43e2:	bfb8      	it	lt
    43e4:	426d      	neglt	r5, r5
    for (int32_t i = 0; i < velocityDifference; i++) {
    43e6:	4583      	cmp	fp, r0
    43e8:	d05e      	beq.n	44a8 <_Z14MoveAtVelocityd.part.2+0x190>
    43ea:	f04f 0b00 	mov.w	fp, #0
            Delay_us(5);
            motor.MotorInBState(false);
            Delay_us(5);
        }
        else {
            motor.MotorInBState(true);
    43ee:	4c81      	ldr	r4, [pc, #516]	; (45f4 <_Z14MoveAtVelocityd.part.2+0x2dc>)
    43f0:	e028      	b.n	4444 <_Z14MoveAtVelocityd.part.2+0x12c>
            motor.MotorInAState(true);
    43f2:	4620      	mov	r0, r4
    43f4:	f000 fe40 	bl	5078 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    \brief Blocks for operations usec microseconds

    \param[in] usec Time in microseconds to delay
**/
inline void Delay_us(uint32_t usec) {
    return Delay_cycles(static_cast<uint64_t>(usec) * CYCLES_PER_MICROSECOND);
    43f8:	f44f 7016 	mov.w	r0, #600	; 0x258
    43fc:	2100      	movs	r1, #0
    43fe:	f005 fc63 	bl	9cc8 <Delay_cycles>
            motor.MotorInBState(true);
    4402:	2101      	movs	r1, #1
    4404:	4620      	mov	r0, r4
    4406:	f000 fe51 	bl	50ac <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    440a:	f44f 7016 	mov.w	r0, #600	; 0x258
    440e:	2100      	movs	r1, #0
    4410:	f005 fc5a 	bl	9cc8 <Delay_cycles>
            motor.MotorInAState(false);
    4414:	2100      	movs	r1, #0
    4416:	4620      	mov	r0, r4
    4418:	f000 fe2e 	bl	5078 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    441c:	f44f 7016 	mov.w	r0, #600	; 0x258
    4420:	2100      	movs	r1, #0
    4422:	f005 fc51 	bl	9cc8 <Delay_cycles>
            motor.MotorInBState(false);
    4426:	2100      	movs	r1, #0
    4428:	4620      	mov	r0, r4
    442a:	f000 fe3f 	bl	50ac <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    for (int32_t i = 0; i < velocityDifference; i++) {
    442e:	f10b 0b01 	add.w	fp, fp, #1
    4432:	f44f 7016 	mov.w	r0, #600	; 0x258
    4436:	2100      	movs	r1, #0
    4438:	f005 fc46 	bl	9cc8 <Delay_cycles>
    443c:	455d      	cmp	r5, fp
    443e:	d033      	beq.n	44a8 <_Z14MoveAtVelocityd.part.2+0x190>
    4440:	e9da 8900 	ldrd	r8, r9, [sl]
        if (velocity > commandedVelocity) {
    4444:	4642      	mov	r2, r8
    4446:	4639      	mov	r1, r7
    4448:	464b      	mov	r3, r9
    444a:	4630      	mov	r0, r6
    444c:	f018 f82e 	bl	1c4ac <__aeabi_dcmpgt>
            motor.MotorInAState(true);
    4450:	2101      	movs	r1, #1
        if (velocity > commandedVelocity) {
    4452:	4680      	mov	r8, r0
    4454:	2800      	cmp	r0, #0
    4456:	d1cc      	bne.n	43f2 <_Z14MoveAtVelocityd.part.2+0xda>
            motor.MotorInBState(true);
    4458:	2101      	movs	r1, #1
    445a:	4620      	mov	r0, r4
    445c:	f000 fe26 	bl	50ac <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    4460:	f44f 7016 	mov.w	r0, #600	; 0x258
    4464:	2100      	movs	r1, #0
    4466:	f005 fc2f 	bl	9cc8 <Delay_cycles>
            Delay_us(5);
            motor.MotorInAState(true);
    446a:	2101      	movs	r1, #1
    446c:	4620      	mov	r0, r4
    446e:	f000 fe03 	bl	5078 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    4472:	f44f 7016 	mov.w	r0, #600	; 0x258
    4476:	2100      	movs	r1, #0
    4478:	f005 fc26 	bl	9cc8 <Delay_cycles>
            Delay_us(5);
            motor.MotorInBState(false);
    447c:	4641      	mov	r1, r8
    447e:	4620      	mov	r0, r4
    4480:	f000 fe14 	bl	50ac <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    4484:	f44f 7016 	mov.w	r0, #600	; 0x258
    4488:	2100      	movs	r1, #0
    448a:	f005 fc1d 	bl	9cc8 <Delay_cycles>
            Delay_us(5);
            motor.MotorInAState(false);
    448e:	4641      	mov	r1, r8
    4490:	4620      	mov	r0, r4
    4492:	f000 fdf1 	bl	5078 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    for (int32_t i = 0; i < velocityDifference; i++) {
    4496:	f10b 0b01 	add.w	fp, fp, #1
    449a:	f44f 7016 	mov.w	r0, #600	; 0x258
    449e:	2100      	movs	r1, #0
    44a0:	f005 fc12 	bl	9cc8 <Delay_cycles>
    44a4:	455d      	cmp	r5, fp
    44a6:	d1cb      	bne.n	4440 <_Z14MoveAtVelocityd.part.2+0x128>
    44a8:	4c53      	ldr	r4, [pc, #332]	; (45f8 <_Z14MoveAtVelocityd.part.2+0x2e0>)
            if (!SendChar(buffer[iChar])) {
    44aa:	4d4e      	ldr	r5, [pc, #312]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
            Delay_us(5);
        }
    }

    // Keeps track of the new commanded velocity
    commandedVelocity = velocity;
    44ac:	e9ca 6700 	strd	r6, r7, [sl]
    44b0:	f104 0621 	add.w	r6, r4, #33	; 0x21
    44b4:	f814 1b01 	ldrb.w	r1, [r4], #1
    44b8:	4628      	mov	r0, r5
    44ba:	f001 fdad 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44be:	b138      	cbz	r0, 44d0 <_Z14MoveAtVelocityd.part.2+0x1b8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44c0:	42a6      	cmp	r6, r4
    44c2:	d1f7      	bne.n	44b4 <_Z14MoveAtVelocityd.part.2+0x19c>
        return SendChar('\r') && SendChar('\n');
    44c4:	210d      	movs	r1, #13
    44c6:	4847      	ldr	r0, [pc, #284]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    44c8:	f001 fda6 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44cc:	2800      	cmp	r0, #0
    44ce:	d169      	bne.n	45a4 <_Z14MoveAtVelocityd.part.2+0x28c>
    44d0:	4a48      	ldr	r2, [pc, #288]	; (45f4 <_Z14MoveAtVelocityd.part.2+0x2dc>)

    // Waits for HLFB to assert (signaling the motor has successfully reached
    // its target velocity).
    SerialPort.SendLine("Ramping Speed... Waiting for HLFB");
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    44d2:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    44d6:	2b01      	cmp	r3, #1
    44d8:	d003      	beq.n	44e2 <_Z14MoveAtVelocityd.part.2+0x1ca>
			!motor.StatusReg().bit.MotorInFault) {
    44da:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    44de:	06d9      	lsls	r1, r3, #27
    44e0:	d5f7      	bpl.n	44d2 <_Z14MoveAtVelocityd.part.2+0x1ba>
        continue;
    }
	// Check if a motor faulted during move
	// Clear fault if configured to do so 
    if (motor.StatusReg().bit.MotorInFault) {
    44e2:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    44e6:	06db      	lsls	r3, r3, #27
    44e8:	d417      	bmi.n	451a <_Z14MoveAtVelocityd.part.2+0x202>
    44ea:	4c44      	ldr	r4, [pc, #272]	; (45fc <_Z14MoveAtVelocityd.part.2+0x2e4>)
            if (!SendChar(buffer[iChar])) {
    44ec:	4d3d      	ldr	r5, [pc, #244]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    44ee:	f104 0609 	add.w	r6, r4, #9
    44f2:	f814 1b01 	ldrb.w	r1, [r4], #1
    44f6:	4628      	mov	r0, r5
    44f8:	f001 fd8e 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44fc:	b140      	cbz	r0, 4510 <_Z14MoveAtVelocityd.part.2+0x1f8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44fe:	42a6      	cmp	r6, r4
    4500:	d1f7      	bne.n	44f2 <_Z14MoveAtVelocityd.part.2+0x1da>
        return SendChar('\r') && SendChar('\n');
    4502:	210d      	movs	r1, #13
    4504:	4837      	ldr	r0, [pc, #220]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    4506:	f001 fd87 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    450a:	4604      	mov	r4, r0
    450c:	2800      	cmp	r0, #0
    450e:	d153      	bne.n	45b8 <_Z14MoveAtVelocityd.part.2+0x2a0>
		SerialPort.SendLine("Motion may not have completed as expected. Proceed with caution.");
		SerialPort.SendLine();
		return false;
    } else {
		SerialPort.SendLine("Move Done");
		return true;
    4510:	2401      	movs	r4, #1
	}

    SerialPort.SendLine("Target Velocity Reached");
    return true;
}
    4512:	4620      	mov	r0, r4
    4514:	b009      	add	sp, #36	; 0x24
    4516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    451a:	4c39      	ldr	r4, [pc, #228]	; (4600 <_Z14MoveAtVelocityd.part.2+0x2e8>)
            if (!SendChar(buffer[iChar])) {
    451c:	4d31      	ldr	r5, [pc, #196]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    451e:	f104 0615 	add.w	r6, r4, #21
    4522:	f814 1b01 	ldrb.w	r1, [r4], #1
    4526:	4628      	mov	r0, r5
    4528:	f001 fd76 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    452c:	b138      	cbz	r0, 453e <_Z14MoveAtVelocityd.part.2+0x226>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    452e:	42a6      	cmp	r6, r4
    4530:	d1f7      	bne.n	4522 <_Z14MoveAtVelocityd.part.2+0x20a>
        return SendChar('\r') && SendChar('\n');
    4532:	210d      	movs	r1, #13
    4534:	482b      	ldr	r0, [pc, #172]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    4536:	f001 fd6f 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    453a:	2800      	cmp	r0, #0
    453c:	d141      	bne.n	45c2 <_Z14MoveAtVelocityd.part.2+0x2aa>
    453e:	4c31      	ldr	r4, [pc, #196]	; (4604 <_Z14MoveAtVelocityd.part.2+0x2ec>)
            if (!SendChar(buffer[iChar])) {
    4540:	4d28      	ldr	r5, [pc, #160]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    4542:	f104 0644 	add.w	r6, r4, #68	; 0x44
    4546:	f814 1b01 	ldrb.w	r1, [r4], #1
    454a:	4628      	mov	r0, r5
    454c:	f001 fd64 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4550:	b138      	cbz	r0, 4562 <_Z14MoveAtVelocityd.part.2+0x24a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4552:	42a6      	cmp	r6, r4
    4554:	d1f7      	bne.n	4546 <_Z14MoveAtVelocityd.part.2+0x22e>
        return SendChar('\r') && SendChar('\n');
    4556:	210d      	movs	r1, #13
    4558:	4822      	ldr	r0, [pc, #136]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    455a:	f001 fd5d 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    455e:	2800      	cmp	r0, #0
    4560:	d139      	bne.n	45d6 <_Z14MoveAtVelocityd.part.2+0x2be>
    4562:	4c29      	ldr	r4, [pc, #164]	; (4608 <_Z14MoveAtVelocityd.part.2+0x2f0>)
            if (!SendChar(buffer[iChar])) {
    4564:	4d1f      	ldr	r5, [pc, #124]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    4566:	f104 0640 	add.w	r6, r4, #64	; 0x40
    456a:	f814 1b01 	ldrb.w	r1, [r4], #1
    456e:	4628      	mov	r0, r5
    4570:	f001 fd52 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4574:	b130      	cbz	r0, 4584 <_Z14MoveAtVelocityd.part.2+0x26c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4576:	42a6      	cmp	r6, r4
    4578:	d1f7      	bne.n	456a <_Z14MoveAtVelocityd.part.2+0x252>
        return SendChar('\r') && SendChar('\n');
    457a:	210d      	movs	r1, #13
    457c:	4819      	ldr	r0, [pc, #100]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    457e:	f001 fd4b 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4582:	bb18      	cbnz	r0, 45cc <_Z14MoveAtVelocityd.part.2+0x2b4>
    4584:	210d      	movs	r1, #13
    4586:	4817      	ldr	r0, [pc, #92]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    4588:	f001 fd46 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    458c:	4604      	mov	r4, r0
    458e:	2800      	cmp	r0, #0
    4590:	d0bf      	beq.n	4512 <_Z14MoveAtVelocityd.part.2+0x1fa>
    4592:	210a      	movs	r1, #10
    4594:	4813      	ldr	r0, [pc, #76]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    4596:	f001 fd3f 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
		return false;
    459a:	2400      	movs	r4, #0
}
    459c:	4620      	mov	r0, r4
    459e:	b009      	add	sp, #36	; 0x24
    45a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45a4:	210a      	movs	r1, #10
    45a6:	480f      	ldr	r0, [pc, #60]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    45a8:	f001 fd36 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45ac:	e790      	b.n	44d0 <_Z14MoveAtVelocityd.part.2+0x1b8>
    45ae:	210a      	movs	r1, #10
    45b0:	480c      	ldr	r0, [pc, #48]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    45b2:	f001 fd31 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45b6:	e6ed      	b.n	4394 <_Z14MoveAtVelocityd.part.2+0x7c>
    45b8:	210a      	movs	r1, #10
    45ba:	480a      	ldr	r0, [pc, #40]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    45bc:	f001 fd2c 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45c0:	e7a7      	b.n	4512 <_Z14MoveAtVelocityd.part.2+0x1fa>
    45c2:	210a      	movs	r1, #10
    45c4:	4807      	ldr	r0, [pc, #28]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    45c6:	f001 fd27 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45ca:	e7b8      	b.n	453e <_Z14MoveAtVelocityd.part.2+0x226>
    45cc:	210a      	movs	r1, #10
    45ce:	4805      	ldr	r0, [pc, #20]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    45d0:	f001 fd22 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45d4:	e7d6      	b.n	4584 <_Z14MoveAtVelocityd.part.2+0x26c>
    45d6:	210a      	movs	r1, #10
    45d8:	4802      	ldr	r0, [pc, #8]	; (45e4 <_Z14MoveAtVelocityd.part.2+0x2cc>)
    45da:	f001 fd1d 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45de:	e7c0      	b.n	4562 <_Z14MoveAtVelocityd.part.2+0x24a>
    45e0:	00022e00 	.word	0x00022e00
    45e4:	20001498 	.word	0x20001498
    45e8:	00022e0c 	.word	0x00022e0c
    45ec:	00022e14 	.word	0x00022e14
    45f0:	20000000 	.word	0x20000000
    45f4:	20000b78 	.word	0x20000b78
    45f8:	00022e1c 	.word	0x00022e1c
    45fc:	00022ee4 	.word	0x00022ee4
    4600:	00022e40 	.word	0x00022e40
    4604:	00022e58 	.word	0x00022e58
    4608:	00022ea0 	.word	0x00022ea0
    460c:	20000ae0 	.word	0x20000ae0

00004610 <main>:
int main() {
    4610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    4614:	4bbc      	ldr	r3, [pc, #752]	; (4908 <main+0x2f8>)
int main() {
    4616:	b089      	sub	sp, #36	; 0x24
                          Connector::CPM_MODE_A_DIRECT_B_DIRECT);
    4618:	6818      	ldr	r0, [r3, #0]
    461a:	2209      	movs	r2, #9
    461c:	2102      	movs	r1, #2
    461e:	f006 fdd3 	bl	b1c8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    4622:	4bba      	ldr	r3, [pc, #744]	; (490c <main+0x2fc>)
    4624:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
    4628:	2b02      	cmp	r3, #2
    462a:	d009      	beq.n	4640 <main+0x30>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    462c:	48b7      	ldr	r0, [pc, #732]	; (490c <main+0x2fc>)
    462e:	49b8      	ldr	r1, [pc, #736]	; (4910 <main+0x300>)
    4630:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
        m_hlfbMode = newMode;
    4634:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    4636:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    4638:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    463c:	f880 312f 	strb.w	r3, [r0, #303]	; 0x12f
    motor.MotorInAState(false);
    4640:	48b2      	ldr	r0, [pc, #712]	; (490c <main+0x2fc>)
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4642:	4eb4      	ldr	r6, [pc, #720]	; (4914 <main+0x304>)
            case HLFB_CARRIER_45_HZ:
                m_hlfbCarrierLossStateChange_ms =
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_45_HZ;
                break;
            case HLFB_CARRIER_482_HZ:
                m_hlfbCarrierLossStateChange_ms =
    4644:	2204      	movs	r2, #4
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    4646:	2301      	movs	r3, #1
                m_hlfbCarrierLossStateChange_ms =
    4648:	f8c0 20e8 	str.w	r2, [r0, #232]	; 0xe8
        m_hlfbCarrierFrequency = freq;
    464c:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
                m_hlfbCarrierLossStateChange_ms =
    4650:	4604      	mov	r4, r0
    motor.MotorInAState(false);
    4652:	2100      	movs	r1, #0
    4654:	f000 fd10 	bl	5078 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    motor.MotorInBState(false);
    4658:	2100      	movs	r1, #0
    465a:	4620      	mov	r0, r4
    465c:	f000 fd26 	bl	50ac <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    SerialPort.Speed(baudRate);
    4660:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    4664:	4630      	mov	r0, r6
    4666:	f001 fcbf 	bl	5fe8 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    466a:	f005 fb03 	bl	9c74 <Milliseconds>
    466e:	4605      	mov	r5, r0
    SerialPort.PortOpen();
    4670:	4630      	mov	r0, r6
    4672:	f001 fcad 	bl	5fd0 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4676:	f241 3487 	movw	r4, #4999	; 0x1387
    467a:	4630      	mov	r0, r6
    467c:	f001 fca2 	bl	5fc4 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    4680:	2800      	cmp	r0, #0
    4682:	f000 8325 	beq.w	4cd0 <main+0x6c0>
    motor.EnableRequest(true);
    4686:	2101      	movs	r1, #1
    4688:	48a0      	ldr	r0, [pc, #640]	; (490c <main+0x2fc>)
    468a:	f000 fd27 	bl	50dc <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    468e:	48a2      	ldr	r0, [pc, #648]	; (4918 <main+0x308>)
    4690:	f7ff fe20 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    SerialPort.SendLine("Waiting for HLFB...");
    4694:	48a1      	ldr	r0, [pc, #644]	; (491c <main+0x30c>)
    4696:	f7ff fe1d 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    SerialPort.SendLine("Waiting for HLFB...");
    469a:	48a0      	ldr	r0, [pc, #640]	; (491c <main+0x30c>)
    469c:	f7ff fe1a 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    46a0:	4b9a      	ldr	r3, [pc, #616]	; (490c <main+0x2fc>)
    46a2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
    46a6:	2b01      	cmp	r3, #1
    46a8:	d004      	beq.n	46b4 <main+0xa4>
			!motor.StatusReg().bit.MotorInFault) {
    46aa:	4b98      	ldr	r3, [pc, #608]	; (490c <main+0x2fc>)
    46ac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    46b0:	06d9      	lsls	r1, r3, #27
    46b2:	d5f5      	bpl.n	46a0 <main+0x90>
    if (motor.StatusReg().bit.MotorInFault) {
    46b4:	4b95      	ldr	r3, [pc, #596]	; (490c <main+0x2fc>)
    46b6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    46ba:	06da      	lsls	r2, r3, #27
    46bc:	f140 830f 	bpl.w	4cde <main+0x6ce>
		SerialPort.SendLine("Motor fault detected.");		
    46c0:	4897      	ldr	r0, [pc, #604]	; (4920 <main+0x310>)
    46c2:	f7ff fe07 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
			SerialPort.SendLine("Enable automatic fault handling by setting HANDLE_MOTOR_FAULTS to 1.");
    46c6:	4897      	ldr	r0, [pc, #604]	; (4924 <main+0x314>)
    46c8:	f7ff fe04 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
		SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");		
    46cc:	4896      	ldr	r0, [pc, #600]	; (4928 <main+0x318>)
    46ce:	f7ff fe01 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    46d2:	210d      	movs	r1, #13
    46d4:	488f      	ldr	r0, [pc, #572]	; (4914 <main+0x304>)
    46d6:	f001 fc9f 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46da:	b118      	cbz	r0, 46e4 <main+0xd4>
    46dc:	210a      	movs	r1, #10
    46de:	488d      	ldr	r0, [pc, #564]	; (4914 <main+0x304>)
    46e0:	f001 fc9a 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46e4:	f8df 8264 	ldr.w	r8, [pc, #612]	; 494c <main+0x33c>
    46e8:	4f90      	ldr	r7, [pc, #576]	; (492c <main+0x31c>)
    46ea:	4d91      	ldr	r5, [pc, #580]	; (4930 <main+0x320>)
    46ec:	4c91      	ldr	r4, [pc, #580]	; (4934 <main+0x324>)
    46ee:	4e92      	ldr	r6, [pc, #584]	; (4938 <main+0x328>)
    46f0:	e0be      	b.n	4870 <main+0x260>
    if (motor.StatusReg().bit.MotorInFault) {
    46f2:	4b86      	ldr	r3, [pc, #536]	; (490c <main+0x2fc>)
    46f4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    46f8:	06db      	lsls	r3, r3, #27
    46fa:	f100 82a0 	bmi.w	4c3e <main+0x62e>
    46fe:	2000      	movs	r0, #0
    4700:	498e      	ldr	r1, [pc, #568]	; (493c <main+0x32c>)
    4702:	f7ff fe09 	bl	4318 <_Z14MoveAtVelocityd.part.2>
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    4706:	a17a      	add	r1, pc, #488	; (adr r1, 48f0 <main+0x2e0>)
    4708:	e9d1 0100 	ldrd	r0, r1, [r1]
    470c:	f005 fadc 	bl	9cc8 <Delay_cycles>
    if (velocity == commandedVelocity) {
    4710:	2200      	movs	r2, #0
    4712:	4b8b      	ldr	r3, [pc, #556]	; (4940 <main+0x330>)
    4714:	e9d8 0100 	ldrd	r0, r1, [r8]
    4718:	f017 fea0 	bl	1c45c <__aeabi_dcmpeq>
    471c:	b9f0      	cbnz	r0, 475c <main+0x14c>
    if (velocity > maxVelocityCCW || velocity < -maxVelocityCW) {
    471e:	68b8      	ldr	r0, [r7, #8]
    4720:	f017 fbce 	bl	1bec0 <__aeabi_i2d>
    4724:	2200      	movs	r2, #0
    4726:	4b86      	ldr	r3, [pc, #536]	; (4940 <main+0x330>)
    4728:	f017 fea2 	bl	1c470 <__aeabi_dcmplt>
    472c:	2800      	cmp	r0, #0
    472e:	f040 81bc 	bne.w	4aaa <main+0x49a>
    4732:	68f8      	ldr	r0, [r7, #12]
    4734:	4240      	negs	r0, r0
    4736:	f017 fbc3 	bl	1bec0 <__aeabi_i2d>
    473a:	2200      	movs	r2, #0
    473c:	4b80      	ldr	r3, [pc, #512]	; (4940 <main+0x330>)
    473e:	f017 feb5 	bl	1c4ac <__aeabi_dcmpgt>
    4742:	2800      	cmp	r0, #0
    4744:	f040 81b1 	bne.w	4aaa <main+0x49a>
    if (motor.StatusReg().bit.MotorInFault) {
    4748:	4b70      	ldr	r3, [pc, #448]	; (490c <main+0x2fc>)
    474a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    474e:	06d8      	lsls	r0, r3, #27
    4750:	f100 825f 	bmi.w	4c12 <main+0x602>
    4754:	2000      	movs	r0, #0
    4756:	497a      	ldr	r1, [pc, #488]	; (4940 <main+0x330>)
    4758:	f7ff fdde 	bl	4318 <_Z14MoveAtVelocityd.part.2>
    475c:	a164      	add	r1, pc, #400	; (adr r1, 48f0 <main+0x2e0>)
    475e:	e9d1 0100 	ldrd	r0, r1, [r1]
    4762:	f005 fab1 	bl	9cc8 <Delay_cycles>
    if (velocity == commandedVelocity) {
    4766:	a364      	add	r3, pc, #400	; (adr r3, 48f8 <main+0x2e8>)
    4768:	e9d3 2300 	ldrd	r2, r3, [r3]
    476c:	e9d8 0100 	ldrd	r0, r1, [r8]
    4770:	f017 fe74 	bl	1c45c <__aeabi_dcmpeq>
    4774:	bb08      	cbnz	r0, 47ba <main+0x1aa>
    if (velocity > maxVelocityCCW || velocity < -maxVelocityCW) {
    4776:	68b8      	ldr	r0, [r7, #8]
    4778:	f017 fba2 	bl	1bec0 <__aeabi_i2d>
    477c:	a35e      	add	r3, pc, #376	; (adr r3, 48f8 <main+0x2e8>)
    477e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4782:	f017 fe75 	bl	1c470 <__aeabi_dcmplt>
    4786:	2800      	cmp	r0, #0
    4788:	f040 81d3 	bne.w	4b32 <main+0x522>
    478c:	68f8      	ldr	r0, [r7, #12]
    478e:	4240      	negs	r0, r0
    4790:	f017 fb96 	bl	1bec0 <__aeabi_i2d>
    4794:	a358      	add	r3, pc, #352	; (adr r3, 48f8 <main+0x2e8>)
    4796:	e9d3 2300 	ldrd	r2, r3, [r3]
    479a:	f017 fe87 	bl	1c4ac <__aeabi_dcmpgt>
    479e:	2800      	cmp	r0, #0
    47a0:	f040 81c7 	bne.w	4b32 <main+0x522>
    if (motor.StatusReg().bit.MotorInFault) {
    47a4:	4b59      	ldr	r3, [pc, #356]	; (490c <main+0x2fc>)
    47a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    47aa:	06d9      	lsls	r1, r3, #27
    47ac:	f100 8205 	bmi.w	4bba <main+0x5aa>
    47b0:	a151      	add	r1, pc, #324	; (adr r1, 48f8 <main+0x2e8>)
    47b2:	e9d1 0100 	ldrd	r0, r1, [r1]
    47b6:	f7ff fdaf 	bl	4318 <_Z14MoveAtVelocityd.part.2>
    47ba:	a14d      	add	r1, pc, #308	; (adr r1, 48f0 <main+0x2e0>)
    47bc:	e9d1 0100 	ldrd	r0, r1, [r1]
    47c0:	f005 fa82 	bl	9cc8 <Delay_cycles>
    if (velocity == commandedVelocity) {
    47c4:	2200      	movs	r2, #0
    47c6:	4b5f      	ldr	r3, [pc, #380]	; (4944 <main+0x334>)
    47c8:	e9d8 0100 	ldrd	r0, r1, [r8]
    47cc:	f017 fe46 	bl	1c45c <__aeabi_dcmpeq>
    47d0:	b9f0      	cbnz	r0, 4810 <main+0x200>
    if (velocity > maxVelocityCCW || velocity < -maxVelocityCW) {
    47d2:	68b8      	ldr	r0, [r7, #8]
    47d4:	f017 fb74 	bl	1bec0 <__aeabi_i2d>
    47d8:	2200      	movs	r2, #0
    47da:	4b5a      	ldr	r3, [pc, #360]	; (4944 <main+0x334>)
    47dc:	f017 fe48 	bl	1c470 <__aeabi_dcmplt>
    47e0:	2800      	cmp	r0, #0
    47e2:	f040 80da 	bne.w	499a <main+0x38a>
    47e6:	68f8      	ldr	r0, [r7, #12]
    47e8:	4240      	negs	r0, r0
    47ea:	f017 fb69 	bl	1bec0 <__aeabi_i2d>
    47ee:	2200      	movs	r2, #0
    47f0:	4b54      	ldr	r3, [pc, #336]	; (4944 <main+0x334>)
    47f2:	f017 fe5b 	bl	1c4ac <__aeabi_dcmpgt>
    47f6:	2800      	cmp	r0, #0
    47f8:	f040 80cf 	bne.w	499a <main+0x38a>
    if (motor.StatusReg().bit.MotorInFault) {
    47fc:	4b43      	ldr	r3, [pc, #268]	; (490c <main+0x2fc>)
    47fe:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    4802:	06da      	lsls	r2, r3, #27
    4804:	f100 824e 	bmi.w	4ca4 <main+0x694>
    4808:	2000      	movs	r0, #0
    480a:	494e      	ldr	r1, [pc, #312]	; (4944 <main+0x334>)
    480c:	f7ff fd84 	bl	4318 <_Z14MoveAtVelocityd.part.2>
    4810:	a137      	add	r1, pc, #220	; (adr r1, 48f0 <main+0x2e0>)
    4812:	e9d1 0100 	ldrd	r0, r1, [r1]
    4816:	f005 fa57 	bl	9cc8 <Delay_cycles>
    if (velocity == commandedVelocity) {
    481a:	2200      	movs	r2, #0
    481c:	2300      	movs	r3, #0
    481e:	e9d8 0100 	ldrd	r0, r1, [r8]
    4822:	f017 fe1b 	bl	1c45c <__aeabi_dcmpeq>
    4826:	b9f0      	cbnz	r0, 4866 <main+0x256>
    if (velocity > maxVelocityCCW || velocity < -maxVelocityCW) {
    4828:	68b8      	ldr	r0, [r7, #8]
    482a:	f017 fb49 	bl	1bec0 <__aeabi_i2d>
    482e:	2200      	movs	r2, #0
    4830:	2300      	movs	r3, #0
    4832:	f017 fe1d 	bl	1c470 <__aeabi_dcmplt>
    4836:	2800      	cmp	r0, #0
    4838:	f040 80f3 	bne.w	4a22 <main+0x412>
    483c:	68f8      	ldr	r0, [r7, #12]
    483e:	4240      	negs	r0, r0
    4840:	f017 fb3e 	bl	1bec0 <__aeabi_i2d>
    4844:	2200      	movs	r2, #0
    4846:	2300      	movs	r3, #0
    4848:	f017 fe30 	bl	1c4ac <__aeabi_dcmpgt>
    484c:	2800      	cmp	r0, #0
    484e:	f040 80e8 	bne.w	4a22 <main+0x412>
    if (motor.StatusReg().bit.MotorInFault) {
    4852:	4b2e      	ldr	r3, [pc, #184]	; (490c <main+0x2fc>)
    4854:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    4858:	06db      	lsls	r3, r3, #27
    485a:	f100 81c4 	bmi.w	4be6 <main+0x5d6>
    485e:	2000      	movs	r0, #0
    4860:	2100      	movs	r1, #0
    4862:	f7ff fd59 	bl	4318 <_Z14MoveAtVelocityd.part.2>
    4866:	a122      	add	r1, pc, #136	; (adr r1, 48f0 <main+0x2e0>)
    4868:	e9d1 0100 	ldrd	r0, r1, [r1]
    486c:	f005 fa2c 	bl	9cc8 <Delay_cycles>
    if (velocity == commandedVelocity) {
    4870:	2200      	movs	r2, #0
    4872:	4b32      	ldr	r3, [pc, #200]	; (493c <main+0x32c>)
    4874:	e9d8 0100 	ldrd	r0, r1, [r8]
    4878:	f017 fdf0 	bl	1c45c <__aeabi_dcmpeq>
    487c:	2800      	cmp	r0, #0
    487e:	f47f af42 	bne.w	4706 <main+0xf6>
    if (velocity > maxVelocityCCW || velocity < -maxVelocityCW) {
    4882:	68b8      	ldr	r0, [r7, #8]
    4884:	f017 fb1c 	bl	1bec0 <__aeabi_i2d>
    4888:	2200      	movs	r2, #0
    488a:	4b2c      	ldr	r3, [pc, #176]	; (493c <main+0x32c>)
    488c:	f017 fdf0 	bl	1c470 <__aeabi_dcmplt>
    4890:	b950      	cbnz	r0, 48a8 <main+0x298>
    4892:	68f8      	ldr	r0, [r7, #12]
    4894:	4240      	negs	r0, r0
    4896:	f017 fb13 	bl	1bec0 <__aeabi_i2d>
    489a:	2200      	movs	r2, #0
    489c:	4b27      	ldr	r3, [pc, #156]	; (493c <main+0x32c>)
    489e:	f017 fe05 	bl	1c4ac <__aeabi_dcmpgt>
    48a2:	2800      	cmp	r0, #0
    48a4:	f43f af25 	beq.w	46f2 <main+0xe2>
    48a8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4950 <main+0x340>
            if (!SendChar(buffer[iChar])) {
    48ac:	f8df a064 	ldr.w	sl, [pc, #100]	; 4914 <main+0x304>
    48b0:	f819 1b01 	ldrb.w	r1, [r9], #1
    48b4:	4650      	mov	r0, sl
    48b6:	f001 fbaf 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48ba:	b108      	cbz	r0, 48c0 <main+0x2b0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    48bc:	454d      	cmp	r5, r9
    48be:	d1f7      	bne.n	48b0 <main+0x2a0>
        snprintf(buffer, sizeof(buffer), "%.*f", precision, number);
    48c0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 4900 <main+0x2f0>
    48c4:	2302      	movs	r3, #2
    48c6:	ed8d 7b00 	vstr	d7, [sp]
    48ca:	4a1f      	ldr	r2, [pc, #124]	; (4948 <main+0x338>)
    48cc:	2114      	movs	r1, #20
    48ce:	a803      	add	r0, sp, #12
    48d0:	f01a fab4 	bl	1ee3c <snprintf>
        return Send(nullTermStr, strlen(nullTermStr));
    48d4:	a803      	add	r0, sp, #12
    48d6:	f01a fc93 	bl	1f200 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    48da:	2800      	cmp	r0, #0
    48dc:	d043      	beq.n	4966 <main+0x356>
    48de:	ab03      	add	r3, sp, #12
            if (!SendChar(buffer[iChar])) {
    48e0:	f8df b030 	ldr.w	fp, [pc, #48]	; 4914 <main+0x304>
    48e4:	eb03 0a00 	add.w	sl, r3, r0
    48e8:	4699      	mov	r9, r3
    48ea:	e035      	b.n	4958 <main+0x348>
    48ec:	f3af 8000 	nop.w
    48f0:	23c34600 	.word	0x23c34600
	...
    48fc:	c0877000 	.word	0xc0877000
    4900:	00000000 	.word	0x00000000
    4904:	407f4000 	.word	0x407f4000
    4908:	20001c14 	.word	0x20001c14
    490c:	20000b78 	.word	0x20000b78
    4910:	c61c3c00 	.word	0xc61c3c00
    4914:	20001498 	.word	0x20001498
    4918:	00022f90 	.word	0x00022f90
    491c:	00022fa0 	.word	0x00022fa0
    4920:	00022e40 	.word	0x00022e40
    4924:	00022e58 	.word	0x00022e58
    4928:	00022fb4 	.word	0x00022fb4
    492c:	20000000 	.word	0x20000000
    4930:	00022f07 	.word	0x00022f07
    4934:	00022f20 	.word	0x00022f20
    4938:	00022f8d 	.word	0x00022f8d
    493c:	407f4000 	.word	0x407f4000
    4940:	c0590000 	.word	0xc0590000
    4944:	408f4000 	.word	0x408f4000
    4948:	00022e0c 	.word	0x00022e0c
    494c:	20000ae0 	.word	0x20000ae0
    4950:	00022ef0 	.word	0x00022ef0
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4954:	45d1      	cmp	r9, sl
    4956:	d006      	beq.n	4966 <main+0x356>
            if (!SendChar(buffer[iChar])) {
    4958:	f819 1b01 	ldrb.w	r1, [r9], #1
    495c:	4658      	mov	r0, fp
    495e:	f001 fb5b 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4962:	2800      	cmp	r0, #0
    4964:	d1f6      	bne.n	4954 <main+0x344>
    4966:	f8df 9330 	ldr.w	r9, [pc, #816]	; 4c98 <main+0x688>
    496a:	f8df a324 	ldr.w	sl, [pc, #804]	; 4c90 <main+0x680>
    496e:	f819 1b01 	ldrb.w	r1, [r9], #1
    4972:	4650      	mov	r0, sl
    4974:	f001 fb50 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4978:	2800      	cmp	r0, #0
    497a:	f43f aec4 	beq.w	4706 <main+0xf6>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    497e:	454c      	cmp	r4, r9
    4980:	d1f5      	bne.n	496e <main+0x35e>
        return SendChar('\r') && SendChar('\n');
    4982:	210d      	movs	r1, #13
    4984:	48c2      	ldr	r0, [pc, #776]	; (4c90 <main+0x680>)
    4986:	f001 fb47 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    498a:	2800      	cmp	r0, #0
    498c:	f43f aebb 	beq.w	4706 <main+0xf6>
    4990:	210a      	movs	r1, #10
    4992:	48bf      	ldr	r0, [pc, #764]	; (4c90 <main+0x680>)
    4994:	f001 fb40 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4998:	e6b5      	b.n	4706 <main+0xf6>
    499a:	f8df 9300 	ldr.w	r9, [pc, #768]	; 4c9c <main+0x68c>
            if (!SendChar(buffer[iChar])) {
    499e:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 4c90 <main+0x680>
    49a2:	f819 1b01 	ldrb.w	r1, [r9], #1
    49a6:	4650      	mov	r0, sl
    49a8:	f001 fb36 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49ac:	b108      	cbz	r0, 49b2 <main+0x3a2>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    49ae:	454d      	cmp	r5, r9
    49b0:	d1f7      	bne.n	49a2 <main+0x392>
        snprintf(buffer, sizeof(buffer), "%.*f", precision, number);
    49b2:	ed9f 7baf 	vldr	d7, [pc, #700]	; 4c70 <main+0x660>
    49b6:	2302      	movs	r3, #2
    49b8:	ed8d 7b00 	vstr	d7, [sp]
    49bc:	4ab5      	ldr	r2, [pc, #724]	; (4c94 <main+0x684>)
    49be:	2114      	movs	r1, #20
    49c0:	a803      	add	r0, sp, #12
    49c2:	f01a fa3b 	bl	1ee3c <snprintf>
        return Send(nullTermStr, strlen(nullTermStr));
    49c6:	a803      	add	r0, sp, #12
    49c8:	f01a fc1a 	bl	1f200 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    49cc:	b178      	cbz	r0, 49ee <main+0x3de>
    49ce:	ab03      	add	r3, sp, #12
            if (!SendChar(buffer[iChar])) {
    49d0:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 4c90 <main+0x680>
    49d4:	eb03 0a00 	add.w	sl, r3, r0
    49d8:	4699      	mov	r9, r3
    49da:	e001      	b.n	49e0 <main+0x3d0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    49dc:	45ca      	cmp	sl, r9
    49de:	d006      	beq.n	49ee <main+0x3de>
            if (!SendChar(buffer[iChar])) {
    49e0:	f819 1b01 	ldrb.w	r1, [r9], #1
    49e4:	4658      	mov	r0, fp
    49e6:	f001 fb17 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49ea:	2800      	cmp	r0, #0
    49ec:	d1f6      	bne.n	49dc <main+0x3cc>
    49ee:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 4c98 <main+0x688>
    49f2:	f8df a29c 	ldr.w	sl, [pc, #668]	; 4c90 <main+0x680>
    49f6:	f819 1b01 	ldrb.w	r1, [r9], #1
    49fa:	4650      	mov	r0, sl
    49fc:	f001 fb0c 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a00:	2800      	cmp	r0, #0
    4a02:	f43f af05 	beq.w	4810 <main+0x200>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a06:	45a1      	cmp	r9, r4
    4a08:	d1f5      	bne.n	49f6 <main+0x3e6>
        return SendChar('\r') && SendChar('\n');
    4a0a:	210d      	movs	r1, #13
    4a0c:	48a0      	ldr	r0, [pc, #640]	; (4c90 <main+0x680>)
    4a0e:	f001 fb03 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a12:	2800      	cmp	r0, #0
    4a14:	f43f aefc 	beq.w	4810 <main+0x200>
    4a18:	210a      	movs	r1, #10
    4a1a:	489d      	ldr	r0, [pc, #628]	; (4c90 <main+0x680>)
    4a1c:	f001 fafc 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a20:	e6f6      	b.n	4810 <main+0x200>
    4a22:	f8df 9278 	ldr.w	r9, [pc, #632]	; 4c9c <main+0x68c>
            if (!SendChar(buffer[iChar])) {
    4a26:	f8df a268 	ldr.w	sl, [pc, #616]	; 4c90 <main+0x680>
    4a2a:	f819 1b01 	ldrb.w	r1, [r9], #1
    4a2e:	4650      	mov	r0, sl
    4a30:	f001 faf2 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a34:	b108      	cbz	r0, 4a3a <main+0x42a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a36:	454d      	cmp	r5, r9
    4a38:	d1f7      	bne.n	4a2a <main+0x41a>
        snprintf(buffer, sizeof(buffer), "%.*f", precision, number);
    4a3a:	ed9f 7b8f 	vldr	d7, [pc, #572]	; 4c78 <main+0x668>
    4a3e:	2302      	movs	r3, #2
    4a40:	ed8d 7b00 	vstr	d7, [sp]
    4a44:	4a93      	ldr	r2, [pc, #588]	; (4c94 <main+0x684>)
    4a46:	2114      	movs	r1, #20
    4a48:	a803      	add	r0, sp, #12
    4a4a:	f01a f9f7 	bl	1ee3c <snprintf>
        return Send(nullTermStr, strlen(nullTermStr));
    4a4e:	a803      	add	r0, sp, #12
    4a50:	f01a fbd6 	bl	1f200 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a54:	b178      	cbz	r0, 4a76 <main+0x466>
    4a56:	ab03      	add	r3, sp, #12
            if (!SendChar(buffer[iChar])) {
    4a58:	f8df b234 	ldr.w	fp, [pc, #564]	; 4c90 <main+0x680>
    4a5c:	eb03 0a00 	add.w	sl, r3, r0
    4a60:	4699      	mov	r9, r3
    4a62:	e001      	b.n	4a68 <main+0x458>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a64:	45ca      	cmp	sl, r9
    4a66:	d006      	beq.n	4a76 <main+0x466>
            if (!SendChar(buffer[iChar])) {
    4a68:	f819 1b01 	ldrb.w	r1, [r9], #1
    4a6c:	4658      	mov	r0, fp
    4a6e:	f001 fad3 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a72:	2800      	cmp	r0, #0
    4a74:	d1f6      	bne.n	4a64 <main+0x454>
    4a76:	f8df 9220 	ldr.w	r9, [pc, #544]	; 4c98 <main+0x688>
    4a7a:	f8df a214 	ldr.w	sl, [pc, #532]	; 4c90 <main+0x680>
    4a7e:	f819 1b01 	ldrb.w	r1, [r9], #1
    4a82:	4650      	mov	r0, sl
    4a84:	f001 fac8 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a88:	2800      	cmp	r0, #0
    4a8a:	f43f aeec 	beq.w	4866 <main+0x256>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a8e:	454c      	cmp	r4, r9
    4a90:	d1f5      	bne.n	4a7e <main+0x46e>
        return SendChar('\r') && SendChar('\n');
    4a92:	210d      	movs	r1, #13
    4a94:	487e      	ldr	r0, [pc, #504]	; (4c90 <main+0x680>)
    4a96:	f001 fabf 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a9a:	2800      	cmp	r0, #0
    4a9c:	f43f aee3 	beq.w	4866 <main+0x256>
    4aa0:	210a      	movs	r1, #10
    4aa2:	487b      	ldr	r0, [pc, #492]	; (4c90 <main+0x680>)
    4aa4:	f001 fab8 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4aa8:	e6dd      	b.n	4866 <main+0x256>
    4aaa:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 4c9c <main+0x68c>
            if (!SendChar(buffer[iChar])) {
    4aae:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 4c90 <main+0x680>
    4ab2:	f819 1b01 	ldrb.w	r1, [r9], #1
    4ab6:	4650      	mov	r0, sl
    4ab8:	f001 faae 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4abc:	b108      	cbz	r0, 4ac2 <main+0x4b2>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4abe:	454d      	cmp	r5, r9
    4ac0:	d1f7      	bne.n	4ab2 <main+0x4a2>
        snprintf(buffer, sizeof(buffer), "%.*f", precision, number);
    4ac2:	ed9f 7b6f 	vldr	d7, [pc, #444]	; 4c80 <main+0x670>
    4ac6:	2302      	movs	r3, #2
    4ac8:	ed8d 7b00 	vstr	d7, [sp]
    4acc:	4a71      	ldr	r2, [pc, #452]	; (4c94 <main+0x684>)
    4ace:	2114      	movs	r1, #20
    4ad0:	a803      	add	r0, sp, #12
    4ad2:	f01a f9b3 	bl	1ee3c <snprintf>
        return Send(nullTermStr, strlen(nullTermStr));
    4ad6:	a803      	add	r0, sp, #12
    4ad8:	f01a fb92 	bl	1f200 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4adc:	b178      	cbz	r0, 4afe <main+0x4ee>
    4ade:	ab03      	add	r3, sp, #12
            if (!SendChar(buffer[iChar])) {
    4ae0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 4c90 <main+0x680>
    4ae4:	eb03 0a00 	add.w	sl, r3, r0
    4ae8:	4699      	mov	r9, r3
    4aea:	e001      	b.n	4af0 <main+0x4e0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4aec:	45d1      	cmp	r9, sl
    4aee:	d006      	beq.n	4afe <main+0x4ee>
            if (!SendChar(buffer[iChar])) {
    4af0:	f819 1b01 	ldrb.w	r1, [r9], #1
    4af4:	4658      	mov	r0, fp
    4af6:	f001 fa8f 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4afa:	2800      	cmp	r0, #0
    4afc:	d1f6      	bne.n	4aec <main+0x4dc>
    4afe:	f8df 9198 	ldr.w	r9, [pc, #408]	; 4c98 <main+0x688>
    4b02:	f8df a18c 	ldr.w	sl, [pc, #396]	; 4c90 <main+0x680>
    4b06:	f819 1b01 	ldrb.w	r1, [r9], #1
    4b0a:	4650      	mov	r0, sl
    4b0c:	f001 fa84 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b10:	2800      	cmp	r0, #0
    4b12:	f43f ae23 	beq.w	475c <main+0x14c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b16:	454c      	cmp	r4, r9
    4b18:	d1f5      	bne.n	4b06 <main+0x4f6>
        return SendChar('\r') && SendChar('\n');
    4b1a:	210d      	movs	r1, #13
    4b1c:	485c      	ldr	r0, [pc, #368]	; (4c90 <main+0x680>)
    4b1e:	f001 fa7b 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b22:	2800      	cmp	r0, #0
    4b24:	f43f ae1a 	beq.w	475c <main+0x14c>
    4b28:	210a      	movs	r1, #10
    4b2a:	4859      	ldr	r0, [pc, #356]	; (4c90 <main+0x680>)
    4b2c:	f001 fa74 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b30:	e614      	b.n	475c <main+0x14c>
    4b32:	f8df 9168 	ldr.w	r9, [pc, #360]	; 4c9c <main+0x68c>
            if (!SendChar(buffer[iChar])) {
    4b36:	f8df a158 	ldr.w	sl, [pc, #344]	; 4c90 <main+0x680>
    4b3a:	f819 1b01 	ldrb.w	r1, [r9], #1
    4b3e:	4650      	mov	r0, sl
    4b40:	f001 fa6a 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b44:	b108      	cbz	r0, 4b4a <main+0x53a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b46:	454d      	cmp	r5, r9
    4b48:	d1f7      	bne.n	4b3a <main+0x52a>
        snprintf(buffer, sizeof(buffer), "%.*f", precision, number);
    4b4a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 4c88 <main+0x678>
    4b4e:	2302      	movs	r3, #2
    4b50:	ed8d 7b00 	vstr	d7, [sp]
    4b54:	4a4f      	ldr	r2, [pc, #316]	; (4c94 <main+0x684>)
    4b56:	2114      	movs	r1, #20
    4b58:	a803      	add	r0, sp, #12
    4b5a:	f01a f96f 	bl	1ee3c <snprintf>
        return Send(nullTermStr, strlen(nullTermStr));
    4b5e:	a803      	add	r0, sp, #12
    4b60:	f01a fb4e 	bl	1f200 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b64:	b178      	cbz	r0, 4b86 <main+0x576>
    4b66:	ab03      	add	r3, sp, #12
            if (!SendChar(buffer[iChar])) {
    4b68:	f8df b124 	ldr.w	fp, [pc, #292]	; 4c90 <main+0x680>
    4b6c:	eb03 0a00 	add.w	sl, r3, r0
    4b70:	4699      	mov	r9, r3
    4b72:	e001      	b.n	4b78 <main+0x568>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b74:	45ca      	cmp	sl, r9
    4b76:	d006      	beq.n	4b86 <main+0x576>
            if (!SendChar(buffer[iChar])) {
    4b78:	f819 1b01 	ldrb.w	r1, [r9], #1
    4b7c:	4658      	mov	r0, fp
    4b7e:	f001 fa4b 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b82:	2800      	cmp	r0, #0
    4b84:	d1f6      	bne.n	4b74 <main+0x564>
    4b86:	f8df 9110 	ldr.w	r9, [pc, #272]	; 4c98 <main+0x688>
    4b8a:	f8df a104 	ldr.w	sl, [pc, #260]	; 4c90 <main+0x680>
    4b8e:	f819 1b01 	ldrb.w	r1, [r9], #1
    4b92:	4650      	mov	r0, sl
    4b94:	f001 fa40 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b98:	2800      	cmp	r0, #0
    4b9a:	f43f ae0e 	beq.w	47ba <main+0x1aa>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b9e:	45a1      	cmp	r9, r4
    4ba0:	d1f5      	bne.n	4b8e <main+0x57e>
        return SendChar('\r') && SendChar('\n');
    4ba2:	210d      	movs	r1, #13
    4ba4:	483a      	ldr	r0, [pc, #232]	; (4c90 <main+0x680>)
    4ba6:	f001 fa37 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4baa:	2800      	cmp	r0, #0
    4bac:	f43f ae05 	beq.w	47ba <main+0x1aa>
    4bb0:	210a      	movs	r1, #10
    4bb2:	4837      	ldr	r0, [pc, #220]	; (4c90 <main+0x680>)
    4bb4:	f001 fa30 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bb8:	e5ff      	b.n	47ba <main+0x1aa>
    4bba:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 4ca0 <main+0x690>
            if (!SendChar(buffer[iChar])) {
    4bbe:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 4c90 <main+0x680>
    4bc2:	f819 1b01 	ldrb.w	r1, [r9], #1
    4bc6:	4650      	mov	r0, sl
    4bc8:	f001 fa26 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bcc:	2800      	cmp	r0, #0
    4bce:	f43f adf4 	beq.w	47ba <main+0x1aa>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4bd2:	454e      	cmp	r6, r9
    4bd4:	d1f5      	bne.n	4bc2 <main+0x5b2>
        return SendChar('\r') && SendChar('\n');
    4bd6:	210d      	movs	r1, #13
    4bd8:	482d      	ldr	r0, [pc, #180]	; (4c90 <main+0x680>)
    4bda:	f001 fa1d 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bde:	2800      	cmp	r0, #0
    4be0:	f43f adeb 	beq.w	47ba <main+0x1aa>
    4be4:	e7e4      	b.n	4bb0 <main+0x5a0>
    4be6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4ca0 <main+0x690>
            if (!SendChar(buffer[iChar])) {
    4bea:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4c90 <main+0x680>
    4bee:	f819 1b01 	ldrb.w	r1, [r9], #1
    4bf2:	4650      	mov	r0, sl
    4bf4:	f001 fa10 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bf8:	2800      	cmp	r0, #0
    4bfa:	f43f ae34 	beq.w	4866 <main+0x256>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4bfe:	454e      	cmp	r6, r9
    4c00:	d1f5      	bne.n	4bee <main+0x5de>
        return SendChar('\r') && SendChar('\n');
    4c02:	210d      	movs	r1, #13
    4c04:	4822      	ldr	r0, [pc, #136]	; (4c90 <main+0x680>)
    4c06:	f001 fa07 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c0a:	2800      	cmp	r0, #0
    4c0c:	f43f ae2b 	beq.w	4866 <main+0x256>
    4c10:	e746      	b.n	4aa0 <main+0x490>
    4c12:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4ca0 <main+0x690>
            if (!SendChar(buffer[iChar])) {
    4c16:	f8df a078 	ldr.w	sl, [pc, #120]	; 4c90 <main+0x680>
    4c1a:	f819 1b01 	ldrb.w	r1, [r9], #1
    4c1e:	4650      	mov	r0, sl
    4c20:	f001 f9fa 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c24:	2800      	cmp	r0, #0
    4c26:	f43f ad99 	beq.w	475c <main+0x14c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4c2a:	454e      	cmp	r6, r9
    4c2c:	d1f5      	bne.n	4c1a <main+0x60a>
        return SendChar('\r') && SendChar('\n');
    4c2e:	210d      	movs	r1, #13
    4c30:	4817      	ldr	r0, [pc, #92]	; (4c90 <main+0x680>)
    4c32:	f001 f9f1 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c36:	2800      	cmp	r0, #0
    4c38:	f43f ad90 	beq.w	475c <main+0x14c>
    4c3c:	e774      	b.n	4b28 <main+0x518>
    4c3e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 4ca0 <main+0x690>
            if (!SendChar(buffer[iChar])) {
    4c42:	f8df a04c 	ldr.w	sl, [pc, #76]	; 4c90 <main+0x680>
    4c46:	f819 1b01 	ldrb.w	r1, [r9], #1
    4c4a:	4650      	mov	r0, sl
    4c4c:	f001 f9e4 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c50:	2800      	cmp	r0, #0
    4c52:	f43f ad58 	beq.w	4706 <main+0xf6>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4c56:	45b1      	cmp	r9, r6
    4c58:	d1f5      	bne.n	4c46 <main+0x636>
        return SendChar('\r') && SendChar('\n');
    4c5a:	210d      	movs	r1, #13
    4c5c:	480c      	ldr	r0, [pc, #48]	; (4c90 <main+0x680>)
    4c5e:	f001 f9db 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c62:	2800      	cmp	r0, #0
    4c64:	f43f ad4f 	beq.w	4706 <main+0xf6>
    4c68:	e692      	b.n	4990 <main+0x380>
    4c6a:	bf00      	nop
    4c6c:	f3af 8000 	nop.w
    4c70:	00000000 	.word	0x00000000
    4c74:	408f4000 	.word	0x408f4000
	...
    4c84:	c0590000 	.word	0xc0590000
    4c88:	00000000 	.word	0x00000000
    4c8c:	c0877000 	.word	0xc0877000
    4c90:	20001498 	.word	0x20001498
    4c94:	00022e0c 	.word	0x00022e0c
    4c98:	00022f08 	.word	0x00022f08
    4c9c:	00022ef0 	.word	0x00022ef0
    4ca0:	00022f24 	.word	0x00022f24
    4ca4:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4cf0 <main+0x6e0>
            if (!SendChar(buffer[iChar])) {
    4ca8:	f8df a03c 	ldr.w	sl, [pc, #60]	; 4ce8 <main+0x6d8>
    4cac:	f819 1b01 	ldrb.w	r1, [r9], #1
    4cb0:	4650      	mov	r0, sl
    4cb2:	f001 f9b1 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4cb6:	2800      	cmp	r0, #0
    4cb8:	f43f adaa 	beq.w	4810 <main+0x200>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4cbc:	454e      	cmp	r6, r9
    4cbe:	d1f5      	bne.n	4cac <main+0x69c>
        return SendChar('\r') && SendChar('\n');
    4cc0:	210d      	movs	r1, #13
    4cc2:	4809      	ldr	r0, [pc, #36]	; (4ce8 <main+0x6d8>)
    4cc4:	f001 f9a8 	bl	6018 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4cc8:	2800      	cmp	r0, #0
    4cca:	f43f ada1 	beq.w	4810 <main+0x200>
    4cce:	e6a3      	b.n	4a18 <main+0x408>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4cd0:	f004 ffd0 	bl	9c74 <Milliseconds>
    4cd4:	1b40      	subs	r0, r0, r5
    4cd6:	42a0      	cmp	r0, r4
    4cd8:	f67f accf 	bls.w	467a <main+0x6a>
    4cdc:	e4d3      	b.n	4686 <main+0x76>
		SerialPort.SendLine("Motor Ready");	
    4cde:	4803      	ldr	r0, [pc, #12]	; (4cec <main+0x6dc>)
    4ce0:	f7ff faf8 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    4ce4:	e4fe      	b.n	46e4 <main+0xd4>
    4ce6:	bf00      	nop
    4ce8:	20001498 	.word	0x20001498
    4cec:	00022ff8 	.word	0x00022ff8
    4cf0:	00022f24 	.word	0x00022f24

00004cf4 <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    4cf4:	2000      	movs	r0, #0
    4cf6:	4770      	bx	lr

00004cf8 <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    4cf8:	f990 0018 	ldrsb.w	r0, [r0, #24]
    4cfc:	4770      	bx	lr
    4cfe:	bf00      	nop

00004d00 <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    4d00:	2006      	movs	r0, #6
    4d02:	4770      	bx	lr

00004d04 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    4d04:	2001      	movs	r0, #1
    4d06:	4770      	bx	lr

00004d08 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    4d08:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    4d0c:	4770      	bx	lr
    4d0e:	bf00      	nop

00004d10 <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4d10:	7980      	ldrb	r0, [r0, #6]
    4d12:	4770      	bx	lr

00004d14 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    4d14:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    4d16:	7983      	ldrb	r3, [r0, #6]
    4d18:	428b      	cmp	r3, r1
    4d1a:	f000 80a7 	beq.w	4e6c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    4d1e:	f1a1 0309 	sub.w	r3, r1, #9
    4d22:	460d      	mov	r5, r1
    4d24:	4604      	mov	r4, r0
    4d26:	2b03      	cmp	r3, #3
    4d28:	f200 80a2 	bhi.w	4e70 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    4d2c:	e8df f003 	tbb	[pc, r3]
    4d30:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    4d34:	3030      	adds	r0, #48	; 0x30
    4d36:	f006 fe77 	bl	ba28 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4d3a:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    4d3c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    4d40:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    4d42:	2200      	movs	r2, #0
    4d44:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    4d48:	b13b      	cbz	r3, 4d5a <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    4d4a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    4d4e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    4d52:	680b      	ldr	r3, [r1, #0]
    4d54:	4013      	ands	r3, r2
    4d56:	d1fc      	bne.n	4d52 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    4d58:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    4d5a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4d5e:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4d60:	2200      	movs	r2, #0
    4d62:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4d66:	b13b      	cbz	r3, 4d78 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    4d68:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4d6c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4d70:	680b      	ldr	r3, [r1, #0]
    4d72:	4013      	ands	r3, r2
    4d74:	d1fc      	bne.n	4d70 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    4d76:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4d78:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4d7c:	4a3d      	ldr	r2, [pc, #244]	; (4e74 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4d7e:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4d82:	7889      	ldrb	r1, [r1, #2]
    4d84:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4d88:	440b      	add	r3, r1
            m_mode = newMode;
    4d8a:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4d8c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4d90:	f041 0101 	orr.w	r1, r1, #1
    4d94:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4d98:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4d9c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4da0:	7889      	ldrb	r1, [r1, #2]
    4da2:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4da6:	440b      	add	r3, r1
    4da8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4dac:	f042 0201 	orr.w	r2, r2, #1
    4db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4db4:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4db6:	b662      	cpsie	i
    return true;
    4db8:	2001      	movs	r0, #1
    4dba:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4dbc:	3030      	adds	r0, #48	; 0x30
    4dbe:	f006 fe33 	bl	ba28 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    4dc2:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    4dc4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4dc8:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4dca:	2200      	movs	r2, #0
    4dcc:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4dd0:	b13b      	cbz	r3, 4de2 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    4dd2:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4dd6:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4dda:	680b      	ldr	r3, [r1, #0]
    4ddc:	4013      	ands	r3, r2
    4dde:	d1fc      	bne.n	4dda <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    4de0:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4de2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4de6:	4a23      	ldr	r2, [pc, #140]	; (4e74 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4de8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4dec:	7889      	ldrb	r1, [r1, #2]
    4dee:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4df2:	440b      	add	r3, r1
    4df4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4df8:	f36f 0100 	bfc	r1, #0, #1
    4dfc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4e00:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4e04:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4e08:	7889      	ldrb	r1, [r1, #2]
    4e0a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4e0e:	440b      	add	r3, r1
    4e10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4e14:	f042 0201 	orr.w	r2, r2, #1
    4e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4e1c:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4e1e:	b662      	cpsie	i
    return true;
    4e20:	2001      	movs	r0, #1
    4e22:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4e24:	3030      	adds	r0, #48	; 0x30
    4e26:	f006 fdff 	bl	ba28 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4e2a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4e2e:	4a11      	ldr	r2, [pc, #68]	; (4e74 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4e30:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4e34:	7889      	ldrb	r1, [r1, #2]
    4e36:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4e3a:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4e3c:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4e3e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4e42:	f36f 0100 	bfc	r1, #0, #1
    4e46:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4e4a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4e4e:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4e52:	7889      	ldrb	r1, [r1, #2]
    4e54:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4e58:	440b      	add	r3, r1
    return true;
    4e5a:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4e5c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4e60:	f36f 0200 	bfc	r2, #0, #1
    4e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4e68:	71a5      	strb	r5, [r4, #6]
            break;
    4e6a:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    4e6c:	2001      	movs	r0, #1
    4e6e:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    4e70:	2000      	movs	r0, #0
}
    4e72:	bd38      	pop	{r3, r4, r5, pc}
    4e74:	41008000 	.word	0x41008000

00004e78 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4e78:	7983      	ldrb	r3, [r0, #6]
    4e7a:	2b0a      	cmp	r3, #10
    4e7c:	d00f      	beq.n	4e9e <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4e7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4e82:	b1a3      	cbz	r3, 4eae <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    4e84:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4e88:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4e8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4e90:	01db      	lsls	r3, r3, #7
    4e92:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4e96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4e9a:	615a      	str	r2, [r3, #20]
    4e9c:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    4e9e:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4ea2:	079b      	lsls	r3, r3, #30
    4ea4:	d5eb      	bpl.n	4e7e <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    4ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d0ea      	beq.n	4e84 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4eae:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4eb2:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4eb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4eba:	01db      	lsls	r3, r3, #7
    4ebc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4ec0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4ec4:	619a      	str	r2, [r3, #24]
    4ec6:	4770      	bx	lr

00004ec8 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    4ec8:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    4ecc:	e7d4      	b.n	4e78 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    4ece:	bf00      	nop

00004ed0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ed4:	9f08      	ldr	r7, [sp, #32]
    4ed6:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    4eda:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    4ede:	4604      	mov	r4, r0
    4ee0:	4616      	mov	r6, r2
    4ee2:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    4ee4:	463a      	mov	r2, r7
    4ee6:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4ee8:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    4eea:	f009 fccd 	bl	e888 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    4eee:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4ef2:	f006 fd67 	bl	b9c4 <_ZN9ClearCore13StepGeneratorC1Ev>
    4ef6:	4b5c      	ldr	r3, [pc, #368]	; (5068 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    4ef8:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    4efc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    4f00:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    4f04:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    4f08:	6322      	str	r2, [r4, #48]	; 0x30
    4f0a:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    4f0e:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    4f10:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    4f12:	f8df a160 	ldr.w	sl, [pc, #352]	; 5074 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4f16:	4f55      	ldr	r7, [pc, #340]	; (506c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    4f18:	2101      	movs	r1, #1
    4f1a:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4f1e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    4f22:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    4f24:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    4f28:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4f2c:	f04f 0e02 	mov.w	lr, #2
    4f30:	2200      	movs	r2, #0
    4f32:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4f36:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    4f3a:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    4f3e:	f04f 33ff 	mov.w	r3, #4294967295
    4f42:	f04f 0e19 	mov.w	lr, #25
    4f46:	f04f 0903 	mov.w	r9, #3
    4f4a:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    4f4e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    4f52:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    4f56:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    4f5a:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    4f5e:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    4f62:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    4f66:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    4f6a:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    4f6e:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    4f72:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    4f76:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    4f7a:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    4f7e:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    4f82:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    4f86:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    4f8a:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    4f8e:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    4f92:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    4f96:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    4f9a:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    4f9e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    4fa2:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4fa6:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    4faa:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    4fae:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    4fb2:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    4fb6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    4fba:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    4fbe:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    4fc2:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    4fc6:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    4fca:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    4fce:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    4fd2:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    4fd6:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    4fda:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    4fdc:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    4fe0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    4fe4:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4fe8:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4fea:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4fec:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    4ff0:	2b04      	cmp	r3, #4
    4ff2:	bf9c      	itt	ls
    4ff4:	4a1e      	ldrls	r2, [pc, #120]	; (5070 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4ff6:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4ff8:	fbb6 f1f2 	udiv	r1, r6, r2
    4ffc:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5000:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5004:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5006:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    500a:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    500e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5012:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    5016:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5018:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    501c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5020:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5024:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5026:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5028:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    502c:	2a04      	cmp	r2, #4
    502e:	bf9a      	itte	ls
    5030:	4b0f      	ldrls	r3, [pc, #60]	; (5070 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    5032:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5034:	2200      	movhi	r2, #0
    5036:	fbb0 f3f2 	udiv	r3, r0, r2
    503a:	fb02 0313 	mls	r3, r2, r3, r0
    503e:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5040:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5044:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5048:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    504c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5050:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    5054:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5056:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    505a:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    505e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    5062:	4620      	mov	r0, r4
    5064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5068:	00023028 	.word	0x00023028
    506c:	0002300c 	.word	0x0002300c
    5070:	00023004 	.word	0x00023004
    5074:	c61c3c00 	.word	0xc61c3c00

00005078 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    5078:	7983      	ldrb	r3, [r0, #6]
    507a:	2b09      	cmp	r3, #9
    507c:	d003      	beq.n	5086 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    507e:	2b0b      	cmp	r3, #11
    5080:	d001      	beq.n	5086 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    5082:	2000      	movs	r0, #0
}
    5084:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5086:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    508a:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    508e:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5092:	01db      	lsls	r3, r3, #7
    5094:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5098:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    509c:	b111      	cbz	r1, 50a4 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    509e:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    50a0:	615a      	str	r2, [r3, #20]
    50a2:	4770      	bx	lr
    50a4:	2001      	movs	r0, #1
    50a6:	619a      	str	r2, [r3, #24]
    50a8:	4770      	bx	lr
    50aa:	bf00      	nop

000050ac <_ZN9ClearCore11MotorDriver13MotorInBStateEb>:
    switch (m_mode) {
    50ac:	7983      	ldrb	r3, [r0, #6]
    50ae:	2b09      	cmp	r3, #9
    50b0:	d111      	bne.n	50d6 <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x2a>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    50b2:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    50b6:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    50ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
    50be:	01db      	lsls	r3, r3, #7
    50c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    50c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    50c8:	b111      	cbz	r1, 50d0 <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x24>
            return true;
    50ca:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    50cc:	615a      	str	r2, [r3, #20]
    50ce:	4770      	bx	lr
    50d0:	2001      	movs	r0, #1
    50d2:	619a      	str	r2, [r3, #24]
    50d4:	4770      	bx	lr
            return false;
    50d6:	2000      	movs	r0, #0
}
    50d8:	4770      	bx	lr
    50da:	bf00      	nop

000050dc <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    50dc:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    50de:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    50e2:	b083      	sub	sp, #12
    50e4:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    50e6:	2b00      	cmp	r3, #0
    50e8:	d171      	bne.n	51ce <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    50ea:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    50ee:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    50f2:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    50f6:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    50fa:	428a      	cmp	r2, r1
    50fc:	d031      	beq.n	5162 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    50fe:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    5102:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5106:	2200      	movs	r2, #0
    5108:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    510c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    5110:	b358      	cbz	r0, 516a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    5112:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    5114:	b672      	cpsid	i
    if (wasDisabled && value) {
    5116:	b36b      	cbz	r3, 5174 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    5118:	b371      	cbz	r1, 5178 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    511a:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    511e:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5120:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5124:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5128:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    512a:	79a3      	ldrb	r3, [r4, #6]
    512c:	2b0a      	cmp	r3, #10
    512e:	d02a      	beq.n	5186 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5130:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5134:	428b      	cmp	r3, r1
    5136:	d035      	beq.n	51a4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    5138:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        \param[in] bitsToChange LED bit in the shift register to be set
        or cleared.
    **/
    void ShifterState(bool setFlds, Masks bitsToChange) {
        setFlds ? ShifterStateSet(bitsToChange)
        : ShifterStateClear(bitsToChange);
    513c:	2900      	cmp	r1, #0
    513e:	d13b      	bne.n	51b8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5140:	f3bf 8f5b 	dmb	ish
    5144:	4a2d      	ldr	r2, [pc, #180]	; (51fc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    5146:	43db      	mvns	r3, r3
    5148:	e852 0f00 	ldrex	r0, [r2]
    514c:	4018      	ands	r0, r3
    514e:	e842 0500 	strex	r5, r0, [r2]
    5152:	2d00      	cmp	r5, #0
    5154:	d1f8      	bne.n	5148 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    5156:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    515a:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    515e:	b003      	add	sp, #12
    5160:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    5162:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    5166:	2a00      	cmp	r2, #0
    5168:	d133      	bne.n	51d2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    516a:	2900      	cmp	r1, #0
    516c:	d0d1      	beq.n	5112 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    516e:	b672      	cpsid	i
    if (wasDisabled && value) {
    5170:	2b00      	cmp	r3, #0
    5172:	d1d1      	bne.n	5118 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    5174:	2900      	cmp	r1, #0
    5176:	d1d7      	bne.n	5128 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    5178:	2300      	movs	r3, #0
    517a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    517e:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5180:	79a3      	ldrb	r3, [r4, #6]
    5182:	2b0a      	cmp	r3, #10
    5184:	d1d4      	bne.n	5130 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5186:	b919      	cbnz	r1, 5190 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    5188:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    518c:	079a      	lsls	r2, r3, #30
    518e:	d428      	bmi.n	51e2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    5190:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5194:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5196:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    519a:	bf48      	it	mi
    519c:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    51a0:	428b      	cmp	r3, r1
    51a2:	d1c9      	bne.n	5138 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    51a4:	2d00      	cmp	r5, #0
    51a6:	d0d8      	beq.n	515a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    51a8:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    51ac:	2b00      	cmp	r3, #0
    51ae:	d1d4      	bne.n	515a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    51b0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    51b4:	2900      	cmp	r1, #0
    51b6:	d0c3      	beq.n	5140 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    51b8:	f3bf 8f5b 	dmb	ish
    51bc:	4a0f      	ldr	r2, [pc, #60]	; (51fc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    51be:	e852 0f00 	ldrex	r0, [r2]
    51c2:	4318      	orrs	r0, r3
    51c4:	e842 0500 	strex	r5, r0, [r2]
    51c8:	2d00      	cmp	r5, #0
    51ca:	d0c4      	beq.n	5156 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    51cc:	e7f7      	b.n	51be <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    51ce:	2300      	movs	r3, #0
    51d0:	e78f      	b.n	50f2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    51d2:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    51d4:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    51d8:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    51dc:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    51e0:	e797      	b.n	5112 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    51e2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    51e6:	9101      	str	r1, [sp, #4]
    51e8:	f043 0310 	orr.w	r3, r3, #16
    51ec:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    51f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    51f4:	f006 fc18 	bl	ba28 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    51f8:	9901      	ldr	r1, [sp, #4]
    51fa:	e7c9      	b.n	5190 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    51fc:	20001adc 	.word	0x20001adc

00005200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    5200:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5204:	2b00      	cmp	r3, #0
    5206:	d04a      	beq.n	529e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5208:	4a35      	ldr	r2, [pc, #212]	; (52e0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    520a:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    520e:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    5210:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5212:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    5214:	b98b      	cbnz	r3, 523a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    5216:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    521a:	2b01      	cmp	r3, #1
    521c:	d022      	beq.n	5264 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    521e:	2b02      	cmp	r3, #2
    5220:	d13b      	bne.n	529a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    5222:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    5226:	2b00      	cmp	r3, #0
    5228:	d145      	bne.n	52b6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    522a:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    522e:	2b00      	cmp	r3, #0
    5230:	d13c      	bne.n	52ac <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5232:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5236:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    523a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    523e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    5242:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    5244:	428b      	cmp	r3, r1
    5246:	d32b      	bcc.n	52a0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    5248:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    524c:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    5250:	3b01      	subs	r3, #1
    5252:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5256:	b94b      	cbnz	r3, 526c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    5258:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    525c:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5260:	2b01      	cmp	r3, #1
    5262:	d1dc      	bne.n	521e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    5264:	2302      	movs	r3, #2
    5266:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    526a:	e7da      	b.n	5222 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    526c:	4b1d      	ldr	r3, [pc, #116]	; (52e4 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    526e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    5272:	f3bf 8f5b 	dmb	ish
    5276:	e853 1f00 	ldrex	r1, [r3]
    527a:	4051      	eors	r1, r2
    527c:	e843 1e00 	strex	lr, r1, [r3]
    5280:	f1be 0f00 	cmp.w	lr, #0
    5284:	d1f7      	bne.n	5276 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    5286:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    528a:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    528e:	2b01      	cmp	r3, #1
    5290:	d1c5      	bne.n	521e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    5292:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    5296:	2b00      	cmp	r3, #0
    5298:	d0e4      	beq.n	5264 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    529a:	f85d fb04 	ldr.w	pc, [sp], #4
    529e:	4770      	bx	lr
    switch (m_clearFaultState) {
    52a0:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    52a4:	2b02      	cmp	r3, #2
    52a6:	d0bc      	beq.n	5222 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    52a8:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    52ac:	3b01      	subs	r3, #1
    52ae:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    52b2:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    52b6:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    52b8:	f500 7394 	add.w	r3, r0, #296	; 0x128
    52bc:	f3bf 8f5b 	dmb	ish
    52c0:	e853 1f00 	ldrex	r1, [r3]
    52c4:	f021 0120 	bic.w	r1, r1, #32
    52c8:	e843 1e00 	strex	lr, r1, [r3]
    52cc:	f1be 0f00 	cmp.w	lr, #0
    52d0:	d1f6      	bne.n	52c0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    52d2:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    52d6:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    52da:	f85d fb04 	ldr.w	pc, [sp], #4
    52de:	bf00      	nop
    52e0:	20001bfc 	.word	0x20001bfc
    52e4:	20001adc 	.word	0x20001adc

000052e8 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    52e8:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    52ec:	b570      	push	{r4, r5, r6, lr}
    52ee:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    52f0:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    52f4:	2b00      	cmp	r3, #0
    52f6:	d163      	bne.n	53c0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    52f8:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    52fc:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    5300:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5304:	bb39      	cbnz	r1, 5356 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    5306:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    530a:	b672      	cpsid	i
    if (wasDisabled && value) {
    530c:	b35b      	cbz	r3, 5366 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    530e:	b365      	cbz	r5, 536a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    5310:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    5314:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5316:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    531a:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    531e:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5320:	79a3      	ldrb	r3, [r4, #6]
    5322:	2b0a      	cmp	r3, #10
    5324:	d028      	beq.n	5378 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5326:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    532a:	42ab      	cmp	r3, r5
    532c:	d033      	beq.n	5396 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    532e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5332:	2d00      	cmp	r5, #0
    5334:	d139      	bne.n	53aa <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5336:	f3bf 8f5b 	dmb	ish
    533a:	4a28      	ldr	r2, [pc, #160]	; (53dc <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    533c:	43db      	mvns	r3, r3
    533e:	e852 1f00 	ldrex	r1, [r2]
    5342:	4019      	ands	r1, r3
    5344:	e842 1000 	strex	r0, r1, [r2]
    5348:	2800      	cmp	r0, #0
    534a:	d1f8      	bne.n	533e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    534c:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5350:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    5354:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    5356:	2500      	movs	r5, #0
    5358:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    535c:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    5360:	b672      	cpsid	i
    if (wasDisabled && value) {
    5362:	2b00      	cmp	r3, #0
    5364:	d1d3      	bne.n	530e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    5366:	2d00      	cmp	r5, #0
    5368:	d1d9      	bne.n	531e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    536a:	2300      	movs	r3, #0
    536c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    5370:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5372:	79a3      	ldrb	r3, [r4, #6]
    5374:	2b0a      	cmp	r3, #10
    5376:	d1d6      	bne.n	5326 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5378:	b91d      	cbnz	r5, 5382 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    537a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    537e:	079a      	lsls	r2, r3, #30
    5380:	d420      	bmi.n	53c4 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    5382:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5386:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5388:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    538c:	bf48      	it	mi
    538e:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5392:	42ab      	cmp	r3, r5
    5394:	d1cb      	bne.n	532e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    5396:	2e00      	cmp	r6, #0
    5398:	d0da      	beq.n	5350 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    539a:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    539e:	2b00      	cmp	r3, #0
    53a0:	d1d6      	bne.n	5350 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    53a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    53a6:	2d00      	cmp	r5, #0
    53a8:	d0c5      	beq.n	5336 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    53aa:	f3bf 8f5b 	dmb	ish
    53ae:	4a0b      	ldr	r2, [pc, #44]	; (53dc <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    53b0:	e852 1f00 	ldrex	r1, [r2]
    53b4:	4319      	orrs	r1, r3
    53b6:	e842 1000 	strex	r0, r1, [r2]
    53ba:	2800      	cmp	r0, #0
    53bc:	d0c6      	beq.n	534c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    53be:	e7f7      	b.n	53b0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    53c0:	2300      	movs	r3, #0
    53c2:	e79d      	b.n	5300 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    53c4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    53c8:	f043 0310 	orr.w	r3, r3, #16
    53cc:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    53d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    53d4:	f006 fb28 	bl	ba28 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    53d8:	e7d3      	b.n	5382 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    53da:	bf00      	nop
    53dc:	20001adc 	.word	0x20001adc

000053e0 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    53e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    53e2:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    53e6:	b903      	cbnz	r3, 53ea <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    53e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53ea:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    53ec:	f009 f99c 	bl	e728 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    53f0:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    53f2:	4a98      	ldr	r2, [pc, #608]	; (5654 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    53f4:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    53f8:	2b0a      	cmp	r3, #10
    53fa:	bf08      	it	eq
    53fc:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5400:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5404:	bf08      	it	eq
    5406:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    540a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    540e:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5410:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5414:	bf18      	it	ne
    5416:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5418:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    541a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    541c:	f240 80df 	bls.w	55de <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5420:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5424:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5426:	4a8c      	ldr	r2, [pc, #560]	; (5658 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5428:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    542c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5430:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5434:	1c48      	adds	r0, r1, #1
    5436:	d012      	beq.n	545e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5438:	4888      	ldr	r0, [pc, #544]	; (565c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    543a:	f003 fdfb 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    543e:	6803      	ldr	r3, [r0, #0]
    5440:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5442:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5444:	4798      	blx	r3
    5446:	2809      	cmp	r0, #9
    5448:	f000 8248 	beq.w	58dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    544c:	4628      	mov	r0, r5
    544e:	f009 f8f1 	bl	e634 <_ZN9ClearCore9DigitalIn5StateEv>
    5452:	1c01      	adds	r1, r0, #0
    5454:	bf18      	it	ne
    5456:	2101      	movne	r1, #1
    5458:	4620      	mov	r0, r4
    545a:	f7ff fe3f 	bl	50dc <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    545e:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5462:	1c4a      	adds	r2, r1, #1
    5464:	d016      	beq.n	5494 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5466:	79a3      	ldrb	r3, [r4, #6]
    5468:	2b0a      	cmp	r3, #10
    546a:	d039      	beq.n	54e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    546c:	487b      	ldr	r0, [pc, #492]	; (565c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    546e:	f003 fde1 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5472:	6803      	ldr	r3, [r0, #0]
    5474:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5476:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5478:	4798      	blx	r3
    547a:	2809      	cmp	r0, #9
    547c:	f000 80d0 	beq.w	5620 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    5480:	4628      	mov	r0, r5
    5482:	f009 f8d7 	bl	e634 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5486:	79a3      	ldrb	r3, [r4, #6]
    5488:	2b09      	cmp	r3, #9
    548a:	f000 80d3 	beq.w	5634 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    548e:	2b0b      	cmp	r3, #11
    5490:	f000 80d0 	beq.w	5634 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5494:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5498:	1c4b      	adds	r3, r1, #1
    549a:	d021      	beq.n	54e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    549c:	79a3      	ldrb	r3, [r4, #6]
    549e:	2b0a      	cmp	r3, #10
    54a0:	d01e      	beq.n	54e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    54a2:	486e      	ldr	r0, [pc, #440]	; (565c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    54a4:	f003 fdc6 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    54a8:	6803      	ldr	r3, [r0, #0]
    54aa:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    54ac:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    54ae:	4798      	blx	r3
    54b0:	2809      	cmp	r0, #9
    54b2:	f000 8239 	beq.w	5928 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    54b6:	4628      	mov	r0, r5
    54b8:	f009 f8bc 	bl	e634 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    54bc:	79a3      	ldrb	r3, [r4, #6]
    54be:	2b09      	cmp	r3, #9
    54c0:	d10e      	bne.n	54e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    54c2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    54c6:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    54ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
    54ce:	01db      	lsls	r3, r3, #7
    54d0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    54d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    54d8:	2800      	cmp	r0, #0
    54da:	f000 81d4 	beq.w	5886 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    54de:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    54e0:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    54e4:	1c4f      	adds	r7, r1, #1
    54e6:	d010      	beq.n	550a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    54e8:	485c      	ldr	r0, [pc, #368]	; (565c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    54ea:	f003 fda3 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    54ee:	6803      	ldr	r3, [r0, #0]
    54f0:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    54f2:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    54f4:	4798      	blx	r3
    54f6:	2809      	cmp	r0, #9
    54f8:	f000 817d 	beq.w	57f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    54fc:	682b      	ldr	r3, [r5, #0]
    54fe:	4628      	mov	r0, r5
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5504:	2804      	cmp	r0, #4
    5506:	f000 8176 	beq.w	57f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    550a:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    550e:	1c4e      	adds	r6, r1, #1
    5510:	d015      	beq.n	553e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5512:	4852      	ldr	r0, [pc, #328]	; (565c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5514:	f003 fd8e 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5518:	6803      	ldr	r3, [r0, #0]
    551a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    551c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    551e:	4798      	blx	r3
    5520:	2809      	cmp	r0, #9
    5522:	f000 81e6 	beq.w	58f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    5526:	4628      	mov	r0, r5
    5528:	f009 f884 	bl	e634 <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    552c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5530:	fab0 f080 	clz	r0, r0
    5534:	0940      	lsrs	r0, r0, #5
    5536:	f360 03c3 	bfi	r3, r0, #3, #1
    553a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    553e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    5542:	1c4d      	adds	r5, r1, #1
    5544:	d015      	beq.n	5572 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5546:	4845      	ldr	r0, [pc, #276]	; (565c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5548:	f003 fd74 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    554c:	6803      	ldr	r3, [r0, #0]
    554e:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5550:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5552:	4798      	blx	r3
    5554:	2809      	cmp	r0, #9
    5556:	f000 81d1 	beq.w	58fc <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    555a:	4628      	mov	r0, r5
    555c:	f009 f86a 	bl	e634 <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    5560:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5564:	fab0 f080 	clz	r0, r0
    5568:	0940      	lsrs	r0, r0, #5
    556a:	f360 1304 	bfi	r3, r0, #4, #1
    556e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5572:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    5576:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    557a:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    557e:	1c48      	adds	r0, r1, #1
    5580:	f000 8132 	beq.w	57e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5584:	4835      	ldr	r0, [pc, #212]	; (565c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5586:	f003 fd55 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    558a:	6803      	ldr	r3, [r0, #0]
    558c:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    558e:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5590:	4798      	blx	r3
    5592:	2809      	cmp	r0, #9
    5594:	f000 81c0 	beq.w	5918 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    5598:	4638      	mov	r0, r7
    559a:	f009 f84b 	bl	e634 <_ZN9ClearCore9DigitalIn5StateEv>
    559e:	fab0 f780 	clz	r7, r0
    55a2:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    55a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    55a8:	2b00      	cmp	r3, #0
    55aa:	f040 8131 	bne.w	5810 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    55ae:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    55b2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    55b6:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    55ba:	2900      	cmp	r1, #0
    55bc:	d152      	bne.n	5664 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    55be:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    55c2:	0792      	lsls	r2, r2, #30
    55c4:	d54e      	bpl.n	5664 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    55c6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    55ca:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    55ce:	2800      	cmp	r0, #0
    55d0:	f000 8152 	beq.w	5878 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    55d4:	06d7      	lsls	r7, r2, #27
    55d6:	d549      	bpl.n	566c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    55d8:	f046 0604 	orr.w	r6, r6, #4
    55dc:	e046      	b.n	566c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    55de:	07aa      	lsls	r2, r5, #30
    55e0:	f000 8161 	beq.w	58a6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    55e4:	2333      	movs	r3, #51	; 0x33
    55e6:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    55e8:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    55ec:	2201      	movs	r2, #1
    55ee:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    55f2:	b29a      	uxth	r2, r3
    55f4:	3200      	adds	r2, #0
    55f6:	bf18      	it	ne
    55f8:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    55fa:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    55fe:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    5602:	06eb      	lsls	r3, r5, #27
    5604:	f100 8158 	bmi.w	58b8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5608:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    560c:	2b00      	cmp	r3, #0
    560e:	f040 810f 	bne.w	5830 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5612:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5616:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    561a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    561e:	e707      	b.n	5430 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5620:	4b0f      	ldr	r3, [pc, #60]	; (5660 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    5622:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5626:	6818      	ldr	r0, [r3, #0]
    5628:	f00a f85a 	bl	f6e0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    562c:	79a3      	ldrb	r3, [r4, #6]
    562e:	2b09      	cmp	r3, #9
    5630:	f47f af2d 	bne.w	548e <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5634:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5638:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    563c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5640:	01db      	lsls	r3, r3, #7
    5642:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5646:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    564a:	2800      	cmp	r0, #0
    564c:	f000 8119 	beq.w	5882 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    5650:	615a      	str	r2, [r3, #20]
    5652:	e71f      	b.n	5494 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5654:	00023070 	.word	0x00023070
    5658:	c61c3c00 	.word	0xc61c3c00
    565c:	200019e4 	.word	0x200019e4
    5660:	20001f0c 	.word	0x20001f0c
    5664:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5668:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    566c:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    5670:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    5674:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5678:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    567c:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5680:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    5684:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5688:	2b00      	cmp	r3, #0
    568a:	f000 80ab 	beq.w	57e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    568e:	1f98      	subs	r0, r3, #6
    5690:	bf18      	it	ne
    5692:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5694:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    5698:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    569c:	2a00      	cmp	r2, #0
    569e:	f000 809b 	beq.w	57d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    56a2:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    56a6:	b111      	cbz	r1, 56ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    56a8:	07af      	lsls	r7, r5, #30
    56aa:	f140 80df 	bpl.w	586c <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    56ae:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    56b2:	2b03      	cmp	r3, #3
    56b4:	d071      	beq.n	579a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    56b6:	f015 0302 	ands.w	r3, r5, #2
    56ba:	f040 80ce 	bne.w	585a <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    56be:	2900      	cmp	r1, #0
    56c0:	d06b      	beq.n	579a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    56c2:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    56c6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    56ca:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    56ce:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    56d2:	2b00      	cmp	r3, #0
    56d4:	d065      	beq.n	57a2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    56d6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    56da:	2b00      	cmp	r3, #0
    56dc:	f340 8113 	ble.w	5906 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    56e0:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    56e4:	2201      	movs	r2, #1
            m_enableCounter--;
    56e6:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    56e8:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    56ec:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    56f0:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    56f4:	b11b      	cbz	r3, 56fe <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    56f6:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    56f8:	bf48      	it	mi
    56fa:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    56fe:	1c32      	adds	r2, r6, #0
    5700:	bf18      	it	ne
    5702:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5704:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5708:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    570c:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5710:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5714:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5718:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    571c:	f3bf 8f5b 	dmb	ish
    5720:	e852 1f00 	ldrex	r1, [r2]
    5724:	4319      	orrs	r1, r3
    5726:	e842 1000 	strex	r0, r1, [r2]
    572a:	2800      	cmp	r0, #0
    572c:	d1f8      	bne.n	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    572e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5732:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5736:	f3bf 8f5b 	dmb	ish
    573a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    573e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5742:	e853 2f00 	ldrex	r2, [r3]
    5746:	432a      	orrs	r2, r5
    5748:	e843 2100 	strex	r1, r2, [r3]
    574c:	2900      	cmp	r1, #0
    574e:	d1f8      	bne.n	5742 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    5750:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5754:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    5756:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    575a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    575e:	2b0a      	cmp	r3, #10
    5760:	f47f ae42 	bne.w	53e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    5764:	f104 0530 	add.w	r5, r4, #48	; 0x30
    5768:	4628      	mov	r0, r5
    576a:	f005 feb5 	bl	b4d8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    576e:	4628      	mov	r0, r5
    5770:	f006 f9d6 	bl	bb20 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    5774:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5778:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    577a:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    577c:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    5780:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    5782:	4282      	cmp	r2, r0
    5784:	f43f ae30 	beq.w	53e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    5788:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    578c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5790:	680b      	ldr	r3, [r1, #0]
    5792:	4213      	tst	r3, r2
    5794:	d1fc      	bne.n	5790 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    5796:	6028      	str	r0, [r5, #0]
    5798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    579a:	1c03      	adds	r3, r0, #0
    579c:	bf18      	it	ne
    579e:	2301      	movne	r3, #1
    57a0:	e78f      	b.n	56c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    57a2:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    57a6:	2a00      	cmp	r2, #0
    57a8:	d03a      	beq.n	5820 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    57aa:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    57ae:	b933      	cbnz	r3, 57be <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    57b0:	b938      	cbnz	r0, 57c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    57b2:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    57b6:	2204      	movs	r2, #4
    57b8:	f362 258c 	bfi	r5, r2, #10, #3
    57bc:	e79a      	b.n	56f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    57be:	2800      	cmp	r0, #0
    57c0:	d063      	beq.n	588a <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    57c2:	f015 0302 	ands.w	r3, r5, #2
    57c6:	d1f6      	bne.n	57b6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    57c8:	2203      	movs	r2, #3
    57ca:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    57ce:	f363 1504 	bfi	r5, r3, #4, #1
    57d2:	f005 0302 	and.w	r3, r5, #2
    57d6:	e78d      	b.n	56f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    57d8:	f362 0500 	bfi	r5, r2, #0, #1
    57dc:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    57e0:	4613      	mov	r3, r2
    57e2:	e76e      	b.n	56c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    57e4:	4618      	mov	r0, r3
    57e6:	e755      	b.n	5694 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    57e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    57ec:	bb93      	cbnz	r3, 5854 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    57ee:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    57f2:	461f      	mov	r7, r3
    57f4:	e6dd      	b.n	55b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    57f6:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    57fa:	b381      	cbz	r1, 585e <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    57fc:	682b      	ldr	r3, [r5, #0]
    57fe:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    5802:	695b      	ldr	r3, [r3, #20]
    5804:	b109      	cbz	r1, 580a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5806:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    580a:	4628      	mov	r0, r5
    580c:	4798      	blx	r3
    580e:	e67c      	b.n	550a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    5810:	b307      	cbz	r7, 5854 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    5812:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    5816:	2900      	cmp	r1, #0
    5818:	f000 80ab 	beq.w	5972 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    581c:	460f      	mov	r7, r1
    581e:	e6c8      	b.n	55b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    5820:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    5824:	07aa      	lsls	r2, r5, #30
    5826:	f57f af6a 	bpl.w	56fe <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    582a:	f046 0610 	orr.w	r6, r6, #16
    582e:	e762      	b.n	56f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5830:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    5834:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5838:	4073      	eors	r3, r6
    583a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    583c:	4291      	cmp	r1, r2
    583e:	f000 80a4 	beq.w	598a <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5842:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    5846:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    584a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    584e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    5852:	e5ed      	b.n	5430 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    5854:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    5858:	e6ab      	b.n	55b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    585a:	2300      	movs	r3, #0
    585c:	e731      	b.n	56c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    585e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    5862:	682b      	ldr	r3, [r5, #0]
    5864:	2a01      	cmp	r2, #1
    5866:	695b      	ldr	r3, [r3, #20]
    5868:	d1cf      	bne.n	580a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    586a:	e7cc      	b.n	5806 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    586c:	2801      	cmp	r0, #1
    586e:	f47f af1e 	bne.w	56ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5872:	f045 0501 	orr.w	r5, r5, #1
    5876:	e71c      	b.n	56b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    5878:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    587a:	bf48      	it	mi
    587c:	f046 0602 	orrmi.w	r6, r6, #2
    5880:	e6f4      	b.n	566c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5882:	619a      	str	r2, [r3, #24]
    5884:	e606      	b.n	5494 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5886:	619a      	str	r2, [r3, #24]
    5888:	e62a      	b.n	54e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    588a:	2302      	movs	r3, #2
    588c:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    5890:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    5894:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5898:	f006 f8c6 	bl	ba28 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    589c:	f046 0620 	orr.w	r6, r6, #32
    58a0:	f005 0302 	and.w	r3, r5, #2
    58a4:	e726      	b.n	56f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    58a6:	f004 f9e5 	bl	9c74 <Milliseconds>
    58aa:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    58ae:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    58b0:	2803      	cmp	r0, #3
    58b2:	f63f ae97 	bhi.w	55e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    58b6:	e6a4      	b.n	5602 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    58b8:	f004 f9dc 	bl	9c74 <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    58bc:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    58c0:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    58c4:	2b00      	cmp	r3, #0
    58c6:	d03a      	beq.n	593e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    58c8:	2330      	movs	r3, #48	; 0x30
    58ca:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    58cc:	2200      	movs	r2, #0
    58ce:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    58d2:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    58d6:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    58da:	e697      	b.n	560c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    58dc:	4b54      	ldr	r3, [pc, #336]	; (5a30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    58de:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    58e2:	6818      	ldr	r0, [r3, #0]
    58e4:	f009 fefc 	bl	f6e0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    58e8:	4601      	mov	r1, r0
    58ea:	4620      	mov	r0, r4
    58ec:	f7ff fbf6 	bl	50dc <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    58f0:	e5b5      	b.n	545e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    58f2:	682b      	ldr	r3, [r5, #0]
    58f4:	4628      	mov	r0, r5
    58f6:	691b      	ldr	r3, [r3, #16]
    58f8:	4798      	blx	r3
    58fa:	e617      	b.n	552c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    58fc:	682b      	ldr	r3, [r5, #0]
    58fe:	4628      	mov	r0, r5
    5900:	691b      	ldr	r3, [r3, #16]
    5902:	4798      	blx	r3
    5904:	e62c      	b.n	5560 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    5906:	2201      	movs	r2, #1
            m_isEnabling = false;
    5908:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    590a:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    590e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    5912:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    5916:	e748      	b.n	57aa <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    5918:	683b      	ldr	r3, [r7, #0]
    591a:	4638      	mov	r0, r7
    591c:	691b      	ldr	r3, [r3, #16]
    591e:	4798      	blx	r3
    5920:	fab0 f780 	clz	r7, r0
    5924:	097f      	lsrs	r7, r7, #5
    5926:	e63d      	b.n	55a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    5928:	4b41      	ldr	r3, [pc, #260]	; (5a30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    592a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    592e:	6818      	ldr	r0, [r3, #0]
    5930:	f009 fed6 	bl	f6e0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5934:	79a3      	ldrb	r3, [r4, #6]
    5936:	2b09      	cmp	r3, #9
    5938:	f43f adc3 	beq.w	54c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    593c:	e5d0      	b.n	54e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    593e:	06ad      	lsls	r5, r5, #26
    5940:	f57f ae62 	bpl.w	5608 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    5944:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5948:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    594c:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5950:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    5954:	8bf8      	ldrh	r0, [r7, #30]
    5956:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    595a:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    595e:	8bbd      	ldrh	r5, [r7, #28]
    5960:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    5964:	b9d0      	cbnz	r0, 599c <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    5966:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    596a:	2201      	movs	r2, #1
    596c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    5970:	e64c      	b.n	560c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    5972:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5976:	f006 f873 	bl	ba60 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    597a:	2301      	movs	r3, #1
    597c:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    5980:	f046 0608 	orr.w	r6, r6, #8
    5984:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5988:	e613      	b.n	55b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    598a:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    598e:	2a00      	cmp	r2, #0
    5990:	f43f ad49 	beq.w	5426 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    5994:	3a01      	subs	r2, #1
    5996:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    599a:	e549      	b.n	5430 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    599c:	ee07 1a90 	vmov	s15, r1
    59a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    59a4:	ee07 2a90 	vmov	s15, r2
    59a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    59ac:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    59b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    59b4:	ee16 0a90 	vmov	r0, s13
    59b8:	f016 fa94 	bl	1bee4 <__aeabi_f2d>
    59bc:	a318      	add	r3, pc, #96	; (adr r3, 5a20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    59be:	e9d3 2300 	ldrd	r2, r3, [r3]
    59c2:	f016 f92f 	bl	1bc24 <__aeabi_dsub>
    59c6:	a318      	add	r3, pc, #96	; (adr r3, 5a28 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    59c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    59cc:	f016 fade 	bl	1bf8c <__aeabi_dmul>
    59d0:	f016 fdbe 	bl	1c550 <__aeabi_d2f>
    59d4:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    59d8:	b11e      	cbz	r6, 59e2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    59da:	ed9f 7a16 	vldr	s14, [pc, #88]	; 5a34 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    59de:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    59e2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    59e6:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    59ea:	2b02      	cmp	r3, #2
    59ec:	d004      	beq.n	59f8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    59ee:	2302      	movs	r3, #2
    59f0:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    59f4:	2300      	movs	r3, #0
    59f6:	e7b8      	b.n	596a <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    59f8:	ee17 0a90 	vmov	r0, s15
    59fc:	f016 fa72 	bl	1bee4 <__aeabi_f2d>
    5a00:	2200      	movs	r2, #0
    5a02:	4b0d      	ldr	r3, [pc, #52]	; (5a38 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    5a04:	f016 f90e 	bl	1bc24 <__aeabi_dsub>
    5a08:	4602      	mov	r2, r0
    5a0a:	460b      	mov	r3, r1
    5a0c:	f016 f90c 	bl	1bc28 <__adddf3>
    5a10:	f016 fd9e 	bl	1c550 <__aeabi_d2f>
    5a14:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    5a18:	e7e9      	b.n	59ee <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    5a1a:	bf00      	nop
    5a1c:	f3af 8000 	nop.w
    5a20:	9999999a 	.word	0x9999999a
    5a24:	3fa99999 	.word	0x3fa99999
    5a28:	71c71c72 	.word	0x71c71c72
    5a2c:	405bc71c 	.word	0x405bc71c
    5a30:	20001f0c 	.word	0x20001f0c
    5a34:	42c80000 	.word	0x42c80000
    5a38:	40490000 	.word	0x40490000

00005a3c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    5a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a40:	4604      	mov	r4, r0
    5a42:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    5a44:	4690      	mov	r8, r2
    5a46:	2a00      	cmp	r2, #0
    5a48:	d154      	bne.n	5af4 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    5a4a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    5a4c:	1b4d      	subs	r5, r1, r5
    5a4e:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    5a50:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    5a54:	2b00      	cmp	r3, #0
    5a56:	d04b      	beq.n	5af0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5a58:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5a5c:	f043 0301 	orr.w	r3, r3, #1
    5a60:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5a64:	2600      	movs	r6, #0
    5a66:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5a6a:	b933      	cbnz	r3, 5a7a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5a6c:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5a70:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5a74:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5a76:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5a7a:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5a7e:	1c48      	adds	r0, r1, #1
    5a80:	d016      	beq.n	5ab0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5a82:	4829      	ldr	r0, [pc, #164]	; (5b28 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    5a84:	f003 fad6 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5a88:	6803      	ldr	r3, [r0, #0]
    5a8a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5a8c:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5a8e:	4798      	blx	r3
    5a90:	2809      	cmp	r0, #9
    5a92:	d040      	beq.n	5b16 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    5a94:	4648      	mov	r0, r9
    5a96:	f008 fdcd 	bl	e634 <_ZN9ClearCore9DigitalIn5StateEv>
    5a9a:	fab0 f080 	clz	r0, r0
    5a9e:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5aa0:	b130      	cbz	r0, 5ab0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5aa2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5aa6:	f043 0308 	orr.w	r3, r3, #8
    5aaa:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5aae:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5ab0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5ab4:	b16d      	cbz	r5, 5ad2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    5ab6:	06d9      	lsls	r1, r3, #27
    5ab8:	d426      	bmi.n	5b08 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    5aba:	b196      	cbz	r6, 5ae2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    5abc:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    5abe:	4642      	mov	r2, r8
    5ac0:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    5ac2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    5ac6:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5aca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    5ace:	f005 bc7f 	b.w	b3d0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5ad2:	071a      	lsls	r2, r3, #28
    5ad4:	d5f1      	bpl.n	5aba <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5ad6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5ada:	f043 0302 	orr.w	r3, r3, #2
    5ade:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5ae2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5ae6:	079b      	lsls	r3, r3, #30
    5ae8:	d406      	bmi.n	5af8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    5aea:	2000      	movs	r0, #0
    5aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    5af0:	2601      	movs	r6, #1
    5af2:	e7b8      	b.n	5a66 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    5af4:	0fcd      	lsrs	r5, r1, #31
    5af6:	e7ab      	b.n	5a50 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    5af8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5afc:	2100      	movs	r1, #0
    5afe:	f005 ffaf 	bl	ba60 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5b02:	2000      	movs	r0, #0
    5b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5b08:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5b0c:	f043 0304 	orr.w	r3, r3, #4
    5b10:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5b14:	e7e5      	b.n	5ae2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    5b16:	f8d9 3000 	ldr.w	r3, [r9]
    5b1a:	4648      	mov	r0, r9
    5b1c:	691b      	ldr	r3, [r3, #16]
    5b1e:	4798      	blx	r3
    5b20:	fab0 f080 	clz	r0, r0
    5b24:	0940      	lsrs	r0, r0, #5
    5b26:	e7bb      	b.n	5aa0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    5b28:	200019e4 	.word	0x200019e4

00005b2c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    5b2c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5b30:	f7ff bf84 	b.w	5a3c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

00005b34 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    5b36:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5b3a:	4604      	mov	r4, r0
    5b3c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d04a      	beq.n	5bd8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5b42:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    5b46:	f043 0301 	orr.w	r3, r3, #1
    5b4a:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    5b4e:	2500      	movs	r5, #0
    5b50:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5b54:	b933      	cbnz	r3, 5b64 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5b56:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5b5a:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5b5e:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5b60:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5b64:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5b68:	1c48      	adds	r0, r1, #1
    5b6a:	d016      	beq.n	5b9a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5b6c:	4826      	ldr	r0, [pc, #152]	; (5c08 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    5b6e:	f003 fa61 	bl	9034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5b72:	6803      	ldr	r3, [r0, #0]
    5b74:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5b76:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5b78:	4798      	blx	r3
    5b7a:	2809      	cmp	r0, #9
    5b7c:	d03c      	beq.n	5bf8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    5b7e:	4638      	mov	r0, r7
    5b80:	f008 fd58 	bl	e634 <_ZN9ClearCore9DigitalIn5StateEv>
    5b84:	fab0 f080 	clz	r0, r0
    5b88:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5b8a:	b130      	cbz	r0, 5b9a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5b8c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5b90:	f043 0308 	orr.w	r3, r3, #8
    5b94:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5b98:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5b9a:	2e00      	cmp	r6, #0
    5b9c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5ba0:	da0c      	bge.n	5bbc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    5ba2:	06d9      	lsls	r1, r3, #27
    5ba4:	d421      	bmi.n	5bea <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    5ba6:	b18d      	cbz	r5, 5bcc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    5ba8:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    5baa:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    5bac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    5bb0:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5bb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    5bb8:	f005 bc44 	b.w	b444 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5bbc:	071a      	lsls	r2, r3, #28
    5bbe:	d5f2      	bpl.n	5ba6 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5bc0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5bc4:	f043 0302 	orr.w	r3, r3, #2
    5bc8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5bcc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5bd0:	079b      	lsls	r3, r3, #30
    5bd2:	d403      	bmi.n	5bdc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    5bd4:	2000      	movs	r0, #0
    5bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    5bd8:	2501      	movs	r5, #1
    5bda:	e7b9      	b.n	5b50 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    5bdc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5be0:	2100      	movs	r1, #0
    5be2:	f005 ff3d 	bl	ba60 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5be6:	2000      	movs	r0, #0
    5be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5bea:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5bee:	f043 0304 	orr.w	r3, r3, #4
    5bf2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5bf6:	e7e9      	b.n	5bcc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    5bf8:	683b      	ldr	r3, [r7, #0]
    5bfa:	4638      	mov	r0, r7
    5bfc:	691b      	ldr	r3, [r3, #16]
    5bfe:	4798      	blx	r3
    5c00:	fab0 f080 	clz	r0, r0
    5c04:	0940      	lsrs	r0, r0, #5
    5c06:	e7c0      	b.n	5b8a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    5c08:	200019e4 	.word	0x200019e4

00005c0c <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    5c0c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5c10:	f7ff bf90 	b.w	5b34 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

00005c14 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5c16:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5c1a:	4dbc      	ldr	r5, [pc, #752]	; (5f0c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5c1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5c20:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5c24:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5c28:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5c2a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5c2c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    5c30:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    5c34:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5c38:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5c3c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5c3e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    5c40:	2100      	movs	r1, #0
    5c42:	f7ff fa4b 	bl	50dc <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    5c46:	4631      	mov	r1, r6
    5c48:	4620      	mov	r0, r4
    5c4a:	f008 fd07 	bl	e65c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    5c4e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5c52:	f993 2001 	ldrsb.w	r2, [r3, #1]
    5c56:	7898      	ldrb	r0, [r3, #2]
    5c58:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    5c5c:	1813      	adds	r3, r2, r0
    5c5e:	2700      	movs	r7, #0
    5c60:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5c64:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5c68:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5c6c:	788e      	ldrb	r6, [r1, #2]
    5c6e:	01db      	lsls	r3, r3, #7
    5c70:	18e9      	adds	r1, r5, r3
    5c72:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5c74:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5c78:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    5c7c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    5c80:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    5c82:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    5c86:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5c88:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    5c8c:	f010 0f01 	tst.w	r0, #1
    5c90:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    5c94:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5c98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5c9c:	bf14      	ite	ne
    5c9e:	f360 1107 	bfine	r1, r0, #4, #4
    5ca2:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5ca6:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5caa:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5cae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    5cb2:	07f0      	lsls	r0, r6, #31
    5cb4:	f04f 0105 	mov.w	r1, #5
    5cb8:	bf4c      	ite	mi
    5cba:	f361 1207 	bfimi	r2, r1, #4, #4
    5cbe:	f361 0203 	bfipl	r2, r1, #0, #4
    5cc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5cc6:	6823      	ldr	r3, [r4, #0]
    5cc8:	4a91      	ldr	r2, [pc, #580]	; (5f10 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    5cca:	685b      	ldr	r3, [r3, #4]
    5ccc:	4293      	cmp	r3, r2
    5cce:	f040 8119 	bne.w	5f04 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    5cd2:	79a3      	ldrb	r3, [r4, #6]
    5cd4:	2b09      	cmp	r3, #9
    5cd6:	d022      	beq.n	5d1e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    5cd8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5cdc:	f005 fea4 	bl	ba28 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5ce0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5ce4:	4b89      	ldr	r3, [pc, #548]	; (5f0c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5ce6:	f991 2001 	ldrsb.w	r2, [r1, #1]
    5cea:	7889      	ldrb	r1, [r1, #2]
    5cec:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5cf0:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5cf2:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5cf4:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    5cf8:	f36f 0100 	bfc	r1, #0, #1
    5cfc:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5d00:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    5d04:	f992 1001 	ldrsb.w	r1, [r2, #1]
    5d08:	7892      	ldrb	r2, [r2, #2]
    5d0a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    5d0e:	4413      	add	r3, r2
    5d10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5d14:	f36f 0200 	bfc	r2, #0, #1
    5d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5d1c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5d1e:	68e3      	ldr	r3, [r4, #12]
    5d20:	6922      	ldr	r2, [r4, #16]
    5d22:	01db      	lsls	r3, r3, #7
    5d24:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    5d28:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    5d2c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5d30:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5d34:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    5d38:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5d3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5d40:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5d42:	bf14      	ite	ne
    5d44:	f36f 1007 	bfcne	r0, #4, #4
    5d48:	f365 0003 	bfieq	r0, r5, #0, #4
    5d4c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5d50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5d54:	496f      	ldr	r1, [pc, #444]	; (5f14 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5d56:	f042 0201 	orr.w	r2, r2, #1
    5d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5d5e:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    5d62:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    5d66:	681a      	ldr	r2, [r3, #0]
    5d68:	f36f 0241 	bfc	r2, #1, #1
    5d6c:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5d6e:	691a      	ldr	r2, [r3, #16]
    5d70:	0792      	lsls	r2, r2, #30
    5d72:	d4fc      	bmi.n	5d6e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    5d74:	681a      	ldr	r2, [r3, #0]
    5d76:	f042 0201 	orr.w	r2, r2, #1
    5d7a:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    5d7c:	691a      	ldr	r2, [r3, #16]
    5d7e:	f012 0201 	ands.w	r2, r2, #1
    5d82:	d1fb      	bne.n	5d7c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5d84:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    5d86:	4964      	ldr	r1, [pc, #400]	; (5f18 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5d88:	f362 1505 	bfi	r5, r2, #4, #2
    5d8c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    5d8e:	681d      	ldr	r5, [r3, #0]
    5d90:	f362 5514 	bfi	r5, r2, #20, #1
    5d94:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    5d96:	681d      	ldr	r5, [r3, #0]
    5d98:	f362 5555 	bfi	r5, r2, #21, #1
    5d9c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    5d9e:	681d      	ldr	r5, [r3, #0]
    5da0:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    5da4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    5da6:	681d      	ldr	r5, [r3, #0]
    5da8:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    5dac:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    5dae:	681d      	ldr	r5, [r3, #0]
    5db0:	f362 25cb 	bfi	r5, r2, #11, #1
    5db4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    5db6:	681d      	ldr	r5, [r3, #0]
    5db8:	f362 250a 	bfi	r5, r2, #8, #3
    5dbc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    5dbe:	681d      	ldr	r5, [r3, #0]
    5dc0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    5dc4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    5dc6:	681d      	ldr	r5, [r3, #0]
    5dc8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    5dcc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    5dce:	681d      	ldr	r5, [r3, #0]
    5dd0:	f362 0583 	bfi	r5, r2, #2, #2
    5dd4:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    5dd6:	88dd      	ldrh	r5, [r3, #6]
    5dd8:	2605      	movs	r6, #5
    5dda:	f366 0502 	bfi	r5, r6, #0, #3
    5dde:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    5de0:	88dd      	ldrh	r5, [r3, #6]
    5de2:	f045 0520 	orr.w	r5, r5, #32
    5de6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    5de8:	88dd      	ldrh	r5, [r3, #6]
    5dea:	f362 350c 	bfi	r5, r2, #12, #1
    5dee:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    5df0:	88dd      	ldrh	r5, [r3, #6]
    5df2:	f362 354d 	bfi	r5, r2, #13, #1
    5df6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    5df8:	88dd      	ldrh	r5, [r3, #6]
    5dfa:	f362 2508 	bfi	r5, r2, #8, #1
    5dfe:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    5e00:	88dd      	ldrh	r5, [r3, #6]
    5e02:	f045 0510 	orr.w	r5, r5, #16
    5e06:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    5e08:	780d      	ldrb	r5, [r1, #0]
    5e0a:	f362 0541 	bfi	r5, r2, #1, #1
    5e0e:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    5e10:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    5e14:	688e      	ldr	r6, [r1, #8]
    5e16:	78d5      	ldrb	r5, [r2, #3]
    5e18:	2201      	movs	r2, #1
    5e1a:	40aa      	lsls	r2, r5
    5e1c:	4316      	orrs	r6, r2
    5e1e:	608e      	str	r6, [r1, #8]
    5e20:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    5e22:	698e      	ldr	r6, [r1, #24]
    5e24:	00bf      	lsls	r7, r7, #2
    5e26:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    5e2a:	4316      	orrs	r6, r2
    5e2c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    5e30:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    5e32:	f005 0607 	and.w	r6, r5, #7
    5e36:	f8de c01c 	ldr.w	ip, [lr, #28]
    5e3a:	00b7      	lsls	r7, r6, #2
    5e3c:	2604      	movs	r6, #4
    5e3e:	40be      	lsls	r6, r7
    5e40:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    5e44:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    5e48:	68ce      	ldr	r6, [r1, #12]
    5e4a:	b292      	uxth	r2, r2
    5e4c:	f362 060f 	bfi	r6, r2, #0, #16
    5e50:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    5e52:	780a      	ldrb	r2, [r1, #0]
    5e54:	f042 0202 	orr.w	r2, r2, #2
    5e58:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    5e5a:	684a      	ldr	r2, [r1, #4]
    5e5c:	f012 0202 	ands.w	r2, r2, #2
    5e60:	d1fb      	bne.n	5e5a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    5e62:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    5e66:	492d      	ldr	r1, [pc, #180]	; (5f1c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5e68:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    5e6c:	463e      	mov	r6, r7
    5e6e:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    5e72:	f362 1c86 	bfi	ip, r2, #6, #1
    5e76:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    5e7a:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5e7e:	0657      	lsls	r7, r2, #25
    5e80:	d4fb      	bmi.n	5e7a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    5e82:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5e86:	4f25      	ldr	r7, [pc, #148]	; (5f1c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5e88:	f04f 0c06 	mov.w	ip, #6
    5e8c:	f36c 0203 	bfi	r2, ip, #0, #4
    5e90:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5e94:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5e9c:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5ea0:	687a      	ldr	r2, [r7, #4]
    5ea2:	f012 0f18 	tst.w	r2, #24
    5ea6:	d1fb      	bne.n	5ea0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5ea8:	4a1d      	ldr	r2, [pc, #116]	; (5f20 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5eaa:	4e1e      	ldr	r6, [pc, #120]	; (5f24 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5eac:	3074      	adds	r0, #116	; 0x74
    5eae:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5eb2:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5eb6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5eba:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    5ebe:	7991      	ldrb	r1, [r2, #6]
    5ec0:	f041 0102 	orr.w	r1, r1, #2
    5ec4:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    5ec6:	79d1      	ldrb	r1, [r2, #7]
    5ec8:	07c8      	lsls	r0, r1, #31
    5eca:	d4fc      	bmi.n	5ec6 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    5ecc:	3512      	adds	r5, #18
    5ece:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    5ed2:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    5ed6:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    5eda:	79d1      	ldrb	r1, [r2, #7]
    5edc:	0789      	lsls	r1, r1, #30
    5ede:	d4fc      	bmi.n	5eda <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    5ee0:	681a      	ldr	r2, [r3, #0]
    5ee2:	f042 0202 	orr.w	r2, r2, #2
    5ee6:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5ee8:	691a      	ldr	r2, [r3, #16]
    5eea:	f012 0202 	ands.w	r2, r2, #2
    5eee:	d1fb      	bne.n	5ee8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    5ef0:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    5ef2:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    5ef6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    5efa:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    5efe:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    5f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5f04:	2109      	movs	r1, #9
    5f06:	4620      	mov	r0, r4
    5f08:	4798      	blx	r3
    5f0a:	e708      	b.n	5d1e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    5f0c:	41008000 	.word	0x41008000
    5f10:	00004d15 	.word	0x00004d15
    5f14:	00023070 	.word	0x00023070
    5f18:	40002800 	.word	0x40002800
    5f1c:	40001c00 	.word	0x40001c00
    5f20:	4100e000 	.word	0x4100e000
    5f24:	4100e020 	.word	0x4100e020

00005f28 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    5f28:	f04f 30ff 	mov.w	r0, #4294967295
    5f2c:	4770      	bx	lr
    5f2e:	bf00      	nop

00005f30 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    5f30:	f1a1 0002 	sub.w	r0, r1, #2
    5f34:	fab0 f080 	clz	r0, r0
    5f38:	0940      	lsrs	r0, r0, #5
    5f3a:	4770      	bx	lr

00005f3c <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    5f3c:	2002      	movs	r0, #2
    5f3e:	4770      	bx	lr

00005f40 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    5f40:	f1a1 0001 	sub.w	r0, r1, #1
    5f44:	fab0 f080 	clz	r0, r0
    5f48:	0940      	lsrs	r0, r0, #5
    5f4a:	4770      	bx	lr

00005f4c <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    5f4c:	f1a1 0008 	sub.w	r0, r1, #8
    5f50:	fab0 f080 	clz	r0, r0
    5f54:	0940      	lsrs	r0, r0, #5
    5f56:	4770      	bx	lr

00005f58 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    5f58:	7a80      	ldrb	r0, [r0, #10]
    5f5a:	4770      	bx	lr

00005f5c <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    5f5c:	f1a0 0004 	sub.w	r0, r0, #4
    5f60:	e7fa      	b.n	5f58 <_ZN9ClearCore9SerialUsb4ModeEv>
    5f62:	bf00      	nop

00005f64 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    5f64:	7a80      	ldrb	r0, [r0, #10]
    }
    5f66:	1a40      	subs	r0, r0, r1
    5f68:	fab0 f080 	clz	r0, r0
    5f6c:	0940      	lsrs	r0, r0, #5
    5f6e:	4770      	bx	lr

00005f70 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    5f70:	f1a0 0004 	sub.w	r0, r0, #4
    5f74:	e7f6      	b.n	5f64 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    5f76:	bf00      	nop

00005f78 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    5f78:	2008      	movs	r0, #8
    5f7a:	4770      	bx	lr

00005f7c <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    5f7c:	f1a0 0004 	sub.w	r0, r0, #4
    5f80:	e7fa      	b.n	5f78 <_ZN9ClearCore9SerialUsb4TypeEv>
    5f82:	bf00      	nop

00005f84 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    5f84:	2000      	movs	r0, #0
    5f86:	4770      	bx	lr

00005f88 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    5f88:	f1a0 0004 	sub.w	r0, r0, #4
    5f8c:	e7fa      	b.n	5f84 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    5f8e:	bf00      	nop

00005f90 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    5f90:	2311      	movs	r3, #17
        m_index = clearCorePin;
    5f92:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    5f94:	7283      	strb	r3, [r0, #10]
    5f96:	4770      	bx	lr

00005f98 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    5f98:	f1a0 0004 	sub.w	r0, r0, #4
    5f9c:	e7f8      	b.n	5f90 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    5f9e:	bf00      	nop

00005fa0 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    5fa0:	4770      	bx	lr
    5fa2:	bf00      	nop

00005fa4 <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    5fa4:	f1a0 0004 	sub.w	r0, r0, #4
    5fa8:	e7fa      	b.n	5fa0 <_ZN9ClearCore9SerialUsb7RefreshEv>
    5faa:	bf00      	nop

00005fac <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    5fac:	4b01      	ldr	r3, [pc, #4]	; (5fb4 <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    5fae:	6818      	ldr	r0, [r3, #0]
    5fb0:	f000 be5e 	b.w	6c70 <_ZN9ClearCore10UsbManager10FlushInputEv>
    5fb4:	20000aec 	.word	0x20000aec

00005fb8 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    5fb8:	4b01      	ldr	r3, [pc, #4]	; (5fc0 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    5fba:	6818      	ldr	r0, [r3, #0]
    5fbc:	f000 be66 	b.w	6c8c <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    5fc0:	20000aec 	.word	0x20000aec

00005fc4 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    5fc4:	4b01      	ldr	r3, [pc, #4]	; (5fcc <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    5fc6:	6818      	ldr	r0, [r3, #0]
    5fc8:	f000 be7a 	b.w	6cc0 <_ZN9ClearCore10UsbManagercvbEv>
    5fcc:	20000aec 	.word	0x20000aec

00005fd0 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    5fd0:	4b01      	ldr	r3, [pc, #4]	; (5fd8 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    5fd2:	6818      	ldr	r0, [r3, #0]
    5fd4:	f000 be30 	b.w	6c38 <_ZN9ClearCore10UsbManager8PortOpenEv>
    5fd8:	20000aec 	.word	0x20000aec

00005fdc <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    5fdc:	4b01      	ldr	r3, [pc, #4]	; (5fe4 <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    5fde:	6818      	ldr	r0, [r3, #0]
    5fe0:	f001 ba04 	b.w	73ec <_ZN9ClearCore10UsbManager9PortCloseEv>
    5fe4:	20000aec 	.word	0x20000aec

00005fe8 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    5fe8:	4b01      	ldr	r3, [pc, #4]	; (5ff0 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    5fea:	6818      	ldr	r0, [r3, #0]
    5fec:	f000 be1c 	b.w	6c28 <_ZN9ClearCore10UsbManager5SpeedEm>
    5ff0:	20000aec 	.word	0x20000aec

00005ff4 <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    5ff4:	4b01      	ldr	r3, [pc, #4]	; (5ffc <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    5ff6:	6818      	ldr	r0, [r3, #0]
    5ff8:	f000 be18 	b.w	6c2c <_ZN9ClearCore10UsbManager5SpeedEv>
    5ffc:	20000aec 	.word	0x20000aec

00006000 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    6000:	4b01      	ldr	r3, [pc, #4]	; (6008 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    6002:	6818      	ldr	r0, [r3, #0]
    6004:	f000 be7a 	b.w	6cfc <_ZN9ClearCore10UsbManager7CharGetEv>
    6008:	20000aec 	.word	0x20000aec

0000600c <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    600c:	4b01      	ldr	r3, [pc, #4]	; (6014 <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    600e:	6818      	ldr	r0, [r3, #0]
    6010:	f000 bfa0 	b.w	6f54 <_ZN9ClearCore10UsbManager8CharPeekEv>
    6014:	20000aec 	.word	0x20000aec

00006018 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    6018:	4b01      	ldr	r3, [pc, #4]	; (6020 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    601a:	6818      	ldr	r0, [r3, #0]
    601c:	f000 bfa6 	b.w	6f6c <_ZN9ClearCore10UsbManager8SendCharEh>
    6020:	20000aec 	.word	0x20000aec

00006024 <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    6024:	4b01      	ldr	r3, [pc, #4]	; (602c <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    6026:	6818      	ldr	r0, [r3, #0]
    6028:	f000 bfd4 	b.w	6fd4 <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    602c:	20000aec 	.word	0x20000aec

00006030 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    6030:	4b01      	ldr	r3, [pc, #4]	; (6038 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    6032:	6818      	ldr	r0, [r3, #0]
    6034:	f000 bfd6 	b.w	6fe4 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    6038:	20000aec 	.word	0x20000aec

0000603c <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    603c:	6803      	ldr	r3, [r0, #0]
    603e:	4a04      	ldr	r2, [pc, #16]	; (6050 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    6040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6042:	4293      	cmp	r3, r2
    6044:	d103      	bne.n	604e <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    6046:	4b03      	ldr	r3, [pc, #12]	; (6054 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    6048:	6818      	ldr	r0, [r3, #0]
    604a:	f000 be39 	b.w	6cc0 <_ZN9ClearCore10UsbManagercvbEv>
    604e:	4718      	bx	r3
    6050:	00005fc5 	.word	0x00005fc5
    6054:	20000aec 	.word	0x20000aec

00006058 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    6058:	f1a0 0004 	sub.w	r0, r0, #4
    605c:	e7ee      	b.n	603c <_ZN9ClearCore9SerialUsb10IsWritableEv>
    605e:	bf00      	nop

00006060 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    6060:	b508      	push	{r3, lr}
        return PortIsOpen();
    6062:	6803      	ldr	r3, [r0, #0]
    6064:	4a06      	ldr	r2, [pc, #24]	; (6080 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    6066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6068:	4293      	cmp	r3, r2
    606a:	d105      	bne.n	6078 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    606c:	4b05      	ldr	r3, [pc, #20]	; (6084 <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    606e:	6818      	ldr	r0, [r3, #0]
    6070:	f000 fe26 	bl	6cc0 <_ZN9ClearCore10UsbManagercvbEv>
    }
    6074:	b200      	sxth	r0, r0
    6076:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    6078:	4798      	blx	r3
    }
    607a:	b200      	sxth	r0, r0
    607c:	bd08      	pop	{r3, pc}
    607e:	bf00      	nop
    6080:	00005fc5 	.word	0x00005fc5
    6084:	20000aec 	.word	0x20000aec

00006088 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    6088:	f1a0 0004 	sub.w	r0, r0, #4
    608c:	e7e8      	b.n	6060 <_ZN9ClearCore9SerialUsb5StateEv>
    608e:	bf00      	nop

00006090 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    6090:	b508      	push	{r3, lr}
            PortOpen();
    6092:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    6094:	b961      	cbnz	r1, 60b0 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    6096:	4a0b      	ldr	r2, [pc, #44]	; (60c4 <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    6098:	68db      	ldr	r3, [r3, #12]
    609a:	4293      	cmp	r3, r2
    609c:	d105      	bne.n	60aa <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    609e:	4b0a      	ldr	r3, [pc, #40]	; (60c8 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    60a0:	6818      	ldr	r0, [r3, #0]
    60a2:	f001 f9a3 	bl	73ec <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    60a6:	2001      	movs	r0, #1
    60a8:	bd08      	pop	{r3, pc}
            PortClose();
    60aa:	4798      	blx	r3
    }
    60ac:	2001      	movs	r0, #1
    60ae:	bd08      	pop	{r3, pc}
    60b0:	4a06      	ldr	r2, [pc, #24]	; (60cc <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    60b2:	689b      	ldr	r3, [r3, #8]
    60b4:	4293      	cmp	r3, r2
    60b6:	d1f8      	bne.n	60aa <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    60b8:	4b03      	ldr	r3, [pc, #12]	; (60c8 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    60ba:	6818      	ldr	r0, [r3, #0]
    60bc:	f000 fdbc 	bl	6c38 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    60c0:	2001      	movs	r0, #1
    60c2:	bd08      	pop	{r3, pc}
    60c4:	00005fdd 	.word	0x00005fdd
    60c8:	20000aec 	.word	0x20000aec
    60cc:	00005fd1 	.word	0x00005fd1

000060d0 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    60d0:	f1a0 0004 	sub.w	r0, r0, #4
    60d4:	e7dc      	b.n	6090 <_ZN9ClearCore9SerialUsb5StateEs>
    60d6:	bf00      	nop

000060d8 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    60d8:	b530      	push	{r4, r5, lr}
    60da:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    60dc:	4d1a      	ldr	r5, [pc, #104]	; (6148 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    60de:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    60e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    60e6:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    60e8:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    60ec:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    60f0:	d112      	bne.n	6118 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    60f2:	4621      	mov	r1, r4
    60f4:	4620      	mov	r0, r4
    60f6:	f006 f8dd 	bl	c2b4 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    60fa:	4621      	mov	r1, r4
    60fc:	2001      	movs	r0, #1
    60fe:	f006 f8d9 	bl	c2b4 <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    6102:	f006 f8cb 	bl	c29c <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    6106:	f006 f903 	bl	c310 <cdcdf_acm_get_line_coding>
    610a:	6803      	ldr	r3, [r0, #0]
    610c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6110:	d012      	beq.n	6138 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    6112:	2000      	movs	r0, #0
    6114:	b003      	add	sp, #12
    6116:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6118:	490c      	ldr	r1, [pc, #48]	; (614c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    611a:	2000      	movs	r0, #0
    611c:	f006 f8ca 	bl	c2b4 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6120:	490b      	ldr	r1, [pc, #44]	; (6150 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    6122:	2001      	movs	r0, #1
    6124:	f006 f8c6 	bl	c2b4 <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    6128:	6828      	ldr	r0, [r5, #0]
    612a:	2140      	movs	r1, #64	; 0x40
    612c:	3080      	adds	r0, #128	; 0x80
    612e:	f006 f88d 	bl	c24c <cdcdf_acm_read>
}
    6132:	2000      	movs	r0, #0
    6134:	b003      	add	sp, #12
    6136:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    6138:	2101      	movs	r1, #1
    613a:	4806      	ldr	r0, [pc, #24]	; (6154 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    613c:	f003 fa36 	bl	95ac <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    6140:	2000      	movs	r0, #0
    6142:	b003      	add	sp, #12
    6144:	bd30      	pop	{r4, r5, pc}
    6146:	bf00      	nop
    6148:	20000aec 	.word	0x20000aec
    614c:	00006159 	.word	0x00006159
    6150:	00006391 	.word	0x00006391
    6154:	200019e4 	.word	0x200019e4

00006158 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    6158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    615c:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    615e:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    6160:	498a      	ldr	r1, [pc, #552]	; (638c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    6162:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    6164:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    6168:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    616c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    6170:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    6172:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    6174:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    6176:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    617a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    617e:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    6182:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    6184:	bf48      	it	mi
    6186:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6188:	2c00      	cmp	r4, #0
    618a:	f000 80d6 	beq.w	633a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    618e:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    6192:	f000 80d2 	beq.w	633a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    6196:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    619a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    619e:	42a3      	cmp	r3, r4
    61a0:	bf28      	it	cs
    61a2:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    61a4:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    61a8:	4299      	cmp	r1, r3
    61aa:	bf28      	it	cs
    61ac:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    61ae:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    61b0:	2900      	cmp	r1, #0
    61b2:	f000 80e8 	beq.w	6386 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    61b6:	1d2c      	adds	r4, r5, #4
    61b8:	4404      	add	r4, r0
    61ba:	1d17      	adds	r7, r2, #4
    61bc:	42be      	cmp	r6, r7
    61be:	bf38      	it	cc
    61c0:	42a2      	cmpcc	r2, r4
    61c2:	f0c0 80ce 	bcc.w	6362 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    61c6:	290b      	cmp	r1, #11
    61c8:	f240 80cb 	bls.w	6362 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    61cc:	4254      	negs	r4, r2
    61ce:	f014 0403 	ands.w	r4, r4, #3
    61d2:	f000 80b7 	beq.w	6344 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    61d6:	7817      	ldrb	r7, [r2, #0]
    61d8:	5547      	strb	r7, [r0, r5]
    61da:	2c01      	cmp	r4, #1
    61dc:	f106 0c01 	add.w	ip, r6, #1
    61e0:	f102 0801 	add.w	r8, r2, #1
    61e4:	f000 80b0 	beq.w	6348 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    61e8:	7857      	ldrb	r7, [r2, #1]
    61ea:	7077      	strb	r7, [r6, #1]
    61ec:	2c02      	cmp	r4, #2
    61ee:	f106 0c02 	add.w	ip, r6, #2
    61f2:	f102 0802 	add.w	r8, r2, #2
    61f6:	f000 80a7 	beq.w	6348 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    61fa:	7897      	ldrb	r7, [r2, #2]
    61fc:	70b7      	strb	r7, [r6, #2]
    61fe:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6202:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6204:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6208:	9601      	str	r6, [sp, #4]
    620a:	eba1 0b04 	sub.w	fp, r1, r4
    620e:	f1ab 0604 	sub.w	r6, fp, #4
    6212:	08b6      	lsrs	r6, r6, #2
    6214:	192f      	adds	r7, r5, r4
    6216:	3601      	adds	r6, #1
    6218:	ea4f 0986 	mov.w	r9, r6, lsl #2
    621c:	4407      	add	r7, r0
    621e:	4414      	add	r4, r2
    6220:	f04f 0e00 	mov.w	lr, #0
    6224:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6228:	f854 ab04 	ldr.w	sl, [r4], #4
    622c:	f847 ab04 	str.w	sl, [r7], #4
    6230:	4576      	cmp	r6, lr
    6232:	d8f7      	bhi.n	6224 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    6234:	9c01      	ldr	r4, [sp, #4]
    6236:	45cb      	cmp	fp, r9
    6238:	444c      	add	r4, r9
    623a:	eb0c 0709 	add.w	r7, ip, r9
    623e:	eb08 0e09 	add.w	lr, r8, r9
    6242:	f000 8089 	beq.w	6358 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    6246:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    624a:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    624e:	1c66      	adds	r6, r4, #1
    6250:	42b1      	cmp	r1, r6
    6252:	f240 8081 	bls.w	6358 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    6256:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6258:	f89e 6001 	ldrb.w	r6, [lr, #1]
    625c:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    625e:	42a1      	cmp	r1, r4
    6260:	d97a      	bls.n	6358 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    6262:	f89e 4002 	ldrb.w	r4, [lr, #2]
    6266:	70bc      	strb	r4, [r7, #2]
    6268:	1856      	adds	r6, r2, r1
    626a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    626e:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    6272:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6274:	1a64      	subs	r4, r4, r1
        if (count) {
    6276:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6278:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    627c:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    6280:	d064      	beq.n	634c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    6282:	1d31      	adds	r1, r6, #4
    6284:	1d02      	adds	r2, r0, #4
    6286:	4296      	cmp	r6, r2
    6288:	bf38      	it	cc
    628a:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    628c:	4604      	mov	r4, r0
    628e:	d371      	bcc.n	6374 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    6290:	2b0b      	cmp	r3, #11
    6292:	d96f      	bls.n	6374 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    6294:	4272      	negs	r2, r6
    6296:	f012 0203 	ands.w	r2, r2, #3
    629a:	d05f      	beq.n	635c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    629c:	7831      	ldrb	r1, [r6, #0]
    629e:	7001      	strb	r1, [r0, #0]
    62a0:	2a01      	cmp	r2, #1
    62a2:	f100 0401 	add.w	r4, r0, #1
    62a6:	f106 0e01 	add.w	lr, r6, #1
    62aa:	d058      	beq.n	635e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    62ac:	7871      	ldrb	r1, [r6, #1]
    62ae:	7041      	strb	r1, [r0, #1]
    62b0:	2a02      	cmp	r2, #2
    62b2:	f100 0402 	add.w	r4, r0, #2
    62b6:	f106 0e02 	add.w	lr, r6, #2
    62ba:	d050      	beq.n	635e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    62bc:	78b1      	ldrb	r1, [r6, #2]
    62be:	7081      	strb	r1, [r0, #2]
    62c0:	1cc4      	adds	r4, r0, #3
    62c2:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    62c6:	2703      	movs	r7, #3
    62c8:	eba3 0c02 	sub.w	ip, r3, r2
    62cc:	f1ac 0104 	sub.w	r1, ip, #4
    62d0:	0889      	lsrs	r1, r1, #2
    62d2:	1c4d      	adds	r5, r1, #1
    62d4:	4416      	add	r6, r2
    62d6:	ea4f 0885 	mov.w	r8, r5, lsl #2
    62da:	4402      	add	r2, r0
    62dc:	2100      	movs	r1, #0
    62de:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    62e0:	f856 9b04 	ldr.w	r9, [r6], #4
    62e4:	f842 9b04 	str.w	r9, [r2], #4
    62e8:	428d      	cmp	r5, r1
    62ea:	d8f8      	bhi.n	62de <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    62ec:	45c4      	cmp	ip, r8
    62ee:	eb07 0208 	add.w	r2, r7, r8
    62f2:	eb04 0108 	add.w	r1, r4, r8
    62f6:	eb0e 0608 	add.w	r6, lr, r8
    62fa:	d00d      	beq.n	6318 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    62fc:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    6300:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6304:	1c54      	adds	r4, r2, #1
    6306:	42a3      	cmp	r3, r4
    6308:	d906      	bls.n	6318 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    630a:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    630c:	7874      	ldrb	r4, [r6, #1]
    630e:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6310:	4293      	cmp	r3, r2
    6312:	d901      	bls.n	6318 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    6314:	78b2      	ldrb	r2, [r6, #2]
    6316:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    6318:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    631c:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    6320:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6324:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6326:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    6328:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    632c:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    6330:	b91c      	cbnz	r4, 633a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6332:	3080      	adds	r0, #128	; 0x80
    6334:	2140      	movs	r1, #64	; 0x40
    6336:	f005 ff89 	bl	c24c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    633a:	b662      	cpsie	i
}
    633c:	2001      	movs	r0, #1
    633e:	b003      	add	sp, #12
    6340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6344:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    6346:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6348:	9401      	str	r4, [sp, #4]
    634a:	e75e      	b.n	620a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    634c:	4429      	add	r1, r5
    634e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    6352:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6356:	e7eb      	b.n	6330 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    6358:	1856      	adds	r6, r2, r1
    635a:	e786      	b.n	626a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    635c:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    635e:	4617      	mov	r7, r2
    6360:	e7b2      	b.n	62c8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    6362:	1e74      	subs	r4, r6, #1
    6364:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    6366:	f812 7b01 	ldrb.w	r7, [r2], #1
    636a:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    636e:	42b2      	cmp	r2, r6
    6370:	d1f9      	bne.n	6366 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    6372:	e77a      	b.n	626a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    6374:	1e42      	subs	r2, r0, #1
    6376:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    6378:	f816 1b01 	ldrb.w	r1, [r6], #1
    637c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6380:	42b4      	cmp	r4, r6
    6382:	d1f9      	bne.n	6378 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    6384:	e7c8      	b.n	6318 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    6386:	4616      	mov	r6, r2
    6388:	e773      	b.n	6272 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    638a:	bf00      	nop
    638c:	20000aec 	.word	0x20000aec

00006390 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    6390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    6394:	48d8      	ldr	r0, [pc, #864]	; (66f8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    6396:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    6398:	2900      	cmp	r1, #0
    639a:	f040 81ab 	bne.w	66f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    639e:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    63a0:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    63a4:	441a      	add	r2, r3
    63a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    63aa:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    63ae:	2300      	movs	r3, #0
    63b0:	f3bf 8f5b 	dmb	ish
    63b4:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    63b8:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    63bc:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    63be:	f3bf 8f5b 	dmb	ish
    63c2:	f04f 0101 	mov.w	r1, #1
    63c6:	f504 7388 	add.w	r3, r4, #272	; 0x110
    63ca:	e8d3 2f4f 	ldrexb	r2, [r3]
    63ce:	e8c3 1f40 	strexb	r0, r1, [r3]
    63d2:	2800      	cmp	r0, #0
    63d4:	d1f9      	bne.n	63ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    63d6:	f3bf 8f5b 	dmb	ish
    63da:	f012 0fff 	tst.w	r2, #255	; 0xff
    63de:	f040 80dc 	bne.w	659a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    63e2:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    63e6:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    63ea:	428e      	cmp	r6, r1
    63ec:	f000 8191 	beq.w	6712 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    63f0:	f104 0240 	add.w	r2, r4, #64	; 0x40
    63f4:	eb02 0706 	add.w	r7, r2, r6
    63f8:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    63fc:	f0c0 80d1 	bcc.w	65a2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6400:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6404:	4419      	add	r1, r3
    6406:	2940      	cmp	r1, #64	; 0x40
    6408:	bf28      	it	cs
    640a:	2140      	movcs	r1, #64	; 0x40
    640c:	428b      	cmp	r3, r1
    640e:	bf28      	it	cs
    6410:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6412:	2b00      	cmp	r3, #0
    6414:	f000 81a1 	beq.w	675a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    6418:	f106 0540 	add.w	r5, r6, #64	; 0x40
    641c:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    6420:	1960      	adds	r0, r4, r5
    6422:	44a4      	add	ip, r4
    6424:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    6428:	4540      	cmp	r0, r8
    642a:	bf38      	it	cc
    642c:	45e6      	cmpcc	lr, ip
    642e:	f0c0 818a 	bcc.w	6746 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6432:	2b0b      	cmp	r3, #11
    6434:	f240 8187 	bls.w	6746 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6438:	4240      	negs	r0, r0
    643a:	f010 0003 	ands.w	r0, r0, #3
    643e:	f000 8161 	beq.w	6704 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    6442:	5d96      	ldrb	r6, [r2, r6]
    6444:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    6448:	2801      	cmp	r0, #1
    644a:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    644e:	f107 0801 	add.w	r8, r7, #1
    6452:	f000 8159 	beq.w	6708 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    6456:	787e      	ldrb	r6, [r7, #1]
    6458:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    645c:	2802      	cmp	r0, #2
    645e:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    6462:	f107 0802 	add.w	r8, r7, #2
    6466:	f000 814f 	beq.w	6708 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    646a:	78be      	ldrb	r6, [r7, #2]
    646c:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6470:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6472:	f107 0803 	add.w	r8, r7, #3
    6476:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    647a:	9601      	str	r6, [sp, #4]
    647c:	eba3 0b00 	sub.w	fp, r3, r0
    6480:	f1ab 0604 	sub.w	r6, fp, #4
    6484:	08b6      	lsrs	r6, r6, #2
    6486:	4405      	add	r5, r0
    6488:	3601      	adds	r6, #1
    648a:	30c0      	adds	r0, #192	; 0xc0
    648c:	4425      	add	r5, r4
    648e:	4420      	add	r0, r4
    6490:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6494:	2700      	movs	r7, #0
    6496:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    6498:	f855 ab04 	ldr.w	sl, [r5], #4
    649c:	f840 ab04 	str.w	sl, [r0], #4
    64a0:	42b7      	cmp	r7, r6
    64a2:	d3f8      	bcc.n	6496 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    64a4:	9801      	ldr	r0, [sp, #4]
    64a6:	45cb      	cmp	fp, r9
    64a8:	4448      	add	r0, r9
    64aa:	eb0c 0509 	add.w	r5, ip, r9
    64ae:	eb08 0709 	add.w	r7, r8, r9
    64b2:	d00d      	beq.n	64d0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    64b4:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    64b8:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    64bc:	1c46      	adds	r6, r0, #1
    64be:	42b3      	cmp	r3, r6
    64c0:	d906      	bls.n	64d0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    64c2:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    64c4:	787e      	ldrb	r6, [r7, #1]
    64c6:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    64c8:	4283      	cmp	r3, r0
    64ca:	d901      	bls.n	64d0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    64cc:	78b8      	ldrb	r0, [r7, #2]
    64ce:	70a8      	strb	r0, [r5, #2]
    64d0:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    64d4:	1acb      	subs	r3, r1, r3
    64d6:	f000 80fc 	beq.w	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    64da:	f104 0544 	add.w	r5, r4, #68	; 0x44
    64de:	1d06      	adds	r6, r0, #4
    64e0:	42b2      	cmp	r2, r6
    64e2:	bf38      	it	cc
    64e4:	42a8      	cmpcc	r0, r5
    64e6:	f0c0 8125 	bcc.w	6734 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    64ea:	2b0b      	cmp	r3, #11
    64ec:	f240 8122 	bls.w	6734 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    64f0:	4255      	negs	r5, r2
    64f2:	f015 0503 	ands.w	r5, r5, #3
    64f6:	f000 8109 	beq.w	670c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    64fa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    64fe:	7002      	strb	r2, [r0, #0]
    6500:	2d01      	cmp	r5, #1
    6502:	f100 0801 	add.w	r8, r0, #1
    6506:	f104 0241 	add.w	r2, r4, #65	; 0x41
    650a:	f000 8100 	beq.w	670e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    650e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    6512:	7042      	strb	r2, [r0, #1]
    6514:	2d02      	cmp	r5, #2
    6516:	f100 0802 	add.w	r8, r0, #2
    651a:	f104 0242 	add.w	r2, r4, #66	; 0x42
    651e:	f000 80f6 	beq.w	670e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    6522:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    6526:	7082      	strb	r2, [r0, #2]
    6528:	f100 0803 	add.w	r8, r0, #3
    652c:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6530:	2703      	movs	r7, #3
    6532:	eba3 0905 	sub.w	r9, r3, r5
    6536:	f1a9 0604 	sub.w	r6, r9, #4
    653a:	08b6      	lsrs	r6, r6, #2
    653c:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    6540:	3601      	adds	r6, #1
    6542:	4428      	add	r0, r5
    6544:	44a4      	add	ip, r4
    6546:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    654a:	f04f 0a00 	mov.w	sl, #0
    654e:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    6552:	f85c 5b04 	ldr.w	r5, [ip], #4
    6556:	f840 5b04 	str.w	r5, [r0], #4
    655a:	4556      	cmp	r6, sl
    655c:	d8f7      	bhi.n	654e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    655e:	45d9      	cmp	r9, fp
    6560:	445f      	add	r7, fp
    6562:	eb08 000b 	add.w	r0, r8, fp
    6566:	eb02 050b 	add.w	r5, r2, fp
    656a:	f000 80b2 	beq.w	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    656e:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    6572:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6576:	1c7a      	adds	r2, r7, #1
    6578:	4293      	cmp	r3, r2
    657a:	f240 80aa 	bls.w	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    657e:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    6580:	786a      	ldrb	r2, [r5, #1]
    6582:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6584:	42bb      	cmp	r3, r7
    6586:	f240 80a4 	bls.w	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    658a:	78ab      	ldrb	r3, [r5, #2]
    658c:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    658e:	4670      	mov	r0, lr
    6590:	f005 fe70 	bl	c274 <cdcdf_acm_write>
    6594:	2800      	cmp	r0, #0
    6596:	f040 80a2 	bne.w	66de <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    659a:	2001      	movs	r0, #1
    659c:	b003      	add	sp, #12
    659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    65a2:	1b89      	subs	r1, r1, r6
    65a4:	f106 0340 	add.w	r3, r6, #64	; 0x40
    65a8:	f106 0044 	add.w	r0, r6, #68	; 0x44
    65ac:	2940      	cmp	r1, #64	; 0x40
    65ae:	eb04 0803 	add.w	r8, r4, r3
    65b2:	4420      	add	r0, r4
    65b4:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    65b8:	bf28      	it	cs
    65ba:	2140      	movcs	r1, #64	; 0x40
    65bc:	45a8      	cmp	r8, r5
    65be:	bf38      	it	cc
    65c0:	4586      	cmpcc	lr, r0
    65c2:	f0c0 80ad 	bcc.w	6720 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    65c6:	290b      	cmp	r1, #11
    65c8:	f240 80aa 	bls.w	6720 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    65cc:	f1c8 0800 	rsb	r8, r8, #0
    65d0:	f018 0803 	ands.w	r8, r8, #3
    65d4:	f000 8092 	beq.w	66fc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    65d8:	5d92      	ldrb	r2, [r2, r6]
    65da:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    65de:	f1b8 0f01 	cmp.w	r8, #1
    65e2:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    65e6:	f107 0601 	add.w	r6, r7, #1
    65ea:	f000 8089 	beq.w	6700 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    65ee:	787a      	ldrb	r2, [r7, #1]
    65f0:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    65f4:	f1b8 0f02 	cmp.w	r8, #2
    65f8:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    65fc:	f107 0602 	add.w	r6, r7, #2
    6600:	d07e      	beq.n	6700 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6602:	78ba      	ldrb	r2, [r7, #2]
    6604:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    6608:	1cfe      	adds	r6, r7, #3
    660a:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    660e:	f04f 0903 	mov.w	r9, #3
    6612:	4443      	add	r3, r8
    6614:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6618:	58e2      	ldr	r2, [r4, r3]
    661a:	5022      	str	r2, [r4, r0]
    661c:	eba1 0808 	sub.w	r8, r1, r8
    6620:	f1a8 0204 	sub.w	r2, r8, #4
    6624:	4423      	add	r3, r4
    6626:	0892      	lsrs	r2, r2, #2
    6628:	3201      	adds	r2, #1
    662a:	4420      	add	r0, r4
    662c:	685f      	ldr	r7, [r3, #4]
    662e:	6047      	str	r7, [r0, #4]
    6630:	2a02      	cmp	r2, #2
    6632:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    6636:	d035      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6638:	689f      	ldr	r7, [r3, #8]
    663a:	6087      	str	r7, [r0, #8]
    663c:	2a03      	cmp	r2, #3
    663e:	d031      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6640:	68df      	ldr	r7, [r3, #12]
    6642:	60c7      	str	r7, [r0, #12]
    6644:	2a04      	cmp	r2, #4
    6646:	d02d      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6648:	691f      	ldr	r7, [r3, #16]
    664a:	6107      	str	r7, [r0, #16]
    664c:	2a05      	cmp	r2, #5
    664e:	d029      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6650:	695f      	ldr	r7, [r3, #20]
    6652:	6147      	str	r7, [r0, #20]
    6654:	2a06      	cmp	r2, #6
    6656:	d025      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6658:	699f      	ldr	r7, [r3, #24]
    665a:	6187      	str	r7, [r0, #24]
    665c:	2a07      	cmp	r2, #7
    665e:	d021      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6660:	69df      	ldr	r7, [r3, #28]
    6662:	61c7      	str	r7, [r0, #28]
    6664:	2a08      	cmp	r2, #8
    6666:	d01d      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6668:	6a1f      	ldr	r7, [r3, #32]
    666a:	6207      	str	r7, [r0, #32]
    666c:	2a09      	cmp	r2, #9
    666e:	d019      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6670:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    6672:	6247      	str	r7, [r0, #36]	; 0x24
    6674:	2a0a      	cmp	r2, #10
    6676:	d015      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6678:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    667a:	6287      	str	r7, [r0, #40]	; 0x28
    667c:	2a0b      	cmp	r2, #11
    667e:	d011      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6680:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    6682:	62c7      	str	r7, [r0, #44]	; 0x2c
    6684:	2a0c      	cmp	r2, #12
    6686:	d00d      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6688:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    668a:	6307      	str	r7, [r0, #48]	; 0x30
    668c:	2a0d      	cmp	r2, #13
    668e:	d009      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6690:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    6692:	6347      	str	r7, [r0, #52]	; 0x34
    6694:	2a0e      	cmp	r2, #14
    6696:	d005      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6698:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    669a:	6387      	str	r7, [r0, #56]	; 0x38
    669c:	2a0f      	cmp	r2, #15
    669e:	d001      	beq.n	66a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    66a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    66a2:	63c3      	str	r3, [r0, #60]	; 0x3c
    66a4:	45e0      	cmp	r8, ip
    66a6:	44e1      	add	r9, ip
    66a8:	eb05 030c 	add.w	r3, r5, ip
    66ac:	eb06 000c 	add.w	r0, r6, ip
    66b0:	d00f      	beq.n	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    66b2:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    66b6:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    66ba:	f109 0201 	add.w	r2, r9, #1
    66be:	4291      	cmp	r1, r2
    66c0:	d907      	bls.n	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    66c2:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    66c6:	7842      	ldrb	r2, [r0, #1]
    66c8:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    66ca:	4549      	cmp	r1, r9
    66cc:	d901      	bls.n	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    66ce:	7882      	ldrb	r2, [r0, #2]
    66d0:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    66d2:	4670      	mov	r0, lr
    66d4:	f005 fdce 	bl	c274 <cdcdf_acm_write>
    66d8:	2800      	cmp	r0, #0
    66da:	f43f af5e 	beq.w	659a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    66de:	f3bf 8f5b 	dmb	ish
    66e2:	2300      	movs	r3, #0
    66e4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    66e8:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    66ea:	f3bf 8f5b 	dmb	ish
}
    66ee:	b003      	add	sp, #12
    66f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66f4:	6801      	ldr	r1, [r0, #0]
    66f6:	e65a      	b.n	63ae <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    66f8:	20000aec 	.word	0x20000aec
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    66fc:	463e      	mov	r6, r7
    66fe:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6700:	46c1      	mov	r9, r8
    6702:	e786      	b.n	6612 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6704:	46b8      	mov	r8, r7
    6706:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6708:	9001      	str	r0, [sp, #4]
    670a:	e6b7      	b.n	647c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    670c:	4680      	mov	r8, r0
    670e:	462f      	mov	r7, r5
    6710:	e70f      	b.n	6532 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    6712:	f3bf 8f5b 	dmb	ish
    6716:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    671a:	f3bf 8f5b 	dmb	ish
    671e:	e73c      	b.n	659a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    6720:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    6724:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    6726:	f817 2b01 	ldrb.w	r2, [r7], #1
    672a:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    672e:	4287      	cmp	r7, r0
    6730:	d1f9      	bne.n	6726 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    6732:	e7ce      	b.n	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6734:	3801      	subs	r0, #1
    6736:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    6738:	f812 5b01 	ldrb.w	r5, [r2], #1
    673c:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6740:	429a      	cmp	r2, r3
    6742:	d1f9      	bne.n	6738 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    6744:	e7c5      	b.n	66d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6746:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    674a:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    674c:	f817 5b01 	ldrb.w	r5, [r7], #1
    6750:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6754:	42be      	cmp	r6, r7
    6756:	d1f9      	bne.n	674c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    6758:	e6ba      	b.n	64d0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    675a:	4670      	mov	r0, lr
    675c:	e6ba      	b.n	64d4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    675e:	bf00      	nop

00006760 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    6760:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    6762:	4e16      	ldr	r6, [pc, #88]	; (67bc <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    6764:	6834      	ldr	r4, [r6, #0]
    6766:	f014 0401 	ands.w	r4, r4, #1
    676a:	d002      	beq.n	6772 <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    676c:	4b14      	ldr	r3, [pc, #80]	; (67c0 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    676e:	6818      	ldr	r0, [r3, #0]
    6770:	bd70      	pop	{r4, r5, r6, pc}
    6772:	f44f 7090 	mov.w	r0, #288	; 0x120
    6776:	f00c ffe3 	bl	13740 <_Znwj>
    677a:	4605      	mov	r5, r0
    m_portOpen(false) {
    677c:	f100 0380 	add.w	r3, r0, #128	; 0x80
    6780:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    6784:	490f      	ldr	r1, [pc, #60]	; (67c4 <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    6786:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    678a:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    678e:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    6792:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    6796:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    679a:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    679e:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    67a2:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    67a6:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    67aa:	2003      	movs	r0, #3
    67ac:	f005 fd82 	bl	c2b4 <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    67b0:	4a03      	ldr	r2, [pc, #12]	; (67c0 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    67b2:	2301      	movs	r3, #1
    67b4:	6015      	str	r5, [r2, #0]
    67b6:	4628      	mov	r0, r5
    67b8:	6033      	str	r3, [r6, #0]
}
    67ba:	bd70      	pop	{r4, r5, r6, pc}
    67bc:	20000ae8 	.word	0x20000ae8
    67c0:	20000b30 	.word	0x20000b30
    67c4:	000060d9 	.word	0x000060d9

000067c8 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    67c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    67cc:	4ac7      	ldr	r2, [pc, #796]	; (6aec <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    67ce:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    67d2:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    67d6:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    67d8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    67dc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    67e0:	0659      	lsls	r1, r3, #25
    67e2:	d4fb      	bmi.n	67dc <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    67e4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    67e8:	49c0      	ldr	r1, [pc, #768]	; (6aec <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    67ea:	2004      	movs	r0, #4
    67ec:	f360 0303 	bfi	r3, r0, #0, #4
    67f0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    67f4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    67f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    67fc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6800:	684b      	ldr	r3, [r1, #4]
    6802:	06db      	lsls	r3, r3, #27
    6804:	d4fc      	bmi.n	6800 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    6806:	4bba      	ldr	r3, [pc, #744]	; (6af0 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6808:	49ba      	ldr	r1, [pc, #744]	; (6af4 <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    680a:	691a      	ldr	r2, [r3, #16]
    680c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6810:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    6812:	699a      	ldr	r2, [r3, #24]
    6814:	f042 0201 	orr.w	r2, r2, #1
    6818:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    681a:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    681e:	2203      	movs	r2, #3
    6820:	f006 f8f4 	bl	ca0c <usb_find_str_desc>
    if (!serNumDescPtr) {
    6824:	4604      	mov	r4, r0
    6826:	2800      	cmp	r0, #0
    6828:	f000 819c 	beq.w	6b64 <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    682c:	4bb2      	ldr	r3, [pc, #712]	; (6af8 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    682e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6830:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6834:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    6836:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6838:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    683a:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    683e:	f100 0730 	add.w	r7, r0, #48	; 0x30
    6842:	3037      	adds	r0, #55	; 0x37
    6844:	2d09      	cmp	r5, #9
    6846:	bf88      	it	hi
    6848:	4607      	movhi	r7, r0
    684a:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    684e:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6852:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6856:	3037      	adds	r0, #55	; 0x37
    6858:	f1b8 0f09 	cmp.w	r8, #9
    685c:	bfc8      	it	gt
    685e:	4684      	movgt	ip, r0
    6860:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    6862:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6866:	f88d c011 	strb.w	ip, [sp, #17]
    686a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    686e:	3037      	adds	r0, #55	; 0x37
    6870:	2e09      	cmp	r6, #9
    6872:	bfc8      	it	gt
    6874:	4684      	movgt	ip, r0
    6876:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6878:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    687c:	f88d c012 	strb.w	ip, [sp, #18]
    6880:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6884:	3037      	adds	r0, #55	; 0x37
    6886:	2d09      	cmp	r5, #9
    6888:	bfc8      	it	gt
    688a:	4684      	movgt	ip, r0
    688c:	fa5f f08e 	uxtb.w	r0, lr
    6890:	f88d 7010 	strb.w	r7, [sp, #16]
    6894:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    6898:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    689c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    68a0:	3037      	adds	r0, #55	; 0x37
    68a2:	f1be 0f09 	cmp.w	lr, #9
    68a6:	bfd4      	ite	le
    68a8:	46e6      	movle	lr, ip
    68aa:	4686      	movgt	lr, r0
    68ac:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    68ae:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    68b2:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68b4:	f88d e014 	strb.w	lr, [sp, #20]
    68b8:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    68bc:	3030      	adds	r0, #48	; 0x30
    68be:	2f09      	cmp	r7, #9
    68c0:	bfcc      	ite	gt
    68c2:	4677      	movgt	r7, lr
    68c4:	4607      	movle	r7, r0
    68c6:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    68c8:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68ca:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    68ce:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68d2:	f100 0737 	add.w	r7, r0, #55	; 0x37
    68d6:	3030      	adds	r0, #48	; 0x30
    68d8:	2e09      	cmp	r6, #9
    68da:	bfcc      	ite	gt
    68dc:	463e      	movgt	r6, r7
    68de:	4606      	movle	r6, r0
    68e0:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    68e2:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68e4:	f88d 6016 	strb.w	r6, [sp, #22]
    68e8:	f100 0637 	add.w	r6, r0, #55	; 0x37
    68ec:	3030      	adds	r0, #48	; 0x30
    68ee:	2b09      	cmp	r3, #9
    68f0:	bfcc      	ite	gt
    68f2:	4633      	movgt	r3, r6
    68f4:	4603      	movle	r3, r0
    68f6:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    68f8:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68fc:	f88d 3017 	strb.w	r3, [sp, #23]
    6900:	f100 0337 	add.w	r3, r0, #55	; 0x37
    6904:	3030      	adds	r0, #48	; 0x30
    6906:	2d09      	cmp	r5, #9
    6908:	bf88      	it	hi
    690a:	4618      	movhi	r0, r3
    690c:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    6910:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6914:	f88d 0018 	strb.w	r0, [sp, #24]
    6918:	f103 0037 	add.w	r0, r3, #55	; 0x37
    691c:	3330      	adds	r3, #48	; 0x30
    691e:	f1bc 0f09 	cmp.w	ip, #9
    6922:	bfcc      	ite	gt
    6924:	4684      	movgt	ip, r0
    6926:	469c      	movle	ip, r3
    6928:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    692c:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6930:	f88d c019 	strb.w	ip, [sp, #25]
    6934:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6938:	3330      	adds	r3, #48	; 0x30
    693a:	f1be 0f09 	cmp.w	lr, #9
    693e:	bfd8      	it	le
    6940:	469c      	movle	ip, r3
    6942:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    6944:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6948:	f88d c01a 	strb.w	ip, [sp, #26]
    694c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6950:	3330      	adds	r3, #48	; 0x30
    6952:	2f09      	cmp	r7, #9
    6954:	bfd8      	it	le
    6956:	469c      	movle	ip, r3
    6958:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    695a:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    695e:	f88d c01b 	strb.w	ip, [sp, #27]
    6962:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6966:	3330      	adds	r3, #48	; 0x30
    6968:	2e09      	cmp	r6, #9
    696a:	bfd8      	it	le
    696c:	469c      	movle	ip, r3
    696e:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    6970:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6974:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6976:	f88d c01c 	strb.w	ip, [sp, #28]
    697a:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    697e:	3330      	adds	r3, #48	; 0x30
    6980:	2d09      	cmp	r5, #9
    6982:	bfcc      	ite	gt
    6984:	4665      	movgt	r5, ip
    6986:	461d      	movle	r5, r3
    6988:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    698a:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    698c:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    6990:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6994:	f103 0537 	add.w	r5, r3, #55	; 0x37
    6998:	3330      	adds	r3, #48	; 0x30
    699a:	2809      	cmp	r0, #9
    699c:	bfcc      	ite	gt
    699e:	4628      	movgt	r0, r5
    69a0:	4618      	movle	r0, r3
    69a2:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    69a4:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69a8:	f88d 001e 	strb.w	r0, [sp, #30]
    69ac:	f103 0037 	add.w	r0, r3, #55	; 0x37
    69b0:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    69b2:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69b6:	2a09      	cmp	r2, #9
    69b8:	bfcc      	ite	gt
    69ba:	4602      	movgt	r2, r0
    69bc:	461a      	movle	r2, r3
    69be:	fa5f f58e 	uxtb.w	r5, lr
    69c2:	b2f8      	uxtb	r0, r7
    69c4:	f88d 201f 	strb.w	r2, [sp, #31]
    69c8:	f105 0237 	add.w	r2, r5, #55	; 0x37
    69cc:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    69ce:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69d2:	f1be 0f09 	cmp.w	lr, #9
    69d6:	bf88      	it	hi
    69d8:	4615      	movhi	r5, r2
    69da:	f100 0237 	add.w	r2, r0, #55	; 0x37
    69de:	3030      	adds	r0, #48	; 0x30
    69e0:	2f09      	cmp	r7, #9
    69e2:	bfc8      	it	gt
    69e4:	4610      	movgt	r0, r2
    69e6:	b2f3      	uxtb	r3, r6
    69e8:	f103 0237 	add.w	r2, r3, #55	; 0x37
    69ec:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    69f0:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    69f2:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69f6:	2e09      	cmp	r6, #9
    69f8:	bfc8      	it	gt
    69fa:	4613      	movgt	r3, r2
    69fc:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    69fe:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a02:	f102 0837 	add.w	r8, r2, #55	; 0x37
    6a06:	3230      	adds	r2, #48	; 0x30
    6a08:	2809      	cmp	r0, #9
    6a0a:	bfd8      	it	le
    6a0c:	4690      	movle	r8, r2
    6a0e:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6a12:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a16:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    6a1a:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6a1c:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a1e:	f88d 5020 	strb.w	r5, [sp, #32]
    6a22:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6a26:	3230      	adds	r2, #48	; 0x30
    6a28:	f1be 0f09 	cmp.w	lr, #9
    6a2c:	bfd8      	it	le
    6a2e:	4614      	movle	r4, r2
    6a30:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6a32:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a34:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    6a38:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a3c:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6a40:	3230      	adds	r2, #48	; 0x30
    6a42:	2f09      	cmp	r7, #9
    6a44:	bfcc      	ite	gt
    6a46:	4627      	movgt	r7, r4
    6a48:	4617      	movle	r7, r2
    6a4a:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    6a4c:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a50:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    6a54:	f102 0737 	add.w	r7, r2, #55	; 0x37
    6a58:	3230      	adds	r2, #48	; 0x30
    6a5a:	2e09      	cmp	r6, #9
    6a5c:	bfcc      	ite	gt
    6a5e:	463e      	movgt	r6, r7
    6a60:	4616      	movle	r6, r2
    6a62:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    6a64:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a66:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    6a6a:	f102 0637 	add.w	r6, r2, #55	; 0x37
    6a6e:	3230      	adds	r2, #48	; 0x30
    6a70:	2909      	cmp	r1, #9
    6a72:	bfcc      	ite	gt
    6a74:	4631      	movgt	r1, r6
    6a76:	4611      	movle	r1, r2
    6a78:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    6a7a:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a7e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    6a82:	f102 0130 	add.w	r1, r2, #48	; 0x30
    6a86:	3237      	adds	r2, #55	; 0x37
    6a88:	2d09      	cmp	r5, #9
    6a8a:	bf88      	it	hi
    6a8c:	4611      	movhi	r1, r2
    6a8e:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    6a92:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6a9a:	f102 0130 	add.w	r1, r2, #48	; 0x30
    6a9e:	3237      	adds	r2, #55	; 0x37
    6aa0:	f1bc 0f09 	cmp.w	ip, #9
    6aa4:	bfd4      	ite	le
    6aa6:	468c      	movle	ip, r1
    6aa8:	4694      	movgt	ip, r2
    6aaa:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6aae:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6ab2:	f102 0137 	add.w	r1, r2, #55	; 0x37
    6ab6:	3230      	adds	r2, #48	; 0x30
    6ab8:	f1be 0f09 	cmp.w	lr, #9
    6abc:	bfcc      	ite	gt
    6abe:	468e      	movgt	lr, r1
    6ac0:	4696      	movle	lr, r2
    6ac2:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    6ac4:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6ac8:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    6acc:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    6ad0:	3130      	adds	r1, #48	; 0x30
    6ad2:	2c09      	cmp	r4, #9
    6ad4:	bfd8      	it	le
    6ad6:	468e      	movle	lr, r1
    6ad8:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    6ada:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6ade:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    6ae2:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    6ae6:	3237      	adds	r2, #55	; 0x37
    6ae8:	e008      	b.n	6afc <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    6aea:	bf00      	nop
    6aec:	40001c00 	.word	0x40001c00
    6af0:	40000800 	.word	0x40000800
    6af4:	200000ef 	.word	0x200000ef
    6af8:	00023184 	.word	0x00023184
    6afc:	2f09      	cmp	r7, #9
    6afe:	bfd4      	ite	le
    6b00:	4677      	movle	r7, lr
    6b02:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    6b04:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b08:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    6b0a:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b0e:	b2da      	uxtb	r2, r3
    6b10:	b2e9      	uxtb	r1, r5
    6b12:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    6b16:	f104 0730 	add.w	r7, r4, #48	; 0x30
    6b1a:	3437      	adds	r4, #55	; 0x37
    6b1c:	2e09      	cmp	r6, #9
    6b1e:	bfd8      	it	le
    6b20:	463c      	movle	r4, r7
    6b22:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    6b26:	f102 0730 	add.w	r7, r2, #48	; 0x30
    6b2a:	3137      	adds	r1, #55	; 0x37
    6b2c:	3237      	adds	r2, #55	; 0x37
    6b2e:	2d09      	cmp	r5, #9
    6b30:	bfd8      	it	le
    6b32:	4671      	movle	r1, lr
    6b34:	2b09      	cmp	r3, #9
    6b36:	bfd4      	ite	le
    6b38:	463b      	movle	r3, r7
    6b3a:	4613      	movgt	r3, r2
    6b3c:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    6b40:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    6b44:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    6b48:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    6b4c:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    6b50:	f10d 030f 	add.w	r3, sp, #15
    6b54:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    6b58:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6b5c:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    6b60:	428b      	cmp	r3, r1
    6b62:	d1f9      	bne.n	6b58 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b64:	4b2a      	ldr	r3, [pc, #168]	; (6c10 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6b66:	4a2b      	ldr	r2, [pc, #172]	; (6c14 <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6b68:	4f2b      	ldr	r7, [pc, #172]	; (6c18 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    6b6a:	4d2c      	ldr	r5, [pc, #176]	; (6c1c <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    6b6c:	482c      	ldr	r0, [pc, #176]	; (6c20 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    6b6e:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b70:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6b74:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6b78:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    6b7c:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    6b80:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    6b84:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b88:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6b8a:	629c      	str	r4, [r3, #40]	; 0x28
    6b8c:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6b8e:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6b90:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    6b94:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6b98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6b9c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    6ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6ba4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6ba8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6bac:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6bb0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6bb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    6bb8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6bc0:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6bc2:	629c      	str	r4, [r3, #40]	; 0x28
    6bc4:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6bc6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6bc8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    6bcc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6bd0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bd4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6bdc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6be0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6be4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6be8:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    6bec:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6bf4:	f005 fe52 	bl	c89c <usbdc_init>
    cdcdf_acm_init();
    6bf8:	f005 fb0a 	bl	c210 <cdcdf_acm_init>
    usbdc_start(single_desc);
    6bfc:	4809      	ldr	r0, [pc, #36]	; (6c24 <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    6bfe:	f005 fe7b 	bl	c8f8 <usbdc_start>
    usbdc_attach();
    6c02:	f005 fe91 	bl	c928 <usbdc_attach>
}
    6c06:	2001      	movs	r0, #1
    6c08:	b00c      	add	sp, #48	; 0x30
    6c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c0e:	bf00      	nop
    6c10:	41008000 	.word	0x41008000
    6c14:	e000e100 	.word	0xe000e100
    6c18:	c0000100 	.word	0xc0000100
    6c1c:	c0000200 	.word	0xc0000200
    6c20:	20000af0 	.word	0x20000af0
    6c24:	20000010 	.word	0x20000010

00006c28 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    6c28:	2001      	movs	r0, #1
    6c2a:	4770      	bx	lr

00006c2c <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    6c2c:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    6c2e:	f005 fb6f 	bl	c310 <cdcdf_acm_get_line_coding>
}
    6c32:	6800      	ldr	r0, [r0, #0]
    6c34:	bd08      	pop	{r3, pc}
    6c36:	bf00      	nop

00006c38 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    6c38:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    6c3a:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    6c3e:	b103      	cbz	r3, 6c42 <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    6c40:	bd38      	pop	{r3, r4, r5, pc}
    6c42:	4604      	mov	r4, r0
    m_portOpen = true;
    6c44:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6c46:	4618      	mov	r0, r3
    m_portOpen = true;
    6c48:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6c4c:	4906      	ldr	r1, [pc, #24]	; (6c68 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    6c4e:	f005 fb31 	bl	c2b4 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6c52:	4628      	mov	r0, r5
    6c54:	4905      	ldr	r1, [pc, #20]	; (6c6c <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    6c56:	f005 fb2d 	bl	c2b4 <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6c5a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6c5e:	2140      	movs	r1, #64	; 0x40
}
    6c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6c64:	f005 baf2 	b.w	c24c <cdcdf_acm_read>
    6c68:	00006159 	.word	0x00006159
    6c6c:	00006391 	.word	0x00006391

00006c70 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    6c70:	4603      	mov	r3, r0
    m_inHead = 0;
    6c72:	2200      	movs	r2, #0
    6c74:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    6c78:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    6c7c:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6c80:	2140      	movs	r1, #64	; 0x40
    6c82:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    6c84:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6c88:	f005 bae0 	b.w	c24c <cdcdf_acm_read>

00006c8c <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    6c8c:	b538      	push	{r3, r4, r5, lr}
    6c8e:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6c90:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    6c94:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    6c98:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6c9c:	429a      	cmp	r2, r3
    6c9e:	d100      	bne.n	6ca2 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    6ca0:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6ca2:	f005 fb2f 	bl	c304 <cdcdf_acm_is_enabled>
    6ca6:	2800      	cmp	r0, #0
    6ca8:	d0fa      	beq.n	6ca0 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    6caa:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    6cae:	07db      	lsls	r3, r3, #31
    6cb0:	d5f6      	bpl.n	6ca0 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6cb2:	7b6b      	ldrb	r3, [r5, #13]
    6cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6cb8:	2b02      	cmp	r3, #2
    6cba:	d0eb      	beq.n	6c94 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    6cbc:	bd38      	pop	{r3, r4, r5, pc}
    6cbe:	bf00      	nop

00006cc0 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    6cc0:	b538      	push	{r3, r4, r5, lr}
    6cc2:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6cc4:	f005 fb1e 	bl	c304 <cdcdf_acm_is_enabled>
    6cc8:	4604      	mov	r4, r0
    6cca:	b170      	cbz	r0, 6cea <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    6ccc:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    6cd0:	f014 0401 	ands.w	r4, r4, #1
    6cd4:	d009      	beq.n	6cea <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6cd6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6cda:	7b5c      	ldrb	r4, [r3, #13]
    6cdc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6ce0:	f1a4 0402 	sub.w	r4, r4, #2
    6ce4:	fab4 f484 	clz	r4, r4
    6ce8:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    6cea:	4803      	ldr	r0, [pc, #12]	; (6cf8 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    6cec:	2100      	movs	r1, #0
    6cee:	f002 ffeb 	bl	9cc8 <Delay_cycles>
}
    6cf2:	4620      	mov	r0, r4
    6cf4:	bd38      	pop	{r3, r4, r5, pc}
    6cf6:	bf00      	nop
    6cf8:	00124f80 	.word	0x00124f80

00006cfc <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    6cfc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    6d00:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6d04:	4293      	cmp	r3, r2
    6d06:	f000 8116 	beq.w	6f36 <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    6d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6d0e:	1c5a      	adds	r2, r3, #1
    6d10:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    6d14:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6d16:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    6d1a:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    6d1c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    6d1e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6d22:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    6d26:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    6d2a:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    6d2c:	bf48      	it	mi
    6d2e:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6d30:	2d00      	cmp	r5, #0
    6d32:	f000 80e3 	beq.w	6efc <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    6d36:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    6d3a:	f000 80df 	beq.w	6efc <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    6d3e:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6d42:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6d46:	42ab      	cmp	r3, r5
    6d48:	bf28      	it	cs
    6d4a:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    6d4c:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    6d50:	4299      	cmp	r1, r3
    6d52:	bf28      	it	cs
    6d54:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    6d56:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6d58:	2900      	cmp	r1, #0
    6d5a:	f000 80f8 	beq.w	6f4e <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    6d5e:	1d35      	adds	r5, r6, #4
    6d60:	4405      	add	r5, r0
    6d62:	f102 0e04 	add.w	lr, r2, #4
    6d66:	4577      	cmp	r7, lr
    6d68:	bf38      	it	cc
    6d6a:	42aa      	cmpcc	r2, r5
    6d6c:	f0c0 80da 	bcc.w	6f24 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6d70:	290b      	cmp	r1, #11
    6d72:	f240 80d7 	bls.w	6f24 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6d76:	4255      	negs	r5, r2
    6d78:	f015 0503 	ands.w	r5, r5, #3
    6d7c:	f000 80c3 	beq.w	6f06 <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    6d80:	f892 e000 	ldrb.w	lr, [r2]
    6d84:	f800 e006 	strb.w	lr, [r0, r6]
    6d88:	2d01      	cmp	r5, #1
    6d8a:	f107 0801 	add.w	r8, r7, #1
    6d8e:	f102 0901 	add.w	r9, r2, #1
    6d92:	f000 80ba 	beq.w	6f0a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6d96:	f892 e001 	ldrb.w	lr, [r2, #1]
    6d9a:	f887 e001 	strb.w	lr, [r7, #1]
    6d9e:	2d02      	cmp	r5, #2
    6da0:	f107 0802 	add.w	r8, r7, #2
    6da4:	f102 0902 	add.w	r9, r2, #2
    6da8:	f000 80af 	beq.w	6f0a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6dac:	f892 e002 	ldrb.w	lr, [r2, #2]
    6db0:	f887 e002 	strb.w	lr, [r7, #2]
    6db4:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6db8:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    6dba:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6dbe:	9700      	str	r7, [sp, #0]
    6dc0:	eba1 0b05 	sub.w	fp, r1, r5
    6dc4:	f1ab 0704 	sub.w	r7, fp, #4
    6dc8:	08bf      	lsrs	r7, r7, #2
    6dca:	eb06 0e05 	add.w	lr, r6, r5
    6dce:	3701      	adds	r7, #1
    6dd0:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    6dd4:	4486      	add	lr, r0
    6dd6:	4415      	add	r5, r2
    6dd8:	f04f 0c00 	mov.w	ip, #0
    6ddc:	9401      	str	r4, [sp, #4]
    6dde:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    6de2:	f855 4b04 	ldr.w	r4, [r5], #4
    6de6:	f84e 4b04 	str.w	r4, [lr], #4
    6dea:	4567      	cmp	r7, ip
    6dec:	d8f7      	bhi.n	6dde <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    6dee:	9d00      	ldr	r5, [sp, #0]
    6df0:	9c01      	ldr	r4, [sp, #4]
    6df2:	45d3      	cmp	fp, sl
    6df4:	4455      	add	r5, sl
    6df6:	eb08 0e0a 	add.w	lr, r8, sl
    6dfa:	eb09 0c0a 	add.w	ip, r9, sl
    6dfe:	f000 808c 	beq.w	6f1a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6e02:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    6e06:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6e0a:	1c6f      	adds	r7, r5, #1
    6e0c:	42b9      	cmp	r1, r7
    6e0e:	f240 8084 	bls.w	6f1a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6e12:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    6e14:	f89c 7001 	ldrb.w	r7, [ip, #1]
    6e18:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6e1c:	42a9      	cmp	r1, r5
    6e1e:	d97c      	bls.n	6f1a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    6e20:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6e24:	f88e 5002 	strb.w	r5, [lr, #2]
    6e28:	1857      	adds	r7, r2, r1
    6e2a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6e2e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    6e32:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6e34:	1a6d      	subs	r5, r5, r1
        if (count) {
    6e36:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6e38:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    6e3c:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    6e40:	d065      	beq.n	6f0e <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    6e42:	1d01      	adds	r1, r0, #4
    6e44:	1d3a      	adds	r2, r7, #4
    6e46:	4290      	cmp	r0, r2
    6e48:	bf38      	it	cc
    6e4a:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    6e4c:	4605      	mov	r5, r0
    6e4e:	d375      	bcc.n	6f3c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6e50:	2b0b      	cmp	r3, #11
    6e52:	d973      	bls.n	6f3c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6e54:	4242      	negs	r2, r0
    6e56:	f012 0203 	ands.w	r2, r2, #3
    6e5a:	d060      	beq.n	6f1e <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    6e5c:	7839      	ldrb	r1, [r7, #0]
    6e5e:	7001      	strb	r1, [r0, #0]
    6e60:	2a01      	cmp	r2, #1
    6e62:	f100 0501 	add.w	r5, r0, #1
    6e66:	f107 0e01 	add.w	lr, r7, #1
    6e6a:	d059      	beq.n	6f20 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6e6c:	7879      	ldrb	r1, [r7, #1]
    6e6e:	7041      	strb	r1, [r0, #1]
    6e70:	2a02      	cmp	r2, #2
    6e72:	f100 0502 	add.w	r5, r0, #2
    6e76:	f107 0e02 	add.w	lr, r7, #2
    6e7a:	d051      	beq.n	6f20 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6e7c:	78b9      	ldrb	r1, [r7, #2]
    6e7e:	7081      	strb	r1, [r0, #2]
    6e80:	1cc5      	adds	r5, r0, #3
    6e82:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    6e86:	f04f 0803 	mov.w	r8, #3
    6e8a:	eba3 0c02 	sub.w	ip, r3, r2
    6e8e:	f1ac 0104 	sub.w	r1, ip, #4
    6e92:	0889      	lsrs	r1, r1, #2
    6e94:	1c4e      	adds	r6, r1, #1
    6e96:	4417      	add	r7, r2
    6e98:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6e9c:	4402      	add	r2, r0
    6e9e:	2100      	movs	r1, #0
    6ea0:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6ea2:	f857 ab04 	ldr.w	sl, [r7], #4
    6ea6:	f842 ab04 	str.w	sl, [r2], #4
    6eaa:	428e      	cmp	r6, r1
    6eac:	d8f8      	bhi.n	6ea0 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    6eae:	45cc      	cmp	ip, r9
    6eb0:	eb08 0209 	add.w	r2, r8, r9
    6eb4:	eb05 0109 	add.w	r1, r5, r9
    6eb8:	eb0e 0709 	add.w	r7, lr, r9
    6ebc:	d00d      	beq.n	6eda <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6ebe:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    6ec2:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6ec6:	1c55      	adds	r5, r2, #1
    6ec8:	42ab      	cmp	r3, r5
    6eca:	d906      	bls.n	6eda <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6ecc:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6ece:	787d      	ldrb	r5, [r7, #1]
    6ed0:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6ed2:	4293      	cmp	r3, r2
    6ed4:	d901      	bls.n	6eda <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    6ed6:	78ba      	ldrb	r2, [r7, #2]
    6ed8:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    6eda:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6ede:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    6ee2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6ee6:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6ee8:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    6eea:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6eee:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    6ef2:	b91d      	cbnz	r5, 6efc <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6ef4:	3080      	adds	r0, #128	; 0x80
    6ef6:	2140      	movs	r1, #64	; 0x40
    6ef8:	f005 f9a8 	bl	c24c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6efc:	b662      	cpsie	i
    return retVal;
    6efe:	b220      	sxth	r0, r4
}
    6f00:	b003      	add	sp, #12
    6f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6f06:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    6f08:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f0a:	9500      	str	r5, [sp, #0]
    6f0c:	e758      	b.n	6dc0 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6f0e:	4431      	add	r1, r6
    6f10:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    6f14:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6f18:	e7eb      	b.n	6ef2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    6f1a:	1857      	adds	r7, r2, r1
    6f1c:	e785      	b.n	6e2a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    6f1e:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    6f20:	4690      	mov	r8, r2
    6f22:	e7b2      	b.n	6e8a <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    6f24:	1e7d      	subs	r5, r7, #1
    6f26:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    6f28:	f812 eb01 	ldrb.w	lr, [r2], #1
    6f2c:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f30:	42ba      	cmp	r2, r7
    6f32:	d1f9      	bne.n	6f28 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    6f34:	e779      	b.n	6e2a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    6f36:	f04f 30ff 	mov.w	r0, #4294967295
    6f3a:	4770      	bx	lr
    6f3c:	1e42      	subs	r2, r0, #1
    6f3e:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    6f40:	f817 1b01 	ldrb.w	r1, [r7], #1
    6f44:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6f48:	42bd      	cmp	r5, r7
    6f4a:	d1f9      	bne.n	6f40 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    6f4c:	e7c5      	b.n	6eda <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    6f4e:	4617      	mov	r7, r2
    6f50:	e76f      	b.n	6e32 <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    6f52:	bf00      	nop

00006f54 <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    6f54:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6f58:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    6f5c:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    6f5e:	bf1a      	itte	ne
    6f60:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    6f64:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    6f66:	f04f 30ff 	moveq.w	r0, #4294967295
}
    6f6a:	4770      	bx	lr

00006f6c <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    6f6c:	b570      	push	{r4, r5, r6, lr}
    6f6e:	4604      	mov	r4, r0
    6f70:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6f72:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6f76:	f005 f9c5 	bl	c304 <cdcdf_acm_is_enabled>
    6f7a:	b350      	cbz	r0, 6fd2 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    6f7c:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    6f80:	f010 0001 	ands.w	r0, r0, #1
    6f84:	d025      	beq.n	6fd2 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6f86:	7b6b      	ldrb	r3, [r5, #13]
    6f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6f8c:	2b02      	cmp	r3, #2
    6f8e:	d001      	beq.n	6f94 <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    6f90:	2000      	movs	r0, #0
    6f92:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    6f94:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    6f98:	b900      	cbnz	r0, 6f9c <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    6f9a:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    6f9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    6fa0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    6fa4:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6fa6:	1e5a      	subs	r2, r3, #1
    6fa8:	d40e      	bmi.n	6fc8 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    6faa:	2a00      	cmp	r2, #0
    6fac:	d0e3      	beq.n	6f76 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    6fae:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6fb2:	4423      	add	r3, r4
    6fb4:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    6fb8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6fbc:	3301      	adds	r3, #1
    6fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6fc2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    6fc6:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    6fc8:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    6fcc:	2a00      	cmp	r2, #0
    6fce:	d0d2      	beq.n	6f76 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    6fd0:	e7ed      	b.n	6fae <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    6fd2:	bd70      	pop	{r4, r5, r6, pc}

00006fd4 <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    6fd4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6fd8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    6fdc:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    6fde:	bf48      	it	mi
    6fe0:	3040      	addmi	r0, #64	; 0x40
}
    6fe2:	4770      	bx	lr

00006fe4 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    6fe4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    6fe8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    6fec:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6fee:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    6ff0:	bf48      	it	mi
    6ff2:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    6ff6:	4770      	bx	lr

00006ff8 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    6ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6ffc:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    7000:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7002:	f04f 0101 	mov.w	r1, #1
    7006:	f3bf 8f5b 	dmb	ish
    700a:	e8d3 2f4f 	ldrexb	r2, [r3]
    700e:	e8c3 1f44 	strexb	r4, r1, [r3]
    7012:	2c00      	cmp	r4, #0
    7014:	d1f9      	bne.n	700a <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    7016:	f3bf 8f5b 	dmb	ish
    701a:	f012 0fff 	tst.w	r2, #255	; 0xff
    701e:	f040 80e4 	bne.w	71ea <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    7022:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    7026:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    702a:	428e      	cmp	r6, r1
    702c:	f000 81b6 	beq.w	739c <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7030:	f100 0340 	add.w	r3, r0, #64	; 0x40
    7034:	eb03 0706 	add.w	r7, r3, r6
    7038:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    703c:	f0c0 80d8 	bcc.w	71f0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7040:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    7044:	4411      	add	r1, r2
    7046:	2940      	cmp	r1, #64	; 0x40
    7048:	bf28      	it	cs
    704a:	2140      	movcs	r1, #64	; 0x40
    704c:	428a      	cmp	r2, r1
    704e:	bf28      	it	cs
    7050:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7052:	2a00      	cmp	r2, #0
    7054:	f000 81c7 	beq.w	73e6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    7058:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    705c:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7060:	eb00 080e 	add.w	r8, r0, lr
    7064:	4404      	add	r4, r0
    7066:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    706a:	45e0      	cmp	r8, ip
    706c:	bf38      	it	cc
    706e:	42a5      	cmpcc	r5, r4
    7070:	f0c0 81ae 	bcc.w	73d0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    7074:	2a0b      	cmp	r2, #11
    7076:	f240 81ab 	bls.w	73d0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    707a:	426c      	negs	r4, r5
    707c:	f014 0403 	ands.w	r4, r4, #3
    7080:	f000 817f 	beq.w	7382 <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    7084:	5d9e      	ldrb	r6, [r3, r6]
    7086:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    708a:	2c01      	cmp	r4, #1
    708c:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    7090:	f107 0801 	add.w	r8, r7, #1
    7094:	f000 817b 	beq.w	738e <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    7098:	787e      	ldrb	r6, [r7, #1]
    709a:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    709e:	2c02      	cmp	r4, #2
    70a0:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    70a4:	f107 0802 	add.w	r8, r7, #2
    70a8:	f000 8171 	beq.w	738e <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    70ac:	78be      	ldrb	r6, [r7, #2]
    70ae:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    70b2:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    70b4:	f107 0803 	add.w	r8, r7, #3
    70b8:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    70bc:	9601      	str	r6, [sp, #4]
    70be:	eba2 0b04 	sub.w	fp, r2, r4
    70c2:	f1ab 0704 	sub.w	r7, fp, #4
    70c6:	08bf      	lsrs	r7, r7, #2
    70c8:	eb0e 0604 	add.w	r6, lr, r4
    70cc:	3701      	adds	r7, #1
    70ce:	34c0      	adds	r4, #192	; 0xc0
    70d0:	4406      	add	r6, r0
    70d2:	4404      	add	r4, r0
    70d4:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    70d8:	f04f 0e00 	mov.w	lr, #0
    70dc:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    70e0:	f856 ab04 	ldr.w	sl, [r6], #4
    70e4:	f844 ab04 	str.w	sl, [r4], #4
    70e8:	45be      	cmp	lr, r7
    70ea:	d3f7      	bcc.n	70dc <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    70ec:	9c01      	ldr	r4, [sp, #4]
    70ee:	45cb      	cmp	fp, r9
    70f0:	444c      	add	r4, r9
    70f2:	eb08 0e09 	add.w	lr, r8, r9
    70f6:	eb0c 0609 	add.w	r6, ip, r9
    70fa:	d00f      	beq.n	711c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    70fc:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    7100:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7104:	1c67      	adds	r7, r4, #1
    7106:	42ba      	cmp	r2, r7
    7108:	d908      	bls.n	711c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    710a:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    710c:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7110:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7112:	42a2      	cmp	r2, r4
    7114:	d902      	bls.n	711c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    7116:	f89e 4002 	ldrb.w	r4, [lr, #2]
    711a:	70b4      	strb	r4, [r6, #2]
    711c:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    711e:	1a8a      	subs	r2, r1, r2
    7120:	f000 811a 	beq.w	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7124:	1d26      	adds	r6, r4, #4
    7126:	f100 0744 	add.w	r7, r0, #68	; 0x44
    712a:	42bc      	cmp	r4, r7
    712c:	bf38      	it	cc
    712e:	42b3      	cmpcc	r3, r6
    7130:	f0c0 8145 	bcc.w	73be <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    7134:	2a0b      	cmp	r2, #11
    7136:	f240 8142 	bls.w	73be <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    713a:	425f      	negs	r7, r3
    713c:	f017 0703 	ands.w	r7, r7, #3
    7140:	f000 8129 	beq.w	7396 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    7144:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7148:	7023      	strb	r3, [r4, #0]
    714a:	2f01      	cmp	r7, #1
    714c:	f104 0c01 	add.w	ip, r4, #1
    7150:	f100 0341 	add.w	r3, r0, #65	; 0x41
    7154:	f000 811d 	beq.w	7392 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    7158:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    715c:	7063      	strb	r3, [r4, #1]
    715e:	2f02      	cmp	r7, #2
    7160:	f104 0c02 	add.w	ip, r4, #2
    7164:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7168:	f000 8113 	beq.w	7392 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    716c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7170:	70a3      	strb	r3, [r4, #2]
    7172:	f104 0c03 	add.w	ip, r4, #3
    7176:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    717a:	f04f 0903 	mov.w	r9, #3
    717e:	eba2 0807 	sub.w	r8, r2, r7
    7182:	f1a8 0e04 	sub.w	lr, r8, #4
    7186:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    718a:	f107 0640 	add.w	r6, r7, #64	; 0x40
    718e:	f10e 0e01 	add.w	lr, lr, #1
    7192:	443c      	add	r4, r7
    7194:	4406      	add	r6, r0
    7196:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    719a:	2700      	movs	r7, #0
    719c:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    719e:	f856 bb04 	ldr.w	fp, [r6], #4
    71a2:	f844 bb04 	str.w	fp, [r4], #4
    71a6:	45be      	cmp	lr, r7
    71a8:	d8f8      	bhi.n	719c <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    71aa:	45d0      	cmp	r8, sl
    71ac:	eb09 040a 	add.w	r4, r9, sl
    71b0:	eb03 070a 	add.w	r7, r3, sl
    71b4:	eb0c 060a 	add.w	r6, ip, sl
    71b8:	f000 80ce 	beq.w	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    71bc:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    71c0:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71c4:	1c63      	adds	r3, r4, #1
    71c6:	429a      	cmp	r2, r3
    71c8:	f240 80c6 	bls.w	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    71cc:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    71ce:	787b      	ldrb	r3, [r7, #1]
    71d0:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71d2:	42a2      	cmp	r2, r4
    71d4:	f240 80c0 	bls.w	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    71d8:	78bb      	ldrb	r3, [r7, #2]
    71da:	70b3      	strb	r3, [r6, #2]
    71dc:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    71de:	4628      	mov	r0, r5
    71e0:	f005 f848 	bl	c274 <cdcdf_acm_write>
    71e4:	2800      	cmp	r0, #0
    71e6:	f040 80be 	bne.w	7366 <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    71ea:	b003      	add	sp, #12
    71ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    71f0:	1b89      	subs	r1, r1, r6
    71f2:	f106 0240 	add.w	r2, r6, #64	; 0x40
    71f6:	f106 0444 	add.w	r4, r6, #68	; 0x44
    71fa:	2940      	cmp	r1, #64	; 0x40
    71fc:	eb00 0c02 	add.w	ip, r0, r2
    7200:	4404      	add	r4, r0
    7202:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    7206:	bf28      	it	cs
    7208:	2140      	movcs	r1, #64	; 0x40
    720a:	45f4      	cmp	ip, lr
    720c:	bf38      	it	cc
    720e:	42a5      	cmpcc	r5, r4
    7210:	f0c0 80cb 	bcc.w	73aa <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    7214:	290b      	cmp	r1, #11
    7216:	f240 80c8 	bls.w	73aa <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    721a:	426c      	negs	r4, r5
    721c:	f014 0403 	ands.w	r4, r4, #3
    7220:	f000 80ab 	beq.w	737a <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    7224:	5d9b      	ldrb	r3, [r3, r6]
    7226:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    722a:	2c01      	cmp	r4, #1
    722c:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    7230:	f107 0e01 	add.w	lr, r7, #1
    7234:	f000 80a9 	beq.w	738a <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7238:	787b      	ldrb	r3, [r7, #1]
    723a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    723e:	2c02      	cmp	r4, #2
    7240:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    7244:	f107 0e02 	add.w	lr, r7, #2
    7248:	f000 809f 	beq.w	738a <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    724c:	78bb      	ldrb	r3, [r7, #2]
    724e:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    7252:	f107 0e03 	add.w	lr, r7, #3
    7256:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    725a:	f04f 0c03 	mov.w	ip, #3
    725e:	1913      	adds	r3, r2, r4
    7260:	4403      	add	r3, r0
    7262:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    7266:	681a      	ldr	r2, [r3, #0]
    7268:	f840 2008 	str.w	r2, [r0, r8]
    726c:	1b0f      	subs	r7, r1, r4
    726e:	1f3a      	subs	r2, r7, #4
    7270:	0892      	lsrs	r2, r2, #2
    7272:	eb00 0408 	add.w	r4, r0, r8
    7276:	3201      	adds	r2, #1
    7278:	f8d3 8004 	ldr.w	r8, [r3, #4]
    727c:	f8c4 8004 	str.w	r8, [r4, #4]
    7280:	2a02      	cmp	r2, #2
    7282:	ea4f 0882 	mov.w	r8, r2, lsl #2
    7286:	d04f      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7288:	f8d3 9008 	ldr.w	r9, [r3, #8]
    728c:	f8c4 9008 	str.w	r9, [r4, #8]
    7290:	2a03      	cmp	r2, #3
    7292:	d049      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7294:	f8d3 900c 	ldr.w	r9, [r3, #12]
    7298:	f8c4 900c 	str.w	r9, [r4, #12]
    729c:	2a04      	cmp	r2, #4
    729e:	d043      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    72a0:	f8d3 9010 	ldr.w	r9, [r3, #16]
    72a4:	f8c4 9010 	str.w	r9, [r4, #16]
    72a8:	2a05      	cmp	r2, #5
    72aa:	d03d      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    72ac:	f8d3 9014 	ldr.w	r9, [r3, #20]
    72b0:	f8c4 9014 	str.w	r9, [r4, #20]
    72b4:	2a06      	cmp	r2, #6
    72b6:	d037      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    72b8:	f8d3 9018 	ldr.w	r9, [r3, #24]
    72bc:	f8c4 9018 	str.w	r9, [r4, #24]
    72c0:	2a07      	cmp	r2, #7
    72c2:	d031      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    72c4:	f8d3 901c 	ldr.w	r9, [r3, #28]
    72c8:	f8c4 901c 	str.w	r9, [r4, #28]
    72cc:	2a08      	cmp	r2, #8
    72ce:	d02b      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    72d0:	f8d3 9020 	ldr.w	r9, [r3, #32]
    72d4:	f8c4 9020 	str.w	r9, [r4, #32]
    72d8:	2a09      	cmp	r2, #9
    72da:	d025      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    72dc:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    72e0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    72e4:	2a0a      	cmp	r2, #10
    72e6:	d01f      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    72e8:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    72ec:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    72f0:	2a0b      	cmp	r2, #11
    72f2:	d019      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    72f4:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    72f8:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    72fc:	2a0c      	cmp	r2, #12
    72fe:	d013      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7300:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    7304:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7308:	2a0d      	cmp	r2, #13
    730a:	d00d      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    730c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7310:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    7314:	2a0e      	cmp	r2, #14
    7316:	d007      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7318:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    731c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7320:	2a0f      	cmp	r2, #15
    7322:	d001      	beq.n	7328 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7326:	63e3      	str	r3, [r4, #60]	; 0x3c
    7328:	4547      	cmp	r7, r8
    732a:	eb0c 0308 	add.w	r3, ip, r8
    732e:	eb06 0408 	add.w	r4, r6, r8
    7332:	eb0e 0c08 	add.w	ip, lr, r8
    7336:	d00f      	beq.n	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7338:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    733c:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7340:	1c5a      	adds	r2, r3, #1
    7342:	4291      	cmp	r1, r2
    7344:	d908      	bls.n	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7346:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    7348:	f89c 2001 	ldrb.w	r2, [ip, #1]
    734c:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    734e:	4299      	cmp	r1, r3
    7350:	d902      	bls.n	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    7352:	f89c 3002 	ldrb.w	r3, [ip, #2]
    7356:	70a3      	strb	r3, [r4, #2]
    7358:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    735a:	4628      	mov	r0, r5
    735c:	f004 ff8a 	bl	c274 <cdcdf_acm_write>
    7360:	2800      	cmp	r0, #0
    7362:	f43f af42 	beq.w	71ea <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    7366:	f3bf 8f5b 	dmb	ish
    736a:	2300      	movs	r3, #0
    736c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    7370:	f3bf 8f5b 	dmb	ish
}
    7374:	b003      	add	sp, #12
    7376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    737a:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    737c:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    737e:	462e      	mov	r6, r5
    7380:	e76d      	b.n	725e <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    7382:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7384:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7386:	46ac      	mov	ip, r5
    7388:	e699      	b.n	70be <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    738a:	46a4      	mov	ip, r4
    738c:	e767      	b.n	725e <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    738e:	9401      	str	r4, [sp, #4]
    7390:	e695      	b.n	70be <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7392:	46b9      	mov	r9, r7
    7394:	e6f3      	b.n	717e <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    7396:	46b9      	mov	r9, r7
    7398:	46a4      	mov	ip, r4
    739a:	e6f0      	b.n	717e <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    739c:	f3bf 8f5b 	dmb	ish
    73a0:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    73a4:	f3bf 8f5b 	dmb	ish
        return;
    73a8:	e71f      	b.n	71ea <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    73aa:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    73ae:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    73b0:	f817 2b01 	ldrb.w	r2, [r7], #1
    73b4:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    73b8:	42a7      	cmp	r7, r4
    73ba:	d1f9      	bne.n	73b0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    73bc:	e7cc      	b.n	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    73be:	3c01      	subs	r4, #1
    73c0:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    73c2:	f813 6b01 	ldrb.w	r6, [r3], #1
    73c6:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    73ca:	4293      	cmp	r3, r2
    73cc:	d1f9      	bne.n	73c2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    73ce:	e7c3      	b.n	7358 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    73d0:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    73d4:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    73d8:	f817 6b01 	ldrb.w	r6, [r7], #1
    73dc:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    73e0:	45be      	cmp	lr, r7
    73e2:	d1f9      	bne.n	73d8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    73e4:	e69a      	b.n	711c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    73e6:	462c      	mov	r4, r5
    73e8:	e699      	b.n	711e <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    73ea:	bf00      	nop

000073ec <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    73ec:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    73ee:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    73f2:	b903      	cbnz	r3, 73f6 <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    73f4:	bd38      	pop	{r3, r4, r5, pc}
    73f6:	4605      	mov	r5, r0
    TxPump();
    73f8:	f7ff fdfe 	bl	6ff8 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    73fc:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    7400:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    7404:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7408:	429a      	cmp	r2, r3
    740a:	d00b      	beq.n	7424 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    740c:	f004 ff7a 	bl	c304 <cdcdf_acm_is_enabled>
    7410:	b140      	cbz	r0, 7424 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    7412:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    7416:	07db      	lsls	r3, r3, #31
    7418:	d504      	bpl.n	7424 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    741a:	7b63      	ldrb	r3, [r4, #13]
    741c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7420:	2b02      	cmp	r3, #2
    7422:	d0ed      	beq.n	7400 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    7424:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    7426:	4621      	mov	r1, r4
    m_portOpen = false;
    7428:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    742c:	4620      	mov	r0, r4
    742e:	f004 ff41 	bl	c2b4 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    7432:	4621      	mov	r1, r4
    7434:	2001      	movs	r0, #1
    7436:	f004 ff3d 	bl	c2b4 <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    743a:	f004 ff2f 	bl	c29c <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    743e:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    7442:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    7446:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    744a:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    744e:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    7452:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    7456:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    745a:	bd38      	pop	{r3, r4, r5, pc}

0000745c <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    745c:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    7460:	b103      	cbz	r3, 7464 <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    7462:	4770      	bx	lr
    7464:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    7468:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    746c:	429a      	cmp	r2, r3
    746e:	f000 80fd 	beq.w	766c <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    7472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7476:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    747a:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    747c:	f04f 0101 	mov.w	r1, #1
    7480:	f3bf 8f5b 	dmb	ish
    7484:	e8d3 2f4f 	ldrexb	r2, [r3]
    7488:	e8c3 1f44 	strexb	r4, r1, [r3]
    748c:	2c00      	cmp	r4, #0
    748e:	d1f9      	bne.n	7484 <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    7490:	f3bf 8f5b 	dmb	ish
    7494:	f012 0fff 	tst.w	r2, #255	; 0xff
    7498:	f040 80e5 	bne.w	7666 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    749c:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    74a0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    74a4:	428e      	cmp	r6, r1
    74a6:	f000 81ab 	beq.w	7800 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    74aa:	f100 0340 	add.w	r3, r0, #64	; 0x40
    74ae:	eb03 0706 	add.w	r7, r3, r6
    74b2:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    74b6:	f0c0 80da 	bcc.w	766e <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    74ba:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    74be:	4411      	add	r1, r2
    74c0:	2940      	cmp	r1, #64	; 0x40
    74c2:	bf28      	it	cs
    74c4:	2140      	movcs	r1, #64	; 0x40
    74c6:	428a      	cmp	r2, r1
    74c8:	bf28      	it	cs
    74ca:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74cc:	2a00      	cmp	r2, #0
    74ce:	f000 81bc 	beq.w	784a <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    74d2:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    74d6:	f106 0444 	add.w	r4, r6, #68	; 0x44
    74da:	eb00 080e 	add.w	r8, r0, lr
    74de:	4404      	add	r4, r0
    74e0:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    74e4:	45e0      	cmp	r8, ip
    74e6:	bf38      	it	cc
    74e8:	42a5      	cmpcc	r5, r4
    74ea:	f0c0 81a3 	bcc.w	7834 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    74ee:	2a0b      	cmp	r2, #11
    74f0:	f240 81a0 	bls.w	7834 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    74f4:	426c      	negs	r4, r5
    74f6:	f014 0403 	ands.w	r4, r4, #3
    74fa:	f000 8177 	beq.w	77ec <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    74fe:	5d9e      	ldrb	r6, [r3, r6]
    7500:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    7504:	2c01      	cmp	r4, #1
    7506:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    750a:	f107 0801 	add.w	r8, r7, #1
    750e:	f000 8171 	beq.w	77f4 <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    7512:	787e      	ldrb	r6, [r7, #1]
    7514:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7518:	2c02      	cmp	r4, #2
    751a:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    751e:	f107 0802 	add.w	r8, r7, #2
    7522:	f000 8165 	beq.w	77f0 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    7526:	78be      	ldrb	r6, [r7, #2]
    7528:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    752c:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    752e:	f107 0803 	add.w	r8, r7, #3
    7532:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7536:	9601      	str	r6, [sp, #4]
    7538:	eba2 0b04 	sub.w	fp, r2, r4
    753c:	f1ab 0704 	sub.w	r7, fp, #4
    7540:	08bf      	lsrs	r7, r7, #2
    7542:	eb0e 0604 	add.w	r6, lr, r4
    7546:	3701      	adds	r7, #1
    7548:	34c0      	adds	r4, #192	; 0xc0
    754a:	4406      	add	r6, r0
    754c:	4404      	add	r4, r0
    754e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    7552:	f04f 0e00 	mov.w	lr, #0
    7556:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    755a:	f856 ab04 	ldr.w	sl, [r6], #4
    755e:	f844 ab04 	str.w	sl, [r4], #4
    7562:	45be      	cmp	lr, r7
    7564:	d3f7      	bcc.n	7556 <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    7566:	9c01      	ldr	r4, [sp, #4]
    7568:	45cb      	cmp	fp, r9
    756a:	444c      	add	r4, r9
    756c:	eb0c 0609 	add.w	r6, ip, r9
    7570:	eb08 0e09 	add.w	lr, r8, r9
    7574:	d00f      	beq.n	7596 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    7576:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    757a:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    757e:	1c67      	adds	r7, r4, #1
    7580:	42ba      	cmp	r2, r7
    7582:	d908      	bls.n	7596 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    7584:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7586:	f89e 7001 	ldrb.w	r7, [lr, #1]
    758a:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    758c:	42a2      	cmp	r2, r4
    758e:	d902      	bls.n	7596 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    7590:	f89e 4002 	ldrb.w	r4, [lr, #2]
    7594:	70b4      	strb	r4, [r6, #2]
    7596:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7598:	1a8a      	subs	r2, r1, r2
    759a:	d058      	beq.n	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    759c:	1d26      	adds	r6, r4, #4
    759e:	f100 0744 	add.w	r7, r0, #68	; 0x44
    75a2:	42bc      	cmp	r4, r7
    75a4:	bf38      	it	cc
    75a6:	42b3      	cmpcc	r3, r6
    75a8:	f0c0 813b 	bcc.w	7822 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    75ac:	2a0b      	cmp	r2, #11
    75ae:	f240 8138 	bls.w	7822 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    75b2:	425f      	negs	r7, r3
    75b4:	f017 0703 	ands.w	r7, r7, #3
    75b8:	f000 811f 	beq.w	77fa <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    75bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    75c0:	7023      	strb	r3, [r4, #0]
    75c2:	2f01      	cmp	r7, #1
    75c4:	f104 0c01 	add.w	ip, r4, #1
    75c8:	f100 0341 	add.w	r3, r0, #65	; 0x41
    75cc:	f000 8116 	beq.w	77fc <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    75d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    75d4:	7063      	strb	r3, [r4, #1]
    75d6:	2f02      	cmp	r7, #2
    75d8:	f104 0c02 	add.w	ip, r4, #2
    75dc:	f100 0342 	add.w	r3, r0, #66	; 0x42
    75e0:	f000 810c 	beq.w	77fc <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    75e4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    75e8:	70a3      	strb	r3, [r4, #2]
    75ea:	f104 0c03 	add.w	ip, r4, #3
    75ee:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    75f2:	f04f 0903 	mov.w	r9, #3
    75f6:	eba2 0807 	sub.w	r8, r2, r7
    75fa:	f1a8 0e04 	sub.w	lr, r8, #4
    75fe:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    7602:	f107 0640 	add.w	r6, r7, #64	; 0x40
    7606:	f10e 0e01 	add.w	lr, lr, #1
    760a:	443c      	add	r4, r7
    760c:	4406      	add	r6, r0
    760e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    7612:	2700      	movs	r7, #0
    7614:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    7616:	f856 bb04 	ldr.w	fp, [r6], #4
    761a:	f844 bb04 	str.w	fp, [r4], #4
    761e:	45be      	cmp	lr, r7
    7620:	d8f8      	bhi.n	7614 <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    7622:	45d0      	cmp	r8, sl
    7624:	eb09 040a 	add.w	r4, r9, sl
    7628:	eb0c 060a 	add.w	r6, ip, sl
    762c:	eb03 070a 	add.w	r7, r3, sl
    7630:	d00d      	beq.n	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7632:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    7636:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    763a:	1c63      	adds	r3, r4, #1
    763c:	429a      	cmp	r2, r3
    763e:	d906      	bls.n	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7640:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7642:	787b      	ldrb	r3, [r7, #1]
    7644:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7646:	42a2      	cmp	r2, r4
    7648:	d901      	bls.n	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    764a:	78bb      	ldrb	r3, [r7, #2]
    764c:	70b3      	strb	r3, [r6, #2]
    764e:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7650:	4628      	mov	r0, r5
    7652:	f004 fe0f 	bl	c274 <cdcdf_acm_write>
    7656:	b130      	cbz	r0, 7666 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    7658:	f3bf 8f5b 	dmb	ish
    765c:	2300      	movs	r3, #0
    765e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    7662:	f3bf 8f5b 	dmb	ish
}
    7666:	b003      	add	sp, #12
    7668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    766c:	4770      	bx	lr
        count = min(count, tail - head);
    766e:	1b89      	subs	r1, r1, r6
    7670:	f106 0240 	add.w	r2, r6, #64	; 0x40
    7674:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7678:	2940      	cmp	r1, #64	; 0x40
    767a:	eb00 0c02 	add.w	ip, r0, r2
    767e:	4404      	add	r4, r0
    7680:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    7684:	bf28      	it	cs
    7686:	2140      	movcs	r1, #64	; 0x40
    7688:	45f4      	cmp	ip, lr
    768a:	bf38      	it	cc
    768c:	42a5      	cmpcc	r5, r4
    768e:	f0c0 80be 	bcc.w	780e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    7692:	290b      	cmp	r1, #11
    7694:	f240 80bb 	bls.w	780e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    7698:	426c      	negs	r4, r5
    769a:	f014 0403 	ands.w	r4, r4, #3
    769e:	f000 809e 	beq.w	77de <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    76a2:	5d9b      	ldrb	r3, [r3, r6]
    76a4:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    76a8:	2c01      	cmp	r4, #1
    76aa:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    76ae:	f107 0e01 	add.w	lr, r7, #1
    76b2:	f000 8096 	beq.w	77e2 <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    76b6:	787b      	ldrb	r3, [r7, #1]
    76b8:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    76bc:	2c02      	cmp	r4, #2
    76be:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    76c2:	f107 0e02 	add.w	lr, r7, #2
    76c6:	f000 808e 	beq.w	77e6 <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    76ca:	78bb      	ldrb	r3, [r7, #2]
    76cc:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    76d0:	f107 0e03 	add.w	lr, r7, #3
    76d4:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    76d8:	f04f 0c03 	mov.w	ip, #3
    76dc:	1913      	adds	r3, r2, r4
    76de:	4403      	add	r3, r0
    76e0:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    76e4:	681a      	ldr	r2, [r3, #0]
    76e6:	f840 2008 	str.w	r2, [r0, r8]
    76ea:	1b0f      	subs	r7, r1, r4
    76ec:	1f3a      	subs	r2, r7, #4
    76ee:	0892      	lsrs	r2, r2, #2
    76f0:	eb00 0408 	add.w	r4, r0, r8
    76f4:	3201      	adds	r2, #1
    76f6:	f8d3 8004 	ldr.w	r8, [r3, #4]
    76fa:	f8c4 8004 	str.w	r8, [r4, #4]
    76fe:	2a02      	cmp	r2, #2
    7700:	ea4f 0882 	mov.w	r8, r2, lsl #2
    7704:	d04f      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7706:	f8d3 9008 	ldr.w	r9, [r3, #8]
    770a:	f8c4 9008 	str.w	r9, [r4, #8]
    770e:	2a03      	cmp	r2, #3
    7710:	d049      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7712:	f8d3 900c 	ldr.w	r9, [r3, #12]
    7716:	f8c4 900c 	str.w	r9, [r4, #12]
    771a:	2a04      	cmp	r2, #4
    771c:	d043      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    771e:	f8d3 9010 	ldr.w	r9, [r3, #16]
    7722:	f8c4 9010 	str.w	r9, [r4, #16]
    7726:	2a05      	cmp	r2, #5
    7728:	d03d      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    772a:	f8d3 9014 	ldr.w	r9, [r3, #20]
    772e:	f8c4 9014 	str.w	r9, [r4, #20]
    7732:	2a06      	cmp	r2, #6
    7734:	d037      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7736:	f8d3 9018 	ldr.w	r9, [r3, #24]
    773a:	f8c4 9018 	str.w	r9, [r4, #24]
    773e:	2a07      	cmp	r2, #7
    7740:	d031      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7742:	f8d3 901c 	ldr.w	r9, [r3, #28]
    7746:	f8c4 901c 	str.w	r9, [r4, #28]
    774a:	2a08      	cmp	r2, #8
    774c:	d02b      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    774e:	f8d3 9020 	ldr.w	r9, [r3, #32]
    7752:	f8c4 9020 	str.w	r9, [r4, #32]
    7756:	2a09      	cmp	r2, #9
    7758:	d025      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    775a:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    775e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    7762:	2a0a      	cmp	r2, #10
    7764:	d01f      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7766:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    776a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    776e:	2a0b      	cmp	r2, #11
    7770:	d019      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7772:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    7776:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    777a:	2a0c      	cmp	r2, #12
    777c:	d013      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    777e:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    7782:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7786:	2a0d      	cmp	r2, #13
    7788:	d00d      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    778a:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    778e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    7792:	2a0e      	cmp	r2, #14
    7794:	d007      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7796:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    779a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    779e:	2a0f      	cmp	r2, #15
    77a0:	d001      	beq.n	77a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    77a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    77a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    77a6:	4547      	cmp	r7, r8
    77a8:	eb0c 0308 	add.w	r3, ip, r8
    77ac:	eb06 0408 	add.w	r4, r6, r8
    77b0:	eb0e 0c08 	add.w	ip, lr, r8
    77b4:	f43f af4b 	beq.w	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    77b8:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    77bc:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    77c0:	1c5a      	adds	r2, r3, #1
    77c2:	4291      	cmp	r1, r2
    77c4:	f67f af43 	bls.w	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    77c8:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    77ca:	f89c 2001 	ldrb.w	r2, [ip, #1]
    77ce:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    77d0:	4299      	cmp	r1, r3
    77d2:	f67f af3c 	bls.w	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    77d6:	f89c 3002 	ldrb.w	r3, [ip, #2]
    77da:	70a3      	strb	r3, [r4, #2]
    77dc:	e737      	b.n	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    77de:	46be      	mov	lr, r7
    77e0:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    77e2:	46a4      	mov	ip, r4
    77e4:	e77a      	b.n	76dc <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    77e6:	f04f 0c02 	mov.w	ip, #2
    77ea:	e777      	b.n	76dc <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    77ec:	46b8      	mov	r8, r7
    77ee:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    77f0:	9401      	str	r4, [sp, #4]
    77f2:	e6a1      	b.n	7538 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    77f4:	2601      	movs	r6, #1
    77f6:	9601      	str	r6, [sp, #4]
    77f8:	e69e      	b.n	7538 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    77fa:	46a4      	mov	ip, r4
    77fc:	46b9      	mov	r9, r7
    77fe:	e6fa      	b.n	75f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    7800:	f3bf 8f5b 	dmb	ish
    7804:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7808:	f3bf 8f5b 	dmb	ish
    780c:	e72b      	b.n	7666 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    780e:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    7812:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7814:	f817 2b01 	ldrb.w	r2, [r7], #1
    7818:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    781c:	42a7      	cmp	r7, r4
    781e:	d1f9      	bne.n	7814 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    7820:	e715      	b.n	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7822:	3c01      	subs	r4, #1
    7824:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    7826:	f813 6b01 	ldrb.w	r6, [r3], #1
    782a:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    782e:	4293      	cmp	r3, r2
    7830:	d1f9      	bne.n	7826 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    7832:	e70c      	b.n	764e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7834:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7838:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    783c:	f817 6b01 	ldrb.w	r6, [r7], #1
    7840:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7844:	45be      	cmp	lr, r7
    7846:	d1f9      	bne.n	783c <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    7848:	e6a5      	b.n	7596 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    784a:	462c      	mov	r4, r5
    784c:	e6a4      	b.n	7598 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    784e:	bf00      	nop

00007850 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    7850:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    7852:	f7fe ff85 	bl	6760 <_ZN9ClearCore10UsbManager8InstanceEv>
    7856:	4b01      	ldr	r3, [pc, #4]	; (785c <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    7858:	6018      	str	r0, [r3, #0]
    785a:	bd08      	pop	{r3, pc}
    785c:	20000aec 	.word	0x20000aec

00007860 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    7860:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7862:	4770      	bx	lr

00007864 <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    7864:	7900      	ldrb	r0, [r0, #4]
    7866:	4770      	bx	lr

00007868 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    7868:	2001      	movs	r0, #1
    786a:	4770      	bx	lr

0000786c <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    786c:	b510      	push	{r4, lr}
    786e:	4604      	mov	r4, r0
    DigitalIn() {};
    7870:	f007 f800 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    7874:	4620      	mov	r0, r4
    7876:	4b0c      	ldr	r3, [pc, #48]	; (78a8 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    7878:	f840 3b30 	str.w	r3, [r0], #48
    787c:	f004 f8a2 	bl	b9c4 <_ZN9ClearCore13StepGeneratorC1Ev>
    7880:	4a0a      	ldr	r2, [pc, #40]	; (78ac <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    7882:	6022      	str	r2, [r4, #0]
            reg = 0;
    7884:	2300      	movs	r3, #0
    MotorDriver() {};
    7886:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    7888:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    788c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    7890:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    7894:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7898:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    789c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    78a0:	6322      	str	r2, [r4, #48]	; 0x30
    78a2:	4620      	mov	r0, r4
    78a4:	bd10      	pop	{r4, pc}
    78a6:	bf00      	nop
    78a8:	000237e4 	.word	0x000237e4
    78ac:	00023028 	.word	0x00023028

000078b0 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    78b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    78b4:	4bbf      	ldr	r3, [pc, #764]	; (7bb4 <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    78b6:	f8df a340 	ldr.w	sl, [pc, #832]	; 7bf8 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    78ba:	4abf      	ldr	r2, [pc, #764]	; (7bb8 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    78bc:	49bf      	ldr	r1, [pc, #764]	; (7bbc <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    78be:	4dc0      	ldr	r5, [pc, #768]	; (7bc0 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    78c0:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    78c2:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    78c4:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    78c6:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    78ca:	7007      	strb	r7, [r0, #0]
    78cc:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    78ce:	e88d 0108 	stmia.w	sp, {r3, r8}
    78d2:	4620      	mov	r0, r4
    78d4:	4bbb      	ldr	r3, [pc, #748]	; (7bc4 <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    78d6:	f00a fb0f 	bl	11ef8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    78da:	68a1      	ldr	r1, [r4, #8]
    78dc:	6862      	ldr	r2, [r4, #4]
    78de:	7b23      	ldrb	r3, [r4, #12]
    78e0:	f8ca 1008 	str.w	r1, [sl, #8]
    78e4:	f8ca 2004 	str.w	r2, [sl, #4]
    78e8:	6921      	ldr	r1, [r4, #16]
    78ea:	6962      	ldr	r2, [r4, #20]
    78ec:	f88a 300c 	strb.w	r3, [sl, #12]
    78f0:	69a3      	ldr	r3, [r4, #24]
    78f2:	f8ca 1010 	str.w	r1, [sl, #16]
    78f6:	f8ca 2014 	str.w	r2, [sl, #20]
    78fa:	69e1      	ldr	r1, [r4, #28]
    78fc:	6a22      	ldr	r2, [r4, #32]
    78fe:	f8ca 3018 	str.w	r3, [sl, #24]
    7902:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7904:	f8ca 101c 	str.w	r1, [sl, #28]
    7908:	f8ca 2020 	str.w	r2, [sl, #32]
    790c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    7910:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    7914:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    7918:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    791c:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    7920:	2680      	movs	r6, #128	; 0x80
    7922:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    7924:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    7928:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    792c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    7930:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7934:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    7938:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    793c:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    7940:	a914      	add	r1, sp, #80	; 0x50
    7942:	4632      	mov	r2, r6
    7944:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    7948:	f016 feda 	bl	1e700 <memcpy>
    794c:	4632      	mov	r2, r6
    794e:	a934      	add	r1, sp, #208	; 0xd0
    7950:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    7954:	f016 fed4 	bl	1e700 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    7958:	f8cd 8004 	str.w	r8, [sp, #4]
    795c:	499a      	ldr	r1, [pc, #616]	; (7bc8 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    795e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    7962:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7966:	9100      	str	r1, [sp, #0]
    7968:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    796c:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    7970:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    7974:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7978:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    797c:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    7980:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    7984:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    7988:	4620      	mov	r0, r4
    798a:	4b90      	ldr	r3, [pc, #576]	; (7bcc <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    798c:	4a90      	ldr	r2, [pc, #576]	; (7bd0 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    798e:	4991      	ldr	r1, [pc, #580]	; (7bd4 <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    7990:	f008 fbca 	bl	10128 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    7994:	6863      	ldr	r3, [r4, #4]
    7996:	606b      	str	r3, [r5, #4]
    7998:	69a3      	ldr	r3, [r4, #24]
    799a:	68a2      	ldr	r2, [r4, #8]
    799c:	f894 e00c 	ldrb.w	lr, [r4, #12]
    79a0:	6920      	ldr	r0, [r4, #16]
    79a2:	61ab      	str	r3, [r5, #24]
    79a4:	69e3      	ldr	r3, [r4, #28]
    79a6:	60aa      	str	r2, [r5, #8]
    79a8:	f885 e00c 	strb.w	lr, [r5, #12]
    79ac:	6962      	ldr	r2, [r4, #20]
    79ae:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    79b2:	6128      	str	r0, [r5, #16]
    79b4:	61eb      	str	r3, [r5, #28]
    79b6:	6a20      	ldr	r0, [r4, #32]
    79b8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    79bc:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    79c0:	616a      	str	r2, [r5, #20]
    79c2:	6228      	str	r0, [r5, #32]
    79c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    79c6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    79c8:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    79cc:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    79d0:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    79d4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    79d8:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    79dc:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    79e0:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    79e4:	a914      	add	r1, sp, #80	; 0x50
    79e6:	626a      	str	r2, [r5, #36]	; 0x24
    79e8:	85a8      	strh	r0, [r5, #44]	; 0x2c
    79ea:	4632      	mov	r2, r6
    79ec:	f105 0030 	add.w	r0, r5, #48	; 0x30
    79f0:	f016 fe86 	bl	1e700 <memcpy>
    79f4:	4632      	mov	r2, r6
    79f6:	a934      	add	r1, sp, #208	; 0xd0
    79f8:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    79fc:	f016 fe80 	bl	1e700 <memcpy>
    7a00:	f504 7098 	add.w	r0, r4, #304	; 0x130
    7a04:	c807      	ldmia	r0, {r0, r1, r2}
    7a06:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7a0a:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    7a0e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7a12:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    7a16:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    7a1a:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7a1e:	4620      	mov	r0, r4
    7a20:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    7a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7a28:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7a2c:	f04f 0a01 	mov.w	sl, #1
    7a30:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7a34:	f00a f806 	bl	11a44 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7a38:	4b67      	ldr	r3, [pc, #412]	; (7bd8 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    7a3a:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    7a3c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    7a40:	4d66      	ldr	r5, [pc, #408]	; (7bdc <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    7a42:	f8cd a004 	str.w	sl, [sp, #4]
    7a46:	9300      	str	r3, [sp, #0]
    7a48:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    7a4a:	68a6      	ldr	r6, [r4, #8]
    7a4c:	71aa      	strb	r2, [r5, #6]
    7a4e:	f8a5 c004 	strh.w	ip, [r5, #4]
    7a52:	60ae      	str	r6, [r5, #8]
    7a54:	4620      	mov	r0, r4
    7a56:	4b62      	ldr	r3, [pc, #392]	; (7be0 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    7a58:	4a62      	ldr	r2, [pc, #392]	; (7be4 <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    7a5a:	4d63      	ldr	r5, [pc, #396]	; (7be8 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    7a5c:	f005 ff40 	bl	d8e0 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    7a60:	f104 000c 	add.w	r0, r4, #12
    7a64:	c807      	ldmia	r0, {r0, r1, r2}
    7a66:	f894 e006 	ldrb.w	lr, [r4, #6]
    7a6a:	68a3      	ldr	r3, [r4, #8]
    7a6c:	88a6      	ldrh	r6, [r4, #4]
    7a6e:	f885 e006 	strb.w	lr, [r5, #6]
    7a72:	60ab      	str	r3, [r5, #8]
    7a74:	f894 e018 	ldrb.w	lr, [r4, #24]
    7a78:	69e3      	ldr	r3, [r4, #28]
    7a7a:	60e8      	str	r0, [r5, #12]
    7a7c:	6a20      	ldr	r0, [r4, #32]
    7a7e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7a82:	80ae      	strh	r6, [r5, #4]
    7a84:	6129      	str	r1, [r5, #16]
    7a86:	7e66      	ldrb	r6, [r4, #25]
    7a88:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7a8a:	616a      	str	r2, [r5, #20]
    7a8c:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    7a90:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7a92:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7a96:	61eb      	str	r3, [r5, #28]
    7a98:	6228      	str	r0, [r5, #32]
    7a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7a9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7a9e:	766e      	strb	r6, [r5, #25]
    7aa0:	6269      	str	r1, [r5, #36]	; 0x24
    7aa2:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7aa6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7aaa:	632a      	str	r2, [r5, #48]	; 0x30
    7aac:	63a8      	str	r0, [r5, #56]	; 0x38
    7aae:	636b      	str	r3, [r5, #52]	; 0x34
    7ab0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7ab4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7ab8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7aba:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7abe:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7ac2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7ac4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7ac8:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7acc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7ace:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7ad0:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7ad4:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7ad8:	6429      	str	r1, [r5, #64]	; 0x40
    7ada:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7ade:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7ae0:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7ae4:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7ae8:	64aa      	str	r2, [r5, #72]	; 0x48
    7aea:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    7aee:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7af0:	64eb      	str	r3, [r5, #76]	; 0x4c
    7af2:	6528      	str	r0, [r5, #80]	; 0x50
    7af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7af6:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7afa:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7afe:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7b02:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7b06:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7b0a:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7b0e:	662a      	str	r2, [r5, #96]	; 0x60
    7b10:	666b      	str	r3, [r5, #100]	; 0x64
    7b12:	6569      	str	r1, [r5, #84]	; 0x54
    7b14:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    7b16:	4b35      	ldr	r3, [pc, #212]	; (7bec <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    7b18:	f8cd a000 	str.w	sl, [sp]
    7b1c:	4620      	mov	r0, r4
    7b1e:	66a9      	str	r1, [r5, #104]	; 0x68
    7b20:	4a33      	ldr	r2, [pc, #204]	; (7bf0 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    7b22:	4d34      	ldr	r5, [pc, #208]	; (7bf4 <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    7b24:	2140      	movs	r1, #64	; 0x40
    7b26:	f006 fbe1 	bl	e2ec <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7b2a:	f894 e006 	ldrb.w	lr, [r4, #6]
    7b2e:	68a2      	ldr	r2, [r4, #8]
    7b30:	68e3      	ldr	r3, [r4, #12]
    7b32:	88a6      	ldrh	r6, [r4, #4]
    7b34:	6920      	ldr	r0, [r4, #16]
    7b36:	6961      	ldr	r1, [r4, #20]
    7b38:	f885 e006 	strb.w	lr, [r5, #6]
    7b3c:	60aa      	str	r2, [r5, #8]
    7b3e:	f894 e018 	ldrb.w	lr, [r4, #24]
    7b42:	69e2      	ldr	r2, [r4, #28]
    7b44:	60eb      	str	r3, [r5, #12]
    7b46:	6a23      	ldr	r3, [r4, #32]
    7b48:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7b4c:	80ae      	strh	r6, [r5, #4]
    7b4e:	6128      	str	r0, [r5, #16]
    7b50:	7e66      	ldrb	r6, [r4, #25]
    7b52:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b54:	6169      	str	r1, [r5, #20]
    7b56:	f885 e018 	strb.w	lr, [r5, #24]
    7b5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7b5c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7b60:	61ea      	str	r2, [r5, #28]
    7b62:	622b      	str	r3, [r5, #32]
    7b64:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7b68:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7b6c:	766e      	strb	r6, [r5, #25]
    7b6e:	6268      	str	r0, [r5, #36]	; 0x24
    7b70:	6329      	str	r1, [r5, #48]	; 0x30
    7b72:	636a      	str	r2, [r5, #52]	; 0x34
    7b74:	63ab      	str	r3, [r5, #56]	; 0x38
    7b76:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7b7a:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    7b7e:	f8cd a000 	str.w	sl, [sp]
    7b82:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7b86:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7b8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7b8c:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7b90:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7b94:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7b98:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7b9a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7b9e:	642a      	str	r2, [r5, #64]	; 0x40
    7ba0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7ba2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7ba4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7ba8:	652e      	str	r6, [r5, #80]	; 0x50
    7baa:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7bae:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7bb0:	64a9      	str	r1, [r5, #72]	; 0x48
    7bb2:	e023      	b.n	7bfc <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    7bb4:	0002339c 	.word	0x0002339c
    7bb8:	000233fc 	.word	0x000233fc
    7bbc:	0002338c 	.word	0x0002338c
    7bc0:	2000189c 	.word	0x2000189c
    7bc4:	000232bc 	.word	0x000232bc
    7bc8:	000233dc 	.word	0x000233dc
    7bcc:	0002337c 	.word	0x0002337c
    7bd0:	000232ac 	.word	0x000232ac
    7bd4:	000233cc 	.word	0x000233cc
    7bd8:	0002359c 	.word	0x0002359c
    7bdc:	2000148c 	.word	0x2000148c
    7be0:	0002355c 	.word	0x0002355c
    7be4:	0002342c 	.word	0x0002342c
    7be8:	200011f8 	.word	0x200011f8
    7bec:	0002356c 	.word	0x0002356c
    7bf0:	0002350c 	.word	0x0002350c
    7bf4:	20001264 	.word	0x20001264
    7bf8:	20001758 	.word	0x20001758
    7bfc:	64ea      	str	r2, [r5, #76]	; 0x4c
    7bfe:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7c02:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7c06:	656e      	str	r6, [r5, #84]	; 0x54
    7c08:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7c0c:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7c10:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7c14:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7c18:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7c1c:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7c20:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7c24:	4620      	mov	r0, r4
    7c26:	4db9      	ldr	r5, [pc, #740]	; (7f0c <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    7c28:	4bb9      	ldr	r3, [pc, #740]	; (7f10 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    7c2a:	4aba      	ldr	r2, [pc, #744]	; (7f14 <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    7c2c:	2120      	movs	r1, #32
    7c2e:	f006 fb5d 	bl	e2ec <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7c32:	f894 e006 	ldrb.w	lr, [r4, #6]
    7c36:	68a2      	ldr	r2, [r4, #8]
    7c38:	68e3      	ldr	r3, [r4, #12]
    7c3a:	88a6      	ldrh	r6, [r4, #4]
    7c3c:	6920      	ldr	r0, [r4, #16]
    7c3e:	6961      	ldr	r1, [r4, #20]
    7c40:	f885 e006 	strb.w	lr, [r5, #6]
    7c44:	60aa      	str	r2, [r5, #8]
    7c46:	f894 e018 	ldrb.w	lr, [r4, #24]
    7c4a:	69e2      	ldr	r2, [r4, #28]
    7c4c:	60eb      	str	r3, [r5, #12]
    7c4e:	6a23      	ldr	r3, [r4, #32]
    7c50:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7c54:	80ae      	strh	r6, [r5, #4]
    7c56:	6128      	str	r0, [r5, #16]
    7c58:	7e66      	ldrb	r6, [r4, #25]
    7c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7c5c:	6169      	str	r1, [r5, #20]
    7c5e:	f885 e018 	strb.w	lr, [r5, #24]
    7c62:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7c64:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7c68:	61ea      	str	r2, [r5, #28]
    7c6a:	622b      	str	r3, [r5, #32]
    7c6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7c6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7c70:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7c74:	766e      	strb	r6, [r5, #25]
    7c76:	6268      	str	r0, [r5, #36]	; 0x24
    7c78:	6329      	str	r1, [r5, #48]	; 0x30
    7c7a:	636a      	str	r2, [r5, #52]	; 0x34
    7c7c:	63ab      	str	r3, [r5, #56]	; 0x38
    7c7e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7c82:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    7c86:	f8cd a000 	str.w	sl, [sp]
    7c8a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7c8e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7c92:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7c94:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7c98:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7c9c:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7ca0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7ca2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7ca6:	642a      	str	r2, [r5, #64]	; 0x40
    7ca8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7caa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7cac:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7cb0:	652e      	str	r6, [r5, #80]	; 0x50
    7cb2:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7cb6:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7cb8:	64a9      	str	r1, [r5, #72]	; 0x48
    7cba:	64ea      	str	r2, [r5, #76]	; 0x4c
    7cbc:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7cc0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7cc4:	656e      	str	r6, [r5, #84]	; 0x54
    7cc6:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7cca:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7cce:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7cd2:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7cd6:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7cda:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7cde:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7ce2:	4620      	mov	r0, r4
    7ce4:	4d8c      	ldr	r5, [pc, #560]	; (7f18 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    7ce6:	4b8d      	ldr	r3, [pc, #564]	; (7f1c <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    7ce8:	4a8d      	ldr	r2, [pc, #564]	; (7f20 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    7cea:	2110      	movs	r1, #16
    7cec:	f006 fafe 	bl	e2ec <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7cf0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7cf4:	68a2      	ldr	r2, [r4, #8]
    7cf6:	68e3      	ldr	r3, [r4, #12]
    7cf8:	79a6      	ldrb	r6, [r4, #6]
    7cfa:	6920      	ldr	r0, [r4, #16]
    7cfc:	6961      	ldr	r1, [r4, #20]
    7cfe:	f8a5 e004 	strh.w	lr, [r5, #4]
    7d02:	60aa      	str	r2, [r5, #8]
    7d04:	f894 e018 	ldrb.w	lr, [r4, #24]
    7d08:	69e2      	ldr	r2, [r4, #28]
    7d0a:	60eb      	str	r3, [r5, #12]
    7d0c:	6a23      	ldr	r3, [r4, #32]
    7d0e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7d12:	71ae      	strb	r6, [r5, #6]
    7d14:	6128      	str	r0, [r5, #16]
    7d16:	7e66      	ldrb	r6, [r4, #25]
    7d18:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d1a:	6169      	str	r1, [r5, #20]
    7d1c:	f885 e018 	strb.w	lr, [r5, #24]
    7d20:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7d22:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7d26:	61ea      	str	r2, [r5, #28]
    7d28:	622b      	str	r3, [r5, #32]
    7d2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7d2e:	766e      	strb	r6, [r5, #25]
    7d30:	6268      	str	r0, [r5, #36]	; 0x24
    7d32:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7d36:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7d3a:	636a      	str	r2, [r5, #52]	; 0x34
    7d3c:	63ab      	str	r3, [r5, #56]	; 0x38
    7d3e:	6329      	str	r1, [r5, #48]	; 0x30
    7d40:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7d44:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    7d48:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    7d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7d4e:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    7d52:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    7d56:	9703      	str	r7, [sp, #12]
    7d58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7d5a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    7d5e:	642b      	str	r3, [r5, #64]	; 0x40
    7d60:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7d62:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7d64:	64a9      	str	r1, [r5, #72]	; 0x48
    7d66:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    7d6a:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    7d6e:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    7d72:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    7d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7d78:	64ea      	str	r2, [r5, #76]	; 0x4c
    7d7a:	652b      	str	r3, [r5, #80]	; 0x50
    7d7c:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    7d80:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    7d84:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    7d88:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7d8c:	6568      	str	r0, [r5, #84]	; 0x54
    7d8e:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    7d92:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    7d96:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    7d9a:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7d9e:	f04f 0e68 	mov.w	lr, #104	; 0x68
    7da2:	4d60      	ldr	r5, [pc, #384]	; (7f24 <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    7da4:	f8df c19c 	ldr.w	ip, [pc, #412]	; 7f44 <_ZN9ClearCore10SysManagerC1Ev+0x694>
    7da8:	4e5f      	ldr	r6, [pc, #380]	; (7f28 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    7daa:	4b60      	ldr	r3, [pc, #384]	; (7f2c <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    7dac:	4a60      	ldr	r2, [pc, #384]	; (7f30 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    7dae:	f8cd e008 	str.w	lr, [sp, #8]
    7db2:	4620      	mov	r0, r4
    7db4:	2108      	movs	r1, #8
    7db6:	9601      	str	r6, [sp, #4]
    7db8:	f8cd c000 	str.w	ip, [sp]
    7dbc:	f006 fdf0 	bl	e9a0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7dc0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7dc4:	68a2      	ldr	r2, [r4, #8]
    7dc6:	68e3      	ldr	r3, [r4, #12]
    7dc8:	79a6      	ldrb	r6, [r4, #6]
    7dca:	6920      	ldr	r0, [r4, #16]
    7dcc:	6961      	ldr	r1, [r4, #20]
    7dce:	f8a5 e004 	strh.w	lr, [r5, #4]
    7dd2:	60aa      	str	r2, [r5, #8]
    7dd4:	f894 e018 	ldrb.w	lr, [r4, #24]
    7dd8:	69e2      	ldr	r2, [r4, #28]
    7dda:	60eb      	str	r3, [r5, #12]
    7ddc:	6a23      	ldr	r3, [r4, #32]
    7dde:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7de2:	71ae      	strb	r6, [r5, #6]
    7de4:	6128      	str	r0, [r5, #16]
    7de6:	7e66      	ldrb	r6, [r4, #25]
    7de8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7dea:	6169      	str	r1, [r5, #20]
    7dec:	f885 e018 	strb.w	lr, [r5, #24]
    7df0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7df2:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7df6:	61ea      	str	r2, [r5, #28]
    7df8:	622b      	str	r3, [r5, #32]
    7dfa:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7dfe:	766e      	strb	r6, [r5, #25]
    7e00:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7e04:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7e08:	6329      	str	r1, [r5, #48]	; 0x30
    7e0a:	636a      	str	r2, [r5, #52]	; 0x34
    7e0c:	63ab      	str	r3, [r5, #56]	; 0x38
    7e0e:	6268      	str	r0, [r5, #36]	; 0x24
    7e10:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7e14:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7e18:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7e1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7e1e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    7e22:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    7e26:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    7e28:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7e2a:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7e2e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7e32:	642b      	str	r3, [r5, #64]	; 0x40
    7e34:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7e36:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7e38:	64a8      	str	r0, [r5, #72]	; 0x48
    7e3a:	652a      	str	r2, [r5, #80]	; 0x50
    7e3c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    7e40:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    7e44:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7e48:	64e9      	str	r1, [r5, #76]	; 0x4c
    7e4a:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    7e4e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7e52:	656b      	str	r3, [r5, #84]	; 0x54
    7e54:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    7e58:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    7e5c:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    7e60:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    7e64:	f04f 0c65 	mov.w	ip, #101	; 0x65
    7e68:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    7e6c:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    7e70:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7e74:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    7e78:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    7e7c:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 7f48 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    7e80:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    7e84:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7e88:	9703      	str	r7, [sp, #12]
    7e8a:	f8cd c008 	str.w	ip, [sp, #8]
    7e8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7e90:	4b28      	ldr	r3, [pc, #160]	; (7f34 <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    7e92:	f8cd e004 	str.w	lr, [sp, #4]
    7e96:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    7e98:	9300      	str	r3, [sp, #0]
    7e9a:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7e9e:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7ea2:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7ea4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7ea6:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7eaa:	6669      	str	r1, [r5, #100]	; 0x64
    7eac:	66aa      	str	r2, [r5, #104]	; 0x68
    7eae:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7eb0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    7eb2:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7eb6:	676e      	str	r6, [r5, #116]	; 0x74
    7eb8:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7ebc:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7ec0:	66eb      	str	r3, [r5, #108]	; 0x6c
    7ec2:	67a9      	str	r1, [r5, #120]	; 0x78
    7ec4:	67ea      	str	r2, [r5, #124]	; 0x7c
    7ec6:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7eca:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7ece:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7ed2:	4620      	mov	r0, r4
    7ed4:	4b18      	ldr	r3, [pc, #96]	; (7f38 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    7ed6:	4a19      	ldr	r2, [pc, #100]	; (7f3c <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    7ed8:	4d19      	ldr	r5, [pc, #100]	; (7f40 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    7eda:	2104      	movs	r1, #4
    7edc:	f006 fd60 	bl	e9a0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7ee0:	f104 000c 	add.w	r0, r4, #12
    7ee4:	c807      	ldmia	r0, {r0, r1, r2}
    7ee6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7eea:	68a3      	ldr	r3, [r4, #8]
    7eec:	79a6      	ldrb	r6, [r4, #6]
    7eee:	f8a5 e004 	strh.w	lr, [r5, #4]
    7ef2:	60ab      	str	r3, [r5, #8]
    7ef4:	f894 e018 	ldrb.w	lr, [r4, #24]
    7ef8:	69e3      	ldr	r3, [r4, #28]
    7efa:	60e8      	str	r0, [r5, #12]
    7efc:	6a20      	ldr	r0, [r4, #32]
    7efe:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7f02:	71ae      	strb	r6, [r5, #6]
    7f04:	6129      	str	r1, [r5, #16]
    7f06:	7e66      	ldrb	r6, [r4, #25]
    7f08:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7f0a:	e01f      	b.n	7f4c <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    7f0c:	200012c4 	.word	0x200012c4
    7f10:	0002357c 	.word	0x0002357c
    7f14:	0002351c 	.word	0x0002351c
    7f18:	20001324 	.word	0x20001324
    7f1c:	0002358c 	.word	0x0002358c
    7f20:	0002352c 	.word	0x0002352c
    7f24:	20001384 	.word	0x20001384
    7f28:	000234ac 	.word	0x000234ac
    7f2c:	0002344c 	.word	0x0002344c
    7f30:	0002353c 	.word	0x0002353c
    7f34:	0002347c 	.word	0x0002347c
    7f38:	0002345c 	.word	0x0002345c
    7f3c:	0002354c 	.word	0x0002354c
    7f40:	20001408 	.word	0x20001408
    7f44:	0002346c 	.word	0x0002346c
    7f48:	000234bc 	.word	0x000234bc
    7f4c:	616a      	str	r2, [r5, #20]
    7f4e:	f885 e018 	strb.w	lr, [r5, #24]
    7f52:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7f54:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7f58:	61eb      	str	r3, [r5, #28]
    7f5a:	6228      	str	r0, [r5, #32]
    7f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7f5e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7f60:	766e      	strb	r6, [r5, #25]
    7f62:	6269      	str	r1, [r5, #36]	; 0x24
    7f64:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7f68:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7f6c:	632a      	str	r2, [r5, #48]	; 0x30
    7f6e:	63a8      	str	r0, [r5, #56]	; 0x38
    7f70:	636b      	str	r3, [r5, #52]	; 0x34
    7f72:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7f76:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7f7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7f7c:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7f80:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7f84:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7f86:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7f8a:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7f8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7f90:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f92:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7f96:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7f9a:	6429      	str	r1, [r5, #64]	; 0x40
    7f9c:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7fa0:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7fa2:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7fa6:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7faa:	64aa      	str	r2, [r5, #72]	; 0x48
    7fac:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    7fb0:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    7fb4:	64eb      	str	r3, [r5, #76]	; 0x4c
    7fb6:	6528      	str	r0, [r5, #80]	; 0x50
    7fb8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7fbc:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7fc0:	6569      	str	r1, [r5, #84]	; 0x54
    7fc2:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7fc6:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7fca:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7fce:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7fd2:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    7fd6:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    7fda:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7fde:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7fe2:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7fe4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7fe6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    7fe8:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7fec:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7ff0:	6669      	str	r1, [r5, #100]	; 0x64
    7ff2:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7ff4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7ff6:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7ffa:	66ab      	str	r3, [r5, #104]	; 0x68
    7ffc:	66e8      	str	r0, [r5, #108]	; 0x6c
    7ffe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    8000:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    8004:	676e      	str	r6, [r5, #116]	; 0x74
    8006:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    800a:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    800e:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    8010:	4abe      	ldr	r2, [pc, #760]	; (830c <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    8012:	67eb      	str	r3, [r5, #124]	; 0x7c
    8014:	4620      	mov	r0, r4
    8016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    801a:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    801e:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    8022:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    8026:	f006 fc2f 	bl	e888 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    802a:	f104 000c 	add.w	r0, r4, #12
    802e:	c807      	ldmia	r0, {r0, r1, r2}
    8030:	4db7      	ldr	r5, [pc, #732]	; (8310 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    8032:	68a3      	ldr	r3, [r4, #8]
    8034:	f894 c018 	ldrb.w	ip, [r4, #24]
    8038:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    803c:	79a6      	ldrb	r6, [r4, #6]
    803e:	60ab      	str	r3, [r5, #8]
    8040:	f885 c018 	strb.w	ip, [r5, #24]
    8044:	69e3      	ldr	r3, [r4, #28]
    8046:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    804a:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    804e:	f8a5 e004 	strh.w	lr, [r5, #4]
    8052:	71ae      	strb	r6, [r5, #6]
    8054:	f894 e019 	ldrb.w	lr, [r4, #25]
    8058:	6a26      	ldr	r6, [r4, #32]
    805a:	60e8      	str	r0, [r5, #12]
    805c:	6129      	str	r1, [r5, #16]
    805e:	616a      	str	r2, [r5, #20]
    8060:	61eb      	str	r3, [r5, #28]
    8062:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    8066:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    8068:	4aaa      	ldr	r2, [pc, #680]	; (8314 <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    806a:	f885 e019 	strb.w	lr, [r5, #25]
    806e:	4620      	mov	r0, r4
    8070:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8074:	622e      	str	r6, [r5, #32]
    8076:	626b      	str	r3, [r5, #36]	; 0x24
    8078:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    807c:	f006 fc04 	bl	e888 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8080:	f104 000c 	add.w	r0, r4, #12
    8084:	c807      	ldmia	r0, {r0, r1, r2}
    8086:	4da4      	ldr	r5, [pc, #656]	; (8318 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    8088:	68a3      	ldr	r3, [r4, #8]
    808a:	f894 c018 	ldrb.w	ip, [r4, #24]
    808e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8092:	79a6      	ldrb	r6, [r4, #6]
    8094:	60ab      	str	r3, [r5, #8]
    8096:	f885 c018 	strb.w	ip, [r5, #24]
    809a:	69e3      	ldr	r3, [r4, #28]
    809c:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    80a0:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    80a4:	f8a5 e004 	strh.w	lr, [r5, #4]
    80a8:	71ae      	strb	r6, [r5, #6]
    80aa:	f894 e019 	ldrb.w	lr, [r4, #25]
    80ae:	6a26      	ldr	r6, [r4, #32]
    80b0:	60e8      	str	r0, [r5, #12]
    80b2:	6129      	str	r1, [r5, #16]
    80b4:	616a      	str	r2, [r5, #20]
    80b6:	61eb      	str	r3, [r5, #28]
    80b8:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    80bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    80be:	4a97      	ldr	r2, [pc, #604]	; (831c <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    80c0:	f885 e019 	strb.w	lr, [r5, #25]
    80c4:	4620      	mov	r0, r4
    80c6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    80ca:	622e      	str	r6, [r5, #32]
    80cc:	626b      	str	r3, [r5, #36]	; 0x24
    80ce:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    80d2:	f006 fbd9 	bl	e888 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    80d6:	4d92      	ldr	r5, [pc, #584]	; (8320 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    80d8:	88a6      	ldrh	r6, [r4, #4]
    80da:	80ae      	strh	r6, [r5, #4]
    80dc:	f104 000c 	add.w	r0, r4, #12
    80e0:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    80e2:	2605      	movs	r6, #5
    80e4:	f894 e006 	ldrb.w	lr, [r4, #6]
    80e8:	68a3      	ldr	r3, [r4, #8]
    80ea:	9600      	str	r6, [sp, #0]
    80ec:	7e26      	ldrb	r6, [r4, #24]
    80ee:	f894 c019 	ldrb.w	ip, [r4, #25]
    80f2:	f885 e006 	strb.w	lr, [r5, #6]
    80f6:	60ab      	str	r3, [r5, #8]
    80f8:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    80fc:	69e3      	ldr	r3, [r4, #28]
    80fe:	6129      	str	r1, [r5, #16]
    8100:	616a      	str	r2, [r5, #20]
    8102:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8104:	6a22      	ldr	r2, [r4, #32]
    8106:	762e      	strb	r6, [r5, #24]
    8108:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    810c:	60e8      	str	r0, [r5, #12]
    810e:	f885 c019 	strb.w	ip, [r5, #25]
    8112:	61eb      	str	r3, [r5, #28]
    8114:	622a      	str	r2, [r5, #32]
    8116:	6269      	str	r1, [r5, #36]	; 0x24
    8118:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    811c:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    8120:	4620      	mov	r0, r4
    8122:	4d80      	ldr	r5, [pc, #512]	; (8324 <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    8124:	4b80      	ldr	r3, [pc, #512]	; (8328 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    8126:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    812a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    812e:	f005 fe91 	bl	de54 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8132:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8136:	68a2      	ldr	r2, [r4, #8]
    8138:	68e3      	ldr	r3, [r4, #12]
    813a:	79a6      	ldrb	r6, [r4, #6]
    813c:	6920      	ldr	r0, [r4, #16]
    813e:	6961      	ldr	r1, [r4, #20]
    8140:	f8a5 e004 	strh.w	lr, [r5, #4]
    8144:	60aa      	str	r2, [r5, #8]
    8146:	f894 e018 	ldrb.w	lr, [r4, #24]
    814a:	69e2      	ldr	r2, [r4, #28]
    814c:	60eb      	str	r3, [r5, #12]
    814e:	6a23      	ldr	r3, [r4, #32]
    8150:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8154:	71ae      	strb	r6, [r5, #6]
    8156:	6128      	str	r0, [r5, #16]
    8158:	7e66      	ldrb	r6, [r4, #25]
    815a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    815c:	6169      	str	r1, [r5, #20]
    815e:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    8162:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8164:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8168:	61ea      	str	r2, [r5, #28]
    816a:	622b      	str	r3, [r5, #32]
    816c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    8170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8172:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8176:	766e      	strb	r6, [r5, #25]
    8178:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    817a:	2604      	movs	r6, #4
    817c:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8180:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    8184:	63ab      	str	r3, [r5, #56]	; 0x38
    8186:	6329      	str	r1, [r5, #48]	; 0x30
    8188:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    818a:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    818e:	4b67      	ldr	r3, [pc, #412]	; (832c <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    8190:	9600      	str	r6, [sp, #0]
    8192:	4620      	mov	r0, r4
    8194:	63e9      	str	r1, [r5, #60]	; 0x3c
    8196:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    819a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    819e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    81a2:	f005 fe57 	bl	de54 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    81a6:	f104 0008 	add.w	r0, r4, #8
    81aa:	c80d      	ldmia	r0, {r0, r2, r3}
    81ac:	4d60      	ldr	r5, [pc, #384]	; (8330 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    81ae:	88a1      	ldrh	r1, [r4, #4]
    81b0:	f894 e006 	ldrb.w	lr, [r4, #6]
    81b4:	80a9      	strh	r1, [r5, #4]
    81b6:	f885 e006 	strb.w	lr, [r5, #6]
    81ba:	6961      	ldr	r1, [r4, #20]
    81bc:	f894 e018 	ldrb.w	lr, [r4, #24]
    81c0:	60a8      	str	r0, [r5, #8]
    81c2:	60ea      	str	r2, [r5, #12]
    81c4:	7e60      	ldrb	r0, [r4, #25]
    81c6:	69e2      	ldr	r2, [r4, #28]
    81c8:	612b      	str	r3, [r5, #16]
    81ca:	6a23      	ldr	r3, [r4, #32]
    81cc:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    81d0:	6169      	str	r1, [r5, #20]
    81d2:	f885 e018 	strb.w	lr, [r5, #24]
    81d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    81d8:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    81dc:	7668      	strb	r0, [r5, #25]
    81de:	61ea      	str	r2, [r5, #28]
    81e0:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    81e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    81e6:	622b      	str	r3, [r5, #32]
    81e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    81ea:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    81ee:	6269      	str	r1, [r5, #36]	; 0x24
    81f0:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    81f4:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    81f8:	63ab      	str	r3, [r5, #56]	; 0x38
    81fa:	632a      	str	r2, [r5, #48]	; 0x30
    81fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    81fe:	f8cd 8000 	str.w	r8, [sp]
    8202:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    8206:	63ea      	str	r2, [r5, #60]	; 0x3c
    8208:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    820c:	4620      	mov	r0, r4
    820e:	4d49      	ldr	r5, [pc, #292]	; (8334 <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    8210:	4b49      	ldr	r3, [pc, #292]	; (8338 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    8212:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    8216:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    821a:	f005 fe1b 	bl	de54 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    821e:	f894 c006 	ldrb.w	ip, [r4, #6]
    8222:	68a2      	ldr	r2, [r4, #8]
    8224:	68e3      	ldr	r3, [r4, #12]
    8226:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    822a:	6920      	ldr	r0, [r4, #16]
    822c:	6961      	ldr	r1, [r4, #20]
    822e:	f885 c006 	strb.w	ip, [r5, #6]
    8232:	60aa      	str	r2, [r5, #8]
    8234:	f894 c018 	ldrb.w	ip, [r4, #24]
    8238:	69e2      	ldr	r2, [r4, #28]
    823a:	60eb      	str	r3, [r5, #12]
    823c:	6a23      	ldr	r3, [r4, #32]
    823e:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    8242:	f8a5 e004 	strh.w	lr, [r5, #4]
    8246:	6128      	str	r0, [r5, #16]
    8248:	f894 e019 	ldrb.w	lr, [r4, #25]
    824c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    824e:	6169      	str	r1, [r5, #20]
    8250:	f885 c018 	strb.w	ip, [r5, #24]
    8254:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8256:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    825a:	61ea      	str	r2, [r5, #28]
    825c:	622b      	str	r3, [r5, #32]
    825e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    8262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8264:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    8268:	f885 e019 	strb.w	lr, [r5, #25]
    826c:	6268      	str	r0, [r5, #36]	; 0x24
    826e:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    8272:	6329      	str	r1, [r5, #48]	; 0x30
    8274:	63ab      	str	r3, [r5, #56]	; 0x38
    8276:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    827a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    827c:	f8cd a000 	str.w	sl, [sp]
    8280:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    8284:	63ea      	str	r2, [r5, #60]	; 0x3c
    8286:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    828a:	4620      	mov	r0, r4
    828c:	4b2b      	ldr	r3, [pc, #172]	; (833c <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8292:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    8296:	f005 fddd 	bl	de54 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    829a:	f104 0008 	add.w	r0, r4, #8
    829e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    82a0:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8340 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    82a4:	f894 c006 	ldrb.w	ip, [r4, #6]
    82a8:	88a5      	ldrh	r5, [r4, #4]
    82aa:	f88e c006 	strb.w	ip, [lr, #6]
    82ae:	f894 c019 	ldrb.w	ip, [r4, #25]
    82b2:	f894 8018 	ldrb.w	r8, [r4, #24]
    82b6:	f8ae 5004 	strh.w	r5, [lr, #4]
    82ba:	f8ce 0008 	str.w	r0, [lr, #8]
    82be:	69e5      	ldr	r5, [r4, #28]
    82c0:	6a20      	ldr	r0, [r4, #32]
    82c2:	f8ce 100c 	str.w	r1, [lr, #12]
    82c6:	f8ce 2010 	str.w	r2, [lr, #16]
    82ca:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    82ce:	f8ce 3014 	str.w	r3, [lr, #20]
    82d2:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    82d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    82d8:	f88e c019 	strb.w	ip, [lr, #25]
    82dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    82de:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    82e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    82e4:	f88e 8018 	strb.w	r8, [lr, #24]
    82e8:	f8ce 501c 	str.w	r5, [lr, #28]
    82ec:	f8ce 0020 	str.w	r0, [lr, #32]
    82f0:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    82f4:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    82f8:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    82fc:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    8300:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    8304:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    8308:	e01c      	b.n	8344 <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    830a:	bf00      	nop
    830c:	0002330c 	.word	0x0002330c
    8310:	20001168 	.word	0x20001168
    8314:	0002331c 	.word	0x0002331c
    8318:	20001198 	.word	0x20001198
    831c:	0002332c 	.word	0x0002332c
    8320:	200011c8 	.word	0x200011c8
    8324:	20000b34 	.word	0x20000b34
    8328:	0002333c 	.word	0x0002333c
    832c:	0002334c 	.word	0x0002334c
    8330:	2000109c 	.word	0x2000109c
    8334:	200010e0 	.word	0x200010e0
    8338:	0002335c 	.word	0x0002335c
    833c:	0002336c 	.word	0x0002336c
    8340:	20001124 	.word	0x20001124
    8344:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    8346:	9702      	str	r7, [sp, #8]
    8348:	9601      	str	r6, [sp, #4]
    834a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    834e:	4dcc      	ldr	r5, [pc, #816]	; (8680 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    8350:	9500      	str	r5, [sp, #0]
    8352:	4620      	mov	r0, r4
    8354:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    8358:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    835c:	4bc9      	ldr	r3, [pc, #804]	; (8684 <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    835e:	4aca      	ldr	r2, [pc, #808]	; (8688 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    8360:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8364:	f7fc fdb4 	bl	4ed0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8368:	4bc8      	ldr	r3, [pc, #800]	; (868c <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    836a:	79a7      	ldrb	r7, [r4, #6]
    836c:	68a6      	ldr	r6, [r4, #8]
    836e:	68e5      	ldr	r5, [r4, #12]
    8370:	6920      	ldr	r0, [r4, #16]
    8372:	6961      	ldr	r1, [r4, #20]
    8374:	f894 8018 	ldrb.w	r8, [r4, #24]
    8378:	69e2      	ldr	r2, [r4, #28]
    837a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    837e:	f894 c019 	ldrb.w	ip, [r4, #25]
    8382:	719f      	strb	r7, [r3, #6]
    8384:	609e      	str	r6, [r3, #8]
    8386:	6a67      	ldr	r7, [r4, #36]	; 0x24
    8388:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    838c:	60dd      	str	r5, [r3, #12]
    838e:	6118      	str	r0, [r3, #16]
    8390:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    8394:	6b60      	ldr	r0, [r4, #52]	; 0x34
    8396:	6159      	str	r1, [r3, #20]
    8398:	f883 8018 	strb.w	r8, [r3, #24]
    839c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    839e:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    83a2:	61da      	str	r2, [r3, #28]
    83a4:	6a22      	ldr	r2, [r4, #32]
    83a6:	f8a3 e004 	strh.w	lr, [r3, #4]
    83aa:	f883 c019 	strb.w	ip, [r3, #25]
    83ae:	621a      	str	r2, [r3, #32]
    83b0:	625f      	str	r7, [r3, #36]	; 0x24
    83b2:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    83b6:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    83ba:	6358      	str	r0, [r3, #52]	; 0x34
    83bc:	6399      	str	r1, [r3, #56]	; 0x38
    83be:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    83c2:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    83c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    83c8:	649a      	str	r2, [r3, #72]	; 0x48
    83ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    83cc:	9207      	str	r2, [sp, #28]
    83ce:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    83d2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    83d4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    83d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    83da:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    83de:	64da      	str	r2, [r3, #76]	; 0x4c
    83e0:	9a07      	ldr	r2, [sp, #28]
    83e2:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    83e6:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    83ea:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    83ee:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    83f2:	6459      	str	r1, [r3, #68]	; 0x44
    83f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    83f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    83f8:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    83fc:	65da      	str	r2, [r3, #92]	; 0x5c
    83fe:	6f27      	ldr	r7, [r4, #112]	; 0x70
    8400:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8402:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    8406:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    840a:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    840e:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    8412:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8414:	6558      	str	r0, [r3, #84]	; 0x54
    8416:	6599      	str	r1, [r3, #88]	; 0x58
    8418:	661a      	str	r2, [r3, #96]	; 0x60
    841a:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    841e:	671f      	str	r7, [r3, #112]	; 0x70
    8420:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    8424:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    8428:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    842c:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    8430:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    8434:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    8438:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    843c:	675e      	str	r6, [r3, #116]	; 0x74
    843e:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    8442:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    8446:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    844a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    844e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8452:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    8456:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    845a:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    845e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    8462:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    8466:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    846a:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    846e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    8472:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    8476:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    847a:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    847e:	4619      	mov	r1, r3
    8480:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    8484:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    8488:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    848c:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    848e:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    8492:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    8496:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    849a:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    849e:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    84a2:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    84a4:	983a      	ldr	r0, [sp, #232]	; 0xe8
    84a6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    84a8:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    84ac:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    84b0:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    84b4:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    84b8:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    84bc:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    84c0:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    84c4:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    84c8:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    84cc:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    84d0:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    84d4:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    84d8:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    84dc:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    84e0:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    84e4:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    84e8:	9b42      	ldr	r3, [sp, #264]	; 0x108
    84ea:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    84ee:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    84f2:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    84f6:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    84fa:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    84fe:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    8502:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    8506:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    850a:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    850e:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    8512:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    8516:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    851a:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    851c:	9d44      	ldr	r5, [sp, #272]	; 0x110
    851e:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    8522:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    8526:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    852a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    852c:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8530:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    8534:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    8538:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    853c:	9e49      	ldr	r6, [sp, #292]	; 0x124
    853e:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    8540:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    8544:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    8548:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    854a:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    854e:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    8552:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    8556:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    855a:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    855e:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    8562:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8564:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    8568:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    856c:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    8570:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    8574:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    8578:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    857c:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    8580:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    8584:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    8588:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    858c:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    858e:	9b50      	ldr	r3, [sp, #320]	; 0x140
    8590:	9d51      	ldr	r5, [sp, #324]	; 0x144
    8592:	9852      	ldr	r0, [sp, #328]	; 0x148
    8594:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    8598:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    859c:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    85a0:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    85a4:	9b54      	ldr	r3, [sp, #336]	; 0x150
    85a6:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    85aa:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    85ae:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    85b2:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    85b6:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    85ba:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    85be:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    85c2:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    85c6:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    85ca:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    85ce:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    85d2:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    85d6:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    85da:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    85de:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    85e2:	4a2b      	ldr	r2, [pc, #172]	; (8690 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    85e4:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    85e8:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    85ec:	2401      	movs	r4, #1
    85ee:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    85f2:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    85f6:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    85fa:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    85fe:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    8602:	2605      	movs	r6, #5
    8604:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    8608:	9d58      	ldr	r5, [sp, #352]	; 0x160
    860a:	4f22      	ldr	r7, [pc, #136]	; (8694 <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    860c:	9402      	str	r4, [sp, #8]
    860e:	e88d 0044 	stmia.w	sp, {r2, r6}
    8612:	a808      	add	r0, sp, #32
    8614:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    8618:	4b1f      	ldr	r3, [pc, #124]	; (8698 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    861a:	4a20      	ldr	r2, [pc, #128]	; (869c <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    861c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8620:	f7fc fc56 	bl	4ed0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8624:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    8628:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    862c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    862e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8630:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8632:	980d      	ldr	r0, [sp, #52]	; 0x34
    8634:	71b9      	strb	r1, [r7, #6]
    8636:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8638:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    863c:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8640:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    8644:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    8648:	80ba      	strh	r2, [r7, #4]
    864a:	60bb      	str	r3, [r7, #8]
    864c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    864e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8650:	60fe      	str	r6, [r7, #12]
    8652:	613d      	str	r5, [r7, #16]
    8654:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    8658:	9d15      	ldr	r5, [sp, #84]	; 0x54
    865a:	6178      	str	r0, [r7, #20]
    865c:	61f9      	str	r1, [r7, #28]
    865e:	9816      	ldr	r0, [sp, #88]	; 0x58
    8660:	f887 8018 	strb.w	r8, [r7, #24]
    8664:	a919      	add	r1, sp, #100	; 0x64
    8666:	623a      	str	r2, [r7, #32]
    8668:	627b      	str	r3, [r7, #36]	; 0x24
    866a:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    866e:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    8672:	637d      	str	r5, [r7, #52]	; 0x34
    8674:	63b8      	str	r0, [r7, #56]	; 0x38
    8676:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    867a:	f887 c019 	strb.w	ip, [r7, #25]
    867e:	e00f      	b.n	86a0 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    8680:	0002343c 	.word	0x0002343c
    8684:	000235ac 	.word	0x000235ac
    8688:	000233ec 	.word	0x000233ec
    868c:	20000b78 	.word	0x20000b78
    8690:	000235dc 	.word	0x000235dc
    8694:	20000cc0 	.word	0x20000cc0
    8698:	000235bc 	.word	0x000235bc
    869c:	000235cc 	.word	0x000235cc
    86a0:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    86a4:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    86a8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    86ac:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    86b0:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    86b4:	c90e      	ldmia	r1, {r1, r2, r3}
    86b6:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    86ba:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    86be:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    86c2:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    86c6:	6479      	str	r1, [r7, #68]	; 0x44
    86c8:	981d      	ldr	r0, [sp, #116]	; 0x74
    86ca:	991e      	ldr	r1, [sp, #120]	; 0x78
    86cc:	64ba      	str	r2, [r7, #72]	; 0x48
    86ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    86d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    86d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    86d4:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    86d8:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    86dc:	9d24      	ldr	r5, [sp, #144]	; 0x90
    86de:	9e25      	ldr	r6, [sp, #148]	; 0x94
    86e0:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    86e4:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    86e8:	6578      	str	r0, [r7, #84]	; 0x54
    86ea:	65b9      	str	r1, [r7, #88]	; 0x58
    86ec:	65fa      	str	r2, [r7, #92]	; 0x5c
    86ee:	663b      	str	r3, [r7, #96]	; 0x60
    86f0:	673d      	str	r5, [r7, #112]	; 0x70
    86f2:	677e      	str	r6, [r7, #116]	; 0x74
    86f4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    86f8:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    86fc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    8700:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8702:	982e      	ldr	r0, [sp, #184]	; 0xb8
    8704:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8708:	4615      	mov	r5, r2
    870a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    870c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    870e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    8712:	461e      	mov	r6, r3
    8714:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8716:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    871c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    8720:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8722:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8724:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8728:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    872c:	9933      	ldr	r1, [sp, #204]	; 0xcc
    872e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8734:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    8738:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    873a:	9836      	ldr	r0, [sp, #216]	; 0xd8
    873c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8740:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    8744:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8746:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    874c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    8750:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    8754:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    8758:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    875c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8760:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    8762:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8764:	993b      	ldr	r1, [sp, #236]	; 0xec
    8766:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    876a:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    876e:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    8772:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    8776:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    877a:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    877e:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    8782:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    8786:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    878a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    878e:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    8792:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8796:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    879a:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    879e:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    87a2:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    87a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    87aa:	9b42      	ldr	r3, [sp, #264]	; 0x108
    87ac:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    87b0:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    87b4:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    87b8:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    87bc:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    87c0:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    87c4:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    87c8:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    87cc:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    87d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    87d4:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    87d8:	9943      	ldr	r1, [sp, #268]	; 0x10c
    87da:	9d44      	ldr	r5, [sp, #272]	; 0x110
    87dc:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    87e0:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    87e4:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    87e8:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    87ec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    87ee:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    87f2:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    87f6:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    87fa:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    87fe:	994b      	ldr	r1, [sp, #300]	; 0x12c
    8800:	9d49      	ldr	r5, [sp, #292]	; 0x124
    8802:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    8806:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    880a:	984a      	ldr	r0, [sp, #296]	; 0x128
    880c:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8810:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    8814:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    8818:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    881c:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8820:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    8824:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8826:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    882a:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    882e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    8832:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    8836:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    883a:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    883e:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8842:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8846:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    884a:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    884c:	9b50      	ldr	r3, [sp, #320]	; 0x140
    884e:	9851      	ldr	r0, [sp, #324]	; 0x144
    8850:	9952      	ldr	r1, [sp, #328]	; 0x148
    8852:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    8856:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    885a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    885e:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8860:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    8864:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    8868:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    886c:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    8870:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    8874:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    8878:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    887c:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    8880:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    8884:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8888:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    888c:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    8890:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    8894:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    8898:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    889c:	4aca      	ldr	r2, [pc, #808]	; (8bc8 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    889e:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    88a2:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    88a6:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    88aa:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    88ae:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    88b2:	2503      	movs	r5, #3
    88b4:	2602      	movs	r6, #2
    88b6:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    88ba:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    88be:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    88c2:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    88c6:	9958      	ldr	r1, [sp, #352]	; 0x160
    88c8:	4bc0      	ldr	r3, [pc, #768]	; (8bcc <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    88ca:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    88ce:	a808      	add	r0, sp, #32
    88d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    88d4:	4abe      	ldr	r2, [pc, #760]	; (8bd0 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    88d6:	4fbf      	ldr	r7, [pc, #764]	; (8bd4 <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    88d8:	f44f 7100 	mov.w	r1, #512	; 0x200
    88dc:	f7fc faf8 	bl	4ed0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    88e0:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    88e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    88e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    88e8:	990d      	ldr	r1, [sp, #52]	; 0x34
    88ea:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    88ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    88f0:	f8a7 c004 	strh.w	ip, [r7, #4]
    88f4:	60ba      	str	r2, [r7, #8]
    88f6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    88fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    88fc:	60fb      	str	r3, [r7, #12]
    88fe:	6179      	str	r1, [r7, #20]
    8900:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8902:	9915      	ldr	r1, [sp, #84]	; 0x54
    8904:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    8908:	f887 e006 	strb.w	lr, [r7, #6]
    890c:	6138      	str	r0, [r7, #16]
    890e:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    8912:	9811      	ldr	r0, [sp, #68]	; 0x44
    8914:	f887 c018 	strb.w	ip, [r7, #24]
    8918:	61fa      	str	r2, [r7, #28]
    891a:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    891e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8920:	623b      	str	r3, [r7, #32]
    8922:	6379      	str	r1, [r7, #52]	; 0x34
    8924:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8928:	f887 e019 	strb.w	lr, [r7, #25]
    892c:	a919      	add	r1, sp, #100	; 0x64
    892e:	6278      	str	r0, [r7, #36]	; 0x24
    8930:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    8934:	63ba      	str	r2, [r7, #56]	; 0x38
    8936:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    893a:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    893e:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    8942:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    8946:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    894a:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    894e:	c90e      	ldmia	r1, {r1, r2, r3}
    8950:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8954:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    8958:	6479      	str	r1, [r7, #68]	; 0x44
    895a:	64ba      	str	r2, [r7, #72]	; 0x48
    895c:	991d      	ldr	r1, [sp, #116]	; 0x74
    895e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8960:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    8964:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    8968:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    896c:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    8970:	64fb      	str	r3, [r7, #76]	; 0x4c
    8972:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    8976:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8978:	9820      	ldr	r0, [sp, #128]	; 0x80
    897a:	6579      	str	r1, [r7, #84]	; 0x54
    897c:	65ba      	str	r2, [r7, #88]	; 0x58
    897e:	9924      	ldr	r1, [sp, #144]	; 0x90
    8980:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8982:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    8986:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    898a:	65fb      	str	r3, [r7, #92]	; 0x5c
    898c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8990:	677a      	str	r2, [r7, #116]	; 0x74
    8992:	6638      	str	r0, [r7, #96]	; 0x60
    8994:	6739      	str	r1, [r7, #112]	; 0x70
    8996:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    899a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    899c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    899e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    89a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    89a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    89a8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    89aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    89ae:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    89b2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    89b4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    89b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    89ba:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    89be:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    89c0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    89c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    89c6:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    89ca:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    89cc:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    89d0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    89d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    89d6:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    89da:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    89dc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    89de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    89e2:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    89e6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    89e8:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    89ec:	a939      	add	r1, sp, #228	; 0xe4
    89ee:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    89f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    89f4:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    89f8:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    89fc:	c90e      	ldmia	r1, {r1, r2, r3}
    89fe:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    8a02:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    8a06:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    8a0a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    8a0e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    8a12:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    8a16:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    8a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    8a1e:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    8a22:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    8a26:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    8a2a:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    8a2e:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    8a32:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8a36:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    8a3a:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    8a3e:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8a42:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8a46:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    8a4a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    8a4e:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8a52:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8a54:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    8a58:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    8a5c:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8a60:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8a64:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8a68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8a6c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8a70:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    8a72:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    8a76:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8a7a:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    8a7e:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    8a82:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    8a86:	9947      	ldr	r1, [sp, #284]	; 0x11c
    8a88:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    8a8c:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    8a90:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8a92:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8a96:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    8a9a:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    8a9e:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    8aa2:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    8aa6:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    8aaa:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8aae:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8ab0:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8ab2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    8ab6:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8aba:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    8abe:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    8ac2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8ac6:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    8ac8:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    8acc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8ad0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8ad4:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    8ad8:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    8adc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    8ae0:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    8ae4:	994f      	ldr	r1, [sp, #316]	; 0x13c
    8ae6:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8ae8:	9a50      	ldr	r2, [sp, #320]	; 0x140
    8aea:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    8aee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    8af2:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    8af6:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    8afa:	9852      	ldr	r0, [sp, #328]	; 0x148
    8afc:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    8b00:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    8b04:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    8b08:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8b0a:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    8b0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    8b12:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    8b16:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8b1a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    8b1e:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    8b22:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    8b26:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    8b2a:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8b2e:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    8b32:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    8b36:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    8b3a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    8b3e:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    8b42:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    8b46:	f04f 0800 	mov.w	r8, #0
    8b4a:	f8df e098 	ldr.w	lr, [pc, #152]	; 8be4 <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    8b4e:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8b52:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    8b56:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    8b5a:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8b5e:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    8b62:	9958      	ldr	r1, [sp, #352]	; 0x160
    8b64:	4b1c      	ldr	r3, [pc, #112]	; (8bd8 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    8b66:	9502      	str	r5, [sp, #8]
    8b68:	f8cd 8004 	str.w	r8, [sp, #4]
    8b6c:	f8cd e000 	str.w	lr, [sp]
    8b70:	a808      	add	r0, sp, #32
    8b72:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    8b76:	4a19      	ldr	r2, [pc, #100]	; (8bdc <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    8b78:	4f19      	ldr	r7, [pc, #100]	; (8be0 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    8b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
    8b7e:	f7fc f9a7 	bl	4ed0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8b82:	a80a      	add	r0, sp, #40	; 0x28
    8b84:	c807      	ldmia	r0, {r0, r1, r2}
    8b86:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8b8a:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    8b8e:	80bb      	strh	r3, [r7, #4]
    8b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8b92:	f887 e006 	strb.w	lr, [r7, #6]
    8b96:	60b8      	str	r0, [r7, #8]
    8b98:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    8b9c:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    8ba0:	60f9      	str	r1, [r7, #12]
    8ba2:	613a      	str	r2, [r7, #16]
    8ba4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8ba6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8ba8:	617b      	str	r3, [r7, #20]
    8baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8bac:	f887 e018 	strb.w	lr, [r7, #24]
    8bb0:	7678      	strb	r0, [r7, #25]
    8bb2:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8bb6:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    8bba:	61f9      	str	r1, [r7, #28]
    8bbc:	623a      	str	r2, [r7, #32]
    8bbe:	9915      	ldr	r1, [sp, #84]	; 0x54
    8bc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8bc2:	627b      	str	r3, [r7, #36]	; 0x24
    8bc4:	e010      	b.n	8be8 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    8bc6:	bf00      	nop
    8bc8:	000234ec 	.word	0x000234ec
    8bcc:	0002348c 	.word	0x0002348c
    8bd0:	000234cc 	.word	0x000234cc
    8bd4:	20000e08 	.word	0x20000e08
    8bd8:	0002349c 	.word	0x0002349c
    8bdc:	000234dc 	.word	0x000234dc
    8be0:	20000f50 	.word	0x20000f50
    8be4:	000234fc 	.word	0x000234fc
    8be8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8bec:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    8bf0:	6379      	str	r1, [r7, #52]	; 0x34
    8bf2:	63ba      	str	r2, [r7, #56]	; 0x38
    8bf4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8bf8:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8bfc:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    8c00:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    8c04:	9919      	ldr	r1, [sp, #100]	; 0x64
    8c06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8c08:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    8c0c:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8c10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8c12:	6479      	str	r1, [r7, #68]	; 0x44
    8c14:	64ba      	str	r2, [r7, #72]	; 0x48
    8c16:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    8c1a:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    8c1e:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    8c22:	64fb      	str	r3, [r7, #76]	; 0x4c
    8c24:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    8c28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8c2a:	991e      	ldr	r1, [sp, #120]	; 0x78
    8c2c:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    8c30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8c32:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    8c36:	657b      	str	r3, [r7, #84]	; 0x54
    8c38:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    8c3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8c3e:	65b9      	str	r1, [r7, #88]	; 0x58
    8c40:	65fa      	str	r2, [r7, #92]	; 0x5c
    8c42:	9924      	ldr	r1, [sp, #144]	; 0x90
    8c44:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8c46:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    8c4a:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    8c4e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8c52:	6739      	str	r1, [r7, #112]	; 0x70
    8c54:	663b      	str	r3, [r7, #96]	; 0x60
    8c56:	677a      	str	r2, [r7, #116]	; 0x74
    8c58:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    8c5c:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8c5e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8c62:	992c      	ldr	r1, [sp, #176]	; 0xb0
    8c64:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    8c68:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8c6a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    8c6e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    8c70:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    8c74:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8c76:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8c7a:	9930      	ldr	r1, [sp, #192]	; 0xc0
    8c7c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    8c80:	9931      	ldr	r1, [sp, #196]	; 0xc4
    8c82:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    8c86:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8c88:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    8c8c:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8c8e:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8c92:	9934      	ldr	r1, [sp, #208]	; 0xd0
    8c94:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    8c98:	9935      	ldr	r1, [sp, #212]	; 0xd4
    8c9a:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    8c9e:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    8ca2:	9936      	ldr	r1, [sp, #216]	; 0xd8
    8ca4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    8ca8:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8caa:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8cae:	9938      	ldr	r1, [sp, #224]	; 0xe0
    8cb0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    8cb4:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8cb8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    8cbc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    8cbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    8cc2:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8cc4:	993b      	ldr	r1, [sp, #236]	; 0xec
    8cc6:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    8cca:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    8cce:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    8cd2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    8cd6:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8cda:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    8cde:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    8ce2:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    8ce6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    8cea:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    8cee:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    8cf2:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    8cf6:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    8cfa:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    8cfe:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8d02:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8d06:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    8d0a:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    8d0e:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8d12:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8d16:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    8d1a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8d1c:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    8d20:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8d24:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8d28:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8d2c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8d30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8d34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    8d36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    8d3a:	9844      	ldr	r0, [sp, #272]	; 0x110
    8d3c:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    8d40:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    8d44:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    8d48:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    8d4c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    8d50:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    8d54:	9847      	ldr	r0, [sp, #284]	; 0x11c
    8d56:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8d5a:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    8d5e:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    8d62:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    8d66:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8d68:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    8d6c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8d6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    8d72:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8d76:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8d78:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8d7c:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    8d80:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8d84:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    8d88:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8d8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8d90:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8d92:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8d96:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8d9a:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    8d9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8da2:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8da6:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    8da8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    8dac:	9850      	ldr	r0, [sp, #320]	; 0x140
    8dae:	9951      	ldr	r1, [sp, #324]	; 0x144
    8db0:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8db2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    8db6:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    8dba:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    8dbe:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    8dc2:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    8dc6:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8dc8:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    8dcc:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    8dd0:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    8dd4:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8dd8:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8ddc:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8de0:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    8de4:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8de8:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    8dec:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8df0:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    8df4:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    8df8:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8dfc:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    8e00:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    8e04:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    8e08:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8e0c:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    8e10:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    8e14:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    8e18:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    8e1c:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    8e1e:	f8df c208 	ldr.w	ip, [pc, #520]	; 9028 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    8e22:	9207      	str	r2, [sp, #28]
    8e24:	f8df e204 	ldr.w	lr, [pc, #516]	; 902c <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    8e28:	9505      	str	r5, [sp, #20]
    8e2a:	4b78      	ldr	r3, [pc, #480]	; (900c <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    8e2c:	9d07      	ldr	r5, [sp, #28]
    8e2e:	4878      	ldr	r0, [pc, #480]	; (9010 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    8e30:	f8cd e010 	str.w	lr, [sp, #16]
    8e34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8e38:	e88d 1004 	stmia.w	sp, {r2, ip}
    8e3c:	9303      	str	r3, [sp, #12]
    8e3e:	9002      	str	r0, [sp, #8]
    8e40:	4641      	mov	r1, r8
    8e42:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    8e46:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 9030 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    8e4a:	4d72      	ldr	r5, [pc, #456]	; (9014 <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    8e4c:	a808      	add	r0, sp, #32
    8e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8e52:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8e56:	f008 fba7 	bl	115a8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8e5a:	990a      	ldr	r1, [sp, #40]	; 0x28
    8e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e5e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8e62:	980c      	ldr	r0, [sp, #48]	; 0x30
    8e64:	f8c8 1008 	str.w	r1, [r8, #8]
    8e68:	f8c8 2004 	str.w	r2, [r8, #4]
    8e6c:	990d      	ldr	r1, [sp, #52]	; 0x34
    8e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8e70:	f888 300c 	strb.w	r3, [r8, #12]
    8e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8e76:	f8c8 0010 	str.w	r0, [r8, #16]
    8e7a:	f8c8 1014 	str.w	r1, [r8, #20]
    8e7e:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e80:	9911      	ldr	r1, [sp, #68]	; 0x44
    8e82:	f8c8 2018 	str.w	r2, [r8, #24]
    8e86:	f8c8 301c 	str.w	r3, [r8, #28]
    8e8a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8e8e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8e92:	f8c8 0020 	str.w	r0, [r8, #32]
    8e96:	2780      	movs	r7, #128	; 0x80
    8e98:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    8e9c:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    8ea0:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    8ea4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    8ea8:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    8eac:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    8eb0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8eb4:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    8eb8:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    8ebc:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    8ec0:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    8ec4:	a914      	add	r1, sp, #80	; 0x50
    8ec6:	463a      	mov	r2, r7
    8ec8:	f108 0030 	add.w	r0, r8, #48	; 0x30
    8ecc:	f015 fc18 	bl	1e700 <memcpy>
    8ed0:	463a      	mov	r2, r7
    8ed2:	a934      	add	r1, sp, #208	; 0xd0
    8ed4:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    8ed8:	f015 fc12 	bl	1e700 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    8edc:	4b4e      	ldr	r3, [pc, #312]	; (9018 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    8ede:	9303      	str	r3, [sp, #12]
    8ee0:	484e      	ldr	r0, [pc, #312]	; (901c <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    8ee2:	4a4f      	ldr	r2, [pc, #316]	; (9020 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    8ee4:	9002      	str	r0, [sp, #8]
    8ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8eea:	9201      	str	r2, [sp, #4]
    8eec:	9300      	str	r3, [sp, #0]
    8eee:	9854      	ldr	r0, [sp, #336]	; 0x150
    8ef0:	9a55      	ldr	r2, [sp, #340]	; 0x154
    8ef2:	9b56      	ldr	r3, [sp, #344]	; 0x158
    8ef4:	9605      	str	r6, [sp, #20]
    8ef6:	4621      	mov	r1, r4
    8ef8:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    8efa:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    8efe:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    8f02:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    8f06:	9858      	ldr	r0, [sp, #352]	; 0x160
    8f08:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    8f0c:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    8f10:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    8f14:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    8f18:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    8f1a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8f1c:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    8f1e:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    8f22:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    8f26:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    8f2a:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    8f2e:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    8f32:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    8f36:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    8f3a:	a808      	add	r0, sp, #32
    8f3c:	4e39      	ldr	r6, [pc, #228]	; (9024 <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    8f3e:	9604      	str	r6, [sp, #16]
    8f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8f44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8f48:	f008 fb2e 	bl	115a8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8f4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f50:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    8f54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8f56:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f5a:	60ac      	str	r4, [r5, #8]
    8f5c:	6068      	str	r0, [r5, #4]
    8f5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8f60:	980d      	ldr	r0, [sp, #52]	; 0x34
    8f62:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    8f66:	f885 e00c 	strb.w	lr, [r5, #12]
    8f6a:	612a      	str	r2, [r5, #16]
    8f6c:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    8f70:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8f74:	6168      	str	r0, [r5, #20]
    8f76:	61ae      	str	r6, [r5, #24]
    8f78:	9810      	ldr	r0, [sp, #64]	; 0x40
    8f7a:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    8f7e:	61ec      	str	r4, [r5, #28]
    8f80:	626b      	str	r3, [r5, #36]	; 0x24
    8f82:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    8f86:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8f8a:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    8f8e:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    8f92:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    8f96:	a914      	add	r1, sp, #80	; 0x50
    8f98:	6228      	str	r0, [r5, #32]
    8f9a:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    8f9e:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    8fa2:	463a      	mov	r2, r7
    8fa4:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    8fa8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    8fac:	f015 fba8 	bl	1e700 <memcpy>
    8fb0:	463a      	mov	r2, r7
    8fb2:	a934      	add	r1, sp, #208	; 0xd0
    8fb4:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8fb8:	f015 fba2 	bl	1e700 <memcpy>
    8fbc:	a855      	add	r0, sp, #340	; 0x154
    8fbe:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    8fc2:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8fc4:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    8fc8:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8fca:	9e58      	ldr	r6, [sp, #352]	; 0x160
    8fcc:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    8fd0:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    8fd4:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    8fd8:	995b      	ldr	r1, [sp, #364]	; 0x16c
    8fda:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    8fde:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    8fe0:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    8fe4:	4648      	mov	r0, r9
    8fe6:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    8fea:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    8fee:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    8ff2:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    8ff6:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    8ffa:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    8ffe:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    9002:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    9006:	b05f      	add	sp, #380	; 0x17c
    9008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    900c:	000232dc 	.word	0x000232dc
    9010:	000232cc 	.word	0x000232cc
    9014:	20001600 	.word	0x20001600
    9018:	000232fc 	.word	0x000232fc
    901c:	000232ec 	.word	0x000232ec
    9020:	0002341c 	.word	0x0002341c
    9024:	000233bc 	.word	0x000233bc
    9028:	0002340c 	.word	0x0002340c
    902c:	000233ac 	.word	0x000233ac
    9030:	200014a8 	.word	0x200014a8

00009034 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    9034:	2914      	cmp	r1, #20
    9036:	dc03      	bgt.n	9040 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    9038:	4a03      	ldr	r2, [pc, #12]	; (9048 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    903a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    903e:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    9040:	4b02      	ldr	r3, [pc, #8]	; (904c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    9042:	6818      	ldr	r0, [r3, #0]
    9044:	f006 bea0 	b.w	fd88 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    9048:	00023258 	.word	0x00023258
    904c:	20001f0c 	.word	0x20001f0c

00009050 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    9050:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    9052:	4ab1      	ldr	r2, [pc, #708]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9054:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9058:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    905c:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    905e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9062:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9066:	065e      	lsls	r6, r3, #25
    9068:	d4fb      	bmi.n	9062 <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    906a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    906e:	49aa      	ldr	r1, [pc, #680]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9070:	2001      	movs	r0, #1
    9072:	f360 0303 	bfi	r3, r0, #0, #4
    9076:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    907a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    907e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9082:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9086:	684b      	ldr	r3, [r1, #4]
    9088:	f013 0304 	ands.w	r3, r3, #4
    908c:	d1fb      	bne.n	9086 <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    908e:	48a3      	ldr	r0, [pc, #652]	; (931c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    9090:	4aa3      	ldr	r2, [pc, #652]	; (9320 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    9092:	6981      	ldr	r1, [r0, #24]
    9094:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    9098:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    909a:	6811      	ldr	r1, [r2, #0]
    909c:	f363 0141 	bfi	r1, r3, #1, #1
    90a0:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    90a2:	6893      	ldr	r3, [r2, #8]
    90a4:	f013 0302 	ands.w	r3, r3, #2
    90a8:	d1fb      	bne.n	90a2 <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    90aa:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    90ac:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    90ae:	499a      	ldr	r1, [pc, #616]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    90b0:	f040 0002 	orr.w	r0, r0, #2
    90b4:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    90b6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    90b8:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    90bc:	f040 0002 	orr.w	r0, r0, #2
    90c0:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    90c2:	6453      	str	r3, [r2, #68]	; 0x44
    90c4:	6493      	str	r3, [r2, #72]	; 0x48
    90c6:	64d3      	str	r3, [r2, #76]	; 0x4c
    90c8:	6513      	str	r3, [r2, #80]	; 0x50
    90ca:	6553      	str	r3, [r2, #84]	; 0x54
    90cc:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    90ce:	6a90      	ldr	r0, [r2, #40]	; 0x28
    90d0:	f040 0001 	orr.w	r0, r0, #1
    90d4:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    90d6:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    90da:	f363 1286 	bfi	r2, r3, #6, #1
    90de:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    90e2:	460a      	mov	r2, r1
    90e4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    90e8:	065d      	lsls	r5, r3, #25
    90ea:	d4fb      	bmi.n	90e4 <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    90ec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    90f0:	4989      	ldr	r1, [pc, #548]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    90f2:	2001      	movs	r0, #1
    90f4:	f360 0303 	bfi	r3, r0, #0, #4
    90f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    90fc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9104:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9108:	684b      	ldr	r3, [r1, #4]
    910a:	f013 0304 	ands.w	r3, r3, #4
    910e:	d1fb      	bne.n	9108 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9110:	4882      	ldr	r0, [pc, #520]	; (931c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    9112:	4a84      	ldr	r2, [pc, #528]	; (9324 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9114:	6981      	ldr	r1, [r0, #24]
    9116:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    911a:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    911c:	6811      	ldr	r1, [r2, #0]
    911e:	f363 0141 	bfi	r1, r3, #1, #1
    9122:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    9124:	6893      	ldr	r3, [r2, #8]
    9126:	f013 0302 	ands.w	r3, r3, #2
    912a:	d1fb      	bne.n	9124 <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    912c:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    912e:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9130:	4979      	ldr	r1, [pc, #484]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    9132:	f040 0002 	orr.w	r0, r0, #2
    9136:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    9138:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    913a:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    913e:	f040 0002 	orr.w	r0, r0, #2
    9142:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    9144:	6453      	str	r3, [r2, #68]	; 0x44
    9146:	6493      	str	r3, [r2, #72]	; 0x48
    9148:	64d3      	str	r3, [r2, #76]	; 0x4c
    914a:	6513      	str	r3, [r2, #80]	; 0x50
    914c:	6553      	str	r3, [r2, #84]	; 0x54
    914e:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9150:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    9154:	f363 1286 	bfi	r2, r3, #6, #1
    9158:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    915c:	460a      	mov	r2, r1
    915e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    9162:	065c      	lsls	r4, r3, #25
    9164:	d4fb      	bmi.n	915e <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    9166:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    916a:	496b      	ldr	r1, [pc, #428]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    916c:	2006      	movs	r0, #6
    916e:	f360 0303 	bfi	r3, r0, #0, #4
    9172:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    9176:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    917a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    917e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    9182:	684b      	ldr	r3, [r1, #4]
    9184:	f013 0318 	ands.w	r3, r3, #24
    9188:	d1fb      	bne.n	9182 <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    918a:	4c64      	ldr	r4, [pc, #400]	; (931c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    918c:	4a62      	ldr	r2, [pc, #392]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    918e:	6960      	ldr	r0, [r4, #20]
    9190:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    9194:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    9196:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    919a:	f363 1086 	bfi	r0, r3, #6, #1
    919e:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    91a2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    91a6:	0658      	lsls	r0, r3, #25
    91a8:	d4fb      	bmi.n	91a2 <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    91aa:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    91ae:	495a      	ldr	r1, [pc, #360]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    91b0:	2006      	movs	r0, #6
    91b2:	f360 0303 	bfi	r3, r0, #0, #4
    91b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    91ba:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    91be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    91c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    91c6:	684b      	ldr	r3, [r1, #4]
    91c8:	f013 0318 	ands.w	r3, r3, #24
    91cc:	d1fb      	bne.n	91c6 <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    91ce:	4c53      	ldr	r4, [pc, #332]	; (931c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    91d0:	4a51      	ldr	r2, [pc, #324]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    91d2:	69a0      	ldr	r0, [r4, #24]
    91d4:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    91d8:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    91da:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    91de:	f363 1086 	bfi	r0, r3, #6, #1
    91e2:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    91e6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    91ea:	0659      	lsls	r1, r3, #25
    91ec:	d4fb      	bmi.n	91e6 <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    91ee:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    91f2:	4949      	ldr	r1, [pc, #292]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    91f4:	2006      	movs	r0, #6
    91f6:	f360 0303 	bfi	r3, r0, #0, #4
    91fa:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    91fe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9206:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    920a:	684b      	ldr	r3, [r1, #4]
    920c:	f013 0318 	ands.w	r3, r3, #24
    9210:	d1fb      	bne.n	920a <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9212:	4842      	ldr	r0, [pc, #264]	; (931c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9214:	4a40      	ldr	r2, [pc, #256]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9216:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9218:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    921a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    921e:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9220:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    9224:	6a04      	ldr	r4, [r0, #32]
    9226:	f044 0420 	orr.w	r4, r4, #32
    922a:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    922c:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    9230:	f363 1086 	bfi	r0, r3, #6, #1
    9234:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    9238:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    923c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9240:	2b00      	cmp	r3, #0
    9242:	d1f9      	bne.n	9238 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    9244:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    9248:	4834      	ldr	r0, [pc, #208]	; (931c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    924a:	4c33      	ldr	r4, [pc, #204]	; (9318 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    924c:	f363 0103 	bfi	r1, r3, #0, #4
    9250:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    9254:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    9258:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    925c:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    9260:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    9262:	69c1      	ldr	r1, [r0, #28]
    9264:	f041 0110 	orr.w	r1, r1, #16
    9268:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    926a:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    926e:	f363 1186 	bfi	r1, r3, #6, #1
    9272:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    9276:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    927a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    927e:	2b00      	cmp	r3, #0
    9280:	d1f9      	bne.n	9276 <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    9282:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    9286:	4a28      	ldr	r2, [pc, #160]	; (9328 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    9288:	4d24      	ldr	r5, [pc, #144]	; (931c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    928a:	f363 0103 	bfi	r1, r3, #0, #4
    928e:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    9292:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    9296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    929a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    929e:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    92a0:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    92a2:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    92a4:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    92a6:	f044 0410 	orr.w	r4, r4, #16
    92aa:	622c      	str	r4, [r5, #32]
    92ac:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    92b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    92b4:	f04f 0e01 	mov.w	lr, #1
    92b8:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    92ba:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    92bc:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    92be:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    92c0:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    92c2:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    92c6:	6813      	ldr	r3, [r2, #0]
    92c8:	f36f 0341 	bfc	r3, #1, #1
    92cc:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    92ce:	6913      	ldr	r3, [r2, #16]
    92d0:	f013 0302 	ands.w	r3, r3, #2
    92d4:	d1fb      	bne.n	92ce <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    92d6:	7910      	ldrb	r0, [r2, #4]
    92d8:	f040 0002 	orr.w	r0, r0, #2
    92dc:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    92de:	6810      	ldr	r0, [r2, #0]
    92e0:	f36e 0083 	bfi	r0, lr, #2, #2
    92e4:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    92e6:	6810      	ldr	r0, [r2, #0]
    92e8:	f367 200a 	bfi	r0, r7, #8, #3
    92ec:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    92ee:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    92f0:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    92f2:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    92f6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    92fa:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    92fe:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    9300:	6813      	ldr	r3, [r2, #0]
    9302:	f043 0302 	orr.w	r3, r3, #2
    9306:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9308:	6913      	ldr	r3, [r2, #16]
    930a:	079b      	lsls	r3, r3, #30
    930c:	d4fc      	bmi.n	9308 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    930e:	4561      	cmp	r1, ip
    9310:	d1d7      	bne.n	92c2 <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    9312:	b005      	add	sp, #20
    9314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9316:	bf00      	nop
    9318:	40001c00 	.word	0x40001c00
    931c:	40000800 	.word	0x40000800
    9320:	41016000 	.word	0x41016000
    9324:	41018000 	.word	0x41018000
    9328:	00023234 	.word	0x00023234

0000932c <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    932c:	498b      	ldr	r1, [pc, #556]	; (955c <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    932e:	4a8c      	ldr	r2, [pc, #560]	; (9560 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9330:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    9332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    933a:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    933e:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9340:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    9342:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    9344:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    9348:	4606      	mov	r6, r0
    InitClocks();
    934a:	f7ff fe81 	bl	9050 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    934e:	4b85      	ldr	r3, [pc, #532]	; (9564 <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    9350:	4985      	ldr	r1, [pc, #532]	; (9568 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    9352:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    9354:	680d      	ldr	r5, [r1, #0]
    9356:	4f85      	ldr	r7, [pc, #532]	; (956c <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    9358:	f364 0241 	bfi	r2, r4, #1, #1
    935c:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    935e:	691a      	ldr	r2, [r3, #16]
    9360:	21a7      	movs	r1, #167	; 0xa7
    9362:	f361 4217 	bfi	r2, r1, #16, #8
    9366:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    9368:	691a      	ldr	r2, [r3, #16]
    936a:	f368 0283 	bfi	r2, r8, #2, #2
    936e:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    9370:	691a      	ldr	r2, [r3, #16]
    9372:	2107      	movs	r1, #7
    9374:	f361 220b 	bfi	r2, r1, #8, #4
    9378:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    937a:	691a      	ldr	r2, [r3, #16]
    937c:	f042 0202 	orr.w	r2, r2, #2
    9380:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    9382:	4628      	mov	r0, r5
    9384:	4641      	mov	r1, r8
    9386:	f008 fbc1 	bl	11b0c <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    938a:	4879      	ldr	r0, [pc, #484]	; (9570 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    938c:	2100      	movs	r1, #0
    938e:	f000 fc9b 	bl	9cc8 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    9392:	4621      	mov	r1, r4
    9394:	4628      	mov	r0, r5
    9396:	f008 fbb9 	bl	11b0c <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    939a:	4b76      	ldr	r3, [pc, #472]	; (9574 <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    939c:	4a76      	ldr	r2, [pc, #472]	; (9578 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    939e:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    93a2:	2102      	movs	r1, #2
    93a4:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    93a8:	6810      	ldr	r0, [r2, #0]
    93aa:	f006 fe01 	bl	ffb0 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    93ae:	f857 0f04 	ldr.w	r0, [r7, #4]!
    93b2:	6803      	ldr	r3, [r0, #0]
    93b4:	b221      	sxth	r1, r4
    93b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    93b8:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    93ba:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    93bc:	2c15      	cmp	r4, #21
    93be:	d1f6      	bne.n	93ae <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    93c0:	f005 fe14 	bl	efec <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    93c4:	4b6d      	ldr	r3, [pc, #436]	; (957c <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    93c6:	6818      	ldr	r0, [r3, #0]
    93c8:	f001 ff74 	bl	b2b4 <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    93cc:	486c      	ldr	r0, [pc, #432]	; (9580 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    93ce:	f001 fac9 	bl	a964 <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    93d2:	4b6c      	ldr	r3, [pc, #432]	; (9584 <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    93d4:	6818      	ldr	r0, [r3, #0]
    93d6:	f003 ff21 	bl	d21c <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    93da:	4b6b      	ldr	r3, [pc, #428]	; (9588 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    93dc:	6818      	ldr	r0, [r3, #0]
    93de:	f006 f923 	bl	f628 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    93e2:	4b6a      	ldr	r3, [pc, #424]	; (958c <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    93e4:	6818      	ldr	r0, [r3, #0]
    93e6:	f7fd f9ef 	bl	67c8 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    93ea:	4869      	ldr	r0, [pc, #420]	; (9590 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    93ec:	f002 fd7c 	bl	bee8 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    93f0:	4a68      	ldr	r2, [pc, #416]	; (9594 <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    93f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    93f6:	f36f 1386 	bfc	r3, #6, #1
    93fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    93fe:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9402:	f3c1 1180 	ubfx	r1, r1, #6, #1
    9406:	2900      	cmp	r1, #0
    9408:	d1f9      	bne.n	93fe <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    940a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    940e:	4c62      	ldr	r4, [pc, #392]	; (9598 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    9410:	4f5b      	ldr	r7, [pc, #364]	; (9580 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9412:	4b62      	ldr	r3, [pc, #392]	; (959c <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    9414:	f8df c190 	ldr.w	ip, [pc, #400]	; 95a8 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9418:	f361 0003 	bfi	r0, r1, #0, #4
    941c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    9420:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9424:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9428:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    942c:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    942e:	6961      	ldr	r1, [r4, #20]
    9430:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    9434:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    9438:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    943c:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    943e:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9440:	f8c3 e000 	str.w	lr, [r3]
    9444:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    9448:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    944c:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    9450:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    9454:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    9458:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    945c:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9460:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    9464:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9468:	f8c3 9000 	str.w	r9, [r3]
    946c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9470:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9474:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    9478:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    947a:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    947e:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9482:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9486:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    948a:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    948e:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9492:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9496:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    949a:	6019      	str	r1, [r3, #0]
    949c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94a0:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94a4:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94a6:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94aa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    94ae:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94b0:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94b4:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94b8:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94bc:	6019      	str	r1, [r3, #0]
    94be:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94c2:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94c6:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    94ca:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94cc:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94d0:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    94d2:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94d6:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94da:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    94de:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    94e2:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94e6:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94ea:	f44f 7880 	mov.w	r8, #256	; 0x100
    94ee:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94f0:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    94f4:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94f6:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94fa:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    94fe:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9502:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9504:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9508:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    950c:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    950e:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9512:	f8c3 800c 	str.w	r8, [r3, #12]
    9516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    951a:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    951e:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    9522:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    9526:	f000 fb7f 	bl	9c28 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    952a:	b100      	cbz	r0, 952e <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    952c:	e7fe      	b.n	952c <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    952e:	4b1c      	ldr	r3, [pc, #112]	; (95a0 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    9530:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    9532:	4621      	mov	r1, r4
    9534:	4628      	mov	r0, r5
    9536:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    953a:	f008 fad9 	bl	11af0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    953e:	f642 043b 	movw	r4, #10299	; 0x283b
    9542:	f000 fb9d 	bl	9c80 <Microseconds>
    9546:	42a0      	cmp	r0, r4
    9548:	d9fb      	bls.n	9542 <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    954a:	4b16      	ldr	r3, [pc, #88]	; (95a4 <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    954c:	6818      	ldr	r0, [r3, #0]
    954e:	f000 fcdd 	bl	9f0c <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    9552:	2301      	movs	r3, #1
    9554:	7033      	strb	r3, [r6, #0]
    9556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    955a:	bf00      	nop
    955c:	e000edf0 	.word	0xe000edf0
    9560:	e0001000 	.word	0xe0001000
    9564:	40001800 	.word	0x40001800
    9568:	20001f28 	.word	0x20001f28
    956c:	00023254 	.word	0x00023254
    9570:	0001d4c0 	.word	0x0001d4c0
    9574:	41008000 	.word	0x41008000
    9578:	20001f18 	.word	0x20001f18
    957c:	20001c14 	.word	0x20001c14
    9580:	200019e8 	.word	0x200019e8
    9584:	20001e14 	.word	0x20001e14
    9588:	20001f0c 	.word	0x20001f0c
    958c:	20000aec 	.word	0x20000aec
    9590:	20001b00 	.word	0x20001b00
    9594:	40001c00 	.word	0x40001c00
    9598:	40000800 	.word	0x40000800
    959c:	e000e100 	.word	0xe000e100
    95a0:	e000ed00 	.word	0xe000ed00
    95a4:	20001c08 	.word	0x20001c08
    95a8:	20001bfc 	.word	0x20001bfc

000095ac <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    95ac:	b672      	cpsid	i
    95ae:	4a09      	ldr	r2, [pc, #36]	; (95d4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    95b0:	4b09      	ldr	r3, [pc, #36]	; (95d8 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    95b2:	2901      	cmp	r1, #1
    95b4:	bf18      	it	ne
    95b6:	2300      	movne	r3, #0
    95b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    95ba:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    95be:	4907      	ldr	r1, [pc, #28]	; (95dc <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    95c0:	4b07      	ldr	r3, [pc, #28]	; (95e0 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    95c2:	68ca      	ldr	r2, [r1, #12]
    95c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    95c8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    95ca:	60cb      	str	r3, [r1, #12]
    95cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    95d0:	bf00      	nop
    95d2:	e7fd      	b.n	95d0 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    95d4:	2002fffc 	.word	0x2002fffc
    95d8:	f01669ef 	.word	0xf01669ef
    95dc:	e000ed00 	.word	0xe000ed00
    95e0:	05fa0004 	.word	0x05fa0004

000095e4 <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    95e4:	4b01      	ldr	r3, [pc, #4]	; (95ec <GMAC_Handler+0x8>)
    95e6:	6818      	ldr	r0, [r3, #0]
    95e8:	f001 b908 	b.w	a7fc <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    95ec:	20001c08 	.word	0x20001c08

000095f0 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    95f0:	4801      	ldr	r0, [pc, #4]	; (95f8 <SERCOM0_0_Handler+0x8>)
    95f2:	f007 bf13 	b.w	1141c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    95f6:	bf00      	nop
    95f8:	20001600 	.word	0x20001600

000095fc <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    95fc:	4801      	ldr	r0, [pc, #4]	; (9604 <SERCOM0_2_Handler+0x8>)
    95fe:	f007 bf35 	b.w	1146c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9602:	bf00      	nop
    9604:	20001600 	.word	0x20001600

00009608 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    9608:	4801      	ldr	r0, [pc, #4]	; (9610 <SERCOM0_3_Handler+0x8>)
    960a:	f007 bf6b 	b.w	114e4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    960e:	bf00      	nop
    9610:	20001600 	.word	0x20001600

00009614 <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    9614:	4801      	ldr	r0, [pc, #4]	; (961c <SERCOM2_0_Handler+0x8>)
    9616:	f007 bf01 	b.w	1141c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    961a:	bf00      	nop
    961c:	20001758 	.word	0x20001758

00009620 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    9620:	4801      	ldr	r0, [pc, #4]	; (9628 <SERCOM2_2_Handler+0x8>)
    9622:	f007 bf23 	b.w	1146c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9626:	bf00      	nop
    9628:	20001758 	.word	0x20001758

0000962c <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    962c:	4801      	ldr	r0, [pc, #4]	; (9634 <SERCOM2_3_Handler+0x8>)
    962e:	f007 bf59 	b.w	114e4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9632:	bf00      	nop
    9634:	20001758 	.word	0x20001758

00009638 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    9638:	4801      	ldr	r0, [pc, #4]	; (9640 <SERCOM7_0_Handler+0x8>)
    963a:	f007 beef 	b.w	1141c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    963e:	bf00      	nop
    9640:	200014a8 	.word	0x200014a8

00009644 <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    9644:	4801      	ldr	r0, [pc, #4]	; (964c <SERCOM7_2_Handler+0x8>)
    9646:	f007 bf11 	b.w	1146c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    964a:	bf00      	nop
    964c:	200014a8 	.word	0x200014a8

00009650 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    9650:	4801      	ldr	r0, [pc, #4]	; (9658 <SERCOM7_3_Handler+0x8>)
    9652:	f007 bf47 	b.w	114e4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9656:	bf00      	nop
    9658:	200014a8 	.word	0x200014a8

0000965c <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    965c:	4b02      	ldr	r3, [pc, #8]	; (9668 <EIC_0_Handler+0xc>)
    965e:	2100      	movs	r1, #0
    9660:	6818      	ldr	r0, [r3, #0]
    9662:	f006 bced 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9666:	bf00      	nop
    9668:	20001f18 	.word	0x20001f18

0000966c <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    966c:	4b02      	ldr	r3, [pc, #8]	; (9678 <EIC_1_Handler+0xc>)
    966e:	2101      	movs	r1, #1
    9670:	6818      	ldr	r0, [r3, #0]
    9672:	f006 bce5 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9676:	bf00      	nop
    9678:	20001f18 	.word	0x20001f18

0000967c <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    967c:	4b02      	ldr	r3, [pc, #8]	; (9688 <EIC_2_Handler+0xc>)
    967e:	2102      	movs	r1, #2
    9680:	6818      	ldr	r0, [r3, #0]
    9682:	f006 bcdd 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9686:	bf00      	nop
    9688:	20001f18 	.word	0x20001f18

0000968c <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    968c:	4b02      	ldr	r3, [pc, #8]	; (9698 <EIC_3_Handler+0xc>)
    968e:	2103      	movs	r1, #3
    9690:	6818      	ldr	r0, [r3, #0]
    9692:	f006 bcd5 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9696:	bf00      	nop
    9698:	20001f18 	.word	0x20001f18

0000969c <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    969c:	4b02      	ldr	r3, [pc, #8]	; (96a8 <EIC_4_Handler+0xc>)
    969e:	2104      	movs	r1, #4
    96a0:	6818      	ldr	r0, [r3, #0]
    96a2:	f006 bccd 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    96a6:	bf00      	nop
    96a8:	20001f18 	.word	0x20001f18

000096ac <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    96ac:	4b02      	ldr	r3, [pc, #8]	; (96b8 <EIC_5_Handler+0xc>)
    96ae:	2105      	movs	r1, #5
    96b0:	6818      	ldr	r0, [r3, #0]
    96b2:	f006 bcc5 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    96b6:	bf00      	nop
    96b8:	20001f18 	.word	0x20001f18

000096bc <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    96bc:	4b02      	ldr	r3, [pc, #8]	; (96c8 <EIC_6_Handler+0xc>)
    96be:	2106      	movs	r1, #6
    96c0:	6818      	ldr	r0, [r3, #0]
    96c2:	f006 bcbd 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    96c6:	bf00      	nop
    96c8:	20001f18 	.word	0x20001f18

000096cc <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    96cc:	4b02      	ldr	r3, [pc, #8]	; (96d8 <EIC_7_Handler+0xc>)
    96ce:	2107      	movs	r1, #7
    96d0:	6818      	ldr	r0, [r3, #0]
    96d2:	f006 bcb5 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    96d6:	bf00      	nop
    96d8:	20001f18 	.word	0x20001f18

000096dc <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    96dc:	4b02      	ldr	r3, [pc, #8]	; (96e8 <EIC_8_Handler+0xc>)
    96de:	2108      	movs	r1, #8
    96e0:	6818      	ldr	r0, [r3, #0]
    96e2:	f006 bcad 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    96e6:	bf00      	nop
    96e8:	20001f18 	.word	0x20001f18

000096ec <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    96ec:	4b02      	ldr	r3, [pc, #8]	; (96f8 <EIC_9_Handler+0xc>)
    96ee:	2109      	movs	r1, #9
    96f0:	6818      	ldr	r0, [r3, #0]
    96f2:	f006 bca5 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    96f6:	bf00      	nop
    96f8:	20001f18 	.word	0x20001f18

000096fc <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    96fc:	4b02      	ldr	r3, [pc, #8]	; (9708 <EIC_10_Handler+0xc>)
    96fe:	210a      	movs	r1, #10
    9700:	6818      	ldr	r0, [r3, #0]
    9702:	f006 bc9d 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9706:	bf00      	nop
    9708:	20001f18 	.word	0x20001f18

0000970c <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    970c:	4b02      	ldr	r3, [pc, #8]	; (9718 <EIC_11_Handler+0xc>)
    970e:	210b      	movs	r1, #11
    9710:	6818      	ldr	r0, [r3, #0]
    9712:	f006 bc95 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9716:	bf00      	nop
    9718:	20001f18 	.word	0x20001f18

0000971c <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    971c:	4b01      	ldr	r3, [pc, #4]	; (9724 <EIC_12_Handler+0x8>)
    971e:	6818      	ldr	r0, [r3, #0]
    9720:	f000 beb0 	b.w	a484 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    9724:	20001c08 	.word	0x20001c08

00009728 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    9728:	4b02      	ldr	r3, [pc, #8]	; (9734 <EIC_13_Handler+0xc>)
    972a:	210d      	movs	r1, #13
    972c:	6818      	ldr	r0, [r3, #0]
    972e:	f006 bc87 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9732:	bf00      	nop
    9734:	20001f18 	.word	0x20001f18

00009738 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    9738:	4b02      	ldr	r3, [pc, #8]	; (9744 <EIC_14_Handler+0xc>)
    973a:	210e      	movs	r1, #14
    973c:	6818      	ldr	r0, [r3, #0]
    973e:	f006 bc7f 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9742:	bf00      	nop
    9744:	20001f18 	.word	0x20001f18

00009748 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    9748:	4b02      	ldr	r3, [pc, #8]	; (9754 <EIC_15_Handler+0xc>)
    974a:	210f      	movs	r1, #15
    974c:	6818      	ldr	r0, [r3, #0]
    974e:	f006 bc77 	b.w	10040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9752:	bf00      	nop
    9754:	20001f18 	.word	0x20001f18

00009758 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    9758:	4b02      	ldr	r3, [pc, #8]	; (9764 <TCC3_0_Handler+0xc>)
    975a:	4a03      	ldr	r2, [pc, #12]	; (9768 <TCC3_0_Handler+0x10>)
    975c:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    975e:	4803      	ldr	r0, [pc, #12]	; (976c <TCC3_0_Handler+0x14>)
    9760:	f005 b9ce 	b.w	eb00 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    9764:	42001000 	.word	0x42001000
    9768:	003ffc0f 	.word	0x003ffc0f
    976c:	20001408 	.word	0x20001408

00009770 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    9770:	4b02      	ldr	r3, [pc, #8]	; (977c <TCC4_0_Handler+0xc>)
    9772:	4a03      	ldr	r2, [pc, #12]	; (9780 <TCC4_0_Handler+0x10>)
    9774:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    9776:	4803      	ldr	r0, [pc, #12]	; (9784 <TCC4_0_Handler+0x14>)
    9778:	f005 b9c2 	b.w	eb00 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    977c:	43001000 	.word	0x43001000
    9780:	003ffc0f 	.word	0x003ffc0f
    9784:	20001384 	.word	0x20001384

00009788 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    9788:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    978a:	4b0d      	ldr	r3, [pc, #52]	; (97c0 <SysTick_Handler+0x38>)
    978c:	781b      	ldrb	r3, [r3, #0]
    978e:	b103      	cbz	r3, 9792 <SysTick_Handler+0xa>
    9790:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    9792:	4b0c      	ldr	r3, [pc, #48]	; (97c4 <SysTick_Handler+0x3c>)
    9794:	781b      	ldrb	r3, [r3, #0]
    9796:	2b00      	cmp	r3, #0
    9798:	d0fa      	beq.n	9790 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    979a:	4b0b      	ldr	r3, [pc, #44]	; (97c8 <SysTick_Handler+0x40>)
    979c:	6818      	ldr	r0, [r3, #0]
    979e:	f006 fa99 	bl	fcd4 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    97a2:	480a      	ldr	r0, [pc, #40]	; (97cc <SysTick_Handler+0x44>)
    97a4:	f7fb fd2c 	bl	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    97a8:	4809      	ldr	r0, [pc, #36]	; (97d0 <SysTick_Handler+0x48>)
    97aa:	f7fb fd29 	bl	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    97ae:	4809      	ldr	r0, [pc, #36]	; (97d4 <SysTick_Handler+0x4c>)
    97b0:	f7fb fd26 	bl	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    97b4:	4808      	ldr	r0, [pc, #32]	; (97d8 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    97b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    97ba:	f7fb bd21 	b.w	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    97be:	bf00      	nop
    97c0:	20001098 	.word	0x20001098
    97c4:	200019e4 	.word	0x200019e4
    97c8:	20001f0c 	.word	0x20001f0c
    97cc:	20000b78 	.word	0x20000b78
    97d0:	20000cc0 	.word	0x20000cc0
    97d4:	20000e08 	.word	0x20000e08
    97d8:	20000f50 	.word	0x20000f50

000097dc <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    97dc:	4a30      	ldr	r2, [pc, #192]	; (98a0 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    97de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    97e2:	4b30      	ldr	r3, [pc, #192]	; (98a4 <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    97e4:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    97e6:	4a30      	ldr	r2, [pc, #192]	; (98a8 <TCC0_0_Handler+0xcc>)
    97e8:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    97ea:	4630      	mov	r0, r6
    97ec:	f000 f9ca 	bl	9b84 <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    97f0:	4b2e      	ldr	r3, [pc, #184]	; (98ac <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    97f2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 98e8 <TCC0_0_Handler+0x10c>
    97f6:	f8d3 9000 	ldr.w	r9, [r3]
    97fa:	4648      	mov	r0, r9
    97fc:	f005 ff88 	bl	f710 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    9800:	4b2b      	ldr	r3, [pc, #172]	; (98b0 <TCC0_0_Handler+0xd4>)
    9802:	6818      	ldr	r0, [r3, #0]
    9804:	f003 fec4 	bl	d590 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    9808:	4b2a      	ldr	r3, [pc, #168]	; (98b4 <TCC0_0_Handler+0xd8>)
    980a:	6818      	ldr	r0, [r3, #0]
    980c:	f008 fa14 	bl	11c38 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    9810:	4b29      	ldr	r3, [pc, #164]	; (98b8 <TCC0_0_Handler+0xdc>)
    9812:	6818      	ldr	r0, [r3, #0]
    9814:	f7fd fe22 	bl	745c <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    9818:	4b28      	ldr	r3, [pc, #160]	; (98bc <TCC0_0_Handler+0xe0>)
    981a:	681f      	ldr	r7, [r3, #0]
    981c:	4638      	mov	r0, r7
    981e:	f006 fc3d 	bl	1009c <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    9822:	f898 3000 	ldrb.w	r3, [r8]
    9826:	b15b      	cbz	r3, 9840 <TCC0_0_Handler+0x64>
    9828:	4c25      	ldr	r4, [pc, #148]	; (98c0 <TCC0_0_Handler+0xe4>)
    982a:	4826      	ldr	r0, [pc, #152]	; (98c4 <TCC0_0_Handler+0xe8>)
    982c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    9830:	e001      	b.n	9836 <TCC0_0_Handler+0x5a>
    9832:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    9836:	6803      	ldr	r3, [r0, #0]
    9838:	6a1b      	ldr	r3, [r3, #32]
    983a:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    983c:	42ac      	cmp	r4, r5
    983e:	d1f8      	bne.n	9832 <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    9840:	4638      	mov	r0, r7
    9842:	f006 fc3f 	bl	100c4 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    9846:	4820      	ldr	r0, [pc, #128]	; (98c8 <TCC0_0_Handler+0xec>)
    9848:	f002 fb7c 	bl	bf44 <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    984c:	481f      	ldr	r0, [pc, #124]	; (98cc <TCC0_0_Handler+0xf0>)
    984e:	f001 f95b 	bl	ab08 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    9852:	4630      	mov	r0, r6
    9854:	f000 f9ac 	bl	9bb0 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    9858:	4a1d      	ldr	r2, [pc, #116]	; (98d0 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    985a:	491e      	ldr	r1, [pc, #120]	; (98d4 <TCC0_0_Handler+0xf8>)
    tickCnt++;
    985c:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    985e:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    9860:	3301      	adds	r3, #1
    9862:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    9864:	b111      	cbz	r1, 986c <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    9866:	f898 3000 	ldrb.w	r3, [r8]
    986a:	b923      	cbnz	r3, 9876 <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    986c:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    986e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    9872:	f000 b98d 	b.w	9b90 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    9876:	4648      	mov	r0, r9
    9878:	f006 fa2c 	bl	fcd4 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    987c:	4816      	ldr	r0, [pc, #88]	; (98d8 <TCC0_0_Handler+0xfc>)
    987e:	f7fb fcbf 	bl	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9882:	4816      	ldr	r0, [pc, #88]	; (98dc <TCC0_0_Handler+0x100>)
    9884:	f7fb fcbc 	bl	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9888:	4815      	ldr	r0, [pc, #84]	; (98e0 <TCC0_0_Handler+0x104>)
    988a:	f7fb fcb9 	bl	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    988e:	4815      	ldr	r0, [pc, #84]	; (98e4 <TCC0_0_Handler+0x108>)
    9890:	f7fb fcb6 	bl	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    9894:	4630      	mov	r0, r6
}
    9896:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    989a:	f000 b979 	b.w	9b90 <_ZN9ClearCore9SysTiming6IsrEndEv>
    989e:	bf00      	nop
    98a0:	20001bfc 	.word	0x20001bfc
    98a4:	41016000 	.word	0x41016000
    98a8:	003ffc0f 	.word	0x003ffc0f
    98ac:	20001f0c 	.word	0x20001f0c
    98b0:	20001e14 	.word	0x20001e14
    98b4:	20001f28 	.word	0x20001f28
    98b8:	20000aec 	.word	0x20000aec
    98bc:	20001f18 	.word	0x20001f18
    98c0:	00023258 	.word	0x00023258
    98c4:	200011f8 	.word	0x200011f8
    98c8:	20001b00 	.word	0x20001b00
    98cc:	200019e8 	.word	0x200019e8
    98d0:	20001bf8 	.word	0x20001bf8
    98d4:	20001098 	.word	0x20001098
    98d8:	20000b78 	.word	0x20000b78
    98dc:	20000cc0 	.word	0x20000cc0
    98e0:	20000e08 	.word	0x20000e08
    98e4:	20000f50 	.word	0x20000f50
    98e8:	200019e4 	.word	0x200019e4

000098ec <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    98ec:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    98ee:	4813      	ldr	r0, [pc, #76]	; (993c <Reset_Handler+0x50>)
    98f0:	4b13      	ldr	r3, [pc, #76]	; (9940 <Reset_Handler+0x54>)
    98f2:	4298      	cmp	r0, r3
    98f4:	d00b      	beq.n	990e <Reset_Handler+0x22>
    98f6:	4913      	ldr	r1, [pc, #76]	; (9944 <Reset_Handler+0x58>)
    98f8:	4281      	cmp	r1, r0
    98fa:	d008      	beq.n	990e <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    98fc:	4298      	cmp	r0, r3
    98fe:	d206      	bcs.n	990e <Reset_Handler+0x22>
            *pDest = *pSrc;
    9900:	43c2      	mvns	r2, r0
    9902:	441a      	add	r2, r3
    9904:	f022 0203 	bic.w	r2, r2, #3
    9908:	3204      	adds	r2, #4
    990a:	f014 fef9 	bl	1e700 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    990e:	480e      	ldr	r0, [pc, #56]	; (9948 <Reset_Handler+0x5c>)
    9910:	4b0e      	ldr	r3, [pc, #56]	; (994c <Reset_Handler+0x60>)
    9912:	4298      	cmp	r0, r3
    9914:	d008      	beq.n	9928 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    9916:	d207      	bcs.n	9928 <Reset_Handler+0x3c>
            *pDest = 0ul;
    9918:	43c2      	mvns	r2, r0
    991a:	441a      	add	r2, r3
    991c:	f022 0203 	bic.w	r2, r2, #3
    9920:	3204      	adds	r2, #4
    9922:	2100      	movs	r1, #0
    9924:	f014 ffea 	bl	1e8fc <memset>
        }
    }

    SystemInit();
    9928:	f002 f93a 	bl	bba0 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    992c:	f014 fb5e 	bl	1dfec <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    9930:	4807      	ldr	r0, [pc, #28]	; (9950 <Reset_Handler+0x64>)
    9932:	f7ff fcfb 	bl	932c <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    9936:	f7fa fe6b 	bl	4610 <main>
    993a:	e7fe      	b.n	993a <Reset_Handler+0x4e>
    993c:	20000000 	.word	0x20000000
    9940:	20000ac0 	.word	0x20000ac0
    9944:	00025574 	.word	0x00025574
    9948:	20000ac0 	.word	0x20000ac0
    994c:	200023b0 	.word	0x200023b0
    9950:	200019e4 	.word	0x200019e4

00009954 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    9954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    9958:	4852      	ldr	r0, [pc, #328]	; (9aa4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    995a:	4d53      	ldr	r5, [pc, #332]	; (9aa8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    995c:	4c53      	ldr	r4, [pc, #332]	; (9aac <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    995e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 9b1c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    9962:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9b20 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    9966:	4f52      	ldr	r7, [pc, #328]	; (9ab0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    9968:	f002 fa94 	bl	be94 <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    996c:	4b51      	ldr	r3, [pc, #324]	; (9ab4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    996e:	4a52      	ldr	r2, [pc, #328]	; (9ab8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    9970:	4852      	ldr	r0, [pc, #328]	; (9abc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    9972:	601a      	str	r2, [r3, #0]
    9974:	2600      	movs	r6, #0
    9976:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    997a:	f000 ff61 	bl	a840 <_ZN9ClearCore13ShiftRegisterC1Ev>
    997e:	4b50      	ldr	r3, [pc, #320]	; (9ac0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    9980:	4a50      	ldr	r2, [pc, #320]	; (9ac4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    9982:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    9986:	4628      	mov	r0, r5
    9988:	601a      	str	r2, [r3, #0]
    998a:	f004 ff73 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    998e:	4b4e      	ldr	r3, [pc, #312]	; (9ac8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    9990:	602b      	str	r3, [r5, #0]
    9992:	4620      	mov	r0, r4
    9994:	f004 ff6e 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    9998:	4b4c      	ldr	r3, [pc, #304]	; (9acc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    999a:	6023      	str	r3, [r4, #0]
    999c:	4648      	mov	r0, r9
    999e:	f004 ff69 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    99a2:	4c4b      	ldr	r4, [pc, #300]	; (9ad0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    99a4:	4d4b      	ldr	r5, [pc, #300]	; (9ad4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    99a6:	f8c9 4000 	str.w	r4, [r9]
    99aa:	4640      	mov	r0, r8
    99ac:	f004 ff62 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    99b0:	f8df 9170 	ldr.w	r9, [pc, #368]	; 9b24 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    99b4:	f8c8 4000 	str.w	r4, [r8]
    99b8:	4638      	mov	r0, r7
    99ba:	f004 ff5b 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    99be:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9b28 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    99c2:	603c      	str	r4, [r7, #0]
    99c4:	4628      	mov	r0, r5
    99c6:	f004 ff55 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    99ca:	4c43      	ldr	r4, [pc, #268]	; (9ad8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    99cc:	4f43      	ldr	r7, [pc, #268]	; (9adc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    99ce:	602c      	str	r4, [r5, #0]
    99d0:	4648      	mov	r0, r9
    99d2:	f004 ff4f 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    99d6:	4d42      	ldr	r5, [pc, #264]	; (9ae0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    99d8:	f8c9 4000 	str.w	r4, [r9]
    99dc:	4640      	mov	r0, r8
    99de:	f004 ff49 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    99e2:	4c40      	ldr	r4, [pc, #256]	; (9ae4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    99e4:	f8df 9144 	ldr.w	r9, [pc, #324]	; 9b2c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    99e8:	f8c8 4000 	str.w	r4, [r8]
    99ec:	4638      	mov	r0, r7
    99ee:	f004 ff41 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    99f2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 9b30 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    99f6:	603c      	str	r4, [r7, #0]
    99f8:	4628      	mov	r0, r5
    99fa:	f004 ff3b 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    99fe:	4f3a      	ldr	r7, [pc, #232]	; (9ae8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    9a00:	602c      	str	r4, [r5, #0]
    9a02:	4648      	mov	r0, r9
    9a04:	f004 ff36 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    9a08:	4c38      	ldr	r4, [pc, #224]	; (9aec <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    9a0a:	4d39      	ldr	r5, [pc, #228]	; (9af0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    9a0c:	f8c9 4000 	str.w	r4, [r9]
    9a10:	4640      	mov	r0, r8
    9a12:	f004 ff2f 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    9a16:	4638      	mov	r0, r7
    9a18:	f8c8 4000 	str.w	r4, [r8]
    9a1c:	f004 ff2a 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    9a20:	4628      	mov	r0, r5
    9a22:	603c      	str	r4, [r7, #0]
    9a24:	f004 ff26 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    9a28:	4832      	ldr	r0, [pc, #200]	; (9af4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    9a2a:	602c      	str	r4, [r5, #0]
    9a2c:	f7fd ff1e 	bl	786c <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    9a30:	4831      	ldr	r0, [pc, #196]	; (9af8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    9a32:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9b34 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    9a36:	4d31      	ldr	r5, [pc, #196]	; (9afc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    9a38:	4c31      	ldr	r4, [pc, #196]	; (9b00 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    9a3a:	4f32      	ldr	r7, [pc, #200]	; (9b04 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    9a3c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9b38 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    9a40:	f7fd ff14 	bl	786c <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    9a44:	4830      	ldr	r0, [pc, #192]	; (9b08 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    9a46:	f7fd ff11 	bl	786c <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    9a4a:	4830      	ldr	r0, [pc, #192]	; (9b0c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    9a4c:	f7fd ff0e 	bl	786c <_ZN9ClearCore11MotorDriverC1Ev>
    9a50:	4640      	mov	r0, r8
    9a52:	4b2f      	ldr	r3, [pc, #188]	; (9b10 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    9a54:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    9a58:	f004 ff0c 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    9a5c:	4b2d      	ldr	r3, [pc, #180]	; (9b14 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    9a5e:	f8c8 3000 	str.w	r3, [r8]
    9a62:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    9a66:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    9a68:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    9a6c:	f8c5 9000 	str.w	r9, [r5]
    9a70:	f8c8 3004 	str.w	r3, [r8, #4]
    9a74:	f004 fefe 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    9a78:	f107 0874 	add.w	r8, r7, #116	; 0x74
    9a7c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    9a80:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    9a84:	f8c4 9000 	str.w	r9, [r4]
    9a88:	602f      	str	r7, [r5, #0]
    9a8a:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    9a8e:	f004 fef1 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    9a92:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    9a96:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    9a98:	481f      	ldr	r0, [pc, #124]	; (9b18 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    9a9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    9a9e:	f7fd bf07 	b.w	78b0 <_ZN9ClearCore10SysManagerC1Ev>
    9aa2:	bf00      	nop
    9aa4:	20001b00 	.word	0x20001b00
    9aa8:	2000148c 	.word	0x2000148c
    9aac:	200011f8 	.word	0x200011f8
    9ab0:	20001324 	.word	0x20001324
    9ab4:	2000189c 	.word	0x2000189c
    9ab8:	0002319c 	.word	0x0002319c
    9abc:	200019e8 	.word	0x200019e8
    9ac0:	20001758 	.word	0x20001758
    9ac4:	000231ec 	.word	0x000231ec
    9ac8:	0002399c 	.word	0x0002399c
    9acc:	00023704 	.word	0x00023704
    9ad0:	00023764 	.word	0x00023764
    9ad4:	20001384 	.word	0x20001384
    9ad8:	00023814 	.word	0x00023814
    9adc:	20001198 	.word	0x20001198
    9ae0:	200011c8 	.word	0x200011c8
    9ae4:	000237e4 	.word	0x000237e4
    9ae8:	200010e0 	.word	0x200010e0
    9aec:	00023734 	.word	0x00023734
    9af0:	20001124 	.word	0x20001124
    9af4:	20000b78 	.word	0x20000b78
    9af8:	20000cc0 	.word	0x20000cc0
    9afc:	200014a8 	.word	0x200014a8
    9b00:	20001600 	.word	0x20001600
    9b04:	000238f8 	.word	0x000238f8
    9b08:	20000e08 	.word	0x20000e08
    9b0c:	20000f50 	.word	0x20000f50
    9b10:	00023098 	.word	0x00023098
    9b14:	000230e8 	.word	0x000230e8
    9b18:	200019e4 	.word	0x200019e4
    9b1c:	20001264 	.word	0x20001264
    9b20:	200012c4 	.word	0x200012c4
    9b24:	20001408 	.word	0x20001408
    9b28:	20001168 	.word	0x20001168
    9b2c:	20000b34 	.word	0x20000b34
    9b30:	2000109c 	.word	0x2000109c
    9b34:	20001498 	.word	0x20001498
    9b38:	00023888 	.word	0x00023888

00009b3c <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    9b3c:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    9b3e:	4d0f      	ldr	r5, [pc, #60]	; (9b7c <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    9b40:	682c      	ldr	r4, [r5, #0]
    9b42:	f014 0401 	ands.w	r4, r4, #1
    9b46:	d002      	beq.n	9b4e <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    9b48:	4b0d      	ldr	r3, [pc, #52]	; (9b80 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    9b4a:	6818      	ldr	r0, [r3, #0]
    9b4c:	bd70      	pop	{r4, r5, r6, pc}
    9b4e:	2030      	movs	r0, #48	; 0x30
    9b50:	f009 fdf6 	bl	13740 <_Znwj>
    9b54:	4a0a      	ldr	r2, [pc, #40]	; (9b80 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    9b56:	6004      	str	r4, [r0, #0]
    9b58:	2105      	movs	r1, #5
    9b5a:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    9b5e:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    9b60:	7501      	strb	r1, [r0, #20]
    9b62:	6084      	str	r4, [r0, #8]
    9b64:	60c4      	str	r4, [r0, #12]
    9b66:	6104      	str	r4, [r0, #16]
    9b68:	6184      	str	r4, [r0, #24]
    9b6a:	61c4      	str	r4, [r0, #28]
    9b6c:	6204      	str	r4, [r0, #32]
    9b6e:	6244      	str	r4, [r0, #36]	; 0x24
    9b70:	6284      	str	r4, [r0, #40]	; 0x28
    9b72:	62c4      	str	r4, [r0, #44]	; 0x2c
    9b74:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    9b76:	6010      	str	r0, [r2, #0]
    9b78:	602b      	str	r3, [r5, #0]
    return *instance;
}
    9b7a:	bd70      	pop	{r4, r5, r6, pc}
    9b7c:	20001bf4 	.word	0x20001bf4
    9b80:	20001c00 	.word	0x20001c00

00009b84 <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    9b84:	4b01      	ldr	r3, [pc, #4]	; (9b8c <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    9b86:	685b      	ldr	r3, [r3, #4]
    9b88:	6003      	str	r3, [r0, #0]
    9b8a:	4770      	bx	lr
    9b8c:	e0001000 	.word	0xe0001000

00009b90 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9b90:	4b06      	ldr	r3, [pc, #24]	; (9bac <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    9b92:	6801      	ldr	r1, [r0, #0]
    9b94:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    9b96:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9b98:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    9b9a:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    9b9c:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    9b9e:	bf38      	it	cc
    9ba0:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    9ba2:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9ba4:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    9ba6:	bf88      	it	hi
    9ba8:	6083      	strhi	r3, [r0, #8]
    9baa:	4770      	bx	lr
    9bac:	e0001000 	.word	0xe0001000

00009bb0 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9bb0:	4a1c      	ldr	r2, [pc, #112]	; (9c24 <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    9bb2:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9bb4:	68d3      	ldr	r3, [r2, #12]
    9bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9bba:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    9bbc:	7d03      	ldrb	r3, [r0, #20]
    9bbe:	3b01      	subs	r3, #1
    9bc0:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    9bc2:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    9bc4:	7503      	strb	r3, [r0, #20]
    9bc6:	b923      	cbnz	r3, 9bd2 <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    9bc8:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9bca:	2205      	movs	r2, #5
        m_msTickCnt++;
    9bcc:	3301      	adds	r3, #1
    9bce:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9bd0:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    9bd2:	6825      	ldr	r5, [r4, #0]
    9bd4:	69a3      	ldr	r3, [r4, #24]
    9bd6:	406b      	eors	r3, r5
    9bd8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    9bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9be0:	d001      	beq.n	9be6 <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    9be2:	61a5      	str	r5, [r4, #24]
    9be4:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    9be6:	2d00      	cmp	r5, #0
    9be8:	db08      	blt.n	9bfc <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    9bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    9bee:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    9bf0:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9bf2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    9bf6:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    9bf8:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    9bfa:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    9bfc:	69e1      	ldr	r1, [r4, #28]
    9bfe:	3101      	adds	r1, #1
    9c00:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    9c02:	2278      	movs	r2, #120	; 0x78
    9c04:	2300      	movs	r3, #0
    9c06:	2000      	movs	r0, #0
    9c08:	f012 fe50 	bl	1c8ac <__aeabi_uldivmod>
    9c0c:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    9c0e:	b128      	cbz	r0, 9c1c <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    9c10:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    9c14:	00c3      	lsls	r3, r0, #3
    9c16:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    9c18:	62e3      	str	r3, [r4, #44]	; 0x2c
    9c1a:	e7e2      	b.n	9be2 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    9c1c:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    9c1e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9c20:	e7df      	b.n	9be2 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    9c22:	bf00      	nop
    9c24:	e000edf0 	.word	0xe000edf0

00009c28 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    9c28:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    9c2c:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    9c2e:	29c7      	cmp	r1, #199	; 0xc7
    9c30:	4a0d      	ldr	r2, [pc, #52]	; (9c68 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9c32:	f103 33ff 	add.w	r3, r3, #4294967295
    9c36:	bf8c      	ite	hi
    9c38:	2100      	movhi	r1, #0
    9c3a:	2101      	movls	r1, #1
    9c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    9c40:	7011      	strb	r1, [r2, #0]
    9c42:	d20e      	bcs.n	9c62 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9c44:	4a09      	ldr	r2, [pc, #36]	; (9c6c <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c46:	480a      	ldr	r0, [pc, #40]	; (9c70 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    9c48:	b410      	push	{r4}
    9c4a:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9c4e:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c50:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9c54:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9c56:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9c58:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9c5a:	6011      	str	r1, [r2, #0]
}
    9c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c60:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9c62:	2001      	movs	r0, #1
    9c64:	4770      	bx	lr
    9c66:	bf00      	nop
    9c68:	20001098 	.word	0x20001098
    9c6c:	e000e010 	.word	0xe000e010
    9c70:	e000ed00 	.word	0xe000ed00

00009c74 <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    9c74:	4b01      	ldr	r3, [pc, #4]	; (9c7c <Milliseconds+0x8>)
    9c76:	681b      	ldr	r3, [r3, #0]
    9c78:	6918      	ldr	r0, [r3, #16]
}
    9c7a:	4770      	bx	lr
    9c7c:	20001bfc 	.word	0x20001bfc

00009c80 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    9c80:	4b0e      	ldr	r3, [pc, #56]	; (9cbc <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    9c82:	4a0f      	ldr	r2, [pc, #60]	; (9cc0 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    9c84:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    9c86:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    9c88:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    9c8a:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    9c8c:	db0a      	blt.n	9ca4 <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    9c8e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    9c90:	490c      	ldr	r1, [pc, #48]	; (9cc4 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9c92:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    9c94:	4423      	add	r3, r4
    9c96:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9c9a:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    9ca2:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    9ca4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    9ca6:	4907      	ldr	r1, [pc, #28]	; (9cc4 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9ca8:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    9caa:	1b1b      	subs	r3, r3, r4
    9cac:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9cb0:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    9cb8:	4770      	bx	lr
    9cba:	bf00      	nop
    9cbc:	e0001000 	.word	0xe0001000
    9cc0:	20001bfc 	.word	0x20001bfc
    9cc4:	88888889 	.word	0x88888889

00009cc8 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    9cc8:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    9cca:	4e0d      	ldr	r6, [pc, #52]	; (9d00 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    9ccc:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    9cd0:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    9cd2:	d013      	beq.n	9cfc <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    9cd4:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9cd6:	2500      	movs	r5, #0
    9cd8:	1b1c      	subs	r4, r3, r4
    9cda:	428d      	cmp	r5, r1
    9cdc:	bf08      	it	eq
    9cde:	4284      	cmpeq	r4, r0
    9ce0:	d20c      	bcs.n	9cfc <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    9ce2:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9ce4:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9ce6:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9cea:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9cee:	2500      	movs	r5, #0
    9cf0:	461c      	mov	r4, r3
    9cf2:	428d      	cmp	r5, r1
    9cf4:	bf08      	it	eq
    9cf6:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    9cf8:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9cfa:	d3f2      	bcc.n	9ce2 <Delay_cycles+0x1a>
    }
}
    9cfc:	bc70      	pop	{r4, r5, r6}
    9cfe:	4770      	bx	lr
    9d00:	e0001000 	.word	0xe0001000

00009d04 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    9d04:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    9d06:	f7ff ff19 	bl	9b3c <_ZN9ClearCore9SysTiming8InstanceEv>
    9d0a:	4b01      	ldr	r3, [pc, #4]	; (9d10 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    9d0c:	6018      	str	r0, [r3, #0]
    9d0e:	bd08      	pop	{r3, pc}
    9d10:	20001bfc 	.word	0x20001bfc

00009d14 <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    9d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    9d16:	4e37      	ldr	r6, [pc, #220]	; (9df4 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    9d18:	6835      	ldr	r5, [r6, #0]
    9d1a:	f015 0501 	ands.w	r5, r5, #1
    9d1e:	d002      	beq.n	9d26 <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    9d20:	4b35      	ldr	r3, [pc, #212]	; (9df8 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    9d22:	6818      	ldr	r0, [r3, #0]
    9d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d26:	f641 10c4 	movw	r0, #6596	; 0x19c4
    9d2a:	f009 fd09 	bl	13740 <_Znwj>
    9d2e:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9d30:	2711      	movs	r7, #17
    9d32:	2312      	movs	r3, #18
    9d34:	6067      	str	r7, [r4, #4]
    9d36:	60e3      	str	r3, [r4, #12]
    9d38:	2213      	movs	r2, #19
    9d3a:	210d      	movs	r1, #13
    9d3c:	2714      	movs	r7, #20
    9d3e:	230b      	movs	r3, #11
    9d40:	6162      	str	r2, [r4, #20]
    9d42:	61e1      	str	r1, [r4, #28]
    9d44:	6367      	str	r7, [r4, #52]	; 0x34
    9d46:	6463      	str	r3, [r4, #68]	; 0x44
    9d48:	270c      	movs	r7, #12
    9d4a:	2302      	movs	r3, #2
    9d4c:	200f      	movs	r0, #15
    9d4e:	220e      	movs	r2, #14
    9d50:	211c      	movs	r1, #28
    9d52:	6323      	str	r3, [r4, #48]	; 0x30
    9d54:	63a3      	str	r3, [r4, #56]	; 0x38
    9d56:	6423      	str	r3, [r4, #64]	; 0x40
    9d58:	6523      	str	r3, [r4, #80]	; 0x50
    9d5a:	62e0      	str	r0, [r4, #44]	; 0x2c
    9d5c:	64e2      	str	r2, [r4, #76]	; 0x4c
    9d5e:	6561      	str	r1, [r4, #84]	; 0x54
    9d60:	6267      	str	r7, [r4, #36]	; 0x24
    9d62:	4629      	mov	r1, r5
    9d64:	63e7      	str	r7, [r4, #60]	; 0x3c
    9d66:	65a7      	str	r7, [r4, #88]	; 0x58
    9d68:	6025      	str	r5, [r4, #0]
    9d6a:	60a5      	str	r5, [r4, #8]
    9d6c:	6125      	str	r5, [r4, #16]
    9d6e:	61a5      	str	r5, [r4, #24]
    9d70:	6225      	str	r5, [r4, #32]
    9d72:	62a5      	str	r5, [r4, #40]	; 0x28
    9d74:	64a5      	str	r5, [r4, #72]	; 0x48
    9d76:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    9d7a:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    9d7e:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    9d82:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    9d86:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    9d8a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    9d8e:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    9d92:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    9d96:	f504 7094 	add.w	r0, r4, #296	; 0x128
    9d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9d9e:	f014 fdad 	bl	1e8fc <memset>
    9da2:	4629      	mov	r1, r5
    9da4:	f604 1028 	addw	r0, r4, #2344	; 0x928
    9da8:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    9dac:	f014 fda6 	bl	1e8fc <memset>
    9db0:	f641 176c 	movw	r7, #6508	; 0x196c
    9db4:	f641 1168 	movw	r1, #6504	; 0x1968
    9db8:	19e3      	adds	r3, r4, r7
    9dba:	f641 126a 	movw	r2, #6506	; 0x196a
    9dbe:	20c8      	movs	r0, #200	; 0xc8
    9dc0:	5260      	strh	r0, [r4, r1]
    9dc2:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    9dc6:	2108      	movs	r1, #8
    9dc8:	54a1      	strb	r1, [r4, r2]
    9dca:	3004      	adds	r0, #4
    9dcc:	51e5      	str	r5, [r4, r7]
    9dce:	4629      	mov	r1, r5
    9dd0:	605d      	str	r5, [r3, #4]
    9dd2:	609d      	str	r5, [r3, #8]
    9dd4:	60dd      	str	r5, [r3, #12]
    9dd6:	611d      	str	r5, [r3, #16]
    9dd8:	615d      	str	r5, [r3, #20]
    9dda:	223c      	movs	r2, #60	; 0x3c
    9ddc:	f014 fd8e 	bl	1e8fc <memset>
    static EthernetManager *instance = new EthernetManager();
    9de0:	4905      	ldr	r1, [pc, #20]	; (9df8 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9de2:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    9de6:	2301      	movs	r3, #1
    9de8:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9dea:	6015      	str	r5, [r2, #0]
    9dec:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    9dee:	6033      	str	r3, [r6, #0]
}
    9df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9df2:	bf00      	nop
    9df4:	20001c04 	.word	0x20001c04
    9df8:	20001c0c 	.word	0x20001c0c

00009dfc <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    9dfc:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    9dfe:	4b3e      	ldr	r3, [pc, #248]	; (9ef8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    9e00:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    9e04:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    9e08:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    9e0c:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e0e:	493b      	ldr	r1, [pc, #236]	; (9efc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    9e10:	f042 0210 	orr.w	r2, r2, #16
    9e14:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e16:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e18:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e1a:	6893      	ldr	r3, [r2, #8]
    9e1c:	0759      	lsls	r1, r3, #29
    9e1e:	d5fc      	bpl.n	9e1a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    9e20:	6813      	ldr	r3, [r2, #0]
    9e22:	f36f 1304 	bfc	r3, #4, #1
    9e26:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9e28:	6b53      	ldr	r3, [r2, #52]	; 0x34
    9e2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9e2e:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    9e30:	428b      	cmp	r3, r1
    9e32:	d05d      	beq.n	9ef0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    9e34:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    9e36:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e38:	4c31      	ldr	r4, [pc, #196]	; (9f00 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e3a:	492f      	ldr	r1, [pc, #188]	; (9ef8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9e3c:	f043 0310 	orr.w	r3, r3, #16
    9e40:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e42:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e44:	688b      	ldr	r3, [r1, #8]
    9e46:	075a      	lsls	r2, r3, #29
    9e48:	d5fc      	bpl.n	9e44 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    9e4a:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e4c:	4c2b      	ldr	r4, [pc, #172]	; (9efc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e4e:	4a2a      	ldr	r2, [pc, #168]	; (9ef8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9e50:	f36f 1304 	bfc	r3, #4, #1
    9e54:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9e56:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9e58:	680b      	ldr	r3, [r1, #0]
    9e5a:	f043 0310 	orr.w	r3, r3, #16
    9e5e:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e60:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e62:	6893      	ldr	r3, [r2, #8]
    9e64:	075b      	lsls	r3, r3, #29
    9e66:	d5fc      	bpl.n	9e62 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    9e68:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e6a:	4c26      	ldr	r4, [pc, #152]	; (9f04 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e6c:	4922      	ldr	r1, [pc, #136]	; (9ef8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9e6e:	f36f 1304 	bfc	r3, #4, #1
    9e72:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9e74:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9e76:	6813      	ldr	r3, [r2, #0]
    9e78:	f043 0310 	orr.w	r3, r3, #16
    9e7c:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e7e:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e80:	688b      	ldr	r3, [r1, #8]
    9e82:	075c      	lsls	r4, r3, #29
    9e84:	d5fc      	bpl.n	9e80 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    9e86:	680b      	ldr	r3, [r1, #0]
    9e88:	f36f 1304 	bfc	r3, #4, #1
    9e8c:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9e8e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9e90:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    9e92:	b12b      	cbz	r3, 9ea0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    9e94:	2301      	movs	r3, #1
    9e96:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    9e9e:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    9ea0:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ea2:	4c19      	ldr	r4, [pc, #100]	; (9f08 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9ea4:	4a14      	ldr	r2, [pc, #80]	; (9ef8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9ea6:	f043 0310 	orr.w	r3, r3, #16
    9eaa:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9eac:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9eae:	6893      	ldr	r3, [r2, #8]
    9eb0:	0759      	lsls	r1, r3, #29
    9eb2:	d5fc      	bpl.n	9eae <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    9eb4:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9eb6:	4c13      	ldr	r4, [pc, #76]	; (9f04 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9eb8:	490f      	ldr	r1, [pc, #60]	; (9ef8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9eba:	f36f 1304 	bfc	r3, #4, #1
    9ebe:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9ec0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9ec2:	6813      	ldr	r3, [r2, #0]
    9ec4:	f043 0310 	orr.w	r3, r3, #16
    9ec8:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9eca:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9ecc:	688b      	ldr	r3, [r1, #8]
    9ece:	075b      	lsls	r3, r3, #29
    9ed0:	d5fc      	bpl.n	9ecc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    9ed2:	680b      	ldr	r3, [r1, #0]
    9ed4:	f36f 1304 	bfc	r3, #4, #1
    9ed8:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9eda:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    9edc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9ee0:	2b07      	cmp	r3, #7
    9ee2:	d1d7      	bne.n	9e94 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    9ee4:	2300      	movs	r3, #0
    9ee6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9eea:	f85d 4b04 	ldr.w	r4, [sp], #4
    9eee:	4770      	bx	lr
        m_phyInitFailed = true;
    9ef0:	2301      	movs	r3, #1
    9ef2:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    9ef6:	4770      	bx	lr
    9ef8:	42000800 	.word	0x42000800
    9efc:	60020000 	.word	0x60020000
    9f00:	50028000 	.word	0x50028000
    9f04:	606e0000 	.word	0x606e0000
    9f08:	506e0700 	.word	0x506e0700

00009f0c <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    9f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9f10:	4be2      	ldr	r3, [pc, #904]	; (a29c <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    9f12:	681a      	ldr	r2, [r3, #0]
    9f14:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    9f16:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9f18:	d503      	bpl.n	9f22 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    9f1a:	681a      	ldr	r2, [r3, #0]
    9f1c:	0750      	lsls	r0, r2, #29
    9f1e:	f100 82a2 	bmi.w	a466 <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    9f22:	4ade      	ldr	r2, [pc, #888]	; (a29c <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9f24:	48de      	ldr	r0, [pc, #888]	; (a2a0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    9f26:	6813      	ldr	r3, [r2, #0]
    9f28:	f043 0310 	orr.w	r3, r3, #16
    9f2c:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    9f2e:	6853      	ldr	r3, [r2, #4]
    9f30:	f043 0301 	orr.w	r3, r3, #1
    9f34:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    9f36:	6853      	ldr	r3, [r2, #4]
    9f38:	f043 0302 	orr.w	r3, r3, #2
    9f3c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    9f3e:	6853      	ldr	r3, [r2, #4]
    9f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9f44:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    9f46:	6853      	ldr	r3, [r2, #4]
    9f48:	2104      	movs	r1, #4
    9f4a:	f361 4394 	bfi	r3, r1, #18, #3
    9f4e:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    9f50:	68d3      	ldr	r3, [r2, #12]
    9f52:	f36f 0300 	bfc	r3, #0, #1
    9f56:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    9f58:	6913      	ldr	r3, [r2, #16]
    9f5a:	f361 0304 	bfi	r3, r1, #0, #5
    9f5e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    9f60:	6913      	ldr	r3, [r2, #16]
    9f62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    9f66:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    9f68:	6913      	ldr	r3, [r2, #16]
    9f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9f6e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9f70:	6915      	ldr	r5, [r2, #16]
    9f72:	2302      	movs	r3, #2
    9f74:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9f78:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    9f7c:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9f7e:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    9f80:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9f84:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9f88:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    9f8c:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    9f90:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    9f94:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    9f98:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    9f9c:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    9fa0:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    9fa4:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9fa8:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9fac:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    9fb0:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9fb4:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9fb8:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    9fbc:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    9fc0:	66e3      	str	r3, [r4, #108]	; 0x6c
    9fc2:	6763      	str	r3, [r4, #116]	; 0x74
    9fc4:	67e3      	str	r3, [r4, #124]	; 0x7c
    9fc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    9fca:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9fce:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    9fd2:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9fd6:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9fda:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    9fde:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    9fe2:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    9fe6:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    9fea:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    9fee:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    9ff2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    9ff6:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    9ffa:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    9ffe:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    a002:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    a006:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    a00a:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    a00e:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    a012:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    a016:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a01a:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    a01e:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    a022:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a026:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    a02a:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    a02e:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a030:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    a034:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    a038:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    a03c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a040:	3610      	adds	r6, #16
    a042:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    a044:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a048:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    a04c:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    a050:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a052:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    a056:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a05a:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    a05e:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a060:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    a062:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    a066:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    a06a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    a06e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    a072:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    a076:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    a07a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    a07e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    a082:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    a086:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    a08a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    a08e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    a092:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a096:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a09a:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a09e:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    a0a0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a0a4:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    a0a8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a0ac:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    a0b0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    a0b4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    a0b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    a0bc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a0c0:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    a0c4:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    a0c8:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    a0cc:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    a0d0:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    a0d4:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    a0d8:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    a0dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a0e0:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a0e4:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a0e8:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a0ec:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a0f0:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a0f4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    a0f8:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    a0fc:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    a100:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    a104:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    a108:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a10c:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    a110:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a114:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a116:	6196      	str	r6, [r2, #24]
    a118:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a11c:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a120:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    a122:	6823      	ldr	r3, [r4, #0]
    a124:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    a126:	01db      	lsls	r3, r3, #7
    a128:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a12c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a130:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    a132:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    a136:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    a13a:	f042 0201 	orr.w	r2, r2, #1
    a13e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a142:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a146:	f011 0f01 	tst.w	r1, #1
    a14a:	f04f 010b 	mov.w	r1, #11
    a14e:	bf14      	ite	ne
    a150:	f361 1207 	bfine	r2, r1, #4, #4
    a154:	f361 0203 	bfieq	r2, r1, #0, #4
    a158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    a15c:	68a3      	ldr	r3, [r4, #8]
    a15e:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    a160:	01db      	lsls	r3, r3, #7
    a162:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a166:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a16a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a16c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a170:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a174:	f041 0101 	orr.w	r1, r1, #1
    a178:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a17c:	f012 0f01 	tst.w	r2, #1
    a180:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a184:	f04f 010b 	mov.w	r1, #11
    a188:	bf14      	ite	ne
    a18a:	f361 1207 	bfine	r2, r1, #4, #4
    a18e:	f361 0203 	bfieq	r2, r1, #0, #4
    a192:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    a196:	6923      	ldr	r3, [r4, #16]
    a198:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    a19a:	01db      	lsls	r3, r3, #7
    a19c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a1a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a1a4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a1a6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a1aa:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a1ae:	f041 0101 	orr.w	r1, r1, #1
    a1b2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a1b6:	f012 0f01 	tst.w	r2, #1
    a1ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a1be:	f04f 010b 	mov.w	r1, #11
    a1c2:	bf14      	ite	ne
    a1c4:	f361 1207 	bfine	r2, r1, #4, #4
    a1c8:	f361 0203 	bfieq	r2, r1, #0, #4
    a1cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    a1d0:	69a3      	ldr	r3, [r4, #24]
    a1d2:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    a1d4:	01db      	lsls	r3, r3, #7
    a1d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a1da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a1de:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a1e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a1e4:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a1e8:	f041 0101 	orr.w	r1, r1, #1
    a1ec:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a1f0:	f012 0f01 	tst.w	r2, #1
    a1f4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a1f8:	f04f 010b 	mov.w	r1, #11
    a1fc:	bf14      	ite	ne
    a1fe:	f361 1207 	bfine	r2, r1, #4, #4
    a202:	f361 0203 	bfieq	r2, r1, #0, #4
    a206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    a20a:	6a23      	ldr	r3, [r4, #32]
    a20c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    a20e:	01db      	lsls	r3, r3, #7
    a210:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a214:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a218:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a21a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a21e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a222:	f041 0101 	orr.w	r1, r1, #1
    a226:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a22a:	f012 0f01 	tst.w	r2, #1
    a22e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a232:	f04f 010b 	mov.w	r1, #11
    a236:	bf14      	ite	ne
    a238:	f361 1207 	bfine	r2, r1, #4, #4
    a23c:	f361 0203 	bfieq	r2, r1, #0, #4
    a240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    a244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a246:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    a248:	01db      	lsls	r3, r3, #7
    a24a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a24e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a252:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a254:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a258:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a25c:	f041 0101 	orr.w	r1, r1, #1
    a260:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a264:	f012 0f01 	tst.w	r2, #1
    a268:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a26c:	f04f 010b 	mov.w	r1, #11
    a270:	bf14      	ite	ne
    a272:	f361 1207 	bfine	r2, r1, #4, #4
    a276:	f361 0203 	bfieq	r2, r1, #0, #4
    a27a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    a27e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a280:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    a282:	01db      	lsls	r3, r3, #7
    a284:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a288:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a28c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a28e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a292:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a296:	f041 0101 	orr.w	r1, r1, #1
    a29a:	e003      	b.n	a2a4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    a29c:	42000800 	.word	0x42000800
    a2a0:	e000e100 	.word	0xe000e100
    a2a4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a2a8:	f012 0f01 	tst.w	r2, #1
    a2ac:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a2b0:	f04f 010b 	mov.w	r1, #11
    a2b4:	bf14      	ite	ne
    a2b6:	f361 1207 	bfine	r2, r1, #4, #4
    a2ba:	f361 0203 	bfieq	r2, r1, #0, #4
    a2be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    a2c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a2c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    a2c6:	01db      	lsls	r3, r3, #7
    a2c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a2cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a2d0:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a2d2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a2d6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a2da:	f041 0101 	orr.w	r1, r1, #1
    a2de:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a2e2:	f012 0f01 	tst.w	r2, #1
    a2e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a2ea:	f04f 010b 	mov.w	r1, #11
    a2ee:	bf14      	ite	ne
    a2f0:	f361 1207 	bfine	r2, r1, #4, #4
    a2f4:	f361 0203 	bfieq	r2, r1, #0, #4
    a2f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    a2fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a2fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    a300:	01db      	lsls	r3, r3, #7
    a302:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a306:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a30a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a30c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a310:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a314:	f041 0101 	orr.w	r1, r1, #1
    a318:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a31c:	f012 0f01 	tst.w	r2, #1
    a320:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a324:	f04f 010b 	mov.w	r1, #11
    a328:	bf14      	ite	ne
    a32a:	f361 1207 	bfine	r2, r1, #4, #4
    a32e:	f361 0203 	bfieq	r2, r1, #0, #4
    a332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    a336:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a338:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    a33a:	01db      	lsls	r3, r3, #7
    a33c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a340:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a344:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a346:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a34a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a34e:	f041 0101 	orr.w	r1, r1, #1
    a352:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a356:	f012 0f01 	tst.w	r2, #1
    a35a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a35e:	f04f 010b 	mov.w	r1, #11
    a362:	bf14      	ite	ne
    a364:	f361 1207 	bfine	r2, r1, #4, #4
    a368:	f361 0203 	bfieq	r2, r1, #0, #4
    a36c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a370:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a372:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a374:	01db      	lsls	r3, r3, #7
    a376:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    a37a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    a37e:	1850      	adds	r0, r2, r1
    a380:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a382:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a386:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a38a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a38e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a392:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a396:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a39a:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a39c:	bf14      	ite	ne
    a39e:	f36f 1007 	bfcne	r0, #4, #4
    a3a2:	f367 0003 	bfieq	r0, r7, #0, #4
    a3a6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a3aa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a3ae:	4932      	ldr	r1, [pc, #200]	; (a478 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    a3b0:	4a32      	ldr	r2, [pc, #200]	; (a47c <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a3b2:	f040 0001 	orr.w	r0, r0, #1
    a3b6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    a3ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a3be:	f040 0002 	orr.w	r0, r0, #2
    a3c2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a3c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a3cc:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    a3ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a3d0:	f043 0302 	orr.w	r3, r3, #2
    a3d4:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    a3d6:	7813      	ldrb	r3, [r2, #0]
    a3d8:	f36f 0341 	bfc	r3, #1, #1
    a3dc:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a3de:	6853      	ldr	r3, [r2, #4]
    a3e0:	0799      	lsls	r1, r3, #30
    a3e2:	d4fc      	bmi.n	a3de <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a3e6:	4925      	ldr	r1, [pc, #148]	; (a47c <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a3e8:	08c3      	lsrs	r3, r0, #3
    a3ea:	009b      	lsls	r3, r3, #2
    a3ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    a3f0:	2701      	movs	r7, #1
    a3f2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    a3f6:	4087      	lsls	r7, r0
    a3f8:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a3fa:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a3fe:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a400:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a402:	f04f 0e0f 	mov.w	lr, #15
    a406:	fa0e fe00 	lsl.w	lr, lr, r0
    a40a:	ea27 070e 	bic.w	r7, r7, lr
    a40e:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    a410:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    a414:	2705      	movs	r7, #5
    a416:	fa07 f000 	lsl.w	r0, r7, r0
    a41a:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    a41e:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    a420:	7813      	ldrb	r3, [r2, #0]
    a422:	f043 0302 	orr.w	r3, r3, #2
    a426:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a428:	684b      	ldr	r3, [r1, #4]
    a42a:	079b      	lsls	r3, r3, #30
    a42c:	d4fc      	bmi.n	a428 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    a42e:	4620      	mov	r0, r4
    a430:	f7ff fce4 	bl	9dfc <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a434:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a438:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a43c:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a440:	4b0f      	ldr	r3, [pc, #60]	; (a480 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a442:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a444:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a448:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a44a:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a44e:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a452:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a456:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a458:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a45a:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a45c:	6818      	ldr	r0, [r3, #0]
}
    a45e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a462:	f007 bd8f 	b.w	11f84 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a466:	681a      	ldr	r2, [r3, #0]
    a468:	f36f 02c3 	bfc	r2, #3, #1
    a46c:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a46e:	681a      	ldr	r2, [r3, #0]
    a470:	f36f 0282 	bfc	r2, #2, #1
    a474:	601a      	str	r2, [r3, #0]
    a476:	e554      	b.n	9f22 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a478:	42000800 	.word	0x42000800
    a47c:	40002800 	.word	0x40002800
    a480:	20001f34 	.word	0x20001f34

0000a484 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a488:	6d85      	ldr	r5, [r0, #88]	; 0x58
    a48a:	4ca1      	ldr	r4, [pc, #644]	; (a710 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    a48c:	4ba1      	ldr	r3, [pc, #644]	; (a714 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a48e:	49a2      	ldr	r1, [pc, #648]	; (a718 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a490:	2201      	movs	r2, #1
    a492:	40aa      	lsls	r2, r5
    a494:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    a496:	681a      	ldr	r2, [r3, #0]
    a498:	f042 0210 	orr.w	r2, r2, #16
    a49c:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a49e:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a4a0:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a4a2:	6893      	ldr	r3, [r2, #8]
    a4a4:	075d      	lsls	r5, r3, #29
    a4a6:	d5fc      	bpl.n	a4a2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    a4a8:	6813      	ldr	r3, [r2, #0]
    a4aa:	f36f 1304 	bfc	r3, #4, #1
    a4ae:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a4b0:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    a4b2:	07cc      	lsls	r4, r1, #31
    a4b4:	d415      	bmi.n	a4e2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    a4b6:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    a4b8:	bf44      	itt	mi
    a4ba:	2300      	movmi	r3, #0
    a4bc:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    a4c0:	078c      	lsls	r4, r1, #30
    a4c2:	d401      	bmi.n	a4c8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    a4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a4c8:	4b92      	ldr	r3, [pc, #584]	; (a714 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a4ca:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    a4cc:	2101      	movs	r1, #1
    a4ce:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a4d2:	0711      	lsls	r1, r2, #28
    a4d4:	d5f6      	bpl.n	a4c4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    a4d6:	681a      	ldr	r2, [r3, #0]
    a4d8:	0752      	lsls	r2, r2, #29
    a4da:	f100 8121 	bmi.w	a720 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    a4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a4e2:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a4e4:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    a4e6:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a4e8:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a4ea:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    a4ee:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a4f2:	d56d      	bpl.n	a5d0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    a4f4:	6813      	ldr	r3, [r2, #0]
    a4f6:	075f      	lsls	r7, r3, #29
    a4f8:	d56a      	bpl.n	a5d0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a4fa:	6813      	ldr	r3, [r2, #0]
    a4fc:	f36f 03c3 	bfc	r3, #3, #1
    a500:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a502:	6813      	ldr	r3, [r2, #0]
    a504:	f36f 0382 	bfc	r3, #2, #1
    a508:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    a50a:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a50e:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a512:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a516:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a51a:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a51e:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a522:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a526:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a52a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a52e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a532:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a536:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a53a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a542:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a546:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a54a:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a54e:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a552:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a556:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a55a:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a55e:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a562:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a566:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a56a:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a56e:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a572:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a57e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a582:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a586:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a58a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a58e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a592:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    a596:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a59a:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a59e:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a5a2:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a5a6:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a5aa:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    a5ae:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a5b2:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a5b6:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a5ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a5c2:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    a5c4:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a5c8:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a5cc:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    a5d0:	4b50      	ldr	r3, [pc, #320]	; (a714 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a5d2:	4d52      	ldr	r5, [pc, #328]	; (a71c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    a5d4:	681a      	ldr	r2, [r3, #0]
    a5d6:	f042 0210 	orr.w	r2, r2, #16
    a5da:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a5dc:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a5de:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a5e0:	6893      	ldr	r3, [r2, #8]
    a5e2:	075e      	lsls	r6, r3, #29
    a5e4:	d5fc      	bpl.n	a5e0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    a5e6:	6813      	ldr	r3, [r2, #0]
    a5e8:	f36f 1304 	bfc	r3, #4, #1
    a5ec:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a5ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a5f0:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    a5f2:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a5f4:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a5f8:	f366 0500 	bfi	r5, r6, #0, #1
    a5fc:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    a5fe:	6855      	ldr	r5, [r2, #4]
    a600:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a604:	f363 0541 	bfi	r5, r3, #1, #1
    a608:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a60a:	6813      	ldr	r3, [r2, #0]
    a60c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a610:	b96b      	cbnz	r3, a62e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    a612:	429c      	cmp	r4, r3
    a614:	f43f af4f 	beq.w	a4b6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a618:	b16c      	cbz	r4, a636 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    a61a:	4b3e      	ldr	r3, [pc, #248]	; (a714 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a61c:	681a      	ldr	r2, [r3, #0]
    a61e:	f042 0208 	orr.w	r2, r2, #8
    a622:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a624:	681a      	ldr	r2, [r3, #0]
    a626:	f042 0204 	orr.w	r2, r2, #4
    a62a:	601a      	str	r2, [r3, #0]
    a62c:	e743      	b.n	a4b6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a62e:	6813      	ldr	r3, [r2, #0]
    a630:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a634:	e7ed      	b.n	a612 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a636:	4b37      	ldr	r3, [pc, #220]	; (a714 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a638:	681a      	ldr	r2, [r3, #0]
    a63a:	f364 02c3 	bfi	r2, r4, #3, #1
    a63e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a640:	681a      	ldr	r2, [r3, #0]
    a642:	f364 0282 	bfi	r2, r4, #2, #1
    a646:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a648:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a64c:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a650:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a654:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a658:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a65c:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a660:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a664:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a668:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a66c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a670:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a674:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a678:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a680:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a684:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a688:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a68c:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a690:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a694:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a698:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a69c:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a6a0:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a6a4:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a6a8:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a6ac:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a6b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a6b8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6bc:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a6c0:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6c4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a6c8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6cc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    a6d0:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a6d4:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a6d8:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a6dc:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a6e0:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a6e4:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a6e8:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a6ec:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a6f0:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a6f4:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a6f8:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    a6fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a704:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a708:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    a70c:	e6d3      	b.n	a4b6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    a70e:	bf00      	nop
    a710:	40002800 	.word	0x40002800
    a714:	42000800 	.word	0x42000800
    a718:	606e0000 	.word	0x606e0000
    a71c:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a720:	681a      	ldr	r2, [r3, #0]
    a722:	f36f 02c3 	bfc	r2, #3, #1
    a726:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a728:	681a      	ldr	r2, [r3, #0]
    a72a:	f36f 0282 	bfc	r2, #2, #1
    a72e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a730:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a734:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a738:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a73c:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a740:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a744:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a748:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a74c:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a750:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a754:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a758:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a75c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a768:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a76c:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a770:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a774:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a778:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a77c:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a780:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a784:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a788:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a78c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a794:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a798:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a79c:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7a0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7a4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7a8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7ac:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7b0:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    a7b4:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a7b8:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a7bc:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a7c0:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a7c4:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a7c8:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a7cc:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a7d0:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    a7d4:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a7d8:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a7dc:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a7e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a7e8:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    a7ea:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a7ee:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a7f2:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    a7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a7fa:	bf00      	nop

0000a7fc <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    a7fc:	4b0b      	ldr	r3, [pc, #44]	; (a82c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    a7fe:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    a800:	695a      	ldr	r2, [r3, #20]
    a802:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    a804:	6a1a      	ldr	r2, [r3, #32]
    a806:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    a808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    a80a:	9a00      	ldr	r2, [sp, #0]
    a80c:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    a80e:	bf44      	itt	mi
    a810:	9a00      	ldrmi	r2, [sp, #0]
    a812:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    a814:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    a816:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    a818:	079b      	lsls	r3, r3, #30
        m_recv = true;
    a81a:	bf44      	itt	mi
    a81c:	2301      	movmi	r3, #1
    a81e:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    a822:	4b02      	ldr	r3, [pc, #8]	; (a82c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    a824:	621a      	str	r2, [r3, #32]
}
    a826:	b002      	add	sp, #8
    a828:	4770      	bx	lr
    a82a:	bf00      	nop
    a82c:	42000800 	.word	0x42000800

0000a830 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    a830:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    a832:	f7ff fa6f 	bl	9d14 <_ZN9ClearCore15EthernetManager8InstanceEv>
    a836:	4b01      	ldr	r3, [pc, #4]	; (a83c <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    a838:	6018      	str	r0, [r3, #0]
    a83a:	bd08      	pop	{r3, pc}
    a83c:	20001c08 	.word	0x20001c08

0000a840 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    a842:	4f46      	ldr	r7, [pc, #280]	; (a95c <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    a844:	f8df e118 	ldr.w	lr, [pc, #280]	; a960 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    a848:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    a84a:	4604      	mov	r4, r0
    m_lastOutput(0) {
    a84c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a84e:	4625      	mov	r5, r4
    a850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a852:	e896 0003 	ldmia.w	r6, {r0, r1}
    a856:	f107 0618 	add.w	r6, r7, #24
    a85a:	e885 0003 	stmia.w	r5, {r0, r1}
    a85e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a860:	f104 0518 	add.w	r5, r4, #24
    a864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a866:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    a86a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a86e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    a872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a874:	f104 0534 	add.w	r5, r4, #52	; 0x34
    a878:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    a87c:	2608      	movs	r6, #8
    a87e:	257f      	movs	r5, #127	; 0x7f
    a880:	23c8      	movs	r3, #200	; 0xc8
    a882:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    a886:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    a88a:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    a88e:	2500      	movs	r5, #0
    a890:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    a894:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a896:	21fe      	movs	r1, #254	; 0xfe
    a898:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    a89c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a8a0:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    a8a4:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    a8a6:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a8a8:	4629      	mov	r1, r5
    a8aa:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    a8ac:	6563      	str	r3, [r4, #84]	; 0x54
    a8ae:	65a5      	str	r5, [r4, #88]	; 0x58
    a8b0:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    a8b2:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    a8b6:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    a8ba:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a8bc:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    a8c0:	67a5      	str	r5, [r4, #120]	; 0x78
    a8c2:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    a8c6:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    a8c8:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a8ca:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    a8ce:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    a8d2:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    a8d6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a8da:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    a8de:	2240      	movs	r2, #64	; 0x40
    a8e0:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    a8e4:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    a8e8:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    a8ec:	f014 f806 	bl	1e8fc <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    a8f0:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    a8f4:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a8f8:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    a8fc:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    a900:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a904:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    a908:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    a90c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    a910:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    a914:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a918:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    a91c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    a920:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    a924:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    a928:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    a92c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    a930:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    a934:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    a938:	4620      	mov	r0, r4
    m_lastOutput(0) {
    a93a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    a93e:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    a942:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    a946:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    a94a:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    a94e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    a952:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a956:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a95c:	000235ec 	.word	0x000235ec
    a960:	0fe080fc 	.word	0x0fe080fc

0000a964 <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    a964:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    a966:	4a64      	ldr	r2, [pc, #400]	; (aaf8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a968:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a96c:	f36f 1386 	bfc	r3, #6, #1
    a970:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a974:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a978:	065d      	lsls	r5, r3, #25
    a97a:	d4fb      	bmi.n	a974 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    a97c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a980:	495d      	ldr	r1, [pc, #372]	; (aaf8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a982:	2405      	movs	r4, #5
    a984:	f364 0303 	bfi	r3, r4, #0, #4
    a988:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a98c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a994:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a998:	684b      	ldr	r3, [r1, #4]
    a99a:	f013 0314 	ands.w	r3, r3, #20
    a99e:	d1fb      	bne.n	a998 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a9a0:	4d56      	ldr	r5, [pc, #344]	; (aafc <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a9a2:	4957      	ldr	r1, [pc, #348]	; (ab00 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a9a4:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a9a6:	4a57      	ldr	r2, [pc, #348]	; (ab04 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a9a8:	f044 0404 	orr.w	r4, r4, #4
    a9ac:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a9ae:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    a9b2:	2402      	movs	r4, #2
    a9b4:	f364 1507 	bfi	r5, r4, #4, #4
    a9b8:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    a9bc:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    a9c0:	f045 0501 	orr.w	r5, r5, #1
    a9c4:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    a9c8:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a9cc:	f364 1507 	bfi	r5, r4, #4, #4
    a9d0:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    a9d4:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    a9d8:	f045 0501 	orr.w	r5, r5, #1
    a9dc:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    a9e0:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a9e4:	f364 0503 	bfi	r5, r4, #0, #4
    a9e8:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a9ec:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a9f0:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a9f2:	f045 0501 	orr.w	r5, r5, #1
    a9f6:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    a9fa:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a9fe:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    aa02:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    aa06:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    aa0a:	6811      	ldr	r1, [r2, #0]
    aa0c:	f363 0141 	bfi	r1, r3, #1, #1
    aa10:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    aa12:	69d3      	ldr	r3, [r2, #28]
    aa14:	f013 0302 	ands.w	r3, r3, #2
    aa18:	d1fb      	bne.n	aa12 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    aa1a:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    aa1c:	4939      	ldr	r1, [pc, #228]	; (ab04 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    aa1e:	f044 040c 	orr.w	r4, r4, #12
    aa22:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    aa24:	6814      	ldr	r4, [r2, #0]
    aa26:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    aa2a:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    aa2e:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    aa30:	6854      	ldr	r4, [r2, #4]
    aa32:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    aa36:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    aa38:	6894      	ldr	r4, [r2, #8]
    aa3a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    aa3e:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    aa40:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    aa42:	6813      	ldr	r3, [r2, #0]
    aa44:	f043 0302 	orr.w	r3, r3, #2
    aa48:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    aa4a:	69cb      	ldr	r3, [r1, #28]
    aa4c:	079c      	lsls	r4, r3, #30
    aa4e:	d4fc      	bmi.n	aa4a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    aa50:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    aa54:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    aa58:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    aa5c:	4a29      	ldr	r2, [pc, #164]	; (ab04 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    aa5e:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    aa60:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    aa62:	7e13      	ldrb	r3, [r2, #24]
    aa64:	0799      	lsls	r1, r3, #30
    aa66:	d5fc      	bpl.n	aa62 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    aa68:	4b25      	ldr	r3, [pc, #148]	; (ab00 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    aa6a:	4a26      	ldr	r2, [pc, #152]	; (ab04 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    aa6c:	2104      	movs	r1, #4
    aa6e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    aa72:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    aa76:	7e13      	ldrb	r3, [r2, #24]
    aa78:	075b      	lsls	r3, r3, #29
    aa7a:	d5fc      	bpl.n	aa76 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    aa7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    aa7e:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    aa82:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    aa86:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    aa8a:	4063      	eors	r3, r4
    aa8c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    aa90:	bb7a      	cbnz	r2, aaf2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    aa92:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    aa96:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    aa9a:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    aa9e:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    aaa2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    aaa6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    aaaa:	4059      	eors	r1, r3
    aaac:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    aaae:	404b      	eors	r3, r1
    aab0:	ea83 0105 	eor.w	r1, r3, r5
    aab4:	4031      	ands	r1, r6
    aab6:	4059      	eors	r1, r3
    aab8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    aabc:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    aac0:	404a      	eors	r2, r1
    aac2:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    aac4:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    aac6:	b135      	cbz	r5, aad6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    aac8:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    aacc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    aad0:	b10a      	cbz	r2, aad6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    aad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    aad6:	4d0b      	ldr	r5, [pc, #44]	; (ab04 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    aad8:	4909      	ldr	r1, [pc, #36]	; (ab00 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    aada:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    aade:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    aae0:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    aae2:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    aae4:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    aae6:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    aaea:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    aaec:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    aaf0:	4770      	bx	lr
        output = m_altOutput;
    aaf2:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    aaf6:	e7ee      	b.n	aad6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    aaf8:	40001c00 	.word	0x40001c00
    aafc:	40000800 	.word	0x40000800
    ab00:	41008000 	.word	0x41008000
    ab04:	43000800 	.word	0x43000800

0000ab08 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    ab08:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d078      	beq.n	ac02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    ab10:	6d83      	ldr	r3, [r0, #88]	; 0x58
    ab12:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    ab14:	b4f0      	push	{r4, r5, r6, r7}
    ab16:	6582      	str	r2, [r0, #88]	; 0x58
    ab18:	b90b      	cbnz	r3, ab1e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    ab1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
    ab1c:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    ab1e:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    ab20:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    ab24:	428a      	cmp	r2, r1
    ab26:	bf34      	ite	cc
    ab28:	220c      	movcc	r2, #12
    ab2a:	2208      	movcs	r2, #8
    ab2c:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    ab2e:	3301      	adds	r3, #1
    ab30:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    ab32:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    ab34:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    ab38:	2b3e      	cmp	r3, #62	; 0x3e
    ab3a:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    ab3e:	d961      	bls.n	ac04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    ab40:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    ab44:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    ab48:	2400      	movs	r4, #0
    ab4a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    ab4e:	2b00      	cmp	r3, #0
    ab50:	f000 817a 	beq.w	ae48 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    ab54:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    ab58:	3101      	adds	r1, #1
    ab5a:	b2c9      	uxtb	r1, r1
    ab5c:	4299      	cmp	r1, r3
    ab5e:	460a      	mov	r2, r1
    ab60:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    ab64:	f2c0 817e 	blt.w	ae64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    ab68:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    ab6c:	4623      	mov	r3, r4
    ab6e:	e04c      	b.n	ac0a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    ab70:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    ab72:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    ab74:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ab78:	49b1      	ldr	r1, [pc, #708]	; (ae40 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    ab7a:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ab7e:	7e0b      	ldrb	r3, [r1, #24]
    ab80:	079c      	lsls	r4, r3, #30
    ab82:	d5fc      	bpl.n	ab7e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    ab84:	4baf      	ldr	r3, [pc, #700]	; (ae44 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    ab86:	49ae      	ldr	r1, [pc, #696]	; (ae40 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    ab88:	2404      	movs	r4, #4
    ab8a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    ab8e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    ab92:	7e0b      	ldrb	r3, [r1, #24]
    ab94:	075b      	lsls	r3, r3, #29
    ab96:	d5fc      	bpl.n	ab92 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    ab98:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ab9a:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    ab9e:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    aba2:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    aba6:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    abaa:	4073      	eors	r3, r6
    abac:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    abb0:	2900      	cmp	r1, #0
    abb2:	f040 80d4 	bne.w	ad5e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    abb6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    abba:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    abbe:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    abc2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    abc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    abca:	405a      	eors	r2, r3
    abcc:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    abce:	4053      	eors	r3, r2
    abd0:	ea83 0204 	eor.w	r2, r3, r4
    abd4:	402a      	ands	r2, r5
    abd6:	405a      	eors	r2, r3
    abd8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    abdc:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    abe0:	4051      	eors	r1, r2
    abe2:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    abe4:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    abe6:	b134      	cbz	r4, abf6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    abe8:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    abec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    abf0:	b10a      	cbz	r2, abf6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    abf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    abf6:	4a92      	ldr	r2, [pc, #584]	; (ae40 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    abf8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    abfc:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    abfe:	6293      	str	r3, [r2, #40]	; 0x28
}
    ac00:	bcf0      	pop	{r4, r5, r6, r7}
    ac02:	4770      	bx	lr
    ac04:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    ac08:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    ac0a:	4293      	cmp	r3, r2
    ac0c:	bfb4      	ite	lt
    ac0e:	230c      	movlt	r3, #12
    ac10:	2308      	movge	r3, #8
    ac12:	4403      	add	r3, r0
            if (!m_activeMask) {
    ac14:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    ac18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    ac1a:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    ac1e:	2900      	cmp	r1, #0
    ac20:	d0a6      	beq.n	ab70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    ac22:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    ac26:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    ac28:	3301      	adds	r3, #1
    ac2a:	b2db      	uxtb	r3, r3
    ac2c:	2b3f      	cmp	r3, #63	; 0x3f
    ac2e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    ac32:	f200 8097 	bhi.w	ad64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    ac36:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    ac3a:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    ac3c:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    ac3e:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    ac40:	d004      	beq.n	ac4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    ac42:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    ac46:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac48:	bfb8      	it	lt
    ac4a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac4c:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    ac50:	420a      	tst	r2, r1
    ac52:	d004      	beq.n	ac5e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    ac54:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    ac58:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac5a:	bfb8      	it	lt
    ac5c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac5e:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    ac62:	420a      	tst	r2, r1
    ac64:	d004      	beq.n	ac70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    ac66:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    ac6a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac6c:	bfb8      	it	lt
    ac6e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac70:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    ac74:	420a      	tst	r2, r1
    ac76:	d004      	beq.n	ac82 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    ac78:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    ac7c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac7e:	bfb8      	it	lt
    ac80:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac82:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    ac86:	420a      	tst	r2, r1
    ac88:	d004      	beq.n	ac94 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    ac8a:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    ac8e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac90:	bfb8      	it	lt
    ac92:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac94:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    ac98:	420a      	tst	r2, r1
    ac9a:	d004      	beq.n	aca6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    ac9c:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    aca0:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aca2:	bfb8      	it	lt
    aca4:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aca6:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    acaa:	420a      	tst	r2, r1
    acac:	d004      	beq.n	acb8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    acae:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    acb2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    acb4:	bfb8      	it	lt
    acb6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    acb8:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    acbc:	420a      	tst	r2, r1
    acbe:	d004      	beq.n	acca <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    acc0:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    acc4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    acc6:	bfb8      	it	lt
    acc8:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    acca:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    acce:	420a      	tst	r2, r1
    acd0:	d004      	beq.n	acdc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    acd2:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    acd6:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    acd8:	bfb8      	it	lt
    acda:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    acdc:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    ace0:	420a      	tst	r2, r1
    ace2:	d004      	beq.n	acee <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    ace4:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    ace8:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    acea:	bfb8      	it	lt
    acec:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    acee:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    acf2:	420a      	tst	r2, r1
    acf4:	d004      	beq.n	ad00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    acf6:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    acfa:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    acfc:	bfb8      	it	lt
    acfe:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad00:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    ad04:	420a      	tst	r2, r1
    ad06:	d004      	beq.n	ad12 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    ad08:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    ad0c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad0e:	bfb8      	it	lt
    ad10:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad12:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    ad16:	420a      	tst	r2, r1
    ad18:	d004      	beq.n	ad24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    ad1a:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    ad1e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad20:	bfb8      	it	lt
    ad22:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad24:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    ad28:	420a      	tst	r2, r1
    ad2a:	d004      	beq.n	ad36 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    ad2c:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    ad30:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad32:	bfb8      	it	lt
    ad34:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad36:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    ad3a:	420a      	tst	r2, r1
    ad3c:	d004      	beq.n	ad48 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    ad3e:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    ad42:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad44:	bfb8      	it	lt
    ad46:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad48:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    ad4c:	4211      	tst	r1, r2
    ad4e:	d004      	beq.n	ad5a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    ad50:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    ad54:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad56:	bfb8      	it	lt
    ad58:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    ad5a:	6782      	str	r2, [r0, #120]	; 0x78
    ad5c:	e70c      	b.n	ab78 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    ad5e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    ad62:	e748      	b.n	abf6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    ad64:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    ad66:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    ad6a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    ad6e:	d004      	beq.n	ad7a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    ad70:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    ad74:	2a00      	cmp	r2, #0
    ad76:	f040 80cb 	bne.w	af10 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    ad7a:	078b      	lsls	r3, r1, #30
    ad7c:	d504      	bpl.n	ad88 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    ad7e:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    ad82:	2b00      	cmp	r3, #0
    ad84:	f040 80be 	bne.w	af04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    ad88:	074f      	lsls	r7, r1, #29
    ad8a:	d504      	bpl.n	ad96 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    ad8c:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    ad90:	2b00      	cmp	r3, #0
    ad92:	f040 80b1 	bne.w	aef8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    ad96:	070e      	lsls	r6, r1, #28
    ad98:	d504      	bpl.n	ada4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    ad9a:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    ad9e:	2b00      	cmp	r3, #0
    ada0:	f040 80a4 	bne.w	aeec <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    ada4:	06cd      	lsls	r5, r1, #27
    ada6:	d504      	bpl.n	adb2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    ada8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    adac:	2b00      	cmp	r3, #0
    adae:	f040 8097 	bne.w	aee0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    adb2:	068c      	lsls	r4, r1, #26
    adb4:	d504      	bpl.n	adc0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    adb6:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    adba:	2b00      	cmp	r3, #0
    adbc:	f040 808a 	bne.w	aed4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    adc0:	064b      	lsls	r3, r1, #25
    adc2:	d503      	bpl.n	adcc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    adc4:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    adc8:	2b00      	cmp	r3, #0
    adca:	d17d      	bne.n	aec8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    adcc:	060f      	lsls	r7, r1, #24
    adce:	d503      	bpl.n	add8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    add0:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    add4:	2b00      	cmp	r3, #0
    add6:	d171      	bne.n	aebc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    add8:	05ce      	lsls	r6, r1, #23
    adda:	d503      	bpl.n	ade4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    addc:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    ade0:	2b00      	cmp	r3, #0
    ade2:	d165      	bne.n	aeb0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    ade4:	058d      	lsls	r5, r1, #22
    ade6:	d503      	bpl.n	adf0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    ade8:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    adec:	2b00      	cmp	r3, #0
    adee:	d159      	bne.n	aea4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    adf0:	054c      	lsls	r4, r1, #21
    adf2:	d503      	bpl.n	adfc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    adf4:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    adf8:	2b00      	cmp	r3, #0
    adfa:	d14d      	bne.n	ae98 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    adfc:	050b      	lsls	r3, r1, #20
    adfe:	d503      	bpl.n	ae08 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    ae00:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    ae04:	2b00      	cmp	r3, #0
    ae06:	d141      	bne.n	ae8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    ae08:	04cf      	lsls	r7, r1, #19
    ae0a:	d503      	bpl.n	ae14 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    ae0c:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    ae10:	2b00      	cmp	r3, #0
    ae12:	d135      	bne.n	ae80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    ae14:	048e      	lsls	r6, r1, #18
    ae16:	d502      	bpl.n	ae1e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    ae18:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    ae1c:	bb53      	cbnz	r3, ae74 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    ae1e:	044d      	lsls	r5, r1, #17
    ae20:	d502      	bpl.n	ae28 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    ae22:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    ae26:	b9fb      	cbnz	r3, ae68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    ae28:	0bcb      	lsrs	r3, r1, #15
    ae2a:	d096      	beq.n	ad5a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    ae2c:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    ae30:	2b00      	cmp	r3, #0
    ae32:	d092      	beq.n	ad5a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    ae34:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    ae38:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    ae3c:	430a      	orrs	r2, r1
    ae3e:	e78c      	b.n	ad5a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    ae40:	43000800 	.word	0x43000800
    ae44:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    ae48:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    ae4c:	3901      	subs	r1, #1
    ae4e:	b2c9      	uxtb	r1, r1
    ae50:	42a1      	cmp	r1, r4
    ae52:	460a      	mov	r2, r1
    ae54:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    ae58:	f73f aed7 	bgt.w	ac0a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    ae5c:	2101      	movs	r1, #1
    ae5e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ae62:	e6d2      	b.n	ac0a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    ae64:	4623      	mov	r3, r4
    ae66:	e6d0      	b.n	ac0a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    ae68:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    ae6c:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    ae70:	4322      	orrs	r2, r4
    ae72:	e7d9      	b.n	ae28 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    ae74:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    ae78:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    ae7c:	4322      	orrs	r2, r4
    ae7e:	e7ce      	b.n	ae1e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    ae80:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    ae84:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    ae88:	4322      	orrs	r2, r4
    ae8a:	e7c3      	b.n	ae14 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    ae8c:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    ae90:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    ae94:	4322      	orrs	r2, r4
    ae96:	e7b7      	b.n	ae08 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    ae98:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    ae9c:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    aea0:	4322      	orrs	r2, r4
    aea2:	e7ab      	b.n	adfc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    aea4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    aea8:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    aeac:	4322      	orrs	r2, r4
    aeae:	e79f      	b.n	adf0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    aeb0:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    aeb4:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    aeb8:	4322      	orrs	r2, r4
    aeba:	e793      	b.n	ade4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    aebc:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    aec0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    aec4:	4322      	orrs	r2, r4
    aec6:	e787      	b.n	add8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    aec8:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    aecc:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    aed0:	4322      	orrs	r2, r4
    aed2:	e77b      	b.n	adcc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    aed4:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    aed8:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    aedc:	4322      	orrs	r2, r4
    aede:	e76f      	b.n	adc0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    aee0:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    aee4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    aee8:	4322      	orrs	r2, r4
    aeea:	e762      	b.n	adb2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    aeec:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    aef0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    aef4:	4322      	orrs	r2, r4
    aef6:	e755      	b.n	ada4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    aef8:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    aefc:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    af00:	4322      	orrs	r2, r4
    af02:	e748      	b.n	ad96 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    af04:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    af08:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    af0c:	4322      	orrs	r2, r4
    af0e:	e73b      	b.n	ad88 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    af10:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    af14:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    af18:	e72f      	b.n	ad7a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    af1a:	bf00      	nop

0000af1c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    af20:	2301      	movs	r3, #1
    af22:	f100 0834 	add.w	r8, r0, #52	; 0x34
    af26:	4e4d      	ldr	r6, [pc, #308]	; (b05c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    af28:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    af2c:	b083      	sub	sp, #12
    af2e:	4681      	mov	r9, r0
    m_useAltOutput = true;
    af30:	4645      	mov	r5, r8
    af32:	f100 0444 	add.w	r4, r0, #68	; 0x44
    af36:	2200      	movs	r2, #0
    af38:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    af3a:	f855 3b04 	ldr.w	r3, [r5], #4
    af3e:	4313      	orrs	r3, r2
    af40:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    af44:	4630      	mov	r0, r6
    af46:	4639      	mov	r1, r7
    af48:	f7fe febe 	bl	9cc8 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    af4c:	42a5      	cmp	r5, r4
    af4e:	d002      	beq.n	af56 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    af50:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    af54:	e7f1      	b.n	af3a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    af56:	f109 0318 	add.w	r3, r9, #24
    af5a:	4e40      	ldr	r6, [pc, #256]	; (b05c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    af5c:	9301      	str	r3, [sp, #4]
    af5e:	469b      	mov	fp, r3
    af60:	f04f 0a00 	mov.w	sl, #0
    af64:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    af66:	f1ba 0f06 	cmp.w	sl, #6
    af6a:	4630      	mov	r0, r6
    af6c:	4639      	mov	r1, r7
    af6e:	f10a 0a01 	add.w	sl, sl, #1
    af72:	d148      	bne.n	b006 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    af74:	f8db 2000 	ldr.w	r2, [fp]
    af78:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    af7c:	4837      	ldr	r0, [pc, #220]	; (b05c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    af7e:	4313      	orrs	r3, r2
    af80:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    af84:	2100      	movs	r1, #0
    af86:	f7fe fe9f 	bl	9cc8 <Delay_cycles>
    af8a:	4835      	ldr	r0, [pc, #212]	; (b060 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    af8c:	4e33      	ldr	r6, [pc, #204]	; (b05c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    af8e:	2100      	movs	r1, #0
    af90:	f7fe fe9a 	bl	9cc8 <Delay_cycles>
    af94:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    af96:	f858 2b04 	ldr.w	r2, [r8], #4
    af9a:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    af9e:	ea23 0302 	bic.w	r3, r3, r2
    afa2:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    afa6:	4630      	mov	r0, r6
    afa8:	4639      	mov	r1, r7
    afaa:	f7fe fe8d 	bl	9cc8 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    afae:	4545      	cmp	r5, r8
    afb0:	d1f1      	bne.n	af96 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    afb2:	f3bf 8f5b 	dmb	ish
    afb6:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    afba:	e853 2f00 	ldrex	r2, [r3]
    afbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    afc2:	e843 2100 	strex	r1, r2, [r3]
    afc6:	2900      	cmp	r1, #0
    afc8:	d1f7      	bne.n	afba <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    afca:	f3bf 8f5b 	dmb	ish
    afce:	4e23      	ldr	r6, [pc, #140]	; (b05c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    afd0:	2500      	movs	r5, #0
    afd2:	2700      	movs	r7, #0
    afd4:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    afd6:	2d06      	cmp	r5, #6
    afd8:	461a      	mov	r2, r3
    afda:	4630      	mov	r0, r6
    afdc:	4639      	mov	r1, r7
    afde:	f105 0501 	add.w	r5, r5, #1
    afe2:	d122      	bne.n	b02a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    afe4:	681a      	ldr	r2, [r3, #0]
    afe6:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    afea:	481c      	ldr	r0, [pc, #112]	; (b05c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    afec:	ea23 0302 	bic.w	r3, r3, r2
    aff0:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    aff4:	2100      	movs	r1, #0
    aff6:	f7fe fe67 	bl	9cc8 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    affa:	2300      	movs	r3, #0
    affc:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    b000:	b003      	add	sp, #12
    b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    b006:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    b00a:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    b00e:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    b012:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    b014:	4313      	orrs	r3, r2
    b016:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b01a:	f7fe fe55 	bl	9cc8 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    b01e:	f1ba 0f07 	cmp.w	sl, #7
    b022:	f10b 0b04 	add.w	fp, fp, #4
    b026:	d19e      	bne.n	af66 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    b028:	e7af      	b.n	af8a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    b02a:	f853 3c18 	ldr.w	r3, [r3, #-24]
    b02e:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    b032:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    b034:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    b038:	ea23 0302 	bic.w	r3, r3, r2
    b03c:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b040:	9b01      	ldr	r3, [sp, #4]
    b042:	3304      	adds	r3, #4
    b044:	9301      	str	r3, [sp, #4]
    b046:	f7fe fe3f 	bl	9cc8 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    b04a:	2d07      	cmp	r5, #7
    b04c:	d1c2      	bne.n	afd4 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    b04e:	2300      	movs	r3, #0
    b050:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    b054:	b003      	add	sp, #12
    b056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b05a:	bf00      	nop
    b05c:	002dc6c0 	.word	0x002dc6c0
    b060:	005b8d80 	.word	0x005b8d80

0000b064 <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    b066:	4d0e      	ldr	r5, [pc, #56]	; (b0a0 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    b068:	682b      	ldr	r3, [r5, #0]
    b06a:	f013 0401 	ands.w	r4, r3, #1
    b06e:	d002      	beq.n	b076 <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    b070:	4b0c      	ldr	r3, [pc, #48]	; (b0a4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    b072:	6818      	ldr	r0, [r3, #0]
    b074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b076:	2010      	movs	r0, #16
    b078:	f008 fb62 	bl	13740 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    b07c:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    b07e:	4909      	ldr	r1, [pc, #36]	; (b0a4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    b080:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b082:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    b084:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    b086:	2617      	movs	r6, #23
      m_initialized(false) {
    b088:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    b08a:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    b08c:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    b08e:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    b090:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    b092:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    b094:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    b096:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b098:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b09a:	7342      	strb	r2, [r0, #13]
}
    b09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b09e:	bf00      	nop
    b0a0:	20001c10 	.word	0x20001c10
    b0a4:	20001c18 	.word	0x20001c18

0000b0a8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    b0a8:	7843      	ldrb	r3, [r0, #1]
    b0aa:	428b      	cmp	r3, r1
    b0ac:	d06d      	beq.n	b18a <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    b0ae:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    b0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    b0b4:	d071      	beq.n	b19a <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    b0b6:	d363      	bcc.n	b180 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    b0b8:	2902      	cmp	r1, #2
    b0ba:	d16b      	bne.n	b194 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    b0bc:	4e39      	ldr	r6, [pc, #228]	; (b1a4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    b0be:	f240 188f 	movw	r8, #399	; 0x18f
    b0c2:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b0c6:	4a38      	ldr	r2, [pc, #224]	; (b1a8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    b0c8:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b0ca:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b0cc:	4b37      	ldr	r3, [pc, #220]	; (b1ac <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b0ce:	f36f 0441 	bfc	r4, #1, #1
    b0d2:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b0d4:	681c      	ldr	r4, [r3, #0]
    b0d6:	f36f 0441 	bfc	r4, #1, #1
    b0da:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b0dc:	6893      	ldr	r3, [r2, #8]
    b0de:	079c      	lsls	r4, r3, #30
    b0e0:	d4fc      	bmi.n	b0dc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b0e2:	4d32      	ldr	r5, [pc, #200]	; (b1ac <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b0e4:	68ac      	ldr	r4, [r5, #8]
    b0e6:	f014 0402 	ands.w	r4, r4, #2
    b0ea:	d1fb      	bne.n	b0e4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    b0ec:	4631      	mov	r1, r6
    b0ee:	7800      	ldrb	r0, [r0, #0]
    b0f0:	4e2f      	ldr	r6, [pc, #188]	; (b1b0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    b0f2:	f000 fead 	bl	be50 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    b0f6:	492f      	ldr	r1, [pc, #188]	; (b1b4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    b0f8:	4a2f      	ldr	r2, [pc, #188]	; (b1b8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    b0fa:	4b2b      	ldr	r3, [pc, #172]	; (b1a8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    b0fc:	482f      	ldr	r0, [pc, #188]	; (b1bc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    b0fe:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    b100:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    b102:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b104:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b106:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b108:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b10a:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b10c:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b10e:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b110:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b112:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    b114:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    b118:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    b11a:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    b11c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    b120:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    b122:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    b126:	3018      	adds	r0, #24
    b128:	3104      	adds	r1, #4
    b12a:	3204      	adds	r2, #4
    b12c:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b12e:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b130:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b132:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b134:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b136:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b138:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b13a:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    b13c:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    b140:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    b144:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    b148:	f856 0b04 	ldr.w	r0, [r6], #4
    b14c:	4639      	mov	r1, r7
    b14e:	3030      	adds	r0, #48	; 0x30
    b150:	f000 fcb2 	bl	bab8 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b154:	42b4      	cmp	r4, r6
    b156:	d1f7      	bne.n	b148 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b158:	4a13      	ldr	r2, [pc, #76]	; (b1a8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b15a:	4914      	ldr	r1, [pc, #80]	; (b1ac <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b15c:	6813      	ldr	r3, [r2, #0]
    b15e:	f043 0302 	orr.w	r3, r3, #2
    b162:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b164:	680b      	ldr	r3, [r1, #0]
    b166:	f043 0302 	orr.w	r3, r3, #2
    b16a:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b16c:	6893      	ldr	r3, [r2, #8]
    b16e:	0799      	lsls	r1, r3, #30
    b170:	d4fc      	bmi.n	b16c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b172:	4a0e      	ldr	r2, [pc, #56]	; (b1ac <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b174:	6893      	ldr	r3, [r2, #8]
    b176:	079b      	lsls	r3, r3, #30
    b178:	d4fc      	bmi.n	b174 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    b17a:	2001      	movs	r0, #1
    b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b180:	f04f 0813 	mov.w	r8, #19
    b184:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    b186:	4e0e      	ldr	r6, [pc, #56]	; (b1c0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    b188:	e79d      	b.n	b0c6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    b18a:	7b83      	ldrb	r3, [r0, #14]
    b18c:	2b00      	cmp	r3, #0
    b18e:	d08e      	beq.n	b0ae <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    b190:	2000      	movs	r0, #0
    b192:	4770      	bx	lr
        return false;
    b194:	2000      	movs	r0, #0
    b196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b19a:	f04f 0863 	mov.w	r8, #99	; 0x63
    b19e:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    b1a0:	4e08      	ldr	r6, [pc, #32]	; (b1c4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    b1a2:	e790      	b.n	b0c6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    b1a4:	001e8480 	.word	0x001e8480
    b1a8:	41016000 	.word	0x41016000
    b1ac:	41018000 	.word	0x41018000
    b1b0:	00023248 	.word	0x00023248
    b1b4:	41016004 	.word	0x41016004
    b1b8:	41016008 	.word	0x41016008
    b1bc:	4101600c 	.word	0x4101600c
    b1c0:	000186a0 	.word	0x000186a0
    b1c4:	0007a120 	.word	0x0007a120

0000b1c8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    b1c8:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    b1ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b1ce:	4606      	mov	r6, r0
    b1d0:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    b1d2:	d036      	beq.n	b242 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    b1d4:	460c      	mov	r4, r1
    b1d6:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    b1da:	2f03      	cmp	r7, #3
    b1dc:	d907      	bls.n	b1ee <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    b1de:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    b1e0:	7b38      	ldrb	r0, [r7, #12]
    b1e2:	1b40      	subs	r0, r0, r5
    b1e4:	fab0 f080 	clz	r0, r0
    b1e8:	0940      	lsrs	r0, r0, #5
    b1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b1ee:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b2b0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b1f2:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    b1f6:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b1f8:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    b1fc:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b1fe:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b200:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b204:	685b      	ldr	r3, [r3, #4]
    b206:	4629      	mov	r1, r5
    b208:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b20a:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    b20e:	6803      	ldr	r3, [r0, #0]
    b210:	4629      	mov	r1, r5
    b212:	685b      	ldr	r3, [r3, #4]
    b214:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b216:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    b21a:	f997 2002 	ldrsb.w	r2, [r7, #2]
    b21e:	684b      	ldr	r3, [r1, #4]
    b220:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b224:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b228:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b22c:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b22e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b232:	bf0c      	ite	eq
    b234:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    b238:	f36f 0200 	bfcne	r2, #0, #1
    b23c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b240:	e7ce      	b.n	b1e0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    b242:	f1a2 0709 	sub.w	r7, r2, #9
    b246:	2f03      	cmp	r7, #3
    b248:	d907      	bls.n	b25a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b24a:	7b33      	ldrb	r3, [r6, #12]
    b24c:	42ab      	cmp	r3, r5
    b24e:	d002      	beq.n	b256 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    b250:	2000      	movs	r0, #0
}
    b252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b256:	2401      	movs	r4, #1
    b258:	e7bf      	b.n	b1da <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b25a:	f8df 9054 	ldr.w	r9, [pc, #84]	; b2b0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    b25e:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b260:	f8d9 0000 	ldr.w	r0, [r9]
    b264:	6803      	ldr	r3, [r0, #0]
    b266:	4611      	mov	r1, r2
    b268:	685b      	ldr	r3, [r3, #4]
    b26a:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b26c:	f8d9 0004 	ldr.w	r0, [r9, #4]
    b270:	6803      	ldr	r3, [r0, #0]
    b272:	4629      	mov	r1, r5
    b274:	685b      	ldr	r3, [r3, #4]
    b276:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b278:	f996 2002 	ldrsb.w	r2, [r6, #2]
    b27c:	6873      	ldr	r3, [r6, #4]
    b27e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b282:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b286:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b28a:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b28c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b290:	d004      	beq.n	b29c <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    b292:	f36f 0200 	bfc	r2, #0, #1
    b296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b29a:	e7d6      	b.n	b24a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    b29c:	f042 0201 	orr.w	r2, r2, #1
    b2a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b2a4:	7b33      	ldrb	r3, [r6, #12]
    b2a6:	2b0a      	cmp	r3, #10
    b2a8:	d1d2      	bne.n	b250 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    b2aa:	2401      	movs	r4, #1
    b2ac:	e7a1      	b.n	b1f2 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    b2ae:	bf00      	nop
    b2b0:	00023248 	.word	0x00023248

0000b2b4 <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    b2b4:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b2b6:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    b2b8:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b2ba:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b2bc:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    b2be:	2101      	movs	r1, #1
    b2c0:	f7ff fef2 	bl	b0a8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b2c4:	f995 2002 	ldrsb.w	r2, [r5, #2]
    b2c8:	6868      	ldr	r0, [r5, #4]
    b2ca:	01d2      	lsls	r2, r2, #7
    b2cc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b2d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b2d4:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b2d6:	2101      	movs	r1, #1
    b2d8:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b2da:	2600      	movs	r6, #0
    b2dc:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b2e0:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b2e2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    b2e6:	f010 0f01 	tst.w	r0, #1
    b2ea:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    b2ee:	f04f 040c 	mov.w	r4, #12
    b2f2:	bf0c      	ite	eq
    b2f4:	f364 0003 	bfieq	r0, r4, #0, #4
    b2f8:	f364 1007 	bfine	r0, r4, #4, #4
    b2fc:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b300:	4b2d      	ldr	r3, [pc, #180]	; (b3b8 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    b302:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b304:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b306:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b308:	f995 2003 	ldrsb.w	r2, [r5, #3]
    b30c:	68a9      	ldr	r1, [r5, #8]
    b30e:	01d2      	lsls	r2, r2, #7
    b310:	4413      	add	r3, r2
    b312:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b314:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b316:	2600      	movs	r6, #0
    b318:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b31c:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b31e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    b322:	f011 0f01 	tst.w	r1, #1
    b326:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    b32a:	4e24      	ldr	r6, [pc, #144]	; (b3bc <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    b32c:	f04f 040c 	mov.w	r4, #12
    b330:	bf14      	ite	ne
    b332:	f364 1107 	bfine	r1, r4, #4, #4
    b336:	f364 0103 	bfieq	r1, r4, #0, #4
    b33a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b33e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b342:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b346:	2400      	movs	r4, #0
    b348:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    b34a:	f856 0b04 	ldr.w	r0, [r6], #4
    b34e:	f3c4 0346 	ubfx	r3, r4, #1, #7
    b352:	6802      	ldr	r2, [r0, #0]
    b354:	442b      	add	r3, r5
    b356:	6852      	ldr	r2, [r2, #4]
    b358:	7b19      	ldrb	r1, [r3, #12]
    b35a:	3401      	adds	r4, #1
    b35c:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b35e:	2c04      	cmp	r4, #4
    b360:	d1f3      	bne.n	b34a <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b362:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b364:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b368:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b36a:	686b      	ldr	r3, [r5, #4]
    b36c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b370:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b374:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b378:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b37c:	bf14      	ite	ne
    b37e:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b382:	f042 0201 	orreq.w	r2, r2, #1
    b386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b38a:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b38c:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b390:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b392:	68ab      	ldr	r3, [r5, #8]
    b394:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b398:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b39c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b3a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b3a4:	bf0c      	ite	eq
    b3a6:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b3aa:	f36f 0200 	bfcne	r2, #0, #1
    b3ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    b3b2:	2301      	movs	r3, #1
    b3b4:	73ab      	strb	r3, [r5, #14]
    b3b6:	bd70      	pop	{r4, r5, r6, pc}
    b3b8:	41008000 	.word	0x41008000
    b3bc:	00023248 	.word	0x00023248

0000b3c0 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    b3c0:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    b3c2:	f7ff fe4f 	bl	b064 <_ZN9ClearCore12MotorManager8InstanceEv>
    b3c6:	4b01      	ldr	r3, [pc, #4]	; (b3cc <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    b3c8:	6018      	str	r0, [r3, #0]
    b3ca:	bd08      	pop	{r3, pc}
    b3cc:	20001c14 	.word	0x20001c14

0000b3d0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3d2:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b3d4:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    b3d6:	f890 3020 	ldrb.w	r3, [r0, #32]
    b3da:	b113      	cbz	r3, b3e2 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    b3dc:	2300      	movs	r3, #0
    b3de:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    b3e0:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    b3e2:	b362      	cbz	r2, b43e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    b3e4:	69a0      	ldr	r0, [r4, #24]
    b3e6:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b3e8:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    b3ea:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b3ec:	bb2b      	cbnz	r3, b43a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    b3ee:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b3f0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    b3f4:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b3f8:	2700      	movs	r7, #0
    b3fa:	4032      	ands	r2, r6
    b3fc:	403b      	ands	r3, r7
    m_stepsSent = 0;
    b3fe:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    b400:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b402:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    b406:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    b408:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    b40c:	f010 fd58 	bl	1bec0 <__aeabi_i2d>
    b410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    b414:	4619      	mov	r1, r3
    b416:	f011 f853 	bl	1c4c0 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    b41a:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b41c:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b41e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b420:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    b422:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    b426:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    b428:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    b42a:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b42c:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b42e:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b430:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    b432:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b434:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    b436:	4618      	mov	r0, r3
    b438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b43a:	4240      	negs	r0, r0
    b43c:	e7d7      	b.n	b3ee <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    b43e:	6960      	ldr	r0, [r4, #20]
    b440:	1a08      	subs	r0, r1, r0
            break;
    b442:	e7d5      	b.n	b3f0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000b444 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b446:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b448:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    b44a:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    b44c:	0fca      	lsrs	r2, r1, #31
    b44e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    b452:	f884 3020 	strb.w	r3, [r4, #32]
    b456:	4608      	mov	r0, r1
    b458:	f010 fd32 	bl	1bec0 <__aeabi_i2d>
    b45c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    b460:	4619      	mov	r1, r3
    b462:	f011 f82d 	bl	1c4c0 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b466:	17c3      	asrs	r3, r0, #31
    b468:	03d9      	lsls	r1, r3, #15
    b46a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b46e:	f241 3288 	movw	r2, #5000	; 0x1388
    b472:	2300      	movs	r3, #0
    b474:	03c0      	lsls	r0, r0, #15
    b476:	f011 f9c9 	bl	1c80c <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b47a:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b47c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b480:	03de      	lsls	r6, r3, #15
    b482:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b484:	42b2      	cmp	r2, r6
    b486:	f04f 0300 	mov.w	r3, #0
    b48a:	eb73 0507 	sbcs.w	r5, r3, r7
    b48e:	bfbc      	itt	lt
    b490:	4616      	movlt	r6, r2
    b492:	461f      	movlt	r7, r3
    b494:	4286      	cmp	r6, r0
    b496:	460b      	mov	r3, r1
    b498:	4602      	mov	r2, r0
    b49a:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b49e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b4a2:	bfb8      	it	lt
    b4a4:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b4a6:	2700      	movs	r7, #0
    b4a8:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b4ac:	4030      	ands	r0, r6
    b4ae:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    b4b0:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    b4b2:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b4b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b4b6:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b4b8:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    b4ba:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    b4be:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b4c0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    b4c4:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    b4c6:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    b4c8:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b4ca:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    b4cc:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    b4ce:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    b4d0:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b4d2:	b662      	cpsie	i
}
    b4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b4d6:	bf00      	nop

0000b4d8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    b4dc:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    b4de:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    b4e2:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    b4e4:	b085      	sub	sp, #20
    b4e6:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    b4e8:	d038      	beq.n	b55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    b4ea:	2b07      	cmp	r3, #7
    b4ec:	f200 80da 	bhi.w	b6a4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    b4f0:	e8df f013 	tbh	[pc, r3, lsl #1]
    b4f4:	00d8002f 	.word	0x00d8002f
    b4f8:	00be01d7 	.word	0x00be01d7
    b4fc:	025f0086 	.word	0x025f0086
    b500:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    b504:	7b41      	ldrb	r1, [r0, #13]
    b506:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b50a:	428b      	cmp	r3, r1
    b50c:	f000 822d 	beq.w	b96a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    b510:	6980      	ldr	r0, [r0, #24]
    b512:	69e3      	ldr	r3, [r4, #28]
    b514:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b516:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b51a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    b51e:	2300      	movs	r3, #0
    b520:	4016      	ands	r6, r2
    b522:	401f      	ands	r7, r3
    b524:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    b528:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    b52c:	2501      	movs	r5, #1
            m_moveDirChange = false;
    b52e:	2300      	movs	r3, #0
    b530:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    b532:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    b536:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    b538:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b53c:	0bf2      	lsrs	r2, r6, #15
    b53e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    b542:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    b544:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b546:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    b548:	6962      	ldr	r2, [r4, #20]
    b54a:	b101      	cbz	r1, b54e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    b54c:	425b      	negs	r3, r3
    b54e:	4413      	add	r3, r2
    b550:	6163      	str	r3, [r4, #20]
}
    b552:	b005      	add	sp, #20
    b554:	ecbd 8b02 	vpop	{d8}
    b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b55c:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    b55e:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    b562:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    b566:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    b56a:	1457      	asrs	r7, r2, #17
    b56c:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b56e:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    b572:	2900      	cmp	r1, #0
    b574:	d163      	bne.n	b63e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    b576:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b578:	2d00      	cmp	r5, #0
    b57a:	f000 8117 	beq.w	b7ac <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    b57e:	7b41      	ldrb	r1, [r0, #13]
    b580:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    b584:	9100      	str	r1, [sp, #0]
    b586:	4291      	cmp	r1, r2
    b588:	f000 81f8 	beq.w	b97c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    b58c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    b590:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    b592:	2305      	movs	r3, #5
    b594:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    b596:	6520      	str	r0, [r4, #80]	; 0x50
    b598:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b59a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b59e:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    b5a2:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    b5a4:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b5a8:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    b5ac:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b5ae:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    b5b2:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    b5b4:	f300 80ab 	bgt.w	b70e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    b5b8:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    b5ba:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b5be:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    b5c2:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    b5c4:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b5c8:	4629      	mov	r1, r5
    b5ca:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    b5cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b5d0:	f011 f96c 	bl	1c8ac <__aeabi_uldivmod>
    b5d4:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b5d6:	fba0 bc05 	umull	fp, ip, r0, r5
    b5da:	fb00 cc03 	mla	ip, r0, r3, ip
    b5de:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    b5e2:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    b5e4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    b5e8:	eb47 0709 	adc.w	r7, r7, r9
    b5ec:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    b5f0:	2900      	cmp	r1, #0
    b5f2:	f000 816e 	beq.w	b8d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    b5f6:	2307      	movs	r3, #7
    b5f8:	7323      	strb	r3, [r4, #12]
    b5fa:	9900      	ldr	r1, [sp, #0]
    b5fc:	69e3      	ldr	r3, [r4, #28]
    b5fe:	e79d      	b.n	b53c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b600:	6c01      	ldr	r1, [r0, #64]	; 0x40
    b602:	6c40      	ldr	r0, [r0, #68]	; 0x44
    b604:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b608:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b60c:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    b610:	1952      	adds	r2, r2, r5
    b612:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b616:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    b618:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b61c:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    b620:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b622:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b626:	da54      	bge.n	b6d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b628:	2900      	cmp	r1, #0
    b62a:	dd52      	ble.n	b6d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b62c:	2a01      	cmp	r2, #1
    b62e:	f173 0100 	sbcs.w	r1, r3, #0
    b632:	db4e      	blt.n	b6d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b634:	461f      	mov	r7, r3
    b636:	4616      	mov	r6, r2
    b638:	69e3      	ldr	r3, [r4, #28]
    b63a:	7b61      	ldrb	r1, [r4, #13]
    b63c:	e77e      	b.n	b53c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b63e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b640:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b642:	2b00      	cmp	r3, #0
    b644:	f000 80a1 	beq.w	b78a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    b648:	2d00      	cmp	r5, #0
    b64a:	f040 8130 	bne.w	b8ae <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    b64e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    b652:	6820      	ldr	r0, [r4, #0]
    b654:	6523      	str	r3, [r4, #80]	; 0x50
    b656:	2100      	movs	r1, #0
    b658:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    b65a:	7362      	strb	r2, [r4, #13]
    b65c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    b660:	4620      	mov	r0, r4
    b662:	4798      	blx	r3
    b664:	7b63      	ldrb	r3, [r4, #13]
    b666:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    b66a:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b66c:	9300      	str	r3, [sp, #0]
    b66e:	e094      	b.n	b79a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    b670:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    b674:	7b43      	ldrb	r3, [r0, #13]
    b676:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    b67a:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    b67c:	4652      	mov	r2, sl
    b67e:	eb16 060a 	adds.w	r6, r6, sl
    b682:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    b686:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    b68a:	415f      	adcs	r7, r3
    b68c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    b690:	2900      	cmp	r1, #0
    b692:	d03f      	beq.n	b714 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    b694:	f1ba 0f00 	cmp.w	sl, #0
    b698:	d139      	bne.n	b70e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    b69a:	2306      	movs	r3, #6
    b69c:	7323      	strb	r3, [r4, #12]
    b69e:	9900      	ldr	r1, [sp, #0]
    b6a0:	69e3      	ldr	r3, [r4, #28]
    b6a2:	e74b      	b.n	b53c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    b6a4:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    b6a6:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    b6a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b6ac:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    b6b0:	2000      	movs	r0, #0
    b6b2:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    b6b4:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    b6b6:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    b6b8:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    b6ba:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    b6bc:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    b6be:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    b6c0:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    b6c4:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    b6c8:	b005      	add	sp, #20
    b6ca:	ecbd 8b02 	vpop	{d8}
    b6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    b6d2:	2300      	movs	r3, #0
                m_moveState = MS_END;
    b6d4:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    b6d6:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    b6d8:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    b6da:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    b6de:	7322      	strb	r2, [r4, #12]
    b6e0:	69e3      	ldr	r3, [r4, #28]
    b6e2:	7b61      	ldrb	r1, [r4, #13]
    b6e4:	e72a      	b.n	b53c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    b6e6:	2302      	movs	r3, #2
    b6e8:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b6ea:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b6ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b6f0:	eb05 0263 	add.w	r2, r5, r3, asr #1
    b6f4:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    b6f6:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b6f8:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b6fc:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    b6fe:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b700:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b704:	f280 80a2 	bge.w	b84c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b708:	2d00      	cmp	r5, #0
    b70a:	f340 809f 	ble.w	b84c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b70e:	9900      	ldr	r1, [sp, #0]
    b710:	69e3      	ldr	r3, [r4, #28]
    b712:	e713      	b.n	b53c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    b714:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    b718:	4286      	cmp	r6, r0
    b71a:	eb77 0501 	sbcs.w	r5, r7, r1
    b71e:	da03      	bge.n	b728 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    b720:	2e01      	cmp	r6, #1
    b722:	f177 0500 	sbcs.w	r5, r7, #0
    b726:	daf2      	bge.n	b70e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    b728:	2500      	movs	r5, #0
    b72a:	1a31      	subs	r1, r6, r0
    b72c:	4628      	mov	r0, r5
    b72e:	f011 f8bd 	bl	1c8ac <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    b732:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b734:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    b738:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b73a:	fb00 9e03 	mla	lr, r0, r3, r9
    b73e:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b740:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b744:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b748:	fb0e 330c 	mla	r3, lr, ip, r3
    b74c:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    b74e:	1a32      	subs	r2, r6, r0
    b750:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b754:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    b758:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    b75a:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b75e:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    b762:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    b764:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b768:	f280 80a9 	bge.w	b8be <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    b76c:	42a8      	cmp	r0, r5
    b76e:	f340 80a6 	ble.w	b8be <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    b772:	2a01      	cmp	r2, #1
    b774:	f173 0100 	sbcs.w	r1, r3, #0
    b778:	f2c0 80a1 	blt.w	b8be <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    b77c:	2004      	movs	r0, #4
    b77e:	461f      	mov	r7, r3
    b780:	9900      	ldr	r1, [sp, #0]
    b782:	7320      	strb	r0, [r4, #12]
    b784:	4616      	mov	r6, r2
    b786:	69e3      	ldr	r3, [r4, #28]
    b788:	e6d8      	b.n	b53c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    b78a:	7b42      	ldrb	r2, [r0, #13]
    b78c:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    b78e:	4619      	mov	r1, r3
    b790:	2000      	movs	r0, #0
    b792:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b796:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    b798:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    b79a:	4555      	cmp	r5, sl
    b79c:	f000 80db 	beq.w	b956 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    b7a0:	dda1      	ble.n	b6e6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    b7a2:	2305      	movs	r3, #5
    b7a4:	7323      	strb	r3, [r4, #12]
    b7a6:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b7aa:	e6f6      	b.n	b59a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    b7ac:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    b7b0:	4611      	mov	r1, r2
    b7b2:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    b7b4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b7b8:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    b7ba:	4613      	mov	r3, r2
    b7bc:	429f      	cmp	r7, r3
    b7be:	bf08      	it	eq
    b7c0:	428e      	cmpeq	r6, r1
    b7c2:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    b7c6:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    b7ca:	d00e      	beq.n	b7ea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    b7cc:	6803      	ldr	r3, [r0, #0]
    b7ce:	689b      	ldr	r3, [r3, #8]
    b7d0:	4798      	blx	r3
    b7d2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b7d6:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    b7d8:	2b00      	cmp	r3, #0
    b7da:	f040 80ca 	bne.w	b972 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    b7de:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    b7e2:	e9cd 2300 	strd	r2, r3, [sp]
    b7e6:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    b7ea:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b7ee:	0fcb      	lsrs	r3, r1, #31
    b7f0:	18c0      	adds	r0, r0, r3
    b7f2:	464e      	mov	r6, r9
    b7f4:	f141 0100 	adc.w	r1, r1, #0
    b7f8:	17f7      	asrs	r7, r6, #31
    b7fa:	1049      	asrs	r1, r1, #1
    b7fc:	ea4f 0030 	mov.w	r0, r0, rrx
    b800:	464a      	mov	r2, r9
    b802:	463b      	mov	r3, r7
    b804:	f011 f802 	bl	1c80c <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b808:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b810:	464a      	mov	r2, r9
    b812:	463b      	mov	r3, r7
    b814:	fb8a 010a 	smull	r0, r1, sl, sl
    b818:	f010 fff8 	bl	1c80c <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    b81c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b820:	1a82      	subs	r2, r0, r2
    b822:	eb61 0303 	sbc.w	r3, r1, r3
    b826:	4610      	mov	r0, r2
    b828:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b82a:	e9dd 2300 	ldrd	r2, r3, [sp]
    b82e:	4282      	cmp	r2, r0
    b830:	418b      	sbcs	r3, r1
    b832:	db63      	blt.n	b8fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    b834:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    b838:	4555      	cmp	r5, sl
    b83a:	f340 8091 	ble.w	b960 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    b83e:	2305      	movs	r3, #5
    b840:	7323      	strb	r3, [r4, #12]
    b842:	7b63      	ldrb	r3, [r4, #13]
    b844:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b848:	9300      	str	r3, [sp, #0]
    b84a:	e6a6      	b.n	b59a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    b84c:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    b84e:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    b852:	4691      	mov	r9, r2
    b854:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b856:	461a      	mov	r2, r3
    b858:	4629      	mov	r1, r5
    b85a:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    b85c:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b860:	2000      	movs	r0, #0
    b862:	f011 f823 	bl	1c8ac <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b866:	4602      	mov	r2, r0
    b868:	fba2 0105 	umull	r0, r1, r2, r5
    b86c:	2300      	movs	r3, #0
    b86e:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b872:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    b876:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b878:	4642      	mov	r2, r8
    b87a:	464b      	mov	r3, r9
    b87c:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b880:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b884:	f011 f812 	bl	1c8ac <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b888:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b88c:	0849      	lsrs	r1, r1, #1
    b88e:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b892:	1a12      	subs	r2, r2, r0
    b894:	eb63 0301 	sbc.w	r3, r3, r1
    b898:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    b89c:	2303      	movs	r3, #3
    b89e:	7323      	strb	r3, [r4, #12]
    b8a0:	e6ec      	b.n	b67c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    b8a2:	7b43      	ldrb	r3, [r0, #13]
    b8a4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b8a6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b8aa:	9300      	str	r3, [sp, #0]
    b8ac:	e71d      	b.n	b6ea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b8ae:	7b40      	ldrb	r0, [r0, #13]
    b8b0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b8b4:	9000      	str	r0, [sp, #0]
    b8b6:	4290      	cmp	r0, r2
    b8b8:	f47f af6a 	bne.w	b790 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    b8bc:	e6c9      	b.n	b652 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    b8be:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    b8c0:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    b8c2:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    b8c4:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    b8c6:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    b8ca:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    b8cc:	7322      	strb	r2, [r4, #12]
    b8ce:	69e3      	ldr	r3, [r4, #28]
    b8d0:	e634      	b.n	b53c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b8d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b8d6:	fb8a 010a 	smull	r0, r1, sl, sl
    b8da:	f010 ffe7 	bl	1c8ac <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b8de:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b8e2:	0849      	lsrs	r1, r1, #1
    b8e4:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b8e8:	1a12      	subs	r2, r2, r0
    b8ea:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    b8ee:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b8f0:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    b8f4:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    b8f6:	7320      	strb	r0, [r4, #12]
    b8f8:	69e3      	ldr	r3, [r4, #28]
    b8fa:	e61f      	b.n	b53c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b8fc:	69a6      	ldr	r6, [r4, #24]
    b8fe:	17f1      	asrs	r1, r6, #31
    b900:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b906:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b908:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b90a:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    b90e:	4159      	adcs	r1, r3
    b910:	460b      	mov	r3, r1
    b912:	fb00 f107 	mul.w	r1, r0, r7
    b916:	fb09 1303 	mla	r3, r9, r3, r1
    b91a:	fba0 0109 	umull	r0, r1, r0, r9
    b91e:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    b920:	f010 ff36 	bl	1c790 <__aeabi_l2f>
    b924:	ee00 0a10 	vmov	s0, r0
    b928:	eeb5 0a40 	vcmp.f32	s0, #0.0
    b92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b930:	eeb1 8ac0 	vsqrt.f32	s16, s0
    b934:	d439      	bmi.n	b9aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    b936:	ee18 0a10 	vmov	r0, s16
    b93a:	f010 ffcf 	bl	1c8dc <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    b93e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b942:	4282      	cmp	r2, r0
    b944:	f04f 0300 	mov.w	r3, #0
    b948:	eb73 0601 	sbcs.w	r6, r3, r1
    b94c:	bfb8      	it	lt
    b94e:	4610      	movlt	r0, r2
    b950:	6520      	str	r0, [r4, #80]	; 0x50
    b952:	4682      	mov	sl, r0
    b954:	e770      	b.n	b838 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    b956:	2303      	movs	r3, #3
    b958:	7323      	strb	r3, [r4, #12]
    b95a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b95e:	e68d      	b.n	b67c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    b960:	2302      	movs	r3, #2
    b962:	7323      	strb	r3, [r4, #12]
    b964:	7b63      	ldrb	r3, [r4, #13]
    b966:	9300      	str	r3, [sp, #0]
    b968:	e6bf      	b.n	b6ea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    b96a:	69c0      	ldr	r0, [r0, #28]
    b96c:	69a3      	ldr	r3, [r4, #24]
    b96e:	1ac0      	subs	r0, r0, r3
    b970:	e5d1      	b.n	b516 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    b972:	7b63      	ldrb	r3, [r4, #13]
    b974:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b978:	9300      	str	r3, [sp, #0]
    b97a:	e609      	b.n	b590 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    b97c:	464a      	mov	r2, r9
    b97e:	17d3      	asrs	r3, r2, #31
    b980:	fb85 0105 	smull	r0, r1, r5, r5
    b984:	f010 ff42 	bl	1c80c <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b988:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    b98c:	1049      	asrs	r1, r1, #1
    b98e:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b992:	1ab6      	subs	r6, r6, r2
    b994:	eb67 0703 	sbc.w	r7, r7, r3
    b998:	4286      	cmp	r6, r0
    b99a:	eb77 0301 	sbcs.w	r3, r7, r1
    b99e:	bfb4      	ite	lt
    b9a0:	2301      	movlt	r3, #1
    b9a2:	2300      	movge	r3, #0
    b9a4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    b9a8:	e716      	b.n	b7d8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    b9aa:	f00f fcc5 	bl	1b338 <sqrtf>
    b9ae:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b9b0:	e7c1      	b.n	b936 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    b9b2:	7b43      	ldrb	r3, [r0, #13]
    b9b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b9b6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b9ba:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    b9be:	9300      	str	r3, [sp, #0]
    b9c0:	e5eb      	b.n	b59a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    b9c2:	bf00      	nop

0000b9c4 <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    b9c4:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    b9c6:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    b9c8:	4916      	ldr	r1, [pc, #88]	; (ba24 <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    b9ca:	6001      	str	r1, [r0, #0]
    b9cc:	2200      	movs	r2, #0
    b9ce:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    b9d2:	2501      	movs	r5, #1
    b9d4:	2102      	movs	r1, #2
    b9d6:	2600      	movs	r6, #0
    b9d8:	2700      	movs	r7, #0
    b9da:	f362 1486 	bfi	r4, r2, #6, #1
    b9de:	7404      	strb	r4, [r0, #16]
    b9e0:	6042      	str	r2, [r0, #4]
    b9e2:	6082      	str	r2, [r0, #8]
    b9e4:	7302      	strb	r2, [r0, #12]
    b9e6:	7342      	strb	r2, [r0, #13]
    b9e8:	6142      	str	r2, [r0, #20]
    b9ea:	6182      	str	r2, [r0, #24]
    b9ec:	61c2      	str	r2, [r0, #28]
    b9ee:	f880 2020 	strb.w	r2, [r0, #32]
    b9f2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    b9f6:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    b9fa:	6282      	str	r2, [r0, #40]	; 0x28
    b9fc:	6402      	str	r2, [r0, #64]	; 0x40
    b9fe:	6442      	str	r2, [r0, #68]	; 0x44
    ba00:	6502      	str	r2, [r0, #80]	; 0x50
    ba02:	6642      	str	r2, [r0, #100]	; 0x64
    ba04:	7385      	strb	r5, [r0, #14]
    ba06:	6245      	str	r5, [r0, #36]	; 0x24
    ba08:	6605      	str	r5, [r0, #96]	; 0x60
    ba0a:	62c1      	str	r1, [r0, #44]	; 0x2c
    ba0c:	6301      	str	r1, [r0, #48]	; 0x30
    ba0e:	6681      	str	r1, [r0, #104]	; 0x68
    ba10:	66c1      	str	r1, [r0, #108]	; 0x6c
    ba12:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    ba16:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    ba1a:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    ba1e:	bcf0      	pop	{r4, r5, r6, r7}
    ba20:	4770      	bx	lr
    ba22:	bf00      	nop
    ba24:	00023638 	.word	0x00023638

0000ba28 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    ba28:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    ba2a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    ba2c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    ba2e:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    ba30:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ba32:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    ba34:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    ba36:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    ba38:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    ba3a:	2700      	movs	r7, #0
    ba3c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    ba40:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    ba42:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ba44:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    ba46:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    ba48:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    ba4a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    ba4c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    ba50:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    ba52:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    ba54:	b662      	cpsie	i
}
    ba56:	bcd0      	pop	{r4, r6, r7}
    ba58:	4770      	bx	lr
    ba5a:	bf00      	nop
    ba5c:	0000      	movs	r0, r0
	...

0000ba60 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    ba60:	b510      	push	{r4, lr}
    ba62:	4604      	mov	r4, r0
    if (decelMax != 0) {
    ba64:	b191      	cbz	r1, ba8c <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    ba66:	a312      	add	r3, pc, #72	; (adr r3, bab0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba6c:	03c8      	lsls	r0, r1, #15
    ba6e:	0c49      	lsrs	r1, r1, #17
    ba70:	f010 fecc 	bl	1c80c <__aeabi_ldivmod>
    ba74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ba76:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    ba78:	f020 0201 	bic.w	r2, r0, #1
    ba7c:	bfb8      	it	lt
    ba7e:	2302      	movlt	r3, #2
    ba80:	4293      	cmp	r3, r2
    ba82:	4618      	mov	r0, r3
    ba84:	bfb8      	it	lt
    ba86:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    ba88:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ba8a:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    ba8c:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    ba8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ba90:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ba92:	4293      	cmp	r3, r2
    ba94:	bfb8      	it	lt
    ba96:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    ba98:	2100      	movs	r1, #0
    m_velocityMove = true;
    ba9a:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    ba9c:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    ba9e:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    baa0:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    baa4:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    baa6:	b662      	cpsie	i
    baa8:	bd10      	pop	{r4, pc}
    baaa:	bf00      	nop
    baac:	f3af 8000 	nop.w
    bab0:	017d7840 	.word	0x017d7840
    bab4:	00000000 	.word	0x00000000

0000bab8 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    bab8:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    baba:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    babc:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    babe:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    bac0:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bac2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    bac4:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    bac6:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    bac8:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    baca:	2700      	movs	r7, #0
    bacc:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bad0:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    bad2:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bad4:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    bad6:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    bad8:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    bada:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    badc:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    bae0:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    bae2:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    bae4:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    bae6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    baea:	03ca      	lsls	r2, r1, #15
    baec:	0c4b      	lsrs	r3, r1, #17
    baee:	4294      	cmp	r4, r2
    baf0:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    baf4:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    baf6:	eb75 0103 	sbcs.w	r1, r5, r3
    bafa:	bfbc      	itt	lt
    bafc:	4622      	movlt	r2, r4
    bafe:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    bb00:	2a01      	cmp	r2, #1
    bb02:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    bb06:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    bb08:	bfbc      	itt	lt
    bb0a:	2201      	movlt	r2, #1
    bb0c:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    bb0e:	17e5      	asrs	r5, r4, #31
    bb10:	4294      	cmp	r4, r2
    bb12:	eb75 0103 	sbcs.w	r1, r5, r3
    bb16:	bfb8      	it	lt
    bb18:	4622      	movlt	r2, r4
    bb1a:	6602      	str	r2, [r0, #96]	; 0x60
}
    bb1c:	bcf0      	pop	{r4, r5, r6, r7}
    bb1e:	4770      	bx	lr

0000bb20 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    bb20:	6843      	ldr	r3, [r0, #4]
    bb22:	b363      	cbz	r3, bb7e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    bb24:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    bb26:	f013 0218 	ands.w	r2, r3, #24
    bb2a:	d12a      	bne.n	bb82 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    bb2c:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    bb2e:	7c02      	ldrb	r2, [r0, #16]
    bb30:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    bb34:	b2d2      	uxtb	r2, r2
    bb36:	4613      	mov	r3, r2
    bb38:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bb3c:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    bb40:	b2db      	uxtb	r3, r3
    bb42:	461a      	mov	r2, r3
    bb44:	f3c3 1300 	ubfx	r3, r3, #4, #1
    bb48:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    bb4c:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    bb4e:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    bb50:	075a      	lsls	r2, r3, #29
    bb52:	d514      	bpl.n	bb7e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    bb54:	7b42      	ldrb	r2, [r0, #13]
    bb56:	b9e2      	cbnz	r2, bb92 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    bb58:	0719      	lsls	r1, r3, #28
    bb5a:	d510      	bpl.n	bb7e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    bb5c:	f043 0301 	orr.w	r3, r3, #1
    bb60:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    bb62:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bb64:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    bb66:	6b02      	ldr	r2, [r0, #48]	; 0x30
    bb68:	4293      	cmp	r3, r2
    bb6a:	bfb8      	it	lt
    bb6c:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    bb6e:	2100      	movs	r1, #0
    m_velocityMove = true;
    bb70:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bb72:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    bb74:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    bb76:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    bb7a:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    bb7c:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    bb7e:	2000      	movs	r0, #0
    bb80:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    bb82:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    bb86:	f3c3 1341 	ubfx	r3, r3, #5, #2
    bb8a:	1ad3      	subs	r3, r2, r3
    bb8c:	bf18      	it	ne
    bb8e:	2301      	movne	r3, #1
    bb90:	e7cd      	b.n	bb2e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    bb92:	06da      	lsls	r2, r3, #27
    bb94:	d5f3      	bpl.n	bb7e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    bb96:	f043 0302 	orr.w	r3, r3, #2
    bb9a:	7403      	strb	r3, [r0, #16]
    bb9c:	e7e1      	b.n	bb62 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    bb9e:	bf00      	nop

0000bba0 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    bba0:	4ba1      	ldr	r3, [pc, #644]	; (be28 <SystemInit+0x288>)
    bba2:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    bba6:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    bba8:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    bbaa:	691a      	ldr	r2, [r3, #16]
    bbac:	0792      	lsls	r2, r2, #30
    bbae:	d5fc      	bpl.n	bbaa <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    bbb0:	4a9e      	ldr	r2, [pc, #632]	; (be2c <SystemInit+0x28c>)
    bbb2:	4b9f      	ldr	r3, [pc, #636]	; (be30 <SystemInit+0x290>)
    bbb4:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    bbb6:	6853      	ldr	r3, [r2, #4]
    bbb8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    bbbc:	d1fb      	bne.n	bbb6 <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    bbbe:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    bbc2:	499a      	ldr	r1, [pc, #616]	; (be2c <SystemInit+0x28c>)
    bbc4:	f363 1086 	bfi	r0, r3, #6, #1
    bbc8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    bbcc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bbd0:	065b      	lsls	r3, r3, #25
    bbd2:	d4fb      	bmi.n	bbcc <SystemInit+0x2c>
    bbd4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bbd8:	4a94      	ldr	r2, [pc, #592]	; (be2c <SystemInit+0x28c>)
    bbda:	2005      	movs	r0, #5
    bbdc:	f360 0303 	bfi	r3, r0, #0, #4
    bbe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    bbe4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bbe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bbec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    bbf0:	6853      	ldr	r3, [r2, #4]
    bbf2:	f013 0f14 	tst.w	r3, #20
    bbf6:	d1fb      	bne.n	bbf0 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    bbf8:	4b8b      	ldr	r3, [pc, #556]	; (be28 <SystemInit+0x288>)
    bbfa:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    bbfc:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    bbfe:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    bc00:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    bc02:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    bc04:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    bc06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    bc0a:	6913      	ldr	r3, [r2, #16]
    bc0c:	01df      	lsls	r7, r3, #7
    bc0e:	d4fc      	bmi.n	bc0a <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    bc10:	4a86      	ldr	r2, [pc, #536]	; (be2c <SystemInit+0x28c>)
    bc12:	f44f 7384 	mov.w	r3, #264	; 0x108
    bc16:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    bc18:	6853      	ldr	r3, [r2, #4]
    bc1a:	f013 0304 	ands.w	r3, r3, #4
    bc1e:	d1fb      	bne.n	bc18 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    bc20:	4884      	ldr	r0, [pc, #528]	; (be34 <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    bc22:	4982      	ldr	r1, [pc, #520]	; (be2c <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    bc24:	2401      	movs	r4, #1
    bc26:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    bc28:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    bc2c:	f363 1086 	bfi	r0, r3, #6, #1
    bc30:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    bc34:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bc38:	065e      	lsls	r6, r3, #25
    bc3a:	d4fb      	bmi.n	bc34 <SystemInit+0x94>
    bc3c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bc40:	4a7a      	ldr	r2, [pc, #488]	; (be2c <SystemInit+0x28c>)
    bc42:	2005      	movs	r0, #5
    bc44:	f360 0303 	bfi	r3, r0, #0, #4
    bc48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    bc4c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bc50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bc54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    bc58:	6853      	ldr	r3, [r2, #4]
    bc5a:	f013 0314 	ands.w	r3, r3, #20
    bc5e:	d1fb      	bne.n	bc58 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bc60:	4871      	ldr	r0, [pc, #452]	; (be28 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    bc62:	4972      	ldr	r1, [pc, #456]	; (be2c <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bc64:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    bc66:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    bc68:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bc6a:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    bc6c:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    bc6e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    bc72:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    bc76:	f363 1086 	bfi	r0, r3, #6, #1
    bc7a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    bc7e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    bc82:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bc86:	2b00      	cmp	r3, #0
    bc88:	d1f9      	bne.n	bc7e <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    bc8a:	4c67      	ldr	r4, [pc, #412]	; (be28 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    bc8c:	486a      	ldr	r0, [pc, #424]	; (be38 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    bc8e:	4a67      	ldr	r2, [pc, #412]	; (be2c <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    bc90:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    bc92:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    bc94:	6853      	ldr	r3, [r2, #4]
    bc96:	065d      	lsls	r5, r3, #25
    bc98:	d4fc      	bmi.n	bc94 <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bc9a:	4b66      	ldr	r3, [pc, #408]	; (be34 <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    bc9c:	4967      	ldr	r1, [pc, #412]	; (be3c <SystemInit+0x29c>)
    bc9e:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bca0:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bca2:	4e67      	ldr	r6, [pc, #412]	; (be40 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    bca4:	4d67      	ldr	r5, [pc, #412]	; (be44 <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    bca6:	4c68      	ldr	r4, [pc, #416]	; (be48 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    bca8:	4960      	ldr	r1, [pc, #384]	; (be2c <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bcaa:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    bcae:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    bcb0:	6998      	ldr	r0, [r3, #24]
    bcb2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bcb6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    bcb8:	6958      	ldr	r0, [r3, #20]
    bcba:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bcbe:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    bcc0:	6998      	ldr	r0, [r3, #24]
    bcc2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    bcc6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    bcc8:	6998      	ldr	r0, [r3, #24]
    bcca:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    bcce:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    bcd0:	69d8      	ldr	r0, [r3, #28]
    bcd2:	f040 0020 	orr.w	r0, r0, #32
    bcd6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    bcd8:	6918      	ldr	r0, [r3, #16]
    bcda:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bcde:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    bce0:	69d8      	ldr	r0, [r3, #28]
    bce2:	f040 0004 	orr.w	r0, r0, #4
    bce6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    bce8:	6a18      	ldr	r0, [r3, #32]
    bcea:	f040 0001 	orr.w	r0, r0, #1
    bcee:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    bcf0:	6a18      	ldr	r0, [r3, #32]
    bcf2:	f040 0008 	orr.w	r0, r0, #8
    bcf6:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    bcf8:	6a18      	ldr	r0, [r3, #32]
    bcfa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bcfe:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    bd00:	69d8      	ldr	r0, [r3, #28]
    bd02:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    bd06:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    bd08:	6958      	ldr	r0, [r3, #20]
    bd0a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bd0e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    bd10:	6a18      	ldr	r0, [r3, #32]
    bd12:	f040 0020 	orr.w	r0, r0, #32
    bd16:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bd18:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    bd1a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bd1e:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    bd20:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    bd24:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    bd26:	684b      	ldr	r3, [r1, #4]
    bd28:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    bd2c:	d1fb      	bne.n	bd26 <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    bd2e:	4a47      	ldr	r2, [pc, #284]	; (be4c <SystemInit+0x2ac>)
    bd30:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    bd32:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    bd36:	4a3d      	ldr	r2, [pc, #244]	; (be2c <SystemInit+0x28c>)
    bd38:	f363 1086 	bfi	r0, r3, #6, #1
    bd3c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    bd40:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bd44:	065c      	lsls	r4, r3, #25
    bd46:	d4fb      	bmi.n	bd40 <SystemInit+0x1a0>
    bd48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bd4c:	4937      	ldr	r1, [pc, #220]	; (be2c <SystemInit+0x28c>)
    bd4e:	2006      	movs	r0, #6
    bd50:	f360 0303 	bfi	r3, r0, #0, #4
    bd54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    bd58:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bd5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    bd64:	684b      	ldr	r3, [r1, #4]
    bd66:	f013 0318 	ands.w	r3, r3, #24
    bd6a:	d1fb      	bne.n	bd64 <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    bd6c:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    bd70:	4a2e      	ldr	r2, [pc, #184]	; (be2c <SystemInit+0x28c>)
    bd72:	f363 1086 	bfi	r0, r3, #6, #1
    bd76:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    bd7a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bd7e:	0658      	lsls	r0, r3, #25
    bd80:	d4fb      	bmi.n	bd7a <SystemInit+0x1da>
    bd82:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bd86:	4929      	ldr	r1, [pc, #164]	; (be2c <SystemInit+0x28c>)
    bd88:	2006      	movs	r0, #6
    bd8a:	f360 0303 	bfi	r3, r0, #0, #4
    bd8e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    bd92:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bd96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd9a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    bd9e:	684b      	ldr	r3, [r1, #4]
    bda0:	f013 0318 	ands.w	r3, r3, #24
    bda4:	d1fb      	bne.n	bd9e <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    bda6:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    bdaa:	4a20      	ldr	r2, [pc, #128]	; (be2c <SystemInit+0x28c>)
    bdac:	f363 1086 	bfi	r0, r3, #6, #1
    bdb0:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    bdb4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bdb8:	0659      	lsls	r1, r3, #25
    bdba:	d4fb      	bmi.n	bdb4 <SystemInit+0x214>
    bdbc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bdc0:	491a      	ldr	r1, [pc, #104]	; (be2c <SystemInit+0x28c>)
    bdc2:	2006      	movs	r0, #6
    bdc4:	f360 0303 	bfi	r3, r0, #0, #4
    bdc8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    bdcc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bdd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bdd4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    bdd8:	684b      	ldr	r3, [r1, #4]
    bdda:	f013 0318 	ands.w	r3, r3, #24
    bdde:	d1fb      	bne.n	bdd8 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    bde0:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    bde4:	4a11      	ldr	r2, [pc, #68]	; (be2c <SystemInit+0x28c>)
    bde6:	f363 1086 	bfi	r0, r3, #6, #1
    bdea:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    bdee:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bdf2:	065b      	lsls	r3, r3, #25
    bdf4:	d4fb      	bmi.n	bdee <SystemInit+0x24e>
    bdf6:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bdfa:	490c      	ldr	r1, [pc, #48]	; (be2c <SystemInit+0x28c>)
    bdfc:	2006      	movs	r0, #6
    bdfe:	f360 0303 	bfi	r3, r0, #0, #4
    be02:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    be06:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    be0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be0e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    be12:	684b      	ldr	r3, [r1, #4]
    be14:	f013 0f18 	tst.w	r3, #24
    be18:	d1fb      	bne.n	be12 <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    be1a:	4a04      	ldr	r2, [pc, #16]	; (be2c <SystemInit+0x28c>)
    be1c:	6853      	ldr	r3, [r2, #4]
    be1e:	2b00      	cmp	r3, #0
    be20:	d1fc      	bne.n	be1c <SystemInit+0x27c>
        continue;
    }
    return;
}
    be22:	bcf0      	pop	{r4, r5, r6, r7}
    be24:	4770      	bx	lr
    be26:	bf00      	nop
    be28:	40001000 	.word	0x40001000
    be2c:	40001c00 	.word	0x40001c00
    be30:	00190301 	.word	0x00190301
    be34:	40000800 	.word	0x40000800
    be38:	00020107 	.word	0x00020107
    be3c:	00320b01 	.word	0x00320b01
    be40:	41006000 	.word	0x41006000
    be44:	e000ed00 	.word	0xe000ed00
    be48:	003a0108 	.word	0x003a0108
    be4c:	000c0108 	.word	0x000c0108

0000be50 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    be50:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    be52:	4a0e      	ldr	r2, [pc, #56]	; (be8c <GClkFreqUpdate+0x3c>)
    be54:	f100 0408 	add.w	r4, r0, #8
    be58:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    be5c:	f003 030f 	and.w	r3, r3, #15
    be60:	2b01      	cmp	r3, #1
    be62:	d001      	beq.n	be68 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    be64:	bc70      	pop	{r4, r5, r6}
    be66:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    be68:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    be6c:	4d08      	ldr	r5, [pc, #32]	; (be90 <GClkFreqUpdate+0x40>)
    be6e:	fbb5 f1f1 	udiv	r1, r5, r1
    be72:	b289      	uxth	r1, r1
    be74:	f361 461f 	bfi	r6, r1, #16, #16
    be78:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    be7c:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    be7e:	6851      	ldr	r1, [r2, #4]
    be80:	f3c1 018b 	ubfx	r1, r1, #2, #12
    be84:	4219      	tst	r1, r3
    be86:	d1fa      	bne.n	be7e <GClkFreqUpdate+0x2e>
}
    be88:	bc70      	pop	{r4, r5, r6}
    be8a:	4770      	bx	lr
    be8c:	40001c00 	.word	0x40001c00
    be90:	017d7840 	.word	0x017d7840

0000be94 <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    be94:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    be96:	4911      	ldr	r1, [pc, #68]	; (bedc <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    be98:	4b11      	ldr	r3, [pc, #68]	; (bee0 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    be9a:	4a12      	ldr	r2, [pc, #72]	; (bee4 <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    be9c:	6001      	str	r1, [r0, #0]
    be9e:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    bea0:	4604      	mov	r4, r0
      m_stepsLast(0) {
    bea2:	6042      	str	r2, [r0, #4]
    bea4:	6083      	str	r3, [r0, #8]
    bea6:	60c5      	str	r5, [r0, #12]
    bea8:	6105      	str	r5, [r0, #16]
    beaa:	6145      	str	r5, [r0, #20]
    beac:	8305      	strh	r5, [r0, #24]
    beae:	4629      	mov	r1, r5
    beb0:	22c8      	movs	r2, #200	; 0xc8
    beb2:	301c      	adds	r0, #28
    beb4:	f012 fd22 	bl	1e8fc <memset>
    beb8:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    bebc:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    bec0:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    bec4:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    bec8:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    becc:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    bed0:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    bed4:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    bed8:	4620      	mov	r0, r4
    beda:	bd38      	pop	{r3, r4, r5, pc}
    bedc:	00023644 	.word	0x00023644
    bee0:	00023664 	.word	0x00023664
    bee4:	00023654 	.word	0x00023654

0000bee8 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    bee8:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    beea:	4a12      	ldr	r2, [pc, #72]	; (bf34 <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    beec:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bef0:	f36f 1386 	bfc	r3, #6, #1
    bef4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bef8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    befc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bf00:	2b00      	cmp	r3, #0
    bf02:	d1f9      	bne.n	bef8 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    bf04:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    bf08:	490b      	ldr	r1, [pc, #44]	; (bf38 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    bf0a:	4c0c      	ldr	r4, [pc, #48]	; (bf3c <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    bf0c:	4d0c      	ldr	r5, [pc, #48]	; (bf40 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    bf0e:	f363 0003 	bfi	r0, r3, #0, #4
    bf12:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    bf16:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bf1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf1e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bf22:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    bf24:	69cb      	ldr	r3, [r1, #28]
    bf26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf2a:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    bf2c:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    bf2e:	bc30      	pop	{r4, r5}
    bf30:	4770      	bx	lr
    bf32:	bf00      	nop
    bf34:	40001c00 	.word	0x40001c00
    bf38:	40000800 	.word	0x40000800
    bf3c:	42001c00 	.word	0x42001c00
    bf40:	07030000 	.word	0x07030000

0000bf44 <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    bf46:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	d038      	beq.n	bfc0 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    bf4e:	4a29      	ldr	r2, [pc, #164]	; (bff4 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    bf50:	2360      	movs	r3, #96	; 0x60
    bf52:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    bf54:	6913      	ldr	r3, [r2, #16]
    bf56:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    bf5a:	d1fb      	bne.n	bf54 <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bf5c:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    bf5e:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    bf60:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    bf64:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    bf68:	1aaa      	subs	r2, r5, r2
    bf6a:	b212      	sxth	r2, r2
    bf6c:	4604      	mov	r4, r0
    bf6e:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bf72:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    bf74:	bb29      	cbnz	r1, bfc2 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    bf76:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bf78:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    bf7c:	f3bf 8f5b 	dmb	ish
    bf80:	e853 6f00 	ldrex	r6, [r3]
    bf84:	4416      	add	r6, r2
    bf86:	e843 6100 	strex	r1, r6, [r3]
    bf8a:	2900      	cmp	r1, #0
    bf8c:	d1f8      	bne.n	bf80 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    bf8e:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bf92:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bf96:	4d18      	ldr	r5, [pc, #96]	; (bff8 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    bf98:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    bf9c:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bf9e:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bfa0:	fb85 2503 	smull	r2, r5, r5, r3
    bfa4:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bfa6:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bfa8:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bfac:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bfae:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bfb0:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bfb4:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bfb8:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    bfba:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bfbc:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    bfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bfc2:	68c6      	ldr	r6, [r0, #12]
    bfc4:	f3bf 8f5b 	dmb	ish
    bfc8:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    bfcc:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bfd0:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    bfd2:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bfd6:	4432      	add	r2, r6
    bfd8:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bfda:	4808      	ldr	r0, [pc, #32]	; (bffc <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bfdc:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bfe0:	f991 1003 	ldrsb.w	r1, [r1, #3]
    bfe4:	6800      	ldr	r0, [r0, #0]
    bfe6:	2201      	movs	r2, #1
    bfe8:	f003 ffee 	bl	ffc8 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    bfec:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    bff0:	e7c1      	b.n	bf76 <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    bff2:	bf00      	nop
    bff4:	42001c00 	.word	0x42001c00
    bff8:	51eb851f 	.word	0x51eb851f
    bffc:	20001f18 	.word	0x20001f18

0000c000 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c000:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c002:	780d      	ldrb	r5, [r1, #0]
    c004:	f3c5 1441 	ubfx	r4, r5, #5, #2
    c008:	2c01      	cmp	r4, #1
{
    c00a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c00c:	d152      	bne.n	c0b4 <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c00e:	4e30      	ldr	r6, [pc, #192]	; (c0d0 <cdcdf_acm_req+0xd0>)
    c010:	888c      	ldrh	r4, [r1, #4]
    c012:	7833      	ldrb	r3, [r6, #0]
    c014:	42a3      	cmp	r3, r4
    c016:	d002      	beq.n	c01e <cdcdf_acm_req+0x1e>
    c018:	7873      	ldrb	r3, [r6, #1]
    c01a:	42a3      	cmp	r3, r4
    c01c:	d14a      	bne.n	c0b4 <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c01e:	062b      	lsls	r3, r5, #24
    c020:	4617      	mov	r7, r2
    c022:	4606      	mov	r6, r0
    c024:	460c      	mov	r4, r1
    c026:	d438      	bmi.n	c09a <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    c028:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c02a:	f000 fc7f 	bl	c92c <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    c02e:	7863      	ldrb	r3, [r4, #1]
    c030:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c032:	4601      	mov	r1, r0
	switch (req->bRequest) {
    c034:	d00f      	beq.n	c056 <cdcdf_acm_req+0x56>
    c036:	2b22      	cmp	r3, #34	; 0x22
    c038:	d128      	bne.n	c08c <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    c03a:	2300      	movs	r3, #0
    c03c:	461a      	mov	r2, r3
    c03e:	4619      	mov	r1, r3
    c040:	4618      	mov	r0, r3
    c042:	f000 fc07 	bl	c854 <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    c046:	4b23      	ldr	r3, [pc, #140]	; (c0d4 <cdcdf_acm_req+0xd4>)
    c048:	681b      	ldr	r3, [r3, #0]
    c04a:	b31b      	cbz	r3, c094 <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    c04c:	8860      	ldrh	r0, [r4, #2]
    c04e:	4798      	blx	r3
		return ERR_NONE;
    c050:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    c052:	b003      	add	sp, #12
    c054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c056:	2d07      	cmp	r5, #7
    c058:	d136      	bne.n	c0c8 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    c05a:	b37f      	cbz	r7, c0bc <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c05c:	4b1e      	ldr	r3, [pc, #120]	; (c0d8 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c05e:	6800      	ldr	r0, [r0, #0]
    c060:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c062:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c064:	888a      	ldrh	r2, [r1, #4]
    c066:	7989      	ldrb	r1, [r1, #6]
    c068:	f88d 1006 	strb.w	r1, [sp, #6]
    c06c:	466c      	mov	r4, sp
    c06e:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c072:	b113      	cbz	r3, c07a <cdcdf_acm_req+0x7a>
    c074:	4668      	mov	r0, sp
    c076:	4798      	blx	r3
    c078:	b160      	cbz	r0, c094 <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c07a:	e894 0003 	ldmia.w	r4, {r0, r1}
    c07e:	4b17      	ldr	r3, [pc, #92]	; (c0dc <cdcdf_acm_req+0xdc>)
    c080:	0c0a      	lsrs	r2, r1, #16
    c082:	6018      	str	r0, [r3, #0]
    c084:	8099      	strh	r1, [r3, #4]
    c086:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    c088:	2000      	movs	r0, #0
    c08a:	e001      	b.n	c090 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    c08c:	f06f 000c 	mvn.w	r0, #12
}
    c090:	b003      	add	sp, #12
    c092:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    c094:	2000      	movs	r0, #0
}
    c096:	b003      	add	sp, #12
    c098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    c09a:	2a01      	cmp	r2, #1
    c09c:	d0fa      	beq.n	c094 <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    c09e:	784b      	ldrb	r3, [r1, #1]
    c0a0:	2b21      	cmp	r3, #33	; 0x21
    c0a2:	d1f3      	bne.n	c08c <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c0a4:	88ca      	ldrh	r2, [r1, #6]
    c0a6:	2a07      	cmp	r2, #7
    c0a8:	d10e      	bne.n	c0c8 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c0aa:	2300      	movs	r3, #0
    c0ac:	490b      	ldr	r1, [pc, #44]	; (c0dc <cdcdf_acm_req+0xdc>)
    c0ae:	f000 fbd1 	bl	c854 <usbdc_xfer>
    c0b2:	e7ed      	b.n	c090 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    c0b4:	f06f 0009 	mvn.w	r0, #9
}
    c0b8:	b003      	add	sp, #12
    c0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c0bc:	463b      	mov	r3, r7
    c0be:	462a      	mov	r2, r5
    c0c0:	4630      	mov	r0, r6
    c0c2:	f000 fbc7 	bl	c854 <usbdc_xfer>
    c0c6:	e7e3      	b.n	c090 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    c0c8:	f04f 30ff 	mov.w	r0, #4294967295
    c0cc:	e7e0      	b.n	c090 <cdcdf_acm_req+0x90>
    c0ce:	bf00      	nop
    c0d0:	20001c28 	.word	0x20001c28
    c0d4:	20001c30 	.word	0x20001c30
    c0d8:	20001c34 	.word	0x20001c34
    c0dc:	20001c38 	.word	0x20001c38

0000c0e0 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    c0e0:	2901      	cmp	r1, #1
{
    c0e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c0e6:	4616      	mov	r6, r2
	switch (ctrl) {
    c0e8:	d008      	beq.n	c0fc <cdcdf_acm_ctrl+0x1c>
    c0ea:	d314      	bcc.n	c116 <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    c0ec:	2902      	cmp	r1, #2
    c0ee:	bf0c      	ite	eq
    c0f0:	f06f 001a 	mvneq.w	r0, #26
    c0f4:	f06f 000c 	mvnne.w	r0, #12
    c0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c0fc:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    c0fe:	2a00      	cmp	r2, #0
    c100:	d047      	beq.n	c192 <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c102:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c104:	795b      	ldrb	r3, [r3, #5]
    c106:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    c10a:	2b02      	cmp	r3, #2
    c10c:	d041      	beq.n	c192 <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    c10e:	f06f 0009 	mvn.w	r0, #9
    c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    c116:	6813      	ldr	r3, [r2, #0]
    c118:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    c11a:	2b00      	cmp	r3, #0
    c11c:	d0f7      	beq.n	c10e <cdcdf_acm_ctrl+0x2e>
    c11e:	f107 38ff 	add.w	r8, r7, #4294967295
    c122:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c126:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    c128:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c12a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    c12e:	2a02      	cmp	r2, #2
    c130:	d1ed      	bne.n	c10e <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c132:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    c136:	4291      	cmp	r1, r2
    c138:	d061      	beq.n	c1fe <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c13a:	2aff      	cmp	r2, #255	; 0xff
    c13c:	d15b      	bne.n	c1f6 <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c13e:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c142:	4618      	mov	r0, r3
    c144:	6871      	ldr	r1, [r6, #4]
    c146:	2205      	movs	r2, #5
    c148:	f000 fc00 	bl	c94c <usb_find_desc>
		while (NULL != ep) {
    c14c:	4604      	mov	r4, r0
    c14e:	b980      	cbnz	r0, c172 <cdcdf_acm_ctrl+0x92>
    c150:	e041      	b.n	c1d6 <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c152:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c154:	bf4c      	ite	mi
    c156:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c15a:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c15c:	4628      	mov	r0, r5
    c15e:	f000 feaf 	bl	cec0 <usb_d_ep_enable>
			desc->sod = ep;
    c162:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    c164:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c166:	6871      	ldr	r1, [r6, #4]
    c168:	4420      	add	r0, r4
    c16a:	f000 fc09 	bl	c980 <usb_find_ep_desc>
		while (NULL != ep) {
    c16e:	4604      	mov	r4, r0
    c170:	b388      	cbz	r0, c1d6 <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    c172:	7963      	ldrb	r3, [r4, #5]
    c174:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    c176:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c178:	78e1      	ldrb	r1, [r4, #3]
    c17a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    c17e:	b292      	uxth	r2, r2
    c180:	4628      	mov	r0, r5
    c182:	f000 fe4b 	bl	ce1c <usb_d_ep_init>
    c186:	2800      	cmp	r0, #0
    c188:	d0e3      	beq.n	c152 <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    c18a:	f06f 0013 	mvn.w	r0, #19
}
    c18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    c192:	7823      	ldrb	r3, [r4, #0]
    c194:	2bff      	cmp	r3, #255	; 0xff
    c196:	d007      	beq.n	c1a8 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    c198:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    c19a:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c19c:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c19e:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    c1a0:	d002      	beq.n	c1a8 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c1a2:	f000 fe71 	bl	ce88 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c1a6:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    c1a8:	7863      	ldrb	r3, [r4, #1]
    c1aa:	2bff      	cmp	r3, #255	; 0xff
    c1ac:	d007      	beq.n	c1be <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    c1ae:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    c1b0:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c1b2:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c1b4:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    c1b6:	d002      	beq.n	c1be <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c1b8:	f000 fe66 	bl	ce88 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c1bc:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    c1be:	7920      	ldrb	r0, [r4, #4]
    c1c0:	28ff      	cmp	r0, #255	; 0xff
    c1c2:	d003      	beq.n	c1cc <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    c1c4:	f000 fe60 	bl	ce88 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    c1c8:	23ff      	movs	r3, #255	; 0xff
    c1ca:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    c1cc:	4b0f      	ldr	r3, [pc, #60]	; (c20c <cdcdf_acm_ctrl+0x12c>)
    c1ce:	2000      	movs	r0, #0
    c1d0:	7158      	strb	r0, [r3, #5]
    c1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c1d6:	6833      	ldr	r3, [r6, #0]
    c1d8:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    c1da:	7818      	ldrb	r0, [r3, #0]
    c1dc:	2204      	movs	r2, #4
    c1de:	4418      	add	r0, r3
    c1e0:	f000 fbb4 	bl	c94c <usb_find_desc>
	for (i = 0; i < 2; i++) {
    c1e4:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c1e6:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    c1e8:	d10d      	bne.n	c206 <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    c1ea:	4b08      	ldr	r3, [pc, #32]	; (c20c <cdcdf_acm_ctrl+0x12c>)
    c1ec:	2201      	movs	r2, #1
    c1ee:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c1f0:	2000      	movs	r0, #0
    c1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    c1f6:	f06f 001b 	mvn.w	r0, #27
    c1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    c1fe:	f06f 0011 	mvn.w	r0, #17
    c202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    c206:	2b00      	cmp	r3, #0
    c208:	d18d      	bne.n	c126 <cdcdf_acm_ctrl+0x46>
    c20a:	e780      	b.n	c10e <cdcdf_acm_ctrl+0x2e>
    c20c:	20001c28 	.word	0x20001c28

0000c210 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c210:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    c212:	f000 fb91 	bl	c938 <usbdc_get_state>
    c216:	2801      	cmp	r0, #1
    c218:	d80d      	bhi.n	c236 <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c21a:	4b08      	ldr	r3, [pc, #32]	; (c23c <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c21c:	4a08      	ldr	r2, [pc, #32]	; (c240 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c21e:	4909      	ldr	r1, [pc, #36]	; (c244 <cdcdf_acm_init+0x34>)
    c220:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    c222:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c224:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    c226:	f000 fb61 	bl	c8ec <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c22a:	4907      	ldr	r1, [pc, #28]	; (c248 <cdcdf_acm_init+0x38>)
    c22c:	2001      	movs	r0, #1
    c22e:	f000 fb1f 	bl	c870 <usbdc_register_handler>
	return ERR_NONE;
    c232:	2000      	movs	r0, #0
    c234:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    c236:	f06f 0010 	mvn.w	r0, #16
}
    c23a:	bd08      	pop	{r3, pc}
    c23c:	20001c1c 	.word	0x20001c1c
    c240:	20001c28 	.word	0x20001c28
    c244:	0000c0e1 	.word	0x0000c0e1
    c248:	200000f4 	.word	0x200000f4

0000c24c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    c24c:	4b08      	ldr	r3, [pc, #32]	; (c270 <cdcdf_acm_read+0x24>)
{
    c24e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c250:	795c      	ldrb	r4, [r3, #5]
    c252:	b13c      	cbz	r4, c264 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c254:	460a      	mov	r2, r1
}
    c256:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c25a:	4601      	mov	r1, r0
    c25c:	7918      	ldrb	r0, [r3, #4]
    c25e:	2300      	movs	r3, #0
    c260:	f000 baf8 	b.w	c854 <usbdc_xfer>
}
    c264:	f06f 0010 	mvn.w	r0, #16
    c268:	f85d 4b04 	ldr.w	r4, [sp], #4
    c26c:	4770      	bx	lr
    c26e:	bf00      	nop
    c270:	20001c28 	.word	0x20001c28

0000c274 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    c274:	4b08      	ldr	r3, [pc, #32]	; (c298 <cdcdf_acm_write+0x24>)
{
    c276:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c278:	795c      	ldrb	r4, [r3, #5]
    c27a:	b13c      	cbz	r4, c28c <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c27c:	460a      	mov	r2, r1
}
    c27e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c282:	4601      	mov	r1, r0
    c284:	78d8      	ldrb	r0, [r3, #3]
    c286:	2301      	movs	r3, #1
    c288:	f000 bae4 	b.w	c854 <usbdc_xfer>
}
    c28c:	f06f 0010 	mvn.w	r0, #16
    c290:	f85d 4b04 	ldr.w	r4, [sp], #4
    c294:	4770      	bx	lr
    c296:	bf00      	nop
    c298:	20001c28 	.word	0x20001c28

0000c29c <cdcdf_acm_stop_xfer>:
{
    c29c:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c29e:	4c04      	ldr	r4, [pc, #16]	; (c2b0 <cdcdf_acm_stop_xfer+0x14>)
    c2a0:	78e0      	ldrb	r0, [r4, #3]
    c2a2:	f000 fecb 	bl	d03c <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c2a6:	7920      	ldrb	r0, [r4, #4]
}
    c2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c2ac:	f000 bec6 	b.w	d03c <usb_d_ep_abort>
    c2b0:	20001c28 	.word	0x20001c28

0000c2b4 <cdcdf_acm_register_callback>:
{
    c2b4:	b508      	push	{r3, lr}
	switch (cb_type) {
    c2b6:	2803      	cmp	r0, #3
    c2b8:	d81b      	bhi.n	c2f2 <cdcdf_acm_register_callback+0x3e>
    c2ba:	e8df f000 	tbb	[pc, r0]
    c2be:	0a12      	.short	0x0a12
    c2c0:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c2c2:	4b0d      	ldr	r3, [pc, #52]	; (c2f8 <cdcdf_acm_register_callback+0x44>)
    c2c4:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c2c6:	2000      	movs	r0, #0
		break;
    c2c8:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c2ca:	4b0c      	ldr	r3, [pc, #48]	; (c2fc <cdcdf_acm_register_callback+0x48>)
    c2cc:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c2ce:	2000      	movs	r0, #0
		break;
    c2d0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c2d2:	4b0b      	ldr	r3, [pc, #44]	; (c300 <cdcdf_acm_register_callback+0x4c>)
    c2d4:	460a      	mov	r2, r1
    c2d6:	78d8      	ldrb	r0, [r3, #3]
    c2d8:	2102      	movs	r1, #2
    c2da:	f000 ff05 	bl	d0e8 <usb_d_ep_register_callback>
	return ERR_NONE;
    c2de:	2000      	movs	r0, #0
		break;
    c2e0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c2e2:	4b07      	ldr	r3, [pc, #28]	; (c300 <cdcdf_acm_register_callback+0x4c>)
    c2e4:	460a      	mov	r2, r1
    c2e6:	7918      	ldrb	r0, [r3, #4]
    c2e8:	2102      	movs	r1, #2
    c2ea:	f000 fefd 	bl	d0e8 <usb_d_ep_register_callback>
	return ERR_NONE;
    c2ee:	2000      	movs	r0, #0
		break;
    c2f0:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    c2f2:	f06f 000c 	mvn.w	r0, #12
}
    c2f6:	bd08      	pop	{r3, pc}
    c2f8:	20001c30 	.word	0x20001c30
    c2fc:	20001c34 	.word	0x20001c34
    c300:	20001c28 	.word	0x20001c28

0000c304 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    c304:	4b01      	ldr	r3, [pc, #4]	; (c30c <cdcdf_acm_is_enabled+0x8>)
}
    c306:	7958      	ldrb	r0, [r3, #5]
    c308:	4770      	bx	lr
    c30a:	bf00      	nop
    c30c:	20001c28 	.word	0x20001c28

0000c310 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    c310:	4800      	ldr	r0, [pc, #0]	; (c314 <cdcdf_acm_get_line_coding+0x4>)
    c312:	4770      	bx	lr
    c314:	20001c38 	.word	0x20001c38

0000c318 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c318:	4b05      	ldr	r3, [pc, #20]	; (c330 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c31a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c31c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    c31e:	b12c      	cbz	r4, c32c <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    c320:	6863      	ldr	r3, [r4, #4]
    c322:	b103      	cbz	r3, c326 <usbd_sof_cb+0xe>
			sof->cb();
    c324:	4798      	blx	r3
		sof = sof->next;
    c326:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    c328:	2c00      	cmp	r4, #0
    c32a:	d1f9      	bne.n	c320 <usbd_sof_cb+0x8>
    c32c:	bd10      	pop	{r4, pc}
    c32e:	bf00      	nop
    c330:	20001c40 	.word	0x20001c40

0000c334 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c334:	b538      	push	{r3, r4, r5, lr}
    c336:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    c338:	b189      	cbz	r1, c35e <usbdc_cb_ctl_done+0x2a>
    c33a:	2901      	cmp	r1, #1
    c33c:	d10d      	bne.n	c35a <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c33e:	4b23      	ldr	r3, [pc, #140]	; (c3cc <usbdc_cb_ctl_done+0x98>)
    c340:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    c342:	b154      	cbz	r4, c35a <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    c344:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c346:	2201      	movs	r2, #1
    c348:	4629      	mov	r1, r5
    c34a:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    c34c:	b113      	cbz	r3, c354 <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    c34e:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    c350:	300a      	adds	r0, #10
    c352:	d102      	bne.n	c35a <usbdc_cb_ctl_done+0x26>
		h = h->next;
    c354:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c356:	2c00      	cmp	r4, #0
    c358:	d1f4      	bne.n	c344 <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    c35a:	2000      	movs	r0, #0
    c35c:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c35e:	7813      	ldrb	r3, [r2, #0]
    c360:	2b00      	cmp	r3, #0
    c362:	d1fa      	bne.n	c35a <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    c364:	7853      	ldrb	r3, [r2, #1]
    c366:	2b05      	cmp	r3, #5
    c368:	d014      	beq.n	c394 <usbdc_cb_ctl_done+0x60>
    c36a:	2b09      	cmp	r3, #9
    c36c:	d1f5      	bne.n	c35a <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    c36e:	8852      	ldrh	r2, [r2, #2]
    c370:	4b16      	ldr	r3, [pc, #88]	; (c3cc <usbdc_cb_ctl_done+0x98>)
    c372:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c374:	bb3a      	cbnz	r2, c3c6 <usbdc_cb_ctl_done+0x92>
    c376:	2503      	movs	r5, #3
    c378:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c37a:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c37c:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c37e:	2c00      	cmp	r4, #0
    c380:	d0eb      	beq.n	c35a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c382:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c384:	4629      	mov	r1, r5
    c386:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c388:	b103      	cbz	r3, c38c <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    c38a:	4798      	blx	r3
		cg = cg->next;
    c38c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c38e:	2c00      	cmp	r4, #0
    c390:	d1f7      	bne.n	c382 <usbdc_cb_ctl_done+0x4e>
    c392:	e7e2      	b.n	c35a <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    c394:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    c396:	b2c0      	uxtb	r0, r0
    c398:	f000 fcf0 	bl	cd7c <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c39c:	886b      	ldrh	r3, [r5, #2]
    c39e:	b97b      	cbnz	r3, c3c0 <usbdc_cb_ctl_done+0x8c>
    c3a0:	2502      	movs	r5, #2
    c3a2:	462a      	mov	r2, r5
    c3a4:	4b09      	ldr	r3, [pc, #36]	; (c3cc <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c3a6:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c3a8:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c3aa:	2c00      	cmp	r4, #0
    c3ac:	d0d5      	beq.n	c35a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c3ae:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c3b0:	4629      	mov	r1, r5
    c3b2:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c3b4:	b103      	cbz	r3, c3b8 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    c3b6:	4798      	blx	r3
		cg = cg->next;
    c3b8:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c3ba:	2c00      	cmp	r4, #0
    c3bc:	d1f7      	bne.n	c3ae <usbdc_cb_ctl_done+0x7a>
    c3be:	e7cc      	b.n	c35a <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c3c0:	2503      	movs	r5, #3
    c3c2:	462a      	mov	r2, r5
    c3c4:	e7ee      	b.n	c3a4 <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c3c6:	2504      	movs	r5, #4
    c3c8:	462a      	mov	r2, r5
    c3ca:	e7d6      	b.n	c37a <usbdc_cb_ctl_done+0x46>
    c3cc:	20001c40 	.word	0x20001c40

0000c3d0 <usbdc_cb_ctl_req>:
{
    c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c3d4:	4fb6      	ldr	r7, [pc, #728]	; (c6b0 <usbdc_cb_ctl_req+0x2e0>)
    c3d6:	68bc      	ldr	r4, [r7, #8]
{
    c3d8:	b086      	sub	sp, #24
    c3da:	4606      	mov	r6, r0
    c3dc:	460d      	mov	r5, r1
	while (h != NULL) {
    c3de:	b15c      	cbz	r4, c3f8 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    c3e0:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c3e2:	2200      	movs	r2, #0
    c3e4:	4629      	mov	r1, r5
    c3e6:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    c3e8:	b11b      	cbz	r3, c3f2 <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    c3ea:	4798      	blx	r3
			if (0 == rc) {
    c3ec:	b170      	cbz	r0, c40c <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    c3ee:	300a      	adds	r0, #10
    c3f0:	d108      	bne.n	c404 <usbdc_cb_ctl_req+0x34>
		h = h->next;
    c3f2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c3f4:	2c00      	cmp	r4, #0
    c3f6:	d1f3      	bne.n	c3e0 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c3f8:	782b      	ldrb	r3, [r5, #0]
    c3fa:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c3fe:	d025      	beq.n	c44c <usbdc_cb_ctl_req+0x7c>
    c400:	2a80      	cmp	r2, #128	; 0x80
    c402:	d007      	beq.n	c414 <usbdc_cb_ctl_req+0x44>
		return false;
    c404:	2000      	movs	r0, #0
}
    c406:	b006      	add	sp, #24
    c408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    c40c:	2001      	movs	r0, #1
}
    c40e:	b006      	add	sp, #24
    c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    c414:	786a      	ldrb	r2, [r5, #1]
    c416:	2a0a      	cmp	r2, #10
    c418:	d8f4      	bhi.n	c404 <usbdc_cb_ctl_req+0x34>
    c41a:	a101      	add	r1, pc, #4	; (adr r1, c420 <usbdc_cb_ctl_req+0x50>)
    c41c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c420:	0000c53f 	.word	0x0000c53f
    c424:	0000c405 	.word	0x0000c405
    c428:	0000c405 	.word	0x0000c405
    c42c:	0000c405 	.word	0x0000c405
    c430:	0000c405 	.word	0x0000c405
    c434:	0000c405 	.word	0x0000c405
    c438:	0000c4f3 	.word	0x0000c4f3
    c43c:	0000c405 	.word	0x0000c405
    c440:	0000c4d1 	.word	0x0000c4d1
    c444:	0000c405 	.word	0x0000c405
    c448:	0000c489 	.word	0x0000c489
	switch (req->bRequest) {
    c44c:	786a      	ldrb	r2, [r5, #1]
    c44e:	3a01      	subs	r2, #1
    c450:	2a0a      	cmp	r2, #10
    c452:	d8d7      	bhi.n	c404 <usbdc_cb_ctl_req+0x34>
    c454:	a101      	add	r1, pc, #4	; (adr r1, c45c <usbdc_cb_ctl_req+0x8c>)
    c456:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c45a:	bf00      	nop
    c45c:	0000c657 	.word	0x0000c657
    c460:	0000c405 	.word	0x0000c405
    c464:	0000c627 	.word	0x0000c627
    c468:	0000c405 	.word	0x0000c405
    c46c:	0000c609 	.word	0x0000c609
    c470:	0000c405 	.word	0x0000c405
    c474:	0000c405 	.word	0x0000c405
    c478:	0000c405 	.word	0x0000c405
    c47c:	0000c5e3 	.word	0x0000c5e3
    c480:	0000c405 	.word	0x0000c405
    c484:	0000c587 	.word	0x0000c587
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c488:	7f7b      	ldrb	r3, [r7, #29]
    c48a:	88aa      	ldrh	r2, [r5, #4]
    c48c:	4113      	asrs	r3, r2
    c48e:	f013 0301 	ands.w	r3, r3, #1
    c492:	f000 818e 	beq.w	c7b2 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c496:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c498:	b91c      	cbnz	r4, c4a2 <usbdc_cb_ctl_req+0xd2>
    c49a:	e7b3      	b.n	c404 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c49c:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c49e:	2c00      	cmp	r4, #0
    c4a0:	d0b0      	beq.n	c404 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c4a2:	6863      	ldr	r3, [r4, #4]
    c4a4:	462a      	mov	r2, r5
    c4a6:	2102      	movs	r1, #2
    c4a8:	4620      	mov	r0, r4
    c4aa:	4798      	blx	r3
    c4ac:	2800      	cmp	r0, #0
    c4ae:	dbf5      	blt.n	c49c <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c4b0:	697b      	ldr	r3, [r7, #20]
    c4b2:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4b4:	697b      	ldr	r3, [r7, #20]
    c4b6:	9303      	str	r3, [sp, #12]
    c4b8:	2401      	movs	r4, #1
    c4ba:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c4bc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4be:	9404      	str	r4, [sp, #16]
    c4c0:	f88d 3014 	strb.w	r3, [sp, #20]
    c4c4:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c4c8:	f000 fd24 	bl	cf14 <usb_d_ep_transfer>
			return true;
    c4cc:	4620      	mov	r0, r4
    c4ce:	e79a      	b.n	c406 <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c4d0:	697b      	ldr	r3, [r7, #20]
    c4d2:	7efa      	ldrb	r2, [r7, #27]
    c4d4:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4d6:	697b      	ldr	r3, [r7, #20]
    c4d8:	9303      	str	r3, [sp, #12]
    c4da:	2401      	movs	r4, #1
    c4dc:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c4de:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4e0:	f88d 6014 	strb.w	r6, [sp, #20]
    c4e4:	9404      	str	r4, [sp, #16]
    c4e6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c4ea:	f000 fd13 	bl	cf14 <usb_d_ep_transfer>
		return true;
    c4ee:	4620      	mov	r0, r4
    c4f0:	e789      	b.n	c406 <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c4f2:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    c4f4:	0a1a      	lsrs	r2, r3, #8
    c4f6:	2a02      	cmp	r2, #2
    c4f8:	f000 810a 	beq.w	c710 <usbdc_cb_ctl_req+0x340>
    c4fc:	2a03      	cmp	r2, #3
    c4fe:	f000 80f0 	beq.w	c6e2 <usbdc_cb_ctl_req+0x312>
    c502:	2a01      	cmp	r2, #1
    c504:	f47f af7e 	bne.w	c404 <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c508:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    c50a:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c50c:	e893 0003 	ldmia.w	r3, {r0, r1}
    c510:	2c12      	cmp	r4, #18
    c512:	bf28      	it	cs
    c514:	2412      	movcs	r4, #18
    c516:	f000 fa19 	bl	c94c <usb_find_desc>
	if (!dev_desc) {
    c51a:	4603      	mov	r3, r0
    c51c:	2800      	cmp	r0, #0
    c51e:	f43f af71 	beq.w	c404 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c522:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    c524:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c526:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c528:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c52a:	f88d 6014 	strb.w	r6, [sp, #20]
    c52e:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c532:	f000 fcef 	bl	cf14 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c536:	fab0 f080 	clz	r0, r0
    c53a:	0940      	lsrs	r0, r0, #5
    c53c:	e763      	b.n	c406 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c53e:	f003 011f 	and.w	r1, r3, #31
    c542:	2901      	cmp	r1, #1
    c544:	f240 8091 	bls.w	c66a <usbdc_cb_ctl_req+0x29a>
    c548:	2902      	cmp	r1, #2
    c54a:	f47f af5b 	bne.w	c404 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c54e:	88a8      	ldrh	r0, [r5, #4]
    c550:	b2c0      	uxtb	r0, r0
    c552:	f000 fd91 	bl	d078 <usb_d_ep_halt>
		if (st < 0) {
    c556:	1e03      	subs	r3, r0, #0
    c558:	f6ff af54 	blt.w	c404 <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    c55c:	f003 0301 	and.w	r3, r3, #1
    c560:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c562:	697b      	ldr	r3, [r7, #20]
    c564:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c568:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c56a:	697b      	ldr	r3, [r7, #20]
    c56c:	9303      	str	r3, [sp, #12]
    c56e:	2202      	movs	r2, #2
    c570:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c572:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c574:	f88d 6014 	strb.w	r6, [sp, #20]
    c578:	9204      	str	r2, [sp, #16]
    c57a:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c57e:	f000 fcc9 	bl	cf14 <usb_d_ep_transfer>
	return true;
    c582:	2001      	movs	r0, #1
    c584:	e73f      	b.n	c406 <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c586:	683b      	ldr	r3, [r7, #0]
    c588:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    c58a:	886c      	ldrh	r4, [r5, #2]
    c58c:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c58e:	e893 0003 	ldmia.w	r3, {r0, r1}
    c592:	f000 fa0f 	bl	c9b4 <usb_find_cfg_desc>
	if (NULL == ifc) {
    c596:	2800      	cmp	r0, #0
    c598:	f43f af34 	beq.w	c404 <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    c59c:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    c59e:	78c1      	ldrb	r1, [r0, #3]
    c5a0:	7883      	ldrb	r3, [r0, #2]
    c5a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c5a6:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c5aa:	4619      	mov	r1, r3
    c5ac:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c5ae:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c5b0:	f000 f9cc 	bl	c94c <usb_find_desc>
    c5b4:	2800      	cmp	r0, #0
    c5b6:	f43f af25 	beq.w	c404 <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c5ba:	7883      	ldrb	r3, [r0, #2]
    c5bc:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c5be:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c5c2:	d103      	bne.n	c5cc <usbdc_cb_ctl_req+0x1fc>
    c5c4:	78c3      	ldrb	r3, [r0, #3]
    c5c6:	42a3      	cmp	r3, r4
    c5c8:	f000 80c9 	beq.w	c75e <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    c5cc:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c5ce:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    c5d0:	7818      	ldrb	r0, [r3, #0]
    c5d2:	4403      	add	r3, r0
    c5d4:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    c5d6:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c5d8:	f000 f9b8 	bl	c94c <usb_find_desc>
		if (NULL == ifc) {
    c5dc:	2800      	cmp	r0, #0
    c5de:	d1ec      	bne.n	c5ba <usbdc_cb_ctl_req+0x1ea>
    c5e0:	e710      	b.n	c404 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c5e2:	886a      	ldrh	r2, [r5, #2]
    c5e4:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c5e6:	2a00      	cmp	r2, #0
    c5e8:	d142      	bne.n	c670 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c5ea:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c5ec:	b13c      	cbz	r4, c5fe <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c5ee:	6863      	ldr	r3, [r4, #4]
    c5f0:	4620      	mov	r0, r4
    c5f2:	2200      	movs	r2, #0
    c5f4:	2101      	movs	r1, #1
    c5f6:	4798      	blx	r3
		func = func->next;
    c5f8:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c5fa:	2c00      	cmp	r4, #0
    c5fc:	d1f7      	bne.n	c5ee <usbdc_cb_ctl_req+0x21e>
    c5fe:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    c600:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c602:	2300      	movs	r3, #0
    c604:	2201      	movs	r2, #1
    c606:	e002      	b.n	c60e <usbdc_cb_ctl_req+0x23e>
    c608:	2300      	movs	r3, #0
    c60a:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    c60c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c60e:	f88d 6014 	strb.w	r6, [sp, #20]
    c612:	9303      	str	r3, [sp, #12]
    c614:	9304      	str	r3, [sp, #16]
    c616:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c61a:	f000 fc7b 	bl	cf14 <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c61e:	fab0 f080 	clz	r0, r0
    c622:	0940      	lsrs	r0, r0, #5
    c624:	e6ef      	b.n	c406 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c626:	2b02      	cmp	r3, #2
    c628:	f47f aeec 	bne.w	c404 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c62c:	88ef      	ldrh	r7, [r5, #6]
    c62e:	2f00      	cmp	r7, #0
    c630:	f47f aee8 	bne.w	c404 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c634:	88a8      	ldrh	r0, [r5, #4]
    c636:	2101      	movs	r1, #1
    c638:	b2c0      	uxtb	r0, r0
    c63a:	f000 fd1d 	bl	d078 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c63e:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c640:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c642:	9703      	str	r7, [sp, #12]
    c644:	9704      	str	r7, [sp, #16]
    c646:	f88d 6014 	strb.w	r6, [sp, #20]
    c64a:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c64e:	f000 fc61 	bl	cf14 <usb_d_ep_transfer>
		return true;
    c652:	4620      	mov	r0, r4
    c654:	e6d7      	b.n	c406 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c656:	2b02      	cmp	r3, #2
    c658:	f47f aed4 	bne.w	c404 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c65c:	88ef      	ldrh	r7, [r5, #6]
    c65e:	2f00      	cmp	r7, #0
    c660:	f47f aed0 	bne.w	c404 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c664:	88a8      	ldrh	r0, [r5, #4]
    c666:	4639      	mov	r1, r7
    c668:	e7e6      	b.n	c638 <usbdc_cb_ctl_req+0x268>
		st = 0;
    c66a:	2300      	movs	r3, #0
    c66c:	9301      	str	r3, [sp, #4]
    c66e:	e778      	b.n	c562 <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c670:	683b      	ldr	r3, [r7, #0]
    c672:	e893 0003 	ldmia.w	r3, {r0, r1}
    c676:	f000 f99d 	bl	c9b4 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c67a:	2800      	cmp	r0, #0
    c67c:	f43f aec2 	beq.w	c404 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c680:	78c1      	ldrb	r1, [r0, #3]
    c682:	7882      	ldrb	r2, [r0, #2]
    c684:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    c688:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c68c:	4619      	mov	r1, r3
    c68e:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    c690:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c692:	f000 f95b 	bl	c94c <usb_find_desc>
    c696:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c698:	2800      	cmp	r0, #0
    c69a:	d0b0      	beq.n	c5fe <usbdc_cb_ctl_req+0x22e>
    c69c:	24ff      	movs	r4, #255	; 0xff
    c69e:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c6a0:	f890 8002 	ldrb.w	r8, [r0, #2]
    c6a4:	45a0      	cmp	r8, r4
    c6a6:	d010      	beq.n	c6ca <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c6a8:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c6aa:	b92c      	cbnz	r4, c6b8 <usbdc_cb_ctl_req+0x2e8>
    c6ac:	e092      	b.n	c7d4 <usbdc_cb_ctl_req+0x404>
    c6ae:	bf00      	nop
    c6b0:	20001c40 	.word	0x20001c40
					func = func->next;
    c6b4:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c6b6:	b134      	cbz	r4, c6c6 <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c6b8:	6863      	ldr	r3, [r4, #4]
    c6ba:	462a      	mov	r2, r5
    c6bc:	2100      	movs	r1, #0
    c6be:	4620      	mov	r0, r4
    c6c0:	4798      	blx	r3
    c6c2:	2800      	cmp	r0, #0
    c6c4:	d1f6      	bne.n	c6b4 <usbdc_cb_ctl_req+0x2e4>
    c6c6:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    c6c8:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    c6ca:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c6cc:	9904      	ldr	r1, [sp, #16]
    c6ce:	4403      	add	r3, r0
    c6d0:	4618      	mov	r0, r3
    c6d2:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    c6d4:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c6d6:	f000 f939 	bl	c94c <usb_find_desc>
    c6da:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c6dc:	2800      	cmp	r0, #0
    c6de:	d1df      	bne.n	c6a0 <usbdc_cb_ctl_req+0x2d0>
    c6e0:	e78e      	b.n	c600 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c6e2:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c6e4:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c6e6:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c6e8:	e892 0003 	ldmia.w	r2, {r0, r1}
    c6ec:	b2da      	uxtb	r2, r3
    c6ee:	f000 f98d 	bl	ca0c <usb_find_str_desc>
	if (NULL == str_desc) {
    c6f2:	4603      	mov	r3, r0
    c6f4:	2800      	cmp	r0, #0
    c6f6:	f43f ae85 	beq.w	c404 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c6fa:	7801      	ldrb	r1, [r0, #0]
    c6fc:	428c      	cmp	r4, r1
    c6fe:	f67f af10 	bls.w	c522 <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c702:	3d01      	subs	r5, #1
    c704:	4225      	tst	r5, r4
    c706:	bf0c      	ite	eq
    c708:	2201      	moveq	r2, #1
    c70a:	2200      	movne	r2, #0
    c70c:	460c      	mov	r4, r1
    c70e:	e709      	b.n	c524 <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c710:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c712:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c714:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c716:	3301      	adds	r3, #1
    c718:	e892 0003 	ldmia.w	r2, {r0, r1}
    c71c:	b2da      	uxtb	r2, r3
    c71e:	f000 f949 	bl	c9b4 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c722:	4602      	mov	r2, r0
    c724:	2800      	cmp	r0, #0
    c726:	f43f ae6d 	beq.w	c404 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c72a:	78c1      	ldrb	r1, [r0, #3]
    c72c:	7883      	ldrb	r3, [r0, #2]
    c72e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    c732:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    c734:	429c      	cmp	r4, r3
    c736:	d94b      	bls.n	c7d0 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c738:	3d01      	subs	r5, #1
    c73a:	4225      	tst	r5, r4
    c73c:	bf0c      	ite	eq
    c73e:	2101      	moveq	r1, #1
    c740:	2100      	movne	r1, #0
    c742:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    c744:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c746:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c748:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c74a:	f88d 6014 	strb.w	r6, [sp, #20]
    c74e:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c752:	f000 fbdf 	bl	cf14 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c756:	fab0 f080 	clz	r0, r0
    c75a:	0940      	lsrs	r0, r0, #5
    c75c:	e653      	b.n	c406 <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c75e:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    c760:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    c762:	b926      	cbnz	r6, c76e <usbdc_cb_ctl_req+0x39e>
    c764:	e64e      	b.n	c404 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c766:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c768:	2e00      	cmp	r6, #0
    c76a:	f43f ae4b 	beq.w	c404 <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c76e:	6873      	ldr	r3, [r6, #4]
    c770:	aa01      	add	r2, sp, #4
    c772:	2101      	movs	r1, #1
    c774:	4630      	mov	r0, r6
    c776:	4798      	blx	r3
    c778:	2800      	cmp	r0, #0
    c77a:	d1f4      	bne.n	c766 <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c77c:	4601      	mov	r1, r0
    c77e:	aa01      	add	r2, sp, #4
    c780:	6873      	ldr	r3, [r6, #4]
    c782:	4630      	mov	r0, r6
    c784:	4798      	blx	r3
    c786:	2800      	cmp	r0, #0
    c788:	f47f ae3c 	bne.w	c404 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c78c:	b12c      	cbz	r4, c79a <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c78e:	7f7b      	ldrb	r3, [r7, #29]
    c790:	2201      	movs	r2, #1
    c792:	fa02 f505 	lsl.w	r5, r2, r5
    c796:	432b      	orrs	r3, r5
    c798:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c79a:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c79c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c79e:	9303      	str	r3, [sp, #12]
    c7a0:	9304      	str	r3, [sp, #16]
    c7a2:	f88d 3014 	strb.w	r3, [sp, #20]
    c7a6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c7aa:	f000 fbb3 	bl	cf14 <usb_d_ep_transfer>
			return true;
    c7ae:	2001      	movs	r0, #1
    c7b0:	e629      	b.n	c406 <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    c7b2:	697a      	ldr	r2, [r7, #20]
    c7b4:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c7b6:	697a      	ldr	r2, [r7, #20]
    c7b8:	9203      	str	r2, [sp, #12]
    c7ba:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c7bc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c7be:	f88d 3014 	strb.w	r3, [sp, #20]
    c7c2:	f88d 3015 	strb.w	r3, [sp, #21]
    c7c6:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    c7c8:	f000 fba4 	bl	cf14 <usb_d_ep_transfer>
		return true;
    c7cc:	4620      	mov	r0, r4
    c7ce:	e61a      	b.n	c406 <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    c7d0:	2100      	movs	r1, #0
    c7d2:	e7b7      	b.n	c744 <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    c7d4:	4644      	mov	r4, r8
    c7d6:	e778      	b.n	c6ca <usbdc_cb_ctl_req+0x2fa>

0000c7d8 <usbd_event_cb>:
{
    c7d8:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    c7da:	b338      	cbz	r0, c82c <usbd_event_cb+0x54>
    c7dc:	2801      	cmp	r0, #1
    c7de:	d124      	bne.n	c82a <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c7e0:	4d19      	ldr	r5, [pc, #100]	; (c848 <usbd_event_cb+0x70>)
    c7e2:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    c7e4:	b13c      	cbz	r4, c7f6 <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c7e6:	6863      	ldr	r3, [r4, #4]
    c7e8:	4620      	mov	r0, r4
    c7ea:	2200      	movs	r2, #0
    c7ec:	2101      	movs	r1, #1
    c7ee:	4798      	blx	r3
		func = func->next;
    c7f0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c7f2:	2c00      	cmp	r4, #0
    c7f4:	d1f7      	bne.n	c7e6 <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    c7f6:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    c7f8:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    c7fa:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    c7fc:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c7fe:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    c800:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    c802:	f000 fb41 	bl	ce88 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    c806:	7f28      	ldrb	r0, [r5, #28]
    c808:	f000 faba 	bl	cd80 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c80c:	4621      	mov	r1, r4
    c80e:	4620      	mov	r0, r4
    c810:	4a0e      	ldr	r2, [pc, #56]	; (c84c <usbd_event_cb+0x74>)
    c812:	f000 fc69 	bl	d0e8 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c816:	4620      	mov	r0, r4
    c818:	4631      	mov	r1, r6
    c81a:	4a0d      	ldr	r2, [pc, #52]	; (c850 <usbd_event_cb+0x78>)
    c81c:	f000 fc64 	bl	d0e8 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    c820:	4620      	mov	r0, r4
}
    c822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    c826:	f000 bb4b 	b.w	cec0 <usb_d_ep_enable>
    c82a:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c82c:	4b06      	ldr	r3, [pc, #24]	; (c848 <usbd_event_cb+0x70>)
    c82e:	68dc      	ldr	r4, [r3, #12]
    c830:	460d      	mov	r5, r1
	while (cg != NULL) {
    c832:	b144      	cbz	r4, c846 <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    c834:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c836:	4629      	mov	r1, r5
    c838:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    c83a:	b103      	cbz	r3, c83e <usbd_event_cb+0x66>
			cg->cb(change, value);
    c83c:	4798      	blx	r3
		cg = cg->next;
    c83e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c840:	2c00      	cmp	r4, #0
    c842:	d1f7      	bne.n	c834 <usbd_event_cb+0x5c>
    c844:	bd70      	pop	{r4, r5, r6, pc}
    c846:	bd70      	pop	{r4, r5, r6, pc}
    c848:	20001c40 	.word	0x20001c40
    c84c:	0000c3d1 	.word	0x0000c3d1
    c850:	0000c335 	.word	0x0000c335

0000c854 <usbdc_xfer>:
{
    c854:	b500      	push	{lr}
    c856:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c858:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    c85c:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c85e:	9101      	str	r1, [sp, #4]
    c860:	9202      	str	r2, [sp, #8]
    c862:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c866:	f000 fb55 	bl	cf14 <usb_d_ep_transfer>
}
    c86a:	b005      	add	sp, #20
    c86c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c870 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    c870:	2801      	cmp	r0, #1
    c872:	d009      	beq.n	c888 <usbdc_register_handler+0x18>
    c874:	d305      	bcc.n	c882 <usbdc_register_handler+0x12>
    c876:	2802      	cmp	r0, #2
    c878:	d102      	bne.n	c880 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c87a:	4805      	ldr	r0, [pc, #20]	; (c890 <usbdc_register_handler+0x20>)
    c87c:	f000 bc66 	b.w	d14c <list_insert_at_end>
    c880:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c882:	4804      	ldr	r0, [pc, #16]	; (c894 <usbdc_register_handler+0x24>)
    c884:	f000 bc62 	b.w	d14c <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c888:	4803      	ldr	r0, [pc, #12]	; (c898 <usbdc_register_handler+0x28>)
    c88a:	f000 bc5f 	b.w	d14c <list_insert_at_end>
    c88e:	bf00      	nop
    c890:	20001c4c 	.word	0x20001c4c
    c894:	20001c44 	.word	0x20001c44
    c898:	20001c48 	.word	0x20001c48

0000c89c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c89c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c89e:	4605      	mov	r5, r0
    c8a0:	3000      	adds	r0, #0
    c8a2:	bf18      	it	ne
    c8a4:	2001      	movne	r0, #1
    c8a6:	f240 3255 	movw	r2, #853	; 0x355
    c8aa:	490c      	ldr	r1, [pc, #48]	; (c8dc <usbdc_init+0x40>)
    c8ac:	f000 fc4a 	bl	d144 <assert>

	int32_t rc;

	rc = usb_d_init();
    c8b0:	f000 f9dc 	bl	cc6c <usb_d_init>
	if (rc < 0) {
    c8b4:	2800      	cmp	r0, #0
    c8b6:	db0f      	blt.n	c8d8 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c8b8:	4c09      	ldr	r4, [pc, #36]	; (c8e0 <usbdc_init+0x44>)
    c8ba:	2220      	movs	r2, #32
    c8bc:	2100      	movs	r1, #0
    c8be:	4620      	mov	r0, r4
    c8c0:	f012 f81c 	bl	1e8fc <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c8c4:	4907      	ldr	r1, [pc, #28]	; (c8e4 <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    c8c6:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c8c8:	2000      	movs	r0, #0
    c8ca:	f000 fa51 	bl	cd70 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c8ce:	2001      	movs	r0, #1
    c8d0:	4905      	ldr	r1, [pc, #20]	; (c8e8 <usbdc_init+0x4c>)
    c8d2:	f000 fa4d 	bl	cd70 <usb_d_register_callback>

	return 0;
    c8d6:	2000      	movs	r0, #0
}
    c8d8:	bd38      	pop	{r3, r4, r5, pc}
    c8da:	bf00      	nop
    c8dc:	00023674 	.word	0x00023674
    c8e0:	20001c40 	.word	0x20001c40
    c8e4:	0000c319 	.word	0x0000c319
    c8e8:	0000c7d9 	.word	0x0000c7d9

0000c8ec <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    c8ec:	4601      	mov	r1, r0
    c8ee:	4801      	ldr	r0, [pc, #4]	; (c8f4 <usbdc_register_function+0x8>)
    c8f0:	f000 bc2c 	b.w	d14c <list_insert_at_end>
    c8f4:	20001c50 	.word	0x20001c50

0000c8f8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c8f8:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c8fa:	4b0a      	ldr	r3, [pc, #40]	; (c924 <usbdc_start+0x2c>)
    c8fc:	7e9c      	ldrb	r4, [r3, #26]
    c8fe:	b954      	cbnz	r4, c916 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    c900:	b160      	cbz	r0, c91c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c902:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    c904:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    c906:	79d2      	ldrb	r2, [r2, #7]
    c908:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c90a:	2201      	movs	r2, #1
    c90c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c90e:	f000 fa31 	bl	cd74 <usb_d_enable>
	return ERR_NONE;
    c912:	4620      	mov	r0, r4
    c914:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    c916:	f06f 0003 	mvn.w	r0, #3
    c91a:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    c91c:	f06f 0008 	mvn.w	r0, #8
}
    c920:	bd10      	pop	{r4, pc}
    c922:	bf00      	nop
    c924:	20001c40 	.word	0x20001c40

0000c928 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    c928:	f000 ba26 	b.w	cd78 <usb_d_attach>

0000c92c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    c92c:	4b01      	ldr	r3, [pc, #4]	; (c934 <usbdc_get_ctrl_buffer+0x8>)
}
    c92e:	6958      	ldr	r0, [r3, #20]
    c930:	4770      	bx	lr
    c932:	bf00      	nop
    c934:	20001c40 	.word	0x20001c40

0000c938 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    c938:	4b03      	ldr	r3, [pc, #12]	; (c948 <usbdc_get_state+0x10>)
    c93a:	7e98      	ldrb	r0, [r3, #26]
    c93c:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    c940:	bf18      	it	ne
    c942:	2010      	movne	r0, #16
    c944:	4770      	bx	lr
    c946:	bf00      	nop
    c948:	20001c40 	.word	0x20001c40

0000c94c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c94c:	4288      	cmp	r0, r1
    c94e:	d214      	bcs.n	c97a <usb_find_desc+0x2e>
    c950:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c952:	2b01      	cmp	r3, #1
    c954:	d911      	bls.n	c97a <usb_find_desc+0x2e>
{
    c956:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c958:	7844      	ldrb	r4, [r0, #1]
    c95a:	4294      	cmp	r4, r2
    c95c:	d106      	bne.n	c96c <usb_find_desc+0x20>
    c95e:	e009      	b.n	c974 <usb_find_desc+0x28>
    c960:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c962:	2b01      	cmp	r3, #1
    c964:	d905      	bls.n	c972 <usb_find_desc+0x26>
	return desc[1];
    c966:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c968:	4294      	cmp	r4, r2
    c96a:	d003      	beq.n	c974 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    c96c:	4418      	add	r0, r3
	while (desc < eof) {
    c96e:	4281      	cmp	r1, r0
    c970:	d8f6      	bhi.n	c960 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c972:	2000      	movs	r0, #0
}
    c974:	f85d 4b04 	ldr.w	r4, [sp], #4
    c978:	4770      	bx	lr
	return NULL;
    c97a:	2000      	movs	r0, #0
    c97c:	4770      	bx	lr
    c97e:	bf00      	nop

0000c980 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c980:	4288      	cmp	r0, r1
    c982:	d213      	bcs.n	c9ac <usb_find_ep_desc+0x2c>
    c984:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c986:	2b01      	cmp	r3, #1
    c988:	d910      	bls.n	c9ac <usb_find_ep_desc+0x2c>
	return desc[1];
    c98a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c98c:	2a04      	cmp	r2, #4
    c98e:	d00d      	beq.n	c9ac <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c990:	2a05      	cmp	r2, #5
    c992:	d108      	bne.n	c9a6 <usb_find_ep_desc+0x26>
    c994:	e00c      	b.n	c9b0 <usb_find_ep_desc+0x30>
    c996:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c998:	2b01      	cmp	r3, #1
    c99a:	d907      	bls.n	c9ac <usb_find_ep_desc+0x2c>
    c99c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c99e:	2a04      	cmp	r2, #4
    c9a0:	d004      	beq.n	c9ac <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c9a2:	2a05      	cmp	r2, #5
    c9a4:	d003      	beq.n	c9ae <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    c9a6:	4418      	add	r0, r3
	while (desc < eof) {
    c9a8:	4281      	cmp	r1, r0
    c9aa:	d8f4      	bhi.n	c996 <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c9ac:	2000      	movs	r0, #0
}
    c9ae:	4770      	bx	lr
    c9b0:	4770      	bx	lr
    c9b2:	bf00      	nop

0000c9b4 <usb_find_cfg_desc>:
	while (desc < eof) {
    c9b4:	4288      	cmp	r0, r1
    c9b6:	d226      	bcs.n	ca06 <usb_find_cfg_desc+0x52>
    c9b8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c9ba:	2b01      	cmp	r3, #1
    c9bc:	d923      	bls.n	ca06 <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c9be:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c9c0:	7844      	ldrb	r4, [r0, #1]
    c9c2:	2c02      	cmp	r4, #2
    c9c4:	d106      	bne.n	c9d4 <usb_find_cfg_desc+0x20>
    c9c6:	e012      	b.n	c9ee <usb_find_cfg_desc+0x3a>
    c9c8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c9ca:	2b01      	cmp	r3, #1
    c9cc:	d905      	bls.n	c9da <usb_find_cfg_desc+0x26>
	return desc[1];
    c9ce:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c9d0:	2c02      	cmp	r4, #2
    c9d2:	d00c      	beq.n	c9ee <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    c9d4:	4418      	add	r0, r3
	while (desc < eof) {
    c9d6:	4281      	cmp	r1, r0
    c9d8:	d8f6      	bhi.n	c9c8 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    c9da:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    c9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    c9e0:	4770      	bx	lr
		_desc_len_check();
    c9e2:	7803      	ldrb	r3, [r0, #0]
    c9e4:	2b01      	cmp	r3, #1
    c9e6:	d9f8      	bls.n	c9da <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    c9e8:	7843      	ldrb	r3, [r0, #1]
    c9ea:	2b02      	cmp	r3, #2
    c9ec:	d1f5      	bne.n	c9da <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    c9ee:	7943      	ldrb	r3, [r0, #5]
    c9f0:	4293      	cmp	r3, r2
    c9f2:	d0f3      	beq.n	c9dc <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    c9f4:	78c4      	ldrb	r4, [r0, #3]
    c9f6:	7883      	ldrb	r3, [r0, #2]
    c9f8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c9fc:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    ca00:	4281      	cmp	r1, r0
    ca02:	d8ee      	bhi.n	c9e2 <usb_find_cfg_desc+0x2e>
    ca04:	e7e9      	b.n	c9da <usb_find_cfg_desc+0x26>
		return NULL;
    ca06:	2000      	movs	r0, #0
    ca08:	4770      	bx	lr
    ca0a:	bf00      	nop

0000ca0c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ca0c:	4288      	cmp	r0, r1
    ca0e:	d216      	bcs.n	ca3e <usb_find_str_desc+0x32>
{
    ca10:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    ca12:	2500      	movs	r5, #0
    ca14:	e005      	b.n	ca22 <usb_find_str_desc+0x16>
	return desc[1];
    ca16:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    ca18:	2c03      	cmp	r4, #3
    ca1a:	d008      	beq.n	ca2e <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    ca1c:	4418      	add	r0, r3
	while (desc < eof) {
    ca1e:	4281      	cmp	r1, r0
    ca20:	d902      	bls.n	ca28 <usb_find_str_desc+0x1c>
    ca22:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ca24:	2b01      	cmp	r3, #1
    ca26:	d8f6      	bhi.n	ca16 <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    ca28:	2000      	movs	r0, #0
}
    ca2a:	bc30      	pop	{r4, r5}
    ca2c:	4770      	bx	lr
			if (i == str_index) {
    ca2e:	4295      	cmp	r5, r2
    ca30:	d0fb      	beq.n	ca2a <usb_find_str_desc+0x1e>
    ca32:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    ca34:	4281      	cmp	r1, r0
    ca36:	f105 0501 	add.w	r5, r5, #1
    ca3a:	d8f2      	bhi.n	ca22 <usb_find_str_desc+0x16>
    ca3c:	e7f4      	b.n	ca28 <usb_find_str_desc+0x1c>
	return NULL;
    ca3e:	2000      	movs	r0, #0
    ca40:	4770      	bx	lr
    ca42:	bf00      	nop

0000ca44 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    ca44:	2000      	movs	r0, #0
    ca46:	4770      	bx	lr

0000ca48 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    ca48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca4a:	4f0f      	ldr	r7, [pc, #60]	; (ca88 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca4c:	f000 0e0f 	and.w	lr, r0, #15
    ca50:	463a      	mov	r2, r7
{
    ca52:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ca54:	7854      	ldrb	r4, [r2, #1]
    ca56:	42a0      	cmp	r0, r4
    ca58:	461e      	mov	r6, r3
    ca5a:	f103 0301 	add.w	r3, r3, #1
    ca5e:	d008      	beq.n	ca72 <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ca60:	7815      	ldrb	r5, [r2, #0]
    ca62:	3220      	adds	r2, #32
    ca64:	b90d      	cbnz	r5, ca6a <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca66:	4574      	cmp	r4, lr
    ca68:	d003      	beq.n	ca72 <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ca6a:	2b0d      	cmp	r3, #13
    ca6c:	d1f2      	bne.n	ca54 <usb_d_cb_trans_more+0xc>
    ca6e:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    ca72:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    ca76:	78b3      	ldrb	r3, [r6, #2]
    ca78:	2b03      	cmp	r3, #3
    ca7a:	d001      	beq.n	ca80 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    ca7c:	2000      	movs	r0, #0
    ca7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    ca80:	69b3      	ldr	r3, [r6, #24]
}
    ca82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    ca86:	4718      	bx	r3
    ca88:	20001c60 	.word	0x20001c60

0000ca8c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    ca8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca90:	f8df 9130 	ldr.w	r9, [pc, #304]	; cbc4 <_usb_d_cb_trans_done+0x138>
    ca94:	4607      	mov	r7, r0
    ca96:	4688      	mov	r8, r1
    ca98:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca9a:	f000 010f 	and.w	r1, r0, #15
{
    ca9e:	2300      	movs	r3, #0
    caa0:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    caa2:	7844      	ldrb	r4, [r0, #1]
    caa4:	42a7      	cmp	r7, r4
    caa6:	461e      	mov	r6, r3
    caa8:	f103 0301 	add.w	r3, r3, #1
    caac:	d008      	beq.n	cac0 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    caae:	7805      	ldrb	r5, [r0, #0]
    cab0:	3020      	adds	r0, #32
    cab2:	b90d      	cbnz	r5, cab8 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cab4:	428c      	cmp	r4, r1
    cab6:	d003      	beq.n	cac0 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cab8:	2b0d      	cmp	r3, #13
    caba:	d1f2      	bne.n	caa2 <_usb_d_cb_trans_done+0x16>
    cabc:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    cac0:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    cac2:	f1b8 0f00 	cmp.w	r8, #0
    cac6:	d110      	bne.n	caea <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    cac8:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cacc:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    cad0:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cad4:	b32b      	cbz	r3, cb22 <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    cad6:	2301      	movs	r3, #1
    cad8:	4641      	mov	r1, r8
    cada:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    cadc:	444e      	add	r6, r9
    cade:	4638      	mov	r0, r7
    cae0:	69f3      	ldr	r3, [r6, #28]
    cae2:	4798      	blx	r3
}
    cae4:	b007      	add	sp, #28
    cae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    caea:	f1b8 0f01 	cmp.w	r8, #1
    caee:	d00b      	beq.n	cb08 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    caf0:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    caf4:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    caf8:	d025      	beq.n	cb46 <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    cafa:	f1b8 0f03 	cmp.w	r8, #3
    cafe:	d01d      	beq.n	cb3c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    cb00:	2106      	movs	r1, #6
    cb02:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    cb04:	70d9      	strb	r1, [r3, #3]
    cb06:	e7e9      	b.n	cadc <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    cb08:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cb0c:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    cb10:	f04f 0802 	mov.w	r8, #2
    cb14:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cb18:	b1e9      	cbz	r1, cb56 <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    cb1a:	2305      	movs	r3, #5
    cb1c:	4641      	mov	r1, r8
    cb1e:	70a3      	strb	r3, [r4, #2]
    cb20:	e7dc      	b.n	cadc <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    cb22:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cb24:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    cb26:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cb28:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    cb2c:	d01f      	beq.n	cb6e <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    cb2e:	69e3      	ldr	r3, [r4, #28]
    cb30:	7860      	ldrb	r0, [r4, #1]
    cb32:	4641      	mov	r1, r8
    cb34:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cb36:	2302      	movs	r3, #2
    cb38:	70a3      	strb	r3, [r4, #2]
    cb3a:	e7d3      	b.n	cae4 <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    cb3c:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    cb3e:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    cb40:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    cb42:	70d9      	strb	r1, [r3, #3]
    cb44:	e7ca      	b.n	cadc <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cb46:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    cb4a:	2104      	movs	r1, #4
    cb4c:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cb4e:	b158      	cbz	r0, cb68 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    cb50:	2001      	movs	r0, #1
    cb52:	7098      	strb	r0, [r3, #2]
    cb54:	e7c2      	b.n	cadc <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cb56:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cb58:	f884 8002 	strb.w	r8, [r4, #2]
    cb5c:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cb5e:	f006 fa5b 	bl	13018 <_usb_d_dev_ep_stall>
    cb62:	78e1      	ldrb	r1, [r4, #3]
    cb64:	9a01      	ldr	r2, [sp, #4]
    cb66:	e7b9      	b.n	cadc <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cb68:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    cb6c:	e7ba      	b.n	cae4 <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cb6e:	69e3      	ldr	r3, [r4, #28]
    cb70:	7860      	ldrb	r0, [r4, #1]
    cb72:	f994 500c 	ldrsb.w	r5, [r4, #12]
    cb76:	2101      	movs	r1, #1
    cb78:	4798      	blx	r3
		if (err) {
    cb7a:	b160      	cbz	r0, cb96 <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cb7c:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    cb7e:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    cb80:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cb82:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    cb84:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    cb86:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cb88:	bfa8      	it	ge
    cb8a:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    cb8e:	2101      	movs	r1, #1
    cb90:	f006 fa42 	bl	13018 <_usb_d_dev_ep_stall>
    cb94:	e7a6      	b.n	cae4 <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    cb96:	2304      	movs	r3, #4
    cb98:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    cb9a:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    cb9c:	f8cd 800c 	str.w	r8, [sp, #12]
    cba0:	2d00      	cmp	r5, #0
    cba2:	bfac      	ite	ge
    cba4:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    cba8:	f003 030f 	andlt.w	r3, r3, #15
    cbac:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    cbae:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cbb0:	f8cd 8010 	str.w	r8, [sp, #16]
    cbb4:	f88d 3014 	strb.w	r3, [sp, #20]
    cbb8:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    cbbc:	f006 fae8 	bl	13190 <_usb_d_dev_ep_trans>
    cbc0:	e790      	b.n	cae4 <_usb_d_cb_trans_done+0x58>
    cbc2:	bf00      	nop
    cbc4:	20001c60 	.word	0x20001c60

0000cbc8 <usb_d_cb_trans_setup>:
{
    cbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbcc:	4f26      	ldr	r7, [pc, #152]	; (cc68 <usb_d_cb_trans_setup+0xa0>)
    cbce:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cbd0:	f000 060f 	and.w	r6, r0, #15
    cbd4:	463a      	mov	r2, r7
{
    cbd6:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cbd8:	7851      	ldrb	r1, [r2, #1]
    cbda:	428c      	cmp	r4, r1
    cbdc:	461d      	mov	r5, r3
    cbde:	f103 0301 	add.w	r3, r3, #1
    cbe2:	d032      	beq.n	cc4a <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cbe4:	7810      	ldrb	r0, [r2, #0]
    cbe6:	3220      	adds	r2, #32
    cbe8:	b908      	cbnz	r0, cbee <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cbea:	42b1      	cmp	r1, r6
    cbec:	d02d      	beq.n	cc4a <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cbee:	2b0d      	cmp	r3, #13
    cbf0:	d1f2      	bne.n	cbd8 <usb_d_cb_trans_setup+0x10>
    cbf2:	f06f 0613 	mvn.w	r6, #19
    cbf6:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    cbfa:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    cbfc:	4631      	mov	r1, r6
    cbfe:	4620      	mov	r0, r4
    cc00:	f006 fa9c 	bl	1313c <_usb_d_dev_ep_read_req>
	if (n != 8) {
    cc04:	b2c0      	uxtb	r0, r0
    cc06:	2808      	cmp	r0, #8
    cc08:	d00a      	beq.n	cc20 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cc0a:	2101      	movs	r1, #1
    cc0c:	4620      	mov	r0, r4
    cc0e:	f006 fa03 	bl	13018 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cc12:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    cc16:	2101      	movs	r1, #1
}
    cc18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cc1c:	f006 b9fc 	b.w	13018 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cc20:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cc24:	2100      	movs	r1, #0
    cc26:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    cc28:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cc2c:	f006 f9f4 	bl	13018 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cc30:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    cc32:	2100      	movs	r1, #0
    cc34:	4640      	mov	r0, r8
    cc36:	f006 f9ef 	bl	13018 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    cc3a:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cc3c:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    cc3e:	696b      	ldr	r3, [r5, #20]
    cc40:	4620      	mov	r0, r4
    cc42:	4798      	blx	r3
    cc44:	b120      	cbz	r0, cc50 <usb_d_cb_trans_setup+0x88>
    cc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc4a:	016e      	lsls	r6, r5, #5
    cc4c:	360c      	adds	r6, #12
    cc4e:	e7d4      	b.n	cbfa <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    cc50:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cc52:	4639      	mov	r1, r7
    cc54:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    cc56:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cc58:	f006 f9de 	bl	13018 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cc5c:	4639      	mov	r1, r7
    cc5e:	4640      	mov	r0, r8
}
    cc60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cc64:	f006 b9d8 	b.w	13018 <_usb_d_dev_ep_stall>
    cc68:	20001c60 	.word	0x20001c60

0000cc6c <usb_d_init>:

int32_t usb_d_init(void)
{
    cc6c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    cc6e:	f005 fecf 	bl	12a10 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    cc72:	2800      	cmp	r0, #0
    cc74:	db70      	blt.n	cd58 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    cc76:	4c39      	ldr	r4, [pc, #228]	; (cd5c <usb_d_init+0xf0>)
    cc78:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    cc7c:	2100      	movs	r1, #0
    cc7e:	4620      	mov	r0, r4
    cc80:	f011 fe3c 	bl	1e8fc <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc84:	4b36      	ldr	r3, [pc, #216]	; (cd60 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cc86:	4937      	ldr	r1, [pc, #220]	; (cd64 <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc88:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    cc8a:	22ff      	movs	r2, #255	; 0xff
    cc8c:	7062      	strb	r2, [r4, #1]
    cc8e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    cc92:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    cc96:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    cc9a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    cc9e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    cca2:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    cca6:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    ccaa:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ccac:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ccae:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ccb0:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ccb2:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ccb4:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ccb6:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ccb8:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ccba:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ccbc:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ccbe:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ccc0:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ccc2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ccc6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ccca:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ccce:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ccd2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ccd6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ccda:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ccde:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cce2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cce6:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ccea:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ccee:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    ccf2:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    ccf6:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    ccfa:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    ccfe:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    cd02:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cd06:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cd0a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cd0e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cd12:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cd16:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cd1a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cd1e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cd22:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cd26:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cd2a:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cd2e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cd32:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cd36:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cd3a:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cd3e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cd42:	f006 fb5d 	bl	13400 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    cd46:	4908      	ldr	r1, [pc, #32]	; (cd68 <usb_d_init+0xfc>)
    cd48:	2001      	movs	r0, #1
    cd4a:	f006 fb59 	bl	13400 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    cd4e:	2002      	movs	r0, #2
    cd50:	4906      	ldr	r1, [pc, #24]	; (cd6c <usb_d_init+0x100>)
    cd52:	f006 fb55 	bl	13400 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    cd56:	2000      	movs	r0, #0
}
    cd58:	bd10      	pop	{r4, pc}
    cd5a:	bf00      	nop
    cd5c:	20001c60 	.word	0x20001c60
    cd60:	0000ca45 	.word	0x0000ca45
    cd64:	0000cbc9 	.word	0x0000cbc9
    cd68:	0000ca49 	.word	0x0000ca49
    cd6c:	0000ca8d 	.word	0x0000ca8d

0000cd70 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    cd70:	f006 bb34 	b.w	133dc <_usb_d_dev_register_callback>

0000cd74 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    cd74:	f005 beec 	b.w	12b50 <_usb_d_dev_enable>

0000cd78 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    cd78:	f005 bf1a 	b.w	12bb0 <_usb_d_dev_attach>

0000cd7c <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    cd7c:	f005 bf22 	b.w	12bc4 <_usb_d_dev_set_address>

0000cd80 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    cd80:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cd82:	4e25      	ldr	r6, [pc, #148]	; (ce18 <usb_d_ep0_init+0x98>)
    cd84:	7873      	ldrb	r3, [r6, #1]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d043      	beq.n	ce12 <usb_d_ep0_init+0x92>
    cd8a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d03f      	beq.n	ce12 <usb_d_ep0_init+0x92>
    cd92:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    cd96:	2b00      	cmp	r3, #0
    cd98:	d03b      	beq.n	ce12 <usb_d_ep0_init+0x92>
    cd9a:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    cd9e:	b3c3      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cda0:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    cda4:	b3ab      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cda6:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    cdaa:	b393      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cdac:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    cdb0:	b37b      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cdb2:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    cdb6:	b363      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cdb8:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    cdbc:	b34b      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cdbe:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    cdc2:	b333      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cdc4:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    cdc8:	b31b      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cdca:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    cdce:	b303      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cdd0:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    cdd4:	b1eb      	cbz	r3, ce12 <usb_d_ep0_init+0x92>
    cdd6:	4633      	mov	r3, r6
    cdd8:	2400      	movs	r4, #0
    cdda:	7859      	ldrb	r1, [r3, #1]
    cddc:	29ff      	cmp	r1, #255	; 0xff
    cdde:	d00a      	beq.n	cdf6 <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cde0:	781d      	ldrb	r5, [r3, #0]
    cde2:	3320      	adds	r3, #32
    cde4:	b90d      	cbnz	r5, cdea <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cde6:	290f      	cmp	r1, #15
    cde8:	d005      	beq.n	cdf6 <usb_d_ep0_init+0x76>
    cdea:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cdec:	2c0d      	cmp	r4, #13
    cdee:	d1f4      	bne.n	cdda <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    cdf0:	f06f 0014 	mvn.w	r0, #20
    cdf4:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    cdf6:	2100      	movs	r1, #0
    cdf8:	4602      	mov	r2, r0
    cdfa:	4608      	mov	r0, r1
    cdfc:	f005 fee8 	bl	12bd0 <_usb_d_dev_ep_init>
	if (rc < 0) {
    ce00:	2800      	cmp	r0, #0
    ce02:	db05      	blt.n	ce10 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    ce04:	0164      	lsls	r4, r4, #5
    ce06:	1933      	adds	r3, r6, r4
    ce08:	2000      	movs	r0, #0
    ce0a:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    ce0c:	5530      	strb	r0, [r6, r4]
    ce0e:	bd70      	pop	{r4, r5, r6, pc}
}
    ce10:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    ce12:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    ce16:	bd70      	pop	{r4, r5, r6, pc}
    ce18:	20001c60 	.word	0x20001c60

0000ce1c <usb_d_ep_init>:
{
    ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce1e:	4c19      	ldr	r4, [pc, #100]	; (ce84 <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce20:	f000 0c0f 	and.w	ip, r0, #15
    ce24:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    ce28:	4627      	mov	r7, r4
    ce2a:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce2c:	785d      	ldrb	r5, [r3, #1]
    ce2e:	42a8      	cmp	r0, r5
    ce30:	d024      	beq.n	ce7c <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ce32:	781e      	ldrb	r6, [r3, #0]
    ce34:	3320      	adds	r3, #32
    ce36:	b90e      	cbnz	r6, ce3c <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce38:	4565      	cmp	r5, ip
    ce3a:	d01f      	beq.n	ce7c <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ce3c:	459e      	cmp	lr, r3
    ce3e:	d1f5      	bne.n	ce2c <usb_d_ep_init+0x10>
    ce40:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce42:	7863      	ldrb	r3, [r4, #1]
    ce44:	2bff      	cmp	r3, #255	; 0xff
    ce46:	d00a      	beq.n	ce5e <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ce48:	7826      	ldrb	r6, [r4, #0]
    ce4a:	3420      	adds	r4, #32
    ce4c:	b90e      	cbnz	r6, ce52 <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce4e:	2b0f      	cmp	r3, #15
    ce50:	d005      	beq.n	ce5e <usb_d_ep_init+0x42>
    ce52:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ce54:	2d0d      	cmp	r5, #13
    ce56:	d1f4      	bne.n	ce42 <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    ce58:	f06f 0014 	mvn.w	r0, #20
    ce5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce5e:	460e      	mov	r6, r1
    ce60:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    ce62:	f005 feb5 	bl	12bd0 <_usb_d_dev_ep_init>
	if (rc < 0) {
    ce66:	2800      	cmp	r0, #0
    ce68:	db07      	blt.n	ce7a <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    ce6a:	016d      	lsls	r5, r5, #5
    ce6c:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    ce6e:	f006 0603 	and.w	r6, r6, #3
    ce72:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    ce74:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    ce76:	2000      	movs	r0, #0
    ce78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    ce7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    ce7c:	f06f 0013 	mvn.w	r0, #19
    ce80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce82:	bf00      	nop
    ce84:	20001c60 	.word	0x20001c60

0000ce88 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    ce88:	b570      	push	{r4, r5, r6, lr}
    ce8a:	4e0c      	ldr	r6, [pc, #48]	; (cebc <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce8c:	f000 050f 	and.w	r5, r0, #15
    ce90:	4633      	mov	r3, r6
{
    ce92:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce94:	785a      	ldrb	r2, [r3, #1]
    ce96:	4290      	cmp	r0, r2
    ce98:	d008      	beq.n	ceac <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ce9a:	7819      	ldrb	r1, [r3, #0]
    ce9c:	3320      	adds	r3, #32
    ce9e:	b909      	cbnz	r1, cea4 <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cea0:	42aa      	cmp	r2, r5
    cea2:	d003      	beq.n	ceac <usb_d_ep_deinit+0x24>
    cea4:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cea6:	2c0d      	cmp	r4, #13
    cea8:	d1f4      	bne.n	ce94 <usb_d_ep_deinit+0xc>
    ceaa:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    ceac:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    ceb0:	f005 ff00 	bl	12cb4 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    ceb4:	23ff      	movs	r3, #255	; 0xff
    ceb6:	7063      	strb	r3, [r4, #1]
    ceb8:	bd70      	pop	{r4, r5, r6, pc}
    ceba:	bf00      	nop
    cebc:	20001c60 	.word	0x20001c60

0000cec0 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    cec0:	b570      	push	{r4, r5, r6, lr}
    cec2:	4d13      	ldr	r5, [pc, #76]	; (cf10 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cec4:	f000 060f 	and.w	r6, r0, #15
    cec8:	462b      	mov	r3, r5
{
    ceca:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cecc:	7859      	ldrb	r1, [r3, #1]
    cece:	4288      	cmp	r0, r1
    ced0:	d00a      	beq.n	cee8 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ced2:	781c      	ldrb	r4, [r3, #0]
    ced4:	3320      	adds	r3, #32
    ced6:	b90c      	cbnz	r4, cedc <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ced8:	42b1      	cmp	r1, r6
    ceda:	d015      	beq.n	cf08 <usb_d_ep_enable+0x48>
    cedc:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cede:	2a0d      	cmp	r2, #13
    cee0:	d1f4      	bne.n	cecc <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    cee2:	f06f 0011 	mvn.w	r0, #17
    cee6:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    cee8:	0152      	lsls	r2, r2, #5
    ceea:	5cab      	ldrb	r3, [r5, r2]
    ceec:	2b00      	cmp	r3, #0
    ceee:	bf14      	ite	ne
    cef0:	2301      	movne	r3, #1
    cef2:	2302      	moveq	r3, #2
    cef4:	4415      	add	r5, r2
    cef6:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    cef8:	f005 ff6e 	bl	12dd8 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    cefc:	2800      	cmp	r0, #0
    cefe:	db00      	blt.n	cf02 <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    cf00:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    cf02:	2300      	movs	r3, #0
    cf04:	70ab      	strb	r3, [r5, #2]
    cf06:	bd70      	pop	{r4, r5, r6, pc}
    cf08:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    cf0a:	2302      	movs	r3, #2
    cf0c:	e7f2      	b.n	cef4 <usb_d_ep_enable+0x34>
    cf0e:	bf00      	nop
    cf10:	20001c60 	.word	0x20001c60

0000cf14 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf18:	f8df 811c 	ldr.w	r8, [pc, #284]	; d038 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    cf1c:	7a05      	ldrb	r5, [r0, #8]
{
    cf1e:	b087      	sub	sp, #28
    cf20:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cf22:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    cf26:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cf28:	7859      	ldrb	r1, [r3, #1]
    cf2a:	428d      	cmp	r5, r1
    cf2c:	d00c      	beq.n	cf48 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cf2e:	781c      	ldrb	r4, [r3, #0]
    cf30:	3320      	adds	r3, #32
    cf32:	b90c      	cbnz	r4, cf38 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cf34:	42b9      	cmp	r1, r7
    cf36:	d007      	beq.n	cf48 <usb_d_ep_transfer+0x34>
    cf38:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cf3a:	2a0d      	cmp	r2, #13
    cf3c:	d1f4      	bne.n	cf28 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    cf3e:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    cf42:	b007      	add	sp, #28
    cf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    cf48:	0154      	lsls	r4, r2, #5
    cf4a:	4606      	mov	r6, r0
    cf4c:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    cf50:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    cf52:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    cf56:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    cf5a:	f006 fa6f 	bl	1343c <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    cf5e:	f89b 3002 	ldrb.w	r3, [fp, #2]
    cf62:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    cf66:	f89d 7007 	ldrb.w	r7, [sp, #7]
    cf6a:	b2ff      	uxtb	r7, r7
    cf6c:	2f01      	cmp	r7, #1
    cf6e:	d011      	beq.n	cf94 <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    cf70:	a802      	add	r0, sp, #8
    cf72:	f006 fa6b 	bl	1344c <atomic_leave_critical>
		switch (state) {
    cf76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf7a:	b2db      	uxtb	r3, r3
    cf7c:	2b05      	cmp	r3, #5
    cf7e:	d040      	beq.n	d002 <usb_d_ep_transfer+0xee>
    cf80:	2b06      	cmp	r3, #6
    cf82:	d022      	beq.n	cfca <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    cf84:	2b00      	cmp	r3, #0
    cf86:	bf0c      	ite	eq
    cf88:	f06f 0012 	mvneq.w	r0, #18
    cf8c:	2001      	movne	r0, #1
}
    cf8e:	b007      	add	sp, #28
    cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cf94:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    cf96:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cf98:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    cf9c:	f006 fa56 	bl	1344c <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cfa0:	f818 2004 	ldrb.w	r2, [r8, r4]
    cfa4:	b9b2      	cbnz	r2, cfd4 <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    cfa6:	f89b 1013 	ldrb.w	r1, [fp, #19]
    cfaa:	f89b 3012 	ldrb.w	r3, [fp, #18]
    cfae:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    cfb2:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    cfb4:	bb4b      	cbnz	r3, d00a <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    cfb6:	2204      	movs	r2, #4
    cfb8:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    cfbc:	9304      	str	r3, [sp, #16]
    cfbe:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cfc0:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cfc2:	9203      	str	r2, [sp, #12]
    cfc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cfc8:	e011      	b.n	cfee <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    cfca:	f06f 000f 	mvn.w	r0, #15
}
    cfce:	b007      	add	sp, #28
    cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cfd4:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    cfd8:	6833      	ldr	r3, [r6, #0]
    cfda:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cfdc:	bf18      	it	ne
    cfde:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    cfe0:	062a      	lsls	r2, r5, #24
    cfe2:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cfe6:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cfe8:	d4ec      	bmi.n	cfc4 <usb_d_ep_transfer+0xb0>
    cfea:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    cfee:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cff0:	f88d 3014 	strb.w	r3, [sp, #20]
    cff4:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    cff8:	f006 f8ca 	bl	13190 <_usb_d_dev_ep_trans>
}
    cffc:	b007      	add	sp, #28
    cffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    d002:	2002      	movs	r0, #2
}
    d004:	b007      	add	sp, #28
    d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    d00a:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    d00e:	4599      	cmp	r9, r3
    d010:	464f      	mov	r7, r9
    d012:	bf28      	it	cs
    d014:	461f      	movcs	r7, r3
    d016:	2900      	cmp	r1, #0
    d018:	db05      	blt.n	d026 <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    d01a:	6833      	ldr	r3, [r6, #0]
    d01c:	9704      	str	r7, [sp, #16]
    d01e:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d020:	4617      	mov	r7, r2
    d022:	7a33      	ldrb	r3, [r6, #8]
    d024:	e7e1      	b.n	cfea <usb_d_ep_transfer+0xd6>
    d026:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    d028:	6832      	ldr	r2, [r6, #0]
    d02a:	9704      	str	r7, [sp, #16]
    d02c:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d02e:	bf94      	ite	ls
    d030:	2700      	movls	r7, #0
    d032:	2701      	movhi	r7, #1
    d034:	7a33      	ldrb	r3, [r6, #8]
    d036:	e7c5      	b.n	cfc4 <usb_d_ep_transfer+0xb0>
    d038:	20001c60 	.word	0x20001c60

0000d03c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    d03c:	b570      	push	{r4, r5, r6, lr}
    d03e:	4e0d      	ldr	r6, [pc, #52]	; (d074 <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d040:	f000 050f 	and.w	r5, r0, #15
    d044:	4633      	mov	r3, r6
{
    d046:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d048:	785a      	ldrb	r2, [r3, #1]
    d04a:	4290      	cmp	r0, r2
    d04c:	d008      	beq.n	d060 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d04e:	7819      	ldrb	r1, [r3, #0]
    d050:	3320      	adds	r3, #32
    d052:	b909      	cbnz	r1, d058 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d054:	42aa      	cmp	r2, r5
    d056:	d003      	beq.n	d060 <usb_d_ep_abort+0x24>
    d058:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d05a:	2c0d      	cmp	r4, #13
    d05c:	d1f4      	bne.n	d048 <usb_d_ep_abort+0xc>
    d05e:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d060:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    d064:	f006 f962 	bl	1332c <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d068:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    d06a:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d06c:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    d06e:	70e3      	strb	r3, [r4, #3]
    d070:	bd70      	pop	{r4, r5, r6, pc}
    d072:	bf00      	nop
    d074:	20001c60 	.word	0x20001c60

0000d078 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    d078:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    d07a:	460c      	mov	r4, r1
    d07c:	b131      	cbz	r1, d08c <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    d07e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    d080:	bf18      	it	ne
    d082:	2102      	movne	r1, #2
	}
}
    d084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    d088:	f005 bfc6 	b.w	13018 <_usb_d_dev_ep_stall>
    d08c:	4e15      	ldr	r6, [pc, #84]	; (d0e4 <usb_d_ep_halt+0x6c>)
    d08e:	4605      	mov	r5, r0
    d090:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d092:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d096:	785a      	ldrb	r2, [r3, #1]
    d098:	4295      	cmp	r5, r2
    d09a:	d00a      	beq.n	d0b2 <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d09c:	7819      	ldrb	r1, [r3, #0]
    d09e:	3320      	adds	r3, #32
    d0a0:	b909      	cbnz	r1, d0a6 <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d0a2:	4282      	cmp	r2, r0
    d0a4:	d005      	beq.n	d0b2 <usb_d_ep_halt+0x3a>
    d0a6:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d0a8:	2c0d      	cmp	r4, #13
    d0aa:	d1f4      	bne.n	d096 <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    d0ac:	f06f 0011 	mvn.w	r0, #17
    d0b0:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    d0b2:	2102      	movs	r1, #2
    d0b4:	4628      	mov	r0, r5
    d0b6:	f005 ffaf 	bl	13018 <_usb_d_dev_ep_stall>
    d0ba:	b900      	cbnz	r0, d0be <usb_d_ep_halt+0x46>
}
    d0bc:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d0be:	2100      	movs	r1, #0
    d0c0:	4628      	mov	r0, r5
    d0c2:	f005 ffa9 	bl	13018 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    d0c6:	2800      	cmp	r0, #0
    d0c8:	dbf8      	blt.n	d0bc <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d0ca:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d0ce:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d0d0:	2301      	movs	r3, #1
    d0d2:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d0d4:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d0d6:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d0d8:	69e3      	ldr	r3, [r4, #28]
    d0da:	2200      	movs	r2, #0
    d0dc:	4798      	blx	r3
	return ERR_NONE;
    d0de:	2000      	movs	r0, #0
    d0e0:	bd70      	pop	{r4, r5, r6, pc}
    d0e2:	bf00      	nop
    d0e4:	20001c60 	.word	0x20001c60

0000d0e8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    d0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0ea:	f8df e054 	ldr.w	lr, [pc, #84]	; d140 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d0ee:	f000 070f 	and.w	r7, r0, #15
    d0f2:	4673      	mov	r3, lr
{
    d0f4:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d0f6:	785d      	ldrb	r5, [r3, #1]
    d0f8:	42a8      	cmp	r0, r5
    d0fa:	d008      	beq.n	d10e <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d0fc:	781e      	ldrb	r6, [r3, #0]
    d0fe:	3320      	adds	r3, #32
    d100:	b90e      	cbnz	r6, d106 <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d102:	42bd      	cmp	r5, r7
    d104:	d003      	beq.n	d10e <usb_d_ep_register_callback+0x26>
    d106:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d108:	2c0d      	cmp	r4, #13
    d10a:	d1f4      	bne.n	d0f6 <usb_d_ep_register_callback+0xe>
    d10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    d10e:	4b0b      	ldr	r3, [pc, #44]	; (d13c <usb_d_ep_register_callback+0x54>)
    d110:	2a00      	cmp	r2, #0
    d112:	bf08      	it	eq
    d114:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    d116:	2901      	cmp	r1, #1
    d118:	d003      	beq.n	d122 <usb_d_ep_register_callback+0x3a>
    d11a:	d30a      	bcc.n	d132 <usb_d_ep_register_callback+0x4a>
    d11c:	2902      	cmp	r1, #2
    d11e:	d004      	beq.n	d12a <usb_d_ep_register_callback+0x42>
    d120:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    d122:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d126:	61a2      	str	r2, [r4, #24]
		break;
    d128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    d12a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d12e:	61e2      	str	r2, [r4, #28]
    d130:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    d132:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d136:	6162      	str	r2, [r4, #20]
		break;
    d138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d13a:	bf00      	nop
    d13c:	0000ca45 	.word	0x0000ca45
    d140:	20001c60 	.word	0x20001c60

0000d144 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    d144:	b900      	cbnz	r0, d148 <assert+0x4>
		__asm("BKPT #0");
    d146:	be00      	bkpt	0x0000
    d148:	4770      	bx	lr
    d14a:	bf00      	nop

0000d14c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    d14c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    d14e:	6804      	ldr	r4, [r0, #0]
{
    d150:	4606      	mov	r6, r0
    d152:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    d154:	b144      	cbz	r4, d168 <list_insert_at_end+0x1c>
		if (it == element) {
    d156:	428c      	cmp	r4, r1
    d158:	d015      	beq.n	d186 <list_insert_at_end+0x3a>
    d15a:	4623      	mov	r3, r4
    d15c:	e001      	b.n	d162 <list_insert_at_end+0x16>
    d15e:	429d      	cmp	r5, r3
    d160:	d011      	beq.n	d186 <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    d162:	681b      	ldr	r3, [r3, #0]
    d164:	2b00      	cmp	r3, #0
    d166:	d1fa      	bne.n	d15e <list_insert_at_end+0x12>
    d168:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    d16a:	224f      	movs	r2, #79	; 0x4f
    d16c:	4908      	ldr	r1, [pc, #32]	; (d190 <list_insert_at_end+0x44>)
    d16e:	f7ff ffe9 	bl	d144 <assert>

	if (!list->head) {
    d172:	6833      	ldr	r3, [r6, #0]
    d174:	b90b      	cbnz	r3, d17a <list_insert_at_end+0x2e>
    d176:	e008      	b.n	d18a <list_insert_at_end+0x3e>
    d178:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    d17a:	6823      	ldr	r3, [r4, #0]
    d17c:	2b00      	cmp	r3, #0
    d17e:	d1fb      	bne.n	d178 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    d180:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    d182:	602b      	str	r3, [r5, #0]
    d184:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    d186:	2000      	movs	r0, #0
    d188:	e7ef      	b.n	d16a <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    d18a:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    d18c:	602b      	str	r3, [r5, #0]
		return;
    d18e:	bd70      	pop	{r4, r5, r6, pc}
    d190:	0002368c 	.word	0x0002368c

0000d194 <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    d196:	4d1f      	ldr	r5, [pc, #124]	; (d214 <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    d198:	682c      	ldr	r4, [r5, #0]
    d19a:	f014 0401 	ands.w	r4, r4, #1
    d19e:	d002      	beq.n	d1a6 <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    d1a0:	4b1d      	ldr	r3, [pc, #116]	; (d218 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    d1a2:	6818      	ldr	r0, [r3, #0]
    d1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1a6:	2074      	movs	r0, #116	; 0x74
    d1a8:	f006 faca 	bl	13740 <_Znwj>
    d1ac:	4e1a      	ldr	r6, [pc, #104]	; (d218 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    d1ae:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    d1b0:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    d1b2:	210c      	movs	r1, #12
    d1b4:	f04f 30ff 	mov.w	r0, #4294967295
    d1b8:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    d1ba:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    d1bc:	605c      	str	r4, [r3, #4]
    d1be:	6658      	str	r0, [r3, #100]	; 0x64
    d1c0:	609c      	str	r4, [r3, #8]
    d1c2:	6698      	str	r0, [r3, #104]	; 0x68
    d1c4:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    d1c6:	841c      	strh	r4, [r3, #32]
    d1c8:	611c      	str	r4, [r3, #16]
    d1ca:	625c      	str	r4, [r3, #36]	; 0x24
    d1cc:	615c      	str	r4, [r3, #20]
    d1ce:	851c      	strh	r4, [r3, #40]	; 0x28
    d1d0:	619c      	str	r4, [r3, #24]
    d1d2:	62dc      	str	r4, [r3, #44]	; 0x2c
    d1d4:	61dc      	str	r4, [r3, #28]
    d1d6:	861c      	strh	r4, [r3, #48]	; 0x30
    d1d8:	635c      	str	r4, [r3, #52]	; 0x34
    d1da:	871c      	strh	r4, [r3, #56]	; 0x38
    d1dc:	63dc      	str	r4, [r3, #60]	; 0x3c
    d1de:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    d1e2:	645c      	str	r4, [r3, #68]	; 0x44
    d1e4:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    d1e8:	64dc      	str	r4, [r3, #76]	; 0x4c
    d1ea:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    d1ee:	655c      	str	r4, [r3, #84]	; 0x54
    d1f0:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    d1f4:	65dc      	str	r4, [r3, #92]	; 0x5c
    d1f6:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    d1fa:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    d1fe:	671c      	str	r4, [r3, #112]	; 0x70
    d200:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    d204:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    d208:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    d20c:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    d20e:	6033      	str	r3, [r6, #0]
    d210:	602a      	str	r2, [r5, #0]
}
    d212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d214:	20001e00 	.word	0x20001e00
    d218:	20001e38 	.word	0x20001e38

0000d21c <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    d21c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    d21e:	4bbd      	ldr	r3, [pc, #756]	; (d514 <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    d220:	4605      	mov	r5, r0
    };
    d222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    d224:	b085      	sub	sp, #20
    };
    d226:	ac04      	add	r4, sp, #16
    d228:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d22c:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d22e:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d230:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    d234:	2303      	movs	r3, #3
    d236:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    d23a:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d23e:	f245 03c3 	movw	r3, #20675	; 0x50c3
    d242:	842b      	strh	r3, [r5, #32]
    d244:	852b      	strh	r3, [r5, #40]	; 0x28
    d246:	862b      	strh	r3, [r5, #48]	; 0x30
    d248:	872b      	strh	r3, [r5, #56]	; 0x38
    d24a:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    d24e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    d252:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    d256:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d25a:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    d25e:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    d260:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    d264:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    d268:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    d26c:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    d26e:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    d270:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d272:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    d274:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d276:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    d27a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d27e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d282:	07cf      	lsls	r7, r1, #31
    d284:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d288:	f04f 0401 	mov.w	r4, #1
    d28c:	bf54      	ite	pl
    d28e:	f364 0003 	bfipl	r0, r4, #0, #4
    d292:	f364 1007 	bfimi	r0, r4, #4, #4
    d296:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d29a:	4a9f      	ldr	r2, [pc, #636]	; (d518 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d29c:	4413      	add	r3, r2
    d29e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d2a0:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d2a2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d2a6:	f041 0101 	orr.w	r1, r1, #1
    d2aa:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d2ae:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d2b0:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d2b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d2b6:	01db      	lsls	r3, r3, #7
    d2b8:	441a      	add	r2, r3
    d2ba:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d2be:	07ce      	lsls	r6, r1, #31
    d2c0:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d2c4:	bf54      	ite	pl
    d2c6:	f364 0003 	bfipl	r0, r4, #0, #4
    d2ca:	f364 1007 	bfimi	r0, r4, #4, #4
    d2ce:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d2d2:	4a91      	ldr	r2, [pc, #580]	; (d518 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d2d4:	4413      	add	r3, r2
    d2d6:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d2d8:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d2da:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d2de:	f041 0101 	orr.w	r1, r1, #1
    d2e2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d2e6:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d2e8:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d2ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d2ee:	01db      	lsls	r3, r3, #7
    d2f0:	441a      	add	r2, r3
    d2f2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d2f6:	07cf      	lsls	r7, r1, #31
    d2f8:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d2fc:	bf54      	ite	pl
    d2fe:	f364 0003 	bfipl	r0, r4, #0, #4
    d302:	f364 1007 	bfimi	r0, r4, #4, #4
    d306:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d30a:	4a83      	ldr	r2, [pc, #524]	; (d518 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d30c:	4413      	add	r3, r2
    d30e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d310:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d312:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d316:	f041 0101 	orr.w	r1, r1, #1
    d31a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d31e:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d320:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d322:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d326:	01db      	lsls	r3, r3, #7
    d328:	441a      	add	r2, r3
    d32a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d32e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d332:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d336:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d338:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d33c:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d33e:	bf4c      	ite	mi
    d340:	f364 1007 	bfimi	r0, r4, #4, #4
    d344:	f364 0003 	bfipl	r0, r4, #0, #4
    d348:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d34c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d350:	4a72      	ldr	r2, [pc, #456]	; (d51c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d352:	f041 0101 	orr.w	r1, r1, #1
    d356:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d35a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d35e:	f36f 1386 	bfc	r3, #6, #1
    d362:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d366:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d36a:	065f      	lsls	r7, r3, #25
    d36c:	d4fb      	bmi.n	d366 <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    d36e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d372:	496a      	ldr	r1, [pc, #424]	; (d51c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    d374:	2004      	movs	r0, #4
    d376:	f360 0303 	bfi	r3, r0, #0, #4
    d37a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d37e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d386:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d38a:	684b      	ldr	r3, [r1, #4]
    d38c:	06de      	lsls	r6, r3, #27
    d38e:	d4fc      	bmi.n	d38a <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d390:	4963      	ldr	r1, [pc, #396]	; (d520 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    d392:	4a64      	ldr	r2, [pc, #400]	; (d524 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d394:	6a0b      	ldr	r3, [r1, #32]
    d396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d39a:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    d39c:	8813      	ldrh	r3, [r2, #0]
    d39e:	f043 0301 	orr.w	r3, r3, #1
    d3a2:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    d3a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d3a6:	f013 0301 	ands.w	r3, r3, #1
    d3aa:	d1fb      	bne.n	d3a4 <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    d3ac:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    d3b0:	290a      	cmp	r1, #10
    d3b2:	f000 80e7 	beq.w	d584 <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    d3b6:	290c      	cmp	r1, #12
    d3b8:	f000 80df 	beq.w	d57a <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    d3bc:	2908      	cmp	r1, #8
    d3be:	f000 80d5 	beq.w	d56c <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    d3c2:	4b58      	ldr	r3, [pc, #352]	; (d524 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d3c4:	881a      	ldrh	r2, [r3, #0]
    d3c6:	2101      	movs	r1, #1
    d3c8:	f361 220a 	bfi	r2, r1, #8, #3
    d3cc:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    d3ce:	889a      	ldrh	r2, [r3, #4]
    d3d0:	b292      	uxth	r2, r2
    d3d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    d3d6:	f042 0204 	orr.w	r2, r2, #4
    d3da:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d3dc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    d3de:	f014 0404 	ands.w	r4, r4, #4
    d3e2:	d1fb      	bne.n	d3dc <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    d3e4:	4620      	mov	r0, r4
    d3e6:	f001 fe33 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d3ea:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d3ec:	4620      	mov	r0, r4
    d3ee:	f001 fe39 	bl	f064 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d3f2:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d3f4:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d3f6:	f023 0302 	bic.w	r3, r3, #2
    d3fa:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d3fc:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d3fe:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d400:	6833      	ldr	r3, [r6, #0]
    d402:	2b01      	cmp	r3, #1
    d404:	d0fc      	beq.n	d400 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    d406:	4b48      	ldr	r3, [pc, #288]	; (d528 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    d408:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d40a:	4948      	ldr	r1, [pc, #288]	; (d52c <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d40c:	4f48      	ldr	r7, [pc, #288]	; (d530 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    d40e:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d412:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d414:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d416:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d418:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d41a:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d41c:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d41e:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    d420:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d422:	f001 fe15 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d426:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d428:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d42a:	f023 0302 	bic.w	r3, r3, #2
    d42e:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d430:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d432:	6803      	ldr	r3, [r0, #0]
    d434:	2b01      	cmp	r3, #1
    d436:	d0fc      	beq.n	d432 <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    d438:	4b3e      	ldr	r3, [pc, #248]	; (d534 <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    d43a:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    d43c:	2001      	movs	r0, #1
    d43e:	f001 fe11 	bl	f064 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d442:	2300      	movs	r3, #0
    d444:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d446:	4a37      	ldr	r2, [pc, #220]	; (d524 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    d448:	4e3b      	ldr	r6, [pc, #236]	; (d538 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    d44a:	493c      	ldr	r1, [pc, #240]	; (d53c <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    d44c:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d44e:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d452:	2408      	movs	r4, #8
    d454:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    d456:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d458:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d45a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    d45c:	f043 0301 	orr.w	r3, r3, #1
    d460:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d462:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d464:	075c      	lsls	r4, r3, #29
    d466:	d4fc      	bmi.n	d462 <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d468:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d46a:	492e      	ldr	r1, [pc, #184]	; (d524 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d46c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d470:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    d472:	7a13      	ldrb	r3, [r2, #8]
    d474:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    d478:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d47a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d47c:	06d8      	lsls	r0, r3, #27
    d47e:	d4fc      	bmi.n	d47a <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d480:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d482:	4c28      	ldr	r4, [pc, #160]	; (d524 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d484:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d486:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d488:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    d48c:	d1fb      	bne.n	d486 <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    d48e:	78e3      	ldrb	r3, [r4, #3]
    d490:	f043 0301 	orr.w	r3, r3, #1
    d494:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d496:	f001 fddb 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d49a:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d49c:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d49e:	6813      	ldr	r3, [r2, #0]
    d4a0:	f043 0302 	orr.w	r3, r3, #2
    d4a4:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d4a6:	f001 fdd3 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d4aa:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d4ac:	4a1d      	ldr	r2, [pc, #116]	; (d524 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d4ae:	f043 0302 	orr.w	r3, r3, #2
    d4b2:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d4b4:	88a3      	ldrh	r3, [r4, #4]
    d4b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d4ba:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    d4bc:	8823      	ldrh	r3, [r4, #0]
    d4be:	f043 0302 	orr.w	r3, r3, #2
    d4c2:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d4c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d4c6:	0799      	lsls	r1, r3, #30
    d4c8:	d4fc      	bmi.n	d4c4 <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d4ca:	2000      	movs	r0, #0
    d4cc:	f001 fdc0 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d4d0:	6803      	ldr	r3, [r0, #0]
    d4d2:	079a      	lsls	r2, r3, #30
    d4d4:	d4f9      	bmi.n	d4ca <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    d4d6:	2001      	movs	r0, #1
    d4d8:	f001 fdba 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d4dc:	6803      	ldr	r3, [r0, #0]
    d4de:	079b      	lsls	r3, r3, #30
    d4e0:	d4f9      	bmi.n	d4d6 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    d4e2:	4a10      	ldr	r2, [pc, #64]	; (d524 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d4e4:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    d4e8:	f013 0301 	ands.w	r3, r3, #1
    d4ec:	d1fa      	bne.n	d4e4 <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    d4ee:	4e14      	ldr	r6, [pc, #80]	; (d540 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    d4f0:	4c14      	ldr	r4, [pc, #80]	; (d544 <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    d4f2:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    d4f4:	f242 51ff 	movw	r1, #9727	; 0x25ff
    d4f8:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    d4fc:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    d4fe:	8029      	strh	r1, [r5, #0]
    d500:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    d502:	8229      	strh	r1, [r5, #16]
    d504:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    d506:	806b      	strh	r3, [r5, #2]
    d508:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    d50a:	826b      	strh	r3, [r5, #18]
    d50c:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    d50e:	80aa      	strh	r2, [r5, #4]
    d510:	e01a      	b.n	d548 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    d512:	bf00      	nop
    d514:	000236ac 	.word	0x000236ac
    d518:	41008000 	.word	0x41008000
    d51c:	40001c00 	.word	0x40001c00
    d520:	40000800 	.word	0x40000800
    d524:	43002000 	.word	0x43002000
    d528:	00204600 	.word	0x00204600
    d52c:	20001e14 	.word	0x20001e14
    d530:	43002040 	.word	0x43002040
    d534:	00204700 	.word	0x00204700
    d538:	20001e38 	.word	0x20001e38
    d53c:	43002034 	.word	0x43002034
    d540:	25ff0000 	.word	0x25ff0000
    d544:	60f80000 	.word	0x60f80000
    d548:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    d54a:	82aa      	strh	r2, [r5, #20]
    d54c:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    d54e:	80eb      	strh	r3, [r5, #6]
    d550:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    d552:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    d554:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    d558:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    d55a:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    d55c:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    d55e:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    d560:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    d562:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    d564:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    d566:	83eb      	strh	r3, [r5, #30]
}
    d568:	b005      	add	sp, #20
    d56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d56c:	88d3      	ldrh	r3, [r2, #6]
    d56e:	f043 0318 	orr.w	r3, r3, #24
    d572:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    d574:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    d578:	e723      	b.n	d3c2 <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d57a:	88d0      	ldrh	r0, [r2, #6]
    d57c:	f363 00c4 	bfi	r0, r3, #3, #2
    d580:	80d0      	strh	r0, [r2, #6]
    d582:	e7f7      	b.n	d574 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d584:	88d3      	ldrh	r3, [r2, #6]
    d586:	2002      	movs	r0, #2
    d588:	f360 03c4 	bfi	r3, r0, #3, #2
    d58c:	80d3      	strh	r3, [r2, #6]
    d58e:	e7f1      	b.n	d574 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000d590 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    d590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    d594:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    d598:	2b00      	cmp	r3, #0
    d59a:	f000 80ab 	beq.w	d6f4 <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    d59e:	4b89      	ldr	r3, [pc, #548]	; (d7c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d5a0:	4604      	mov	r4, r0
    d5a2:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    d5a6:	f010 0001 	ands.w	r0, r0, #1
    d5aa:	f000 80a5 	beq.w	d6f8 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    d5ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d5b0:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    d5b4:	3301      	adds	r3, #1
    d5b6:	4293      	cmp	r3, r2
    d5b8:	6723      	str	r3, [r4, #112]	; 0x70
    d5ba:	d302      	bcc.n	d5c2 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    d5bc:	2301      	movs	r3, #1
    d5be:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d5c2:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d5c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d5c6:	8821      	ldrh	r1, [r4, #0]
    d5c8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    d5ca:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    d5cc:	fb83 6706 	smull	r6, r7, r3, r6
    d5d0:	0bf2      	lsrs	r2, r6, #15
    d5d2:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    d5d6:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d5d8:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    d5dc:	fb01 f103 	mul.w	r1, r1, r3
    d5e0:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    d5e4:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d5e6:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d5e8:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d5ea:	6262      	str	r2, [r4, #36]	; 0x24
    d5ec:	fb80 8905 	smull	r8, r9, r0, r5
    d5f0:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d5f4:	b2b2      	uxth	r2, r6
    d5f6:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d5fa:	fb02 f000 	mul.w	r0, r2, r0
    d5fe:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d602:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    d606:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d608:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d60a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    d60c:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d60e:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d610:	88a0      	ldrh	r0, [r4, #4]
    d612:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d614:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d618:	fb81 2302 	smull	r2, r3, r1, r2
    d61c:	0bd2      	lsrs	r2, r2, #15
    d61e:	b280      	uxth	r0, r0
    d620:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d624:	fb00 f101 	mul.w	r1, r0, r1
    d628:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d62c:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d630:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d632:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    d634:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d636:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d638:	88e1      	ldrh	r1, [r4, #6]
    d63a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d63e:	fb86 8903 	smull	r8, r9, r6, r3
    d642:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d646:	b289      	uxth	r1, r1
    d648:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d64c:	fb01 f606 	mul.w	r6, r1, r6
    d650:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    d654:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    d658:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d65a:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d65c:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d65e:	8923      	ldrh	r3, [r4, #8]
    d660:	63e1      	str	r1, [r4, #60]	; 0x3c
    d662:	fb85 6706 	smull	r6, r7, r5, r6
    d666:	0bf2      	lsrs	r2, r6, #15
    d668:	b29b      	uxth	r3, r3
    d66a:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d66e:	fb03 f505 	mul.w	r5, r3, r5
    d672:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    d676:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    d67a:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d67c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d67e:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d680:	8961      	ldrh	r1, [r4, #10]
    d682:	6462      	str	r2, [r4, #68]	; 0x44
    d684:	fb80 6706 	smull	r6, r7, r0, r6
    d688:	0bf3      	lsrs	r3, r6, #15
    d68a:	b28a      	uxth	r2, r1
    d68c:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d690:	fb02 f000 	mul.w	r0, r2, r0
    d694:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d698:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    d69c:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d69e:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d6a0:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d6a2:	89a0      	ldrh	r0, [r4, #12]
    d6a4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    d6a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d6aa:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    d6ae:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    d6b0:	fb83 8902 	smull	r8, r9, r3, r2
    d6b4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    d6b8:	b280      	uxth	r0, r0
    d6ba:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d6be:	fb00 f303 	mul.w	r3, r0, r3
    d6c2:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d6c6:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    d6ca:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d6cc:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d6ce:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d6d2:	89e0      	ldrh	r0, [r4, #14]
    d6d4:	6562      	str	r2, [r4, #84]	; 0x54
    d6d6:	0bf3      	lsrs	r3, r6, #15
    d6d8:	b282      	uxth	r2, r0
    d6da:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d6de:	fb02 f101 	mul.w	r1, r2, r1
    d6e2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d6e6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    d6ea:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d6ec:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d6ee:	83e2      	strh	r2, [r4, #30]
    d6f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d6f8:	f001 fcaa 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d6fc:	6803      	ldr	r3, [r0, #0]
    d6fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d702:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    d704:	2e00      	cmp	r6, #0
    d706:	f47f af52 	bne.w	d5ae <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    d70a:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    d70c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d710:	2501      	movs	r5, #1
    d712:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d7d0 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d716:	4f2c      	ldr	r7, [pc, #176]	; (d7c8 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    d718:	e00f      	b.n	d73a <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    d71a:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    d71e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    d722:	b29b      	uxth	r3, r3
    d724:	f1c2 010f 	rsb	r1, r2, #15
    d728:	408b      	lsls	r3, r1
    d72a:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d72c:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    d72e:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d732:	462e      	mov	r6, r5
    d734:	dc0c      	bgt.n	d750 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    d736:	3501      	adds	r5, #1
    d738:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d73a:	2d01      	cmp	r5, #1
    d73c:	d1ed      	bne.n	d71a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    d73e:	f04f 31ff 	mov.w	r1, #4294967295
    d742:	6838      	ldr	r0, [r7, #0]
    d744:	f004 f9c8 	bl	11ad8 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    d748:	0703      	lsls	r3, r0, #28
    d74a:	d5e6      	bpl.n	d71a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d74c:	462e      	mov	r6, r5
    d74e:	e7f2      	b.n	d736 <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    d750:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    d754:	429a      	cmp	r2, r3
    d756:	d005      	beq.n	d764 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    d758:	2b0a      	cmp	r3, #10
    d75a:	d02c      	beq.n	d7b6 <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    d75c:	2b0c      	cmp	r3, #12
    d75e:	d024      	beq.n	d7aa <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    d760:	2b08      	cmp	r3, #8
    d762:	d01a      	beq.n	d79a <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    d764:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    d766:	4b19      	ldr	r3, [pc, #100]	; (d7cc <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    d768:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    d76a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    d76e:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d770:	2000      	movs	r0, #0
    d772:	f001 fc6d 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d776:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d778:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d77a:	6813      	ldr	r3, [r2, #0]
    d77c:	f043 0302 	orr.w	r3, r3, #2
    d780:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d782:	f001 fc65 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d786:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d788:	4a0e      	ldr	r2, [pc, #56]	; (d7c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d78a:	f043 0302 	orr.w	r3, r3, #2
    d78e:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d790:	8893      	ldrh	r3, [r2, #4]
    d792:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d796:	8093      	strh	r3, [r2, #4]
    d798:	e713      	b.n	d5c2 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d79a:	490a      	ldr	r1, [pc, #40]	; (d7c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d79c:	88ca      	ldrh	r2, [r1, #6]
    d79e:	f042 0218 	orr.w	r2, r2, #24
    d7a2:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    d7a4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    d7a8:	e7dc      	b.n	d764 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d7aa:	4a06      	ldr	r2, [pc, #24]	; (d7c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d7ac:	88d1      	ldrh	r1, [r2, #6]
    d7ae:	f36f 01c4 	bfc	r1, #3, #2
    d7b2:	80d1      	strh	r1, [r2, #6]
    d7b4:	e7f6      	b.n	d7a4 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d7b6:	4a03      	ldr	r2, [pc, #12]	; (d7c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d7b8:	88d1      	ldrh	r1, [r2, #6]
    d7ba:	2002      	movs	r0, #2
    d7bc:	f360 01c4 	bfi	r1, r0, #3, #2
    d7c0:	80d1      	strh	r1, [r2, #6]
    d7c2:	e7ef      	b.n	d7a4 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    d7c4:	43002000 	.word	0x43002000
    d7c8:	20001f28 	.word	0x20001f28
    d7cc:	200019e8 	.word	0x200019e8
    d7d0:	20001e04 	.word	0x20001e04

0000d7d4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    d7d4:	2907      	cmp	r1, #7
    d7d6:	dc33      	bgt.n	d840 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    d7d8:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    d7da:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    d7dc:	b083      	sub	sp, #12
    d7de:	4605      	mov	r5, r0
    switch (theUnits) {
    d7e0:	d033      	beq.n	d84a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    d7e2:	d336      	bcc.n	d852 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    d7e4:	2b02      	cmp	r3, #2
    d7e6:	d12d      	bne.n	d844 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d7e8:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    d7ea:	1d0c      	adds	r4, r1, #4
    d7ec:	f00e fb68 	bl	1bec0 <__aeabi_i2d>
    d7f0:	460b      	mov	r3, r1
    d7f2:	4602      	mov	r2, r0
    d7f4:	491a      	ldr	r1, [pc, #104]	; (d860 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    d7f6:	2000      	movs	r0, #0
    d7f8:	f00e fcf2 	bl	1c1e0 <__aeabi_ddiv>
    d7fc:	f00e fea8 	bl	1c550 <__aeabi_d2f>
    d800:	ed9f 0a18 	vldr	s0, [pc, #96]	; d864 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    d804:	ee00 0a90 	vmov	s1, r0
    d808:	f00d fc02 	bl	1b010 <powf>
    d80c:	eddf 6a16 	vldr	s13, [pc, #88]	; d868 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d810:	ed9f 7a16 	vldr	s14, [pc, #88]	; d86c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d814:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    d818:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    d81c:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d81e:	eef4 7ac7 	vcmpe.f32	s15, s14
    d822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d826:	bf49      	itett	mi
    d828:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    d82c:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    d830:	edcd 7a01 	vstrmi	s15, [sp, #4]
    d834:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    d838:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    d83c:	b003      	add	sp, #12
    d83e:	bd30      	pop	{r4, r5, pc}
        return false;
    d840:	2000      	movs	r0, #0
    d842:	4770      	bx	lr
            return false;
    d844:	2000      	movs	r0, #0
}
    d846:	b003      	add	sp, #12
    d848:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    d84a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d84e:	b290      	uxth	r0, r2
    d850:	e7cb      	b.n	d7ea <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    d852:	3104      	adds	r1, #4
            return true;
    d854:	2001      	movs	r0, #1
        m_tc = newTc;
    d856:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    d85a:	b003      	add	sp, #12
    d85c:	bd30      	pop	{r4, r5, pc}
    d85e:	bf00      	nop
    d860:	3ff00000 	.word	0x3ff00000
    d864:	3c23d70a 	.word	0x3c23d70a
    d868:	47000000 	.word	0x47000000
    d86c:	46fffe00 	.word	0x46fffe00

0000d870 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    d872:	f7ff fc8f 	bl	d194 <_ZN9ClearCore10AdcManager8InstanceEv>
    d876:	4a0f      	ldr	r2, [pc, #60]	; (d8b4 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    d878:	4b0f      	ldr	r3, [pc, #60]	; (d8b8 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    d87a:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    d87c:	2104      	movs	r1, #4
    d87e:	2205      	movs	r2, #5
    d880:	2706      	movs	r7, #6
    d882:	2607      	movs	r6, #7
    d884:	2508      	movs	r5, #8
    d886:	2409      	movs	r4, #9
    d888:	200a      	movs	r0, #10
    d88a:	8019      	strh	r1, [r3, #0]
    d88c:	809a      	strh	r2, [r3, #4]
    d88e:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    d892:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    d894:	811f      	strh	r7, [r3, #8]
    d896:	819e      	strh	r6, [r3, #12]
    d898:	821d      	strh	r5, [r3, #16]
    d89a:	829c      	strh	r4, [r3, #20]
    d89c:	8318      	strh	r0, [r3, #24]
    d89e:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    d8a0:	805a      	strh	r2, [r3, #2]
    d8a2:	80da      	strh	r2, [r3, #6]
    d8a4:	815a      	strh	r2, [r3, #10]
    d8a6:	81da      	strh	r2, [r3, #14]
    d8a8:	825a      	strh	r2, [r3, #18]
    d8aa:	82da      	strh	r2, [r3, #22]
    d8ac:	835a      	strh	r2, [r3, #26]
    d8ae:	83da      	strh	r2, [r3, #30]
    d8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d8b2:	bf00      	nop
    d8b4:	20001e14 	.word	0x20001e14
    d8b8:	20001e18 	.word	0x20001e18

0000d8bc <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    d8bc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    d8c0:	4770      	bx	lr
    d8c2:	bf00      	nop

0000d8c4 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d8c4:	7980      	ldrb	r0, [r0, #6]
    d8c6:	4770      	bx	lr

0000d8c8 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    d8c8:	2004      	movs	r0, #4
    d8ca:	4770      	bx	lr

0000d8cc <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    d8cc:	7980      	ldrb	r0, [r0, #6]
    d8ce:	1ec3      	subs	r3, r0, #3
    d8d0:	2b01      	cmp	r3, #1
    d8d2:	bf83      	ittte	hi
    d8d4:	3806      	subhi	r0, #6
    d8d6:	fab0 f080 	clzhi	r0, r0
    d8da:	0940      	lsrhi	r0, r0, #5
    d8dc:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    d8de:	4770      	bx	lr

0000d8e0 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d8e0:	b530      	push	{r4, r5, lr}
    d8e2:	b083      	sub	sp, #12
    d8e4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    d8e8:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d8ea:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d8ec:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d8ee:	f000 fcfd 	bl	e2ec <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    d8f2:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d8f6:	4a05      	ldr	r2, [pc, #20]	; (d90c <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    d8f8:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d8fa:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d8fc:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d8fe:	4b04      	ldr	r3, [pc, #16]	; (d910 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d900:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d902:	4620      	mov	r0, r4
    d904:	66a3      	str	r3, [r4, #104]	; 0x68
    d906:	b003      	add	sp, #12
    d908:	bd30      	pop	{r4, r5, pc}
    d90a:	bf00      	nop
    d90c:	00023704 	.word	0x00023704
    d910:	06a40000 	.word	0x06a40000

0000d914 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    d914:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d916:	4a3a      	ldr	r2, [pc, #232]	; (da00 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d918:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d91c:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    d920:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d922:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d926:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d92a:	065d      	lsls	r5, r3, #25
    d92c:	d4fb      	bmi.n	d926 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    d92e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d932:	4933      	ldr	r1, [pc, #204]	; (da00 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d934:	2004      	movs	r0, #4
    d936:	f360 0303 	bfi	r3, r0, #0, #4
    d93a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d93e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d946:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d94a:	684b      	ldr	r3, [r1, #4]
    d94c:	06d8      	lsls	r0, r3, #27
    d94e:	d4fc      	bmi.n	d94a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d950:	4a2c      	ldr	r2, [pc, #176]	; (da04 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    d952:	492d      	ldr	r1, [pc, #180]	; (da08 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d954:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    d956:	4b2d      	ldr	r3, [pc, #180]	; (da0c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d958:	2507      	movs	r5, #7
    d95a:	f365 4013 	bfi	r0, r5, #16, #4
    d95e:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    d960:	6a0a      	ldr	r2, [r1, #32]
    d962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d966:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    d968:	781a      	ldrb	r2, [r3, #0]
    d96a:	f042 0201 	orr.w	r2, r2, #1
    d96e:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    d970:	689a      	ldr	r2, [r3, #8]
    d972:	07d2      	lsls	r2, r2, #31
    d974:	d4fc      	bmi.n	d970 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    d976:	785a      	ldrb	r2, [r3, #1]
    d978:	f042 0201 	orr.w	r2, r2, #1
    d97c:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    d97e:	785a      	ldrb	r2, [r3, #1]
    d980:	f042 0206 	orr.w	r2, r2, #6
    d984:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    d986:	899a      	ldrh	r2, [r3, #12]
    d988:	f042 0202 	orr.w	r2, r2, #2
    d98c:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    d98e:	899a      	ldrh	r2, [r3, #12]
    d990:	2105      	movs	r1, #5
    d992:	f361 220b 	bfi	r2, r1, #8, #4
    d996:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    d998:	899a      	ldrh	r2, [r3, #12]
    d99a:	2102      	movs	r1, #2
    d99c:	f361 0283 	bfi	r2, r1, #2, #2
    d9a0:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    d9a2:	8a1b      	ldrh	r3, [r3, #16]
    d9a4:	b29b      	uxth	r3, r3
    d9a6:	bb23      	cbnz	r3, d9f2 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d9a8:	4b19      	ldr	r3, [pc, #100]	; (da10 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    d9aa:	681d      	ldr	r5, [r3, #0]
    d9ac:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    d9b0:	4628      	mov	r0, r5
    d9b2:	f004 fadd 	bl	11f70 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d9b6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d9ba:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d9be:	4628      	mov	r0, r5
    d9c0:	f004 fad6 	bl	11f70 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    d9c4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d9c8:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    d9ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d9ce:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    d9d2:	461a      	mov	r2, r3
    d9d4:	db03      	blt.n	d9de <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    d9d6:	2300      	movs	r3, #0
    d9d8:	461a      	mov	r2, r3
    d9da:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    d9de:	4410      	add	r0, r2
    d9e0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d9e4:	db04      	blt.n	d9f0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    d9e6:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    d9ea:	3304      	adds	r3, #4
    d9ec:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    d9f0:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d9f2:	4a06      	ldr	r2, [pc, #24]	; (da0c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    d9f4:	6893      	ldr	r3, [r2, #8]
    d9f6:	f013 0304 	ands.w	r3, r3, #4
    d9fa:	d1fb      	bne.n	d9f4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    d9fc:	8213      	strh	r3, [r2, #16]
    d9fe:	e7d3      	b.n	d9a8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    da00:	40001c00 	.word	0x40001c00
    da04:	40001800 	.word	0x40001800
    da08:	40000800 	.word	0x40000800
    da0c:	43002400 	.word	0x43002400
    da10:	20001f34 	.word	0x20001f34

0000da14 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    da14:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    da16:	4a2e      	ldr	r2, [pc, #184]	; (dad0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    da18:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    da1c:	8a13      	ldrh	r3, [r2, #16]
    da1e:	b29b      	uxth	r3, r3
    da20:	4299      	cmp	r1, r3
    da22:	d003      	beq.n	da2c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    da24:	6893      	ldr	r3, [r2, #8]
    da26:	075d      	lsls	r5, r3, #29
    da28:	d4fc      	bmi.n	da24 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    da2a:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    da2c:	68c3      	ldr	r3, [r0, #12]
    da2e:	4929      	ldr	r1, [pc, #164]	; (dad4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    da30:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    da32:	4a27      	ldr	r2, [pc, #156]	; (dad0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    da34:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    da38:	4423      	add	r3, r4
    da3a:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    da3e:	f044 0401 	orr.w	r4, r4, #1
    da42:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    da46:	6e03      	ldr	r3, [r0, #96]	; 0x60
    da48:	6e44      	ldr	r4, [r0, #100]	; 0x64
    da4a:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    da4e:	4423      	add	r3, r4
    da50:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    da54:	f041 0101 	orr.w	r1, r1, #1
    da58:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    da5c:	6893      	ldr	r3, [r2, #8]
    da5e:	079c      	lsls	r4, r3, #30
    da60:	d4fc      	bmi.n	da5c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    da62:	7813      	ldrb	r3, [r2, #0]
    da64:	0799      	lsls	r1, r3, #30
    da66:	d407      	bmi.n	da78 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    da68:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    da6a:	4919      	ldr	r1, [pc, #100]	; (dad0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    da6c:	f043 0302 	orr.w	r3, r3, #2
    da70:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    da72:	688b      	ldr	r3, [r1, #8]
    da74:	079a      	lsls	r2, r3, #30
    da76:	d4fc      	bmi.n	da72 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    da78:	4a15      	ldr	r2, [pc, #84]	; (dad0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    da7a:	79d3      	ldrb	r3, [r2, #7]
    da7c:	079b      	lsls	r3, r3, #30
    da7e:	d0fc      	beq.n	da7a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    da80:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    da82:	4b15      	ldr	r3, [pc, #84]	; (dad8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    da84:	f002 010f 	and.w	r1, r2, #15
    da88:	185a      	adds	r2, r3, r1
    da8a:	2400      	movs	r4, #0
    da8c:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    da90:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da92:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    da96:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da9a:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    da9c:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    daa0:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    daa2:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    daa4:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    daa6:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    daaa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    daae:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    dab2:	33f4      	adds	r3, #244	; 0xf4
    dab4:	f3bf 8f5b 	dmb	ish
    dab8:	e853 2f00 	ldrex	r2, [r3]
    dabc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    dac0:	e843 2100 	strex	r1, r2, [r3]
    dac4:	2900      	cmp	r1, #0
    dac6:	d1f7      	bne.n	dab8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    dac8:	f3bf 8f5b 	dmb	ish
}
    dacc:	bc70      	pop	{r4, r5, r6}
    dace:	4770      	bx	lr
    dad0:	43002400 	.word	0x43002400
    dad4:	41008000 	.word	0x41008000
    dad8:	200019e8 	.word	0x200019e8

0000dadc <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    dadc:	7983      	ldrb	r3, [r0, #6]
    dade:	2b06      	cmp	r3, #6
    dae0:	d805      	bhi.n	daee <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    dae2:	2201      	movs	r2, #1
    dae4:	fa02 f303 	lsl.w	r3, r2, r3
    dae8:	f013 0f54 	tst.w	r3, #84	; 0x54
    daec:	d100      	bne.n	daf0 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    daee:	4770      	bx	lr
            DigitalInOut::Refresh();
    daf0:	f000 bc32 	b.w	e358 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000daf4 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    daf6:	7983      	ldrb	r3, [r0, #6]
    daf8:	428b      	cmp	r3, r1
    dafa:	d06e      	beq.n	dbda <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    dafc:	1e8a      	subs	r2, r1, #2
    dafe:	460c      	mov	r4, r1
    db00:	4605      	mov	r5, r0
    db02:	2a04      	cmp	r2, #4
    db04:	d80d      	bhi.n	db22 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    db06:	e8df f002 	tbb	[pc, r2]
    db0a:	0311      	.short	0x0311
    db0c:	0c11      	.short	0x0c11
    db0e:	11          	.byte	0x11
    db0f:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    db10:	2102      	movs	r1, #2
    db12:	f000 fad9 	bl	e0c8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    db16:	4628      	mov	r0, r5
    db18:	f7ff ff7c 	bl	da14 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    db1c:	2303      	movs	r3, #3
    db1e:	71ab      	strb	r3, [r5, #6]
            break;
    db20:	4623      	mov	r3, r4
    return (m_mode == newMode);
    db22:	1ae0      	subs	r0, r4, r3
    db24:	fab0 f080 	clz	r0, r0
    db28:	0940      	lsrs	r0, r0, #5
    db2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    db2c:	4b2c      	ldr	r3, [pc, #176]	; (dbe0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    db2e:	f3bf 8f5b 	dmb	ish
    db32:	e853 2f00 	ldrex	r2, [r3]
    db36:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    db3a:	e843 2100 	strex	r1, r2, [r3]
    db3e:	2900      	cmp	r1, #0
    db40:	d1f7      	bne.n	db32 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    db42:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    db46:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db48:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    db4c:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    db4e:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    db50:	4924      	ldr	r1, [pc, #144]	; (dbe4 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db52:	3bf4      	subs	r3, #244	; 0xf4
    db54:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db58:	f04f 0e01 	mov.w	lr, #1
    db5c:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db60:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db64:	ea27 070e 	bic.w	r7, r7, lr
    db68:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    db6c:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db6e:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    db72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    db76:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    db7a:	4438      	add	r0, r7
    db7c:	ea22 0606 	bic.w	r6, r2, r6
    db80:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    db84:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    db88:	4a17      	ldr	r2, [pc, #92]	; (dbe8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    db8a:	f36f 0300 	bfc	r3, #0, #1
    db8e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    db92:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    db94:	6e68      	ldr	r0, [r5, #100]	; 0x64
    db96:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    db9a:	4403      	add	r3, r0
    db9c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    dba0:	f36f 0100 	bfc	r1, #0, #1
    dba4:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dba8:	6893      	ldr	r3, [r2, #8]
    dbaa:	f013 0302 	ands.w	r3, r3, #2
    dbae:	d1fb      	bne.n	dba8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    dbb0:	7811      	ldrb	r1, [r2, #0]
    dbb2:	0789      	lsls	r1, r1, #30
    dbb4:	d507      	bpl.n	dbc6 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    dbb6:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dbb8:	490b      	ldr	r1, [pc, #44]	; (dbe8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    dbba:	f363 0041 	bfi	r0, r3, #1, #1
    dbbe:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dbc0:	688b      	ldr	r3, [r1, #8]
    dbc2:	079b      	lsls	r3, r3, #30
    dbc4:	d4fc      	bmi.n	dbc0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    dbc6:	4621      	mov	r1, r4
    dbc8:	4628      	mov	r0, r5
    dbca:	f000 fa7d 	bl	e0c8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    dbce:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    dbd0:	1ae0      	subs	r0, r4, r3
    dbd2:	fab0 f080 	clz	r0, r0
    dbd6:	0940      	lsrs	r0, r0, #5
    dbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    dbda:	2001      	movs	r0, #1
}
    dbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dbde:	bf00      	nop
    dbe0:	20001adc 	.word	0x20001adc
    dbe4:	41008000 	.word	0x41008000
    dbe8:	43002400 	.word	0x43002400

0000dbec <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    dbec:	7983      	ldrb	r3, [r0, #6]
    dbee:	2b06      	cmp	r3, #6
    dbf0:	d805      	bhi.n	dbfe <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    dbf2:	2201      	movs	r2, #1
    dbf4:	fa02 f303 	lsl.w	r3, r2, r3
    dbf8:	f013 0f54 	tst.w	r3, #84	; 0x54
    dbfc:	d101      	bne.n	dc02 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    dbfe:	2000      	movs	r0, #0
    dc00:	4770      	bx	lr
            state = DigitalInOut::State();
    dc02:	f000 bcaf 	b.w	e564 <_ZN9ClearCore12DigitalInOut5StateEv>
    dc06:	bf00      	nop

0000dc08 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    dc08:	7983      	ldrb	r3, [r0, #6]
    dc0a:	3b02      	subs	r3, #2
    dc0c:	2b04      	cmp	r3, #4
    dc0e:	d83c      	bhi.n	dc8a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    dc10:	e8df f003 	tbb	[pc, r3]
    dc14:	3b390339 	.word	0x3b390339
    dc18:	39          	.byte	0x39
    dc19:	00          	.byte	0x00
            newState = max(newState, 0);
    dc1a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    dc1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    dc20:	b289      	uxth	r1, r1
    dc22:	f240 74ff 	movw	r4, #2047	; 0x7ff
    dc26:	42a1      	cmp	r1, r4
    dc28:	bf28      	it	cs
    dc2a:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    dc2c:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    dc2e:	4d19      	ldr	r5, [pc, #100]	; (dc94 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    dc30:	4e19      	ldr	r6, [pc, #100]	; (dc98 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    dc32:	4a1a      	ldr	r2, [pc, #104]	; (dc9c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    dc34:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    dc38:	fb85 e503 	smull	lr, r5, r5, r3
    dc3c:	f007 070f 	and.w	r7, r7, #15
    dc40:	441d      	add	r5, r3
    dc42:	443e      	add	r6, r7
    dc44:	17db      	asrs	r3, r3, #31
    dc46:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    dc4a:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    dc4e:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    dc52:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    dc56:	4812      	ldr	r0, [pc, #72]	; (dca0 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    dc58:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    dc5c:	fba2 5201 	umull	r5, r2, r2, r1
    dc60:	1a89      	subs	r1, r1, r2
    dc62:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    dc66:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    dc6a:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    dc6c:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    dc6e:	42a1      	cmp	r1, r4
    dc70:	bf28      	it	cs
    dc72:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    dc74:	b29b      	uxth	r3, r3
    dc76:	4299      	cmp	r1, r3
    dc78:	d009      	beq.n	dc8e <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    dc7a:	6883      	ldr	r3, [r0, #8]
    dc7c:	075b      	lsls	r3, r3, #29
    dc7e:	d4fc      	bmi.n	dc7a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    dc80:	8201      	strh	r1, [r0, #16]
            success = true;
    dc82:	2001      	movs	r0, #1
    dc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    dc86:	f000 b9c3 	b.w	e010 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    dc8a:	2000      	movs	r0, #0
    dc8c:	4770      	bx	lr
            success = true;
    dc8e:	2001      	movs	r0, #1
}
    dc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc92:	bf00      	nop
    dc94:	80100201 	.word	0x80100201
    dc98:	200019e8 	.word	0x200019e8
    dc9c:	00200401 	.word	0x00200401
    dca0:	43002400 	.word	0x43002400

0000dca4 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    dca4:	b538      	push	{r3, r4, r5, lr}
    dca6:	4604      	mov	r4, r0
    dca8:	460d      	mov	r5, r1
    DacInitialize();
    dcaa:	f7ff fe33 	bl	d914 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    dcae:	4620      	mov	r0, r4
    dcb0:	4629      	mov	r1, r5
    dcb2:	f000 fc77 	bl	e5a4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    dcb6:	6920      	ldr	r0, [r4, #16]
    dcb8:	07c2      	lsls	r2, r0, #31
    dcba:	d521      	bpl.n	dd00 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    dcbc:	68e1      	ldr	r1, [r4, #12]
    dcbe:	01c9      	lsls	r1, r1, #7
    dcc0:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    dcc4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    dcc8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    dccc:	2101      	movs	r1, #1
    dcce:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    dcd2:	f361 1307 	bfi	r3, r1, #4, #4
    dcd6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    dcda:	6e61      	ldr	r1, [r4, #100]	; 0x64
    dcdc:	07cb      	lsls	r3, r1, #31
    dcde:	d421      	bmi.n	dd24 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    dce0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    dce2:	01db      	lsls	r3, r3, #7
    dce4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dce8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dcec:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    dcf0:	2101      	movs	r1, #1
    dcf2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    dcf6:	f361 0203 	bfi	r2, r1, #0, #4
    dcfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    dcfe:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    dd00:	68e2      	ldr	r2, [r4, #12]
    dd02:	01d2      	lsls	r2, r2, #7
    dd04:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    dd08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dd0c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    dd10:	2101      	movs	r1, #1
    dd12:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    dd16:	f361 0203 	bfi	r2, r1, #0, #4
    dd1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    dd1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    dd20:	07cb      	lsls	r3, r1, #31
    dd22:	d5dd      	bpl.n	dce0 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    dd24:	6e22      	ldr	r2, [r4, #96]	; 0x60
    dd26:	01d2      	lsls	r2, r2, #7
    dd28:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    dd2c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    dd30:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    dd34:	2101      	movs	r1, #1
    dd36:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    dd3a:	f361 1307 	bfi	r3, r1, #4, #4
    dd3e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    dd42:	bd38      	pop	{r3, r4, r5, pc}

0000dd44 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
    }
    dd44:	2000      	movs	r0, #0
    dd46:	4770      	bx	lr

0000dd48 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    dd48:	7980      	ldrb	r0, [r0, #6]
    dd4a:	4770      	bx	lr

0000dd4c <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    dd4c:	2003      	movs	r0, #3
    dd4e:	4770      	bx	lr

0000dd50 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    dd50:	2000      	movs	r0, #0
    dd52:	4770      	bx	lr

0000dd54 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    dd54:	2000      	movs	r0, #0
    dd56:	4770      	bx	lr

0000dd58 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    dd5a:	7983      	ldrb	r3, [r0, #6]
    dd5c:	428b      	cmp	r3, r1
    dd5e:	d072      	beq.n	de46 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    dd60:	2901      	cmp	r1, #1
    dd62:	460c      	mov	r4, r1
    dd64:	4605      	mov	r5, r0
    dd66:	d03c      	beq.n	dde2 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    dd68:	2902      	cmp	r1, #2
    dd6a:	d135      	bne.n	ddd8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    dd6c:	4e37      	ldr	r6, [pc, #220]	; (de4c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    dd6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dd70:	f3bf 8f5b 	dmb	ish
    dd74:	e856 2f00 	ldrex	r2, [r6]
    dd78:	431a      	orrs	r2, r3
    dd7a:	e846 2100 	strex	r1, r2, [r6]
    dd7e:	2900      	cmp	r1, #0
    dd80:	d1f8      	bne.n	dd74 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    dd82:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    dd86:	3ef4      	subs	r6, #244	; 0xf4
    dd88:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    dd8c:	b143      	cbz	r3, dda0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    dd8e:	4b30      	ldr	r3, [pc, #192]	; (de50 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    dd90:	6b29      	ldr	r1, [r5, #48]	; 0x30
    dd92:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    dd94:	6e53      	ldr	r3, [r2, #100]	; 0x64
    dd96:	420b      	tst	r3, r1
    dd98:	d0fc      	beq.n	dd94 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    dd9a:	4628      	mov	r0, r5
    dd9c:	f000 fda6 	bl	e8ec <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    dda0:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dda2:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dda6:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    dda8:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ddac:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ddb0:	2001      	movs	r0, #1
    ddb2:	4098      	lsls	r0, r3
    ddb4:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ddb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ddbc:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    ddc0:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ddc2:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    ddc6:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ddc8:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ddcc:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    ddd0:	4603      	mov	r3, r0
            m_mode = newMode;
    ddd2:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    ddd4:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    ddd8:	1ae0      	subs	r0, r4, r3
    ddda:	fab0 f080 	clz	r0, r0
    ddde:	0940      	lsrs	r0, r0, #5
    dde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    dde2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dde4:	4e19      	ldr	r6, [pc, #100]	; (de4c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    dde6:	f3bf 8f5b 	dmb	ish
    ddea:	43db      	mvns	r3, r3
    ddec:	e856 2f00 	ldrex	r2, [r6]
    ddf0:	401a      	ands	r2, r3
    ddf2:	e846 2100 	strex	r1, r2, [r6]
    ddf6:	2900      	cmp	r1, #0
    ddf8:	d1f8      	bne.n	ddec <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    ddfa:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    ddfe:	3ef4      	subs	r6, #244	; 0xf4
    de00:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    de04:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    de06:	b11b      	cbz	r3, de10 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    de08:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    de0c:	2b00      	cmp	r3, #0
    de0e:	d0fb      	beq.n	de08 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    de10:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    de12:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    de16:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    de18:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    de1c:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de1e:	f003 030f 	and.w	r3, r3, #15
    de22:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    de26:	fa00 f303 	lsl.w	r3, r0, r3
    de2a:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    de2c:	4603      	mov	r3, r0
    return (m_mode == newMode);
    de2e:	1ae0      	subs	r0, r4, r3
    de30:	4329      	orrs	r1, r5
    de32:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de36:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    de3a:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    de3e:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    de42:	0940      	lsrs	r0, r0, #5
    de44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    de46:	2001      	movs	r0, #1
}
    de48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de4a:	bf00      	nop
    de4c:	20001adc 	.word	0x20001adc
    de50:	20001e14 	.word	0x20001e14

0000de54 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    de54:	b570      	push	{r4, r5, r6, lr}
    de56:	4604      	mov	r4, r0
    de58:	4616      	mov	r6, r2
      m_analogValid(false) {}
    de5a:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    de5c:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    de60:	f000 fd12 	bl	e888 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    de64:	2300      	movs	r3, #0
    de66:	4a05      	ldr	r2, [pc, #20]	; (de7c <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    de68:	6326      	str	r6, [r4, #48]	; 0x30
    de6a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    de6e:	6022      	str	r2, [r4, #0]
    de70:	63a3      	str	r3, [r4, #56]	; 0x38
    de72:	63e3      	str	r3, [r4, #60]	; 0x3c
    de74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    de78:	4620      	mov	r0, r4
    de7a:	bd70      	pop	{r4, r5, r6, pc}
    de7c:	00023734 	.word	0x00023734

0000de80 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    de80:	7982      	ldrb	r2, [r0, #6]
    de82:	2a01      	cmp	r2, #1
    de84:	d004      	beq.n	de90 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    de86:	2a02      	cmp	r2, #2
    de88:	d101      	bne.n	de8e <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    de8a:	f000 bc4d 	b.w	e728 <_ZN9ClearCore9DigitalIn7RefreshEv>
    de8e:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    de90:	4a17      	ldr	r2, [pc, #92]	; (def0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    de92:	6b01      	ldr	r1, [r0, #48]	; 0x30
    de94:	6812      	ldr	r2, [r2, #0]
    de96:	4603      	mov	r3, r0
    de98:	6e50      	ldr	r0, [r2, #100]	; 0x64
    de9a:	4208      	tst	r0, r1
    de9c:	d126      	bne.n	deec <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    de9e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    dea2:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    dea4:	b991      	cbnz	r1, decc <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    dea6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    dea8:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    deac:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    deae:	2c07      	cmp	r4, #7
    deb0:	b280      	uxth	r0, r0
    deb2:	dc07      	bgt.n	dec4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    deb4:	0400      	lsls	r0, r0, #16
    deb6:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    deba:	3408      	adds	r4, #8
        return (m_z >> 16);
    debc:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    debe:	6270      	str	r0, [r6, #36]	; 0x24
    dec0:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    dec4:	2201      	movs	r2, #1
    dec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    deca:	e000      	b.n	dece <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    decc:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    dece:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    ded0:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ded2:	4908      	ldr	r1, [pc, #32]	; (def4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    ded4:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    ded8:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    dedc:	b2d8      	uxtb	r0, r3
    dede:	440a      	add	r2, r1
    dee0:	2802      	cmp	r0, #2
    dee2:	bfd8      	it	le
    dee4:	2300      	movle	r3, #0
    dee6:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    deea:	bc70      	pop	{r4, r5, r6}
    deec:	4770      	bx	lr
    deee:	bf00      	nop
    def0:	20001e14 	.word	0x20001e14
    def4:	200019e8 	.word	0x200019e8

0000def8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    def8:	4b29      	ldr	r3, [pc, #164]	; (dfa0 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    defa:	b570      	push	{r4, r5, r6, lr}
    defc:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    defe:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    df00:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    df02:	4628      	mov	r0, r5
    df04:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    df08:	2301      	movs	r3, #1
    df0a:	2202      	movs	r2, #2
    df0c:	f7ff fc62 	bl	d7d4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    df10:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    df14:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    df16:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    df1a:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    df1c:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    df1e:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    df20:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    df22:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    df24:	4620      	mov	r0, r4
    df26:	f000 fb99 	bl	e65c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    df2a:	6823      	ldr	r3, [r4, #0]
    df2c:	4a1d      	ldr	r2, [pc, #116]	; (dfa4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    df2e:	685b      	ldr	r3, [r3, #4]
    df30:	4293      	cmp	r3, r2
    df32:	d130      	bne.n	df96 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    df34:	79a3      	ldrb	r3, [r4, #6]
    df36:	2b01      	cmp	r3, #1
    df38:	d02c      	beq.n	df94 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    df3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    df3c:	4a1a      	ldr	r2, [pc, #104]	; (dfa8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    df3e:	f3bf 8f5b 	dmb	ish
    df42:	43db      	mvns	r3, r3
    df44:	e852 1f00 	ldrex	r1, [r2]
    df48:	4019      	ands	r1, r3
    df4a:	e842 1000 	strex	r0, r1, [r2]
    df4e:	2800      	cmp	r0, #0
    df50:	d1f8      	bne.n	df44 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    df52:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    df56:	3af4      	subs	r2, #244	; 0xf4
    df58:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    df5c:	2101      	movs	r1, #1
    df5e:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    df60:	b11b      	cbz	r3, df6a <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    df62:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    df66:	2b00      	cmp	r3, #0
    df68:	d0fb      	beq.n	df62 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    df6a:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df6c:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    df70:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    df72:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df76:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df7a:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df7c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df80:	408b      	lsls	r3, r1
    df82:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    df84:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df86:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df8a:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    df8e:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    df92:	bd70      	pop	{r4, r5, r6, pc}
    df94:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    df96:	4620      	mov	r0, r4
    df98:	2101      	movs	r1, #1
}
    df9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    df9e:	4718      	bx	r3
    dfa0:	20001e14 	.word	0x20001e14
    dfa4:	0000dd59 	.word	0x0000dd59
    dfa8:	20001adc 	.word	0x20001adc

0000dfac <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    dfac:	7982      	ldrb	r2, [r0, #6]
    dfae:	2a01      	cmp	r2, #1
    dfb0:	d005      	beq.n	dfbe <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    dfb2:	2a02      	cmp	r2, #2
    dfb4:	d101      	bne.n	dfba <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    dfb6:	f000 bb3d 	b.w	e634 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    dfba:	2000      	movs	r0, #0
    dfbc:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    dfbe:	4b0b      	ldr	r3, [pc, #44]	; (dfec <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    dfc0:	b510      	push	{r4, lr}
    dfc2:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    dfc4:	6818      	ldr	r0, [r3, #0]
    dfc6:	f003 fd8d 	bl	11ae4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    dfca:	b958      	cbnz	r0, dfe4 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    dfcc:	4b08      	ldr	r3, [pc, #32]	; (dff0 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    dfce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    dfd0:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    dfd2:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    dfd4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    dfd8:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    dfda:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    dfde:	4118      	asrs	r0, r3
    dfe0:	b200      	sxth	r0, r0
    dfe2:	bd10      	pop	{r4, pc}
                state = -1;
    dfe4:	f04f 30ff 	mov.w	r0, #4294967295
}
    dfe8:	bd10      	pop	{r4, pc}
    dfea:	bf00      	nop
    dfec:	20001f28 	.word	0x20001f28
    dff0:	20001e14 	.word	0x20001e14

0000dff4 <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    dff4:	7980      	ldrb	r0, [r0, #6]
    dff6:	4770      	bx	lr

0000dff8 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    dff8:	2001      	movs	r0, #1
    dffa:	4770      	bx	lr

0000dffc <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    dffc:	7980      	ldrb	r0, [r0, #6]
    dffe:	2804      	cmp	r0, #4
    e000:	bf1d      	ittte	ne
    e002:	3806      	subne	r0, #6
    e004:	fab0 f080 	clzne	r0, r0
    e008:	0940      	lsrne	r0, r0, #5
    e00a:	2001      	moveq	r0, #1
    }
    e00c:	4770      	bx	lr
    e00e:	bf00      	nop

0000e010 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    e010:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    e012:	2300      	movs	r3, #0
    switch (m_mode) {
    e014:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    e016:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e01a:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    e01e:	d02a      	beq.n	e076 <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    e020:	2a06      	cmp	r2, #6
    e022:	d126      	bne.n	e072 <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e024:	b28b      	uxth	r3, r1
    e026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e02a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e02e:	bf28      	it	cs
    e030:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    e032:	b470      	push	{r4, r5, r6}
    e034:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e036:	2b00      	cmp	r3, #0
    e038:	d040      	beq.n	e0bc <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    e03a:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e03c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    e03e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    e042:	18d6      	adds	r6, r2, r3
    e044:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    e048:	42ac      	cmp	r4, r5
    e04a:	d008      	beq.n	e05e <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e04c:	2b00      	cmp	r3, #0
    e04e:	bf0c      	ite	eq
    e050:	2440      	moveq	r4, #64	; 0x40
    e052:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e054:	6913      	ldr	r3, [r2, #16]
    e056:	4223      	tst	r3, r4
    e058:	d1fc      	bne.n	e054 <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e05a:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    e05e:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e060:	4b18      	ldr	r3, [pc, #96]	; (e0c4 <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    e062:	f002 020f 	and.w	r2, r2, #15
    e066:	4413      	add	r3, r2
    e068:	2001      	movs	r0, #1
    e06a:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    e06e:	bc70      	pop	{r4, r5, r6}
    e070:	4770      	bx	lr
    bool success = false;
    e072:	4618      	mov	r0, r3
    e074:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    e076:	1c0b      	adds	r3, r1, #0
    e078:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    e07c:	bf18      	it	ne
    e07e:	2301      	movne	r3, #1
    e080:	429a      	cmp	r2, r3
    e082:	d004      	beq.n	e08e <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e084:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    e086:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e08a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    e08e:	b121      	cbz	r1, e09a <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    e090:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    e094:	fab1 f181 	clz	r1, r1
    e098:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    e09a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    e09e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e0a0:	428b      	cmp	r3, r1
    e0a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e0a4:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e0a8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e0ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e0b0:	f04f 0001 	mov.w	r0, #1
    e0b4:	bf14      	ite	ne
    e0b6:	619a      	strne	r2, [r3, #24]
    e0b8:	615a      	streq	r2, [r3, #20]
    e0ba:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e0bc:	43cd      	mvns	r5, r1
    e0be:	b2ed      	uxtb	r5, r5
    e0c0:	e7bc      	b.n	e03c <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    e0c2:	bf00      	nop
    e0c4:	200019e8 	.word	0x200019e8

0000e0c8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    e0c8:	7983      	ldrb	r3, [r0, #6]
    e0ca:	428b      	cmp	r3, r1
    e0cc:	f000 80cb 	beq.w	e266 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    e0d4:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e0d6:	b082      	sub	sp, #8
    e0d8:	4604      	mov	r4, r0
    e0da:	460d      	mov	r5, r1
    switch (newMode) {
    e0dc:	f000 8087 	beq.w	e1ee <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    e0e0:	2906      	cmp	r1, #6
    e0e2:	d008      	beq.n	e0f6 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e0e4:	2902      	cmp	r1, #2
    e0e6:	d033      	beq.n	e150 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    e0e8:	1ae8      	subs	r0, r5, r3
    e0ea:	fab0 f080 	clz	r0, r0
    e0ee:	0940      	lsrs	r0, r0, #5
}
    e0f0:	b002      	add	sp, #8
    e0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    e0f6:	6803      	ldr	r3, [r0, #0]
    e0f8:	4a79      	ldr	r2, [pc, #484]	; (e2e0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    e0fa:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    e0fc:	71a1      	strb	r1, [r4, #6]
    e0fe:	4293      	cmp	r3, r2
    e100:	f040 80b3 	bne.w	e26a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e104:	6c01      	ldr	r1, [r0, #64]	; 0x40
    e106:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e10a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    e10e:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e110:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e112:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    e116:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    e11a:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e11e:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e120:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e124:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e126:	429a      	cmp	r2, r3
    e128:	d008      	beq.n	e13c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e12a:	2e00      	cmp	r6, #0
    e12c:	bf0c      	ite	eq
    e12e:	2640      	moveq	r6, #64	; 0x40
    e130:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e132:	690a      	ldr	r2, [r1, #16]
    e134:	4232      	tst	r2, r6
    e136:	d1fc      	bne.n	e132 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e138:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    e13c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e140:	4e68      	ldr	r6, [pc, #416]	; (e2e4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e142:	f001 020f 	and.w	r2, r1, #15
    e146:	18b3      	adds	r3, r6, r2
    e148:	2000      	movs	r0, #0
    e14a:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    e14e:	e093      	b.n	e278 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    e150:	2300      	movs	r3, #0
    e152:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    e156:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    e158:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    e15c:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    e160:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e162:	6b81      	ldr	r1, [r0, #56]	; 0x38
    e164:	01db      	lsls	r3, r3, #7
    e166:	2a00      	cmp	r2, #0
    e168:	d177      	bne.n	e25a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    e16a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e16e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e172:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e174:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e178:	4e5a      	ldr	r6, [pc, #360]	; (e2e4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e17a:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e17c:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e180:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e184:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e188:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e18c:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e190:	f04f 0e01 	mov.w	lr, #1
    e194:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e198:	443b      	add	r3, r7
    e19a:	fa0e f702 	lsl.w	r7, lr, r2
    e19e:	ea28 0707 	bic.w	r7, r8, r7
    e1a2:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1a6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    e1aa:	ea6f 070c 	mvn.w	r7, ip
    e1ae:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1b0:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e1b4:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e1b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e1bc:	f36f 0200 	bfc	r2, #0, #1
    e1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    e1c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e1c8:	2b00      	cmp	r3, #0
    e1ca:	f000 8086 	beq.w	e2da <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e1ce:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e1d2:	4845      	ldr	r0, [pc, #276]	; (e2e8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e1d4:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    e1d8:	2200      	movs	r2, #0
    e1da:	401f      	ands	r7, r3
    e1dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e1e0:	6800      	ldr	r0, [r0, #0]
    e1e2:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    e1e6:	f003 fe71 	bl	11ecc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    e1ea:	79a3      	ldrb	r3, [r4, #6]
    e1ec:	e77c      	b.n	e0e8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e1ee:	220c      	movs	r2, #12
            State(m_outState);
    e1f0:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e1f2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    e1f6:	2600      	movs	r6, #0
            m_mode = newMode;
    e1f8:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    e1fa:	695b      	ldr	r3, [r3, #20]
    e1fc:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    e200:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    e204:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    e206:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e208:	4936      	ldr	r1, [pc, #216]	; (e2e4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e20a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    e20c:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e20e:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e212:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e216:	f04f 0e01 	mov.w	lr, #1
    e21a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    e21e:	fa0e f002 	lsl.w	r0, lr, r2
    e222:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e226:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e22a:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e22e:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e232:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e236:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e23a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    e23e:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e242:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e246:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    e24a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e24e:	f366 0200 	bfi	r2, r6, #0, #1
    e252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    e256:	79a3      	ldrb	r3, [r4, #6]
            break;
    e258:	e746      	b.n	e0e8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e25a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e25e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e262:	6191      	str	r1, [r2, #24]
    e264:	e786      	b.n	e174 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    e266:	2001      	movs	r0, #1
    e268:	4770      	bx	lr
            State(0);
    e26a:	2100      	movs	r1, #0
    e26c:	4798      	blx	r3
    e26e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e272:	4e1c      	ldr	r6, [pc, #112]	; (e2e4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e274:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    e278:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e27c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e27e:	9301      	str	r3, [sp, #4]
    e280:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e282:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e284:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e288:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    e28c:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    e290:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e292:	fa0c fe02 	lsl.w	lr, ip, r2
    e296:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e29a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    e29e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e2a2:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    e2a6:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e2a8:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e2ac:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    e2b0:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e2b4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e2b8:	ea42 020c 	orr.w	r2, r2, ip
    e2bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    e2c0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e2c4:	2b00      	cmp	r3, #0
    e2c6:	d090      	beq.n	e1ea <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e2c8:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e2cc:	4806      	ldr	r0, [pc, #24]	; (e2e8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e2ce:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    e2d2:	2200      	movs	r2, #0
    e2d4:	ea23 0707 	bic.w	r7, r3, r7
    e2d8:	e780      	b.n	e1dc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    e2da:	2302      	movs	r3, #2
    e2dc:	e704      	b.n	e0e8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e2de:	bf00      	nop
    e2e0:	0000e011 	.word	0x0000e011
    e2e4:	200019e8 	.word	0x200019e8
    e2e8:	20001f28 	.word	0x20001f28

0000e2ec <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    e2ec:	b570      	push	{r4, r5, r6, lr}
    e2ee:	461d      	mov	r5, r3
    e2f0:	4604      	mov	r4, r0
    e2f2:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    e2f6:	f000 fac7 	bl	e888 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    e2fa:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    e2fe:	4a14      	ldr	r2, [pc, #80]	; (e350 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    e300:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    e302:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    e304:	78aa      	ldrb	r2, [r5, #2]
    e306:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    e308:	2301      	movs	r3, #1
    e30a:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    e30c:	2200      	movs	r2, #0
    e30e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    e312:	63a3      	str	r3, [r4, #56]	; 0x38
    e314:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    e318:	7aeb      	ldrb	r3, [r5, #11]
    e31a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    e31e:	230c      	movs	r3, #12
    e320:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e324:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    e328:	64a2      	str	r2, [r4, #72]	; 0x48
    e32a:	64e2      	str	r2, [r4, #76]	; 0x4c
    e32c:	6522      	str	r2, [r4, #80]	; 0x50
    e32e:	6562      	str	r2, [r4, #84]	; 0x54
    e330:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    e334:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    e338:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    e33c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    e340:	7aaa      	ldrb	r2, [r5, #10]
    e342:	4b04      	ldr	r3, [pc, #16]	; (e354 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    e344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e348:	6423      	str	r3, [r4, #64]	; 0x40
}
    e34a:	4620      	mov	r0, r4
    e34c:	bd70      	pop	{r4, r5, r6, pc}
    e34e:	bf00      	nop
    e350:	00023764 	.word	0x00023764
    e354:	0002378c 	.word	0x0002378c

0000e358 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e35a:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    e35c:	f000 f9e4 	bl	e728 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    e360:	79a3      	ldrb	r3, [r4, #6]
    e362:	2b04      	cmp	r3, #4
    e364:	d12d      	bne.n	e3c2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    e366:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e36a:	bb5b      	cbnz	r3, e3c4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    e36c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    e370:	2b00      	cmp	r3, #0
    e372:	f040 809d 	bne.w	e4b0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    e376:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e37a:	220c      	movs	r2, #12
    e37c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    e380:	b19b      	cbz	r3, e3aa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e382:	4d75      	ldr	r5, [pc, #468]	; (e558 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    e384:	68a7      	ldr	r7, [r4, #8]
    e386:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e38a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e38e:	4873      	ldr	r0, [pc, #460]	; (e55c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    e390:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e392:	2601      	movs	r6, #1
    e394:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    e398:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e39c:	fa06 f101 	lsl.w	r1, r6, r1
    e3a0:	6800      	ldr	r0, [r0, #0]
    e3a2:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    e3a6:	f003 fd91 	bl	11ecc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    e3aa:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    e3ae:	b143      	cbz	r3, e3c2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    e3b0:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    e3b4:	b303      	cbz	r3, e3f8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    e3b6:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    e3ba:	429a      	cmp	r2, r3
    e3bc:	db1c      	blt.n	e3f8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    e3be:	4293      	cmp	r3, r2
    e3c0:	d070      	beq.n	e4a4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    e3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    e3c4:	3b01      	subs	r3, #1
    e3c6:	b29b      	uxth	r3, r3
    e3c8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d1ec      	bne.n	e3aa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e3d0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    e3d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e3d8:	429a      	cmp	r2, r3
    e3da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e3dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e3de:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e3e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e3e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e3ea:	bf14      	ite	ne
    e3ec:	619a      	strne	r2, [r3, #24]
    e3ee:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e3f0:	230c      	movs	r3, #12
    e3f2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e3f6:	e7d8      	b.n	e3aa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    e3f8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    e3fc:	bb5b      	cbnz	r3, e456 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    e3fe:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    e402:	2b00      	cmp	r3, #0
    e404:	d14e      	bne.n	e4a4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    e406:	4a56      	ldr	r2, [pc, #344]	; (e560 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e408:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e40a:	6813      	ldr	r3, [r2, #0]
    e40c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e40e:	1a1b      	subs	r3, r3, r0
    e410:	428b      	cmp	r3, r1
    e412:	d3d6      	bcc.n	e3c2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    e414:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e418:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    e41c:	6812      	ldr	r2, [r2, #0]
    e41e:	6522      	str	r2, [r4, #80]	; 0x50
    e420:	fab3 f383 	clz	r3, r3
    e424:	095b      	lsrs	r3, r3, #5
    e426:	428b      	cmp	r3, r1
    e428:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e42a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e42e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e432:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e436:	f04f 020c 	mov.w	r2, #12
    e43a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    e43e:	f04f 0001 	mov.w	r0, #1
    e442:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e444:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    e448:	bf14      	ite	ne
    e44a:	619a      	strne	r2, [r3, #24]
    e44c:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    e44e:	2301      	movs	r3, #1
    e450:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    e456:	4a42      	ldr	r2, [pc, #264]	; (e560 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e458:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e45a:	6813      	ldr	r3, [r2, #0]
    e45c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    e45e:	1a1b      	subs	r3, r3, r0
    e460:	428b      	cmp	r3, r1
    e462:	d3ae      	bcc.n	e3c2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    e464:	6812      	ldr	r2, [r2, #0]
    e466:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e46a:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    e46c:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e46e:	220c      	movs	r2, #12
                        m_pulseValue = false;
    e470:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e474:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    e478:	2b00      	cmp	r3, #0
    e47a:	d15b      	bne.n	e534 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    e47c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e47e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e480:	01db      	lsls	r3, r3, #7
    e482:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e486:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e48a:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    e48c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    e490:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    e494:	3301      	adds	r3, #1
                        m_outState = false;
    e496:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    e498:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    e49c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    e4a0:	2a00      	cmp	r2, #0
    e4a2:	d08e      	beq.n	e3c2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    e4a4:	2300      	movs	r3, #0
    e4a6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    e4aa:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    e4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    e4b0:	4620      	mov	r0, r4
    e4b2:	f000 fa0d 	bl	e8d0 <_ZN9ClearCore9DigitalIn7StateRTEv>
    e4b6:	2800      	cmp	r0, #0
    e4b8:	f47f af5d 	bne.w	e376 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    e4bc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	f43f af72 	beq.w	e3aa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e4c6:	3b01      	subs	r3, #1
    e4c8:	b2db      	uxtb	r3, r3
    e4ca:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	f47f af6b 	bne.w	e3aa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    e4d4:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    e4d8:	b9e6      	cbnz	r6, e514 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    e4da:	4a1f      	ldr	r2, [pc, #124]	; (e558 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e4dc:	491f      	ldr	r1, [pc, #124]	; (e55c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    e4de:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    e4e2:	68a3      	ldr	r3, [r4, #8]
    e4e4:	680f      	ldr	r7, [r1, #0]
    e4e6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    e4ea:	2501      	movs	r5, #1
    e4ec:	4303      	orrs	r3, r0
    e4ee:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e4f2:	fa05 f101 	lsl.w	r1, r5, r1
    e4f6:	4638      	mov	r0, r7
    e4f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e4fc:	462a      	mov	r2, r5
    e4fe:	f003 fce5 	bl	11ecc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    e502:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e506:	fa05 f202 	lsl.w	r2, r5, r2
    e50a:	4638      	mov	r0, r7
    e50c:	4631      	mov	r1, r6
    e50e:	b2d2      	uxtb	r2, r2
    e510:	f003 fb30 	bl	11b74 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    e514:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e518:	b9ab      	cbnz	r3, e546 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    e51a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e51c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e51e:	01db      	lsls	r3, r3, #7
    e520:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e524:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e528:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    e52a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e52e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e532:	e73a      	b.n	e3aa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e534:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e536:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e538:	01db      	lsls	r3, r3, #7
    e53a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e53e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e542:	619a      	str	r2, [r3, #24]
    e544:	e7a2      	b.n	e48c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    e546:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e548:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e54a:	01db      	lsls	r3, r3, #7
    e54c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e550:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e554:	619a      	str	r2, [r3, #24]
    e556:	e7e8      	b.n	e52a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    e558:	200019e8 	.word	0x200019e8
    e55c:	20001f28 	.word	0x20001f28
    e560:	20001bf8 	.word	0x20001bf8

0000e564 <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    e564:	7983      	ldrb	r3, [r0, #6]
    e566:	2b04      	cmp	r3, #4
    e568:	d014      	beq.n	e594 <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    e56a:	2b06      	cmp	r3, #6
    e56c:	d005      	beq.n	e57a <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    e56e:	2b02      	cmp	r3, #2
    e570:	d001      	beq.n	e576 <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    e572:	2000      	movs	r0, #0
    e574:	4770      	bx	lr
            state = DigitalIn::State();
    e576:	f000 b85d 	b.w	e634 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    e57a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e57c:	b173      	cbz	r3, e59c <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e57e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    e582:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e586:	4413      	add	r3, r2
    e588:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    e58c:	b929      	cbnz	r1, e59a <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e58e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    e592:	4770      	bx	lr
            state = m_outState;
    e594:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    e598:	4770      	bx	lr
    e59a:	4770      	bx	lr
    int16_t state = -1;
    e59c:	f04f 30ff 	mov.w	r0, #4294967295
}
    e5a0:	4770      	bx	lr
    e5a2:	bf00      	nop

0000e5a4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e5a4:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e5a6:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    e5a8:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e5aa:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e5ac:	4604      	mov	r4, r0
    m_outState = false;
    e5ae:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    e5b2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    e5b6:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e5ba:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e5be:	d41a      	bmi.n	e5f6 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    e5c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
    e5c2:	01d2      	lsls	r2, r2, #7
    e5c4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e5c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e5cc:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    e5d0:	2004      	movs	r0, #4
    e5d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e5d6:	f360 0203 	bfi	r2, r0, #0, #4
    e5da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    e5de:	4620      	mov	r0, r4
    e5e0:	f000 f83c 	bl	e65c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    e5e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e5e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e5e8:	01db      	lsls	r3, r3, #7
    e5ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e5ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e5f2:	609a      	str	r2, [r3, #8]
    e5f4:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e5f6:	6b00      	ldr	r0, [r0, #48]	; 0x30
    e5f8:	01c0      	lsls	r0, r0, #7
    e5fa:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    e5fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e602:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    e606:	2004      	movs	r0, #4
    e608:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e60c:	f360 1307 	bfi	r3, r0, #4, #4
    e610:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e614:	e7e3      	b.n	e5de <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    e616:	bf00      	nop

0000e618 <_ZN9ClearCore9Connector4ModeEv>:
    }
    e618:	7980      	ldrb	r0, [r0, #6]
    e61a:	4770      	bx	lr

0000e61c <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    e61c:	7980      	ldrb	r0, [r0, #6]
    e61e:	4770      	bx	lr

0000e620 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    e620:	2902      	cmp	r1, #2
            m_mode = newMode;
    e622:	bf06      	itte	eq
    e624:	7181      	strbeq	r1, [r0, #6]
            return true;
    e626:	2001      	moveq	r0, #1
            return false;
    e628:	2000      	movne	r0, #0
    }
    e62a:	4770      	bx	lr

0000e62c <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    e62c:	2000      	movs	r0, #0
    e62e:	4770      	bx	lr

0000e630 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    e630:	2000      	movs	r0, #0
    e632:	4770      	bx	lr

0000e634 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    e634:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e636:	b113      	cbz	r3, e63e <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    e638:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    e63c:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e63e:	4b06      	ldr	r3, [pc, #24]	; (e658 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    e640:	68c1      	ldr	r1, [r0, #12]
    e642:	681a      	ldr	r2, [r3, #0]
    e644:	6943      	ldr	r3, [r0, #20]
    e646:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e64a:	6812      	ldr	r2, [r2, #0]
    e64c:	421a      	tst	r2, r3
    e64e:	bf0c      	ite	eq
    e650:	2001      	moveq	r0, #1
    e652:	2000      	movne	r0, #0
    e654:	4770      	bx	lr
    e656:	bf00      	nop
    e658:	20001f18 	.word	0x20001f18

0000e65c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    e65c:	4b2e      	ldr	r3, [pc, #184]	; (e718 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    e65e:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    e660:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e664:	68c3      	ldr	r3, [r0, #12]
    e666:	6904      	ldr	r4, [r0, #16]
    e668:	01da      	lsls	r2, r3, #7
    e66a:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    e66e:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e670:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    e674:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    e678:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    e67a:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e67e:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    e682:	d034      	beq.n	e6ee <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    e684:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    e688:	f366 1707 	bfi	r7, r6, #4, #4
    e68c:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e690:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e694:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e696:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e69a:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e69c:	2d00      	cmp	r5, #0
    e69e:	d134      	bne.n	e70a <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    e6a0:	2402      	movs	r4, #2
    e6a2:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e6a6:	4a1d      	ldr	r2, [pc, #116]	; (e71c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e6a8:	6884      	ldr	r4, [r0, #8]
    e6aa:	6812      	ldr	r2, [r2, #0]
    e6ac:	4e1c      	ldr	r6, [pc, #112]	; (e720 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    e6ae:	3306      	adds	r3, #6
    e6b0:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e6b2:	f1a3 050c 	sub.w	r5, r3, #12
    e6b6:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e6b8:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e6ba:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e6bc:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e6be:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e6c0:	6242      	str	r2, [r0, #36]	; 0x24
    e6c2:	43e4      	mvns	r4, r4
    e6c4:	f3bf 8f5b 	dmb	ish
    e6c8:	e856 3f00 	ldrex	r3, [r6]
    e6cc:	4023      	ands	r3, r4
    e6ce:	e846 3200 	strex	r2, r3, [r6]
    e6d2:	2a00      	cmp	r2, #0
    e6d4:	d1f8      	bne.n	e6c8 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    e6d6:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    e6da:	6803      	ldr	r3, [r0, #0]
    e6dc:	4a11      	ldr	r2, [pc, #68]	; (e724 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    e6de:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    e6e0:	8081      	strh	r1, [r0, #4]
    e6e2:	4293      	cmp	r3, r2
    e6e4:	d115      	bne.n	e712 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    e6e6:	2302      	movs	r3, #2
    e6e8:	7183      	strb	r3, [r0, #6]
}
    e6ea:	bcf0      	pop	{r4, r5, r6, r7}
    e6ec:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e6ee:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    e6f2:	f367 0603 	bfi	r6, r7, #0, #4
    e6f6:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e6fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e6fe:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e700:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e704:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e706:	2d00      	cmp	r5, #0
    e708:	d0ca      	beq.n	e6a0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e70a:	2403      	movs	r4, #3
    e70c:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    e710:	e7c9      	b.n	e6a6 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    e712:	2102      	movs	r1, #2
}
    e714:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    e716:	4718      	bx	r3
    e718:	00010003 	.word	0x00010003
    e71c:	20001f18 	.word	0x20001f18
    e720:	20001adc 	.word	0x20001adc
    e724:	0000e621 	.word	0x0000e621

0000e728 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    e728:	69c2      	ldr	r2, [r0, #28]
    e72a:	6943      	ldr	r3, [r0, #20]
    e72c:	6812      	ldr	r2, [r2, #0]
    e72e:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    e730:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    e732:	d005      	beq.n	e740 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    e734:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    e736:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    e738:	2a00      	cmp	r2, #0
    e73a:	d039      	beq.n	e7b0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    e73c:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    e740:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    e742:	2a00      	cmp	r2, #0
    e744:	d0fa      	beq.n	e73c <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    e746:	3a01      	subs	r2, #1
    e748:	b292      	uxth	r2, r2
    e74a:	8582      	strh	r2, [r0, #44]	; 0x2c
    e74c:	2a00      	cmp	r2, #0
    e74e:	d1f5      	bne.n	e73c <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e750:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e752:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e754:	6809      	ldr	r1, [r1, #0]
    e756:	400b      	ands	r3, r1
    e758:	2b00      	cmp	r3, #0
    e75a:	bf0c      	ite	eq
    e75c:	2301      	moveq	r3, #1
    e75e:	2300      	movne	r3, #0
    e760:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e764:	d053      	beq.n	e80e <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e766:	f3bf 8f5b 	dmb	ish
    e76a:	4b41      	ldr	r3, [pc, #260]	; (e870 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e76c:	43d2      	mvns	r2, r2
    e76e:	e853 1f00 	ldrex	r1, [r3]
    e772:	4011      	ands	r1, r2
    e774:	e843 1e00 	strex	lr, r1, [r3]
    e778:	f1be 0f00 	cmp.w	lr, #0
    e77c:	d1f7      	bne.n	e76e <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    e77e:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    e782:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e786:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e78a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e78c:	2b00      	cmp	r3, #0
    e78e:	d14a      	bne.n	e826 <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e790:	f3bf 8f5b 	dmb	ish
    e794:	2301      	movs	r3, #1
    e796:	408b      	lsls	r3, r1
    e798:	43db      	mvns	r3, r3
    e79a:	e852 1f00 	ldrex	r1, [r2]
    e79e:	4019      	ands	r1, r3
    e7a0:	e842 1000 	strex	r0, r1, [r2]
    e7a4:	2800      	cmp	r0, #0
    e7a6:	d1f8      	bne.n	e79a <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    e7a8:	f3bf 8f5b 	dmb	ish
}
    e7ac:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e7b0:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e7b2:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e7b4:	6809      	ldr	r1, [r1, #0]
    e7b6:	400b      	ands	r3, r1
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	bf0c      	ite	eq
    e7bc:	2301      	moveq	r3, #1
    e7be:	2300      	movne	r3, #0
    e7c0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e7c4:	d047      	beq.n	e856 <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e7c6:	f3bf 8f5b 	dmb	ish
    e7ca:	4b29      	ldr	r3, [pc, #164]	; (e870 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e7cc:	43d2      	mvns	r2, r2
    e7ce:	e853 1f00 	ldrex	r1, [r3]
    e7d2:	4011      	ands	r1, r2
    e7d4:	e843 1e00 	strex	lr, r1, [r3]
    e7d8:	f1be 0f00 	cmp.w	lr, #0
    e7dc:	d1f7      	bne.n	e7ce <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    e7de:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e7e2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e7e6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e7ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e7ec:	bb3b      	cbnz	r3, e83e <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e7ee:	f3bf 8f5b 	dmb	ish
    e7f2:	2301      	movs	r3, #1
    e7f4:	408b      	lsls	r3, r1
    e7f6:	43db      	mvns	r3, r3
    e7f8:	e852 1f00 	ldrex	r1, [r2]
    e7fc:	4019      	ands	r1, r3
    e7fe:	e842 1000 	strex	r0, r1, [r2]
    e802:	2800      	cmp	r0, #0
    e804:	d1f8      	bne.n	e7f8 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    e806:	f3bf 8f5b 	dmb	ish
}
    e80a:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e80e:	4b18      	ldr	r3, [pc, #96]	; (e870 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e810:	f3bf 8f5b 	dmb	ish
    e814:	e853 1f00 	ldrex	r1, [r3]
    e818:	4311      	orrs	r1, r2
    e81a:	e843 1e00 	strex	lr, r1, [r3]
    e81e:	f1be 0f00 	cmp.w	lr, #0
    e822:	d0ac      	beq.n	e77e <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    e824:	e7f6      	b.n	e814 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e826:	2301      	movs	r3, #1
    e828:	408b      	lsls	r3, r1
    e82a:	f3bf 8f5b 	dmb	ish
    e82e:	e852 1f00 	ldrex	r1, [r2]
    e832:	4319      	orrs	r1, r3
    e834:	e842 1000 	strex	r0, r1, [r2]
    e838:	2800      	cmp	r0, #0
    e83a:	d0e4      	beq.n	e806 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e83c:	e7f7      	b.n	e82e <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    e83e:	2301      	movs	r3, #1
    e840:	408b      	lsls	r3, r1
    e842:	f3bf 8f5b 	dmb	ish
    e846:	e852 1f00 	ldrex	r1, [r2]
    e84a:	4319      	orrs	r1, r3
    e84c:	e842 1000 	strex	r0, r1, [r2]
    e850:	2800      	cmp	r0, #0
    e852:	d0d8      	beq.n	e806 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e854:	e7f7      	b.n	e846 <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    e856:	4b06      	ldr	r3, [pc, #24]	; (e870 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e858:	f3bf 8f5b 	dmb	ish
    e85c:	e853 1f00 	ldrex	r1, [r3]
    e860:	4311      	orrs	r1, r2
    e862:	e843 1e00 	strex	lr, r1, [r3]
    e866:	f1be 0f00 	cmp.w	lr, #0
    e86a:	d0b8      	beq.n	e7de <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    e86c:	e7f6      	b.n	e85c <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    e86e:	bf00      	nop
    e870:	20001adc 	.word	0x20001adc

0000e874 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    e874:	4a03      	ldr	r2, [pc, #12]	; (e884 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    e876:	6002      	str	r2, [r0, #0]
    e878:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e87c:	2200      	movs	r2, #0
    e87e:	8081      	strh	r1, [r0, #4]
    e880:	7182      	strb	r2, [r0, #6]
    e882:	4770      	bx	lr
    e884:	000237b4 	.word	0x000237b4

0000e888 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    e888:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    e88a:	f992 4001 	ldrsb.w	r4, [r2, #1]
    e88e:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    e890:	4d0d      	ldr	r5, [pc, #52]	; (e8c8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    e892:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    e894:	2400      	movs	r4, #0
    e896:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e89a:	8086      	strh	r6, [r0, #4]
    e89c:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    e89e:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    e8a0:	7895      	ldrb	r5, [r2, #2]
    e8a2:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    e8a4:	2101      	movs	r1, #1
    e8a6:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    e8a8:	6141      	str	r1, [r0, #20]
    e8aa:	78d1      	ldrb	r1, [r2, #3]
    e8ac:	7601      	strb	r1, [r0, #24]
    e8ae:	7911      	ldrb	r1, [r2, #4]
    e8b0:	4a06      	ldr	r2, [pc, #24]	; (e8cc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    e8b2:	61c4      	str	r4, [r0, #28]
    e8b4:	6204      	str	r4, [r0, #32]
    e8b6:	6244      	str	r4, [r0, #36]	; 0x24
    e8b8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    e8bc:	7641      	strb	r1, [r0, #25]
    e8be:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    e8c2:	bc70      	pop	{r4, r5, r6}
    e8c4:	4770      	bx	lr
    e8c6:	bf00      	nop
    e8c8:	000237e4 	.word	0x000237e4
    e8cc:	00010003 	.word	0x00010003

0000e8d0 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e8d0:	4b05      	ldr	r3, [pc, #20]	; (e8e8 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    e8d2:	68c1      	ldr	r1, [r0, #12]
    e8d4:	681a      	ldr	r2, [r3, #0]
    e8d6:	6943      	ldr	r3, [r0, #20]
    e8d8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e8dc:	6812      	ldr	r2, [r2, #0]
    e8de:	421a      	tst	r2, r3
}
    e8e0:	bf0c      	ite	eq
    e8e2:	2001      	moveq	r0, #1
    e8e4:	2000      	movne	r0, #0
    e8e6:	4770      	bx	lr
    e8e8:	20001f18 	.word	0x20001f18

0000e8ec <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e8ec:	6a03      	ldr	r3, [r0, #32]
    e8ee:	6941      	ldr	r1, [r0, #20]
    e8f0:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e8f2:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e8f4:	400b      	ands	r3, r1
    e8f6:	2b00      	cmp	r3, #0
    e8f8:	bf0c      	ite	eq
    e8fa:	2301      	moveq	r3, #1
    e8fc:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    e8fe:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e900:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e904:	d023      	beq.n	e94e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e906:	f3bf 8f5b 	dmb	ish
    e90a:	4b1e      	ldr	r3, [pc, #120]	; (e984 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e90c:	43d2      	mvns	r2, r2
    e90e:	e853 1f00 	ldrex	r1, [r3]
    e912:	4011      	ands	r1, r2
    e914:	e843 1e00 	strex	lr, r1, [r3]
    e918:	f1be 0f00 	cmp.w	lr, #0
    e91c:	d1f7      	bne.n	e90e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    e91e:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e922:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e926:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e92a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e92c:	b9db      	cbnz	r3, e966 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e92e:	f3bf 8f5b 	dmb	ish
    e932:	2301      	movs	r3, #1
    e934:	408b      	lsls	r3, r1
    e936:	43db      	mvns	r3, r3
    e938:	e852 1f00 	ldrex	r1, [r2]
    e93c:	4019      	ands	r1, r3
    e93e:	e842 1000 	strex	r0, r1, [r2]
    e942:	2800      	cmp	r0, #0
    e944:	d1f8      	bne.n	e938 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    e946:	f3bf 8f5b 	dmb	ish
    e94a:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e94e:	4b0d      	ldr	r3, [pc, #52]	; (e984 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e950:	f3bf 8f5b 	dmb	ish
    e954:	e853 1f00 	ldrex	r1, [r3]
    e958:	4311      	orrs	r1, r2
    e95a:	e843 1e00 	strex	lr, r1, [r3]
    e95e:	f1be 0f00 	cmp.w	lr, #0
    e962:	d0dc      	beq.n	e91e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    e964:	e7f6      	b.n	e954 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e966:	2301      	movs	r3, #1
    e968:	408b      	lsls	r3, r1
    e96a:	f3bf 8f5b 	dmb	ish
    e96e:	e852 1f00 	ldrex	r1, [r2]
    e972:	4319      	orrs	r1, r3
    e974:	e842 1000 	strex	r0, r1, [r2]
    e978:	2800      	cmp	r0, #0
    e97a:	d1f8      	bne.n	e96e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e97c:	f3bf 8f5b 	dmb	ish
    e980:	f85d fb04 	ldr.w	pc, [sp], #4
    e984:	20001adc 	.word	0x20001adc

0000e988 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e988:	7980      	ldrb	r0, [r0, #6]
    e98a:	4770      	bx	lr

0000e98c <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    e98c:	2005      	movs	r0, #5
    e98e:	4770      	bx	lr

0000e990 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    e990:	7980      	ldrb	r0, [r0, #6]
    e992:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    e994:	2804      	cmp	r0, #4
    e996:	bf8c      	ite	hi
    e998:	2000      	movhi	r0, #0
    e99a:	2001      	movls	r0, #1
    e99c:	4770      	bx	lr
    e99e:	bf00      	nop

0000e9a0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9a2:	b083      	sub	sp, #12
    e9a4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    e9a8:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e9aa:	4604      	mov	r4, r0
    e9ac:	9d08      	ldr	r5, [sp, #32]
    e9ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e9b0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    e9b4:	f7ff fc9a 	bl	e2ec <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    e9b8:	2300      	movs	r3, #0
    e9ba:	490f      	ldr	r1, [pc, #60]	; (e9f8 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    e9bc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    e9c0:	f640 42cc 	movw	r2, #3276	; 0xccc
    e9c4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    e9c8:	6663      	str	r3, [r4, #100]	; 0x64
    e9ca:	66a3      	str	r3, [r4, #104]	; 0x68
    e9cc:	66e3      	str	r3, [r4, #108]	; 0x6c
    e9ce:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    e9d2:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    e9d6:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    e9da:	6765      	str	r5, [r4, #116]	; 0x74
    e9dc:	67a6      	str	r6, [r4, #120]	; 0x78
    e9de:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    e9e2:	6021      	str	r1, [r4, #0]
    e9e4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    e9e8:	7b2a      	ldrb	r2, [r5, #12]
    e9ea:	4b04      	ldr	r3, [pc, #16]	; (e9fc <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    e9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e9f0:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    e9f2:	4620      	mov	r0, r4
    e9f4:	b003      	add	sp, #12
    e9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9f8:	00023814 	.word	0x00023814
    e9fc:	0002383c 	.word	0x0002383c

0000ea00 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    ea00:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    ea02:	6803      	ldr	r3, [r0, #0]
    ea04:	4a12      	ldr	r2, [pc, #72]	; (ea50 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    ea06:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    ea08:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    ea0c:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    ea0e:	b082      	sub	sp, #8
    ea10:	4604      	mov	r4, r0
    ea12:	d115      	bne.n	ea40 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    ea14:	7980      	ldrb	r0, [r0, #6]
    ea16:	2808      	cmp	r0, #8
    ea18:	d805      	bhi.n	ea26 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    ea1a:	2301      	movs	r3, #1
    ea1c:	fa03 f000 	lsl.w	r0, r3, r0
    ea20:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    ea24:	d101      	bne.n	ea2a <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    ea26:	b002      	add	sp, #8
    ea28:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    ea2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ea2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ea2e:	01db      	lsls	r3, r3, #7
    ea30:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ea34:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ea38:	b131      	cbz	r1, ea48 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    ea3a:	615a      	str	r2, [r3, #20]
}
    ea3c:	b002      	add	sp, #8
    ea3e:	bd10      	pop	{r4, pc}
    ea40:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    ea42:	4798      	blx	r3
    ea44:	9901      	ldr	r1, [sp, #4]
    ea46:	e7e6      	b.n	ea16 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    ea48:	619a      	str	r2, [r3, #24]
}
    ea4a:	b002      	add	sp, #8
    ea4c:	bd10      	pop	{r4, pc}
    ea4e:	bf00      	nop
    ea50:	0000e989 	.word	0x0000e989

0000ea54 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    ea54:	7982      	ldrb	r2, [r0, #6]
    ea56:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    ea58:	4601      	mov	r1, r0
    ea5a:	d808      	bhi.n	ea6e <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    ea5c:	2301      	movs	r3, #1
    ea5e:	4093      	lsls	r3, r2
    ea60:	f013 0f54 	tst.w	r3, #84	; 0x54
    ea64:	d112      	bne.n	ea8c <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    ea66:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    ea6a:	d102      	bne.n	ea72 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    ea6c:	4770      	bx	lr
            state = 0;
    ea6e:	2000      	movs	r0, #0
}
    ea70:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    ea72:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    ea74:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    ea76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ea78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    ea7a:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    ea7e:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    ea82:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    ea86:	f340 004f 	sbfx	r0, r0, #1, #16
    ea8a:	4770      	bx	lr
            state = DigitalInOut::State();
    ea8c:	f7ff bd6a 	b.w	e564 <_ZN9ClearCore12DigitalInOut5StateEv>

0000ea90 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    ea90:	b510      	push	{r4, lr}
    switch (m_mode) {
    ea92:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ea94:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    ea96:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ea98:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    ea9a:	2b05      	cmp	r3, #5
    ea9c:	d82a      	bhi.n	eaf4 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    ea9e:	e8df f003 	tbb	[pc, r3]
    eaa2:	2925      	.short	0x2925
    eaa4:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    eaa8:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    eaaa:	4b13      	ldr	r3, [pc, #76]	; (eaf8 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    eaac:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    eab0:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    eab4:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    eab6:	bf1b      	ittet	ne
    eab8:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    eabc:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    eac0:	20ff      	moveq	r0, #255	; 0xff
    eac2:	11c0      	asrne	r0, r0, #7
    eac4:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eac8:	f3c2 024f 	ubfx	r2, r2, #1, #16
    eacc:	4b0b      	ldr	r3, [pc, #44]	; (eafc <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    eace:	fb01 f102 	mul.w	r1, r1, r2
    ead2:	fb83 0301 	smull	r0, r3, r3, r1
    ead6:	440b      	add	r3, r1
    ead8:	139b      	asrs	r3, r3, #14
    eada:	17c9      	asrs	r1, r1, #31
    eadc:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eade:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eae0:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eae2:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eae4:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eae6:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    eae8:	2001      	movs	r0, #1
            break;
    eaea:	bd10      	pop	{r4, pc}
}
    eaec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    eaf0:	f7ff ba8e 	b.w	e010 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    eaf4:	2000      	movs	r0, #0
}
    eaf6:	bd10      	pop	{r4, pc}
    eaf8:	200019e8 	.word	0x200019e8
    eafc:	80010003 	.word	0x80010003

0000eb00 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    eb00:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    eb04:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    eb08:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    eb0c:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    eb0e:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    eb10:	b302      	cbz	r2, eb54 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    eb12:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    eb16:	2a04      	cmp	r2, #4
    eb18:	d01c      	beq.n	eb54 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    eb1a:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    eb1c:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    eb20:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    eb22:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    eb26:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    eb28:	f004 fdee 	bl	13708 <arm_sin_q15>
    eb2c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    eb30:	4b41      	ldr	r3, [pc, #260]	; (ec38 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    eb32:	fb11 f100 	smulbb	r1, r1, r0
    eb36:	429d      	cmp	r5, r3
    eb38:	f341 31cf 	sbfx	r1, r1, #15, #16
    eb3c:	d177      	bne.n	ec2e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    eb3e:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    eb40:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    eb42:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    eb44:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    eb46:	2b05      	cmp	r3, #5
    eb48:	d81e      	bhi.n	eb88 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    eb4a:	e8df f003 	tbb	[pc, r3]
    eb4e:	1d6b      	.short	0x1d6b
    eb50:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    eb54:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    eb56:	2a07      	cmp	r2, #7
    eb58:	d017      	beq.n	eb8a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    eb5a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    eb5c:	4c36      	ldr	r4, [pc, #216]	; (ec38 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    eb5e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    eb60:	f043 0301 	orr.w	r3, r3, #1
    eb64:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    eb66:	6803      	ldr	r3, [r0, #0]
    eb68:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    eb6a:	2500      	movs	r5, #0
    eb6c:	42a3      	cmp	r3, r4
    eb6e:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    eb72:	d132      	bne.n	ebda <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    eb74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    eb76:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    eb78:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    eb7a:	2a04      	cmp	r2, #4
    eb7c:	d804      	bhi.n	eb88 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    eb7e:	e8df f002 	tbb	[pc, r2]
    eb82:	0327      	.short	0x0327
    eb84:	1b27      	.short	0x1b27
    eb86:	27          	.byte	0x27
    eb87:	00          	.byte	0x00
    eb88:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    eb8a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    eb8e:	4293      	cmp	r3, r2
    eb90:	ddc3      	ble.n	eb1a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    eb92:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    eb94:	4a28      	ldr	r2, [pc, #160]	; (ec38 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    eb96:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    eb98:	f043 0301 	orr.w	r3, r3, #1
    eb9c:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    eb9e:	6803      	ldr	r3, [r0, #0]
    eba0:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    eba2:	2400      	movs	r4, #0
    eba4:	4293      	cmp	r3, r2
    eba6:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    ebaa:	d116      	bne.n	ebda <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ebac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    ebae:	085b      	lsrs	r3, r3, #1
    ebb0:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ebb2:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ebb4:	674b      	str	r3, [r1, #116]	; 0x74
    ebb6:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    ebb8:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ebba:	4a20      	ldr	r2, [pc, #128]	; (ec3c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    ebbc:	f000 000f 	and.w	r0, r0, #15
    ebc0:	4402      	add	r2, r0
    ebc2:	b29b      	uxth	r3, r3
    ebc4:	2000      	movs	r0, #0
    ebc6:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ebca:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ebcc:	674b      	str	r3, [r1, #116]	; 0x74
    ebce:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    ebd0:	2100      	movs	r1, #0
}
    ebd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    ebd6:	f7ff ba1b 	b.w	e010 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    ebda:	2100      	movs	r1, #0
}
    ebdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    ebe0:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    ebe2:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ebe4:	4b15      	ldr	r3, [pc, #84]	; (ec3c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    ebe6:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    ebea:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    ebee:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    ebf0:	bf1b      	ittet	ne
    ebf2:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    ebf6:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    ebfa:	24ff      	moveq	r4, #255	; 0xff
    ebfc:	11e4      	asrne	r4, r4, #7
    ebfe:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ec02:	f3c2 024f 	ubfx	r2, r2, #1, #16
    ec06:	4b0e      	ldr	r3, [pc, #56]	; (ec40 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    ec08:	fb01 f102 	mul.w	r1, r1, r2
    ec0c:	fb83 4301 	smull	r4, r3, r3, r1
    ec10:	440b      	add	r3, r1
    ec12:	139b      	asrs	r3, r3, #14
    ec14:	17c9      	asrs	r1, r1, #31
    ec16:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ec18:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ec1a:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ec1c:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ec1e:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ec20:	6741      	str	r1, [r0, #116]	; 0x74
    ec22:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    ec24:	4620      	mov	r0, r4
}
    ec26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    ec2a:	f7ff b9f1 	b.w	e010 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    ec2e:	4620      	mov	r0, r4
    ec30:	462b      	mov	r3, r5
}
    ec32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    ec36:	4718      	bx	r3
    ec38:	0000ea91 	.word	0x0000ea91
    ec3c:	200019e8 	.word	0x200019e8
    ec40:	80010003 	.word	0x80010003

0000ec44 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    ec44:	7983      	ldrb	r3, [r0, #6]
    ec46:	3b02      	subs	r3, #2
    ec48:	2b05      	cmp	r3, #5
    ec4a:	d804      	bhi.n	ec56 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    ec4c:	e8df f003 	tbb	[pc, r3]
    ec50:	03040304 	.word	0x03040304
    ec54:	0604      	.short	0x0604
    ec56:	4770      	bx	lr
            DigitalInOut::Refresh();
    ec58:	f7ff bb7e 	b.w	e358 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    ec5c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    ec60:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    ec62:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    ec64:	d02c      	beq.n	ecc0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    ec66:	2b04      	cmp	r3, #4
    ec68:	d003      	beq.n	ec72 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    ec6a:	2b02      	cmp	r3, #2
    ec6c:	d04c      	beq.n	ed08 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    ec6e:	bcf0      	pop	{r4, r5, r6, r7}
    ec70:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    ec72:	4937      	ldr	r1, [pc, #220]	; (ed50 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ec74:	6e44      	ldr	r4, [r0, #100]	; 0x64
    ec76:	680b      	ldr	r3, [r1, #0]
    ec78:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    ec7a:	1b1b      	subs	r3, r3, r4
    ec7c:	4293      	cmp	r3, r2
    ec7e:	d9f6      	bls.n	ec6e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    ec80:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    ec82:	2303      	movs	r3, #3
    ec84:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    ec88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec8a:	4b32      	ldr	r3, [pc, #200]	; (ed54 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    ec8c:	f042 0201 	orr.w	r2, r2, #1
    ec90:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    ec92:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    ec94:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    ec96:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ec98:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ec9c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    eca0:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eca2:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eca6:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eca8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ecac:	408a      	lsls	r2, r1
    ecae:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    ecb0:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecb2:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ecb6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ecba:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    ecbe:	e7d6      	b.n	ec6e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    ecc0:	4923      	ldr	r1, [pc, #140]	; (ed50 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ecc2:	6e44      	ldr	r4, [r0, #100]	; 0x64
    ecc4:	680b      	ldr	r3, [r1, #0]
    ecc6:	6e82      	ldr	r2, [r0, #104]	; 0x68
    ecc8:	1b1b      	subs	r3, r3, r4
    ecca:	4293      	cmp	r3, r2
    eccc:	d9cf      	bls.n	ec6e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecce:	4a21      	ldr	r2, [pc, #132]	; (ed54 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    ecd0:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    ecd2:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ecd4:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecd6:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ecda:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    ecde:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ece0:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ece4:	2101      	movs	r1, #1
    ece6:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ece8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecec:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    ecf0:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    ecf2:	ea24 0406 	bic.w	r4, r4, r6
    ecf6:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecfa:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecfe:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ed02:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    ed06:	e7b2      	b.n	ec6e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    ed08:	4b11      	ldr	r3, [pc, #68]	; (ed50 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ed0a:	6e41      	ldr	r1, [r0, #100]	; 0x64
    ed0c:	681b      	ldr	r3, [r3, #0]
    ed0e:	6e82      	ldr	r2, [r0, #104]	; 0x68
    ed10:	1a5b      	subs	r3, r3, r1
    ed12:	4293      	cmp	r3, r2
    ed14:	d9ab      	bls.n	ec6e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ed16:	4a0f      	ldr	r2, [pc, #60]	; (ed54 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    ed18:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ed1a:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    ed1c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ed20:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ed24:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ed28:	2501      	movs	r5, #1
    ed2a:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ed2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ed30:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    ed34:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    ed38:	2500      	movs	r5, #0
    ed3a:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    ed3e:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ed42:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ed46:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ed4a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    ed4e:	e78e      	b.n	ec6e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    ed50:	20001bf8 	.word	0x20001bf8
    ed54:	200019e8 	.word	0x200019e8

0000ed58 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    ed58:	b570      	push	{r4, r5, r6, lr}
    ed5a:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    ed5c:	f7ff fc22 	bl	e5a4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    ed60:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    ed62:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    ed64:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    ed68:	6813      	ldr	r3, [r2, #0]
    ed6a:	f043 0301 	orr.w	r3, r3, #1
    ed6e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    ed70:	6893      	ldr	r3, [r2, #8]
    ed72:	f013 0301 	ands.w	r3, r3, #1
    ed76:	d1fb      	bne.n	ed70 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    ed78:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    ed7a:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    ed7c:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    ed7e:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    ed80:	4b24      	ldr	r3, [pc, #144]	; (ee14 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    ed82:	4e25      	ldr	r6, [pc, #148]	; (ee18 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    ed84:	4825      	ldr	r0, [pc, #148]	; (ee1c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    ed86:	f045 0502 	orr.w	r5, r5, #2
    ed8a:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    ed8c:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    ed8e:	f045 0505 	orr.w	r5, r5, #5
    ed92:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    ed94:	6a55      	ldr	r5, [r2, #36]	; 0x24
    ed96:	430d      	orrs	r5, r1
    ed98:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    ed9a:	681b      	ldr	r3, [r3, #0]
    ed9c:	fba6 5303 	umull	r5, r3, r6, r3
    eda0:	0bdb      	lsrs	r3, r3, #15
    eda2:	3b01      	subs	r3, #1
    eda4:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    eda6:	6c13      	ldr	r3, [r2, #64]	; 0x40
    eda8:	6453      	str	r3, [r2, #68]	; 0x44
    edaa:	6c13      	ldr	r3, [r2, #64]	; 0x40
    edac:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    edae:	6f63      	ldr	r3, [r4, #116]	; 0x74
    edb0:	f993 2001 	ldrsb.w	r2, [r3, #1]
    edb4:	789d      	ldrb	r5, [r3, #2]
    edb6:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    edba:	fa01 f605 	lsl.w	r6, r1, r5
    edbe:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    edc0:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    edc2:	f994 3001 	ldrsb.w	r3, [r4, #1]
    edc6:	78a4      	ldrb	r4, [r4, #2]
    edc8:	01db      	lsls	r3, r3, #7
    edca:	4418      	add	r0, r3
    edcc:	40a1      	lsls	r1, r4
    edce:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    edd0:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    edd2:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    edd6:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    edd8:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eddc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ede0:	2005      	movs	r0, #5
    ede2:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ede4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ede8:	bf4c      	ite	mi
    edea:	f360 1107 	bfimi	r1, r0, #4, #4
    edee:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    edf2:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    edf6:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    edfa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    edfe:	2105      	movs	r1, #5
    ee00:	07e0      	lsls	r0, r4, #31
    ee02:	bf4c      	ite	mi
    ee04:	f361 1207 	bfimi	r2, r1, #4, #4
    ee08:	f361 0203 	bfipl	r2, r1, #0, #4
    ee0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ee10:	bd70      	pop	{r4, r5, r6, pc}
    ee12:	bf00      	nop
    ee14:	200000f0 	.word	0x200000f0
    ee18:	be37c63b 	.word	0xbe37c63b
    ee1c:	41008000 	.word	0x41008000

0000ee20 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    ee20:	7982      	ldrb	r2, [r0, #6]
    ee22:	428a      	cmp	r2, r1
    ee24:	d07a      	beq.n	ef1c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    ee26:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee2a:	460d      	mov	r5, r1
    ee2c:	d867      	bhi.n	eefe <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    ee2e:	2201      	movs	r2, #1
    ee30:	fa02 f301 	lsl.w	r3, r2, r1
    ee34:	f013 0f54 	tst.w	r3, #84	; 0x54
    ee38:	4604      	mov	r4, r0
    ee3a:	d171      	bne.n	ef20 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    ee3c:	f413 7f90 	tst.w	r3, #288	; 0x120
    ee40:	d05f      	beq.n	ef02 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    ee42:	7901      	ldrb	r1, [r0, #4]
    ee44:	4a5d      	ldr	r2, [pc, #372]	; (efbc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    ee46:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ee4a:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    ee4e:	2b00      	cmp	r3, #0
    ee50:	f040 809e 	bne.w	ef90 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    ee54:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ee56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ee58:	01db      	lsls	r3, r3, #7
    ee5a:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ee5e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ee62:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    ee64:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ee66:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ee6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ee6e:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ee70:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    ee74:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ee78:	f36f 0000 	bfc	r0, #0, #1
    ee7c:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    ee80:	68a3      	ldr	r3, [r4, #8]
    ee82:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ee86:	2d05      	cmp	r5, #5
    ee88:	f000 808b 	beq.w	efa2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    ee8c:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ee90:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ee94:	2701      	movs	r7, #1
    ee96:	fa07 f101 	lsl.w	r1, r7, r1
    ee9a:	ea20 0101 	bic.w	r1, r0, r1
    ee9e:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    eea2:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    eea6:	6f61      	ldr	r1, [r4, #116]	; 0x74
    eea8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    eeac:	f991 3001 	ldrsb.w	r3, [r1, #1]
    eeb0:	4a43      	ldr	r2, [pc, #268]	; (efc0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    eeb2:	7889      	ldrb	r1, [r1, #2]
    eeb4:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    eeb8:	440b      	add	r3, r1
    eeba:	2101      	movs	r1, #1
    eebc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    eec0:	4308      	orrs	r0, r1
    eec2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    eec6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    eec8:	f990 3001 	ldrsb.w	r3, [r0, #1]
    eecc:	7880      	ldrb	r0, [r0, #2]
    eece:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    eed2:	4403      	add	r3, r0
    eed4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    eed8:	430a      	orrs	r2, r1
    eeda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    eede:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    eee0:	6813      	ldr	r3, [r2, #0]
    eee2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    eee6:	428b      	cmp	r3, r1
    eee8:	d006      	beq.n	eef8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    eeea:	6813      	ldr	r3, [r2, #0]
    eeec:	f361 0341 	bfi	r3, r1, #1, #1
    eef0:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    eef2:	6893      	ldr	r3, [r2, #8]
    eef4:	079b      	lsls	r3, r3, #30
    eef6:	d4fc      	bmi.n	eef2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    eef8:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    eefa:	2001      	movs	r0, #1
    eefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    eefe:	2000      	movs	r0, #0
    ef00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef02:	061a      	lsls	r2, r3, #24
    ef04:	d5fb      	bpl.n	eefe <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    ef06:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ef08:	4a2c      	ldr	r2, [pc, #176]	; (efbc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    ef0a:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    ef0e:	f001 010f 	and.w	r1, r1, #15
    ef12:	1850      	adds	r0, r2, r1
    ef14:	11db      	asrs	r3, r3, #7
    ef16:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    ef1a:	e796      	b.n	ee4a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    ef1c:	2001      	movs	r0, #1
    ef1e:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ef20:	4f26      	ldr	r7, [pc, #152]	; (efbc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    ef22:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ef24:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ef28:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ef2c:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ef30:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ef34:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ef36:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ef3a:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ef3e:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ef42:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ef46:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ef4a:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    ef4e:	f7ff f8bb 	bl	e0c8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    ef52:	2800      	cmp	r0, #0
    ef54:	d0d3      	beq.n	eefe <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ef56:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ef58:	4b19      	ldr	r3, [pc, #100]	; (efc0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ef5a:	f991 2001 	ldrsb.w	r2, [r1, #1]
    ef5e:	7889      	ldrb	r1, [r1, #2]
    ef60:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    ef64:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ef66:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ef68:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    ef6c:	f36f 0000 	bfc	r0, #0, #1
    ef70:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ef74:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    ef76:	f992 0001 	ldrsb.w	r0, [r2, #1]
    ef7a:	7892      	ldrb	r2, [r2, #2]
    ef7c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    ef80:	4413      	add	r3, r2
    ef82:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ef86:	f36f 0200 	bfc	r2, #0, #1
    ef8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ef8e:	e7a6      	b.n	eede <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ef90:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef92:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ef94:	01db      	lsls	r3, r3, #7
    ef96:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ef9a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ef9e:	6146      	str	r6, [r0, #20]
    efa0:	e760      	b.n	ee64 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    efa2:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    efa6:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    efaa:	2601      	movs	r6, #1
    efac:	fa06 f101 	lsl.w	r1, r6, r1
    efb0:	4339      	orrs	r1, r7
    efb2:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    efb6:	4303      	orrs	r3, r0
    efb8:	e775      	b.n	eea6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    efba:	bf00      	nop
    efbc:	200019e8 	.word	0x200019e8
    efc0:	41008000 	.word	0x41008000

0000efc4 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    efc4:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    efc6:	4c07      	ldr	r4, [pc, #28]	; (efe4 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    efc8:	6823      	ldr	r3, [r4, #0]
    efca:	07db      	lsls	r3, r3, #31
    efcc:	d502      	bpl.n	efd4 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    efce:	4b06      	ldr	r3, [pc, #24]	; (efe8 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    efd0:	6818      	ldr	r0, [r3, #0]
    efd2:	bd10      	pop	{r4, pc}
    efd4:	2001      	movs	r0, #1
    efd6:	f004 fbb3 	bl	13740 <_Znwj>
    efda:	4a03      	ldr	r2, [pc, #12]	; (efe8 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    efdc:	2301      	movs	r3, #1
    efde:	6010      	str	r0, [r2, #0]
    efe0:	6023      	str	r3, [r4, #0]
    return *instance;
}
    efe2:	bd10      	pop	{r4, pc}
    efe4:	20001e3c 	.word	0x20001e3c
    efe8:	20001f04 	.word	0x20001f04

0000efec <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    efec:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    efee:	4a13      	ldr	r2, [pc, #76]	; (f03c <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    eff0:	4913      	ldr	r1, [pc, #76]	; (f040 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    eff2:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    eff4:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    eff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    effa:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    effc:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    effe:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    f000:	8813      	ldrh	r3, [r2, #0]
    f002:	b29b      	uxth	r3, r3
    f004:	2b01      	cmp	r3, #1
    f006:	d0fb      	beq.n	f000 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f008:	4b0e      	ldr	r3, [pc, #56]	; (f044 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    f00a:	4d0f      	ldr	r5, [pc, #60]	; (f048 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    f00c:	4c0f      	ldr	r4, [pc, #60]	; (f04c <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    f00e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f012:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    f014:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f018:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f01c:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    f020:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    f022:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    f024:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    f026:	7b51      	ldrb	r1, [r2, #13]
    f028:	f041 0101 	orr.w	r1, r1, #1
    f02c:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f02e:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    f030:	6913      	ldr	r3, [r2, #16]
    f032:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    f036:	6113      	str	r3, [r2, #16]
}
    f038:	bc70      	pop	{r4, r5, r6}
    f03a:	4770      	bx	lr
    f03c:	40000800 	.word	0x40000800
    f040:	4100a000 	.word	0x4100a000
    f044:	e000e100 	.word	0xe000e100
    f048:	20001e40 	.word	0x20001e40
    f04c:	20001ea0 	.word	0x20001ea0

0000f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    f050:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    f052:	bfda      	itte	le
    f054:	4b02      	ldrle	r3, [pc, #8]	; (f060 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    f056:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    f05a:	2000      	movgt	r0, #0
}
    f05c:	4770      	bx	lr
    f05e:	bf00      	nop
    f060:	4100a040 	.word	0x4100a040

0000f064 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    f064:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    f066:	bfda      	itte	le
    f068:	4b02      	ldrle	r3, [pc, #8]	; (f074 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    f06a:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    f06e:	2000      	movgt	r0, #0
}
    f070:	4770      	bx	lr
    f072:	bf00      	nop
    f074:	20001e40 	.word	0x20001e40

0000f078 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    f078:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    f07a:	f7ff ffa3 	bl	efc4 <_ZN9ClearCore10DmaManager8InstanceEv>
    f07e:	4b01      	ldr	r3, [pc, #4]	; (f084 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    f080:	6018      	str	r0, [r3, #0]
    f082:	bd08      	pop	{r3, pc}
    f084:	20001f00 	.word	0x20001f00

0000f088 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    f088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f08c:	4604      	mov	r4, r0
    f08e:	4267      	negs	r7, r4
    f090:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    f094:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    f098:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    f09c:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f0a0:	4608      	mov	r0, r1
    f0a2:	ea4f 0999 	mov.w	r9, r9, lsr #2
    f0a6:	2101      	movs	r1, #1
    f0a8:	f002 f86e 	bl	11188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    f0ac:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    f0b0:	2600      	movs	r6, #0
    bool sendData = true;
    f0b2:	2201      	movs	r2, #1
    f0b4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f0b8:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    f0bc:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    f0c0:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    f0c2:	4690      	mov	r8, r2
    f0c4:	2b02      	cmp	r3, #2
    f0c6:	f000 821b 	beq.w	f500 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    f0ca:	2d03      	cmp	r5, #3
    f0cc:	f300 8159 	bgt.w	f382 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    f0d0:	b1a3      	cbz	r3, f0fc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    f0d2:	2b01      	cmp	r3, #1
    f0d4:	d1fc      	bne.n	f0d0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    f0d6:	b1da      	cbz	r2, f110 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    f0d8:	2e00      	cmp	r6, #0
    f0da:	f040 808d 	bne.w	f1f8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    f0de:	6026      	str	r6, [r4, #0]
    f0e0:	6066      	str	r6, [r4, #4]
    f0e2:	60a6      	str	r6, [r4, #8]
    f0e4:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    f0e6:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    f0e8:	f104 0212 	add.w	r2, r4, #18
    f0ec:	4621      	mov	r1, r4
    f0ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f0f0:	f002 f8f4 	bl	112dc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    f0f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f0f8:	2200      	movs	r2, #0
    f0fa:	e7e3      	b.n	f0c4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    f0fc:	2a00      	cmp	r2, #0
    f0fe:	d053      	beq.n	f1a8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    f100:	f04f 33ff 	mov.w	r3, #4294967295
    f104:	6023      	str	r3, [r4, #0]
    f106:	6063      	str	r3, [r4, #4]
    f108:	60a3      	str	r3, [r4, #8]
    f10a:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    f10c:	2310      	movs	r3, #16
    f10e:	e7eb      	b.n	f0e8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    f110:	2e00      	cmp	r6, #0
    f112:	f040 80a2 	bne.w	f25a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    f116:	7ca2      	ldrb	r2, [r4, #18]
    f118:	2aff      	cmp	r2, #255	; 0xff
    f11a:	f040 8128 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f11e:	7ce2      	ldrb	r2, [r4, #19]
    f120:	2aff      	cmp	r2, #255	; 0xff
    f122:	f040 8124 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f126:	7d22      	ldrb	r2, [r4, #20]
    f128:	2aff      	cmp	r2, #255	; 0xff
    f12a:	f040 8120 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f12e:	7d62      	ldrb	r2, [r4, #21]
    f130:	2aff      	cmp	r2, #255	; 0xff
    f132:	f040 811c 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f136:	7da2      	ldrb	r2, [r4, #22]
    f138:	2aff      	cmp	r2, #255	; 0xff
    f13a:	f040 8118 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f13e:	7de2      	ldrb	r2, [r4, #23]
    f140:	2aff      	cmp	r2, #255	; 0xff
    f142:	f040 8114 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f146:	7e22      	ldrb	r2, [r4, #24]
    f148:	2aff      	cmp	r2, #255	; 0xff
    f14a:	f040 8110 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f14e:	7e62      	ldrb	r2, [r4, #25]
    f150:	2aff      	cmp	r2, #255	; 0xff
    f152:	f040 810c 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f156:	7ea2      	ldrb	r2, [r4, #26]
    f158:	2aff      	cmp	r2, #255	; 0xff
    f15a:	f040 8108 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f15e:	7ee2      	ldrb	r2, [r4, #27]
    f160:	2aff      	cmp	r2, #255	; 0xff
    f162:	f040 8104 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f166:	7f22      	ldrb	r2, [r4, #28]
    f168:	2aff      	cmp	r2, #255	; 0xff
    f16a:	f040 8100 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f16e:	7f62      	ldrb	r2, [r4, #29]
    f170:	2aff      	cmp	r2, #255	; 0xff
    f172:	f040 80fc 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f176:	7fa2      	ldrb	r2, [r4, #30]
    f178:	2aff      	cmp	r2, #255	; 0xff
    f17a:	f040 80f8 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f17e:	7fe2      	ldrb	r2, [r4, #31]
    f180:	2aff      	cmp	r2, #255	; 0xff
    f182:	f040 80f4 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f186:	f894 2020 	ldrb.w	r2, [r4, #32]
    f18a:	2aff      	cmp	r2, #255	; 0xff
    f18c:	f040 80ef 	bne.w	f36e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f190:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    f194:	3eff      	subs	r6, #255	; 0xff
    f196:	bf18      	it	ne
    f198:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    f19a:	3501      	adds	r5, #1
    f19c:	b2ed      	uxtb	r5, r5
    f19e:	2d03      	cmp	r5, #3
    f1a0:	f04f 0201 	mov.w	r2, #1
    f1a4:	dd94      	ble.n	f0d0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    f1a6:	e0ec      	b.n	f382 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    f1a8:	7ca2      	ldrb	r2, [r4, #18]
    f1aa:	bb02      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1ac:	7ce2      	ldrb	r2, [r4, #19]
    f1ae:	b9f2      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1b0:	7d22      	ldrb	r2, [r4, #20]
    f1b2:	b9e2      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1b4:	7d62      	ldrb	r2, [r4, #21]
    f1b6:	b9d2      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1b8:	7da2      	ldrb	r2, [r4, #22]
    f1ba:	b9c2      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1bc:	7de2      	ldrb	r2, [r4, #23]
    f1be:	b9b2      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1c0:	7e22      	ldrb	r2, [r4, #24]
    f1c2:	b9a2      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1c4:	7e62      	ldrb	r2, [r4, #25]
    f1c6:	b992      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1c8:	7ea2      	ldrb	r2, [r4, #26]
    f1ca:	b982      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1cc:	7ee2      	ldrb	r2, [r4, #27]
    f1ce:	b972      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1d0:	7f22      	ldrb	r2, [r4, #28]
    f1d2:	b962      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1d4:	7f62      	ldrb	r2, [r4, #29]
    f1d6:	b952      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1d8:	7fa2      	ldrb	r2, [r4, #30]
    f1da:	b942      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1dc:	7fe2      	ldrb	r2, [r4, #31]
    f1de:	b932      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1e0:	f894 2020 	ldrb.w	r2, [r4, #32]
    f1e4:	b91a      	cbnz	r2, f1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f1e6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    f1ea:	2a00      	cmp	r2, #0
    f1ec:	d0d5      	beq.n	f19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    f1ee:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    f1f2:	2501      	movs	r5, #1
                        flush0Success = false;
    f1f4:	2600      	movs	r6, #0
    f1f6:	e772      	b.n	f0de <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    f1f8:	2f00      	cmp	r7, #0
    f1fa:	f000 80ba 	beq.w	f372 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    f1fe:	23aa      	movs	r3, #170	; 0xaa
    f200:	2f01      	cmp	r7, #1
    f202:	7023      	strb	r3, [r4, #0]
    f204:	f104 0101 	add.w	r1, r4, #1
    f208:	f000 80db 	beq.w	f3c2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    f20c:	2f02      	cmp	r7, #2
    f20e:	7063      	strb	r3, [r4, #1]
    f210:	f104 0102 	add.w	r1, r4, #2
    f214:	f000 80d3 	beq.w	f3be <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    f218:	70a3      	strb	r3, [r4, #2]
    f21a:	1ce1      	adds	r1, r4, #3
    f21c:	220e      	movs	r2, #14
    f21e:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    f222:	51e3      	str	r3, [r4, r7]
    f224:	19e3      	adds	r3, r4, r7
    f226:	3304      	adds	r3, #4
    f228:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    f22c:	f1b9 0f03 	cmp.w	r9, #3
    f230:	6018      	str	r0, [r3, #0]
    f232:	6058      	str	r0, [r3, #4]
    f234:	d000      	beq.n	f238 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    f236:	6098      	str	r0, [r3, #8]
    f238:	45d3      	cmp	fp, sl
    f23a:	eba2 020a 	sub.w	r2, r2, sl
    f23e:	eb01 000a 	add.w	r0, r1, sl
    f242:	d008      	beq.n	f256 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f244:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    f246:	2a01      	cmp	r2, #1
            *buf++ = val;
    f248:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    f24c:	d003      	beq.n	f256 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f24e:	2a02      	cmp	r2, #2
            *buf++ = val;
    f250:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    f252:	d000      	beq.n	f256 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    f254:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    f256:	2311      	movs	r3, #17
    f258:	e746      	b.n	f0e8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    f25a:	7ca1      	ldrb	r1, [r4, #18]
    f25c:	29aa      	cmp	r1, #170	; 0xaa
    f25e:	f000 80aa 	beq.w	f3b6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    f262:	7ce2      	ldrb	r2, [r4, #19]
    f264:	2aaa      	cmp	r2, #170	; 0xaa
    f266:	d040      	beq.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f268:	7d23      	ldrb	r3, [r4, #20]
    f26a:	2baa      	cmp	r3, #170	; 0xaa
    f26c:	f000 80a5 	beq.w	f3ba <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    f270:	7d63      	ldrb	r3, [r4, #21]
    f272:	2baa      	cmp	r3, #170	; 0xaa
    f274:	f000 80a7 	beq.w	f3c6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    f278:	7da3      	ldrb	r3, [r4, #22]
    f27a:	2baa      	cmp	r3, #170	; 0xaa
    f27c:	f000 8118 	beq.w	f4b0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    f280:	7de3      	ldrb	r3, [r4, #23]
    f282:	2baa      	cmp	r3, #170	; 0xaa
    f284:	f000 80a1 	beq.w	f3ca <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    f288:	7e23      	ldrb	r3, [r4, #24]
    f28a:	2baa      	cmp	r3, #170	; 0xaa
    f28c:	f000 8112 	beq.w	f4b4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    f290:	7e63      	ldrb	r3, [r4, #25]
    f292:	2baa      	cmp	r3, #170	; 0xaa
    f294:	f000 8110 	beq.w	f4b8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    f298:	7ea3      	ldrb	r3, [r4, #26]
    f29a:	2baa      	cmp	r3, #170	; 0xaa
    f29c:	f000 810e 	beq.w	f4bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    f2a0:	7ee3      	ldrb	r3, [r4, #27]
    f2a2:	2baa      	cmp	r3, #170	; 0xaa
    f2a4:	f000 8102 	beq.w	f4ac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    f2a8:	7f23      	ldrb	r3, [r4, #28]
    f2aa:	2baa      	cmp	r3, #170	; 0xaa
    f2ac:	f000 8108 	beq.w	f4c0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    f2b0:	7f63      	ldrb	r3, [r4, #29]
    f2b2:	2baa      	cmp	r3, #170	; 0xaa
    f2b4:	f000 811c 	beq.w	f4f0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    f2b8:	7fa3      	ldrb	r3, [r4, #30]
    f2ba:	2baa      	cmp	r3, #170	; 0xaa
    f2bc:	f000 811a 	beq.w	f4f4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    f2c0:	7fe3      	ldrb	r3, [r4, #31]
    f2c2:	2baa      	cmp	r3, #170	; 0xaa
    f2c4:	f000 8118 	beq.w	f4f8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    f2c8:	f894 3020 	ldrb.w	r3, [r4, #32]
    f2cc:	2baa      	cmp	r3, #170	; 0xaa
    f2ce:	f000 8115 	beq.w	f4fc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    f2d2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f2d6:	2baa      	cmp	r3, #170	; 0xaa
    f2d8:	f000 8108 	beq.w	f4ec <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    f2dc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    f2e0:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    f2e2:	bf08      	it	eq
    f2e4:	2310      	moveq	r3, #16
                        if (!foundAA &&
    f2e6:	f040 80ed 	bne.w	f4c4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    f2ea:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    f2ec:	2502      	movs	r5, #2
    f2ee:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    f2f2:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    f2f4:	74e2      	strb	r2, [r4, #19]
    f2f6:	7522      	strb	r2, [r4, #20]
    f2f8:	7562      	strb	r2, [r4, #21]
    f2fa:	75a2      	strb	r2, [r4, #22]
    f2fc:	75e2      	strb	r2, [r4, #23]
    f2fe:	7622      	strb	r2, [r4, #24]
    f300:	7662      	strb	r2, [r4, #25]
    f302:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    f304:	76e2      	strb	r2, [r4, #27]
    f306:	7722      	strb	r2, [r4, #28]
    f308:	7762      	strb	r2, [r4, #29]
    f30a:	77a2      	strb	r2, [r4, #30]
    f30c:	77e2      	strb	r2, [r4, #31]
    f30e:	f884 2020 	strb.w	r2, [r4, #32]
    f312:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    f316:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    f31a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    f31e:	105b      	asrs	r3, r3, #1
    f320:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f322:	2701      	movs	r7, #1
    f324:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    f326:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f32a:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    f32e:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    f332:	3a01      	subs	r2, #1
    f334:	4610      	mov	r0, r2
    f336:	17d1      	asrs	r1, r2, #31
    f338:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    f33a:	42ba      	cmp	r2, r7
    f33c:	bfc8      	it	gt
    f33e:	fa42 f707 	asrgt.w	r7, r2, r7
    f342:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    f346:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    f34a:	2b00      	cmp	r3, #0
    f34c:	d13f      	bne.n	f3ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    f34e:	4b6d      	ldr	r3, [pc, #436]	; (f504 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    f350:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f354:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f358:	43c9      	mvns	r1, r1
    f35a:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    f35c:	4a6a      	ldr	r2, [pc, #424]	; (f508 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f35e:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    f362:	6813      	ldr	r3, [r2, #0]
    f364:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    f368:	4628      	mov	r0, r5
    f36a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    f36e:	2601      	movs	r6, #1
    f370:	e713      	b.n	f19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    f372:	4623      	mov	r3, r4
    f374:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    f378:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    f37c:	4621      	mov	r1, r4
    f37e:	2211      	movs	r2, #17
    f380:	e752      	b.n	f228 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    f382:	4a62      	ldr	r2, [pc, #392]	; (f50c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f384:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    f386:	2301      	movs	r3, #1
    f388:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f38c:	2208      	movs	r2, #8
    f38e:	2102      	movs	r1, #2
    f390:	f002 fbf0 	bl	11b74 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f394:	4a5b      	ldr	r2, [pc, #364]	; (f504 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f396:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    f39a:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    f39e:	495a      	ldr	r1, [pc, #360]	; (f508 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f3a0:	ea23 0300 	bic.w	r3, r3, r0
    f3a4:	6809      	ldr	r1, [r1, #0]
    f3a6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    f3aa:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    f3ac:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    f3b0:	4628      	mov	r0, r5
    f3b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    f3b6:	4613      	mov	r3, r2
    f3b8:	e797      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    f3ba:	2302      	movs	r3, #2
    f3bc:	e795      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f3be:	220f      	movs	r2, #15
    f3c0:	e72d      	b.n	f21e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f3c2:	2210      	movs	r2, #16
    f3c4:	e72b      	b.n	f21e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f3c6:	2303      	movs	r3, #3
    f3c8:	e78f      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f3ca:	2305      	movs	r3, #5
    f3cc:	e78d      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    f3ce:	f1c3 0108 	rsb	r1, r3, #8
    f3d2:	00ce      	lsls	r6, r1, #3
    f3d4:	f04f 30ff 	mov.w	r0, #4294967295
    f3d8:	f1c6 0220 	rsb	r2, r6, #32
    f3dc:	fa00 f202 	lsl.w	r2, r0, r2
    f3e0:	fa20 fe06 	lsr.w	lr, r0, r6
    f3e4:	f1a6 0720 	sub.w	r7, r6, #32
    f3e8:	fa20 f707 	lsr.w	r7, r0, r7
    f3ec:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f3f0:	4622      	mov	r2, r4
    f3f2:	ea4e 0e07 	orr.w	lr, lr, r7
    f3f6:	40f0      	lsrs	r0, r6
    f3f8:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f3fa:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f3fe:	65e0      	str	r0, [r4, #92]	; 0x5c
    f400:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f404:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f406:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f408:	f104 0812 	add.w	r8, r4, #18
    f40c:	7056      	strb	r6, [r2, #1]
    f40e:	7096      	strb	r6, [r2, #2]
    f410:	70d6      	strb	r6, [r2, #3]
    f412:	7116      	strb	r6, [r2, #4]
    f414:	7156      	strb	r6, [r2, #5]
    f416:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f418:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f41c:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f41e:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f422:	4442      	add	r2, r8
    f424:	3301      	adds	r3, #1
    f426:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f428:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f42c:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f42e:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f430:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f432:	f001 ff53 	bl	112dc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f436:	4631      	mov	r1, r6
    f438:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f43a:	f001 fea5 	bl	11188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f43e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f442:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f446:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f448:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f44a:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f44c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f44e:	f001 fe9b 	bl	11188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f452:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f456:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f458:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f45c:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f460:	2701      	movs	r7, #1
    f462:	4442      	add	r2, r8
    f464:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f468:	4421      	add	r1, r4
    f46a:	f001 ff37 	bl	112dc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f46e:	4631      	mov	r1, r6
    f470:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f472:	f001 fe89 	bl	11188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f476:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f47a:	4b22      	ldr	r3, [pc, #136]	; (f504 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f47c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f480:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f484:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f488:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f48c:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f490:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f494:	f04f 0800 	mov.w	r8, #0
    f498:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f49c:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f4a0:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f4a4:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f4a6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f4aa:	e757      	b.n	f35c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f4ac:	2309      	movs	r3, #9
    f4ae:	e71c      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4b0:	2304      	movs	r3, #4
    f4b2:	e71a      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4b4:	2306      	movs	r3, #6
    f4b6:	e718      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4b8:	2307      	movs	r3, #7
    f4ba:	e716      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4bc:	2308      	movs	r3, #8
    f4be:	e714      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4c0:	230a      	movs	r3, #10
    f4c2:	e712      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f4c4:	2300      	movs	r3, #0
    f4c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f4ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f4ce:	4a0f      	ldr	r2, [pc, #60]	; (f50c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f4d0:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f4d2:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f4d4:	f04f 0000 	mov.w	r0, #0
    f4d8:	f04f 0100 	mov.w	r1, #0
    f4dc:	bfcc      	ite	gt
    f4de:	105b      	asrgt	r3, r3, #1
    f4e0:	2301      	movle	r3, #1
    f4e2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f4e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f4ea:	e74b      	b.n	f384 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f4ec:	230f      	movs	r3, #15
    f4ee:	e6fc      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4f0:	230b      	movs	r3, #11
    f4f2:	e6fa      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4f4:	230c      	movs	r3, #12
    f4f6:	e6f8      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4f8:	230d      	movs	r3, #13
    f4fa:	e6f6      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4fc:	230e      	movs	r3, #14
    f4fe:	e6f4      	b.n	f2ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f500:	2300      	movs	r3, #0
    f502:	e70c      	b.n	f31e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f504:	200019e8 	.word	0x200019e8
    f508:	20001bf8 	.word	0x20001bf8
    f50c:	20001f28 	.word	0x20001f28

0000f510 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f514:	4f42      	ldr	r7, [pc, #264]	; (f620 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f516:	683c      	ldr	r4, [r7, #0]
    f518:	f014 0401 	ands.w	r4, r4, #1
    f51c:	d003      	beq.n	f526 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f51e:	4b41      	ldr	r3, [pc, #260]	; (f624 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f520:	6818      	ldr	r0, [r3, #0]
    f522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f526:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f52a:	f004 f909 	bl	13740 <_Znwj>
            buf64.writeMarker = 0;
    f52e:	4603      	mov	r3, r0
    f530:	4606      	mov	r6, r0
    f532:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f536:	f04f 38ff 	mov.w	r8, #4294967295
    f53a:	f04f 39ff 	mov.w	r9, #4294967295
    f53e:	2200      	movs	r2, #0
            buf64.inputs = 0;
    f540:	7074      	strb	r4, [r6, #1]
    f542:	705c      	strb	r4, [r3, #1]
    f544:	709c      	strb	r4, [r3, #2]
    f546:	70dc      	strb	r4, [r3, #3]
    f548:	711c      	strb	r4, [r3, #4]
    f54a:	715c      	strb	r4, [r3, #5]
    f54c:	719c      	strb	r4, [r3, #6]
    f54e:	71dc      	strb	r4, [r3, #7]
    f550:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    f552:	7274      	strb	r4, [r6, #9]
    f554:	72b4      	strb	r4, [r6, #10]
    f556:	72f4      	strb	r4, [r6, #11]
    f558:	7334      	strb	r4, [r6, #12]
    f55a:	7374      	strb	r4, [r6, #13]
    f55c:	73b4      	strb	r4, [r6, #14]
    f55e:	73f4      	strb	r4, [r6, #15]
    f560:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    f562:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    f564:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    f566:	74f4      	strb	r4, [r6, #19]
    f568:	7534      	strb	r4, [r6, #20]
    f56a:	7574      	strb	r4, [r6, #21]
    f56c:	75b4      	strb	r4, [r6, #22]
    f56e:	75f4      	strb	r4, [r6, #23]
    f570:	7634      	strb	r4, [r6, #24]
    f572:	7674      	strb	r4, [r6, #25]
    f574:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    f576:	76f4      	strb	r4, [r6, #27]
    f578:	7734      	strb	r4, [r6, #28]
    f57a:	7774      	strb	r4, [r6, #29]
    f57c:	77b4      	strb	r4, [r6, #30]
    f57e:	77f4      	strb	r4, [r6, #31]
    f580:	f886 4020 	strb.w	r4, [r6, #32]
    f584:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    f588:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    f58c:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    f590:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    f594:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    f598:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    f59c:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    f5a0:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    f5a4:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    f5a8:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    f5ac:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f5b0:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f5b4:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f5b8:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f5bc:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f5c0:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f5c4:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f5c8:	2301      	movs	r3, #1
    f5ca:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f5ce:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f5d2:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f5d6:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f5da:	62b4      	str	r4, [r6, #40]	; 0x28
    f5dc:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f5e0:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f5e4:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f5e8:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f5ec:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f5f0:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f5f4:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f5f8:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f5fc:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f600:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f604:	4620      	mov	r0, r4
    f606:	3428      	adds	r4, #40	; 0x28
    f608:	f000 fc8a 	bl	ff20 <_ZN9ClearCore7CcioPinC1Ev>
    f60c:	42ac      	cmp	r4, r5
    f60e:	d1f9      	bne.n	f604 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f610:	4a04      	ldr	r2, [pc, #16]	; (f624 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f612:	2301      	movs	r3, #1
    f614:	6016      	str	r6, [r2, #0]
    f616:	4630      	mov	r0, r6
    f618:	603b      	str	r3, [r7, #0]
}
    f61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f61e:	bf00      	nop
    f620:	20001f08 	.word	0x20001f08
    f624:	20001f10 	.word	0x20001f10

0000f628 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f628:	b570      	push	{r4, r5, r6, lr}
    f62a:	4606      	mov	r6, r0
    f62c:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f630:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f632:	682b      	ldr	r3, [r5, #0]
    f634:	b221      	sxth	r1, r4
    f636:	3401      	adds	r4, #1
    f638:	4628      	mov	r0, r5
    f63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f63c:	b2a4      	uxth	r4, r4
    f63e:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f640:	2c80      	cmp	r4, #128	; 0x80
    f642:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f646:	d1f4      	bne.n	f632 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f648:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f64c:	2b02      	cmp	r3, #2
    f64e:	d00b      	beq.n	f668 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f650:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f654:	2b00      	cmp	r3, #0
    f656:	d13c      	bne.n	f6d2 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f658:	4a20      	ldr	r2, [pc, #128]	; (f6dc <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f65a:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f65c:	6812      	ldr	r2, [r2, #0]
    f65e:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f662:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f664:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f668:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f66a:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f66c:	2200      	movs	r2, #0
    f66e:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f670:	f04f 34ff 	mov.w	r4, #4294967295
    f674:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f678:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f67c:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f680:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f684:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f688:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f68c:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f690:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f694:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f698:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f69c:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f6a0:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f6a4:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f6a8:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f6ac:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f6b0:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f6b4:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f6b8:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f6bc:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f6c0:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f6c4:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f6c8:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f6cc:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f6d0:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f6d2:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f6d6:	2b00      	cmp	r3, #0
    f6d8:	d1be      	bne.n	f658 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f6da:	e7c5      	b.n	f668 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f6dc:	20001bf8 	.word	0x20001bf8

0000f6e0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f6e0:	3940      	subs	r1, #64	; 0x40
    f6e2:	b28b      	uxth	r3, r1
    f6e4:	2b3f      	cmp	r3, #63	; 0x3f
    f6e6:	d80f      	bhi.n	f708 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f6e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f6ea:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f6ec:	b2c9      	uxtb	r1, r1
    f6ee:	f1c1 0320 	rsb	r3, r1, #32
    f6f2:	fa02 f303 	lsl.w	r3, r2, r3
    f6f6:	40c8      	lsrs	r0, r1
    f6f8:	3920      	subs	r1, #32
    f6fa:	4318      	orrs	r0, r3
    f6fc:	fa22 f101 	lsr.w	r1, r2, r1
    f700:	4308      	orrs	r0, r1
}
    f702:	f000 0001 	and.w	r0, r0, #1
    f706:	4770      	bx	lr
    f708:	2000      	movs	r0, #0
    f70a:	f000 0001 	and.w	r0, r0, #1
    f70e:	4770      	bx	lr

0000f710 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f710:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f712:	2900      	cmp	r1, #0
    f714:	f000 8084 	beq.w	f820 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f718:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f71c:	2b00      	cmp	r3, #0
    f71e:	d07f      	beq.n	f820 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f720:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f724:	2a00      	cmp	r2, #0
    f726:	d17b      	bne.n	f820 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f72c:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f730:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f734:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f736:	f000 80a3 	beq.w	f880 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f73a:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f73e:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f742:	2400      	movs	r4, #0
    f744:	2500      	movs	r5, #0
    f746:	4690      	mov	r8, r2
    f748:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f74c:	4696      	mov	lr, r2
    f74e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f752:	e9cd 4500 	strd	r4, r5, [sp]
    f756:	2201      	movs	r2, #1
    f758:	2300      	movs	r3, #0
    f75a:	4626      	mov	r6, r4
    f75c:	462f      	mov	r7, r5
    f75e:	9106      	str	r1, [sp, #24]
    f760:	e037      	b.n	f7d2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f762:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f766:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f76a:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f76e:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f772:	f108 0501 	add.w	r5, r8, #1
    f776:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f778:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f77a:	ea46 0602 	orr.w	r6, r6, r2
    f77e:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f782:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f786:	db06      	blt.n	f796 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f788:	b12c      	cbz	r4, f796 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f78a:	e9dd 4500 	ldrd	r4, r5, [sp]
    f78e:	4314      	orrs	r4, r2
    f790:	431d      	orrs	r5, r3
    f792:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f796:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f79a:	ea04 0802 	and.w	r8, r4, r2
    f79e:	ea05 0903 	and.w	r9, r5, r3
    f7a2:	ea58 0109 	orrs.w	r1, r8, r9
    f7a6:	d00b      	beq.n	f7c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    f7a8:	ea24 0402 	bic.w	r4, r4, r2
    f7ac:	ea25 0503 	bic.w	r5, r5, r3
    f7b0:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    f7b4:	e9dd 4500 	ldrd	r4, r5, [sp]
    f7b8:	4314      	orrs	r4, r2
    f7ba:	431d      	orrs	r5, r3
    f7bc:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f7c0:	f10e 0e01 	add.w	lr, lr, #1
    f7c4:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    f7c8:	1892      	adds	r2, r2, r2
    f7ca:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f7cc:	45e6      	cmp	lr, ip
    f7ce:	46f0      	mov	r8, lr
    f7d0:	da27      	bge.n	f822 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    f7d2:	ea0a 0402 	and.w	r4, sl, r2
    f7d6:	ea0b 0503 	and.w	r5, fp, r3
    f7da:	ea54 0105 	orrs.w	r1, r4, r5
    f7de:	d0ef      	beq.n	f7c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    f7e0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    f7e4:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    f7e8:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    f7ec:	3c01      	subs	r4, #1
    f7ee:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    f7f2:	2c00      	cmp	r4, #0
    f7f4:	d1e4      	bne.n	f7c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    f7f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f7fa:	4014      	ands	r4, r2
    f7fc:	401d      	ands	r5, r3
    f7fe:	432c      	orrs	r4, r5
    f800:	d1af      	bne.n	f762 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    f802:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f806:	ea04 0802 	and.w	r8, r4, r2
    f80a:	ea05 0903 	and.w	r9, r5, r3
    f80e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    f812:	ea58 0409 	orrs.w	r4, r8, r9
    f816:	f000 8115 	beq.w	fa44 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    f81a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f81e:	e7c3      	b.n	f7a8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    f820:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f822:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    f826:	9906      	ldr	r1, [sp, #24]
    f828:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f82c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    f830:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f834:	4642      	mov	r2, r8
    f836:	464b      	mov	r3, r9
    f838:	4322      	orrs	r2, r4
    f83a:	432b      	orrs	r3, r5
    f83c:	4614      	mov	r4, r2
    f83e:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f840:	4642      	mov	r2, r8
    f842:	464b      	mov	r3, r9
    f844:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    f848:	43f6      	mvns	r6, r6
    f84a:	43ff      	mvns	r7, r7
    f84c:	ea48 0802 	orr.w	r8, r8, r2
    f850:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f854:	ea04 0206 	and.w	r2, r4, r6
    f858:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    f85c:	e9dd 4500 	ldrd	r4, r5, [sp]
    f860:	ea2a 0404 	bic.w	r4, sl, r4
    f864:	ea2b 0505 	bic.w	r5, fp, r5
    f868:	46a2      	mov	sl, r4
    f86a:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f86c:	ea08 0406 	and.w	r4, r8, r6
    f870:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f874:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    f878:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f87c:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    f880:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    f884:	3d01      	subs	r5, #1
    f886:	b2ed      	uxtb	r5, r5
    f888:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    f88c:	b115      	cbz	r5, f894 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    f88e:	b011      	add	sp, #68	; 0x44
    f890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f894:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f896:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    f89a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    f89e:	4608      	mov	r0, r1
    f8a0:	f001 fd9e 	bl	113e0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f8a4:	4629      	mov	r1, r5
    f8a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f8a8:	f001 fc6e 	bl	11188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f8ac:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f8b0:	f10c 0309 	add.w	r3, ip, #9
    f8b4:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    f8b6:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f8ba:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    f8bc:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f8be:	2acc      	cmp	r2, #204	; 0xcc
    f8c0:	f000 814e 	beq.w	fb60 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    f8c4:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    f8c8:	1c5a      	adds	r2, r3, #1
    f8ca:	b292      	uxth	r2, r2
    f8cc:	3b04      	subs	r3, #4
    f8ce:	4616      	mov	r6, r2
    f8d0:	920b      	str	r2, [sp, #44]	; 0x2c
    f8d2:	b29b      	uxth	r3, r3
    f8d4:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    f8d8:	4293      	cmp	r3, r2
    f8da:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    f8de:	f240 81c6 	bls.w	fc6e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    f8e2:	2200      	movs	r2, #0
    f8e4:	2300      	movs	r3, #0
    f8e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f8ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f8ee:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    f8f2:	ea22 0000 	bic.w	r0, r2, r0
    f8f6:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f8fa:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f8fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f902:	4610      	mov	r0, r2
    f904:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f906:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f90a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f90e:	f1bc 0f00 	cmp.w	ip, #0
    f912:	f000 81d3 	beq.w	fcbc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    f916:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f91a:	2200      	movs	r2, #0
    f91c:	2000      	movs	r0, #0
    f91e:	2100      	movs	r1, #0
    f920:	4613      	mov	r3, r2
    f922:	e9cd 0100 	strd	r0, r1, [sp]
    f926:	f04f 0801 	mov.w	r8, #1
    f92a:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f92e:	f04f 0a0c 	mov.w	sl, #12
    f932:	e038      	b.n	f9a6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    f934:	0099      	lsls	r1, r3, #2
    f936:	18c8      	adds	r0, r1, r3
    f938:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f93c:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    f940:	f10b 3bff 	add.w	fp, fp, #4294967295
    f944:	fa1f fb8b 	uxth.w	fp, fp
    f948:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    f94c:	f1bb 0f00 	cmp.w	fp, #0
    f950:	d107      	bne.n	f962 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    f952:	ea26 0608 	bic.w	r6, r6, r8
    f956:	ea27 0709 	bic.w	r7, r7, r9
    f95a:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f95e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    f962:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    f966:	ea06 0608 	and.w	r6, r6, r8
    f96a:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f96e:	4419      	add	r1, r3
        if (changedInputs & mask) {
    f970:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f974:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    f978:	d04e      	beq.n	fa18 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    f97a:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f97e:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    f982:	b93b      	cbnz	r3, f994 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    f984:	e9dd 0100 	ldrd	r0, r1, [sp]
    f988:	ea40 0008 	orr.w	r0, r0, r8
    f98c:	ea41 0109 	orr.w	r1, r1, r9
    f990:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f994:	3201      	adds	r2, #1
    f996:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    f998:	eb18 0808 	adds.w	r8, r8, r8
    f99c:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f9a0:	4596      	cmp	lr, r2
    f9a2:	4613      	mov	r3, r2
    f9a4:	dd59      	ble.n	fa5a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    f9a6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f9aa:	4606      	mov	r6, r0
    f9ac:	460f      	mov	r7, r1
    f9ae:	ea00 0008 	and.w	r0, r0, r8
    f9b2:	ea01 0109 	and.w	r1, r1, r9
    f9b6:	4301      	orrs	r1, r0
    f9b8:	d1bc      	bne.n	f934 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    f9ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f9be:	ea00 0008 	and.w	r0, r0, r8
    f9c2:	ea01 0109 	and.w	r1, r1, r9
    f9c6:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    f9c8:	ea4f 0183 	mov.w	r1, r3, lsl #2
    f9cc:	eb01 0003 	add.w	r0, r1, r3
    f9d0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    f9d4:	d02b      	beq.n	fa2e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    f9d6:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    f9da:	f1bb 0f00 	cmp.w	fp, #0
    f9de:	d0c0      	beq.n	f962 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    f9e0:	f10b 3bff 	add.w	fp, fp, #4294967295
    f9e4:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    f9e8:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    f9ec:	f1bb 0f00 	cmp.w	fp, #0
    f9f0:	d1b7      	bne.n	f962 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    f9f2:	ea46 0608 	orr.w	r6, r6, r8
    f9f6:	ea47 0709 	orr.w	r7, r7, r9
    f9fa:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    f9fe:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fa02:	ea46 0608 	orr.w	r6, r6, r8
    fa06:	ea47 0709 	orr.w	r7, r7, r9
    fa0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    fa0e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    fa12:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    fa16:	e7a4      	b.n	f962 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    fa18:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    fa1c:	2800      	cmp	r0, #0
    fa1e:	d0b9      	beq.n	f994 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    fa20:	3801      	subs	r0, #1
    fa22:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    fa24:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    fa28:	2800      	cmp	r0, #0
    fa2a:	d0ab      	beq.n	f984 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    fa2c:	e7b2      	b.n	f994 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    fa2e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fa32:	ea26 0608 	bic.w	r6, r6, r8
    fa36:	ea27 0709 	bic.w	r7, r7, r9
    fa3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    fa3e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    fa42:	e78e      	b.n	f962 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    fa44:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    fa48:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    fa4c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    fa50:	4314      	orrs	r4, r2
    fa52:	431d      	orrs	r5, r3
    fa54:	e9cd 4504 	strd	r4, r5, [sp, #16]
    fa58:	e6b2      	b.n	f7c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    fa5a:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    fa5e:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    fa62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    fa66:	ea80 000a 	eor.w	r0, r0, sl
    fa6a:	ea81 010b 	eor.w	r1, r1, fp
    fa6e:	4002      	ands	r2, r0
    fa70:	400b      	ands	r3, r1
    fa72:	ea82 080a 	eor.w	r8, r2, sl
    fa76:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    fa7a:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    fa7e:	ea28 000a 	bic.w	r0, r8, sl
    fa82:	ea29 010b 	bic.w	r1, r9, fp
    fa86:	ea40 0602 	orr.w	r6, r0, r2
    fa8a:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    fa8e:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    fa92:	e9cd 8900 	strd	r8, r9, [sp]
    fa96:	ea2a 0808 	bic.w	r8, sl, r8
    fa9a:	ea2b 0909 	bic.w	r9, fp, r9
    fa9e:	ea43 0109 	orr.w	r1, r3, r9
    faa2:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    faa6:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    faaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    faac:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    fab0:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    fab4:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    fab8:	2b00      	cmp	r3, #0
    faba:	f000 8083 	beq.w	fbc4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    fabe:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    fac2:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    fac6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    faca:	ea03 0907 	and.w	r9, r3, r7
    face:	ea29 0101 	bic.w	r1, r9, r1
    fad2:	ea02 0806 	and.w	r8, r2, r6
    fad6:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fad8:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    fadc:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    fade:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    fae2:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    fae4:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    fae6:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    faea:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    faee:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    faf2:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    faf4:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    faf6:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    fafa:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fafe:	fa01 f505 	lsl.w	r5, r1, r5
    fb02:	fa20 f203 	lsr.w	r2, r0, r3
    fb06:	432a      	orrs	r2, r5
    fb08:	f1a3 0520 	sub.w	r5, r3, #32
    fb0c:	fa21 f505 	lsr.w	r5, r1, r5
    fb10:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    fb12:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fb16:	f8d4 500d 	ldr.w	r5, [r4, #13]
    fb1a:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    fb1e:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fb22:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fb26:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    fb28:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fb2c:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    fb2e:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fb32:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fb34:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fb38:	2101      	movs	r1, #1
    fb3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fb3c:	f001 fb24 	bl	11188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    fb40:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fb44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fb46:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    fb48:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fb4c:	2501      	movs	r5, #1
    fb4e:	321b      	adds	r2, #27
    fb50:	4421      	add	r1, r4
    fb52:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    fb56:	b011      	add	sp, #68	; 0x44
    fb58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fb5c:	f001 bbee 	b.w	1133c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    fb60:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    fb64:	f8d4 701f 	ldr.w	r7, [r4, #31]
    fb68:	f8d4 601b 	ldr.w	r6, [r4, #27]
    fb6c:	42bb      	cmp	r3, r7
    fb6e:	bf08      	it	eq
    fb70:	42b2      	cmpeq	r2, r6
    fb72:	f47f aea7 	bne.w	f8c4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fb76:	f8d4 2013 	ldr.w	r2, [r4, #19]
    fb7a:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    fb7e:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fb82:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    fb86:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fb88:	ea6f 0903 	mvn.w	r9, r3
    fb8c:	ea6f 0802 	mvn.w	r8, r2
    fb90:	f1c6 0720 	rsb	r7, r6, #32
    fb94:	fa28 f306 	lsr.w	r3, r8, r6
    fb98:	fa09 f707 	lsl.w	r7, r9, r7
    fb9c:	f1a6 0220 	sub.w	r2, r6, #32
    fba0:	fa29 f202 	lsr.w	r2, r9, r2
    fba4:	433b      	orrs	r3, r7
    fba6:	4313      	orrs	r3, r2
    fba8:	9308      	str	r3, [sp, #32]
    fbaa:	fa29 f306 	lsr.w	r3, r9, r6
    fbae:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    fbb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    fbb4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    fbb8:	4042      	eors	r2, r0
    fbba:	404b      	eors	r3, r1
    fbbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    fbc0:	950b      	str	r5, [sp, #44]	; 0x2c
    fbc2:	e694      	b.n	f8ee <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fbc4:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    fbc8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    fbcc:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fbd0:	4016      	ands	r6, r2
    fbd2:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    fbd4:	ea40 0206 	orr.w	r2, r0, r6
    fbd8:	ea41 0307 	orr.w	r3, r1, r7
    fbdc:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    fbe0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    fbe4:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fbe6:	46b0      	mov	r8, r6
    fbe8:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    fbea:	bf08      	it	eq
    fbec:	42b2      	cmpeq	r2, r6
    fbee:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    fbf2:	f43f af64 	beq.w	fabe <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    fbf6:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    fbfa:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    fbfe:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    fc02:	d053      	beq.n	fcac <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    fc04:	f8df e0c8 	ldr.w	lr, [pc, #200]	; fcd0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    fc08:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fc0c:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    fc10:	433e      	orrs	r6, r7
    fc12:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    fc16:	ea29 0701 	bic.w	r7, r9, r1
    fc1a:	ea28 0600 	bic.w	r6, r8, r0
    fc1e:	ea56 0307 	orrs.w	r3, r6, r7
    fc22:	f43f af4c 	beq.w	fabe <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    fc26:	ea48 0200 	orr.w	r2, r8, r0
    fc2a:	ea49 0301 	orr.w	r3, r9, r1
    fc2e:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fc32:	f1bc 0f00 	cmp.w	ip, #0
    fc36:	f43f af42 	beq.w	fabe <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    fc3a:	4e24      	ldr	r6, [pc, #144]	; (fccc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fc3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    fc3e:	2701      	movs	r7, #1
    fc40:	e005      	b.n	fc4e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fc42:	3501      	adds	r5, #1
    fc44:	b2ed      	uxtb	r5, r5
    fc46:	4565      	cmp	r5, ip
    fc48:	462a      	mov	r2, r5
    fc4a:	f6bf af38 	bge.w	fabe <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    fc4e:	ab10      	add	r3, sp, #64	; 0x40
    fc50:	442b      	add	r3, r5
    fc52:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    fc56:	2b00      	cmp	r3, #0
    fc58:	d0f3      	beq.n	fc42 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    fc5a:	fa07 f202 	lsl.w	r2, r7, r2
    fc5e:	b2d2      	uxtb	r2, r2
    fc60:	2103      	movs	r1, #3
    fc62:	6830      	ldr	r0, [r6, #0]
    fc64:	f001 ff86 	bl	11b74 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    fc68:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    fc6c:	e7e9      	b.n	fc42 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    fc6e:	2101      	movs	r1, #1
    fc70:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fc74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fc76:	f001 fa87 	bl	11188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    fc7a:	4914      	ldr	r1, [pc, #80]	; (fccc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    fc7c:	2300      	movs	r3, #0
    fc7e:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fc80:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    fc82:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fc86:	2102      	movs	r1, #2
    fc88:	2208      	movs	r2, #8
    fc8a:	f001 ff73 	bl	11b74 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc8e:	4b10      	ldr	r3, [pc, #64]	; (fcd0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    fc90:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    fc94:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fc98:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc9c:	43d2      	mvns	r2, r2
    fc9e:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    fca0:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fca2:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fca6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    fcaa:	e5f0      	b.n	f88e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    fcac:	4a08      	ldr	r2, [pc, #32]	; (fcd0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fcae:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    fcb2:	ea23 0307 	bic.w	r3, r3, r7
    fcb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    fcba:	e700      	b.n	fabe <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fcbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    fcc0:	2200      	movs	r2, #0
    fcc2:	2300      	movs	r3, #0
    fcc4:	e9cd 2300 	strd	r2, r3, [sp]
    fcc8:	e6c9      	b.n	fa5e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    fcca:	bf00      	nop
    fccc:	20001f28 	.word	0x20001f28
    fcd0:	200019e8 	.word	0x200019e8

0000fcd4 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fcd4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fcd6:	b1c1      	cbz	r1, fd0a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fcd8:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    fcdc:	b1aa      	cbz	r2, fd0a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fcde:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    fce2:	b192      	cbz	r2, fd0a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fce4:	4a09      	ldr	r2, [pc, #36]	; (fd0c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    fce6:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fce8:	6812      	ldr	r2, [r2, #0]
    fcea:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fcee:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fcf2:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fcf4:	42a2      	cmp	r2, r4
    fcf6:	d907      	bls.n	fd08 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    fcf8:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fcfa:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    fcfe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    fd02:	bc30      	pop	{r4, r5}
    fd04:	f7ff b9c0 	b.w	f088 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    fd08:	bc30      	pop	{r4, r5}
    fd0a:	4770      	bx	lr
    fd0c:	20001bf8 	.word	0x20001bf8

0000fd10 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    fd10:	4a0e      	ldr	r2, [pc, #56]	; (fd4c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    fd12:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    fd14:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    fd18:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fd1c:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    fd20:	43f3      	mvns	r3, r6
    fd22:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    fd24:	2700      	movs	r7, #0
    fd26:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    fd2a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fd2e:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fd32:	bf15      	itete	ne
    fd34:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fd38:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fd3c:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fd3e:	400b      	andeq	r3, r1
    fd40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    fd44:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    fd46:	f7ff bc6f 	b.w	f628 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    fd4a:	bf00      	nop
    fd4c:	200019e8 	.word	0x200019e8

0000fd50 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fd50:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    fd54:	2b02      	cmp	r3, #2
    fd56:	d005      	beq.n	fd64 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    fd58:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    fd5c:	b12b      	cbz	r3, fd6a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    fd5e:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    fd62:	b913      	cbnz	r3, fd6a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    fd64:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    fd68:	4770      	bx	lr
    m_serPort = comInstance;
    fd6a:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    fd6c:	b109      	cbz	r1, fd72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    fd6e:	f7ff b98b 	b.w	f088 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    fd72:	4b04      	ldr	r3, [pc, #16]	; (fd84 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    fd74:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    fd78:	681b      	ldr	r3, [r3, #0]
    fd7a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    fd7e:	4608      	mov	r0, r1
    fd80:	4770      	bx	lr
    fd82:	bf00      	nop
    fd84:	20001bf8 	.word	0x20001bf8

0000fd88 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    fd88:	3940      	subs	r1, #64	; 0x40
    fd8a:	b28b      	uxth	r3, r1
    fd8c:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    fd8e:	bf9d      	ittte	ls
    fd90:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    fd94:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    fd98:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    fd9a:	2000      	movhi	r0, #0
    }
}
    fd9c:	4770      	bx	lr
    fd9e:	bf00      	nop

0000fda0 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    fda0:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    fda2:	f7ff fbb5 	bl	f510 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    fda6:	4b01      	ldr	r3, [pc, #4]	; (fdac <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    fda8:	6018      	str	r0, [r3, #0]
    fdaa:	bd08      	pop	{r3, pc}
    fdac:	20001f0c 	.word	0x20001f0c

0000fdb0 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    fdb0:	7980      	ldrb	r0, [r0, #6]
    fdb2:	4770      	bx	lr

0000fdb4 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    fdb4:	2009      	movs	r0, #9
    fdb6:	4770      	bx	lr

0000fdb8 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    fdb8:	7980      	ldrb	r0, [r0, #6]
    }
    fdba:	f1a0 0004 	sub.w	r0, r0, #4
    fdbe:	fab0 f080 	clz	r0, r0
    fdc2:	0940      	lsrs	r0, r0, #5
    fdc4:	4770      	bx	lr
    fdc6:	bf00      	nop

0000fdc8 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    fdc8:	4770      	bx	lr
    fdca:	bf00      	nop

0000fdcc <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    fdcc:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fdce:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    fdd2:	2201      	movs	r2, #1
    fdd4:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    fdd8:	f1c5 0420 	rsb	r4, r5, #32
    fddc:	fa22 f404 	lsr.w	r4, r2, r4
    fde0:	fa02 f303 	lsl.w	r3, r2, r3
    fde4:	4323      	orrs	r3, r4
    fde6:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fde8:	2602      	movs	r6, #2
    m_filterLength = 3;
    fdea:	4d07      	ldr	r5, [pc, #28]	; (fe08 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    fdec:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    fdee:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fdf0:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fdf2:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    fdf4:	6105      	str	r5, [r0, #16]
    fdf6:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fdf8:	6082      	str	r2, [r0, #8]
    fdfa:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    fdfc:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    fdfe:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    fe00:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    fe02:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    fe04:	bc70      	pop	{r4, r5, r6}
    fe06:	4770      	bx	lr
    fe08:	00010003 	.word	0x00010003

0000fe0c <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    fe0c:	7983      	ldrb	r3, [r0, #6]
    fe0e:	428b      	cmp	r3, r1
    fe10:	d02f      	beq.n	fe72 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    fe12:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    fe14:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    fe18:	d014      	beq.n	fe44 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    fe1a:	2904      	cmp	r1, #4
    fe1c:	d10b      	bne.n	fe36 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    fe1e:	4b16      	ldr	r3, [pc, #88]	; (fe78 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fe20:	681e      	ldr	r6, [r3, #0]
    fe22:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fe26:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    fe2a:	432b      	orrs	r3, r5
    fe2c:	4322      	orrs	r2, r4
    fe2e:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    fe32:	460b      	mov	r3, r1
            m_mode = newMode;
    fe34:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    fe36:	1ac8      	subs	r0, r1, r3
    fe38:	fab0 f080 	clz	r0, r0
    fe3c:	0940      	lsrs	r0, r0, #5
}
    fe3e:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    fe42:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    fe44:	4b0c      	ldr	r3, [pc, #48]	; (fe78 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fe46:	681e      	ldr	r6, [r3, #0]
    fe48:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fe4c:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fe50:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fe54:	43d2      	mvns	r2, r2
    fe56:	43db      	mvns	r3, r3
    fe58:	4014      	ands	r4, r2
    fe5a:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fe5c:	ea02 0208 	and.w	r2, r2, r8
    fe60:	ea03 0309 	and.w	r3, r3, r9
    fe64:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fe68:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    fe6c:	460b      	mov	r3, r1
            m_mode = newMode;
    fe6e:	7181      	strb	r1, [r0, #6]
            break;
    fe70:	e7e1      	b.n	fe36 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    fe72:	2001      	movs	r0, #1
    fe74:	4770      	bx	lr
    fe76:	bf00      	nop
    fe78:	20001f0c 	.word	0x20001f0c

0000fe7c <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    fe7c:	7983      	ldrb	r3, [r0, #6]
    fe7e:	2b02      	cmp	r3, #2
    fe80:	d010      	beq.n	fea4 <_ZN9ClearCore7CcioPin5StateEv+0x28>
    fe82:	2b04      	cmp	r3, #4
    fe84:	d10c      	bne.n	fea0 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    fe86:	4b0b      	ldr	r3, [pc, #44]	; (feb4 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fe88:	681b      	ldr	r3, [r3, #0]
    fe8a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fe8e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fe92:	4002      	ands	r2, r0
    fe94:	400b      	ands	r3, r1
    fe96:	4313      	orrs	r3, r2
    fe98:	bf14      	ite	ne
    fe9a:	2001      	movne	r0, #1
    fe9c:	2000      	moveq	r0, #0
            break;
    fe9e:	4770      	bx	lr
    switch (m_mode) {
    fea0:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    fea2:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fea4:	4b03      	ldr	r3, [pc, #12]	; (feb4 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fea6:	681b      	ldr	r3, [r3, #0]
    fea8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    feac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    feb0:	e7ef      	b.n	fe92 <_ZN9ClearCore7CcioPin5StateEv+0x16>
    feb2:	bf00      	nop
    feb4:	20001f0c 	.word	0x20001f0c

0000feb8 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    feb8:	4b06      	ldr	r3, [pc, #24]	; (fed4 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    feba:	681b      	ldr	r3, [r3, #0]
    febc:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fec0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    fec4:	4002      	ands	r2, r0
    fec6:	400b      	ands	r3, r1
    fec8:	4313      	orrs	r3, r2
}
    feca:	bf14      	ite	ne
    fecc:	2001      	movne	r0, #1
    fece:	2000      	moveq	r0, #0
    fed0:	4770      	bx	lr
    fed2:	bf00      	nop
    fed4:	20001f0c 	.word	0x20001f0c

0000fed8 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    fed8:	7983      	ldrb	r3, [r0, #6]
    feda:	2b04      	cmp	r3, #4
    fedc:	d11c      	bne.n	ff18 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    fede:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    fee0:	4b0e      	ldr	r3, [pc, #56]	; (ff1c <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    fee2:	b969      	cbnz	r1, ff00 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fee4:	6819      	ldr	r1, [r3, #0]
    fee6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    feea:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    feee:	ea24 0202 	bic.w	r2, r4, r2
    fef2:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    fef6:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fef8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fefc:	bc30      	pop	{r4, r5}
    fefe:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    ff00:	6819      	ldr	r1, [r3, #0]
    ff02:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    ff06:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    ff0a:	4322      	orrs	r2, r4
    ff0c:	432b      	orrs	r3, r5
    ff0e:	2001      	movs	r0, #1
    ff10:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    ff14:	bc30      	pop	{r4, r5}
    ff16:	4770      	bx	lr
    bool success = false;
    ff18:	2000      	movs	r0, #0
    ff1a:	4770      	bx	lr
    ff1c:	20001f0c 	.word	0x20001f0c

0000ff20 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    ff20:	b5d0      	push	{r4, r6, r7, lr}
    ff22:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    ff24:	f7fe fca6 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
    ff28:	4b08      	ldr	r3, [pc, #32]	; (ff4c <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    ff2a:	4909      	ldr	r1, [pc, #36]	; (ff50 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    ff2c:	6023      	str	r3, [r4, #0]
    ff2e:	2600      	movs	r6, #0
    ff30:	2300      	movs	r3, #0
    ff32:	2700      	movs	r7, #0
    ff34:	220c      	movs	r2, #12
    ff36:	e9c4 6702 	strd	r6, r7, [r4, #8]
    ff3a:	6121      	str	r1, [r4, #16]
    ff3c:	6162      	str	r2, [r4, #20]
    ff3e:	61a3      	str	r3, [r4, #24]
    ff40:	61e3      	str	r3, [r4, #28]
    ff42:	6223      	str	r3, [r4, #32]
    ff44:	6263      	str	r3, [r4, #36]	; 0x24
    ff46:	4620      	mov	r0, r4
    ff48:	bdd0      	pop	{r4, r6, r7, pc}
    ff4a:	bf00      	nop
    ff4c:	00023858 	.word	0x00023858
    ff50:	00010003 	.word	0x00010003

0000ff54 <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    ff54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    ff56:	4e14      	ldr	r6, [pc, #80]	; (ffa8 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    ff58:	6834      	ldr	r4, [r6, #0]
    ff5a:	f014 0401 	ands.w	r4, r4, #1
    ff5e:	d002      	beq.n	ff66 <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    ff60:	4b12      	ldr	r3, [pc, #72]	; (ffac <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    ff62:	6818      	ldr	r0, [r3, #0]
    ff64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff66:	2080      	movs	r0, #128	; 0x80
    ff68:	f003 fbea 	bl	13740 <_Znwj>
    ff6c:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    ff6e:	2701      	movs	r7, #1
    ff70:	2240      	movs	r2, #64	; 0x40
    ff72:	602c      	str	r4, [r5, #0]
    ff74:	606c      	str	r4, [r5, #4]
    ff76:	60ac      	str	r4, [r5, #8]
    ff78:	60ec      	str	r4, [r5, #12]
    ff7a:	612c      	str	r4, [r5, #16]
    ff7c:	616c      	str	r4, [r5, #20]
    ff7e:	4621      	mov	r1, r4
    ff80:	61ac      	str	r4, [r5, #24]
    ff82:	61ec      	str	r4, [r5, #28]
    ff84:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    ff86:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    ff88:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    ff8a:	62ec      	str	r4, [r5, #44]	; 0x2c
    ff8c:	632c      	str	r4, [r5, #48]	; 0x30
    ff8e:	636c      	str	r4, [r5, #52]	; 0x34
    ff90:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    ff94:	303c      	adds	r0, #60	; 0x3c
    ff96:	f00e fcb1 	bl	1e8fc <memset>
    static InputManager *instance = new InputManager();
    ff9a:	4b04      	ldr	r3, [pc, #16]	; (ffac <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    ff9c:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    ffa0:	6037      	str	r7, [r6, #0]
    ffa2:	601d      	str	r5, [r3, #0]
    ffa4:	4628      	mov	r0, r5
}
    ffa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ffa8:	20001f14 	.word	0x20001f14
    ffac:	20001f1c 	.word	0x20001f1c

0000ffb0 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    ffb0:	4902      	ldr	r1, [pc, #8]	; (ffbc <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    ffb2:	4a03      	ldr	r2, [pc, #12]	; (ffc0 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    ffb4:	4b03      	ldr	r3, [pc, #12]	; (ffc4 <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    ffb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ffba:	4770      	bx	lr
    ffbc:	41008020 	.word	0x41008020
    ffc0:	410080a0 	.word	0x410080a0
    ffc4:	41008120 	.word	0x41008120

0000ffc8 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
    ffc8:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    ffca:	b2cc      	uxtb	r4, r1
    ffcc:	2c0f      	cmp	r4, #15
    ffce:	d82e      	bhi.n	1002e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
    ffd0:	b1b2      	cbz	r2, 10000 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    ffd2:	bb6b      	cbnz	r3, 10030 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    ffd4:	2301      	movs	r3, #1
    ffd6:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    ffda:	f100 0334 	add.w	r3, r0, #52	; 0x34
    ffde:	f3bf 8f5b 	dmb	ish
    ffe2:	e853 2f00 	ldrex	r2, [r3]
    ffe6:	430a      	orrs	r2, r1
    ffe8:	e843 2400 	strex	r4, r2, [r3]
    ffec:	2c00      	cmp	r4, #0
    ffee:	d1f8      	bne.n	ffe2 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    fff0:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fff4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fff8:	b1cb      	cbz	r3, 1002e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    fffa:	4b10      	ldr	r3, [pc, #64]	; (1003c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fffc:	6119      	str	r1, [r3, #16]
    fffe:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
   10000:	2301      	movs	r3, #1
   10002:	fa03 f101 	lsl.w	r1, r3, r1
   10006:	43ca      	mvns	r2, r1
   10008:	f100 0334 	add.w	r3, r0, #52	; 0x34
   1000c:	f3bf 8f5b 	dmb	ish
   10010:	e853 4f00 	ldrex	r4, [r3]
   10014:	4014      	ands	r4, r2
   10016:	e843 4e00 	strex	lr, r4, [r3]
   1001a:	f1be 0f00 	cmp.w	lr, #0
   1001e:	d1f7      	bne.n	10010 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
   10020:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
   10024:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   10028:	b10b      	cbz	r3, 1002e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
   1002a:	4b04      	ldr	r3, [pc, #16]	; (1003c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
   1002c:	60d9      	str	r1, [r3, #12]
   1002e:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
   10030:	2201      	movs	r2, #1
   10032:	4b02      	ldr	r3, [pc, #8]	; (1003c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
   10034:	fa02 f101 	lsl.w	r1, r2, r1
   10038:	6159      	str	r1, [r3, #20]
   1003a:	e7ce      	b.n	ffda <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
   1003c:	40002800 	.word	0x40002800

00010040 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
   10040:	290f      	cmp	r1, #15
   10042:	dc14      	bgt.n	1006e <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
   10044:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   10048:	40cb      	lsrs	r3, r1
   1004a:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
   1004e:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
   10052:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
   10054:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
   10058:	d10a      	bne.n	10070 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
   1005a:	4a0f      	ldr	r2, [pc, #60]	; (10098 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
   1005c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
   10060:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
   10062:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
   10064:	b113      	cbz	r3, 1006c <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
   10066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
   1006a:	4718      	bx	r3
   1006c:	bd10      	pop	{r4, pc}
   1006e:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
   10070:	43dc      	mvns	r4, r3
   10072:	f100 0234 	add.w	r2, r0, #52	; 0x34
   10076:	f3bf 8f5b 	dmb	ish
   1007a:	e852 ef00 	ldrex	lr, [r2]
   1007e:	ea0e 0e04 	and.w	lr, lr, r4
   10082:	e842 ec00 	strex	ip, lr, [r2]
   10086:	f1bc 0f00 	cmp.w	ip, #0
   1008a:	d1f6      	bne.n	1007a <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
   1008c:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
   10090:	4a01      	ldr	r2, [pc, #4]	; (10098 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
   10092:	60d3      	str	r3, [r2, #12]
   10094:	e7e1      	b.n	1005a <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
   10096:	bf00      	nop
   10098:	40002800 	.word	0x40002800

0001009c <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   1009c:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
   1009e:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   100a0:	681b      	ldr	r3, [r3, #0]
   100a2:	60c3      	str	r3, [r0, #12]
   100a4:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   100a6:	404b      	eors	r3, r1
   100a8:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   100aa:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
   100ac:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   100ae:	6881      	ldr	r1, [r0, #8]
   100b0:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   100b2:	4053      	eors	r3, r2
   100b4:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   100b6:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
   100b8:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   100ba:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   100bc:	4053      	eors	r3, r2
   100be:	6203      	str	r3, [r0, #32]
   100c0:	4770      	bx	lr
   100c2:	bf00      	nop

000100c4 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
   100c4:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
   100c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
   100c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
   100ca:	f3bf 8f5b 	dmb	ish
   100ce:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
   100d2:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
   100d6:	e852 1f00 	ldrex	r1, [r2]
   100da:	4319      	orrs	r1, r3
   100dc:	e842 1e00 	strex	lr, r1, [r2]
   100e0:	f1be 0f00 	cmp.w	lr, #0
   100e4:	d1f7      	bne.n	100d6 <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
   100e6:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
   100ea:	6a41      	ldr	r1, [r0, #36]	; 0x24
   100ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
   100ee:	f3bf 8f5b 	dmb	ish
   100f2:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
   100f6:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
   100fa:	e852 1f00 	ldrex	r1, [r2]
   100fe:	4319      	orrs	r1, r3
   10100:	e842 1e00 	strex	lr, r1, [r2]
   10104:	f1be 0f00 	cmp.w	lr, #0
   10108:	d1f7      	bne.n	100fa <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
   1010a:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
   1010e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10110:	6283      	str	r3, [r0, #40]	; 0x28
   10112:	f85d fb04 	ldr.w	pc, [sp], #4
   10116:	bf00      	nop

00010118 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
   10118:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
   1011a:	f7ff ff1b 	bl	ff54 <_ZN9ClearCore12InputManager8InstanceEv>
   1011e:	4b01      	ldr	r3, [pc, #4]	; (10124 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
   10120:	6018      	str	r0, [r3, #0]
   10122:	bd08      	pop	{r3, pc}
   10124:	20001f18 	.word	0x20001f18

00010128 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   10128:	b530      	push	{r4, r5, lr}
   1012a:	b083      	sub	sp, #12
   1012c:	9d06      	ldr	r5, [sp, #24]
   1012e:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
   10132:	9500      	str	r5, [sp, #0]
   10134:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   10136:	4604      	mov	r4, r0
      m_errorCode(0) {
   10138:	2500      	movs	r5, #0
   1013a:	f000 ffbb 	bl	110b4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   1013e:	4b09      	ldr	r3, [pc, #36]	; (10164 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
   10140:	6023      	str	r3, [r4, #0]
   10142:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
   10146:	4620      	mov	r0, r4
   10148:	2101      	movs	r1, #1
   1014a:	f001 f811 	bl	11170 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
   1014e:	462a      	mov	r2, r5
   10150:	4629      	mov	r1, r5
   10152:	4620      	mov	r0, r4
   10154:	f001 f852 	bl	111fc <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
   10158:	4620      	mov	r0, r4
   1015a:	f000 ff9f 	bl	1109c <_ZN9ClearCore10SerialBase8PortOpenEv>
}
   1015e:	4620      	mov	r0, r4
   10160:	b003      	add	sp, #12
   10162:	bd30      	pop	{r4, r5, pc}
   10164:	0002319c 	.word	0x0002319c

00010168 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
   10168:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   1016c:	4770      	bx	lr
   1016e:	bf00      	nop

00010170 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
   10170:	2300      	movs	r3, #0
    m_outTail = 0;
   10172:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10176:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   1017a:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
   1017e:	4770      	bx	lr

00010180 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10180:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
   10182:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10184:	2104      	movs	r1, #4
    m_inTail = 0;
   10186:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
   1018a:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
   1018c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10190:	7591      	strb	r1, [r2, #22]
   10192:	4770      	bx	lr

00010194 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
   10194:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
   10198:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1019c:	4291      	cmp	r1, r2
   1019e:	d012      	beq.n	101c6 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
   101a0:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
   101a2:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
   101a6:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   101aa:	6904      	ldr	r4, [r0, #16]
   101ac:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   101ae:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
   101b0:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   101b2:	2504      	movs	r5, #4
   101b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
   101b8:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
   101bc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   101c0:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
   101c2:	bc30      	pop	{r4, r5}
   101c4:	4770      	bx	lr
        return SerialBase::EOB;
   101c6:	f04f 30ff 	mov.w	r0, #4294967295
   101ca:	4770      	bx	lr

000101cc <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
   101cc:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   101d0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   101d4:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
   101d6:	bf1d      	ittte	ne
   101d8:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
   101dc:	3318      	addne	r3, #24
   101de:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
   101e2:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
   101e6:	4770      	bx	lr

000101e8 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
   101e8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   101ec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
   101f0:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
   101f2:	bf48      	it	mi
   101f4:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
   101f6:	4770      	bx	lr

000101f8 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
   101f8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   101fc:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
   10200:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
   10202:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
   10204:	bf48      	it	mi
   10206:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
   10208:	4770      	bx	lr
   1020a:	bf00      	nop

0001020c <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
   1020c:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
   1020e:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10212:	b1b8      	cbz	r0, 10244 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
   10214:	79d3      	ldrb	r3, [r2, #7]
   10216:	2b01      	cmp	r3, #1
   10218:	d015      	beq.n	10246 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
   1021a:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
   1021c:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
   10220:	3401      	adds	r4, #1
   10222:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
   10226:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   1022a:	429c      	cmp	r4, r3
   1022c:	d0fb      	beq.n	10226 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
   1022e:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10232:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
   10234:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10236:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
   10238:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
   1023c:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10240:	75ae      	strb	r6, [r5, #22]
}
   10242:	bc70      	pop	{r4, r5, r6}
   10244:	4770      	bx	lr
        return false;
   10246:	2000      	movs	r0, #0
   10248:	4770      	bx	lr
   1024a:	bf00      	nop

0001024c <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
   1024c:	79c3      	ldrb	r3, [r0, #7]
   1024e:	b113      	cbz	r3, 10256 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
   10250:	2b01      	cmp	r3, #1
   10252:	d00e      	beq.n	10272 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
   10254:	4770      	bx	lr
        while (m_outHead != m_outTail) {
   10256:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   1025a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1025e:	429a      	cmp	r2, r3
   10260:	d1f9      	bne.n	10256 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10262:	6902      	ldr	r2, [r0, #16]
   10264:	7e13      	ldrb	r3, [r2, #24]
   10266:	07d8      	lsls	r0, r3, #31
   10268:	d4f4      	bmi.n	10254 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   1026a:	7e13      	ldrb	r3, [r2, #24]
   1026c:	0799      	lsls	r1, r3, #30
   1026e:	d5fc      	bpl.n	1026a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
   10270:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10272:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   10276:	2b07      	cmp	r3, #7
   10278:	d0ec      	beq.n	10254 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
   1027a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1027e:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
   10280:	b510      	push	{r4, lr}
   10282:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10284:	d005      	beq.n	10292 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
   10286:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1028a:	b113      	cbz	r3, 10292 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
   1028c:	79e3      	ldrb	r3, [r4, #7]
   1028e:	2b01      	cmp	r3, #1
   10290:	d000      	beq.n	10294 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
   10292:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10294:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10298:	f7fe feda 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1029c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1029e:	079b      	lsls	r3, r3, #30
   102a0:	d4f1      	bmi.n	10286 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
   102a2:	e7f6      	b.n	10292 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

000102a4 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   102a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102a8:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
   102aa:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102ac:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   102ae:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102b0:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102b4:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102b6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   102ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   102be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102c2:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102c4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   102c8:	f36f 0100 	bfc	r1, #0, #1
   102cc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   102d0:	6813      	ldr	r3, [r2, #0]
   102d2:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   102d4:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102d6:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   102da:	d503      	bpl.n	102e4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   102dc:	6813      	ldr	r3, [r2, #0]
   102de:	f36f 0341 	bfc	r3, #1, #1
   102e2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   102e4:	69d3      	ldr	r3, [r2, #28]
   102e6:	f013 0302 	ands.w	r3, r3, #2
   102ea:	d1fb      	bne.n	102e4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
   102ec:	6822      	ldr	r2, [r4, #0]
   102ee:	483a      	ldr	r0, [pc, #232]	; (103d8 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
   102f0:	6811      	ldr	r1, [r2, #0]
   102f2:	4281      	cmp	r1, r0
   102f4:	d165      	bne.n	103c2 <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
   102f6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   102fa:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   102fe:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10302:	6853      	ldr	r3, [r2, #4]
   10304:	4a35      	ldr	r2, [pc, #212]	; (103dc <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   10306:	4293      	cmp	r3, r2
   10308:	d162      	bne.n	103d0 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1030a:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   1030c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1030e:	2204      	movs	r2, #4
    m_inTail = 0;
   10310:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10314:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10316:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1031a:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   1031c:	79e0      	ldrb	r0, [r4, #7]
   1031e:	2801      	cmp	r0, #1
   10320:	d124      	bne.n	1036c <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10322:	4b2f      	ldr	r3, [pc, #188]	; (103e0 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
   10324:	443b      	add	r3, r7
   10326:	fbb3 f3f7 	udiv	r3, r3, r7
   1032a:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
   1032c:	2bff      	cmp	r3, #255	; 0xff
   1032e:	bf92      	itee	ls
   10330:	b2db      	uxtbls	r3, r3
   10332:	23ff      	movhi	r3, #255	; 0xff
                success = false;
   10334:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10336:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10338:	b1b6      	cbz	r6, 10368 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1033a:	682b      	ldr	r3, [r5, #0]
   1033c:	f043 0302 	orr.w	r3, r3, #2
   10340:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10342:	69eb      	ldr	r3, [r5, #28]
   10344:	079b      	lsls	r3, r3, #30
   10346:	d4fc      	bmi.n	10342 <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10348:	6a22      	ldr	r2, [r4, #32]
   1034a:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1034e:	7893      	ldrb	r3, [r2, #2]
   10350:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10354:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10358:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1035c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10360:	f042 0201 	orr.w	r2, r2, #1
   10364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   10368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   1036c:	4638      	mov	r0, r7
   1036e:	f00b fd97 	bl	1bea0 <__aeabi_ui2d>
   10372:	2200      	movs	r2, #0
   10374:	4b1b      	ldr	r3, [pc, #108]	; (103e4 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   10376:	f00b fe09 	bl	1bf8c <__aeabi_dmul>
   1037a:	4b1b      	ldr	r3, [pc, #108]	; (103e8 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   1037c:	4680      	mov	r8, r0
   1037e:	6818      	ldr	r0, [r3, #0]
   10380:	4689      	mov	r9, r1
   10382:	f00b fd8d 	bl	1bea0 <__aeabi_ui2d>
   10386:	4602      	mov	r2, r0
   10388:	460b      	mov	r3, r1
   1038a:	4640      	mov	r0, r8
   1038c:	4649      	mov	r1, r9
   1038e:	f00b ff27 	bl	1c1e0 <__aeabi_ddiv>
   10392:	4602      	mov	r2, r0
   10394:	460b      	mov	r3, r1
   10396:	2000      	movs	r0, #0
   10398:	4914      	ldr	r1, [pc, #80]	; (103ec <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   1039a:	f00b fc43 	bl	1bc24 <__aeabi_dsub>
   1039e:	2200      	movs	r2, #0
   103a0:	4b13      	ldr	r3, [pc, #76]	; (103f0 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   103a2:	f00b fdf3 	bl	1bf8c <__aeabi_dmul>
   103a6:	f00c f8d3 	bl	1c550 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   103aa:	f00b fd9b 	bl	1bee4 <__aeabi_f2d>
   103ae:	2200      	movs	r2, #0
   103b0:	4b10      	ldr	r3, [pc, #64]	; (103f4 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   103b2:	f00b fc39 	bl	1bc28 <__adddf3>
   103b6:	f00c f8ab 	bl	1c510 <__aeabi_d2uiz>
   103ba:	b280      	uxth	r0, r0
   103bc:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   103be:	2001      	movs	r0, #1
            break;
   103c0:	e7ba      	b.n	10338 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   103c2:	4620      	mov	r0, r4
   103c4:	4788      	blx	r1
   103c6:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   103c8:	6853      	ldr	r3, [r2, #4]
   103ca:	4a04      	ldr	r2, [pc, #16]	; (103dc <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   103cc:	4293      	cmp	r3, r2
   103ce:	d09c      	beq.n	1030a <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   103d0:	4620      	mov	r0, r4
   103d2:	4798      	blx	r3
   103d4:	6925      	ldr	r5, [r4, #16]
   103d6:	e7a1      	b.n	1031c <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   103d8:	00010171 	.word	0x00010171
   103dc:	00010181 	.word	0x00010181
   103e0:	004c4b3f 	.word	0x004c4b3f
   103e4:	40300000 	.word	0x40300000
   103e8:	200000f0 	.word	0x200000f0
   103ec:	3ff00000 	.word	0x3ff00000
   103f0:	40f00000 	.word	0x40f00000
   103f4:	3fe00000 	.word	0x3fe00000

000103f8 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   103f8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   103fc:	b903      	cbnz	r3, 10400 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   103fe:	4770      	bx	lr
void SerialBase::PortClose() {
   10400:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   10402:	6805      	ldr	r5, [r0, #0]
   10404:	4a3e      	ldr	r2, [pc, #248]	; (10500 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   10406:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   10408:	4293      	cmp	r3, r2
   1040a:	4604      	mov	r4, r0
   1040c:	d157      	bne.n	104be <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   1040e:	79c3      	ldrb	r3, [r0, #7]
   10410:	2b00      	cmp	r3, #0
   10412:	d03f      	beq.n	10494 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   10414:	2b01      	cmp	r3, #1
   10416:	d056      	beq.n	104c6 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   10418:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1041a:	69a0      	ldr	r0, [r4, #24]
   1041c:	4939      	ldr	r1, [pc, #228]	; (10504 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   1041e:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10422:	7886      	ldrb	r6, [r0, #2]
   10424:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10428:	2001      	movs	r0, #1
   1042a:	40b0      	lsls	r0, r6
   1042c:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1042e:	6a20      	ldr	r0, [r4, #32]
   10430:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10434:	7880      	ldrb	r0, [r0, #2]
   10436:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   1043a:	4403      	add	r3, r0
   1043c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10440:	f36f 0100 	bfc	r1, #0, #1
   10444:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10448:	6813      	ldr	r3, [r2, #0]
   1044a:	079b      	lsls	r3, r3, #30
   1044c:	d503      	bpl.n	10456 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1044e:	6813      	ldr	r3, [r2, #0]
   10450:	f36f 0341 	bfc	r3, #1, #1
   10454:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10456:	69d3      	ldr	r3, [r2, #28]
   10458:	f013 0302 	ands.w	r3, r3, #2
   1045c:	d1fb      	bne.n	10456 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   1045e:	682a      	ldr	r2, [r5, #0]
   10460:	4929      	ldr	r1, [pc, #164]	; (10508 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   10462:	428a      	cmp	r2, r1
   10464:	d124      	bne.n	104b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   10466:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1046a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1046e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10472:	686b      	ldr	r3, [r5, #4]
   10474:	4a25      	ldr	r2, [pc, #148]	; (1050c <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   10476:	4293      	cmp	r3, r2
   10478:	d11e      	bne.n	104b8 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1047a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1047c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1047e:	2104      	movs	r1, #4
    m_inTail = 0;
   10480:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10484:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10486:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1048a:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   1048c:	2300      	movs	r3, #0
   1048e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   10492:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   10494:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10498:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1049c:	429a      	cmp	r2, r3
   1049e:	d1f9      	bne.n	10494 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   104a0:	6922      	ldr	r2, [r4, #16]
   104a2:	7e13      	ldrb	r3, [r2, #24]
   104a4:	07d8      	lsls	r0, r3, #31
   104a6:	d4b8      	bmi.n	1041a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   104a8:	7e13      	ldrb	r3, [r2, #24]
   104aa:	0799      	lsls	r1, r3, #30
   104ac:	d5fc      	bpl.n	104a8 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   104ae:	e7b4      	b.n	1041a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   104b0:	4620      	mov	r0, r4
   104b2:	4790      	blx	r2
   104b4:	6825      	ldr	r5, [r4, #0]
   104b6:	e7dc      	b.n	10472 <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   104b8:	4620      	mov	r0, r4
   104ba:	4798      	blx	r3
   104bc:	e7e6      	b.n	1048c <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   104be:	4798      	blx	r3
   104c0:	6922      	ldr	r2, [r4, #16]
   104c2:	6825      	ldr	r5, [r4, #0]
   104c4:	e7a9      	b.n	1041a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   104c6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   104ca:	2807      	cmp	r0, #7
   104cc:	d0a4      	beq.n	10418 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   104ce:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   104d2:	2b07      	cmp	r3, #7
   104d4:	d0a0      	beq.n	10418 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   104d6:	f7fe fdbb 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   104da:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   104dc:	079a      	lsls	r2, r3, #30
   104de:	d5ef      	bpl.n	104c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   104e0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   104e4:	2b00      	cmp	r3, #0
   104e6:	d0eb      	beq.n	104c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   104e8:	79e3      	ldrb	r3, [r4, #7]
   104ea:	2b01      	cmp	r3, #1
   104ec:	d1e8      	bne.n	104c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   104ee:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   104f2:	f7fe fdad 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   104f6:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   104f8:	079a      	lsls	r2, r3, #30
   104fa:	d4f1      	bmi.n	104e0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   104fc:	e7e0      	b.n	104c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   104fe:	bf00      	nop
   10500:	0001024d 	.word	0x0001024d
   10504:	41008000 	.word	0x41008000
   10508:	00010171 	.word	0x00010171
   1050c:	00010181 	.word	0x00010181

00010510 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   10510:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   10512:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   10514:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   10516:	2b01      	cmp	r3, #1
   10518:	d101      	bne.n	1051e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   1051a:	2000      	movs	r0, #0
   1051c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1051e:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10520:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10522:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10526:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10528:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1052a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1052e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10532:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10536:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1053a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1053e:	f36f 0100 	bfc	r1, #0, #1
   10542:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10546:	6813      	ldr	r3, [r2, #0]
   10548:	0799      	lsls	r1, r3, #30
   1054a:	d503      	bpl.n	10554 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1054c:	6813      	ldr	r3, [r2, #0]
   1054e:	f36f 0341 	bfc	r3, #1, #1
   10552:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10554:	69d3      	ldr	r3, [r2, #28]
   10556:	f013 0302 	ands.w	r3, r3, #2
   1055a:	d1fb      	bne.n	10554 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   1055c:	6802      	ldr	r2, [r0, #0]
   1055e:	4604      	mov	r4, r0
   10560:	6811      	ldr	r1, [r2, #0]
   10562:	4825      	ldr	r0, [pc, #148]	; (105f8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   10564:	4281      	cmp	r1, r0
   10566:	d142      	bne.n	105ee <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10568:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1056c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10570:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10574:	6853      	ldr	r3, [r2, #4]
   10576:	4a21      	ldr	r2, [pc, #132]	; (105fc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10578:	4293      	cmp	r3, r2
   1057a:	d134      	bne.n	105e6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1057c:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1057e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10580:	2104      	movs	r1, #4
    m_inTail = 0;
   10582:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10586:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10588:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1058c:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   1058e:	7923      	ldrb	r3, [r4, #4]
   10590:	2b02      	cmp	r3, #2
   10592:	d023      	beq.n	105dc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   10594:	6811      	ldr	r1, [r2, #0]
   10596:	2001      	movs	r0, #1
   10598:	f360 611b 	bfi	r1, r0, #24, #4
   1059c:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   1059e:	6851      	ldr	r1, [r2, #4]
   105a0:	f363 314d 	bfi	r1, r3, #13, #1
   105a4:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   105a6:	b1bd      	cbz	r5, 105d8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   105a8:	6813      	ldr	r3, [r2, #0]
   105aa:	f043 0302 	orr.w	r3, r3, #2
   105ae:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   105b0:	69d3      	ldr	r3, [r2, #28]
   105b2:	079b      	lsls	r3, r3, #30
   105b4:	d4fc      	bmi.n	105b0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105b6:	6a22      	ldr	r2, [r4, #32]
   105b8:	f992 1001 	ldrsb.w	r1, [r2, #1]
   105bc:	7893      	ldrb	r3, [r2, #2]
   105be:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   105c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   105c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   105ca:	2001      	movs	r0, #1
   105cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   105d0:	4302      	orrs	r2, r0
   105d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   105d6:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   105d8:	2001      	movs	r0, #1
}
   105da:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   105dc:	6813      	ldr	r3, [r2, #0]
   105de:	f36f 631b 	bfc	r3, #24, #4
   105e2:	6013      	str	r3, [r2, #0]
   105e4:	e7df      	b.n	105a6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   105e6:	4620      	mov	r0, r4
   105e8:	4798      	blx	r3
   105ea:	6922      	ldr	r2, [r4, #16]
   105ec:	e7cf      	b.n	1058e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   105ee:	4620      	mov	r0, r4
   105f0:	4788      	blx	r1
   105f2:	6822      	ldr	r2, [r4, #0]
   105f4:	e7be      	b.n	10574 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   105f6:	bf00      	nop
   105f8:	00010171 	.word	0x00010171
   105fc:	00010181 	.word	0x00010181

00010600 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   10600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   10602:	1f4b      	subs	r3, r1, #5
   10604:	2b04      	cmp	r3, #4
   10606:	d85d      	bhi.n	106c4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10608:	79c3      	ldrb	r3, [r0, #7]
   1060a:	2b01      	cmp	r3, #1
   1060c:	d056      	beq.n	106bc <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1060e:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   10610:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10612:	f992 4001 	ldrsb.w	r4, [r2, #1]
   10616:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10618:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1061a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1061e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10622:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10626:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10628:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   1062c:	f36f 0400 	bfc	r4, #0, #1
   10630:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10634:	6813      	ldr	r3, [r2, #0]
   10636:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10638:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1063c:	d503      	bpl.n	10646 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1063e:	6813      	ldr	r3, [r2, #0]
   10640:	f36f 0341 	bfc	r3, #1, #1
   10644:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10646:	69d3      	ldr	r3, [r2, #28]
   10648:	f013 0302 	ands.w	r3, r3, #2
   1064c:	d1fb      	bne.n	10646 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   1064e:	6802      	ldr	r2, [r0, #0]
   10650:	460f      	mov	r7, r1
   10652:	6816      	ldr	r6, [r2, #0]
   10654:	4921      	ldr	r1, [pc, #132]	; (106dc <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   10656:	428e      	cmp	r6, r1
   10658:	4604      	mov	r4, r0
   1065a:	d13b      	bne.n	106d4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   1065c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10660:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10664:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10668:	6853      	ldr	r3, [r2, #4]
   1066a:	4a1d      	ldr	r2, [pc, #116]	; (106e0 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   1066c:	4293      	cmp	r3, r2
   1066e:	d12d      	bne.n	106cc <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10670:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10672:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10674:	2104      	movs	r1, #4
    m_inTail = 0;
   10676:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1067a:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   1067c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10680:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   10682:	6853      	ldr	r3, [r2, #4]
   10684:	f367 0302 	bfi	r3, r7, #0, #3
   10688:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   1068a:	b1ed      	cbz	r5, 106c8 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1068c:	6813      	ldr	r3, [r2, #0]
   1068e:	f043 0302 	orr.w	r3, r3, #2
   10692:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10694:	69d3      	ldr	r3, [r2, #28]
   10696:	079b      	lsls	r3, r3, #30
   10698:	d4fc      	bmi.n	10694 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1069a:	6a22      	ldr	r2, [r4, #32]
   1069c:	f992 1001 	ldrsb.w	r1, [r2, #1]
   106a0:	7893      	ldrb	r3, [r2, #2]
   106a2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   106a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   106aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   106ae:	2001      	movs	r0, #1
   106b0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   106b4:	4302      	orrs	r2, r0
   106b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   106ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   106bc:	f1a1 0308 	sub.w	r3, r1, #8
   106c0:	2b01      	cmp	r3, #1
   106c2:	d9a4      	bls.n	1060e <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   106c4:	2000      	movs	r0, #0
   106c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   106c8:	2001      	movs	r0, #1
}
   106ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   106cc:	4620      	mov	r0, r4
   106ce:	4798      	blx	r3
   106d0:	6922      	ldr	r2, [r4, #16]
   106d2:	e7d6      	b.n	10682 <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   106d4:	47b0      	blx	r6
   106d6:	6822      	ldr	r2, [r4, #0]
   106d8:	e7c6      	b.n	10668 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   106da:	bf00      	nop
   106dc:	00010171 	.word	0x00010171
   106e0:	00010181 	.word	0x00010181

000106e4 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   106e6:	1e4c      	subs	r4, r1, #1
   106e8:	b2e4      	uxtb	r4, r4
   106ea:	2c01      	cmp	r4, #1
   106ec:	d901      	bls.n	106f2 <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   106ee:	2000      	movs	r0, #0
}
   106f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   106f2:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   106f4:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   106f6:	b10d      	cbz	r5, 106fc <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   106f8:	2001      	movs	r0, #1
   106fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106fc:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106fe:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10700:	f991 7001 	ldrsb.w	r7, [r1, #1]
   10704:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10706:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10708:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   1070c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10710:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10714:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10718:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1071c:	f365 0100 	bfi	r1, r5, #0, #1
   10720:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10724:	6813      	ldr	r3, [r2, #0]
   10726:	0799      	lsls	r1, r3, #30
   10728:	d503      	bpl.n	10732 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1072a:	6813      	ldr	r3, [r2, #0]
   1072c:	f365 0341 	bfi	r3, r5, #1, #1
   10730:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10732:	69d3      	ldr	r3, [r2, #28]
   10734:	f013 0302 	ands.w	r3, r3, #2
   10738:	d1fb      	bne.n	10732 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   1073a:	6802      	ldr	r2, [r0, #0]
   1073c:	4605      	mov	r5, r0
   1073e:	6811      	ldr	r1, [r2, #0]
   10740:	481d      	ldr	r0, [pc, #116]	; (107b8 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   10742:	4281      	cmp	r1, r0
   10744:	d130      	bne.n	107a8 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   10746:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1074a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   1074e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   10752:	6853      	ldr	r3, [r2, #4]
   10754:	4a19      	ldr	r2, [pc, #100]	; (107bc <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   10756:	4293      	cmp	r3, r2
   10758:	d12a      	bne.n	107b0 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1075a:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   1075c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1075e:	2104      	movs	r1, #4
    m_inTail = 0;
   10760:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   10764:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   10766:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1076a:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   1076c:	6853      	ldr	r3, [r2, #4]
   1076e:	f364 1386 	bfi	r3, r4, #6, #1
   10772:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10774:	2e00      	cmp	r6, #0
   10776:	d0bf      	beq.n	106f8 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10778:	6813      	ldr	r3, [r2, #0]
   1077a:	f043 0302 	orr.w	r3, r3, #2
   1077e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10780:	69d3      	ldr	r3, [r2, #28]
   10782:	079b      	lsls	r3, r3, #30
   10784:	d4fc      	bmi.n	10780 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10786:	6a2a      	ldr	r2, [r5, #32]
   10788:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1078c:	7893      	ldrb	r3, [r2, #2]
   1078e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10792:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10796:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   1079a:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1079c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   107a0:	4302      	orrs	r2, r0
   107a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   107a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   107a8:	4628      	mov	r0, r5
   107aa:	4788      	blx	r1
   107ac:	682a      	ldr	r2, [r5, #0]
   107ae:	e7d0      	b.n	10752 <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   107b0:	4628      	mov	r0, r5
   107b2:	4798      	blx	r3
   107b4:	692a      	ldr	r2, [r5, #16]
   107b6:	e7d9      	b.n	1076c <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   107b8:	00010171 	.word	0x00010171
   107bc:	00010181 	.word	0x00010181

000107c0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   107c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   107c4:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   107c6:	682b      	ldr	r3, [r5, #0]
   107c8:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   107cc:	b089      	sub	sp, #36	; 0x24
   107ce:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   107d0:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   107d2:	69eb      	ldr	r3, [r5, #28]
   107d4:	f013 0301 	ands.w	r3, r3, #1
   107d8:	d1fb      	bne.n	107d2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   107da:	6822      	ldr	r2, [r4, #0]
   107dc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 108b4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   107e0:	6811      	ldr	r1, [r2, #0]
   107e2:	4541      	cmp	r1, r8
   107e4:	d153      	bne.n	1088e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   107e6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   107ea:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   107ee:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   107f2:	6853      	ldr	r3, [r2, #4]
   107f4:	4a28      	ldr	r2, [pc, #160]	; (10898 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   107f6:	4293      	cmp	r3, r2
   107f8:	d122      	bne.n	10840 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   107fa:	2200      	movs	r2, #0
    m_inTail = 0;
   107fc:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10800:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10802:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10804:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   10808:	4a24      	ldr	r2, [pc, #144]	; (1089c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1080a:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   1080c:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1080e:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   10810:	d01c      	beq.n	1084c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   10812:	4a23      	ldr	r2, [pc, #140]	; (108a0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   10814:	4293      	cmp	r3, r2
   10816:	f000 8310 	beq.w	10e3a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   1081a:	4a22      	ldr	r2, [pc, #136]	; (108a4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   1081c:	4293      	cmp	r3, r2
   1081e:	f000 8341 	beq.w	10ea4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   10822:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   10826:	f000 839a 	beq.w	10f5e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   1082a:	4a1f      	ldr	r2, [pc, #124]	; (108a8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   1082c:	4293      	cmp	r3, r2
   1082e:	d043      	beq.n	108b8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   10830:	4a1e      	ldr	r2, [pc, #120]	; (108ac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   10832:	4293      	cmp	r3, r2
   10834:	f000 8372 	beq.w	10f1c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   10838:	2000      	movs	r0, #0
}
   1083a:	b009      	add	sp, #36	; 0x24
   1083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   10840:	4620      	mov	r0, r4
   10842:	4798      	blx	r3
   10844:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   10846:	4a15      	ldr	r2, [pc, #84]	; (1089c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   10848:	4293      	cmp	r3, r2
   1084a:	d1e2      	bne.n	10812 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1084c:	2203      	movs	r2, #3
   1084e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10852:	4a17      	ldr	r2, [pc, #92]	; (108b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   10854:	9207      	str	r2, [sp, #28]
   10856:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   1085a:	9206      	str	r2, [sp, #24]
   1085c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10860:	9202      	str	r2, [sp, #8]
   10862:	2231      	movs	r2, #49	; 0x31
   10864:	9205      	str	r2, [sp, #20]
   10866:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1086a:	9201      	str	r2, [sp, #4]
   1086c:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1086e:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10870:	2601      	movs	r6, #1
   10872:	f04f 092e 	mov.w	r9, #46	; 0x2e
   10876:	9204      	str	r2, [sp, #16]
   10878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1087c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10880:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   10882:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10886:	f04f 0a07 	mov.w	sl, #7
   1088a:	9200      	str	r2, [sp, #0]
   1088c:	e02f      	b.n	108ee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   1088e:	4620      	mov	r0, r4
   10890:	4788      	blx	r1
   10892:	6822      	ldr	r2, [r4, #0]
   10894:	e7ad      	b.n	107f2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   10896:	bf00      	nop
   10898:	00010181 	.word	0x00010181
   1089c:	40003000 	.word	0x40003000
   108a0:	41012000 	.word	0x41012000
   108a4:	41014000 	.word	0x41014000
   108a8:	43000400 	.word	0x43000400
   108ac:	43000c00 	.word	0x43000c00
   108b0:	00200500 	.word	0x00200500
   108b4:	00010171 	.word	0x00010171
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   108bc:	9207      	str	r2, [sp, #28]
   108be:	9206      	str	r2, [sp, #24]
   108c0:	2220      	movs	r2, #32
   108c2:	9202      	str	r2, [sp, #8]
   108c4:	2245      	movs	r2, #69	; 0x45
   108c6:	9205      	str	r2, [sp, #20]
   108c8:	2210      	movs	r2, #16
   108ca:	9201      	str	r2, [sp, #4]
   108cc:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   108ce:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108d0:	2602      	movs	r6, #2
   108d2:	f04f 0942 	mov.w	r9, #66	; 0x42
   108d6:	9204      	str	r2, [sp, #16]
   108d8:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   108da:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108de:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   108e2:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   108e4:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108e8:	f04f 0a23 	mov.w	sl, #35	; 0x23
   108ec:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   108ee:	6a21      	ldr	r1, [r4, #32]
   108f0:	f991 2001 	ldrsb.w	r2, [r1, #1]
   108f4:	f891 b002 	ldrb.w	fp, [r1, #2]
   108f8:	01d2      	lsls	r2, r2, #7
   108fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   108fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10902:	f04f 0e01 	mov.w	lr, #1
   10906:	fa0e fc0b 	lsl.w	ip, lr, fp
   1090a:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   1090e:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   10912:	f894 c007 	ldrb.w	ip, [r4, #7]
   10916:	45f4      	cmp	ip, lr
   10918:	f040 819d 	bne.w	10c56 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1091c:	4dc4      	ldr	r5, [pc, #784]	; (10c30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   1091e:	4ac5      	ldr	r2, [pc, #788]	; (10c34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10920:	f107 0e20 	add.w	lr, r7, #32
   10924:	3620      	adds	r6, #32
   10926:	9f00      	ldr	r7, [sp, #0]
   10928:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   1092c:	9f01      	ldr	r7, [sp, #4]
   1092e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10932:	9f02      	ldr	r7, [sp, #8]
   10934:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10938:	f10a 0e20 	add.w	lr, sl, #32
   1093c:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10940:	f36f 1586 	bfc	r5, #6, #1
   10944:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10948:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   1094c:	066d      	lsls	r5, r5, #25
   1094e:	d4fb      	bmi.n	10948 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   10950:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10954:	4eb7      	ldr	r6, [pc, #732]	; (10c34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10956:	f04f 0c07 	mov.w	ip, #7
   1095a:	f36c 0503 	bfi	r5, ip, #0, #4
   1095e:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10962:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10966:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1096a:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   1096e:	6875      	ldr	r5, [r6, #4]
   10970:	f015 051c 	ands.w	r5, r5, #28
   10974:	d1fb      	bne.n	1096e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   10976:	681a      	ldr	r2, [r3, #0]
   10978:	2603      	movs	r6, #3
   1097a:	f366 0284 	bfi	r2, r6, #2, #3
   1097e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10980:	681a      	ldr	r2, [r3, #0]
   10982:	7a26      	ldrb	r6, [r4, #8]
   10984:	f366 725d 	bfi	r2, r6, #29, #1
   10988:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   1098a:	681a      	ldr	r2, [r3, #0]
   1098c:	7a66      	ldrb	r6, [r4, #9]
   1098e:	f366 721c 	bfi	r2, r6, #28, #1
   10992:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   10994:	681a      	ldr	r2, [r3, #0]
   10996:	f365 621b 	bfi	r2, r5, #24, #4
   1099a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   1099c:	6962      	ldr	r2, [r4, #20]
   1099e:	681e      	ldr	r6, [r3, #0]
   109a0:	7a52      	ldrb	r2, [r2, #9]
   109a2:	f362 5615 	bfi	r6, r2, #20, #2
   109a6:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   109a8:	7a49      	ldrb	r1, [r1, #9]
   109aa:	681a      	ldr	r2, [r3, #0]
   109ac:	2900      	cmp	r1, #0
   109ae:	bf0c      	ite	eq
   109b0:	2100      	moveq	r1, #0
   109b2:	2102      	movne	r1, #2
   109b4:	f361 4211 	bfi	r2, r1, #16, #2
   109b8:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   109ba:	685a      	ldr	r2, [r3, #4]
   109bc:	79a1      	ldrb	r1, [r4, #6]
   109be:	f361 0202 	bfi	r2, r1, #0, #3
   109c2:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   109c4:	681a      	ldr	r2, [r3, #0]
   109c6:	f365 729e 	bfi	r2, r5, #30, #1
   109ca:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   109cc:	681a      	ldr	r2, [r3, #0]
   109ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   109d2:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   109d4:	685a      	ldr	r2, [r3, #4]
   109d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   109da:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   109dc:	685a      	ldr	r2, [r3, #4]
   109de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   109e2:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   109e4:	69a3      	ldr	r3, [r4, #24]
   109e6:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   109ea:	789a      	ldrb	r2, [r3, #2]
   109ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
   109f0:	01db      	lsls	r3, r3, #7
   109f2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   109f6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   109fa:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   109fe:	07d7      	lsls	r7, r2, #31
   10a00:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   10a04:	bf4c      	ite	mi
   10a06:	f366 1507 	bfimi	r5, r6, #4, #4
   10a0a:	f366 0503 	bfipl	r5, r6, #0, #4
   10a0e:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   10a12:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   10a14:	2901      	cmp	r1, #1
   10a16:	f240 822f 	bls.w	10e78 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   10a1a:	2902      	cmp	r1, #2
   10a1c:	d10a      	bne.n	10a34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10a1e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10a22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10a26:	4413      	add	r3, r2
   10a28:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10a2c:	f042 0201 	orr.w	r2, r2, #1
   10a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   10a34:	2807      	cmp	r0, #7
   10a36:	d031      	beq.n	10a9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   10a38:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10a3c:	2b07      	cmp	r3, #7
   10a3e:	d02d      	beq.n	10a9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   10a40:	f7fe fb06 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10a44:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10a46:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10a48:	f023 0302 	bic.w	r3, r3, #2
   10a4c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10a4e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10a50:	6803      	ldr	r3, [r0, #0]
   10a52:	2b01      	cmp	r3, #1
   10a54:	d0fc      	beq.n	10a50 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   10a56:	9b06      	ldr	r3, [sp, #24]
   10a58:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10a5a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10a5e:	f7fe fb01 	bl	f064 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10a62:	2300      	movs	r3, #0
   10a64:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10a66:	6923      	ldr	r3, [r4, #16]
   10a68:	3328      	adds	r3, #40	; 0x28
   10a6a:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   10a6c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10a70:	f7fe faee 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10a74:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10a76:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10a78:	f023 0302 	bic.w	r3, r3, #2
   10a7c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10a7e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10a80:	6803      	ldr	r3, [r0, #0]
   10a82:	2b01      	cmp	r3, #1
   10a84:	d0fc      	beq.n	10a80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   10a86:	9b07      	ldr	r3, [sp, #28]
   10a88:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10a8a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10a8e:	f7fe fae9 	bl	f064 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10a92:	2300      	movs	r3, #0
   10a94:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10a96:	6923      	ldr	r3, [r4, #16]
   10a98:	3328      	adds	r3, #40	; 0x28
   10a9a:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   10a9c:	6820      	ldr	r0, [r4, #0]
   10a9e:	4a66      	ldr	r2, [pc, #408]	; (10c38 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10aa0:	6903      	ldr	r3, [r0, #16]
   10aa2:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   10aa6:	4293      	cmp	r3, r2
   10aa8:	f040 81bd 	bne.w	10e26 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10aac:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10aae:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ab0:	f991 5001 	ldrsb.w	r5, [r1, #1]
   10ab4:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ab6:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ab8:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   10abc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ac0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ac4:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ac8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10acc:	f36f 0100 	bfc	r1, #0, #1
   10ad0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10ad4:	6813      	ldr	r3, [r2, #0]
   10ad6:	0799      	lsls	r1, r3, #30
   10ad8:	d503      	bpl.n	10ae2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10ada:	6813      	ldr	r3, [r2, #0]
   10adc:	f36f 0341 	bfc	r3, #1, #1
   10ae0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10ae2:	69d3      	ldr	r3, [r2, #28]
   10ae4:	f013 0302 	ands.w	r3, r3, #2
   10ae8:	d1fb      	bne.n	10ae2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   10aea:	6802      	ldr	r2, [r0, #0]
   10aec:	4542      	cmp	r2, r8
   10aee:	f040 8211 	bne.w	10f14 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   10af2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10af6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10afa:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10afe:	6843      	ldr	r3, [r0, #4]
   10b00:	4a4e      	ldr	r2, [pc, #312]	; (10c3c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   10b02:	4293      	cmp	r3, r2
   10b04:	f040 8202 	bne.w	10f0c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10b08:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   10b0a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10b0c:	2204      	movs	r2, #4
    m_inTail = 0;
   10b0e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10b12:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10b14:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10b18:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   10b1a:	79e3      	ldrb	r3, [r4, #7]
   10b1c:	2b01      	cmp	r3, #1
   10b1e:	f040 8150 	bne.w	10dc2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10b22:	4b47      	ldr	r3, [pc, #284]	; (10c40 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   10b24:	444b      	add	r3, r9
   10b26:	fbb3 f3f9 	udiv	r3, r3, r9
   10b2a:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10b2c:	2bff      	cmp	r3, #255	; 0xff
   10b2e:	bf28      	it	cs
   10b30:	23ff      	movcs	r3, #255	; 0xff
   10b32:	b2db      	uxtb	r3, r3
   10b34:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10b36:	2e00      	cmp	r6, #0
   10b38:	f000 816f 	beq.w	10e1a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10b3c:	682b      	ldr	r3, [r5, #0]
   10b3e:	f043 0302 	orr.w	r3, r3, #2
   10b42:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10b44:	69eb      	ldr	r3, [r5, #28]
   10b46:	079b      	lsls	r3, r3, #30
   10b48:	d4fc      	bmi.n	10b44 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b4a:	6a22      	ldr	r2, [r4, #32]
   10b4c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10b50:	7890      	ldrb	r0, [r2, #2]
   10b52:	01db      	lsls	r3, r3, #7
   10b54:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10b58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10b5c:	4402      	add	r2, r0
   10b5e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10b62:	f041 0101 	orr.w	r1, r1, #1
   10b66:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10b6a:	69a6      	ldr	r6, [r4, #24]
   10b6c:	4a35      	ldr	r2, [pc, #212]	; (10c44 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10b6e:	f996 1001 	ldrsb.w	r1, [r6, #1]
   10b72:	78b7      	ldrb	r7, [r6, #2]
   10b74:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10b78:	2601      	movs	r6, #1
   10b7a:	40be      	lsls	r6, r7
   10b7c:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10b7e:	6961      	ldr	r1, [r4, #20]
   10b80:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10b84:	f891 c002 	ldrb.w	ip, [r1, #2]
   10b88:	f991 e001 	ldrsb.w	lr, [r1, #1]
   10b8c:	f01c 0f01 	tst.w	ip, #1
   10b90:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   10b94:	f000 8108 	beq.w	10da8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10b98:	4472      	add	r2, lr
   10b9a:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   10b9e:	f006 060f 	and.w	r6, r6, #15
   10ba2:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   10ba6:	f366 1107 	bfi	r1, r6, #4, #4
   10baa:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10bae:	4925      	ldr	r1, [pc, #148]	; (10c44 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10bb0:	eb01 020e 	add.w	r2, r1, lr
   10bb4:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10bb8:	2701      	movs	r7, #1
   10bba:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10bbe:	f04f 0803 	mov.w	r8, #3
   10bc2:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10bc6:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10bc8:	69e2      	ldr	r2, [r4, #28]
   10bca:	7894      	ldrb	r4, [r2, #2]
   10bcc:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10bd0:	01d2      	lsls	r2, r2, #7
   10bd2:	4411      	add	r1, r2
   10bd4:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10bd8:	f014 0f01 	tst.w	r4, #1
   10bdc:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10be0:	bf14      	ite	ne
   10be2:	f366 1707 	bfine	r7, r6, #4, #4
   10be6:	f366 0703 	bfieq	r7, r6, #0, #4
   10bea:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10bee:	4915      	ldr	r1, [pc, #84]	; (10c44 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10bf0:	440a      	add	r2, r1
   10bf2:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10bf4:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10bf6:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10bf8:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10bfc:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c00:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c04:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c08:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c0a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c0e:	bf4c      	ite	mi
   10c10:	f366 1207 	bfimi	r2, r6, #4, #4
   10c14:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c18:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c1a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c1e:	2201      	movs	r2, #1
   10c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10c24:	682b      	ldr	r3, [r5, #0]
   10c26:	f043 0302 	orr.w	r3, r3, #2
   10c2a:	602b      	str	r3, [r5, #0]
   10c2c:	e00c      	b.n	10c48 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   10c2e:	bf00      	nop
   10c30:	e000e100 	.word	0xe000e100
   10c34:	40001c00 	.word	0x40001c00
   10c38:	000102a5 	.word	0x000102a5
   10c3c:	00010181 	.word	0x00010181
   10c40:	004c4b3f 	.word	0x004c4b3f
   10c44:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10c48:	69eb      	ldr	r3, [r5, #28]
   10c4a:	079b      	lsls	r3, r3, #30
   10c4c:	d4fc      	bmi.n	10c48 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   10c4e:	2001      	movs	r0, #1
}
   10c50:	b009      	add	sp, #36	; 0x24
   10c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   10c56:	6829      	ldr	r1, [r5, #0]
   10c58:	f36e 0184 	bfi	r1, lr, #2, #3
   10c5c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   10c5e:	6829      	ldr	r1, [r5, #0]
   10c60:	f36f 314f 	bfc	r1, #13, #3
   10c64:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10c66:	6829      	ldr	r1, [r5, #0]
   10c68:	f36f 711c 	bfc	r1, #28, #1
   10c6c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   10c6e:	6829      	ldr	r1, [r5, #0]
   10c70:	f36e 5115 	bfi	r1, lr, #20, #2
   10c74:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10c76:	f1bc 0f00 	cmp.w	ip, #0
   10c7a:	d104      	bne.n	10c86 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   10c7c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10c80:	2900      	cmp	r1, #0
   10c82:	f040 81af 	bne.w	10fe4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10c86:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10c88:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   10c8a:	f362 0302 	bfi	r3, r2, #0, #3
   10c8e:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10c90:	682b      	ldr	r3, [r5, #0]
   10c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10c96:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10c98:	7923      	ldrb	r3, [r4, #4]
   10c9a:	2b02      	cmp	r3, #2
   10c9c:	f000 817c 	beq.w	10f98 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10ca0:	682a      	ldr	r2, [r5, #0]
   10ca2:	2101      	movs	r1, #1
   10ca4:	f361 621b 	bfi	r2, r1, #24, #4
   10ca8:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   10caa:	686a      	ldr	r2, [r5, #4]
   10cac:	f363 324d 	bfi	r2, r3, #13, #1
   10cb0:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   10cb2:	7963      	ldrb	r3, [r4, #5]
   10cb4:	686a      	ldr	r2, [r5, #4]
   10cb6:	3b01      	subs	r3, #1
   10cb8:	f363 1286 	bfi	r2, r3, #6, #1
   10cbc:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   10cbe:	686b      	ldr	r3, [r5, #4]
   10cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10cc4:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   10cc6:	686b      	ldr	r3, [r5, #4]
   10cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10ccc:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   10cce:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10cd0:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   10cd2:	f36f 2349 	bfc	r3, #9, #1
   10cd6:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10cd8:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   10cda:	69eb      	ldr	r3, [r5, #28]
   10cdc:	075b      	lsls	r3, r3, #29
   10cde:	d4fc      	bmi.n	10cda <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10ce0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10ce4:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10ce6:	4bb7      	ldr	r3, [pc, #732]	; (10fc4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ce8:	9a04      	ldr	r2, [sp, #16]
   10cea:	441a      	add	r2, r3
   10cec:	4610      	mov	r0, r2
   10cee:	9a05      	ldr	r2, [sp, #20]
   10cf0:	eb03 0109 	add.w	r1, r3, r9
   10cf4:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10cf6:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cf8:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10cfa:	9f00      	ldr	r7, [sp, #0]
   10cfc:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d00:	2220      	movs	r2, #32
   10d02:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10d06:	9901      	ldr	r1, [sp, #4]
   10d08:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d0c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10d10:	9a02      	ldr	r2, [sp, #8]
   10d12:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d16:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   10d1a:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10d1e:	69a3      	ldr	r3, [r4, #24]
   10d20:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10d24:	789a      	ldrb	r2, [r3, #2]
   10d26:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10d2a:	01db      	lsls	r3, r3, #7
   10d2c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10d30:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10d34:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10d38:	07d6      	lsls	r6, r2, #31
   10d3a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   10d3e:	bf4c      	ite	mi
   10d40:	f365 1007 	bfimi	r0, r5, #4, #4
   10d44:	f365 0003 	bfipl	r0, r5, #0, #4
   10d48:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   10d4c:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   10d4e:	2901      	cmp	r1, #1
   10d50:	f240 80c7 	bls.w	10ee2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   10d54:	2902      	cmp	r1, #2
   10d56:	d10a      	bne.n	10d6e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10d58:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10d60:	4413      	add	r3, r2
   10d62:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d66:	f042 0201 	orr.w	r2, r2, #1
   10d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   10d6e:	f10a 0e20 	add.w	lr, sl, #32
   10d72:	4a95      	ldr	r2, [pc, #596]	; (10fc8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10d74:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10d78:	f36f 1386 	bfc	r3, #6, #1
   10d7c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10d80:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10d84:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10d88:	2b00      	cmp	r3, #0
   10d8a:	d1f9      	bne.n	10d80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   10d8c:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   10d90:	f363 0103 	bfi	r1, r3, #0, #4
   10d94:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   10d98:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10da0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10da4:	6853      	ldr	r3, [r2, #4]
   10da6:	e679      	b.n	10a9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10da8:	eb02 010e 	add.w	r1, r2, lr
   10dac:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10db0:	f006 060f 	and.w	r6, r6, #15
   10db4:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10db8:	f366 0203 	bfi	r2, r6, #0, #4
   10dbc:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10dc0:	e6f5      	b.n	10bae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10dc2:	4648      	mov	r0, r9
   10dc4:	f00b f86c 	bl	1bea0 <__aeabi_ui2d>
   10dc8:	2200      	movs	r2, #0
   10dca:	4b80      	ldr	r3, [pc, #512]	; (10fcc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   10dcc:	f00b f8de 	bl	1bf8c <__aeabi_dmul>
   10dd0:	4b7f      	ldr	r3, [pc, #508]	; (10fd0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10dd2:	4680      	mov	r8, r0
   10dd4:	6818      	ldr	r0, [r3, #0]
   10dd6:	4689      	mov	r9, r1
   10dd8:	f00b f862 	bl	1bea0 <__aeabi_ui2d>
   10ddc:	4602      	mov	r2, r0
   10dde:	460b      	mov	r3, r1
   10de0:	4640      	mov	r0, r8
   10de2:	4649      	mov	r1, r9
   10de4:	f00b f9fc 	bl	1c1e0 <__aeabi_ddiv>
   10de8:	4602      	mov	r2, r0
   10dea:	460b      	mov	r3, r1
   10dec:	2000      	movs	r0, #0
   10dee:	4979      	ldr	r1, [pc, #484]	; (10fd4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10df0:	f00a ff18 	bl	1bc24 <__aeabi_dsub>
   10df4:	2200      	movs	r2, #0
   10df6:	4b78      	ldr	r3, [pc, #480]	; (10fd8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10df8:	f00b f8c8 	bl	1bf8c <__aeabi_dmul>
   10dfc:	f00b fba8 	bl	1c550 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10e00:	f00b f870 	bl	1bee4 <__aeabi_f2d>
   10e04:	2200      	movs	r2, #0
   10e06:	4b75      	ldr	r3, [pc, #468]	; (10fdc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10e08:	f00a ff0e 	bl	1bc28 <__adddf3>
   10e0c:	f00b fb80 	bl	1c510 <__aeabi_d2uiz>
   10e10:	b280      	uxth	r0, r0
   10e12:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10e14:	2e00      	cmp	r6, #0
   10e16:	f47f ae91 	bne.w	10b3c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   10e1a:	6a22      	ldr	r2, [r4, #32]
   10e1c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10e20:	7890      	ldrb	r0, [r2, #2]
   10e22:	01db      	lsls	r3, r3, #7
   10e24:	e6a1      	b.n	10b6a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10e26:	4649      	mov	r1, r9
   10e28:	4620      	mov	r0, r4
   10e2a:	4798      	blx	r3
   10e2c:	6a22      	ldr	r2, [r4, #32]
   10e2e:	6925      	ldr	r5, [r4, #16]
   10e30:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10e34:	7890      	ldrb	r0, [r2, #2]
   10e36:	01db      	lsls	r3, r3, #7
   10e38:	e697      	b.n	10b6a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10e3e:	9207      	str	r2, [sp, #28]
   10e40:	9206      	str	r2, [sp, #24]
   10e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10e46:	9202      	str	r2, [sp, #8]
   10e48:	2239      	movs	r2, #57	; 0x39
   10e4a:	9205      	str	r2, [sp, #20]
   10e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10e50:	9201      	str	r2, [sp, #4]
   10e52:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10e54:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e56:	2601      	movs	r6, #1
   10e58:	f04f 0936 	mov.w	r9, #54	; 0x36
   10e5c:	9204      	str	r2, [sp, #16]
   10e5e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10e62:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e66:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10e6a:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10e6c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e70:	f04f 0a17 	mov.w	sl, #23
   10e74:	9200      	str	r2, [sp, #0]
   10e76:	e53a      	b.n	108ee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10e78:	2900      	cmp	r1, #0
   10e7a:	f040 8092 	bne.w	10fa2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10e7e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10e82:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10e86:	2501      	movs	r5, #1
   10e88:	4095      	lsls	r5, r2
   10e8a:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10e8c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10e94:	4413      	add	r3, r2
   10e96:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e9a:	f36f 0200 	bfc	r2, #0, #1
   10e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10ea2:	e5c7      	b.n	10a34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ea4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10ea8:	9207      	str	r2, [sp, #28]
   10eaa:	9206      	str	r2, [sp, #24]
   10eac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10eb0:	9202      	str	r2, [sp, #8]
   10eb2:	223d      	movs	r2, #61	; 0x3d
   10eb4:	9205      	str	r2, [sp, #20]
   10eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10eba:	9201      	str	r2, [sp, #4]
   10ebc:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10ebe:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ec0:	2601      	movs	r6, #1
   10ec2:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10ec6:	9204      	str	r2, [sp, #16]
   10ec8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10ecc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ed0:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10ed4:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10ed6:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10eda:	f04f 0a18 	mov.w	sl, #24
   10ede:	9200      	str	r2, [sp, #0]
   10ee0:	e505      	b.n	108ee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10ee2:	2900      	cmp	r1, #0
   10ee4:	d165      	bne.n	10fb2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10ee6:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10eea:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10eee:	2001      	movs	r0, #1
   10ef0:	4090      	lsls	r0, r2
   10ef2:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10ef4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ef8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10efc:	4413      	add	r3, r2
   10efe:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10f02:	f36f 0200 	bfc	r2, #0, #1
   10f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10f0a:	e730      	b.n	10d6e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10f0c:	4620      	mov	r0, r4
   10f0e:	4798      	blx	r3
   10f10:	6925      	ldr	r5, [r4, #16]
   10f12:	e602      	b.n	10b1a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10f14:	4620      	mov	r0, r4
   10f16:	4790      	blx	r2
   10f18:	6820      	ldr	r0, [r4, #0]
   10f1a:	e5f0      	b.n	10afe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10f1c:	2205      	movs	r2, #5
   10f1e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10f26:	9202      	str	r2, [sp, #8]
   10f28:	224d      	movs	r2, #77	; 0x4d
   10f2a:	492d      	ldr	r1, [pc, #180]	; (10fe0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10f2c:	9205      	str	r2, [sp, #20]
   10f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10f32:	9201      	str	r2, [sp, #4]
   10f34:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10f36:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10f38:	2602      	movs	r6, #2
   10f3a:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10f3e:	9107      	str	r1, [sp, #28]
   10f40:	9204      	str	r2, [sp, #16]
   10f42:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10f4a:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10f4c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10f50:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10f52:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10f56:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10f5a:	9200      	str	r2, [sp, #0]
   10f5c:	e4c7      	b.n	108ee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10f62:	9207      	str	r2, [sp, #28]
   10f64:	9206      	str	r2, [sp, #24]
   10f66:	2241      	movs	r2, #65	; 0x41
   10f68:	9205      	str	r2, [sp, #20]
   10f6a:	2240      	movs	r2, #64	; 0x40
   10f6c:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10f6e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f70:	2102      	movs	r1, #2
   10f72:	f04f 093e 	mov.w	r9, #62	; 0x3e
   10f76:	9204      	str	r2, [sp, #16]
   10f78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10f7c:	4637      	mov	r7, r6
   10f7e:	9601      	str	r6, [sp, #4]
   10f80:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10f82:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f86:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10f8a:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   10f8c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f90:	f04f 0a22 	mov.w	sl, #34	; 0x22
   10f94:	9200      	str	r2, [sp, #0]
   10f96:	e4aa      	b.n	108ee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   10f98:	682b      	ldr	r3, [r5, #0]
   10f9a:	f36f 631b 	bfc	r3, #24, #4
   10f9e:	602b      	str	r3, [r5, #0]
   10fa0:	e687      	b.n	10cb2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10fa2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10fa6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10faa:	2501      	movs	r5, #1
   10fac:	4095      	lsls	r5, r2
   10fae:	614d      	str	r5, [r1, #20]
   10fb0:	e76c      	b.n	10e8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10fb2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10fb6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10fba:	2001      	movs	r0, #1
   10fbc:	4090      	lsls	r0, r2
   10fbe:	6148      	str	r0, [r1, #20]
   10fc0:	e798      	b.n	10ef4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10fc2:	bf00      	nop
   10fc4:	e000e100 	.word	0xe000e100
   10fc8:	40001c00 	.word	0x40001c00
   10fcc:	40300000 	.word	0x40300000
   10fd0:	200000f0 	.word	0x200000f0
   10fd4:	3ff00000 	.word	0x3ff00000
   10fd8:	40f00000 	.word	0x40f00000
   10fdc:	3fe00000 	.word	0x3fe00000
   10fe0:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fe4:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10fe6:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fe8:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10fec:	f36c 0100 	bfi	r1, ip, #0, #1
   10ff0:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10ff4:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ff6:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10ffa:	0790      	lsls	r0, r2, #30
   10ffc:	d503      	bpl.n	11006 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10ffe:	681a      	ldr	r2, [r3, #0]
   11000:	f36c 0241 	bfi	r2, ip, #1, #1
   11004:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11006:	69da      	ldr	r2, [r3, #28]
   11008:	f012 0202 	ands.w	r2, r2, #2
   1100c:	d1fb      	bne.n	11006 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   1100e:	6821      	ldr	r1, [r4, #0]
   11010:	680b      	ldr	r3, [r1, #0]
   11012:	4543      	cmp	r3, r8
   11014:	d13b      	bne.n	1108e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   11016:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1101a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   1101e:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   11022:	684b      	ldr	r3, [r1, #4]
   11024:	4a1c      	ldr	r2, [pc, #112]	; (11098 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   11026:	4293      	cmp	r3, r2
   11028:	d12d      	bne.n	11086 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1102a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1102c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1102e:	2104      	movs	r1, #4
    m_inTail = 0;
   11030:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   11034:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   11036:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1103a:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   1103c:	7b21      	ldrb	r1, [r4, #12]
   1103e:	6813      	ldr	r3, [r2, #0]
   11040:	2900      	cmp	r1, #0
   11042:	bf0c      	ite	eq
   11044:	2100      	moveq	r1, #0
   11046:	2102      	movne	r1, #2
   11048:	f361 4311 	bfi	r3, r1, #16, #2
   1104c:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   1104e:	f1bb 0f00 	cmp.w	fp, #0
   11052:	f43f ae18 	beq.w	10c86 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   11056:	6813      	ldr	r3, [r2, #0]
   11058:	f043 0302 	orr.w	r3, r3, #2
   1105c:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1105e:	69d3      	ldr	r3, [r2, #28]
   11060:	0799      	lsls	r1, r3, #30
   11062:	d4fc      	bmi.n	1105e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11064:	6a23      	ldr	r3, [r4, #32]
   11066:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1106a:	789b      	ldrb	r3, [r3, #2]
   1106c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   11070:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11074:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11078:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1107c:	f042 0201 	orr.w	r2, r2, #1
   11080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11084:	e5ff      	b.n	10c86 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   11086:	4620      	mov	r0, r4
   11088:	4798      	blx	r3
   1108a:	6922      	ldr	r2, [r4, #16]
   1108c:	e7d6      	b.n	1103c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   1108e:	4620      	mov	r0, r4
   11090:	4798      	blx	r3
   11092:	6821      	ldr	r1, [r4, #0]
   11094:	e7c5      	b.n	11022 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   11096:	bf00      	nop
   11098:	00010181 	.word	0x00010181

0001109c <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   1109c:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   110a0:	b92a      	cbnz	r2, 110ae <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   110a2:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   110a4:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   110a6:	428a      	cmp	r2, r1
        m_portOpen = true;
   110a8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   110ac:	d900      	bls.n	110b0 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   110ae:	4770      	bx	lr
   110b0:	f7ff bb86 	b.w	107c0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

000110b4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   110b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110b6:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   110b8:	4f20      	ldr	r7, [pc, #128]	; (1113c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   110ba:	6182      	str	r2, [r0, #24]
   110bc:	61c3      	str	r3, [r0, #28]
   110be:	4d20      	ldr	r5, [pc, #128]	; (11140 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   110c0:	60a7      	str	r7, [r4, #8]
   110c2:	9f06      	ldr	r7, [sp, #24]
   110c4:	f8df c080 	ldr.w	ip, [pc, #128]	; 11148 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   110c8:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   110cc:	6065      	str	r5, [r4, #4]
   110ce:	2307      	movs	r3, #7
   110d0:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   110d2:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   110d4:	6227      	str	r7, [r4, #32]
   110d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   110da:	2780      	movs	r7, #128	; 0x80
   110dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   110e0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   110e4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   110e8:	f8c4 c000 	str.w	ip, [r4]
   110ec:	6261      	str	r1, [r4, #36]	; 0x24
   110ee:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   110f2:	85a2      	strh	r2, [r4, #44]	; 0x2c
   110f4:	4629      	mov	r1, r5
   110f6:	463a      	mov	r2, r7
   110f8:	6166      	str	r6, [r4, #20]
   110fa:	7325      	strb	r5, [r4, #12]
   110fc:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   11100:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   11104:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11108:	f00d fbf8 	bl	1e8fc <memset>
   1110c:	463a      	mov	r2, r7
   1110e:	4629      	mov	r1, r5
   11110:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11114:	f00d fbf2 	bl	1e8fc <memset>
   11118:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   1111c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   11120:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11124:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   11128:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   1112c:	7a32      	ldrb	r2, [r6, #8]
   1112e:	4b05      	ldr	r3, [pc, #20]	; (11144 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   11130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11134:	6123      	str	r3, [r4, #16]
}
   11136:	4620      	mov	r0, r4
   11138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1113a:	bf00      	nop
   1113c:	02000100 	.word	0x02000100
   11140:	00080102 	.word	0x00080102
   11144:	000238d0 	.word	0x000238d0
   11148:	00023888 	.word	0x00023888

0001114c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   1114c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   1114e:	4907      	ldr	r1, [pc, #28]	; (1116c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   11150:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   11154:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   11156:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   11158:	fbb2 f2f3 	udiv	r2, r2, r3
   1115c:	2a02      	cmp	r2, #2
   1115e:	bf38      	it	cc
   11160:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   11162:	680b      	ldr	r3, [r1, #0]
   11164:	1a1b      	subs	r3, r3, r0
   11166:	429a      	cmp	r2, r3
   11168:	d8fb      	bhi.n	11162 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   1116a:	4770      	bx	lr
   1116c:	20001bf8 	.word	0x20001bf8

00011170 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   11170:	2901      	cmp	r1, #1
   11172:	d901      	bls.n	11178 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   11174:	2000      	movs	r0, #0
   11176:	4770      	bx	lr
    if (!m_portOpen) {
   11178:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   1117c:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   1117e:	b10a      	cbz	r2, 11184 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   11180:	f7ff bb1e 	b.w	107c0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   11184:	2001      	movs	r0, #1
}
   11186:	4770      	bx	lr

00011188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   11188:	2901      	cmp	r1, #1
    m_ssMode = mode;
   1118a:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   1118c:	d914      	bls.n	111b8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   1118e:	2902      	cmp	r1, #2
   11190:	d110      	bne.n	111b4 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11192:	6982      	ldr	r2, [r0, #24]
   11194:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11198:	7893      	ldrb	r3, [r2, #2]
   1119a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1119e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   111a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   111a6:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   111a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   111ac:	4302      	orrs	r2, r0
   111ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   111b2:	4770      	bx	lr
            success = false;
   111b4:	2000      	movs	r0, #0
}
   111b6:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   111b8:	6982      	ldr	r2, [r0, #24]
   111ba:	f992 3001 	ldrsb.w	r3, [r2, #1]
   111be:	7892      	ldrb	r2, [r2, #2]
   111c0:	01db      	lsls	r3, r3, #7
   111c2:	b199      	cbz	r1, 111ec <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   111c4:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   111c8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   111cc:	2001      	movs	r0, #1
   111ce:	4090      	lsls	r0, r2
   111d0:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   111d2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   111d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   111da:	4413      	add	r3, r2
   111dc:	2001      	movs	r0, #1
   111de:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   111e2:	f36f 0200 	bfc	r2, #0, #1
   111e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   111ea:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   111ec:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   111f0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   111f4:	2001      	movs	r0, #1
   111f6:	4090      	lsls	r0, r2
   111f8:	6188      	str	r0, [r1, #24]
   111fa:	e7ea      	b.n	111d2 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

000111fc <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   111fc:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   111fe:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   11200:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   11202:	2b01      	cmp	r3, #1
    m_phase = phase;
   11204:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   11206:	d000      	beq.n	1120a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   11208:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1120a:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1120c:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1120e:	f991 4001 	ldrsb.w	r4, [r1, #1]
   11212:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11214:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11216:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1121a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1121e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11222:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11226:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1122a:	f36f 0100 	bfc	r1, #0, #1
   1122e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   11232:	6813      	ldr	r3, [r2, #0]
   11234:	0799      	lsls	r1, r3, #30
   11236:	d503      	bpl.n	11240 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   11238:	6813      	ldr	r3, [r2, #0]
   1123a:	f36f 0341 	bfc	r3, #1, #1
   1123e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11240:	69d3      	ldr	r3, [r2, #28]
   11242:	f013 0302 	ands.w	r3, r3, #2
   11246:	d1fb      	bne.n	11240 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   11248:	6802      	ldr	r2, [r0, #0]
   1124a:	4604      	mov	r4, r0
   1124c:	6811      	ldr	r1, [r2, #0]
   1124e:	4821      	ldr	r0, [pc, #132]	; (112d4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   11250:	4281      	cmp	r1, r0
   11252:	d136      	bne.n	112c2 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   11254:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   11258:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1125c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   11260:	6853      	ldr	r3, [r2, #4]
   11262:	4a1d      	ldr	r2, [pc, #116]	; (112d8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   11264:	4293      	cmp	r3, r2
   11266:	d130      	bne.n	112ca <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11268:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   1126a:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1126c:	2104      	movs	r1, #4
    m_inTail = 0;
   1126e:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   11272:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   11274:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11278:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   1127a:	7a21      	ldrb	r1, [r4, #8]
   1127c:	681a      	ldr	r2, [r3, #0]
   1127e:	f361 725d 	bfi	r2, r1, #29, #1
   11282:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   11284:	7a61      	ldrb	r1, [r4, #9]
   11286:	681a      	ldr	r2, [r3, #0]
   11288:	f361 721c 	bfi	r2, r1, #28, #1
   1128c:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   1128e:	2d00      	cmp	r5, #0
   11290:	d0ba      	beq.n	11208 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   11292:	681a      	ldr	r2, [r3, #0]
   11294:	f042 0202 	orr.w	r2, r2, #2
   11298:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1129a:	69da      	ldr	r2, [r3, #28]
   1129c:	0792      	lsls	r2, r2, #30
   1129e:	d4fc      	bmi.n	1129a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   112a0:	6a22      	ldr	r2, [r4, #32]
   112a2:	f992 1001 	ldrsb.w	r1, [r2, #1]
   112a6:	7893      	ldrb	r3, [r2, #2]
   112a8:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   112ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   112b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   112b4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   112b8:	f042 0201 	orr.w	r2, r2, #1
   112bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   112c0:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   112c2:	4620      	mov	r0, r4
   112c4:	4788      	blx	r1
   112c6:	6822      	ldr	r2, [r4, #0]
   112c8:	e7ca      	b.n	11260 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   112ca:	4620      	mov	r0, r4
   112cc:	4798      	blx	r3
   112ce:	6923      	ldr	r3, [r4, #16]
   112d0:	e7d3      	b.n	1127a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   112d2:	bf00      	nop
   112d4:	00010171 	.word	0x00010171
   112d8:	00010181 	.word	0x00010181

000112dc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   112dc:	b470      	push	{r4, r5, r6}
   112de:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   112e0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   112e4:	b120      	cbz	r0, 112f0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   112e6:	79e0      	ldrb	r0, [r4, #7]
   112e8:	2801      	cmp	r0, #1
        return 0;
   112ea:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   112ee:	d001      	beq.n	112f4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   112f0:	bc70      	pop	{r4, r5, r6}
   112f2:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   112f4:	2b00      	cmp	r3, #0
   112f6:	ddfb      	ble.n	112f0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   112f8:	6925      	ldr	r5, [r4, #16]
   112fa:	b1b9      	cbz	r1, 1132c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   112fc:	1c4e      	adds	r6, r1, #1
   112fe:	7809      	ldrb	r1, [r1, #0]
   11300:	62a9      	str	r1, [r5, #40]	; 0x28
   11302:	e003      	b.n	1130c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   11304:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   11308:	2900      	cmp	r1, #0
   1130a:	d0f1      	beq.n	112f0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   1130c:	7e29      	ldrb	r1, [r5, #24]
   1130e:	0749      	lsls	r1, r1, #29
   11310:	d5f8      	bpl.n	11304 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   11312:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   11314:	0789      	lsls	r1, r1, #30
   11316:	d5f5      	bpl.n	11304 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   11318:	b152      	cbz	r2, 11330 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   1131a:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   1131c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1131e:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   11320:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   11322:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   11326:	d007      	beq.n	11338 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   11328:	4631      	mov	r1, r6
   1132a:	e7e5      	b.n	112f8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   1132c:	460e      	mov	r6, r1
   1132e:	e7e7      	b.n	11300 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   11330:	3001      	adds	r0, #1
   11332:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   11334:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   11336:	d1f7      	bne.n	11328 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   11338:	4618      	mov	r0, r3
   1133a:	e7d9      	b.n	112f0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

0001133c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   1133c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   11340:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   11344:	b12d      	cbz	r5, 11352 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   11346:	f890 8007 	ldrb.w	r8, [r0, #7]
   1134a:	f1b8 0f01 	cmp.w	r8, #1
   1134e:	d003      	beq.n	11358 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   11350:	2500      	movs	r5, #0
}
   11352:	4628      	mov	r0, r5
   11354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11358:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   1135c:	f1be 0f07 	cmp.w	lr, #7
   11360:	d0f6      	beq.n	11350 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   11362:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   11366:	2c07      	cmp	r4, #7
   11368:	d0f2      	beq.n	11350 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   1136a:	4616      	mov	r6, r2
   1136c:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   1136e:	4670      	mov	r0, lr
   11370:	461f      	mov	r7, r3
   11372:	4689      	mov	r9, r1
   11374:	f7fd fe76 	bl	f064 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   11378:	b336      	cbz	r6, 113c8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   1137a:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   1137c:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11380:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   11382:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11384:	b2be      	uxth	r6, r7
   11386:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11388:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   1138c:	f7fd fe60 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11390:	6803      	ldr	r3, [r0, #0]
   11392:	f043 0302 	orr.w	r3, r3, #2
   11396:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   11398:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1139c:	f7fd fe62 	bl	f064 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   113a0:	f1b9 0f00 	cmp.w	r9, #0
   113a4:	d015      	beq.n	113d2 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   113a6:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   113a8:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   113ac:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   113ae:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   113b0:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   113b2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   113b6:	f7fd fe4b 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   113ba:	6803      	ldr	r3, [r0, #0]
   113bc:	f043 0302 	orr.w	r3, r3, #2
   113c0:	6003      	str	r3, [r0, #0]
}
   113c2:	4628      	mov	r0, r5
   113c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   113c8:	4b04      	ldr	r3, [pc, #16]	; (113dc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   113ca:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   113cc:	f8a0 8000 	strh.w	r8, [r0]
   113d0:	e7d8      	b.n	11384 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   113d2:	4b02      	ldr	r3, [pc, #8]	; (113dc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   113d4:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   113d6:	2301      	movs	r3, #1
   113d8:	8003      	strh	r3, [r0, #0]
   113da:	e7e9      	b.n	113b0 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   113dc:	20001f20 	.word	0x20001f20

000113e0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   113e0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   113e4:	2b07      	cmp	r3, #7
   113e6:	d016      	beq.n	11416 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   113e8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   113ec:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   113ee:	b510      	push	{r4, lr}
   113f0:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   113f2:	d005      	beq.n	11400 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   113f4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   113f8:	b113      	cbz	r3, 11400 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   113fa:	79e3      	ldrb	r3, [r4, #7]
   113fc:	2b01      	cmp	r3, #1
   113fe:	d001      	beq.n	11404 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   11400:	2001      	movs	r0, #1
   11402:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   11404:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11408:	f7fd fe22 	bl	f050 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1140c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1140e:	079b      	lsls	r3, r3, #30
   11410:	d4f0      	bmi.n	113f4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   11412:	2001      	movs	r0, #1
   11414:	bd10      	pop	{r4, pc}
   11416:	2001      	movs	r0, #1
   11418:	4770      	bx	lr
   1141a:	bf00      	nop

0001141c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   1141c:	79c3      	ldrb	r3, [r0, #7]
   1141e:	2b01      	cmp	r3, #1
   11420:	d022      	beq.n	11468 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   11422:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11426:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   1142a:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   1142c:	429a      	cmp	r2, r3
   1142e:	d019      	beq.n	11464 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   11430:	7e0b      	ldrb	r3, [r1, #24]
   11432:	07da      	lsls	r2, r3, #31
   11434:	d403      	bmi.n	1143e <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   11436:	e018      	b.n	1146a <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   11438:	7e0b      	ldrb	r3, [r1, #24]
   1143a:	07db      	lsls	r3, r3, #31
   1143c:	d514      	bpl.n	11468 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   1143e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   11442:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11446:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   11448:	3301      	adds	r3, #1
   1144a:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   1144e:	628a      	str	r2, [r1, #40]	; 0x28
   11450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   11454:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11458:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   1145c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11460:	429a      	cmp	r2, r3
   11462:	d1e9      	bne.n	11438 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   11464:	2301      	movs	r3, #1
   11466:	750b      	strb	r3, [r1, #20]
   11468:	4770      	bx	lr
   1146a:	4770      	bx	lr

0001146c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   1146c:	79c3      	ldrb	r3, [r0, #7]
   1146e:	2b01      	cmp	r3, #1
   11470:	d100      	bne.n	11474 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   11472:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   11474:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   11476:	6901      	ldr	r1, [r0, #16]
   11478:	f891 3020 	ldrb.w	r3, [r1, #32]
   1147c:	b303      	cbz	r3, 114c0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   1147e:	2300      	movs	r3, #0
   11480:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   11484:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11488:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   1148c:	f103 0218 	add.w	r2, r3, #24
   11490:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   11494:	3301      	adds	r3, #1
   11496:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1149a:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   1149e:	7e0b      	ldrb	r3, [r1, #24]
   114a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   114a4:	760b      	strb	r3, [r1, #24]
   114a6:	e00b      	b.n	114c0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   114a8:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   114ac:	429a      	cmp	r2, r3
   114ae:	d00f      	beq.n	114d0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   114b0:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   114b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   114b6:	3218      	adds	r2, #24
   114b8:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   114bc:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   114c0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   114c4:	7e0a      	ldrb	r2, [r1, #24]
   114c6:	3301      	adds	r3, #1
   114c8:	0752      	lsls	r2, r2, #29
   114ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   114ce:	d4eb      	bmi.n	114a8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   114d0:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   114d4:	429a      	cmp	r2, r3
   114d6:	d002      	beq.n	114de <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   114d8:	f85d 4b04 	ldr.w	r4, [sp], #4
   114dc:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   114de:	2304      	movs	r3, #4
   114e0:	750b      	strb	r3, [r1, #20]
}
   114e2:	e7f9      	b.n	114d8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

000114e4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   114e4:	79c3      	ldrb	r3, [r0, #7]
   114e6:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   114e8:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   114ea:	d022      	beq.n	11532 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   114ec:	7e1a      	ldrb	r2, [r3, #24]
   114ee:	09d2      	lsrs	r2, r2, #7
   114f0:	d01e      	beq.n	11530 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   114f2:	2280      	movs	r2, #128	; 0x80
   114f4:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   114f6:	8b5a      	ldrh	r2, [r3, #26]
   114f8:	0792      	lsls	r2, r2, #30
   114fa:	d509      	bpl.n	11510 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   114fc:	8b5a      	ldrh	r2, [r3, #26]
   114fe:	f042 0202 	orr.w	r2, r2, #2
   11502:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   11504:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11508:	f042 0201 	orr.w	r2, r2, #1
   1150c:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   11510:	8b5a      	ldrh	r2, [r3, #26]
   11512:	07d1      	lsls	r1, r2, #31
   11514:	d410      	bmi.n	11538 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   11516:	8b5a      	ldrh	r2, [r3, #26]
   11518:	0752      	lsls	r2, r2, #29
   1151a:	d509      	bpl.n	11530 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   1151c:	8b5a      	ldrh	r2, [r3, #26]
   1151e:	f042 0204 	orr.w	r2, r2, #4
   11522:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   11524:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   11528:	f043 0304 	orr.w	r3, r3, #4
   1152c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   11530:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11532:	2280      	movs	r2, #128	; 0x80
   11534:	761a      	strb	r2, [r3, #24]
            break;
   11536:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   11538:	8b5a      	ldrh	r2, [r3, #26]
   1153a:	f042 0201 	orr.w	r2, r2, #1
   1153e:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   11540:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11544:	f042 0202 	orr.w	r2, r2, #2
   11548:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   1154c:	e7e3      	b.n	11516 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   1154e:	bf00      	nop

00011550 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11550:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   11554:	4770      	bx	lr
   11556:	bf00      	nop

00011558 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11558:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1155c:	e7f8      	b.n	11550 <_ZN9ClearCore12SerialDriver4ModeEv>
   1155e:	bf00      	nop

00011560 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   11560:	2007      	movs	r0, #7
   11562:	4770      	bx	lr

00011564 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   11564:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11568:	e7fa      	b.n	11560 <_ZN9ClearCore12SerialDriver4TypeEv>
   1156a:	bf00      	nop

0001156c <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   1156c:	6803      	ldr	r3, [r0, #0]
   1156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11570:	4718      	bx	r3
   11572:	bf00      	nop

00011574 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   11574:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11578:	e7f8      	b.n	1156c <_ZN9ClearCore12SerialDriver10IsWritableEv>
   1157a:	bf00      	nop

0001157c <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   1157c:	b508      	push	{r3, lr}
        return PortIsOpen();
   1157e:	6803      	ldr	r3, [r0, #0]
   11580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11582:	4798      	blx	r3
    }
   11584:	b200      	sxth	r0, r0
   11586:	bd08      	pop	{r3, pc}

00011588 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11588:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1158c:	e7f6      	b.n	1157c <_ZN9ClearCore12SerialDriver5StateEv>
   1158e:	bf00      	nop

00011590 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   11590:	2000      	movs	r0, #0
   11592:	4770      	bx	lr

00011594 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   11594:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11598:	e7fa      	b.n	11590 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   1159a:	bf00      	nop

0001159c <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   1159c:	4770      	bx	lr
   1159e:	bf00      	nop

000115a0 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   115a0:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   115a4:	e7fa      	b.n	1159c <_ZN9ClearCore12SerialDriver7RefreshEv>
   115a6:	bf00      	nop

000115a8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   115a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115ac:	b082      	sub	sp, #8
   115ae:	4688      	mov	r8, r1
   115b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   115b2:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   115b6:	9500      	str	r5, [sp, #0]
   115b8:	9401      	str	r4, [sp, #4]
   115ba:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   115bc:	4604      	mov	r4, r0
   115be:	4617      	mov	r7, r2
   115c0:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   115c2:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   115c4:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   115c6:	f7ff fd75 	bl	110b4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   115ca:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   115ce:	f7fd f951 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
   115d2:	4b09      	ldr	r3, [pc, #36]	; (115f8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   115d4:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   115d8:	f103 0208 	add.w	r2, r3, #8
   115dc:	4620      	mov	r0, r4
   115de:	337c      	adds	r3, #124	; 0x7c
   115e0:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   115e4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   115e8:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   115ec:	6022      	str	r2, [r4, #0]
   115ee:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   115f2:	b002      	add	sp, #8
   115f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115f8:	000238f0 	.word	0x000238f0

000115fc <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   115fc:	b538      	push	{r3, r4, r5, lr}
   115fe:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11600:	f7fe fe50 	bl	102a4 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   11604:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11608:	4605      	mov	r5, r0
        if (m_portOpen) {
   1160a:	b113      	cbz	r3, 11612 <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   1160c:	4620      	mov	r0, r4
   1160e:	f7ff fd9d 	bl	1114c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   11612:	4628      	mov	r0, r5
   11614:	bd38      	pop	{r3, r4, r5, pc}
   11616:	bf00      	nop

00011618 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   11618:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   1161a:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   1161e:	428b      	cmp	r3, r1
   11620:	d00d      	beq.n	1163e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   11622:	2b10      	cmp	r3, #16
   11624:	460d      	mov	r5, r1
   11626:	4604      	mov	r4, r0
   11628:	f000 808c 	beq.w	11744 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   1162c:	f1a5 030d 	sub.w	r3, r5, #13
   11630:	2b03      	cmp	r3, #3
   11632:	f200 808c 	bhi.w	1174e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   11636:	e8df f003 	tbb	[pc, r3]
   1163a:	3169      	.short	0x3169
   1163c:	4f06      	.short	0x4f06
        return true;
   1163e:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   11640:	4628      	mov	r0, r5
   11642:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11644:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11646:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1164a:	4b42      	ldr	r3, [pc, #264]	; (11754 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1164c:	f3bf 8f5b 	dmb	ish
   11650:	43d2      	mvns	r2, r2
   11652:	e853 1f00 	ldrex	r1, [r3]
   11656:	4011      	ands	r1, r2
   11658:	e843 1000 	strex	r0, r1, [r3]
   1165c:	2800      	cmp	r0, #0
   1165e:	d1f8      	bne.n	11652 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   11660:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11664:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11668:	f3bf 8f5b 	dmb	ish
   1166c:	e853 1f00 	ldrex	r1, [r3]
   11670:	4311      	orrs	r1, r2
   11672:	e843 1000 	strex	r0, r1, [r3]
   11676:	2800      	cmp	r0, #0
   11678:	d1f8      	bne.n	1166c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   1167a:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   1167e:	2101      	movs	r1, #1
    m_mode = newMode;
   11680:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   11684:	4620      	mov	r0, r4
   11686:	f7ff fd73 	bl	11170 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1168a:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1168e:	2d00      	cmp	r5, #0
   11690:	d0d5      	beq.n	1163e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   11692:	4620      	mov	r0, r4
   11694:	f7ff fd5a 	bl	1114c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11698:	4628      	mov	r0, r5
   1169a:	bd38      	pop	{r3, r4, r5, pc}
   1169c:	4b2d      	ldr	r3, [pc, #180]	; (11754 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1169e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   116a2:	f3bf 8f5b 	dmb	ish
   116a6:	e853 1f00 	ldrex	r1, [r3]
   116aa:	4311      	orrs	r1, r2
   116ac:	e843 1000 	strex	r0, r1, [r3]
   116b0:	2800      	cmp	r0, #0
   116b2:	d1f8      	bne.n	116a6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   116b4:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   116b8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   116bc:	f3bf 8f5b 	dmb	ish
   116c0:	43d2      	mvns	r2, r2
   116c2:	e853 1f00 	ldrex	r1, [r3]
   116c6:	4011      	ands	r1, r2
   116c8:	e843 1000 	strex	r0, r1, [r3]
   116cc:	2800      	cmp	r0, #0
   116ce:	d1f8      	bne.n	116c2 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   116d0:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   116d4:	2100      	movs	r1, #0
   116d6:	e7d3      	b.n	11680 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   116d8:	2201      	movs	r2, #1
   116da:	2100      	movs	r1, #0
   116dc:	4620      	mov	r0, r4
   116de:	f7ff fd8d 	bl	111fc <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   116e2:	2101      	movs	r1, #1
   116e4:	4620      	mov	r0, r4
   116e6:	f7ff fd4f 	bl	11188 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   116ea:	6823      	ldr	r3, [r4, #0]
   116ec:	4a1a      	ldr	r2, [pc, #104]	; (11758 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   116ee:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   116f0:	491a      	ldr	r1, [pc, #104]	; (1175c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   116f2:	4293      	cmp	r3, r2
   116f4:	4620      	mov	r0, r4
   116f6:	d1a5      	bne.n	11644 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   116f8:	f7fe fdd4 	bl	102a4 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   116fc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11700:	2b00      	cmp	r3, #0
   11702:	d0a0      	beq.n	11646 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   11704:	4620      	mov	r0, r4
   11706:	f7ff fd21 	bl	1114c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   1170a:	e79c      	b.n	11646 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   1170c:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11710:	4b10      	ldr	r3, [pc, #64]	; (11754 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11712:	f3bf 8f5b 	dmb	ish
   11716:	43d2      	mvns	r2, r2
   11718:	e853 1f00 	ldrex	r1, [r3]
   1171c:	4011      	ands	r1, r2
   1171e:	e843 1000 	strex	r0, r1, [r3]
   11722:	2800      	cmp	r0, #0
   11724:	d1f8      	bne.n	11718 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   11726:	f3bf 8f5b 	dmb	ish
   1172a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1172e:	f3bf 8f5b 	dmb	ish
   11732:	43d2      	mvns	r2, r2
   11734:	e853 1f00 	ldrex	r1, [r3]
   11738:	4011      	ands	r1, r2
   1173a:	e843 1000 	strex	r0, r1, [r3]
   1173e:	2800      	cmp	r0, #0
   11740:	d0c6      	beq.n	116d0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   11742:	e7f7      	b.n	11734 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   11744:	4b06      	ldr	r3, [pc, #24]	; (11760 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   11746:	6818      	ldr	r0, [r3, #0]
   11748:	f7fe fae2 	bl	fd10 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1174c:	e76e      	b.n	1162c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   1174e:	2500      	movs	r5, #0
   11750:	e776      	b.n	11640 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   11752:	bf00      	nop
   11754:	20001adc 	.word	0x20001adc
   11758:	000115fd 	.word	0x000115fd
   1175c:	0007a120 	.word	0x0007a120
   11760:	20001f0c 	.word	0x20001f0c

00011764 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   11764:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11768:	f7ff bf56 	b.w	11618 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

0001176c <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   1176c:	b510      	push	{r4, lr}
   1176e:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11770:	f7fe fcfa 	bl	10168 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11774:	b100      	cbz	r0, 11778 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   11776:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11778:	4620      	mov	r0, r4
   1177a:	f7ff fc8f 	bl	1109c <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   1177e:	4620      	mov	r0, r4
   11780:	f7ff fce4 	bl	1114c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11784:	4b0c      	ldr	r3, [pc, #48]	; (117b8 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   11786:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1178a:	f3bf 8f5b 	dmb	ish
   1178e:	e853 1f00 	ldrex	r1, [r3]
   11792:	4311      	orrs	r1, r2
   11794:	e843 1000 	strex	r0, r1, [r3]
   11798:	2800      	cmp	r0, #0
   1179a:	d1f8      	bne.n	1178e <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   1179c:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   117a0:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   117a4:	2b10      	cmp	r3, #16
   117a6:	d1e6      	bne.n	11776 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   117a8:	4b04      	ldr	r3, [pc, #16]	; (117bc <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   117aa:	4621      	mov	r1, r4
   117ac:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   117ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   117b2:	f7fe bacd 	b.w	fd50 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   117b6:	bf00      	nop
   117b8:	20001adc 	.word	0x20001adc
   117bc:	20001f0c 	.word	0x20001f0c

000117c0 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   117c0:	b510      	push	{r4, lr}
   117c2:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   117c4:	f7fe fcd0 	bl	10168 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   117c8:	b1a8      	cbz	r0, 117f6 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   117ca:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   117ce:	2b10      	cmp	r3, #16
   117d0:	d012      	beq.n	117f8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   117d2:	4620      	mov	r0, r4
   117d4:	f7fe fe10 	bl	103f8 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   117d8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   117dc:	4a09      	ldr	r2, [pc, #36]	; (11804 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   117de:	f3bf 8f5b 	dmb	ish
   117e2:	43db      	mvns	r3, r3
   117e4:	e852 1f00 	ldrex	r1, [r2]
   117e8:	4019      	ands	r1, r3
   117ea:	e842 1000 	strex	r0, r1, [r2]
   117ee:	2800      	cmp	r0, #0
   117f0:	d1f8      	bne.n	117e4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   117f2:	f3bf 8f5b 	dmb	ish
   117f6:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   117f8:	4b03      	ldr	r3, [pc, #12]	; (11808 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   117fa:	6818      	ldr	r0, [r3, #0]
   117fc:	f7fe fa88 	bl	fd10 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11800:	e7e7      	b.n	117d2 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   11802:	bf00      	nop
   11804:	20001adc 	.word	0x20001adc
   11808:	20001f0c 	.word	0x20001f0c

0001180c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   1180c:	6803      	ldr	r3, [r0, #0]
   1180e:	4a37      	ldr	r2, [pc, #220]	; (118ec <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   11810:	68db      	ldr	r3, [r3, #12]
   11812:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   11814:	b510      	push	{r4, lr}
   11816:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   11818:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   1181c:	d150      	bne.n	118c0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   1181e:	f7fe fca3 	bl	10168 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11822:	b1a8      	cbz	r0, 11850 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   11824:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11828:	2b10      	cmp	r3, #16
   1182a:	d059      	beq.n	118e0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   1182c:	4620      	mov	r0, r4
   1182e:	f7fe fde3 	bl	103f8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11832:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11836:	4a2e      	ldr	r2, [pc, #184]	; (118f0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11838:	f3bf 8f5b 	dmb	ish
   1183c:	43db      	mvns	r3, r3
   1183e:	e852 1f00 	ldrex	r1, [r2]
   11842:	4019      	ands	r1, r3
   11844:	e842 1000 	strex	r0, r1, [r2]
   11848:	2800      	cmp	r0, #0
   1184a:	d1f8      	bne.n	1183e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   1184c:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   11850:	6823      	ldr	r3, [r4, #0]
   11852:	4a28      	ldr	r2, [pc, #160]	; (118f4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11856:	4293      	cmp	r3, r2
   11858:	d138      	bne.n	118cc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   1185a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1185e:	2b0d      	cmp	r3, #13
   11860:	d028      	beq.n	118b4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   11862:	2b10      	cmp	r3, #16
   11864:	d037      	beq.n	118d6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   11866:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1186a:	4b21      	ldr	r3, [pc, #132]	; (118f0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   1186c:	f3bf 8f5b 	dmb	ish
   11870:	43d2      	mvns	r2, r2
   11872:	e853 1f00 	ldrex	r1, [r3]
   11876:	4011      	ands	r1, r2
   11878:	e843 1000 	strex	r0, r1, [r3]
   1187c:	2800      	cmp	r0, #0
   1187e:	d1f8      	bne.n	11872 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   11880:	f3bf 8f5b 	dmb	ish
   11884:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11888:	f3bf 8f5b 	dmb	ish
   1188c:	43d2      	mvns	r2, r2
   1188e:	e853 1f00 	ldrex	r1, [r3]
   11892:	4011      	ands	r1, r2
   11894:	e843 1000 	strex	r0, r1, [r3]
   11898:	2800      	cmp	r0, #0
   1189a:	d1f8      	bne.n	1188e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   1189c:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   118a0:	230d      	movs	r3, #13
   118a2:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   118a6:	4620      	mov	r0, r4
   118a8:	2100      	movs	r1, #0
   118aa:	f7ff fc61 	bl	11170 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   118ae:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   118b2:	b903      	cbnz	r3, 118b6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   118b4:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   118b6:	4620      	mov	r0, r4
}
   118b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   118bc:	f7ff bc46 	b.w	1114c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   118c0:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   118c2:	6823      	ldr	r3, [r4, #0]
   118c4:	4a0b      	ldr	r2, [pc, #44]	; (118f4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   118c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   118c8:	4293      	cmp	r3, r2
   118ca:	d0c6      	beq.n	1185a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   118cc:	4620      	mov	r0, r4
   118ce:	210d      	movs	r1, #13
}
   118d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   118d4:	4718      	bx	r3
        CcioMgr.LinkClose();
   118d6:	4b08      	ldr	r3, [pc, #32]	; (118f8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   118d8:	6818      	ldr	r0, [r3, #0]
   118da:	f7fe fa19 	bl	fd10 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   118de:	e7c2      	b.n	11866 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   118e0:	4b05      	ldr	r3, [pc, #20]	; (118f8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   118e2:	6818      	ldr	r0, [r3, #0]
   118e4:	f7fe fa14 	bl	fd10 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   118e8:	e7a0      	b.n	1182c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   118ea:	bf00      	nop
   118ec:	000117c1 	.word	0x000117c1
   118f0:	20001adc 	.word	0x20001adc
   118f4:	00011619 	.word	0x00011619
   118f8:	20001f0c 	.word	0x20001f0c

000118fc <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   118fc:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11900:	f7ff bf84 	b.w	1180c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

00011904 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11904:	b510      	push	{r4, lr}
            PortOpen();
   11906:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   11908:	4604      	mov	r4, r0
        if (newState) {
   1190a:	bb09      	cbnz	r1, 11950 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   1190c:	4a26      	ldr	r2, [pc, #152]	; (119a8 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   1190e:	68db      	ldr	r3, [r3, #12]
   11910:	4293      	cmp	r3, r2
   11912:	d11a      	bne.n	1194a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   11914:	f7fe fc28 	bl	10168 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11918:	b1a8      	cbz	r0, 11946 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   1191a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1191e:	2b10      	cmp	r3, #16
   11920:	d03c      	beq.n	1199c <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   11922:	4620      	mov	r0, r4
   11924:	f7fe fd68 	bl	103f8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11928:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1192c:	4a1f      	ldr	r2, [pc, #124]	; (119ac <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1192e:	f3bf 8f5b 	dmb	ish
   11932:	43db      	mvns	r3, r3
   11934:	e852 1f00 	ldrex	r1, [r2]
   11938:	4019      	ands	r1, r3
   1193a:	e842 1000 	strex	r0, r1, [r2]
   1193e:	2800      	cmp	r0, #0
   11940:	d1f8      	bne.n	11934 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   11942:	f3bf 8f5b 	dmb	ish
    }
   11946:	2001      	movs	r0, #1
   11948:	bd10      	pop	{r4, pc}
            PortClose();
   1194a:	4798      	blx	r3
    }
   1194c:	2001      	movs	r0, #1
   1194e:	bd10      	pop	{r4, pc}
   11950:	4a17      	ldr	r2, [pc, #92]	; (119b0 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   11952:	689b      	ldr	r3, [r3, #8]
   11954:	4293      	cmp	r3, r2
   11956:	d1f8      	bne.n	1194a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   11958:	f7fe fc06 	bl	10168 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   1195c:	2800      	cmp	r0, #0
   1195e:	d1f2      	bne.n	11946 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   11960:	4620      	mov	r0, r4
   11962:	f7ff fb9b 	bl	1109c <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   11966:	4620      	mov	r0, r4
   11968:	f7ff fbf0 	bl	1114c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1196c:	4b0f      	ldr	r3, [pc, #60]	; (119ac <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1196e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11972:	f3bf 8f5b 	dmb	ish
   11976:	e853 1f00 	ldrex	r1, [r3]
   1197a:	4311      	orrs	r1, r2
   1197c:	e843 1000 	strex	r0, r1, [r3]
   11980:	2800      	cmp	r0, #0
   11982:	d1f8      	bne.n	11976 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   11984:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11988:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1198c:	2b10      	cmp	r3, #16
   1198e:	d1da      	bne.n	11946 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   11990:	4b08      	ldr	r3, [pc, #32]	; (119b4 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11992:	4621      	mov	r1, r4
   11994:	6818      	ldr	r0, [r3, #0]
   11996:	f7fe f9db 	bl	fd50 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   1199a:	e7d4      	b.n	11946 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   1199c:	4b05      	ldr	r3, [pc, #20]	; (119b4 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   1199e:	6818      	ldr	r0, [r3, #0]
   119a0:	f7fe f9b6 	bl	fd10 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   119a4:	e7bd      	b.n	11922 <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   119a6:	bf00      	nop
   119a8:	000117c1 	.word	0x000117c1
   119ac:	20001adc 	.word	0x20001adc
   119b0:	0001176d 	.word	0x0001176d
   119b4:	20001f0c 	.word	0x20001f0c

000119b8 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   119b8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   119bc:	e7a2      	b.n	11904 <_ZN9ClearCore12SerialDriver5StateEs>
   119be:	bf00      	nop

000119c0 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   119c0:	7980      	ldrb	r0, [r0, #6]
   119c2:	4770      	bx	lr

000119c4 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   119c4:	f1a1 0004 	sub.w	r0, r1, #4
   119c8:	fab0 f080 	clz	r0, r0
   119cc:	0940      	lsrs	r0, r0, #5
   119ce:	4770      	bx	lr

000119d0 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   119d0:	2002      	movs	r0, #2
   119d2:	4770      	bx	lr

000119d4 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   119d4:	2001      	movs	r0, #1
   119d6:	4770      	bx	lr

000119d8 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   119d8:	2000      	movs	r0, #0
   119da:	4770      	bx	lr

000119dc <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   119dc:	4770      	bx	lr
   119de:	bf00      	nop

000119e0 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   119e0:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   119e2:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   119e4:	7183      	strb	r3, [r0, #6]
   119e6:	4770      	bx	lr

000119e8 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   119e8:	4b04      	ldr	r3, [pc, #16]	; (119fc <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   119ea:	681a      	ldr	r2, [r3, #0]
   119ec:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   119f0:	6883      	ldr	r3, [r0, #8]
   119f2:	421a      	tst	r2, r3
}
   119f4:	bf14      	ite	ne
   119f6:	2001      	movne	r0, #1
   119f8:	2000      	moveq	r0, #0
   119fa:	4770      	bx	lr
   119fc:	20001adc 	.word	0x20001adc

00011a00 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   11a00:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   11a02:	b971      	cbnz	r1, 11a22 <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11a04:	f3bf 8f5b 	dmb	ish
   11a08:	4a0d      	ldr	r2, [pc, #52]	; (11a40 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11a0a:	43db      	mvns	r3, r3
   11a0c:	e852 1f00 	ldrex	r1, [r2]
   11a10:	4019      	ands	r1, r3
   11a12:	e842 1000 	strex	r0, r1, [r2]
   11a16:	2800      	cmp	r0, #0
   11a18:	d1f8      	bne.n	11a0c <_ZN9ClearCore9LedDriver5StateEs+0xc>
   11a1a:	f3bf 8f5b 	dmb	ish
    return true;
}
   11a1e:	2001      	movs	r0, #1
   11a20:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11a22:	4a07      	ldr	r2, [pc, #28]	; (11a40 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11a24:	f3bf 8f5b 	dmb	ish
   11a28:	e852 1f00 	ldrex	r1, [r2]
   11a2c:	4319      	orrs	r1, r3
   11a2e:	e842 1000 	strex	r0, r1, [r2]
   11a32:	2800      	cmp	r0, #0
   11a34:	d1f8      	bne.n	11a28 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11a36:	f3bf 8f5b 	dmb	ish
   11a3a:	2001      	movs	r0, #1
   11a3c:	4770      	bx	lr
   11a3e:	bf00      	nop
   11a40:	20001adc 	.word	0x20001adc

00011a44 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   11a44:	b538      	push	{r3, r4, r5, lr}
   11a46:	4604      	mov	r4, r0
   11a48:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   11a4a:	f7fc ff13 	bl	e874 <_ZN9ClearCore9ConnectorC1Ev>
   11a4e:	4b02      	ldr	r3, [pc, #8]	; (11a58 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   11a50:	60a5      	str	r5, [r4, #8]
   11a52:	6023      	str	r3, [r4, #0]
   11a54:	4620      	mov	r0, r4
   11a56:	bd38      	pop	{r3, r4, r5, pc}
   11a58:	0002399c 	.word	0x0002399c

00011a5c <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   11a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   11a5e:	4d19      	ldr	r5, [pc, #100]	; (11ac4 <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   11a60:	682c      	ldr	r4, [r5, #0]
   11a62:	f014 0401 	ands.w	r4, r4, #1
   11a66:	d002      	beq.n	11a6e <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   11a68:	4b17      	ldr	r3, [pc, #92]	; (11ac8 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   11a6a:	6818      	ldr	r0, [r3, #0]
   11a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a6e:	2044      	movs	r0, #68	; 0x44
   11a70:	f001 fe66 	bl	13740 <_Znwj>
   11a74:	4a14      	ldr	r2, [pc, #80]	; (11ac8 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   11a76:	4f15      	ldr	r7, [pc, #84]	; (11acc <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   11a78:	4e15      	ldr	r6, [pc, #84]	; (11ad0 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   11a7a:	4916      	ldr	r1, [pc, #88]	; (11ad4 <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   11a7c:	6004      	str	r4, [r0, #0]
   11a7e:	2301      	movs	r3, #1
   11a80:	6044      	str	r4, [r0, #4]
   11a82:	6084      	str	r4, [r0, #8]
   11a84:	60c4      	str	r4, [r0, #12]
   11a86:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   11a88:	6144      	str	r4, [r0, #20]
   11a8a:	6184      	str	r4, [r0, #24]
   11a8c:	61c4      	str	r4, [r0, #28]
   11a8e:	6244      	str	r4, [r0, #36]	; 0x24
   11a90:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   11a94:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   11a98:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   11a9c:	6204      	str	r4, [r0, #32]
   11a9e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   11aa2:	8584      	strh	r4, [r0, #44]	; 0x2c
   11aa4:	85c4      	strh	r4, [r0, #46]	; 0x2e
   11aa6:	8604      	strh	r4, [r0, #48]	; 0x30
   11aa8:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   11aac:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   11ab0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   11ab4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   11ab8:	6347      	str	r7, [r0, #52]	; 0x34
   11aba:	6386      	str	r6, [r0, #56]	; 0x38
   11abc:	63c1      	str	r1, [r0, #60]	; 0x3c
   11abe:	6010      	str	r0, [r2, #0]
   11ac0:	602b      	str	r3, [r5, #0]
    return *instance;
}
   11ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ac4:	20001f24 	.word	0x20001f24
   11ac8:	20001f2c 	.word	0x20001f2c
   11acc:	09c400fa 	.word	0x09c400fa
   11ad0:	2cec1388 	.word	0x2cec1388
   11ad4:	09c41388 	.word	0x09c41388

00011ad8 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11ad8:	6840      	ldr	r0, [r0, #4]
   11ada:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   11ade:	4008      	ands	r0, r1
   11ae0:	4770      	bx	lr
   11ae2:	bf00      	nop

00011ae4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11ae4:	6840      	ldr	r0, [r0, #4]
   11ae6:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   11aea:	f3c0 2000 	ubfx	r0, r0, #8, #1
   11aee:	4770      	bx	lr

00011af0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   11af0:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   11af2:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   11af4:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   11af6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   11afa:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   11afc:	4802      	ldr	r0, [pc, #8]	; (11b08 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   11afe:	f7f9 fa0d 	bl	af1c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   11b02:	2001      	movs	r0, #1
   11b04:	bd08      	pop	{r3, pc}
   11b06:	bf00      	nop
   11b08:	200019e8 	.word	0x200019e8

00011b0c <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   11b0c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   11b10:	b951      	cbnz	r1, 11b28 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   11b12:	4b17      	ldr	r3, [pc, #92]	; (11b70 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   11b14:	2204      	movs	r2, #4
   11b16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   11b1a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   11b1e:	f042 0201 	orr.w	r2, r2, #1
   11b22:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   11b26:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   11b28:	1d03      	adds	r3, r0, #4
   11b2a:	f3bf 8f5b 	dmb	ish
   11b2e:	e853 2f00 	ldrex	r2, [r3]
   11b32:	f042 0208 	orr.w	r2, r2, #8
   11b36:	e843 2100 	strex	r1, r2, [r3]
   11b3a:	2900      	cmp	r1, #0
   11b3c:	d1f7      	bne.n	11b2e <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   11b3e:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   11b42:	f3bf 8f5b 	dmb	ish
   11b46:	300c      	adds	r0, #12
   11b48:	e850 3f00 	ldrex	r3, [r0]
   11b4c:	f043 0308 	orr.w	r3, r3, #8
   11b50:	e840 3200 	strex	r2, r3, [r0]
   11b54:	2a00      	cmp	r2, #0
   11b56:	d1f7      	bne.n	11b48 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   11b58:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11b5c:	4b04      	ldr	r3, [pc, #16]	; (11b70 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11b5e:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11b60:	2102      	movs	r1, #2
   11b62:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11b66:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   11b6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   11b6e:	4770      	bx	lr
   11b70:	41008000 	.word	0x41008000

00011b74 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   11b74:	4401      	add	r1, r0
   11b76:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   11b7a:	431a      	orrs	r2, r3
   11b7c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11b80:	4770      	bx	lr
   11b82:	bf00      	nop

00011b84 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   11b84:	b2cb      	uxtb	r3, r1
   11b86:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   11b88:	b510      	push	{r4, lr}
   11b8a:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   11b8c:	d505      	bpl.n	11b9a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   11b8e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   11b92:	f042 0202 	orr.w	r2, r2, #2
   11b96:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   11b9a:	0798      	lsls	r0, r3, #30
   11b9c:	d505      	bpl.n	11baa <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   11b9e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11ba2:	f042 0201 	orr.w	r2, r2, #1
   11ba6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   11baa:	075a      	lsls	r2, r3, #29
   11bac:	d505      	bpl.n	11bba <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   11bae:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11bb2:	f042 0201 	orr.w	r2, r2, #1
   11bb6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   11bba:	06d8      	lsls	r0, r3, #27
   11bbc:	d505      	bpl.n	11bca <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   11bbe:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11bc2:	f042 0204 	orr.w	r2, r2, #4
   11bc6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   11bca:	f3c1 2107 	ubfx	r1, r1, #8, #8
   11bce:	06ca      	lsls	r2, r1, #27
   11bd0:	d505      	bpl.n	11bde <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   11bd2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11bd6:	f042 0202 	orr.w	r2, r2, #2
   11bda:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   11bde:	4a14      	ldr	r2, [pc, #80]	; (11c30 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   11be0:	6812      	ldr	r2, [r2, #0]
   11be2:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   11be6:	b112      	cbz	r2, 11bee <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11be8:	f011 0f0c 	tst.w	r1, #12
   11bec:	d118      	bne.n	11c20 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   11bee:	061b      	lsls	r3, r3, #24
   11bf0:	d505      	bpl.n	11bfe <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   11bf2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   11bf6:	f043 0308 	orr.w	r3, r3, #8
   11bfa:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   11bfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11c02:	f001 fc29 	bl	13458 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   11c06:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   11c0a:	4a0a      	ldr	r2, [pc, #40]	; (11c34 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   11c0c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   11c10:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   11c14:	3300      	adds	r3, #0
   11c16:	bf18      	it	ne
   11c18:	2301      	movne	r3, #1
   11c1a:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   11c1e:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   11c20:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11c24:	f042 0204 	orr.w	r2, r2, #4
   11c28:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   11c2c:	e7df      	b.n	11bee <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11c2e:	bf00      	nop
   11c30:	20001c08 	.word	0x20001c08
   11c34:	200019e8 	.word	0x200019e8

00011c38 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   11c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c3c:	b082      	sub	sp, #8
            reg = 0;
   11c3e:	2300      	movs	r3, #0
   11c40:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11c42:	4b98      	ldr	r3, [pc, #608]	; (11ea4 <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   11c44:	6844      	ldr	r4, [r0, #4]
   11c46:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11c4a:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11c4c:	4f96      	ldr	r7, [pc, #600]	; (11ea8 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11c4e:	8a13      	ldrh	r3, [r2, #16]
   11c50:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11ec8 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   11c54:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c56:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   11c58:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11c5a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11c5c:	bf4c      	ite	mi
   11c5e:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c62:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   11c66:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   11c68:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11c6c:	4e8f      	ldr	r6, [pc, #572]	; (11eac <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c6e:	bfd4      	ite	le
   11c70:	2300      	movle	r3, #0
   11c72:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   11c74:	f363 0000 	bfi	r0, r3, #0, #1
   11c78:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11c7c:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11c7e:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c80:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11c82:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11c84:	bf4c      	ite	mi
   11c86:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c8a:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   11c8e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   11c90:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c94:	bfcc      	ite	gt
   11c96:	2300      	movgt	r3, #0
   11c98:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   11c9a:	f363 0041 	bfi	r0, r3, #1, #1
   11c9e:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11ca2:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   11ca4:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11ca8:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11caa:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11cac:	bf4c      	ite	mi
   11cae:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11cb2:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   11cb6:	428b      	cmp	r3, r1
   11cb8:	bfcc      	ite	gt
   11cba:	2300      	movgt	r3, #0
   11cbc:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   11cbe:	f363 1004 	bfi	r0, r3, #4, #1
   11cc2:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11cca:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11cce:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   11cd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11cd6:	4976      	ldr	r1, [pc, #472]	; (11eb0 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   11cd8:	4f76      	ldr	r7, [pc, #472]	; (11eb4 <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11cda:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11cdc:	43db      	mvns	r3, r3
   11cde:	b2c0      	uxtb	r0, r0
   11ce0:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11ce4:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11ce8:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11cea:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11cee:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   11cf2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11cf6:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11cfa:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11cfe:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   11d02:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11d04:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   11d08:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11d0c:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   11d10:	bf18      	it	ne
   11d12:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   11d14:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11d18:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   11d1c:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11d20:	f083 0301 	eor.w	r3, r3, #1
   11d24:	f363 0241 	bfi	r2, r3, #1, #1
   11d28:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11d2c:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11d2e:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11d32:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11d36:	b2d2      	uxtb	r2, r2
   11d38:	f361 0282 	bfi	r2, r1, #2, #1
   11d3c:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11d40:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   11d44:	4a5c      	ldr	r2, [pc, #368]	; (11eb8 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   11d46:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11d4a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11d4e:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11d52:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11d56:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11d58:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11d5c:	4857      	ldr	r0, [pc, #348]	; (11ebc <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11d5e:	f88d 1004 	strb.w	r1, [sp, #4]
   11d62:	bf18      	it	ne
   11d64:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11d66:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   11d6a:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11d6e:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11d70:	4e53      	ldr	r6, [pc, #332]	; (11ec0 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11d72:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   11d76:	f362 1345 	bfi	r3, r2, #5, #1
   11d7a:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   11d7e:	4628      	mov	r0, r5
   11d80:	9901      	ldr	r1, [sp, #4]
   11d82:	f7ff feff 	bl	11b84 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11d86:	6830      	ldr	r0, [r6, #0]
   11d88:	6803      	ldr	r3, [r0, #0]
   11d8a:	681b      	ldr	r3, [r3, #0]
   11d8c:	4543      	cmp	r3, r8
   11d8e:	f040 8084 	bne.w	11e9a <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   11d92:	7980      	ldrb	r0, [r0, #6]
   11d94:	2804      	cmp	r0, #4
   11d96:	d00c      	beq.n	11db2 <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   11d98:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11d9c:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11da0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11da4:	bf14      	ite	ne
   11da6:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11daa:	f023 0308 	biceq.w	r3, r3, #8
   11dae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11db2:	6870      	ldr	r0, [r6, #4]
   11db4:	6803      	ldr	r3, [r0, #0]
   11db6:	681b      	ldr	r3, [r3, #0]
   11db8:	4543      	cmp	r3, r8
   11dba:	d170      	bne.n	11e9e <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   11dbc:	7980      	ldrb	r0, [r0, #6]
   11dbe:	2804      	cmp	r0, #4
   11dc0:	d00c      	beq.n	11ddc <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   11dc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11dc6:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11dca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11dce:	bf14      	ite	ne
   11dd0:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11dd4:	f023 0304 	biceq.w	r3, r3, #4
   11dd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11ddc:	9a01      	ldr	r2, [sp, #4]
   11dde:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   11de2:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11de4:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   11de6:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   11dea:	f105 0210 	add.w	r2, r5, #16
   11dee:	f3bf 8f5b 	dmb	ish
   11df2:	e852 1f00 	ldrex	r1, [r2]
   11df6:	4319      	orrs	r1, r3
   11df8:	e842 1000 	strex	r0, r1, [r2]
   11dfc:	2800      	cmp	r0, #0
   11dfe:	d1f8      	bne.n	11df2 <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   11e00:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   11e04:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   11e06:	f3bf 8f5b 	dmb	ish
   11e0a:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   11e0e:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   11e12:	e853 2f00 	ldrex	r2, [r3]
   11e16:	4322      	orrs	r2, r4
   11e18:	e843 2100 	strex	r1, r2, [r3]
   11e1c:	2900      	cmp	r1, #0
   11e1e:	d1f8      	bne.n	11e12 <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   11e20:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   11e24:	f105 0308 	add.w	r3, r5, #8
   11e28:	9a01      	ldr	r2, [sp, #4]
   11e2a:	f3bf 8f5b 	dmb	ish
   11e2e:	e853 1f00 	ldrex	r1, [r3]
   11e32:	4311      	orrs	r1, r2
   11e34:	e843 1000 	strex	r0, r1, [r3]
   11e38:	2800      	cmp	r0, #0
   11e3a:	d1f8      	bne.n	11e2e <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   11e3c:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   11e40:	9b01      	ldr	r3, [sp, #4]
   11e42:	f3bf 8f5b 	dmb	ish
   11e46:	e855 2f00 	ldrex	r2, [r5]
   11e4a:	431a      	orrs	r2, r3
   11e4c:	e845 2100 	strex	r1, r2, [r5]
   11e50:	2900      	cmp	r1, #0
   11e52:	d1f8      	bne.n	11e46 <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   11e54:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11e58:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   11e5a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   11e5e:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11e62:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   11e66:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11e68:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   11e6c:	d012      	beq.n	11e94 <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   11e6e:	4c15      	ldr	r4, [pc, #84]	; (11ec4 <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   11e70:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   11e74:	f854 0b04 	ldr.w	r0, [r4], #4
   11e78:	f7f3 fa36 	bl	52e8 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11e7c:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   11e7e:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11e82:	d1f7      	bne.n	11e74 <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   11e84:	6830      	ldr	r0, [r6, #0]
   11e86:	f7fc fdbb 	bl	ea00 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   11e8a:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   11e8e:	6870      	ldr	r0, [r6, #4]
   11e90:	f7fc fdb6 	bl	ea00 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   11e94:	b002      	add	sp, #8
   11e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11e9a:	4798      	blx	r3
   11e9c:	e77a      	b.n	11d94 <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11e9e:	4798      	blx	r3
   11ea0:	e78d      	b.n	11dbe <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   11ea2:	bf00      	nop
   11ea4:	20001e14 	.word	0x20001e14
   11ea8:	41008000 	.word	0x41008000
   11eac:	20001c08 	.word	0x20001c08
   11eb0:	20001f0c 	.word	0x20001f0c
   11eb4:	200019e8 	.word	0x200019e8
   11eb8:	2000189c 	.word	0x2000189c
   11ebc:	20001f34 	.word	0x20001f34
   11ec0:	00023240 	.word	0x00023240
   11ec4:	00023248 	.word	0x00023248
   11ec8:	0000e989 	.word	0x0000e989

00011ecc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   11ecc:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   11ece:	b94a      	cbnz	r2, 11ee4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11ed0:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11ed4:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11ed6:	6983      	ldr	r3, [r0, #24]
   11ed8:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11eda:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   11edc:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11ede:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11ee0:	6181      	str	r1, [r0, #24]
   11ee2:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11ee4:	4319      	orrs	r1, r3
   11ee6:	e7f5      	b.n	11ed4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011ee8 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11ee8:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   11eea:	f7ff fdb7 	bl	11a5c <_ZN9ClearCore13StatusManager8InstanceEv>
   11eee:	4b01      	ldr	r3, [pc, #4]	; (11ef4 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11ef0:	6018      	str	r0, [r3, #0]
   11ef2:	bd08      	pop	{r3, pc}
   11ef4:	20001f28 	.word	0x20001f28

00011ef8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11ef8:	b530      	push	{r4, r5, lr}
   11efa:	b083      	sub	sp, #12
   11efc:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11f00:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11f02:	9401      	str	r4, [sp, #4]
   11f04:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11f06:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11f08:	f7ff f8d4 	bl	110b4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11f0c:	4b04      	ldr	r3, [pc, #16]	; (11f20 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11f0e:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11f10:	4620      	mov	r0, r4
   11f12:	2100      	movs	r1, #0
   11f14:	f7ff f92c 	bl	11170 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11f18:	4620      	mov	r0, r4
   11f1a:	b003      	add	sp, #12
   11f1c:	bd30      	pop	{r4, r5, pc}
   11f1e:	bf00      	nop
   11f20:	000231ec 	.word	0x000231ec

00011f24 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11f24:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11f26:	4d0f      	ldr	r5, [pc, #60]	; (11f64 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11f28:	682b      	ldr	r3, [r5, #0]
   11f2a:	f013 0401 	ands.w	r4, r3, #1
   11f2e:	d002      	beq.n	11f36 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11f30:	4b0d      	ldr	r3, [pc, #52]	; (11f68 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11f32:	6818      	ldr	r0, [r3, #0]
   11f34:	bd38      	pop	{r3, r4, r5, pc}
   11f36:	f44f 7002 	mov.w	r0, #520	; 0x208
   11f3a:	f001 fc01 	bl	13740 <_Znwj>
   11f3e:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11f40:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11f44:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11f48:	4908      	ldr	r1, [pc, #32]	; (11f6c <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   11f4a:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   11f4e:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   11f52:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   11f56:	f00c fbd3 	bl	1e700 <memcpy>
    static NvmManager *instance = new NvmManager();
   11f5a:	4903      	ldr	r1, [pc, #12]	; (11f68 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11f5c:	2201      	movs	r2, #1
   11f5e:	6008      	str	r0, [r1, #0]
   11f60:	602a      	str	r2, [r5, #0]
}
   11f62:	bd38      	pop	{r3, r4, r5, pc}
   11f64:	20001f30 	.word	0x20001f30
   11f68:	20001f38 	.word	0x20001f38
   11f6c:	00804000 	.word	0x00804000

00011f70 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   11f70:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   11f74:	bf9a      	itte	ls
   11f76:	1840      	addls	r0, r0, r1
   11f78:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   11f7c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   11f80:	4770      	bx	lr
   11f82:	bf00      	nop

00011f84 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   11f84:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   11f86:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   11f8a:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   11f8e:	2400      	movs	r4, #0
   11f90:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   11f94:	1c6b      	adds	r3, r5, #1
   11f96:	bf08      	it	eq
   11f98:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11f9c:	d005      	beq.n	11faa <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   11f9e:	0c2e      	lsrs	r6, r5, #16
   11fa0:	4627      	mov	r7, r4
   11fa2:	ea56 0007 	orrs.w	r0, r6, r7
   11fa6:	462b      	mov	r3, r5
   11fa8:	d002      	beq.n	11fb0 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   11faa:	4a07      	ldr	r2, [pc, #28]	; (11fc8 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   11fac:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11fb0:	0a1e      	lsrs	r6, r3, #8
   11fb2:	0e15      	lsrs	r5, r2, #24
   11fb4:	0c14      	lsrs	r4, r2, #16
   11fb6:	0a10      	lsrs	r0, r2, #8
   11fb8:	700e      	strb	r6, [r1, #0]
   11fba:	708d      	strb	r5, [r1, #2]
   11fbc:	70cc      	strb	r4, [r1, #3]
   11fbe:	704b      	strb	r3, [r1, #1]
   11fc0:	714a      	strb	r2, [r1, #5]
   11fc2:	7108      	strb	r0, [r1, #4]
    }
}
   11fc4:	bcf0      	pop	{r4, r5, r6, r7}
   11fc6:	4770      	bx	lr
   11fc8:	10b00000 	.word	0x10b00000

00011fcc <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11fcc:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11fce:	f7ff ffa9 	bl	11f24 <_ZN9ClearCore10NvmManager8InstanceEv>
   11fd2:	4b01      	ldr	r3, [pc, #4]	; (11fd8 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11fd4:	6018      	str	r0, [r3, #0]
   11fd6:	bd08      	pop	{r3, pc}
   11fd8:	20001f34 	.word	0x20001f34

00011fdc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11fdc:	2000      	movs	r0, #0
   11fde:	4770      	bx	lr

00011fe0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fe4:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11fe6:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11fe8:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11fea:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11fee:	2900      	cmp	r1, #0
   11ff0:	d04f      	beq.n	12092 <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11ff2:	4b55      	ldr	r3, [pc, #340]	; (12148 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ff4:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11ff8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ffc:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   12000:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   12002:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   12004:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12008:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   1200a:	f000 8095 	beq.w	12138 <_usb_d_dev_in_next+0x158>
   1200e:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12012:	f895 c013 	ldrb.w	ip, [r5, #19]
   12016:	401a      	ands	r2, r3
   12018:	b292      	uxth	r2, r2
   1201a:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1201e:	0163      	lsls	r3, r4, #5
   12020:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   12024:	2602      	movs	r6, #2
   12026:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   1202a:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   1202c:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   1202e:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   12030:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   12032:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   12034:	d235      	bcs.n	120a2 <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   12036:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   12038:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   1203c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   1203e:	d05e      	beq.n	120fe <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   12040:	682b      	ldr	r3, [r5, #0]
   12042:	68e8      	ldr	r0, [r5, #12]
   12044:	4576      	cmp	r6, lr
   12046:	bf28      	it	cs
   12048:	4676      	movcs	r6, lr
   1204a:	4419      	add	r1, r3
   1204c:	4632      	mov	r2, r6
   1204e:	f00c fb57 	bl	1e700 <memcpy>
	bank->ADDR.reg          = addr;
   12052:	4b3d      	ldr	r3, [pc, #244]	; (12148 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   12054:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   12056:	0162      	lsls	r2, r4, #5
   12058:	1899      	adds	r1, r3, r2
   1205a:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   1205c:	4413      	add	r3, r2
   1205e:	6959      	ldr	r1, [r3, #20]
   12060:	f366 010d 	bfi	r1, r6, #0, #14
   12064:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   12066:	6959      	ldr	r1, [r3, #20]
   12068:	f36f 319b 	bfc	r1, #14, #14
   1206c:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   1206e:	b947      	cbnz	r7, 12082 <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12070:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   12074:	f1b8 0f01 	cmp.w	r8, #1
   12078:	bf14      	ite	ne
   1207a:	224a      	movne	r2, #74	; 0x4a
   1207c:	224e      	moveq	r2, #78	; 0x4e
   1207e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12082:	0164      	lsls	r4, r4, #5
   12084:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   12088:	2380      	movs	r3, #128	; 0x80
   1208a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   1208e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12092:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   12096:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   1209a:	f00c 0807 	and.w	r8, ip, #7
   1209e:	460a      	mov	r2, r1
   120a0:	e7c3      	b.n	1202a <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   120a2:	f01c 0f10 	tst.w	ip, #16
   120a6:	d11a      	bne.n	120de <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   120a8:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   120aa:	f1b8 0f01 	cmp.w	r8, #1
   120ae:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   120b2:	bf0c      	ite	eq
   120b4:	234b      	moveq	r3, #75	; 0x4b
   120b6:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   120b8:	4596      	cmp	lr, r2
   120ba:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   120be:	d02c      	beq.n	1211a <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   120c0:	28ff      	cmp	r0, #255	; 0xff
   120c2:	d028      	beq.n	12116 <_usb_d_dev_in_next+0x136>
   120c4:	7ceb      	ldrb	r3, [r5, #19]
   120c6:	065a      	lsls	r2, r3, #25
   120c8:	d525      	bpl.n	12116 <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   120ca:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   120ce:	491f      	ldr	r1, [pc, #124]	; (1214c <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   120d0:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   120d2:	68aa      	ldr	r2, [r5, #8]
   120d4:	690b      	ldr	r3, [r1, #16]
}
   120d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   120da:	2100      	movs	r1, #0
   120dc:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   120de:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   120e0:	4b1b      	ldr	r3, [pc, #108]	; (12150 <_usb_d_dev_in_next+0x170>)
   120e2:	0162      	lsls	r2, r4, #5
   120e4:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   120e6:	f36f 1104 	bfc	r1, #4, #1
   120ea:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   120ec:	6859      	ldr	r1, [r3, #4]
   120ee:	f36f 010d 	bfc	r1, #0, #14
   120f2:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   120f4:	6859      	ldr	r1, [r3, #4]
   120f6:	f36f 319b 	bfc	r1, #14, #14
   120fa:	6059      	str	r1, [r3, #4]
   120fc:	e7b7      	b.n	1206e <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   120fe:	4b12      	ldr	r3, [pc, #72]	; (12148 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12100:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   12102:	0162      	lsls	r2, r4, #5
   12104:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12106:	4401      	add	r1, r0
   12108:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   1210c:	bf28      	it	cs
   1210e:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   12112:	6129      	str	r1, [r5, #16]
   12114:	e7a2      	b.n	1205c <_usb_d_dev_in_next+0x7c>
   12116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   1211a:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   1211c:	4a0b      	ldr	r2, [pc, #44]	; (1214c <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   1211e:	f36f 1386 	bfc	r3, #6, #1
   12122:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   12124:	68d3      	ldr	r3, [r2, #12]
   12126:	4798      	blx	r3
   12128:	2800      	cmp	r0, #0
   1212a:	d1f4      	bne.n	12116 <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   1212c:	7ceb      	ldrb	r3, [r5, #19]
   1212e:	7ca8      	ldrb	r0, [r5, #18]
   12130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12134:	74eb      	strb	r3, [r5, #19]
   12136:	e7c3      	b.n	120c0 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12138:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   1213c:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12140:	f00c 0807 	and.w	r8, ip, #7
   12144:	e76b      	b.n	1201e <_usb_d_dev_in_next+0x3e>
   12146:	bf00      	nop
   12148:	2000222c 	.word	0x2000222c
   1214c:	20001ffc 	.word	0x20001ffc
   12150:	2000223c 	.word	0x2000223c

00012154 <_usb_d_dev_out_next>:
{
   12154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   12158:	7c85      	ldrb	r5, [r0, #18]
{
   1215a:	b083      	sub	sp, #12
   1215c:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1215e:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   12160:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12164:	2900      	cmp	r1, #0
   12166:	f000 8085 	beq.w	12274 <_usb_d_dev_out_next+0x120>
   1216a:	4b76      	ldr	r3, [pc, #472]	; (12344 <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1216c:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1216e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12172:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12174:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12178:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   1217a:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1217c:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1217e:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12182:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12186:	f000 80d7 	beq.w	12338 <_usb_d_dev_out_next+0x1e4>
   1218a:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1218c:	7cc2      	ldrb	r2, [r0, #19]
   1218e:	b2b6      	uxth	r6, r6
   12190:	ea09 0306 	and.w	r3, r9, r6
   12194:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12198:	0169      	lsls	r1, r5, #5
   1219a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   1219e:	2001      	movs	r0, #1
   121a0:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   121a4:	0691      	lsls	r1, r2, #26
   121a6:	d512      	bpl.n	121ce <_usb_d_dev_out_next+0x7a>
   121a8:	f8d4 e004 	ldr.w	lr, [r4, #4]
   121ac:	f1be 0f00 	cmp.w	lr, #0
   121b0:	d048      	beq.n	12244 <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   121b2:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   121b4:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   121b6:	ebae 0200 	sub.w	r2, lr, r0
   121ba:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   121bc:	429a      	cmp	r2, r3
   121be:	bf28      	it	cs
   121c0:	461a      	movcs	r2, r3
   121c2:	6823      	ldr	r3, [r4, #0]
   121c4:	68e1      	ldr	r1, [r4, #12]
   121c6:	4418      	add	r0, r3
   121c8:	f00c fa9a 	bl	1e700 <memcpy>
   121cc:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   121ce:	6862      	ldr	r2, [r4, #4]
   121d0:	2a00      	cmp	r2, #0
   121d2:	d036      	beq.n	12242 <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   121d4:	2f00      	cmp	r7, #0
   121d6:	d15b      	bne.n	12290 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   121d8:	68a3      	ldr	r3, [r4, #8]
   121da:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   121dc:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   121de:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   121e0:	d960      	bls.n	122a4 <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   121e2:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   121e4:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   121e6:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   121e8:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   121ea:	f140 808b 	bpl.w	12304 <_usb_d_dev_out_next+0x1b0>
   121ee:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   121f0:	4954      	ldr	r1, [pc, #336]	; (12344 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   121f2:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   121f4:	f841 3008 	str.w	r3, [r1, r8]
   121f8:	42b2      	cmp	r2, r6
   121fa:	bf28      	it	cs
   121fc:	4632      	movcs	r2, r6
   121fe:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12202:	eb01 0308 	add.w	r3, r1, r8
   12206:	6858      	ldr	r0, [r3, #4]
   12208:	f362 309b 	bfi	r0, r2, #14, #14
   1220c:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   1220e:	685a      	ldr	r2, [r3, #4]
   12210:	f36f 020d 	bfc	r2, #0, #14
   12214:	605a      	str	r2, [r3, #4]
	if (!isr) {
   12216:	b95f      	cbnz	r7, 12230 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   12218:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   1221c:	bf08      	it	eq
   1221e:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12220:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   12224:	bf0a      	itet	eq
   12226:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   12228:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   1222a:	768f      	strbeq	r7, [r1, #26]
   1222c:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12230:	016d      	lsls	r5, r5, #5
   12232:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   12236:	2340      	movs	r3, #64	; 0x40
   12238:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   1223c:	b003      	add	sp, #12
   1223e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12242:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   12244:	06d6      	lsls	r6, r2, #27
   12246:	d54b      	bpl.n	122e0 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   12248:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   1224a:	493e      	ldr	r1, [pc, #248]	; (12344 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   1224c:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   1224e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12252:	f043 0320 	orr.w	r3, r3, #32
   12256:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   12258:	f841 2008 	str.w	r2, [r1, r8]
   1225c:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12260:	8a20      	ldrh	r0, [r4, #16]
   12262:	685a      	ldr	r2, [r3, #4]
   12264:	f360 329b 	bfi	r2, r0, #14, #14
   12268:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   1226a:	685a      	ldr	r2, [r3, #4]
   1226c:	f36f 020d 	bfc	r2, #0, #14
   12270:	605a      	str	r2, [r3, #4]
   12272:	e7d0      	b.n	12216 <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12274:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12276:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12278:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1227c:	429e      	cmp	r6, r3
   1227e:	d137      	bne.n	122f0 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12280:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12282:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   12286:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12288:	46b9      	mov	r9, r7
   1228a:	ea4f 1845 	mov.w	r8, r5, lsl #5
   1228e:	e789      	b.n	121a4 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   12290:	8a21      	ldrh	r1, [r4, #16]
   12292:	4299      	cmp	r1, r3
   12294:	d9a0      	bls.n	121d8 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   12296:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   12298:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   1229a:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   1229e:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   122a0:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   122a2:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   122a4:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122a8:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   122ac:	bf0c      	ite	eq
   122ae:	232d      	moveq	r3, #45	; 0x2d
   122b0:	2325      	movne	r3, #37	; 0x25
   122b2:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   122b6:	b915      	cbnz	r5, 122be <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   122b8:	4b22      	ldr	r3, [pc, #136]	; (12344 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   122ba:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   122bc:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   122be:	7ca0      	ldrb	r0, [r4, #18]
   122c0:	28ff      	cmp	r0, #255	; 0xff
   122c2:	d0bb      	beq.n	1223c <_usb_d_dev_out_next+0xe8>
   122c4:	7ce3      	ldrb	r3, [r4, #19]
   122c6:	065a      	lsls	r2, r3, #25
   122c8:	d5b8      	bpl.n	1223c <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   122ca:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122ce:	491e      	ldr	r1, [pc, #120]	; (12348 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   122d0:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122d2:	690b      	ldr	r3, [r1, #16]
   122d4:	68a2      	ldr	r2, [r4, #8]
   122d6:	2100      	movs	r1, #0
}
   122d8:	b003      	add	sp, #12
   122da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122de:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   122e0:	b117      	cbz	r7, 122e8 <_usb_d_dev_out_next+0x194>
   122e2:	8a22      	ldrh	r2, [r4, #16]
   122e4:	429a      	cmp	r2, r3
   122e6:	d8d6      	bhi.n	12296 <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   122e8:	68a3      	ldr	r3, [r4, #8]
   122ea:	4453      	add	r3, sl
   122ec:	60a3      	str	r3, [r4, #8]
   122ee:	e7d9      	b.n	122a4 <_usb_d_dev_out_next+0x150>
   122f0:	3e01      	subs	r6, #1
   122f2:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   122f4:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   122f8:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   122fa:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   122fc:	4689      	mov	r9, r1
   122fe:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12302:	e74f      	b.n	121a4 <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   12304:	8a20      	ldrh	r0, [r4, #16]
   12306:	4282      	cmp	r2, r0
   12308:	d905      	bls.n	12316 <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   1230a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1230e:	d90e      	bls.n	1232e <_usb_d_dev_out_next+0x1da>
   12310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   12314:	e005      	b.n	12322 <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   12316:	bf3c      	itt	cc
   12318:	f041 0120 	orrcc.w	r1, r1, #32
   1231c:	74e1      	strbcc	r1, [r4, #19]
   1231e:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12322:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   12324:	4907      	ldr	r1, [pc, #28]	; (12344 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12326:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   12328:	f841 3008 	str.w	r3, [r1, r8]
   1232c:	e769      	b.n	12202 <_usb_d_dev_out_next+0xae>
   1232e:	ea22 0206 	bic.w	r2, r2, r6
   12332:	f3c2 020d 	ubfx	r2, r2, #0, #14
   12336:	e7f4      	b.n	12322 <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12338:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   1233a:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1233e:	f002 0b07 	and.w	fp, r2, #7
   12342:	e729      	b.n	12198 <_usb_d_dev_out_next+0x44>
   12344:	2000222c 	.word	0x2000222c
   12348:	20001ffc 	.word	0x20001ffc

0001234c <_usb_d_dev_handler>:
{
   1234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   12350:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   12354:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   12356:	8c16      	ldrh	r6, [r2, #32]
   12358:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   1235a:	2e00      	cmp	r6, #0
   1235c:	f000 812c 	beq.w	125b8 <_usb_d_dev_handler+0x26c>
   12360:	4dc4      	ldr	r5, [pc, #784]	; (12674 <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12362:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   12364:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   12366:	7ca8      	ldrb	r0, [r5, #18]
   12368:	28ff      	cmp	r0, #255	; 0xff
   1236a:	d030      	beq.n	123ce <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1236c:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   12370:	fa07 f203 	lsl.w	r2, r7, r3
   12374:	4232      	tst	r2, r6
   12376:	d02a      	beq.n	123ce <_usb_d_dev_handler+0x82>
   12378:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   1237c:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12380:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   12382:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12386:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   1238a:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   1238c:	46c1      	mov	r9, r8
	if (flags) {
   1238e:	d01e      	beq.n	123ce <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   12390:	49b9      	ldr	r1, [pc, #740]	; (12678 <_usb_d_dev_handler+0x32c>)
   12392:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   12396:	eb0a 0c04 	add.w	ip, sl, r4
   1239a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   1239e:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   123a2:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   123a6:	2901      	cmp	r1, #1
   123a8:	f000 80f4 	beq.w	12594 <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   123ac:	f01b 0f80 	tst.w	fp, #128	; 0x80
   123b0:	d115      	bne.n	123de <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   123b2:	f013 0120 	ands.w	r1, r3, #32
   123b6:	d15a      	bne.n	1246e <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   123b8:	f013 0f04 	tst.w	r3, #4
   123bc:	f040 8098 	bne.w	124f0 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   123c0:	07d9      	lsls	r1, r3, #31
   123c2:	f100 80e2 	bmi.w	1258a <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   123c6:	f00b 0107 	and.w	r1, fp, #7
   123ca:	2901      	cmp	r1, #1
   123cc:	d058      	beq.n	12480 <_usb_d_dev_handler+0x134>
   123ce:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   123d0:	2c1b      	cmp	r4, #27
   123d2:	f105 0514 	add.w	r5, r5, #20
   123d6:	d1c6      	bne.n	12366 <_usb_d_dev_handler+0x1a>
}
   123d8:	b001      	add	sp, #4
   123da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   123de:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   123e2:	f040 8143 	bne.w	1266c <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   123e6:	f013 0f08 	tst.w	r3, #8
   123ea:	f040 8189 	bne.w	12700 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   123ee:	0799      	lsls	r1, r3, #30
   123f0:	f100 8137 	bmi.w	12662 <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   123f4:	f00b 0107 	and.w	r1, fp, #7
   123f8:	2901      	cmp	r1, #1
   123fa:	d1e8      	bne.n	123ce <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   123fc:	0759      	lsls	r1, r3, #29
   123fe:	f100 8241 	bmi.w	12884 <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12402:	06db      	lsls	r3, r3, #27
   12404:	d5e3      	bpl.n	123ce <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12406:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1240a:	d011      	beq.n	12430 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1240c:	499a      	ldr	r1, [pc, #616]	; (12678 <_usb_d_dev_handler+0x32c>)
   1240e:	eb0a 0304 	add.w	r3, sl, r4
   12412:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12416:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1241a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1241e:	f36f 1186 	bfc	r1, #6, #1
   12422:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12426:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12428:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1242c:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12430:	4b91      	ldr	r3, [pc, #580]	; (12678 <_usb_d_dev_handler+0x32c>)
   12432:	eb0a 0104 	add.w	r1, sl, r4
   12436:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   1243a:	4b90      	ldr	r3, [pc, #576]	; (1267c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   1243c:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12440:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12444:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12448:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1244c:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12450:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12454:	216f      	movs	r1, #111	; 0x6f
   12456:	f88e c00a 	strb.w	ip, [lr, #10]
   1245a:	f88e c01a 	strb.w	ip, [lr, #26]
   1245e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12462:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12466:	4b84      	ldr	r3, [pc, #528]	; (12678 <_usb_d_dev_handler+0x32c>)
   12468:	689b      	ldr	r3, [r3, #8]
   1246a:	4798      	blx	r3
   1246c:	e7af      	b.n	123ce <_usb_d_dev_handler+0x82>
   1246e:	68aa      	ldr	r2, [r5, #8]
   12470:	2320      	movs	r3, #32
   12472:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12476:	4b80      	ldr	r3, [pc, #512]	; (12678 <_usb_d_dev_handler+0x32c>)
   12478:	2101      	movs	r1, #1
   1247a:	691b      	ldr	r3, [r3, #16]
   1247c:	4798      	blx	r3
   1247e:	e7a6      	b.n	123ce <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12480:	0719      	lsls	r1, r3, #28
   12482:	f100 80fd 	bmi.w	12680 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12486:	06db      	lsls	r3, r3, #27
   12488:	d5a1      	bpl.n	123ce <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1248a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1248e:	d011      	beq.n	124b4 <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   12490:	4979      	ldr	r1, [pc, #484]	; (12678 <_usb_d_dev_handler+0x32c>)
   12492:	eb0a 0304 	add.w	r3, sl, r4
   12496:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1249a:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1249e:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   124a2:	f36f 1186 	bfc	r1, #6, #1
   124a6:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   124aa:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   124ac:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   124b0:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   124b4:	4b70      	ldr	r3, [pc, #448]	; (12678 <_usb_d_dev_handler+0x32c>)
   124b6:	eb0a 0104 	add.w	r1, sl, r4
   124ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   124be:	4b6f      	ldr	r3, [pc, #444]	; (1267c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   124c0:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   124c4:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   124c8:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124cc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   124d0:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124d4:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   124d6:	2100      	movs	r1, #0
   124d8:	f88e 100a 	strb.w	r1, [lr, #10]
   124dc:	f88e 101a 	strb.w	r1, [lr, #26]
   124e0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124e4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   124e8:	4b63      	ldr	r3, [pc, #396]	; (12678 <_usb_d_dev_handler+0x32c>)
   124ea:	689b      	ldr	r3, [r3, #8]
   124ec:	4798      	blx	r3
   124ee:	e76e      	b.n	123ce <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   124f0:	4b62      	ldr	r3, [pc, #392]	; (1267c <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   124f2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   124f6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124f8:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   124fc:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12500:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12504:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12506:	d07c      	beq.n	12602 <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   12508:	f013 0302 	ands.w	r3, r3, #2
   1250c:	d032      	beq.n	12574 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1250e:	f89e 100a 	ldrb.w	r1, [lr, #10]
   12512:	f36f 0141 	bfc	r1, #1, #1
   12516:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1251a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1251e:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12522:	2204      	movs	r2, #4
   12524:	2901      	cmp	r1, #1
   12526:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1252a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1252e:	f47f af4e 	bne.w	123ce <_usb_d_dev_handler+0x82>
   12532:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12536:	f43f af4a 	beq.w	123ce <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   1253a:	494f      	ldr	r1, [pc, #316]	; (12678 <_usb_d_dev_handler+0x32c>)
   1253c:	eb0a 0204 	add.w	r2, sl, r4
   12540:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   12544:	3220      	adds	r2, #32
   12546:	79d1      	ldrb	r1, [r2, #7]
   12548:	09c9      	lsrs	r1, r1, #7
   1254a:	f43f af40 	beq.w	123ce <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1254e:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12550:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12554:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12558:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1255c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12560:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12562:	4b45      	ldr	r3, [pc, #276]	; (12678 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12564:	f36f 1186 	bfc	r1, #6, #1
   12568:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1256a:	691b      	ldr	r3, [r3, #16]
   1256c:	68aa      	ldr	r2, [r5, #8]
   1256e:	2100      	movs	r1, #0
   12570:	4798      	blx	r3
   12572:	e72c      	b.n	123ce <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   12574:	4941      	ldr	r1, [pc, #260]	; (1267c <_usb_d_dev_handler+0x330>)
   12576:	1888      	adds	r0, r1, r2
   12578:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1257c:	2104      	movs	r1, #4
   1257e:	7283      	strb	r3, [r0, #10]
   12580:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12584:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12588:	e721      	b.n	123ce <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   1258a:	2101      	movs	r1, #1
   1258c:	4628      	mov	r0, r5
   1258e:	f7ff fde1 	bl	12154 <_usb_d_dev_out_next>
   12592:	e71c      	b.n	123ce <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12594:	f013 0f10 	tst.w	r3, #16
   12598:	f040 80e0 	bne.w	1275c <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   1259c:	065a      	lsls	r2, r3, #25
   1259e:	f100 80e7 	bmi.w	12770 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   125a2:	069b      	lsls	r3, r3, #26
   125a4:	f57f af13 	bpl.w	123ce <_usb_d_dev_handler+0x82>
   125a8:	2320      	movs	r3, #32
   125aa:	68aa      	ldr	r2, [r5, #8]
   125ac:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   125b0:	4b31      	ldr	r3, [pc, #196]	; (12678 <_usb_d_dev_handler+0x32c>)
   125b2:	691b      	ldr	r3, [r3, #16]
   125b4:	4798      	blx	r3
   125b6:	e70a      	b.n	123ce <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   125b8:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   125ba:	8b13      	ldrh	r3, [r2, #24]
   125bc:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   125be:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   125c0:	f013 0004 	ands.w	r0, r3, #4
   125c4:	f040 80dc 	bne.w	12780 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   125c8:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   125cc:	f040 80e0 	bne.w	12790 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   125d0:	0618      	lsls	r0, r3, #24
   125d2:	f100 8140 	bmi.w	12856 <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   125d6:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   125da:	f040 8191 	bne.w	12900 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   125de:	f013 0108 	ands.w	r1, r3, #8
   125e2:	f040 819e 	bne.w	12922 <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   125e6:	07db      	lsls	r3, r3, #31
   125e8:	f57f aeba 	bpl.w	12360 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125ec:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   125f0:	4821      	ldr	r0, [pc, #132]	; (12678 <_usb_d_dev_handler+0x32c>)
   125f2:	8393      	strh	r3, [r2, #28]
   125f4:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   125f6:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125f8:	2570      	movs	r5, #112	; 0x70
   125fa:	2004      	movs	r0, #4
   125fc:	8315      	strh	r5, [r2, #24]
   125fe:	4623      	mov	r3, r4
   12600:	e0de      	b.n	127c0 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12602:	f013 0f01 	tst.w	r3, #1
   12606:	f43f af7f 	beq.w	12508 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1260a:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1260e:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12612:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12616:	f04f 0104 	mov.w	r1, #4
   1261a:	f88e 300a 	strb.w	r3, [lr, #10]
   1261e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12622:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12626:	f43f aed2 	beq.w	123ce <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1262a:	4b13      	ldr	r3, [pc, #76]	; (12678 <_usb_d_dev_handler+0x32c>)
   1262c:	eb0a 0104 	add.w	r1, sl, r4
   12630:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12634:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12638:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1263c:	2240      	movs	r2, #64	; 0x40
   1263e:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12642:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12646:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   1264a:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1264e:	4b0a      	ldr	r3, [pc, #40]	; (12678 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12650:	f36f 1286 	bfc	r2, #6, #1
   12654:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12658:	691b      	ldr	r3, [r3, #16]
   1265a:	68aa      	ldr	r2, [r5, #8]
   1265c:	2104      	movs	r1, #4
   1265e:	4798      	blx	r3
   12660:	e6b5      	b.n	123ce <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   12662:	2101      	movs	r1, #1
   12664:	4628      	mov	r0, r5
   12666:	f7ff fcbb 	bl	11fe0 <_usb_d_dev_in_next>
   1266a:	e6b0      	b.n	123ce <_usb_d_dev_handler+0x82>
   1266c:	68aa      	ldr	r2, [r5, #8]
   1266e:	2340      	movs	r3, #64	; 0x40
   12670:	e6ff      	b.n	12472 <_usb_d_dev_handler+0x126>
   12672:	bf00      	nop
   12674:	20002010 	.word	0x20002010
   12678:	20001ffc 	.word	0x20001ffc
   1267c:	2000222c 	.word	0x2000222c
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12680:	4bc3      	ldr	r3, [pc, #780]	; (12990 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12682:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12686:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12688:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1268c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12690:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12692:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12694:	f000 8098 	beq.w	127c8 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   12698:	f013 0302 	ands.w	r3, r3, #2
   1269c:	d053      	beq.n	12746 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1269e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126a2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   126a6:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126aa:	2208      	movs	r2, #8
   126ac:	f88e 101a 	strb.w	r1, [lr, #26]
   126b0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126b4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   126b8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   126bc:	f43f ae87 	beq.w	123ce <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   126c0:	4ab4      	ldr	r2, [pc, #720]	; (12994 <_usb_d_dev_handler+0x648>)
   126c2:	eb0a 0e04 	add.w	lr, sl, r4
   126c6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   126ca:	f10e 0e20 	add.w	lr, lr, #32
   126ce:	f89e 1007 	ldrb.w	r1, [lr, #7]
   126d2:	09c9      	lsrs	r1, r1, #7
   126d4:	f47f ae7b 	bne.w	123ce <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126d8:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   126da:	f04f 0c40 	mov.w	ip, #64	; 0x40
   126de:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126e2:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126e6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   126ea:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   126ee:	4ba9      	ldr	r3, [pc, #676]	; (12994 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   126f0:	f361 1286 	bfi	r2, r1, #6, #1
   126f4:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   126f8:	691b      	ldr	r3, [r3, #16]
   126fa:	68aa      	ldr	r2, [r5, #8]
   126fc:	4798      	blx	r3
   126fe:	e666      	b.n	123ce <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12700:	4ba3      	ldr	r3, [pc, #652]	; (12990 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12702:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   12706:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12708:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1270c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12710:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12714:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12716:	d07a      	beq.n	1280e <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   12718:	f013 0302 	ands.w	r3, r3, #2
   1271c:	d013      	beq.n	12746 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1271e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12722:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12726:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1272a:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1272e:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12732:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12734:	f88e 101a 	strb.w	r1, [lr, #26]
   12738:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1273c:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12740:	f47f ae45 	bne.w	123ce <_usb_d_dev_handler+0x82>
   12744:	e7b8      	b.n	126b8 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   12746:	4992      	ldr	r1, [pc, #584]	; (12990 <_usb_d_dev_handler+0x644>)
   12748:	1888      	adds	r0, r1, r2
   1274a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1274e:	2108      	movs	r1, #8
   12750:	7683      	strb	r3, [r0, #26]
   12752:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12756:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   1275a:	e638      	b.n	123ce <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   1275c:	f00b 0307 	and.w	r3, fp, #7
   12760:	2b01      	cmp	r3, #1
   12762:	d07e      	beq.n	12862 <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12764:	2310      	movs	r3, #16
   12766:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   1276a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   1276e:	e62e      	b.n	123ce <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12770:	2340      	movs	r3, #64	; 0x40
   12772:	68aa      	ldr	r2, [r5, #8]
   12774:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12778:	4b86      	ldr	r3, [pc, #536]	; (12994 <_usb_d_dev_handler+0x648>)
   1277a:	691b      	ldr	r3, [r3, #16]
   1277c:	4798      	blx	r3
   1277e:	e626      	b.n	123ce <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12780:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   12782:	4b84      	ldr	r3, [pc, #528]	; (12994 <_usb_d_dev_handler+0x648>)
   12784:	8391      	strh	r1, [r2, #28]
   12786:	681b      	ldr	r3, [r3, #0]
}
   12788:	b001      	add	sp, #4
   1278a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   1278e:	4718      	bx	r3
   12790:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12794:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12796:	4b7e      	ldr	r3, [pc, #504]	; (12990 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12798:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1279a:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1279c:	8314      	strh	r4, [r2, #24]
   1279e:	891a      	ldrh	r2, [r3, #8]
   127a0:	f002 020f 	and.w	r2, r2, #15
   127a4:	2a03      	cmp	r2, #3
   127a6:	f000 8128 	beq.w	129fa <_usb_d_dev_handler+0x6ae>
   127aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   127ac:	f002 020f 	and.w	r2, r2, #15
   127b0:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   127b2:	bf18      	it	ne
   127b4:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   127b6:	f000 811f 	beq.w	129f8 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   127ba:	4b76      	ldr	r3, [pc, #472]	; (12994 <_usb_d_dev_handler+0x648>)
   127bc:	685b      	ldr	r3, [r3, #4]
   127be:	2003      	movs	r0, #3
}
   127c0:	b001      	add	sp, #4
   127c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   127c6:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   127c8:	07d9      	lsls	r1, r3, #31
   127ca:	f57f af65 	bpl.w	12698 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   127ce:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127d2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   127d6:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127da:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   127dc:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   127e0:	f88e 101a 	strb.w	r1, [lr, #26]
   127e4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127e8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   127ec:	f43f adef 	beq.w	123ce <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   127f0:	4a68      	ldr	r2, [pc, #416]	; (12994 <_usb_d_dev_handler+0x648>)
   127f2:	eb0a 0104 	add.w	r1, sl, r4
   127f6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   127fa:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127fe:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12800:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12804:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12808:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1280c:	e71d      	b.n	1264a <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1280e:	f013 0f01 	tst.w	r3, #1
   12812:	d081      	beq.n	12718 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12814:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12818:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1281c:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12820:	f04f 0108 	mov.w	r1, #8
   12824:	f88e 301a 	strb.w	r3, [lr, #26]
   12828:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1282c:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12830:	f43f adcd 	beq.w	123ce <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12834:	4b57      	ldr	r3, [pc, #348]	; (12994 <_usb_d_dev_handler+0x648>)
   12836:	eb0a 0104 	add.w	r1, sl, r4
   1283a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1283e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12842:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12846:	2280      	movs	r2, #128	; 0x80
   12848:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1284c:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12850:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   12854:	e6f9      	b.n	1264a <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   12856:	4b4f      	ldr	r3, [pc, #316]	; (12994 <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12858:	2080      	movs	r0, #128	; 0x80
   1285a:	685b      	ldr	r3, [r3, #4]
   1285c:	8390      	strh	r0, [r2, #28]
   1285e:	2005      	movs	r0, #5
   12860:	e7ae      	b.n	127c0 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12862:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12866:	f43f ade3 	beq.w	12430 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1286a:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   1286e:	f36f 1386 	bfc	r3, #6, #1
   12872:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12876:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12878:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1287a:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1287e:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   12882:	e5d5      	b.n	12430 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12884:	4b42      	ldr	r3, [pc, #264]	; (12990 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12886:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1288a:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1288c:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12890:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12894:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12896:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12898:	f000 8080 	beq.w	1299c <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   1289c:	f013 0302 	ands.w	r3, r3, #2
   128a0:	f43f ae68 	beq.w	12574 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   128a4:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   128a8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   128ac:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   128b0:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   128b2:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   128b6:	f88e 100a 	strb.w	r1, [lr, #10]
   128ba:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   128be:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   128c2:	f43f ad84 	beq.w	123ce <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   128c6:	4a33      	ldr	r2, [pc, #204]	; (12994 <_usb_d_dev_handler+0x648>)
   128c8:	eb0a 0104 	add.w	r1, sl, r4
   128cc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   128d0:	3120      	adds	r1, #32
   128d2:	79ca      	ldrb	r2, [r1, #7]
   128d4:	09d2      	lsrs	r2, r2, #7
   128d6:	f43f ad7a 	beq.w	123ce <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   128da:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   128dc:	f04f 0e80 	mov.w	lr, #128	; 0x80
   128e0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   128e4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   128e8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   128ec:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   128ee:	4b29      	ldr	r3, [pc, #164]	; (12994 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   128f0:	f36f 1286 	bfc	r2, #6, #1
   128f4:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   128f6:	691b      	ldr	r3, [r3, #16]
   128f8:	68aa      	ldr	r2, [r5, #8]
   128fa:	2100      	movs	r1, #0
   128fc:	4798      	blx	r3
   128fe:	e566      	b.n	123ce <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12900:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12902:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   12906:	4924      	ldr	r1, [pc, #144]	; (12998 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12908:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1290a:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1290c:	8310      	strh	r0, [r2, #24]
   1290e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   12910:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   12914:	2b03      	cmp	r3, #3
   12916:	d1fa      	bne.n	1290e <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   12918:	4b1e      	ldr	r3, [pc, #120]	; (12994 <_usb_d_dev_handler+0x648>)
   1291a:	2100      	movs	r1, #0
   1291c:	685b      	ldr	r3, [r3, #4]
   1291e:	2002      	movs	r0, #2
   12920:	e74e      	b.n	127c0 <_usb_d_dev_handler+0x474>
   12922:	4e1c      	ldr	r6, [pc, #112]	; (12994 <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12924:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12928:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1292a:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1292c:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12930:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   12932:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12934:	8291      	strh	r1, [r2, #20]
   12936:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12938:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   1293a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1293e:	e007      	b.n	12950 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   12940:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12942:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12946:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   1294a:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1294e:	d016      	beq.n	1297e <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12950:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12954:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12958:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1295c:	28ff      	cmp	r0, #255	; 0xff
   1295e:	f103 0320 	add.w	r3, r3, #32
   12962:	f104 0401 	add.w	r4, r4, #1
   12966:	d0eb      	beq.n	12940 <_usb_d_dev_handler+0x5f4>
   12968:	79da      	ldrb	r2, [r3, #7]
   1296a:	0651      	lsls	r1, r2, #25
   1296c:	d5e8      	bpl.n	12940 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   1296e:	f36f 1286 	bfc	r2, #6, #1
   12972:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12974:	69ea      	ldr	r2, [r5, #28]
   12976:	6933      	ldr	r3, [r6, #16]
   12978:	2103      	movs	r1, #3
   1297a:	4798      	blx	r3
   1297c:	e7e0      	b.n	12940 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1297e:	2100      	movs	r1, #0
   12980:	2260      	movs	r2, #96	; 0x60
   12982:	4803      	ldr	r0, [pc, #12]	; (12990 <_usb_d_dev_handler+0x644>)
   12984:	f00b ffba 	bl	1e8fc <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   12988:	6873      	ldr	r3, [r6, #4]
   1298a:	2100      	movs	r1, #0
   1298c:	2001      	movs	r0, #1
   1298e:	e717      	b.n	127c0 <_usb_d_dev_handler+0x474>
   12990:	2000222c 	.word	0x2000222c
   12994:	20001ffc 	.word	0x20001ffc
   12998:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1299c:	07d9      	lsls	r1, r3, #31
   1299e:	f57f af7d 	bpl.w	1289c <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   129a2:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   129a6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   129aa:	460a      	mov	r2, r1
   129ac:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   129b0:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129b2:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   129b6:	f88e 200a 	strb.w	r2, [lr, #10]
   129ba:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   129be:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129c2:	f43f ad04 	beq.w	123ce <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   129c6:	4a11      	ldr	r2, [pc, #68]	; (12a0c <_usb_d_dev_handler+0x6c0>)
   129c8:	eb0a 0e04 	add.w	lr, sl, r4
   129cc:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   129d0:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   129d4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   129d6:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   129da:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   129de:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   129e2:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   129e6:	4b09      	ldr	r3, [pc, #36]	; (12a0c <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   129e8:	f36f 1286 	bfc	r2, #6, #1
   129ec:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   129f0:	691b      	ldr	r3, [r3, #16]
   129f2:	68aa      	ldr	r2, [r5, #8]
   129f4:	4798      	blx	r3
   129f6:	e4ea      	b.n	123ce <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   129f8:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   129fa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   129fe:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12a00:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   12a02:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12a04:	f3c1 110a 	ubfx	r1, r1, #4, #11
   12a08:	e6d7      	b.n	127ba <_usb_d_dev_handler+0x46e>
   12a0a:	bf00      	nop
   12a0c:	20001ffc 	.word	0x20001ffc

00012a10 <_usb_d_dev_init>:
{
   12a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   12a14:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12a18:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   12a1a:	07db      	lsls	r3, r3, #31
   12a1c:	d551      	bpl.n	12ac2 <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12a1e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   12a22:	789c      	ldrb	r4, [r3, #2]
   12a24:	f014 0401 	ands.w	r4, r4, #1
   12a28:	d1fb      	bne.n	12a22 <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   12a2a:	4b45      	ldr	r3, [pc, #276]	; (12b40 <_usb_d_dev_init+0x130>)
   12a2c:	4a45      	ldr	r2, [pc, #276]	; (12b44 <_usb_d_dev_init+0x134>)
   12a2e:	601a      	str	r2, [r3, #0]
   12a30:	461e      	mov	r6, r3
   12a32:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   12a34:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   12a36:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   12a38:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   12a3a:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   12a3c:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   12a3e:	27ff      	movs	r7, #255	; 0xff
   12a40:	e007      	b.n	12a52 <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   12a42:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12a44:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12a48:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12a4c:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12a50:	d01d      	beq.n	12a8e <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12a52:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12a56:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12a5a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12a5e:	28ff      	cmp	r0, #255	; 0xff
   12a60:	f103 0320 	add.w	r3, r3, #32
   12a64:	f104 0401 	add.w	r4, r4, #1
   12a68:	d0eb      	beq.n	12a42 <_usb_d_dev_init+0x32>
   12a6a:	79da      	ldrb	r2, [r3, #7]
   12a6c:	0651      	lsls	r1, r2, #25
   12a6e:	d5e8      	bpl.n	12a42 <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   12a70:	f36f 1286 	bfc	r2, #6, #1
   12a74:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a76:	69ea      	ldr	r2, [r5, #28]
   12a78:	6933      	ldr	r3, [r6, #16]
   12a7a:	2103      	movs	r1, #3
   12a7c:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   12a7e:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12a80:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12a84:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12a88:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12a8c:	d1e1      	bne.n	12a52 <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   12a8e:	2260      	movs	r2, #96	; 0x60
   12a90:	2100      	movs	r1, #0
   12a92:	482d      	ldr	r0, [pc, #180]	; (12b48 <_usb_d_dev_init+0x138>)
   12a94:	f00b ff32 	bl	1e8fc <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   12a98:	4b2c      	ldr	r3, [pc, #176]	; (12b4c <_usb_d_dev_init+0x13c>)
   12a9a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   12a9c:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   12aa0:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12aa4:	f013 031f 	ands.w	r3, r3, #31
   12aa8:	d027      	beq.n	12afa <_usb_d_dev_init+0xea>
   12aaa:	2b1f      	cmp	r3, #31
   12aac:	d025      	beq.n	12afa <_usb_d_dev_init+0xea>
   12aae:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12ab0:	b338      	cbz	r0, 12b02 <_usb_d_dev_init+0xf2>
   12ab2:	281f      	cmp	r0, #31
   12ab4:	d025      	beq.n	12b02 <_usb_d_dev_init+0xf2>
   12ab6:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   12ab8:	b332      	cbz	r2, 12b08 <_usb_d_dev_init+0xf8>
   12aba:	2a07      	cmp	r2, #7
   12abc:	d024      	beq.n	12b08 <_usb_d_dev_init+0xf8>
   12abe:	0311      	lsls	r1, r2, #12
   12ac0:	e024      	b.n	12b0c <_usb_d_dev_init+0xfc>
   12ac2:	7893      	ldrb	r3, [r2, #2]
   12ac4:	079f      	lsls	r7, r3, #30
   12ac6:	d1fc      	bne.n	12ac2 <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12ac8:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   12aca:	079e      	lsls	r6, r3, #30
   12acc:	d50d      	bpl.n	12aea <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   12ace:	7813      	ldrb	r3, [r2, #0]
   12ad0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12ad4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12ad6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12ada:	7893      	ldrb	r3, [r2, #2]
   12adc:	079d      	lsls	r5, r3, #30
   12ade:	d1fc      	bne.n	12ada <_usb_d_dev_init+0xca>
   12ae0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12ae4:	7893      	ldrb	r3, [r2, #2]
   12ae6:	079c      	lsls	r4, r3, #30
   12ae8:	d4fc      	bmi.n	12ae4 <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12aea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12aee:	2301      	movs	r3, #1
   12af0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12af2:	7893      	ldrb	r3, [r2, #2]
   12af4:	0798      	lsls	r0, r3, #30
   12af6:	d1fc      	bne.n	12af2 <_usb_d_dev_init+0xe2>
   12af8:	e791      	b.n	12a1e <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12afa:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12afe:	2800      	cmp	r0, #0
   12b00:	d1d7      	bne.n	12ab2 <_usb_d_dev_init+0xa2>
   12b02:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   12b04:	2a00      	cmp	r2, #0
   12b06:	d1d8      	bne.n	12aba <_usb_d_dev_init+0xaa>
   12b08:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   12b0c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b10:	4303      	orrs	r3, r0
   12b12:	430b      	orrs	r3, r1
   12b14:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   12b16:	78d3      	ldrb	r3, [r2, #3]
   12b18:	f043 0303 	orr.w	r3, r3, #3
   12b1c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   12b1e:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12b20:	2104      	movs	r1, #4
   12b22:	f043 030c 	orr.w	r3, r3, #12
   12b26:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12b28:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12b2a:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12b2c:	7898      	ldrb	r0, [r3, #2]
   12b2e:	f010 0003 	ands.w	r0, r0, #3
   12b32:	d1fb      	bne.n	12b2c <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   12b34:	4a04      	ldr	r2, [pc, #16]	; (12b48 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   12b36:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   12b38:	2201      	movs	r2, #1
   12b3a:	811a      	strh	r2, [r3, #8]
}
   12b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b40:	20001ffc 	.word	0x20001ffc
   12b44:	00011fdd 	.word	0x00011fdd
   12b48:	2000222c 	.word	0x2000222c
   12b4c:	00800084 	.word	0x00800084

00012b50 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   12b50:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b54:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   12b56:	079b      	lsls	r3, r3, #30
   12b58:	d124      	bne.n	12ba4 <_usb_d_dev_enable+0x54>
{
   12b5a:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12b5c:	7893      	ldrb	r3, [r2, #2]
   12b5e:	0798      	lsls	r0, r3, #30
   12b60:	d1fc      	bne.n	12b5c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   12b62:	7813      	ldrb	r3, [r2, #0]
   12b64:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   12b66:	0799      	lsls	r1, r3, #30
   12b68:	d407      	bmi.n	12b7a <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   12b6a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12b6e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12b70:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b74:	7893      	ldrb	r3, [r2, #2]
   12b76:	079b      	lsls	r3, r3, #30
   12b78:	d1fc      	bne.n	12b74 <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12b7a:	4b0c      	ldr	r3, [pc, #48]	; (12bac <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12b7c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12b84:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12b88:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   12b8c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   12b90:	f240 218d 	movw	r1, #653	; 0x28d
   12b94:	6098      	str	r0, [r3, #8]
   12b96:	609e      	str	r6, [r3, #8]
   12b98:	609d      	str	r5, [r3, #8]
   12b9a:	609c      	str	r4, [r3, #8]
   12b9c:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   12b9e:	2000      	movs	r0, #0
}
   12ba0:	bc70      	pop	{r4, r5, r6}
   12ba2:	4770      	bx	lr
		return -USB_ERR_DENIED;
   12ba4:	f06f 0010 	mvn.w	r0, #16
   12ba8:	4770      	bx	lr
   12baa:	bf00      	nop
   12bac:	e000e100 	.word	0xe000e100

00012bb0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   12bb0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12bb4:	8913      	ldrh	r3, [r2, #8]
   12bb6:	f023 0301 	bic.w	r3, r3, #1
   12bba:	041b      	lsls	r3, r3, #16
   12bbc:	0c1b      	lsrs	r3, r3, #16
   12bbe:	8113      	strh	r3, [r2, #8]
   12bc0:	4770      	bx	lr
   12bc2:	bf00      	nop

00012bc4 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   12bc4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12bc8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   12bcc:	7298      	strb	r0, [r3, #10]
   12bce:	4770      	bx	lr

00012bd0 <_usb_d_dev_ep_init>:
{
   12bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12bd4:	f010 050f 	ands.w	r5, r0, #15
   12bd8:	fa4f fc80 	sxtb.w	ip, r0
   12bdc:	d02a      	beq.n	12c34 <_usb_d_dev_ep_init+0x64>
   12bde:	f1bc 0f00 	cmp.w	ip, #0
   12be2:	bfb4      	ite	lt
   12be4:	1cab      	addlt	r3, r5, #2
   12be6:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12be8:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12bea:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   12bee:	d859      	bhi.n	12ca4 <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12bf0:	009c      	lsls	r4, r3, #2
   12bf2:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 12cac <_usb_d_dev_ep_init+0xdc>
   12bf6:	18e6      	adds	r6, r4, r3
   12bf8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12bfc:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12c00:	2eff      	cmp	r6, #255	; 0xff
   12c02:	d14b      	bne.n	12c9c <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   12c04:	b1d1      	cbz	r1, 12c3c <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12c06:	f1bc 0f00 	cmp.w	ip, #0
   12c0a:	db3a      	blt.n	12c82 <_usb_d_dev_ep_init+0xb2>
   12c0c:	006f      	lsls	r7, r5, #1
   12c0e:	197e      	adds	r6, r7, r5
   12c10:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12cb0 <_usb_d_dev_ep_init+0xe0>
   12c14:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12c18:	bb4e      	cbnz	r6, 12c6e <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   12c1a:	4423      	add	r3, r4
   12c1c:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   12c20:	3101      	adds	r1, #1
   12c22:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   12c26:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   12c2a:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   12c2c:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   12c2e:	2000      	movs	r0, #0
   12c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12c34:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   12c38:	462b      	mov	r3, r5
   12c3a:	e7d9      	b.n	12bf0 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12c3c:	b125      	cbz	r5, 12c48 <_usb_d_dev_ep_init+0x78>
   12c3e:	f1bc 0f00 	cmp.w	ip, #0
   12c42:	db01      	blt.n	12c48 <_usb_d_dev_ep_init+0x78>
   12c44:	1cae      	adds	r6, r5, #2
   12c46:	e000      	b.n	12c4a <_usb_d_dev_ep_init+0x7a>
   12c48:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   12c4a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   12c4e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12c52:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12c56:	2eff      	cmp	r6, #255	; 0xff
   12c58:	d120      	bne.n	12c9c <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   12c5a:	006f      	lsls	r7, r5, #1
   12c5c:	197e      	adds	r6, r7, r5
   12c5e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 12cb0 <_usb_d_dev_ep_init+0xe0>
   12c62:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12c66:	b146      	cbz	r6, 12c7a <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12c68:	f1bc 0f00 	cmp.w	ip, #0
   12c6c:	db0c      	blt.n	12c88 <_usb_d_dev_ep_init+0xb8>
   12c6e:	443d      	add	r5, r7
   12c70:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   12c74:	892d      	ldrh	r5, [r5, #8]
   12c76:	4295      	cmp	r5, r2
   12c78:	dacf      	bge.n	12c1a <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   12c7a:	f06f 0012 	mvn.w	r0, #18
   12c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c82:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12cb0 <_usb_d_dev_ep_init+0xe0>
   12c86:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12c88:	442f      	add	r7, r5
   12c8a:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   12c8e:	687d      	ldr	r5, [r7, #4]
   12c90:	b115      	cbz	r5, 12c98 <_usb_d_dev_ep_init+0xc8>
   12c92:	897e      	ldrh	r6, [r7, #10]
   12c94:	4296      	cmp	r6, r2
   12c96:	dbf0      	blt.n	12c7a <_usb_d_dev_ep_init+0xaa>
   12c98:	462e      	mov	r6, r5
   12c9a:	e7be      	b.n	12c1a <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   12c9c:	f06f 0013 	mvn.w	r0, #19
   12ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   12ca4:	f06f 0011 	mvn.w	r0, #17
   12ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cac:	20001ffc 	.word	0x20001ffc
   12cb0:	000239c4 	.word	0x000239c4

00012cb4 <_usb_d_dev_ep_deinit>:
{
   12cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12cb8:	f010 070f 	ands.w	r7, r0, #15
{
   12cbc:	b082      	sub	sp, #8
   12cbe:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12cc2:	d009      	beq.n	12cd8 <_usb_d_dev_ep_deinit+0x24>
   12cc4:	f1b9 0f00 	cmp.w	r9, #0
   12cc8:	bfb4      	ite	lt
   12cca:	1cbe      	addlt	r6, r7, #2
   12ccc:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12cce:	2f02      	cmp	r7, #2
   12cd0:	d903      	bls.n	12cda <_usb_d_dev_ep_deinit+0x26>
}
   12cd2:	b002      	add	sp, #8
   12cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12cd8:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12cda:	ea4f 0886 	mov.w	r8, r6, lsl #2
   12cde:	4d3d      	ldr	r5, [pc, #244]	; (12dd4 <_usb_d_dev_ep_deinit+0x120>)
   12ce0:	eb08 0306 	add.w	r3, r8, r6
   12ce4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12ce8:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   12cec:	29ff      	cmp	r1, #255	; 0xff
   12cee:	d0f0      	beq.n	12cd2 <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12cf0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12cf4:	224a      	movs	r2, #74	; 0x4a
   12cf6:	4604      	mov	r4, r0
   12cf8:	f88d 2005 	strb.w	r2, [sp, #5]
   12cfc:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12cfe:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12d00:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12d04:	d41b      	bmi.n	12d3e <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12d06:	f003 0307 	and.w	r3, r3, #7
   12d0a:	2b01      	cmp	r3, #1
   12d0c:	d050      	beq.n	12db0 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   12d0e:	f1b9 0f00 	cmp.w	r9, #0
   12d12:	db54      	blt.n	12dbe <_usb_d_dev_ep_deinit+0x10a>
   12d14:	0160      	lsls	r0, r4, #5
   12d16:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   12d1a:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   12d1e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   12d22:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   12d26:	4446      	add	r6, r8
   12d28:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   12d2c:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   12d2e:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12d30:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   12d34:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12d38:	b002      	add	sp, #8
   12d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d3e:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12d42:	f103 0208 	add.w	r2, r3, #8
   12d46:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12d48:	f1b9 0f00 	cmp.w	r9, #0
   12d4c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12d50:	bfb5      	itete	lt
   12d52:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12d56:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12d5a:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12d5e:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12d62:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d66:	0150      	lsls	r0, r2, #5
   12d68:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d6c:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d6e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d72:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12d76:	eb08 0306 	add.w	r3, r8, r6
   12d7a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12d7e:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d82:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d86:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12d8a:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12d8e:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   12d90:	f103 0a20 	add.w	sl, r3, #32
   12d94:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12d98:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   12d9a:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12d9e:	4608      	mov	r0, r1
   12da0:	2103      	movs	r1, #3
   12da2:	4798      	blx	r3
   12da4:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12da8:	f003 0307 	and.w	r3, r3, #7
   12dac:	2b01      	cmp	r3, #1
   12dae:	d1ae      	bne.n	12d0e <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12db0:	0160      	lsls	r0, r4, #5
   12db2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12db6:	2300      	movs	r3, #0
   12db8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   12dbc:	e7b3      	b.n	12d26 <_usb_d_dev_ep_deinit+0x72>
   12dbe:	017f      	lsls	r7, r7, #5
   12dc0:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12dc4:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12dc8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   12dcc:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12dd0:	e7a9      	b.n	12d26 <_usb_d_dev_ep_deinit+0x72>
   12dd2:	bf00      	nop
   12dd4:	20001ffc 	.word	0x20001ffc

00012dd8 <_usb_d_dev_ep_enable>:
{
   12dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dda:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12ddc:	f010 000f 	ands.w	r0, r0, #15
   12de0:	d045      	beq.n	12e6e <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12de2:	0142      	lsls	r2, r0, #5
   12de4:	2e00      	cmp	r6, #0
   12de6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12dea:	bfb4      	ite	lt
   12dec:	1c83      	addlt	r3, r0, #2
   12dee:	4603      	movge	r3, r0
   12df0:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12df4:	4a84      	ldr	r2, [pc, #528]	; (13008 <_usb_d_dev_ep_enable+0x230>)
   12df6:	1c59      	adds	r1, r3, #1
   12df8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12dfc:	2802      	cmp	r0, #2
   12dfe:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12e00:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12e04:	f200 809f 	bhi.w	12f46 <_usb_d_dev_ep_enable+0x16e>
   12e08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12e0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12e10:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12e14:	2aff      	cmp	r2, #255	; 0xff
   12e16:	f000 8096 	beq.w	12f46 <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12e1a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12e1e:	4d7b      	ldr	r5, [pc, #492]	; (1300c <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12e20:	f002 0e07 	and.w	lr, r2, #7
   12e24:	0140      	lsls	r0, r0, #5
   12e26:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12e2a:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12e2e:	d028      	beq.n	12e82 <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12e30:	2e00      	cmp	r6, #0
   12e32:	db65      	blt.n	12f00 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12e34:	0761      	lsls	r1, r4, #29
   12e36:	f040 80a4 	bne.w	12f82 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e3a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12e3c:	4b74      	ldr	r3, [pc, #464]	; (13010 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12e3e:	f002 0207 	and.w	r2, r2, #7
   12e42:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12e46:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12e4c:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e50:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e54:	d97a      	bls.n	12f4c <_usb_d_dev_ep_enable+0x174>
   12e56:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12e5a:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e5c:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12e5e:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12e60:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e62:	607a      	str	r2, [r7, #4]
   12e64:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12e68:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12e6a:	4608      	mov	r0, r1
   12e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12e6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12e72:	4968      	ldr	r1, [pc, #416]	; (13014 <_usb_d_dev_ep_enable+0x23c>)
   12e74:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12e78:	f1a1 0214 	sub.w	r2, r1, #20
   12e7c:	b2e4      	uxtb	r4, r4
   12e7e:	4603      	mov	r3, r0
   12e80:	e7c2      	b.n	12e08 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12e82:	f014 0f77 	tst.w	r4, #119	; 0x77
   12e86:	d17c      	bne.n	12f82 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12e8a:	4a61      	ldr	r2, [pc, #388]	; (13010 <_usb_d_dev_ep_enable+0x238>)
   12e8c:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12e90:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e96:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12e9a:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e9e:	d94c      	bls.n	12f3a <_usb_d_dev_ep_enable+0x162>
   12ea0:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ea4:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12ea8:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12eaa:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12eac:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12eb0:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12eb2:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12eb4:	617b      	str	r3, [r7, #20]
   12eb6:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12eba:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ebe:	7c8a      	ldrb	r2, [r1, #18]
   12ec0:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12ec2:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ec6:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12eca:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12ecc:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12ece:	2000      	movs	r0, #0
   12ed0:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12ed2:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12ed4:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12ed6:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12eda:	6873      	ldr	r3, [r6, #4]
   12edc:	f367 339b 	bfi	r3, r7, #14, #14
   12ee0:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12ee2:	6872      	ldr	r2, [r6, #4]
   12ee4:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12ee8:	f360 020d 	bfi	r2, r0, #0, #14
   12eec:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12eee:	2510      	movs	r5, #16
   12ef0:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12ef2:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12ef6:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12efa:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12f00:	f014 0f70 	tst.w	r4, #112	; 0x70
   12f04:	d13d      	bne.n	12f82 <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12f06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12f08:	0112      	lsls	r2, r2, #4
   12f0a:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12f0e:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12f12:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12f18:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12f1c:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f20:	d91a      	bls.n	12f58 <_usb_d_dev_ep_enable+0x180>
   12f22:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12f26:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12f28:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12f2a:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12f2c:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12f2e:	617a      	str	r2, [r7, #20]
   12f30:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12f34:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12f36:	4608      	mov	r0, r1
   12f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12f3e:	d923      	bls.n	12f88 <_usb_d_dev_ep_enable+0x1b0>
   12f40:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12f44:	e7ae      	b.n	12ea4 <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12f46:	f06f 0011 	mvn.w	r0, #17
   12f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f4c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12f50:	d908      	bls.n	12f64 <_usb_d_dev_ep_enable+0x18c>
   12f52:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12f56:	e780      	b.n	12e5a <_usb_d_dev_ep_enable+0x82>
   12f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12f5c:	d907      	bls.n	12f6e <_usb_d_dev_ep_enable+0x196>
   12f5e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12f62:	e7e0      	b.n	12f26 <_usb_d_dev_ep_enable+0x14e>
   12f64:	2980      	cmp	r1, #128	; 0x80
   12f66:	d907      	bls.n	12f78 <_usb_d_dev_ep_enable+0x1a0>
   12f68:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12f6c:	e775      	b.n	12e5a <_usb_d_dev_ep_enable+0x82>
   12f6e:	2b80      	cmp	r3, #128	; 0x80
   12f70:	d914      	bls.n	12f9c <_usb_d_dev_ep_enable+0x1c4>
   12f72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12f76:	e7d6      	b.n	12f26 <_usb_d_dev_ep_enable+0x14e>
   12f78:	2940      	cmp	r1, #64	; 0x40
   12f7a:	d914      	bls.n	12fa6 <_usb_d_dev_ep_enable+0x1ce>
   12f7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12f80:	e76b      	b.n	12e5a <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12f82:	f06f 0013 	mvn.w	r0, #19
   12f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f88:	2b80      	cmp	r3, #128	; 0x80
   12f8a:	d902      	bls.n	12f92 <_usb_d_dev_ep_enable+0x1ba>
   12f8c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12f90:	e788      	b.n	12ea4 <_usb_d_dev_ep_enable+0xcc>
   12f92:	2b40      	cmp	r3, #64	; 0x40
   12f94:	d90c      	bls.n	12fb0 <_usb_d_dev_ep_enable+0x1d8>
   12f96:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12f9a:	e783      	b.n	12ea4 <_usb_d_dev_ep_enable+0xcc>
   12f9c:	2b40      	cmp	r3, #64	; 0x40
   12f9e:	d90c      	bls.n	12fba <_usb_d_dev_ep_enable+0x1e2>
   12fa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12fa4:	e7bf      	b.n	12f26 <_usb_d_dev_ep_enable+0x14e>
   12fa6:	2920      	cmp	r1, #32
   12fa8:	d90c      	bls.n	12fc4 <_usb_d_dev_ep_enable+0x1ec>
   12faa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12fae:	e754      	b.n	12e5a <_usb_d_dev_ep_enable+0x82>
   12fb0:	2b20      	cmp	r3, #32
   12fb2:	d90c      	bls.n	12fce <_usb_d_dev_ep_enable+0x1f6>
   12fb4:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12fb8:	e774      	b.n	12ea4 <_usb_d_dev_ep_enable+0xcc>
   12fba:	2b20      	cmp	r3, #32
   12fbc:	d90c      	bls.n	12fd8 <_usb_d_dev_ep_enable+0x200>
   12fbe:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12fc2:	e7b0      	b.n	12f26 <_usb_d_dev_ep_enable+0x14e>
   12fc4:	2910      	cmp	r1, #16
   12fc6:	d90c      	bls.n	12fe2 <_usb_d_dev_ep_enable+0x20a>
   12fc8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12fcc:	e745      	b.n	12e5a <_usb_d_dev_ep_enable+0x82>
   12fce:	2b10      	cmp	r3, #16
   12fd0:	d90d      	bls.n	12fee <_usb_d_dev_ep_enable+0x216>
   12fd2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12fd6:	e765      	b.n	12ea4 <_usb_d_dev_ep_enable+0xcc>
   12fd8:	2b10      	cmp	r3, #16
   12fda:	d90e      	bls.n	12ffa <_usb_d_dev_ep_enable+0x222>
   12fdc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12fe0:	e7a1      	b.n	12f26 <_usb_d_dev_ep_enable+0x14e>
   12fe2:	2908      	cmp	r1, #8
   12fe4:	bf94      	ite	ls
   12fe6:	2100      	movls	r1, #0
   12fe8:	2101      	movhi	r1, #1
   12fea:	0709      	lsls	r1, r1, #28
   12fec:	e735      	b.n	12e5a <_usb_d_dev_ep_enable+0x82>
   12fee:	2b08      	cmp	r3, #8
   12ff0:	bf94      	ite	ls
   12ff2:	2400      	movls	r4, #0
   12ff4:	2401      	movhi	r4, #1
   12ff6:	0724      	lsls	r4, r4, #28
   12ff8:	e754      	b.n	12ea4 <_usb_d_dev_ep_enable+0xcc>
   12ffa:	2b08      	cmp	r3, #8
   12ffc:	bf94      	ite	ls
   12ffe:	2300      	movls	r3, #0
   13000:	2301      	movhi	r3, #1
   13002:	071a      	lsls	r2, r3, #28
   13004:	e78f      	b.n	12f26 <_usb_d_dev_ep_enable+0x14e>
   13006:	bf00      	nop
   13008:	20001ffc 	.word	0x20001ffc
   1300c:	2000222c 	.word	0x2000222c
   13010:	0fffc000 	.word	0x0fffc000
   13014:	20002010 	.word	0x20002010

00013018 <_usb_d_dev_ep_stall>:
{
   13018:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1301a:	f010 000f 	ands.w	r0, r0, #15
{
   1301e:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   13020:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13024:	d01e      	beq.n	13064 <_usb_d_dev_ep_stall+0x4c>
   13026:	2b00      	cmp	r3, #0
   13028:	bfb4      	ite	lt
   1302a:	1c83      	addlt	r3, r0, #2
   1302c:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   1302e:	1c5c      	adds	r4, r3, #1
   13030:	4a40      	ldr	r2, [pc, #256]	; (13134 <_usb_d_dev_ep_stall+0x11c>)
   13032:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   13036:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   13038:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   1303c:	d86d      	bhi.n	1311a <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   1303e:	2901      	cmp	r1, #1
   13040:	d014      	beq.n	1306c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   13042:	b389      	cbz	r1, 130a8 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13044:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   13046:	f003 030f 	and.w	r3, r3, #15
   1304a:	015b      	lsls	r3, r3, #5
   1304c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13050:	2210      	movs	r2, #16
   13052:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   13056:	fa02 f305 	lsl.w	r3, r2, r5
   1305a:	420b      	tst	r3, r1
   1305c:	bf14      	ite	ne
   1305e:	2001      	movne	r0, #1
   13060:	2000      	moveq	r0, #0
   13062:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   13064:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   13066:	4a34      	ldr	r2, [pc, #208]	; (13138 <_usb_d_dev_ep_stall+0x120>)
   13068:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   1306a:	d1ea      	bne.n	13042 <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1306c:	4931      	ldr	r1, [pc, #196]	; (13134 <_usb_d_dev_ep_stall+0x11c>)
   1306e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13072:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13076:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13078:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1307c:	f002 020f 	and.w	r2, r2, #15
   13080:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   13082:	2320      	movs	r3, #32
   13084:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13088:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   1308a:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   1308c:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   1308e:	b2db      	uxtb	r3, r3
   13090:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   13094:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   13098:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   1309c:	f043 0308 	orr.w	r3, r3, #8
   130a0:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   130a4:	2000      	movs	r0, #0
   130a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   130a8:	009e      	lsls	r6, r3, #2
   130aa:	4c22      	ldr	r4, [pc, #136]	; (13134 <_usb_d_dev_ep_stall+0x11c>)
   130ac:	18f2      	adds	r2, r6, r3
   130ae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   130b2:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   130b4:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   130b8:	f002 020f 	and.w	r2, r2, #15
   130bc:	0151      	lsls	r1, r2, #5
   130be:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   130c2:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   130c4:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   130c8:	4207      	tst	r7, r0
   130ca:	d01b      	beq.n	13104 <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   130cc:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   130ce:	2720      	movs	r7, #32
   130d0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   130d4:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   130d6:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   130d8:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   130dc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   130e0:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   130e4:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   130e8:	423a      	tst	r2, r7
   130ea:	d10d      	bne.n	13108 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   130ec:	4433      	add	r3, r6
   130ee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   130f2:	3420      	adds	r4, #32
   130f4:	79e3      	ldrb	r3, [r4, #7]
   130f6:	f003 0207 	and.w	r2, r3, #7
   130fa:	2a01      	cmp	r2, #1
   130fc:	d010      	beq.n	13120 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   130fe:	f36f 03c3 	bfc	r3, #3, #1
   13102:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   13104:	2000      	movs	r0, #0
   13106:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   13108:	2201      	movs	r2, #1
   1310a:	fa02 f505 	lsl.w	r5, r2, r5
   1310e:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13110:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13114:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   13118:	e7e8      	b.n	130ec <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   1311a:	f06f 0011 	mvn.w	r0, #17
}
   1311e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   13120:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   13124:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   13128:	d1ec      	bne.n	13104 <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   1312a:	f360 03c3 	bfi	r3, r0, #3, #1
   1312e:	71e3      	strb	r3, [r4, #7]
   13130:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13132:	bf00      	nop
   13134:	20001ffc 	.word	0x20001ffc
   13138:	20002010 	.word	0x20002010

0001313c <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   1313c:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   1313e:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   13142:	4a12      	ldr	r2, [pc, #72]	; (1318c <_usb_d_dev_ep_read_req+0x50>)
   13144:	0143      	lsls	r3, r0, #5
   13146:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   13148:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   1314a:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   1314c:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   1314e:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   13152:	d818      	bhi.n	13186 <_usb_d_dev_ep_read_req+0x4a>
   13154:	b1b9      	cbz	r1, 13186 <_usb_d_dev_ep_read_req+0x4a>
   13156:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1315a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   1315e:	2a11      	cmp	r2, #17
   13160:	d10e      	bne.n	13180 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   13162:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   13166:	f012 0010 	ands.w	r0, r2, #16
   1316a:	d007      	beq.n	1317c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   1316c:	686a      	ldr	r2, [r5, #4]
   1316e:	682e      	ldr	r6, [r5, #0]
   13170:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13172:	2210      	movs	r2, #16
   13174:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   13176:	4620      	mov	r0, r4
   13178:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   1317c:	bc70      	pop	{r4, r5, r6}
   1317e:	4770      	bx	lr
		return -USB_ERR_FUNC;
   13180:	f06f 0012 	mvn.w	r0, #18
   13184:	e7fa      	b.n	1317c <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   13186:	f06f 0011 	mvn.w	r0, #17
   1318a:	e7f7      	b.n	1317c <_usb_d_dev_ep_read_req+0x40>
   1318c:	2000222c 	.word	0x2000222c

00013190 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   13190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   13194:	7a03      	ldrb	r3, [r0, #8]
   13196:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1319a:	f013 030f 	ands.w	r3, r3, #15
{
   1319e:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   131a0:	d03a      	beq.n	13218 <_usb_d_dev_ep_trans+0x88>
   131a2:	f1b9 0f00 	cmp.w	r9, #0
   131a6:	bfb4      	ite	lt
   131a8:	1c9d      	addlt	r5, r3, #2
   131aa:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   131ac:	4e5d      	ldr	r6, [pc, #372]	; (13324 <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   131ae:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   131b2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   131b6:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   131ba:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   131bc:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   131c0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   131c4:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   131c6:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   131ca:	d050      	beq.n	1326e <_usb_d_dev_ep_trans+0xde>
   131cc:	1e57      	subs	r7, r2, #1
   131ce:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   131d0:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   131d2:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   131d4:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   131d8:	f200 8091 	bhi.w	132fe <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   131dc:	6803      	ldr	r3, [r0, #0]
   131de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   131e2:	d223      	bcs.n	1322c <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   131e4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   131e8:	eb0b 0305 	add.w	r3, fp, r5
   131ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   131f0:	6a1b      	ldr	r3, [r3, #32]
   131f2:	2b00      	cmp	r3, #0
   131f4:	f000 8092 	beq.w	1331c <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   131f8:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   131fc:	eb0b 0405 	add.w	r4, fp, r5
   13200:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   13204:	f104 0220 	add.w	r2, r4, #32
   13208:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1320c:	071b      	lsls	r3, r3, #28
   1320e:	d530      	bpl.n	13272 <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   13210:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   13212:	b007      	add	sp, #28
   13214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   13218:	4e42      	ldr	r6, [pc, #264]	; (13324 <_usb_d_dev_ep_trans+0x194>)
   1321a:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   1321c:	f240 31ff 	movw	r1, #1023	; 0x3ff
   13220:	428a      	cmp	r2, r1
   13222:	d01d      	beq.n	13260 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   13224:	f106 0814 	add.w	r8, r6, #20
   13228:	461d      	mov	r5, r3
   1322a:	e7cf      	b.n	131cc <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   1322c:	4c3e      	ldr	r4, [pc, #248]	; (13328 <_usb_d_dev_ep_trans+0x198>)
   1322e:	eb03 0e01 	add.w	lr, r3, r1
   13232:	45a6      	cmp	lr, r4
   13234:	d8d6      	bhi.n	131e4 <_usb_d_dev_ep_trans+0x54>
   13236:	f013 0303 	ands.w	r3, r3, #3
   1323a:	d1d3      	bne.n	131e4 <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   1323c:	f1b9 0f00 	cmp.w	r9, #0
   13240:	db60      	blt.n	13304 <_usb_d_dev_ep_trans+0x174>
   13242:	428a      	cmp	r2, r1
   13244:	d8ce      	bhi.n	131e4 <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   13246:	2f00      	cmp	r7, #0
   13248:	d060      	beq.n	1330c <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   1324a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   1324e:	eb0b 0205 	add.w	r2, fp, r5
   13252:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   13256:	6a12      	ldr	r2, [r2, #32]
   13258:	2a00      	cmp	r2, #0
   1325a:	d050      	beq.n	132fe <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   1325c:	469a      	mov	sl, r3
   1325e:	e7cd      	b.n	131fc <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   13260:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   13262:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   13264:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   13268:	f106 0814 	add.w	r8, r6, #20
   1326c:	e7b6      	b.n	131dc <_usb_d_dev_ep_trans+0x4c>
   1326e:	4617      	mov	r7, r2
   13270:	e7ae      	b.n	131d0 <_usb_d_dev_ep_trans+0x40>
   13272:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   13274:	a805      	add	r0, sp, #20
   13276:	9202      	str	r2, [sp, #8]
   13278:	f000 f8e0 	bl	1343c <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1327c:	9a02      	ldr	r2, [sp, #8]
   1327e:	9b01      	ldr	r3, [sp, #4]
   13280:	79d0      	ldrb	r0, [r2, #7]
   13282:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   13286:	d131      	bne.n	132ec <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   13288:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   1328c:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   13290:	a805      	add	r0, sp, #20
   13292:	9303      	str	r3, [sp, #12]
   13294:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   13296:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   13298:	f000 f8d8 	bl	1344c <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   1329c:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   1329e:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   132a0:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   132a2:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   132a6:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   132a8:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   132ac:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   132b0:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   132b4:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   132b6:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   132b8:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   132ba:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   132be:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   132c0:	7a5b      	ldrb	r3, [r3, #9]
   132c2:	b9c3      	cbnz	r3, 132f6 <_usb_d_dev_ep_trans+0x166>
   132c4:	461f      	mov	r7, r3
   132c6:	445d      	add	r5, fp
   132c8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   132cc:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   132d0:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   132d4:	f367 1304 	bfi	r3, r7, #4, #1
   132d8:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   132dc:	4640      	mov	r0, r8
   132de:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   132e2:	db17      	blt.n	13314 <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   132e4:	f7fe ff36 	bl	12154 <_usb_d_dev_out_next>
	return ERR_NONE;
   132e8:	2000      	movs	r0, #0
   132ea:	e792      	b.n	13212 <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   132ec:	a805      	add	r0, sp, #20
   132ee:	f000 f8ad 	bl	1344c <atomic_leave_critical>
		return USB_BUSY;
   132f2:	2001      	movs	r0, #1
   132f4:	e78d      	b.n	13212 <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   132f6:	fab7 f787 	clz	r7, r7
   132fa:	097f      	lsrs	r7, r7, #5
   132fc:	e7e3      	b.n	132c6 <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   132fe:	f06f 0011 	mvn.w	r0, #17
   13302:	e786      	b.n	13212 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   13304:	469a      	mov	sl, r3
   13306:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   1330a:	e777      	b.n	131fc <_usb_d_dev_ep_trans+0x6c>
   1330c:	46ba      	mov	sl, r7
   1330e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13312:	e773      	b.n	131fc <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   13314:	f7fe fe64 	bl	11fe0 <_usb_d_dev_in_next>
	return ERR_NONE;
   13318:	2000      	movs	r0, #0
   1331a:	e77a      	b.n	13212 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   1331c:	f06f 0012 	mvn.w	r0, #18
   13320:	e777      	b.n	13212 <_usb_d_dev_ep_trans+0x82>
   13322:	bf00      	nop
   13324:	20001ffc 	.word	0x20001ffc
   13328:	20031fff 	.word	0x20031fff

0001332c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   1332c:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1332e:	f010 000f 	ands.w	r0, r0, #15
   13332:	d117      	bne.n	13364 <_usb_d_dev_ep_abort+0x38>
{
   13334:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13336:	0081      	lsls	r1, r0, #2
   13338:	4d27      	ldr	r5, [pc, #156]	; (133d8 <_usb_d_dev_ep_abort+0xac>)
   1333a:	180a      	adds	r2, r1, r0
   1333c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   13340:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13342:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   13346:	2625      	movs	r6, #37	; 0x25
   13348:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1334c:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   1334e:	f04f 064a 	mov.w	r6, #74	; 0x4a
   13352:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13356:	d003      	beq.n	13360 <_usb_d_dev_ep_abort+0x34>
   13358:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   1335c:	0652      	lsls	r2, r2, #25
   1335e:	d408      	bmi.n	13372 <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   13360:	b003      	add	sp, #12
   13362:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13364:	2b00      	cmp	r3, #0
   13366:	bfb4      	ite	lt
   13368:	1c82      	addlt	r2, r0, #2
   1336a:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   1336c:	2802      	cmp	r0, #2
   1336e:	d931      	bls.n	133d4 <_usb_d_dev_ep_abort+0xa8>
   13370:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13372:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13376:	f102 0608 	add.w	r6, r2, #8
   1337a:	0177      	lsls	r7, r6, #5
	if (dir) {
   1337c:	2b00      	cmp	r3, #0
   1337e:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   13382:	bfb5      	itete	lt
   13384:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13388:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1338c:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13390:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   13394:	af02      	add	r7, sp, #8
   13396:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1339a:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1339c:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   1339e:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   133a0:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   133a4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   133a8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   133ac:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   133b0:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   133b2:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   133b6:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   133ba:	692d      	ldr	r5, [r5, #16]
   133bc:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   133be:	f36f 1686 	bfc	r6, #6, #1
   133c2:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   133c6:	4620      	mov	r0, r4
   133c8:	2102      	movs	r1, #2
   133ca:	462b      	mov	r3, r5
}
   133cc:	b003      	add	sp, #12
   133ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   133d2:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   133d4:	4610      	mov	r0, r2
   133d6:	e7ad      	b.n	13334 <_usb_d_dev_ep_abort+0x8>
   133d8:	20001ffc 	.word	0x20001ffc

000133dc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   133dc:	4b06      	ldr	r3, [pc, #24]	; (133f8 <_usb_d_dev_register_callback+0x1c>)
   133de:	2900      	cmp	r1, #0
   133e0:	bf08      	it	eq
   133e2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   133e4:	2801      	cmp	r0, #1
   133e6:	d003      	beq.n	133f0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   133e8:	b908      	cbnz	r0, 133ee <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   133ea:	4b04      	ldr	r3, [pc, #16]	; (133fc <_usb_d_dev_register_callback+0x20>)
   133ec:	6019      	str	r1, [r3, #0]
   133ee:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   133f0:	4b02      	ldr	r3, [pc, #8]	; (133fc <_usb_d_dev_register_callback+0x20>)
   133f2:	6059      	str	r1, [r3, #4]
   133f4:	4770      	bx	lr
   133f6:	bf00      	nop
   133f8:	00011fdd 	.word	0x00011fdd
   133fc:	20001ffc 	.word	0x20001ffc

00013400 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13400:	4b08      	ldr	r3, [pc, #32]	; (13424 <_usb_d_dev_register_ep_callback+0x24>)
   13402:	2900      	cmp	r1, #0
   13404:	bf08      	it	eq
   13406:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   13408:	b130      	cbz	r0, 13418 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   1340a:	2801      	cmp	r0, #1
   1340c:	d007      	beq.n	1341e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   1340e:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   13410:	bf04      	itt	eq
   13412:	4b05      	ldreq	r3, [pc, #20]	; (13428 <_usb_d_dev_register_ep_callback+0x28>)
   13414:	6119      	streq	r1, [r3, #16]
   13416:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   13418:	4b03      	ldr	r3, [pc, #12]	; (13428 <_usb_d_dev_register_ep_callback+0x28>)
   1341a:	6099      	str	r1, [r3, #8]
   1341c:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   1341e:	4b02      	ldr	r3, [pc, #8]	; (13428 <_usb_d_dev_register_ep_callback+0x28>)
   13420:	60d9      	str	r1, [r3, #12]
   13422:	4770      	bx	lr
   13424:	00011fdd 	.word	0x00011fdd
   13428:	20001ffc 	.word	0x20001ffc

0001342c <USB_0_Handler>:
   1342c:	f7fe bf8e 	b.w	1234c <_usb_d_dev_handler>

00013430 <USB_1_Handler>:
   13430:	f7fe bf8c 	b.w	1234c <_usb_d_dev_handler>

00013434 <USB_2_Handler>:
   13434:	f7fe bf8a 	b.w	1234c <_usb_d_dev_handler>

00013438 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   13438:	f7fe bf88 	b.w	1234c <_usb_d_dev_handler>

0001343c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1343c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   13440:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   13442:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   13444:	f3bf 8f5f 	dmb	sy
   13448:	4770      	bx	lr
   1344a:	bf00      	nop

0001344c <atomic_leave_critical>:
   1344c:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   13450:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   13452:	f383 8810 	msr	PRIMASK, r3
   13456:	4770      	bx	lr

00013458 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   13458:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   1345a:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   1345c:	2b08      	cmp	r3, #8
   1345e:	d810      	bhi.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13460:	e8df f003 	tbb	[pc, r3]
   13464:	604d3b25 	.word	0x604d3b25
   13468:	05a18a74 	.word	0x05a18a74
   1346c:	11          	.byte	0x11
   1346d:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   1346e:	8903      	ldrh	r3, [r0, #8]
   13470:	3b01      	subs	r3, #1
   13472:	b29b      	uxth	r3, r3
   13474:	8103      	strh	r3, [r0, #8]
   13476:	b923      	cbnz	r3, 13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   13478:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1347a:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   1347c:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   1347e:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   13480:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   13482:	bc30      	pop	{r4, r5}
   13484:	4770      	bx	lr
            if (--m_timer) {
   13486:	8903      	ldrh	r3, [r0, #8]
   13488:	3b01      	subs	r3, #1
   1348a:	b29b      	uxth	r3, r3
   1348c:	8103      	strh	r3, [r0, #8]
   1348e:	2b00      	cmp	r3, #0
   13490:	d1f7      	bne.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13492:	8981      	ldrh	r1, [r0, #12]
   13494:	3901      	subs	r1, #1
   13496:	b289      	uxth	r1, r1
   13498:	8181      	strh	r1, [r0, #12]
   1349a:	2900      	cmp	r1, #0
   1349c:	f000 80b3 	beq.w	13606 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   134a0:	8a43      	ldrh	r3, [r0, #18]
   134a2:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   134a4:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   134a6:	2307      	movs	r3, #7
                m_ledOn = true;
   134a8:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   134aa:	7143      	strb	r3, [r0, #5]
                break;
   134ac:	e7e9      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   134ae:	7801      	ldrb	r1, [r0, #0]
   134b0:	2900      	cmp	r1, #0
   134b2:	f040 8089 	bne.w	135c8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   134b6:	7841      	ldrb	r1, [r0, #1]
   134b8:	2900      	cmp	r1, #0
   134ba:	f040 80cb 	bne.w	13654 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   134be:	7883      	ldrb	r3, [r0, #2]
   134c0:	2b00      	cmp	r3, #0
   134c2:	f040 811a 	bne.w	136fa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   134c6:	78c3      	ldrb	r3, [r0, #3]
   134c8:	2b00      	cmp	r3, #0
   134ca:	f040 8118 	bne.w	136fe <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   134ce:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   134d0:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   134d2:	2b00      	cmp	r3, #0
   134d4:	d0d5      	beq.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   134d6:	5d41      	ldrb	r1, [r0, r5]
   134d8:	e077      	b.n	135ca <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   134da:	8903      	ldrh	r3, [r0, #8]
   134dc:	3b01      	subs	r3, #1
   134de:	b29b      	uxth	r3, r3
   134e0:	8103      	strh	r3, [r0, #8]
   134e2:	2b00      	cmp	r3, #0
   134e4:	d1cd      	bne.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   134e6:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   134e8:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   134ea:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   134ec:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   134ee:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   134f0:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   134f2:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   134f6:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   134f8:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   134fa:	8143      	strh	r3, [r0, #10]
            break;
   134fc:	e7c1      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   134fe:	8903      	ldrh	r3, [r0, #8]
   13500:	3b01      	subs	r3, #1
   13502:	b29b      	uxth	r3, r3
   13504:	8103      	strh	r3, [r0, #8]
   13506:	2b00      	cmp	r3, #0
   13508:	d1bb      	bne.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   1350a:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1350c:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1350e:	3b01      	subs	r3, #1
   13510:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13512:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13516:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13518:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1351a:	2b00      	cmp	r3, #0
   1351c:	d06d      	beq.n	135fa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   1351e:	8a03      	ldrh	r3, [r0, #16]
   13520:	8103      	strh	r3, [r0, #8]
                break;
   13522:	e7ae      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13524:	8903      	ldrh	r3, [r0, #8]
   13526:	3b01      	subs	r3, #1
   13528:	b29b      	uxth	r3, r3
   1352a:	8103      	strh	r3, [r0, #8]
   1352c:	2b00      	cmp	r3, #0
   1352e:	d1a8      	bne.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   13530:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13532:	8a01      	ldrh	r1, [r0, #16]
   13534:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   13536:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   13538:	3201      	adds	r2, #1
            m_ledOn = true;
   1353a:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   1353c:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1353e:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   13542:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   13544:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   13546:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13548:	8143      	strh	r3, [r0, #10]
            break;
   1354a:	e79a      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   1354c:	8903      	ldrh	r3, [r0, #8]
   1354e:	3b01      	subs	r3, #1
   13550:	b29b      	uxth	r3, r3
   13552:	8103      	strh	r3, [r0, #8]
   13554:	2b00      	cmp	r3, #0
   13556:	d194      	bne.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13558:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1355a:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1355c:	3b01      	subs	r3, #1
   1355e:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13560:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13564:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13566:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13568:	2b00      	cmp	r3, #0
   1356a:	d1d8      	bne.n	1351e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   1356c:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1356e:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   13570:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   13572:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   13574:	7143      	strb	r3, [r0, #5]
            break;
   13576:	e784      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13578:	8903      	ldrh	r3, [r0, #8]
   1357a:	3b01      	subs	r3, #1
   1357c:	b29b      	uxth	r3, r3
   1357e:	8103      	strh	r3, [r0, #8]
   13580:	2b00      	cmp	r3, #0
   13582:	f47f af7e 	bne.w	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13586:	8983      	ldrh	r3, [r0, #12]
   13588:	3b01      	subs	r3, #1
   1358a:	b29b      	uxth	r3, r3
   1358c:	8183      	strh	r3, [r0, #12]
   1358e:	b373      	cbz	r3, 135ee <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13590:	8a02      	ldrh	r2, [r0, #16]
   13592:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   13594:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   13596:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   13598:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1359a:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   1359e:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   135a0:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   135a2:	8143      	strh	r3, [r0, #10]
                break;
   135a4:	e76d      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   135a6:	8903      	ldrh	r3, [r0, #8]
   135a8:	3b01      	subs	r3, #1
   135aa:	b29b      	uxth	r3, r3
   135ac:	8103      	strh	r3, [r0, #8]
   135ae:	2b00      	cmp	r3, #0
   135b0:	f47f af67 	bne.w	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   135b4:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   135b6:	8a42      	ldrh	r2, [r0, #18]
   135b8:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   135ba:	3301      	adds	r3, #1
            m_ledOn = true;
   135bc:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   135be:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   135c0:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   135c2:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   135c4:	7142      	strb	r2, [r0, #5]
            break;
   135c6:	e75c      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   135c8:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   135ca:	f011 0301 	ands.w	r3, r1, #1
   135ce:	d149      	bne.n	13664 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   135d0:	3301      	adds	r3, #1
   135d2:	b2db      	uxtb	r3, r3
   135d4:	fa41 f203 	asr.w	r2, r1, r3
   135d8:	07d4      	lsls	r4, r2, #31
   135da:	d5f9      	bpl.n	135d0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   135dc:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   135de:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   135e0:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   135e2:	2201      	movs	r2, #1
    m_currentCode = code;
   135e4:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   135e6:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   135e8:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   135ea:	7142      	strb	r2, [r0, #5]
            break;
   135ec:	e749      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   135ee:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   135f0:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   135f2:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   135f4:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   135f6:	7143      	strb	r3, [r0, #5]
            break;
   135f8:	e743      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   135fa:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   135fc:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   135fe:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   13600:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   13602:	7143      	strb	r3, [r0, #5]
            break;
   13604:	e73d      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   13606:	7983      	ldrb	r3, [r0, #6]
   13608:	79c2      	ldrb	r2, [r0, #7]
   1360a:	3301      	adds	r3, #1
   1360c:	b2db      	uxtb	r3, r3
    if (code > 7) {
   1360e:	2b07      	cmp	r3, #7
        group++;
   13610:	bf85      	ittet	hi
   13612:	3201      	addhi	r2, #1
   13614:	b2d2      	uxtbhi	r2, r2
   13616:	4619      	movls	r1, r3
        code = 0;
   13618:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   1361a:	2a04      	cmp	r2, #4
   1361c:	4615      	mov	r5, r2
   1361e:	dd1b      	ble.n	13658 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   13620:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   13622:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   13624:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   13628:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   1362a:	d01d      	beq.n	13668 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   1362c:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   1362e:	07e9      	lsls	r1, r5, #31
   13630:	d452      	bmi.n	136d8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   13632:	2501      	movs	r5, #1
   13634:	3301      	adds	r3, #1
   13636:	b2db      	uxtb	r3, r3
   13638:	fa44 f103 	asr.w	r1, r4, r3
   1363c:	07c9      	lsls	r1, r1, #31
   1363e:	d5f9      	bpl.n	13634 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   13640:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13642:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   13644:	2d00      	cmp	r5, #0
   13646:	d149      	bne.n	136dc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   13648:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   1364a:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   1364c:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   1364e:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   13650:	7143      	strb	r3, [r0, #5]
}
   13652:	e716      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   13654:	2501      	movs	r5, #1
   13656:	e7b8      	b.n	135ca <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   13658:	5c84      	ldrb	r4, [r0, r2]
   1365a:	fa54 f101 	asrs.w	r1, r4, r1
   1365e:	d029      	beq.n	136b4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   13660:	7bc5      	ldrb	r5, [r0, #15]
   13662:	e7eb      	b.n	1363c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   13664:	2300      	movs	r3, #0
   13666:	e7b9      	b.n	135dc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   13668:	7843      	ldrb	r3, [r0, #1]
   1366a:	bb83      	cbnz	r3, 136ce <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1366c:	2102      	movs	r1, #2
   1366e:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   13670:	5cc3      	ldrb	r3, [r0, r3]
   13672:	2b00      	cmp	r3, #0
   13674:	d145      	bne.n	13702 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13676:	1c4a      	adds	r2, r1, #1
   13678:	b2d2      	uxtb	r2, r2
   1367a:	2a05      	cmp	r2, #5
   1367c:	d00d      	beq.n	1369a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1367e:	5c83      	ldrb	r3, [r0, r2]
   13680:	bb2b      	cbnz	r3, 136ce <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13682:	1c8a      	adds	r2, r1, #2
   13684:	b2d2      	uxtb	r2, r2
   13686:	2a05      	cmp	r2, #5
   13688:	d007      	beq.n	1369a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1368a:	5c83      	ldrb	r3, [r0, r2]
   1368c:	b9fb      	cbnz	r3, 136ce <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1368e:	1ccb      	adds	r3, r1, #3
   13690:	b2db      	uxtb	r3, r3
   13692:	2b05      	cmp	r3, #5
   13694:	d001      	beq.n	1369a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13696:	5cc3      	ldrb	r3, [r0, r3]
   13698:	b9c3      	cbnz	r3, 136cc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   1369a:	7802      	ldrb	r2, [r0, #0]
   1369c:	b112      	cbz	r2, 136a4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   1369e:	e024      	b.n	136ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   136a0:	5c83      	ldrb	r3, [r0, r2]
   136a2:	bb23      	cbnz	r3, 136ee <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   136a4:	3201      	adds	r2, #1
   136a6:	b2d2      	uxtb	r2, r2
   136a8:	42aa      	cmp	r2, r5
   136aa:	ddf9      	ble.n	136a0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   136ac:	2300      	movs	r3, #0
   136ae:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   136b0:	7143      	strb	r3, [r0, #5]
   136b2:	e6e6      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   136b4:	3201      	adds	r2, #1
   136b6:	b2d2      	uxtb	r2, r2
   136b8:	2a04      	cmp	r2, #4
   136ba:	d8ee      	bhi.n	1369a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   136bc:	5c83      	ldrb	r3, [r0, r2]
   136be:	b933      	cbnz	r3, 136ce <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   136c0:	1ca9      	adds	r1, r5, #2
   136c2:	b2c9      	uxtb	r1, r1
   136c4:	2905      	cmp	r1, #5
   136c6:	460b      	mov	r3, r1
   136c8:	d1d2      	bne.n	13670 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   136ca:	e7e6      	b.n	1369a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   136cc:	2204      	movs	r2, #4
   136ce:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   136d0:	461c      	mov	r4, r3
   136d2:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   136d4:	2300      	movs	r3, #0
   136d6:	e7b1      	b.n	1363c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   136d8:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   136da:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   136dc:	8a83      	ldrh	r3, [r0, #20]
   136de:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   136e0:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   136e2:	2301      	movs	r3, #1
                m_ledOn = false;
   136e4:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   136e6:	7143      	strb	r3, [r0, #5]
   136e8:	e6cb      	b.n	13482 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   136ea:	4613      	mov	r3, r2
   136ec:	2200      	movs	r2, #0
   136ee:	461d      	mov	r5, r3
            m_patternWrap = true;
   136f0:	2301      	movs	r3, #1
   136f2:	73c3      	strb	r3, [r0, #15]
   136f4:	462c      	mov	r4, r5
        code = 0;
   136f6:	2300      	movs	r3, #0
   136f8:	e799      	b.n	1362e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   136fa:	2502      	movs	r5, #2
   136fc:	e6eb      	b.n	134d6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   136fe:	2503      	movs	r5, #3
   13700:	e6e9      	b.n	134d6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   13702:	460a      	mov	r2, r1
   13704:	e7e3      	b.n	136ce <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   13706:	bf00      	nop

00013708 <arm_sin_q15>:
   13708:	0982      	lsrs	r2, r0, #6
   1370a:	490c      	ldr	r1, [pc, #48]	; (1373c <arm_sin_q15+0x34>)
   1370c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13710:	0240      	lsls	r0, r0, #9
   13712:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   13716:	b410      	push	{r4}
   13718:	3201      	adds	r2, #1
   1371a:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   1371e:	fb03 f304 	mul.w	r3, r3, r4
   13722:	0c1b      	lsrs	r3, r3, #16
   13724:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   13728:	f85d 4b04 	ldr.w	r4, [sp], #4
   1372c:	041b      	lsls	r3, r3, #16
   1372e:	fb10 3002 	smlabb	r0, r0, r2, r3
   13732:	f340 30cf 	sbfx	r0, r0, #15, #16
   13736:	f020 0001 	bic.w	r0, r0, #1
   1373a:	4770      	bx	lr
   1373c:	000239e8 	.word	0x000239e8

00013740 <_Znwj>:
   13740:	b510      	push	{r4, lr}
   13742:	2800      	cmp	r0, #0
   13744:	bf14      	ite	ne
   13746:	4604      	movne	r4, r0
   13748:	2401      	moveq	r4, #1
   1374a:	4620      	mov	r0, r4
   1374c:	f00a fc7e 	bl	1e04c <malloc>
   13750:	b100      	cbz	r0, 13754 <_Znwj+0x14>
   13752:	bd10      	pop	{r4, pc}
   13754:	f000 f9c8 	bl	13ae8 <_ZSt15get_new_handlerv>
   13758:	b108      	cbz	r0, 1375e <_Znwj+0x1e>
   1375a:	4780      	blx	r0
   1375c:	e7f5      	b.n	1374a <_Znwj+0xa>
   1375e:	2004      	movs	r0, #4
   13760:	f000 f8a2 	bl	138a8 <__cxa_allocate_exception>
   13764:	4b02      	ldr	r3, [pc, #8]	; (13770 <_Znwj+0x30>)
   13766:	6003      	str	r3, [r0, #0]
   13768:	4a02      	ldr	r2, [pc, #8]	; (13774 <_Znwj+0x34>)
   1376a:	4903      	ldr	r1, [pc, #12]	; (13778 <_Znwj+0x38>)
   1376c:	f000 f946 	bl	139fc <__cxa_throw>
   13770:	00023e3c 	.word	0x00023e3c
   13774:	00013799 	.word	0x00013799
   13778:	00023e18 	.word	0x00023e18

0001377c <__cxa_pure_virtual>:
   1377c:	b508      	push	{r3, lr}
   1377e:	221b      	movs	r2, #27
   13780:	4902      	ldr	r1, [pc, #8]	; (1378c <__cxa_pure_virtual+0x10>)
   13782:	2002      	movs	r0, #2
   13784:	f00d f846 	bl	20814 <write>
   13788:	f000 f8ee 	bl	13968 <_ZSt9terminatev>
   1378c:	00023dec 	.word	0x00023dec

00013790 <_ZNKSt9bad_alloc4whatEv>:
   13790:	4800      	ldr	r0, [pc, #0]	; (13794 <_ZNKSt9bad_alloc4whatEv+0x4>)
   13792:	4770      	bx	lr
   13794:	00023e08 	.word	0x00023e08

00013798 <_ZNSt9bad_allocD1Ev>:
   13798:	b510      	push	{r4, lr}
   1379a:	4b03      	ldr	r3, [pc, #12]	; (137a8 <_ZNSt9bad_allocD1Ev+0x10>)
   1379c:	6003      	str	r3, [r0, #0]
   1379e:	4604      	mov	r4, r0
   137a0:	f000 f8be 	bl	13920 <_ZNSt9exceptionD1Ev>
   137a4:	4620      	mov	r0, r4
   137a6:	bd10      	pop	{r4, pc}
   137a8:	00023e3c 	.word	0x00023e3c

000137ac <_ZNSt9bad_allocD0Ev>:
   137ac:	b510      	push	{r4, lr}
   137ae:	4b05      	ldr	r3, [pc, #20]	; (137c4 <_ZNSt9bad_allocD0Ev+0x18>)
   137b0:	6003      	str	r3, [r0, #0]
   137b2:	4604      	mov	r4, r0
   137b4:	f000 f8b4 	bl	13920 <_ZNSt9exceptionD1Ev>
   137b8:	4620      	mov	r0, r4
   137ba:	2104      	movs	r1, #4
   137bc:	f000 f804 	bl	137c8 <_ZdlPvj>
   137c0:	4620      	mov	r0, r4
   137c2:	bd10      	pop	{r4, pc}
   137c4:	00023e3c 	.word	0x00023e3c

000137c8 <_ZdlPvj>:
   137c8:	f000 bac0 	b.w	13d4c <_ZdlPv>

000137cc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   137cc:	b4f0      	push	{r4, r5, r6, r7}
   137ce:	4c1b      	ldr	r4, [pc, #108]	; (1383c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   137d0:	f850 7c08 	ldr.w	r7, [r0, #-8]
   137d4:	6861      	ldr	r1, [r4, #4]
   137d6:	f1a0 0608 	sub.w	r6, r0, #8
   137da:	b1c9      	cbz	r1, 13810 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   137dc:	19f5      	adds	r5, r6, r7
   137de:	42a9      	cmp	r1, r5
   137e0:	d01b      	beq.n	1381a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   137e2:	684a      	ldr	r2, [r1, #4]
   137e4:	b32a      	cbz	r2, 13832 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   137e6:	4295      	cmp	r5, r2
   137e8:	d303      	bcc.n	137f2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   137ea:	e022      	b.n	13832 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   137ec:	429d      	cmp	r5, r3
   137ee:	d205      	bcs.n	137fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   137f0:	461a      	mov	r2, r3
   137f2:	6853      	ldr	r3, [r2, #4]
   137f4:	1d0c      	adds	r4, r1, #4
   137f6:	4611      	mov	r1, r2
   137f8:	2b00      	cmp	r3, #0
   137fa:	d1f7      	bne.n	137ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   137fc:	6811      	ldr	r1, [r2, #0]
   137fe:	1855      	adds	r5, r2, r1
   13800:	42ae      	cmp	r6, r5
   13802:	d013      	beq.n	1382c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   13804:	f840 3c04 	str.w	r3, [r0, #-4]
   13808:	6823      	ldr	r3, [r4, #0]
   1380a:	605e      	str	r6, [r3, #4]
   1380c:	bcf0      	pop	{r4, r5, r6, r7}
   1380e:	4770      	bx	lr
   13810:	f840 1c04 	str.w	r1, [r0, #-4]
   13814:	6066      	str	r6, [r4, #4]
   13816:	bcf0      	pop	{r4, r5, r6, r7}
   13818:	4770      	bx	lr
   1381a:	680b      	ldr	r3, [r1, #0]
   1381c:	684a      	ldr	r2, [r1, #4]
   1381e:	f840 2c04 	str.w	r2, [r0, #-4]
   13822:	441f      	add	r7, r3
   13824:	f840 7c08 	str.w	r7, [r0, #-8]
   13828:	6066      	str	r6, [r4, #4]
   1382a:	e7ef      	b.n	1380c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   1382c:	440f      	add	r7, r1
   1382e:	6017      	str	r7, [r2, #0]
   13830:	e7ec      	b.n	1380c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   13832:	4613      	mov	r3, r2
   13834:	3404      	adds	r4, #4
   13836:	460a      	mov	r2, r1
   13838:	e7e0      	b.n	137fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   1383a:	bf00      	nop
   1383c:	2000228c 	.word	0x2000228c

00013840 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   13840:	b430      	push	{r4, r5}
   13842:	4c18      	ldr	r4, [pc, #96]	; (138a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   13844:	f100 0108 	add.w	r1, r0, #8
   13848:	6863      	ldr	r3, [r4, #4]
   1384a:	2908      	cmp	r1, #8
   1384c:	bf38      	it	cc
   1384e:	2108      	movcc	r1, #8
   13850:	b313      	cbz	r3, 13898 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   13852:	3107      	adds	r1, #7
   13854:	681a      	ldr	r2, [r3, #0]
   13856:	f021 0107 	bic.w	r1, r1, #7
   1385a:	4291      	cmp	r1, r2
   1385c:	d804      	bhi.n	13868 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   1385e:	e01d      	b.n	1389c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   13860:	6802      	ldr	r2, [r0, #0]
   13862:	4291      	cmp	r1, r2
   13864:	d905      	bls.n	13872 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   13866:	4603      	mov	r3, r0
   13868:	6858      	ldr	r0, [r3, #4]
   1386a:	2800      	cmp	r0, #0
   1386c:	d1f8      	bne.n	13860 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   1386e:	bc30      	pop	{r4, r5}
   13870:	4770      	bx	lr
   13872:	3304      	adds	r3, #4
   13874:	1a52      	subs	r2, r2, r1
   13876:	2a07      	cmp	r2, #7
   13878:	d90a      	bls.n	13890 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   1387a:	1845      	adds	r5, r0, r1
   1387c:	6844      	ldr	r4, [r0, #4]
   1387e:	606c      	str	r4, [r5, #4]
   13880:	681c      	ldr	r4, [r3, #0]
   13882:	5042      	str	r2, [r0, r1]
   13884:	6021      	str	r1, [r4, #0]
   13886:	601d      	str	r5, [r3, #0]
   13888:	f104 0008 	add.w	r0, r4, #8
   1388c:	bc30      	pop	{r4, r5}
   1388e:	4770      	bx	lr
   13890:	6842      	ldr	r2, [r0, #4]
   13892:	601a      	str	r2, [r3, #0]
   13894:	4604      	mov	r4, r0
   13896:	e7f7      	b.n	13888 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   13898:	4618      	mov	r0, r3
   1389a:	e7e8      	b.n	1386e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   1389c:	4618      	mov	r0, r3
   1389e:	1d23      	adds	r3, r4, #4
   138a0:	e7e8      	b.n	13874 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   138a2:	bf00      	nop
   138a4:	2000228c 	.word	0x2000228c

000138a8 <__cxa_allocate_exception>:
   138a8:	b538      	push	{r3, r4, r5, lr}
   138aa:	f100 0580 	add.w	r5, r0, #128	; 0x80
   138ae:	4628      	mov	r0, r5
   138b0:	f00a fbcc 	bl	1e04c <malloc>
   138b4:	4604      	mov	r4, r0
   138b6:	b138      	cbz	r0, 138c8 <__cxa_allocate_exception+0x20>
   138b8:	2280      	movs	r2, #128	; 0x80
   138ba:	2100      	movs	r1, #0
   138bc:	4620      	mov	r0, r4
   138be:	f00b f81d 	bl	1e8fc <memset>
   138c2:	f104 0080 	add.w	r0, r4, #128	; 0x80
   138c6:	bd38      	pop	{r3, r4, r5, pc}
   138c8:	4628      	mov	r0, r5
   138ca:	f7ff ffb9 	bl	13840 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   138ce:	4604      	mov	r4, r0
   138d0:	2800      	cmp	r0, #0
   138d2:	d1f1      	bne.n	138b8 <__cxa_allocate_exception+0x10>
   138d4:	f000 f848 	bl	13968 <_ZSt9terminatev>

000138d8 <__cxa_free_exception>:
   138d8:	4a06      	ldr	r2, [pc, #24]	; (138f4 <__cxa_free_exception+0x1c>)
   138da:	6893      	ldr	r3, [r2, #8]
   138dc:	3880      	subs	r0, #128	; 0x80
   138de:	4298      	cmp	r0, r3
   138e0:	d905      	bls.n	138ee <__cxa_free_exception+0x16>
   138e2:	68d2      	ldr	r2, [r2, #12]
   138e4:	4413      	add	r3, r2
   138e6:	4298      	cmp	r0, r3
   138e8:	d201      	bcs.n	138ee <__cxa_free_exception+0x16>
   138ea:	f7ff bf6f 	b.w	137cc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   138ee:	f00a bbb5 	b.w	1e05c <free>
   138f2:	bf00      	nop
   138f4:	2000228c 	.word	0x2000228c

000138f8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   138f8:	b538      	push	{r3, r4, r5, lr}
   138fa:	4c08      	ldr	r4, [pc, #32]	; (1391c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   138fc:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   13900:	4628      	mov	r0, r5
   13902:	60e5      	str	r5, [r4, #12]
   13904:	f00a fba2 	bl	1e04c <malloc>
   13908:	60a0      	str	r0, [r4, #8]
   1390a:	b120      	cbz	r0, 13916 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   1390c:	2300      	movs	r3, #0
   1390e:	6060      	str	r0, [r4, #4]
   13910:	6005      	str	r5, [r0, #0]
   13912:	6043      	str	r3, [r0, #4]
   13914:	bd38      	pop	{r3, r4, r5, pc}
   13916:	60e0      	str	r0, [r4, #12]
   13918:	6060      	str	r0, [r4, #4]
   1391a:	bd38      	pop	{r3, r4, r5, pc}
   1391c:	2000228c 	.word	0x2000228c

00013920 <_ZNSt9exceptionD1Ev>:
   13920:	4770      	bx	lr
   13922:	bf00      	nop

00013924 <_ZNSt13bad_exceptionD1Ev>:
   13924:	4770      	bx	lr
   13926:	bf00      	nop

00013928 <_ZGTtNKSt13bad_exception4whatEv>:
   13928:	4800      	ldr	r0, [pc, #0]	; (1392c <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   1392a:	4770      	bx	lr
   1392c:	00023e48 	.word	0x00023e48

00013930 <_ZNSt13bad_exceptionD0Ev>:
   13930:	b510      	push	{r4, lr}
   13932:	2104      	movs	r1, #4
   13934:	4604      	mov	r4, r0
   13936:	f7ff ff47 	bl	137c8 <_ZdlPvj>
   1393a:	4620      	mov	r0, r4
   1393c:	bd10      	pop	{r4, pc}
   1393e:	bf00      	nop

00013940 <_ZN10__cxxabiv111__terminateEPFvvE>:
   13940:	b508      	push	{r3, lr}
   13942:	4780      	blx	r0
   13944:	f00a f8ee 	bl	1db24 <abort>
   13948:	f000 fb6c 	bl	14024 <__cxa_begin_catch>
   1394c:	f00a f8ea 	bl	1db24 <abort>
   13950:	460d      	mov	r5, r1
   13952:	4604      	mov	r4, r0
   13954:	f000 fba4 	bl	140a0 <__cxa_end_catch>
   13958:	3501      	adds	r5, #1
   1395a:	d001      	beq.n	13960 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   1395c:	f000 f9f8 	bl	13d50 <__cxa_end_cleanup>
   13960:	4620      	mov	r0, r4
   13962:	f000 faef 	bl	13f44 <__cxa_call_unexpected>
   13966:	bf00      	nop

00013968 <_ZSt9terminatev>:
   13968:	b508      	push	{r3, lr}
   1396a:	4b03      	ldr	r3, [pc, #12]	; (13978 <_ZSt9terminatev+0x10>)
   1396c:	6818      	ldr	r0, [r3, #0]
   1396e:	f3bf 8f5b 	dmb	ish
   13972:	f7ff ffe5 	bl	13940 <_ZN10__cxxabiv111__terminateEPFvvE>
   13976:	bf00      	nop
   13978:	20000100 	.word	0x20000100

0001397c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1397c:	b508      	push	{r3, lr}
   1397e:	4780      	blx	r0
   13980:	f7ff fff2 	bl	13968 <_ZSt9terminatev>

00013984 <_ZSt10unexpectedv>:
   13984:	b508      	push	{r3, lr}
   13986:	4b03      	ldr	r3, [pc, #12]	; (13994 <_ZSt10unexpectedv+0x10>)
   13988:	6818      	ldr	r0, [r3, #0]
   1398a:	f3bf 8f5b 	dmb	ish
   1398e:	f7ff fff5 	bl	1397c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13992:	bf00      	nop
   13994:	200000fc 	.word	0x200000fc

00013998 <_ZSt13get_terminatev>:
   13998:	4b02      	ldr	r3, [pc, #8]	; (139a4 <_ZSt13get_terminatev+0xc>)
   1399a:	6818      	ldr	r0, [r3, #0]
   1399c:	f3bf 8f5b 	dmb	ish
   139a0:	4770      	bx	lr
   139a2:	bf00      	nop
   139a4:	20000100 	.word	0x20000100

000139a8 <_ZSt14get_unexpectedv>:
   139a8:	4b02      	ldr	r3, [pc, #8]	; (139b4 <_ZSt14get_unexpectedv+0xc>)
   139aa:	6818      	ldr	r0, [r3, #0]
   139ac:	f3bf 8f5b 	dmb	ish
   139b0:	4770      	bx	lr
   139b2:	bf00      	nop
   139b4:	200000fc 	.word	0x200000fc

000139b8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   139b8:	2801      	cmp	r0, #1
   139ba:	b510      	push	{r4, lr}
   139bc:	d81a      	bhi.n	139f4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   139be:	f3bf 8f5b 	dmb	ish
   139c2:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   139c6:	e853 2f00 	ldrex	r2, [r3]
   139ca:	3a01      	subs	r2, #1
   139cc:	e843 2000 	strex	r0, r2, [r3]
   139d0:	2800      	cmp	r0, #0
   139d2:	d1f8      	bne.n	139c6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   139d4:	f3bf 8f5b 	dmb	ish
   139d8:	b95a      	cbnz	r2, 139f2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   139da:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   139de:	f101 0458 	add.w	r4, r1, #88	; 0x58
   139e2:	b10b      	cbz	r3, 139e8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   139e4:	4620      	mov	r0, r4
   139e6:	4798      	blx	r3
   139e8:	4620      	mov	r0, r4
   139ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   139ee:	f7ff bf73 	b.w	138d8 <__cxa_free_exception>
   139f2:	bd10      	pop	{r4, pc}
   139f4:	f851 0c14 	ldr.w	r0, [r1, #-20]
   139f8:	f7ff ffa2 	bl	13940 <_ZN10__cxxabiv111__terminateEPFvvE>

000139fc <__cxa_throw>:
   139fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139fe:	4604      	mov	r4, r0
   13a00:	460f      	mov	r7, r1
   13a02:	4616      	mov	r6, r2
   13a04:	f000 fb96 	bl	14134 <__cxa_get_globals>
   13a08:	6843      	ldr	r3, [r0, #4]
   13a0a:	2501      	movs	r5, #1
   13a0c:	442b      	add	r3, r5
   13a0e:	6043      	str	r3, [r0, #4]
   13a10:	f844 7c78 	str.w	r7, [r4, #-120]
   13a14:	f844 6c74 	str.w	r6, [r4, #-116]
   13a18:	f844 5c80 	str.w	r5, [r4, #-128]
   13a1c:	f7ff ffc4 	bl	139a8 <_ZSt14get_unexpectedv>
   13a20:	f844 0c70 	str.w	r0, [r4, #-112]
   13a24:	f7ff ffb8 	bl	13998 <_ZSt13get_terminatev>
   13a28:	2347      	movs	r3, #71	; 0x47
   13a2a:	2243      	movs	r2, #67	; 0x43
   13a2c:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   13a30:	4910      	ldr	r1, [pc, #64]	; (13a74 <__cxa_throw+0x78>)
   13a32:	f804 3c58 	strb.w	r3, [r4, #-88]
   13a36:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   13a3a:	232b      	movs	r3, #43	; 0x2b
   13a3c:	2755      	movs	r7, #85	; 0x55
   13a3e:	2600      	movs	r6, #0
   13a40:	f844 0c6c 	str.w	r0, [r4, #-108]
   13a44:	f804 ec57 	strb.w	lr, [r4, #-87]
   13a48:	f844 1c50 	str.w	r1, [r4, #-80]
   13a4c:	f804 2c55 	strb.w	r2, [r4, #-85]
   13a50:	f804 2c54 	strb.w	r2, [r4, #-84]
   13a54:	f804 3c53 	strb.w	r3, [r4, #-83]
   13a58:	f804 3c52 	strb.w	r3, [r4, #-82]
   13a5c:	f804 7c56 	strb.w	r7, [r4, #-86]
   13a60:	f804 6c51 	strb.w	r6, [r4, #-81]
   13a64:	4628      	mov	r0, r5
   13a66:	f009 fe41 	bl	1d6ec <_Unwind_RaiseException>
   13a6a:	4628      	mov	r0, r5
   13a6c:	f000 fada 	bl	14024 <__cxa_begin_catch>
   13a70:	f7ff ff7a 	bl	13968 <_ZSt9terminatev>
   13a74:	000139b9 	.word	0x000139b9

00013a78 <__cxa_rethrow>:
   13a78:	b510      	push	{r4, lr}
   13a7a:	f000 fb5b 	bl	14134 <__cxa_get_globals>
   13a7e:	6842      	ldr	r2, [r0, #4]
   13a80:	6804      	ldr	r4, [r0, #0]
   13a82:	3201      	adds	r2, #1
   13a84:	6042      	str	r2, [r0, #4]
   13a86:	b164      	cbz	r4, 13aa2 <__cxa_rethrow+0x2a>
   13a88:	f894 2020 	ldrb.w	r2, [r4, #32]
   13a8c:	2a47      	cmp	r2, #71	; 0x47
   13a8e:	d00a      	beq.n	13aa6 <__cxa_rethrow+0x2e>
   13a90:	2200      	movs	r2, #0
   13a92:	6002      	str	r2, [r0, #0]
   13a94:	3420      	adds	r4, #32
   13a96:	4620      	mov	r0, r4
   13a98:	f009 fe4c 	bl	1d734 <_Unwind_Resume_or_Rethrow>
   13a9c:	4620      	mov	r0, r4
   13a9e:	f000 fac1 	bl	14024 <__cxa_begin_catch>
   13aa2:	f7ff ff61 	bl	13968 <_ZSt9terminatev>
   13aa6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   13aaa:	2a4e      	cmp	r2, #78	; 0x4e
   13aac:	d1f0      	bne.n	13a90 <__cxa_rethrow+0x18>
   13aae:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   13ab2:	2a55      	cmp	r2, #85	; 0x55
   13ab4:	d1ec      	bne.n	13a90 <__cxa_rethrow+0x18>
   13ab6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   13aba:	2a43      	cmp	r2, #67	; 0x43
   13abc:	d1e8      	bne.n	13a90 <__cxa_rethrow+0x18>
   13abe:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   13ac2:	2a43      	cmp	r2, #67	; 0x43
   13ac4:	d1e4      	bne.n	13a90 <__cxa_rethrow+0x18>
   13ac6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   13aca:	2a2b      	cmp	r2, #43	; 0x2b
   13acc:	d1e0      	bne.n	13a90 <__cxa_rethrow+0x18>
   13ace:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   13ad2:	2a2b      	cmp	r2, #43	; 0x2b
   13ad4:	d1dc      	bne.n	13a90 <__cxa_rethrow+0x18>
   13ad6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   13ada:	2a01      	cmp	r2, #1
   13adc:	d8d8      	bhi.n	13a90 <__cxa_rethrow+0x18>
   13ade:	6962      	ldr	r2, [r4, #20]
   13ae0:	4252      	negs	r2, r2
   13ae2:	6162      	str	r2, [r4, #20]
   13ae4:	e7d6      	b.n	13a94 <__cxa_rethrow+0x1c>
   13ae6:	bf00      	nop

00013ae8 <_ZSt15get_new_handlerv>:
   13ae8:	4b02      	ldr	r3, [pc, #8]	; (13af4 <_ZSt15get_new_handlerv+0xc>)
   13aea:	6818      	ldr	r0, [r3, #0]
   13aec:	f3bf 8f5b 	dmb	ish
   13af0:	4770      	bx	lr
   13af2:	bf00      	nop
   13af4:	2000229c 	.word	0x2000229c

00013af8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   13af8:	b510      	push	{r4, lr}
   13afa:	4b03      	ldr	r3, [pc, #12]	; (13b08 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   13afc:	6003      	str	r3, [r0, #0]
   13afe:	4604      	mov	r4, r0
   13b00:	f000 f8ca 	bl	13c98 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13b04:	4620      	mov	r0, r4
   13b06:	bd10      	pop	{r4, pc}
   13b08:	00023f38 	.word	0x00023f38

00013b0c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   13b0c:	b510      	push	{r4, lr}
   13b0e:	4b05      	ldr	r3, [pc, #20]	; (13b24 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   13b10:	6003      	str	r3, [r0, #0]
   13b12:	4604      	mov	r4, r0
   13b14:	f000 f8c0 	bl	13c98 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13b18:	4620      	mov	r0, r4
   13b1a:	210c      	movs	r1, #12
   13b1c:	f7ff fe54 	bl	137c8 <_ZdlPvj>
   13b20:	4620      	mov	r0, r4
   13b22:	bd10      	pop	{r4, pc}
   13b24:	00023f38 	.word	0x00023f38

00013b28 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   13b28:	b570      	push	{r4, r5, r6, lr}
   13b2a:	b082      	sub	sp, #8
   13b2c:	460d      	mov	r5, r1
   13b2e:	9c06      	ldr	r4, [sp, #24]
   13b30:	4294      	cmp	r4, r2
   13b32:	4606      	mov	r6, r0
   13b34:	d009      	beq.n	13b4a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   13b36:	68b0      	ldr	r0, [r6, #8]
   13b38:	6806      	ldr	r6, [r0, #0]
   13b3a:	9406      	str	r4, [sp, #24]
   13b3c:	6a34      	ldr	r4, [r6, #32]
   13b3e:	4629      	mov	r1, r5
   13b40:	46a4      	mov	ip, r4
   13b42:	b002      	add	sp, #8
   13b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13b48:	4760      	bx	ip
   13b4a:	4619      	mov	r1, r3
   13b4c:	9201      	str	r2, [sp, #4]
   13b4e:	9300      	str	r3, [sp, #0]
   13b50:	f000 f86a 	bl	13c28 <_ZNKSt9type_infoeqERKS_>
   13b54:	9b00      	ldr	r3, [sp, #0]
   13b56:	9a01      	ldr	r2, [sp, #4]
   13b58:	2800      	cmp	r0, #0
   13b5a:	d0ec      	beq.n	13b36 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   13b5c:	2006      	movs	r0, #6
   13b5e:	b002      	add	sp, #8
   13b60:	bd70      	pop	{r4, r5, r6, pc}
   13b62:	bf00      	nop

00013b64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   13b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b68:	b081      	sub	sp, #4
   13b6a:	460e      	mov	r6, r1
   13b6c:	4619      	mov	r1, r3
   13b6e:	461f      	mov	r7, r3
   13b70:	4691      	mov	r9, r2
   13b72:	4683      	mov	fp, r0
   13b74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13b76:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   13b7a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   13b7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13b80:	f000 f852 	bl	13c28 <_ZNKSt9type_infoeqERKS_>
   13b84:	b170      	cbz	r0, 13ba4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   13b86:	2e00      	cmp	r6, #0
   13b88:	602c      	str	r4, [r5, #0]
   13b8a:	f885 9004 	strb.w	r9, [r5, #4]
   13b8e:	db1f      	blt.n	13bd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   13b90:	4434      	add	r4, r6
   13b92:	45a0      	cmp	r8, r4
   13b94:	bf0c      	ite	eq
   13b96:	2406      	moveq	r4, #6
   13b98:	2401      	movne	r4, #1
   13b9a:	71ac      	strb	r4, [r5, #6]
   13b9c:	2000      	movs	r0, #0
   13b9e:	b001      	add	sp, #4
   13ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba4:	4544      	cmp	r4, r8
   13ba6:	d018      	beq.n	13bda <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   13ba8:	f8db 0008 	ldr.w	r0, [fp, #8]
   13bac:	f8d0 e000 	ldr.w	lr, [r0]
   13bb0:	950d      	str	r5, [sp, #52]	; 0x34
   13bb2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   13bb6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   13bba:	940a      	str	r4, [sp, #40]	; 0x28
   13bbc:	f8de 401c 	ldr.w	r4, [lr, #28]
   13bc0:	463b      	mov	r3, r7
   13bc2:	464a      	mov	r2, r9
   13bc4:	4631      	mov	r1, r6
   13bc6:	46a4      	mov	ip, r4
   13bc8:	b001      	add	sp, #4
   13bca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bce:	4760      	bx	ip
   13bd0:	3602      	adds	r6, #2
   13bd2:	d1e3      	bne.n	13b9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13bd4:	2301      	movs	r3, #1
   13bd6:	71ab      	strb	r3, [r5, #6]
   13bd8:	e7e0      	b.n	13b9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13bda:	4651      	mov	r1, sl
   13bdc:	4658      	mov	r0, fp
   13bde:	f000 f823 	bl	13c28 <_ZNKSt9type_infoeqERKS_>
   13be2:	2800      	cmp	r0, #0
   13be4:	d0e0      	beq.n	13ba8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   13be6:	2000      	movs	r0, #0
   13be8:	f885 9005 	strb.w	r9, [r5, #5]
   13bec:	b001      	add	sp, #4
   13bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bf2:	bf00      	nop

00013bf4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   13bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13bf8:	4607      	mov	r7, r0
   13bfa:	460c      	mov	r4, r1
   13bfc:	4615      	mov	r5, r2
   13bfe:	461e      	mov	r6, r3
   13c00:	f000 f862 	bl	13cc8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   13c04:	b108      	cbz	r0, 13c0a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   13c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c0a:	68b8      	ldr	r0, [r7, #8]
   13c0c:	6807      	ldr	r7, [r0, #0]
   13c0e:	4621      	mov	r1, r4
   13c10:	69bc      	ldr	r4, [r7, #24]
   13c12:	4633      	mov	r3, r6
   13c14:	462a      	mov	r2, r5
   13c16:	46a4      	mov	ip, r4
   13c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13c1c:	4760      	bx	ip
   13c1e:	bf00      	nop

00013c20 <_ZNSt9type_infoD1Ev>:
   13c20:	4770      	bx	lr
   13c22:	bf00      	nop

00013c24 <_ZNKSt9type_info14__is_pointer_pEv>:
   13c24:	2000      	movs	r0, #0
   13c26:	4770      	bx	lr

00013c28 <_ZNKSt9type_infoeqERKS_>:
   13c28:	4281      	cmp	r1, r0
   13c2a:	d011      	beq.n	13c50 <_ZNKSt9type_infoeqERKS_+0x28>
   13c2c:	b508      	push	{r3, lr}
   13c2e:	6840      	ldr	r0, [r0, #4]
   13c30:	7803      	ldrb	r3, [r0, #0]
   13c32:	2b2a      	cmp	r3, #42	; 0x2a
   13c34:	d00a      	beq.n	13c4c <_ZNKSt9type_infoeqERKS_+0x24>
   13c36:	6849      	ldr	r1, [r1, #4]
   13c38:	780b      	ldrb	r3, [r1, #0]
   13c3a:	2b2a      	cmp	r3, #42	; 0x2a
   13c3c:	bf08      	it	eq
   13c3e:	3101      	addeq	r1, #1
   13c40:	f00b f972 	bl	1ef28 <strcmp>
   13c44:	fab0 f080 	clz	r0, r0
   13c48:	0940      	lsrs	r0, r0, #5
   13c4a:	bd08      	pop	{r3, pc}
   13c4c:	2000      	movs	r0, #0
   13c4e:	bd08      	pop	{r3, pc}
   13c50:	2001      	movs	r0, #1
   13c52:	4770      	bx	lr

00013c54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   13c54:	b570      	push	{r4, r5, r6, lr}
   13c56:	6803      	ldr	r3, [r0, #0]
   13c58:	b084      	sub	sp, #16
   13c5a:	2400      	movs	r4, #0
   13c5c:	699e      	ldr	r6, [r3, #24]
   13c5e:	9400      	str	r4, [sp, #0]
   13c60:	2310      	movs	r3, #16
   13c62:	4615      	mov	r5, r2
   13c64:	9302      	str	r3, [sp, #8]
   13c66:	6812      	ldr	r2, [r2, #0]
   13c68:	f88d 4004 	strb.w	r4, [sp, #4]
   13c6c:	466b      	mov	r3, sp
   13c6e:	9403      	str	r4, [sp, #12]
   13c70:	47b0      	blx	r6
   13c72:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13c76:	f003 0306 	and.w	r3, r3, #6
   13c7a:	2b06      	cmp	r3, #6
   13c7c:	bf03      	ittte	eq
   13c7e:	9b00      	ldreq	r3, [sp, #0]
   13c80:	602b      	streq	r3, [r5, #0]
   13c82:	2001      	moveq	r0, #1
   13c84:	4620      	movne	r0, r4
   13c86:	b004      	add	sp, #16
   13c88:	bd70      	pop	{r4, r5, r6, pc}
   13c8a:	bf00      	nop

00013c8c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   13c8c:	9800      	ldr	r0, [sp, #0]
   13c8e:	4290      	cmp	r0, r2
   13c90:	bf0c      	ite	eq
   13c92:	2006      	moveq	r0, #6
   13c94:	2001      	movne	r0, #1
   13c96:	4770      	bx	lr

00013c98 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   13c98:	b510      	push	{r4, lr}
   13c9a:	4b03      	ldr	r3, [pc, #12]	; (13ca8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   13c9c:	6003      	str	r3, [r0, #0]
   13c9e:	4604      	mov	r4, r0
   13ca0:	f7ff ffbe 	bl	13c20 <_ZNSt9type_infoD1Ev>
   13ca4:	4620      	mov	r0, r4
   13ca6:	bd10      	pop	{r4, pc}
   13ca8:	00023fac 	.word	0x00023fac

00013cac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   13cac:	b510      	push	{r4, lr}
   13cae:	4b05      	ldr	r3, [pc, #20]	; (13cc4 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   13cb0:	6003      	str	r3, [r0, #0]
   13cb2:	4604      	mov	r4, r0
   13cb4:	f7ff ffb4 	bl	13c20 <_ZNSt9type_infoD1Ev>
   13cb8:	4620      	mov	r0, r4
   13cba:	2108      	movs	r1, #8
   13cbc:	f7ff fd84 	bl	137c8 <_ZdlPvj>
   13cc0:	4620      	mov	r0, r4
   13cc2:	bd10      	pop	{r4, pc}
   13cc4:	00023fac 	.word	0x00023fac

00013cc8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   13cc8:	b538      	push	{r3, r4, r5, lr}
   13cca:	4615      	mov	r5, r2
   13ccc:	461c      	mov	r4, r3
   13cce:	f7ff ffab 	bl	13c28 <_ZNKSt9type_infoeqERKS_>
   13cd2:	b120      	cbz	r0, 13cde <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   13cd4:	2208      	movs	r2, #8
   13cd6:	2306      	movs	r3, #6
   13cd8:	6025      	str	r5, [r4, #0]
   13cda:	60e2      	str	r2, [r4, #12]
   13cdc:	7123      	strb	r3, [r4, #4]
   13cde:	bd38      	pop	{r3, r4, r5, pc}

00013ce0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ce4:	4617      	mov	r7, r2
   13ce6:	461c      	mov	r4, r3
   13ce8:	4606      	mov	r6, r0
   13cea:	460d      	mov	r5, r1
   13cec:	f7ff ff9c 	bl	13c28 <_ZNKSt9type_infoeqERKS_>
   13cf0:	b908      	cbnz	r0, 13cf6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   13cf2:	2c03      	cmp	r4, #3
   13cf4:	d901      	bls.n	13cfa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   13cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cfa:	682b      	ldr	r3, [r5, #0]
   13cfc:	463a      	mov	r2, r7
   13cfe:	4631      	mov	r1, r6
   13d00:	4628      	mov	r0, r5
   13d02:	695b      	ldr	r3, [r3, #20]
   13d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13d08:	4718      	bx	r3
   13d0a:	bf00      	nop

00013d0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   13d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d0e:	b083      	sub	sp, #12
   13d10:	4617      	mov	r7, r2
   13d12:	9d08      	ldr	r5, [sp, #32]
   13d14:	990a      	ldr	r1, [sp, #40]	; 0x28
   13d16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13d18:	428d      	cmp	r5, r1
   13d1a:	4606      	mov	r6, r0
   13d1c:	d00b      	beq.n	13d36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   13d1e:	4619      	mov	r1, r3
   13d20:	4630      	mov	r0, r6
   13d22:	f7ff ff81 	bl	13c28 <_ZNKSt9type_infoeqERKS_>
   13d26:	b118      	cbz	r0, 13d30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   13d28:	2301      	movs	r3, #1
   13d2a:	6025      	str	r5, [r4, #0]
   13d2c:	7127      	strb	r7, [r4, #4]
   13d2e:	71a3      	strb	r3, [r4, #6]
   13d30:	2000      	movs	r0, #0
   13d32:	b003      	add	sp, #12
   13d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d36:	9909      	ldr	r1, [sp, #36]	; 0x24
   13d38:	9301      	str	r3, [sp, #4]
   13d3a:	f7ff ff75 	bl	13c28 <_ZNKSt9type_infoeqERKS_>
   13d3e:	b118      	cbz	r0, 13d48 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   13d40:	2000      	movs	r0, #0
   13d42:	7167      	strb	r7, [r4, #5]
   13d44:	b003      	add	sp, #12
   13d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d48:	9b01      	ldr	r3, [sp, #4]
   13d4a:	e7e8      	b.n	13d1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

00013d4c <_ZdlPv>:
   13d4c:	f00a b986 	b.w	1e05c <free>

00013d50 <__cxa_end_cleanup>:
   13d50:	b41e      	push	{r1, r2, r3, r4}
   13d52:	f000 f891 	bl	13e78 <__gnu_end_cleanup>
   13d56:	bc1e      	pop	{r1, r2, r3, r4}
   13d58:	f009 fcda 	bl	1d710 <_Unwind_Resume>

00013d5c <__cxa_type_match>:
   13d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d5e:	7802      	ldrb	r2, [r0, #0]
   13d60:	2a47      	cmp	r2, #71	; 0x47
   13d62:	b083      	sub	sp, #12
   13d64:	460d      	mov	r5, r1
   13d66:	461f      	mov	r7, r3
   13d68:	d01e      	beq.n	13da8 <__cxa_type_match+0x4c>
   13d6a:	2300      	movs	r3, #0
   13d6c:	4c27      	ldr	r4, [pc, #156]	; (13e0c <__cxa_type_match+0xb0>)
   13d6e:	9301      	str	r3, [sp, #4]
   13d70:	6823      	ldr	r3, [r4, #0]
   13d72:	4620      	mov	r0, r4
   13d74:	689b      	ldr	r3, [r3, #8]
   13d76:	4798      	blx	r3
   13d78:	b180      	cbz	r0, 13d9c <__cxa_type_match+0x40>
   13d7a:	9b01      	ldr	r3, [sp, #4]
   13d7c:	681b      	ldr	r3, [r3, #0]
   13d7e:	9301      	str	r3, [sp, #4]
   13d80:	2602      	movs	r6, #2
   13d82:	682b      	ldr	r3, [r5, #0]
   13d84:	4621      	mov	r1, r4
   13d86:	4628      	mov	r0, r5
   13d88:	691c      	ldr	r4, [r3, #16]
   13d8a:	aa01      	add	r2, sp, #4
   13d8c:	2301      	movs	r3, #1
   13d8e:	47a0      	blx	r4
   13d90:	b130      	cbz	r0, 13da0 <__cxa_type_match+0x44>
   13d92:	9b01      	ldr	r3, [sp, #4]
   13d94:	603b      	str	r3, [r7, #0]
   13d96:	4630      	mov	r0, r6
   13d98:	b003      	add	sp, #12
   13d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d9c:	2601      	movs	r6, #1
   13d9e:	e7f0      	b.n	13d82 <__cxa_type_match+0x26>
   13da0:	4606      	mov	r6, r0
   13da2:	4630      	mov	r0, r6
   13da4:	b003      	add	sp, #12
   13da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13da8:	7843      	ldrb	r3, [r0, #1]
   13daa:	2b4e      	cmp	r3, #78	; 0x4e
   13dac:	d1dd      	bne.n	13d6a <__cxa_type_match+0xe>
   13dae:	7883      	ldrb	r3, [r0, #2]
   13db0:	2b55      	cmp	r3, #85	; 0x55
   13db2:	d1da      	bne.n	13d6a <__cxa_type_match+0xe>
   13db4:	78c3      	ldrb	r3, [r0, #3]
   13db6:	2b43      	cmp	r3, #67	; 0x43
   13db8:	d019      	beq.n	13dee <__cxa_type_match+0x92>
   13dba:	78c3      	ldrb	r3, [r0, #3]
   13dbc:	2b43      	cmp	r3, #67	; 0x43
   13dbe:	d1d4      	bne.n	13d6a <__cxa_type_match+0xe>
   13dc0:	7903      	ldrb	r3, [r0, #4]
   13dc2:	2b43      	cmp	r3, #67	; 0x43
   13dc4:	d1d1      	bne.n	13d6a <__cxa_type_match+0xe>
   13dc6:	7943      	ldrb	r3, [r0, #5]
   13dc8:	2b2b      	cmp	r3, #43	; 0x2b
   13dca:	d1ce      	bne.n	13d6a <__cxa_type_match+0xe>
   13dcc:	7983      	ldrb	r3, [r0, #6]
   13dce:	2b2b      	cmp	r3, #43	; 0x2b
   13dd0:	d1cb      	bne.n	13d6a <__cxa_type_match+0xe>
   13dd2:	79c3      	ldrb	r3, [r0, #7]
   13dd4:	2b01      	cmp	r3, #1
   13dd6:	d8c8      	bhi.n	13d6a <__cxa_type_match+0xe>
   13dd8:	d004      	beq.n	13de4 <__cxa_type_match+0x88>
   13dda:	f850 4c20 	ldr.w	r4, [r0, #-32]
   13dde:	3058      	adds	r0, #88	; 0x58
   13de0:	9001      	str	r0, [sp, #4]
   13de2:	e7c5      	b.n	13d70 <__cxa_type_match+0x14>
   13de4:	f850 0c20 	ldr.w	r0, [r0, #-32]
   13de8:	f850 4c78 	ldr.w	r4, [r0, #-120]
   13dec:	e7f8      	b.n	13de0 <__cxa_type_match+0x84>
   13dee:	7903      	ldrb	r3, [r0, #4]
   13df0:	2b46      	cmp	r3, #70	; 0x46
   13df2:	d1e2      	bne.n	13dba <__cxa_type_match+0x5e>
   13df4:	7943      	ldrb	r3, [r0, #5]
   13df6:	2b4f      	cmp	r3, #79	; 0x4f
   13df8:	d1df      	bne.n	13dba <__cxa_type_match+0x5e>
   13dfa:	7983      	ldrb	r3, [r0, #6]
   13dfc:	2b52      	cmp	r3, #82	; 0x52
   13dfe:	d1dc      	bne.n	13dba <__cxa_type_match+0x5e>
   13e00:	79c3      	ldrb	r3, [r0, #7]
   13e02:	2b00      	cmp	r3, #0
   13e04:	d1d9      	bne.n	13dba <__cxa_type_match+0x5e>
   13e06:	9301      	str	r3, [sp, #4]
   13e08:	4c01      	ldr	r4, [pc, #4]	; (13e10 <__cxa_type_match+0xb4>)
   13e0a:	e7b1      	b.n	13d70 <__cxa_type_match+0x14>
   13e0c:	00023e64 	.word	0x00023e64
   13e10:	00023e5c 	.word	0x00023e5c

00013e14 <__cxa_begin_cleanup>:
   13e14:	b510      	push	{r4, lr}
   13e16:	4604      	mov	r4, r0
   13e18:	f000 f98c 	bl	14134 <__cxa_get_globals>
   13e1c:	7823      	ldrb	r3, [r4, #0]
   13e1e:	2b47      	cmp	r3, #71	; 0x47
   13e20:	f1a4 0220 	sub.w	r2, r4, #32
   13e24:	d004      	beq.n	13e30 <__cxa_begin_cleanup+0x1c>
   13e26:	6883      	ldr	r3, [r0, #8]
   13e28:	bb23      	cbnz	r3, 13e74 <__cxa_begin_cleanup+0x60>
   13e2a:	6082      	str	r2, [r0, #8]
   13e2c:	2001      	movs	r0, #1
   13e2e:	bd10      	pop	{r4, pc}
   13e30:	7863      	ldrb	r3, [r4, #1]
   13e32:	2b4e      	cmp	r3, #78	; 0x4e
   13e34:	d1f7      	bne.n	13e26 <__cxa_begin_cleanup+0x12>
   13e36:	78a3      	ldrb	r3, [r4, #2]
   13e38:	2b55      	cmp	r3, #85	; 0x55
   13e3a:	d1f4      	bne.n	13e26 <__cxa_begin_cleanup+0x12>
   13e3c:	78e3      	ldrb	r3, [r4, #3]
   13e3e:	2b43      	cmp	r3, #67	; 0x43
   13e40:	d1f1      	bne.n	13e26 <__cxa_begin_cleanup+0x12>
   13e42:	7923      	ldrb	r3, [r4, #4]
   13e44:	2b43      	cmp	r3, #67	; 0x43
   13e46:	d1ee      	bne.n	13e26 <__cxa_begin_cleanup+0x12>
   13e48:	7963      	ldrb	r3, [r4, #5]
   13e4a:	2b2b      	cmp	r3, #43	; 0x2b
   13e4c:	d1eb      	bne.n	13e26 <__cxa_begin_cleanup+0x12>
   13e4e:	79a3      	ldrb	r3, [r4, #6]
   13e50:	2b2b      	cmp	r3, #43	; 0x2b
   13e52:	d1e8      	bne.n	13e26 <__cxa_begin_cleanup+0x12>
   13e54:	79e3      	ldrb	r3, [r4, #7]
   13e56:	2b01      	cmp	r3, #1
   13e58:	d8e5      	bhi.n	13e26 <__cxa_begin_cleanup+0x12>
   13e5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13e5e:	3301      	adds	r3, #1
   13e60:	2b01      	cmp	r3, #1
   13e62:	f844 3c04 	str.w	r3, [r4, #-4]
   13e66:	d1e1      	bne.n	13e2c <__cxa_begin_cleanup+0x18>
   13e68:	6883      	ldr	r3, [r0, #8]
   13e6a:	f844 3c08 	str.w	r3, [r4, #-8]
   13e6e:	6082      	str	r2, [r0, #8]
   13e70:	2001      	movs	r0, #1
   13e72:	bd10      	pop	{r4, pc}
   13e74:	f7ff fd78 	bl	13968 <_ZSt9terminatev>

00013e78 <__gnu_end_cleanup>:
   13e78:	b508      	push	{r3, lr}
   13e7a:	f000 f95b 	bl	14134 <__cxa_get_globals>
   13e7e:	6883      	ldr	r3, [r0, #8]
   13e80:	b383      	cbz	r3, 13ee4 <__gnu_end_cleanup+0x6c>
   13e82:	f893 2020 	ldrb.w	r2, [r3, #32]
   13e86:	2a47      	cmp	r2, #71	; 0x47
   13e88:	d004      	beq.n	13e94 <__gnu_end_cleanup+0x1c>
   13e8a:	2200      	movs	r2, #0
   13e8c:	6082      	str	r2, [r0, #8]
   13e8e:	f103 0020 	add.w	r0, r3, #32
   13e92:	bd08      	pop	{r3, pc}
   13e94:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13e98:	2a4e      	cmp	r2, #78	; 0x4e
   13e9a:	d1f6      	bne.n	13e8a <__gnu_end_cleanup+0x12>
   13e9c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13ea0:	2a55      	cmp	r2, #85	; 0x55
   13ea2:	d1f2      	bne.n	13e8a <__gnu_end_cleanup+0x12>
   13ea4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13ea8:	2a43      	cmp	r2, #67	; 0x43
   13eaa:	d1ee      	bne.n	13e8a <__gnu_end_cleanup+0x12>
   13eac:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13eb0:	2a43      	cmp	r2, #67	; 0x43
   13eb2:	d1ea      	bne.n	13e8a <__gnu_end_cleanup+0x12>
   13eb4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13eb8:	2a2b      	cmp	r2, #43	; 0x2b
   13eba:	d1e6      	bne.n	13e8a <__gnu_end_cleanup+0x12>
   13ebc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13ec0:	2a2b      	cmp	r2, #43	; 0x2b
   13ec2:	d1e2      	bne.n	13e8a <__gnu_end_cleanup+0x12>
   13ec4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13ec8:	2a01      	cmp	r2, #1
   13eca:	d8de      	bhi.n	13e8a <__gnu_end_cleanup+0x12>
   13ecc:	69da      	ldr	r2, [r3, #28]
   13ece:	3a01      	subs	r2, #1
   13ed0:	61da      	str	r2, [r3, #28]
   13ed2:	2a00      	cmp	r2, #0
   13ed4:	d1db      	bne.n	13e8e <__gnu_end_cleanup+0x16>
   13ed6:	699a      	ldr	r2, [r3, #24]
   13ed8:	6082      	str	r2, [r0, #8]
   13eda:	2200      	movs	r2, #0
   13edc:	619a      	str	r2, [r3, #24]
   13ede:	f103 0020 	add.w	r0, r3, #32
   13ee2:	bd08      	pop	{r3, pc}
   13ee4:	f7ff fd40 	bl	13968 <_ZSt9terminatev>

00013ee8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13ee8:	7803      	ldrb	r3, [r0, #0]
   13eea:	2b47      	cmp	r3, #71	; 0x47
   13eec:	d001      	beq.n	13ef2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   13eee:	2000      	movs	r0, #0
   13ef0:	4770      	bx	lr
   13ef2:	7843      	ldrb	r3, [r0, #1]
   13ef4:	2b4e      	cmp	r3, #78	; 0x4e
   13ef6:	d1fa      	bne.n	13eee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13ef8:	7883      	ldrb	r3, [r0, #2]
   13efa:	2b55      	cmp	r3, #85	; 0x55
   13efc:	d1f7      	bne.n	13eee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13efe:	78c3      	ldrb	r3, [r0, #3]
   13f00:	2b43      	cmp	r3, #67	; 0x43
   13f02:	d1f4      	bne.n	13eee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13f04:	7903      	ldrb	r3, [r0, #4]
   13f06:	2b43      	cmp	r3, #67	; 0x43
   13f08:	d1f1      	bne.n	13eee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13f0a:	7943      	ldrb	r3, [r0, #5]
   13f0c:	2b2b      	cmp	r3, #43	; 0x2b
   13f0e:	d1ee      	bne.n	13eee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13f10:	7983      	ldrb	r3, [r0, #6]
   13f12:	2b2b      	cmp	r3, #43	; 0x2b
   13f14:	d1eb      	bne.n	13eee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13f16:	79c0      	ldrb	r0, [r0, #7]
   13f18:	2801      	cmp	r0, #1
   13f1a:	bf8c      	ite	hi
   13f1c:	2000      	movhi	r0, #0
   13f1e:	2001      	movls	r0, #1
   13f20:	4770      	bx	lr
   13f22:	bf00      	nop

00013f24 <__cxa_call_terminate>:
   13f24:	b510      	push	{r4, lr}
   13f26:	b130      	cbz	r0, 13f36 <__cxa_call_terminate+0x12>
   13f28:	4604      	mov	r4, r0
   13f2a:	f000 f87b 	bl	14024 <__cxa_begin_catch>
   13f2e:	4620      	mov	r0, r4
   13f30:	f7ff ffda 	bl	13ee8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13f34:	b908      	cbnz	r0, 13f3a <__cxa_call_terminate+0x16>
   13f36:	f7ff fd17 	bl	13968 <_ZSt9terminatev>
   13f3a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   13f3e:	f7ff fcff 	bl	13940 <_ZN10__cxxabiv111__terminateEPFvvE>
   13f42:	bf00      	nop

00013f44 <__cxa_call_unexpected>:
   13f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f48:	b085      	sub	sp, #20
   13f4a:	4602      	mov	r2, r0
   13f4c:	f7ff ffcc 	bl	13ee8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13f50:	b160      	cbz	r0, 13f6c <__cxa_call_unexpected+0x28>
   13f52:	f852 8c18 	ldr.w	r8, [r2, #-24]
   13f56:	f852 5c14 	ldr.w	r5, [r2, #-20]
   13f5a:	6a96      	ldr	r6, [r2, #40]	; 0x28
   13f5c:	6b17      	ldr	r7, [r2, #48]	; 0x30
   13f5e:	6b54      	ldr	r4, [r2, #52]	; 0x34
   13f60:	4610      	mov	r0, r2
   13f62:	f000 f85f 	bl	14024 <__cxa_begin_catch>
   13f66:	4640      	mov	r0, r8
   13f68:	f7ff fd08 	bl	1397c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13f6c:	4610      	mov	r0, r2
   13f6e:	f000 f859 	bl	14024 <__cxa_begin_catch>
   13f72:	f7ff fd07 	bl	13984 <_ZSt10unexpectedv>
   13f76:	f000 f855 	bl	14024 <__cxa_begin_catch>
   13f7a:	f7ff fcf5 	bl	13968 <_ZSt9terminatev>
   13f7e:	f000 f851 	bl	14024 <__cxa_begin_catch>
   13f82:	f000 f8d3 	bl	1412c <__cxa_get_globals_fast>
   13f86:	6803      	ldr	r3, [r0, #0]
   13f88:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13f8c:	2a01      	cmp	r2, #1
   13f8e:	d036      	beq.n	13ffe <__cxa_call_unexpected+0xba>
   13f90:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13f94:	f10d 0a10 	add.w	sl, sp, #16
   13f98:	f04f 0800 	mov.w	r8, #0
   13f9c:	3320      	adds	r3, #32
   13f9e:	f84a 2d08 	str.w	r2, [sl, #-8]!
   13fa2:	f027 0b03 	bic.w	fp, r7, #3
   13fa6:	9301      	str	r3, [sp, #4]
   13fa8:	46c1      	mov	r9, r8
   13faa:	45b1      	cmp	r9, r6
   13fac:	da1b      	bge.n	13fe6 <__cxa_call_unexpected+0xa2>
   13fae:	6827      	ldr	r7, [r4, #0]
   13fb0:	b107      	cbz	r7, 13fb4 <__cxa_call_unexpected+0x70>
   13fb2:	4427      	add	r7, r4
   13fb4:	4653      	mov	r3, sl
   13fb6:	2200      	movs	r2, #0
   13fb8:	4639      	mov	r1, r7
   13fba:	9801      	ldr	r0, [sp, #4]
   13fbc:	f7ff fece 	bl	13d5c <__cxa_type_match>
   13fc0:	bb10      	cbnz	r0, 14008 <__cxa_call_unexpected+0xc4>
   13fc2:	683b      	ldr	r3, [r7, #0]
   13fc4:	4914      	ldr	r1, [pc, #80]	; (14018 <__cxa_call_unexpected+0xd4>)
   13fc6:	691b      	ldr	r3, [r3, #16]
   13fc8:	9300      	str	r3, [sp, #0]
   13fca:	aa04      	add	r2, sp, #16
   13fcc:	2301      	movs	r3, #1
   13fce:	f842 0d04 	str.w	r0, [r2, #-4]!
   13fd2:	4638      	mov	r0, r7
   13fd4:	9f00      	ldr	r7, [sp, #0]
   13fd6:	47b8      	blx	r7
   13fd8:	2800      	cmp	r0, #0
   13fda:	bf18      	it	ne
   13fdc:	4680      	movne	r8, r0
   13fde:	f109 0901 	add.w	r9, r9, #1
   13fe2:	445c      	add	r4, fp
   13fe4:	e7e1      	b.n	13faa <__cxa_call_unexpected+0x66>
   13fe6:	f1b8 0f00 	cmp.w	r8, #0
   13fea:	d00a      	beq.n	14002 <__cxa_call_unexpected+0xbe>
   13fec:	2004      	movs	r0, #4
   13fee:	f7ff fc5b 	bl	138a8 <__cxa_allocate_exception>
   13ff2:	4b0a      	ldr	r3, [pc, #40]	; (1401c <__cxa_call_unexpected+0xd8>)
   13ff4:	6003      	str	r3, [r0, #0]
   13ff6:	4a0a      	ldr	r2, [pc, #40]	; (14020 <__cxa_call_unexpected+0xdc>)
   13ff8:	4907      	ldr	r1, [pc, #28]	; (14018 <__cxa_call_unexpected+0xd4>)
   13ffa:	f7ff fcff 	bl	139fc <__cxa_throw>
   13ffe:	681a      	ldr	r2, [r3, #0]
   14000:	e7c8      	b.n	13f94 <__cxa_call_unexpected+0x50>
   14002:	4628      	mov	r0, r5
   14004:	f7ff fc9c 	bl	13940 <_ZN10__cxxabiv111__terminateEPFvvE>
   14008:	f7ff fd36 	bl	13a78 <__cxa_rethrow>
   1400c:	f000 f848 	bl	140a0 <__cxa_end_catch>
   14010:	f000 f846 	bl	140a0 <__cxa_end_catch>
   14014:	f7ff fe9c 	bl	13d50 <__cxa_end_cleanup>
   14018:	00023e6c 	.word	0x00023e6c
   1401c:	00023ef0 	.word	0x00023ef0
   14020:	00013925 	.word	0x00013925

00014024 <__cxa_begin_catch>:
   14024:	b538      	push	{r3, r4, r5, lr}
   14026:	4604      	mov	r4, r0
   14028:	f000 f884 	bl	14134 <__cxa_get_globals>
   1402c:	7822      	ldrb	r2, [r4, #0]
   1402e:	6803      	ldr	r3, [r0, #0]
   14030:	2a47      	cmp	r2, #71	; 0x47
   14032:	f1a4 0120 	sub.w	r1, r4, #32
   14036:	d004      	beq.n	14042 <__cxa_begin_catch+0x1e>
   14038:	bb83      	cbnz	r3, 1409c <__cxa_begin_catch+0x78>
   1403a:	461c      	mov	r4, r3
   1403c:	6001      	str	r1, [r0, #0]
   1403e:	4620      	mov	r0, r4
   14040:	bd38      	pop	{r3, r4, r5, pc}
   14042:	7862      	ldrb	r2, [r4, #1]
   14044:	2a4e      	cmp	r2, #78	; 0x4e
   14046:	d1f7      	bne.n	14038 <__cxa_begin_catch+0x14>
   14048:	78a2      	ldrb	r2, [r4, #2]
   1404a:	2a55      	cmp	r2, #85	; 0x55
   1404c:	d1f4      	bne.n	14038 <__cxa_begin_catch+0x14>
   1404e:	78e2      	ldrb	r2, [r4, #3]
   14050:	2a43      	cmp	r2, #67	; 0x43
   14052:	d1f1      	bne.n	14038 <__cxa_begin_catch+0x14>
   14054:	7922      	ldrb	r2, [r4, #4]
   14056:	2a43      	cmp	r2, #67	; 0x43
   14058:	d1ee      	bne.n	14038 <__cxa_begin_catch+0x14>
   1405a:	7962      	ldrb	r2, [r4, #5]
   1405c:	2a2b      	cmp	r2, #43	; 0x2b
   1405e:	d1eb      	bne.n	14038 <__cxa_begin_catch+0x14>
   14060:	79a2      	ldrb	r2, [r4, #6]
   14062:	2a2b      	cmp	r2, #43	; 0x2b
   14064:	d1e8      	bne.n	14038 <__cxa_begin_catch+0x14>
   14066:	79e2      	ldrb	r2, [r4, #7]
   14068:	2a01      	cmp	r2, #1
   1406a:	d8e5      	bhi.n	14038 <__cxa_begin_catch+0x14>
   1406c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   14070:	2a00      	cmp	r2, #0
   14072:	db10      	blt.n	14096 <__cxa_begin_catch+0x72>
   14074:	3201      	adds	r2, #1
   14076:	6845      	ldr	r5, [r0, #4]
   14078:	f844 2c0c 	str.w	r2, [r4, #-12]
   1407c:	3d01      	subs	r5, #1
   1407e:	6045      	str	r5, [r0, #4]
   14080:	428b      	cmp	r3, r1
   14082:	bf1c      	itt	ne
   14084:	f844 3c10 	strne.w	r3, [r4, #-16]
   14088:	6001      	strne	r1, [r0, #0]
   1408a:	4620      	mov	r0, r4
   1408c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   1408e:	f008 ff91 	bl	1cfb4 <_Unwind_Complete>
   14092:	4620      	mov	r0, r4
   14094:	bd38      	pop	{r3, r4, r5, pc}
   14096:	f1c2 0201 	rsb	r2, r2, #1
   1409a:	e7ec      	b.n	14076 <__cxa_begin_catch+0x52>
   1409c:	f7ff fc64 	bl	13968 <_ZSt9terminatev>

000140a0 <__cxa_end_catch>:
   140a0:	b508      	push	{r3, lr}
   140a2:	f000 f843 	bl	1412c <__cxa_get_globals_fast>
   140a6:	4602      	mov	r2, r0
   140a8:	6800      	ldr	r0, [r0, #0]
   140aa:	2800      	cmp	r0, #0
   140ac:	d03d      	beq.n	1412a <__cxa_end_catch+0x8a>
   140ae:	f890 3020 	ldrb.w	r3, [r0, #32]
   140b2:	2b47      	cmp	r3, #71	; 0x47
   140b4:	d006      	beq.n	140c4 <__cxa_end_catch+0x24>
   140b6:	2300      	movs	r3, #0
   140b8:	6013      	str	r3, [r2, #0]
   140ba:	3020      	adds	r0, #32
   140bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   140c0:	f008 bf7a 	b.w	1cfb8 <_Unwind_DeleteException>
   140c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   140c8:	2b4e      	cmp	r3, #78	; 0x4e
   140ca:	d1f4      	bne.n	140b6 <__cxa_end_catch+0x16>
   140cc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   140d0:	2b55      	cmp	r3, #85	; 0x55
   140d2:	d1f0      	bne.n	140b6 <__cxa_end_catch+0x16>
   140d4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   140d8:	2b43      	cmp	r3, #67	; 0x43
   140da:	d1ec      	bne.n	140b6 <__cxa_end_catch+0x16>
   140dc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   140e0:	2b43      	cmp	r3, #67	; 0x43
   140e2:	d1e8      	bne.n	140b6 <__cxa_end_catch+0x16>
   140e4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   140e8:	2b2b      	cmp	r3, #43	; 0x2b
   140ea:	d1e4      	bne.n	140b6 <__cxa_end_catch+0x16>
   140ec:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   140f0:	2b2b      	cmp	r3, #43	; 0x2b
   140f2:	d1e0      	bne.n	140b6 <__cxa_end_catch+0x16>
   140f4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   140f8:	2b01      	cmp	r3, #1
   140fa:	d8dc      	bhi.n	140b6 <__cxa_end_catch+0x16>
   140fc:	6943      	ldr	r3, [r0, #20]
   140fe:	2b00      	cmp	r3, #0
   14100:	db05      	blt.n	1410e <__cxa_end_catch+0x6e>
   14102:	3b01      	subs	r3, #1
   14104:	d008      	beq.n	14118 <__cxa_end_catch+0x78>
   14106:	1c5a      	adds	r2, r3, #1
   14108:	d00d      	beq.n	14126 <__cxa_end_catch+0x86>
   1410a:	6143      	str	r3, [r0, #20]
   1410c:	bd08      	pop	{r3, pc}
   1410e:	3301      	adds	r3, #1
   14110:	d1fb      	bne.n	1410a <__cxa_end_catch+0x6a>
   14112:	6901      	ldr	r1, [r0, #16]
   14114:	6011      	str	r1, [r2, #0]
   14116:	e7f8      	b.n	1410a <__cxa_end_catch+0x6a>
   14118:	6903      	ldr	r3, [r0, #16]
   1411a:	6013      	str	r3, [r2, #0]
   1411c:	3020      	adds	r0, #32
   1411e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14122:	f008 bf49 	b.w	1cfb8 <_Unwind_DeleteException>
   14126:	f7ff fc1f 	bl	13968 <_ZSt9terminatev>
   1412a:	bd08      	pop	{r3, pc}

0001412c <__cxa_get_globals_fast>:
   1412c:	4800      	ldr	r0, [pc, #0]	; (14130 <__cxa_get_globals_fast+0x4>)
   1412e:	4770      	bx	lr
   14130:	200022a0 	.word	0x200022a0

00014134 <__cxa_get_globals>:
   14134:	4800      	ldr	r0, [pc, #0]	; (14138 <__cxa_get_globals+0x4>)
   14136:	4770      	bx	lr
   14138:	200022a0 	.word	0x200022a0

0001413c <_ZL28read_encoded_value_with_basehjPKhPj>:
   1413c:	2850      	cmp	r0, #80	; 0x50
   1413e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14140:	d054      	beq.n	141ec <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   14142:	f000 040f 	and.w	r4, r0, #15
   14146:	2c0c      	cmp	r4, #12
   14148:	d84e      	bhi.n	141e8 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   1414a:	e8df f004 	tbb	[pc, r4]
   1414e:	3907      	.short	0x3907
   14150:	4d170749 	.word	0x4d170749
   14154:	1f4d4d4d 	.word	0x1f4d4d4d
   14158:	071b      	.short	0x071b
   1415a:	17          	.byte	0x17
   1415b:	00          	.byte	0x00
   1415c:	4615      	mov	r5, r2
   1415e:	f855 4b04 	ldr.w	r4, [r5], #4
   14162:	b144      	cbz	r4, 14176 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   14164:	f000 0670 	and.w	r6, r0, #112	; 0x70
   14168:	2e10      	cmp	r6, #16
   1416a:	bf08      	it	eq
   1416c:	4611      	moveq	r1, r2
   1416e:	440c      	add	r4, r1
   14170:	0602      	lsls	r2, r0, #24
   14172:	bf48      	it	mi
   14174:	6824      	ldrmi	r4, [r4, #0]
   14176:	601c      	str	r4, [r3, #0]
   14178:	4628      	mov	r0, r5
   1417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1417c:	4615      	mov	r5, r2
   1417e:	f855 4b08 	ldr.w	r4, [r5], #8
   14182:	e7ee      	b.n	14162 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   14184:	4615      	mov	r5, r2
   14186:	f935 4b02 	ldrsh.w	r4, [r5], #2
   1418a:	e7ea      	b.n	14162 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1418c:	2400      	movs	r4, #0
   1418e:	4627      	mov	r7, r4
   14190:	4615      	mov	r5, r2
   14192:	f815 eb01 	ldrb.w	lr, [r5], #1
   14196:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   1419a:	40be      	lsls	r6, r7
   1419c:	f01e 0f80 	tst.w	lr, #128	; 0x80
   141a0:	ea44 0406 	orr.w	r4, r4, r6
   141a4:	f107 0707 	add.w	r7, r7, #7
   141a8:	d1f3      	bne.n	14192 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   141aa:	2f1f      	cmp	r7, #31
   141ac:	d8d9      	bhi.n	14162 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   141ae:	f01e 0f40 	tst.w	lr, #64	; 0x40
   141b2:	d0d6      	beq.n	14162 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   141b4:	f04f 36ff 	mov.w	r6, #4294967295
   141b8:	fa06 f707 	lsl.w	r7, r6, r7
   141bc:	433c      	orrs	r4, r7
   141be:	e7d1      	b.n	14164 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   141c0:	2400      	movs	r4, #0
   141c2:	4627      	mov	r7, r4
   141c4:	4615      	mov	r5, r2
   141c6:	f815 eb01 	ldrb.w	lr, [r5], #1
   141ca:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   141ce:	40be      	lsls	r6, r7
   141d0:	f01e 0f80 	tst.w	lr, #128	; 0x80
   141d4:	ea44 0406 	orr.w	r4, r4, r6
   141d8:	f107 0707 	add.w	r7, r7, #7
   141dc:	d1f3      	bne.n	141c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   141de:	e7c0      	b.n	14162 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   141e0:	4615      	mov	r5, r2
   141e2:	f835 4b02 	ldrh.w	r4, [r5], #2
   141e6:	e7bc      	b.n	14162 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   141e8:	f009 fc9c 	bl	1db24 <abort>
   141ec:	3203      	adds	r2, #3
   141ee:	f022 0503 	bic.w	r5, r2, #3
   141f2:	f855 4b04 	ldr.w	r4, [r5], #4
   141f6:	601c      	str	r4, [r3, #0]
   141f8:	4628      	mov	r0, r5
   141fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000141fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   141fc:	28ff      	cmp	r0, #255	; 0xff
   141fe:	d00d      	beq.n	1421c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   14200:	f000 0070 	and.w	r0, r0, #112	; 0x70
   14204:	2820      	cmp	r0, #32
   14206:	d015      	beq.n	14234 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   14208:	d90a      	bls.n	14220 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1420a:	2840      	cmp	r0, #64	; 0x40
   1420c:	d00f      	beq.n	1422e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   1420e:	2850      	cmp	r0, #80	; 0x50
   14210:	d004      	beq.n	1421c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   14212:	2830      	cmp	r0, #48	; 0x30
   14214:	d108      	bne.n	14228 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   14216:	4608      	mov	r0, r1
   14218:	f009 bc7e 	b.w	1db18 <_Unwind_GetDataRelBase>
   1421c:	2000      	movs	r0, #0
   1421e:	4770      	bx	lr
   14220:	2800      	cmp	r0, #0
   14222:	d0fb      	beq.n	1421c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   14224:	2810      	cmp	r0, #16
   14226:	d0f9      	beq.n	1421c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   14228:	b508      	push	{r3, lr}
   1422a:	f009 fc7b 	bl	1db24 <abort>
   1422e:	4608      	mov	r0, r1
   14230:	f009 bc5e 	b.w	1daf0 <_Unwind_GetRegionStart>
   14234:	4608      	mov	r0, r1
   14236:	f009 bc6b 	b.w	1db10 <_Unwind_GetTextRelBase>
   1423a:	bf00      	nop

0001423c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   1423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1423e:	460c      	mov	r4, r1
   14240:	4615      	mov	r5, r2
   14242:	4607      	mov	r7, r0
   14244:	2800      	cmp	r0, #0
   14246:	d044      	beq.n	142d2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   14248:	f009 fc52 	bl	1daf0 <_Unwind_GetRegionStart>
   1424c:	6028      	str	r0, [r5, #0]
   1424e:	7826      	ldrb	r6, [r4, #0]
   14250:	2eff      	cmp	r6, #255	; 0xff
   14252:	f104 0401 	add.w	r4, r4, #1
   14256:	d032      	beq.n	142be <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   14258:	4639      	mov	r1, r7
   1425a:	4630      	mov	r0, r6
   1425c:	f7ff ffce 	bl	141fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14260:	4622      	mov	r2, r4
   14262:	4601      	mov	r1, r0
   14264:	1d2b      	adds	r3, r5, #4
   14266:	4630      	mov	r0, r6
   14268:	f7ff ff68 	bl	1413c <_ZL28read_encoded_value_with_basehjPKhPj>
   1426c:	4604      	mov	r4, r0
   1426e:	1c60      	adds	r0, r4, #1
   14270:	7823      	ldrb	r3, [r4, #0]
   14272:	752b      	strb	r3, [r5, #20]
   14274:	2bff      	cmp	r3, #255	; 0xff
   14276:	d029      	beq.n	142cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   14278:	2310      	movs	r3, #16
   1427a:	2400      	movs	r4, #0
   1427c:	752b      	strb	r3, [r5, #20]
   1427e:	4622      	mov	r2, r4
   14280:	f810 1b01 	ldrb.w	r1, [r0], #1
   14284:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   14288:	4093      	lsls	r3, r2
   1428a:	0609      	lsls	r1, r1, #24
   1428c:	ea44 0403 	orr.w	r4, r4, r3
   14290:	f102 0207 	add.w	r2, r2, #7
   14294:	d4f4      	bmi.n	14280 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   14296:	4404      	add	r4, r0
   14298:	60ec      	str	r4, [r5, #12]
   1429a:	7803      	ldrb	r3, [r0, #0]
   1429c:	756b      	strb	r3, [r5, #21]
   1429e:	2400      	movs	r4, #0
   142a0:	3001      	adds	r0, #1
   142a2:	4622      	mov	r2, r4
   142a4:	f810 1b01 	ldrb.w	r1, [r0], #1
   142a8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   142ac:	4093      	lsls	r3, r2
   142ae:	431c      	orrs	r4, r3
   142b0:	060b      	lsls	r3, r1, #24
   142b2:	f102 0207 	add.w	r2, r2, #7
   142b6:	d4f5      	bmi.n	142a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   142b8:	4404      	add	r4, r0
   142ba:	612c      	str	r4, [r5, #16]
   142bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   142be:	6068      	str	r0, [r5, #4]
   142c0:	7823      	ldrb	r3, [r4, #0]
   142c2:	752b      	strb	r3, [r5, #20]
   142c4:	2bff      	cmp	r3, #255	; 0xff
   142c6:	f104 0001 	add.w	r0, r4, #1
   142ca:	d1d5      	bne.n	14278 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   142cc:	2300      	movs	r3, #0
   142ce:	60eb      	str	r3, [r5, #12]
   142d0:	e7e3      	b.n	1429a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   142d2:	e7bb      	b.n	1424c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

000142d4 <__gxx_personality_v0>:
   142d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142d8:	f000 0403 	and.w	r4, r0, #3
   142dc:	b097      	sub	sp, #92	; 0x5c
   142de:	2300      	movs	r3, #0
   142e0:	2c01      	cmp	r4, #1
   142e2:	4689      	mov	r9, r1
   142e4:	4617      	mov	r7, r2
   142e6:	930a      	str	r3, [sp, #40]	; 0x28
   142e8:	d01e      	beq.n	14328 <__gxx_personality_v0+0x54>
   142ea:	d30e      	bcc.n	1430a <__gxx_personality_v0+0x36>
   142ec:	2c02      	cmp	r4, #2
   142ee:	d10a      	bne.n	14306 <__gxx_personality_v0+0x32>
   142f0:	4639      	mov	r1, r7
   142f2:	4648      	mov	r0, r9
   142f4:	f009 fbe8 	bl	1dac8 <__gnu_unwind_frame>
   142f8:	2800      	cmp	r0, #0
   142fa:	f000 80a5 	beq.w	14448 <__gxx_personality_v0+0x174>
   142fe:	2009      	movs	r0, #9
   14300:	b017      	add	sp, #92	; 0x5c
   14302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14306:	f009 fc0d 	bl	1db24 <abort>
   1430a:	0700      	lsls	r0, r0, #28
   1430c:	d4f0      	bmi.n	142f0 <__gxx_personality_v0+0x1c>
   1430e:	2301      	movs	r3, #1
   14310:	9303      	str	r3, [sp, #12]
   14312:	aa16      	add	r2, sp, #88	; 0x58
   14314:	2300      	movs	r3, #0
   14316:	f842 9d2c 	str.w	r9, [r2, #-44]!
   1431a:	4619      	mov	r1, r3
   1431c:	9200      	str	r2, [sp, #0]
   1431e:	4638      	mov	r0, r7
   14320:	220c      	movs	r2, #12
   14322:	f008 fe75 	bl	1d010 <_Unwind_VRS_Set>
   14326:	e00f      	b.n	14348 <__gxx_personality_v0+0x74>
   14328:	f010 0408 	ands.w	r4, r0, #8
   1432c:	f000 8090 	beq.w	14450 <__gxx_personality_v0+0x17c>
   14330:	aa16      	add	r2, sp, #88	; 0x58
   14332:	f044 0402 	orr.w	r4, r4, #2
   14336:	f842 1d2c 	str.w	r1, [r2, #-44]!
   1433a:	4638      	mov	r0, r7
   1433c:	9200      	str	r2, [sp, #0]
   1433e:	4619      	mov	r1, r3
   14340:	220c      	movs	r2, #12
   14342:	9403      	str	r4, [sp, #12]
   14344:	f008 fe64 	bl	1d010 <_Unwind_VRS_Set>
   14348:	4638      	mov	r0, r7
   1434a:	f009 fbd7 	bl	1dafc <_Unwind_GetLanguageSpecificData>
   1434e:	9005      	str	r0, [sp, #20]
   14350:	2800      	cmp	r0, #0
   14352:	d0cd      	beq.n	142f0 <__gxx_personality_v0+0x1c>
   14354:	ab10      	add	r3, sp, #64	; 0x40
   14356:	461a      	mov	r2, r3
   14358:	9905      	ldr	r1, [sp, #20]
   1435a:	9306      	str	r3, [sp, #24]
   1435c:	4638      	mov	r0, r7
   1435e:	f7ff ff6d 	bl	1423c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   14362:	4639      	mov	r1, r7
   14364:	4604      	mov	r4, r0
   14366:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1436a:	f7ff ff47 	bl	141fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1436e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   14372:	2300      	movs	r3, #0
   14374:	9012      	str	r0, [sp, #72]	; 0x48
   14376:	4619      	mov	r1, r3
   14378:	220f      	movs	r2, #15
   1437a:	f8cd b000 	str.w	fp, [sp]
   1437e:	4638      	mov	r0, r7
   14380:	f008 fe20 	bl	1cfc4 <_Unwind_VRS_Get>
   14384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14386:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14388:	f023 0301 	bic.w	r3, r3, #1
   1438c:	42a2      	cmp	r2, r4
   1438e:	f103 36ff 	add.w	r6, r3, #4294967295
   14392:	d975      	bls.n	14480 <__gxx_personality_v0+0x1ac>
   14394:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14398:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1439c:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   143a0:	2100      	movs	r1, #0
   143a2:	4628      	mov	r0, r5
   143a4:	f7ff ff2a 	bl	141fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   143a8:	4622      	mov	r2, r4
   143aa:	4653      	mov	r3, sl
   143ac:	4601      	mov	r1, r0
   143ae:	4628      	mov	r0, r5
   143b0:	f7ff fec4 	bl	1413c <_ZL28read_encoded_value_with_basehjPKhPj>
   143b4:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   143b8:	4605      	mov	r5, r0
   143ba:	2100      	movs	r1, #0
   143bc:	4620      	mov	r0, r4
   143be:	f7ff ff1d 	bl	141fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   143c2:	462a      	mov	r2, r5
   143c4:	4643      	mov	r3, r8
   143c6:	4601      	mov	r1, r0
   143c8:	4620      	mov	r0, r4
   143ca:	f7ff feb7 	bl	1413c <_ZL28read_encoded_value_with_basehjPKhPj>
   143ce:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   143d2:	4605      	mov	r5, r0
   143d4:	2100      	movs	r1, #0
   143d6:	4620      	mov	r0, r4
   143d8:	f7ff ff10 	bl	141fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   143dc:	462a      	mov	r2, r5
   143de:	4601      	mov	r1, r0
   143e0:	465b      	mov	r3, fp
   143e2:	4620      	mov	r0, r4
   143e4:	f7ff feaa 	bl	1413c <_ZL28read_encoded_value_with_basehjPKhPj>
   143e8:	4604      	mov	r4, r0
   143ea:	2000      	movs	r0, #0
   143ec:	4602      	mov	r2, r0
   143ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   143f2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   143f6:	4093      	lsls	r3, r2
   143f8:	0609      	lsls	r1, r1, #24
   143fa:	ea40 0003 	orr.w	r0, r0, r3
   143fe:	f102 0207 	add.w	r2, r2, #7
   14402:	d4f4      	bmi.n	143ee <__gxx_personality_v0+0x11a>
   14404:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14408:	4413      	add	r3, r2
   1440a:	429e      	cmp	r6, r3
   1440c:	d231      	bcs.n	14472 <__gxx_personality_v0+0x19e>
   1440e:	9b03      	ldr	r3, [sp, #12]
   14410:	07db      	lsls	r3, r3, #31
   14412:	d539      	bpl.n	14488 <__gxx_personality_v0+0x1b4>
   14414:	2500      	movs	r5, #0
   14416:	9504      	str	r5, [sp, #16]
   14418:	2300      	movs	r3, #0
   1441a:	4619      	mov	r1, r3
   1441c:	220d      	movs	r2, #13
   1441e:	f8cd 8000 	str.w	r8, [sp]
   14422:	4638      	mov	r0, r7
   14424:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14426:	f008 fdcd 	bl	1cfc4 <_Unwind_VRS_Get>
   1442a:	9a05      	ldr	r2, [sp, #20]
   1442c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1442e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   14432:	9a04      	ldr	r2, [sp, #16]
   14434:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   14438:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   1443c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14440:	f8c9 3020 	str.w	r3, [r9, #32]
   14444:	2006      	movs	r0, #6
   14446:	e75b      	b.n	14300 <__gxx_personality_v0+0x2c>
   14448:	2008      	movs	r0, #8
   1444a:	b017      	add	sp, #92	; 0x5c
   1444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14450:	ab10      	add	r3, sp, #64	; 0x40
   14452:	9300      	str	r3, [sp, #0]
   14454:	9306      	str	r3, [sp, #24]
   14456:	220d      	movs	r2, #13
   14458:	4623      	mov	r3, r4
   1445a:	4621      	mov	r1, r4
   1445c:	4638      	mov	r0, r7
   1445e:	f8d9 5020 	ldr.w	r5, [r9, #32]
   14462:	f008 fdaf 	bl	1cfc4 <_Unwind_VRS_Get>
   14466:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14468:	429d      	cmp	r5, r3
   1446a:	d012      	beq.n	14492 <__gxx_personality_v0+0x1be>
   1446c:	2302      	movs	r3, #2
   1446e:	9303      	str	r3, [sp, #12]
   14470:	e74f      	b.n	14312 <__gxx_personality_v0+0x3e>
   14472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14474:	4413      	add	r3, r2
   14476:	429e      	cmp	r6, r3
   14478:	d359      	bcc.n	1452e <__gxx_personality_v0+0x25a>
   1447a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1447c:	42a3      	cmp	r3, r4
   1447e:	d88d      	bhi.n	1439c <__gxx_personality_v0+0xc8>
   14480:	2500      	movs	r5, #0
   14482:	9504      	str	r5, [sp, #16]
   14484:	2401      	movs	r4, #1
   14486:	e105      	b.n	14694 <__gxx_personality_v0+0x3c0>
   14488:	9b03      	ldr	r3, [sp, #12]
   1448a:	071b      	lsls	r3, r3, #28
   1448c:	d54c      	bpl.n	14528 <__gxx_personality_v0+0x254>
   1448e:	f7ff fa6b 	bl	13968 <_ZSt9terminatev>
   14492:	aa16      	add	r2, sp, #88	; 0x58
   14494:	4623      	mov	r3, r4
   14496:	f842 9d2c 	str.w	r9, [r2, #-44]!
   1449a:	4621      	mov	r1, r4
   1449c:	9200      	str	r2, [sp, #0]
   1449e:	4638      	mov	r0, r7
   144a0:	220c      	movs	r2, #12
   144a2:	f008 fdb5 	bl	1d010 <_Unwind_VRS_Set>
   144a6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   144aa:	9304      	str	r3, [sp, #16]
   144ac:	2b00      	cmp	r3, #0
   144ae:	d03b      	beq.n	14528 <__gxx_personality_v0+0x254>
   144b0:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   144b4:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   144b8:	2403      	movs	r4, #3
   144ba:	2d00      	cmp	r5, #0
   144bc:	f2c0 8106 	blt.w	146cc <__gxx_personality_v0+0x3f8>
   144c0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   144c4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   144c8:	a916      	add	r1, sp, #88	; 0x58
   144ca:	2300      	movs	r3, #0
   144cc:	f841 9d28 	str.w	r9, [r1, #-40]!
   144d0:	461a      	mov	r2, r3
   144d2:	9100      	str	r1, [sp, #0]
   144d4:	4638      	mov	r0, r7
   144d6:	4619      	mov	r1, r3
   144d8:	f008 fd9a 	bl	1d010 <_Unwind_VRS_Set>
   144dc:	2300      	movs	r3, #0
   144de:	4619      	mov	r1, r3
   144e0:	2201      	movs	r2, #1
   144e2:	f8cd a000 	str.w	sl, [sp]
   144e6:	4638      	mov	r0, r7
   144e8:	950d      	str	r5, [sp, #52]	; 0x34
   144ea:	f008 fd91 	bl	1d010 <_Unwind_VRS_Set>
   144ee:	2300      	movs	r3, #0
   144f0:	4619      	mov	r1, r3
   144f2:	220f      	movs	r2, #15
   144f4:	f8cd 8000 	str.w	r8, [sp]
   144f8:	4638      	mov	r0, r7
   144fa:	f008 fd63 	bl	1cfc4 <_Unwind_VRS_Get>
   144fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14500:	9a04      	ldr	r2, [sp, #16]
   14502:	f8cd 8000 	str.w	r8, [sp]
   14506:	f003 0501 	and.w	r5, r3, #1
   1450a:	2300      	movs	r3, #0
   1450c:	4315      	orrs	r5, r2
   1450e:	4638      	mov	r0, r7
   14510:	4619      	mov	r1, r3
   14512:	220f      	movs	r2, #15
   14514:	950e      	str	r5, [sp, #56]	; 0x38
   14516:	f008 fd7b 	bl	1d010 <_Unwind_VRS_Set>
   1451a:	2c02      	cmp	r4, #2
   1451c:	f000 8080 	beq.w	14620 <__gxx_personality_v0+0x34c>
   14520:	2007      	movs	r0, #7
   14522:	b017      	add	sp, #92	; 0x5c
   14524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14528:	4648      	mov	r0, r9
   1452a:	f7ff fcfb 	bl	13f24 <__cxa_call_terminate>
   1452e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14530:	9304      	str	r3, [sp, #16]
   14532:	461a      	mov	r2, r3
   14534:	2b00      	cmp	r3, #0
   14536:	d178      	bne.n	1462a <__gxx_personality_v0+0x356>
   14538:	2800      	cmp	r0, #0
   1453a:	f43f aed9 	beq.w	142f0 <__gxx_personality_v0+0x1c>
   1453e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14540:	9a04      	ldr	r2, [sp, #16]
   14542:	3801      	subs	r0, #1
   14544:	4403      	add	r3, r0
   14546:	2a00      	cmp	r2, #0
   14548:	f43f aed2 	beq.w	142f0 <__gxx_personality_v0+0x1c>
   1454c:	2b00      	cmp	r3, #0
   1454e:	d075      	beq.n	1463c <__gxx_personality_v0+0x368>
   14550:	9a03      	ldr	r2, [sp, #12]
   14552:	f012 0208 	ands.w	r2, r2, #8
   14556:	9209      	str	r2, [sp, #36]	; 0x24
   14558:	f000 80f6 	beq.w	14748 <__gxx_personality_v0+0x474>
   1455c:	2147      	movs	r1, #71	; 0x47
   1455e:	224e      	movs	r2, #78	; 0x4e
   14560:	f889 1000 	strb.w	r1, [r9]
   14564:	f889 2001 	strb.w	r2, [r9, #1]
   14568:	2155      	movs	r1, #85	; 0x55
   1456a:	2243      	movs	r2, #67	; 0x43
   1456c:	f889 1002 	strb.w	r1, [r9, #2]
   14570:	f889 2003 	strb.w	r2, [r9, #3]
   14574:	2146      	movs	r1, #70	; 0x46
   14576:	224f      	movs	r2, #79	; 0x4f
   14578:	f889 1004 	strb.w	r1, [r9, #4]
   1457c:	f889 2005 	strb.w	r2, [r9, #5]
   14580:	2152      	movs	r1, #82	; 0x52
   14582:	2200      	movs	r2, #0
   14584:	f889 1006 	strb.w	r1, [r9, #6]
   14588:	f889 2007 	strb.w	r2, [r9, #7]
   1458c:	2200      	movs	r2, #0
   1458e:	9208      	str	r2, [sp, #32]
   14590:	9707      	str	r7, [sp, #28]
   14592:	2500      	movs	r5, #0
   14594:	4629      	mov	r1, r5
   14596:	e000      	b.n	1459a <__gxx_personality_v0+0x2c6>
   14598:	4623      	mov	r3, r4
   1459a:	461c      	mov	r4, r3
   1459c:	f814 0b01 	ldrb.w	r0, [r4], #1
   145a0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   145a4:	408a      	lsls	r2, r1
   145a6:	0606      	lsls	r6, r0, #24
   145a8:	ea45 0502 	orr.w	r5, r5, r2
   145ac:	f101 0107 	add.w	r1, r1, #7
   145b0:	d4f2      	bmi.n	14598 <__gxx_personality_v0+0x2c4>
   145b2:	291f      	cmp	r1, #31
   145b4:	d805      	bhi.n	145c2 <__gxx_personality_v0+0x2ee>
   145b6:	0642      	lsls	r2, r0, #25
   145b8:	d503      	bpl.n	145c2 <__gxx_personality_v0+0x2ee>
   145ba:	2201      	movs	r2, #1
   145bc:	408a      	lsls	r2, r1
   145be:	4252      	negs	r2, r2
   145c0:	4315      	orrs	r5, r2
   145c2:	2600      	movs	r6, #0
   145c4:	4631      	mov	r1, r6
   145c6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   145ca:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   145ce:	408a      	lsls	r2, r1
   145d0:	0607      	lsls	r7, r0, #24
   145d2:	ea46 0602 	orr.w	r6, r6, r2
   145d6:	f101 0107 	add.w	r1, r1, #7
   145da:	d4f4      	bmi.n	145c6 <__gxx_personality_v0+0x2f2>
   145dc:	291f      	cmp	r1, #31
   145de:	d805      	bhi.n	145ec <__gxx_personality_v0+0x318>
   145e0:	0640      	lsls	r0, r0, #25
   145e2:	d503      	bpl.n	145ec <__gxx_personality_v0+0x318>
   145e4:	2301      	movs	r3, #1
   145e6:	408b      	lsls	r3, r1
   145e8:	425b      	negs	r3, r3
   145ea:	431e      	orrs	r6, r3
   145ec:	2d00      	cmp	r5, #0
   145ee:	d05c      	beq.n	146aa <__gxx_personality_v0+0x3d6>
   145f0:	dd5e      	ble.n	146b0 <__gxx_personality_v0+0x3dc>
   145f2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   145f6:	28ff      	cmp	r0, #255	; 0xff
   145f8:	f000 80a4 	beq.w	14744 <__gxx_personality_v0+0x470>
   145fc:	f000 0307 	and.w	r3, r0, #7
   14600:	2b04      	cmp	r3, #4
   14602:	f63f ae80 	bhi.w	14306 <__gxx_personality_v0+0x32>
   14606:	a201      	add	r2, pc, #4	; (adr r2, 1460c <__gxx_personality_v0+0x338>)
   14608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1460c:	00014677 	.word	0x00014677
   14610:	00014307 	.word	0x00014307
   14614:	0001467d 	.word	0x0001467d
   14618:	00014677 	.word	0x00014677
   1461c:	00014655 	.word	0x00014655
   14620:	4648      	mov	r0, r9
   14622:	f7ff fbf7 	bl	13e14 <__cxa_begin_cleanup>
   14626:	2007      	movs	r0, #7
   14628:	e66a      	b.n	14300 <__gxx_personality_v0+0x2c>
   1462a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1462c:	441a      	add	r2, r3
   1462e:	9204      	str	r2, [sp, #16]
   14630:	2800      	cmp	r0, #0
   14632:	d184      	bne.n	1453e <__gxx_personality_v0+0x26a>
   14634:	9b04      	ldr	r3, [sp, #16]
   14636:	2b00      	cmp	r3, #0
   14638:	f43f ae5a 	beq.w	142f0 <__gxx_personality_v0+0x1c>
   1463c:	9b03      	ldr	r3, [sp, #12]
   1463e:	f013 0301 	ands.w	r3, r3, #1
   14642:	f47f ae55 	bne.w	142f0 <__gxx_personality_v0+0x1c>
   14646:	9a03      	ldr	r2, [sp, #12]
   14648:	f012 0508 	ands.w	r5, r2, #8
   1464c:	f040 8097 	bne.w	1477e <__gxx_personality_v0+0x4aa>
   14650:	2402      	movs	r4, #2
   14652:	e739      	b.n	144c8 <__gxx_personality_v0+0x1f4>
   14654:	00eb      	lsls	r3, r5, #3
   14656:	425b      	negs	r3, r3
   14658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1465a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1465c:	441a      	add	r2, r3
   1465e:	4643      	mov	r3, r8
   14660:	f7ff fd6c 	bl	1413c <_ZL28read_encoded_value_with_basehjPKhPj>
   14664:	990e      	ldr	r1, [sp, #56]	; 0x38
   14666:	b199      	cbz	r1, 14690 <__gxx_personality_v0+0x3bc>
   14668:	f1b9 0f00 	cmp.w	r9, #0
   1466c:	d109      	bne.n	14682 <__gxx_personality_v0+0x3ae>
   1466e:	2e00      	cmp	r6, #0
   14670:	d077      	beq.n	14762 <__gxx_personality_v0+0x48e>
   14672:	19a3      	adds	r3, r4, r6
   14674:	e78d      	b.n	14592 <__gxx_personality_v0+0x2be>
   14676:	00ab      	lsls	r3, r5, #2
   14678:	425b      	negs	r3, r3
   1467a:	e7ed      	b.n	14658 <__gxx_personality_v0+0x384>
   1467c:	006b      	lsls	r3, r5, #1
   1467e:	425b      	negs	r3, r3
   14680:	e7ea      	b.n	14658 <__gxx_personality_v0+0x384>
   14682:	ab0a      	add	r3, sp, #40	; 0x28
   14684:	2200      	movs	r2, #0
   14686:	4648      	mov	r0, r9
   14688:	f7ff fb68 	bl	13d5c <__cxa_type_match>
   1468c:	2800      	cmp	r0, #0
   1468e:	d0ee      	beq.n	1466e <__gxx_personality_v0+0x39a>
   14690:	9f07      	ldr	r7, [sp, #28]
   14692:	2403      	movs	r4, #3
   14694:	9b03      	ldr	r3, [sp, #12]
   14696:	07da      	lsls	r2, r3, #31
   14698:	d460      	bmi.n	1475c <__gxx_personality_v0+0x488>
   1469a:	9b03      	ldr	r3, [sp, #12]
   1469c:	0719      	lsls	r1, r3, #28
   1469e:	d466      	bmi.n	1476e <__gxx_personality_v0+0x49a>
   146a0:	2c01      	cmp	r4, #1
   146a2:	f43f af41 	beq.w	14528 <__gxx_personality_v0+0x254>
   146a6:	9905      	ldr	r1, [sp, #20]
   146a8:	e707      	b.n	144ba <__gxx_personality_v0+0x1e6>
   146aa:	2301      	movs	r3, #1
   146ac:	9308      	str	r3, [sp, #32]
   146ae:	e7de      	b.n	1466e <__gxx_personality_v0+0x39a>
   146b0:	f1b9 0f00 	cmp.w	r9, #0
   146b4:	d001      	beq.n	146ba <__gxx_personality_v0+0x3e6>
   146b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   146b8:	b35b      	cbz	r3, 14712 <__gxx_personality_v0+0x43e>
   146ba:	1c6b      	adds	r3, r5, #1
   146bc:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   146c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   146c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c6:	2b00      	cmp	r3, #0
   146c8:	d1d1      	bne.n	1466e <__gxx_personality_v0+0x39a>
   146ca:	e7e1      	b.n	14690 <__gxx_personality_v0+0x3bc>
   146cc:	9a06      	ldr	r2, [sp, #24]
   146ce:	4638      	mov	r0, r7
   146d0:	f7ff fdb4 	bl	1423c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   146d4:	4639      	mov	r1, r7
   146d6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   146da:	f7ff fd8f 	bl	141fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   146de:	00aa      	lsls	r2, r5, #2
   146e0:	f082 0203 	eor.w	r2, r2, #3
   146e4:	43d2      	mvns	r2, r2
   146e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   146e8:	9012      	str	r0, [sp, #72]	; 0x48
   146ea:	58b3      	ldr	r3, [r6, r2]
   146ec:	4416      	add	r6, r2
   146ee:	b133      	cbz	r3, 146fe <__gxx_personality_v0+0x42a>
   146f0:	4632      	mov	r2, r6
   146f2:	2300      	movs	r3, #0
   146f4:	f852 1f04 	ldr.w	r1, [r2, #4]!
   146f8:	3301      	adds	r3, #1
   146fa:	2900      	cmp	r1, #0
   146fc:	d1fa      	bne.n	146f4 <__gxx_personality_v0+0x420>
   146fe:	2204      	movs	r2, #4
   14700:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   14704:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   14708:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   1470c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14710:	e6d6      	b.n	144c0 <__gxx_personality_v0+0x1ec>
   14712:	1c6f      	adds	r7, r5, #1
   14714:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   14718:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1471a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1471c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   14720:	920f      	str	r2, [sp, #60]	; 0x3c
   14722:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   14726:	b921      	cbnz	r1, 14732 <__gxx_personality_v0+0x45e>
   14728:	e7b2      	b.n	14690 <__gxx_personality_v0+0x3bc>
   1472a:	f857 1f04 	ldr.w	r1, [r7, #4]!
   1472e:	2900      	cmp	r1, #0
   14730:	d0ae      	beq.n	14690 <__gxx_personality_v0+0x3bc>
   14732:	4439      	add	r1, r7
   14734:	465b      	mov	r3, fp
   14736:	2200      	movs	r2, #0
   14738:	4648      	mov	r0, r9
   1473a:	f7ff fb0f 	bl	13d5c <__cxa_type_match>
   1473e:	2800      	cmp	r0, #0
   14740:	d0f3      	beq.n	1472a <__gxx_personality_v0+0x456>
   14742:	e794      	b.n	1466e <__gxx_personality_v0+0x39a>
   14744:	2300      	movs	r3, #0
   14746:	e787      	b.n	14658 <__gxx_personality_v0+0x384>
   14748:	f899 2007 	ldrb.w	r2, [r9, #7]
   1474c:	2a01      	cmp	r2, #1
   1474e:	bf0c      	ite	eq
   14750:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   14754:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   14758:	920a      	str	r2, [sp, #40]	; 0x28
   1475a:	e717      	b.n	1458c <__gxx_personality_v0+0x2b8>
   1475c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14760:	e65a      	b.n	14418 <__gxx_personality_v0+0x144>
   14762:	9b08      	ldr	r3, [sp, #32]
   14764:	9f07      	ldr	r7, [sp, #28]
   14766:	2b00      	cmp	r3, #0
   14768:	f47f af68 	bne.w	1463c <__gxx_personality_v0+0x368>
   1476c:	e5c0      	b.n	142f0 <__gxx_personality_v0+0x1c>
   1476e:	2c01      	cmp	r4, #1
   14770:	f43f ae8d 	beq.w	1448e <__gxx_personality_v0+0x1ba>
   14774:	2d00      	cmp	r5, #0
   14776:	f6bf aea3 	bge.w	144c0 <__gxx_personality_v0+0x1ec>
   1477a:	f7ff f903 	bl	13984 <_ZSt10unexpectedv>
   1477e:	461d      	mov	r5, r3
   14780:	2402      	movs	r4, #2
   14782:	e6a1      	b.n	144c8 <__gxx_personality_v0+0x1f4>
   14784:	f7ff fc4e 	bl	14024 <__cxa_begin_catch>
   14788:	e681      	b.n	1448e <__gxx_personality_v0+0x1ba>
   1478a:	bf00      	nop

0001478c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1478c:	b570      	push	{r4, r5, r6, lr}
   1478e:	4b3c      	ldr	r3, [pc, #240]	; (14880 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   14790:	781a      	ldrb	r2, [r3, #0]
   14792:	b082      	sub	sp, #8
   14794:	2a00      	cmp	r2, #0
   14796:	d135      	bne.n	14804 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   14798:	2401      	movs	r4, #1
   1479a:	701c      	strb	r4, [r3, #0]
   1479c:	f006 fbd2 	bl	1af44 <__cxa_current_exception_type>
   147a0:	2800      	cmp	r0, #0
   147a2:	d05b      	beq.n	1485c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   147a4:	6844      	ldr	r4, [r0, #4]
   147a6:	4d37      	ldr	r5, [pc, #220]	; (14884 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   147a8:	7823      	ldrb	r3, [r4, #0]
   147aa:	2b2a      	cmp	r3, #42	; 0x2a
   147ac:	ab02      	add	r3, sp, #8
   147ae:	f04f 32ff 	mov.w	r2, #4294967295
   147b2:	bf08      	it	eq
   147b4:	3401      	addeq	r4, #1
   147b6:	f843 2d04 	str.w	r2, [r3, #-4]!
   147ba:	2200      	movs	r2, #0
   147bc:	4611      	mov	r1, r2
   147be:	4620      	mov	r0, r4
   147c0:	f006 fb52 	bl	1ae68 <__cxa_demangle>
   147c4:	682b      	ldr	r3, [r5, #0]
   147c6:	4606      	mov	r6, r0
   147c8:	68db      	ldr	r3, [r3, #12]
   147ca:	482f      	ldr	r0, [pc, #188]	; (14888 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   147cc:	2230      	movs	r2, #48	; 0x30
   147ce:	2101      	movs	r1, #1
   147d0:	f009 fbfc 	bl	1dfcc <fwrite>
   147d4:	9b01      	ldr	r3, [sp, #4]
   147d6:	b17b      	cbz	r3, 147f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   147d8:	682b      	ldr	r3, [r5, #0]
   147da:	4620      	mov	r0, r4
   147dc:	68d9      	ldr	r1, [r3, #12]
   147de:	f009 fa1f 	bl	1dc20 <fputs>
   147e2:	682b      	ldr	r3, [r5, #0]
   147e4:	4829      	ldr	r0, [pc, #164]	; (1488c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   147e6:	68db      	ldr	r3, [r3, #12]
   147e8:	2202      	movs	r2, #2
   147ea:	2101      	movs	r1, #1
   147ec:	f009 fbee 	bl	1dfcc <fwrite>
   147f0:	9b01      	ldr	r3, [sp, #4]
   147f2:	b18b      	cbz	r3, 14818 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   147f4:	f7ff f940 	bl	13a78 <__cxa_rethrow>
   147f8:	682b      	ldr	r3, [r5, #0]
   147fa:	4630      	mov	r0, r6
   147fc:	68d9      	ldr	r1, [r3, #12]
   147fe:	f009 fa0f 	bl	1dc20 <fputs>
   14802:	e7ee      	b.n	147e2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   14804:	4b1f      	ldr	r3, [pc, #124]	; (14884 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14806:	4822      	ldr	r0, [pc, #136]	; (14890 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   14808:	681b      	ldr	r3, [r3, #0]
   1480a:	221d      	movs	r2, #29
   1480c:	68db      	ldr	r3, [r3, #12]
   1480e:	2101      	movs	r1, #1
   14810:	f009 fbdc 	bl	1dfcc <fwrite>
   14814:	f009 f986 	bl	1db24 <abort>
   14818:	4630      	mov	r0, r6
   1481a:	f009 fc1f 	bl	1e05c <free>
   1481e:	e7e9      	b.n	147f4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   14820:	2901      	cmp	r1, #1
   14822:	460c      	mov	r4, r1
   14824:	d127      	bne.n	14876 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   14826:	f7ff fbfd 	bl	14024 <__cxa_begin_catch>
   1482a:	6803      	ldr	r3, [r0, #0]
   1482c:	689b      	ldr	r3, [r3, #8]
   1482e:	4798      	blx	r3
   14830:	682b      	ldr	r3, [r5, #0]
   14832:	4606      	mov	r6, r0
   14834:	68db      	ldr	r3, [r3, #12]
   14836:	4817      	ldr	r0, [pc, #92]	; (14894 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   14838:	4621      	mov	r1, r4
   1483a:	220b      	movs	r2, #11
   1483c:	f009 fbc6 	bl	1dfcc <fwrite>
   14840:	682b      	ldr	r3, [r5, #0]
   14842:	4630      	mov	r0, r6
   14844:	68d9      	ldr	r1, [r3, #12]
   14846:	f009 f9eb 	bl	1dc20 <fputs>
   1484a:	682b      	ldr	r3, [r5, #0]
   1484c:	200a      	movs	r0, #10
   1484e:	68d9      	ldr	r1, [r3, #12]
   14850:	f009 f976 	bl	1db40 <fputc>
   14854:	f7ff fc24 	bl	140a0 <__cxa_end_catch>
   14858:	f009 f964 	bl	1db24 <abort>
   1485c:	4b09      	ldr	r3, [pc, #36]	; (14884 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1485e:	480e      	ldr	r0, [pc, #56]	; (14898 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   14860:	681b      	ldr	r3, [r3, #0]
   14862:	4621      	mov	r1, r4
   14864:	68db      	ldr	r3, [r3, #12]
   14866:	222d      	movs	r2, #45	; 0x2d
   14868:	f009 fbb0 	bl	1dfcc <fwrite>
   1486c:	e7f4      	b.n	14858 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   1486e:	f7ff fc17 	bl	140a0 <__cxa_end_catch>
   14872:	f7ff fa6d 	bl	13d50 <__cxa_end_cleanup>
   14876:	f7ff fbd5 	bl	14024 <__cxa_begin_catch>
   1487a:	f7ff fc11 	bl	140a0 <__cxa_end_catch>
   1487e:	e7eb      	b.n	14858 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14880:	200022ac 	.word	0x200022ac
   14884:	20000108 	.word	0x20000108
   14888:	00023ff0 	.word	0x00023ff0
   1488c:	00024024 	.word	0x00024024
   14890:	00023fd0 	.word	0x00023fd0
   14894:	00024058 	.word	0x00024058
   14898:	00024028 	.word	0x00024028

0001489c <d_make_comp>:
   1489c:	b470      	push	{r4, r5, r6}
   1489e:	1e4c      	subs	r4, r1, #1
   148a0:	2c4c      	cmp	r4, #76	; 0x4c
   148a2:	d82d      	bhi.n	14900 <d_make_comp+0x64>
   148a4:	e8df f004 	tbb	[pc, r4]
   148a8:	3c3c3c3c 	.word	0x3c3c3c3c
   148ac:	2c2c2c2c 	.word	0x2c2c2c2c
   148b0:	273c2727 	.word	0x273c2727
   148b4:	27272727 	.word	0x27272727
   148b8:	27272727 	.word	0x27272727
   148bc:	2c272727 	.word	0x2c272727
   148c0:	28282828 	.word	0x28282828
   148c4:	28282828 	.word	0x28282828
   148c8:	2727273c 	.word	0x2727273c
   148cc:	272c2727 	.word	0x272c2727
   148d0:	2c3c3e28 	.word	0x2c3c3e28
   148d4:	3e28283c 	.word	0x3e28283c
   148d8:	27272c2c 	.word	0x27272c2c
   148dc:	3c3c3c27 	.word	0x3c3c3c27
   148e0:	3c273c3c 	.word	0x3c273c3c
   148e4:	2c3c273c 	.word	0x2c3c273c
   148e8:	2727272c 	.word	0x2727272c
   148ec:	272c2c2c 	.word	0x272c2c2c
   148f0:	283c2727 	.word	0x283c2727
   148f4:	3c          	.byte	0x3c
   148f5:	00          	.byte	0x00
   148f6:	b11a      	cbz	r2, 14900 <d_make_comp+0x64>
   148f8:	6944      	ldr	r4, [r0, #20]
   148fa:	6985      	ldr	r5, [r0, #24]
   148fc:	42ac      	cmp	r4, r5
   148fe:	db02      	blt.n	14906 <d_make_comp+0x6a>
   14900:	2000      	movs	r0, #0
   14902:	bc70      	pop	{r4, r5, r6}
   14904:	4770      	bx	lr
   14906:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1490a:	6906      	ldr	r6, [r0, #16]
   1490c:	00ad      	lsls	r5, r5, #2
   1490e:	3401      	adds	r4, #1
   14910:	6144      	str	r4, [r0, #20]
   14912:	1970      	adds	r0, r6, r5
   14914:	d0f5      	beq.n	14902 <d_make_comp+0x66>
   14916:	5571      	strb	r1, [r6, r5]
   14918:	6042      	str	r2, [r0, #4]
   1491a:	6083      	str	r3, [r0, #8]
   1491c:	bc70      	pop	{r4, r5, r6}
   1491e:	4770      	bx	lr
   14920:	2a00      	cmp	r2, #0
   14922:	d0ed      	beq.n	14900 <d_make_comp+0x64>
   14924:	2b00      	cmp	r3, #0
   14926:	d0eb      	beq.n	14900 <d_make_comp+0x64>
   14928:	6944      	ldr	r4, [r0, #20]
   1492a:	6985      	ldr	r5, [r0, #24]
   1492c:	42ac      	cmp	r4, r5
   1492e:	dae7      	bge.n	14900 <d_make_comp+0x64>
   14930:	e7e9      	b.n	14906 <d_make_comp+0x6a>
   14932:	bf00      	nop

00014934 <d_cv_qualifiers>:
   14934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14938:	68c3      	ldr	r3, [r0, #12]
   1493a:	f1b2 0a00 	subs.w	sl, r2, #0
   1493e:	4604      	mov	r4, r0
   14940:	460e      	mov	r6, r1
   14942:	781a      	ldrb	r2, [r3, #0]
   14944:	bf15      	itete	ne
   14946:	f04f 091e 	movne.w	r9, #30
   1494a:	f04f 091b 	moveq.w	r9, #27
   1494e:	f04f 081d 	movne.w	r8, #29
   14952:	f04f 081a 	moveq.w	r8, #26
   14956:	bf14      	ite	ne
   14958:	271c      	movne	r7, #28
   1495a:	2719      	moveq	r7, #25
   1495c:	460d      	mov	r5, r1
   1495e:	e018      	b.n	14992 <d_cv_qualifiers+0x5e>
   14960:	2a56      	cmp	r2, #86	; 0x56
   14962:	d01f      	beq.n	149a4 <d_cv_qualifiers+0x70>
   14964:	2a4b      	cmp	r2, #75	; 0x4b
   14966:	d024      	beq.n	149b2 <d_cv_qualifiers+0x7e>
   14968:	2a44      	cmp	r2, #68	; 0x44
   1496a:	d12d      	bne.n	149c8 <d_cv_qualifiers+0x94>
   1496c:	785a      	ldrb	r2, [r3, #1]
   1496e:	2a78      	cmp	r2, #120	; 0x78
   14970:	d127      	bne.n	149c2 <d_cv_qualifiers+0x8e>
   14972:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14974:	3302      	adds	r3, #2
   14976:	3211      	adds	r2, #17
   14978:	60e3      	str	r3, [r4, #12]
   1497a:	6322      	str	r2, [r4, #48]	; 0x30
   1497c:	214c      	movs	r1, #76	; 0x4c
   1497e:	2300      	movs	r3, #0
   14980:	461a      	mov	r2, r3
   14982:	4620      	mov	r0, r4
   14984:	f7ff ff8a 	bl	1489c <d_make_comp>
   14988:	6028      	str	r0, [r5, #0]
   1498a:	b1c8      	cbz	r0, 149c0 <d_cv_qualifiers+0x8c>
   1498c:	68e3      	ldr	r3, [r4, #12]
   1498e:	781a      	ldrb	r2, [r3, #0]
   14990:	1d05      	adds	r5, r0, #4
   14992:	2a72      	cmp	r2, #114	; 0x72
   14994:	d1e4      	bne.n	14960 <d_cv_qualifiers+0x2c>
   14996:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14998:	3301      	adds	r3, #1
   1499a:	3209      	adds	r2, #9
   1499c:	60e3      	str	r3, [r4, #12]
   1499e:	6322      	str	r2, [r4, #48]	; 0x30
   149a0:	4639      	mov	r1, r7
   149a2:	e7ec      	b.n	1497e <d_cv_qualifiers+0x4a>
   149a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
   149a6:	3301      	adds	r3, #1
   149a8:	3209      	adds	r2, #9
   149aa:	60e3      	str	r3, [r4, #12]
   149ac:	6322      	str	r2, [r4, #48]	; 0x30
   149ae:	4641      	mov	r1, r8
   149b0:	e7e5      	b.n	1497e <d_cv_qualifiers+0x4a>
   149b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   149b4:	3301      	adds	r3, #1
   149b6:	3206      	adds	r2, #6
   149b8:	60e3      	str	r3, [r4, #12]
   149ba:	6322      	str	r2, [r4, #48]	; 0x30
   149bc:	4649      	mov	r1, r9
   149be:	e7de      	b.n	1497e <d_cv_qualifiers+0x4a>
   149c0:	4605      	mov	r5, r0
   149c2:	4628      	mov	r0, r5
   149c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   149c8:	f1ba 0f00 	cmp.w	sl, #0
   149cc:	d1f9      	bne.n	149c2 <d_cv_qualifiers+0x8e>
   149ce:	2a46      	cmp	r2, #70	; 0x46
   149d0:	d1f7      	bne.n	149c2 <d_cv_qualifiers+0x8e>
   149d2:	42b5      	cmp	r5, r6
   149d4:	d0f5      	beq.n	149c2 <d_cv_qualifiers+0x8e>
   149d6:	201d      	movs	r0, #29
   149d8:	211e      	movs	r1, #30
   149da:	221c      	movs	r2, #28
   149dc:	e007      	b.n	149ee <d_cv_qualifiers+0xba>
   149de:	2b1b      	cmp	r3, #27
   149e0:	d00b      	beq.n	149fa <d_cv_qualifiers+0xc6>
   149e2:	2b19      	cmp	r3, #25
   149e4:	d100      	bne.n	149e8 <d_cv_qualifiers+0xb4>
   149e6:	7032      	strb	r2, [r6, #0]
   149e8:	3604      	adds	r6, #4
   149ea:	42b5      	cmp	r5, r6
   149ec:	d0e9      	beq.n	149c2 <d_cv_qualifiers+0x8e>
   149ee:	6836      	ldr	r6, [r6, #0]
   149f0:	7833      	ldrb	r3, [r6, #0]
   149f2:	2b1a      	cmp	r3, #26
   149f4:	d1f3      	bne.n	149de <d_cv_qualifiers+0xaa>
   149f6:	7030      	strb	r0, [r6, #0]
   149f8:	e7f6      	b.n	149e8 <d_cv_qualifiers+0xb4>
   149fa:	7031      	strb	r1, [r6, #0]
   149fc:	e7f4      	b.n	149e8 <d_cv_qualifiers+0xb4>
   149fe:	bf00      	nop

00014a00 <d_ref_qualifier>:
   14a00:	b410      	push	{r4}
   14a02:	68c3      	ldr	r3, [r0, #12]
   14a04:	781c      	ldrb	r4, [r3, #0]
   14a06:	2c52      	cmp	r4, #82	; 0x52
   14a08:	460a      	mov	r2, r1
   14a0a:	d00f      	beq.n	14a2c <d_ref_qualifier+0x2c>
   14a0c:	2c4f      	cmp	r4, #79	; 0x4f
   14a0e:	d003      	beq.n	14a18 <d_ref_qualifier+0x18>
   14a10:	4608      	mov	r0, r1
   14a12:	f85d 4b04 	ldr.w	r4, [sp], #4
   14a16:	4770      	bx	lr
   14a18:	6b01      	ldr	r1, [r0, #48]	; 0x30
   14a1a:	3103      	adds	r1, #3
   14a1c:	6301      	str	r1, [r0, #48]	; 0x30
   14a1e:	2120      	movs	r1, #32
   14a20:	3301      	adds	r3, #1
   14a22:	60c3      	str	r3, [r0, #12]
   14a24:	f85d 4b04 	ldr.w	r4, [sp], #4
   14a28:	2300      	movs	r3, #0
   14a2a:	e737      	b.n	1489c <d_make_comp>
   14a2c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   14a2e:	3102      	adds	r1, #2
   14a30:	6301      	str	r1, [r0, #48]	; 0x30
   14a32:	211f      	movs	r1, #31
   14a34:	e7f4      	b.n	14a20 <d_ref_qualifier+0x20>
   14a36:	bf00      	nop

00014a38 <d_count_templates_scopes>:
   14a38:	2a00      	cmp	r2, #0
   14a3a:	d04d      	beq.n	14ad8 <d_count_templates_scopes+0xa0>
   14a3c:	b570      	push	{r4, r5, r6, lr}
   14a3e:	4605      	mov	r5, r0
   14a40:	460e      	mov	r6, r1
   14a42:	4614      	mov	r4, r2
   14a44:	7823      	ldrb	r3, [r4, #0]
   14a46:	3b01      	subs	r3, #1
   14a48:	2b4c      	cmp	r3, #76	; 0x4c
   14a4a:	d82b      	bhi.n	14aa4 <d_count_templates_scopes+0x6c>
   14a4c:	e8df f003 	tbb	[pc, r3]
   14a50:	3f363636 	.word	0x3f363636
   14a54:	27272a2a 	.word	0x27272a2a
   14a58:	36363636 	.word	0x36363636
   14a5c:	36363636 	.word	0x36363636
   14a60:	36363636 	.word	0x36363636
   14a64:	2a363636 	.word	0x2a363636
   14a68:	36363636 	.word	0x36363636
   14a6c:	36363636 	.word	0x36363636
   14a70:	2f2f3636 	.word	0x2f2f3636
   14a74:	362a3636 	.word	0x362a3636
   14a78:	2b363636 	.word	0x2b363636
   14a7c:	36363636 	.word	0x36363636
   14a80:	3636272a 	.word	0x3636272a
   14a84:	36363636 	.word	0x36363636
   14a88:	36363636 	.word	0x36363636
   14a8c:	2a363636 	.word	0x2a363636
   14a90:	2b2b362a 	.word	0x2b2b362a
   14a94:	362a2b2b 	.word	0x362a2b2b
   14a98:	36363636 	.word	0x36363636
   14a9c:	36          	.byte	0x36
   14a9d:	00          	.byte	0x00
   14a9e:	68a4      	ldr	r4, [r4, #8]
   14aa0:	2c00      	cmp	r4, #0
   14aa2:	d1cf      	bne.n	14a44 <d_count_templates_scopes+0xc>
   14aa4:	bd70      	pop	{r4, r5, r6, pc}
   14aa6:	6864      	ldr	r4, [r4, #4]
   14aa8:	2c00      	cmp	r4, #0
   14aaa:	d1cb      	bne.n	14a44 <d_count_templates_scopes+0xc>
   14aac:	e7fa      	b.n	14aa4 <d_count_templates_scopes+0x6c>
   14aae:	6862      	ldr	r2, [r4, #4]
   14ab0:	7813      	ldrb	r3, [r2, #0]
   14ab2:	2b05      	cmp	r3, #5
   14ab4:	d103      	bne.n	14abe <d_count_templates_scopes+0x86>
   14ab6:	6833      	ldr	r3, [r6, #0]
   14ab8:	3301      	adds	r3, #1
   14aba:	6033      	str	r3, [r6, #0]
   14abc:	6862      	ldr	r2, [r4, #4]
   14abe:	4631      	mov	r1, r6
   14ac0:	4628      	mov	r0, r5
   14ac2:	f7ff ffb9 	bl	14a38 <d_count_templates_scopes>
   14ac6:	68a4      	ldr	r4, [r4, #8]
   14ac8:	2c00      	cmp	r4, #0
   14aca:	d1bb      	bne.n	14a44 <d_count_templates_scopes+0xc>
   14acc:	e7ea      	b.n	14aa4 <d_count_templates_scopes+0x6c>
   14ace:	682b      	ldr	r3, [r5, #0]
   14ad0:	3301      	adds	r3, #1
   14ad2:	602b      	str	r3, [r5, #0]
   14ad4:	6862      	ldr	r2, [r4, #4]
   14ad6:	e7f2      	b.n	14abe <d_count_templates_scopes+0x86>
   14ad8:	4770      	bx	lr
   14ada:	bf00      	nop

00014adc <d_append_buffer>:
   14adc:	b37a      	cbz	r2, 14b3e <d_append_buffer+0x62>
   14ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ae2:	460d      	mov	r5, r1
   14ae4:	4604      	mov	r4, r0
   14ae6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14aea:	18af      	adds	r7, r5, r2
   14aec:	f04f 0800 	mov.w	r8, #0
   14af0:	e009      	b.n	14b06 <d_append_buffer+0x2a>
   14af2:	460b      	mov	r3, r1
   14af4:	42bd      	cmp	r5, r7
   14af6:	f101 0101 	add.w	r1, r1, #1
   14afa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14afe:	54e6      	strb	r6, [r4, r3]
   14b00:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14b04:	d019      	beq.n	14b3a <d_append_buffer+0x5e>
   14b06:	29ff      	cmp	r1, #255	; 0xff
   14b08:	f815 6b01 	ldrb.w	r6, [r5], #1
   14b0c:	d1f1      	bne.n	14af2 <d_append_buffer+0x16>
   14b0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14b12:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14b16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14b1a:	4620      	mov	r0, r4
   14b1c:	4798      	blx	r3
   14b1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14b22:	3301      	adds	r3, #1
   14b24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14b28:	2300      	movs	r3, #0
   14b2a:	2101      	movs	r1, #1
   14b2c:	42bd      	cmp	r5, r7
   14b2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14b32:	54e6      	strb	r6, [r4, r3]
   14b34:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14b38:	d1e5      	bne.n	14b06 <d_append_buffer+0x2a>
   14b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b3e:	4770      	bx	lr

00014b40 <d_number.isra.0>:
   14b40:	b470      	push	{r4, r5, r6}
   14b42:	6802      	ldr	r2, [r0, #0]
   14b44:	7811      	ldrb	r1, [r2, #0]
   14b46:	296e      	cmp	r1, #110	; 0x6e
   14b48:	d018      	beq.n	14b7c <d_number.isra.0+0x3c>
   14b4a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   14b4e:	2b09      	cmp	r3, #9
   14b50:	d81e      	bhi.n	14b90 <d_number.isra.0+0x50>
   14b52:	2600      	movs	r6, #0
   14b54:	2300      	movs	r3, #0
   14b56:	3201      	adds	r2, #1
   14b58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14b5c:	6002      	str	r2, [r0, #0]
   14b5e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   14b62:	7811      	ldrb	r1, [r2, #0]
   14b64:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   14b68:	2d09      	cmp	r5, #9
   14b6a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   14b6e:	d9f2      	bls.n	14b56 <d_number.isra.0+0x16>
   14b70:	b10e      	cbz	r6, 14b76 <d_number.isra.0+0x36>
   14b72:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   14b76:	4618      	mov	r0, r3
   14b78:	bc70      	pop	{r4, r5, r6}
   14b7a:	4770      	bx	lr
   14b7c:	1c53      	adds	r3, r2, #1
   14b7e:	6003      	str	r3, [r0, #0]
   14b80:	7851      	ldrb	r1, [r2, #1]
   14b82:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14b86:	2a09      	cmp	r2, #9
   14b88:	d802      	bhi.n	14b90 <d_number.isra.0+0x50>
   14b8a:	461a      	mov	r2, r3
   14b8c:	2601      	movs	r6, #1
   14b8e:	e7e1      	b.n	14b54 <d_number.isra.0+0x14>
   14b90:	2300      	movs	r3, #0
   14b92:	e7f0      	b.n	14b76 <d_number.isra.0+0x36>

00014b94 <d_number_component>:
   14b94:	6943      	ldr	r3, [r0, #20]
   14b96:	6982      	ldr	r2, [r0, #24]
   14b98:	4293      	cmp	r3, r2
   14b9a:	b510      	push	{r4, lr}
   14b9c:	da0f      	bge.n	14bbe <d_number_component+0x2a>
   14b9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14ba2:	6901      	ldr	r1, [r0, #16]
   14ba4:	0092      	lsls	r2, r2, #2
   14ba6:	3301      	adds	r3, #1
   14ba8:	188c      	adds	r4, r1, r2
   14baa:	6143      	str	r3, [r0, #20]
   14bac:	d005      	beq.n	14bba <d_number_component+0x26>
   14bae:	2341      	movs	r3, #65	; 0x41
   14bb0:	300c      	adds	r0, #12
   14bb2:	548b      	strb	r3, [r1, r2]
   14bb4:	f7ff ffc4 	bl	14b40 <d_number.isra.0>
   14bb8:	6060      	str	r0, [r4, #4]
   14bba:	4620      	mov	r0, r4
   14bbc:	bd10      	pop	{r4, pc}
   14bbe:	2400      	movs	r4, #0
   14bc0:	4620      	mov	r0, r4
   14bc2:	bd10      	pop	{r4, pc}

00014bc4 <d_compact_number>:
   14bc4:	b510      	push	{r4, lr}
   14bc6:	68c3      	ldr	r3, [r0, #12]
   14bc8:	781a      	ldrb	r2, [r3, #0]
   14bca:	2a5f      	cmp	r2, #95	; 0x5f
   14bcc:	4604      	mov	r4, r0
   14bce:	d00d      	beq.n	14bec <d_compact_number+0x28>
   14bd0:	2a6e      	cmp	r2, #110	; 0x6e
   14bd2:	d00f      	beq.n	14bf4 <d_compact_number+0x30>
   14bd4:	300c      	adds	r0, #12
   14bd6:	f7ff ffb3 	bl	14b40 <d_number.isra.0>
   14bda:	3001      	adds	r0, #1
   14bdc:	d40a      	bmi.n	14bf4 <d_compact_number+0x30>
   14bde:	68e3      	ldr	r3, [r4, #12]
   14be0:	781a      	ldrb	r2, [r3, #0]
   14be2:	2a5f      	cmp	r2, #95	; 0x5f
   14be4:	d106      	bne.n	14bf4 <d_compact_number+0x30>
   14be6:	3301      	adds	r3, #1
   14be8:	60e3      	str	r3, [r4, #12]
   14bea:	bd10      	pop	{r4, pc}
   14bec:	3301      	adds	r3, #1
   14bee:	2000      	movs	r0, #0
   14bf0:	60e3      	str	r3, [r4, #12]
   14bf2:	bd10      	pop	{r4, pc}
   14bf4:	f04f 30ff 	mov.w	r0, #4294967295
   14bf8:	bd10      	pop	{r4, pc}
   14bfa:	bf00      	nop

00014bfc <d_template_param>:
   14bfc:	b538      	push	{r3, r4, r5, lr}
   14bfe:	68c3      	ldr	r3, [r0, #12]
   14c00:	781a      	ldrb	r2, [r3, #0]
   14c02:	2a54      	cmp	r2, #84	; 0x54
   14c04:	d001      	beq.n	14c0a <d_template_param+0xe>
   14c06:	2000      	movs	r0, #0
   14c08:	bd38      	pop	{r3, r4, r5, pc}
   14c0a:	3301      	adds	r3, #1
   14c0c:	60c3      	str	r3, [r0, #12]
   14c0e:	4604      	mov	r4, r0
   14c10:	f7ff ffd8 	bl	14bc4 <d_compact_number>
   14c14:	1e05      	subs	r5, r0, #0
   14c16:	dbf6      	blt.n	14c06 <d_template_param+0xa>
   14c18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14c1a:	6963      	ldr	r3, [r4, #20]
   14c1c:	69a1      	ldr	r1, [r4, #24]
   14c1e:	3201      	adds	r2, #1
   14c20:	428b      	cmp	r3, r1
   14c22:	62a2      	str	r2, [r4, #40]	; 0x28
   14c24:	daef      	bge.n	14c06 <d_template_param+0xa>
   14c26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14c2a:	6921      	ldr	r1, [r4, #16]
   14c2c:	0092      	lsls	r2, r2, #2
   14c2e:	3301      	adds	r3, #1
   14c30:	1888      	adds	r0, r1, r2
   14c32:	6163      	str	r3, [r4, #20]
   14c34:	d002      	beq.n	14c3c <d_template_param+0x40>
   14c36:	2305      	movs	r3, #5
   14c38:	548b      	strb	r3, [r1, r2]
   14c3a:	6045      	str	r5, [r0, #4]
   14c3c:	bd38      	pop	{r3, r4, r5, pc}
   14c3e:	bf00      	nop

00014c40 <d_source_name>:
   14c40:	b570      	push	{r4, r5, r6, lr}
   14c42:	4604      	mov	r4, r0
   14c44:	300c      	adds	r0, #12
   14c46:	f7ff ff7b 	bl	14b40 <d_number.isra.0>
   14c4a:	1e06      	subs	r6, r0, #0
   14c4c:	dd4d      	ble.n	14cea <d_source_name+0xaa>
   14c4e:	68e5      	ldr	r5, [r4, #12]
   14c50:	6863      	ldr	r3, [r4, #4]
   14c52:	1b5b      	subs	r3, r3, r5
   14c54:	429e      	cmp	r6, r3
   14c56:	dc2b      	bgt.n	14cb0 <d_source_name+0x70>
   14c58:	68a2      	ldr	r2, [r4, #8]
   14c5a:	19ab      	adds	r3, r5, r6
   14c5c:	0752      	lsls	r2, r2, #29
   14c5e:	60e3      	str	r3, [r4, #12]
   14c60:	d504      	bpl.n	14c6c <d_source_name+0x2c>
   14c62:	5daa      	ldrb	r2, [r5, r6]
   14c64:	2a24      	cmp	r2, #36	; 0x24
   14c66:	bf04      	itt	eq
   14c68:	3301      	addeq	r3, #1
   14c6a:	60e3      	streq	r3, [r4, #12]
   14c6c:	2e09      	cmp	r6, #9
   14c6e:	dd0c      	ble.n	14c8a <d_source_name+0x4a>
   14c70:	2208      	movs	r2, #8
   14c72:	491f      	ldr	r1, [pc, #124]	; (14cf0 <d_source_name+0xb0>)
   14c74:	4628      	mov	r0, r5
   14c76:	f009 fd13 	bl	1e6a0 <memcmp>
   14c7a:	b930      	cbnz	r0, 14c8a <d_source_name+0x4a>
   14c7c:	7a2b      	ldrb	r3, [r5, #8]
   14c7e:	2b2e      	cmp	r3, #46	; 0x2e
   14c80:	d019      	beq.n	14cb6 <d_source_name+0x76>
   14c82:	2b5f      	cmp	r3, #95	; 0x5f
   14c84:	d017      	beq.n	14cb6 <d_source_name+0x76>
   14c86:	2b24      	cmp	r3, #36	; 0x24
   14c88:	d015      	beq.n	14cb6 <d_source_name+0x76>
   14c8a:	6963      	ldr	r3, [r4, #20]
   14c8c:	69a2      	ldr	r2, [r4, #24]
   14c8e:	4293      	cmp	r3, r2
   14c90:	da0e      	bge.n	14cb0 <d_source_name+0x70>
   14c92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14c96:	6921      	ldr	r1, [r4, #16]
   14c98:	0092      	lsls	r2, r2, #2
   14c9a:	3301      	adds	r3, #1
   14c9c:	1888      	adds	r0, r1, r2
   14c9e:	6163      	str	r3, [r4, #20]
   14ca0:	d006      	beq.n	14cb0 <d_source_name+0x70>
   14ca2:	b12d      	cbz	r5, 14cb0 <d_source_name+0x70>
   14ca4:	2300      	movs	r3, #0
   14ca6:	548b      	strb	r3, [r1, r2]
   14ca8:	6045      	str	r5, [r0, #4]
   14caa:	6086      	str	r6, [r0, #8]
   14cac:	62e0      	str	r0, [r4, #44]	; 0x2c
   14cae:	bd70      	pop	{r4, r5, r6, pc}
   14cb0:	2000      	movs	r0, #0
   14cb2:	62e0      	str	r0, [r4, #44]	; 0x2c
   14cb4:	bd70      	pop	{r4, r5, r6, pc}
   14cb6:	7a6b      	ldrb	r3, [r5, #9]
   14cb8:	2b4e      	cmp	r3, #78	; 0x4e
   14cba:	d1e6      	bne.n	14c8a <d_source_name+0x4a>
   14cbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14cbe:	6962      	ldr	r2, [r4, #20]
   14cc0:	69a1      	ldr	r1, [r4, #24]
   14cc2:	3316      	adds	r3, #22
   14cc4:	1b9e      	subs	r6, r3, r6
   14cc6:	428a      	cmp	r2, r1
   14cc8:	6326      	str	r6, [r4, #48]	; 0x30
   14cca:	daf1      	bge.n	14cb0 <d_source_name+0x70>
   14ccc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14cd0:	6921      	ldr	r1, [r4, #16]
   14cd2:	009b      	lsls	r3, r3, #2
   14cd4:	3201      	adds	r2, #1
   14cd6:	18c8      	adds	r0, r1, r3
   14cd8:	6162      	str	r2, [r4, #20]
   14cda:	d0ea      	beq.n	14cb2 <d_source_name+0x72>
   14cdc:	2500      	movs	r5, #0
   14cde:	54cd      	strb	r5, [r1, r3]
   14ce0:	4a04      	ldr	r2, [pc, #16]	; (14cf4 <d_source_name+0xb4>)
   14ce2:	6042      	str	r2, [r0, #4]
   14ce4:	2315      	movs	r3, #21
   14ce6:	6083      	str	r3, [r0, #8]
   14ce8:	e7e3      	b.n	14cb2 <d_source_name+0x72>
   14cea:	2000      	movs	r0, #0
   14cec:	bd70      	pop	{r4, r5, r6, pc}
   14cee:	bf00      	nop
   14cf0:	000247fc 	.word	0x000247fc
   14cf4:	00024808 	.word	0x00024808

00014cf8 <d_abi_tags>:
   14cf8:	b570      	push	{r4, r5, r6, lr}
   14cfa:	68c3      	ldr	r3, [r0, #12]
   14cfc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   14cfe:	781a      	ldrb	r2, [r3, #0]
   14d00:	2a42      	cmp	r2, #66	; 0x42
   14d02:	4604      	mov	r4, r0
   14d04:	460d      	mov	r5, r1
   14d06:	d10f      	bne.n	14d28 <d_abi_tags+0x30>
   14d08:	3301      	adds	r3, #1
   14d0a:	60e3      	str	r3, [r4, #12]
   14d0c:	4620      	mov	r0, r4
   14d0e:	f7ff ff97 	bl	14c40 <d_source_name>
   14d12:	462a      	mov	r2, r5
   14d14:	4603      	mov	r3, r0
   14d16:	214b      	movs	r1, #75	; 0x4b
   14d18:	4620      	mov	r0, r4
   14d1a:	f7ff fdbf 	bl	1489c <d_make_comp>
   14d1e:	68e3      	ldr	r3, [r4, #12]
   14d20:	781a      	ldrb	r2, [r3, #0]
   14d22:	2a42      	cmp	r2, #66	; 0x42
   14d24:	4605      	mov	r5, r0
   14d26:	d0ef      	beq.n	14d08 <d_abi_tags+0x10>
   14d28:	62e6      	str	r6, [r4, #44]	; 0x2c
   14d2a:	4628      	mov	r0, r5
   14d2c:	bd70      	pop	{r4, r5, r6, pc}
   14d2e:	bf00      	nop

00014d30 <d_substitution>:
   14d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d34:	4605      	mov	r5, r0
   14d36:	68c0      	ldr	r0, [r0, #12]
   14d38:	7803      	ldrb	r3, [r0, #0]
   14d3a:	2b53      	cmp	r3, #83	; 0x53
   14d3c:	d002      	beq.n	14d44 <d_substitution+0x14>
   14d3e:	2000      	movs	r0, #0
   14d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d44:	1c43      	adds	r3, r0, #1
   14d46:	60eb      	str	r3, [r5, #12]
   14d48:	7842      	ldrb	r2, [r0, #1]
   14d4a:	b1a2      	cbz	r2, 14d76 <d_substitution+0x46>
   14d4c:	1c83      	adds	r3, r0, #2
   14d4e:	60eb      	str	r3, [r5, #12]
   14d50:	7842      	ldrb	r2, [r0, #1]
   14d52:	2a5f      	cmp	r2, #95	; 0x5f
   14d54:	d15a      	bne.n	14e0c <d_substitution+0xdc>
   14d56:	2300      	movs	r3, #0
   14d58:	6a2a      	ldr	r2, [r5, #32]
   14d5a:	4293      	cmp	r3, r2
   14d5c:	d2ef      	bcs.n	14d3e <d_substitution+0xe>
   14d5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14d60:	69e9      	ldr	r1, [r5, #28]
   14d62:	3201      	adds	r2, #1
   14d64:	62aa      	str	r2, [r5, #40]	; 0x28
   14d66:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   14d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d6e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   14d72:	2b19      	cmp	r3, #25
   14d74:	d94f      	bls.n	14e16 <d_substitution+0xe6>
   14d76:	68ab      	ldr	r3, [r5, #8]
   14d78:	f003 0308 	and.w	r3, r3, #8
   14d7c:	2b00      	cmp	r3, #0
   14d7e:	bf14      	ite	ne
   14d80:	2401      	movne	r4, #1
   14d82:	2400      	moveq	r4, #0
   14d84:	d101      	bne.n	14d8a <d_substitution+0x5a>
   14d86:	2900      	cmp	r1, #0
   14d88:	d169      	bne.n	14e5e <d_substitution+0x12e>
   14d8a:	4b46      	ldr	r3, [pc, #280]	; (14ea4 <d_substitution+0x174>)
   14d8c:	2174      	movs	r1, #116	; 0x74
   14d8e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   14d92:	e003      	b.n	14d9c <d_substitution+0x6c>
   14d94:	331c      	adds	r3, #28
   14d96:	4283      	cmp	r3, r0
   14d98:	d2d1      	bcs.n	14d3e <d_substitution+0xe>
   14d9a:	7819      	ldrb	r1, [r3, #0]
   14d9c:	428a      	cmp	r2, r1
   14d9e:	d1f9      	bne.n	14d94 <d_substitution+0x64>
   14da0:	695e      	ldr	r6, [r3, #20]
   14da2:	2e00      	cmp	r6, #0
   14da4:	d07b      	beq.n	14e9e <d_substitution+0x16e>
   14da6:	696a      	ldr	r2, [r5, #20]
   14da8:	69a9      	ldr	r1, [r5, #24]
   14daa:	428a      	cmp	r2, r1
   14dac:	da63      	bge.n	14e76 <d_substitution+0x146>
   14dae:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   14db2:	f8d5 e010 	ldr.w	lr, [r5, #16]
   14db6:	f8d3 8018 	ldr.w	r8, [r3, #24]
   14dba:	00bf      	lsls	r7, r7, #2
   14dbc:	3201      	adds	r2, #1
   14dbe:	eb1e 0007 	adds.w	r0, lr, r7
   14dc2:	616a      	str	r2, [r5, #20]
   14dc4:	d006      	beq.n	14dd4 <d_substitution+0xa4>
   14dc6:	f04f 0c18 	mov.w	ip, #24
   14dca:	f80e c007 	strb.w	ip, [lr, r7]
   14dce:	6046      	str	r6, [r0, #4]
   14dd0:	f8c0 8008 	str.w	r8, [r0, #8]
   14dd4:	62e8      	str	r0, [r5, #44]	; 0x2c
   14dd6:	2c00      	cmp	r4, #0
   14dd8:	d04a      	beq.n	14e70 <d_substitution+0x140>
   14dda:	68de      	ldr	r6, [r3, #12]
   14ddc:	691c      	ldr	r4, [r3, #16]
   14dde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14de0:	4291      	cmp	r1, r2
   14de2:	4423      	add	r3, r4
   14de4:	632b      	str	r3, [r5, #48]	; 0x30
   14de6:	dd41      	ble.n	14e6c <d_substitution+0x13c>
   14de8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14dec:	6929      	ldr	r1, [r5, #16]
   14dee:	009b      	lsls	r3, r3, #2
   14df0:	3201      	adds	r2, #1
   14df2:	18c8      	adds	r0, r1, r3
   14df4:	616a      	str	r2, [r5, #20]
   14df6:	d003      	beq.n	14e00 <d_substitution+0xd0>
   14df8:	2218      	movs	r2, #24
   14dfa:	54ca      	strb	r2, [r1, r3]
   14dfc:	6046      	str	r6, [r0, #4]
   14dfe:	6084      	str	r4, [r0, #8]
   14e00:	68eb      	ldr	r3, [r5, #12]
   14e02:	781b      	ldrb	r3, [r3, #0]
   14e04:	2b42      	cmp	r3, #66	; 0x42
   14e06:	d038      	beq.n	14e7a <d_substitution+0x14a>
   14e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e0c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14e10:	b2e3      	uxtb	r3, r4
   14e12:	2b09      	cmp	r3, #9
   14e14:	d8ab      	bhi.n	14d6e <d_substitution+0x3e>
   14e16:	2100      	movs	r1, #0
   14e18:	e00d      	b.n	14e36 <d_substitution+0x106>
   14e1a:	3b30      	subs	r3, #48	; 0x30
   14e1c:	4299      	cmp	r1, r3
   14e1e:	d88e      	bhi.n	14d3e <d_substitution+0xe>
   14e20:	68e9      	ldr	r1, [r5, #12]
   14e22:	780a      	ldrb	r2, [r1, #0]
   14e24:	1c48      	adds	r0, r1, #1
   14e26:	b11a      	cbz	r2, 14e30 <d_substitution+0x100>
   14e28:	60e8      	str	r0, [r5, #12]
   14e2a:	780a      	ldrb	r2, [r1, #0]
   14e2c:	2a5f      	cmp	r2, #95	; 0x5f
   14e2e:	d014      	beq.n	14e5a <d_substitution+0x12a>
   14e30:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14e34:	4619      	mov	r1, r3
   14e36:	b2e4      	uxtb	r4, r4
   14e38:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14e3c:	2c09      	cmp	r4, #9
   14e3e:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   14e42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14e46:	d9e8      	bls.n	14e1a <d_substitution+0xea>
   14e48:	2819      	cmp	r0, #25
   14e4a:	f63f af78 	bhi.w	14d3e <d_substitution+0xe>
   14e4e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14e52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14e56:	3b37      	subs	r3, #55	; 0x37
   14e58:	e7e0      	b.n	14e1c <d_substitution+0xec>
   14e5a:	3301      	adds	r3, #1
   14e5c:	e77c      	b.n	14d58 <d_substitution+0x28>
   14e5e:	68eb      	ldr	r3, [r5, #12]
   14e60:	781b      	ldrb	r3, [r3, #0]
   14e62:	3b43      	subs	r3, #67	; 0x43
   14e64:	2b01      	cmp	r3, #1
   14e66:	bf98      	it	ls
   14e68:	2401      	movls	r4, #1
   14e6a:	e78e      	b.n	14d8a <d_substitution+0x5a>
   14e6c:	2000      	movs	r0, #0
   14e6e:	e7c7      	b.n	14e00 <d_substitution+0xd0>
   14e70:	685e      	ldr	r6, [r3, #4]
   14e72:	689c      	ldr	r4, [r3, #8]
   14e74:	e7b3      	b.n	14dde <d_substitution+0xae>
   14e76:	2000      	movs	r0, #0
   14e78:	e7ac      	b.n	14dd4 <d_substitution+0xa4>
   14e7a:	4601      	mov	r1, r0
   14e7c:	4628      	mov	r0, r5
   14e7e:	f7ff ff3b 	bl	14cf8 <d_abi_tags>
   14e82:	2800      	cmp	r0, #0
   14e84:	f43f af5b 	beq.w	14d3e <d_substitution+0xe>
   14e88:	6a2b      	ldr	r3, [r5, #32]
   14e8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14e8c:	4293      	cmp	r3, r2
   14e8e:	dabb      	bge.n	14e08 <d_substitution+0xd8>
   14e90:	69e9      	ldr	r1, [r5, #28]
   14e92:	1c5a      	adds	r2, r3, #1
   14e94:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14e98:	622a      	str	r2, [r5, #32]
   14e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e9e:	69a9      	ldr	r1, [r5, #24]
   14ea0:	696a      	ldr	r2, [r5, #20]
   14ea2:	e798      	b.n	14dd6 <d_substitution+0xa6>
   14ea4:	00024064 	.word	0x00024064

00014ea8 <d_call_offset>:
   14ea8:	b538      	push	{r3, r4, r5, lr}
   14eaa:	4604      	mov	r4, r0
   14eac:	b929      	cbnz	r1, 14eba <d_call_offset+0x12>
   14eae:	68c3      	ldr	r3, [r0, #12]
   14eb0:	781a      	ldrb	r2, [r3, #0]
   14eb2:	b132      	cbz	r2, 14ec2 <d_call_offset+0x1a>
   14eb4:	1c5a      	adds	r2, r3, #1
   14eb6:	60c2      	str	r2, [r0, #12]
   14eb8:	7819      	ldrb	r1, [r3, #0]
   14eba:	2968      	cmp	r1, #104	; 0x68
   14ebc:	d019      	beq.n	14ef2 <d_call_offset+0x4a>
   14ebe:	2976      	cmp	r1, #118	; 0x76
   14ec0:	d001      	beq.n	14ec6 <d_call_offset+0x1e>
   14ec2:	2000      	movs	r0, #0
   14ec4:	bd38      	pop	{r3, r4, r5, pc}
   14ec6:	f104 050c 	add.w	r5, r4, #12
   14eca:	4628      	mov	r0, r5
   14ecc:	f7ff fe38 	bl	14b40 <d_number.isra.0>
   14ed0:	68e3      	ldr	r3, [r4, #12]
   14ed2:	781a      	ldrb	r2, [r3, #0]
   14ed4:	2a5f      	cmp	r2, #95	; 0x5f
   14ed6:	d1f4      	bne.n	14ec2 <d_call_offset+0x1a>
   14ed8:	3301      	adds	r3, #1
   14eda:	60e3      	str	r3, [r4, #12]
   14edc:	4628      	mov	r0, r5
   14ede:	f7ff fe2f 	bl	14b40 <d_number.isra.0>
   14ee2:	68e3      	ldr	r3, [r4, #12]
   14ee4:	781a      	ldrb	r2, [r3, #0]
   14ee6:	2a5f      	cmp	r2, #95	; 0x5f
   14ee8:	d1eb      	bne.n	14ec2 <d_call_offset+0x1a>
   14eea:	3301      	adds	r3, #1
   14eec:	60e3      	str	r3, [r4, #12]
   14eee:	2001      	movs	r0, #1
   14ef0:	bd38      	pop	{r3, r4, r5, pc}
   14ef2:	f104 000c 	add.w	r0, r4, #12
   14ef6:	f7ff fe23 	bl	14b40 <d_number.isra.0>
   14efa:	e7f2      	b.n	14ee2 <d_call_offset+0x3a>

00014efc <d_lookup_template_argument.isra.6>:
   14efc:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14f00:	b19b      	cbz	r3, 14f2a <d_lookup_template_argument.isra.6+0x2e>
   14f02:	680a      	ldr	r2, [r1, #0]
   14f04:	685b      	ldr	r3, [r3, #4]
   14f06:	2a00      	cmp	r2, #0
   14f08:	689b      	ldr	r3, [r3, #8]
   14f0a:	db09      	blt.n	14f20 <d_lookup_template_argument.isra.6+0x24>
   14f0c:	b923      	cbnz	r3, 14f18 <d_lookup_template_argument.isra.6+0x1c>
   14f0e:	e007      	b.n	14f20 <d_lookup_template_argument.isra.6+0x24>
   14f10:	b142      	cbz	r2, 14f24 <d_lookup_template_argument.isra.6+0x28>
   14f12:	689b      	ldr	r3, [r3, #8]
   14f14:	3a01      	subs	r2, #1
   14f16:	b11b      	cbz	r3, 14f20 <d_lookup_template_argument.isra.6+0x24>
   14f18:	7819      	ldrb	r1, [r3, #0]
   14f1a:	292f      	cmp	r1, #47	; 0x2f
   14f1c:	d0f8      	beq.n	14f10 <d_lookup_template_argument.isra.6+0x14>
   14f1e:	2300      	movs	r3, #0
   14f20:	4618      	mov	r0, r3
   14f22:	4770      	bx	lr
   14f24:	685b      	ldr	r3, [r3, #4]
   14f26:	4618      	mov	r0, r3
   14f28:	4770      	bx	lr
   14f2a:	2201      	movs	r2, #1
   14f2c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14f30:	e7f6      	b.n	14f20 <d_lookup_template_argument.isra.6+0x24>
   14f32:	bf00      	nop

00014f34 <d_find_pack>:
   14f34:	2900      	cmp	r1, #0
   14f36:	d041      	beq.n	14fbc <d_find_pack+0x88>
   14f38:	b538      	push	{r3, r4, r5, lr}
   14f3a:	4605      	mov	r5, r0
   14f3c:	460c      	mov	r4, r1
   14f3e:	7823      	ldrb	r3, [r4, #0]
   14f40:	2b4b      	cmp	r3, #75	; 0x4b
   14f42:	d827      	bhi.n	14f94 <d_find_pack+0x60>
   14f44:	e8df f003 	tbb	[pc, r3]
   14f48:	2626262e 	.word	0x2626262e
   14f4c:	2b2e3026 	.word	0x2b2e3026
   14f50:	2626262b 	.word	0x2626262b
   14f54:	26262626 	.word	0x26262626
   14f58:	26262626 	.word	0x26262626
   14f5c:	26262626 	.word	0x26262626
   14f60:	2626262e 	.word	0x2626262e
   14f64:	26262626 	.word	0x26262626
   14f68:	26262626 	.word	0x26262626
   14f6c:	2e262626 	.word	0x2e262626
   14f70:	26262626 	.word	0x26262626
   14f74:	2626262e 	.word	0x2626262e
   14f78:	262b2e26 	.word	0x262b2e26
   14f7c:	26262626 	.word	0x26262626
   14f80:	26262626 	.word	0x26262626
   14f84:	26262626 	.word	0x26262626
   14f88:	26262e2e 	.word	0x26262e2e
   14f8c:	2e2e2e26 	.word	0x2e2e2e26
   14f90:	2e2e2626 	.word	0x2e2e2626
   14f94:	6861      	ldr	r1, [r4, #4]
   14f96:	4628      	mov	r0, r5
   14f98:	f7ff ffcc 	bl	14f34 <d_find_pack>
   14f9c:	b918      	cbnz	r0, 14fa6 <d_find_pack+0x72>
   14f9e:	68a4      	ldr	r4, [r4, #8]
   14fa0:	2c00      	cmp	r4, #0
   14fa2:	d1cc      	bne.n	14f3e <d_find_pack+0xa>
   14fa4:	2000      	movs	r0, #0
   14fa6:	bd38      	pop	{r3, r4, r5, pc}
   14fa8:	1d21      	adds	r1, r4, #4
   14faa:	4628      	mov	r0, r5
   14fac:	f7ff ffa6 	bl	14efc <d_lookup_template_argument.isra.6>
   14fb0:	2800      	cmp	r0, #0
   14fb2:	d0f7      	beq.n	14fa4 <d_find_pack+0x70>
   14fb4:	7803      	ldrb	r3, [r0, #0]
   14fb6:	2b2f      	cmp	r3, #47	; 0x2f
   14fb8:	d1f4      	bne.n	14fa4 <d_find_pack+0x70>
   14fba:	bd38      	pop	{r3, r4, r5, pc}
   14fbc:	2000      	movs	r0, #0
   14fbe:	4770      	bx	lr

00014fc0 <d_growable_string_callback_adapter>:
   14fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fc2:	4615      	mov	r5, r2
   14fc4:	6852      	ldr	r2, [r2, #4]
   14fc6:	68ac      	ldr	r4, [r5, #8]
   14fc8:	1c4b      	adds	r3, r1, #1
   14fca:	4413      	add	r3, r2
   14fcc:	42a3      	cmp	r3, r4
   14fce:	b083      	sub	sp, #12
   14fd0:	460e      	mov	r6, r1
   14fd2:	4607      	mov	r7, r0
   14fd4:	d813      	bhi.n	14ffe <d_growable_string_callback_adapter+0x3e>
   14fd6:	68ec      	ldr	r4, [r5, #12]
   14fd8:	b10c      	cbz	r4, 14fde <d_growable_string_callback_adapter+0x1e>
   14fda:	b003      	add	sp, #12
   14fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14fde:	e895 0009 	ldmia.w	r5, {r0, r3}
   14fe2:	4632      	mov	r2, r6
   14fe4:	4639      	mov	r1, r7
   14fe6:	4418      	add	r0, r3
   14fe8:	f009 fb8a 	bl	1e700 <memcpy>
   14fec:	682b      	ldr	r3, [r5, #0]
   14fee:	686a      	ldr	r2, [r5, #4]
   14ff0:	4433      	add	r3, r6
   14ff2:	549c      	strb	r4, [r3, r2]
   14ff4:	686b      	ldr	r3, [r5, #4]
   14ff6:	441e      	add	r6, r3
   14ff8:	606e      	str	r6, [r5, #4]
   14ffa:	b003      	add	sp, #12
   14ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ffe:	68ea      	ldr	r2, [r5, #12]
   15000:	2a00      	cmp	r2, #0
   15002:	d1ea      	bne.n	14fda <d_growable_string_callback_adapter+0x1a>
   15004:	b91c      	cbnz	r4, 1500e <d_growable_string_callback_adapter+0x4e>
   15006:	2b02      	cmp	r3, #2
   15008:	f04f 0402 	mov.w	r4, #2
   1500c:	d902      	bls.n	15014 <d_growable_string_callback_adapter+0x54>
   1500e:	0064      	lsls	r4, r4, #1
   15010:	42a3      	cmp	r3, r4
   15012:	d8fc      	bhi.n	1500e <d_growable_string_callback_adapter+0x4e>
   15014:	4621      	mov	r1, r4
   15016:	6828      	ldr	r0, [r5, #0]
   15018:	f009 fd02 	bl	1ea20 <realloc>
   1501c:	b110      	cbz	r0, 15024 <d_growable_string_callback_adapter+0x64>
   1501e:	6028      	str	r0, [r5, #0]
   15020:	60ac      	str	r4, [r5, #8]
   15022:	e7d8      	b.n	14fd6 <d_growable_string_callback_adapter+0x16>
   15024:	9001      	str	r0, [sp, #4]
   15026:	6828      	ldr	r0, [r5, #0]
   15028:	f009 f818 	bl	1e05c <free>
   1502c:	9b01      	ldr	r3, [sp, #4]
   1502e:	602b      	str	r3, [r5, #0]
   15030:	2201      	movs	r2, #1
   15032:	606b      	str	r3, [r5, #4]
   15034:	60ab      	str	r3, [r5, #8]
   15036:	60ea      	str	r2, [r5, #12]
   15038:	e7cf      	b.n	14fda <d_growable_string_callback_adapter+0x1a>
   1503a:	bf00      	nop

0001503c <d_append_num>:
   1503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15040:	b088      	sub	sp, #32
   15042:	460a      	mov	r2, r1
   15044:	4604      	mov	r4, r0
   15046:	491b      	ldr	r1, [pc, #108]	; (150b4 <d_append_num+0x78>)
   15048:	a801      	add	r0, sp, #4
   1504a:	f009 ff43 	bl	1eed4 <sprintf>
   1504e:	a801      	add	r0, sp, #4
   15050:	f00a f8d6 	bl	1f200 <strlen>
   15054:	b350      	cbz	r0, 150ac <d_append_num+0x70>
   15056:	ad01      	add	r5, sp, #4
   15058:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1505c:	182f      	adds	r7, r5, r0
   1505e:	f04f 0800 	mov.w	r8, #0
   15062:	e009      	b.n	15078 <d_append_num+0x3c>
   15064:	460b      	mov	r3, r1
   15066:	42bd      	cmp	r5, r7
   15068:	f101 0101 	add.w	r1, r1, #1
   1506c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   15070:	54e6      	strb	r6, [r4, r3]
   15072:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   15076:	d019      	beq.n	150ac <d_append_num+0x70>
   15078:	29ff      	cmp	r1, #255	; 0xff
   1507a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1507e:	d1f1      	bne.n	15064 <d_append_num+0x28>
   15080:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15084:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   15088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1508c:	4620      	mov	r0, r4
   1508e:	4798      	blx	r3
   15090:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   15094:	3301      	adds	r3, #1
   15096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1509a:	2300      	movs	r3, #0
   1509c:	2101      	movs	r1, #1
   1509e:	42bd      	cmp	r5, r7
   150a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   150a4:	54e6      	strb	r6, [r4, r3]
   150a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   150aa:	d1e5      	bne.n	15078 <d_append_num+0x3c>
   150ac:	b008      	add	sp, #32
   150ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150b2:	bf00      	nop
   150b4:	00024820 	.word	0x00024820

000150b8 <d_exprlist>:
   150b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150bc:	68c3      	ldr	r3, [r0, #12]
   150be:	781d      	ldrb	r5, [r3, #0]
   150c0:	b083      	sub	sp, #12
   150c2:	2200      	movs	r2, #0
   150c4:	428d      	cmp	r5, r1
   150c6:	4604      	mov	r4, r0
   150c8:	9201      	str	r2, [sp, #4]
   150ca:	f000 81c6 	beq.w	1545a <d_exprlist+0x3a2>
   150ce:	4688      	mov	r8, r1
   150d0:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 15570 <d_exprlist+0x4b8>
   150d4:	ae01      	add	r6, sp, #4
   150d6:	e023      	b.n	15120 <d_exprlist+0x68>
   150d8:	2a66      	cmp	r2, #102	; 0x66
   150da:	d04c      	beq.n	15176 <d_exprlist+0xbe>
   150dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   150e0:	2909      	cmp	r1, #9
   150e2:	f200 8217 	bhi.w	15514 <d_exprlist+0x45c>
   150e6:	4620      	mov	r0, r4
   150e8:	f001 fb10 	bl	1670c <d_unqualified_name>
   150ec:	4605      	mov	r5, r0
   150ee:	2800      	cmp	r0, #0
   150f0:	f000 8170 	beq.w	153d4 <d_exprlist+0x31c>
   150f4:	68e3      	ldr	r3, [r4, #12]
   150f6:	781b      	ldrb	r3, [r3, #0]
   150f8:	2b49      	cmp	r3, #73	; 0x49
   150fa:	f000 8092 	beq.w	15222 <d_exprlist+0x16a>
   150fe:	6367      	str	r7, [r4, #52]	; 0x34
   15100:	462a      	mov	r2, r5
   15102:	2300      	movs	r3, #0
   15104:	212e      	movs	r1, #46	; 0x2e
   15106:	4620      	mov	r0, r4
   15108:	f7ff fbc8 	bl	1489c <d_make_comp>
   1510c:	6030      	str	r0, [r6, #0]
   1510e:	2800      	cmp	r0, #0
   15110:	d05b      	beq.n	151ca <d_exprlist+0x112>
   15112:	68e3      	ldr	r3, [r4, #12]
   15114:	781a      	ldrb	r2, [r3, #0]
   15116:	4542      	cmp	r2, r8
   15118:	f100 0608 	add.w	r6, r0, #8
   1511c:	f000 8107 	beq.w	1532e <d_exprlist+0x276>
   15120:	2501      	movs	r5, #1
   15122:	6b67      	ldr	r7, [r4, #52]	; 0x34
   15124:	6365      	str	r5, [r4, #52]	; 0x34
   15126:	781a      	ldrb	r2, [r3, #0]
   15128:	2a4c      	cmp	r2, #76	; 0x4c
   1512a:	d047      	beq.n	151bc <d_exprlist+0x104>
   1512c:	2a54      	cmp	r2, #84	; 0x54
   1512e:	d051      	beq.n	151d4 <d_exprlist+0x11c>
   15130:	2a73      	cmp	r2, #115	; 0x73
   15132:	d1d1      	bne.n	150d8 <d_exprlist+0x20>
   15134:	785a      	ldrb	r2, [r3, #1]
   15136:	2a72      	cmp	r2, #114	; 0x72
   15138:	f000 80e2 	beq.w	15300 <d_exprlist+0x248>
   1513c:	2a70      	cmp	r2, #112	; 0x70
   1513e:	f000 80fd 	beq.w	1533c <d_exprlist+0x284>
   15142:	4620      	mov	r0, r4
   15144:	f001 fa22 	bl	1658c <d_operator_name>
   15148:	4605      	mov	r5, r0
   1514a:	2800      	cmp	r0, #0
   1514c:	f000 8142 	beq.w	153d4 <d_exprlist+0x31c>
   15150:	782b      	ldrb	r3, [r5, #0]
   15152:	2b31      	cmp	r3, #49	; 0x31
   15154:	d043      	beq.n	151de <d_exprlist+0x126>
   15156:	2b32      	cmp	r3, #50	; 0x32
   15158:	d05c      	beq.n	15214 <d_exprlist+0x15c>
   1515a:	2b33      	cmp	r3, #51	; 0x33
   1515c:	d17b      	bne.n	15256 <d_exprlist+0x19e>
   1515e:	68e3      	ldr	r3, [r4, #12]
   15160:	781a      	ldrb	r2, [r3, #0]
   15162:	2a5f      	cmp	r2, #95	; 0x5f
   15164:	f040 80c1 	bne.w	152ea <d_exprlist+0x232>
   15168:	3301      	adds	r3, #1
   1516a:	60e3      	str	r3, [r4, #12]
   1516c:	2145      	movs	r1, #69	; 0x45
   1516e:	4620      	mov	r0, r4
   15170:	f7ff ffa2 	bl	150b8 <d_exprlist>
   15174:	e0bc      	b.n	152f0 <d_exprlist+0x238>
   15176:	785a      	ldrb	r2, [r3, #1]
   15178:	2a70      	cmp	r2, #112	; 0x70
   1517a:	d1e2      	bne.n	15142 <d_exprlist+0x8a>
   1517c:	1c9a      	adds	r2, r3, #2
   1517e:	60e2      	str	r2, [r4, #12]
   15180:	789a      	ldrb	r2, [r3, #2]
   15182:	2a54      	cmp	r2, #84	; 0x54
   15184:	d069      	beq.n	1525a <d_exprlist+0x1a2>
   15186:	4620      	mov	r0, r4
   15188:	f7ff fd1c 	bl	14bc4 <d_compact_number>
   1518c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   15190:	4298      	cmp	r0, r3
   15192:	d060      	beq.n	15256 <d_exprlist+0x19e>
   15194:	1c43      	adds	r3, r0, #1
   15196:	d05e      	beq.n	15256 <d_exprlist+0x19e>
   15198:	3001      	adds	r0, #1
   1519a:	6963      	ldr	r3, [r4, #20]
   1519c:	69a2      	ldr	r2, [r4, #24]
   1519e:	4293      	cmp	r3, r2
   151a0:	da59      	bge.n	15256 <d_exprlist+0x19e>
   151a2:	6922      	ldr	r2, [r4, #16]
   151a4:	1c59      	adds	r1, r3, #1
   151a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   151aa:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   151ae:	6161      	str	r1, [r4, #20]
   151b0:	d051      	beq.n	15256 <d_exprlist+0x19e>
   151b2:	2106      	movs	r1, #6
   151b4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   151b8:	6068      	str	r0, [r5, #4]
   151ba:	e7a0      	b.n	150fe <d_exprlist+0x46>
   151bc:	4620      	mov	r0, r4
   151be:	f001 fef3 	bl	16fa8 <d_expr_primary>
   151c2:	4605      	mov	r5, r0
   151c4:	6367      	str	r7, [r4, #52]	; 0x34
   151c6:	2d00      	cmp	r5, #0
   151c8:	d19a      	bne.n	15100 <d_exprlist+0x48>
   151ca:	2500      	movs	r5, #0
   151cc:	4628      	mov	r0, r5
   151ce:	b003      	add	sp, #12
   151d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d4:	4620      	mov	r0, r4
   151d6:	f7ff fd11 	bl	14bfc <d_template_param>
   151da:	4605      	mov	r5, r0
   151dc:	e7f2      	b.n	151c4 <d_exprlist+0x10c>
   151de:	f8d5 b004 	ldr.w	fp, [r5, #4]
   151e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   151e4:	f8db 2008 	ldr.w	r2, [fp, #8]
   151e8:	f8db a000 	ldr.w	sl, [fp]
   151ec:	3a02      	subs	r2, #2
   151ee:	4413      	add	r3, r2
   151f0:	6323      	str	r3, [r4, #48]	; 0x30
   151f2:	4650      	mov	r0, sl
   151f4:	4649      	mov	r1, r9
   151f6:	f009 fe97 	bl	1ef28 <strcmp>
   151fa:	2800      	cmp	r0, #0
   151fc:	f000 80e6 	beq.w	153cc <d_exprlist+0x314>
   15200:	f8db 300c 	ldr.w	r3, [fp, #12]
   15204:	2b03      	cmp	r3, #3
   15206:	d826      	bhi.n	15256 <d_exprlist+0x19e>
   15208:	e8df f013 	tbh	[pc, r3, lsl #1]
   1520c:	0135002b 	.word	0x0135002b
   15210:	00a50033 	.word	0x00a50033
   15214:	686b      	ldr	r3, [r5, #4]
   15216:	2b03      	cmp	r3, #3
   15218:	d81d      	bhi.n	15256 <d_exprlist+0x19e>
   1521a:	e8df f003 	tbb	[pc, r3]
   1521e:	6622      	.short	0x6622
   15220:	1c1c      	.short	0x1c1c
   15222:	4620      	mov	r0, r4
   15224:	f000 fc04 	bl	15a30 <d_template_args>
   15228:	462a      	mov	r2, r5
   1522a:	4603      	mov	r3, r0
   1522c:	2104      	movs	r1, #4
   1522e:	4620      	mov	r0, r4
   15230:	f7ff fb34 	bl	1489c <d_make_comp>
   15234:	4605      	mov	r5, r0
   15236:	e7c5      	b.n	151c4 <d_exprlist+0x10c>
   15238:	2a74      	cmp	r2, #116	; 0x74
   1523a:	d182      	bne.n	15142 <d_exprlist+0x8a>
   1523c:	785b      	ldrb	r3, [r3, #1]
   1523e:	2b6c      	cmp	r3, #108	; 0x6c
   15240:	f47f af7f 	bne.w	15142 <d_exprlist+0x8a>
   15244:	4620      	mov	r0, r4
   15246:	f000 fdb9 	bl	15dbc <d_type>
   1524a:	68e3      	ldr	r3, [r4, #12]
   1524c:	785a      	ldrb	r2, [r3, #1]
   1524e:	4605      	mov	r5, r0
   15250:	2a00      	cmp	r2, #0
   15252:	f040 8169 	bne.w	15528 <d_exprlist+0x470>
   15256:	6367      	str	r7, [r4, #52]	; 0x34
   15258:	e7b7      	b.n	151ca <d_exprlist+0x112>
   1525a:	3303      	adds	r3, #3
   1525c:	60e3      	str	r3, [r4, #12]
   1525e:	2000      	movs	r0, #0
   15260:	e79b      	b.n	1519a <d_exprlist+0xe2>
   15262:	462a      	mov	r2, r5
   15264:	2300      	movs	r3, #0
   15266:	2135      	movs	r1, #53	; 0x35
   15268:	4620      	mov	r0, r4
   1526a:	f7ff fb17 	bl	1489c <d_make_comp>
   1526e:	4605      	mov	r5, r0
   15270:	e7a8      	b.n	151c4 <d_exprlist+0x10c>
   15272:	f1ba 0f00 	cmp.w	sl, #0
   15276:	d0ee      	beq.n	15256 <d_exprlist+0x19e>
   15278:	686b      	ldr	r3, [r5, #4]
   1527a:	681b      	ldr	r3, [r3, #0]
   1527c:	785a      	ldrb	r2, [r3, #1]
   1527e:	2a63      	cmp	r2, #99	; 0x63
   15280:	f000 80d2 	beq.w	15428 <d_exprlist+0x370>
   15284:	f89a 3000 	ldrb.w	r3, [sl]
   15288:	2b66      	cmp	r3, #102	; 0x66
   1528a:	f000 80ef 	beq.w	1546c <d_exprlist+0x3b4>
   1528e:	4620      	mov	r0, r4
   15290:	f000 f970 	bl	15574 <d_expression_1>
   15294:	4683      	mov	fp, r0
   15296:	49b1      	ldr	r1, [pc, #708]	; (1555c <d_exprlist+0x4a4>)
   15298:	4650      	mov	r0, sl
   1529a:	f009 fe45 	bl	1ef28 <strcmp>
   1529e:	2800      	cmp	r0, #0
   152a0:	f000 809d 	beq.w	153de <d_exprlist+0x326>
   152a4:	49ae      	ldr	r1, [pc, #696]	; (15560 <d_exprlist+0x4a8>)
   152a6:	4650      	mov	r0, sl
   152a8:	f009 fe3e 	bl	1ef28 <strcmp>
   152ac:	b130      	cbz	r0, 152bc <d_exprlist+0x204>
   152ae:	4650      	mov	r0, sl
   152b0:	49ac      	ldr	r1, [pc, #688]	; (15564 <d_exprlist+0x4ac>)
   152b2:	f009 fe39 	bl	1ef28 <strcmp>
   152b6:	2800      	cmp	r0, #0
   152b8:	f040 8083 	bne.w	153c2 <d_exprlist+0x30a>
   152bc:	4620      	mov	r0, r4
   152be:	f001 fa25 	bl	1670c <d_unqualified_name>
   152c2:	68e3      	ldr	r3, [r4, #12]
   152c4:	781b      	ldrb	r3, [r3, #0]
   152c6:	2b49      	cmp	r3, #73	; 0x49
   152c8:	4682      	mov	sl, r0
   152ca:	f000 80e9 	beq.w	154a0 <d_exprlist+0x3e8>
   152ce:	4653      	mov	r3, sl
   152d0:	465a      	mov	r2, fp
   152d2:	2138      	movs	r1, #56	; 0x38
   152d4:	4620      	mov	r0, r4
   152d6:	f7ff fae1 	bl	1489c <d_make_comp>
   152da:	462a      	mov	r2, r5
   152dc:	4603      	mov	r3, r0
   152de:	2137      	movs	r1, #55	; 0x37
   152e0:	4620      	mov	r0, r4
   152e2:	f7ff fadb 	bl	1489c <d_make_comp>
   152e6:	4605      	mov	r5, r0
   152e8:	e76c      	b.n	151c4 <d_exprlist+0x10c>
   152ea:	4620      	mov	r0, r4
   152ec:	f000 f942 	bl	15574 <d_expression_1>
   152f0:	4603      	mov	r3, r0
   152f2:	462a      	mov	r2, r5
   152f4:	2136      	movs	r1, #54	; 0x36
   152f6:	4620      	mov	r0, r4
   152f8:	f7ff fad0 	bl	1489c <d_make_comp>
   152fc:	4605      	mov	r5, r0
   152fe:	e761      	b.n	151c4 <d_exprlist+0x10c>
   15300:	3302      	adds	r3, #2
   15302:	60e3      	str	r3, [r4, #12]
   15304:	4620      	mov	r0, r4
   15306:	f000 fd59 	bl	15dbc <d_type>
   1530a:	4682      	mov	sl, r0
   1530c:	4620      	mov	r0, r4
   1530e:	f001 f9fd 	bl	1670c <d_unqualified_name>
   15312:	68e3      	ldr	r3, [r4, #12]
   15314:	781b      	ldrb	r3, [r3, #0]
   15316:	2b49      	cmp	r3, #73	; 0x49
   15318:	4683      	mov	fp, r0
   1531a:	f000 8093 	beq.w	15444 <d_exprlist+0x38c>
   1531e:	4603      	mov	r3, r0
   15320:	4629      	mov	r1, r5
   15322:	4652      	mov	r2, sl
   15324:	4620      	mov	r0, r4
   15326:	f7ff fab9 	bl	1489c <d_make_comp>
   1532a:	4605      	mov	r5, r0
   1532c:	e74a      	b.n	151c4 <d_exprlist+0x10c>
   1532e:	9d01      	ldr	r5, [sp, #4]
   15330:	3301      	adds	r3, #1
   15332:	4628      	mov	r0, r5
   15334:	60e3      	str	r3, [r4, #12]
   15336:	b003      	add	sp, #12
   15338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1533c:	3302      	adds	r3, #2
   1533e:	60e3      	str	r3, [r4, #12]
   15340:	4620      	mov	r0, r4
   15342:	f000 f917 	bl	15574 <d_expression_1>
   15346:	2300      	movs	r3, #0
   15348:	4602      	mov	r2, r0
   1534a:	214a      	movs	r1, #74	; 0x4a
   1534c:	4620      	mov	r0, r4
   1534e:	f7ff faa5 	bl	1489c <d_make_comp>
   15352:	4605      	mov	r5, r0
   15354:	e736      	b.n	151c4 <d_exprlist+0x10c>
   15356:	f1ba 0f00 	cmp.w	sl, #0
   1535a:	f43f af7c 	beq.w	15256 <d_exprlist+0x19e>
   1535e:	4982      	ldr	r1, [pc, #520]	; (15568 <d_exprlist+0x4b0>)
   15360:	4650      	mov	r0, sl
   15362:	f009 fde1 	bl	1ef28 <strcmp>
   15366:	2800      	cmp	r0, #0
   15368:	d03f      	beq.n	153ea <d_exprlist+0x332>
   1536a:	f89a 3000 	ldrb.w	r3, [sl]
   1536e:	2b66      	cmp	r3, #102	; 0x66
   15370:	f000 80bd 	beq.w	154ee <d_exprlist+0x436>
   15374:	2b6e      	cmp	r3, #110	; 0x6e
   15376:	f47f af6e 	bne.w	15256 <d_exprlist+0x19e>
   1537a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1537e:	2b77      	cmp	r3, #119	; 0x77
   15380:	d002      	beq.n	15388 <d_exprlist+0x2d0>
   15382:	2b61      	cmp	r3, #97	; 0x61
   15384:	f47f af67 	bne.w	15256 <d_exprlist+0x19e>
   15388:	215f      	movs	r1, #95	; 0x5f
   1538a:	4620      	mov	r0, r4
   1538c:	f7ff fe94 	bl	150b8 <d_exprlist>
   15390:	4682      	mov	sl, r0
   15392:	4620      	mov	r0, r4
   15394:	f000 fd12 	bl	15dbc <d_type>
   15398:	68e3      	ldr	r3, [r4, #12]
   1539a:	781a      	ldrb	r2, [r3, #0]
   1539c:	2a45      	cmp	r2, #69	; 0x45
   1539e:	4683      	mov	fp, r0
   153a0:	f000 80a1 	beq.w	154e6 <d_exprlist+0x42e>
   153a4:	2a70      	cmp	r2, #112	; 0x70
   153a6:	f000 80a6 	beq.w	154f6 <d_exprlist+0x43e>
   153aa:	2a69      	cmp	r2, #105	; 0x69
   153ac:	f47f af53 	bne.w	15256 <d_exprlist+0x19e>
   153b0:	785b      	ldrb	r3, [r3, #1]
   153b2:	2b6c      	cmp	r3, #108	; 0x6c
   153b4:	f47f af4f 	bne.w	15256 <d_exprlist+0x19e>
   153b8:	4620      	mov	r0, r4
   153ba:	f000 f8db 	bl	15574 <d_expression_1>
   153be:	4603      	mov	r3, r0
   153c0:	e01f      	b.n	15402 <d_exprlist+0x34a>
   153c2:	4620      	mov	r0, r4
   153c4:	f000 f8d6 	bl	15574 <d_expression_1>
   153c8:	4682      	mov	sl, r0
   153ca:	e780      	b.n	152ce <d_exprlist+0x216>
   153cc:	4620      	mov	r0, r4
   153ce:	f000 fcf5 	bl	15dbc <d_type>
   153d2:	e78d      	b.n	152f0 <d_exprlist+0x238>
   153d4:	4628      	mov	r0, r5
   153d6:	6367      	str	r7, [r4, #52]	; 0x34
   153d8:	b003      	add	sp, #12
   153da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153de:	2145      	movs	r1, #69	; 0x45
   153e0:	4620      	mov	r0, r4
   153e2:	f7ff fe69 	bl	150b8 <d_exprlist>
   153e6:	4682      	mov	sl, r0
   153e8:	e771      	b.n	152ce <d_exprlist+0x216>
   153ea:	4620      	mov	r0, r4
   153ec:	f000 f8c2 	bl	15574 <d_expression_1>
   153f0:	4682      	mov	sl, r0
   153f2:	4620      	mov	r0, r4
   153f4:	f000 f8be 	bl	15574 <d_expression_1>
   153f8:	4683      	mov	fp, r0
   153fa:	4620      	mov	r0, r4
   153fc:	f000 f8ba 	bl	15574 <d_expression_1>
   15400:	4603      	mov	r3, r0
   15402:	465a      	mov	r2, fp
   15404:	213b      	movs	r1, #59	; 0x3b
   15406:	4620      	mov	r0, r4
   15408:	f7ff fa48 	bl	1489c <d_make_comp>
   1540c:	4652      	mov	r2, sl
   1540e:	4603      	mov	r3, r0
   15410:	213a      	movs	r1, #58	; 0x3a
   15412:	4620      	mov	r0, r4
   15414:	f7ff fa42 	bl	1489c <d_make_comp>
   15418:	462a      	mov	r2, r5
   1541a:	4603      	mov	r3, r0
   1541c:	2139      	movs	r1, #57	; 0x39
   1541e:	4620      	mov	r0, r4
   15420:	f7ff fa3c 	bl	1489c <d_make_comp>
   15424:	4605      	mov	r5, r0
   15426:	e6cd      	b.n	151c4 <d_exprlist+0x10c>
   15428:	781b      	ldrb	r3, [r3, #0]
   1542a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1542e:	2a01      	cmp	r2, #1
   15430:	d903      	bls.n	1543a <d_exprlist+0x382>
   15432:	3b72      	subs	r3, #114	; 0x72
   15434:	2b01      	cmp	r3, #1
   15436:	f63f af25 	bhi.w	15284 <d_exprlist+0x1cc>
   1543a:	4620      	mov	r0, r4
   1543c:	f000 fcbe 	bl	15dbc <d_type>
   15440:	4683      	mov	fp, r0
   15442:	e728      	b.n	15296 <d_exprlist+0x1de>
   15444:	4620      	mov	r0, r4
   15446:	f000 faf3 	bl	15a30 <d_template_args>
   1544a:	465a      	mov	r2, fp
   1544c:	4603      	mov	r3, r0
   1544e:	2104      	movs	r1, #4
   15450:	4620      	mov	r0, r4
   15452:	f7ff fa23 	bl	1489c <d_make_comp>
   15456:	4603      	mov	r3, r0
   15458:	e762      	b.n	15320 <d_exprlist+0x268>
   1545a:	3301      	adds	r3, #1
   1545c:	60c3      	str	r3, [r0, #12]
   1545e:	212e      	movs	r1, #46	; 0x2e
   15460:	4613      	mov	r3, r2
   15462:	b003      	add	sp, #12
   15464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15468:	f7ff ba18 	b.w	1489c <d_make_comp>
   1546c:	4620      	mov	r0, r4
   1546e:	f001 f88d 	bl	1658c <d_operator_name>
   15472:	4683      	mov	fp, r0
   15474:	e70f      	b.n	15296 <d_exprlist+0x1de>
   15476:	f1ba 0f00 	cmp.w	sl, #0
   1547a:	f43f af36 	beq.w	152ea <d_exprlist+0x232>
   1547e:	f89a 3000 	ldrb.w	r3, [sl]
   15482:	2b70      	cmp	r3, #112	; 0x70
   15484:	d017      	beq.n	154b6 <d_exprlist+0x3fe>
   15486:	2b6d      	cmp	r3, #109	; 0x6d
   15488:	d015      	beq.n	154b6 <d_exprlist+0x3fe>
   1548a:	4650      	mov	r0, sl
   1548c:	4937      	ldr	r1, [pc, #220]	; (1556c <d_exprlist+0x4b4>)
   1548e:	f009 fd4b 	bl	1ef28 <strcmp>
   15492:	2800      	cmp	r0, #0
   15494:	f47f af29 	bne.w	152ea <d_exprlist+0x232>
   15498:	4620      	mov	r0, r4
   1549a:	f000 fa65 	bl	15968 <d_template_args_1>
   1549e:	e727      	b.n	152f0 <d_exprlist+0x238>
   154a0:	4620      	mov	r0, r4
   154a2:	f000 fac5 	bl	15a30 <d_template_args>
   154a6:	4652      	mov	r2, sl
   154a8:	4603      	mov	r3, r0
   154aa:	2104      	movs	r1, #4
   154ac:	4620      	mov	r0, r4
   154ae:	f7ff f9f5 	bl	1489c <d_make_comp>
   154b2:	4682      	mov	sl, r0
   154b4:	e70b      	b.n	152ce <d_exprlist+0x216>
   154b6:	f89a 2001 	ldrb.w	r2, [sl, #1]
   154ba:	429a      	cmp	r2, r3
   154bc:	d1e5      	bne.n	1548a <d_exprlist+0x3d2>
   154be:	68e3      	ldr	r3, [r4, #12]
   154c0:	781a      	ldrb	r2, [r3, #0]
   154c2:	2a5f      	cmp	r2, #95	; 0x5f
   154c4:	d023      	beq.n	1550e <d_exprlist+0x456>
   154c6:	4650      	mov	r0, sl
   154c8:	4928      	ldr	r1, [pc, #160]	; (1556c <d_exprlist+0x4b4>)
   154ca:	f009 fd2d 	bl	1ef28 <strcmp>
   154ce:	2800      	cmp	r0, #0
   154d0:	d03f      	beq.n	15552 <d_exprlist+0x49a>
   154d2:	4620      	mov	r0, r4
   154d4:	f000 f84e 	bl	15574 <d_expression_1>
   154d8:	4603      	mov	r3, r0
   154da:	461a      	mov	r2, r3
   154dc:	2138      	movs	r1, #56	; 0x38
   154de:	4620      	mov	r0, r4
   154e0:	f7ff f9dc 	bl	1489c <d_make_comp>
   154e4:	e704      	b.n	152f0 <d_exprlist+0x238>
   154e6:	3301      	adds	r3, #1
   154e8:	60e3      	str	r3, [r4, #12]
   154ea:	2300      	movs	r3, #0
   154ec:	e789      	b.n	15402 <d_exprlist+0x34a>
   154ee:	4620      	mov	r0, r4
   154f0:	f001 f84c 	bl	1658c <d_operator_name>
   154f4:	e77c      	b.n	153f0 <d_exprlist+0x338>
   154f6:	785a      	ldrb	r2, [r3, #1]
   154f8:	2a69      	cmp	r2, #105	; 0x69
   154fa:	f47f aeac 	bne.w	15256 <d_exprlist+0x19e>
   154fe:	3302      	adds	r3, #2
   15500:	60e3      	str	r3, [r4, #12]
   15502:	2145      	movs	r1, #69	; 0x45
   15504:	4620      	mov	r0, r4
   15506:	f7ff fdd7 	bl	150b8 <d_exprlist>
   1550a:	4603      	mov	r3, r0
   1550c:	e779      	b.n	15402 <d_exprlist+0x34a>
   1550e:	3301      	adds	r3, #1
   15510:	60e3      	str	r3, [r4, #12]
   15512:	e7ba      	b.n	1548a <d_exprlist+0x3d2>
   15514:	2a6f      	cmp	r2, #111	; 0x6f
   15516:	d015      	beq.n	15544 <d_exprlist+0x48c>
   15518:	2a69      	cmp	r2, #105	; 0x69
   1551a:	f47f ae8d 	bne.w	15238 <d_exprlist+0x180>
   1551e:	785a      	ldrb	r2, [r3, #1]
   15520:	2a6c      	cmp	r2, #108	; 0x6c
   15522:	f47f ae0e 	bne.w	15142 <d_exprlist+0x8a>
   15526:	2500      	movs	r5, #0
   15528:	3302      	adds	r3, #2
   1552a:	60e3      	str	r3, [r4, #12]
   1552c:	2145      	movs	r1, #69	; 0x45
   1552e:	4620      	mov	r0, r4
   15530:	f7ff fdc2 	bl	150b8 <d_exprlist>
   15534:	462a      	mov	r2, r5
   15536:	4603      	mov	r3, r0
   15538:	2130      	movs	r1, #48	; 0x30
   1553a:	4620      	mov	r0, r4
   1553c:	f7ff f9ae 	bl	1489c <d_make_comp>
   15540:	4605      	mov	r5, r0
   15542:	e63f      	b.n	151c4 <d_exprlist+0x10c>
   15544:	785a      	ldrb	r2, [r3, #1]
   15546:	2a6e      	cmp	r2, #110	; 0x6e
   15548:	f47f adfb 	bne.w	15142 <d_exprlist+0x8a>
   1554c:	3302      	adds	r3, #2
   1554e:	60e3      	str	r3, [r4, #12]
   15550:	e5c9      	b.n	150e6 <d_exprlist+0x2e>
   15552:	4620      	mov	r0, r4
   15554:	f000 fa08 	bl	15968 <d_template_args_1>
   15558:	4603      	mov	r3, r0
   1555a:	e7be      	b.n	154da <d_exprlist+0x422>
   1555c:	00024828 	.word	0x00024828
   15560:	0002482c 	.word	0x0002482c
   15564:	00024830 	.word	0x00024830
   15568:	00024834 	.word	0x00024834
   1556c:	00024824 	.word	0x00024824
   15570:	00024d28 	.word	0x00024d28

00015574 <d_expression_1>:
   15574:	68c1      	ldr	r1, [r0, #12]
   15576:	780b      	ldrb	r3, [r1, #0]
   15578:	2b4c      	cmp	r3, #76	; 0x4c
   1557a:	f000 8087 	beq.w	1568c <d_expression_1+0x118>
   1557e:	2b54      	cmp	r3, #84	; 0x54
   15580:	f000 8086 	beq.w	15690 <d_expression_1+0x11c>
   15584:	2b73      	cmp	r3, #115	; 0x73
   15586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1558a:	4604      	mov	r4, r0
   1558c:	d037      	beq.n	155fe <d_expression_1+0x8a>
   1558e:	2b66      	cmp	r3, #102	; 0x66
   15590:	d012      	beq.n	155b8 <d_expression_1+0x44>
   15592:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15596:	2a09      	cmp	r2, #9
   15598:	f200 81b8 	bhi.w	1590c <d_expression_1+0x398>
   1559c:	4620      	mov	r0, r4
   1559e:	f001 f8b5 	bl	1670c <d_unqualified_name>
   155a2:	4605      	mov	r5, r0
   155a4:	2800      	cmp	r0, #0
   155a6:	d06d      	beq.n	15684 <d_expression_1+0x110>
   155a8:	68e3      	ldr	r3, [r4, #12]
   155aa:	781b      	ldrb	r3, [r3, #0]
   155ac:	2b49      	cmp	r3, #73	; 0x49
   155ae:	f000 8088 	beq.w	156c2 <d_expression_1+0x14e>
   155b2:	4628      	mov	r0, r5
   155b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   155b8:	784b      	ldrb	r3, [r1, #1]
   155ba:	2b70      	cmp	r3, #112	; 0x70
   155bc:	d039      	beq.n	15632 <d_expression_1+0xbe>
   155be:	4620      	mov	r0, r4
   155c0:	f000 ffe4 	bl	1658c <d_operator_name>
   155c4:	4605      	mov	r5, r0
   155c6:	2800      	cmp	r0, #0
   155c8:	d05c      	beq.n	15684 <d_expression_1+0x110>
   155ca:	7803      	ldrb	r3, [r0, #0]
   155cc:	2b31      	cmp	r3, #49	; 0x31
   155ce:	d061      	beq.n	15694 <d_expression_1+0x120>
   155d0:	2b32      	cmp	r3, #50	; 0x32
   155d2:	d025      	beq.n	15620 <d_expression_1+0xac>
   155d4:	2b33      	cmp	r3, #51	; 0x33
   155d6:	d155      	bne.n	15684 <d_expression_1+0x110>
   155d8:	68e3      	ldr	r3, [r4, #12]
   155da:	781a      	ldrb	r2, [r3, #0]
   155dc:	2a5f      	cmp	r2, #95	; 0x5f
   155de:	f040 81b4 	bne.w	1594a <d_expression_1+0x3d6>
   155e2:	3301      	adds	r3, #1
   155e4:	60e3      	str	r3, [r4, #12]
   155e6:	2145      	movs	r1, #69	; 0x45
   155e8:	4620      	mov	r0, r4
   155ea:	f7ff fd65 	bl	150b8 <d_exprlist>
   155ee:	4603      	mov	r3, r0
   155f0:	462a      	mov	r2, r5
   155f2:	4620      	mov	r0, r4
   155f4:	2136      	movs	r1, #54	; 0x36
   155f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   155fa:	f7ff b94f 	b.w	1489c <d_make_comp>
   155fe:	784b      	ldrb	r3, [r1, #1]
   15600:	2b72      	cmp	r3, #114	; 0x72
   15602:	d069      	beq.n	156d8 <d_expression_1+0x164>
   15604:	2b70      	cmp	r3, #112	; 0x70
   15606:	d1da      	bne.n	155be <d_expression_1+0x4a>
   15608:	3102      	adds	r1, #2
   1560a:	60c1      	str	r1, [r0, #12]
   1560c:	f7ff ffb2 	bl	15574 <d_expression_1>
   15610:	2300      	movs	r3, #0
   15612:	4602      	mov	r2, r0
   15614:	214a      	movs	r1, #74	; 0x4a
   15616:	4620      	mov	r0, r4
   15618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1561c:	f7ff b93e 	b.w	1489c <d_make_comp>
   15620:	6843      	ldr	r3, [r0, #4]
   15622:	2b03      	cmp	r3, #3
   15624:	d82e      	bhi.n	15684 <d_expression_1+0x110>
   15626:	e8df f013 	tbh	[pc, r3, lsl #1]
   1562a:	0071      	.short	0x0071
   1562c:	002d0190 	.word	0x002d0190
   15630:	002d      	.short	0x002d
   15632:	1c8b      	adds	r3, r1, #2
   15634:	60c3      	str	r3, [r0, #12]
   15636:	788b      	ldrb	r3, [r1, #2]
   15638:	2b54      	cmp	r3, #84	; 0x54
   1563a:	d063      	beq.n	15704 <d_expression_1+0x190>
   1563c:	f7ff fac2 	bl	14bc4 <d_compact_number>
   15640:	43c3      	mvns	r3, r0
   15642:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   15646:	d01d      	beq.n	15684 <d_expression_1+0x110>
   15648:	3001      	adds	r0, #1
   1564a:	6963      	ldr	r3, [r4, #20]
   1564c:	69a2      	ldr	r2, [r4, #24]
   1564e:	4293      	cmp	r3, r2
   15650:	da18      	bge.n	15684 <d_expression_1+0x110>
   15652:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15656:	6921      	ldr	r1, [r4, #16]
   15658:	0092      	lsls	r2, r2, #2
   1565a:	3301      	adds	r3, #1
   1565c:	188d      	adds	r5, r1, r2
   1565e:	6163      	str	r3, [r4, #20]
   15660:	d0a7      	beq.n	155b2 <d_expression_1+0x3e>
   15662:	2306      	movs	r3, #6
   15664:	548b      	strb	r3, [r1, r2]
   15666:	6068      	str	r0, [r5, #4]
   15668:	e7a3      	b.n	155b2 <d_expression_1+0x3e>
   1566a:	2b74      	cmp	r3, #116	; 0x74
   1566c:	d1a7      	bne.n	155be <d_expression_1+0x4a>
   1566e:	784b      	ldrb	r3, [r1, #1]
   15670:	2b6c      	cmp	r3, #108	; 0x6c
   15672:	d1a4      	bne.n	155be <d_expression_1+0x4a>
   15674:	f000 fba2 	bl	15dbc <d_type>
   15678:	68e1      	ldr	r1, [r4, #12]
   1567a:	784b      	ldrb	r3, [r1, #1]
   1567c:	4605      	mov	r5, r0
   1567e:	2b00      	cmp	r3, #0
   15680:	f040 814e 	bne.w	15920 <d_expression_1+0x3ac>
   15684:	2500      	movs	r5, #0
   15686:	4628      	mov	r0, r5
   15688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1568c:	f001 bc8c 	b.w	16fa8 <d_expr_primary>
   15690:	f7ff bab4 	b.w	14bfc <d_template_param>
   15694:	6847      	ldr	r7, [r0, #4]
   15696:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15698:	68ba      	ldr	r2, [r7, #8]
   1569a:	683e      	ldr	r6, [r7, #0]
   1569c:	49ac      	ldr	r1, [pc, #688]	; (15950 <d_expression_1+0x3dc>)
   1569e:	3a02      	subs	r2, #2
   156a0:	4413      	add	r3, r2
   156a2:	6323      	str	r3, [r4, #48]	; 0x30
   156a4:	4630      	mov	r0, r6
   156a6:	f009 fc3f 	bl	1ef28 <strcmp>
   156aa:	2800      	cmp	r0, #0
   156ac:	f000 80ab 	beq.w	15806 <d_expression_1+0x292>
   156b0:	68ff      	ldr	r7, [r7, #12]
   156b2:	2f03      	cmp	r7, #3
   156b4:	d8e6      	bhi.n	15684 <d_expression_1+0x110>
   156b6:	e8df f017 	tbh	[pc, r7, lsl #1]
   156ba:	0029      	.short	0x0029
   156bc:	007100ff 	.word	0x007100ff
   156c0:	0031      	.short	0x0031
   156c2:	4620      	mov	r0, r4
   156c4:	f000 f9b4 	bl	15a30 <d_template_args>
   156c8:	462a      	mov	r2, r5
   156ca:	4603      	mov	r3, r0
   156cc:	2104      	movs	r1, #4
   156ce:	4620      	mov	r0, r4
   156d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   156d4:	f7ff b8e2 	b.w	1489c <d_make_comp>
   156d8:	3102      	adds	r1, #2
   156da:	60c1      	str	r1, [r0, #12]
   156dc:	f000 fb6e 	bl	15dbc <d_type>
   156e0:	4605      	mov	r5, r0
   156e2:	4620      	mov	r0, r4
   156e4:	f001 f812 	bl	1670c <d_unqualified_name>
   156e8:	68e3      	ldr	r3, [r4, #12]
   156ea:	781b      	ldrb	r3, [r3, #0]
   156ec:	2b49      	cmp	r3, #73	; 0x49
   156ee:	4606      	mov	r6, r0
   156f0:	f000 80ae 	beq.w	15850 <d_expression_1+0x2dc>
   156f4:	4603      	mov	r3, r0
   156f6:	462a      	mov	r2, r5
   156f8:	4620      	mov	r0, r4
   156fa:	2101      	movs	r1, #1
   156fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15700:	f7ff b8cc 	b.w	1489c <d_make_comp>
   15704:	3103      	adds	r1, #3
   15706:	60c1      	str	r1, [r0, #12]
   15708:	2000      	movs	r0, #0
   1570a:	e79e      	b.n	1564a <d_expression_1+0xd6>
   1570c:	462a      	mov	r2, r5
   1570e:	4620      	mov	r0, r4
   15710:	2300      	movs	r3, #0
   15712:	2135      	movs	r1, #53	; 0x35
   15714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15718:	f7ff b8c0 	b.w	1489c <d_make_comp>
   1571c:	2e00      	cmp	r6, #0
   1571e:	d0b1      	beq.n	15684 <d_expression_1+0x110>
   15720:	498c      	ldr	r1, [pc, #560]	; (15954 <d_expression_1+0x3e0>)
   15722:	4630      	mov	r0, r6
   15724:	f009 fc00 	bl	1ef28 <strcmp>
   15728:	2800      	cmp	r0, #0
   1572a:	d071      	beq.n	15810 <d_expression_1+0x29c>
   1572c:	7833      	ldrb	r3, [r6, #0]
   1572e:	2b66      	cmp	r3, #102	; 0x66
   15730:	f000 80b2 	beq.w	15898 <d_expression_1+0x324>
   15734:	2b6e      	cmp	r3, #110	; 0x6e
   15736:	d1a5      	bne.n	15684 <d_expression_1+0x110>
   15738:	7873      	ldrb	r3, [r6, #1]
   1573a:	2b77      	cmp	r3, #119	; 0x77
   1573c:	d001      	beq.n	15742 <d_expression_1+0x1ce>
   1573e:	2b61      	cmp	r3, #97	; 0x61
   15740:	d1a0      	bne.n	15684 <d_expression_1+0x110>
   15742:	215f      	movs	r1, #95	; 0x5f
   15744:	4620      	mov	r0, r4
   15746:	f7ff fcb7 	bl	150b8 <d_exprlist>
   1574a:	4606      	mov	r6, r0
   1574c:	4620      	mov	r0, r4
   1574e:	f000 fb35 	bl	15dbc <d_type>
   15752:	68e3      	ldr	r3, [r4, #12]
   15754:	781a      	ldrb	r2, [r3, #0]
   15756:	2a45      	cmp	r2, #69	; 0x45
   15758:	4607      	mov	r7, r0
   1575a:	f000 8099 	beq.w	15890 <d_expression_1+0x31c>
   1575e:	2a70      	cmp	r2, #112	; 0x70
   15760:	f000 809e 	beq.w	158a0 <d_expression_1+0x32c>
   15764:	2a69      	cmp	r2, #105	; 0x69
   15766:	d18d      	bne.n	15684 <d_expression_1+0x110>
   15768:	785b      	ldrb	r3, [r3, #1]
   1576a:	2b6c      	cmp	r3, #108	; 0x6c
   1576c:	d18a      	bne.n	15684 <d_expression_1+0x110>
   1576e:	4620      	mov	r0, r4
   15770:	f7ff ff00 	bl	15574 <d_expression_1>
   15774:	4603      	mov	r3, r0
   15776:	463a      	mov	r2, r7
   15778:	213b      	movs	r1, #59	; 0x3b
   1577a:	4620      	mov	r0, r4
   1577c:	f7ff f88e 	bl	1489c <d_make_comp>
   15780:	4632      	mov	r2, r6
   15782:	4603      	mov	r3, r0
   15784:	213a      	movs	r1, #58	; 0x3a
   15786:	4620      	mov	r0, r4
   15788:	f7ff f888 	bl	1489c <d_make_comp>
   1578c:	462a      	mov	r2, r5
   1578e:	4603      	mov	r3, r0
   15790:	2139      	movs	r1, #57	; 0x39
   15792:	4620      	mov	r0, r4
   15794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15798:	f7ff b880 	b.w	1489c <d_make_comp>
   1579c:	2e00      	cmp	r6, #0
   1579e:	f43f af71 	beq.w	15684 <d_expression_1+0x110>
   157a2:	686b      	ldr	r3, [r5, #4]
   157a4:	681b      	ldr	r3, [r3, #0]
   157a6:	785a      	ldrb	r2, [r3, #1]
   157a8:	2a63      	cmp	r2, #99	; 0x63
   157aa:	d044      	beq.n	15836 <d_expression_1+0x2c2>
   157ac:	7833      	ldrb	r3, [r6, #0]
   157ae:	2b66      	cmp	r3, #102	; 0x66
   157b0:	d059      	beq.n	15866 <d_expression_1+0x2f2>
   157b2:	4620      	mov	r0, r4
   157b4:	f7ff fede 	bl	15574 <d_expression_1>
   157b8:	4607      	mov	r7, r0
   157ba:	4967      	ldr	r1, [pc, #412]	; (15958 <d_expression_1+0x3e4>)
   157bc:	4630      	mov	r0, r6
   157be:	f009 fbb3 	bl	1ef28 <strcmp>
   157c2:	b390      	cbz	r0, 1582a <d_expression_1+0x2b6>
   157c4:	4965      	ldr	r1, [pc, #404]	; (1595c <d_expression_1+0x3e8>)
   157c6:	4630      	mov	r0, r6
   157c8:	f009 fbae 	bl	1ef28 <strcmp>
   157cc:	b128      	cbz	r0, 157da <d_expression_1+0x266>
   157ce:	4630      	mov	r0, r6
   157d0:	4963      	ldr	r1, [pc, #396]	; (15960 <d_expression_1+0x3ec>)
   157d2:	f009 fba9 	bl	1ef28 <strcmp>
   157d6:	2800      	cmp	r0, #0
   157d8:	d14a      	bne.n	15870 <d_expression_1+0x2fc>
   157da:	4620      	mov	r0, r4
   157dc:	f000 ff96 	bl	1670c <d_unqualified_name>
   157e0:	68e3      	ldr	r3, [r4, #12]
   157e2:	781b      	ldrb	r3, [r3, #0]
   157e4:	2b49      	cmp	r3, #73	; 0x49
   157e6:	4606      	mov	r6, r0
   157e8:	d047      	beq.n	1587a <d_expression_1+0x306>
   157ea:	4633      	mov	r3, r6
   157ec:	463a      	mov	r2, r7
   157ee:	2138      	movs	r1, #56	; 0x38
   157f0:	4620      	mov	r0, r4
   157f2:	f7ff f853 	bl	1489c <d_make_comp>
   157f6:	462a      	mov	r2, r5
   157f8:	4603      	mov	r3, r0
   157fa:	2137      	movs	r1, #55	; 0x37
   157fc:	4620      	mov	r0, r4
   157fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15802:	f7ff b84b 	b.w	1489c <d_make_comp>
   15806:	4620      	mov	r0, r4
   15808:	f000 fad8 	bl	15dbc <d_type>
   1580c:	4603      	mov	r3, r0
   1580e:	e6ef      	b.n	155f0 <d_expression_1+0x7c>
   15810:	4620      	mov	r0, r4
   15812:	f7ff feaf 	bl	15574 <d_expression_1>
   15816:	4606      	mov	r6, r0
   15818:	4620      	mov	r0, r4
   1581a:	f7ff feab 	bl	15574 <d_expression_1>
   1581e:	4607      	mov	r7, r0
   15820:	4620      	mov	r0, r4
   15822:	f7ff fea7 	bl	15574 <d_expression_1>
   15826:	4603      	mov	r3, r0
   15828:	e7a5      	b.n	15776 <d_expression_1+0x202>
   1582a:	2145      	movs	r1, #69	; 0x45
   1582c:	4620      	mov	r0, r4
   1582e:	f7ff fc43 	bl	150b8 <d_exprlist>
   15832:	4606      	mov	r6, r0
   15834:	e7d9      	b.n	157ea <d_expression_1+0x276>
   15836:	781b      	ldrb	r3, [r3, #0]
   15838:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1583c:	2a01      	cmp	r2, #1
   1583e:	d902      	bls.n	15846 <d_expression_1+0x2d2>
   15840:	3b72      	subs	r3, #114	; 0x72
   15842:	2b01      	cmp	r3, #1
   15844:	d8b2      	bhi.n	157ac <d_expression_1+0x238>
   15846:	4620      	mov	r0, r4
   15848:	f000 fab8 	bl	15dbc <d_type>
   1584c:	4607      	mov	r7, r0
   1584e:	e7b4      	b.n	157ba <d_expression_1+0x246>
   15850:	4620      	mov	r0, r4
   15852:	f000 f8ed 	bl	15a30 <d_template_args>
   15856:	4632      	mov	r2, r6
   15858:	4603      	mov	r3, r0
   1585a:	2104      	movs	r1, #4
   1585c:	4620      	mov	r0, r4
   1585e:	f7ff f81d 	bl	1489c <d_make_comp>
   15862:	4603      	mov	r3, r0
   15864:	e747      	b.n	156f6 <d_expression_1+0x182>
   15866:	4620      	mov	r0, r4
   15868:	f000 fe90 	bl	1658c <d_operator_name>
   1586c:	4607      	mov	r7, r0
   1586e:	e7a4      	b.n	157ba <d_expression_1+0x246>
   15870:	4620      	mov	r0, r4
   15872:	f7ff fe7f 	bl	15574 <d_expression_1>
   15876:	4606      	mov	r6, r0
   15878:	e7b7      	b.n	157ea <d_expression_1+0x276>
   1587a:	4620      	mov	r0, r4
   1587c:	f000 f8d8 	bl	15a30 <d_template_args>
   15880:	4632      	mov	r2, r6
   15882:	4603      	mov	r3, r0
   15884:	2104      	movs	r1, #4
   15886:	4620      	mov	r0, r4
   15888:	f7ff f808 	bl	1489c <d_make_comp>
   1588c:	4606      	mov	r6, r0
   1588e:	e7ac      	b.n	157ea <d_expression_1+0x276>
   15890:	3301      	adds	r3, #1
   15892:	60e3      	str	r3, [r4, #12]
   15894:	2300      	movs	r3, #0
   15896:	e76e      	b.n	15776 <d_expression_1+0x202>
   15898:	4620      	mov	r0, r4
   1589a:	f000 fe77 	bl	1658c <d_operator_name>
   1589e:	e7ba      	b.n	15816 <d_expression_1+0x2a2>
   158a0:	785a      	ldrb	r2, [r3, #1]
   158a2:	2a69      	cmp	r2, #105	; 0x69
   158a4:	f47f aeee 	bne.w	15684 <d_expression_1+0x110>
   158a8:	3302      	adds	r3, #2
   158aa:	60e3      	str	r3, [r4, #12]
   158ac:	2145      	movs	r1, #69	; 0x45
   158ae:	4620      	mov	r0, r4
   158b0:	f7ff fc02 	bl	150b8 <d_exprlist>
   158b4:	4603      	mov	r3, r0
   158b6:	e75e      	b.n	15776 <d_expression_1+0x202>
   158b8:	2e00      	cmp	r6, #0
   158ba:	d046      	beq.n	1594a <d_expression_1+0x3d6>
   158bc:	7833      	ldrb	r3, [r6, #0]
   158be:	2b70      	cmp	r3, #112	; 0x70
   158c0:	d015      	beq.n	158ee <d_expression_1+0x37a>
   158c2:	2b6d      	cmp	r3, #109	; 0x6d
   158c4:	d013      	beq.n	158ee <d_expression_1+0x37a>
   158c6:	2700      	movs	r7, #0
   158c8:	4630      	mov	r0, r6
   158ca:	4926      	ldr	r1, [pc, #152]	; (15964 <d_expression_1+0x3f0>)
   158cc:	f009 fb2c 	bl	1ef28 <strcmp>
   158d0:	b1b8      	cbz	r0, 15902 <d_expression_1+0x38e>
   158d2:	4620      	mov	r0, r4
   158d4:	f7ff fe4e 	bl	15574 <d_expression_1>
   158d8:	4603      	mov	r3, r0
   158da:	2f00      	cmp	r7, #0
   158dc:	f43f ae88 	beq.w	155f0 <d_expression_1+0x7c>
   158e0:	461a      	mov	r2, r3
   158e2:	2138      	movs	r1, #56	; 0x38
   158e4:	4620      	mov	r0, r4
   158e6:	f7fe ffd9 	bl	1489c <d_make_comp>
   158ea:	4603      	mov	r3, r0
   158ec:	e680      	b.n	155f0 <d_expression_1+0x7c>
   158ee:	7872      	ldrb	r2, [r6, #1]
   158f0:	429a      	cmp	r2, r3
   158f2:	d1e8      	bne.n	158c6 <d_expression_1+0x352>
   158f4:	68e3      	ldr	r3, [r4, #12]
   158f6:	781a      	ldrb	r2, [r3, #0]
   158f8:	2a5f      	cmp	r2, #95	; 0x5f
   158fa:	d1e5      	bne.n	158c8 <d_expression_1+0x354>
   158fc:	3301      	adds	r3, #1
   158fe:	60e3      	str	r3, [r4, #12]
   15900:	e7e1      	b.n	158c6 <d_expression_1+0x352>
   15902:	4620      	mov	r0, r4
   15904:	f000 f830 	bl	15968 <d_template_args_1>
   15908:	4603      	mov	r3, r0
   1590a:	e7e6      	b.n	158da <d_expression_1+0x366>
   1590c:	2b6f      	cmp	r3, #111	; 0x6f
   1590e:	d015      	beq.n	1593c <d_expression_1+0x3c8>
   15910:	2b69      	cmp	r3, #105	; 0x69
   15912:	f47f aeaa 	bne.w	1566a <d_expression_1+0xf6>
   15916:	784b      	ldrb	r3, [r1, #1]
   15918:	2b6c      	cmp	r3, #108	; 0x6c
   1591a:	f47f ae50 	bne.w	155be <d_expression_1+0x4a>
   1591e:	2500      	movs	r5, #0
   15920:	3102      	adds	r1, #2
   15922:	60e1      	str	r1, [r4, #12]
   15924:	4620      	mov	r0, r4
   15926:	2145      	movs	r1, #69	; 0x45
   15928:	f7ff fbc6 	bl	150b8 <d_exprlist>
   1592c:	462a      	mov	r2, r5
   1592e:	4603      	mov	r3, r0
   15930:	2130      	movs	r1, #48	; 0x30
   15932:	4620      	mov	r0, r4
   15934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15938:	f7fe bfb0 	b.w	1489c <d_make_comp>
   1593c:	784b      	ldrb	r3, [r1, #1]
   1593e:	2b6e      	cmp	r3, #110	; 0x6e
   15940:	f47f ae3d 	bne.w	155be <d_expression_1+0x4a>
   15944:	3102      	adds	r1, #2
   15946:	60c1      	str	r1, [r0, #12]
   15948:	e628      	b.n	1559c <d_expression_1+0x28>
   1594a:	2700      	movs	r7, #0
   1594c:	e7c1      	b.n	158d2 <d_expression_1+0x35e>
   1594e:	bf00      	nop
   15950:	00024d28 	.word	0x00024d28
   15954:	00024834 	.word	0x00024834
   15958:	00024828 	.word	0x00024828
   1595c:	0002482c 	.word	0x0002482c
   15960:	00024830 	.word	0x00024830
   15964:	00024824 	.word	0x00024824

00015968 <d_template_args_1>:
   15968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1596c:	68c2      	ldr	r2, [r0, #12]
   1596e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   15972:	7813      	ldrb	r3, [r2, #0]
   15974:	2b45      	cmp	r3, #69	; 0x45
   15976:	b083      	sub	sp, #12
   15978:	4604      	mov	r4, r0
   1597a:	d04e      	beq.n	15a1a <d_template_args_1+0xb2>
   1597c:	ae02      	add	r6, sp, #8
   1597e:	2100      	movs	r1, #0
   15980:	f846 1d04 	str.w	r1, [r6, #-4]!
   15984:	2701      	movs	r7, #1
   15986:	3b49      	subs	r3, #73	; 0x49
   15988:	2b0f      	cmp	r3, #15
   1598a:	d83e      	bhi.n	15a0a <d_template_args_1+0xa2>
   1598c:	e8df f003 	tbb	[pc, r3]
   15990:	1b3d3838 	.word	0x1b3d3838
   15994:	3d3d3d3d 	.word	0x3d3d3d3d
   15998:	3d3d3d3d 	.word	0x3d3d3d3d
   1599c:	083d3d3d 	.word	0x083d3d3d
   159a0:	3201      	adds	r2, #1
   159a2:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   159a6:	60e2      	str	r2, [r4, #12]
   159a8:	6367      	str	r7, [r4, #52]	; 0x34
   159aa:	4620      	mov	r0, r4
   159ac:	f7ff fde2 	bl	15574 <d_expression_1>
   159b0:	68e3      	ldr	r3, [r4, #12]
   159b2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   159b6:	781a      	ldrb	r2, [r3, #0]
   159b8:	2a45      	cmp	r2, #69	; 0x45
   159ba:	4605      	mov	r5, r0
   159bc:	d02a      	beq.n	15a14 <d_template_args_1+0xac>
   159be:	2000      	movs	r0, #0
   159c0:	b003      	add	sp, #12
   159c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   159c6:	4620      	mov	r0, r4
   159c8:	f001 faee 	bl	16fa8 <d_expr_primary>
   159cc:	4605      	mov	r5, r0
   159ce:	2300      	movs	r3, #0
   159d0:	212f      	movs	r1, #47	; 0x2f
   159d2:	462a      	mov	r2, r5
   159d4:	4620      	mov	r0, r4
   159d6:	2d00      	cmp	r5, #0
   159d8:	d0f1      	beq.n	159be <d_template_args_1+0x56>
   159da:	f7fe ff5f 	bl	1489c <d_make_comp>
   159de:	6030      	str	r0, [r6, #0]
   159e0:	f100 0608 	add.w	r6, r0, #8
   159e4:	2800      	cmp	r0, #0
   159e6:	d0ea      	beq.n	159be <d_template_args_1+0x56>
   159e8:	68e2      	ldr	r2, [r4, #12]
   159ea:	7813      	ldrb	r3, [r2, #0]
   159ec:	2b45      	cmp	r3, #69	; 0x45
   159ee:	d1ca      	bne.n	15986 <d_template_args_1+0x1e>
   159f0:	9801      	ldr	r0, [sp, #4]
   159f2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   159f6:	3201      	adds	r2, #1
   159f8:	60e2      	str	r2, [r4, #12]
   159fa:	b003      	add	sp, #12
   159fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a00:	4620      	mov	r0, r4
   15a02:	f000 f815 	bl	15a30 <d_template_args>
   15a06:	4605      	mov	r5, r0
   15a08:	e7e1      	b.n	159ce <d_template_args_1+0x66>
   15a0a:	4620      	mov	r0, r4
   15a0c:	f000 f9d6 	bl	15dbc <d_type>
   15a10:	4605      	mov	r5, r0
   15a12:	e7dc      	b.n	159ce <d_template_args_1+0x66>
   15a14:	3301      	adds	r3, #1
   15a16:	60e3      	str	r3, [r4, #12]
   15a18:	e7d9      	b.n	159ce <d_template_args_1+0x66>
   15a1a:	3201      	adds	r2, #1
   15a1c:	2300      	movs	r3, #0
   15a1e:	60c2      	str	r2, [r0, #12]
   15a20:	212f      	movs	r1, #47	; 0x2f
   15a22:	461a      	mov	r2, r3
   15a24:	b003      	add	sp, #12
   15a26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a2a:	f7fe bf37 	b.w	1489c <d_make_comp>
   15a2e:	bf00      	nop

00015a30 <d_template_args>:
   15a30:	68c2      	ldr	r2, [r0, #12]
   15a32:	7813      	ldrb	r3, [r2, #0]
   15a34:	3b49      	subs	r3, #73	; 0x49
   15a36:	2b01      	cmp	r3, #1
   15a38:	d802      	bhi.n	15a40 <d_template_args+0x10>
   15a3a:	3201      	adds	r2, #1
   15a3c:	60c2      	str	r2, [r0, #12]
   15a3e:	e793      	b.n	15968 <d_template_args_1>
   15a40:	2000      	movs	r0, #0
   15a42:	4770      	bx	lr

00015a44 <d_name>:
   15a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a48:	68c2      	ldr	r2, [r0, #12]
   15a4a:	7813      	ldrb	r3, [r2, #0]
   15a4c:	3b4e      	subs	r3, #78	; 0x4e
   15a4e:	b085      	sub	sp, #20
   15a50:	4605      	mov	r5, r0
   15a52:	2b0c      	cmp	r3, #12
   15a54:	d870      	bhi.n	15b38 <d_name+0xf4>
   15a56:	e8df f003 	tbb	[pc, r3]
   15a5a:	6f1e      	.short	0x6f1e
   15a5c:	5b6f6f6f 	.word	0x5b6f6f6f
   15a60:	6f6f176f 	.word	0x6f6f176f
   15a64:	6f6f      	.short	0x6f6f
   15a66:	07          	.byte	0x07
   15a67:	00          	.byte	0x00
   15a68:	3201      	adds	r2, #1
   15a6a:	2100      	movs	r1, #0
   15a6c:	60c2      	str	r2, [r0, #12]
   15a6e:	f000 ffbd 	bl	169ec <d_encoding>
   15a72:	68eb      	ldr	r3, [r5, #12]
   15a74:	7819      	ldrb	r1, [r3, #0]
   15a76:	2945      	cmp	r1, #69	; 0x45
   15a78:	4606      	mov	r6, r0
   15a7a:	f000 8099 	beq.w	15bb0 <d_name+0x16c>
   15a7e:	2200      	movs	r2, #0
   15a80:	4610      	mov	r0, r2
   15a82:	b005      	add	sp, #20
   15a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a88:	f000 fe40 	bl	1670c <d_unqualified_name>
   15a8c:	4602      	mov	r2, r0
   15a8e:	4610      	mov	r0, r2
   15a90:	b005      	add	sp, #20
   15a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a96:	3201      	adds	r2, #1
   15a98:	60c2      	str	r2, [r0, #12]
   15a9a:	a903      	add	r1, sp, #12
   15a9c:	2201      	movs	r2, #1
   15a9e:	f7fe ff49 	bl	14934 <d_cv_qualifiers>
   15aa2:	4681      	mov	r9, r0
   15aa4:	2800      	cmp	r0, #0
   15aa6:	d0ea      	beq.n	15a7e <d_name+0x3a>
   15aa8:	2100      	movs	r1, #0
   15aaa:	4628      	mov	r0, r5
   15aac:	f7fe ffa8 	bl	14a00 <d_ref_qualifier>
   15ab0:	68ea      	ldr	r2, [r5, #12]
   15ab2:	4eb4      	ldr	r6, [pc, #720]	; (15d84 <d_name+0x340>)
   15ab4:	7814      	ldrb	r4, [r2, #0]
   15ab6:	4680      	mov	r8, r0
   15ab8:	2700      	movs	r7, #0
   15aba:	2c00      	cmp	r4, #0
   15abc:	f000 80e8 	beq.w	15c90 <d_name+0x24c>
   15ac0:	2c44      	cmp	r4, #68	; 0x44
   15ac2:	f000 80d1 	beq.w	15c68 <d_name+0x224>
   15ac6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   15aca:	b2db      	uxtb	r3, r3
   15acc:	2b1c      	cmp	r3, #28
   15ace:	f240 80a8 	bls.w	15c22 <d_name+0x1de>
   15ad2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   15ad6:	2b19      	cmp	r3, #25
   15ad8:	f240 80a8 	bls.w	15c2c <d_name+0x1e8>
   15adc:	2c55      	cmp	r4, #85	; 0x55
   15ade:	f000 80de 	beq.w	15c9e <d_name+0x25a>
   15ae2:	2c53      	cmp	r4, #83	; 0x53
   15ae4:	f000 80f1 	beq.w	15cca <d_name+0x286>
   15ae8:	2c49      	cmp	r4, #73	; 0x49
   15aea:	f000 80da 	beq.w	15ca2 <d_name+0x25e>
   15aee:	2c54      	cmp	r4, #84	; 0x54
   15af0:	f000 811f 	beq.w	15d32 <d_name+0x2ee>
   15af4:	2c45      	cmp	r4, #69	; 0x45
   15af6:	f000 814b 	beq.w	15d90 <d_name+0x34c>
   15afa:	2c4d      	cmp	r4, #77	; 0x4d
   15afc:	f040 80c8 	bne.w	15c90 <d_name+0x24c>
   15b00:	2f00      	cmp	r7, #0
   15b02:	f000 80c5 	beq.w	15c90 <d_name+0x24c>
   15b06:	1c53      	adds	r3, r2, #1
   15b08:	60eb      	str	r3, [r5, #12]
   15b0a:	7854      	ldrb	r4, [r2, #1]
   15b0c:	461a      	mov	r2, r3
   15b0e:	e7d4      	b.n	15aba <d_name+0x76>
   15b10:	7853      	ldrb	r3, [r2, #1]
   15b12:	2b74      	cmp	r3, #116	; 0x74
   15b14:	d031      	beq.n	15b7a <d_name+0x136>
   15b16:	2100      	movs	r1, #0
   15b18:	f7ff f90a 	bl	14d30 <d_substitution>
   15b1c:	68eb      	ldr	r3, [r5, #12]
   15b1e:	7819      	ldrb	r1, [r3, #0]
   15b20:	2949      	cmp	r1, #73	; 0x49
   15b22:	4602      	mov	r2, r0
   15b24:	d1b3      	bne.n	15a8e <d_name+0x4a>
   15b26:	3301      	adds	r3, #1
   15b28:	60eb      	str	r3, [r5, #12]
   15b2a:	4628      	mov	r0, r5
   15b2c:	9201      	str	r2, [sp, #4]
   15b2e:	f7ff ff1b 	bl	15968 <d_template_args_1>
   15b32:	9a01      	ldr	r2, [sp, #4]
   15b34:	4603      	mov	r3, r0
   15b36:	e017      	b.n	15b68 <d_name+0x124>
   15b38:	f000 fde8 	bl	1670c <d_unqualified_name>
   15b3c:	68eb      	ldr	r3, [r5, #12]
   15b3e:	7819      	ldrb	r1, [r3, #0]
   15b40:	2949      	cmp	r1, #73	; 0x49
   15b42:	4602      	mov	r2, r0
   15b44:	d1a3      	bne.n	15a8e <d_name+0x4a>
   15b46:	2a00      	cmp	r2, #0
   15b48:	d099      	beq.n	15a7e <d_name+0x3a>
   15b4a:	6a29      	ldr	r1, [r5, #32]
   15b4c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   15b4e:	4281      	cmp	r1, r0
   15b50:	da95      	bge.n	15a7e <d_name+0x3a>
   15b52:	69ec      	ldr	r4, [r5, #28]
   15b54:	1c48      	adds	r0, r1, #1
   15b56:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   15b5a:	6228      	str	r0, [r5, #32]
   15b5c:	7819      	ldrb	r1, [r3, #0]
   15b5e:	3949      	subs	r1, #73	; 0x49
   15b60:	2901      	cmp	r1, #1
   15b62:	bf88      	it	hi
   15b64:	2300      	movhi	r3, #0
   15b66:	d9de      	bls.n	15b26 <d_name+0xe2>
   15b68:	4628      	mov	r0, r5
   15b6a:	2104      	movs	r1, #4
   15b6c:	f7fe fe96 	bl	1489c <d_make_comp>
   15b70:	4602      	mov	r2, r0
   15b72:	4610      	mov	r0, r2
   15b74:	b005      	add	sp, #20
   15b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15b7a:	6943      	ldr	r3, [r0, #20]
   15b7c:	6981      	ldr	r1, [r0, #24]
   15b7e:	3202      	adds	r2, #2
   15b80:	428b      	cmp	r3, r1
   15b82:	60c2      	str	r2, [r0, #12]
   15b84:	f2c0 80ab 	blt.w	15cde <d_name+0x29a>
   15b88:	2400      	movs	r4, #0
   15b8a:	4628      	mov	r0, r5
   15b8c:	f000 fdbe 	bl	1670c <d_unqualified_name>
   15b90:	4622      	mov	r2, r4
   15b92:	4603      	mov	r3, r0
   15b94:	2101      	movs	r1, #1
   15b96:	4628      	mov	r0, r5
   15b98:	f7fe fe80 	bl	1489c <d_make_comp>
   15b9c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15b9e:	68eb      	ldr	r3, [r5, #12]
   15ba0:	3103      	adds	r1, #3
   15ba2:	6329      	str	r1, [r5, #48]	; 0x30
   15ba4:	7819      	ldrb	r1, [r3, #0]
   15ba6:	2949      	cmp	r1, #73	; 0x49
   15ba8:	4602      	mov	r2, r0
   15baa:	f47f af70 	bne.w	15a8e <d_name+0x4a>
   15bae:	e7ca      	b.n	15b46 <d_name+0x102>
   15bb0:	1c5a      	adds	r2, r3, #1
   15bb2:	60ea      	str	r2, [r5, #12]
   15bb4:	7859      	ldrb	r1, [r3, #1]
   15bb6:	2973      	cmp	r1, #115	; 0x73
   15bb8:	f000 80a3 	beq.w	15d02 <d_name+0x2be>
   15bbc:	2964      	cmp	r1, #100	; 0x64
   15bbe:	f000 80bc 	beq.w	15d3a <d_name+0x2f6>
   15bc2:	4628      	mov	r0, r5
   15bc4:	f7ff ff3e 	bl	15a44 <d_name>
   15bc8:	4604      	mov	r4, r0
   15bca:	2800      	cmp	r0, #0
   15bcc:	d072      	beq.n	15cb4 <d_name+0x270>
   15bce:	7803      	ldrb	r3, [r0, #0]
   15bd0:	2b45      	cmp	r3, #69	; 0x45
   15bd2:	f000 8094 	beq.w	15cfe <d_name+0x2ba>
   15bd6:	2b47      	cmp	r3, #71	; 0x47
   15bd8:	f000 8091 	beq.w	15cfe <d_name+0x2ba>
   15bdc:	68eb      	ldr	r3, [r5, #12]
   15bde:	781a      	ldrb	r2, [r3, #0]
   15be0:	2a5f      	cmp	r2, #95	; 0x5f
   15be2:	f040 808c 	bne.w	15cfe <d_name+0x2ba>
   15be6:	f04f 37ff 	mov.w	r7, #4294967295
   15bea:	4628      	mov	r0, r5
   15bec:	3301      	adds	r3, #1
   15bee:	f840 3f0c 	str.w	r3, [r0, #12]!
   15bf2:	f7fe ffa5 	bl	14b40 <d_number.isra.0>
   15bf6:	2800      	cmp	r0, #0
   15bf8:	f6ff af41 	blt.w	15a7e <d_name+0x3a>
   15bfc:	1c7b      	adds	r3, r7, #1
   15bfe:	d07e      	beq.n	15cfe <d_name+0x2ba>
   15c00:	696b      	ldr	r3, [r5, #20]
   15c02:	69aa      	ldr	r2, [r5, #24]
   15c04:	4293      	cmp	r3, r2
   15c06:	da55      	bge.n	15cb4 <d_name+0x270>
   15c08:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15c0c:	6929      	ldr	r1, [r5, #16]
   15c0e:	3301      	adds	r3, #1
   15c10:	0092      	lsls	r2, r2, #2
   15c12:	616b      	str	r3, [r5, #20]
   15c14:	188b      	adds	r3, r1, r2
   15c16:	d04e      	beq.n	15cb6 <d_name+0x272>
   15c18:	2046      	movs	r0, #70	; 0x46
   15c1a:	5488      	strb	r0, [r1, r2]
   15c1c:	609f      	str	r7, [r3, #8]
   15c1e:	605c      	str	r4, [r3, #4]
   15c20:	e049      	b.n	15cb6 <d_name+0x272>
   15c22:	fa26 f303 	lsr.w	r3, r6, r3
   15c26:	07d9      	lsls	r1, r3, #31
   15c28:	f57f af53 	bpl.w	15ad2 <d_name+0x8e>
   15c2c:	4628      	mov	r0, r5
   15c2e:	f000 fd6d 	bl	1670c <d_unqualified_name>
   15c32:	b347      	cbz	r7, 15c86 <d_name+0x242>
   15c34:	2101      	movs	r1, #1
   15c36:	4603      	mov	r3, r0
   15c38:	463a      	mov	r2, r7
   15c3a:	4628      	mov	r0, r5
   15c3c:	f7fe fe2e 	bl	1489c <d_make_comp>
   15c40:	4607      	mov	r7, r0
   15c42:	2c53      	cmp	r4, #83	; 0x53
   15c44:	d01c      	beq.n	15c80 <d_name+0x23c>
   15c46:	68ea      	ldr	r2, [r5, #12]
   15c48:	7814      	ldrb	r4, [r2, #0]
   15c4a:	2c45      	cmp	r4, #69	; 0x45
   15c4c:	f43f af3b 	beq.w	15ac6 <d_name+0x82>
   15c50:	b1f7      	cbz	r7, 15c90 <d_name+0x24c>
   15c52:	6a2b      	ldr	r3, [r5, #32]
   15c54:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15c56:	428b      	cmp	r3, r1
   15c58:	da1a      	bge.n	15c90 <d_name+0x24c>
   15c5a:	69e9      	ldr	r1, [r5, #28]
   15c5c:	1c58      	adds	r0, r3, #1
   15c5e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   15c62:	6228      	str	r0, [r5, #32]
   15c64:	7814      	ldrb	r4, [r2, #0]
   15c66:	e728      	b.n	15aba <d_name+0x76>
   15c68:	7853      	ldrb	r3, [r2, #1]
   15c6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15c6e:	2b54      	cmp	r3, #84	; 0x54
   15c70:	4628      	mov	r0, r5
   15c72:	d00a      	beq.n	15c8a <d_name+0x246>
   15c74:	f000 fd4a 	bl	1670c <d_unqualified_name>
   15c78:	2f00      	cmp	r7, #0
   15c7a:	d1db      	bne.n	15c34 <d_name+0x1f0>
   15c7c:	4607      	mov	r7, r0
   15c7e:	e7e2      	b.n	15c46 <d_name+0x202>
   15c80:	68ea      	ldr	r2, [r5, #12]
   15c82:	7814      	ldrb	r4, [r2, #0]
   15c84:	e719      	b.n	15aba <d_name+0x76>
   15c86:	4607      	mov	r7, r0
   15c88:	e7db      	b.n	15c42 <d_name+0x1fe>
   15c8a:	f000 f897 	bl	15dbc <d_type>
   15c8e:	e7f3      	b.n	15c78 <d_name+0x234>
   15c90:	2200      	movs	r2, #0
   15c92:	4610      	mov	r0, r2
   15c94:	f8c9 2000 	str.w	r2, [r9]
   15c98:	b005      	add	sp, #20
   15c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15c9e:	4628      	mov	r0, r5
   15ca0:	e7e8      	b.n	15c74 <d_name+0x230>
   15ca2:	2f00      	cmp	r7, #0
   15ca4:	d0f4      	beq.n	15c90 <d_name+0x24c>
   15ca6:	3201      	adds	r2, #1
   15ca8:	60ea      	str	r2, [r5, #12]
   15caa:	4628      	mov	r0, r5
   15cac:	f7ff fe5c 	bl	15968 <d_template_args_1>
   15cb0:	2104      	movs	r1, #4
   15cb2:	e7c0      	b.n	15c36 <d_name+0x1f2>
   15cb4:	2300      	movs	r3, #0
   15cb6:	4632      	mov	r2, r6
   15cb8:	4628      	mov	r0, r5
   15cba:	2102      	movs	r1, #2
   15cbc:	f7fe fdee 	bl	1489c <d_make_comp>
   15cc0:	4602      	mov	r2, r0
   15cc2:	4610      	mov	r0, r2
   15cc4:	b005      	add	sp, #20
   15cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15cca:	2101      	movs	r1, #1
   15ccc:	4628      	mov	r0, r5
   15cce:	f7ff f82f 	bl	14d30 <d_substitution>
   15cd2:	2f00      	cmp	r7, #0
   15cd4:	d1ae      	bne.n	15c34 <d_name+0x1f0>
   15cd6:	68ea      	ldr	r2, [r5, #12]
   15cd8:	4607      	mov	r7, r0
   15cda:	7814      	ldrb	r4, [r2, #0]
   15cdc:	e6ed      	b.n	15aba <d_name+0x76>
   15cde:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15ce2:	6901      	ldr	r1, [r0, #16]
   15ce4:	0092      	lsls	r2, r2, #2
   15ce6:	3301      	adds	r3, #1
   15ce8:	188c      	adds	r4, r1, r2
   15cea:	6143      	str	r3, [r0, #20]
   15cec:	f43f af4d 	beq.w	15b8a <d_name+0x146>
   15cf0:	2300      	movs	r3, #0
   15cf2:	548b      	strb	r3, [r1, r2]
   15cf4:	4824      	ldr	r0, [pc, #144]	; (15d88 <d_name+0x344>)
   15cf6:	6060      	str	r0, [r4, #4]
   15cf8:	2303      	movs	r3, #3
   15cfa:	60a3      	str	r3, [r4, #8]
   15cfc:	e745      	b.n	15b8a <d_name+0x146>
   15cfe:	4623      	mov	r3, r4
   15d00:	e7d9      	b.n	15cb6 <d_name+0x272>
   15d02:	1c9a      	adds	r2, r3, #2
   15d04:	60ea      	str	r2, [r5, #12]
   15d06:	789a      	ldrb	r2, [r3, #2]
   15d08:	2a5f      	cmp	r2, #95	; 0x5f
   15d0a:	d032      	beq.n	15d72 <d_name+0x32e>
   15d0c:	696b      	ldr	r3, [r5, #20]
   15d0e:	69aa      	ldr	r2, [r5, #24]
   15d10:	4293      	cmp	r3, r2
   15d12:	dacf      	bge.n	15cb4 <d_name+0x270>
   15d14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15d18:	6929      	ldr	r1, [r5, #16]
   15d1a:	3301      	adds	r3, #1
   15d1c:	0092      	lsls	r2, r2, #2
   15d1e:	616b      	str	r3, [r5, #20]
   15d20:	188b      	adds	r3, r1, r2
   15d22:	d0c8      	beq.n	15cb6 <d_name+0x272>
   15d24:	2400      	movs	r4, #0
   15d26:	548c      	strb	r4, [r1, r2]
   15d28:	4818      	ldr	r0, [pc, #96]	; (15d8c <d_name+0x348>)
   15d2a:	6058      	str	r0, [r3, #4]
   15d2c:	220e      	movs	r2, #14
   15d2e:	609a      	str	r2, [r3, #8]
   15d30:	e7c1      	b.n	15cb6 <d_name+0x272>
   15d32:	4628      	mov	r0, r5
   15d34:	f7fe ff62 	bl	14bfc <d_template_param>
   15d38:	e79e      	b.n	15c78 <d_name+0x234>
   15d3a:	3302      	adds	r3, #2
   15d3c:	60eb      	str	r3, [r5, #12]
   15d3e:	4628      	mov	r0, r5
   15d40:	f7fe ff40 	bl	14bc4 <d_compact_number>
   15d44:	1e07      	subs	r7, r0, #0
   15d46:	f6ff ae9a 	blt.w	15a7e <d_name+0x3a>
   15d4a:	4628      	mov	r0, r5
   15d4c:	f7ff fe7a 	bl	15a44 <d_name>
   15d50:	4604      	mov	r4, r0
   15d52:	2800      	cmp	r0, #0
   15d54:	f43f af54 	beq.w	15c00 <d_name+0x1bc>
   15d58:	7803      	ldrb	r3, [r0, #0]
   15d5a:	2b45      	cmp	r3, #69	; 0x45
   15d5c:	f43f af50 	beq.w	15c00 <d_name+0x1bc>
   15d60:	2b47      	cmp	r3, #71	; 0x47
   15d62:	f43f af4d 	beq.w	15c00 <d_name+0x1bc>
   15d66:	68eb      	ldr	r3, [r5, #12]
   15d68:	781a      	ldrb	r2, [r3, #0]
   15d6a:	2a5f      	cmp	r2, #95	; 0x5f
   15d6c:	f47f af48 	bne.w	15c00 <d_name+0x1bc>
   15d70:	e73b      	b.n	15bea <d_name+0x1a6>
   15d72:	4628      	mov	r0, r5
   15d74:	3303      	adds	r3, #3
   15d76:	f840 3f0c 	str.w	r3, [r0, #12]!
   15d7a:	f7fe fee1 	bl	14b40 <d_number.isra.0>
   15d7e:	2800      	cmp	r0, #0
   15d80:	dac4      	bge.n	15d0c <d_name+0x2c8>
   15d82:	e67c      	b.n	15a7e <d_name+0x3a>
   15d84:	100803ff 	.word	0x100803ff
   15d88:	00024848 	.word	0x00024848
   15d8c:	00024838 	.word	0x00024838
   15d90:	f8c9 7000 	str.w	r7, [r9]
   15d94:	2f00      	cmp	r7, #0
   15d96:	f43f ae72 	beq.w	15a7e <d_name+0x3a>
   15d9a:	f1b8 0f00 	cmp.w	r8, #0
   15d9e:	d004      	beq.n	15daa <d_name+0x366>
   15da0:	9b03      	ldr	r3, [sp, #12]
   15da2:	f8c8 3004 	str.w	r3, [r8, #4]
   15da6:	f8cd 800c 	str.w	r8, [sp, #12]
   15daa:	7813      	ldrb	r3, [r2, #0]
   15dac:	2b45      	cmp	r3, #69	; 0x45
   15dae:	f47f ae66 	bne.w	15a7e <d_name+0x3a>
   15db2:	3201      	adds	r2, #1
   15db4:	60ea      	str	r2, [r5, #12]
   15db6:	9a03      	ldr	r2, [sp, #12]
   15db8:	e669      	b.n	15a8e <d_name+0x4a>
   15dba:	bf00      	nop

00015dbc <d_type>:
   15dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15dc0:	68c2      	ldr	r2, [r0, #12]
   15dc2:	7813      	ldrb	r3, [r2, #0]
   15dc4:	2b72      	cmp	r3, #114	; 0x72
   15dc6:	b083      	sub	sp, #12
   15dc8:	4604      	mov	r4, r0
   15dca:	d058      	beq.n	15e7e <d_type+0xc2>
   15dcc:	2b56      	cmp	r3, #86	; 0x56
   15dce:	d056      	beq.n	15e7e <d_type+0xc2>
   15dd0:	2b4b      	cmp	r3, #75	; 0x4b
   15dd2:	d054      	beq.n	15e7e <d_type+0xc2>
   15dd4:	2b44      	cmp	r3, #68	; 0x44
   15dd6:	f000 809f 	beq.w	15f18 <d_type+0x15c>
   15dda:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   15dde:	294a      	cmp	r1, #74	; 0x4a
   15de0:	f200 808a 	bhi.w	15ef8 <d_type+0x13c>
   15de4:	e8df f011 	tbh	[pc, r1, lsl #1]
   15de8:	012a012a 	.word	0x012a012a
   15dec:	012a012a 	.word	0x012a012a
   15df0:	012a012a 	.word	0x012a012a
   15df4:	012a012a 	.word	0x012a012a
   15df8:	012a012a 	.word	0x012a012a
   15dfc:	00880088 	.word	0x00880088
   15e00:	00880088 	.word	0x00880088
   15e04:	00880088 	.word	0x00880088
   15e08:	020b0088 	.word	0x020b0088
   15e0c:	01520088 	.word	0x01520088
   15e10:	00880088 	.word	0x00880088
   15e14:	0160014c 	.word	0x0160014c
   15e18:	00880088 	.word	0x00880088
   15e1c:	00880088 	.word	0x00880088
   15e20:	016e0088 	.word	0x016e0088
   15e24:	0186012a 	.word	0x0186012a
   15e28:	008801c3 	.word	0x008801c3
   15e2c:	01a20194 	.word	0x01a20194
   15e30:	01f301d1 	.word	0x01f301d1
   15e34:	00880088 	.word	0x00880088
   15e38:	00880088 	.word	0x00880088
   15e3c:	0088012a 	.word	0x0088012a
   15e40:	00880088 	.word	0x00880088
   15e44:	00880088 	.word	0x00880088
   15e48:	010c0088 	.word	0x010c0088
   15e4c:	010c010c 	.word	0x010c010c
   15e50:	010c010c 	.word	0x010c010c
   15e54:	010c010c 	.word	0x010c010c
   15e58:	010c010c 	.word	0x010c010c
   15e5c:	0088010c 	.word	0x0088010c
   15e60:	010c010c 	.word	0x010c010c
   15e64:	010c010c 	.word	0x010c010c
   15e68:	00880088 	.word	0x00880088
   15e6c:	010c0088 	.word	0x010c0088
   15e70:	013e010c 	.word	0x013e010c
   15e74:	010c010c 	.word	0x010c010c
   15e78:	010c010c 	.word	0x010c010c
   15e7c:	010c      	.short	0x010c
   15e7e:	2200      	movs	r2, #0
   15e80:	a901      	add	r1, sp, #4
   15e82:	4620      	mov	r0, r4
   15e84:	f7fe fd56 	bl	14934 <d_cv_qualifiers>
   15e88:	4605      	mov	r5, r0
   15e8a:	2800      	cmp	r0, #0
   15e8c:	d034      	beq.n	15ef8 <d_type+0x13c>
   15e8e:	68e3      	ldr	r3, [r4, #12]
   15e90:	781b      	ldrb	r3, [r3, #0]
   15e92:	2b46      	cmp	r3, #70	; 0x46
   15e94:	4620      	mov	r0, r4
   15e96:	d034      	beq.n	15f02 <d_type+0x146>
   15e98:	f7ff ff90 	bl	15dbc <d_type>
   15e9c:	6028      	str	r0, [r5, #0]
   15e9e:	b358      	cbz	r0, 15ef8 <d_type+0x13c>
   15ea0:	7803      	ldrb	r3, [r0, #0]
   15ea2:	3b1f      	subs	r3, #31
   15ea4:	2b01      	cmp	r3, #1
   15ea6:	d930      	bls.n	15f0a <d_type+0x14e>
   15ea8:	9a01      	ldr	r2, [sp, #4]
   15eaa:	b32a      	cbz	r2, 15ef8 <d_type+0x13c>
   15eac:	6a23      	ldr	r3, [r4, #32]
   15eae:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15eb0:	428b      	cmp	r3, r1
   15eb2:	da21      	bge.n	15ef8 <d_type+0x13c>
   15eb4:	69e0      	ldr	r0, [r4, #28]
   15eb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   15eba:	9d01      	ldr	r5, [sp, #4]
   15ebc:	1c59      	adds	r1, r3, #1
   15ebe:	4628      	mov	r0, r5
   15ec0:	6221      	str	r1, [r4, #32]
   15ec2:	b003      	add	sp, #12
   15ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15ec8:	2301      	movs	r3, #1
   15eca:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15ecc:	6343      	str	r3, [r0, #52]	; 0x34
   15ece:	f7ff fb51 	bl	15574 <d_expression_1>
   15ed2:	6365      	str	r5, [r4, #52]	; 0x34
   15ed4:	4602      	mov	r2, r0
   15ed6:	2300      	movs	r3, #0
   15ed8:	2142      	movs	r1, #66	; 0x42
   15eda:	4620      	mov	r0, r4
   15edc:	f7fe fcde 	bl	1489c <d_make_comp>
   15ee0:	4605      	mov	r5, r0
   15ee2:	9001      	str	r0, [sp, #4]
   15ee4:	b140      	cbz	r0, 15ef8 <d_type+0x13c>
   15ee6:	68e3      	ldr	r3, [r4, #12]
   15ee8:	781a      	ldrb	r2, [r3, #0]
   15eea:	b12a      	cbz	r2, 15ef8 <d_type+0x13c>
   15eec:	1c5a      	adds	r2, r3, #1
   15eee:	60e2      	str	r2, [r4, #12]
   15ef0:	781b      	ldrb	r3, [r3, #0]
   15ef2:	2b45      	cmp	r3, #69	; 0x45
   15ef4:	f000 80aa 	beq.w	1604c <d_type+0x290>
   15ef8:	2500      	movs	r5, #0
   15efa:	4628      	mov	r0, r5
   15efc:	b003      	add	sp, #12
   15efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15f02:	f000 fd53 	bl	169ac <d_function_type>
   15f06:	6028      	str	r0, [r5, #0]
   15f08:	e7c9      	b.n	15e9e <d_type+0xe2>
   15f0a:	9a01      	ldr	r2, [sp, #4]
   15f0c:	6843      	ldr	r3, [r0, #4]
   15f0e:	6042      	str	r2, [r0, #4]
   15f10:	682a      	ldr	r2, [r5, #0]
   15f12:	9201      	str	r2, [sp, #4]
   15f14:	602b      	str	r3, [r5, #0]
   15f16:	e7c7      	b.n	15ea8 <d_type+0xec>
   15f18:	7853      	ldrb	r3, [r2, #1]
   15f1a:	2b78      	cmp	r3, #120	; 0x78
   15f1c:	d0af      	beq.n	15e7e <d_type+0xc2>
   15f1e:	1c53      	adds	r3, r2, #1
   15f20:	60c3      	str	r3, [r0, #12]
   15f22:	7853      	ldrb	r3, [r2, #1]
   15f24:	2b00      	cmp	r3, #0
   15f26:	d0e7      	beq.n	15ef8 <d_type+0x13c>
   15f28:	1c93      	adds	r3, r2, #2
   15f2a:	60c3      	str	r3, [r0, #12]
   15f2c:	7853      	ldrb	r3, [r2, #1]
   15f2e:	3b46      	subs	r3, #70	; 0x46
   15f30:	2b30      	cmp	r3, #48	; 0x30
   15f32:	d8e1      	bhi.n	15ef8 <d_type+0x13c>
   15f34:	a101      	add	r1, pc, #4	; (adr r1, 15f3c <d_type+0x180>)
   15f36:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15f3a:	bf00      	nop
   15f3c:	00016427 	.word	0x00016427
   15f40:	00015ef9 	.word	0x00015ef9
   15f44:	00015ef9 	.word	0x00015ef9
   15f48:	00015ef9 	.word	0x00015ef9
   15f4c:	00015ef9 	.word	0x00015ef9
   15f50:	00015ef9 	.word	0x00015ef9
   15f54:	00015ef9 	.word	0x00015ef9
   15f58:	00015ef9 	.word	0x00015ef9
   15f5c:	00015ef9 	.word	0x00015ef9
   15f60:	00015ef9 	.word	0x00015ef9
   15f64:	00015ef9 	.word	0x00015ef9
   15f68:	00015ef9 	.word	0x00015ef9
   15f6c:	00015ef9 	.word	0x00015ef9
   15f70:	00015ef9 	.word	0x00015ef9
   15f74:	00015ec9 	.word	0x00015ec9
   15f78:	00015ef9 	.word	0x00015ef9
   15f7c:	00015ef9 	.word	0x00015ef9
   15f80:	00015ef9 	.word	0x00015ef9
   15f84:	00015ef9 	.word	0x00015ef9
   15f88:	00015ef9 	.word	0x00015ef9
   15f8c:	00015ef9 	.word	0x00015ef9
   15f90:	00015ef9 	.word	0x00015ef9
   15f94:	00015ef9 	.word	0x00015ef9
   15f98:	00015ef9 	.word	0x00015ef9
   15f9c:	00015ef9 	.word	0x00015ef9
   15fa0:	00015ef9 	.word	0x00015ef9
   15fa4:	00015ef9 	.word	0x00015ef9
   15fa8:	000163fb 	.word	0x000163fb
   15fac:	00015ef9 	.word	0x00015ef9
   15fb0:	000163cf 	.word	0x000163cf
   15fb4:	000163af 	.word	0x000163af
   15fb8:	00016385 	.word	0x00016385
   15fbc:	00016357 	.word	0x00016357
   15fc0:	00015ef9 	.word	0x00015ef9
   15fc4:	00016329 	.word	0x00016329
   15fc8:	00016305 	.word	0x00016305
   15fcc:	00015ef9 	.word	0x00015ef9
   15fd0:	00015ef9 	.word	0x00015ef9
   15fd4:	00015ef9 	.word	0x00015ef9
   15fd8:	00015ef9 	.word	0x00015ef9
   15fdc:	000162cb 	.word	0x000162cb
   15fe0:	00015ef9 	.word	0x00015ef9
   15fe4:	000162b5 	.word	0x000162b5
   15fe8:	00015ef9 	.word	0x00015ef9
   15fec:	00015ef9 	.word	0x00015ef9
   15ff0:	00016287 	.word	0x00016287
   15ff4:	00015ec9 	.word	0x00015ec9
   15ff8:	00015ef9 	.word	0x00015ef9
   15ffc:	00016251 	.word	0x00016251
   16000:	6960      	ldr	r0, [r4, #20]
   16002:	69a5      	ldr	r5, [r4, #24]
   16004:	49bc      	ldr	r1, [pc, #752]	; (162f8 <d_type+0x53c>)
   16006:	3b61      	subs	r3, #97	; 0x61
   16008:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1600c:	42a8      	cmp	r0, r5
   1600e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   16012:	f280 823a 	bge.w	1648a <d_type+0x6ce>
   16016:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1601a:	6926      	ldr	r6, [r4, #16]
   1601c:	0089      	lsls	r1, r1, #2
   1601e:	3001      	adds	r0, #1
   16020:	1875      	adds	r5, r6, r1
   16022:	6160      	str	r0, [r4, #20]
   16024:	f000 8231 	beq.w	1648a <d_type+0x6ce>
   16028:	2027      	movs	r0, #39	; 0x27
   1602a:	5470      	strb	r0, [r6, r1]
   1602c:	606b      	str	r3, [r5, #4]
   1602e:	6859      	ldr	r1, [r3, #4]
   16030:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16032:	3201      	adds	r2, #1
   16034:	440b      	add	r3, r1
   16036:	60e2      	str	r2, [r4, #12]
   16038:	6323      	str	r3, [r4, #48]	; 0x30
   1603a:	e75e      	b.n	15efa <d_type+0x13e>
   1603c:	4620      	mov	r0, r4
   1603e:	f7ff fd01 	bl	15a44 <d_name>
   16042:	4605      	mov	r5, r0
   16044:	9001      	str	r0, [sp, #4]
   16046:	2d00      	cmp	r5, #0
   16048:	f43f af56 	beq.w	15ef8 <d_type+0x13c>
   1604c:	6a23      	ldr	r3, [r4, #32]
   1604e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16050:	4293      	cmp	r3, r2
   16052:	f6bf af51 	bge.w	15ef8 <d_type+0x13c>
   16056:	69e1      	ldr	r1, [r4, #28]
   16058:	1c5a      	adds	r2, r3, #1
   1605a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1605e:	9d01      	ldr	r5, [sp, #4]
   16060:	6222      	str	r2, [r4, #32]
   16062:	e74a      	b.n	15efa <d_type+0x13e>
   16064:	3201      	adds	r2, #1
   16066:	60e2      	str	r2, [r4, #12]
   16068:	4620      	mov	r0, r4
   1606a:	f7fe fde9 	bl	14c40 <d_source_name>
   1606e:	2300      	movs	r3, #0
   16070:	4602      	mov	r2, r0
   16072:	2128      	movs	r1, #40	; 0x28
   16074:	4620      	mov	r0, r4
   16076:	f7fe fc11 	bl	1489c <d_make_comp>
   1607a:	4605      	mov	r5, r0
   1607c:	9001      	str	r0, [sp, #4]
   1607e:	e7e2      	b.n	16046 <d_type+0x28a>
   16080:	4620      	mov	r0, r4
   16082:	f000 fc93 	bl	169ac <d_function_type>
   16086:	4605      	mov	r5, r0
   16088:	9001      	str	r0, [sp, #4]
   1608a:	e7dc      	b.n	16046 <d_type+0x28a>
   1608c:	3201      	adds	r2, #1
   1608e:	60e2      	str	r2, [r4, #12]
   16090:	4620      	mov	r0, r4
   16092:	f7ff fe93 	bl	15dbc <d_type>
   16096:	2300      	movs	r3, #0
   16098:	4602      	mov	r2, r0
   1609a:	2125      	movs	r1, #37	; 0x25
   1609c:	4620      	mov	r0, r4
   1609e:	f7fe fbfd 	bl	1489c <d_make_comp>
   160a2:	4605      	mov	r5, r0
   160a4:	9001      	str	r0, [sp, #4]
   160a6:	e7ce      	b.n	16046 <d_type+0x28a>
   160a8:	3201      	adds	r2, #1
   160aa:	60e2      	str	r2, [r4, #12]
   160ac:	4620      	mov	r0, r4
   160ae:	f7ff fe85 	bl	15dbc <d_type>
   160b2:	2300      	movs	r3, #0
   160b4:	4602      	mov	r2, r0
   160b6:	2126      	movs	r1, #38	; 0x26
   160b8:	4620      	mov	r0, r4
   160ba:	f7fe fbef 	bl	1489c <d_make_comp>
   160be:	4605      	mov	r5, r0
   160c0:	9001      	str	r0, [sp, #4]
   160c2:	e7c0      	b.n	16046 <d_type+0x28a>
   160c4:	3201      	adds	r2, #1
   160c6:	60e2      	str	r2, [r4, #12]
   160c8:	4620      	mov	r0, r4
   160ca:	f7ff fe77 	bl	15dbc <d_type>
   160ce:	4605      	mov	r5, r0
   160d0:	2800      	cmp	r0, #0
   160d2:	f000 80bb 	beq.w	1624c <d_type+0x490>
   160d6:	4620      	mov	r0, r4
   160d8:	f7ff fe70 	bl	15dbc <d_type>
   160dc:	2800      	cmp	r0, #0
   160de:	f000 80b5 	beq.w	1624c <d_type+0x490>
   160e2:	4603      	mov	r3, r0
   160e4:	462a      	mov	r2, r5
   160e6:	212b      	movs	r1, #43	; 0x2b
   160e8:	4620      	mov	r0, r4
   160ea:	f7fe fbd7 	bl	1489c <d_make_comp>
   160ee:	4605      	mov	r5, r0
   160f0:	9501      	str	r5, [sp, #4]
   160f2:	e7a8      	b.n	16046 <d_type+0x28a>
   160f4:	3201      	adds	r2, #1
   160f6:	60e2      	str	r2, [r4, #12]
   160f8:	4620      	mov	r0, r4
   160fa:	f7ff fe5f 	bl	15dbc <d_type>
   160fe:	2300      	movs	r3, #0
   16100:	4602      	mov	r2, r0
   16102:	2124      	movs	r1, #36	; 0x24
   16104:	4620      	mov	r0, r4
   16106:	f7fe fbc9 	bl	1489c <d_make_comp>
   1610a:	4605      	mov	r5, r0
   1610c:	9001      	str	r0, [sp, #4]
   1610e:	e79a      	b.n	16046 <d_type+0x28a>
   16110:	3201      	adds	r2, #1
   16112:	60e2      	str	r2, [r4, #12]
   16114:	4620      	mov	r0, r4
   16116:	f7ff fe51 	bl	15dbc <d_type>
   1611a:	2300      	movs	r3, #0
   1611c:	4602      	mov	r2, r0
   1611e:	2123      	movs	r1, #35	; 0x23
   16120:	4620      	mov	r0, r4
   16122:	f7fe fbbb 	bl	1489c <d_make_comp>
   16126:	4605      	mov	r5, r0
   16128:	9001      	str	r0, [sp, #4]
   1612a:	e78c      	b.n	16046 <d_type+0x28a>
   1612c:	7853      	ldrb	r3, [r2, #1]
   1612e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16132:	2a09      	cmp	r2, #9
   16134:	d905      	bls.n	16142 <d_type+0x386>
   16136:	2b5f      	cmp	r3, #95	; 0x5f
   16138:	d003      	beq.n	16142 <d_type+0x386>
   1613a:	3b41      	subs	r3, #65	; 0x41
   1613c:	2b19      	cmp	r3, #25
   1613e:	f200 81c3 	bhi.w	164c8 <d_type+0x70c>
   16142:	2100      	movs	r1, #0
   16144:	4620      	mov	r0, r4
   16146:	f7fe fdf3 	bl	14d30 <d_substitution>
   1614a:	68e3      	ldr	r3, [r4, #12]
   1614c:	9001      	str	r0, [sp, #4]
   1614e:	781b      	ldrb	r3, [r3, #0]
   16150:	2b49      	cmp	r3, #73	; 0x49
   16152:	4605      	mov	r5, r0
   16154:	f47f aed1 	bne.w	15efa <d_type+0x13e>
   16158:	4620      	mov	r0, r4
   1615a:	f7ff fc69 	bl	15a30 <d_template_args>
   1615e:	462a      	mov	r2, r5
   16160:	4603      	mov	r3, r0
   16162:	2104      	movs	r1, #4
   16164:	4620      	mov	r0, r4
   16166:	f7fe fb99 	bl	1489c <d_make_comp>
   1616a:	4605      	mov	r5, r0
   1616c:	e7c0      	b.n	160f0 <d_type+0x334>
   1616e:	3201      	adds	r2, #1
   16170:	60e2      	str	r2, [r4, #12]
   16172:	4620      	mov	r0, r4
   16174:	f7ff fe22 	bl	15dbc <d_type>
   16178:	2300      	movs	r3, #0
   1617a:	4602      	mov	r2, r0
   1617c:	2122      	movs	r1, #34	; 0x22
   1617e:	4620      	mov	r0, r4
   16180:	f7fe fb8c 	bl	1489c <d_make_comp>
   16184:	4605      	mov	r5, r0
   16186:	9001      	str	r0, [sp, #4]
   16188:	e75d      	b.n	16046 <d_type+0x28a>
   1618a:	4620      	mov	r0, r4
   1618c:	f7fe fd36 	bl	14bfc <d_template_param>
   16190:	68e6      	ldr	r6, [r4, #12]
   16192:	9001      	str	r0, [sp, #4]
   16194:	7833      	ldrb	r3, [r6, #0]
   16196:	2b49      	cmp	r3, #73	; 0x49
   16198:	4605      	mov	r5, r0
   1619a:	f47f af54 	bne.w	16046 <d_type+0x28a>
   1619e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   161a0:	2b00      	cmp	r3, #0
   161a2:	f040 81a9 	bne.w	164f8 <d_type+0x73c>
   161a6:	2800      	cmp	r0, #0
   161a8:	f43f aea6 	beq.w	15ef8 <d_type+0x13c>
   161ac:	6a23      	ldr	r3, [r4, #32]
   161ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
   161b0:	4293      	cmp	r3, r2
   161b2:	f6bf aea1 	bge.w	15ef8 <d_type+0x13c>
   161b6:	69e1      	ldr	r1, [r4, #28]
   161b8:	1c5a      	adds	r2, r3, #1
   161ba:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   161be:	6222      	str	r2, [r4, #32]
   161c0:	4620      	mov	r0, r4
   161c2:	9d01      	ldr	r5, [sp, #4]
   161c4:	f7ff fc34 	bl	15a30 <d_template_args>
   161c8:	462a      	mov	r2, r5
   161ca:	4603      	mov	r3, r0
   161cc:	e7c9      	b.n	16162 <d_type+0x3a6>
   161ce:	3201      	adds	r2, #1
   161d0:	60e2      	str	r2, [r4, #12]
   161d2:	4620      	mov	r0, r4
   161d4:	f7fe fd34 	bl	14c40 <d_source_name>
   161d8:	68e3      	ldr	r3, [r4, #12]
   161da:	9001      	str	r0, [sp, #4]
   161dc:	781b      	ldrb	r3, [r3, #0]
   161de:	2b49      	cmp	r3, #73	; 0x49
   161e0:	4605      	mov	r5, r0
   161e2:	f000 817e 	beq.w	164e2 <d_type+0x726>
   161e6:	4620      	mov	r0, r4
   161e8:	f7ff fde8 	bl	15dbc <d_type>
   161ec:	9b01      	ldr	r3, [sp, #4]
   161ee:	4602      	mov	r2, r0
   161f0:	2121      	movs	r1, #33	; 0x21
   161f2:	4620      	mov	r0, r4
   161f4:	f7fe fb52 	bl	1489c <d_make_comp>
   161f8:	4605      	mov	r5, r0
   161fa:	9001      	str	r0, [sp, #4]
   161fc:	e723      	b.n	16046 <d_type+0x28a>
   161fe:	1c51      	adds	r1, r2, #1
   16200:	60e1      	str	r1, [r4, #12]
   16202:	7853      	ldrb	r3, [r2, #1]
   16204:	2b5f      	cmp	r3, #95	; 0x5f
   16206:	f000 8144 	beq.w	16492 <d_type+0x6d6>
   1620a:	3b30      	subs	r3, #48	; 0x30
   1620c:	2b09      	cmp	r3, #9
   1620e:	f200 814e 	bhi.w	164ae <d_type+0x6f2>
   16212:	460b      	mov	r3, r1
   16214:	3301      	adds	r3, #1
   16216:	60e3      	str	r3, [r4, #12]
   16218:	781a      	ldrb	r2, [r3, #0]
   1621a:	3a30      	subs	r2, #48	; 0x30
   1621c:	2a09      	cmp	r2, #9
   1621e:	d9f9      	bls.n	16214 <d_type+0x458>
   16220:	6962      	ldr	r2, [r4, #20]
   16222:	69a0      	ldr	r0, [r4, #24]
   16224:	4282      	cmp	r2, r0
   16226:	da11      	bge.n	1624c <d_type+0x490>
   16228:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   1622c:	6926      	ldr	r6, [r4, #16]
   1622e:	0080      	lsls	r0, r0, #2
   16230:	3201      	adds	r2, #1
   16232:	1835      	adds	r5, r6, r0
   16234:	6162      	str	r2, [r4, #20]
   16236:	d009      	beq.n	1624c <d_type+0x490>
   16238:	1a5a      	subs	r2, r3, r1
   1623a:	d007      	beq.n	1624c <d_type+0x490>
   1623c:	2700      	movs	r7, #0
   1623e:	5437      	strb	r7, [r6, r0]
   16240:	6069      	str	r1, [r5, #4]
   16242:	60aa      	str	r2, [r5, #8]
   16244:	781a      	ldrb	r2, [r3, #0]
   16246:	2a5f      	cmp	r2, #95	; 0x5f
   16248:	f000 8190 	beq.w	1656c <d_type+0x7b0>
   1624c:	2500      	movs	r5, #0
   1624e:	e74f      	b.n	160f0 <d_type+0x334>
   16250:	7893      	ldrb	r3, [r2, #2]
   16252:	2b5f      	cmp	r3, #95	; 0x5f
   16254:	f000 8180 	beq.w	16558 <d_type+0x79c>
   16258:	f7fe fc9c 	bl	14b94 <d_number_component>
   1625c:	4605      	mov	r5, r0
   1625e:	2d00      	cmp	r5, #0
   16260:	f43f af46 	beq.w	160f0 <d_type+0x334>
   16264:	68e3      	ldr	r3, [r4, #12]
   16266:	781a      	ldrb	r2, [r3, #0]
   16268:	2a5f      	cmp	r2, #95	; 0x5f
   1626a:	d1ef      	bne.n	1624c <d_type+0x490>
   1626c:	3301      	adds	r3, #1
   1626e:	60e3      	str	r3, [r4, #12]
   16270:	4620      	mov	r0, r4
   16272:	f7ff fda3 	bl	15dbc <d_type>
   16276:	462a      	mov	r2, r5
   16278:	4603      	mov	r3, r0
   1627a:	212d      	movs	r1, #45	; 0x2d
   1627c:	4620      	mov	r0, r4
   1627e:	f7fe fb0d 	bl	1489c <d_make_comp>
   16282:	4605      	mov	r5, r0
   16284:	e734      	b.n	160f0 <d_type+0x334>
   16286:	6942      	ldr	r2, [r0, #20]
   16288:	6983      	ldr	r3, [r0, #24]
   1628a:	429a      	cmp	r2, r3
   1628c:	f280 80fd 	bge.w	1648a <d_type+0x6ce>
   16290:	230c      	movs	r3, #12
   16292:	6901      	ldr	r1, [r0, #16]
   16294:	fb03 f302 	mul.w	r3, r3, r2
   16298:	18cd      	adds	r5, r1, r3
   1629a:	f102 0201 	add.w	r2, r2, #1
   1629e:	6142      	str	r2, [r0, #20]
   162a0:	f000 80f3 	beq.w	1648a <d_type+0x6ce>
   162a4:	4a15      	ldr	r2, [pc, #84]	; (162fc <d_type+0x540>)
   162a6:	2027      	movs	r0, #39	; 0x27
   162a8:	54c8      	strb	r0, [r1, r3]
   162aa:	606a      	str	r2, [r5, #4]
   162ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   162ae:	3308      	adds	r3, #8
   162b0:	6323      	str	r3, [r4, #48]	; 0x30
   162b2:	e622      	b.n	15efa <d_type+0x13e>
   162b4:	f7ff fd82 	bl	15dbc <d_type>
   162b8:	2300      	movs	r3, #0
   162ba:	4602      	mov	r2, r0
   162bc:	214a      	movs	r1, #74	; 0x4a
   162be:	4620      	mov	r0, r4
   162c0:	f7fe faec 	bl	1489c <d_make_comp>
   162c4:	4605      	mov	r5, r0
   162c6:	9001      	str	r0, [sp, #4]
   162c8:	e6bd      	b.n	16046 <d_type+0x28a>
   162ca:	6942      	ldr	r2, [r0, #20]
   162cc:	6983      	ldr	r3, [r0, #24]
   162ce:	429a      	cmp	r2, r3
   162d0:	f280 80db 	bge.w	1648a <d_type+0x6ce>
   162d4:	230c      	movs	r3, #12
   162d6:	6901      	ldr	r1, [r0, #16]
   162d8:	fb03 f302 	mul.w	r3, r3, r2
   162dc:	18cd      	adds	r5, r1, r3
   162de:	f102 0201 	add.w	r2, r2, #1
   162e2:	6142      	str	r2, [r0, #20]
   162e4:	f000 80d1 	beq.w	1648a <d_type+0x6ce>
   162e8:	2027      	movs	r0, #39	; 0x27
   162ea:	4a05      	ldr	r2, [pc, #20]	; (16300 <d_type+0x544>)
   162ec:	54c8      	strb	r0, [r1, r3]
   162ee:	606a      	str	r2, [r5, #4]
   162f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   162f2:	3311      	adds	r3, #17
   162f4:	6323      	str	r3, [r4, #48]	; 0x30
   162f6:	e600      	b.n	15efa <d_type+0x13e>
   162f8:	00024128 	.word	0x00024128
   162fc:	00024380 	.word	0x00024380
   16300:	000243a8 	.word	0x000243a8
   16304:	6942      	ldr	r2, [r0, #20]
   16306:	6983      	ldr	r3, [r0, #24]
   16308:	429a      	cmp	r2, r3
   1630a:	f280 80be 	bge.w	1648a <d_type+0x6ce>
   1630e:	230c      	movs	r3, #12
   16310:	6901      	ldr	r1, [r0, #16]
   16312:	fb03 f302 	mul.w	r3, r3, r2
   16316:	18cd      	adds	r5, r1, r3
   16318:	f102 0201 	add.w	r2, r2, #1
   1631c:	6142      	str	r2, [r0, #20]
   1631e:	f000 80b4 	beq.w	1648a <d_type+0x6ce>
   16322:	2027      	movs	r0, #39	; 0x27
   16324:	4a92      	ldr	r2, [pc, #584]	; (16570 <d_type+0x7b4>)
   16326:	e7bf      	b.n	162a8 <d_type+0x4ec>
   16328:	6942      	ldr	r2, [r0, #20]
   1632a:	6983      	ldr	r3, [r0, #24]
   1632c:	429a      	cmp	r2, r3
   1632e:	f280 80ac 	bge.w	1648a <d_type+0x6ce>
   16332:	230c      	movs	r3, #12
   16334:	6901      	ldr	r1, [r0, #16]
   16336:	fb03 f302 	mul.w	r3, r3, r2
   1633a:	18cd      	adds	r5, r1, r3
   1633c:	f102 0201 	add.w	r2, r2, #1
   16340:	6142      	str	r2, [r0, #20]
   16342:	f000 80a2 	beq.w	1648a <d_type+0x6ce>
   16346:	2027      	movs	r0, #39	; 0x27
   16348:	4a8a      	ldr	r2, [pc, #552]	; (16574 <d_type+0x7b8>)
   1634a:	54c8      	strb	r0, [r1, r3]
   1634c:	606a      	str	r2, [r5, #4]
   1634e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16350:	3304      	adds	r3, #4
   16352:	6323      	str	r3, [r4, #48]	; 0x30
   16354:	e5d1      	b.n	15efa <d_type+0x13e>
   16356:	6942      	ldr	r2, [r0, #20]
   16358:	6983      	ldr	r3, [r0, #24]
   1635a:	429a      	cmp	r2, r3
   1635c:	f280 8095 	bge.w	1648a <d_type+0x6ce>
   16360:	230c      	movs	r3, #12
   16362:	6901      	ldr	r1, [r0, #16]
   16364:	fb03 f302 	mul.w	r3, r3, r2
   16368:	18cd      	adds	r5, r1, r3
   1636a:	f102 0201 	add.w	r2, r2, #1
   1636e:	6142      	str	r2, [r0, #20]
   16370:	f000 808b 	beq.w	1648a <d_type+0x6ce>
   16374:	4a80      	ldr	r2, [pc, #512]	; (16578 <d_type+0x7bc>)
   16376:	2027      	movs	r0, #39	; 0x27
   16378:	54c8      	strb	r0, [r1, r3]
   1637a:	606a      	str	r2, [r5, #4]
   1637c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1637e:	3309      	adds	r3, #9
   16380:	6323      	str	r3, [r4, #48]	; 0x30
   16382:	e5ba      	b.n	15efa <d_type+0x13e>
   16384:	6942      	ldr	r2, [r0, #20]
   16386:	6983      	ldr	r3, [r0, #24]
   16388:	429a      	cmp	r2, r3
   1638a:	da7e      	bge.n	1648a <d_type+0x6ce>
   1638c:	230c      	movs	r3, #12
   1638e:	6901      	ldr	r1, [r0, #16]
   16390:	fb03 f302 	mul.w	r3, r3, r2
   16394:	18cd      	adds	r5, r1, r3
   16396:	f102 0201 	add.w	r2, r2, #1
   1639a:	6142      	str	r2, [r0, #20]
   1639c:	d075      	beq.n	1648a <d_type+0x6ce>
   1639e:	2027      	movs	r0, #39	; 0x27
   163a0:	4a76      	ldr	r2, [pc, #472]	; (1657c <d_type+0x7c0>)
   163a2:	54c8      	strb	r0, [r1, r3]
   163a4:	606a      	str	r2, [r5, #4]
   163a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   163a8:	330a      	adds	r3, #10
   163aa:	6323      	str	r3, [r4, #48]	; 0x30
   163ac:	e5a5      	b.n	15efa <d_type+0x13e>
   163ae:	6942      	ldr	r2, [r0, #20]
   163b0:	6983      	ldr	r3, [r0, #24]
   163b2:	429a      	cmp	r2, r3
   163b4:	da69      	bge.n	1648a <d_type+0x6ce>
   163b6:	230c      	movs	r3, #12
   163b8:	6901      	ldr	r1, [r0, #16]
   163ba:	fb03 f302 	mul.w	r3, r3, r2
   163be:	18cd      	adds	r5, r1, r3
   163c0:	f102 0201 	add.w	r2, r2, #1
   163c4:	6142      	str	r2, [r0, #20]
   163c6:	d060      	beq.n	1648a <d_type+0x6ce>
   163c8:	2027      	movs	r0, #39	; 0x27
   163ca:	4a6d      	ldr	r2, [pc, #436]	; (16580 <d_type+0x7c4>)
   163cc:	e7d4      	b.n	16378 <d_type+0x5bc>
   163ce:	6942      	ldr	r2, [r0, #20]
   163d0:	6983      	ldr	r3, [r0, #24]
   163d2:	429a      	cmp	r2, r3
   163d4:	f6bf ad90 	bge.w	15ef8 <d_type+0x13c>
   163d8:	230c      	movs	r3, #12
   163da:	6901      	ldr	r1, [r0, #16]
   163dc:	fb03 f302 	mul.w	r3, r3, r2
   163e0:	18cd      	adds	r5, r1, r3
   163e2:	f102 0201 	add.w	r2, r2, #1
   163e6:	6142      	str	r2, [r0, #20]
   163e8:	f43f ad87 	beq.w	15efa <d_type+0x13e>
   163ec:	2000      	movs	r0, #0
   163ee:	54c8      	strb	r0, [r1, r3]
   163f0:	4a64      	ldr	r2, [pc, #400]	; (16584 <d_type+0x7c8>)
   163f2:	606a      	str	r2, [r5, #4]
   163f4:	230e      	movs	r3, #14
   163f6:	60ab      	str	r3, [r5, #8]
   163f8:	e57f      	b.n	15efa <d_type+0x13e>
   163fa:	6942      	ldr	r2, [r0, #20]
   163fc:	6983      	ldr	r3, [r0, #24]
   163fe:	429a      	cmp	r2, r3
   16400:	f6bf ad7a 	bge.w	15ef8 <d_type+0x13c>
   16404:	230c      	movs	r3, #12
   16406:	6901      	ldr	r1, [r0, #16]
   16408:	fb03 f302 	mul.w	r3, r3, r2
   1640c:	18cd      	adds	r5, r1, r3
   1640e:	f102 0201 	add.w	r2, r2, #1
   16412:	6142      	str	r2, [r0, #20]
   16414:	f43f ad71 	beq.w	15efa <d_type+0x13e>
   16418:	2000      	movs	r0, #0
   1641a:	54c8      	strb	r0, [r1, r3]
   1641c:	4a5a      	ldr	r2, [pc, #360]	; (16588 <d_type+0x7cc>)
   1641e:	606a      	str	r2, [r5, #4]
   16420:	2304      	movs	r3, #4
   16422:	60ab      	str	r3, [r5, #8]
   16424:	e569      	b.n	15efa <d_type+0x13e>
   16426:	6943      	ldr	r3, [r0, #20]
   16428:	6981      	ldr	r1, [r0, #24]
   1642a:	428b      	cmp	r3, r1
   1642c:	da7a      	bge.n	16524 <d_type+0x768>
   1642e:	6900      	ldr	r0, [r0, #16]
   16430:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16434:	0089      	lsls	r1, r1, #2
   16436:	3301      	adds	r3, #1
   16438:	1845      	adds	r5, r0, r1
   1643a:	262c      	movs	r6, #44	; 0x2c
   1643c:	6163      	str	r3, [r4, #20]
   1643e:	9501      	str	r5, [sp, #4]
   16440:	5446      	strb	r6, [r0, r1]
   16442:	7893      	ldrb	r3, [r2, #2]
   16444:	3b30      	subs	r3, #48	; 0x30
   16446:	b2db      	uxtb	r3, r3
   16448:	2b09      	cmp	r3, #9
   1644a:	bf94      	ite	ls
   1644c:	2301      	movls	r3, #1
   1644e:	2300      	movhi	r3, #0
   16450:	812b      	strh	r3, [r5, #8]
   16452:	d97b      	bls.n	1654c <d_type+0x790>
   16454:	4620      	mov	r0, r4
   16456:	f7ff fcb1 	bl	15dbc <d_type>
   1645a:	9b01      	ldr	r3, [sp, #4]
   1645c:	6068      	str	r0, [r5, #4]
   1645e:	685b      	ldr	r3, [r3, #4]
   16460:	2b00      	cmp	r3, #0
   16462:	f43f ad49 	beq.w	15ef8 <d_type+0x13c>
   16466:	f104 000c 	add.w	r0, r4, #12
   1646a:	f7fe fb69 	bl	14b40 <d_number.isra.0>
   1646e:	68e2      	ldr	r2, [r4, #12]
   16470:	7813      	ldrb	r3, [r2, #0]
   16472:	b113      	cbz	r3, 1647a <d_type+0x6be>
   16474:	1c53      	adds	r3, r2, #1
   16476:	60e3      	str	r3, [r4, #12]
   16478:	7813      	ldrb	r3, [r2, #0]
   1647a:	9d01      	ldr	r5, [sp, #4]
   1647c:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   16480:	fab3 f383 	clz	r3, r3
   16484:	095b      	lsrs	r3, r3, #5
   16486:	816b      	strh	r3, [r5, #10]
   16488:	e537      	b.n	15efa <d_type+0x13e>
   1648a:	2300      	movs	r3, #0
   1648c:	9301      	str	r3, [sp, #4]
   1648e:	685b      	ldr	r3, [r3, #4]
   16490:	deff      	udf	#255	; 0xff
   16492:	2500      	movs	r5, #0
   16494:	3101      	adds	r1, #1
   16496:	60e1      	str	r1, [r4, #12]
   16498:	4620      	mov	r0, r4
   1649a:	f7ff fc8f 	bl	15dbc <d_type>
   1649e:	462a      	mov	r2, r5
   164a0:	4603      	mov	r3, r0
   164a2:	212a      	movs	r1, #42	; 0x2a
   164a4:	4620      	mov	r0, r4
   164a6:	f7fe f9f9 	bl	1489c <d_make_comp>
   164aa:	4605      	mov	r5, r0
   164ac:	e620      	b.n	160f0 <d_type+0x334>
   164ae:	2301      	movs	r3, #1
   164b0:	6b65      	ldr	r5, [r4, #52]	; 0x34
   164b2:	6363      	str	r3, [r4, #52]	; 0x34
   164b4:	4620      	mov	r0, r4
   164b6:	f7ff f85d 	bl	15574 <d_expression_1>
   164ba:	6365      	str	r5, [r4, #52]	; 0x34
   164bc:	4605      	mov	r5, r0
   164be:	2800      	cmp	r0, #0
   164c0:	f43f aec4 	beq.w	1624c <d_type+0x490>
   164c4:	68e3      	ldr	r3, [r4, #12]
   164c6:	e6bd      	b.n	16244 <d_type+0x488>
   164c8:	4620      	mov	r0, r4
   164ca:	f7ff fabb 	bl	15a44 <d_name>
   164ce:	4605      	mov	r5, r0
   164d0:	9001      	str	r0, [sp, #4]
   164d2:	2800      	cmp	r0, #0
   164d4:	f43f ad10 	beq.w	15ef8 <d_type+0x13c>
   164d8:	7803      	ldrb	r3, [r0, #0]
   164da:	2b18      	cmp	r3, #24
   164dc:	f47f adb6 	bne.w	1604c <d_type+0x290>
   164e0:	e50b      	b.n	15efa <d_type+0x13e>
   164e2:	4620      	mov	r0, r4
   164e4:	f7ff faa4 	bl	15a30 <d_template_args>
   164e8:	462a      	mov	r2, r5
   164ea:	4603      	mov	r3, r0
   164ec:	2104      	movs	r1, #4
   164ee:	4620      	mov	r0, r4
   164f0:	f7fe f9d4 	bl	1489c <d_make_comp>
   164f4:	9001      	str	r0, [sp, #4]
   164f6:	e676      	b.n	161e6 <d_type+0x42a>
   164f8:	4620      	mov	r0, r4
   164fa:	f8d4 9014 	ldr.w	r9, [r4, #20]
   164fe:	f8d4 8020 	ldr.w	r8, [r4, #32]
   16502:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   16504:	6b25      	ldr	r5, [r4, #48]	; 0x30
   16506:	f7ff fa93 	bl	15a30 <d_template_args>
   1650a:	68e2      	ldr	r2, [r4, #12]
   1650c:	7812      	ldrb	r2, [r2, #0]
   1650e:	2a49      	cmp	r2, #73	; 0x49
   16510:	d00b      	beq.n	1652a <d_type+0x76e>
   16512:	6325      	str	r5, [r4, #48]	; 0x30
   16514:	60e6      	str	r6, [r4, #12]
   16516:	f8c4 9014 	str.w	r9, [r4, #20]
   1651a:	f8c4 8020 	str.w	r8, [r4, #32]
   1651e:	62a7      	str	r7, [r4, #40]	; 0x28
   16520:	9d01      	ldr	r5, [sp, #4]
   16522:	e590      	b.n	16046 <d_type+0x28a>
   16524:	2300      	movs	r3, #0
   16526:	701b      	strb	r3, [r3, #0]
   16528:	deff      	udf	#255	; 0xff
   1652a:	9b01      	ldr	r3, [sp, #4]
   1652c:	2b00      	cmp	r3, #0
   1652e:	f43f ace3 	beq.w	15ef8 <d_type+0x13c>
   16532:	6a22      	ldr	r2, [r4, #32]
   16534:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16536:	428a      	cmp	r2, r1
   16538:	f6bf acde 	bge.w	15ef8 <d_type+0x13c>
   1653c:	69e5      	ldr	r5, [r4, #28]
   1653e:	1c51      	adds	r1, r2, #1
   16540:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   16544:	9a01      	ldr	r2, [sp, #4]
   16546:	6221      	str	r1, [r4, #32]
   16548:	4603      	mov	r3, r0
   1654a:	e60a      	b.n	16162 <d_type+0x3a6>
   1654c:	f104 000c 	add.w	r0, r4, #12
   16550:	f7fe faf6 	bl	14b40 <d_number.isra.0>
   16554:	9d01      	ldr	r5, [sp, #4]
   16556:	e77d      	b.n	16454 <d_type+0x698>
   16558:	3203      	adds	r2, #3
   1655a:	2301      	movs	r3, #1
   1655c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   1655e:	60c2      	str	r2, [r0, #12]
   16560:	6343      	str	r3, [r0, #52]	; 0x34
   16562:	f7ff f807 	bl	15574 <d_expression_1>
   16566:	6366      	str	r6, [r4, #52]	; 0x34
   16568:	4605      	mov	r5, r0
   1656a:	e678      	b.n	1625e <d_type+0x4a2>
   1656c:	4619      	mov	r1, r3
   1656e:	e791      	b.n	16494 <d_type+0x6d8>
   16570:	00024394 	.word	0x00024394
   16574:	0002436c 	.word	0x0002436c
   16578:	00024330 	.word	0x00024330
   1657c:	00024358 	.word	0x00024358
   16580:	00024344 	.word	0x00024344
   16584:	00024854 	.word	0x00024854
   16588:	0002484c 	.word	0x0002484c

0001658c <d_operator_name>:
   1658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1658e:	68c3      	ldr	r3, [r0, #12]
   16590:	781e      	ldrb	r6, [r3, #0]
   16592:	4684      	mov	ip, r0
   16594:	b326      	cbz	r6, 165e0 <d_operator_name+0x54>
   16596:	1c5a      	adds	r2, r3, #1
   16598:	60c2      	str	r2, [r0, #12]
   1659a:	785a      	ldrb	r2, [r3, #1]
   1659c:	781e      	ldrb	r6, [r3, #0]
   1659e:	2a00      	cmp	r2, #0
   165a0:	d058      	beq.n	16654 <d_operator_name+0xc8>
   165a2:	1c9a      	adds	r2, r3, #2
   165a4:	60c2      	str	r2, [r0, #12]
   165a6:	2e76      	cmp	r6, #118	; 0x76
   165a8:	4604      	mov	r4, r0
   165aa:	f893 e001 	ldrb.w	lr, [r3, #1]
   165ae:	d043      	beq.n	16638 <d_operator_name+0xac>
   165b0:	2e63      	cmp	r6, #99	; 0x63
   165b2:	d116      	bne.n	165e2 <d_operator_name+0x56>
   165b4:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   165b8:	d113      	bne.n	165e2 <d_operator_name+0x56>
   165ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
   165bc:	6b85      	ldr	r5, [r0, #56]	; 0x38
   165be:	fab3 f383 	clz	r3, r3
   165c2:	095b      	lsrs	r3, r3, #5
   165c4:	6383      	str	r3, [r0, #56]	; 0x38
   165c6:	f7ff fbf9 	bl	15dbc <d_type>
   165ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   165cc:	4602      	mov	r2, r0
   165ce:	2b00      	cmp	r3, #0
   165d0:	d052      	beq.n	16678 <d_operator_name+0xec>
   165d2:	2300      	movs	r3, #0
   165d4:	2134      	movs	r1, #52	; 0x34
   165d6:	4620      	mov	r0, r4
   165d8:	f7fe f960 	bl	1489c <d_make_comp>
   165dc:	63a5      	str	r5, [r4, #56]	; 0x38
   165de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   165e0:	46b6      	mov	lr, r6
   165e2:	4c28      	ldr	r4, [pc, #160]	; (16684 <d_operator_name+0xf8>)
   165e4:	2043      	movs	r0, #67	; 0x43
   165e6:	2200      	movs	r2, #0
   165e8:	e004      	b.n	165f4 <d_operator_name+0x68>
   165ea:	bf94      	ite	ls
   165ec:	1c5a      	addls	r2, r3, #1
   165ee:	4618      	movhi	r0, r3
   165f0:	4282      	cmp	r2, r0
   165f2:	d02d      	beq.n	16650 <d_operator_name+0xc4>
   165f4:	1a83      	subs	r3, r0, r2
   165f6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   165fa:	eb02 0363 	add.w	r3, r2, r3, asr #1
   165fe:	0119      	lsls	r1, r3, #4
   16600:	1867      	adds	r7, r4, r1
   16602:	5861      	ldr	r1, [r4, r1]
   16604:	780d      	ldrb	r5, [r1, #0]
   16606:	42b5      	cmp	r5, r6
   16608:	d1ef      	bne.n	165ea <d_operator_name+0x5e>
   1660a:	7849      	ldrb	r1, [r1, #1]
   1660c:	4571      	cmp	r1, lr
   1660e:	d1ec      	bne.n	165ea <d_operator_name+0x5e>
   16610:	f8dc 3014 	ldr.w	r3, [ip, #20]
   16614:	f8dc 2018 	ldr.w	r2, [ip, #24]
   16618:	4293      	cmp	r3, r2
   1661a:	da19      	bge.n	16650 <d_operator_name+0xc4>
   1661c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16620:	f8dc 1010 	ldr.w	r1, [ip, #16]
   16624:	0092      	lsls	r2, r2, #2
   16626:	3301      	adds	r3, #1
   16628:	1888      	adds	r0, r1, r2
   1662a:	f8cc 3014 	str.w	r3, [ip, #20]
   1662e:	d013      	beq.n	16658 <d_operator_name+0xcc>
   16630:	2331      	movs	r3, #49	; 0x31
   16632:	548b      	strb	r3, [r1, r2]
   16634:	6047      	str	r7, [r0, #4]
   16636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16638:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   1663c:	b2eb      	uxtb	r3, r5
   1663e:	2b09      	cmp	r3, #9
   16640:	d8cf      	bhi.n	165e2 <d_operator_name+0x56>
   16642:	f7fe fafd 	bl	14c40 <d_source_name>
   16646:	6963      	ldr	r3, [r4, #20]
   16648:	69a2      	ldr	r2, [r4, #24]
   1664a:	4293      	cmp	r3, r2
   1664c:	4601      	mov	r1, r0
   1664e:	db04      	blt.n	1665a <d_operator_name+0xce>
   16650:	2000      	movs	r0, #0
   16652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16654:	4696      	mov	lr, r2
   16656:	e7c4      	b.n	165e2 <d_operator_name+0x56>
   16658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1665a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1665e:	6926      	ldr	r6, [r4, #16]
   16660:	0092      	lsls	r2, r2, #2
   16662:	3301      	adds	r3, #1
   16664:	18b0      	adds	r0, r6, r2
   16666:	6163      	str	r3, [r4, #20]
   16668:	d0f2      	beq.n	16650 <d_operator_name+0xc4>
   1666a:	2900      	cmp	r1, #0
   1666c:	d0f0      	beq.n	16650 <d_operator_name+0xc4>
   1666e:	2332      	movs	r3, #50	; 0x32
   16670:	54b3      	strb	r3, [r6, r2]
   16672:	6045      	str	r5, [r0, #4]
   16674:	6081      	str	r1, [r0, #8]
   16676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16678:	2133      	movs	r1, #51	; 0x33
   1667a:	4620      	mov	r0, r4
   1667c:	f7fe f90e 	bl	1489c <d_make_comp>
   16680:	e7ac      	b.n	165dc <d_operator_name+0x50>
   16682:	bf00      	nop
   16684:	000243bc 	.word	0x000243bc

00016688 <d_parmlist>:
   16688:	b530      	push	{r4, r5, lr}
   1668a:	68c2      	ldr	r2, [r0, #12]
   1668c:	b083      	sub	sp, #12
   1668e:	2300      	movs	r3, #0
   16690:	9301      	str	r3, [sp, #4]
   16692:	7813      	ldrb	r3, [r2, #0]
   16694:	b343      	cbz	r3, 166e8 <d_parmlist+0x60>
   16696:	2b45      	cmp	r3, #69	; 0x45
   16698:	d026      	beq.n	166e8 <d_parmlist+0x60>
   1669a:	2b2e      	cmp	r3, #46	; 0x2e
   1669c:	d024      	beq.n	166e8 <d_parmlist+0x60>
   1669e:	4604      	mov	r4, r0
   166a0:	ad01      	add	r5, sp, #4
   166a2:	e015      	b.n	166d0 <d_parmlist+0x48>
   166a4:	2b4f      	cmp	r3, #79	; 0x4f
   166a6:	d016      	beq.n	166d6 <d_parmlist+0x4e>
   166a8:	f7ff fb88 	bl	15dbc <d_type>
   166ac:	2300      	movs	r3, #0
   166ae:	4602      	mov	r2, r0
   166b0:	212e      	movs	r1, #46	; 0x2e
   166b2:	b1c8      	cbz	r0, 166e8 <d_parmlist+0x60>
   166b4:	4620      	mov	r0, r4
   166b6:	f7fe f8f1 	bl	1489c <d_make_comp>
   166ba:	6028      	str	r0, [r5, #0]
   166bc:	b1a0      	cbz	r0, 166e8 <d_parmlist+0x60>
   166be:	68e2      	ldr	r2, [r4, #12]
   166c0:	7813      	ldrb	r3, [r2, #0]
   166c2:	f100 0508 	add.w	r5, r0, #8
   166c6:	b14b      	cbz	r3, 166dc <d_parmlist+0x54>
   166c8:	2b45      	cmp	r3, #69	; 0x45
   166ca:	d007      	beq.n	166dc <d_parmlist+0x54>
   166cc:	2b2e      	cmp	r3, #46	; 0x2e
   166ce:	d005      	beq.n	166dc <d_parmlist+0x54>
   166d0:	2b52      	cmp	r3, #82	; 0x52
   166d2:	4620      	mov	r0, r4
   166d4:	d1e6      	bne.n	166a4 <d_parmlist+0x1c>
   166d6:	7853      	ldrb	r3, [r2, #1]
   166d8:	2b45      	cmp	r3, #69	; 0x45
   166da:	d1e5      	bne.n	166a8 <d_parmlist+0x20>
   166dc:	9801      	ldr	r0, [sp, #4]
   166de:	b118      	cbz	r0, 166e8 <d_parmlist+0x60>
   166e0:	6883      	ldr	r3, [r0, #8]
   166e2:	b123      	cbz	r3, 166ee <d_parmlist+0x66>
   166e4:	b003      	add	sp, #12
   166e6:	bd30      	pop	{r4, r5, pc}
   166e8:	2000      	movs	r0, #0
   166ea:	b003      	add	sp, #12
   166ec:	bd30      	pop	{r4, r5, pc}
   166ee:	6842      	ldr	r2, [r0, #4]
   166f0:	7811      	ldrb	r1, [r2, #0]
   166f2:	2927      	cmp	r1, #39	; 0x27
   166f4:	d1f6      	bne.n	166e4 <d_parmlist+0x5c>
   166f6:	6852      	ldr	r2, [r2, #4]
   166f8:	7c11      	ldrb	r1, [r2, #16]
   166fa:	2909      	cmp	r1, #9
   166fc:	d1f2      	bne.n	166e4 <d_parmlist+0x5c>
   166fe:	6851      	ldr	r1, [r2, #4]
   16700:	6b22      	ldr	r2, [r4, #48]	; 0x30
   16702:	1a52      	subs	r2, r2, r1
   16704:	6322      	str	r2, [r4, #48]	; 0x30
   16706:	6043      	str	r3, [r0, #4]
   16708:	e7ec      	b.n	166e4 <d_parmlist+0x5c>
   1670a:	bf00      	nop

0001670c <d_unqualified_name>:
   1670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1670e:	68c1      	ldr	r1, [r0, #12]
   16710:	780b      	ldrb	r3, [r1, #0]
   16712:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16716:	2a09      	cmp	r2, #9
   16718:	4604      	mov	r4, r0
   1671a:	d920      	bls.n	1675e <d_unqualified_name+0x52>
   1671c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   16720:	2a19      	cmp	r2, #25
   16722:	d925      	bls.n	16770 <d_unqualified_name+0x64>
   16724:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   16728:	2a01      	cmp	r2, #1
   1672a:	d92c      	bls.n	16786 <d_unqualified_name+0x7a>
   1672c:	2b4c      	cmp	r3, #76	; 0x4c
   1672e:	f000 8088 	beq.w	16842 <d_unqualified_name+0x136>
   16732:	2b55      	cmp	r3, #85	; 0x55
   16734:	d133      	bne.n	1679e <d_unqualified_name+0x92>
   16736:	784b      	ldrb	r3, [r1, #1]
   16738:	2b6c      	cmp	r3, #108	; 0x6c
   1673a:	d033      	beq.n	167a4 <d_unqualified_name+0x98>
   1673c:	2b74      	cmp	r3, #116	; 0x74
   1673e:	d12e      	bne.n	1679e <d_unqualified_name+0x92>
   16740:	1c4b      	adds	r3, r1, #1
   16742:	60c3      	str	r3, [r0, #12]
   16744:	784b      	ldrb	r3, [r1, #1]
   16746:	2b74      	cmp	r3, #116	; 0x74
   16748:	d05a      	beq.n	16800 <d_unqualified_name+0xf4>
   1674a:	2b42      	cmp	r3, #66	; 0x42
   1674c:	f04f 0500 	mov.w	r5, #0
   16750:	d10c      	bne.n	1676c <d_unqualified_name+0x60>
   16752:	4629      	mov	r1, r5
   16754:	4620      	mov	r0, r4
   16756:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1675a:	f7fe bacd 	b.w	14cf8 <d_abi_tags>
   1675e:	f7fe fa6f 	bl	14c40 <d_source_name>
   16762:	68e3      	ldr	r3, [r4, #12]
   16764:	781b      	ldrb	r3, [r3, #0]
   16766:	4605      	mov	r5, r0
   16768:	2b42      	cmp	r3, #66	; 0x42
   1676a:	d0f2      	beq.n	16752 <d_unqualified_name+0x46>
   1676c:	4628      	mov	r0, r5
   1676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16770:	f7ff ff0c 	bl	1658c <d_operator_name>
   16774:	4605      	mov	r5, r0
   16776:	b118      	cbz	r0, 16780 <d_unqualified_name+0x74>
   16778:	7803      	ldrb	r3, [r0, #0]
   1677a:	2b31      	cmp	r3, #49	; 0x31
   1677c:	f000 80b2 	beq.w	168e4 <d_unqualified_name+0x1d8>
   16780:	68e3      	ldr	r3, [r4, #12]
   16782:	781b      	ldrb	r3, [r3, #0]
   16784:	e7f0      	b.n	16768 <d_unqualified_name+0x5c>
   16786:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16788:	b125      	cbz	r5, 16794 <d_unqualified_name+0x88>
   1678a:	782a      	ldrb	r2, [r5, #0]
   1678c:	2a00      	cmp	r2, #0
   1678e:	d06c      	beq.n	1686a <d_unqualified_name+0x15e>
   16790:	2a18      	cmp	r2, #24
   16792:	d06a      	beq.n	1686a <d_unqualified_name+0x15e>
   16794:	2b43      	cmp	r3, #67	; 0x43
   16796:	f000 80bf 	beq.w	16918 <d_unqualified_name+0x20c>
   1679a:	2b44      	cmp	r3, #68	; 0x44
   1679c:	d06f      	beq.n	1687e <d_unqualified_name+0x172>
   1679e:	2500      	movs	r5, #0
   167a0:	4628      	mov	r0, r5
   167a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167a4:	1c4b      	adds	r3, r1, #1
   167a6:	60c3      	str	r3, [r0, #12]
   167a8:	784b      	ldrb	r3, [r1, #1]
   167aa:	2b6c      	cmp	r3, #108	; 0x6c
   167ac:	d1cd      	bne.n	1674a <d_unqualified_name+0x3e>
   167ae:	3102      	adds	r1, #2
   167b0:	60c1      	str	r1, [r0, #12]
   167b2:	f7ff ff69 	bl	16688 <d_parmlist>
   167b6:	4606      	mov	r6, r0
   167b8:	b1f0      	cbz	r0, 167f8 <d_unqualified_name+0xec>
   167ba:	68e2      	ldr	r2, [r4, #12]
   167bc:	7813      	ldrb	r3, [r2, #0]
   167be:	2b45      	cmp	r3, #69	; 0x45
   167c0:	d1c3      	bne.n	1674a <d_unqualified_name+0x3e>
   167c2:	3201      	adds	r2, #1
   167c4:	60e2      	str	r2, [r4, #12]
   167c6:	4620      	mov	r0, r4
   167c8:	f7fe f9fc 	bl	14bc4 <d_compact_number>
   167cc:	2800      	cmp	r0, #0
   167ce:	db13      	blt.n	167f8 <d_unqualified_name+0xec>
   167d0:	6963      	ldr	r3, [r4, #20]
   167d2:	69a2      	ldr	r2, [r4, #24]
   167d4:	4293      	cmp	r3, r2
   167d6:	da0f      	bge.n	167f8 <d_unqualified_name+0xec>
   167d8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   167dc:	6921      	ldr	r1, [r4, #16]
   167de:	0092      	lsls	r2, r2, #2
   167e0:	3301      	adds	r3, #1
   167e2:	188d      	adds	r5, r1, r2
   167e4:	6163      	str	r3, [r4, #20]
   167e6:	d0cb      	beq.n	16780 <d_unqualified_name+0x74>
   167e8:	2345      	movs	r3, #69	; 0x45
   167ea:	548b      	strb	r3, [r1, r2]
   167ec:	606e      	str	r6, [r5, #4]
   167ee:	60a8      	str	r0, [r5, #8]
   167f0:	6a23      	ldr	r3, [r4, #32]
   167f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   167f4:	4293      	cmp	r3, r2
   167f6:	db1c      	blt.n	16832 <d_unqualified_name+0x126>
   167f8:	68e3      	ldr	r3, [r4, #12]
   167fa:	2500      	movs	r5, #0
   167fc:	781b      	ldrb	r3, [r3, #0]
   167fe:	e7b3      	b.n	16768 <d_unqualified_name+0x5c>
   16800:	3102      	adds	r1, #2
   16802:	60c1      	str	r1, [r0, #12]
   16804:	f7fe f9de 	bl	14bc4 <d_compact_number>
   16808:	2800      	cmp	r0, #0
   1680a:	dbf5      	blt.n	167f8 <d_unqualified_name+0xec>
   1680c:	6963      	ldr	r3, [r4, #20]
   1680e:	69a2      	ldr	r2, [r4, #24]
   16810:	4293      	cmp	r3, r2
   16812:	daf1      	bge.n	167f8 <d_unqualified_name+0xec>
   16814:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16818:	6921      	ldr	r1, [r4, #16]
   1681a:	0092      	lsls	r2, r2, #2
   1681c:	3301      	adds	r3, #1
   1681e:	188d      	adds	r5, r1, r2
   16820:	6163      	str	r3, [r4, #20]
   16822:	d0ad      	beq.n	16780 <d_unqualified_name+0x74>
   16824:	2347      	movs	r3, #71	; 0x47
   16826:	548b      	strb	r3, [r1, r2]
   16828:	6068      	str	r0, [r5, #4]
   1682a:	6a23      	ldr	r3, [r4, #32]
   1682c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1682e:	4293      	cmp	r3, r2
   16830:	dae2      	bge.n	167f8 <d_unqualified_name+0xec>
   16832:	69e1      	ldr	r1, [r4, #28]
   16834:	68e2      	ldr	r2, [r4, #12]
   16836:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1683a:	3301      	adds	r3, #1
   1683c:	6223      	str	r3, [r4, #32]
   1683e:	7813      	ldrb	r3, [r2, #0]
   16840:	e792      	b.n	16768 <d_unqualified_name+0x5c>
   16842:	3101      	adds	r1, #1
   16844:	60c1      	str	r1, [r0, #12]
   16846:	f7fe f9fb 	bl	14c40 <d_source_name>
   1684a:	4605      	mov	r5, r0
   1684c:	2800      	cmp	r0, #0
   1684e:	d0a6      	beq.n	1679e <d_unqualified_name+0x92>
   16850:	68e2      	ldr	r2, [r4, #12]
   16852:	7813      	ldrb	r3, [r2, #0]
   16854:	2b5f      	cmp	r3, #95	; 0x5f
   16856:	d187      	bne.n	16768 <d_unqualified_name+0x5c>
   16858:	4620      	mov	r0, r4
   1685a:	3201      	adds	r2, #1
   1685c:	f840 2f0c 	str.w	r2, [r0, #12]!
   16860:	f7fe f96e 	bl	14b40 <d_number.isra.0>
   16864:	2800      	cmp	r0, #0
   16866:	da8b      	bge.n	16780 <d_unqualified_name+0x74>
   16868:	e799      	b.n	1679e <d_unqualified_name+0x92>
   1686a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1686c:	68aa      	ldr	r2, [r5, #8]
   1686e:	4413      	add	r3, r2
   16870:	6323      	str	r3, [r4, #48]	; 0x30
   16872:	780b      	ldrb	r3, [r1, #0]
   16874:	2b43      	cmp	r3, #67	; 0x43
   16876:	d04f      	beq.n	16918 <d_unqualified_name+0x20c>
   16878:	2b44      	cmp	r3, #68	; 0x44
   1687a:	f47f af66 	bne.w	1674a <d_unqualified_name+0x3e>
   1687e:	784b      	ldrb	r3, [r1, #1]
   16880:	3b30      	subs	r3, #48	; 0x30
   16882:	2b05      	cmp	r3, #5
   16884:	d88b      	bhi.n	1679e <d_unqualified_name+0x92>
   16886:	a201      	add	r2, pc, #4	; (adr r2, 1688c <d_unqualified_name+0x180>)
   16888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1688c:	000168e1 	.word	0x000168e1
   16890:	000168a5 	.word	0x000168a5
   16894:	000168dd 	.word	0x000168dd
   16898:	0001679f 	.word	0x0001679f
   1689c:	000168d9 	.word	0x000168d9
   168a0:	000168d5 	.word	0x000168d5
   168a4:	2702      	movs	r7, #2
   168a6:	6963      	ldr	r3, [r4, #20]
   168a8:	69a2      	ldr	r2, [r4, #24]
   168aa:	1c88      	adds	r0, r1, #2
   168ac:	4293      	cmp	r3, r2
   168ae:	60e0      	str	r0, [r4, #12]
   168b0:	da56      	bge.n	16960 <d_unqualified_name+0x254>
   168b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   168b6:	6920      	ldr	r0, [r4, #16]
   168b8:	0092      	lsls	r2, r2, #2
   168ba:	3301      	adds	r3, #1
   168bc:	1886      	adds	r6, r0, r2
   168be:	6163      	str	r3, [r4, #20]
   168c0:	d005      	beq.n	168ce <d_unqualified_name+0x1c2>
   168c2:	2d00      	cmp	r5, #0
   168c4:	d04f      	beq.n	16966 <d_unqualified_name+0x25a>
   168c6:	2308      	movs	r3, #8
   168c8:	5483      	strb	r3, [r0, r2]
   168ca:	7137      	strb	r7, [r6, #4]
   168cc:	60b5      	str	r5, [r6, #8]
   168ce:	788b      	ldrb	r3, [r1, #2]
   168d0:	4635      	mov	r5, r6
   168d2:	e749      	b.n	16768 <d_unqualified_name+0x5c>
   168d4:	2705      	movs	r7, #5
   168d6:	e7e6      	b.n	168a6 <d_unqualified_name+0x19a>
   168d8:	2704      	movs	r7, #4
   168da:	e7e4      	b.n	168a6 <d_unqualified_name+0x19a>
   168dc:	2703      	movs	r7, #3
   168de:	e7e2      	b.n	168a6 <d_unqualified_name+0x19a>
   168e0:	2701      	movs	r7, #1
   168e2:	e7e0      	b.n	168a6 <d_unqualified_name+0x19a>
   168e4:	6842      	ldr	r2, [r0, #4]
   168e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   168e8:	6896      	ldr	r6, [r2, #8]
   168ea:	6810      	ldr	r0, [r2, #0]
   168ec:	491f      	ldr	r1, [pc, #124]	; (1696c <d_unqualified_name+0x260>)
   168ee:	3307      	adds	r3, #7
   168f0:	4433      	add	r3, r6
   168f2:	6323      	str	r3, [r4, #48]	; 0x30
   168f4:	f008 fb18 	bl	1ef28 <strcmp>
   168f8:	2800      	cmp	r0, #0
   168fa:	f47f af41 	bne.w	16780 <d_unqualified_name+0x74>
   168fe:	4620      	mov	r0, r4
   16900:	f7fe f99e 	bl	14c40 <d_source_name>
   16904:	462a      	mov	r2, r5
   16906:	4603      	mov	r3, r0
   16908:	2136      	movs	r1, #54	; 0x36
   1690a:	4620      	mov	r0, r4
   1690c:	f7fd ffc6 	bl	1489c <d_make_comp>
   16910:	68e3      	ldr	r3, [r4, #12]
   16912:	4605      	mov	r5, r0
   16914:	781b      	ldrb	r3, [r3, #0]
   16916:	e727      	b.n	16768 <d_unqualified_name+0x5c>
   16918:	784b      	ldrb	r3, [r1, #1]
   1691a:	3b31      	subs	r3, #49	; 0x31
   1691c:	2b04      	cmp	r3, #4
   1691e:	f63f af3e 	bhi.w	1679e <d_unqualified_name+0x92>
   16922:	e8df f003 	tbb	[pc, r3]
   16926:	0315      	.short	0x0315
   16928:	191b      	.short	0x191b
   1692a:	17          	.byte	0x17
   1692b:	00          	.byte	0x00
   1692c:	2702      	movs	r7, #2
   1692e:	6963      	ldr	r3, [r4, #20]
   16930:	69a2      	ldr	r2, [r4, #24]
   16932:	1c88      	adds	r0, r1, #2
   16934:	4293      	cmp	r3, r2
   16936:	60e0      	str	r0, [r4, #12]
   16938:	da12      	bge.n	16960 <d_unqualified_name+0x254>
   1693a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1693e:	6920      	ldr	r0, [r4, #16]
   16940:	0092      	lsls	r2, r2, #2
   16942:	3301      	adds	r3, #1
   16944:	1886      	adds	r6, r0, r2
   16946:	6163      	str	r3, [r4, #20]
   16948:	d0c1      	beq.n	168ce <d_unqualified_name+0x1c2>
   1694a:	b165      	cbz	r5, 16966 <d_unqualified_name+0x25a>
   1694c:	2307      	movs	r3, #7
   1694e:	e7bb      	b.n	168c8 <d_unqualified_name+0x1bc>
   16950:	2701      	movs	r7, #1
   16952:	e7ec      	b.n	1692e <d_unqualified_name+0x222>
   16954:	2705      	movs	r7, #5
   16956:	e7ea      	b.n	1692e <d_unqualified_name+0x222>
   16958:	2704      	movs	r7, #4
   1695a:	e7e8      	b.n	1692e <d_unqualified_name+0x222>
   1695c:	2703      	movs	r7, #3
   1695e:	e7e6      	b.n	1692e <d_unqualified_name+0x222>
   16960:	788b      	ldrb	r3, [r1, #2]
   16962:	2500      	movs	r5, #0
   16964:	e700      	b.n	16768 <d_unqualified_name+0x5c>
   16966:	788b      	ldrb	r3, [r1, #2]
   16968:	e6fe      	b.n	16768 <d_unqualified_name+0x5c>
   1696a:	bf00      	nop
   1696c:	00024864 	.word	0x00024864

00016970 <d_bare_function_type>:
   16970:	b570      	push	{r4, r5, r6, lr}
   16972:	68c3      	ldr	r3, [r0, #12]
   16974:	781a      	ldrb	r2, [r3, #0]
   16976:	2a4a      	cmp	r2, #74	; 0x4a
   16978:	4604      	mov	r4, r0
   1697a:	d00d      	beq.n	16998 <d_bare_function_type+0x28>
   1697c:	b971      	cbnz	r1, 1699c <d_bare_function_type+0x2c>
   1697e:	460d      	mov	r5, r1
   16980:	4620      	mov	r0, r4
   16982:	f7ff fe81 	bl	16688 <d_parmlist>
   16986:	b178      	cbz	r0, 169a8 <d_bare_function_type+0x38>
   16988:	4603      	mov	r3, r0
   1698a:	462a      	mov	r2, r5
   1698c:	4620      	mov	r0, r4
   1698e:	2129      	movs	r1, #41	; 0x29
   16990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16994:	f7fd bf82 	b.w	1489c <d_make_comp>
   16998:	3301      	adds	r3, #1
   1699a:	60c3      	str	r3, [r0, #12]
   1699c:	4620      	mov	r0, r4
   1699e:	f7ff fa0d 	bl	15dbc <d_type>
   169a2:	4605      	mov	r5, r0
   169a4:	2800      	cmp	r0, #0
   169a6:	d1eb      	bne.n	16980 <d_bare_function_type+0x10>
   169a8:	2000      	movs	r0, #0
   169aa:	bd70      	pop	{r4, r5, r6, pc}

000169ac <d_function_type>:
   169ac:	68c3      	ldr	r3, [r0, #12]
   169ae:	781a      	ldrb	r2, [r3, #0]
   169b0:	2a46      	cmp	r2, #70	; 0x46
   169b2:	d001      	beq.n	169b8 <d_function_type+0xc>
   169b4:	2000      	movs	r0, #0
   169b6:	4770      	bx	lr
   169b8:	b510      	push	{r4, lr}
   169ba:	1c5a      	adds	r2, r3, #1
   169bc:	60c2      	str	r2, [r0, #12]
   169be:	785a      	ldrb	r2, [r3, #1]
   169c0:	2a59      	cmp	r2, #89	; 0x59
   169c2:	bf04      	itt	eq
   169c4:	3302      	addeq	r3, #2
   169c6:	60c3      	streq	r3, [r0, #12]
   169c8:	2101      	movs	r1, #1
   169ca:	4604      	mov	r4, r0
   169cc:	f7ff ffd0 	bl	16970 <d_bare_function_type>
   169d0:	4601      	mov	r1, r0
   169d2:	4620      	mov	r0, r4
   169d4:	f7fe f814 	bl	14a00 <d_ref_qualifier>
   169d8:	68e3      	ldr	r3, [r4, #12]
   169da:	781a      	ldrb	r2, [r3, #0]
   169dc:	2a45      	cmp	r2, #69	; 0x45
   169de:	d001      	beq.n	169e4 <d_function_type+0x38>
   169e0:	2000      	movs	r0, #0
   169e2:	bd10      	pop	{r4, pc}
   169e4:	3301      	adds	r3, #1
   169e6:	60e3      	str	r3, [r4, #12]
   169e8:	bd10      	pop	{r4, pc}
   169ea:	bf00      	nop

000169ec <d_encoding>:
   169ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169f0:	68c3      	ldr	r3, [r0, #12]
   169f2:	781a      	ldrb	r2, [r3, #0]
   169f4:	2a47      	cmp	r2, #71	; 0x47
   169f6:	4605      	mov	r5, r0
   169f8:	d01f      	beq.n	16a3a <d_encoding+0x4e>
   169fa:	2a54      	cmp	r2, #84	; 0x54
   169fc:	d01d      	beq.n	16a3a <d_encoding+0x4e>
   169fe:	460e      	mov	r6, r1
   16a00:	f7ff f820 	bl	15a44 <d_name>
   16a04:	4604      	mov	r4, r0
   16a06:	b310      	cbz	r0, 16a4e <d_encoding+0x62>
   16a08:	b32e      	cbz	r6, 16a56 <d_encoding+0x6a>
   16a0a:	68ab      	ldr	r3, [r5, #8]
   16a0c:	07db      	lsls	r3, r3, #31
   16a0e:	d422      	bmi.n	16a56 <d_encoding+0x6a>
   16a10:	7823      	ldrb	r3, [r4, #0]
   16a12:	f1a3 021c 	sub.w	r2, r3, #28
   16a16:	2a04      	cmp	r2, #4
   16a18:	d940      	bls.n	16a9c <d_encoding+0xb0>
   16a1a:	2b4c      	cmp	r3, #76	; 0x4c
   16a1c:	d03e      	beq.n	16a9c <d_encoding+0xb0>
   16a1e:	2b02      	cmp	r3, #2
   16a20:	d116      	bne.n	16a50 <d_encoding+0x64>
   16a22:	68a3      	ldr	r3, [r4, #8]
   16a24:	781a      	ldrb	r2, [r3, #0]
   16a26:	f1a2 011c 	sub.w	r1, r2, #28
   16a2a:	2904      	cmp	r1, #4
   16a2c:	f240 8283 	bls.w	16f36 <d_encoding+0x54a>
   16a30:	2a4c      	cmp	r2, #76	; 0x4c
   16a32:	f000 8280 	beq.w	16f36 <d_encoding+0x54a>
   16a36:	60a3      	str	r3, [r4, #8]
   16a38:	e00a      	b.n	16a50 <d_encoding+0x64>
   16a3a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   16a3c:	f101 0214 	add.w	r2, r1, #20
   16a40:	632a      	str	r2, [r5, #48]	; 0x30
   16a42:	781a      	ldrb	r2, [r3, #0]
   16a44:	2a54      	cmp	r2, #84	; 0x54
   16a46:	d02b      	beq.n	16aa0 <d_encoding+0xb4>
   16a48:	2a47      	cmp	r2, #71	; 0x47
   16a4a:	f000 809f 	beq.w	16b8c <d_encoding+0x1a0>
   16a4e:	2400      	movs	r4, #0
   16a50:	4620      	mov	r0, r4
   16a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16a56:	68eb      	ldr	r3, [r5, #12]
   16a58:	781b      	ldrb	r3, [r3, #0]
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d0f8      	beq.n	16a50 <d_encoding+0x64>
   16a5e:	2b45      	cmp	r3, #69	; 0x45
   16a60:	d0f6      	beq.n	16a50 <d_encoding+0x64>
   16a62:	4621      	mov	r1, r4
   16a64:	780a      	ldrb	r2, [r1, #0]
   16a66:	2a20      	cmp	r2, #32
   16a68:	f200 8113 	bhi.w	16c92 <d_encoding+0x2a6>
   16a6c:	2a1c      	cmp	r2, #28
   16a6e:	f080 8112 	bcs.w	16c96 <d_encoding+0x2aa>
   16a72:	2a04      	cmp	r2, #4
   16a74:	f040 8101 	bne.w	16c7a <d_encoding+0x28e>
   16a78:	684a      	ldr	r2, [r1, #4]
   16a7a:	b16a      	cbz	r2, 16a98 <d_encoding+0xac>
   16a7c:	7813      	ldrb	r3, [r2, #0]
   16a7e:	2b08      	cmp	r3, #8
   16a80:	f103 31ff 	add.w	r1, r3, #4294967295
   16a84:	f200 80f6 	bhi.w	16c74 <d_encoding+0x288>
   16a88:	2b07      	cmp	r3, #7
   16a8a:	f080 80f6 	bcs.w	16c7a <d_encoding+0x28e>
   16a8e:	2901      	cmp	r1, #1
   16a90:	d802      	bhi.n	16a98 <d_encoding+0xac>
   16a92:	6892      	ldr	r2, [r2, #8]
   16a94:	2a00      	cmp	r2, #0
   16a96:	d1f1      	bne.n	16a7c <d_encoding+0x90>
   16a98:	2101      	movs	r1, #1
   16a9a:	e0ef      	b.n	16c7c <d_encoding+0x290>
   16a9c:	6864      	ldr	r4, [r4, #4]
   16a9e:	e7b7      	b.n	16a10 <d_encoding+0x24>
   16aa0:	1c5a      	adds	r2, r3, #1
   16aa2:	60ea      	str	r2, [r5, #12]
   16aa4:	785a      	ldrb	r2, [r3, #1]
   16aa6:	2a00      	cmp	r2, #0
   16aa8:	d0d1      	beq.n	16a4e <d_encoding+0x62>
   16aaa:	1c9a      	adds	r2, r3, #2
   16aac:	60ea      	str	r2, [r5, #12]
   16aae:	785b      	ldrb	r3, [r3, #1]
   16ab0:	3b43      	subs	r3, #67	; 0x43
   16ab2:	2b33      	cmp	r3, #51	; 0x33
   16ab4:	d8cb      	bhi.n	16a4e <d_encoding+0x62>
   16ab6:	a201      	add	r2, pc, #4	; (adr r2, 16abc <d_encoding+0xd0>)
   16ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16abc:	00016ef7 	.word	0x00016ef7
   16ac0:	00016a4f 	.word	0x00016a4f
   16ac4:	00016a4f 	.word	0x00016a4f
   16ac8:	00016ee1 	.word	0x00016ee1
   16acc:	00016a4f 	.word	0x00016a4f
   16ad0:	00016ecb 	.word	0x00016ecb
   16ad4:	00016eb5 	.word	0x00016eb5
   16ad8:	00016e9f 	.word	0x00016e9f
   16adc:	00016a4f 	.word	0x00016a4f
   16ae0:	00016a4f 	.word	0x00016a4f
   16ae4:	00016a4f 	.word	0x00016a4f
   16ae8:	00016a4f 	.word	0x00016a4f
   16aec:	00016a4f 	.word	0x00016a4f
   16af0:	00016a4f 	.word	0x00016a4f
   16af4:	00016a4f 	.word	0x00016a4f
   16af8:	00016a4f 	.word	0x00016a4f
   16afc:	00016e89 	.word	0x00016e89
   16b00:	00016e6f 	.word	0x00016e6f
   16b04:	00016a4f 	.word	0x00016a4f
   16b08:	00016e55 	.word	0x00016e55
   16b0c:	00016e3f 	.word	0x00016e3f
   16b10:	00016a4f 	.word	0x00016a4f
   16b14:	00016a4f 	.word	0x00016a4f
   16b18:	00016a4f 	.word	0x00016a4f
   16b1c:	00016a4f 	.word	0x00016a4f
   16b20:	00016a4f 	.word	0x00016a4f
   16b24:	00016a4f 	.word	0x00016a4f
   16b28:	00016a4f 	.word	0x00016a4f
   16b2c:	00016a4f 	.word	0x00016a4f
   16b30:	00016a4f 	.word	0x00016a4f
   16b34:	00016a4f 	.word	0x00016a4f
   16b38:	00016a4f 	.word	0x00016a4f
   16b3c:	00016e0b 	.word	0x00016e0b
   16b40:	00016a4f 	.word	0x00016a4f
   16b44:	00016a4f 	.word	0x00016a4f
   16b48:	00016a4f 	.word	0x00016a4f
   16b4c:	00016a4f 	.word	0x00016a4f
   16b50:	00016de5 	.word	0x00016de5
   16b54:	00016a4f 	.word	0x00016a4f
   16b58:	00016a4f 	.word	0x00016a4f
   16b5c:	00016a4f 	.word	0x00016a4f
   16b60:	00016a4f 	.word	0x00016a4f
   16b64:	00016a4f 	.word	0x00016a4f
   16b68:	00016a4f 	.word	0x00016a4f
   16b6c:	00016a4f 	.word	0x00016a4f
   16b70:	00016a4f 	.word	0x00016a4f
   16b74:	00016a4f 	.word	0x00016a4f
   16b78:	00016a4f 	.word	0x00016a4f
   16b7c:	00016a4f 	.word	0x00016a4f
   16b80:	00016a4f 	.word	0x00016a4f
   16b84:	00016a4f 	.word	0x00016a4f
   16b88:	00016dbf 	.word	0x00016dbf
   16b8c:	1c5a      	adds	r2, r3, #1
   16b8e:	60ea      	str	r2, [r5, #12]
   16b90:	785a      	ldrb	r2, [r3, #1]
   16b92:	2a00      	cmp	r2, #0
   16b94:	f43f af5b 	beq.w	16a4e <d_encoding+0x62>
   16b98:	1c9a      	adds	r2, r3, #2
   16b9a:	60ea      	str	r2, [r5, #12]
   16b9c:	785a      	ldrb	r2, [r3, #1]
   16b9e:	3a41      	subs	r2, #65	; 0x41
   16ba0:	2a31      	cmp	r2, #49	; 0x31
   16ba2:	f63f af54 	bhi.w	16a4e <d_encoding+0x62>
   16ba6:	a101      	add	r1, pc, #4	; (adr r1, 16bac <d_encoding+0x1c0>)
   16ba8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   16bac:	00016ca1 	.word	0x00016ca1
   16bb0:	00016a4f 	.word	0x00016a4f
   16bb4:	00016a4f 	.word	0x00016a4f
   16bb8:	00016a4f 	.word	0x00016a4f
   16bbc:	00016a4f 	.word	0x00016a4f
   16bc0:	00016a4f 	.word	0x00016a4f
   16bc4:	00016a4f 	.word	0x00016a4f
   16bc8:	00016a4f 	.word	0x00016a4f
   16bcc:	00016a4f 	.word	0x00016a4f
   16bd0:	00016a4f 	.word	0x00016a4f
   16bd4:	00016a4f 	.word	0x00016a4f
   16bd8:	00016a4f 	.word	0x00016a4f
   16bdc:	00016a4f 	.word	0x00016a4f
   16be0:	00016a4f 	.word	0x00016a4f
   16be4:	00016a4f 	.word	0x00016a4f
   16be8:	00016a4f 	.word	0x00016a4f
   16bec:	00016a4f 	.word	0x00016a4f
   16bf0:	00016da1 	.word	0x00016da1
   16bf4:	00016a4f 	.word	0x00016a4f
   16bf8:	00016d75 	.word	0x00016d75
   16bfc:	00016a4f 	.word	0x00016a4f
   16c00:	00016d5f 	.word	0x00016d5f
   16c04:	00016a4f 	.word	0x00016a4f
   16c08:	00016a4f 	.word	0x00016a4f
   16c0c:	00016a4f 	.word	0x00016a4f
   16c10:	00016a4f 	.word	0x00016a4f
   16c14:	00016a4f 	.word	0x00016a4f
   16c18:	00016a4f 	.word	0x00016a4f
   16c1c:	00016a4f 	.word	0x00016a4f
   16c20:	00016a4f 	.word	0x00016a4f
   16c24:	00016a4f 	.word	0x00016a4f
   16c28:	00016a4f 	.word	0x00016a4f
   16c2c:	00016a4f 	.word	0x00016a4f
   16c30:	00016a4f 	.word	0x00016a4f
   16c34:	00016a4f 	.word	0x00016a4f
   16c38:	00016a4f 	.word	0x00016a4f
   16c3c:	00016a4f 	.word	0x00016a4f
   16c40:	00016a4f 	.word	0x00016a4f
   16c44:	00016a4f 	.word	0x00016a4f
   16c48:	00016a4f 	.word	0x00016a4f
   16c4c:	00016a4f 	.word	0x00016a4f
   16c50:	00016a4f 	.word	0x00016a4f
   16c54:	00016a4f 	.word	0x00016a4f
   16c58:	00016a4f 	.word	0x00016a4f
   16c5c:	00016a4f 	.word	0x00016a4f
   16c60:	00016a4f 	.word	0x00016a4f
   16c64:	00016a4f 	.word	0x00016a4f
   16c68:	00016a4f 	.word	0x00016a4f
   16c6c:	00016a4f 	.word	0x00016a4f
   16c70:	00016cb9 	.word	0x00016cb9
   16c74:	2b34      	cmp	r3, #52	; 0x34
   16c76:	f47f af0f 	bne.w	16a98 <d_encoding+0xac>
   16c7a:	2100      	movs	r1, #0
   16c7c:	4628      	mov	r0, r5
   16c7e:	f7ff fe77 	bl	16970 <d_bare_function_type>
   16c82:	4622      	mov	r2, r4
   16c84:	4603      	mov	r3, r0
   16c86:	2103      	movs	r1, #3
   16c88:	4628      	mov	r0, r5
   16c8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c8e:	f7fd be05 	b.w	1489c <d_make_comp>
   16c92:	2a4c      	cmp	r2, #76	; 0x4c
   16c94:	d1f1      	bne.n	16c7a <d_encoding+0x28e>
   16c96:	6849      	ldr	r1, [r1, #4]
   16c98:	2900      	cmp	r1, #0
   16c9a:	f47f aee3 	bne.w	16a64 <d_encoding+0x78>
   16c9e:	e7ed      	b.n	16c7c <d_encoding+0x290>
   16ca0:	2100      	movs	r1, #0
   16ca2:	4628      	mov	r0, r5
   16ca4:	f7ff fea2 	bl	169ec <d_encoding>
   16ca8:	2300      	movs	r3, #0
   16caa:	4602      	mov	r2, r0
   16cac:	2117      	movs	r1, #23
   16cae:	4628      	mov	r0, r5
   16cb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cb4:	f7fd bdf2 	b.w	1489c <d_make_comp>
   16cb8:	f105 000c 	add.w	r0, r5, #12
   16cbc:	f7fd ff40 	bl	14b40 <d_number.isra.0>
   16cc0:	2801      	cmp	r0, #1
   16cc2:	f77f aec4 	ble.w	16a4e <d_encoding+0x62>
   16cc6:	68eb      	ldr	r3, [r5, #12]
   16cc8:	781a      	ldrb	r2, [r3, #0]
   16cca:	2a00      	cmp	r2, #0
   16ccc:	f43f aebf 	beq.w	16a4e <d_encoding+0x62>
   16cd0:	1c5f      	adds	r7, r3, #1
   16cd2:	60ef      	str	r7, [r5, #12]
   16cd4:	781b      	ldrb	r3, [r3, #0]
   16cd6:	2b5f      	cmp	r3, #95	; 0x5f
   16cd8:	f47f aeb9 	bne.w	16a4e <d_encoding+0x62>
   16cdc:	2200      	movs	r2, #0
   16cde:	1e46      	subs	r6, r0, #1
   16ce0:	4690      	mov	r8, r2
   16ce2:	f04f 0940 	mov.w	r9, #64	; 0x40
   16ce6:	783b      	ldrb	r3, [r7, #0]
   16ce8:	2b00      	cmp	r3, #0
   16cea:	f43f aeb0 	beq.w	16a4e <d_encoding+0x62>
   16cee:	2b24      	cmp	r3, #36	; 0x24
   16cf0:	f000 8128 	beq.w	16f44 <d_encoding+0x558>
   16cf4:	463c      	mov	r4, r7
   16cf6:	2100      	movs	r1, #0
   16cf8:	e004      	b.n	16d04 <d_encoding+0x318>
   16cfa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   16cfe:	b123      	cbz	r3, 16d0a <d_encoding+0x31e>
   16d00:	2b24      	cmp	r3, #36	; 0x24
   16d02:	d002      	beq.n	16d0a <d_encoding+0x31e>
   16d04:	3101      	adds	r1, #1
   16d06:	42b1      	cmp	r1, r6
   16d08:	dbf7      	blt.n	16cfa <d_encoding+0x30e>
   16d0a:	696c      	ldr	r4, [r5, #20]
   16d0c:	69a8      	ldr	r0, [r5, #24]
   16d0e:	4284      	cmp	r4, r0
   16d10:	f280 8113 	bge.w	16f3a <d_encoding+0x54e>
   16d14:	6928      	ldr	r0, [r5, #16]
   16d16:	1c63      	adds	r3, r4, #1
   16d18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16d1c:	616b      	str	r3, [r5, #20]
   16d1e:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   16d22:	f000 810a 	beq.w	16f3a <d_encoding+0x54e>
   16d26:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   16d2a:	605f      	str	r7, [r3, #4]
   16d2c:	6099      	str	r1, [r3, #8]
   16d2e:	68ef      	ldr	r7, [r5, #12]
   16d30:	440f      	add	r7, r1
   16d32:	1a76      	subs	r6, r6, r1
   16d34:	60ef      	str	r7, [r5, #12]
   16d36:	2a00      	cmp	r2, #0
   16d38:	f000 8121 	beq.w	16f7e <d_encoding+0x592>
   16d3c:	213f      	movs	r1, #63	; 0x3f
   16d3e:	4628      	mov	r0, r5
   16d40:	f7fd fdac 	bl	1489c <d_make_comp>
   16d44:	4602      	mov	r2, r0
   16d46:	2800      	cmp	r0, #0
   16d48:	f43f ae81 	beq.w	16a4e <d_encoding+0x62>
   16d4c:	2e00      	cmp	r6, #0
   16d4e:	dcca      	bgt.n	16ce6 <d_encoding+0x2fa>
   16d50:	4628      	mov	r0, r5
   16d52:	2300      	movs	r3, #0
   16d54:	213e      	movs	r1, #62	; 0x3e
   16d56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d5a:	f7fd bd9f 	b.w	1489c <d_make_comp>
   16d5e:	4628      	mov	r0, r5
   16d60:	f7fe fe70 	bl	15a44 <d_name>
   16d64:	2300      	movs	r3, #0
   16d66:	4602      	mov	r2, r0
   16d68:	2113      	movs	r1, #19
   16d6a:	4628      	mov	r0, r5
   16d6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d70:	f7fd bd94 	b.w	1489c <d_make_comp>
   16d74:	789a      	ldrb	r2, [r3, #2]
   16d76:	2100      	movs	r1, #0
   16d78:	4628      	mov	r0, r5
   16d7a:	2a00      	cmp	r2, #0
   16d7c:	f000 8101 	beq.w	16f82 <d_encoding+0x596>
   16d80:	1cda      	adds	r2, r3, #3
   16d82:	60ea      	str	r2, [r5, #12]
   16d84:	789b      	ldrb	r3, [r3, #2]
   16d86:	2b6e      	cmp	r3, #110	; 0x6e
   16d88:	f040 80fb 	bne.w	16f82 <d_encoding+0x596>
   16d8c:	f7ff fe2e 	bl	169ec <d_encoding>
   16d90:	2300      	movs	r3, #0
   16d92:	4602      	mov	r2, r0
   16d94:	2149      	movs	r1, #73	; 0x49
   16d96:	4628      	mov	r0, r5
   16d98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d9c:	f7fd bd7e 	b.w	1489c <d_make_comp>
   16da0:	4628      	mov	r0, r5
   16da2:	f7fe fe4f 	bl	15a44 <d_name>
   16da6:	4604      	mov	r4, r0
   16da8:	4628      	mov	r0, r5
   16daa:	f7fd fef3 	bl	14b94 <d_number_component>
   16dae:	4622      	mov	r2, r4
   16db0:	4603      	mov	r3, r0
   16db2:	2116      	movs	r1, #22
   16db4:	4628      	mov	r0, r5
   16db6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16dba:	f7fd bd6f 	b.w	1489c <d_make_comp>
   16dbe:	2176      	movs	r1, #118	; 0x76
   16dc0:	4628      	mov	r0, r5
   16dc2:	f7fe f871 	bl	14ea8 <d_call_offset>
   16dc6:	2800      	cmp	r0, #0
   16dc8:	f43f ae41 	beq.w	16a4e <d_encoding+0x62>
   16dcc:	2100      	movs	r1, #0
   16dce:	4628      	mov	r0, r5
   16dd0:	f7ff fe0c 	bl	169ec <d_encoding>
   16dd4:	2300      	movs	r3, #0
   16dd6:	4602      	mov	r2, r0
   16dd8:	2110      	movs	r1, #16
   16dda:	4628      	mov	r0, r5
   16ddc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16de0:	f7fd bd5c 	b.w	1489c <d_make_comp>
   16de4:	2168      	movs	r1, #104	; 0x68
   16de6:	4628      	mov	r0, r5
   16de8:	f7fe f85e 	bl	14ea8 <d_call_offset>
   16dec:	2800      	cmp	r0, #0
   16dee:	f43f ae2e 	beq.w	16a4e <d_encoding+0x62>
   16df2:	2100      	movs	r1, #0
   16df4:	4628      	mov	r0, r5
   16df6:	f7ff fdf9 	bl	169ec <d_encoding>
   16dfa:	2300      	movs	r3, #0
   16dfc:	4602      	mov	r2, r0
   16dfe:	210f      	movs	r1, #15
   16e00:	4628      	mov	r0, r5
   16e02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e06:	f7fd bd49 	b.w	1489c <d_make_comp>
   16e0a:	2100      	movs	r1, #0
   16e0c:	4628      	mov	r0, r5
   16e0e:	f7fe f84b 	bl	14ea8 <d_call_offset>
   16e12:	2800      	cmp	r0, #0
   16e14:	f43f ae1b 	beq.w	16a4e <d_encoding+0x62>
   16e18:	2100      	movs	r1, #0
   16e1a:	4628      	mov	r0, r5
   16e1c:	f7fe f844 	bl	14ea8 <d_call_offset>
   16e20:	2800      	cmp	r0, #0
   16e22:	f43f ae14 	beq.w	16a4e <d_encoding+0x62>
   16e26:	2100      	movs	r1, #0
   16e28:	4628      	mov	r0, r5
   16e2a:	f7ff fddf 	bl	169ec <d_encoding>
   16e2e:	2300      	movs	r3, #0
   16e30:	4602      	mov	r2, r0
   16e32:	2111      	movs	r1, #17
   16e34:	4628      	mov	r0, r5
   16e36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e3a:	f7fd bd2f 	b.w	1489c <d_make_comp>
   16e3e:	4628      	mov	r0, r5
   16e40:	f7fe fe00 	bl	15a44 <d_name>
   16e44:	2300      	movs	r3, #0
   16e46:	4602      	mov	r2, r0
   16e48:	2115      	movs	r1, #21
   16e4a:	4628      	mov	r0, r5
   16e4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e50:	f7fd bd24 	b.w	1489c <d_make_comp>
   16e54:	310f      	adds	r1, #15
   16e56:	6329      	str	r1, [r5, #48]	; 0x30
   16e58:	4628      	mov	r0, r5
   16e5a:	f7fe ffaf 	bl	15dbc <d_type>
   16e5e:	2300      	movs	r3, #0
   16e60:	4602      	mov	r2, r0
   16e62:	2109      	movs	r1, #9
   16e64:	4628      	mov	r0, r5
   16e66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e6a:	f7fd bd17 	b.w	1489c <d_make_comp>
   16e6e:	310a      	adds	r1, #10
   16e70:	6329      	str	r1, [r5, #48]	; 0x30
   16e72:	4628      	mov	r0, r5
   16e74:	f7fe ffa2 	bl	15dbc <d_type>
   16e78:	2300      	movs	r3, #0
   16e7a:	4602      	mov	r2, r0
   16e7c:	210a      	movs	r1, #10
   16e7e:	4628      	mov	r0, r5
   16e80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e84:	f7fd bd0a 	b.w	1489c <d_make_comp>
   16e88:	4628      	mov	r0, r5
   16e8a:	f7fe ff97 	bl	15dbc <d_type>
   16e8e:	2300      	movs	r3, #0
   16e90:	4602      	mov	r2, r0
   16e92:	210d      	movs	r1, #13
   16e94:	4628      	mov	r0, r5
   16e96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e9a:	f7fd bcff 	b.w	1489c <d_make_comp>
   16e9e:	4628      	mov	r0, r5
   16ea0:	f7fe ff8c 	bl	15dbc <d_type>
   16ea4:	2300      	movs	r3, #0
   16ea6:	4602      	mov	r2, r0
   16ea8:	2112      	movs	r1, #18
   16eaa:	4628      	mov	r0, r5
   16eac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16eb0:	f7fd bcf4 	b.w	1489c <d_make_comp>
   16eb4:	4628      	mov	r0, r5
   16eb6:	f7fe ff81 	bl	15dbc <d_type>
   16eba:	2300      	movs	r3, #0
   16ebc:	4602      	mov	r2, r0
   16ebe:	210c      	movs	r1, #12
   16ec0:	4628      	mov	r0, r5
   16ec2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ec6:	f7fd bce9 	b.w	1489c <d_make_comp>
   16eca:	4628      	mov	r0, r5
   16ecc:	f7fe fdba 	bl	15a44 <d_name>
   16ed0:	2300      	movs	r3, #0
   16ed2:	4602      	mov	r2, r0
   16ed4:	2114      	movs	r1, #20
   16ed6:	4628      	mov	r0, r5
   16ed8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16edc:	f7fd bcde 	b.w	1489c <d_make_comp>
   16ee0:	4628      	mov	r0, r5
   16ee2:	f7fe ff6b 	bl	15dbc <d_type>
   16ee6:	2300      	movs	r3, #0
   16ee8:	4602      	mov	r2, r0
   16eea:	210e      	movs	r1, #14
   16eec:	4628      	mov	r0, r5
   16eee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ef2:	f7fd bcd3 	b.w	1489c <d_make_comp>
   16ef6:	4628      	mov	r0, r5
   16ef8:	f7fe ff60 	bl	15dbc <d_type>
   16efc:	4604      	mov	r4, r0
   16efe:	f105 000c 	add.w	r0, r5, #12
   16f02:	f7fd fe1d 	bl	14b40 <d_number.isra.0>
   16f06:	2800      	cmp	r0, #0
   16f08:	f6ff ada1 	blt.w	16a4e <d_encoding+0x62>
   16f0c:	68eb      	ldr	r3, [r5, #12]
   16f0e:	781a      	ldrb	r2, [r3, #0]
   16f10:	2a5f      	cmp	r2, #95	; 0x5f
   16f12:	f47f ad9c 	bne.w	16a4e <d_encoding+0x62>
   16f16:	3301      	adds	r3, #1
   16f18:	60eb      	str	r3, [r5, #12]
   16f1a:	4628      	mov	r0, r5
   16f1c:	f7fe ff4e 	bl	15dbc <d_type>
   16f20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16f22:	1d59      	adds	r1, r3, #5
   16f24:	6329      	str	r1, [r5, #48]	; 0x30
   16f26:	4602      	mov	r2, r0
   16f28:	4623      	mov	r3, r4
   16f2a:	4628      	mov	r0, r5
   16f2c:	210b      	movs	r1, #11
   16f2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f32:	f7fd bcb3 	b.w	1489c <d_make_comp>
   16f36:	685b      	ldr	r3, [r3, #4]
   16f38:	e574      	b.n	16a24 <d_encoding+0x38>
   16f3a:	68eb      	ldr	r3, [r5, #12]
   16f3c:	440b      	add	r3, r1
   16f3e:	60eb      	str	r3, [r5, #12]
   16f40:	2400      	movs	r4, #0
   16f42:	e585      	b.n	16a50 <d_encoding+0x64>
   16f44:	787b      	ldrb	r3, [r7, #1]
   16f46:	2b53      	cmp	r3, #83	; 0x53
   16f48:	d027      	beq.n	16f9a <d_encoding+0x5ae>
   16f4a:	2b5f      	cmp	r3, #95	; 0x5f
   16f4c:	d023      	beq.n	16f96 <d_encoding+0x5aa>
   16f4e:	2b24      	cmp	r3, #36	; 0x24
   16f50:	f47f ad7d 	bne.w	16a4e <d_encoding+0x62>
   16f54:	4618      	mov	r0, r3
   16f56:	6969      	ldr	r1, [r5, #20]
   16f58:	69ab      	ldr	r3, [r5, #24]
   16f5a:	4299      	cmp	r1, r3
   16f5c:	da1f      	bge.n	16f9e <d_encoding+0x5b2>
   16f5e:	692c      	ldr	r4, [r5, #16]
   16f60:	1c4f      	adds	r7, r1, #1
   16f62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16f66:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   16f6a:	616f      	str	r7, [r5, #20]
   16f6c:	d017      	beq.n	16f9e <d_encoding+0x5b2>
   16f6e:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   16f72:	6058      	str	r0, [r3, #4]
   16f74:	68ef      	ldr	r7, [r5, #12]
   16f76:	3702      	adds	r7, #2
   16f78:	3e02      	subs	r6, #2
   16f7a:	60ef      	str	r7, [r5, #12]
   16f7c:	e6db      	b.n	16d36 <d_encoding+0x34a>
   16f7e:	461a      	mov	r2, r3
   16f80:	e6e4      	b.n	16d4c <d_encoding+0x360>
   16f82:	f7ff fd33 	bl	169ec <d_encoding>
   16f86:	2300      	movs	r3, #0
   16f88:	4602      	mov	r2, r0
   16f8a:	2148      	movs	r1, #72	; 0x48
   16f8c:	4628      	mov	r0, r5
   16f8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f92:	f7fd bc83 	b.w	1489c <d_make_comp>
   16f96:	202e      	movs	r0, #46	; 0x2e
   16f98:	e7dd      	b.n	16f56 <d_encoding+0x56a>
   16f9a:	202f      	movs	r0, #47	; 0x2f
   16f9c:	e7db      	b.n	16f56 <d_encoding+0x56a>
   16f9e:	68eb      	ldr	r3, [r5, #12]
   16fa0:	3302      	adds	r3, #2
   16fa2:	60eb      	str	r3, [r5, #12]
   16fa4:	2400      	movs	r4, #0
   16fa6:	e553      	b.n	16a50 <d_encoding+0x64>

00016fa8 <d_expr_primary>:
   16fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16faa:	68c2      	ldr	r2, [r0, #12]
   16fac:	7813      	ldrb	r3, [r2, #0]
   16fae:	2b4c      	cmp	r3, #76	; 0x4c
   16fb0:	d001      	beq.n	16fb6 <d_expr_primary+0xe>
   16fb2:	2000      	movs	r0, #0
   16fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fb6:	1c53      	adds	r3, r2, #1
   16fb8:	60c3      	str	r3, [r0, #12]
   16fba:	7851      	ldrb	r1, [r2, #1]
   16fbc:	295f      	cmp	r1, #95	; 0x5f
   16fbe:	4605      	mov	r5, r0
   16fc0:	d03a      	beq.n	17038 <d_expr_primary+0x90>
   16fc2:	295a      	cmp	r1, #90	; 0x5a
   16fc4:	d03f      	beq.n	17046 <d_expr_primary+0x9e>
   16fc6:	f7fe fef9 	bl	15dbc <d_type>
   16fca:	2800      	cmp	r0, #0
   16fcc:	d0f1      	beq.n	16fb2 <d_expr_primary+0xa>
   16fce:	7803      	ldrb	r3, [r0, #0]
   16fd0:	2b27      	cmp	r3, #39	; 0x27
   16fd2:	d046      	beq.n	17062 <d_expr_primary+0xba>
   16fd4:	68ee      	ldr	r6, [r5, #12]
   16fd6:	7833      	ldrb	r3, [r6, #0]
   16fd8:	2b6e      	cmp	r3, #110	; 0x6e
   16fda:	d04b      	beq.n	17074 <d_expr_primary+0xcc>
   16fdc:	213c      	movs	r1, #60	; 0x3c
   16fde:	2b45      	cmp	r3, #69	; 0x45
   16fe0:	d04e      	beq.n	17080 <d_expr_primary+0xd8>
   16fe2:	2b00      	cmp	r3, #0
   16fe4:	d0e5      	beq.n	16fb2 <d_expr_primary+0xa>
   16fe6:	4633      	mov	r3, r6
   16fe8:	e001      	b.n	16fee <d_expr_primary+0x46>
   16fea:	2c00      	cmp	r4, #0
   16fec:	d0e1      	beq.n	16fb2 <d_expr_primary+0xa>
   16fee:	3301      	adds	r3, #1
   16ff0:	60eb      	str	r3, [r5, #12]
   16ff2:	781c      	ldrb	r4, [r3, #0]
   16ff4:	2c45      	cmp	r4, #69	; 0x45
   16ff6:	d1f8      	bne.n	16fea <d_expr_primary+0x42>
   16ff8:	1b9c      	subs	r4, r3, r6
   16ffa:	696b      	ldr	r3, [r5, #20]
   16ffc:	69aa      	ldr	r2, [r5, #24]
   16ffe:	4293      	cmp	r3, r2
   17000:	da2d      	bge.n	1705e <d_expr_primary+0xb6>
   17002:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   17006:	692f      	ldr	r7, [r5, #16]
   17008:	3301      	adds	r3, #1
   1700a:	0092      	lsls	r2, r2, #2
   1700c:	616b      	str	r3, [r5, #20]
   1700e:	18bb      	adds	r3, r7, r2
   17010:	d025      	beq.n	1705e <d_expr_primary+0xb6>
   17012:	b326      	cbz	r6, 1705e <d_expr_primary+0xb6>
   17014:	b31c      	cbz	r4, 1705e <d_expr_primary+0xb6>
   17016:	f04f 0e00 	mov.w	lr, #0
   1701a:	f807 e002 	strb.w	lr, [r7, r2]
   1701e:	605e      	str	r6, [r3, #4]
   17020:	609c      	str	r4, [r3, #8]
   17022:	4602      	mov	r2, r0
   17024:	4628      	mov	r0, r5
   17026:	f7fd fc39 	bl	1489c <d_make_comp>
   1702a:	68eb      	ldr	r3, [r5, #12]
   1702c:	781a      	ldrb	r2, [r3, #0]
   1702e:	2a45      	cmp	r2, #69	; 0x45
   17030:	d1bf      	bne.n	16fb2 <d_expr_primary+0xa>
   17032:	3301      	adds	r3, #1
   17034:	60eb      	str	r3, [r5, #12]
   17036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17038:	1c93      	adds	r3, r2, #2
   1703a:	60c3      	str	r3, [r0, #12]
   1703c:	7892      	ldrb	r2, [r2, #2]
   1703e:	2a5a      	cmp	r2, #90	; 0x5a
   17040:	bf18      	it	ne
   17042:	2000      	movne	r0, #0
   17044:	d107      	bne.n	17056 <d_expr_primary+0xae>
   17046:	3301      	adds	r3, #1
   17048:	60eb      	str	r3, [r5, #12]
   1704a:	2100      	movs	r1, #0
   1704c:	4628      	mov	r0, r5
   1704e:	f7ff fccd 	bl	169ec <d_encoding>
   17052:	68eb      	ldr	r3, [r5, #12]
   17054:	781a      	ldrb	r2, [r3, #0]
   17056:	2a45      	cmp	r2, #69	; 0x45
   17058:	d0eb      	beq.n	17032 <d_expr_primary+0x8a>
   1705a:	2000      	movs	r0, #0
   1705c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1705e:	2300      	movs	r3, #0
   17060:	e7df      	b.n	17022 <d_expr_primary+0x7a>
   17062:	6843      	ldr	r3, [r0, #4]
   17064:	7c1a      	ldrb	r2, [r3, #16]
   17066:	2a00      	cmp	r2, #0
   17068:	d0b4      	beq.n	16fd4 <d_expr_primary+0x2c>
   1706a:	685a      	ldr	r2, [r3, #4]
   1706c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1706e:	1a9b      	subs	r3, r3, r2
   17070:	632b      	str	r3, [r5, #48]	; 0x30
   17072:	e7af      	b.n	16fd4 <d_expr_primary+0x2c>
   17074:	1c72      	adds	r2, r6, #1
   17076:	60ea      	str	r2, [r5, #12]
   17078:	7873      	ldrb	r3, [r6, #1]
   1707a:	213d      	movs	r1, #61	; 0x3d
   1707c:	4616      	mov	r6, r2
   1707e:	e7ae      	b.n	16fde <d_expr_primary+0x36>
   17080:	2400      	movs	r4, #0
   17082:	e7ba      	b.n	16ffa <d_expr_primary+0x52>

00017084 <d_print_comp_inner>:
   17084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17088:	4604      	mov	r4, r0
   1708a:	b095      	sub	sp, #84	; 0x54
   1708c:	2a00      	cmp	r2, #0
   1708e:	f000 80db 	beq.w	17248 <d_print_comp_inner+0x1c4>
   17092:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   17096:	2f00      	cmp	r7, #0
   17098:	f040 80c2 	bne.w	17220 <d_print_comp_inner+0x19c>
   1709c:	7813      	ldrb	r3, [r2, #0]
   1709e:	4688      	mov	r8, r1
   170a0:	4615      	mov	r5, r2
   170a2:	2b4d      	cmp	r3, #77	; 0x4d
   170a4:	f201 81e6 	bhi.w	18474 <d_print_comp_inner+0x13f0>
   170a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   170ac:	043c045a 	.word	0x043c045a
   170b0:	03a4043c 	.word	0x03a4043c
   170b4:	048904a5 	.word	0x048904a5
   170b8:	038e04ea 	.word	0x038e04ea
   170bc:	0330037c 	.word	0x0330037c
   170c0:	030a0356 	.word	0x030a0356
   170c4:	029802e4 	.word	0x029802e4
   170c8:	027202be 	.word	0x027202be
   170cc:	01f0024c 	.word	0x01f0024c
   170d0:	01ca0226 	.word	0x01ca0226
   170d4:	015801a4 	.word	0x015801a4
   170d8:	0132017e 	.word	0x0132017e
   170dc:	00f2010b 	.word	0x00f2010b
   170e0:	00f200f2 	.word	0x00f200f2
   170e4:	00d400d4 	.word	0x00d400d4
   170e8:	00d400d4 	.word	0x00d400d4
   170ec:	00d400d4 	.word	0x00d400d4
   170f0:	06d500d4 	.word	0x06d500d4
   170f4:	00d406d5 	.word	0x00d406d5
   170f8:	06a900d4 	.word	0x06a900d4
   170fc:	069306fc 	.word	0x069306fc
   17100:	0701071d 	.word	0x0701071d
   17104:	07010788 	.word	0x07010788
   17108:	057b057b 	.word	0x057b057b
   1710c:	06060630 	.word	0x06060630
   17110:	09e405e0 	.word	0x09e405e0
   17114:	068e05ad 	.word	0x068e05ad
   17118:	004e0654 	.word	0x004e0654
   1711c:	094c0485 	.word	0x094c0485
   17120:	08df08df 	.word	0x08df08df
   17124:	08ae08ae 	.word	0x08ae08ae
   17128:	05480888 	.word	0x05480888
   1712c:	08e4053a 	.word	0x08e4053a
   17130:	09be0514 	.word	0x09be0514
   17134:	09980914 	.word	0x09980914
   17138:	07cb09e4 	.word	0x07cb09e4
   1713c:	07f10862 	.word	0x07f10862
   17140:	04130817 	.word	0x04130817
   17144:	055200d4 	.word	0x055200d4
   17148:	68ab      	ldr	r3, [r5, #8]
   1714a:	781b      	ldrb	r3, [r3, #0]
   1714c:	2b38      	cmp	r3, #56	; 0x38
   1714e:	d17b      	bne.n	17248 <d_print_comp_inner+0x1c4>
   17150:	686a      	ldr	r2, [r5, #4]
   17152:	6853      	ldr	r3, [r2, #4]
   17154:	681b      	ldr	r3, [r3, #0]
   17156:	7859      	ldrb	r1, [r3, #1]
   17158:	2963      	cmp	r1, #99	; 0x63
   1715a:	f002 814a 	beq.w	193f2 <d_print_comp_inner+0x236e>
   1715e:	f105 0308 	add.w	r3, r5, #8
   17162:	4641      	mov	r1, r8
   17164:	4620      	mov	r0, r4
   17166:	f003 fbbb 	bl	1a8e0 <d_maybe_print_fold_expression.isra.15>
   1716a:	4606      	mov	r6, r0
   1716c:	2800      	cmp	r0, #0
   1716e:	d157      	bne.n	17220 <d_print_comp_inner+0x19c>
   17170:	686b      	ldr	r3, [r5, #4]
   17172:	781a      	ldrb	r2, [r3, #0]
   17174:	2a31      	cmp	r2, #49	; 0x31
   17176:	f002 836b 	beq.w	19850 <d_print_comp_inner+0x27cc>
   1717a:	685b      	ldr	r3, [r3, #4]
   1717c:	49c7      	ldr	r1, [pc, #796]	; (1749c <d_print_comp_inner+0x418>)
   1717e:	6818      	ldr	r0, [r3, #0]
   17180:	f007 fed2 	bl	1ef28 <strcmp>
   17184:	68ab      	ldr	r3, [r5, #8]
   17186:	b920      	cbnz	r0, 17192 <d_print_comp_inner+0x10e>
   17188:	685a      	ldr	r2, [r3, #4]
   1718a:	7811      	ldrb	r1, [r2, #0]
   1718c:	2903      	cmp	r1, #3
   1718e:	f002 83a5 	beq.w	198dc <d_print_comp_inner+0x2858>
   17192:	685a      	ldr	r2, [r3, #4]
   17194:	4641      	mov	r1, r8
   17196:	4620      	mov	r0, r4
   17198:	f003 fb3e 	bl	1a818 <d_print_subexpr>
   1719c:	686f      	ldr	r7, [r5, #4]
   1719e:	49c0      	ldr	r1, [pc, #768]	; (174a0 <d_print_comp_inner+0x41c>)
   171a0:	687b      	ldr	r3, [r7, #4]
   171a2:	f8d3 9000 	ldr.w	r9, [r3]
   171a6:	4648      	mov	r0, r9
   171a8:	f007 febe 	bl	1ef28 <strcmp>
   171ac:	4606      	mov	r6, r0
   171ae:	2800      	cmp	r0, #0
   171b0:	f042 826f 	bne.w	19692 <d_print_comp_inner+0x260e>
   171b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   171b8:	29ff      	cmp	r1, #255	; 0xff
   171ba:	f002 844a 	beq.w	19a52 <d_print_comp_inner+0x29ce>
   171be:	1c4a      	adds	r2, r1, #1
   171c0:	235b      	movs	r3, #91	; 0x5b
   171c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   171c6:	5463      	strb	r3, [r4, r1]
   171c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   171cc:	68ab      	ldr	r3, [r5, #8]
   171ce:	4641      	mov	r1, r8
   171d0:	689a      	ldr	r2, [r3, #8]
   171d2:	4620      	mov	r0, r4
   171d4:	f002 fcfa 	bl	19bcc <d_print_comp>
   171d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   171dc:	29ff      	cmp	r1, #255	; 0xff
   171de:	f002 8425 	beq.w	19a2c <d_print_comp_inner+0x29a8>
   171e2:	235d      	movs	r3, #93	; 0x5d
   171e4:	1c4a      	adds	r2, r1, #1
   171e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   171ea:	5463      	strb	r3, [r4, r1]
   171ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   171f0:	686b      	ldr	r3, [r5, #4]
   171f2:	781a      	ldrb	r2, [r3, #0]
   171f4:	2a31      	cmp	r2, #49	; 0x31
   171f6:	d113      	bne.n	17220 <d_print_comp_inner+0x19c>
   171f8:	685b      	ldr	r3, [r3, #4]
   171fa:	689a      	ldr	r2, [r3, #8]
   171fc:	2a01      	cmp	r2, #1
   171fe:	d10f      	bne.n	17220 <d_print_comp_inner+0x19c>
   17200:	685b      	ldr	r3, [r3, #4]
   17202:	781b      	ldrb	r3, [r3, #0]
   17204:	2b3e      	cmp	r3, #62	; 0x3e
   17206:	d10b      	bne.n	17220 <d_print_comp_inner+0x19c>
   17208:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1720c:	29ff      	cmp	r1, #255	; 0xff
   1720e:	f002 8482 	beq.w	19b16 <d_print_comp_inner+0x2a92>
   17212:	2329      	movs	r3, #41	; 0x29
   17214:	1c4a      	adds	r2, r1, #1
   17216:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1721a:	5463      	strb	r3, [r4, r1]
   1721c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17220:	b015      	add	sp, #84	; 0x54
   17222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17226:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1722a:	2b00      	cmp	r3, #0
   1722c:	f2c1 84a4 	blt.w	18b78 <d_print_comp_inner+0x1af4>
   17230:	2b00      	cmp	r3, #0
   17232:	f002 8432 	beq.w	19a9a <d_print_comp_inner+0x2a16>
   17236:	6880      	ldr	r0, [r0, #8]
   17238:	3b01      	subs	r3, #1
   1723a:	b110      	cbz	r0, 17242 <d_print_comp_inner+0x1be>
   1723c:	7802      	ldrb	r2, [r0, #0]
   1723e:	2a2f      	cmp	r2, #47	; 0x2f
   17240:	d0f6      	beq.n	17230 <d_print_comp_inner+0x1ac>
   17242:	b10f      	cbz	r7, 17248 <d_print_comp_inner+0x1c4>
   17244:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   17248:	2301      	movs	r3, #1
   1724a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1724e:	b015      	add	sp, #84	; 0x54
   17250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17254:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   17258:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1725c:	9505      	str	r5, [sp, #20]
   1725e:	ab14      	add	r3, sp, #80	; 0x50
   17260:	2100      	movs	r1, #0
   17262:	f843 cd40 	str.w	ip, [r3, #-64]!
   17266:	9106      	str	r1, [sp, #24]
   17268:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1726c:	9207      	str	r2, [sp, #28]
   1726e:	686a      	ldr	r2, [r5, #4]
   17270:	4641      	mov	r1, r8
   17272:	4620      	mov	r0, r4
   17274:	f002 fcaa 	bl	19bcc <d_print_comp>
   17278:	9b06      	ldr	r3, [sp, #24]
   1727a:	2b00      	cmp	r3, #0
   1727c:	f001 8389 	beq.w	18992 <d_print_comp_inner+0x190e>
   17280:	9b04      	ldr	r3, [sp, #16]
   17282:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17286:	2f00      	cmp	r7, #0
   17288:	d0ca      	beq.n	17220 <d_print_comp_inner+0x19c>
   1728a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   1728e:	e7c7      	b.n	17220 <d_print_comp_inner+0x19c>
   17290:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   17294:	f1bc 0f00 	cmp.w	ip, #0
   17298:	d0de      	beq.n	17258 <d_print_comp_inner+0x1d4>
   1729a:	4662      	mov	r2, ip
   1729c:	e005      	b.n	172aa <d_print_comp_inner+0x226>
   1729e:	428b      	cmp	r3, r1
   172a0:	f001 86b8 	beq.w	19014 <d_print_comp_inner+0x1f90>
   172a4:	6812      	ldr	r2, [r2, #0]
   172a6:	2a00      	cmp	r2, #0
   172a8:	d0d6      	beq.n	17258 <d_print_comp_inner+0x1d4>
   172aa:	6890      	ldr	r0, [r2, #8]
   172ac:	2800      	cmp	r0, #0
   172ae:	d1f9      	bne.n	172a4 <d_print_comp_inner+0x220>
   172b0:	6851      	ldr	r1, [r2, #4]
   172b2:	7809      	ldrb	r1, [r1, #0]
   172b4:	f1a1 0e19 	sub.w	lr, r1, #25
   172b8:	f1be 0f02 	cmp.w	lr, #2
   172bc:	d9ef      	bls.n	1729e <d_print_comp_inner+0x21a>
   172be:	4607      	mov	r7, r0
   172c0:	e7ca      	b.n	17258 <d_print_comp_inner+0x1d4>
   172c2:	68af      	ldr	r7, [r5, #8]
   172c4:	686d      	ldr	r5, [r5, #4]
   172c6:	2f00      	cmp	r7, #0
   172c8:	d0aa      	beq.n	17220 <d_print_comp_inner+0x19c>
   172ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   172ce:	442f      	add	r7, r5
   172d0:	f04f 0800 	mov.w	r8, #0
   172d4:	e008      	b.n	172e8 <d_print_comp_inner+0x264>
   172d6:	460b      	mov	r3, r1
   172d8:	3101      	adds	r1, #1
   172da:	42bd      	cmp	r5, r7
   172dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172e0:	54e6      	strb	r6, [r4, r3]
   172e2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   172e6:	d09b      	beq.n	17220 <d_print_comp_inner+0x19c>
   172e8:	29ff      	cmp	r1, #255	; 0xff
   172ea:	f815 6b01 	ldrb.w	r6, [r5], #1
   172ee:	d1f2      	bne.n	172d6 <d_print_comp_inner+0x252>
   172f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   172f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172fc:	4620      	mov	r0, r4
   172fe:	4798      	blx	r3
   17300:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17304:	3301      	adds	r3, #1
   17306:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1730a:	2101      	movs	r1, #1
   1730c:	2300      	movs	r3, #0
   1730e:	e7e4      	b.n	172da <d_print_comp_inner+0x256>
   17310:	4e64      	ldr	r6, [pc, #400]	; (174a4 <d_print_comp_inner+0x420>)
   17312:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17316:	f106 0a11 	add.w	sl, r6, #17
   1731a:	f04f 0900 	mov.w	r9, #0
   1731e:	e009      	b.n	17334 <d_print_comp_inner+0x2b0>
   17320:	460b      	mov	r3, r1
   17322:	3101      	adds	r1, #1
   17324:	4556      	cmp	r6, sl
   17326:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1732a:	54e7      	strb	r7, [r4, r3]
   1732c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17330:	f001 8296 	beq.w	18860 <d_print_comp_inner+0x17dc>
   17334:	29ff      	cmp	r1, #255	; 0xff
   17336:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1733a:	d1f1      	bne.n	17320 <d_print_comp_inner+0x29c>
   1733c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17340:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17344:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17348:	4620      	mov	r0, r4
   1734a:	4798      	blx	r3
   1734c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17350:	3301      	adds	r3, #1
   17352:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17356:	2101      	movs	r1, #1
   17358:	2300      	movs	r3, #0
   1735a:	e7e3      	b.n	17324 <d_print_comp_inner+0x2a0>
   1735c:	4e52      	ldr	r6, [pc, #328]	; (174a8 <d_print_comp_inner+0x424>)
   1735e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17362:	f106 0a19 	add.w	sl, r6, #25
   17366:	f04f 0900 	mov.w	r9, #0
   1736a:	e009      	b.n	17380 <d_print_comp_inner+0x2fc>
   1736c:	460b      	mov	r3, r1
   1736e:	3101      	adds	r1, #1
   17370:	4556      	cmp	r6, sl
   17372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17376:	54e7      	strb	r7, [r4, r3]
   17378:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1737c:	f001 82a8 	beq.w	188d0 <d_print_comp_inner+0x184c>
   17380:	29ff      	cmp	r1, #255	; 0xff
   17382:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17386:	d1f1      	bne.n	1736c <d_print_comp_inner+0x2e8>
   17388:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1738c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17390:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17394:	4620      	mov	r0, r4
   17396:	4798      	blx	r3
   17398:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1739c:	3301      	adds	r3, #1
   1739e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173a2:	2101      	movs	r1, #1
   173a4:	2300      	movs	r3, #0
   173a6:	e7e3      	b.n	17370 <d_print_comp_inner+0x2ec>
   173a8:	4e40      	ldr	r6, [pc, #256]	; (174ac <d_print_comp_inner+0x428>)
   173aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173ae:	f106 0a15 	add.w	sl, r6, #21
   173b2:	f04f 0900 	mov.w	r9, #0
   173b6:	e009      	b.n	173cc <d_print_comp_inner+0x348>
   173b8:	460b      	mov	r3, r1
   173ba:	3101      	adds	r1, #1
   173bc:	4556      	cmp	r6, sl
   173be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   173c2:	54e7      	strb	r7, [r4, r3]
   173c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   173c8:	f001 8251 	beq.w	1886e <d_print_comp_inner+0x17ea>
   173cc:	29ff      	cmp	r1, #255	; 0xff
   173ce:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   173d2:	d1f1      	bne.n	173b8 <d_print_comp_inner+0x334>
   173d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   173d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   173dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173e0:	4620      	mov	r0, r4
   173e2:	4798      	blx	r3
   173e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173e8:	3301      	adds	r3, #1
   173ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173ee:	2101      	movs	r1, #1
   173f0:	2300      	movs	r3, #0
   173f2:	e7e3      	b.n	173bc <d_print_comp_inner+0x338>
   173f4:	4e2e      	ldr	r6, [pc, #184]	; (174b0 <d_print_comp_inner+0x42c>)
   173f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173fa:	f106 0a16 	add.w	sl, r6, #22
   173fe:	f04f 0900 	mov.w	r9, #0
   17402:	e009      	b.n	17418 <d_print_comp_inner+0x394>
   17404:	460b      	mov	r3, r1
   17406:	3101      	adds	r1, #1
   17408:	4556      	cmp	r6, sl
   1740a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1740e:	54e7      	strb	r7, [r4, r3]
   17410:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17414:	f001 8263 	beq.w	188de <d_print_comp_inner+0x185a>
   17418:	29ff      	cmp	r1, #255	; 0xff
   1741a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1741e:	d1f1      	bne.n	17404 <d_print_comp_inner+0x380>
   17420:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17424:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17428:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1742c:	4620      	mov	r0, r4
   1742e:	4798      	blx	r3
   17430:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17434:	3301      	adds	r3, #1
   17436:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1743a:	2101      	movs	r1, #1
   1743c:	2300      	movs	r3, #0
   1743e:	e7e3      	b.n	17408 <d_print_comp_inner+0x384>
   17440:	4e1c      	ldr	r6, [pc, #112]	; (174b4 <d_print_comp_inner+0x430>)
   17442:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17446:	f106 0a13 	add.w	sl, r6, #19
   1744a:	f04f 0900 	mov.w	r9, #0
   1744e:	e009      	b.n	17464 <d_print_comp_inner+0x3e0>
   17450:	460b      	mov	r3, r1
   17452:	3101      	adds	r1, #1
   17454:	45b2      	cmp	sl, r6
   17456:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1745a:	54e7      	strb	r7, [r4, r3]
   1745c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17460:	f001 8077 	beq.w	18552 <d_print_comp_inner+0x14ce>
   17464:	29ff      	cmp	r1, #255	; 0xff
   17466:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1746a:	d1f1      	bne.n	17450 <d_print_comp_inner+0x3cc>
   1746c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17470:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17474:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17478:	4620      	mov	r0, r4
   1747a:	4798      	blx	r3
   1747c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17480:	3301      	adds	r3, #1
   17482:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17486:	2101      	movs	r1, #1
   17488:	2300      	movs	r3, #0
   1748a:	e7e3      	b.n	17454 <d_print_comp_inner+0x3d0>
   1748c:	4e0a      	ldr	r6, [pc, #40]	; (174b8 <d_print_comp_inner+0x434>)
   1748e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17492:	f106 0a1a 	add.w	sl, r6, #26
   17496:	f04f 0900 	mov.w	r9, #0
   1749a:	e019      	b.n	174d0 <d_print_comp_inner+0x44c>
   1749c:	00024828 	.word	0x00024828
   174a0:	00024a24 	.word	0x00024a24
   174a4:	000249b3 	.word	0x000249b3
   174a8:	0002497f 	.word	0x0002497f
   174ac:	0002499b 	.word	0x0002499b
   174b0:	00024967 	.word	0x00024967
   174b4:	00024953 	.word	0x00024953
   174b8:	00024927 	.word	0x00024927
   174bc:	460b      	mov	r3, r1
   174be:	3101      	adds	r1, #1
   174c0:	4556      	cmp	r6, sl
   174c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   174c6:	54e7      	strb	r7, [r4, r3]
   174c8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   174cc:	f001 804f 	beq.w	1856e <d_print_comp_inner+0x14ea>
   174d0:	29ff      	cmp	r1, #255	; 0xff
   174d2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   174d6:	d1f1      	bne.n	174bc <d_print_comp_inner+0x438>
   174d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   174dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   174e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   174e4:	4620      	mov	r0, r4
   174e6:	4798      	blx	r3
   174e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   174ec:	3301      	adds	r3, #1
   174ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   174f2:	2101      	movs	r1, #1
   174f4:	2300      	movs	r3, #0
   174f6:	e7e3      	b.n	174c0 <d_print_comp_inner+0x43c>
   174f8:	4eb5      	ldr	r6, [pc, #724]	; (177d0 <d_print_comp_inner+0x74c>)
   174fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   174fe:	f106 0a0f 	add.w	sl, r6, #15
   17502:	f04f 0900 	mov.w	r9, #0
   17506:	e009      	b.n	1751c <d_print_comp_inner+0x498>
   17508:	460b      	mov	r3, r1
   1750a:	3101      	adds	r1, #1
   1750c:	4556      	cmp	r6, sl
   1750e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17512:	54e7      	strb	r7, [r4, r3]
   17514:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17518:	f001 8022 	beq.w	18560 <d_print_comp_inner+0x14dc>
   1751c:	29ff      	cmp	r1, #255	; 0xff
   1751e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17522:	d1f1      	bne.n	17508 <d_print_comp_inner+0x484>
   17524:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17528:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1752c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17530:	4620      	mov	r0, r4
   17532:	4798      	blx	r3
   17534:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17538:	3301      	adds	r3, #1
   1753a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1753e:	2101      	movs	r1, #1
   17540:	2300      	movs	r3, #0
   17542:	e7e3      	b.n	1750c <d_print_comp_inner+0x488>
   17544:	4ea3      	ldr	r6, [pc, #652]	; (177d4 <d_print_comp_inner+0x750>)
   17546:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1754a:	f106 0a11 	add.w	sl, r6, #17
   1754e:	f04f 0900 	mov.w	r9, #0
   17552:	e009      	b.n	17568 <d_print_comp_inner+0x4e4>
   17554:	460b      	mov	r3, r1
   17556:	3101      	adds	r1, #1
   17558:	4556      	cmp	r6, sl
   1755a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1755e:	54e7      	strb	r7, [r4, r3]
   17560:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17564:	f001 800a 	beq.w	1857c <d_print_comp_inner+0x14f8>
   17568:	29ff      	cmp	r1, #255	; 0xff
   1756a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1756e:	d1f1      	bne.n	17554 <d_print_comp_inner+0x4d0>
   17570:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17574:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17578:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1757c:	4620      	mov	r0, r4
   1757e:	4798      	blx	r3
   17580:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17584:	3301      	adds	r3, #1
   17586:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1758a:	2101      	movs	r1, #1
   1758c:	2300      	movs	r3, #0
   1758e:	e7e3      	b.n	17558 <d_print_comp_inner+0x4d4>
   17590:	4e91      	ldr	r6, [pc, #580]	; (177d8 <d_print_comp_inner+0x754>)
   17592:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17596:	f106 0a15 	add.w	sl, r6, #21
   1759a:	f04f 0900 	mov.w	r9, #0
   1759e:	e009      	b.n	175b4 <d_print_comp_inner+0x530>
   175a0:	460b      	mov	r3, r1
   175a2:	3101      	adds	r1, #1
   175a4:	4556      	cmp	r6, sl
   175a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   175aa:	54e7      	strb	r7, [r4, r3]
   175ac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   175b0:	f000 87b3 	beq.w	1851a <d_print_comp_inner+0x1496>
   175b4:	29ff      	cmp	r1, #255	; 0xff
   175b6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   175ba:	d1f1      	bne.n	175a0 <d_print_comp_inner+0x51c>
   175bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   175c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   175c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   175c8:	4620      	mov	r0, r4
   175ca:	4798      	blx	r3
   175cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175d0:	3301      	adds	r3, #1
   175d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   175d6:	2101      	movs	r1, #1
   175d8:	2300      	movs	r3, #0
   175da:	e7e3      	b.n	175a4 <d_print_comp_inner+0x520>
   175dc:	4e7f      	ldr	r6, [pc, #508]	; (177dc <d_print_comp_inner+0x758>)
   175de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   175e2:	f106 0a12 	add.w	sl, r6, #18
   175e6:	f04f 0900 	mov.w	r9, #0
   175ea:	e009      	b.n	17600 <d_print_comp_inner+0x57c>
   175ec:	460b      	mov	r3, r1
   175ee:	3101      	adds	r1, #1
   175f0:	45b2      	cmp	sl, r6
   175f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   175f6:	54e7      	strb	r7, [r4, r3]
   175f8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   175fc:	f000 879b 	beq.w	18536 <d_print_comp_inner+0x14b2>
   17600:	29ff      	cmp	r1, #255	; 0xff
   17602:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17606:	d1f1      	bne.n	175ec <d_print_comp_inner+0x568>
   17608:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1760c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17610:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17614:	4620      	mov	r0, r4
   17616:	4798      	blx	r3
   17618:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1761c:	3301      	adds	r3, #1
   1761e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17622:	2101      	movs	r1, #1
   17624:	2300      	movs	r3, #0
   17626:	e7e3      	b.n	175f0 <d_print_comp_inner+0x56c>
   17628:	4e6d      	ldr	r6, [pc, #436]	; (177e0 <d_print_comp_inner+0x75c>)
   1762a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1762e:	f106 0a10 	add.w	sl, r6, #16
   17632:	f04f 0900 	mov.w	r9, #0
   17636:	e009      	b.n	1764c <d_print_comp_inner+0x5c8>
   17638:	460b      	mov	r3, r1
   1763a:	3101      	adds	r1, #1
   1763c:	4556      	cmp	r6, sl
   1763e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17642:	54e7      	strb	r7, [r4, r3]
   17644:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17648:	f000 876e 	beq.w	18528 <d_print_comp_inner+0x14a4>
   1764c:	29ff      	cmp	r1, #255	; 0xff
   1764e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17652:	d1f1      	bne.n	17638 <d_print_comp_inner+0x5b4>
   17654:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17658:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1765c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17660:	4620      	mov	r0, r4
   17662:	4798      	blx	r3
   17664:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17668:	3301      	adds	r3, #1
   1766a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1766e:	2101      	movs	r1, #1
   17670:	2300      	movs	r3, #0
   17672:	e7e3      	b.n	1763c <d_print_comp_inner+0x5b8>
   17674:	4e5b      	ldr	r6, [pc, #364]	; (177e4 <d_print_comp_inner+0x760>)
   17676:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1767a:	f106 0a0d 	add.w	sl, r6, #13
   1767e:	f04f 0900 	mov.w	r9, #0
   17682:	e009      	b.n	17698 <d_print_comp_inner+0x614>
   17684:	460b      	mov	r3, r1
   17686:	3101      	adds	r1, #1
   17688:	4556      	cmp	r6, sl
   1768a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1768e:	54e7      	strb	r7, [r4, r3]
   17690:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17694:	f000 8756 	beq.w	18544 <d_print_comp_inner+0x14c0>
   17698:	29ff      	cmp	r1, #255	; 0xff
   1769a:	f816 7b01 	ldrb.w	r7, [r6], #1
   1769e:	d1f1      	bne.n	17684 <d_print_comp_inner+0x600>
   176a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176a4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   176a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176ac:	4620      	mov	r0, r4
   176ae:	4798      	blx	r3
   176b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176b4:	3301      	adds	r3, #1
   176b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176ba:	2101      	movs	r1, #1
   176bc:	2300      	movs	r3, #0
   176be:	e7e3      	b.n	17688 <d_print_comp_inner+0x604>
   176c0:	4e49      	ldr	r6, [pc, #292]	; (177e8 <d_print_comp_inner+0x764>)
   176c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   176c6:	f106 0a18 	add.w	sl, r6, #24
   176ca:	f04f 0900 	mov.w	r9, #0
   176ce:	e009      	b.n	176e4 <d_print_comp_inner+0x660>
   176d0:	460b      	mov	r3, r1
   176d2:	3101      	adds	r1, #1
   176d4:	45b2      	cmp	sl, r6
   176d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   176da:	54e7      	strb	r7, [r4, r3]
   176dc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   176e0:	f000 86e3 	beq.w	184aa <d_print_comp_inner+0x1426>
   176e4:	29ff      	cmp	r1, #255	; 0xff
   176e6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   176ea:	d1f1      	bne.n	176d0 <d_print_comp_inner+0x64c>
   176ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176f0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   176f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176f8:	4620      	mov	r0, r4
   176fa:	4798      	blx	r3
   176fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17700:	3301      	adds	r3, #1
   17702:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17706:	2101      	movs	r1, #1
   17708:	2300      	movs	r3, #0
   1770a:	e7e3      	b.n	176d4 <d_print_comp_inner+0x650>
   1770c:	4e37      	ldr	r6, [pc, #220]	; (177ec <d_print_comp_inner+0x768>)
   1770e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17712:	f106 0a0b 	add.w	sl, r6, #11
   17716:	f04f 0900 	mov.w	r9, #0
   1771a:	e009      	b.n	17730 <d_print_comp_inner+0x6ac>
   1771c:	460b      	mov	r3, r1
   1771e:	3101      	adds	r1, #1
   17720:	45b2      	cmp	sl, r6
   17722:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17726:	54e7      	strb	r7, [r4, r3]
   17728:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1772c:	f000 87ca 	beq.w	186c4 <d_print_comp_inner+0x1640>
   17730:	29ff      	cmp	r1, #255	; 0xff
   17732:	f816 7b01 	ldrb.w	r7, [r6], #1
   17736:	d1f1      	bne.n	1771c <d_print_comp_inner+0x698>
   17738:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1773c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17740:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17744:	4620      	mov	r0, r4
   17746:	4798      	blx	r3
   17748:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1774c:	3301      	adds	r3, #1
   1774e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17752:	2101      	movs	r1, #1
   17754:	2300      	movs	r3, #0
   17756:	e7e3      	b.n	17720 <d_print_comp_inner+0x69c>
   17758:	4e25      	ldr	r6, [pc, #148]	; (177f0 <d_print_comp_inner+0x76c>)
   1775a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1775e:	f106 0a08 	add.w	sl, r6, #8
   17762:	f04f 0900 	mov.w	r9, #0
   17766:	e009      	b.n	1777c <d_print_comp_inner+0x6f8>
   17768:	460b      	mov	r3, r1
   1776a:	3101      	adds	r1, #1
   1776c:	45b2      	cmp	sl, r6
   1776e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17772:	54e7      	strb	r7, [r4, r3]
   17774:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17778:	f000 86c8 	beq.w	1850c <d_print_comp_inner+0x1488>
   1777c:	29ff      	cmp	r1, #255	; 0xff
   1777e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17782:	d1f1      	bne.n	17768 <d_print_comp_inner+0x6e4>
   17784:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17788:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1778c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17790:	4620      	mov	r0, r4
   17792:	4798      	blx	r3
   17794:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17798:	3301      	adds	r3, #1
   1779a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1779e:	2101      	movs	r1, #1
   177a0:	2300      	movs	r3, #0
   177a2:	e7e3      	b.n	1776c <d_print_comp_inner+0x6e8>
   177a4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   177a8:	29ff      	cmp	r1, #255	; 0xff
   177aa:	f001 847c 	beq.w	190a6 <d_print_comp_inner+0x2022>
   177ae:	1c4a      	adds	r2, r1, #1
   177b0:	237e      	movs	r3, #126	; 0x7e
   177b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   177b6:	5463      	strb	r3, [r4, r1]
   177b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   177bc:	4641      	mov	r1, r8
   177be:	68aa      	ldr	r2, [r5, #8]
   177c0:	4620      	mov	r0, r4
   177c2:	f002 fa03 	bl	19bcc <d_print_comp>
   177c6:	e52b      	b.n	17220 <d_print_comp_inner+0x19c>
   177c8:	68aa      	ldr	r2, [r5, #8]
   177ca:	f002 f9ff 	bl	19bcc <d_print_comp>
   177ce:	e527      	b.n	17220 <d_print_comp_inner+0x19c>
   177d0:	00024943 	.word	0x00024943
   177d4:	00024913 	.word	0x00024913
   177d8:	0002490f 	.word	0x0002490f
   177dc:	000248e7 	.word	0x000248e7
   177e0:	000248fb 	.word	0x000248fb
   177e4:	000248d8 	.word	0x000248d8
   177e8:	000248b3 	.word	0x000248b3
   177ec:	0002489c 	.word	0x0002489c
   177f0:	000248a7 	.word	0x000248a7
   177f4:	2200      	movs	r2, #0
   177f6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   177fa:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   177fe:	686e      	ldr	r6, [r5, #4]
   17800:	9300      	str	r3, [sp, #0]
   17802:	2e00      	cmp	r6, #0
   17804:	f000 864c 	beq.w	184a0 <d_print_comp_inner+0x141c>
   17808:	f10d 0910 	add.w	r9, sp, #16
   1780c:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   17810:	4617      	mov	r7, r2
   17812:	4696      	mov	lr, r2
   17814:	464b      	mov	r3, r9
   17816:	7831      	ldrb	r1, [r6, #0]
   17818:	601a      	str	r2, [r3, #0]
   1781a:	f1a1 021c 	sub.w	r2, r1, #28
   1781e:	2a04      	cmp	r2, #4
   17820:	605e      	str	r6, [r3, #4]
   17822:	f8c3 e008 	str.w	lr, [r3, #8]
   17826:	f8c3 c00c 	str.w	ip, [r3, #12]
   1782a:	f107 0701 	add.w	r7, r7, #1
   1782e:	4618      	mov	r0, r3
   17830:	461a      	mov	r2, r3
   17832:	f240 862a 	bls.w	1848a <d_print_comp_inner+0x1406>
   17836:	294c      	cmp	r1, #76	; 0x4c
   17838:	f000 8627 	beq.w	1848a <d_print_comp_inner+0x1406>
   1783c:	2904      	cmp	r1, #4
   1783e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17842:	f001 87bb 	beq.w	197bc <d_print_comp_inner+0x2738>
   17846:	2902      	cmp	r1, #2
   17848:	d11a      	bne.n	17880 <d_print_comp_inner+0x7fc>
   1784a:	f8d6 b008 	ldr.w	fp, [r6, #8]
   1784e:	f89b 3000 	ldrb.w	r3, [fp]
   17852:	2b46      	cmp	r3, #70	; 0x46
   17854:	f002 8035 	beq.w	198c2 <d_print_comp_inner+0x283e>
   17858:	462b      	mov	r3, r5
   1785a:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   1785e:	9601      	str	r6, [sp, #4]
   17860:	465d      	mov	r5, fp
   17862:	4676      	mov	r6, lr
   17864:	46a2      	mov	sl, r4
   17866:	469b      	mov	fp, r3
   17868:	782b      	ldrb	r3, [r5, #0]
   1786a:	f1a3 021c 	sub.w	r2, r3, #28
   1786e:	2a04      	cmp	r2, #4
   17870:	f241 805d 	bls.w	1892e <d_print_comp_inner+0x18aa>
   17874:	2b4c      	cmp	r3, #76	; 0x4c
   17876:	f001 805a 	beq.w	1892e <d_print_comp_inner+0x18aa>
   1787a:	9e01      	ldr	r6, [sp, #4]
   1787c:	4654      	mov	r4, sl
   1787e:	465d      	mov	r5, fp
   17880:	68aa      	ldr	r2, [r5, #8]
   17882:	4641      	mov	r1, r8
   17884:	4620      	mov	r0, r4
   17886:	f002 f9a1 	bl	19bcc <d_print_comp>
   1788a:	7833      	ldrb	r3, [r6, #0]
   1788c:	2b04      	cmp	r3, #4
   1788e:	f002 8020 	beq.w	198d2 <d_print_comp_inner+0x284e>
   17892:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17896:	2620      	movs	r6, #32
   17898:	f859 5c08 	ldr.w	r5, [r9, #-8]
   1789c:	3f01      	subs	r7, #1
   1789e:	b985      	cbnz	r5, 178c2 <d_print_comp_inner+0x83e>
   178a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   178a4:	29ff      	cmp	r1, #255	; 0xff
   178a6:	f002 8043 	beq.w	19930 <d_print_comp_inner+0x28ac>
   178aa:	1c4b      	adds	r3, r1, #1
   178ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   178b0:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   178b4:	5466      	strb	r6, [r4, r1]
   178b6:	4620      	mov	r0, r4
   178b8:	4641      	mov	r1, r8
   178ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   178be:	f002 f995 	bl	19bec <d_print_mod>
   178c2:	f1a9 0910 	sub.w	r9, r9, #16
   178c6:	2f00      	cmp	r7, #0
   178c8:	d1e6      	bne.n	17898 <d_print_comp_inner+0x814>
   178ca:	9b00      	ldr	r3, [sp, #0]
   178cc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   178d0:	e4a6      	b.n	17220 <d_print_comp_inner+0x19c>
   178d2:	4ed1      	ldr	r6, [pc, #836]	; (17c18 <d_print_comp_inner+0xb94>)
   178d4:	686a      	ldr	r2, [r5, #4]
   178d6:	f002 f979 	bl	19bcc <d_print_comp>
   178da:	f106 0a05 	add.w	sl, r6, #5
   178de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   178e2:	f04f 0900 	mov.w	r9, #0
   178e6:	e009      	b.n	178fc <d_print_comp_inner+0x878>
   178e8:	460b      	mov	r3, r1
   178ea:	3101      	adds	r1, #1
   178ec:	45b2      	cmp	sl, r6
   178ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   178f2:	54e7      	strb	r7, [r4, r3]
   178f4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   178f8:	f000 86d1 	beq.w	1869e <d_print_comp_inner+0x161a>
   178fc:	29ff      	cmp	r1, #255	; 0xff
   178fe:	f816 7b01 	ldrb.w	r7, [r6], #1
   17902:	d1f1      	bne.n	178e8 <d_print_comp_inner+0x864>
   17904:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17908:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1790c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17910:	4620      	mov	r0, r4
   17912:	4798      	blx	r3
   17914:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17918:	3301      	adds	r3, #1
   1791a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1791e:	2101      	movs	r1, #1
   17920:	2300      	movs	r3, #0
   17922:	e7e3      	b.n	178ec <d_print_comp_inner+0x868>
   17924:	686a      	ldr	r2, [r5, #4]
   17926:	f002 f951 	bl	19bcc <d_print_comp>
   1792a:	f018 0904 	ands.w	r9, r8, #4
   1792e:	f001 82aa 	beq.w	18e86 <d_print_comp_inner+0x1e02>
   17932:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17936:	29ff      	cmp	r1, #255	; 0xff
   17938:	f001 859a 	beq.w	19470 <d_print_comp_inner+0x23ec>
   1793c:	1c4a      	adds	r2, r1, #1
   1793e:	232e      	movs	r3, #46	; 0x2e
   17940:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17944:	5463      	strb	r3, [r4, r1]
   17946:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1794a:	68ad      	ldr	r5, [r5, #8]
   1794c:	782b      	ldrb	r3, [r5, #0]
   1794e:	2b46      	cmp	r3, #70	; 0x46
   17950:	f001 83cc 	beq.w	190ec <d_print_comp_inner+0x2068>
   17954:	462a      	mov	r2, r5
   17956:	4641      	mov	r1, r8
   17958:	4620      	mov	r0, r4
   1795a:	f002 f937 	bl	19bcc <d_print_comp>
   1795e:	e45f      	b.n	17220 <d_print_comp_inner+0x19c>
   17960:	f011 0804 	ands.w	r8, r1, #4
   17964:	f041 808b 	bne.w	18a7e <d_print_comp_inner+0x19fa>
   17968:	68af      	ldr	r7, [r5, #8]
   1796a:	686d      	ldr	r5, [r5, #4]
   1796c:	2f00      	cmp	r7, #0
   1796e:	f43f ac57 	beq.w	17220 <d_print_comp_inner+0x19c>
   17972:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17976:	442f      	add	r7, r5
   17978:	e009      	b.n	1798e <d_print_comp_inner+0x90a>
   1797a:	460b      	mov	r3, r1
   1797c:	3101      	adds	r1, #1
   1797e:	42bd      	cmp	r5, r7
   17980:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17984:	54e6      	strb	r6, [r4, r3]
   17986:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1798a:	f43f ac49 	beq.w	17220 <d_print_comp_inner+0x19c>
   1798e:	29ff      	cmp	r1, #255	; 0xff
   17990:	f815 6b01 	ldrb.w	r6, [r5], #1
   17994:	d1f1      	bne.n	1797a <d_print_comp_inner+0x8f6>
   17996:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1799a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1799e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   179a2:	4620      	mov	r0, r4
   179a4:	4798      	blx	r3
   179a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   179aa:	3301      	adds	r3, #1
   179ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   179b0:	2101      	movs	r1, #1
   179b2:	2300      	movs	r3, #0
   179b4:	e7e3      	b.n	1797e <d_print_comp_inner+0x8fa>
   179b6:	2301      	movs	r3, #1
   179b8:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   179bc:	e430      	b.n	17220 <d_print_comp_inner+0x19c>
   179be:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   179c2:	2b00      	cmp	r3, #0
   179c4:	f041 8106 	bne.w	18bd4 <d_print_comp_inner+0x1b50>
   179c8:	1d29      	adds	r1, r5, #4
   179ca:	f7fd fa97 	bl	14efc <d_lookup_template_argument.isra.6>
   179ce:	2800      	cmp	r0, #0
   179d0:	f43f ac3a 	beq.w	17248 <d_print_comp_inner+0x1c4>
   179d4:	7803      	ldrb	r3, [r0, #0]
   179d6:	2b2f      	cmp	r3, #47	; 0x2f
   179d8:	f001 83fc 	beq.w	191d4 <d_print_comp_inner+0x2150>
   179dc:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   179e0:	682b      	ldr	r3, [r5, #0]
   179e2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   179e6:	4602      	mov	r2, r0
   179e8:	4641      	mov	r1, r8
   179ea:	4620      	mov	r0, r4
   179ec:	f002 f8ee 	bl	19bcc <d_print_comp>
   179f0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   179f4:	e414      	b.n	17220 <d_print_comp_inner+0x19c>
   179f6:	2300      	movs	r3, #0
   179f8:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   179fc:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   17a00:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17a04:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   17a08:	f011 0f04 	tst.w	r1, #4
   17a0c:	686e      	ldr	r6, [r5, #4]
   17a0e:	d005      	beq.n	17a1c <d_print_comp_inner+0x998>
   17a10:	7833      	ldrb	r3, [r6, #0]
   17a12:	b91b      	cbnz	r3, 17a1c <d_print_comp_inner+0x998>
   17a14:	68b2      	ldr	r2, [r6, #8]
   17a16:	2a06      	cmp	r2, #6
   17a18:	f001 853c 	beq.w	19494 <d_print_comp_inner+0x2410>
   17a1c:	4632      	mov	r2, r6
   17a1e:	4641      	mov	r1, r8
   17a20:	4620      	mov	r0, r4
   17a22:	f002 f8d3 	bl	19bcc <d_print_comp>
   17a26:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   17a2a:	2b3c      	cmp	r3, #60	; 0x3c
   17a2c:	f001 8274 	beq.w	18f18 <d_print_comp_inner+0x1e94>
   17a30:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17a34:	2bff      	cmp	r3, #255	; 0xff
   17a36:	f001 8489 	beq.w	1934c <d_print_comp_inner+0x22c8>
   17a3a:	1c59      	adds	r1, r3, #1
   17a3c:	223c      	movs	r2, #60	; 0x3c
   17a3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a42:	54e2      	strb	r2, [r4, r3]
   17a44:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17a48:	4641      	mov	r1, r8
   17a4a:	68aa      	ldr	r2, [r5, #8]
   17a4c:	4620      	mov	r0, r4
   17a4e:	f002 f8bd 	bl	19bcc <d_print_comp>
   17a52:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   17a56:	2b3e      	cmp	r3, #62	; 0x3e
   17a58:	f001 8239 	beq.w	18ece <d_print_comp_inner+0x1e4a>
   17a5c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17a60:	2bff      	cmp	r3, #255	; 0xff
   17a62:	f001 8460 	beq.w	19326 <d_print_comp_inner+0x22a2>
   17a66:	1c59      	adds	r1, r3, #1
   17a68:	223e      	movs	r2, #62	; 0x3e
   17a6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a6e:	54e2      	strb	r2, [r4, r3]
   17a70:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17a74:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   17a78:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   17a7c:	f7ff bbd0 	b.w	17220 <d_print_comp_inner+0x19c>
   17a80:	686f      	ldr	r7, [r5, #4]
   17a82:	2f00      	cmp	r7, #0
   17a84:	f001 8082 	beq.w	18b8c <d_print_comp_inner+0x1b08>
   17a88:	4d64      	ldr	r5, [pc, #400]	; (17c1c <d_print_comp_inner+0xb98>)
   17a8a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a8e:	f105 0906 	add.w	r9, r5, #6
   17a92:	f04f 0800 	mov.w	r8, #0
   17a96:	e009      	b.n	17aac <d_print_comp_inner+0xa28>
   17a98:	460b      	mov	r3, r1
   17a9a:	3101      	adds	r1, #1
   17a9c:	45a9      	cmp	r9, r5
   17a9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17aa2:	54e6      	strb	r6, [r4, r3]
   17aa4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17aa8:	f000 8782 	beq.w	189b0 <d_print_comp_inner+0x192c>
   17aac:	29ff      	cmp	r1, #255	; 0xff
   17aae:	f815 6b01 	ldrb.w	r6, [r5], #1
   17ab2:	d1f1      	bne.n	17a98 <d_print_comp_inner+0xa14>
   17ab4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ab8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17abc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ac0:	4620      	mov	r0, r4
   17ac2:	4798      	blx	r3
   17ac4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ac8:	3301      	adds	r3, #1
   17aca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ace:	2101      	movs	r1, #1
   17ad0:	2300      	movs	r3, #0
   17ad2:	e7e3      	b.n	17a9c <d_print_comp_inner+0xa18>
   17ad4:	4e52      	ldr	r6, [pc, #328]	; (17c20 <d_print_comp_inner+0xb9c>)
   17ad6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17ada:	f106 0a0a 	add.w	sl, r6, #10
   17ade:	f04f 0900 	mov.w	r9, #0
   17ae2:	e009      	b.n	17af8 <d_print_comp_inner+0xa74>
   17ae4:	460b      	mov	r3, r1
   17ae6:	3101      	adds	r1, #1
   17ae8:	4556      	cmp	r6, sl
   17aea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17aee:	54e7      	strb	r7, [r4, r3]
   17af0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17af4:	f000 8701 	beq.w	188fa <d_print_comp_inner+0x1876>
   17af8:	29ff      	cmp	r1, #255	; 0xff
   17afa:	f816 7b01 	ldrb.w	r7, [r6], #1
   17afe:	d1f1      	bne.n	17ae4 <d_print_comp_inner+0xa60>
   17b00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b04:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17b08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b0c:	4620      	mov	r0, r4
   17b0e:	4798      	blx	r3
   17b10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b14:	3301      	adds	r3, #1
   17b16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b1a:	2101      	movs	r1, #1
   17b1c:	2300      	movs	r3, #0
   17b1e:	e7e3      	b.n	17ae8 <d_print_comp_inner+0xa64>
   17b20:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b24:	792d      	ldrb	r5, [r5, #4]
   17b26:	29ff      	cmp	r1, #255	; 0xff
   17b28:	f001 82ab 	beq.w	19082 <d_print_comp_inner+0x1ffe>
   17b2c:	1c4b      	adds	r3, r1, #1
   17b2e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17b32:	5465      	strb	r5, [r4, r1]
   17b34:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17b38:	f7ff bb72 	b.w	17220 <d_print_comp_inner+0x19c>
   17b3c:	686a      	ldr	r2, [r5, #4]
   17b3e:	f002 f845 	bl	19bcc <d_print_comp>
   17b42:	68aa      	ldr	r2, [r5, #8]
   17b44:	4641      	mov	r1, r8
   17b46:	4620      	mov	r0, r4
   17b48:	f002 f840 	bl	19bcc <d_print_comp>
   17b4c:	f7ff bb68 	b.w	17220 <d_print_comp_inner+0x19c>
   17b50:	4e34      	ldr	r6, [pc, #208]	; (17c24 <d_print_comp_inner+0xba0>)
   17b52:	686a      	ldr	r2, [r5, #4]
   17b54:	f002 f83a 	bl	19bcc <d_print_comp>
   17b58:	f106 0a08 	add.w	sl, r6, #8
   17b5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17b60:	f04f 0900 	mov.w	r9, #0
   17b64:	e009      	b.n	17b7a <d_print_comp_inner+0xaf6>
   17b66:	460b      	mov	r3, r1
   17b68:	3101      	adds	r1, #1
   17b6a:	4556      	cmp	r6, sl
   17b6c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b70:	54e7      	strb	r7, [r4, r3]
   17b72:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17b76:	f000 8508 	beq.w	1858a <d_print_comp_inner+0x1506>
   17b7a:	29ff      	cmp	r1, #255	; 0xff
   17b7c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17b80:	d1f1      	bne.n	17b66 <d_print_comp_inner+0xae2>
   17b82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b86:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17b8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b8e:	4620      	mov	r0, r4
   17b90:	4798      	blx	r3
   17b92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b96:	3301      	adds	r3, #1
   17b98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b9c:	2101      	movs	r1, #1
   17b9e:	2300      	movs	r3, #0
   17ba0:	e7e3      	b.n	17b6a <d_print_comp_inner+0xae6>
   17ba2:	686a      	ldr	r2, [r5, #4]
   17ba4:	b10a      	cbz	r2, 17baa <d_print_comp_inner+0xb26>
   17ba6:	f002 f811 	bl	19bcc <d_print_comp>
   17baa:	68ab      	ldr	r3, [r5, #8]
   17bac:	2b00      	cmp	r3, #0
   17bae:	f43f ab37 	beq.w	17220 <d_print_comp_inner+0x19c>
   17bb2:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   17bb6:	2efd      	cmp	r6, #253	; 0xfd
   17bb8:	f201 81bc 	bhi.w	18f34 <d_print_comp_inner+0x1eb0>
   17bbc:	4f1a      	ldr	r7, [pc, #104]	; (17c28 <d_print_comp_inner+0xba4>)
   17bbe:	f04f 0a00 	mov.w	sl, #0
   17bc2:	f107 0b02 	add.w	fp, r7, #2
   17bc6:	4631      	mov	r1, r6
   17bc8:	e009      	b.n	17bde <d_print_comp_inner+0xb5a>
   17bca:	460b      	mov	r3, r1
   17bcc:	3101      	adds	r1, #1
   17bce:	455f      	cmp	r7, fp
   17bd0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17bd4:	54e6      	strb	r6, [r4, r3]
   17bd6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17bda:	f000 86c1 	beq.w	18960 <d_print_comp_inner+0x18dc>
   17bde:	29ff      	cmp	r1, #255	; 0xff
   17be0:	f817 6b01 	ldrb.w	r6, [r7], #1
   17be4:	d1f1      	bne.n	17bca <d_print_comp_inner+0xb46>
   17be6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17bea:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17bee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17bf2:	4620      	mov	r0, r4
   17bf4:	4798      	blx	r3
   17bf6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17bfa:	3301      	adds	r3, #1
   17bfc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c00:	2101      	movs	r1, #1
   17c02:	2300      	movs	r3, #0
   17c04:	e7e3      	b.n	17bce <d_print_comp_inner+0xb4a>
   17c06:	4e09      	ldr	r6, [pc, #36]	; (17c2c <d_print_comp_inner+0xba8>)
   17c08:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c0c:	f106 0a09 	add.w	sl, r6, #9
   17c10:	f04f 0900 	mov.w	r9, #0
   17c14:	e016      	b.n	17c44 <d_print_comp_inner+0xbc0>
   17c16:	bf00      	nop
   17c18:	00024868 	.word	0x00024868
   17c1c:	00024a74 	.word	0x00024a74
   17c20:	00024a60 	.word	0x00024a60
   17c24:	00024adb 	.word	0x00024adb
   17c28:	000249fc 	.word	0x000249fc
   17c2c:	00024a0b 	.word	0x00024a0b
   17c30:	460b      	mov	r3, r1
   17c32:	3101      	adds	r1, #1
   17c34:	4556      	cmp	r6, sl
   17c36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c3a:	54e7      	strb	r7, [r4, r3]
   17c3c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c40:	f000 8594 	beq.w	1876c <d_print_comp_inner+0x16e8>
   17c44:	29ff      	cmp	r1, #255	; 0xff
   17c46:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c4a:	d1f1      	bne.n	17c30 <d_print_comp_inner+0xbac>
   17c4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c50:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17c54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c58:	4620      	mov	r0, r4
   17c5a:	4798      	blx	r3
   17c5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c60:	3301      	adds	r3, #1
   17c62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c66:	2101      	movs	r1, #1
   17c68:	2300      	movs	r3, #0
   17c6a:	e7e3      	b.n	17c34 <d_print_comp_inner+0xbb0>
   17c6c:	4ed1      	ldr	r6, [pc, #836]	; (17fb4 <d_print_comp_inner+0xf30>)
   17c6e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c72:	f106 0a09 	add.w	sl, r6, #9
   17c76:	f04f 0900 	mov.w	r9, #0
   17c7a:	e009      	b.n	17c90 <d_print_comp_inner+0xc0c>
   17c7c:	460b      	mov	r3, r1
   17c7e:	3101      	adds	r1, #1
   17c80:	4556      	cmp	r6, sl
   17c82:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c86:	54e7      	strb	r7, [r4, r3]
   17c88:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c8c:	f000 8597 	beq.w	187be <d_print_comp_inner+0x173a>
   17c90:	29ff      	cmp	r1, #255	; 0xff
   17c92:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c96:	d1f1      	bne.n	17c7c <d_print_comp_inner+0xbf8>
   17c98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c9c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17ca0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ca4:	4620      	mov	r0, r4
   17ca6:	4798      	blx	r3
   17ca8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17cac:	3301      	adds	r3, #1
   17cae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17cb2:	2101      	movs	r1, #1
   17cb4:	2300      	movs	r3, #0
   17cb6:	e7e3      	b.n	17c80 <d_print_comp_inner+0xbfc>
   17cb8:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17cbc:	4dbe      	ldr	r5, [pc, #760]	; (17fb8 <d_print_comp_inner+0xf34>)
   17cbe:	f8da 7008 	ldr.w	r7, [sl, #8]
   17cc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17cc6:	f105 0808 	add.w	r8, r5, #8
   17cca:	f04f 0900 	mov.w	r9, #0
   17cce:	e009      	b.n	17ce4 <d_print_comp_inner+0xc60>
   17cd0:	460b      	mov	r3, r1
   17cd2:	3101      	adds	r1, #1
   17cd4:	45a8      	cmp	r8, r5
   17cd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cda:	54e6      	strb	r6, [r4, r3]
   17cdc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17ce0:	f000 8506 	beq.w	186f0 <d_print_comp_inner+0x166c>
   17ce4:	29ff      	cmp	r1, #255	; 0xff
   17ce6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   17cea:	d1f1      	bne.n	17cd0 <d_print_comp_inner+0xc4c>
   17cec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17cf0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17cf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17cf8:	4620      	mov	r0, r4
   17cfa:	4798      	blx	r3
   17cfc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d00:	3301      	adds	r3, #1
   17d02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d06:	2101      	movs	r1, #1
   17d08:	2300      	movs	r3, #0
   17d0a:	e7e3      	b.n	17cd4 <d_print_comp_inner+0xc50>
   17d0c:	686a      	ldr	r2, [r5, #4]
   17d0e:	68ae      	ldr	r6, [r5, #8]
   17d10:	b10a      	cbz	r2, 17d16 <d_print_comp_inner+0xc92>
   17d12:	f001 ff5b 	bl	19bcc <d_print_comp>
   17d16:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17d1a:	2bff      	cmp	r3, #255	; 0xff
   17d1c:	f001 82b1 	beq.w	19282 <d_print_comp_inner+0x21fe>
   17d20:	1c5a      	adds	r2, r3, #1
   17d22:	257b      	movs	r5, #123	; 0x7b
   17d24:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17d28:	4641      	mov	r1, r8
   17d2a:	54e5      	strb	r5, [r4, r3]
   17d2c:	4632      	mov	r2, r6
   17d2e:	4620      	mov	r0, r4
   17d30:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17d34:	f001 ff4a 	bl	19bcc <d_print_comp>
   17d38:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17d3c:	29ff      	cmp	r1, #255	; 0xff
   17d3e:	f001 81e7 	beq.w	19110 <d_print_comp_inner+0x208c>
   17d42:	1c4a      	adds	r2, r1, #1
   17d44:	237d      	movs	r3, #125	; 0x7d
   17d46:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17d4a:	5463      	strb	r3, [r4, r1]
   17d4c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17d50:	f7ff ba66 	b.w	17220 <d_print_comp_inner+0x19c>
   17d54:	f8d5 9004 	ldr.w	r9, [r5, #4]
   17d58:	68ae      	ldr	r6, [r5, #8]
   17d5a:	f899 3000 	ldrb.w	r3, [r9]
   17d5e:	2b31      	cmp	r3, #49	; 0x31
   17d60:	f000 87cb 	beq.w	18cfa <d_print_comp_inner+0x1c76>
   17d64:	2b33      	cmp	r3, #51	; 0x33
   17d66:	f041 86d3 	bne.w	19b10 <d_print_comp_inner+0x2a8c>
   17d6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d6e:	29ff      	cmp	r1, #255	; 0xff
   17d70:	f001 84c3 	beq.w	196fa <d_print_comp_inner+0x2676>
   17d74:	1c4a      	adds	r2, r1, #1
   17d76:	2328      	movs	r3, #40	; 0x28
   17d78:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17d7c:	5463      	strb	r3, [r4, r1]
   17d7e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17d82:	a904      	add	r1, sp, #16
   17d84:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17d88:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   17d8c:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   17d90:	4620      	mov	r0, r4
   17d92:	4641      	mov	r1, r8
   17d94:	9305      	str	r3, [sp, #20]
   17d96:	9204      	str	r2, [sp, #16]
   17d98:	f7ff f974 	bl	17084 <d_print_comp_inner>
   17d9c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17da0:	9b05      	ldr	r3, [sp, #20]
   17da2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   17da6:	29ff      	cmp	r1, #255	; 0xff
   17da8:	f001 8496 	beq.w	196d8 <d_print_comp_inner+0x2654>
   17dac:	2329      	movs	r3, #41	; 0x29
   17dae:	1c4a      	adds	r2, r1, #1
   17db0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17db4:	5463      	strb	r3, [r4, r1]
   17db6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17dba:	4632      	mov	r2, r6
   17dbc:	4641      	mov	r1, r8
   17dbe:	4620      	mov	r0, r4
   17dc0:	f002 fd2a 	bl	1a818 <d_print_subexpr>
   17dc4:	f7ff ba2c 	b.w	17220 <d_print_comp_inner+0x19c>
   17dc8:	686a      	ldr	r2, [r5, #4]
   17dca:	f002 fce7 	bl	1a79c <d_print_expr_op>
   17dce:	f7ff ba27 	b.w	17220 <d_print_comp_inner+0x19c>
   17dd2:	f011 0f20 	tst.w	r1, #32
   17dd6:	f040 8753 	bne.w	18c80 <d_print_comp_inner+0x1bfc>
   17dda:	686a      	ldr	r2, [r5, #4]
   17ddc:	b11a      	cbz	r2, 17de6 <d_print_comp_inner+0xd62>
   17dde:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   17de2:	f001 81d0 	beq.w	19186 <d_print_comp_inner+0x2102>
   17de6:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   17dea:	f105 0208 	add.w	r2, r5, #8
   17dee:	4641      	mov	r1, r8
   17df0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17df4:	4620      	mov	r0, r4
   17df6:	f002 fbdd 	bl	1a5b4 <d_print_function_type.isra.11>
   17dfa:	f7ff ba11 	b.w	17220 <d_print_comp_inner+0x19c>
   17dfe:	f011 0804 	ands.w	r8, r1, #4
   17e02:	686b      	ldr	r3, [r5, #4]
   17e04:	f040 8612 	bne.w	18a2c <d_print_comp_inner+0x19a8>
   17e08:	e893 00a0 	ldmia.w	r3, {r5, r7}
   17e0c:	2f00      	cmp	r7, #0
   17e0e:	f43f aa07 	beq.w	17220 <d_print_comp_inner+0x19c>
   17e12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e16:	442f      	add	r7, r5
   17e18:	e009      	b.n	17e2e <d_print_comp_inner+0xdaa>
   17e1a:	460b      	mov	r3, r1
   17e1c:	3101      	adds	r1, #1
   17e1e:	42bd      	cmp	r5, r7
   17e20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e24:	54e6      	strb	r6, [r4, r3]
   17e26:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17e2a:	f43f a9f9 	beq.w	17220 <d_print_comp_inner+0x19c>
   17e2e:	29ff      	cmp	r1, #255	; 0xff
   17e30:	f815 6b01 	ldrb.w	r6, [r5], #1
   17e34:	d1f1      	bne.n	17e1a <d_print_comp_inner+0xd96>
   17e36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e3a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17e3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e42:	4620      	mov	r0, r4
   17e44:	4798      	blx	r3
   17e46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e4a:	3301      	adds	r3, #1
   17e4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e50:	2101      	movs	r1, #1
   17e52:	2300      	movs	r3, #0
   17e54:	e7e3      	b.n	17e1e <d_print_comp_inner+0xd9a>
   17e56:	6869      	ldr	r1, [r5, #4]
   17e58:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   17e5c:	780b      	ldrb	r3, [r1, #0]
   17e5e:	2f00      	cmp	r7, #0
   17e60:	f040 85e1 	bne.w	18a26 <d_print_comp_inner+0x19a2>
   17e64:	2b05      	cmp	r3, #5
   17e66:	f001 81c7 	beq.w	191f8 <d_print_comp_inner+0x2174>
   17e6a:	2b23      	cmp	r3, #35	; 0x23
   17e6c:	f000 8689 	beq.w	18b82 <d_print_comp_inner+0x1afe>
   17e70:	782a      	ldrb	r2, [r5, #0]
   17e72:	429a      	cmp	r2, r3
   17e74:	f000 8685 	beq.w	18b82 <d_print_comp_inner+0x1afe>
   17e78:	2b24      	cmp	r3, #36	; 0x24
   17e7a:	f47f a9eb 	bne.w	17254 <d_print_comp_inner+0x1d0>
   17e7e:	a814      	add	r0, sp, #80	; 0x50
   17e80:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17e84:	684a      	ldr	r2, [r1, #4]
   17e86:	f840 3d40 	str.w	r3, [r0, #-64]!
   17e8a:	2100      	movs	r1, #0
   17e8c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17e90:	9505      	str	r5, [sp, #20]
   17e92:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17e96:	9106      	str	r1, [sp, #24]
   17e98:	9307      	str	r3, [sp, #28]
   17e9a:	2a00      	cmp	r2, #0
   17e9c:	f47f a9e8 	bne.w	17270 <d_print_comp_inner+0x1ec>
   17ea0:	f7ff b9e5 	b.w	1726e <d_print_comp_inner+0x1ea>
   17ea4:	686a      	ldr	r2, [r5, #4]
   17ea6:	f001 fe91 	bl	19bcc <d_print_comp>
   17eaa:	f7ff b9b9 	b.w	17220 <d_print_comp_inner+0x19c>
   17eae:	ab14      	add	r3, sp, #80	; 0x50
   17eb0:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   17eb4:	f843 2d40 	str.w	r2, [r3, #-64]!
   17eb8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17ebc:	68aa      	ldr	r2, [r5, #8]
   17ebe:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17ec2:	9307      	str	r3, [sp, #28]
   17ec4:	2600      	movs	r6, #0
   17ec6:	9505      	str	r5, [sp, #20]
   17ec8:	9606      	str	r6, [sp, #24]
   17eca:	f001 fe7f 	bl	19bcc <d_print_comp>
   17ece:	9b06      	ldr	r3, [sp, #24]
   17ed0:	b923      	cbnz	r3, 17edc <d_print_comp_inner+0xe58>
   17ed2:	462a      	mov	r2, r5
   17ed4:	4641      	mov	r1, r8
   17ed6:	4620      	mov	r0, r4
   17ed8:	f001 fe88 	bl	19bec <d_print_mod>
   17edc:	9b04      	ldr	r3, [sp, #16]
   17ede:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17ee2:	f7ff b99d 	b.w	17220 <d_print_comp_inner+0x19c>
   17ee6:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   17eea:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   17eee:	f849 bd40 	str.w	fp, [r9, #-64]!
   17ef2:	2200      	movs	r2, #0
   17ef4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17ef8:	f8cd b000 	str.w	fp, [sp]
   17efc:	4659      	mov	r1, fp
   17efe:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   17f02:	9505      	str	r5, [sp, #20]
   17f04:	9206      	str	r2, [sp, #24]
   17f06:	9307      	str	r3, [sp, #28]
   17f08:	2900      	cmp	r1, #0
   17f0a:	f001 83a0 	beq.w	1964e <d_print_comp_inner+0x25ca>
   17f0e:	684b      	ldr	r3, [r1, #4]
   17f10:	781b      	ldrb	r3, [r3, #0]
   17f12:	3b19      	subs	r3, #25
   17f14:	2b02      	cmp	r3, #2
   17f16:	f201 839a 	bhi.w	1964e <d_print_comp_inner+0x25ca>
   17f1a:	46ac      	mov	ip, r5
   17f1c:	2701      	movs	r7, #1
   17f1e:	460e      	mov	r6, r1
   17f20:	464d      	mov	r5, r9
   17f22:	e004      	b.n	17f2e <d_print_comp_inner+0xeaa>
   17f24:	6873      	ldr	r3, [r6, #4]
   17f26:	781b      	ldrb	r3, [r3, #0]
   17f28:	3b19      	subs	r3, #25
   17f2a:	2b02      	cmp	r3, #2
   17f2c:	d81b      	bhi.n	17f66 <d_print_comp_inner+0xee2>
   17f2e:	68b3      	ldr	r3, [r6, #8]
   17f30:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17f34:	aa14      	add	r2, sp, #80	; 0x50
   17f36:	eb02 0b0e 	add.w	fp, r2, lr
   17f3a:	b98b      	cbnz	r3, 17f60 <d_print_comp_inner+0xedc>
   17f3c:	2f03      	cmp	r7, #3
   17f3e:	f201 80f9 	bhi.w	19134 <d_print_comp_inner+0x20b0>
   17f42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17f46:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   17f4a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17f4e:	f84b 5c40 	str.w	r5, [fp, #-64]
   17f52:	2301      	movs	r3, #1
   17f54:	eb09 050e 	add.w	r5, r9, lr
   17f58:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   17f5c:	3701      	adds	r7, #1
   17f5e:	60b3      	str	r3, [r6, #8]
   17f60:	6836      	ldr	r6, [r6, #0]
   17f62:	2e00      	cmp	r6, #0
   17f64:	d1de      	bne.n	17f24 <d_print_comp_inner+0xea0>
   17f66:	f8dc 2008 	ldr.w	r2, [ip, #8]
   17f6a:	4641      	mov	r1, r8
   17f6c:	4620      	mov	r0, r4
   17f6e:	4665      	mov	r5, ip
   17f70:	f001 fe2c 	bl	19bcc <d_print_comp>
   17f74:	9b06      	ldr	r3, [sp, #24]
   17f76:	9a00      	ldr	r2, [sp, #0]
   17f78:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17f7c:	2b00      	cmp	r3, #0
   17f7e:	f47f a94f 	bne.w	17220 <d_print_comp_inner+0x19c>
   17f82:	2f01      	cmp	r7, #1
   17f84:	d00c      	beq.n	17fa0 <d_print_comp_inner+0xf1c>
   17f86:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17f8a:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17f8e:	3f01      	subs	r7, #1
   17f90:	4641      	mov	r1, r8
   17f92:	4620      	mov	r0, r4
   17f94:	f001 fe2a 	bl	19bec <d_print_mod>
   17f98:	2f01      	cmp	r7, #1
   17f9a:	f1a9 0910 	sub.w	r9, r9, #16
   17f9e:	d1f4      	bne.n	17f8a <d_print_comp_inner+0xf06>
   17fa0:	1d2a      	adds	r2, r5, #4
   17fa2:	4641      	mov	r1, r8
   17fa4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17fa8:	4620      	mov	r0, r4
   17faa:	f002 fa27 	bl	1a3fc <d_print_array_type.isra.10>
   17fae:	f7ff b937 	b.w	17220 <d_print_comp_inner+0x19c>
   17fb2:	bf00      	nop
   17fb4:	00024a0b 	.word	0x00024a0b
   17fb8:	000249ff 	.word	0x000249ff
   17fbc:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17fc0:	2b00      	cmp	r3, #0
   17fc2:	f040 8674 	bne.w	18cae <d_print_comp_inner+0x1c2a>
   17fc6:	686a      	ldr	r2, [r5, #4]
   17fc8:	4bd5      	ldr	r3, [pc, #852]	; (18320 <d_print_comp_inner+0x129c>)
   17fca:	6851      	ldr	r1, [r2, #4]
   17fcc:	4299      	cmp	r1, r3
   17fce:	f000 866a 	beq.w	18ca6 <d_print_comp_inner+0x1c22>
   17fd2:	4641      	mov	r1, r8
   17fd4:	4620      	mov	r0, r4
   17fd6:	f001 fdf9 	bl	19bcc <d_print_comp>
   17fda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17fde:	2bff      	cmp	r3, #255	; 0xff
   17fe0:	f001 82b2 	beq.w	19548 <d_print_comp_inner+0x24c4>
   17fe4:	1c59      	adds	r1, r3, #1
   17fe6:	2220      	movs	r2, #32
   17fe8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17fec:	54e2      	strb	r2, [r4, r3]
   17fee:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17ff2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17ff6:	2b00      	cmp	r3, #0
   17ff8:	f000 8595 	beq.w	18b26 <d_print_comp_inner+0x1aa2>
   17ffc:	4dc9      	ldr	r5, [pc, #804]	; (18324 <d_print_comp_inner+0x12a0>)
   17ffe:	f04f 0800 	mov.w	r8, #0
   18002:	1daf      	adds	r7, r5, #6
   18004:	e009      	b.n	1801a <d_print_comp_inner+0xf96>
   18006:	460b      	mov	r3, r1
   18008:	3101      	adds	r1, #1
   1800a:	42bd      	cmp	r5, r7
   1800c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18010:	54e6      	strb	r6, [r4, r3]
   18012:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18016:	f43f a903 	beq.w	17220 <d_print_comp_inner+0x19c>
   1801a:	29ff      	cmp	r1, #255	; 0xff
   1801c:	f815 6b01 	ldrb.w	r6, [r5], #1
   18020:	d1f1      	bne.n	18006 <d_print_comp_inner+0xf82>
   18022:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18026:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1802a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1802e:	4620      	mov	r0, r4
   18030:	4798      	blx	r3
   18032:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18036:	3301      	adds	r3, #1
   18038:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1803c:	2101      	movs	r1, #1
   1803e:	2300      	movs	r3, #0
   18040:	e7e3      	b.n	1800a <d_print_comp_inner+0xf86>
   18042:	4eb9      	ldr	r6, [pc, #740]	; (18328 <d_print_comp_inner+0x12a4>)
   18044:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18048:	f106 090e 	add.w	r9, r6, #14
   1804c:	f04f 0800 	mov.w	r8, #0
   18050:	e009      	b.n	18066 <d_print_comp_inner+0xfe2>
   18052:	460b      	mov	r3, r1
   18054:	3101      	adds	r1, #1
   18056:	45b1      	cmp	r9, r6
   18058:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1805c:	54e7      	strb	r7, [r4, r3]
   1805e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18062:	f000 83b3 	beq.w	187cc <d_print_comp_inner+0x1748>
   18066:	29ff      	cmp	r1, #255	; 0xff
   18068:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1806c:	d1f1      	bne.n	18052 <d_print_comp_inner+0xfce>
   1806e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18072:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18076:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1807a:	4620      	mov	r0, r4
   1807c:	4798      	blx	r3
   1807e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18082:	3301      	adds	r3, #1
   18084:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18088:	2101      	movs	r1, #1
   1808a:	2300      	movs	r3, #0
   1808c:	e7e3      	b.n	18056 <d_print_comp_inner+0xfd2>
   1808e:	4ea7      	ldr	r6, [pc, #668]	; (1832c <d_print_comp_inner+0x12a8>)
   18090:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18094:	f106 0a1a 	add.w	sl, r6, #26
   18098:	f04f 0900 	mov.w	r9, #0
   1809c:	e009      	b.n	180b2 <d_print_comp_inner+0x102e>
   1809e:	460b      	mov	r3, r1
   180a0:	3101      	adds	r1, #1
   180a2:	4556      	cmp	r6, sl
   180a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   180a8:	54e7      	strb	r7, [r4, r3]
   180aa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   180ae:	f000 82ef 	beq.w	18690 <d_print_comp_inner+0x160c>
   180b2:	29ff      	cmp	r1, #255	; 0xff
   180b4:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   180b8:	d1f1      	bne.n	1809e <d_print_comp_inner+0x101a>
   180ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   180c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   180c6:	4620      	mov	r0, r4
   180c8:	4798      	blx	r3
   180ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180ce:	3301      	adds	r3, #1
   180d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180d4:	2101      	movs	r1, #1
   180d6:	2300      	movs	r3, #0
   180d8:	e7e3      	b.n	180a2 <d_print_comp_inner+0x101e>
   180da:	6869      	ldr	r1, [r5, #4]
   180dc:	f7fc ff2a 	bl	14f34 <d_find_pack>
   180e0:	f04f 0900 	mov.w	r9, #0
   180e4:	2800      	cmp	r0, #0
   180e6:	f001 835d 	beq.w	197a4 <d_print_comp_inner+0x2720>
   180ea:	7803      	ldrb	r3, [r0, #0]
   180ec:	2b2f      	cmp	r3, #47	; 0x2f
   180ee:	f040 8457 	bne.w	189a0 <d_print_comp_inner+0x191c>
   180f2:	6843      	ldr	r3, [r0, #4]
   180f4:	2b00      	cmp	r3, #0
   180f6:	f000 8453 	beq.w	189a0 <d_print_comp_inner+0x191c>
   180fa:	6880      	ldr	r0, [r0, #8]
   180fc:	f109 0901 	add.w	r9, r9, #1
   18100:	2800      	cmp	r0, #0
   18102:	d1f2      	bne.n	180ea <d_print_comp_inner+0x1066>
   18104:	686b      	ldr	r3, [r5, #4]
   18106:	9300      	str	r3, [sp, #0]
   18108:	f109 33ff 	add.w	r3, r9, #4294967295
   1810c:	9301      	str	r3, [sp, #4]
   1810e:	f04f 0a00 	mov.w	sl, #0
   18112:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   18116:	9a00      	ldr	r2, [sp, #0]
   18118:	4641      	mov	r1, r8
   1811a:	4620      	mov	r0, r4
   1811c:	f001 fd56 	bl	19bcc <d_print_comp>
   18120:	9b01      	ldr	r3, [sp, #4]
   18122:	42bb      	cmp	r3, r7
   18124:	f340 81ab 	ble.w	1847e <d_print_comp_inner+0x13fa>
   18128:	4d81      	ldr	r5, [pc, #516]	; (18330 <d_print_comp_inner+0x12ac>)
   1812a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1812e:	f105 0b02 	add.w	fp, r5, #2
   18132:	e009      	b.n	18148 <d_print_comp_inner+0x10c4>
   18134:	460b      	mov	r3, r1
   18136:	3101      	adds	r1, #1
   18138:	45ab      	cmp	fp, r5
   1813a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1813e:	54e6      	strb	r6, [r4, r3]
   18140:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18144:	f000 819b 	beq.w	1847e <d_print_comp_inner+0x13fa>
   18148:	29ff      	cmp	r1, #255	; 0xff
   1814a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1814e:	d1f1      	bne.n	18134 <d_print_comp_inner+0x10b0>
   18150:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18154:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   18158:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1815c:	4620      	mov	r0, r4
   1815e:	4798      	blx	r3
   18160:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18164:	3301      	adds	r3, #1
   18166:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1816a:	2101      	movs	r1, #1
   1816c:	2300      	movs	r3, #0
   1816e:	e7e3      	b.n	18138 <d_print_comp_inner+0x10b4>
   18170:	4e70      	ldr	r6, [pc, #448]	; (18334 <d_print_comp_inner+0x12b0>)
   18172:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18176:	f106 0a16 	add.w	sl, r6, #22
   1817a:	f04f 0900 	mov.w	r9, #0
   1817e:	e009      	b.n	18194 <d_print_comp_inner+0x1110>
   18180:	460b      	mov	r3, r1
   18182:	3101      	adds	r1, #1
   18184:	45b2      	cmp	sl, r6
   18186:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1818a:	54e7      	strb	r7, [r4, r3]
   1818c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18190:	f000 835f 	beq.w	18852 <d_print_comp_inner+0x17ce>
   18194:	29ff      	cmp	r1, #255	; 0xff
   18196:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1819a:	d1f1      	bne.n	18180 <d_print_comp_inner+0x10fc>
   1819c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   181a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   181a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   181a8:	4620      	mov	r0, r4
   181aa:	4798      	blx	r3
   181ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   181b0:	3301      	adds	r3, #1
   181b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   181b6:	2101      	movs	r1, #1
   181b8:	2300      	movs	r3, #0
   181ba:	e7e3      	b.n	18184 <d_print_comp_inner+0x1100>
   181bc:	4e5e      	ldr	r6, [pc, #376]	; (18338 <d_print_comp_inner+0x12b4>)
   181be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   181c2:	f106 0a0e 	add.w	sl, r6, #14
   181c6:	f04f 0900 	mov.w	r9, #0
   181ca:	e009      	b.n	181e0 <d_print_comp_inner+0x115c>
   181cc:	460b      	mov	r3, r1
   181ce:	3101      	adds	r1, #1
   181d0:	4556      	cmp	r6, sl
   181d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   181d6:	54e7      	strb	r7, [r4, r3]
   181d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   181dc:	f000 83a0 	beq.w	18920 <d_print_comp_inner+0x189c>
   181e0:	29ff      	cmp	r1, #255	; 0xff
   181e2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   181e6:	d1f1      	bne.n	181cc <d_print_comp_inner+0x1148>
   181e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   181ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   181f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   181f4:	4620      	mov	r0, r4
   181f6:	4798      	blx	r3
   181f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   181fc:	3301      	adds	r3, #1
   181fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18202:	2101      	movs	r1, #1
   18204:	2300      	movs	r3, #0
   18206:	e7e3      	b.n	181d0 <d_print_comp_inner+0x114c>
   18208:	686a      	ldr	r2, [r5, #4]
   1820a:	7811      	ldrb	r1, [r2, #0]
   1820c:	2927      	cmp	r1, #39	; 0x27
   1820e:	f000 8615 	beq.w	18e3c <d_print_comp_inner+0x1db8>
   18212:	2600      	movs	r6, #0
   18214:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18218:	29ff      	cmp	r1, #255	; 0xff
   1821a:	f001 80c5 	beq.w	193a8 <d_print_comp_inner+0x2324>
   1821e:	2328      	movs	r3, #40	; 0x28
   18220:	1c4a      	adds	r2, r1, #1
   18222:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18226:	5463      	strb	r3, [r4, r1]
   18228:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1822c:	686a      	ldr	r2, [r5, #4]
   1822e:	4641      	mov	r1, r8
   18230:	4620      	mov	r0, r4
   18232:	f001 fccb 	bl	19bcc <d_print_comp>
   18236:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1823a:	2bff      	cmp	r3, #255	; 0xff
   1823c:	f001 8099 	beq.w	19372 <d_print_comp_inner+0x22ee>
   18240:	1c59      	adds	r1, r3, #1
   18242:	2229      	movs	r2, #41	; 0x29
   18244:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18248:	54e2      	strb	r2, [r4, r3]
   1824a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1824e:	782b      	ldrb	r3, [r5, #0]
   18250:	2b3d      	cmp	r3, #61	; 0x3d
   18252:	f000 86e6 	beq.w	19022 <d_print_comp_inner+0x1f9e>
   18256:	2e08      	cmp	r6, #8
   18258:	f000 867f 	beq.w	18f5a <d_print_comp_inner+0x1ed6>
   1825c:	68aa      	ldr	r2, [r5, #8]
   1825e:	4641      	mov	r1, r8
   18260:	4620      	mov	r0, r4
   18262:	f001 fcb3 	bl	19bcc <d_print_comp>
   18266:	f7fe bfdb 	b.w	17220 <d_print_comp_inner+0x19c>
   1826a:	2301      	movs	r3, #1
   1826c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   18270:	f7fe bfd6 	b.w	17220 <d_print_comp_inner+0x19c>
   18274:	686a      	ldr	r2, [r5, #4]
   18276:	4931      	ldr	r1, [pc, #196]	; (1833c <d_print_comp_inner+0x12b8>)
   18278:	a804      	add	r0, sp, #16
   1827a:	f006 fe2b 	bl	1eed4 <sprintf>
   1827e:	a804      	add	r0, sp, #16
   18280:	f006 ffbe 	bl	1f200 <strlen>
   18284:	2800      	cmp	r0, #0
   18286:	f43e afcb 	beq.w	17220 <d_print_comp_inner+0x19c>
   1828a:	ad04      	add	r5, sp, #16
   1828c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18290:	182f      	adds	r7, r5, r0
   18292:	f04f 0800 	mov.w	r8, #0
   18296:	e009      	b.n	182ac <d_print_comp_inner+0x1228>
   18298:	460b      	mov	r3, r1
   1829a:	3101      	adds	r1, #1
   1829c:	42bd      	cmp	r5, r7
   1829e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182a2:	54e6      	strb	r6, [r4, r3]
   182a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   182a8:	f43e afba 	beq.w	17220 <d_print_comp_inner+0x19c>
   182ac:	29ff      	cmp	r1, #255	; 0xff
   182ae:	f815 6b01 	ldrb.w	r6, [r5], #1
   182b2:	d1f1      	bne.n	18298 <d_print_comp_inner+0x1214>
   182b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   182b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   182bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   182c0:	4620      	mov	r0, r4
   182c2:	4798      	blx	r3
   182c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   182c8:	3301      	adds	r3, #1
   182ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   182ce:	2101      	movs	r1, #1
   182d0:	2300      	movs	r3, #0
   182d2:	e7e3      	b.n	1829c <d_print_comp_inner+0x1218>
   182d4:	4e1a      	ldr	r6, [pc, #104]	; (18340 <d_print_comp_inner+0x12bc>)
   182d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   182da:	f106 0a1c 	add.w	sl, r6, #28
   182de:	f04f 0900 	mov.w	r9, #0
   182e2:	e009      	b.n	182f8 <d_print_comp_inner+0x1274>
   182e4:	460b      	mov	r3, r1
   182e6:	3101      	adds	r1, #1
   182e8:	4556      	cmp	r6, sl
   182ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182ee:	54e7      	strb	r7, [r4, r3]
   182f0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   182f4:	f000 82fa 	beq.w	188ec <d_print_comp_inner+0x1868>
   182f8:	29ff      	cmp	r1, #255	; 0xff
   182fa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   182fe:	d1f1      	bne.n	182e4 <d_print_comp_inner+0x1260>
   18300:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18304:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18308:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1830c:	4620      	mov	r0, r4
   1830e:	4798      	blx	r3
   18310:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18314:	3301      	adds	r3, #1
   18316:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1831a:	2101      	movs	r1, #1
   1831c:	2300      	movs	r3, #0
   1831e:	e7e3      	b.n	182e8 <d_print_comp_inner+0x1264>
   18320:	000241c8 	.word	0x000241c8
   18324:	000249ec 	.word	0x000249ec
   18328:	00024acb 	.word	0x00024acb
   1832c:	000249c7 	.word	0x000249c7
   18330:	000249fc 	.word	0x000249fc
   18334:	000249cb 	.word	0x000249cb
   18338:	00024a4f 	.word	0x00024a4f
   1833c:	00024820 	.word	0x00024820
   18340:	00024a9b 	.word	0x00024a9b
   18344:	68ab      	ldr	r3, [r5, #8]
   18346:	781a      	ldrb	r2, [r3, #0]
   18348:	2a3a      	cmp	r2, #58	; 0x3a
   1834a:	f47e af7d 	bne.w	17248 <d_print_comp_inner+0x1c4>
   1834e:	689b      	ldr	r3, [r3, #8]
   18350:	781b      	ldrb	r3, [r3, #0]
   18352:	2b3b      	cmp	r3, #59	; 0x3b
   18354:	f47e af78 	bne.w	17248 <d_print_comp_inner+0x1c4>
   18358:	f105 0308 	add.w	r3, r5, #8
   1835c:	686a      	ldr	r2, [r5, #4]
   1835e:	f002 fabf 	bl	1a8e0 <d_maybe_print_fold_expression.isra.15>
   18362:	4606      	mov	r6, r0
   18364:	2800      	cmp	r0, #0
   18366:	f47e af5b 	bne.w	17220 <d_print_comp_inner+0x19c>
   1836a:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1836e:	68aa      	ldr	r2, [r5, #8]
   18370:	f8da 1004 	ldr.w	r1, [sl, #4]
   18374:	6893      	ldr	r3, [r2, #8]
   18376:	6808      	ldr	r0, [r1, #0]
   18378:	49d6      	ldr	r1, [pc, #856]	; (186d4 <d_print_comp_inner+0x1650>)
   1837a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   1837e:	685f      	ldr	r7, [r3, #4]
   18380:	689d      	ldr	r5, [r3, #8]
   18382:	f006 fdd1 	bl	1ef28 <strcmp>
   18386:	2800      	cmp	r0, #0
   18388:	f001 82e2 	beq.w	19950 <d_print_comp_inner+0x28cc>
   1838c:	2204      	movs	r2, #4
   1838e:	49d2      	ldr	r1, [pc, #840]	; (186d8 <d_print_comp_inner+0x1654>)
   18390:	4620      	mov	r0, r4
   18392:	f7fc fba3 	bl	14adc <d_append_buffer>
   18396:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1839a:	b183      	cbz	r3, 183be <d_print_comp_inner+0x133a>
   1839c:	4641      	mov	r1, r8
   1839e:	464a      	mov	r2, r9
   183a0:	4620      	mov	r0, r4
   183a2:	f002 fa39 	bl	1a818 <d_print_subexpr>
   183a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   183aa:	29ff      	cmp	r1, #255	; 0xff
   183ac:	f001 83ec 	beq.w	19b88 <d_print_comp_inner+0x2b04>
   183b0:	2320      	movs	r3, #32
   183b2:	1c4a      	adds	r2, r1, #1
   183b4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   183b8:	5463      	strb	r3, [r4, r1]
   183ba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   183be:	463a      	mov	r2, r7
   183c0:	4641      	mov	r1, r8
   183c2:	4620      	mov	r0, r4
   183c4:	f001 fc02 	bl	19bcc <d_print_comp>
   183c8:	2d00      	cmp	r5, #0
   183ca:	f43e af29 	beq.w	17220 <d_print_comp_inner+0x19c>
   183ce:	462a      	mov	r2, r5
   183d0:	4641      	mov	r1, r8
   183d2:	4620      	mov	r0, r4
   183d4:	f002 fa20 	bl	1a818 <d_print_subexpr>
   183d8:	f7fe bf22 	b.w	17220 <d_print_comp_inner+0x19c>
   183dc:	4ebf      	ldr	r6, [pc, #764]	; (186dc <d_print_comp_inner+0x1658>)
   183de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   183e2:	f106 0a08 	add.w	sl, r6, #8
   183e6:	f04f 0900 	mov.w	r9, #0
   183ea:	e009      	b.n	18400 <d_print_comp_inner+0x137c>
   183ec:	460b      	mov	r3, r1
   183ee:	3101      	adds	r1, #1
   183f0:	4556      	cmp	r6, sl
   183f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   183f6:	54e7      	strb	r7, [r4, r3]
   183f8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   183fc:	f000 80d8 	beq.w	185b0 <d_print_comp_inner+0x152c>
   18400:	29ff      	cmp	r1, #255	; 0xff
   18402:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18406:	d1f1      	bne.n	183ec <d_print_comp_inner+0x1368>
   18408:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1840c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18414:	4620      	mov	r0, r4
   18416:	4798      	blx	r3
   18418:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1841c:	3301      	adds	r3, #1
   1841e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18422:	2101      	movs	r1, #1
   18424:	2300      	movs	r3, #0
   18426:	e7e3      	b.n	183f0 <d_print_comp_inner+0x136c>
   18428:	4ead      	ldr	r6, [pc, #692]	; (186e0 <d_print_comp_inner+0x165c>)
   1842a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1842e:	f106 0a1d 	add.w	sl, r6, #29
   18432:	f04f 0900 	mov.w	r9, #0
   18436:	e009      	b.n	1844c <d_print_comp_inner+0x13c8>
   18438:	460b      	mov	r3, r1
   1843a:	3101      	adds	r1, #1
   1843c:	45b2      	cmp	sl, r6
   1843e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18442:	54e7      	strb	r7, [r4, r3]
   18444:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18448:	f000 81fc 	beq.w	18844 <d_print_comp_inner+0x17c0>
   1844c:	29ff      	cmp	r1, #255	; 0xff
   1844e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18452:	d1f1      	bne.n	18438 <d_print_comp_inner+0x13b4>
   18454:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18458:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1845c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18460:	4620      	mov	r0, r4
   18462:	4798      	blx	r3
   18464:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18468:	3301      	adds	r3, #1
   1846a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1846e:	2101      	movs	r1, #1
   18470:	2300      	movs	r3, #0
   18472:	e7e3      	b.n	1843c <d_print_comp_inner+0x13b8>
   18474:	2301      	movs	r3, #1
   18476:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1847a:	f7fe bed1 	b.w	17220 <d_print_comp_inner+0x19c>
   1847e:	3701      	adds	r7, #1
   18480:	454f      	cmp	r7, r9
   18482:	f47f ae46 	bne.w	18112 <d_print_comp_inner+0x108e>
   18486:	f7fe becb 	b.w	17220 <d_print_comp_inner+0x19c>
   1848a:	6876      	ldr	r6, [r6, #4]
   1848c:	2e00      	cmp	r6, #0
   1848e:	f001 806e 	beq.w	1956e <d_print_comp_inner+0x24ea>
   18492:	2f04      	cmp	r7, #4
   18494:	f103 0310 	add.w	r3, r3, #16
   18498:	f47f a9bd 	bne.w	17816 <d_print_comp_inner+0x792>
   1849c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   184a0:	2301      	movs	r3, #1
   184a2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   184a6:	f7fe bebb 	b.w	17220 <d_print_comp_inner+0x19c>
   184aa:	4e8e      	ldr	r6, [pc, #568]	; (186e4 <d_print_comp_inner+0x1660>)
   184ac:	686a      	ldr	r2, [r5, #4]
   184ae:	4641      	mov	r1, r8
   184b0:	4620      	mov	r0, r4
   184b2:	f001 fb8b 	bl	19bcc <d_print_comp>
   184b6:	f106 0a04 	add.w	sl, r6, #4
   184ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184be:	f04f 0900 	mov.w	r9, #0
   184c2:	e008      	b.n	184d6 <d_print_comp_inner+0x1452>
   184c4:	460b      	mov	r3, r1
   184c6:	3101      	adds	r1, #1
   184c8:	45b2      	cmp	sl, r6
   184ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   184ce:	54e7      	strb	r7, [r4, r3]
   184d0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   184d4:	d013      	beq.n	184fe <d_print_comp_inner+0x147a>
   184d6:	29ff      	cmp	r1, #255	; 0xff
   184d8:	f816 7b01 	ldrb.w	r7, [r6], #1
   184dc:	d1f2      	bne.n	184c4 <d_print_comp_inner+0x1440>
   184de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184e2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   184e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   184ea:	4620      	mov	r0, r4
   184ec:	4798      	blx	r3
   184ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   184f2:	3301      	adds	r3, #1
   184f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   184f8:	2101      	movs	r1, #1
   184fa:	2300      	movs	r3, #0
   184fc:	e7e4      	b.n	184c8 <d_print_comp_inner+0x1444>
   184fe:	68aa      	ldr	r2, [r5, #8]
   18500:	4641      	mov	r1, r8
   18502:	4620      	mov	r0, r4
   18504:	f001 fb62 	bl	19bcc <d_print_comp>
   18508:	f7fe be8a 	b.w	17220 <d_print_comp_inner+0x19c>
   1850c:	686a      	ldr	r2, [r5, #4]
   1850e:	4641      	mov	r1, r8
   18510:	4620      	mov	r0, r4
   18512:	f001 fb5b 	bl	19bcc <d_print_comp>
   18516:	f7fe be83 	b.w	17220 <d_print_comp_inner+0x19c>
   1851a:	686a      	ldr	r2, [r5, #4]
   1851c:	4641      	mov	r1, r8
   1851e:	4620      	mov	r0, r4
   18520:	f001 fb54 	bl	19bcc <d_print_comp>
   18524:	f7fe be7c 	b.w	17220 <d_print_comp_inner+0x19c>
   18528:	686a      	ldr	r2, [r5, #4]
   1852a:	4641      	mov	r1, r8
   1852c:	4620      	mov	r0, r4
   1852e:	f001 fb4d 	bl	19bcc <d_print_comp>
   18532:	f7fe be75 	b.w	17220 <d_print_comp_inner+0x19c>
   18536:	686a      	ldr	r2, [r5, #4]
   18538:	4641      	mov	r1, r8
   1853a:	4620      	mov	r0, r4
   1853c:	f001 fb46 	bl	19bcc <d_print_comp>
   18540:	f7fe be6e 	b.w	17220 <d_print_comp_inner+0x19c>
   18544:	686a      	ldr	r2, [r5, #4]
   18546:	4641      	mov	r1, r8
   18548:	4620      	mov	r0, r4
   1854a:	f001 fb3f 	bl	19bcc <d_print_comp>
   1854e:	f7fe be67 	b.w	17220 <d_print_comp_inner+0x19c>
   18552:	686a      	ldr	r2, [r5, #4]
   18554:	4641      	mov	r1, r8
   18556:	4620      	mov	r0, r4
   18558:	f001 fb38 	bl	19bcc <d_print_comp>
   1855c:	f7fe be60 	b.w	17220 <d_print_comp_inner+0x19c>
   18560:	686a      	ldr	r2, [r5, #4]
   18562:	4641      	mov	r1, r8
   18564:	4620      	mov	r0, r4
   18566:	f001 fb31 	bl	19bcc <d_print_comp>
   1856a:	f7fe be59 	b.w	17220 <d_print_comp_inner+0x19c>
   1856e:	686a      	ldr	r2, [r5, #4]
   18570:	4641      	mov	r1, r8
   18572:	4620      	mov	r0, r4
   18574:	f001 fb2a 	bl	19bcc <d_print_comp>
   18578:	f7fe be52 	b.w	17220 <d_print_comp_inner+0x19c>
   1857c:	686a      	ldr	r2, [r5, #4]
   1857e:	4641      	mov	r1, r8
   18580:	4620      	mov	r0, r4
   18582:	f001 fb23 	bl	19bcc <d_print_comp>
   18586:	f7fe be4b 	b.w	17220 <d_print_comp_inner+0x19c>
   1858a:	4641      	mov	r1, r8
   1858c:	68aa      	ldr	r2, [r5, #8]
   1858e:	4620      	mov	r0, r4
   18590:	f001 fb1c 	bl	19bcc <d_print_comp>
   18594:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18598:	29ff      	cmp	r1, #255	; 0xff
   1859a:	f000 8560 	beq.w	1905e <d_print_comp_inner+0x1fda>
   1859e:	1c4a      	adds	r2, r1, #1
   185a0:	235d      	movs	r3, #93	; 0x5d
   185a2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   185a6:	5463      	strb	r3, [r4, r1]
   185a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   185ac:	f7fe be38 	b.w	17220 <d_print_comp_inner+0x19c>
   185b0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   185b4:	4e4c      	ldr	r6, [pc, #304]	; (186e8 <d_print_comp_inner+0x1664>)
   185b6:	3301      	adds	r3, #1
   185b8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   185bc:	4641      	mov	r1, r8
   185be:	686a      	ldr	r2, [r5, #4]
   185c0:	4620      	mov	r0, r4
   185c2:	f001 fb03 	bl	19bcc <d_print_comp>
   185c6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   185ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   185ce:	3b01      	subs	r3, #1
   185d0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   185d4:	f106 0902 	add.w	r9, r6, #2
   185d8:	f04f 0800 	mov.w	r8, #0
   185dc:	e008      	b.n	185f0 <d_print_comp_inner+0x156c>
   185de:	460b      	mov	r3, r1
   185e0:	3101      	adds	r1, #1
   185e2:	454e      	cmp	r6, r9
   185e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   185e8:	54e7      	strb	r7, [r4, r3]
   185ea:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   185ee:	d013      	beq.n	18618 <d_print_comp_inner+0x1594>
   185f0:	29ff      	cmp	r1, #255	; 0xff
   185f2:	f816 7b01 	ldrb.w	r7, [r6], #1
   185f6:	d1f2      	bne.n	185de <d_print_comp_inner+0x155a>
   185f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18600:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18604:	4620      	mov	r0, r4
   18606:	4798      	blx	r3
   18608:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1860c:	3301      	adds	r3, #1
   1860e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18612:	2101      	movs	r1, #1
   18614:	2300      	movs	r3, #0
   18616:	e7e4      	b.n	185e2 <d_print_comp_inner+0x155e>
   18618:	68aa      	ldr	r2, [r5, #8]
   1861a:	4934      	ldr	r1, [pc, #208]	; (186ec <d_print_comp_inner+0x1668>)
   1861c:	3201      	adds	r2, #1
   1861e:	a804      	add	r0, sp, #16
   18620:	f006 fc58 	bl	1eed4 <sprintf>
   18624:	a804      	add	r0, sp, #16
   18626:	f006 fdeb 	bl	1f200 <strlen>
   1862a:	b318      	cbz	r0, 18674 <d_print_comp_inner+0x15f0>
   1862c:	ad04      	add	r5, sp, #16
   1862e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18632:	182f      	adds	r7, r5, r0
   18634:	f04f 0800 	mov.w	r8, #0
   18638:	e008      	b.n	1864c <d_print_comp_inner+0x15c8>
   1863a:	460b      	mov	r3, r1
   1863c:	3101      	adds	r1, #1
   1863e:	42af      	cmp	r7, r5
   18640:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18644:	54e6      	strb	r6, [r4, r3]
   18646:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1864a:	d015      	beq.n	18678 <d_print_comp_inner+0x15f4>
   1864c:	29ff      	cmp	r1, #255	; 0xff
   1864e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18652:	d1f2      	bne.n	1863a <d_print_comp_inner+0x15b6>
   18654:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18658:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1865c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18660:	4620      	mov	r0, r4
   18662:	4798      	blx	r3
   18664:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18668:	3301      	adds	r3, #1
   1866a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1866e:	2101      	movs	r1, #1
   18670:	2300      	movs	r3, #0
   18672:	e7e4      	b.n	1863e <d_print_comp_inner+0x15ba>
   18674:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18678:	29ff      	cmp	r1, #255	; 0xff
   1867a:	f000 8560 	beq.w	1913e <d_print_comp_inner+0x20ba>
   1867e:	1c4a      	adds	r2, r1, #1
   18680:	237d      	movs	r3, #125	; 0x7d
   18682:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18686:	5463      	strb	r3, [r4, r1]
   18688:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1868c:	f7fe bdc8 	b.w	17220 <d_print_comp_inner+0x19c>
   18690:	686a      	ldr	r2, [r5, #4]
   18692:	4641      	mov	r1, r8
   18694:	4620      	mov	r0, r4
   18696:	f001 fa99 	bl	19bcc <d_print_comp>
   1869a:	f7fe bdc1 	b.w	17220 <d_print_comp_inner+0x19c>
   1869e:	4641      	mov	r1, r8
   186a0:	68aa      	ldr	r2, [r5, #8]
   186a2:	4620      	mov	r0, r4
   186a4:	f001 fa92 	bl	19bcc <d_print_comp>
   186a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   186ac:	29ff      	cmp	r1, #255	; 0xff
   186ae:	f000 850b 	beq.w	190c8 <d_print_comp_inner+0x2044>
   186b2:	1c4a      	adds	r2, r1, #1
   186b4:	235d      	movs	r3, #93	; 0x5d
   186b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   186ba:	5463      	strb	r3, [r4, r1]
   186bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   186c0:	f7fe bdae 	b.w	17220 <d_print_comp_inner+0x19c>
   186c4:	686a      	ldr	r2, [r5, #4]
   186c6:	4641      	mov	r1, r8
   186c8:	4620      	mov	r0, r4
   186ca:	f001 fa7f 	bl	19bcc <d_print_comp>
   186ce:	f7fe bda7 	b.w	17220 <d_print_comp_inner+0x19c>
   186d2:	bf00      	nop
   186d4:	00024834 	.word	0x00024834
   186d8:	00024a2c 	.word	0x00024a2c
   186dc:	00024abb 	.word	0x00024abb
   186e0:	00024a7b 	.word	0x00024a7b
   186e4:	000248d0 	.word	0x000248d0
   186e8:	00024ac8 	.word	0x00024ac8
   186ec:	00024820 	.word	0x00024820
   186f0:	f8da 5004 	ldr.w	r5, [sl, #4]
   186f4:	782b      	ldrb	r3, [r5, #0]
   186f6:	3b61      	subs	r3, #97	; 0x61
   186f8:	2b19      	cmp	r3, #25
   186fa:	d809      	bhi.n	18710 <d_print_comp_inner+0x168c>
   186fc:	29ff      	cmp	r1, #255	; 0xff
   186fe:	f000 8793 	beq.w	19628 <d_print_comp_inner+0x25a4>
   18702:	2320      	movs	r3, #32
   18704:	1c4a      	adds	r2, r1, #1
   18706:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1870a:	5463      	strb	r3, [r4, r1]
   1870c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18710:	19eb      	adds	r3, r5, r7
   18712:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18716:	2b20      	cmp	r3, #32
   18718:	bf08      	it	eq
   1871a:	f107 37ff 	addeq.w	r7, r7, #4294967295
   1871e:	2f00      	cmp	r7, #0
   18720:	f43e ad7e 	beq.w	17220 <d_print_comp_inner+0x19c>
   18724:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18728:	442f      	add	r7, r5
   1872a:	f04f 0800 	mov.w	r8, #0
   1872e:	e009      	b.n	18744 <d_print_comp_inner+0x16c0>
   18730:	460b      	mov	r3, r1
   18732:	3101      	adds	r1, #1
   18734:	42af      	cmp	r7, r5
   18736:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1873a:	54e6      	strb	r6, [r4, r3]
   1873c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18740:	f43e ad6e 	beq.w	17220 <d_print_comp_inner+0x19c>
   18744:	29ff      	cmp	r1, #255	; 0xff
   18746:	f815 6b01 	ldrb.w	r6, [r5], #1
   1874a:	d1f1      	bne.n	18730 <d_print_comp_inner+0x16ac>
   1874c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18750:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18754:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18758:	4620      	mov	r0, r4
   1875a:	4798      	blx	r3
   1875c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18760:	3301      	adds	r3, #1
   18762:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18766:	2101      	movs	r1, #1
   18768:	2300      	movs	r3, #0
   1876a:	e7e3      	b.n	18734 <d_print_comp_inner+0x16b0>
   1876c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18770:	b13a      	cbz	r2, 18782 <d_print_comp_inner+0x16fe>
   18772:	ab14      	add	r3, sp, #80	; 0x50
   18774:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18778:	f843 1d48 	str.w	r1, [r3, #-72]!
   1877c:	9203      	str	r2, [sp, #12]
   1877e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18782:	686b      	ldr	r3, [r5, #4]
   18784:	781a      	ldrb	r2, [r3, #0]
   18786:	2a04      	cmp	r2, #4
   18788:	f000 830e 	beq.w	18da8 <d_print_comp_inner+0x1d24>
   1878c:	a804      	add	r0, sp, #16
   1878e:	461a      	mov	r2, r3
   18790:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18794:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   18798:	4641      	mov	r1, r8
   1879a:	4620      	mov	r0, r4
   1879c:	9304      	str	r3, [sp, #16]
   1879e:	9505      	str	r5, [sp, #20]
   187a0:	f7fe fc70 	bl	17084 <d_print_comp_inner>
   187a4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   187a8:	9a05      	ldr	r2, [sp, #20]
   187aa:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   187ae:	2b00      	cmp	r3, #0
   187b0:	f43e ad36 	beq.w	17220 <d_print_comp_inner+0x19c>
   187b4:	9b02      	ldr	r3, [sp, #8]
   187b6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   187ba:	f7fe bd31 	b.w	17220 <d_print_comp_inner+0x19c>
   187be:	68aa      	ldr	r2, [r5, #8]
   187c0:	4641      	mov	r1, r8
   187c2:	4620      	mov	r0, r4
   187c4:	f001 fa02 	bl	19bcc <d_print_comp>
   187c8:	f7fe bd2a 	b.w	17220 <d_print_comp_inner+0x19c>
   187cc:	686a      	ldr	r2, [r5, #4]
   187ce:	49d8      	ldr	r1, [pc, #864]	; (18b30 <d_print_comp_inner+0x1aac>)
   187d0:	3201      	adds	r2, #1
   187d2:	a804      	add	r0, sp, #16
   187d4:	f006 fb7e 	bl	1eed4 <sprintf>
   187d8:	a804      	add	r0, sp, #16
   187da:	f006 fd11 	bl	1f200 <strlen>
   187de:	b318      	cbz	r0, 18828 <d_print_comp_inner+0x17a4>
   187e0:	ad04      	add	r5, sp, #16
   187e2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   187e6:	182f      	adds	r7, r5, r0
   187e8:	f04f 0800 	mov.w	r8, #0
   187ec:	e008      	b.n	18800 <d_print_comp_inner+0x177c>
   187ee:	460b      	mov	r3, r1
   187f0:	3101      	adds	r1, #1
   187f2:	42bd      	cmp	r5, r7
   187f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187f8:	54e6      	strb	r6, [r4, r3]
   187fa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   187fe:	d015      	beq.n	1882c <d_print_comp_inner+0x17a8>
   18800:	29ff      	cmp	r1, #255	; 0xff
   18802:	f815 6b01 	ldrb.w	r6, [r5], #1
   18806:	d1f2      	bne.n	187ee <d_print_comp_inner+0x176a>
   18808:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1880c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18814:	4620      	mov	r0, r4
   18816:	4798      	blx	r3
   18818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1881c:	3301      	adds	r3, #1
   1881e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18822:	2101      	movs	r1, #1
   18824:	2300      	movs	r3, #0
   18826:	e7e4      	b.n	187f2 <d_print_comp_inner+0x176e>
   18828:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1882c:	29ff      	cmp	r1, #255	; 0xff
   1882e:	f000 8404 	beq.w	1903a <d_print_comp_inner+0x1fb6>
   18832:	1c4a      	adds	r2, r1, #1
   18834:	237d      	movs	r3, #125	; 0x7d
   18836:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1883a:	5463      	strb	r3, [r4, r1]
   1883c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18840:	f7fe bcee 	b.w	17220 <d_print_comp_inner+0x19c>
   18844:	686a      	ldr	r2, [r5, #4]
   18846:	4641      	mov	r1, r8
   18848:	4620      	mov	r0, r4
   1884a:	f001 f9bf 	bl	19bcc <d_print_comp>
   1884e:	f7fe bce7 	b.w	17220 <d_print_comp_inner+0x19c>
   18852:	686a      	ldr	r2, [r5, #4]
   18854:	4641      	mov	r1, r8
   18856:	4620      	mov	r0, r4
   18858:	f001 f9b8 	bl	19bcc <d_print_comp>
   1885c:	f7fe bce0 	b.w	17220 <d_print_comp_inner+0x19c>
   18860:	686a      	ldr	r2, [r5, #4]
   18862:	4641      	mov	r1, r8
   18864:	4620      	mov	r0, r4
   18866:	f001 f9b1 	bl	19bcc <d_print_comp>
   1886a:	f7fe bcd9 	b.w	17220 <d_print_comp_inner+0x19c>
   1886e:	4eb1      	ldr	r6, [pc, #708]	; (18b34 <d_print_comp_inner+0x1ab0>)
   18870:	68aa      	ldr	r2, [r5, #8]
   18872:	4641      	mov	r1, r8
   18874:	4620      	mov	r0, r4
   18876:	f001 f9a9 	bl	19bcc <d_print_comp>
   1887a:	f106 0a05 	add.w	sl, r6, #5
   1887e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18882:	f04f 0900 	mov.w	r9, #0
   18886:	e008      	b.n	1889a <d_print_comp_inner+0x1816>
   18888:	460b      	mov	r3, r1
   1888a:	3101      	adds	r1, #1
   1888c:	4556      	cmp	r6, sl
   1888e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18892:	54e7      	strb	r7, [r4, r3]
   18894:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18898:	d013      	beq.n	188c2 <d_print_comp_inner+0x183e>
   1889a:	29ff      	cmp	r1, #255	; 0xff
   1889c:	f816 7b01 	ldrb.w	r7, [r6], #1
   188a0:	d1f2      	bne.n	18888 <d_print_comp_inner+0x1804>
   188a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   188a6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   188aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   188ae:	4620      	mov	r0, r4
   188b0:	4798      	blx	r3
   188b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   188b6:	3301      	adds	r3, #1
   188b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   188bc:	2101      	movs	r1, #1
   188be:	2300      	movs	r3, #0
   188c0:	e7e4      	b.n	1888c <d_print_comp_inner+0x1808>
   188c2:	686a      	ldr	r2, [r5, #4]
   188c4:	4641      	mov	r1, r8
   188c6:	4620      	mov	r0, r4
   188c8:	f001 f980 	bl	19bcc <d_print_comp>
   188cc:	f7fe bca8 	b.w	17220 <d_print_comp_inner+0x19c>
   188d0:	686a      	ldr	r2, [r5, #4]
   188d2:	4641      	mov	r1, r8
   188d4:	4620      	mov	r0, r4
   188d6:	f001 f979 	bl	19bcc <d_print_comp>
   188da:	f7fe bca1 	b.w	17220 <d_print_comp_inner+0x19c>
   188de:	686a      	ldr	r2, [r5, #4]
   188e0:	4641      	mov	r1, r8
   188e2:	4620      	mov	r0, r4
   188e4:	f001 f972 	bl	19bcc <d_print_comp>
   188e8:	f7fe bc9a 	b.w	17220 <d_print_comp_inner+0x19c>
   188ec:	686a      	ldr	r2, [r5, #4]
   188ee:	4641      	mov	r1, r8
   188f0:	4620      	mov	r0, r4
   188f2:	f001 f96b 	bl	19bcc <d_print_comp>
   188f6:	f7fe bc93 	b.w	17220 <d_print_comp_inner+0x19c>
   188fa:	4641      	mov	r1, r8
   188fc:	686a      	ldr	r2, [r5, #4]
   188fe:	4620      	mov	r0, r4
   18900:	f001 f964 	bl	19bcc <d_print_comp>
   18904:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18908:	29ff      	cmp	r1, #255	; 0xff
   1890a:	f000 842a 	beq.w	19162 <d_print_comp_inner+0x20de>
   1890e:	1c4a      	adds	r2, r1, #1
   18910:	2329      	movs	r3, #41	; 0x29
   18912:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18916:	5463      	strb	r3, [r4, r1]
   18918:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1891c:	f7fe bc80 	b.w	17220 <d_print_comp_inner+0x19c>
   18920:	686a      	ldr	r2, [r5, #4]
   18922:	4641      	mov	r1, r8
   18924:	4620      	mov	r0, r4
   18926:	f001 f951 	bl	19bcc <d_print_comp>
   1892a:	f7fe bc79 	b.w	17220 <d_print_comp_inner+0x19c>
   1892e:	2f04      	cmp	r7, #4
   18930:	f1a6 0410 	sub.w	r4, r6, #16
   18934:	f106 0e10 	add.w	lr, r6, #16
   18938:	f000 8722 	beq.w	19780 <d_print_comp_inner+0x26fc>
   1893c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   18940:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   18944:	2300      	movs	r3, #0
   18946:	f84e 4c10 	str.w	r4, [lr, #-16]
   1894a:	e906 1008 	stmdb	r6, {r3, ip}
   1894e:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   18952:	f846 5c0c 	str.w	r5, [r6, #-12]
   18956:	686d      	ldr	r5, [r5, #4]
   18958:	3701      	adds	r7, #1
   1895a:	4676      	mov	r6, lr
   1895c:	f7fe bf84 	b.w	17868 <d_print_comp_inner+0x7e4>
   18960:	68aa      	ldr	r2, [r5, #8]
   18962:	9300      	str	r3, [sp, #0]
   18964:	460e      	mov	r6, r1
   18966:	4620      	mov	r0, r4
   18968:	4641      	mov	r1, r8
   1896a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   1896e:	f001 f92d 	bl	19bcc <d_print_comp>
   18972:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18976:	9b00      	ldr	r3, [sp, #0]
   18978:	4295      	cmp	r5, r2
   1897a:	f47e ac51 	bne.w	17220 <d_print_comp_inner+0x19c>
   1897e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   18982:	42b2      	cmp	r2, r6
   18984:	f47e ac4c 	bne.w	17220 <d_print_comp_inner+0x19c>
   18988:	3b01      	subs	r3, #1
   1898a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1898e:	f7fe bc47 	b.w	17220 <d_print_comp_inner+0x19c>
   18992:	462a      	mov	r2, r5
   18994:	4641      	mov	r1, r8
   18996:	4620      	mov	r0, r4
   18998:	f001 f928 	bl	19bec <d_print_mod>
   1899c:	f7fe bc70 	b.w	17280 <d_print_comp_inner+0x1fc>
   189a0:	686b      	ldr	r3, [r5, #4]
   189a2:	9300      	str	r3, [sp, #0]
   189a4:	f1b9 0f00 	cmp.w	r9, #0
   189a8:	f47f abae 	bne.w	18108 <d_print_comp_inner+0x1084>
   189ac:	f7fe bc38 	b.w	17220 <d_print_comp_inner+0x19c>
   189b0:	463a      	mov	r2, r7
   189b2:	a804      	add	r0, sp, #16
   189b4:	495e      	ldr	r1, [pc, #376]	; (18b30 <d_print_comp_inner+0x1aac>)
   189b6:	f006 fa8d 	bl	1eed4 <sprintf>
   189ba:	a804      	add	r0, sp, #16
   189bc:	f006 fc20 	bl	1f200 <strlen>
   189c0:	b318      	cbz	r0, 18a0a <d_print_comp_inner+0x1986>
   189c2:	ad04      	add	r5, sp, #16
   189c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189c8:	182f      	adds	r7, r5, r0
   189ca:	f04f 0800 	mov.w	r8, #0
   189ce:	e008      	b.n	189e2 <d_print_comp_inner+0x195e>
   189d0:	460b      	mov	r3, r1
   189d2:	3101      	adds	r1, #1
   189d4:	42af      	cmp	r7, r5
   189d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   189da:	54e6      	strb	r6, [r4, r3]
   189dc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   189e0:	d015      	beq.n	18a0e <d_print_comp_inner+0x198a>
   189e2:	29ff      	cmp	r1, #255	; 0xff
   189e4:	f815 6b01 	ldrb.w	r6, [r5], #1
   189e8:	d1f2      	bne.n	189d0 <d_print_comp_inner+0x194c>
   189ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   189ee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   189f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189f6:	4620      	mov	r0, r4
   189f8:	4798      	blx	r3
   189fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189fe:	3301      	adds	r3, #1
   18a00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a04:	2101      	movs	r1, #1
   18a06:	2300      	movs	r3, #0
   18a08:	e7e4      	b.n	189d4 <d_print_comp_inner+0x1950>
   18a0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a0e:	29ff      	cmp	r1, #255	; 0xff
   18a10:	f000 84dd 	beq.w	193ce <d_print_comp_inner+0x234a>
   18a14:	1c4a      	adds	r2, r1, #1
   18a16:	237d      	movs	r3, #125	; 0x7d
   18a18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a1c:	5463      	strb	r3, [r4, r1]
   18a1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a22:	f7fe bbfd 	b.w	17220 <d_print_comp_inner+0x19c>
   18a26:	2700      	movs	r7, #0
   18a28:	f7ff ba1f 	b.w	17e6a <d_print_comp_inner+0xde6>
   18a2c:	68df      	ldr	r7, [r3, #12]
   18a2e:	689d      	ldr	r5, [r3, #8]
   18a30:	2f00      	cmp	r7, #0
   18a32:	f43e abf5 	beq.w	17220 <d_print_comp_inner+0x19c>
   18a36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18a3a:	442f      	add	r7, r5
   18a3c:	f04f 0800 	mov.w	r8, #0
   18a40:	e009      	b.n	18a56 <d_print_comp_inner+0x19d2>
   18a42:	460b      	mov	r3, r1
   18a44:	3101      	adds	r1, #1
   18a46:	42bd      	cmp	r5, r7
   18a48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18a4c:	54e6      	strb	r6, [r4, r3]
   18a4e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18a52:	f43e abe5 	beq.w	17220 <d_print_comp_inner+0x19c>
   18a56:	29ff      	cmp	r1, #255	; 0xff
   18a58:	f815 6b01 	ldrb.w	r6, [r5], #1
   18a5c:	d1f1      	bne.n	18a42 <d_print_comp_inner+0x19be>
   18a5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a62:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18a66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a6a:	4620      	mov	r0, r4
   18a6c:	4798      	blx	r3
   18a6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a72:	3301      	adds	r3, #1
   18a74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a78:	2101      	movs	r1, #1
   18a7a:	2300      	movs	r3, #0
   18a7c:	e7e3      	b.n	18a46 <d_print_comp_inner+0x19c2>
   18a7e:	686e      	ldr	r6, [r5, #4]
   18a80:	68af      	ldr	r7, [r5, #8]
   18a82:	4437      	add	r7, r6
   18a84:	42be      	cmp	r6, r7
   18a86:	f4be abcb 	bcs.w	17220 <d_print_comp_inner+0x19c>
   18a8a:	f04f 0800 	mov.w	r8, #0
   18a8e:	e00d      	b.n	18aac <d_print_comp_inner+0x1a28>
   18a90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a94:	29ff      	cmp	r1, #255	; 0xff
   18a96:	d036      	beq.n	18b06 <d_print_comp_inner+0x1a82>
   18a98:	1c4b      	adds	r3, r1, #1
   18a9a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18a9e:	5465      	strb	r5, [r4, r1]
   18aa0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18aa4:	3601      	adds	r6, #1
   18aa6:	42b7      	cmp	r7, r6
   18aa8:	f67e abba 	bls.w	17220 <d_print_comp_inner+0x19c>
   18aac:	1bbb      	subs	r3, r7, r6
   18aae:	2b03      	cmp	r3, #3
   18ab0:	7835      	ldrb	r5, [r6, #0]
   18ab2:	dded      	ble.n	18a90 <d_print_comp_inner+0x1a0c>
   18ab4:	2d5f      	cmp	r5, #95	; 0x5f
   18ab6:	d1eb      	bne.n	18a90 <d_print_comp_inner+0x1a0c>
   18ab8:	7873      	ldrb	r3, [r6, #1]
   18aba:	2b5f      	cmp	r3, #95	; 0x5f
   18abc:	d1e8      	bne.n	18a90 <d_print_comp_inner+0x1a0c>
   18abe:	78b3      	ldrb	r3, [r6, #2]
   18ac0:	2b55      	cmp	r3, #85	; 0x55
   18ac2:	d1e5      	bne.n	18a90 <d_print_comp_inner+0x1a0c>
   18ac4:	1cf3      	adds	r3, r6, #3
   18ac6:	429f      	cmp	r7, r3
   18ac8:	d9e2      	bls.n	18a90 <d_print_comp_inner+0x1a0c>
   18aca:	2000      	movs	r0, #0
   18acc:	e006      	b.n	18adc <d_print_comp_inner+0x1a58>
   18ace:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   18ad2:	429f      	cmp	r7, r3
   18ad4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   18ad8:	f000 85c7 	beq.w	1966a <d_print_comp_inner+0x25e6>
   18adc:	4699      	mov	r9, r3
   18ade:	f813 5b01 	ldrb.w	r5, [r3], #1
   18ae2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   18ae6:	b2d1      	uxtb	r1, r2
   18ae8:	2909      	cmp	r1, #9
   18aea:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   18aee:	d9f0      	bls.n	18ad2 <d_print_comp_inner+0x1a4e>
   18af0:	f1be 0f05 	cmp.w	lr, #5
   18af4:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   18af8:	d9e9      	bls.n	18ace <d_print_comp_inner+0x1a4a>
   18afa:	2a05      	cmp	r2, #5
   18afc:	f200 8743 	bhi.w	19986 <d_print_comp_inner+0x2902>
   18b00:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   18b04:	e7e5      	b.n	18ad2 <d_print_comp_inner+0x1a4e>
   18b06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b0a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18b0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b12:	4620      	mov	r0, r4
   18b14:	4798      	blx	r3
   18b16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b1a:	3301      	adds	r3, #1
   18b1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b20:	2100      	movs	r1, #0
   18b22:	2301      	movs	r3, #1
   18b24:	e7b9      	b.n	18a9a <d_print_comp_inner+0x1a16>
   18b26:	4d04      	ldr	r5, [pc, #16]	; (18b38 <d_print_comp_inner+0x1ab4>)
   18b28:	4698      	mov	r8, r3
   18b2a:	1daf      	adds	r7, r5, #6
   18b2c:	e010      	b.n	18b50 <d_print_comp_inner+0x1acc>
   18b2e:	bf00      	nop
   18b30:	00024820 	.word	0x00024820
   18b34:	00024994 	.word	0x00024994
   18b38:	000249f4 	.word	0x000249f4
   18b3c:	460b      	mov	r3, r1
   18b3e:	3101      	adds	r1, #1
   18b40:	42bd      	cmp	r5, r7
   18b42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18b46:	54e6      	strb	r6, [r4, r3]
   18b48:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18b4c:	f43e ab68 	beq.w	17220 <d_print_comp_inner+0x19c>
   18b50:	29ff      	cmp	r1, #255	; 0xff
   18b52:	f815 6b01 	ldrb.w	r6, [r5], #1
   18b56:	d1f1      	bne.n	18b3c <d_print_comp_inner+0x1ab8>
   18b58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b5c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18b60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b64:	4620      	mov	r0, r4
   18b66:	4798      	blx	r3
   18b68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b6c:	3301      	adds	r3, #1
   18b6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b72:	2101      	movs	r1, #1
   18b74:	2300      	movs	r3, #0
   18b76:	e7e3      	b.n	18b40 <d_print_comp_inner+0x1abc>
   18b78:	782b      	ldrb	r3, [r5, #0]
   18b7a:	2b2f      	cmp	r3, #47	; 0x2f
   18b7c:	f47e ab6a 	bne.w	17254 <d_print_comp_inner+0x1d0>
   18b80:	4601      	mov	r1, r0
   18b82:	460d      	mov	r5, r1
   18b84:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18b88:	f7fe bb66 	b.w	17258 <d_print_comp_inner+0x1d4>
   18b8c:	4dd7      	ldr	r5, [pc, #860]	; (18eec <d_print_comp_inner+0x1e68>)
   18b8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18b92:	f105 0804 	add.w	r8, r5, #4
   18b96:	e009      	b.n	18bac <d_print_comp_inner+0x1b28>
   18b98:	460b      	mov	r3, r1
   18b9a:	3101      	adds	r1, #1
   18b9c:	45a8      	cmp	r8, r5
   18b9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18ba2:	54e6      	strb	r6, [r4, r3]
   18ba4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18ba8:	f43e ab3a 	beq.w	17220 <d_print_comp_inner+0x19c>
   18bac:	29ff      	cmp	r1, #255	; 0xff
   18bae:	f815 6b01 	ldrb.w	r6, [r5], #1
   18bb2:	d1f1      	bne.n	18b98 <d_print_comp_inner+0x1b14>
   18bb4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18bb8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18bbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bc0:	4620      	mov	r0, r4
   18bc2:	4798      	blx	r3
   18bc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bc8:	3301      	adds	r3, #1
   18bca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bce:	2101      	movs	r1, #1
   18bd0:	2300      	movs	r3, #0
   18bd2:	e7e3      	b.n	18b9c <d_print_comp_inner+0x1b18>
   18bd4:	4ec6      	ldr	r6, [pc, #792]	; (18ef0 <d_print_comp_inner+0x1e6c>)
   18bd6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18bda:	f106 0905 	add.w	r9, r6, #5
   18bde:	f04f 0800 	mov.w	r8, #0
   18be2:	e008      	b.n	18bf6 <d_print_comp_inner+0x1b72>
   18be4:	460b      	mov	r3, r1
   18be6:	3101      	adds	r1, #1
   18be8:	45b1      	cmp	r9, r6
   18bea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18bee:	54e7      	strb	r7, [r4, r3]
   18bf0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18bf4:	d013      	beq.n	18c1e <d_print_comp_inner+0x1b9a>
   18bf6:	29ff      	cmp	r1, #255	; 0xff
   18bf8:	f816 7b01 	ldrb.w	r7, [r6], #1
   18bfc:	d1f2      	bne.n	18be4 <d_print_comp_inner+0x1b60>
   18bfe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c02:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18c06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c0a:	4620      	mov	r0, r4
   18c0c:	4798      	blx	r3
   18c0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c12:	3301      	adds	r3, #1
   18c14:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c18:	2101      	movs	r1, #1
   18c1a:	2300      	movs	r3, #0
   18c1c:	e7e4      	b.n	18be8 <d_print_comp_inner+0x1b64>
   18c1e:	686a      	ldr	r2, [r5, #4]
   18c20:	49b4      	ldr	r1, [pc, #720]	; (18ef4 <d_print_comp_inner+0x1e70>)
   18c22:	3201      	adds	r2, #1
   18c24:	a804      	add	r0, sp, #16
   18c26:	f006 f955 	bl	1eed4 <sprintf>
   18c2a:	a804      	add	r0, sp, #16
   18c2c:	f006 fae8 	bl	1f200 <strlen>
   18c30:	2800      	cmp	r0, #0
   18c32:	f43e aaf5 	beq.w	17220 <d_print_comp_inner+0x19c>
   18c36:	ad04      	add	r5, sp, #16
   18c38:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c3c:	182f      	adds	r7, r5, r0
   18c3e:	f04f 0800 	mov.w	r8, #0
   18c42:	e009      	b.n	18c58 <d_print_comp_inner+0x1bd4>
   18c44:	460b      	mov	r3, r1
   18c46:	3101      	adds	r1, #1
   18c48:	42af      	cmp	r7, r5
   18c4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18c4e:	54e6      	strb	r6, [r4, r3]
   18c50:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18c54:	f43e aae4 	beq.w	17220 <d_print_comp_inner+0x19c>
   18c58:	29ff      	cmp	r1, #255	; 0xff
   18c5a:	f815 6b01 	ldrb.w	r6, [r5], #1
   18c5e:	d1f1      	bne.n	18c44 <d_print_comp_inner+0x1bc0>
   18c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c64:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18c68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c6c:	4620      	mov	r0, r4
   18c6e:	4798      	blx	r3
   18c70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c74:	3301      	adds	r3, #1
   18c76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c7a:	2101      	movs	r1, #1
   18c7c:	2300      	movs	r3, #0
   18c7e:	e7e3      	b.n	18c48 <d_print_comp_inner+0x1bc4>
   18c80:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   18c84:	f105 0208 	add.w	r2, r5, #8
   18c88:	4641      	mov	r1, r8
   18c8a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   18c8e:	f001 fc91 	bl	1a5b4 <d_print_function_type.isra.11>
   18c92:	686a      	ldr	r2, [r5, #4]
   18c94:	2a00      	cmp	r2, #0
   18c96:	f43e aac3 	beq.w	17220 <d_print_comp_inner+0x19c>
   18c9a:	4641      	mov	r1, r8
   18c9c:	4620      	mov	r0, r4
   18c9e:	f000 ff95 	bl	19bcc <d_print_comp>
   18ca2:	f7fe babd 	b.w	17220 <d_print_comp_inner+0x19c>
   18ca6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18caa:	f7ff b9a2 	b.w	17ff2 <d_print_comp_inner+0xf6e>
   18cae:	4e92      	ldr	r6, [pc, #584]	; (18ef8 <d_print_comp_inner+0x1e74>)
   18cb0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18cb4:	f106 0a05 	add.w	sl, r6, #5
   18cb8:	f04f 0900 	mov.w	r9, #0
   18cbc:	e009      	b.n	18cd2 <d_print_comp_inner+0x1c4e>
   18cbe:	460b      	mov	r3, r1
   18cc0:	3101      	adds	r1, #1
   18cc2:	45b2      	cmp	sl, r6
   18cc4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18cc8:	54e7      	strb	r7, [r4, r3]
   18cca:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18cce:	f43f a97a 	beq.w	17fc6 <d_print_comp_inner+0xf42>
   18cd2:	29ff      	cmp	r1, #255	; 0xff
   18cd4:	f816 7b01 	ldrb.w	r7, [r6], #1
   18cd8:	d1f1      	bne.n	18cbe <d_print_comp_inner+0x1c3a>
   18cda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18cde:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18ce2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ce6:	4620      	mov	r0, r4
   18ce8:	4798      	blx	r3
   18cea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cee:	3301      	adds	r3, #1
   18cf0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cf4:	2101      	movs	r1, #1
   18cf6:	2300      	movs	r3, #0
   18cf8:	e7e3      	b.n	18cc2 <d_print_comp_inner+0x1c3e>
   18cfa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18cfe:	497f      	ldr	r1, [pc, #508]	; (18efc <d_print_comp_inner+0x1e78>)
   18d00:	681f      	ldr	r7, [r3, #0]
   18d02:	4638      	mov	r0, r7
   18d04:	f006 f910 	bl	1ef28 <strcmp>
   18d08:	f896 a000 	ldrb.w	sl, [r6]
   18d0c:	b918      	cbnz	r0, 18d16 <d_print_comp_inner+0x1c92>
   18d0e:	f1ba 0f03 	cmp.w	sl, #3
   18d12:	f000 851b 	beq.w	1974c <d_print_comp_inner+0x26c8>
   18d16:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   18d1a:	f000 85fd 	beq.w	19918 <d_print_comp_inner+0x2894>
   18d1e:	4978      	ldr	r1, [pc, #480]	; (18f00 <d_print_comp_inner+0x1e7c>)
   18d20:	4638      	mov	r0, r7
   18d22:	f006 f901 	bl	1ef28 <strcmp>
   18d26:	4605      	mov	r5, r0
   18d28:	2800      	cmp	r0, #0
   18d2a:	f000 8135 	beq.w	18f98 <d_print_comp_inner+0x1f14>
   18d2e:	4975      	ldr	r1, [pc, #468]	; (18f04 <d_print_comp_inner+0x1e80>)
   18d30:	4638      	mov	r0, r7
   18d32:	f006 f8f9 	bl	1ef28 <strcmp>
   18d36:	2800      	cmp	r0, #0
   18d38:	f000 82b6 	beq.w	192a8 <d_print_comp_inner+0x2224>
   18d3c:	464a      	mov	r2, r9
   18d3e:	4641      	mov	r1, r8
   18d40:	4620      	mov	r0, r4
   18d42:	f001 fd2b 	bl	1a79c <d_print_expr_op>
   18d46:	2f00      	cmp	r7, #0
   18d48:	f43f a837 	beq.w	17dba <d_print_comp_inner+0xd36>
   18d4c:	496e      	ldr	r1, [pc, #440]	; (18f08 <d_print_comp_inner+0x1e84>)
   18d4e:	4638      	mov	r0, r7
   18d50:	f006 f8ea 	bl	1ef28 <strcmp>
   18d54:	2800      	cmp	r0, #0
   18d56:	f000 8384 	beq.w	19462 <d_print_comp_inner+0x23de>
   18d5a:	4638      	mov	r0, r7
   18d5c:	496b      	ldr	r1, [pc, #428]	; (18f0c <d_print_comp_inner+0x1e88>)
   18d5e:	f006 f8e3 	bl	1ef28 <strcmp>
   18d62:	4605      	mov	r5, r0
   18d64:	2800      	cmp	r0, #0
   18d66:	f47f a828 	bne.w	17dba <d_print_comp_inner+0xd36>
   18d6a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18d6e:	2bff      	cmp	r3, #255	; 0xff
   18d70:	f000 84db 	beq.w	1972a <d_print_comp_inner+0x26a6>
   18d74:	1c58      	adds	r0, r3, #1
   18d76:	2528      	movs	r5, #40	; 0x28
   18d78:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   18d7c:	4641      	mov	r1, r8
   18d7e:	54e5      	strb	r5, [r4, r3]
   18d80:	4632      	mov	r2, r6
   18d82:	4620      	mov	r0, r4
   18d84:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18d88:	f000 ff20 	bl	19bcc <d_print_comp>
   18d8c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d90:	29ff      	cmp	r1, #255	; 0xff
   18d92:	f000 846d 	beq.w	19670 <d_print_comp_inner+0x25ec>
   18d96:	2329      	movs	r3, #41	; 0x29
   18d98:	1c4a      	adds	r2, r1, #1
   18d9a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d9e:	5463      	strb	r3, [r4, r1]
   18da0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18da4:	f7fe ba3c 	b.w	17220 <d_print_comp_inner+0x19c>
   18da8:	f10d 0910 	add.w	r9, sp, #16
   18dac:	685a      	ldr	r2, [r3, #4]
   18dae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   18db2:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18db6:	4641      	mov	r1, r8
   18db8:	4620      	mov	r0, r4
   18dba:	9204      	str	r2, [sp, #16]
   18dbc:	9305      	str	r3, [sp, #20]
   18dbe:	f7fe f961 	bl	17084 <d_print_comp_inner>
   18dc2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18dc6:	9a05      	ldr	r2, [sp, #20]
   18dc8:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18dcc:	b113      	cbz	r3, 18dd4 <d_print_comp_inner+0x1d50>
   18dce:	9b02      	ldr	r3, [sp, #8]
   18dd0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18dd4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18dd8:	2b3c      	cmp	r3, #60	; 0x3c
   18dda:	f000 83d9 	beq.w	19590 <d_print_comp_inner+0x250c>
   18dde:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18de2:	29ff      	cmp	r1, #255	; 0xff
   18de4:	f000 8467 	beq.w	196b6 <d_print_comp_inner+0x2632>
   18de8:	1c4a      	adds	r2, r1, #1
   18dea:	233c      	movs	r3, #60	; 0x3c
   18dec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18df0:	5463      	strb	r3, [r4, r1]
   18df2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18df6:	686b      	ldr	r3, [r5, #4]
   18df8:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18dfc:	689b      	ldr	r3, [r3, #8]
   18dfe:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18e02:	461a      	mov	r2, r3
   18e04:	4641      	mov	r1, r8
   18e06:	4620      	mov	r0, r4
   18e08:	9304      	str	r3, [sp, #16]
   18e0a:	9505      	str	r5, [sp, #20]
   18e0c:	f7fe f93a 	bl	17084 <d_print_comp_inner>
   18e10:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18e14:	9a05      	ldr	r2, [sp, #20]
   18e16:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18e1a:	2b3e      	cmp	r3, #62	; 0x3e
   18e1c:	f000 83ab 	beq.w	19576 <d_print_comp_inner+0x24f2>
   18e20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e24:	29ff      	cmp	r1, #255	; 0xff
   18e26:	f000 849a 	beq.w	1975e <d_print_comp_inner+0x26da>
   18e2a:	233e      	movs	r3, #62	; 0x3e
   18e2c:	1c4a      	adds	r2, r1, #1
   18e2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18e32:	5463      	strb	r3, [r4, r1]
   18e34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18e38:	f7fe b9f2 	b.w	17220 <d_print_comp_inner+0x19c>
   18e3c:	6852      	ldr	r2, [r2, #4]
   18e3e:	7c16      	ldrb	r6, [r2, #16]
   18e40:	2e00      	cmp	r6, #0
   18e42:	f43f a9e7 	beq.w	18214 <d_print_comp_inner+0x1190>
   18e46:	2e06      	cmp	r6, #6
   18e48:	f240 8337 	bls.w	194ba <d_print_comp_inner+0x2436>
   18e4c:	2e07      	cmp	r6, #7
   18e4e:	f47f a9e1 	bne.w	18214 <d_print_comp_inner+0x1190>
   18e52:	68aa      	ldr	r2, [r5, #8]
   18e54:	7811      	ldrb	r1, [r2, #0]
   18e56:	2900      	cmp	r1, #0
   18e58:	f47f a9dc 	bne.w	18214 <d_print_comp_inner+0x1190>
   18e5c:	6891      	ldr	r1, [r2, #8]
   18e5e:	2901      	cmp	r1, #1
   18e60:	f47f a9d8 	bne.w	18214 <d_print_comp_inner+0x1190>
   18e64:	2b3c      	cmp	r3, #60	; 0x3c
   18e66:	f47f a9d5 	bne.w	18214 <d_print_comp_inner+0x1190>
   18e6a:	6853      	ldr	r3, [r2, #4]
   18e6c:	781b      	ldrb	r3, [r3, #0]
   18e6e:	2b30      	cmp	r3, #48	; 0x30
   18e70:	f000 8626 	beq.w	19ac0 <d_print_comp_inner+0x2a3c>
   18e74:	2b31      	cmp	r3, #49	; 0x31
   18e76:	f47f a9cd 	bne.w	18214 <d_print_comp_inner+0x1190>
   18e7a:	2204      	movs	r2, #4
   18e7c:	4924      	ldr	r1, [pc, #144]	; (18f10 <d_print_comp_inner+0x1e8c>)
   18e7e:	f7fb fe2d 	bl	14adc <d_append_buffer>
   18e82:	f7fe b9cd 	b.w	17220 <d_print_comp_inner+0x19c>
   18e86:	4e23      	ldr	r6, [pc, #140]	; (18f14 <d_print_comp_inner+0x1e90>)
   18e88:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e8c:	f106 0a02 	add.w	sl, r6, #2
   18e90:	e009      	b.n	18ea6 <d_print_comp_inner+0x1e22>
   18e92:	460b      	mov	r3, r1
   18e94:	3101      	adds	r1, #1
   18e96:	45b2      	cmp	sl, r6
   18e98:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18e9c:	54e7      	strb	r7, [r4, r3]
   18e9e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18ea2:	f43e ad52 	beq.w	1794a <d_print_comp_inner+0x8c6>
   18ea6:	29ff      	cmp	r1, #255	; 0xff
   18ea8:	f816 7b01 	ldrb.w	r7, [r6], #1
   18eac:	d1f1      	bne.n	18e92 <d_print_comp_inner+0x1e0e>
   18eae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18eb2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18eb6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18eba:	4620      	mov	r0, r4
   18ebc:	4798      	blx	r3
   18ebe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ec2:	3301      	adds	r3, #1
   18ec4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ec8:	2101      	movs	r1, #1
   18eca:	2300      	movs	r3, #0
   18ecc:	e7e3      	b.n	18e96 <d_print_comp_inner+0x1e12>
   18ece:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ed2:	29ff      	cmp	r1, #255	; 0xff
   18ed4:	f000 84e4 	beq.w	198a0 <d_print_comp_inner+0x281c>
   18ed8:	2220      	movs	r2, #32
   18eda:	1c4b      	adds	r3, r1, #1
   18edc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18ee0:	5462      	strb	r2, [r4, r1]
   18ee2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18ee6:	f7fe bdbb 	b.w	17a60 <d_print_comp_inner+0x9dc>
   18eea:	bf00      	nop
   18eec:	00024a6c 	.word	0x00024a6c
   18ef0:	00024894 	.word	0x00024894
   18ef4:	00024820 	.word	0x00024820
   18ef8:	000249e4 	.word	0x000249e4
   18efc:	00024a18 	.word	0x00024a18
   18f00:	00024ae8 	.word	0x00024ae8
   18f04:	00024824 	.word	0x00024824
   18f08:	00024a1c 	.word	0x00024a1c
   18f0c:	00024d28 	.word	0x00024d28
   18f10:	00024a48 	.word	0x00024a48
   18f14:	00024870 	.word	0x00024870
   18f18:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18f1c:	29ff      	cmp	r1, #255	; 0xff
   18f1e:	f000 8465 	beq.w	197ec <d_print_comp_inner+0x2768>
   18f22:	2220      	movs	r2, #32
   18f24:	1c4b      	adds	r3, r1, #1
   18f26:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18f2a:	5462      	strb	r2, [r4, r1]
   18f2c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18f30:	f7fe bd80 	b.w	17a34 <d_print_comp_inner+0x9b0>
   18f34:	2700      	movs	r7, #0
   18f36:	55a7      	strb	r7, [r4, r6]
   18f38:	4631      	mov	r1, r6
   18f3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f42:	4620      	mov	r0, r4
   18f44:	4798      	blx	r3
   18f46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f4a:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18f4e:	3301      	adds	r3, #1
   18f50:	463e      	mov	r6, r7
   18f52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f56:	f7fe be31 	b.w	17bbc <d_print_comp_inner+0xb38>
   18f5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18f5e:	29ff      	cmp	r1, #255	; 0xff
   18f60:	f000 8465 	beq.w	1982e <d_print_comp_inner+0x27aa>
   18f64:	1c4a      	adds	r2, r1, #1
   18f66:	235b      	movs	r3, #91	; 0x5b
   18f68:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18f6c:	5463      	strb	r3, [r4, r1]
   18f6e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f72:	4641      	mov	r1, r8
   18f74:	68aa      	ldr	r2, [r5, #8]
   18f76:	4620      	mov	r0, r4
   18f78:	f000 fe28 	bl	19bcc <d_print_comp>
   18f7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18f80:	29ff      	cmp	r1, #255	; 0xff
   18f82:	f000 8312 	beq.w	195aa <d_print_comp_inner+0x2526>
   18f86:	235d      	movs	r3, #93	; 0x5d
   18f88:	1c4a      	adds	r2, r1, #1
   18f8a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18f8e:	5463      	strb	r3, [r4, r1]
   18f90:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f94:	f7fe b944 	b.w	17220 <d_print_comp_inner+0x19c>
   18f98:	4631      	mov	r1, r6
   18f9a:	4620      	mov	r0, r4
   18f9c:	f7fb ffca 	bl	14f34 <d_find_pack>
   18fa0:	b928      	cbnz	r0, 18fae <d_print_comp_inner+0x1f2a>
   18fa2:	e007      	b.n	18fb4 <d_print_comp_inner+0x1f30>
   18fa4:	6843      	ldr	r3, [r0, #4]
   18fa6:	b12b      	cbz	r3, 18fb4 <d_print_comp_inner+0x1f30>
   18fa8:	6880      	ldr	r0, [r0, #8]
   18faa:	3501      	adds	r5, #1
   18fac:	b110      	cbz	r0, 18fb4 <d_print_comp_inner+0x1f30>
   18fae:	7803      	ldrb	r3, [r0, #0]
   18fb0:	2b2f      	cmp	r3, #47	; 0x2f
   18fb2:	d0f7      	beq.n	18fa4 <d_print_comp_inner+0x1f20>
   18fb4:	462a      	mov	r2, r5
   18fb6:	a804      	add	r0, sp, #16
   18fb8:	49d4      	ldr	r1, [pc, #848]	; (1930c <d_print_comp_inner+0x2288>)
   18fba:	f005 ff8b 	bl	1eed4 <sprintf>
   18fbe:	a804      	add	r0, sp, #16
   18fc0:	f006 f91e 	bl	1f200 <strlen>
   18fc4:	2800      	cmp	r0, #0
   18fc6:	f43e a92b 	beq.w	17220 <d_print_comp_inner+0x19c>
   18fca:	ad04      	add	r5, sp, #16
   18fcc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18fd0:	182f      	adds	r7, r5, r0
   18fd2:	f04f 0800 	mov.w	r8, #0
   18fd6:	e009      	b.n	18fec <d_print_comp_inner+0x1f68>
   18fd8:	460b      	mov	r3, r1
   18fda:	3101      	adds	r1, #1
   18fdc:	42bd      	cmp	r5, r7
   18fde:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18fe2:	54e6      	strb	r6, [r4, r3]
   18fe4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18fe8:	f43e a91a 	beq.w	17220 <d_print_comp_inner+0x19c>
   18fec:	29ff      	cmp	r1, #255	; 0xff
   18fee:	f815 6b01 	ldrb.w	r6, [r5], #1
   18ff2:	d1f1      	bne.n	18fd8 <d_print_comp_inner+0x1f54>
   18ff4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ff8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18ffc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19000:	4620      	mov	r0, r4
   19002:	4798      	blx	r3
   19004:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19008:	3301      	adds	r3, #1
   1900a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1900e:	2101      	movs	r1, #1
   19010:	2300      	movs	r3, #0
   19012:	e7e3      	b.n	18fdc <d_print_comp_inner+0x1f58>
   19014:	686a      	ldr	r2, [r5, #4]
   19016:	4641      	mov	r1, r8
   19018:	4620      	mov	r0, r4
   1901a:	f000 fdd7 	bl	19bcc <d_print_comp>
   1901e:	f7fe b8ff 	b.w	17220 <d_print_comp_inner+0x19c>
   19022:	29ff      	cmp	r1, #255	; 0xff
   19024:	f000 83d2 	beq.w	197cc <d_print_comp_inner+0x2748>
   19028:	232d      	movs	r3, #45	; 0x2d
   1902a:	1c4a      	adds	r2, r1, #1
   1902c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19030:	5463      	strb	r3, [r4, r1]
   19032:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19036:	f7ff b90e 	b.w	18256 <d_print_comp_inner+0x11d2>
   1903a:	2500      	movs	r5, #0
   1903c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19040:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19044:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19048:	4620      	mov	r0, r4
   1904a:	4798      	blx	r3
   1904c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19050:	3301      	adds	r3, #1
   19052:	4629      	mov	r1, r5
   19054:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19058:	2201      	movs	r2, #1
   1905a:	f7ff bbeb 	b.w	18834 <d_print_comp_inner+0x17b0>
   1905e:	2500      	movs	r5, #0
   19060:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19064:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19068:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1906c:	4620      	mov	r0, r4
   1906e:	4798      	blx	r3
   19070:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19074:	3301      	adds	r3, #1
   19076:	4629      	mov	r1, r5
   19078:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1907c:	2201      	movs	r2, #1
   1907e:	f7ff ba8f 	b.w	185a0 <d_print_comp_inner+0x151c>
   19082:	2600      	movs	r6, #0
   19084:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19088:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1908c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19090:	4798      	blx	r3
   19092:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19096:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1909a:	3301      	adds	r3, #1
   1909c:	4631      	mov	r1, r6
   1909e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190a2:	f7fe bd43 	b.w	17b2c <d_print_comp_inner+0xaa8>
   190a6:	2600      	movs	r6, #0
   190a8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   190ac:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   190b0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   190b4:	4798      	blx	r3
   190b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190ba:	3301      	adds	r3, #1
   190bc:	4631      	mov	r1, r6
   190be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190c2:	2201      	movs	r2, #1
   190c4:	f7fe bb74 	b.w	177b0 <d_print_comp_inner+0x72c>
   190c8:	2500      	movs	r5, #0
   190ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190d2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   190d6:	4620      	mov	r0, r4
   190d8:	4798      	blx	r3
   190da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190de:	3301      	adds	r3, #1
   190e0:	4629      	mov	r1, r5
   190e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190e6:	2201      	movs	r2, #1
   190e8:	f7ff bae4 	b.w	186b4 <d_print_comp_inner+0x1630>
   190ec:	220d      	movs	r2, #13
   190ee:	4988      	ldr	r1, [pc, #544]	; (19310 <d_print_comp_inner+0x228c>)
   190f0:	4620      	mov	r0, r4
   190f2:	f7fb fcf3 	bl	14adc <d_append_buffer>
   190f6:	68a9      	ldr	r1, [r5, #8]
   190f8:	4620      	mov	r0, r4
   190fa:	3101      	adds	r1, #1
   190fc:	f7fb ff9e 	bl	1503c <d_append_num>
   19100:	2203      	movs	r2, #3
   19102:	4984      	ldr	r1, [pc, #528]	; (19314 <d_print_comp_inner+0x2290>)
   19104:	4620      	mov	r0, r4
   19106:	f7fb fce9 	bl	14adc <d_append_buffer>
   1910a:	686d      	ldr	r5, [r5, #4]
   1910c:	f7fe bc22 	b.w	17954 <d_print_comp_inner+0x8d0>
   19110:	2500      	movs	r5, #0
   19112:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19116:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1911a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1911e:	4620      	mov	r0, r4
   19120:	4798      	blx	r3
   19122:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19126:	3301      	adds	r3, #1
   19128:	4629      	mov	r1, r5
   1912a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1912e:	2201      	movs	r2, #1
   19130:	f7fe be08 	b.w	17d44 <d_print_comp_inner+0xcc0>
   19134:	2301      	movs	r3, #1
   19136:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1913a:	f7fe b871 	b.w	17220 <d_print_comp_inner+0x19c>
   1913e:	2500      	movs	r5, #0
   19140:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19148:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1914c:	4620      	mov	r0, r4
   1914e:	4798      	blx	r3
   19150:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19154:	3301      	adds	r3, #1
   19156:	4629      	mov	r1, r5
   19158:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1915c:	2201      	movs	r2, #1
   1915e:	f7ff ba8f 	b.w	18680 <d_print_comp_inner+0x15fc>
   19162:	2500      	movs	r5, #0
   19164:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19168:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1916c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19170:	4620      	mov	r0, r4
   19172:	4798      	blx	r3
   19174:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19178:	3301      	adds	r3, #1
   1917a:	4629      	mov	r1, r5
   1917c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19180:	2201      	movs	r2, #1
   19182:	f7ff bbc5 	b.w	18910 <d_print_comp_inner+0x188c>
   19186:	a914      	add	r1, sp, #80	; 0x50
   19188:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1918c:	f841 0d40 	str.w	r0, [r1, #-64]!
   19190:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   19194:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   19198:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   1919c:	4620      	mov	r0, r4
   1919e:	4641      	mov	r1, r8
   191a0:	9306      	str	r3, [sp, #24]
   191a2:	9607      	str	r6, [sp, #28]
   191a4:	9505      	str	r5, [sp, #20]
   191a6:	f000 fd11 	bl	19bcc <d_print_comp>
   191aa:	9e06      	ldr	r6, [sp, #24]
   191ac:	9b04      	ldr	r3, [sp, #16]
   191ae:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   191b2:	2e00      	cmp	r6, #0
   191b4:	f47e a834 	bne.w	17220 <d_print_comp_inner+0x19c>
   191b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   191bc:	29ff      	cmp	r1, #255	; 0xff
   191be:	f000 8409 	beq.w	199d4 <d_print_comp_inner+0x2950>
   191c2:	2320      	movs	r3, #32
   191c4:	1c4a      	adds	r2, r1, #1
   191c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   191ca:	5463      	strb	r3, [r4, r1]
   191cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   191d0:	f7fe be0b 	b.w	17dea <d_print_comp_inner+0xd66>
   191d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   191d8:	2b00      	cmp	r3, #0
   191da:	f6fe abff 	blt.w	179dc <d_print_comp_inner+0x958>
   191de:	2b00      	cmp	r3, #0
   191e0:	f000 829d 	beq.w	1971e <d_print_comp_inner+0x269a>
   191e4:	6880      	ldr	r0, [r0, #8]
   191e6:	3b01      	subs	r3, #1
   191e8:	2800      	cmp	r0, #0
   191ea:	f43e a82d 	beq.w	17248 <d_print_comp_inner+0x1c4>
   191ee:	7802      	ldrb	r2, [r0, #0]
   191f0:	2a2f      	cmp	r2, #47	; 0x2f
   191f2:	d0f4      	beq.n	191de <d_print_comp_inner+0x215a>
   191f4:	f7fe b828 	b.w	17248 <d_print_comp_inner+0x1c4>
   191f8:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   191fc:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   19200:	f1be 0f00 	cmp.w	lr, #0
   19204:	dd14      	ble.n	19230 <d_print_comp_inner+0x21ac>
   19206:	6813      	ldr	r3, [r2, #0]
   19208:	4299      	cmp	r1, r3
   1920a:	f000 83f5 	beq.w	199f8 <d_print_comp_inner+0x2974>
   1920e:	f102 0008 	add.w	r0, r2, #8
   19212:	463b      	mov	r3, r7
   19214:	46a4      	mov	ip, r4
   19216:	e004      	b.n	19222 <d_print_comp_inner+0x219e>
   19218:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   1921c:	42a1      	cmp	r1, r4
   1921e:	f000 81d4 	beq.w	195ca <d_print_comp_inner+0x2546>
   19222:	3301      	adds	r3, #1
   19224:	459e      	cmp	lr, r3
   19226:	4681      	mov	r9, r0
   19228:	f100 0008 	add.w	r0, r0, #8
   1922c:	d1f4      	bne.n	19218 <d_print_comp_inner+0x2194>
   1922e:	4664      	mov	r4, ip
   19230:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   19234:	459e      	cmp	lr, r3
   19236:	f280 84b9 	bge.w	19bac <d_print_comp_inner+0x2b28>
   1923a:	f10e 0301 	add.w	r3, lr, #1
   1923e:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   19242:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   19246:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   1924a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1924e:	3004      	adds	r0, #4
   19250:	468e      	mov	lr, r1
   19252:	2a00      	cmp	r2, #0
   19254:	f000 848d 	beq.w	19b72 <d_print_comp_inner+0x2aee>
   19258:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1925c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   19260:	428b      	cmp	r3, r1
   19262:	f103 0c01 	add.w	ip, r3, #1
   19266:	f280 84a1 	bge.w	19bac <d_print_comp_inner+0x2b28>
   1926a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   1926e:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   19272:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   19276:	6851      	ldr	r1, [r2, #4]
   19278:	6059      	str	r1, [r3, #4]
   1927a:	6003      	str	r3, [r0, #0]
   1927c:	6812      	ldr	r2, [r2, #0]
   1927e:	4618      	mov	r0, r3
   19280:	e7e7      	b.n	19252 <d_print_comp_inner+0x21ce>
   19282:	2500      	movs	r5, #0
   19284:	4619      	mov	r1, r3
   19286:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1928a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1928e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19292:	4620      	mov	r0, r4
   19294:	4798      	blx	r3
   19296:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1929a:	1c5a      	adds	r2, r3, #1
   1929c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   192a0:	462b      	mov	r3, r5
   192a2:	2201      	movs	r2, #1
   192a4:	f7fe bd3d 	b.w	17d22 <d_print_comp_inner+0xc9e>
   192a8:	2e00      	cmp	r6, #0
   192aa:	f000 844d 	beq.w	19b48 <d_print_comp_inner+0x2ac4>
   192ae:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   192b2:	f040 8488 	bne.w	19bc6 <d_print_comp_inner+0x2b42>
   192b6:	6873      	ldr	r3, [r6, #4]
   192b8:	b373      	cbz	r3, 19318 <d_print_comp_inner+0x2294>
   192ba:	4607      	mov	r7, r0
   192bc:	e007      	b.n	192ce <d_print_comp_inner+0x224a>
   192be:	3701      	adds	r7, #1
   192c0:	68b6      	ldr	r6, [r6, #8]
   192c2:	b356      	cbz	r6, 1931a <d_print_comp_inner+0x2296>
   192c4:	7833      	ldrb	r3, [r6, #0]
   192c6:	2b2f      	cmp	r3, #47	; 0x2f
   192c8:	d127      	bne.n	1931a <d_print_comp_inner+0x2296>
   192ca:	6873      	ldr	r3, [r6, #4]
   192cc:	b32b      	cbz	r3, 1931a <d_print_comp_inner+0x2296>
   192ce:	781a      	ldrb	r2, [r3, #0]
   192d0:	2a4a      	cmp	r2, #74	; 0x4a
   192d2:	d1f4      	bne.n	192be <d_print_comp_inner+0x223a>
   192d4:	6859      	ldr	r1, [r3, #4]
   192d6:	4620      	mov	r0, r4
   192d8:	f7fb fe2c 	bl	14f34 <d_find_pack>
   192dc:	b198      	cbz	r0, 19306 <d_print_comp_inner+0x2282>
   192de:	7803      	ldrb	r3, [r0, #0]
   192e0:	2b2f      	cmp	r3, #47	; 0x2f
   192e2:	f040 846c 	bne.w	19bbe <d_print_comp_inner+0x2b3a>
   192e6:	6843      	ldr	r3, [r0, #4]
   192e8:	2b00      	cmp	r3, #0
   192ea:	f000 8464 	beq.w	19bb6 <d_print_comp_inner+0x2b32>
   192ee:	4603      	mov	r3, r0
   192f0:	2000      	movs	r0, #0
   192f2:	e004      	b.n	192fe <d_print_comp_inner+0x227a>
   192f4:	781a      	ldrb	r2, [r3, #0]
   192f6:	2a2f      	cmp	r2, #47	; 0x2f
   192f8:	d105      	bne.n	19306 <d_print_comp_inner+0x2282>
   192fa:	685a      	ldr	r2, [r3, #4]
   192fc:	b11a      	cbz	r2, 19306 <d_print_comp_inner+0x2282>
   192fe:	689b      	ldr	r3, [r3, #8]
   19300:	3001      	adds	r0, #1
   19302:	2b00      	cmp	r3, #0
   19304:	d1f6      	bne.n	192f4 <d_print_comp_inner+0x2270>
   19306:	4407      	add	r7, r0
   19308:	e7da      	b.n	192c0 <d_print_comp_inner+0x223c>
   1930a:	bf00      	nop
   1930c:	00024820 	.word	0x00024820
   19310:	00024874 	.word	0x00024874
   19314:	00024884 	.word	0x00024884
   19318:	461f      	mov	r7, r3
   1931a:	4639      	mov	r1, r7
   1931c:	4620      	mov	r0, r4
   1931e:	f7fb fe8d 	bl	1503c <d_append_num>
   19322:	f7fd bf7d 	b.w	17220 <d_print_comp_inner+0x19c>
   19326:	2500      	movs	r5, #0
   19328:	4619      	mov	r1, r3
   1932a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1932e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19332:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19336:	4620      	mov	r0, r4
   19338:	4798      	blx	r3
   1933a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1933e:	1c5a      	adds	r2, r3, #1
   19340:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19344:	462b      	mov	r3, r5
   19346:	2101      	movs	r1, #1
   19348:	f7fe bb8e 	b.w	17a68 <d_print_comp_inner+0x9e4>
   1934c:	2600      	movs	r6, #0
   1934e:	4619      	mov	r1, r3
   19350:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19354:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19358:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1935c:	4620      	mov	r0, r4
   1935e:	4798      	blx	r3
   19360:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19364:	1c5a      	adds	r2, r3, #1
   19366:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1936a:	4633      	mov	r3, r6
   1936c:	2101      	movs	r1, #1
   1936e:	f7fe bb65 	b.w	17a3c <d_print_comp_inner+0x9b8>
   19372:	2200      	movs	r2, #0
   19374:	4619      	mov	r1, r3
   19376:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1937a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1937e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19382:	4620      	mov	r0, r4
   19384:	4798      	blx	r3
   19386:	2329      	movs	r3, #41	; 0x29
   19388:	7023      	strb	r3, [r4, #0]
   1938a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1938e:	782a      	ldrb	r2, [r5, #0]
   19390:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19394:	2101      	movs	r1, #1
   19396:	3301      	adds	r3, #1
   19398:	2a3d      	cmp	r2, #61	; 0x3d
   1939a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1939e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   193a2:	f47e af58 	bne.w	18256 <d_print_comp_inner+0x11d2>
   193a6:	e63f      	b.n	19028 <d_print_comp_inner+0x1fa4>
   193a8:	2700      	movs	r7, #0
   193aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193ae:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   193b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193b6:	4620      	mov	r0, r4
   193b8:	4798      	blx	r3
   193ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193be:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   193c2:	3301      	adds	r3, #1
   193c4:	4639      	mov	r1, r7
   193c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193ca:	f7fe bf28 	b.w	1821e <d_print_comp_inner+0x119a>
   193ce:	2500      	movs	r5, #0
   193d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193d8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   193dc:	4620      	mov	r0, r4
   193de:	4798      	blx	r3
   193e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193e4:	3301      	adds	r3, #1
   193e6:	4629      	mov	r1, r5
   193e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193ec:	2201      	movs	r2, #1
   193ee:	f7ff bb12 	b.w	18a16 <d_print_comp_inner+0x1992>
   193f2:	781b      	ldrb	r3, [r3, #0]
   193f4:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   193f8:	2901      	cmp	r1, #1
   193fa:	d903      	bls.n	19404 <d_print_comp_inner+0x2380>
   193fc:	3b72      	subs	r3, #114	; 0x72
   193fe:	2b01      	cmp	r3, #1
   19400:	f63d aead 	bhi.w	1715e <d_print_comp_inner+0xda>
   19404:	4641      	mov	r1, r8
   19406:	4620      	mov	r0, r4
   19408:	f001 f9c8 	bl	1a79c <d_print_expr_op>
   1940c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19410:	29ff      	cmp	r1, #255	; 0xff
   19412:	f000 8271 	beq.w	198f8 <d_print_comp_inner+0x2874>
   19416:	1c4a      	adds	r2, r1, #1
   19418:	233c      	movs	r3, #60	; 0x3c
   1941a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1941e:	5463      	strb	r3, [r4, r1]
   19420:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19424:	68ab      	ldr	r3, [r5, #8]
   19426:	4641      	mov	r1, r8
   19428:	685a      	ldr	r2, [r3, #4]
   1942a:	4620      	mov	r0, r4
   1942c:	f000 fbce 	bl	19bcc <d_print_comp>
   19430:	2202      	movs	r2, #2
   19432:	49d5      	ldr	r1, [pc, #852]	; (19788 <d_print_comp_inner+0x2704>)
   19434:	4620      	mov	r0, r4
   19436:	f7fb fb51 	bl	14adc <d_append_buffer>
   1943a:	68ab      	ldr	r3, [r5, #8]
   1943c:	4641      	mov	r1, r8
   1943e:	689a      	ldr	r2, [r3, #8]
   19440:	4620      	mov	r0, r4
   19442:	f000 fbc3 	bl	19bcc <d_print_comp>
   19446:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1944a:	29ff      	cmp	r1, #255	; 0xff
   1944c:	f000 81df 	beq.w	1980e <d_print_comp_inner+0x278a>
   19450:	2329      	movs	r3, #41	; 0x29
   19452:	1c4a      	adds	r2, r1, #1
   19454:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19458:	5463      	strb	r3, [r4, r1]
   1945a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1945e:	f7fd bedf 	b.w	17220 <d_print_comp_inner+0x19c>
   19462:	4632      	mov	r2, r6
   19464:	4641      	mov	r1, r8
   19466:	4620      	mov	r0, r4
   19468:	f000 fbb0 	bl	19bcc <d_print_comp>
   1946c:	f7fd bed8 	b.w	17220 <d_print_comp_inner+0x19c>
   19470:	2600      	movs	r6, #0
   19472:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19476:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1947a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1947e:	4620      	mov	r0, r4
   19480:	4798      	blx	r3
   19482:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19486:	3301      	adds	r3, #1
   19488:	4631      	mov	r1, r6
   1948a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1948e:	2201      	movs	r2, #1
   19490:	f7fe ba55 	b.w	1793e <d_print_comp_inner+0x8ba>
   19494:	49bd      	ldr	r1, [pc, #756]	; (1978c <d_print_comp_inner+0x2708>)
   19496:	6870      	ldr	r0, [r6, #4]
   19498:	f005 ff20 	bl	1f2dc <strncmp>
   1949c:	2800      	cmp	r0, #0
   1949e:	f47e aabd 	bne.w	17a1c <d_print_comp_inner+0x998>
   194a2:	68aa      	ldr	r2, [r5, #8]
   194a4:	4641      	mov	r1, r8
   194a6:	4620      	mov	r0, r4
   194a8:	f000 fb90 	bl	19bcc <d_print_comp>
   194ac:	2202      	movs	r2, #2
   194ae:	49b8      	ldr	r1, [pc, #736]	; (19790 <d_print_comp_inner+0x270c>)
   194b0:	4620      	mov	r0, r4
   194b2:	f7fb fb13 	bl	14adc <d_append_buffer>
   194b6:	f7fe badd 	b.w	17a74 <d_print_comp_inner+0x9f0>
   194ba:	68aa      	ldr	r2, [r5, #8]
   194bc:	7817      	ldrb	r7, [r2, #0]
   194be:	2f00      	cmp	r7, #0
   194c0:	f47e aea8 	bne.w	18214 <d_print_comp_inner+0x1190>
   194c4:	2b3d      	cmp	r3, #61	; 0x3d
   194c6:	f000 82ef 	beq.w	19aa8 <d_print_comp_inner+0x2a24>
   194ca:	68aa      	ldr	r2, [r5, #8]
   194cc:	4641      	mov	r1, r8
   194ce:	4620      	mov	r0, r4
   194d0:	3e02      	subs	r6, #2
   194d2:	f000 fb7b 	bl	19bcc <d_print_comp>
   194d6:	2e04      	cmp	r6, #4
   194d8:	f63d aea2 	bhi.w	17220 <d_print_comp_inner+0x19c>
   194dc:	e8df f006 	tbb	[pc, r6]
   194e0:	0a111826 	.word	0x0a111826
   194e4:	03          	.byte	0x03
   194e5:	00          	.byte	0x00
   194e6:	4620      	mov	r0, r4
   194e8:	2203      	movs	r2, #3
   194ea:	49aa      	ldr	r1, [pc, #680]	; (19794 <d_print_comp_inner+0x2710>)
   194ec:	f7fb faf6 	bl	14adc <d_append_buffer>
   194f0:	f7fd be96 	b.w	17220 <d_print_comp_inner+0x19c>
   194f4:	4620      	mov	r0, r4
   194f6:	2202      	movs	r2, #2
   194f8:	49a7      	ldr	r1, [pc, #668]	; (19798 <d_print_comp_inner+0x2714>)
   194fa:	f7fb faef 	bl	14adc <d_append_buffer>
   194fe:	f7fd be8f 	b.w	17220 <d_print_comp_inner+0x19c>
   19502:	4620      	mov	r0, r4
   19504:	2202      	movs	r2, #2
   19506:	49a5      	ldr	r1, [pc, #660]	; (1979c <d_print_comp_inner+0x2718>)
   19508:	f7fb fae8 	bl	14adc <d_append_buffer>
   1950c:	f7fd be88 	b.w	17220 <d_print_comp_inner+0x19c>
   19510:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19514:	29ff      	cmp	r1, #255	; 0xff
   19516:	f000 831a 	beq.w	19b4e <d_print_comp_inner+0x2aca>
   1951a:	236c      	movs	r3, #108	; 0x6c
   1951c:	1c4a      	adds	r2, r1, #1
   1951e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19522:	5463      	strb	r3, [r4, r1]
   19524:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19528:	f7fd be7a 	b.w	17220 <d_print_comp_inner+0x19c>
   1952c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19530:	29ff      	cmp	r1, #255	; 0xff
   19532:	f000 82db 	beq.w	19aec <d_print_comp_inner+0x2a68>
   19536:	2375      	movs	r3, #117	; 0x75
   19538:	1c4a      	adds	r2, r1, #1
   1953a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1953e:	5463      	strb	r3, [r4, r1]
   19540:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19544:	f7fd be6c 	b.w	17220 <d_print_comp_inner+0x19c>
   19548:	2600      	movs	r6, #0
   1954a:	4619      	mov	r1, r3
   1954c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19550:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19554:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19558:	4620      	mov	r0, r4
   1955a:	4798      	blx	r3
   1955c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19560:	1c5a      	adds	r2, r3, #1
   19562:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19566:	4633      	mov	r3, r6
   19568:	2101      	movs	r1, #1
   1956a:	f7fe bd3c 	b.w	17fe6 <d_print_comp_inner+0xf62>
   1956e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19572:	f7fe bf95 	b.w	184a0 <d_print_comp_inner+0x141c>
   19576:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1957a:	29ff      	cmp	r1, #255	; 0xff
   1957c:	f000 8244 	beq.w	19a08 <d_print_comp_inner+0x2984>
   19580:	2320      	movs	r3, #32
   19582:	1c4a      	adds	r2, r1, #1
   19584:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19588:	5463      	strb	r3, [r4, r1]
   1958a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1958e:	e447      	b.n	18e20 <d_print_comp_inner+0x1d9c>
   19590:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19594:	29ff      	cmp	r1, #255	; 0xff
   19596:	f000 826e 	beq.w	19a76 <d_print_comp_inner+0x29f2>
   1959a:	2320      	movs	r3, #32
   1959c:	1c4a      	adds	r2, r1, #1
   1959e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   195a2:	5463      	strb	r3, [r4, r1]
   195a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   195a8:	e419      	b.n	18dde <d_print_comp_inner+0x1d5a>
   195aa:	2500      	movs	r5, #0
   195ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   195b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195b8:	4620      	mov	r0, r4
   195ba:	4798      	blx	r3
   195bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195c0:	3301      	adds	r3, #1
   195c2:	4629      	mov	r1, r5
   195c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195c8:	e4dd      	b.n	18f86 <d_print_comp_inner+0x1f02>
   195ca:	4664      	mov	r4, ip
   195cc:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   195d0:	b1d8      	cbz	r0, 1960a <d_print_comp_inner+0x2586>
   195d2:	6802      	ldr	r2, [r0, #0]
   195d4:	4291      	cmp	r1, r2
   195d6:	d00a      	beq.n	195ee <d_print_comp_inner+0x256a>
   195d8:	4603      	mov	r3, r0
   195da:	e004      	b.n	195e6 <d_print_comp_inner+0x2562>
   195dc:	685b      	ldr	r3, [r3, #4]
   195de:	b1a3      	cbz	r3, 1960a <d_print_comp_inner+0x2586>
   195e0:	681a      	ldr	r2, [r3, #0]
   195e2:	4291      	cmp	r1, r2
   195e4:	d003      	beq.n	195ee <d_print_comp_inner+0x256a>
   195e6:	4295      	cmp	r5, r2
   195e8:	d1f8      	bne.n	195dc <d_print_comp_inner+0x2558>
   195ea:	4298      	cmp	r0, r3
   195ec:	d0f6      	beq.n	195dc <d_print_comp_inner+0x2558>
   195ee:	3104      	adds	r1, #4
   195f0:	4620      	mov	r0, r4
   195f2:	f7fb fc83 	bl	14efc <d_lookup_template_argument.isra.6>
   195f6:	2800      	cmp	r0, #0
   195f8:	f43d ae26 	beq.w	17248 <d_print_comp_inner+0x1c4>
   195fc:	7803      	ldrb	r3, [r0, #0]
   195fe:	2b2f      	cmp	r3, #47	; 0x2f
   19600:	f43d ae11 	beq.w	17226 <d_print_comp_inner+0x1a2>
   19604:	4601      	mov	r1, r0
   19606:	f7fe bc30 	b.w	17e6a <d_print_comp_inner+0xde6>
   1960a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1960e:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   19612:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19616:	3104      	adds	r1, #4
   19618:	4620      	mov	r0, r4
   1961a:	f7fb fc6f 	bl	14efc <d_lookup_template_argument.isra.6>
   1961e:	2800      	cmp	r0, #0
   19620:	f43d ae10 	beq.w	17244 <d_print_comp_inner+0x1c0>
   19624:	2701      	movs	r7, #1
   19626:	e7e9      	b.n	195fc <d_print_comp_inner+0x2578>
   19628:	2600      	movs	r6, #0
   1962a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1962e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19632:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19636:	4620      	mov	r0, r4
   19638:	4798      	blx	r3
   1963a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1963e:	f8da 5004 	ldr.w	r5, [sl, #4]
   19642:	3301      	adds	r3, #1
   19644:	4631      	mov	r1, r6
   19646:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1964a:	f7ff b85a 	b.w	18702 <d_print_comp_inner+0x167e>
   1964e:	68aa      	ldr	r2, [r5, #8]
   19650:	4641      	mov	r1, r8
   19652:	4620      	mov	r0, r4
   19654:	f000 faba 	bl	19bcc <d_print_comp>
   19658:	9b06      	ldr	r3, [sp, #24]
   1965a:	9a00      	ldr	r2, [sp, #0]
   1965c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   19660:	2b00      	cmp	r3, #0
   19662:	f43e ac9d 	beq.w	17fa0 <d_print_comp_inner+0xf1c>
   19666:	f7fd bddb 	b.w	17220 <d_print_comp_inner+0x19c>
   1966a:	255f      	movs	r5, #95	; 0x5f
   1966c:	f7ff ba10 	b.w	18a90 <d_print_comp_inner+0x1a0c>
   19670:	2500      	movs	r5, #0
   19672:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19676:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1967a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1967e:	4620      	mov	r0, r4
   19680:	4798      	blx	r3
   19682:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19686:	3301      	adds	r3, #1
   19688:	4629      	mov	r1, r5
   1968a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1968e:	f7ff bb82 	b.w	18d96 <d_print_comp_inner+0x1d12>
   19692:	4648      	mov	r0, r9
   19694:	4942      	ldr	r1, [pc, #264]	; (197a0 <d_print_comp_inner+0x271c>)
   19696:	f005 fc47 	bl	1ef28 <strcmp>
   1969a:	b120      	cbz	r0, 196a6 <d_print_comp_inner+0x2622>
   1969c:	463a      	mov	r2, r7
   1969e:	4641      	mov	r1, r8
   196a0:	4620      	mov	r0, r4
   196a2:	f001 f87b 	bl	1a79c <d_print_expr_op>
   196a6:	68ab      	ldr	r3, [r5, #8]
   196a8:	4641      	mov	r1, r8
   196aa:	689a      	ldr	r2, [r3, #8]
   196ac:	4620      	mov	r0, r4
   196ae:	f001 f8b3 	bl	1a818 <d_print_subexpr>
   196b2:	f7fd bd9d 	b.w	171f0 <d_print_comp_inner+0x16c>
   196b6:	2600      	movs	r6, #0
   196b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196bc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   196c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196c4:	4620      	mov	r0, r4
   196c6:	4798      	blx	r3
   196c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196cc:	3301      	adds	r3, #1
   196ce:	4631      	mov	r1, r6
   196d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196d4:	f7ff bb88 	b.w	18de8 <d_print_comp_inner+0x1d64>
   196d8:	2500      	movs	r5, #0
   196da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196de:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   196e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196e6:	4620      	mov	r0, r4
   196e8:	4798      	blx	r3
   196ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196ee:	3301      	adds	r3, #1
   196f0:	4629      	mov	r1, r5
   196f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196f6:	f7fe bb59 	b.w	17dac <d_print_comp_inner+0xd28>
   196fa:	2500      	movs	r5, #0
   196fc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19700:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19704:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19708:	4798      	blx	r3
   1970a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1970e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19712:	3301      	adds	r3, #1
   19714:	4629      	mov	r1, r5
   19716:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1971a:	f7fe bb2b 	b.w	17d74 <d_print_comp_inner+0xcf0>
   1971e:	6840      	ldr	r0, [r0, #4]
   19720:	2800      	cmp	r0, #0
   19722:	f43d ad91 	beq.w	17248 <d_print_comp_inner+0x1c4>
   19726:	f7fe b959 	b.w	179dc <d_print_comp_inner+0x958>
   1972a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   1972e:	4619      	mov	r1, r3
   19730:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19734:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19738:	4620      	mov	r0, r4
   1973a:	4798      	blx	r3
   1973c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19740:	1c5a      	adds	r2, r3, #1
   19742:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19746:	462b      	mov	r3, r5
   19748:	f7ff bb14 	b.w	18d74 <d_print_comp_inner+0x1cf0>
   1974c:	6873      	ldr	r3, [r6, #4]
   1974e:	781a      	ldrb	r2, [r3, #0]
   19750:	2a01      	cmp	r2, #1
   19752:	f000 8153 	beq.w	199fc <d_print_comp_inner+0x2978>
   19756:	f896 a000 	ldrb.w	sl, [r6]
   1975a:	f7ff bae0 	b.w	18d1e <d_print_comp_inner+0x1c9a>
   1975e:	2500      	movs	r5, #0
   19760:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19764:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19768:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1976c:	4620      	mov	r0, r4
   1976e:	4798      	blx	r3
   19770:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19774:	3301      	adds	r3, #1
   19776:	4629      	mov	r1, r5
   19778:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1977c:	f7ff bb55 	b.w	18e2a <d_print_comp_inner+0x1da6>
   19780:	4654      	mov	r4, sl
   19782:	f7fe be8d 	b.w	184a0 <d_print_comp_inner+0x141c>
   19786:	bf00      	nop
   19788:	00024a20 	.word	0x00024a20
   1978c:	00024888 	.word	0x00024888
   19790:	00024890 	.word	0x00024890
   19794:	00024a3c 	.word	0x00024a3c
   19798:	00024a38 	.word	0x00024a38
   1979c:	00024a34 	.word	0x00024a34
   197a0:	00024828 	.word	0x00024828
   197a4:	686a      	ldr	r2, [r5, #4]
   197a6:	4641      	mov	r1, r8
   197a8:	4620      	mov	r0, r4
   197aa:	f001 f835 	bl	1a818 <d_print_subexpr>
   197ae:	4620      	mov	r0, r4
   197b0:	2203      	movs	r2, #3
   197b2:	49e2      	ldr	r1, [pc, #904]	; (19b3c <d_print_comp_inner+0x2ab8>)
   197b4:	f7fb f992 	bl	14adc <d_append_buffer>
   197b8:	f7fd bd32 	b.w	17220 <d_print_comp_inner+0x19c>
   197bc:	ab14      	add	r3, sp, #80	; 0x50
   197be:	9603      	str	r6, [sp, #12]
   197c0:	f843 cd48 	str.w	ip, [r3, #-72]!
   197c4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   197c8:	f7fe b85a 	b.w	17880 <d_print_comp_inner+0x7fc>
   197cc:	2700      	movs	r7, #0
   197ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197d2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   197d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197da:	4620      	mov	r0, r4
   197dc:	4798      	blx	r3
   197de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197e2:	3301      	adds	r3, #1
   197e4:	4639      	mov	r1, r7
   197e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197ea:	e41d      	b.n	19028 <d_print_comp_inner+0x1fa4>
   197ec:	2600      	movs	r6, #0
   197ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197f2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   197f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197fa:	4620      	mov	r0, r4
   197fc:	4798      	blx	r3
   197fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19802:	3301      	adds	r3, #1
   19804:	4631      	mov	r1, r6
   19806:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1980a:	f7ff bb8a 	b.w	18f22 <d_print_comp_inner+0x1e9e>
   1980e:	2500      	movs	r5, #0
   19810:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19814:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19818:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1981c:	4620      	mov	r0, r4
   1981e:	4798      	blx	r3
   19820:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19824:	3301      	adds	r3, #1
   19826:	4629      	mov	r1, r5
   19828:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1982c:	e610      	b.n	19450 <d_print_comp_inner+0x23cc>
   1982e:	2600      	movs	r6, #0
   19830:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19834:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19838:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1983c:	4620      	mov	r0, r4
   1983e:	4798      	blx	r3
   19840:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19844:	3301      	adds	r3, #1
   19846:	4631      	mov	r1, r6
   19848:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1984c:	f7ff bb8a 	b.w	18f64 <d_print_comp_inner+0x1ee0>
   19850:	685a      	ldr	r2, [r3, #4]
   19852:	6891      	ldr	r1, [r2, #8]
   19854:	2901      	cmp	r1, #1
   19856:	f47d ac90 	bne.w	1717a <d_print_comp_inner+0xf6>
   1985a:	6852      	ldr	r2, [r2, #4]
   1985c:	7812      	ldrb	r2, [r2, #0]
   1985e:	2a3e      	cmp	r2, #62	; 0x3e
   19860:	f47d ac8b 	bne.w	1717a <d_print_comp_inner+0xf6>
   19864:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19868:	29ff      	cmp	r1, #255	; 0xff
   1986a:	d10f      	bne.n	1988c <d_print_comp_inner+0x2808>
   1986c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19870:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19874:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19878:	4620      	mov	r0, r4
   1987a:	4798      	blx	r3
   1987c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19880:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19884:	3301      	adds	r3, #1
   19886:	4631      	mov	r1, r6
   19888:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1988c:	2328      	movs	r3, #40	; 0x28
   1988e:	1c4a      	adds	r2, r1, #1
   19890:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19894:	5463      	strb	r3, [r4, r1]
   19896:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1989a:	686b      	ldr	r3, [r5, #4]
   1989c:	f7fd bc6d 	b.w	1717a <d_print_comp_inner+0xf6>
   198a0:	2500      	movs	r5, #0
   198a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198a6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   198aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   198ae:	4620      	mov	r0, r4
   198b0:	4798      	blx	r3
   198b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198b6:	3301      	adds	r3, #1
   198b8:	4629      	mov	r1, r5
   198ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198be:	f7ff bb0b 	b.w	18ed8 <d_print_comp_inner+0x1e54>
   198c2:	f8db b004 	ldr.w	fp, [fp, #4]
   198c6:	f1bb 0f00 	cmp.w	fp, #0
   198ca:	f43e ade9 	beq.w	184a0 <d_print_comp_inner+0x141c>
   198ce:	f7fd bfc3 	b.w	17858 <d_print_comp_inner+0x7d4>
   198d2:	9b02      	ldr	r3, [sp, #8]
   198d4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   198d8:	f7fd bfdb 	b.w	17892 <d_print_comp_inner+0x80e>
   198dc:	6893      	ldr	r3, [r2, #8]
   198de:	781b      	ldrb	r3, [r3, #0]
   198e0:	2b29      	cmp	r3, #41	; 0x29
   198e2:	bf1c      	itt	ne
   198e4:	2301      	movne	r3, #1
   198e6:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   198ea:	6852      	ldr	r2, [r2, #4]
   198ec:	4641      	mov	r1, r8
   198ee:	4620      	mov	r0, r4
   198f0:	f000 ff92 	bl	1a818 <d_print_subexpr>
   198f4:	f7fd bc52 	b.w	1719c <d_print_comp_inner+0x118>
   198f8:	2600      	movs	r6, #0
   198fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198fe:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19902:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19906:	4620      	mov	r0, r4
   19908:	4798      	blx	r3
   1990a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1990e:	3301      	adds	r3, #1
   19910:	4631      	mov	r1, r6
   19912:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19916:	e57e      	b.n	19416 <d_print_comp_inner+0x2392>
   19918:	6872      	ldr	r2, [r6, #4]
   1991a:	4641      	mov	r1, r8
   1991c:	4620      	mov	r0, r4
   1991e:	f000 ff7b 	bl	1a818 <d_print_subexpr>
   19922:	464a      	mov	r2, r9
   19924:	4641      	mov	r1, r8
   19926:	4620      	mov	r0, r4
   19928:	f000 ff38 	bl	1a79c <d_print_expr_op>
   1992c:	f7fd bc78 	b.w	17220 <d_print_comp_inner+0x19c>
   19930:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19934:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19938:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1993c:	4620      	mov	r0, r4
   1993e:	4798      	blx	r3
   19940:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19944:	3301      	adds	r3, #1
   19946:	4629      	mov	r1, r5
   19948:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1994c:	f7fd bfad 	b.w	178aa <d_print_comp_inner+0x826>
   19950:	464a      	mov	r2, r9
   19952:	4641      	mov	r1, r8
   19954:	4620      	mov	r0, r4
   19956:	f000 ff5f 	bl	1a818 <d_print_subexpr>
   1995a:	4652      	mov	r2, sl
   1995c:	4641      	mov	r1, r8
   1995e:	4620      	mov	r0, r4
   19960:	f000 ff1c 	bl	1a79c <d_print_expr_op>
   19964:	463a      	mov	r2, r7
   19966:	4641      	mov	r1, r8
   19968:	4620      	mov	r0, r4
   1996a:	f000 ff55 	bl	1a818 <d_print_subexpr>
   1996e:	4620      	mov	r0, r4
   19970:	2203      	movs	r2, #3
   19972:	4973      	ldr	r1, [pc, #460]	; (19b40 <d_print_comp_inner+0x2abc>)
   19974:	f7fb f8b2 	bl	14adc <d_append_buffer>
   19978:	462a      	mov	r2, r5
   1997a:	4641      	mov	r1, r8
   1997c:	4620      	mov	r0, r4
   1997e:	f000 ff4b 	bl	1a818 <d_print_subexpr>
   19982:	f7fd bc4d 	b.w	17220 <d_print_comp_inner+0x19c>
   19986:	454f      	cmp	r7, r9
   19988:	f67f ae6f 	bls.w	1966a <d_print_comp_inner+0x25e6>
   1998c:	2d5f      	cmp	r5, #95	; 0x5f
   1998e:	f47f ae6c 	bne.w	1966a <d_print_comp_inner+0x25e6>
   19992:	28ff      	cmp	r0, #255	; 0xff
   19994:	f63f a87c 	bhi.w	18a90 <d_print_comp_inner+0x1a0c>
   19998:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1999c:	29ff      	cmp	r1, #255	; 0xff
   1999e:	b2c5      	uxtb	r5, r0
   199a0:	d10f      	bne.n	199c2 <d_print_comp_inner+0x293e>
   199a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   199aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199ae:	4620      	mov	r0, r4
   199b0:	4798      	blx	r3
   199b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199b6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   199ba:	3301      	adds	r3, #1
   199bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199c0:	2100      	movs	r1, #0
   199c2:	1c4b      	adds	r3, r1, #1
   199c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   199c8:	464e      	mov	r6, r9
   199ca:	5465      	strb	r5, [r4, r1]
   199cc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   199d0:	f7ff b868 	b.w	18aa4 <d_print_comp_inner+0x1a20>
   199d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199d8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   199dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199e0:	4620      	mov	r0, r4
   199e2:	4798      	blx	r3
   199e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199e8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   199ec:	3301      	adds	r3, #1
   199ee:	4631      	mov	r1, r6
   199f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199f4:	f7ff bbe5 	b.w	191c2 <d_print_comp_inner+0x213e>
   199f8:	4691      	mov	r9, r2
   199fa:	e5e7      	b.n	195cc <d_print_comp_inner+0x2548>
   199fc:	68b2      	ldr	r2, [r6, #8]
   199fe:	7812      	ldrb	r2, [r2, #0]
   19a00:	2a29      	cmp	r2, #41	; 0x29
   19a02:	bf08      	it	eq
   19a04:	461e      	moveq	r6, r3
   19a06:	e6a6      	b.n	19756 <d_print_comp_inner+0x26d2>
   19a08:	2500      	movs	r5, #0
   19a0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a0e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19a12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a16:	4620      	mov	r0, r4
   19a18:	4798      	blx	r3
   19a1a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a1e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19a22:	3301      	adds	r3, #1
   19a24:	4629      	mov	r1, r5
   19a26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a2a:	e5a9      	b.n	19580 <d_print_comp_inner+0x24fc>
   19a2c:	2600      	movs	r6, #0
   19a2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a32:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19a36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a3a:	4620      	mov	r0, r4
   19a3c:	4798      	blx	r3
   19a3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a42:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19a46:	3301      	adds	r3, #1
   19a48:	4631      	mov	r1, r6
   19a4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a4e:	f7fd bbc8 	b.w	171e2 <d_print_comp_inner+0x15e>
   19a52:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   19a56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a5e:	4620      	mov	r0, r4
   19a60:	4798      	blx	r3
   19a62:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a66:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19a6a:	3301      	adds	r3, #1
   19a6c:	4631      	mov	r1, r6
   19a6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a72:	f7fd bba4 	b.w	171be <d_print_comp_inner+0x13a>
   19a76:	2600      	movs	r6, #0
   19a78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a7c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19a80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a84:	4620      	mov	r0, r4
   19a86:	4798      	blx	r3
   19a88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a8c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19a90:	3301      	adds	r3, #1
   19a92:	4631      	mov	r1, r6
   19a94:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a98:	e57f      	b.n	1959a <d_print_comp_inner+0x2516>
   19a9a:	6841      	ldr	r1, [r0, #4]
   19a9c:	2900      	cmp	r1, #0
   19a9e:	f43d abd0 	beq.w	17242 <d_print_comp_inner+0x1be>
   19aa2:	780b      	ldrb	r3, [r1, #0]
   19aa4:	f7fe b9e1 	b.w	17e6a <d_print_comp_inner+0xde6>
   19aa8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19aac:	29ff      	cmp	r1, #255	; 0xff
   19aae:	d00d      	beq.n	19acc <d_print_comp_inner+0x2a48>
   19ab0:	232d      	movs	r3, #45	; 0x2d
   19ab2:	1c4a      	adds	r2, r1, #1
   19ab4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19ab8:	5463      	strb	r3, [r4, r1]
   19aba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19abe:	e504      	b.n	194ca <d_print_comp_inner+0x2446>
   19ac0:	2205      	movs	r2, #5
   19ac2:	4920      	ldr	r1, [pc, #128]	; (19b44 <d_print_comp_inner+0x2ac0>)
   19ac4:	f7fb f80a 	bl	14adc <d_append_buffer>
   19ac8:	f7fd bbaa 	b.w	17220 <d_print_comp_inner+0x19c>
   19acc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19ad0:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   19ad4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19ad8:	4798      	blx	r3
   19ada:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ade:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   19ae2:	3301      	adds	r3, #1
   19ae4:	4639      	mov	r1, r7
   19ae6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19aea:	e7e1      	b.n	19ab0 <d_print_comp_inner+0x2a2c>
   19aec:	2500      	movs	r5, #0
   19aee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19af2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19af6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19afa:	4620      	mov	r0, r4
   19afc:	4798      	blx	r3
   19afe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b02:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19b06:	3301      	adds	r3, #1
   19b08:	4629      	mov	r1, r5
   19b0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b0e:	e512      	b.n	19536 <d_print_comp_inner+0x24b2>
   19b10:	2700      	movs	r7, #0
   19b12:	f7ff b913 	b.w	18d3c <d_print_comp_inner+0x1cb8>
   19b16:	2500      	movs	r5, #0
   19b18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b1c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19b20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b24:	4620      	mov	r0, r4
   19b26:	4798      	blx	r3
   19b28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b2c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19b30:	3301      	adds	r3, #1
   19b32:	4629      	mov	r1, r5
   19b34:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b38:	f7fd bb6b 	b.w	17212 <d_print_comp_inner+0x18e>
   19b3c:	00022fb0 	.word	0x00022fb0
   19b40:	00024a28 	.word	0x00024a28
   19b44:	00024a40 	.word	0x00024a40
   19b48:	4637      	mov	r7, r6
   19b4a:	f7ff bbe6 	b.w	1931a <d_print_comp_inner+0x2296>
   19b4e:	2500      	movs	r5, #0
   19b50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19b58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b5c:	4620      	mov	r0, r4
   19b5e:	4798      	blx	r3
   19b60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b64:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19b68:	3301      	adds	r3, #1
   19b6a:	4629      	mov	r1, r5
   19b6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b70:	e4d3      	b.n	1951a <d_print_comp_inner+0x2496>
   19b72:	4671      	mov	r1, lr
   19b74:	6002      	str	r2, [r0, #0]
   19b76:	3104      	adds	r1, #4
   19b78:	4620      	mov	r0, r4
   19b7a:	f7fb f9bf 	bl	14efc <d_lookup_template_argument.isra.6>
   19b7e:	2800      	cmp	r0, #0
   19b80:	f47f ad3c 	bne.w	195fc <d_print_comp_inner+0x2578>
   19b84:	f7fd bb60 	b.w	17248 <d_print_comp_inner+0x1c4>
   19b88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b8c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19b90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b94:	4620      	mov	r0, r4
   19b96:	4798      	blx	r3
   19b98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b9c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19ba0:	3301      	adds	r3, #1
   19ba2:	4631      	mov	r1, r6
   19ba4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ba8:	f7fe bc02 	b.w	183b0 <d_print_comp_inner+0x132c>
   19bac:	2301      	movs	r3, #1
   19bae:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   19bb2:	f7fd bb35 	b.w	17220 <d_print_comp_inner+0x19c>
   19bb6:	4618      	mov	r0, r3
   19bb8:	4407      	add	r7, r0
   19bba:	f7ff bb81 	b.w	192c0 <d_print_comp_inner+0x223c>
   19bbe:	2000      	movs	r0, #0
   19bc0:	4407      	add	r7, r0
   19bc2:	f7ff bb7d 	b.w	192c0 <d_print_comp_inner+0x223c>
   19bc6:	4607      	mov	r7, r0
   19bc8:	f7ff bba7 	b.w	1931a <d_print_comp_inner+0x2296>

00019bcc <d_print_comp>:
   19bcc:	b510      	push	{r4, lr}
   19bce:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19bd2:	b082      	sub	sp, #8
   19bd4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19bd8:	4604      	mov	r4, r0
   19bda:	e88d 000c 	stmia.w	sp, {r2, r3}
   19bde:	f7fd fa51 	bl	17084 <d_print_comp_inner>
   19be2:	9b01      	ldr	r3, [sp, #4]
   19be4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19be8:	b002      	add	sp, #8
   19bea:	bd10      	pop	{r4, pc}

00019bec <d_print_mod>:
   19bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19bf0:	7813      	ldrb	r3, [r2, #0]
   19bf2:	3b03      	subs	r3, #3
   19bf4:	b082      	sub	sp, #8
   19bf6:	4615      	mov	r5, r2
   19bf8:	4604      	mov	r4, r0
   19bfa:	4688      	mov	r8, r1
   19bfc:	2b49      	cmp	r3, #73	; 0x49
   19bfe:	f200 8223 	bhi.w	1a048 <d_print_mod+0x45c>
   19c02:	e8df f013 	tbh	[pc, r3, lsl #1]
   19c06:	01e7      	.short	0x01e7
   19c08:	02210221 	.word	0x02210221
   19c0c:	02210221 	.word	0x02210221
   19c10:	02210221 	.word	0x02210221
   19c14:	02210221 	.word	0x02210221
   19c18:	02210221 	.word	0x02210221
   19c1c:	02210221 	.word	0x02210221
   19c20:	02210221 	.word	0x02210221
   19c24:	02210221 	.word	0x02210221
   19c28:	02210221 	.word	0x02210221
   19c2c:	02210221 	.word	0x02210221
   19c30:	01e90221 	.word	0x01e90221
   19c34:	01a80182 	.word	0x01a80182
   19c38:	018201e9 	.word	0x018201e9
   19c3c:	01cd01a8 	.word	0x01cd01a8
   19c40:	006f01da 	.word	0x006f01da
   19c44:	009c008c 	.word	0x009c008c
   19c48:	00cf00ab 	.word	0x00cf00ab
   19c4c:	022100f4 	.word	0x022100f4
   19c50:	02210221 	.word	0x02210221
   19c54:	01190221 	.word	0x01190221
   19c58:	015c0221 	.word	0x015c0221
   19c5c:	02210221 	.word	0x02210221
   19c60:	02210221 	.word	0x02210221
   19c64:	02210221 	.word	0x02210221
   19c68:	02210221 	.word	0x02210221
   19c6c:	02210221 	.word	0x02210221
   19c70:	02210221 	.word	0x02210221
   19c74:	02210221 	.word	0x02210221
   19c78:	02210221 	.word	0x02210221
   19c7c:	02210221 	.word	0x02210221
   19c80:	02210221 	.word	0x02210221
   19c84:	02210221 	.word	0x02210221
   19c88:	02210221 	.word	0x02210221
   19c8c:	02210221 	.word	0x02210221
   19c90:	02210221 	.word	0x02210221
   19c94:	02210221 	.word	0x02210221
   19c98:	004a      	.short	0x004a
   19c9a:	4dd3      	ldr	r5, [pc, #844]	; (19fe8 <d_print_mod+0x3fc>)
   19c9c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ca0:	f105 0711 	add.w	r7, r5, #17
   19ca4:	f04f 0800 	mov.w	r8, #0
   19ca8:	e008      	b.n	19cbc <d_print_mod+0xd0>
   19caa:	460b      	mov	r3, r1
   19cac:	3101      	adds	r1, #1
   19cae:	42bd      	cmp	r5, r7
   19cb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19cb4:	54e6      	strb	r6, [r4, r3]
   19cb6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19cba:	d02d      	beq.n	19d18 <d_print_mod+0x12c>
   19cbc:	29ff      	cmp	r1, #255	; 0xff
   19cbe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19cc2:	d1f2      	bne.n	19caa <d_print_mod+0xbe>
   19cc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19cc8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19ccc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19cd0:	4620      	mov	r0, r4
   19cd2:	4798      	blx	r3
   19cd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19cd8:	3301      	adds	r3, #1
   19cda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cde:	2101      	movs	r1, #1
   19ce0:	2300      	movs	r3, #0
   19ce2:	e7e4      	b.n	19cae <d_print_mod+0xc2>
   19ce4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ce8:	29ff      	cmp	r1, #255	; 0xff
   19cea:	f000 81f7 	beq.w	1a0dc <d_print_mod+0x4f0>
   19cee:	1c4a      	adds	r2, r1, #1
   19cf0:	2320      	movs	r3, #32
   19cf2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19cf6:	5463      	strb	r3, [r4, r1]
   19cf8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19cfc:	68aa      	ldr	r2, [r5, #8]
   19cfe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19d02:	9200      	str	r2, [sp, #0]
   19d04:	4641      	mov	r1, r8
   19d06:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19d0a:	4620      	mov	r0, r4
   19d0c:	9301      	str	r3, [sp, #4]
   19d0e:	f7fd f9b9 	bl	17084 <d_print_comp_inner>
   19d12:	9b01      	ldr	r3, [sp, #4]
   19d14:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19d18:	b002      	add	sp, #8
   19d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19d1e:	f011 0504 	ands.w	r5, r1, #4
   19d22:	d1f9      	bne.n	19d18 <d_print_mod+0x12c>
   19d24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19d28:	2bff      	cmp	r3, #255	; 0xff
   19d2a:	f000 821c 	beq.w	1a166 <d_print_mod+0x57a>
   19d2e:	222a      	movs	r2, #42	; 0x2a
   19d30:	1c59      	adds	r1, r3, #1
   19d32:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d36:	54e2      	strb	r2, [r4, r3]
   19d38:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19d3c:	e7ec      	b.n	19d18 <d_print_mod+0x12c>
   19d3e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19d42:	29ff      	cmp	r1, #255	; 0xff
   19d44:	f000 81b9 	beq.w	1a0ba <d_print_mod+0x4ce>
   19d48:	1c4a      	adds	r2, r1, #1
   19d4a:	2326      	movs	r3, #38	; 0x26
   19d4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19d50:	5463      	strb	r3, [r4, r1]
   19d52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19d56:	b002      	add	sp, #8
   19d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19d5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19d60:	4da2      	ldr	r5, [pc, #648]	; (19fec <d_print_mod+0x400>)
   19d62:	f04f 0800 	mov.w	r8, #0
   19d66:	1caf      	adds	r7, r5, #2
   19d68:	e008      	b.n	19d7c <d_print_mod+0x190>
   19d6a:	460b      	mov	r3, r1
   19d6c:	3101      	adds	r1, #1
   19d6e:	42bd      	cmp	r5, r7
   19d70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d74:	54e6      	strb	r6, [r4, r3]
   19d76:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19d7a:	d0cd      	beq.n	19d18 <d_print_mod+0x12c>
   19d7c:	29ff      	cmp	r1, #255	; 0xff
   19d7e:	f815 6b01 	ldrb.w	r6, [r5], #1
   19d82:	d1f2      	bne.n	19d6a <d_print_mod+0x17e>
   19d84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19d8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d90:	4620      	mov	r0, r4
   19d92:	4798      	blx	r3
   19d94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d98:	3301      	adds	r3, #1
   19d9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d9e:	2101      	movs	r1, #1
   19da0:	2300      	movs	r3, #0
   19da2:	e7e4      	b.n	19d6e <d_print_mod+0x182>
   19da4:	4d92      	ldr	r5, [pc, #584]	; (19ff0 <d_print_mod+0x404>)
   19da6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19daa:	f105 0708 	add.w	r7, r5, #8
   19dae:	f04f 0800 	mov.w	r8, #0
   19db2:	e008      	b.n	19dc6 <d_print_mod+0x1da>
   19db4:	460b      	mov	r3, r1
   19db6:	3101      	adds	r1, #1
   19db8:	42bd      	cmp	r5, r7
   19dba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19dbe:	54e6      	strb	r6, [r4, r3]
   19dc0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19dc4:	d0a8      	beq.n	19d18 <d_print_mod+0x12c>
   19dc6:	29ff      	cmp	r1, #255	; 0xff
   19dc8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19dcc:	d1f2      	bne.n	19db4 <d_print_mod+0x1c8>
   19dce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19dd2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19dd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19dda:	4620      	mov	r0, r4
   19ddc:	4798      	blx	r3
   19dde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19de2:	3301      	adds	r3, #1
   19de4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19de8:	2101      	movs	r1, #1
   19dea:	2300      	movs	r3, #0
   19dec:	e7e4      	b.n	19db8 <d_print_mod+0x1cc>
   19dee:	4d81      	ldr	r5, [pc, #516]	; (19ff4 <d_print_mod+0x408>)
   19df0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19df4:	f105 070a 	add.w	r7, r5, #10
   19df8:	f04f 0800 	mov.w	r8, #0
   19dfc:	e008      	b.n	19e10 <d_print_mod+0x224>
   19dfe:	460b      	mov	r3, r1
   19e00:	3101      	adds	r1, #1
   19e02:	42bd      	cmp	r5, r7
   19e04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19e08:	54e6      	strb	r6, [r4, r3]
   19e0a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19e0e:	d083      	beq.n	19d18 <d_print_mod+0x12c>
   19e10:	29ff      	cmp	r1, #255	; 0xff
   19e12:	f815 6b01 	ldrb.w	r6, [r5], #1
   19e16:	d1f2      	bne.n	19dfe <d_print_mod+0x212>
   19e18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e1c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19e20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19e24:	4620      	mov	r0, r4
   19e26:	4798      	blx	r3
   19e28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e2c:	3301      	adds	r3, #1
   19e2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e32:	2101      	movs	r1, #1
   19e34:	2300      	movs	r3, #0
   19e36:	e7e4      	b.n	19e02 <d_print_mod+0x216>
   19e38:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   19e3c:	2b28      	cmp	r3, #40	; 0x28
   19e3e:	d00b      	beq.n	19e58 <d_print_mod+0x26c>
   19e40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19e44:	2bff      	cmp	r3, #255	; 0xff
   19e46:	f000 8126 	beq.w	1a096 <d_print_mod+0x4aa>
   19e4a:	2220      	movs	r2, #32
   19e4c:	1c59      	adds	r1, r3, #1
   19e4e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19e52:	54e2      	strb	r2, [r4, r3]
   19e54:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19e58:	686a      	ldr	r2, [r5, #4]
   19e5a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19e5e:	4d66      	ldr	r5, [pc, #408]	; (19ff8 <d_print_mod+0x40c>)
   19e60:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19e64:	4641      	mov	r1, r8
   19e66:	4620      	mov	r0, r4
   19e68:	9301      	str	r3, [sp, #4]
   19e6a:	9200      	str	r2, [sp, #0]
   19e6c:	f7fd f90a 	bl	17084 <d_print_comp_inner>
   19e70:	9b01      	ldr	r3, [sp, #4]
   19e72:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19e76:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19e7a:	1cef      	adds	r7, r5, #3
   19e7c:	f04f 0800 	mov.w	r8, #0
   19e80:	e009      	b.n	19e96 <d_print_mod+0x2aa>
   19e82:	460b      	mov	r3, r1
   19e84:	3101      	adds	r1, #1
   19e86:	42bd      	cmp	r5, r7
   19e88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19e8c:	54e6      	strb	r6, [r4, r3]
   19e8e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19e92:	f43f af41 	beq.w	19d18 <d_print_mod+0x12c>
   19e96:	29ff      	cmp	r1, #255	; 0xff
   19e98:	f815 6b01 	ldrb.w	r6, [r5], #1
   19e9c:	d1f1      	bne.n	19e82 <d_print_mod+0x296>
   19e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ea2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19ea6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19eaa:	4620      	mov	r0, r4
   19eac:	4798      	blx	r3
   19eae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19eb2:	3301      	adds	r3, #1
   19eb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19eb8:	2101      	movs	r1, #1
   19eba:	2300      	movs	r3, #0
   19ebc:	e7e3      	b.n	19e86 <d_print_mod+0x29a>
   19ebe:	4e4f      	ldr	r6, [pc, #316]	; (19ffc <d_print_mod+0x410>)
   19ec0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ec4:	f106 0a0a 	add.w	sl, r6, #10
   19ec8:	f04f 0900 	mov.w	r9, #0
   19ecc:	e009      	b.n	19ee2 <d_print_mod+0x2f6>
   19ece:	460b      	mov	r3, r1
   19ed0:	3101      	adds	r1, #1
   19ed2:	4556      	cmp	r6, sl
   19ed4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ed8:	54e7      	strb	r7, [r4, r3]
   19eda:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19ede:	f000 80c0 	beq.w	1a062 <d_print_mod+0x476>
   19ee2:	29ff      	cmp	r1, #255	; 0xff
   19ee4:	f816 7b01 	ldrb.w	r7, [r6], #1
   19ee8:	d1f1      	bne.n	19ece <d_print_mod+0x2e2>
   19eea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19eee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19ef2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19ef6:	4620      	mov	r0, r4
   19ef8:	4798      	blx	r3
   19efa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19efe:	3301      	adds	r3, #1
   19f00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19f04:	2101      	movs	r1, #1
   19f06:	2300      	movs	r3, #0
   19f08:	e7e3      	b.n	19ed2 <d_print_mod+0x2e6>
   19f0a:	4d3d      	ldr	r5, [pc, #244]	; (1a000 <d_print_mod+0x414>)
   19f0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19f10:	f105 0709 	add.w	r7, r5, #9
   19f14:	f04f 0800 	mov.w	r8, #0
   19f18:	e009      	b.n	19f2e <d_print_mod+0x342>
   19f1a:	460b      	mov	r3, r1
   19f1c:	3101      	adds	r1, #1
   19f1e:	42bd      	cmp	r5, r7
   19f20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f24:	54e6      	strb	r6, [r4, r3]
   19f26:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19f2a:	f43f aef5 	beq.w	19d18 <d_print_mod+0x12c>
   19f2e:	29ff      	cmp	r1, #255	; 0xff
   19f30:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19f34:	d1f1      	bne.n	19f1a <d_print_mod+0x32e>
   19f36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f3a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19f3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f42:	4620      	mov	r0, r4
   19f44:	4798      	blx	r3
   19f46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f4a:	3301      	adds	r3, #1
   19f4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19f50:	2101      	movs	r1, #1
   19f52:	2300      	movs	r3, #0
   19f54:	e7e3      	b.n	19f1e <d_print_mod+0x332>
   19f56:	4d2b      	ldr	r5, [pc, #172]	; (1a004 <d_print_mod+0x418>)
   19f58:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19f5c:	1daf      	adds	r7, r5, #6
   19f5e:	f04f 0800 	mov.w	r8, #0
   19f62:	e009      	b.n	19f78 <d_print_mod+0x38c>
   19f64:	460b      	mov	r3, r1
   19f66:	3101      	adds	r1, #1
   19f68:	42bd      	cmp	r5, r7
   19f6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f6e:	54e6      	strb	r6, [r4, r3]
   19f70:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19f74:	f43f aed0 	beq.w	19d18 <d_print_mod+0x12c>
   19f78:	29ff      	cmp	r1, #255	; 0xff
   19f7a:	f815 6b01 	ldrb.w	r6, [r5], #1
   19f7e:	d1f1      	bne.n	19f64 <d_print_mod+0x378>
   19f80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f84:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19f88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f8c:	4620      	mov	r0, r4
   19f8e:	4798      	blx	r3
   19f90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f94:	3301      	adds	r3, #1
   19f96:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19f9a:	2101      	movs	r1, #1
   19f9c:	2300      	movs	r3, #0
   19f9e:	e7e3      	b.n	19f68 <d_print_mod+0x37c>
   19fa0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19fa4:	2bff      	cmp	r3, #255	; 0xff
   19fa6:	f000 80cc 	beq.w	1a142 <d_print_mod+0x556>
   19faa:	2220      	movs	r2, #32
   19fac:	1c59      	adds	r1, r3, #1
   19fae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19fb2:	54e2      	strb	r2, [r4, r3]
   19fb4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19fb8:	e6c3      	b.n	19d42 <d_print_mod+0x156>
   19fba:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19fbe:	2bff      	cmp	r3, #255	; 0xff
   19fc0:	f000 80ad 	beq.w	1a11e <d_print_mod+0x532>
   19fc4:	2220      	movs	r2, #32
   19fc6:	1c59      	adds	r1, r3, #1
   19fc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19fcc:	54e2      	strb	r2, [r4, r3]
   19fce:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19fd2:	e6c5      	b.n	19d60 <d_print_mod+0x174>
   19fd4:	686a      	ldr	r2, [r5, #4]
   19fd6:	e692      	b.n	19cfe <d_print_mod+0x112>
   19fd8:	4d0b      	ldr	r5, [pc, #44]	; (1a008 <d_print_mod+0x41c>)
   19fda:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19fde:	f105 0709 	add.w	r7, r5, #9
   19fe2:	f04f 0800 	mov.w	r8, #0
   19fe6:	e01b      	b.n	1a020 <d_print_mod+0x434>
   19fe8:	00024b0b 	.word	0x00024b0b
   19fec:	00024b20 	.word	0x00024b20
   19ff0:	00024b23 	.word	0x00024b23
   19ff4:	00024b30 	.word	0x00024b30
   19ff8:	00024b3c 	.word	0x00024b3c
   19ffc:	00024b40 	.word	0x00024b40
   1a000:	00024af7 	.word	0x00024af7
   1a004:	00024b04 	.word	0x00024b04
   1a008:	00024aeb 	.word	0x00024aeb
   1a00c:	460b      	mov	r3, r1
   1a00e:	3101      	adds	r1, #1
   1a010:	42af      	cmp	r7, r5
   1a012:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a016:	54e6      	strb	r6, [r4, r3]
   1a018:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a01c:	f43f ae7c 	beq.w	19d18 <d_print_mod+0x12c>
   1a020:	29ff      	cmp	r1, #255	; 0xff
   1a022:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1a026:	d1f1      	bne.n	1a00c <d_print_mod+0x420>
   1a028:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a02c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a030:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a034:	4620      	mov	r0, r4
   1a036:	4798      	blx	r3
   1a038:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a03c:	3301      	adds	r3, #1
   1a03e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a042:	2101      	movs	r1, #1
   1a044:	2300      	movs	r3, #0
   1a046:	e7e3      	b.n	1a010 <d_print_mod+0x424>
   1a048:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1a04c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a050:	462a      	mov	r2, r5
   1a052:	9301      	str	r3, [sp, #4]
   1a054:	9500      	str	r5, [sp, #0]
   1a056:	f7fd f815 	bl	17084 <d_print_comp_inner>
   1a05a:	9b01      	ldr	r3, [sp, #4]
   1a05c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a060:	e65a      	b.n	19d18 <d_print_mod+0x12c>
   1a062:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a066:	686a      	ldr	r2, [r5, #4]
   1a068:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a06c:	4641      	mov	r1, r8
   1a06e:	4620      	mov	r0, r4
   1a070:	9301      	str	r3, [sp, #4]
   1a072:	9200      	str	r2, [sp, #0]
   1a074:	f7fd f806 	bl	17084 <d_print_comp_inner>
   1a078:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a07c:	9b01      	ldr	r3, [sp, #4]
   1a07e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a082:	29ff      	cmp	r1, #255	; 0xff
   1a084:	d03a      	beq.n	1a0fc <d_print_mod+0x510>
   1a086:	1c4a      	adds	r2, r1, #1
   1a088:	2329      	movs	r3, #41	; 0x29
   1a08a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a08e:	5463      	strb	r3, [r4, r1]
   1a090:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a094:	e640      	b.n	19d18 <d_print_mod+0x12c>
   1a096:	2600      	movs	r6, #0
   1a098:	4619      	mov	r1, r3
   1a09a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a09e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a0a2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1a0a6:	4798      	blx	r3
   1a0a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0ac:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a0b0:	1c5a      	adds	r2, r3, #1
   1a0b2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a0b6:	4633      	mov	r3, r6
   1a0b8:	e6c7      	b.n	19e4a <d_print_mod+0x25e>
   1a0ba:	2500      	movs	r5, #0
   1a0bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a0c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a0c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a0c8:	4620      	mov	r0, r4
   1a0ca:	4798      	blx	r3
   1a0cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0d0:	3301      	adds	r3, #1
   1a0d2:	4629      	mov	r1, r5
   1a0d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a0d8:	2201      	movs	r2, #1
   1a0da:	e636      	b.n	19d4a <d_print_mod+0x15e>
   1a0dc:	2600      	movs	r6, #0
   1a0de:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a0e2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a0e6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1a0ea:	4798      	blx	r3
   1a0ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0f0:	3301      	adds	r3, #1
   1a0f2:	4631      	mov	r1, r6
   1a0f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a0f8:	2201      	movs	r2, #1
   1a0fa:	e5f9      	b.n	19cf0 <d_print_mod+0x104>
   1a0fc:	2500      	movs	r5, #0
   1a0fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a102:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a106:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a10a:	4620      	mov	r0, r4
   1a10c:	4798      	blx	r3
   1a10e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a112:	3301      	adds	r3, #1
   1a114:	4629      	mov	r1, r5
   1a116:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a11a:	2201      	movs	r2, #1
   1a11c:	e7b4      	b.n	1a088 <d_print_mod+0x49c>
   1a11e:	2500      	movs	r5, #0
   1a120:	4619      	mov	r1, r3
   1a122:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a126:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a12a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a12e:	4798      	blx	r3
   1a130:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a134:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a138:	1c5a      	adds	r2, r3, #1
   1a13a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a13e:	462b      	mov	r3, r5
   1a140:	e740      	b.n	19fc4 <d_print_mod+0x3d8>
   1a142:	2500      	movs	r5, #0
   1a144:	4619      	mov	r1, r3
   1a146:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a14a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a14e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a152:	4798      	blx	r3
   1a154:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a158:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a15c:	1c5a      	adds	r2, r3, #1
   1a15e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a162:	462b      	mov	r3, r5
   1a164:	e721      	b.n	19faa <d_print_mod+0x3be>
   1a166:	4619      	mov	r1, r3
   1a168:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a16c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a170:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a174:	4798      	blx	r3
   1a176:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a17a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a17e:	1c5a      	adds	r2, r3, #1
   1a180:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a184:	462b      	mov	r3, r5
   1a186:	e5d2      	b.n	19d2e <d_print_mod+0x142>

0001a188 <d_print_mod_list>:
   1a188:	2a00      	cmp	r2, #0
   1a18a:	f000 80a1 	beq.w	1a2d0 <d_print_mod_list+0x148>
   1a18e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a192:	461e      	mov	r6, r3
   1a194:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   1a198:	b089      	sub	sp, #36	; 0x24
   1a19a:	4605      	mov	r5, r0
   1a19c:	bb43      	cbnz	r3, 1a1f0 <d_print_mod_list+0x68>
   1a19e:	460f      	mov	r7, r1
   1a1a0:	4614      	mov	r4, r2
   1a1a2:	f04f 0801 	mov.w	r8, #1
   1a1a6:	e002      	b.n	1a1ae <d_print_mod_list+0x26>
   1a1a8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1a1ac:	bb03      	cbnz	r3, 1a1f0 <d_print_mod_list+0x68>
   1a1ae:	68a3      	ldr	r3, [r4, #8]
   1a1b0:	b9db      	cbnz	r3, 1a1ea <d_print_mod_list+0x62>
   1a1b2:	6862      	ldr	r2, [r4, #4]
   1a1b4:	7813      	ldrb	r3, [r2, #0]
   1a1b6:	b92e      	cbnz	r6, 1a1c4 <d_print_mod_list+0x3c>
   1a1b8:	f1a3 011c 	sub.w	r1, r3, #28
   1a1bc:	2904      	cmp	r1, #4
   1a1be:	d914      	bls.n	1a1ea <d_print_mod_list+0x62>
   1a1c0:	2b4c      	cmp	r3, #76	; 0x4c
   1a1c2:	d012      	beq.n	1a1ea <d_print_mod_list+0x62>
   1a1c4:	68e1      	ldr	r1, [r4, #12]
   1a1c6:	f8c4 8008 	str.w	r8, [r4, #8]
   1a1ca:	2b29      	cmp	r3, #41	; 0x29
   1a1cc:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   1a1d0:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   1a1d4:	d00f      	beq.n	1a1f6 <d_print_mod_list+0x6e>
   1a1d6:	2b2a      	cmp	r3, #42	; 0x2a
   1a1d8:	d018      	beq.n	1a20c <d_print_mod_list+0x84>
   1a1da:	2b02      	cmp	r3, #2
   1a1dc:	d021      	beq.n	1a222 <d_print_mod_list+0x9a>
   1a1de:	4639      	mov	r1, r7
   1a1e0:	4628      	mov	r0, r5
   1a1e2:	f7ff fd03 	bl	19bec <d_print_mod>
   1a1e6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a1ea:	6824      	ldr	r4, [r4, #0]
   1a1ec:	2c00      	cmp	r4, #0
   1a1ee:	d1db      	bne.n	1a1a8 <d_print_mod_list+0x20>
   1a1f0:	b009      	add	sp, #36	; 0x24
   1a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1f6:	6823      	ldr	r3, [r4, #0]
   1a1f8:	3208      	adds	r2, #8
   1a1fa:	4639      	mov	r1, r7
   1a1fc:	4628      	mov	r0, r5
   1a1fe:	f000 f9d9 	bl	1a5b4 <d_print_function_type.isra.11>
   1a202:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a206:	b009      	add	sp, #36	; 0x24
   1a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a20c:	6823      	ldr	r3, [r4, #0]
   1a20e:	3204      	adds	r2, #4
   1a210:	4639      	mov	r1, r7
   1a212:	4628      	mov	r0, r5
   1a214:	f000 f8f2 	bl	1a3fc <d_print_array_type.isra.10>
   1a218:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a21c:	b009      	add	sp, #36	; 0x24
   1a21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a222:	2600      	movs	r6, #0
   1a224:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   1a228:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   1a22c:	6852      	ldr	r2, [r2, #4]
   1a22e:	4639      	mov	r1, r7
   1a230:	4628      	mov	r0, r5
   1a232:	f7ff fccb 	bl	19bcc <d_print_comp>
   1a236:	f017 0a04 	ands.w	sl, r7, #4
   1a23a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   1a23e:	d023      	beq.n	1a288 <d_print_mod_list+0x100>
   1a240:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a244:	29ff      	cmp	r1, #255	; 0xff
   1a246:	f000 80c1 	beq.w	1a3cc <d_print_mod_list+0x244>
   1a24a:	1c4a      	adds	r2, r1, #1
   1a24c:	232e      	movs	r3, #46	; 0x2e
   1a24e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   1a252:	546b      	strb	r3, [r5, r1]
   1a254:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   1a258:	6863      	ldr	r3, [r4, #4]
   1a25a:	689c      	ldr	r4, [r3, #8]
   1a25c:	7823      	ldrb	r3, [r4, #0]
   1a25e:	2b46      	cmp	r3, #70	; 0x46
   1a260:	d037      	beq.n	1a2d2 <d_print_mod_list+0x14a>
   1a262:	f1a3 021c 	sub.w	r2, r3, #28
   1a266:	2a04      	cmp	r2, #4
   1a268:	d90b      	bls.n	1a282 <d_print_mod_list+0xfa>
   1a26a:	2b4c      	cmp	r3, #76	; 0x4c
   1a26c:	d009      	beq.n	1a282 <d_print_mod_list+0xfa>
   1a26e:	4622      	mov	r2, r4
   1a270:	4639      	mov	r1, r7
   1a272:	4628      	mov	r0, r5
   1a274:	f7ff fcaa 	bl	19bcc <d_print_comp>
   1a278:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a27c:	b009      	add	sp, #36	; 0x24
   1a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a282:	6864      	ldr	r4, [r4, #4]
   1a284:	7823      	ldrb	r3, [r4, #0]
   1a286:	e7ec      	b.n	1a262 <d_print_mod_list+0xda>
   1a288:	4e58      	ldr	r6, [pc, #352]	; (1a3ec <d_print_mod_list+0x264>)
   1a28a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a28e:	f106 0b02 	add.w	fp, r6, #2
   1a292:	e009      	b.n	1a2a8 <d_print_mod_list+0x120>
   1a294:	460b      	mov	r3, r1
   1a296:	3101      	adds	r1, #1
   1a298:	455e      	cmp	r6, fp
   1a29a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a29e:	f805 8003 	strb.w	r8, [r5, r3]
   1a2a2:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a2a6:	d0d7      	beq.n	1a258 <d_print_mod_list+0xd0>
   1a2a8:	29ff      	cmp	r1, #255	; 0xff
   1a2aa:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a2ae:	d1f1      	bne.n	1a294 <d_print_mod_list+0x10c>
   1a2b0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a2b4:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   1a2b8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a2bc:	4628      	mov	r0, r5
   1a2be:	4798      	blx	r3
   1a2c0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a2c4:	3301      	adds	r3, #1
   1a2c6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a2ca:	2101      	movs	r1, #1
   1a2cc:	2300      	movs	r3, #0
   1a2ce:	e7e3      	b.n	1a298 <d_print_mod_list+0x110>
   1a2d0:	4770      	bx	lr
   1a2d2:	4e47      	ldr	r6, [pc, #284]	; (1a3f0 <d_print_mod_list+0x268>)
   1a2d4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a2d8:	f106 0a0d 	add.w	sl, r6, #13
   1a2dc:	f04f 0b00 	mov.w	fp, #0
   1a2e0:	e009      	b.n	1a2f6 <d_print_mod_list+0x16e>
   1a2e2:	460b      	mov	r3, r1
   1a2e4:	3101      	adds	r1, #1
   1a2e6:	45b2      	cmp	sl, r6
   1a2e8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a2ec:	f805 8003 	strb.w	r8, [r5, r3]
   1a2f0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a2f4:	d013      	beq.n	1a31e <d_print_mod_list+0x196>
   1a2f6:	29ff      	cmp	r1, #255	; 0xff
   1a2f8:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a2fc:	d1f1      	bne.n	1a2e2 <d_print_mod_list+0x15a>
   1a2fe:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a302:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a306:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a30a:	4628      	mov	r0, r5
   1a30c:	4798      	blx	r3
   1a30e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a312:	3301      	adds	r3, #1
   1a314:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a318:	2101      	movs	r1, #1
   1a31a:	2300      	movs	r3, #0
   1a31c:	e7e3      	b.n	1a2e6 <d_print_mod_list+0x15e>
   1a31e:	68a2      	ldr	r2, [r4, #8]
   1a320:	4934      	ldr	r1, [pc, #208]	; (1a3f4 <d_print_mod_list+0x26c>)
   1a322:	3201      	adds	r2, #1
   1a324:	a801      	add	r0, sp, #4
   1a326:	f004 fdd5 	bl	1eed4 <sprintf>
   1a32a:	a801      	add	r0, sp, #4
   1a32c:	f004 ff68 	bl	1f200 <strlen>
   1a330:	b328      	cbz	r0, 1a37e <d_print_mod_list+0x1f6>
   1a332:	ae01      	add	r6, sp, #4
   1a334:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a338:	eb06 0a00 	add.w	sl, r6, r0
   1a33c:	f04f 0b00 	mov.w	fp, #0
   1a340:	e009      	b.n	1a356 <d_print_mod_list+0x1ce>
   1a342:	460b      	mov	r3, r1
   1a344:	3101      	adds	r1, #1
   1a346:	45b2      	cmp	sl, r6
   1a348:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a34c:	f805 8003 	strb.w	r8, [r5, r3]
   1a350:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a354:	d015      	beq.n	1a382 <d_print_mod_list+0x1fa>
   1a356:	29ff      	cmp	r1, #255	; 0xff
   1a358:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a35c:	d1f1      	bne.n	1a342 <d_print_mod_list+0x1ba>
   1a35e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a362:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a366:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a36a:	4628      	mov	r0, r5
   1a36c:	4798      	blx	r3
   1a36e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a372:	3301      	adds	r3, #1
   1a374:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a378:	2101      	movs	r1, #1
   1a37a:	2300      	movs	r3, #0
   1a37c:	e7e3      	b.n	1a346 <d_print_mod_list+0x1be>
   1a37e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a382:	4e1d      	ldr	r6, [pc, #116]	; (1a3f8 <d_print_mod_list+0x270>)
   1a384:	f04f 0b00 	mov.w	fp, #0
   1a388:	f106 0a03 	add.w	sl, r6, #3
   1a38c:	e00a      	b.n	1a3a4 <d_print_mod_list+0x21c>
   1a38e:	460b      	mov	r3, r1
   1a390:	3101      	adds	r1, #1
   1a392:	45b2      	cmp	sl, r6
   1a394:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a398:	f805 8003 	strb.w	r8, [r5, r3]
   1a39c:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a3a0:	f43f af6f 	beq.w	1a282 <d_print_mod_list+0xfa>
   1a3a4:	29ff      	cmp	r1, #255	; 0xff
   1a3a6:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a3aa:	d1f0      	bne.n	1a38e <d_print_mod_list+0x206>
   1a3ac:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a3b0:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a3b4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a3b8:	4628      	mov	r0, r5
   1a3ba:	4798      	blx	r3
   1a3bc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a3c0:	3301      	adds	r3, #1
   1a3c2:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a3c6:	2101      	movs	r1, #1
   1a3c8:	2300      	movs	r3, #0
   1a3ca:	e7e2      	b.n	1a392 <d_print_mod_list+0x20a>
   1a3cc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a3d0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a3d4:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1a3d8:	4628      	mov	r0, r5
   1a3da:	4798      	blx	r3
   1a3dc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a3e0:	3301      	adds	r3, #1
   1a3e2:	4631      	mov	r1, r6
   1a3e4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a3e8:	2201      	movs	r2, #1
   1a3ea:	e72f      	b.n	1a24c <d_print_mod_list+0xc4>
   1a3ec:	00024870 	.word	0x00024870
   1a3f0:	00024874 	.word	0x00024874
   1a3f4:	00024820 	.word	0x00024820
   1a3f8:	00024884 	.word	0x00024884

0001a3fc <d_print_array_type.isra.10>:
   1a3fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a400:	4604      	mov	r4, r0
   1a402:	460f      	mov	r7, r1
   1a404:	4690      	mov	r8, r2
   1a406:	b163      	cbz	r3, 1a422 <d_print_array_type.isra.10+0x26>
   1a408:	461e      	mov	r6, r3
   1a40a:	461a      	mov	r2, r3
   1a40c:	6893      	ldr	r3, [r2, #8]
   1a40e:	b393      	cbz	r3, 1a476 <d_print_array_type.isra.10+0x7a>
   1a410:	6812      	ldr	r2, [r2, #0]
   1a412:	2a00      	cmp	r2, #0
   1a414:	d1fa      	bne.n	1a40c <d_print_array_type.isra.10+0x10>
   1a416:	4613      	mov	r3, r2
   1a418:	4639      	mov	r1, r7
   1a41a:	4632      	mov	r2, r6
   1a41c:	4620      	mov	r0, r4
   1a41e:	f7ff feb3 	bl	1a188 <d_print_mod_list>
   1a422:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a426:	29ff      	cmp	r1, #255	; 0xff
   1a428:	f000 808d 	beq.w	1a546 <d_print_array_type.isra.10+0x14a>
   1a42c:	1c4b      	adds	r3, r1, #1
   1a42e:	2220      	movs	r2, #32
   1a430:	2bff      	cmp	r3, #255	; 0xff
   1a432:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a436:	5462      	strb	r2, [r4, r1]
   1a438:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a43c:	d068      	beq.n	1a510 <d_print_array_type.isra.10+0x114>
   1a43e:	225b      	movs	r2, #91	; 0x5b
   1a440:	1c59      	adds	r1, r3, #1
   1a442:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a446:	54e2      	strb	r2, [r4, r3]
   1a448:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a44c:	f8d8 2000 	ldr.w	r2, [r8]
   1a450:	b12a      	cbz	r2, 1a45e <d_print_array_type.isra.10+0x62>
   1a452:	4639      	mov	r1, r7
   1a454:	4620      	mov	r0, r4
   1a456:	f7ff fbb9 	bl	19bcc <d_print_comp>
   1a45a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a45e:	29ff      	cmp	r1, #255	; 0xff
   1a460:	f000 8082 	beq.w	1a568 <d_print_array_type.isra.10+0x16c>
   1a464:	1c4a      	adds	r2, r1, #1
   1a466:	235d      	movs	r3, #93	; 0x5d
   1a468:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a46c:	5463      	strb	r3, [r4, r1]
   1a46e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a476:	6852      	ldr	r2, [r2, #4]
   1a478:	7812      	ldrb	r2, [r2, #0]
   1a47a:	2a2a      	cmp	r2, #42	; 0x2a
   1a47c:	d03f      	beq.n	1a4fe <d_print_array_type.isra.10+0x102>
   1a47e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a5b0 <d_print_array_type.isra.10+0x1b4>
   1a482:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a486:	461d      	mov	r5, r3
   1a488:	f109 0b02 	add.w	fp, r9, #2
   1a48c:	e00a      	b.n	1a4a4 <d_print_array_type.isra.10+0xa8>
   1a48e:	460b      	mov	r3, r1
   1a490:	45cb      	cmp	fp, r9
   1a492:	f101 0101 	add.w	r1, r1, #1
   1a496:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a49a:	f804 a003 	strb.w	sl, [r4, r3]
   1a49e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a4a2:	d01a      	beq.n	1a4da <d_print_array_type.isra.10+0xde>
   1a4a4:	29ff      	cmp	r1, #255	; 0xff
   1a4a6:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a4aa:	d1f0      	bne.n	1a48e <d_print_array_type.isra.10+0x92>
   1a4ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a4b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4b8:	4620      	mov	r0, r4
   1a4ba:	4798      	blx	r3
   1a4bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4c0:	3301      	adds	r3, #1
   1a4c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4c6:	2300      	movs	r3, #0
   1a4c8:	2101      	movs	r1, #1
   1a4ca:	45cb      	cmp	fp, r9
   1a4cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a4d0:	f804 a003 	strb.w	sl, [r4, r3]
   1a4d4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a4d8:	d1e4      	bne.n	1a4a4 <d_print_array_type.isra.10+0xa8>
   1a4da:	2300      	movs	r3, #0
   1a4dc:	4632      	mov	r2, r6
   1a4de:	4639      	mov	r1, r7
   1a4e0:	4620      	mov	r0, r4
   1a4e2:	f7ff fe51 	bl	1a188 <d_print_mod_list>
   1a4e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a4ea:	2bff      	cmp	r3, #255	; 0xff
   1a4ec:	d04d      	beq.n	1a58a <d_print_array_type.isra.10+0x18e>
   1a4ee:	1c59      	adds	r1, r3, #1
   1a4f0:	2229      	movs	r2, #41	; 0x29
   1a4f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a4f6:	54e2      	strb	r2, [r4, r3]
   1a4f8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a4fc:	e793      	b.n	1a426 <d_print_array_type.isra.10+0x2a>
   1a4fe:	4632      	mov	r2, r6
   1a500:	4639      	mov	r1, r7
   1a502:	4620      	mov	r0, r4
   1a504:	f7ff fe40 	bl	1a188 <d_print_mod_list>
   1a508:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a50c:	2bff      	cmp	r3, #255	; 0xff
   1a50e:	d196      	bne.n	1a43e <d_print_array_type.isra.10+0x42>
   1a510:	2200      	movs	r2, #0
   1a512:	4619      	mov	r1, r3
   1a514:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1a518:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a51c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a520:	4620      	mov	r0, r4
   1a522:	4798      	blx	r3
   1a524:	235b      	movs	r3, #91	; 0x5b
   1a526:	7023      	strb	r3, [r4, #0]
   1a528:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a52c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a530:	f8d8 2000 	ldr.w	r2, [r8]
   1a534:	3301      	adds	r3, #1
   1a536:	2101      	movs	r1, #1
   1a538:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a53c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a540:	2a00      	cmp	r2, #0
   1a542:	d186      	bne.n	1a452 <d_print_array_type.isra.10+0x56>
   1a544:	e78e      	b.n	1a464 <d_print_array_type.isra.10+0x68>
   1a546:	2500      	movs	r5, #0
   1a548:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a54c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a550:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a554:	4620      	mov	r0, r4
   1a556:	4798      	blx	r3
   1a558:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a55c:	3301      	adds	r3, #1
   1a55e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a562:	4629      	mov	r1, r5
   1a564:	2301      	movs	r3, #1
   1a566:	e762      	b.n	1a42e <d_print_array_type.isra.10+0x32>
   1a568:	2500      	movs	r5, #0
   1a56a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a56e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a572:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a576:	4620      	mov	r0, r4
   1a578:	4798      	blx	r3
   1a57a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a57e:	3301      	adds	r3, #1
   1a580:	4629      	mov	r1, r5
   1a582:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a586:	2201      	movs	r2, #1
   1a588:	e76d      	b.n	1a466 <d_print_array_type.isra.10+0x6a>
   1a58a:	2500      	movs	r5, #0
   1a58c:	4619      	mov	r1, r3
   1a58e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a592:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a596:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a59a:	4620      	mov	r0, r4
   1a59c:	4798      	blx	r3
   1a59e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5a2:	1c5a      	adds	r2, r3, #1
   1a5a4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a5a8:	462b      	mov	r3, r5
   1a5aa:	2101      	movs	r1, #1
   1a5ac:	e7a0      	b.n	1a4f0 <d_print_array_type.isra.10+0xf4>
   1a5ae:	bf00      	nop
   1a5b0:	00024a68 	.word	0x00024a68

0001a5b4 <d_print_function_type.isra.11>:
   1a5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a5b8:	4604      	mov	r4, r0
   1a5ba:	b083      	sub	sp, #12
   1a5bc:	460e      	mov	r6, r1
   1a5be:	4617      	mov	r7, r2
   1a5c0:	461d      	mov	r5, r3
   1a5c2:	b34b      	cbz	r3, 1a618 <d_print_function_type.isra.11+0x64>
   1a5c4:	689b      	ldr	r3, [r3, #8]
   1a5c6:	bb3b      	cbnz	r3, 1a618 <d_print_function_type.isra.11+0x64>
   1a5c8:	462a      	mov	r2, r5
   1a5ca:	2001      	movs	r0, #1
   1a5cc:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a798 <d_print_function_type.isra.11+0x1e4>
   1a5d0:	e006      	b.n	1a5e0 <d_print_function_type.isra.11+0x2c>
   1a5d2:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a5d6:	d15a      	bne.n	1a68e <d_print_function_type.isra.11+0xda>
   1a5d8:	6812      	ldr	r2, [r2, #0]
   1a5da:	b1ea      	cbz	r2, 1a618 <d_print_function_type.isra.11+0x64>
   1a5dc:	6893      	ldr	r3, [r2, #8]
   1a5de:	b9db      	cbnz	r3, 1a618 <d_print_function_type.isra.11+0x64>
   1a5e0:	6853      	ldr	r3, [r2, #4]
   1a5e2:	781b      	ldrb	r3, [r3, #0]
   1a5e4:	3b19      	subs	r3, #25
   1a5e6:	b2db      	uxtb	r3, r3
   1a5e8:	2b12      	cmp	r3, #18
   1a5ea:	fa00 f103 	lsl.w	r1, r0, r3
   1a5ee:	d8f3      	bhi.n	1a5d8 <d_print_function_type.isra.11+0x24>
   1a5f0:	ea11 0f0e 	tst.w	r1, lr
   1a5f4:	d0ed      	beq.n	1a5d2 <d_print_function_type.isra.11+0x1e>
   1a5f6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a5fa:	2b20      	cmp	r3, #32
   1a5fc:	d04d      	beq.n	1a69a <d_print_function_type.isra.11+0xe6>
   1a5fe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a602:	2bff      	cmp	r3, #255	; 0xff
   1a604:	f000 80b4 	beq.w	1a770 <d_print_function_type.isra.11+0x1bc>
   1a608:	1c59      	adds	r1, r3, #1
   1a60a:	2220      	movs	r2, #32
   1a60c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a610:	54e2      	strb	r2, [r4, r3]
   1a612:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a616:	e042      	b.n	1a69e <d_print_function_type.isra.11+0xea>
   1a618:	2300      	movs	r3, #0
   1a61a:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a61e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a622:	4631      	mov	r1, r6
   1a624:	462a      	mov	r2, r5
   1a626:	4620      	mov	r0, r4
   1a628:	f7ff fdae 	bl	1a188 <d_print_mod_list>
   1a62c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a630:	29ff      	cmp	r1, #255	; 0xff
   1a632:	d056      	beq.n	1a6e2 <d_print_function_type.isra.11+0x12e>
   1a634:	1c4b      	adds	r3, r1, #1
   1a636:	2228      	movs	r2, #40	; 0x28
   1a638:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a63c:	5462      	strb	r2, [r4, r1]
   1a63e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a642:	6838      	ldr	r0, [r7, #0]
   1a644:	b178      	cbz	r0, 1a666 <d_print_function_type.isra.11+0xb2>
   1a646:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a64a:	9000      	str	r0, [sp, #0]
   1a64c:	4602      	mov	r2, r0
   1a64e:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a652:	4631      	mov	r1, r6
   1a654:	4620      	mov	r0, r4
   1a656:	9301      	str	r3, [sp, #4]
   1a658:	f7fc fd14 	bl	17084 <d_print_comp_inner>
   1a65c:	9a01      	ldr	r2, [sp, #4]
   1a65e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a662:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a666:	2bff      	cmp	r3, #255	; 0xff
   1a668:	d04d      	beq.n	1a706 <d_print_function_type.isra.11+0x152>
   1a66a:	1c5a      	adds	r2, r3, #1
   1a66c:	2029      	movs	r0, #41	; 0x29
   1a66e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a672:	4631      	mov	r1, r6
   1a674:	54e0      	strb	r0, [r4, r3]
   1a676:	462a      	mov	r2, r5
   1a678:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a67c:	2301      	movs	r3, #1
   1a67e:	4620      	mov	r0, r4
   1a680:	f7ff fd82 	bl	1a188 <d_print_mod_list>
   1a684:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a688:	b003      	add	sp, #12
   1a68a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a68e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a692:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a696:	2a28      	cmp	r2, #40	; 0x28
   1a698:	d1af      	bne.n	1a5fa <d_print_function_type.isra.11+0x46>
   1a69a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a69e:	29ff      	cmp	r1, #255	; 0xff
   1a6a0:	d054      	beq.n	1a74c <d_print_function_type.isra.11+0x198>
   1a6a2:	1c4a      	adds	r2, r1, #1
   1a6a4:	2328      	movs	r3, #40	; 0x28
   1a6a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a6aa:	5463      	strb	r3, [r4, r1]
   1a6ac:	f04f 0900 	mov.w	r9, #0
   1a6b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a6b4:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a6b8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a6bc:	464b      	mov	r3, r9
   1a6be:	462a      	mov	r2, r5
   1a6c0:	4631      	mov	r1, r6
   1a6c2:	4620      	mov	r0, r4
   1a6c4:	f7ff fd60 	bl	1a188 <d_print_mod_list>
   1a6c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a6cc:	2bff      	cmp	r3, #255	; 0xff
   1a6ce:	d02c      	beq.n	1a72a <d_print_function_type.isra.11+0x176>
   1a6d0:	1c59      	adds	r1, r3, #1
   1a6d2:	2229      	movs	r2, #41	; 0x29
   1a6d4:	29ff      	cmp	r1, #255	; 0xff
   1a6d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a6da:	54e2      	strb	r2, [r4, r3]
   1a6dc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a6e0:	d1a8      	bne.n	1a634 <d_print_function_type.isra.11+0x80>
   1a6e2:	f04f 0900 	mov.w	r9, #0
   1a6e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6ea:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a6ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a6f2:	4620      	mov	r0, r4
   1a6f4:	4798      	blx	r3
   1a6f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6fa:	3301      	adds	r3, #1
   1a6fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a700:	4649      	mov	r1, r9
   1a702:	2301      	movs	r3, #1
   1a704:	e797      	b.n	1a636 <d_print_function_type.isra.11+0x82>
   1a706:	2700      	movs	r7, #0
   1a708:	4619      	mov	r1, r3
   1a70a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a70e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a712:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a716:	4620      	mov	r0, r4
   1a718:	4798      	blx	r3
   1a71a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a71e:	1c5a      	adds	r2, r3, #1
   1a720:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a724:	463b      	mov	r3, r7
   1a726:	2201      	movs	r2, #1
   1a728:	e7a0      	b.n	1a66c <d_print_function_type.isra.11+0xb8>
   1a72a:	4619      	mov	r1, r3
   1a72c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a730:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a734:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a738:	4620      	mov	r0, r4
   1a73a:	4798      	blx	r3
   1a73c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a740:	1c5a      	adds	r2, r3, #1
   1a742:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a746:	464b      	mov	r3, r9
   1a748:	2101      	movs	r1, #1
   1a74a:	e7c2      	b.n	1a6d2 <d_print_function_type.isra.11+0x11e>
   1a74c:	f04f 0800 	mov.w	r8, #0
   1a750:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a754:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a758:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a75c:	4620      	mov	r0, r4
   1a75e:	4798      	blx	r3
   1a760:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a764:	3301      	adds	r3, #1
   1a766:	4641      	mov	r1, r8
   1a768:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a76c:	2201      	movs	r2, #1
   1a76e:	e799      	b.n	1a6a4 <d_print_function_type.isra.11+0xf0>
   1a770:	f04f 0800 	mov.w	r8, #0
   1a774:	4619      	mov	r1, r3
   1a776:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a77a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a77e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a782:	4620      	mov	r0, r4
   1a784:	4798      	blx	r3
   1a786:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a78a:	1c5a      	adds	r2, r3, #1
   1a78c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a790:	4643      	mov	r3, r8
   1a792:	2101      	movs	r1, #1
   1a794:	e739      	b.n	1a60a <d_print_function_type.isra.11+0x56>
   1a796:	bf00      	nop
   1a798:	00043107 	.word	0x00043107

0001a79c <d_print_expr_op>:
   1a79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7a0:	7815      	ldrb	r5, [r2, #0]
   1a7a2:	2d31      	cmp	r5, #49	; 0x31
   1a7a4:	b082      	sub	sp, #8
   1a7a6:	4613      	mov	r3, r2
   1a7a8:	4604      	mov	r4, r0
   1a7aa:	d00d      	beq.n	1a7c8 <d_print_expr_op+0x2c>
   1a7ac:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a7b0:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a7b4:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a7b8:	f7fc fc64 	bl	17084 <d_print_comp_inner>
   1a7bc:	9b01      	ldr	r3, [sp, #4]
   1a7be:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a7c2:	b002      	add	sp, #8
   1a7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a7c8:	6853      	ldr	r3, [r2, #4]
   1a7ca:	689f      	ldr	r7, [r3, #8]
   1a7cc:	685d      	ldr	r5, [r3, #4]
   1a7ce:	2f00      	cmp	r7, #0
   1a7d0:	d0f7      	beq.n	1a7c2 <d_print_expr_op+0x26>
   1a7d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a7d6:	442f      	add	r7, r5
   1a7d8:	f04f 0800 	mov.w	r8, #0
   1a7dc:	e008      	b.n	1a7f0 <d_print_expr_op+0x54>
   1a7de:	460b      	mov	r3, r1
   1a7e0:	3101      	adds	r1, #1
   1a7e2:	42bd      	cmp	r5, r7
   1a7e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a7e8:	54e6      	strb	r6, [r4, r3]
   1a7ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a7ee:	d0e8      	beq.n	1a7c2 <d_print_expr_op+0x26>
   1a7f0:	29ff      	cmp	r1, #255	; 0xff
   1a7f2:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a7f6:	d1f2      	bne.n	1a7de <d_print_expr_op+0x42>
   1a7f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a7fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a800:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a804:	4620      	mov	r0, r4
   1a806:	4798      	blx	r3
   1a808:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a80c:	3301      	adds	r3, #1
   1a80e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a812:	2101      	movs	r1, #1
   1a814:	2300      	movs	r3, #0
   1a816:	e7e4      	b.n	1a7e2 <d_print_expr_op+0x46>

0001a818 <d_print_subexpr>:
   1a818:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a81a:	7813      	ldrb	r3, [r2, #0]
   1a81c:	2b01      	cmp	r3, #1
   1a81e:	b083      	sub	sp, #12
   1a820:	4615      	mov	r5, r2
   1a822:	460e      	mov	r6, r1
   1a824:	4604      	mov	r4, r0
   1a826:	d929      	bls.n	1a87c <d_print_subexpr+0x64>
   1a828:	2b30      	cmp	r3, #48	; 0x30
   1a82a:	d027      	beq.n	1a87c <d_print_subexpr+0x64>
   1a82c:	2b06      	cmp	r3, #6
   1a82e:	d025      	beq.n	1a87c <d_print_subexpr+0x64>
   1a830:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a834:	29ff      	cmp	r1, #255	; 0xff
   1a836:	d031      	beq.n	1a89c <d_print_subexpr+0x84>
   1a838:	1c4a      	adds	r2, r1, #1
   1a83a:	2328      	movs	r3, #40	; 0x28
   1a83c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a840:	5463      	strb	r3, [r4, r1]
   1a842:	462a      	mov	r2, r5
   1a844:	4631      	mov	r1, r6
   1a846:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a84a:	4620      	mov	r0, r4
   1a84c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a850:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a854:	9301      	str	r3, [sp, #4]
   1a856:	9500      	str	r5, [sp, #0]
   1a858:	f7fc fc14 	bl	17084 <d_print_comp_inner>
   1a85c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a860:	9b01      	ldr	r3, [sp, #4]
   1a862:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a866:	29ff      	cmp	r1, #255	; 0xff
   1a868:	d028      	beq.n	1a8bc <d_print_subexpr+0xa4>
   1a86a:	1c4a      	adds	r2, r1, #1
   1a86c:	2329      	movs	r3, #41	; 0x29
   1a86e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a872:	5463      	strb	r3, [r4, r1]
   1a874:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a878:	b003      	add	sp, #12
   1a87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a87c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a880:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a884:	4631      	mov	r1, r6
   1a886:	462a      	mov	r2, r5
   1a888:	4620      	mov	r0, r4
   1a88a:	9301      	str	r3, [sp, #4]
   1a88c:	9500      	str	r5, [sp, #0]
   1a88e:	f7fc fbf9 	bl	17084 <d_print_comp_inner>
   1a892:	9b01      	ldr	r3, [sp, #4]
   1a894:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a898:	b003      	add	sp, #12
   1a89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a89c:	2700      	movs	r7, #0
   1a89e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a8a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a8a6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a8aa:	4798      	blx	r3
   1a8ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8b0:	3301      	adds	r3, #1
   1a8b2:	4639      	mov	r1, r7
   1a8b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a8b8:	2201      	movs	r2, #1
   1a8ba:	e7be      	b.n	1a83a <d_print_subexpr+0x22>
   1a8bc:	2500      	movs	r5, #0
   1a8be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a8c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a8c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a8ca:	4620      	mov	r0, r4
   1a8cc:	4798      	blx	r3
   1a8ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8d2:	3301      	adds	r3, #1
   1a8d4:	4629      	mov	r1, r5
   1a8d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a8da:	2201      	movs	r2, #1
   1a8dc:	e7c6      	b.n	1a86c <d_print_subexpr+0x54>
   1a8de:	bf00      	nop

0001a8e0 <d_maybe_print_fold_expression.isra.15>:
   1a8e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8e4:	6852      	ldr	r2, [r2, #4]
   1a8e6:	6812      	ldr	r2, [r2, #0]
   1a8e8:	7815      	ldrb	r5, [r2, #0]
   1a8ea:	2d66      	cmp	r5, #102	; 0x66
   1a8ec:	d002      	beq.n	1a8f4 <d_maybe_print_fold_expression.isra.15+0x14>
   1a8ee:	2000      	movs	r0, #0
   1a8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8f4:	681b      	ldr	r3, [r3, #0]
   1a8f6:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a8fa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a8fe:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a902:	f899 3000 	ldrb.w	r3, [r9]
   1a906:	2b3b      	cmp	r3, #59	; 0x3b
   1a908:	f04f 33ff 	mov.w	r3, #4294967295
   1a90c:	bf04      	itt	eq
   1a90e:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a912:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a916:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a91a:	7853      	ldrb	r3, [r2, #1]
   1a91c:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a920:	bf18      	it	ne
   1a922:	2500      	movne	r5, #0
   1a924:	460e      	mov	r6, r1
   1a926:	4604      	mov	r4, r0
   1a928:	2b26      	cmp	r3, #38	; 0x26
   1a92a:	d82b      	bhi.n	1a984 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a92c:	e8df f003 	tbb	[pc, r3]
   1a930:	2a2a2a90 	.word	0x2a2a2a90
   1a934:	2a902a2a 	.word	0x2a902a2a
   1a938:	2a2a2a2a 	.word	0x2a2a2a2a
   1a93c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a940:	2a2a2a2a 	.word	0x2a2a2a2a
   1a944:	2a2a2a2a 	.word	0x2a2a2a2a
   1a948:	2a2a2a2a 	.word	0x2a2a2a2a
   1a94c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a950:	2a2a2a6a 	.word	0x2a2a2a6a
   1a954:	2a2a      	.short	0x2a2a
   1a956:	2f          	.byte	0x2f
   1a957:	00          	.byte	0x00
   1a958:	4642      	mov	r2, r8
   1a95a:	4631      	mov	r1, r6
   1a95c:	4620      	mov	r0, r4
   1a95e:	f7ff ff1d 	bl	1a79c <d_print_expr_op>
   1a962:	464a      	mov	r2, r9
   1a964:	4631      	mov	r1, r6
   1a966:	4620      	mov	r0, r4
   1a968:	f7ff ff56 	bl	1a818 <d_print_subexpr>
   1a96c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a970:	29ff      	cmp	r1, #255	; 0xff
   1a972:	f000 80b2 	beq.w	1aada <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a976:	1c4a      	adds	r2, r1, #1
   1a978:	2329      	movs	r3, #41	; 0x29
   1a97a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a97e:	5463      	strb	r3, [r4, r1]
   1a980:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a984:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a988:	2001      	movs	r0, #1
   1a98a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a98e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a992:	29ff      	cmp	r1, #255	; 0xff
   1a994:	f000 80c5 	beq.w	1ab22 <d_maybe_print_fold_expression.isra.15+0x242>
   1a998:	1c4a      	adds	r2, r1, #1
   1a99a:	2328      	movs	r3, #40	; 0x28
   1a99c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a9a0:	4620      	mov	r0, r4
   1a9a2:	5463      	strb	r3, [r4, r1]
   1a9a4:	464a      	mov	r2, r9
   1a9a6:	4631      	mov	r1, r6
   1a9a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a9ac:	4d65      	ldr	r5, [pc, #404]	; (1ab44 <d_maybe_print_fold_expression.isra.15+0x264>)
   1a9ae:	f7ff ff33 	bl	1a818 <d_print_subexpr>
   1a9b2:	4642      	mov	r2, r8
   1a9b4:	4631      	mov	r1, r6
   1a9b6:	4620      	mov	r0, r4
   1a9b8:	f7ff fef0 	bl	1a79c <d_print_expr_op>
   1a9bc:	f105 0904 	add.w	r9, r5, #4
   1a9c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a9c4:	f04f 0800 	mov.w	r8, #0
   1a9c8:	e008      	b.n	1a9dc <d_maybe_print_fold_expression.isra.15+0xfc>
   1a9ca:	460b      	mov	r3, r1
   1a9cc:	3101      	adds	r1, #1
   1a9ce:	45a9      	cmp	r9, r5
   1a9d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a9d4:	54e6      	strb	r6, [r4, r3]
   1a9d6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a9da:	d0d3      	beq.n	1a984 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a9dc:	29ff      	cmp	r1, #255	; 0xff
   1a9de:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a9e2:	d1f2      	bne.n	1a9ca <d_maybe_print_fold_expression.isra.15+0xea>
   1a9e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a9e8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a9ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a9f0:	4620      	mov	r0, r4
   1a9f2:	4798      	blx	r3
   1a9f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a9f8:	3301      	adds	r3, #1
   1a9fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a9fe:	2101      	movs	r1, #1
   1aa00:	2300      	movs	r3, #0
   1aa02:	e7e4      	b.n	1a9ce <d_maybe_print_fold_expression.isra.15+0xee>
   1aa04:	4d50      	ldr	r5, [pc, #320]	; (1ab48 <d_maybe_print_fold_expression.isra.15+0x268>)
   1aa06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1aa0a:	f105 0b04 	add.w	fp, r5, #4
   1aa0e:	e009      	b.n	1aa24 <d_maybe_print_fold_expression.isra.15+0x144>
   1aa10:	460b      	mov	r3, r1
   1aa12:	3101      	adds	r1, #1
   1aa14:	455d      	cmp	r5, fp
   1aa16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1aa1a:	f804 a003 	strb.w	sl, [r4, r3]
   1aa1e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1aa22:	d099      	beq.n	1a958 <d_maybe_print_fold_expression.isra.15+0x78>
   1aa24:	29ff      	cmp	r1, #255	; 0xff
   1aa26:	f815 ab01 	ldrb.w	sl, [r5], #1
   1aa2a:	d1f1      	bne.n	1aa10 <d_maybe_print_fold_expression.isra.15+0x130>
   1aa2c:	f04f 0300 	mov.w	r3, #0
   1aa30:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1aa34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aa38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aa3c:	4620      	mov	r0, r4
   1aa3e:	4798      	blx	r3
   1aa40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aa44:	3301      	adds	r3, #1
   1aa46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa4a:	2101      	movs	r1, #1
   1aa4c:	2300      	movs	r3, #0
   1aa4e:	e7e1      	b.n	1aa14 <d_maybe_print_fold_expression.isra.15+0x134>
   1aa50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1aa54:	2bff      	cmp	r3, #255	; 0xff
   1aa56:	d051      	beq.n	1aafc <d_maybe_print_fold_expression.isra.15+0x21c>
   1aa58:	1c59      	adds	r1, r3, #1
   1aa5a:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1aa5e:	464a      	mov	r2, r9
   1aa60:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1aa64:	4620      	mov	r0, r4
   1aa66:	f804 e003 	strb.w	lr, [r4, r3]
   1aa6a:	4631      	mov	r1, r6
   1aa6c:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1aa70:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1ab4c <d_maybe_print_fold_expression.isra.15+0x26c>
   1aa74:	f7ff fed0 	bl	1a818 <d_print_subexpr>
   1aa78:	4631      	mov	r1, r6
   1aa7a:	4642      	mov	r2, r8
   1aa7c:	4620      	mov	r0, r4
   1aa7e:	f7ff fe8d 	bl	1a79c <d_print_expr_op>
   1aa82:	f109 0b03 	add.w	fp, r9, #3
   1aa86:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1aa8a:	e009      	b.n	1aaa0 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1aa8c:	460b      	mov	r3, r1
   1aa8e:	3101      	adds	r1, #1
   1aa90:	45cb      	cmp	fp, r9
   1aa92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1aa96:	f804 a003 	strb.w	sl, [r4, r3]
   1aa9a:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1aa9e:	d015      	beq.n	1aacc <d_maybe_print_fold_expression.isra.15+0x1ec>
   1aaa0:	29ff      	cmp	r1, #255	; 0xff
   1aaa2:	f819 ab01 	ldrb.w	sl, [r9], #1
   1aaa6:	d1f1      	bne.n	1aa8c <d_maybe_print_fold_expression.isra.15+0x1ac>
   1aaa8:	f04f 0300 	mov.w	r3, #0
   1aaac:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1aab0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aab4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aab8:	4620      	mov	r0, r4
   1aaba:	4798      	blx	r3
   1aabc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aac0:	3301      	adds	r3, #1
   1aac2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aac6:	2101      	movs	r1, #1
   1aac8:	2300      	movs	r3, #0
   1aaca:	e7e1      	b.n	1aa90 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1aacc:	4642      	mov	r2, r8
   1aace:	4631      	mov	r1, r6
   1aad0:	4620      	mov	r0, r4
   1aad2:	f7ff fe63 	bl	1a79c <d_print_expr_op>
   1aad6:	462a      	mov	r2, r5
   1aad8:	e744      	b.n	1a964 <d_maybe_print_fold_expression.isra.15+0x84>
   1aada:	2500      	movs	r5, #0
   1aadc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aae0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aae4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1aae8:	4620      	mov	r0, r4
   1aaea:	4798      	blx	r3
   1aaec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aaf0:	3301      	adds	r3, #1
   1aaf2:	4629      	mov	r1, r5
   1aaf4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aaf8:	2201      	movs	r2, #1
   1aafa:	e73d      	b.n	1a978 <d_maybe_print_fold_expression.isra.15+0x98>
   1aafc:	f04f 0a00 	mov.w	sl, #0
   1ab00:	4619      	mov	r1, r3
   1ab02:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1ab06:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1ab0a:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1ab0e:	4798      	blx	r3
   1ab10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ab14:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1ab18:	1c5a      	adds	r2, r3, #1
   1ab1a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1ab1e:	4653      	mov	r3, sl
   1ab20:	e79a      	b.n	1aa58 <d_maybe_print_fold_expression.isra.15+0x178>
   1ab22:	2500      	movs	r5, #0
   1ab24:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1ab28:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1ab2c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1ab30:	4798      	blx	r3
   1ab32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ab36:	3301      	adds	r3, #1
   1ab38:	4629      	mov	r1, r5
   1ab3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ab3e:	2201      	movs	r2, #1
   1ab40:	e72b      	b.n	1a99a <d_maybe_print_fold_expression.isra.15+0xba>
   1ab42:	bf00      	nop
   1ab44:	00024b54 	.word	0x00024b54
   1ab48:	00024b4c 	.word	0x00024b4c
   1ab4c:	00022fb0 	.word	0x00022fb0

0001ab50 <d_demangle_callback.constprop.17>:
   1ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab54:	b0e7      	sub	sp, #412	; 0x19c
   1ab56:	f890 9000 	ldrb.w	r9, [r0]
   1ab5a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1ab5e:	af00      	add	r7, sp, #0
   1ab60:	4605      	mov	r5, r0
   1ab62:	4688      	mov	r8, r1
   1ab64:	4616      	mov	r6, r2
   1ab66:	f000 80f1 	beq.w	1ad4c <d_demangle_callback.constprop.17+0x1fc>
   1ab6a:	2208      	movs	r2, #8
   1ab6c:	49bd      	ldr	r1, [pc, #756]	; (1ae64 <d_demangle_callback.constprop.17+0x314>)
   1ab6e:	4628      	mov	r0, r5
   1ab70:	f004 fbb4 	bl	1f2dc <strncmp>
   1ab74:	b948      	cbnz	r0, 1ab8a <d_demangle_callback.constprop.17+0x3a>
   1ab76:	7a2b      	ldrb	r3, [r5, #8]
   1ab78:	2b2e      	cmp	r3, #46	; 0x2e
   1ab7a:	f000 80d6 	beq.w	1ad2a <d_demangle_callback.constprop.17+0x1da>
   1ab7e:	2b5f      	cmp	r3, #95	; 0x5f
   1ab80:	f000 80d3 	beq.w	1ad2a <d_demangle_callback.constprop.17+0x1da>
   1ab84:	2b24      	cmp	r3, #36	; 0x24
   1ab86:	f000 80d0 	beq.w	1ad2a <d_demangle_callback.constprop.17+0x1da>
   1ab8a:	f04f 0a00 	mov.w	sl, #0
   1ab8e:	4628      	mov	r0, r5
   1ab90:	f004 fb36 	bl	1f200 <strlen>
   1ab94:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1ab98:	0083      	lsls	r3, r0, #2
   1ab9a:	eb03 020b 	add.w	r2, r3, fp
   1ab9e:	0092      	lsls	r2, r2, #2
   1aba0:	3208      	adds	r2, #8
   1aba2:	330a      	adds	r3, #10
   1aba4:	ebad 0d02 	sub.w	sp, sp, r2
   1aba8:	f023 0307 	bic.w	r3, r3, #7
   1abac:	2400      	movs	r4, #0
   1abae:	466a      	mov	r2, sp
   1abb0:	1829      	adds	r1, r5, r0
   1abb2:	ebad 0d03 	sub.w	sp, sp, r3
   1abb6:	f1ba 0f01 	cmp.w	sl, #1
   1abba:	f04f 0311 	mov.w	r3, #17
   1abbe:	627a      	str	r2, [r7, #36]	; 0x24
   1abc0:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1abc4:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1abc8:	617d      	str	r5, [r7, #20]
   1abca:	623d      	str	r5, [r7, #32]
   1abcc:	63b8      	str	r0, [r7, #56]	; 0x38
   1abce:	61b9      	str	r1, [r7, #24]
   1abd0:	61fb      	str	r3, [r7, #28]
   1abd2:	62bc      	str	r4, [r7, #40]	; 0x28
   1abd4:	637c      	str	r4, [r7, #52]	; 0x34
   1abd6:	63fc      	str	r4, [r7, #60]	; 0x3c
   1abd8:	643c      	str	r4, [r7, #64]	; 0x40
   1abda:	647c      	str	r4, [r7, #68]	; 0x44
   1abdc:	64bc      	str	r4, [r7, #72]	; 0x48
   1abde:	64fc      	str	r4, [r7, #76]	; 0x4c
   1abe0:	f000 80bb 	beq.w	1ad5a <d_demangle_callback.constprop.17+0x20a>
   1abe4:	f0c0 80cf 	bcc.w	1ad86 <d_demangle_callback.constprop.17+0x236>
   1abe8:	7aeb      	ldrb	r3, [r5, #11]
   1abea:	f1ba 0f02 	cmp.w	sl, #2
   1abee:	bf18      	it	ne
   1abf0:	f04f 0944 	movne.w	r9, #68	; 0x44
   1abf4:	f105 0a0b 	add.w	sl, r5, #11
   1abf8:	bf08      	it	eq
   1abfa:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1abfe:	2b5f      	cmp	r3, #95	; 0x5f
   1ac00:	f8c7 a020 	str.w	sl, [r7, #32]
   1ac04:	f000 80b2 	beq.w	1ad6c <d_demangle_callback.constprop.17+0x21c>
   1ac08:	4650      	mov	r0, sl
   1ac0a:	607a      	str	r2, [r7, #4]
   1ac0c:	f004 faf8 	bl	1f200 <strlen>
   1ac10:	f1bb 0f00 	cmp.w	fp, #0
   1ac14:	687a      	ldr	r2, [r7, #4]
   1ac16:	f340 80bf 	ble.w	1ad98 <d_demangle_callback.constprop.17+0x248>
   1ac1a:	2301      	movs	r3, #1
   1ac1c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ac1e:	2800      	cmp	r0, #0
   1ac20:	f000 80ba 	beq.w	1ad98 <d_demangle_callback.constprop.17+0x248>
   1ac24:	2300      	movs	r3, #0
   1ac26:	f8c2 a004 	str.w	sl, [r2, #4]
   1ac2a:	6090      	str	r0, [r2, #8]
   1ac2c:	7013      	strb	r3, [r2, #0]
   1ac2e:	4649      	mov	r1, r9
   1ac30:	2300      	movs	r3, #0
   1ac32:	f107 0014 	add.w	r0, r7, #20
   1ac36:	f7f9 fe31 	bl	1489c <d_make_comp>
   1ac3a:	6a3c      	ldr	r4, [r7, #32]
   1ac3c:	4605      	mov	r5, r0
   1ac3e:	4620      	mov	r0, r4
   1ac40:	f004 fade 	bl	1f200 <strlen>
   1ac44:	1823      	adds	r3, r4, r0
   1ac46:	623b      	str	r3, [r7, #32]
   1ac48:	f814 9000 	ldrb.w	r9, [r4, r0]
   1ac4c:	f1b9 0f00 	cmp.w	r9, #0
   1ac50:	f040 8086 	bne.w	1ad60 <d_demangle_callback.constprop.17+0x210>
   1ac54:	2d00      	cmp	r5, #0
   1ac56:	f000 8083 	beq.w	1ad60 <d_demangle_callback.constprop.17+0x210>
   1ac5a:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1ac5e:	462a      	mov	r2, r5
   1ac60:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1ac64:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1ac68:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1ac6c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1ac70:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1ac74:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1ac78:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1ac7c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1ac80:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1ac84:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1ac88:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1ac8c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1ac90:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1ac94:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1ac98:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1ac9c:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1aca0:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1aca4:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1aca8:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1acac:	f7f9 fec4 	bl	14a38 <d_count_templates_scopes>
   1acb0:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1acb4:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1acb8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1acbc:	613b      	str	r3, [r7, #16]
   1acbe:	00d0      	lsls	r0, r2, #3
   1acc0:	fb01 f102 	mul.w	r1, r1, r2
   1acc4:	3008      	adds	r0, #8
   1acc6:	46e8      	mov	r8, sp
   1acc8:	00ca      	lsls	r2, r1, #3
   1acca:	ebad 0d00 	sub.w	sp, sp, r0
   1acce:	4668      	mov	r0, sp
   1acd0:	3208      	adds	r2, #8
   1acd2:	ebad 0d02 	sub.w	sp, sp, r2
   1acd6:	f107 060c 	add.w	r6, r7, #12
   1acda:	462a      	mov	r2, r5
   1acdc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1ace0:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1ace4:	4620      	mov	r0, r4
   1ace6:	2111      	movs	r1, #17
   1ace8:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1acec:	60fd      	str	r5, [r7, #12]
   1acee:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1acf2:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1acf6:	f7fc f9c5 	bl	17084 <d_print_comp_inner>
   1acfa:	693b      	ldr	r3, [r7, #16]
   1acfc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ad00:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ad04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ad08:	f804 9001 	strb.w	r9, [r4, r1]
   1ad0c:	4620      	mov	r0, r4
   1ad0e:	46c5      	mov	sp, r8
   1ad10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ad14:	4798      	blx	r3
   1ad16:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1ad1a:	fab0 f080 	clz	r0, r0
   1ad1e:	0940      	lsrs	r0, r0, #5
   1ad20:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1ad24:	46bd      	mov	sp, r7
   1ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad2a:	7a6b      	ldrb	r3, [r5, #9]
   1ad2c:	2b44      	cmp	r3, #68	; 0x44
   1ad2e:	d002      	beq.n	1ad36 <d_demangle_callback.constprop.17+0x1e6>
   1ad30:	2b49      	cmp	r3, #73	; 0x49
   1ad32:	f47f af2a 	bne.w	1ab8a <d_demangle_callback.constprop.17+0x3a>
   1ad36:	7aaa      	ldrb	r2, [r5, #10]
   1ad38:	2a5f      	cmp	r2, #95	; 0x5f
   1ad3a:	f47f af26 	bne.w	1ab8a <d_demangle_callback.constprop.17+0x3a>
   1ad3e:	2b49      	cmp	r3, #73	; 0x49
   1ad40:	bf14      	ite	ne
   1ad42:	f04f 0a03 	movne.w	sl, #3
   1ad46:	f04f 0a02 	moveq.w	sl, #2
   1ad4a:	e720      	b.n	1ab8e <d_demangle_callback.constprop.17+0x3e>
   1ad4c:	7843      	ldrb	r3, [r0, #1]
   1ad4e:	2b5a      	cmp	r3, #90	; 0x5a
   1ad50:	f47f af0b 	bne.w	1ab6a <d_demangle_callback.constprop.17+0x1a>
   1ad54:	f04f 0a01 	mov.w	sl, #1
   1ad58:	e719      	b.n	1ab8e <d_demangle_callback.constprop.17+0x3e>
   1ad5a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1ad5e:	d01d      	beq.n	1ad9c <d_demangle_callback.constprop.17+0x24c>
   1ad60:	2000      	movs	r0, #0
   1ad62:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1ad66:	46bd      	mov	sp, r7
   1ad68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad6c:	7b2b      	ldrb	r3, [r5, #12]
   1ad6e:	2b5a      	cmp	r3, #90	; 0x5a
   1ad70:	f47f af4a 	bne.w	1ac08 <d_demangle_callback.constprop.17+0xb8>
   1ad74:	350d      	adds	r5, #13
   1ad76:	4621      	mov	r1, r4
   1ad78:	f107 0014 	add.w	r0, r7, #20
   1ad7c:	623d      	str	r5, [r7, #32]
   1ad7e:	f7fb fe35 	bl	169ec <d_encoding>
   1ad82:	4602      	mov	r2, r0
   1ad84:	e753      	b.n	1ac2e <d_demangle_callback.constprop.17+0xde>
   1ad86:	f107 0014 	add.w	r0, r7, #20
   1ad8a:	f7fb f817 	bl	15dbc <d_type>
   1ad8e:	6a3b      	ldr	r3, [r7, #32]
   1ad90:	4605      	mov	r5, r0
   1ad92:	f893 9000 	ldrb.w	r9, [r3]
   1ad96:	e759      	b.n	1ac4c <d_demangle_callback.constprop.17+0xfc>
   1ad98:	2200      	movs	r2, #0
   1ad9a:	e748      	b.n	1ac2e <d_demangle_callback.constprop.17+0xde>
   1ad9c:	786b      	ldrb	r3, [r5, #1]
   1ad9e:	2b5a      	cmp	r3, #90	; 0x5a
   1ada0:	d1de      	bne.n	1ad60 <d_demangle_callback.constprop.17+0x210>
   1ada2:	3502      	adds	r5, #2
   1ada4:	4651      	mov	r1, sl
   1ada6:	f107 0014 	add.w	r0, r7, #20
   1adaa:	623d      	str	r5, [r7, #32]
   1adac:	f7fb fe1e 	bl	169ec <d_encoding>
   1adb0:	69fb      	ldr	r3, [r7, #28]
   1adb2:	07db      	lsls	r3, r3, #31
   1adb4:	4605      	mov	r5, r0
   1adb6:	d551      	bpl.n	1ae5c <d_demangle_callback.constprop.17+0x30c>
   1adb8:	6a38      	ldr	r0, [r7, #32]
   1adba:	f890 9000 	ldrb.w	r9, [r0]
   1adbe:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1adc2:	f47f af43 	bne.w	1ac4c <d_demangle_callback.constprop.17+0xfc>
   1adc6:	7843      	ldrb	r3, [r0, #1]
   1adc8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1adcc:	2a19      	cmp	r2, #25
   1adce:	d939      	bls.n	1ae44 <d_demangle_callback.constprop.17+0x2f4>
   1add0:	2b5f      	cmp	r3, #95	; 0x5f
   1add2:	d037      	beq.n	1ae44 <d_demangle_callback.constprop.17+0x2f4>
   1add4:	3b30      	subs	r3, #48	; 0x30
   1add6:	2b09      	cmp	r3, #9
   1add8:	d840      	bhi.n	1ae5c <d_demangle_callback.constprop.17+0x30c>
   1adda:	7803      	ldrb	r3, [r0, #0]
   1addc:	4602      	mov	r2, r0
   1adde:	2b2e      	cmp	r3, #46	; 0x2e
   1ade0:	d112      	bne.n	1ae08 <d_demangle_callback.constprop.17+0x2b8>
   1ade2:	7853      	ldrb	r3, [r2, #1]
   1ade4:	3b30      	subs	r3, #48	; 0x30
   1ade6:	2b09      	cmp	r3, #9
   1ade8:	d80e      	bhi.n	1ae08 <d_demangle_callback.constprop.17+0x2b8>
   1adea:	7893      	ldrb	r3, [r2, #2]
   1adec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1adf0:	2909      	cmp	r1, #9
   1adf2:	f102 0202 	add.w	r2, r2, #2
   1adf6:	d8f2      	bhi.n	1adde <d_demangle_callback.constprop.17+0x28e>
   1adf8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1adfc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1ae00:	2909      	cmp	r1, #9
   1ae02:	d9f9      	bls.n	1adf8 <d_demangle_callback.constprop.17+0x2a8>
   1ae04:	2b2e      	cmp	r3, #46	; 0x2e
   1ae06:	d0ec      	beq.n	1ade2 <d_demangle_callback.constprop.17+0x292>
   1ae08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae0c:	623a      	str	r2, [r7, #32]
   1ae0e:	4299      	cmp	r1, r3
   1ae10:	da16      	bge.n	1ae40 <d_demangle_callback.constprop.17+0x2f0>
   1ae12:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1ae16:	1c4b      	adds	r3, r1, #1
   1ae18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1ae1c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ae1e:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1ae22:	d00d      	beq.n	1ae40 <d_demangle_callback.constprop.17+0x2f0>
   1ae24:	1a12      	subs	r2, r2, r0
   1ae26:	d00b      	beq.n	1ae40 <d_demangle_callback.constprop.17+0x2f0>
   1ae28:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1ae2c:	6058      	str	r0, [r3, #4]
   1ae2e:	609a      	str	r2, [r3, #8]
   1ae30:	462a      	mov	r2, r5
   1ae32:	214d      	movs	r1, #77	; 0x4d
   1ae34:	f107 0014 	add.w	r0, r7, #20
   1ae38:	f7f9 fd30 	bl	1489c <d_make_comp>
   1ae3c:	4605      	mov	r5, r0
   1ae3e:	e7bb      	b.n	1adb8 <d_demangle_callback.constprop.17+0x268>
   1ae40:	2300      	movs	r3, #0
   1ae42:	e7f5      	b.n	1ae30 <d_demangle_callback.constprop.17+0x2e0>
   1ae44:	1c81      	adds	r1, r0, #2
   1ae46:	460a      	mov	r2, r1
   1ae48:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ae4c:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1ae50:	f1be 0f19 	cmp.w	lr, #25
   1ae54:	d9f7      	bls.n	1ae46 <d_demangle_callback.constprop.17+0x2f6>
   1ae56:	2b5f      	cmp	r3, #95	; 0x5f
   1ae58:	d0f5      	beq.n	1ae46 <d_demangle_callback.constprop.17+0x2f6>
   1ae5a:	e7c0      	b.n	1adde <d_demangle_callback.constprop.17+0x28e>
   1ae5c:	6a3b      	ldr	r3, [r7, #32]
   1ae5e:	f893 9000 	ldrb.w	r9, [r3]
   1ae62:	e6f3      	b.n	1ac4c <d_demangle_callback.constprop.17+0xfc>
   1ae64:	000247fc 	.word	0x000247fc

0001ae68 <__cxa_demangle>:
   1ae68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae6c:	b084      	sub	sp, #16
   1ae6e:	b378      	cbz	r0, 1aed0 <__cxa_demangle+0x68>
   1ae70:	b101      	cbz	r1, 1ae74 <__cxa_demangle+0xc>
   1ae72:	b36a      	cbz	r2, 1aed0 <__cxa_demangle+0x68>
   1ae74:	2400      	movs	r4, #0
   1ae76:	4616      	mov	r6, r2
   1ae78:	460d      	mov	r5, r1
   1ae7a:	466a      	mov	r2, sp
   1ae7c:	4927      	ldr	r1, [pc, #156]	; (1af1c <__cxa_demangle+0xb4>)
   1ae7e:	9400      	str	r4, [sp, #0]
   1ae80:	461f      	mov	r7, r3
   1ae82:	9401      	str	r4, [sp, #4]
   1ae84:	9402      	str	r4, [sp, #8]
   1ae86:	9403      	str	r4, [sp, #12]
   1ae88:	f7ff fe62 	bl	1ab50 <d_demangle_callback.constprop.17>
   1ae8c:	2800      	cmp	r0, #0
   1ae8e:	d03f      	beq.n	1af10 <__cxa_demangle+0xa8>
   1ae90:	9b03      	ldr	r3, [sp, #12]
   1ae92:	b1d3      	cbz	r3, 1aeca <__cxa_demangle+0x62>
   1ae94:	f04f 0801 	mov.w	r8, #1
   1ae98:	9c00      	ldr	r4, [sp, #0]
   1ae9a:	b35c      	cbz	r4, 1aef4 <__cxa_demangle+0x8c>
   1ae9c:	b33d      	cbz	r5, 1aeee <__cxa_demangle+0x86>
   1ae9e:	4620      	mov	r0, r4
   1aea0:	f004 f9ae 	bl	1f200 <strlen>
   1aea4:	6833      	ldr	r3, [r6, #0]
   1aea6:	4298      	cmp	r0, r3
   1aea8:	d21b      	bcs.n	1aee2 <__cxa_demangle+0x7a>
   1aeaa:	1c42      	adds	r2, r0, #1
   1aeac:	4621      	mov	r1, r4
   1aeae:	4628      	mov	r0, r5
   1aeb0:	f003 fc26 	bl	1e700 <memcpy>
   1aeb4:	4620      	mov	r0, r4
   1aeb6:	f003 f8d1 	bl	1e05c <free>
   1aeba:	462c      	mov	r4, r5
   1aebc:	b10f      	cbz	r7, 1aec2 <__cxa_demangle+0x5a>
   1aebe:	2300      	movs	r3, #0
   1aec0:	603b      	str	r3, [r7, #0]
   1aec2:	4620      	mov	r0, r4
   1aec4:	b004      	add	sp, #16
   1aec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aeca:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1aece:	e7e3      	b.n	1ae98 <__cxa_demangle+0x30>
   1aed0:	b113      	cbz	r3, 1aed8 <__cxa_demangle+0x70>
   1aed2:	f06f 0202 	mvn.w	r2, #2
   1aed6:	601a      	str	r2, [r3, #0]
   1aed8:	2400      	movs	r4, #0
   1aeda:	4620      	mov	r0, r4
   1aedc:	b004      	add	sp, #16
   1aede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aee2:	4628      	mov	r0, r5
   1aee4:	f003 f8ba 	bl	1e05c <free>
   1aee8:	f8c6 8000 	str.w	r8, [r6]
   1aeec:	e7e6      	b.n	1aebc <__cxa_demangle+0x54>
   1aeee:	2e00      	cmp	r6, #0
   1aef0:	d1fa      	bne.n	1aee8 <__cxa_demangle+0x80>
   1aef2:	e7e3      	b.n	1aebc <__cxa_demangle+0x54>
   1aef4:	2f00      	cmp	r7, #0
   1aef6:	d0ef      	beq.n	1aed8 <__cxa_demangle+0x70>
   1aef8:	f1b8 0f01 	cmp.w	r8, #1
   1aefc:	d004      	beq.n	1af08 <__cxa_demangle+0xa0>
   1aefe:	f06f 0301 	mvn.w	r3, #1
   1af02:	603b      	str	r3, [r7, #0]
   1af04:	2400      	movs	r4, #0
   1af06:	e7dc      	b.n	1aec2 <__cxa_demangle+0x5a>
   1af08:	f04f 33ff 	mov.w	r3, #4294967295
   1af0c:	603b      	str	r3, [r7, #0]
   1af0e:	e7d8      	b.n	1aec2 <__cxa_demangle+0x5a>
   1af10:	9800      	ldr	r0, [sp, #0]
   1af12:	f003 f8a3 	bl	1e05c <free>
   1af16:	2f00      	cmp	r7, #0
   1af18:	d1f1      	bne.n	1aefe <__cxa_demangle+0x96>
   1af1a:	e7dd      	b.n	1aed8 <__cxa_demangle+0x70>
   1af1c:	00014fc1 	.word	0x00014fc1

0001af20 <__gcclibcxx_demangle_callback>:
   1af20:	b160      	cbz	r0, 1af3c <__gcclibcxx_demangle_callback+0x1c>
   1af22:	b508      	push	{r3, lr}
   1af24:	b139      	cbz	r1, 1af36 <__gcclibcxx_demangle_callback+0x16>
   1af26:	f7ff fe13 	bl	1ab50 <d_demangle_callback.constprop.17>
   1af2a:	2800      	cmp	r0, #0
   1af2c:	bf0c      	ite	eq
   1af2e:	f06f 0001 	mvneq.w	r0, #1
   1af32:	2000      	movne	r0, #0
   1af34:	bd08      	pop	{r3, pc}
   1af36:	f06f 0002 	mvn.w	r0, #2
   1af3a:	bd08      	pop	{r3, pc}
   1af3c:	f06f 0002 	mvn.w	r0, #2
   1af40:	4770      	bx	lr
   1af42:	bf00      	nop

0001af44 <__cxa_current_exception_type>:
   1af44:	b508      	push	{r3, lr}
   1af46:	f7f9 f8f5 	bl	14134 <__cxa_get_globals>
   1af4a:	6800      	ldr	r0, [r0, #0]
   1af4c:	b130      	cbz	r0, 1af5c <__cxa_current_exception_type+0x18>
   1af4e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1af52:	2b01      	cmp	r3, #1
   1af54:	bf04      	itt	eq
   1af56:	6800      	ldreq	r0, [r0, #0]
   1af58:	3878      	subeq	r0, #120	; 0x78
   1af5a:	6800      	ldr	r0, [r0, #0]
   1af5c:	bd08      	pop	{r3, pc}
   1af5e:	bf00      	nop

0001af60 <round>:
   1af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af62:	ec53 2b10 	vmov	r2, r3, d0
   1af66:	f3c3 540a 	ubfx	r4, r3, #20, #11
   1af6a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
   1af6e:	2813      	cmp	r0, #19
   1af70:	4619      	mov	r1, r3
   1af72:	ee10 6a10 	vmov	r6, s0
   1af76:	dc12      	bgt.n	1af9e <round+0x3e>
   1af78:	2800      	cmp	r0, #0
   1af7a:	db32      	blt.n	1afe2 <round+0x82>
   1af7c:	4d23      	ldr	r5, [pc, #140]	; (1b00c <round+0xac>)
   1af7e:	4105      	asrs	r5, r0
   1af80:	422b      	tst	r3, r5
   1af82:	461f      	mov	r7, r3
   1af84:	d02a      	beq.n	1afdc <round+0x7c>
   1af86:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1af8a:	4101      	asrs	r1, r0
   1af8c:	4439      	add	r1, r7
   1af8e:	ea21 0105 	bic.w	r1, r1, r5
   1af92:	2400      	movs	r4, #0
   1af94:	460b      	mov	r3, r1
   1af96:	4622      	mov	r2, r4
   1af98:	ec43 2b10 	vmov	d0, r2, r3
   1af9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af9e:	2833      	cmp	r0, #51	; 0x33
   1afa0:	dd05      	ble.n	1afae <round+0x4e>
   1afa2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1afa6:	d022      	beq.n	1afee <round+0x8e>
   1afa8:	ec43 2b10 	vmov	d0, r2, r3
   1afac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1afae:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   1afb2:	f04f 35ff 	mov.w	r5, #4294967295
   1afb6:	fa25 f404 	lsr.w	r4, r5, r4
   1afba:	4222      	tst	r2, r4
   1afbc:	d0f4      	beq.n	1afa8 <round+0x48>
   1afbe:	2301      	movs	r3, #1
   1afc0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
   1afc4:	fa03 f000 	lsl.w	r0, r3, r0
   1afc8:	1980      	adds	r0, r0, r6
   1afca:	bf28      	it	cs
   1afcc:	18c9      	addcs	r1, r1, r3
   1afce:	ea20 0404 	bic.w	r4, r0, r4
   1afd2:	460b      	mov	r3, r1
   1afd4:	4622      	mov	r2, r4
   1afd6:	ec43 2b10 	vmov	d0, r2, r3
   1afda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1afdc:	2a00      	cmp	r2, #0
   1afde:	d1d2      	bne.n	1af86 <round+0x26>
   1afe0:	e7e2      	b.n	1afa8 <round+0x48>
   1afe2:	3001      	adds	r0, #1
   1afe4:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
   1afe8:	d009      	beq.n	1affe <round+0x9e>
   1afea:	2400      	movs	r4, #0
   1afec:	e7d2      	b.n	1af94 <round+0x34>
   1afee:	ee10 0a10 	vmov	r0, s0
   1aff2:	4619      	mov	r1, r3
   1aff4:	f000 fe18 	bl	1bc28 <__adddf3>
   1aff8:	ec41 0b10 	vmov	d0, r0, r1
   1affc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1affe:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
   1b002:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1b006:	2400      	movs	r4, #0
   1b008:	e7c4      	b.n	1af94 <round+0x34>
   1b00a:	bf00      	nop
   1b00c:	000fffff 	.word	0x000fffff

0001b010 <powf>:
   1b010:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b012:	ed2d 8b04 	vpush	{d8-d9}
   1b016:	4db3      	ldr	r5, [pc, #716]	; (1b2e4 <powf+0x2d4>)
   1b018:	b08b      	sub	sp, #44	; 0x2c
   1b01a:	eef0 8a40 	vmov.f32	s17, s0
   1b01e:	eeb0 8a60 	vmov.f32	s16, s1
   1b022:	f000 f9df 	bl	1b3e4 <__ieee754_powf>
   1b026:	f995 4000 	ldrsb.w	r4, [r5]
   1b02a:	1c63      	adds	r3, r4, #1
   1b02c:	eeb0 9a40 	vmov.f32	s18, s0
   1b030:	d02e      	beq.n	1b090 <powf+0x80>
   1b032:	eeb4 8a48 	vcmp.f32	s16, s16
   1b036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b03a:	d629      	bvs.n	1b090 <powf+0x80>
   1b03c:	eef4 8a68 	vcmp.f32	s17, s17
   1b040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b044:	f180 80a2 	bvs.w	1b18c <powf+0x17c>
   1b048:	eef5 8a40 	vcmp.f32	s17, #0.0
   1b04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b050:	d124      	bne.n	1b09c <powf+0x8c>
   1b052:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1b056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b05a:	d159      	bne.n	1b110 <powf+0x100>
   1b05c:	2301      	movs	r3, #1
   1b05e:	4aa2      	ldr	r2, [pc, #648]	; (1b2e8 <powf+0x2d8>)
   1b060:	9300      	str	r3, [sp, #0]
   1b062:	ee18 0a90 	vmov	r0, s17
   1b066:	2300      	movs	r3, #0
   1b068:	9201      	str	r2, [sp, #4]
   1b06a:	9308      	str	r3, [sp, #32]
   1b06c:	f000 ff3a 	bl	1bee4 <__aeabi_f2d>
   1b070:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b074:	ee18 0a10 	vmov	r0, s16
   1b078:	f000 ff34 	bl	1bee4 <__aeabi_f2d>
   1b07c:	2200      	movs	r2, #0
   1b07e:	2300      	movs	r3, #0
   1b080:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b084:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b088:	2c00      	cmp	r4, #0
   1b08a:	d067      	beq.n	1b15c <powf+0x14c>
   1b08c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1b090:	eeb0 0a49 	vmov.f32	s0, s18
   1b094:	b00b      	add	sp, #44	; 0x2c
   1b096:	ecbd 8b04 	vpop	{d8-d9}
   1b09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b09c:	f000 fd3a 	bl	1bb14 <finitef>
   1b0a0:	4604      	mov	r4, r0
   1b0a2:	2800      	cmp	r0, #0
   1b0a4:	f000 8091 	beq.w	1b1ca <powf+0x1ba>
   1b0a8:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1b0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b0b0:	d1ee      	bne.n	1b090 <powf+0x80>
   1b0b2:	eeb0 0a68 	vmov.f32	s0, s17
   1b0b6:	f000 fd2d 	bl	1bb14 <finitef>
   1b0ba:	2800      	cmp	r0, #0
   1b0bc:	d0e8      	beq.n	1b090 <powf+0x80>
   1b0be:	eeb0 0a48 	vmov.f32	s0, s16
   1b0c2:	f000 fd27 	bl	1bb14 <finitef>
   1b0c6:	2800      	cmp	r0, #0
   1b0c8:	d0e2      	beq.n	1b090 <powf+0x80>
   1b0ca:	2304      	movs	r3, #4
   1b0cc:	4a86      	ldr	r2, [pc, #536]	; (1b2e8 <powf+0x2d8>)
   1b0ce:	9300      	str	r3, [sp, #0]
   1b0d0:	ee18 0a90 	vmov	r0, s17
   1b0d4:	2300      	movs	r3, #0
   1b0d6:	9308      	str	r3, [sp, #32]
   1b0d8:	9201      	str	r2, [sp, #4]
   1b0da:	f000 ff03 	bl	1bee4 <__aeabi_f2d>
   1b0de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b0e2:	ee18 0a10 	vmov	r0, s16
   1b0e6:	f000 fefd 	bl	1bee4 <__aeabi_f2d>
   1b0ea:	2600      	movs	r6, #0
   1b0ec:	2700      	movs	r7, #0
   1b0ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b0f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b0f6:	f995 3000 	ldrsb.w	r3, [r5]
   1b0fa:	2b02      	cmp	r3, #2
   1b0fc:	d003      	beq.n	1b106 <powf+0xf6>
   1b0fe:	4668      	mov	r0, sp
   1b100:	f000 fc6c 	bl	1b9dc <matherr>
   1b104:	bb80      	cbnz	r0, 1b168 <powf+0x158>
   1b106:	f002 fd15 	bl	1db34 <__errno>
   1b10a:	2322      	movs	r3, #34	; 0x22
   1b10c:	6003      	str	r3, [r0, #0]
   1b10e:	e02b      	b.n	1b168 <powf+0x158>
   1b110:	eeb0 0a48 	vmov.f32	s0, s16
   1b114:	f000 fcfe 	bl	1bb14 <finitef>
   1b118:	2800      	cmp	r0, #0
   1b11a:	d0b9      	beq.n	1b090 <powf+0x80>
   1b11c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1b120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b124:	d5b4      	bpl.n	1b090 <powf+0x80>
   1b126:	2301      	movs	r3, #1
   1b128:	4a6f      	ldr	r2, [pc, #444]	; (1b2e8 <powf+0x2d8>)
   1b12a:	9300      	str	r3, [sp, #0]
   1b12c:	ee18 0a90 	vmov	r0, s17
   1b130:	2300      	movs	r3, #0
   1b132:	9308      	str	r3, [sp, #32]
   1b134:	9201      	str	r2, [sp, #4]
   1b136:	f000 fed5 	bl	1bee4 <__aeabi_f2d>
   1b13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b13e:	ee18 0a10 	vmov	r0, s16
   1b142:	f000 fecf 	bl	1bee4 <__aeabi_f2d>
   1b146:	f995 3000 	ldrsb.w	r3, [r5]
   1b14a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b14e:	2b00      	cmp	r3, #0
   1b150:	f040 809b 	bne.w	1b28a <powf+0x27a>
   1b154:	2200      	movs	r2, #0
   1b156:	2300      	movs	r3, #0
   1b158:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b15c:	4668      	mov	r0, sp
   1b15e:	f000 fc3d 	bl	1b9dc <matherr>
   1b162:	2800      	cmp	r0, #0
   1b164:	f000 808c 	beq.w	1b280 <powf+0x270>
   1b168:	9b08      	ldr	r3, [sp, #32]
   1b16a:	b11b      	cbz	r3, 1b174 <powf+0x164>
   1b16c:	f002 fce2 	bl	1db34 <__errno>
   1b170:	9b08      	ldr	r3, [sp, #32]
   1b172:	6003      	str	r3, [r0, #0]
   1b174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b178:	f001 f9ea 	bl	1c550 <__aeabi_d2f>
   1b17c:	ee09 0a10 	vmov	s18, r0
   1b180:	eeb0 0a49 	vmov.f32	s0, s18
   1b184:	b00b      	add	sp, #44	; 0x2c
   1b186:	ecbd 8b04 	vpop	{d8-d9}
   1b18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b18c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1b190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b194:	f47f af7c 	bne.w	1b090 <powf+0x80>
   1b198:	2301      	movs	r3, #1
   1b19a:	4a53      	ldr	r2, [pc, #332]	; (1b2e8 <powf+0x2d8>)
   1b19c:	9300      	str	r3, [sp, #0]
   1b19e:	ee18 0a90 	vmov	r0, s17
   1b1a2:	2300      	movs	r3, #0
   1b1a4:	9201      	str	r2, [sp, #4]
   1b1a6:	9308      	str	r3, [sp, #32]
   1b1a8:	f000 fe9c 	bl	1bee4 <__aeabi_f2d>
   1b1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b1b0:	ee18 0a10 	vmov	r0, s16
   1b1b4:	f000 fe96 	bl	1bee4 <__aeabi_f2d>
   1b1b8:	4b4c      	ldr	r3, [pc, #304]	; (1b2ec <powf+0x2dc>)
   1b1ba:	2200      	movs	r2, #0
   1b1bc:	2c02      	cmp	r4, #2
   1b1be:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b1c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b1c6:	d1c9      	bne.n	1b15c <powf+0x14c>
   1b1c8:	e760      	b.n	1b08c <powf+0x7c>
   1b1ca:	eeb0 0a68 	vmov.f32	s0, s17
   1b1ce:	f000 fca1 	bl	1bb14 <finitef>
   1b1d2:	2800      	cmp	r0, #0
   1b1d4:	f43f af68 	beq.w	1b0a8 <powf+0x98>
   1b1d8:	eeb0 0a48 	vmov.f32	s0, s16
   1b1dc:	f000 fc9a 	bl	1bb14 <finitef>
   1b1e0:	2800      	cmp	r0, #0
   1b1e2:	f43f af61 	beq.w	1b0a8 <powf+0x98>
   1b1e6:	eeb4 9a49 	vcmp.f32	s18, s18
   1b1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b1ee:	f180 8087 	bvs.w	1b300 <powf+0x2f0>
   1b1f2:	4b3d      	ldr	r3, [pc, #244]	; (1b2e8 <powf+0x2d8>)
   1b1f4:	9408      	str	r4, [sp, #32]
   1b1f6:	2203      	movs	r2, #3
   1b1f8:	ee18 0a90 	vmov	r0, s17
   1b1fc:	e88d 000c 	stmia.w	sp, {r2, r3}
   1b200:	f000 fe70 	bl	1bee4 <__aeabi_f2d>
   1b204:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b208:	ee18 0a10 	vmov	r0, s16
   1b20c:	f000 fe6a 	bl	1bee4 <__aeabi_f2d>
   1b210:	f995 3000 	ldrsb.w	r3, [r5]
   1b214:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b218:	2b00      	cmp	r3, #0
   1b21a:	d13d      	bne.n	1b298 <powf+0x288>
   1b21c:	4b34      	ldr	r3, [pc, #208]	; (1b2f0 <powf+0x2e0>)
   1b21e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1b222:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1b226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b22a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b22e:	f57f af66 	bpl.w	1b0fe <powf+0xee>
   1b232:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1b236:	ee68 7a27 	vmul.f32	s15, s16, s15
   1b23a:	ee17 0a90 	vmov	r0, s15
   1b23e:	f000 fe51 	bl	1bee4 <__aeabi_f2d>
   1b242:	4606      	mov	r6, r0
   1b244:	460f      	mov	r7, r1
   1b246:	ec47 6b10 	vmov	d0, r6, r7
   1b24a:	f000 fbc9 	bl	1b9e0 <rint>
   1b24e:	4630      	mov	r0, r6
   1b250:	ec53 2b10 	vmov	r2, r3, d0
   1b254:	4639      	mov	r1, r7
   1b256:	f001 f901 	bl	1c45c <__aeabi_dcmpeq>
   1b25a:	2800      	cmp	r0, #0
   1b25c:	d13f      	bne.n	1b2de <powf+0x2ce>
   1b25e:	4925      	ldr	r1, [pc, #148]	; (1b2f4 <powf+0x2e4>)
   1b260:	f995 3000 	ldrsb.w	r3, [r5]
   1b264:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1b268:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b26c:	e745      	b.n	1b0fa <powf+0xea>
   1b26e:	4610      	mov	r0, r2
   1b270:	4619      	mov	r1, r3
   1b272:	f000 ffb5 	bl	1c1e0 <__aeabi_ddiv>
   1b276:	2c02      	cmp	r4, #2
   1b278:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b27c:	f47f af6e 	bne.w	1b15c <powf+0x14c>
   1b280:	f002 fc58 	bl	1db34 <__errno>
   1b284:	2321      	movs	r3, #33	; 0x21
   1b286:	6003      	str	r3, [r0, #0]
   1b288:	e76e      	b.n	1b168 <powf+0x158>
   1b28a:	491b      	ldr	r1, [pc, #108]	; (1b2f8 <powf+0x2e8>)
   1b28c:	2000      	movs	r0, #0
   1b28e:	2b02      	cmp	r3, #2
   1b290:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b294:	d0f4      	beq.n	1b280 <powf+0x270>
   1b296:	e761      	b.n	1b15c <powf+0x14c>
   1b298:	4918      	ldr	r1, [pc, #96]	; (1b2fc <powf+0x2ec>)
   1b29a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1b29e:	2000      	movs	r0, #0
   1b2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b2a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b2a8:	f57f af27 	bpl.w	1b0fa <powf+0xea>
   1b2ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1b2b0:	ee68 7a27 	vmul.f32	s15, s16, s15
   1b2b4:	ee17 0a90 	vmov	r0, s15
   1b2b8:	f000 fe14 	bl	1bee4 <__aeabi_f2d>
   1b2bc:	4606      	mov	r6, r0
   1b2be:	460f      	mov	r7, r1
   1b2c0:	ec47 6b10 	vmov	d0, r6, r7
   1b2c4:	f000 fb8c 	bl	1b9e0 <rint>
   1b2c8:	4630      	mov	r0, r6
   1b2ca:	ec53 2b10 	vmov	r2, r3, d0
   1b2ce:	4639      	mov	r1, r7
   1b2d0:	f001 f8c4 	bl	1c45c <__aeabi_dcmpeq>
   1b2d4:	b918      	cbnz	r0, 1b2de <powf+0x2ce>
   1b2d6:	4b08      	ldr	r3, [pc, #32]	; (1b2f8 <powf+0x2e8>)
   1b2d8:	2200      	movs	r2, #0
   1b2da:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b2de:	f995 3000 	ldrsb.w	r3, [r5]
   1b2e2:	e70a      	b.n	1b0fa <powf+0xea>
   1b2e4:	20000104 	.word	0x20000104
   1b2e8:	00025048 	.word	0x00025048
   1b2ec:	3ff00000 	.word	0x3ff00000
   1b2f0:	47efffff 	.word	0x47efffff
   1b2f4:	c7efffff 	.word	0xc7efffff
   1b2f8:	fff00000 	.word	0xfff00000
   1b2fc:	7ff00000 	.word	0x7ff00000
   1b300:	4b0c      	ldr	r3, [pc, #48]	; (1b334 <powf+0x324>)
   1b302:	9408      	str	r4, [sp, #32]
   1b304:	2201      	movs	r2, #1
   1b306:	ee18 0a90 	vmov	r0, s17
   1b30a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1b30e:	f000 fde9 	bl	1bee4 <__aeabi_f2d>
   1b312:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b316:	ee18 0a10 	vmov	r0, s16
   1b31a:	f000 fde3 	bl	1bee4 <__aeabi_f2d>
   1b31e:	f995 4000 	ldrsb.w	r4, [r5]
   1b322:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b326:	2200      	movs	r2, #0
   1b328:	2300      	movs	r3, #0
   1b32a:	2c00      	cmp	r4, #0
   1b32c:	d19f      	bne.n	1b26e <powf+0x25e>
   1b32e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b332:	e713      	b.n	1b15c <powf+0x14c>
   1b334:	00025048 	.word	0x00025048

0001b338 <sqrtf>:
   1b338:	b510      	push	{r4, lr}
   1b33a:	ed2d 8b02 	vpush	{d8}
   1b33e:	b08a      	sub	sp, #40	; 0x28
   1b340:	eeb0 8a40 	vmov.f32	s16, s0
   1b344:	f000 fb46 	bl	1b9d4 <__ieee754_sqrtf>
   1b348:	4b24      	ldr	r3, [pc, #144]	; (1b3dc <sqrtf+0xa4>)
   1b34a:	f993 4000 	ldrsb.w	r4, [r3]
   1b34e:	1c63      	adds	r3, r4, #1
   1b350:	d009      	beq.n	1b366 <sqrtf+0x2e>
   1b352:	eeb4 8a48 	vcmp.f32	s16, s16
   1b356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b35a:	d604      	bvs.n	1b366 <sqrtf+0x2e>
   1b35c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1b360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b364:	d403      	bmi.n	1b36e <sqrtf+0x36>
   1b366:	b00a      	add	sp, #40	; 0x28
   1b368:	ecbd 8b02 	vpop	{d8}
   1b36c:	bd10      	pop	{r4, pc}
   1b36e:	2301      	movs	r3, #1
   1b370:	4a1b      	ldr	r2, [pc, #108]	; (1b3e0 <sqrtf+0xa8>)
   1b372:	9300      	str	r3, [sp, #0]
   1b374:	ee18 0a10 	vmov	r0, s16
   1b378:	2300      	movs	r3, #0
   1b37a:	9201      	str	r2, [sp, #4]
   1b37c:	9308      	str	r3, [sp, #32]
   1b37e:	f000 fdb1 	bl	1bee4 <__aeabi_f2d>
   1b382:	2200      	movs	r2, #0
   1b384:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b388:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b38c:	2300      	movs	r3, #0
   1b38e:	b1bc      	cbz	r4, 1b3c0 <sqrtf+0x88>
   1b390:	4610      	mov	r0, r2
   1b392:	4619      	mov	r1, r3
   1b394:	f000 ff24 	bl	1c1e0 <__aeabi_ddiv>
   1b398:	2c02      	cmp	r4, #2
   1b39a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b39e:	d111      	bne.n	1b3c4 <sqrtf+0x8c>
   1b3a0:	f002 fbc8 	bl	1db34 <__errno>
   1b3a4:	2321      	movs	r3, #33	; 0x21
   1b3a6:	6003      	str	r3, [r0, #0]
   1b3a8:	9b08      	ldr	r3, [sp, #32]
   1b3aa:	b98b      	cbnz	r3, 1b3d0 <sqrtf+0x98>
   1b3ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b3b0:	f001 f8ce 	bl	1c550 <__aeabi_d2f>
   1b3b4:	ee00 0a10 	vmov	s0, r0
   1b3b8:	b00a      	add	sp, #40	; 0x28
   1b3ba:	ecbd 8b02 	vpop	{d8}
   1b3be:	bd10      	pop	{r4, pc}
   1b3c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b3c4:	4668      	mov	r0, sp
   1b3c6:	f000 fb09 	bl	1b9dc <matherr>
   1b3ca:	2800      	cmp	r0, #0
   1b3cc:	d1ec      	bne.n	1b3a8 <sqrtf+0x70>
   1b3ce:	e7e7      	b.n	1b3a0 <sqrtf+0x68>
   1b3d0:	f002 fbb0 	bl	1db34 <__errno>
   1b3d4:	9b08      	ldr	r3, [sp, #32]
   1b3d6:	6003      	str	r3, [r0, #0]
   1b3d8:	e7e8      	b.n	1b3ac <sqrtf+0x74>
   1b3da:	bf00      	nop
   1b3dc:	20000104 	.word	0x20000104
   1b3e0:	00025050 	.word	0x00025050

0001b3e4 <__ieee754_powf>:
   1b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b3e8:	ed2d 8b02 	vpush	{d8}
   1b3ec:	b082      	sub	sp, #8
   1b3ee:	edcd 0a00 	vstr	s1, [sp]
   1b3f2:	9c00      	ldr	r4, [sp, #0]
   1b3f4:	ed8d 0a01 	vstr	s0, [sp, #4]
   1b3f8:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1b3fc:	d014      	beq.n	1b428 <__ieee754_powf+0x44>
   1b3fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1b402:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1b406:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b40a:	dd07      	ble.n	1b41c <__ieee754_powf+0x38>
   1b40c:	4858      	ldr	r0, [pc, #352]	; (1b570 <__ieee754_powf+0x18c>)
   1b40e:	b002      	add	sp, #8
   1b410:	ecbd 8b02 	vpop	{d8}
   1b414:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b418:	f000 bb86 	b.w	1bb28 <nanf>
   1b41c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b420:	dd09      	ble.n	1b436 <__ieee754_powf+0x52>
   1b422:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b426:	d1f1      	bne.n	1b40c <__ieee754_powf+0x28>
   1b428:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1b42c:	b002      	add	sp, #8
   1b42e:	ecbd 8b02 	vpop	{d8}
   1b432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b436:	f1b8 0f00 	cmp.w	r8, #0
   1b43a:	db4d      	blt.n	1b4d8 <__ieee754_powf+0xf4>
   1b43c:	f04f 0a00 	mov.w	sl, #0
   1b440:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b444:	d03f      	beq.n	1b4c6 <__ieee754_powf+0xe2>
   1b446:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b44a:	d058      	beq.n	1b4fe <__ieee754_powf+0x11a>
   1b44c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b450:	d06e      	beq.n	1b530 <__ieee754_powf+0x14c>
   1b452:	9d01      	ldr	r5, [sp, #4]
   1b454:	f8dd 9000 	ldr.w	r9, [sp]
   1b458:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1b45c:	ee00 5a10 	vmov	s0, r5
   1b460:	d01c      	beq.n	1b49c <__ieee754_powf+0xb8>
   1b462:	f000 fb4f 	bl	1bb04 <fabsf>
   1b466:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b46a:	d04d      	beq.n	1b508 <__ieee754_powf+0x124>
   1b46c:	2f00      	cmp	r7, #0
   1b46e:	d04b      	beq.n	1b508 <__ieee754_powf+0x124>
   1b470:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b474:	d048      	beq.n	1b508 <__ieee754_powf+0x124>
   1b476:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1b47a:	3b01      	subs	r3, #1
   1b47c:	ea5a 0203 	orrs.w	r2, sl, r3
   1b480:	d06e      	beq.n	1b560 <__ieee754_powf+0x17c>
   1b482:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1b486:	dd7b      	ble.n	1b580 <__ieee754_powf+0x19c>
   1b488:	4a3a      	ldr	r2, [pc, #232]	; (1b574 <__ieee754_powf+0x190>)
   1b48a:	4297      	cmp	r7, r2
   1b48c:	f300 81c8 	bgt.w	1b820 <__ieee754_powf+0x43c>
   1b490:	2c00      	cmp	r4, #0
   1b492:	f2c0 81cb 	blt.w	1b82c <__ieee754_powf+0x448>
   1b496:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1b578 <__ieee754_powf+0x194>
   1b49a:	e7c7      	b.n	1b42c <__ieee754_powf+0x48>
   1b49c:	f1b8 0f00 	cmp.w	r8, #0
   1b4a0:	da4b      	bge.n	1b53a <__ieee754_powf+0x156>
   1b4a2:	f000 fb2f 	bl	1bb04 <fabsf>
   1b4a6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b4aa:	d001      	beq.n	1b4b0 <__ieee754_powf+0xcc>
   1b4ac:	2f00      	cmp	r7, #0
   1b4ae:	d1df      	bne.n	1b470 <__ieee754_powf+0x8c>
   1b4b0:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1b4b4:	ea57 030a 	orrs.w	r3, r7, sl
   1b4b8:	d04d      	beq.n	1b556 <__ieee754_powf+0x172>
   1b4ba:	f1ba 0f01 	cmp.w	sl, #1
   1b4be:	d1b5      	bne.n	1b42c <__ieee754_powf+0x48>
   1b4c0:	eeb1 0a40 	vneg.f32	s0, s0
   1b4c4:	e7b2      	b.n	1b42c <__ieee754_powf+0x48>
   1b4c6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b4ca:	d0ad      	beq.n	1b428 <__ieee754_powf+0x44>
   1b4cc:	dd29      	ble.n	1b522 <__ieee754_powf+0x13e>
   1b4ce:	2c00      	cmp	r4, #0
   1b4d0:	dbe1      	blt.n	1b496 <__ieee754_powf+0xb2>
   1b4d2:	ed9d 0a00 	vldr	s0, [sp]
   1b4d6:	e7a9      	b.n	1b42c <__ieee754_powf+0x48>
   1b4d8:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1b4dc:	da1e      	bge.n	1b51c <__ieee754_powf+0x138>
   1b4de:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b4e2:	db09      	blt.n	1b4f8 <__ieee754_powf+0x114>
   1b4e4:	15f3      	asrs	r3, r6, #23
   1b4e6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1b4ea:	fa46 f203 	asr.w	r2, r6, r3
   1b4ee:	fa02 f303 	lsl.w	r3, r2, r3
   1b4f2:	429e      	cmp	r6, r3
   1b4f4:	f000 818f 	beq.w	1b816 <__ieee754_powf+0x432>
   1b4f8:	f04f 0a00 	mov.w	sl, #0
   1b4fc:	e7a3      	b.n	1b446 <__ieee754_powf+0x62>
   1b4fe:	2c00      	cmp	r4, #0
   1b500:	db22      	blt.n	1b548 <__ieee754_powf+0x164>
   1b502:	ed9d 0a01 	vldr	s0, [sp, #4]
   1b506:	e791      	b.n	1b42c <__ieee754_powf+0x48>
   1b508:	2c00      	cmp	r4, #0
   1b50a:	bfbc      	itt	lt
   1b50c:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1b510:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1b514:	f1b8 0f00 	cmp.w	r8, #0
   1b518:	da88      	bge.n	1b42c <__ieee754_powf+0x48>
   1b51a:	e7c9      	b.n	1b4b0 <__ieee754_powf+0xcc>
   1b51c:	f04f 0a02 	mov.w	sl, #2
   1b520:	e78e      	b.n	1b440 <__ieee754_powf+0x5c>
   1b522:	2c00      	cmp	r4, #0
   1b524:	dab7      	bge.n	1b496 <__ieee754_powf+0xb2>
   1b526:	eddd 7a00 	vldr	s15, [sp]
   1b52a:	eeb1 0a67 	vneg.f32	s0, s15
   1b52e:	e77d      	b.n	1b42c <__ieee754_powf+0x48>
   1b530:	eddd 7a01 	vldr	s15, [sp, #4]
   1b534:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1b538:	e778      	b.n	1b42c <__ieee754_powf+0x48>
   1b53a:	b002      	add	sp, #8
   1b53c:	ecbd 8b02 	vpop	{d8}
   1b540:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b544:	f000 ba46 	b.w	1b9d4 <__ieee754_sqrtf>
   1b548:	ed9d 7a01 	vldr	s14, [sp, #4]
   1b54c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b550:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1b554:	e76a      	b.n	1b42c <__ieee754_powf+0x48>
   1b556:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b55a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b55e:	e765      	b.n	1b42c <__ieee754_powf+0x48>
   1b560:	ee07 5a90 	vmov	s15, r5
   1b564:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1b568:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b56c:	e75e      	b.n	1b42c <__ieee754_powf+0x48>
   1b56e:	bf00      	nop
   1b570:	00024ae4 	.word	0x00024ae4
   1b574:	3f7ffff7 	.word	0x3f7ffff7
   1b578:	00000000 	.word	0x00000000
   1b57c:	4b800000 	.word	0x4b800000
   1b580:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1b584:	f280 815f 	bge.w	1b846 <__ieee754_powf+0x462>
   1b588:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1b57c <__ieee754_powf+0x198>
   1b58c:	ee60 7a27 	vmul.f32	s15, s0, s15
   1b590:	f06f 0217 	mvn.w	r2, #23
   1b594:	ee17 7a90 	vmov	r7, s15
   1b598:	48ee      	ldr	r0, [pc, #952]	; (1b954 <__ieee754_powf+0x570>)
   1b59a:	15f9      	asrs	r1, r7, #23
   1b59c:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1b5a0:	397f      	subs	r1, #127	; 0x7f
   1b5a2:	4287      	cmp	r7, r0
   1b5a4:	4411      	add	r1, r2
   1b5a6:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1b5aa:	f340 8144 	ble.w	1b836 <__ieee754_powf+0x452>
   1b5ae:	48ea      	ldr	r0, [pc, #936]	; (1b958 <__ieee754_powf+0x574>)
   1b5b0:	4287      	cmp	r7, r0
   1b5b2:	f340 8191 	ble.w	1b8d8 <__ieee754_powf+0x4f4>
   1b5b6:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b95c <__ieee754_powf+0x578>
   1b5ba:	3101      	adds	r1, #1
   1b5bc:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1b5c0:	eef0 3a64 	vmov.f32	s7, s9
   1b5c4:	2500      	movs	r5, #0
   1b5c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b5ca:	ee06 2a90 	vmov	s13, r2
   1b5ce:	ee76 7a86 	vadd.f32	s15, s13, s12
   1b5d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b5d6:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1b5da:	1052      	asrs	r2, r2, #1
   1b5dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1b5e0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1b5e4:	442a      	add	r2, r5
   1b5e6:	48de      	ldr	r0, [pc, #888]	; (1b960 <__ieee754_powf+0x57c>)
   1b5e8:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1b5ec:	ee07 2a90 	vmov	s15, r2
   1b5f0:	ee27 4a08 	vmul.f32	s8, s14, s16
   1b5f4:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1b5f8:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b964 <__ieee754_powf+0x580>
   1b5fc:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b968 <__ieee754_powf+0x584>
   1b600:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b96c <__ieee754_powf+0x588>
   1b604:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b970 <__ieee754_powf+0x58c>
   1b608:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b974 <__ieee754_powf+0x590>
   1b60c:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b978 <__ieee754_powf+0x594>
   1b610:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b97c <__ieee754_powf+0x598>
   1b614:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b980 <__ieee754_powf+0x59c>
   1b618:	ee24 6a04 	vmul.f32	s12, s8, s8
   1b61c:	ee14 2a10 	vmov	r2, s8
   1b620:	eea6 0a28 	vfma.f32	s0, s12, s17
   1b624:	4002      	ands	r2, r0
   1b626:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1b62a:	eeb0 5a61 	vmov.f32	s10, s3
   1b62e:	ee05 2a90 	vmov	s11, r2
   1b632:	eea6 5a00 	vfma.f32	s10, s12, s0
   1b636:	eef1 1a65 	vneg.f32	s3, s11
   1b63a:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1b63e:	eef0 7a60 	vmov.f32	s15, s1
   1b642:	eee6 7a05 	vfma.f32	s15, s12, s10
   1b646:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1b64a:	eeb0 5a41 	vmov.f32	s10, s2
   1b64e:	eea6 5a27 	vfma.f32	s10, s12, s15
   1b652:	ee67 6a08 	vmul.f32	s13, s14, s16
   1b656:	eeb0 7a42 	vmov.f32	s14, s4
   1b65a:	eea6 7a05 	vfma.f32	s14, s12, s10
   1b65e:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b662:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b666:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b66a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b66e:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b672:	eeb0 7a45 	vmov.f32	s14, s10
   1b676:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b67a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b984 <__ieee754_powf+0x5a0>
   1b67e:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b682:	ee07 1a10 	vmov	s14, r1
   1b686:	ee16 2a10 	vmov	r2, s12
   1b68a:	4002      	ands	r2, r0
   1b68c:	ee06 2a10 	vmov	s12, r2
   1b690:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b694:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b698:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b69c:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b6a0:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b6a4:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b6a8:	eef0 6a67 	vmov.f32	s13, s15
   1b6ac:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b6b0:	ee16 2a90 	vmov	r2, s13
   1b6b4:	4002      	ands	r2, r0
   1b6b6:	ee06 2a90 	vmov	s13, r2
   1b6ba:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b6be:	ee05 2a90 	vmov	s11, r2
   1b6c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b6c6:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b6ca:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b6ce:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b6d2:	eef0 6a67 	vmov.f32	s13, s15
   1b6d6:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b6da:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b6de:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b6e2:	ee16 2a90 	vmov	r2, s13
   1b6e6:	4002      	ands	r2, r0
   1b6e8:	ee06 2a90 	vmov	s13, r2
   1b6ec:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b6f0:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b6f4:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b6f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b6fc:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b700:	f024 040f 	bic.w	r4, r4, #15
   1b704:	ee07 9a10 	vmov	s14, r9
   1b708:	ee06 4a10 	vmov	s12, r4
   1b70c:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b710:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b714:	ee07 4a10 	vmov	s14, r4
   1b718:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b71c:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b720:	ea5a 0303 	orrs.w	r3, sl, r3
   1b724:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b728:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b72c:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b730:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b734:	ee16 2a90 	vmov	r2, s13
   1b738:	bf14      	ite	ne
   1b73a:	eeb0 8a46 	vmovne.f32	s16, s12
   1b73e:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b742:	2a00      	cmp	r2, #0
   1b744:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b748:	f340 80b3 	ble.w	1b8b2 <__ieee754_powf+0x4ce>
   1b74c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b750:	f300 8086 	bgt.w	1b860 <__ieee754_powf+0x47c>
   1b754:	d079      	beq.n	1b84a <__ieee754_powf+0x466>
   1b756:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b75a:	f300 8088 	bgt.w	1b86e <__ieee754_powf+0x48a>
   1b75e:	2100      	movs	r1, #0
   1b760:	4608      	mov	r0, r1
   1b762:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b766:	f023 030f 	bic.w	r3, r3, #15
   1b76a:	ee06 3a10 	vmov	s12, r3
   1b76e:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b988 <__ieee754_powf+0x5a4>
   1b772:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b98c <__ieee754_powf+0x5a8>
   1b776:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b990 <__ieee754_powf+0x5ac>
   1b77a:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b994 <__ieee754_powf+0x5b0>
   1b77e:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b998 <__ieee754_powf+0x5b4>
   1b782:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b99c <__ieee754_powf+0x5b8>
   1b786:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b9a0 <__ieee754_powf+0x5bc>
   1b78a:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b9a4 <__ieee754_powf+0x5c0>
   1b78e:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b792:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b796:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b79a:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b79e:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b7a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b7a6:	eef0 7a47 	vmov.f32	s15, s14
   1b7aa:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b7ae:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b7b2:	eef0 1a47 	vmov.f32	s3, s14
   1b7b6:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b7ba:	eeb0 6a63 	vmov.f32	s12, s7
   1b7be:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b7c2:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b7c6:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b7ca:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b7ce:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b7d2:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b7d6:	eeb0 6a45 	vmov.f32	s12, s10
   1b7da:	eeb0 5a47 	vmov.f32	s10, s14
   1b7de:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b7e2:	eef0 6a45 	vmov.f32	s13, s10
   1b7e6:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b7ea:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b7ee:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b7f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b7f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b7fa:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b7fe:	ee10 3a10 	vmov	r3, s0
   1b802:	440b      	add	r3, r1
   1b804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b808:	f2c0 80a0 	blt.w	1b94c <__ieee754_powf+0x568>
   1b80c:	ee00 3a10 	vmov	s0, r3
   1b810:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b814:	e60a      	b.n	1b42c <__ieee754_powf+0x48>
   1b816:	f002 0201 	and.w	r2, r2, #1
   1b81a:	f1c2 0a02 	rsb	sl, r2, #2
   1b81e:	e612      	b.n	1b446 <__ieee754_powf+0x62>
   1b820:	4a61      	ldr	r2, [pc, #388]	; (1b9a8 <__ieee754_powf+0x5c4>)
   1b822:	4297      	cmp	r7, r2
   1b824:	dd61      	ble.n	1b8ea <__ieee754_powf+0x506>
   1b826:	2c00      	cmp	r4, #0
   1b828:	f77f ae35 	ble.w	1b496 <__ieee754_powf+0xb2>
   1b82c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b9ac <__ieee754_powf+0x5c8>
   1b830:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b834:	e5fa      	b.n	1b42c <__ieee754_powf+0x48>
   1b836:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b95c <__ieee754_powf+0x578>
   1b83a:	2500      	movs	r5, #0
   1b83c:	eef0 3a64 	vmov.f32	s7, s9
   1b840:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b844:	e6c1      	b.n	1b5ca <__ieee754_powf+0x1e6>
   1b846:	2200      	movs	r2, #0
   1b848:	e6a6      	b.n	1b598 <__ieee754_powf+0x1b4>
   1b84a:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b9b0 <__ieee754_powf+0x5cc>
   1b84e:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b852:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b856:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b85e:	dd06      	ble.n	1b86e <__ieee754_powf+0x48a>
   1b860:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b9ac <__ieee754_powf+0x5c8>
   1b864:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b868:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b86c:	e5de      	b.n	1b42c <__ieee754_powf+0x48>
   1b86e:	15db      	asrs	r3, r3, #23
   1b870:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b874:	3b7e      	subs	r3, #126	; 0x7e
   1b876:	fa41 f303 	asr.w	r3, r1, r3
   1b87a:	4413      	add	r3, r2
   1b87c:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b880:	4c4c      	ldr	r4, [pc, #304]	; (1b9b4 <__ieee754_powf+0x5d0>)
   1b882:	397f      	subs	r1, #127	; 0x7f
   1b884:	410c      	asrs	r4, r1
   1b886:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b88a:	ea23 0304 	bic.w	r3, r3, r4
   1b88e:	ee06 3a90 	vmov	s13, r3
   1b892:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b896:	f1c1 0117 	rsb	r1, r1, #23
   1b89a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b89e:	4108      	asrs	r0, r1
   1b8a0:	2a00      	cmp	r2, #0
   1b8a2:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b8a6:	bfb8      	it	lt
   1b8a8:	4240      	neglt	r0, r0
   1b8aa:	05c1      	lsls	r1, r0, #23
   1b8ac:	ee16 2a90 	vmov	r2, s13
   1b8b0:	e757      	b.n	1b762 <__ieee754_powf+0x37e>
   1b8b2:	4941      	ldr	r1, [pc, #260]	; (1b9b8 <__ieee754_powf+0x5d4>)
   1b8b4:	428b      	cmp	r3, r1
   1b8b6:	dc08      	bgt.n	1b8ca <__ieee754_powf+0x4e6>
   1b8b8:	f47f af4d 	bne.w	1b756 <__ieee754_powf+0x372>
   1b8bc:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b8c0:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b8c8:	d8d1      	bhi.n	1b86e <__ieee754_powf+0x48a>
   1b8ca:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b9bc <__ieee754_powf+0x5d8>
   1b8ce:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b8d2:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b8d6:	e5a9      	b.n	1b42c <__ieee754_powf+0x48>
   1b8d8:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b9c0 <__ieee754_powf+0x5dc>
   1b8dc:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b9c4 <__ieee754_powf+0x5e0>
   1b8e0:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b8e4:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b8e8:	e66f      	b.n	1b5ca <__ieee754_powf+0x1e6>
   1b8ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b8ee:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b8f2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b970 <__ieee754_powf+0x58c>
   1b8f6:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b9c8 <__ieee754_powf+0x5e4>
   1b8fa:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b9cc <__ieee754_powf+0x5e8>
   1b8fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b9d0 <__ieee754_powf+0x5ec>
   1b902:	eeb1 6a40 	vneg.f32	s12, s0
   1b906:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b90a:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b90e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b912:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b916:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b91a:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b91e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b922:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b926:	eef0 6a67 	vmov.f32	s13, s15
   1b92a:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b92e:	ee16 2a90 	vmov	r2, s13
   1b932:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b936:	f022 020f 	bic.w	r2, r2, #15
   1b93a:	ee07 2a10 	vmov	s14, r2
   1b93e:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b942:	ee06 2a90 	vmov	s13, r2
   1b946:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b94a:	e6d7      	b.n	1b6fc <__ieee754_powf+0x318>
   1b94c:	f000 f8f2 	bl	1bb34 <scalbnf>
   1b950:	e75e      	b.n	1b810 <__ieee754_powf+0x42c>
   1b952:	bf00      	nop
   1b954:	001cc471 	.word	0x001cc471
   1b958:	005db3d6 	.word	0x005db3d6
   1b95c:	00000000 	.word	0x00000000
   1b960:	fffff000 	.word	0xfffff000
   1b964:	3e53f142 	.word	0x3e53f142
   1b968:	3e6c3255 	.word	0x3e6c3255
   1b96c:	3e8ba305 	.word	0x3e8ba305
   1b970:	3eaaaaab 	.word	0x3eaaaaab
   1b974:	3edb6db7 	.word	0x3edb6db7
   1b978:	3f19999a 	.word	0x3f19999a
   1b97c:	3f76384f 	.word	0x3f76384f
   1b980:	369dc3a0 	.word	0x369dc3a0
   1b984:	3f763800 	.word	0x3f763800
   1b988:	35bfbe8c 	.word	0x35bfbe8c
   1b98c:	3f317218 	.word	0x3f317218
   1b990:	3f317200 	.word	0x3f317200
   1b994:	b5ddea0e 	.word	0xb5ddea0e
   1b998:	3331bb4c 	.word	0x3331bb4c
   1b99c:	388ab355 	.word	0x388ab355
   1b9a0:	bb360b61 	.word	0xbb360b61
   1b9a4:	3e2aaaab 	.word	0x3e2aaaab
   1b9a8:	3f800007 	.word	0x3f800007
   1b9ac:	7149f2ca 	.word	0x7149f2ca
   1b9b0:	3338aa3c 	.word	0x3338aa3c
   1b9b4:	007fffff 	.word	0x007fffff
   1b9b8:	43160000 	.word	0x43160000
   1b9bc:	0da24260 	.word	0x0da24260
   1b9c0:	3f15c000 	.word	0x3f15c000
   1b9c4:	35d1cfdc 	.word	0x35d1cfdc
   1b9c8:	3fb8aa3b 	.word	0x3fb8aa3b
   1b9cc:	36eca570 	.word	0x36eca570
   1b9d0:	3fb8aa00 	.word	0x3fb8aa00

0001b9d4 <__ieee754_sqrtf>:
   1b9d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b9d8:	4770      	bx	lr
   1b9da:	bf00      	nop

0001b9dc <matherr>:
   1b9dc:	2000      	movs	r0, #0
   1b9de:	4770      	bx	lr

0001b9e0 <rint>:
   1b9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9e2:	ec53 2b10 	vmov	r2, r3, d0
   1b9e6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b9ea:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b9ee:	2813      	cmp	r0, #19
   1b9f0:	b083      	sub	sp, #12
   1b9f2:	4619      	mov	r1, r3
   1b9f4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b9f8:	ee10 5a10 	vmov	r5, s0
   1b9fc:	dc2f      	bgt.n	1ba5e <rint+0x7e>
   1b9fe:	2800      	cmp	r0, #0
   1ba00:	db49      	blt.n	1ba96 <rint+0xb6>
   1ba02:	4e3e      	ldr	r6, [pc, #248]	; (1bafc <rint+0x11c>)
   1ba04:	4106      	asrs	r6, r0
   1ba06:	ea03 0706 	and.w	r7, r3, r6
   1ba0a:	4317      	orrs	r7, r2
   1ba0c:	d02c      	beq.n	1ba68 <rint+0x88>
   1ba0e:	0876      	lsrs	r6, r6, #1
   1ba10:	4033      	ands	r3, r6
   1ba12:	431d      	orrs	r5, r3
   1ba14:	d00c      	beq.n	1ba30 <rint+0x50>
   1ba16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1ba1a:	2813      	cmp	r0, #19
   1ba1c:	ea21 0606 	bic.w	r6, r1, r6
   1ba20:	fa43 f100 	asr.w	r1, r3, r0
   1ba24:	ea41 0106 	orr.w	r1, r1, r6
   1ba28:	bf0c      	ite	eq
   1ba2a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1ba2e:	2500      	movne	r5, #0
   1ba30:	4833      	ldr	r0, [pc, #204]	; (1bb00 <rint+0x120>)
   1ba32:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1ba36:	462a      	mov	r2, r5
   1ba38:	e9d4 4500 	ldrd	r4, r5, [r4]
   1ba3c:	4610      	mov	r0, r2
   1ba3e:	462b      	mov	r3, r5
   1ba40:	4622      	mov	r2, r4
   1ba42:	f000 f8f1 	bl	1bc28 <__adddf3>
   1ba46:	e9cd 0100 	strd	r0, r1, [sp]
   1ba4a:	4622      	mov	r2, r4
   1ba4c:	462b      	mov	r3, r5
   1ba4e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ba52:	f000 f8e7 	bl	1bc24 <__aeabi_dsub>
   1ba56:	ec41 0b10 	vmov	d0, r0, r1
   1ba5a:	b003      	add	sp, #12
   1ba5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ba5e:	2833      	cmp	r0, #51	; 0x33
   1ba60:	dd06      	ble.n	1ba70 <rint+0x90>
   1ba62:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1ba66:	d040      	beq.n	1baea <rint+0x10a>
   1ba68:	ec43 2b10 	vmov	d0, r2, r3
   1ba6c:	b003      	add	sp, #12
   1ba6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ba70:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1ba74:	f04f 30ff 	mov.w	r0, #4294967295
   1ba78:	40f0      	lsrs	r0, r6
   1ba7a:	4202      	tst	r2, r0
   1ba7c:	d0f4      	beq.n	1ba68 <rint+0x88>
   1ba7e:	0840      	lsrs	r0, r0, #1
   1ba80:	4202      	tst	r2, r0
   1ba82:	d0d5      	beq.n	1ba30 <rint+0x50>
   1ba84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ba88:	ea25 0000 	bic.w	r0, r5, r0
   1ba8c:	fa43 f606 	asr.w	r6, r3, r6
   1ba90:	ea46 0500 	orr.w	r5, r6, r0
   1ba94:	e7cc      	b.n	1ba30 <rint+0x50>
   1ba96:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1ba9a:	4310      	orrs	r0, r2
   1ba9c:	d0e4      	beq.n	1ba68 <rint+0x88>
   1ba9e:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1baa2:	4310      	orrs	r0, r2
   1baa4:	4247      	negs	r7, r0
   1baa6:	4307      	orrs	r7, r0
   1baa8:	4d15      	ldr	r5, [pc, #84]	; (1bb00 <rint+0x120>)
   1baaa:	0c5e      	lsrs	r6, r3, #17
   1baac:	0b3f      	lsrs	r7, r7, #12
   1baae:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1bab2:	0476      	lsls	r6, r6, #17
   1bab4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1bab8:	ea43 0106 	orr.w	r1, r3, r6
   1babc:	e9d2 6700 	ldrd	r6, r7, [r2]
   1bac0:	ee10 0a10 	vmov	r0, s0
   1bac4:	4632      	mov	r2, r6
   1bac6:	463b      	mov	r3, r7
   1bac8:	f000 f8ae 	bl	1bc28 <__adddf3>
   1bacc:	e9cd 0100 	strd	r0, r1, [sp]
   1bad0:	463b      	mov	r3, r7
   1bad2:	4632      	mov	r2, r6
   1bad4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bad8:	f000 f8a4 	bl	1bc24 <__aeabi_dsub>
   1badc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1bae0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1bae4:	ec41 0b10 	vmov	d0, r0, r1
   1bae8:	e7c0      	b.n	1ba6c <rint+0x8c>
   1baea:	ee10 0a10 	vmov	r0, s0
   1baee:	4619      	mov	r1, r3
   1baf0:	f000 f89a 	bl	1bc28 <__adddf3>
   1baf4:	ec41 0b10 	vmov	d0, r0, r1
   1baf8:	e7b8      	b.n	1ba6c <rint+0x8c>
   1bafa:	bf00      	nop
   1bafc:	000fffff 	.word	0x000fffff
   1bb00:	00025058 	.word	0x00025058

0001bb04 <fabsf>:
   1bb04:	ee10 3a10 	vmov	r3, s0
   1bb08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1bb0c:	ee00 3a10 	vmov	s0, r3
   1bb10:	4770      	bx	lr
   1bb12:	bf00      	nop

0001bb14 <finitef>:
   1bb14:	ee10 3a10 	vmov	r3, s0
   1bb18:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1bb1c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1bb20:	bfac      	ite	ge
   1bb22:	2000      	movge	r0, #0
   1bb24:	2001      	movlt	r0, #1
   1bb26:	4770      	bx	lr

0001bb28 <nanf>:
   1bb28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1bb30 <nanf+0x8>
   1bb2c:	4770      	bx	lr
   1bb2e:	bf00      	nop
   1bb30:	7fc00000 	.word	0x7fc00000

0001bb34 <scalbnf>:
   1bb34:	b508      	push	{r3, lr}
   1bb36:	ee10 3a10 	vmov	r3, s0
   1bb3a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1bb3e:	ed2d 8b02 	vpush	{d8}
   1bb42:	d011      	beq.n	1bb68 <scalbnf+0x34>
   1bb44:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1bb48:	d211      	bcs.n	1bb6e <scalbnf+0x3a>
   1bb4a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1bb4e:	d313      	bcc.n	1bb78 <scalbnf+0x44>
   1bb50:	0dd2      	lsrs	r2, r2, #23
   1bb52:	4402      	add	r2, r0
   1bb54:	2afe      	cmp	r2, #254	; 0xfe
   1bb56:	dc2e      	bgt.n	1bbb6 <scalbnf+0x82>
   1bb58:	2a00      	cmp	r2, #0
   1bb5a:	dd1a      	ble.n	1bb92 <scalbnf+0x5e>
   1bb5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1bb60:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1bb64:	ee00 3a10 	vmov	s0, r3
   1bb68:	ecbd 8b02 	vpop	{d8}
   1bb6c:	bd08      	pop	{r3, pc}
   1bb6e:	ecbd 8b02 	vpop	{d8}
   1bb72:	ee30 0a00 	vadd.f32	s0, s0, s0
   1bb76:	bd08      	pop	{r3, pc}
   1bb78:	4b1d      	ldr	r3, [pc, #116]	; (1bbf0 <scalbnf+0xbc>)
   1bb7a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1bbf4 <scalbnf+0xc0>
   1bb7e:	4298      	cmp	r0, r3
   1bb80:	ee20 0a27 	vmul.f32	s0, s0, s15
   1bb84:	db22      	blt.n	1bbcc <scalbnf+0x98>
   1bb86:	ee10 3a10 	vmov	r3, s0
   1bb8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1bb8e:	3a19      	subs	r2, #25
   1bb90:	e7df      	b.n	1bb52 <scalbnf+0x1e>
   1bb92:	f112 0f16 	cmn.w	r2, #22
   1bb96:	da1e      	bge.n	1bbd6 <scalbnf+0xa2>
   1bb98:	f24c 3350 	movw	r3, #50000	; 0xc350
   1bb9c:	4298      	cmp	r0, r3
   1bb9e:	dc0a      	bgt.n	1bbb6 <scalbnf+0x82>
   1bba0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1bbf8 <scalbnf+0xc4>
   1bba4:	eef0 0a40 	vmov.f32	s1, s0
   1bba8:	eeb0 0a48 	vmov.f32	s0, s16
   1bbac:	f000 f82a 	bl	1bc04 <copysignf>
   1bbb0:	ee20 0a08 	vmul.f32	s0, s0, s16
   1bbb4:	e7d8      	b.n	1bb68 <scalbnf+0x34>
   1bbb6:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1bbfc <scalbnf+0xc8>
   1bbba:	eef0 0a40 	vmov.f32	s1, s0
   1bbbe:	eeb0 0a48 	vmov.f32	s0, s16
   1bbc2:	f000 f81f 	bl	1bc04 <copysignf>
   1bbc6:	ee20 0a08 	vmul.f32	s0, s0, s16
   1bbca:	e7cd      	b.n	1bb68 <scalbnf+0x34>
   1bbcc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1bbf8 <scalbnf+0xc4>
   1bbd0:	ee20 0a20 	vmul.f32	s0, s0, s1
   1bbd4:	e7c8      	b.n	1bb68 <scalbnf+0x34>
   1bbd6:	3219      	adds	r2, #25
   1bbd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1bbdc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1bbe0:	eddf 7a07 	vldr	s15, [pc, #28]	; 1bc00 <scalbnf+0xcc>
   1bbe4:	ee00 3a10 	vmov	s0, r3
   1bbe8:	ee20 0a27 	vmul.f32	s0, s0, s15
   1bbec:	e7bc      	b.n	1bb68 <scalbnf+0x34>
   1bbee:	bf00      	nop
   1bbf0:	ffff3cb0 	.word	0xffff3cb0
   1bbf4:	4c000000 	.word	0x4c000000
   1bbf8:	0da24260 	.word	0x0da24260
   1bbfc:	7149f2ca 	.word	0x7149f2ca
   1bc00:	33000000 	.word	0x33000000

0001bc04 <copysignf>:
   1bc04:	ee10 3a10 	vmov	r3, s0
   1bc08:	ee10 2a90 	vmov	r2, s1
   1bc0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1bc10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1bc14:	4313      	orrs	r3, r2
   1bc16:	ee00 3a10 	vmov	s0, r3
   1bc1a:	4770      	bx	lr

0001bc1c <__aeabi_drsub>:
   1bc1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1bc20:	e002      	b.n	1bc28 <__adddf3>
   1bc22:	bf00      	nop

0001bc24 <__aeabi_dsub>:
   1bc24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001bc28 <__adddf3>:
   1bc28:	b530      	push	{r4, r5, lr}
   1bc2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1bc2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1bc32:	ea94 0f05 	teq	r4, r5
   1bc36:	bf08      	it	eq
   1bc38:	ea90 0f02 	teqeq	r0, r2
   1bc3c:	bf1f      	itttt	ne
   1bc3e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1bc42:	ea55 0c02 	orrsne.w	ip, r5, r2
   1bc46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1bc4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1bc4e:	f000 80e2 	beq.w	1be16 <__adddf3+0x1ee>
   1bc52:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1bc56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1bc5a:	bfb8      	it	lt
   1bc5c:	426d      	neglt	r5, r5
   1bc5e:	dd0c      	ble.n	1bc7a <__adddf3+0x52>
   1bc60:	442c      	add	r4, r5
   1bc62:	ea80 0202 	eor.w	r2, r0, r2
   1bc66:	ea81 0303 	eor.w	r3, r1, r3
   1bc6a:	ea82 0000 	eor.w	r0, r2, r0
   1bc6e:	ea83 0101 	eor.w	r1, r3, r1
   1bc72:	ea80 0202 	eor.w	r2, r0, r2
   1bc76:	ea81 0303 	eor.w	r3, r1, r3
   1bc7a:	2d36      	cmp	r5, #54	; 0x36
   1bc7c:	bf88      	it	hi
   1bc7e:	bd30      	pophi	{r4, r5, pc}
   1bc80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1bc84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bc88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1bc8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1bc90:	d002      	beq.n	1bc98 <__adddf3+0x70>
   1bc92:	4240      	negs	r0, r0
   1bc94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1bc98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1bc9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bca0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1bca4:	d002      	beq.n	1bcac <__adddf3+0x84>
   1bca6:	4252      	negs	r2, r2
   1bca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1bcac:	ea94 0f05 	teq	r4, r5
   1bcb0:	f000 80a7 	beq.w	1be02 <__adddf3+0x1da>
   1bcb4:	f1a4 0401 	sub.w	r4, r4, #1
   1bcb8:	f1d5 0e20 	rsbs	lr, r5, #32
   1bcbc:	db0d      	blt.n	1bcda <__adddf3+0xb2>
   1bcbe:	fa02 fc0e 	lsl.w	ip, r2, lr
   1bcc2:	fa22 f205 	lsr.w	r2, r2, r5
   1bcc6:	1880      	adds	r0, r0, r2
   1bcc8:	f141 0100 	adc.w	r1, r1, #0
   1bccc:	fa03 f20e 	lsl.w	r2, r3, lr
   1bcd0:	1880      	adds	r0, r0, r2
   1bcd2:	fa43 f305 	asr.w	r3, r3, r5
   1bcd6:	4159      	adcs	r1, r3
   1bcd8:	e00e      	b.n	1bcf8 <__adddf3+0xd0>
   1bcda:	f1a5 0520 	sub.w	r5, r5, #32
   1bcde:	f10e 0e20 	add.w	lr, lr, #32
   1bce2:	2a01      	cmp	r2, #1
   1bce4:	fa03 fc0e 	lsl.w	ip, r3, lr
   1bce8:	bf28      	it	cs
   1bcea:	f04c 0c02 	orrcs.w	ip, ip, #2
   1bcee:	fa43 f305 	asr.w	r3, r3, r5
   1bcf2:	18c0      	adds	r0, r0, r3
   1bcf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1bcf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bcfc:	d507      	bpl.n	1bd0e <__adddf3+0xe6>
   1bcfe:	f04f 0e00 	mov.w	lr, #0
   1bd02:	f1dc 0c00 	rsbs	ip, ip, #0
   1bd06:	eb7e 0000 	sbcs.w	r0, lr, r0
   1bd0a:	eb6e 0101 	sbc.w	r1, lr, r1
   1bd0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1bd12:	d31b      	bcc.n	1bd4c <__adddf3+0x124>
   1bd14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1bd18:	d30c      	bcc.n	1bd34 <__adddf3+0x10c>
   1bd1a:	0849      	lsrs	r1, r1, #1
   1bd1c:	ea5f 0030 	movs.w	r0, r0, rrx
   1bd20:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1bd24:	f104 0401 	add.w	r4, r4, #1
   1bd28:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1bd2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1bd30:	f080 809a 	bcs.w	1be68 <__adddf3+0x240>
   1bd34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1bd38:	bf08      	it	eq
   1bd3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1bd3e:	f150 0000 	adcs.w	r0, r0, #0
   1bd42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bd46:	ea41 0105 	orr.w	r1, r1, r5
   1bd4a:	bd30      	pop	{r4, r5, pc}
   1bd4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1bd50:	4140      	adcs	r0, r0
   1bd52:	eb41 0101 	adc.w	r1, r1, r1
   1bd56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bd5a:	f1a4 0401 	sub.w	r4, r4, #1
   1bd5e:	d1e9      	bne.n	1bd34 <__adddf3+0x10c>
   1bd60:	f091 0f00 	teq	r1, #0
   1bd64:	bf04      	itt	eq
   1bd66:	4601      	moveq	r1, r0
   1bd68:	2000      	moveq	r0, #0
   1bd6a:	fab1 f381 	clz	r3, r1
   1bd6e:	bf08      	it	eq
   1bd70:	3320      	addeq	r3, #32
   1bd72:	f1a3 030b 	sub.w	r3, r3, #11
   1bd76:	f1b3 0220 	subs.w	r2, r3, #32
   1bd7a:	da0c      	bge.n	1bd96 <__adddf3+0x16e>
   1bd7c:	320c      	adds	r2, #12
   1bd7e:	dd08      	ble.n	1bd92 <__adddf3+0x16a>
   1bd80:	f102 0c14 	add.w	ip, r2, #20
   1bd84:	f1c2 020c 	rsb	r2, r2, #12
   1bd88:	fa01 f00c 	lsl.w	r0, r1, ip
   1bd8c:	fa21 f102 	lsr.w	r1, r1, r2
   1bd90:	e00c      	b.n	1bdac <__adddf3+0x184>
   1bd92:	f102 0214 	add.w	r2, r2, #20
   1bd96:	bfd8      	it	le
   1bd98:	f1c2 0c20 	rsble	ip, r2, #32
   1bd9c:	fa01 f102 	lsl.w	r1, r1, r2
   1bda0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1bda4:	bfdc      	itt	le
   1bda6:	ea41 010c 	orrle.w	r1, r1, ip
   1bdaa:	4090      	lslle	r0, r2
   1bdac:	1ae4      	subs	r4, r4, r3
   1bdae:	bfa2      	ittt	ge
   1bdb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1bdb4:	4329      	orrge	r1, r5
   1bdb6:	bd30      	popge	{r4, r5, pc}
   1bdb8:	ea6f 0404 	mvn.w	r4, r4
   1bdbc:	3c1f      	subs	r4, #31
   1bdbe:	da1c      	bge.n	1bdfa <__adddf3+0x1d2>
   1bdc0:	340c      	adds	r4, #12
   1bdc2:	dc0e      	bgt.n	1bde2 <__adddf3+0x1ba>
   1bdc4:	f104 0414 	add.w	r4, r4, #20
   1bdc8:	f1c4 0220 	rsb	r2, r4, #32
   1bdcc:	fa20 f004 	lsr.w	r0, r0, r4
   1bdd0:	fa01 f302 	lsl.w	r3, r1, r2
   1bdd4:	ea40 0003 	orr.w	r0, r0, r3
   1bdd8:	fa21 f304 	lsr.w	r3, r1, r4
   1bddc:	ea45 0103 	orr.w	r1, r5, r3
   1bde0:	bd30      	pop	{r4, r5, pc}
   1bde2:	f1c4 040c 	rsb	r4, r4, #12
   1bde6:	f1c4 0220 	rsb	r2, r4, #32
   1bdea:	fa20 f002 	lsr.w	r0, r0, r2
   1bdee:	fa01 f304 	lsl.w	r3, r1, r4
   1bdf2:	ea40 0003 	orr.w	r0, r0, r3
   1bdf6:	4629      	mov	r1, r5
   1bdf8:	bd30      	pop	{r4, r5, pc}
   1bdfa:	fa21 f004 	lsr.w	r0, r1, r4
   1bdfe:	4629      	mov	r1, r5
   1be00:	bd30      	pop	{r4, r5, pc}
   1be02:	f094 0f00 	teq	r4, #0
   1be06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1be0a:	bf06      	itte	eq
   1be0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1be10:	3401      	addeq	r4, #1
   1be12:	3d01      	subne	r5, #1
   1be14:	e74e      	b.n	1bcb4 <__adddf3+0x8c>
   1be16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1be1a:	bf18      	it	ne
   1be1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1be20:	d029      	beq.n	1be76 <__adddf3+0x24e>
   1be22:	ea94 0f05 	teq	r4, r5
   1be26:	bf08      	it	eq
   1be28:	ea90 0f02 	teqeq	r0, r2
   1be2c:	d005      	beq.n	1be3a <__adddf3+0x212>
   1be2e:	ea54 0c00 	orrs.w	ip, r4, r0
   1be32:	bf04      	itt	eq
   1be34:	4619      	moveq	r1, r3
   1be36:	4610      	moveq	r0, r2
   1be38:	bd30      	pop	{r4, r5, pc}
   1be3a:	ea91 0f03 	teq	r1, r3
   1be3e:	bf1e      	ittt	ne
   1be40:	2100      	movne	r1, #0
   1be42:	2000      	movne	r0, #0
   1be44:	bd30      	popne	{r4, r5, pc}
   1be46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1be4a:	d105      	bne.n	1be58 <__adddf3+0x230>
   1be4c:	0040      	lsls	r0, r0, #1
   1be4e:	4149      	adcs	r1, r1
   1be50:	bf28      	it	cs
   1be52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1be56:	bd30      	pop	{r4, r5, pc}
   1be58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1be5c:	bf3c      	itt	cc
   1be5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1be62:	bd30      	popcc	{r4, r5, pc}
   1be64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1be68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1be6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1be70:	f04f 0000 	mov.w	r0, #0
   1be74:	bd30      	pop	{r4, r5, pc}
   1be76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1be7a:	bf1a      	itte	ne
   1be7c:	4619      	movne	r1, r3
   1be7e:	4610      	movne	r0, r2
   1be80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1be84:	bf1c      	itt	ne
   1be86:	460b      	movne	r3, r1
   1be88:	4602      	movne	r2, r0
   1be8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1be8e:	bf06      	itte	eq
   1be90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1be94:	ea91 0f03 	teqeq	r1, r3
   1be98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1be9c:	bd30      	pop	{r4, r5, pc}
   1be9e:	bf00      	nop

0001bea0 <__aeabi_ui2d>:
   1bea0:	f090 0f00 	teq	r0, #0
   1bea4:	bf04      	itt	eq
   1bea6:	2100      	moveq	r1, #0
   1bea8:	4770      	bxeq	lr
   1beaa:	b530      	push	{r4, r5, lr}
   1beac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1beb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1beb4:	f04f 0500 	mov.w	r5, #0
   1beb8:	f04f 0100 	mov.w	r1, #0
   1bebc:	e750      	b.n	1bd60 <__adddf3+0x138>
   1bebe:	bf00      	nop

0001bec0 <__aeabi_i2d>:
   1bec0:	f090 0f00 	teq	r0, #0
   1bec4:	bf04      	itt	eq
   1bec6:	2100      	moveq	r1, #0
   1bec8:	4770      	bxeq	lr
   1beca:	b530      	push	{r4, r5, lr}
   1becc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bed4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1bed8:	bf48      	it	mi
   1beda:	4240      	negmi	r0, r0
   1bedc:	f04f 0100 	mov.w	r1, #0
   1bee0:	e73e      	b.n	1bd60 <__adddf3+0x138>
   1bee2:	bf00      	nop

0001bee4 <__aeabi_f2d>:
   1bee4:	0042      	lsls	r2, r0, #1
   1bee6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1beea:	ea4f 0131 	mov.w	r1, r1, rrx
   1beee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1bef2:	bf1f      	itttt	ne
   1bef4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1bef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1befc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1bf00:	4770      	bxne	lr
   1bf02:	f092 0f00 	teq	r2, #0
   1bf06:	bf14      	ite	ne
   1bf08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1bf0c:	4770      	bxeq	lr
   1bf0e:	b530      	push	{r4, r5, lr}
   1bf10:	f44f 7460 	mov.w	r4, #896	; 0x380
   1bf14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bf18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bf1c:	e720      	b.n	1bd60 <__adddf3+0x138>
   1bf1e:	bf00      	nop

0001bf20 <__aeabi_ul2d>:
   1bf20:	ea50 0201 	orrs.w	r2, r0, r1
   1bf24:	bf08      	it	eq
   1bf26:	4770      	bxeq	lr
   1bf28:	b530      	push	{r4, r5, lr}
   1bf2a:	f04f 0500 	mov.w	r5, #0
   1bf2e:	e00a      	b.n	1bf46 <__aeabi_l2d+0x16>

0001bf30 <__aeabi_l2d>:
   1bf30:	ea50 0201 	orrs.w	r2, r0, r1
   1bf34:	bf08      	it	eq
   1bf36:	4770      	bxeq	lr
   1bf38:	b530      	push	{r4, r5, lr}
   1bf3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1bf3e:	d502      	bpl.n	1bf46 <__aeabi_l2d+0x16>
   1bf40:	4240      	negs	r0, r0
   1bf42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1bf46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bf4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bf4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1bf52:	f43f aedc 	beq.w	1bd0e <__adddf3+0xe6>
   1bf56:	f04f 0203 	mov.w	r2, #3
   1bf5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bf5e:	bf18      	it	ne
   1bf60:	3203      	addne	r2, #3
   1bf62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bf66:	bf18      	it	ne
   1bf68:	3203      	addne	r2, #3
   1bf6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1bf6e:	f1c2 0320 	rsb	r3, r2, #32
   1bf72:	fa00 fc03 	lsl.w	ip, r0, r3
   1bf76:	fa20 f002 	lsr.w	r0, r0, r2
   1bf7a:	fa01 fe03 	lsl.w	lr, r1, r3
   1bf7e:	ea40 000e 	orr.w	r0, r0, lr
   1bf82:	fa21 f102 	lsr.w	r1, r1, r2
   1bf86:	4414      	add	r4, r2
   1bf88:	e6c1      	b.n	1bd0e <__adddf3+0xe6>
   1bf8a:	bf00      	nop

0001bf8c <__aeabi_dmul>:
   1bf8c:	b570      	push	{r4, r5, r6, lr}
   1bf8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bf92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bf96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bf9a:	bf1d      	ittte	ne
   1bf9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bfa0:	ea94 0f0c 	teqne	r4, ip
   1bfa4:	ea95 0f0c 	teqne	r5, ip
   1bfa8:	f000 f8de 	bleq	1c168 <__aeabi_dmul+0x1dc>
   1bfac:	442c      	add	r4, r5
   1bfae:	ea81 0603 	eor.w	r6, r1, r3
   1bfb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1bfb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1bfba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1bfbe:	bf18      	it	ne
   1bfc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1bfc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bfc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bfcc:	d038      	beq.n	1c040 <__aeabi_dmul+0xb4>
   1bfce:	fba0 ce02 	umull	ip, lr, r0, r2
   1bfd2:	f04f 0500 	mov.w	r5, #0
   1bfd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   1bfda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1bfde:	fbe0 e503 	umlal	lr, r5, r0, r3
   1bfe2:	f04f 0600 	mov.w	r6, #0
   1bfe6:	fbe1 5603 	umlal	r5, r6, r1, r3
   1bfea:	f09c 0f00 	teq	ip, #0
   1bfee:	bf18      	it	ne
   1bff0:	f04e 0e01 	orrne.w	lr, lr, #1
   1bff4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1bff8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1bffc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c000:	d204      	bcs.n	1c00c <__aeabi_dmul+0x80>
   1c002:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c006:	416d      	adcs	r5, r5
   1c008:	eb46 0606 	adc.w	r6, r6, r6
   1c00c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c010:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c014:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c018:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c01c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c020:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c024:	bf88      	it	hi
   1c026:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c02a:	d81e      	bhi.n	1c06a <__aeabi_dmul+0xde>
   1c02c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c030:	bf08      	it	eq
   1c032:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c036:	f150 0000 	adcs.w	r0, r0, #0
   1c03a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c03e:	bd70      	pop	{r4, r5, r6, pc}
   1c040:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c044:	ea46 0101 	orr.w	r1, r6, r1
   1c048:	ea40 0002 	orr.w	r0, r0, r2
   1c04c:	ea81 0103 	eor.w	r1, r1, r3
   1c050:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c054:	bfc2      	ittt	gt
   1c056:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c05a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c05e:	bd70      	popgt	{r4, r5, r6, pc}
   1c060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c064:	f04f 0e00 	mov.w	lr, #0
   1c068:	3c01      	subs	r4, #1
   1c06a:	f300 80ab 	bgt.w	1c1c4 <__aeabi_dmul+0x238>
   1c06e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c072:	bfde      	ittt	le
   1c074:	2000      	movle	r0, #0
   1c076:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c07a:	bd70      	pople	{r4, r5, r6, pc}
   1c07c:	f1c4 0400 	rsb	r4, r4, #0
   1c080:	3c20      	subs	r4, #32
   1c082:	da35      	bge.n	1c0f0 <__aeabi_dmul+0x164>
   1c084:	340c      	adds	r4, #12
   1c086:	dc1b      	bgt.n	1c0c0 <__aeabi_dmul+0x134>
   1c088:	f104 0414 	add.w	r4, r4, #20
   1c08c:	f1c4 0520 	rsb	r5, r4, #32
   1c090:	fa00 f305 	lsl.w	r3, r0, r5
   1c094:	fa20 f004 	lsr.w	r0, r0, r4
   1c098:	fa01 f205 	lsl.w	r2, r1, r5
   1c09c:	ea40 0002 	orr.w	r0, r0, r2
   1c0a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c0a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c0a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c0ac:	fa21 f604 	lsr.w	r6, r1, r4
   1c0b0:	eb42 0106 	adc.w	r1, r2, r6
   1c0b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c0b8:	bf08      	it	eq
   1c0ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c0be:	bd70      	pop	{r4, r5, r6, pc}
   1c0c0:	f1c4 040c 	rsb	r4, r4, #12
   1c0c4:	f1c4 0520 	rsb	r5, r4, #32
   1c0c8:	fa00 f304 	lsl.w	r3, r0, r4
   1c0cc:	fa20 f005 	lsr.w	r0, r0, r5
   1c0d0:	fa01 f204 	lsl.w	r2, r1, r4
   1c0d4:	ea40 0002 	orr.w	r0, r0, r2
   1c0d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c0dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c0e0:	f141 0100 	adc.w	r1, r1, #0
   1c0e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c0e8:	bf08      	it	eq
   1c0ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c0ee:	bd70      	pop	{r4, r5, r6, pc}
   1c0f0:	f1c4 0520 	rsb	r5, r4, #32
   1c0f4:	fa00 f205 	lsl.w	r2, r0, r5
   1c0f8:	ea4e 0e02 	orr.w	lr, lr, r2
   1c0fc:	fa20 f304 	lsr.w	r3, r0, r4
   1c100:	fa01 f205 	lsl.w	r2, r1, r5
   1c104:	ea43 0302 	orr.w	r3, r3, r2
   1c108:	fa21 f004 	lsr.w	r0, r1, r4
   1c10c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c110:	fa21 f204 	lsr.w	r2, r1, r4
   1c114:	ea20 0002 	bic.w	r0, r0, r2
   1c118:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c11c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c120:	bf08      	it	eq
   1c122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c126:	bd70      	pop	{r4, r5, r6, pc}
   1c128:	f094 0f00 	teq	r4, #0
   1c12c:	d10f      	bne.n	1c14e <__aeabi_dmul+0x1c2>
   1c12e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c132:	0040      	lsls	r0, r0, #1
   1c134:	eb41 0101 	adc.w	r1, r1, r1
   1c138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c13c:	bf08      	it	eq
   1c13e:	3c01      	subeq	r4, #1
   1c140:	d0f7      	beq.n	1c132 <__aeabi_dmul+0x1a6>
   1c142:	ea41 0106 	orr.w	r1, r1, r6
   1c146:	f095 0f00 	teq	r5, #0
   1c14a:	bf18      	it	ne
   1c14c:	4770      	bxne	lr
   1c14e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c152:	0052      	lsls	r2, r2, #1
   1c154:	eb43 0303 	adc.w	r3, r3, r3
   1c158:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c15c:	bf08      	it	eq
   1c15e:	3d01      	subeq	r5, #1
   1c160:	d0f7      	beq.n	1c152 <__aeabi_dmul+0x1c6>
   1c162:	ea43 0306 	orr.w	r3, r3, r6
   1c166:	4770      	bx	lr
   1c168:	ea94 0f0c 	teq	r4, ip
   1c16c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c170:	bf18      	it	ne
   1c172:	ea95 0f0c 	teqne	r5, ip
   1c176:	d00c      	beq.n	1c192 <__aeabi_dmul+0x206>
   1c178:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c17c:	bf18      	it	ne
   1c17e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c182:	d1d1      	bne.n	1c128 <__aeabi_dmul+0x19c>
   1c184:	ea81 0103 	eor.w	r1, r1, r3
   1c188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c18c:	f04f 0000 	mov.w	r0, #0
   1c190:	bd70      	pop	{r4, r5, r6, pc}
   1c192:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c196:	bf06      	itte	eq
   1c198:	4610      	moveq	r0, r2
   1c19a:	4619      	moveq	r1, r3
   1c19c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c1a0:	d019      	beq.n	1c1d6 <__aeabi_dmul+0x24a>
   1c1a2:	ea94 0f0c 	teq	r4, ip
   1c1a6:	d102      	bne.n	1c1ae <__aeabi_dmul+0x222>
   1c1a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c1ac:	d113      	bne.n	1c1d6 <__aeabi_dmul+0x24a>
   1c1ae:	ea95 0f0c 	teq	r5, ip
   1c1b2:	d105      	bne.n	1c1c0 <__aeabi_dmul+0x234>
   1c1b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c1b8:	bf1c      	itt	ne
   1c1ba:	4610      	movne	r0, r2
   1c1bc:	4619      	movne	r1, r3
   1c1be:	d10a      	bne.n	1c1d6 <__aeabi_dmul+0x24a>
   1c1c0:	ea81 0103 	eor.w	r1, r1, r3
   1c1c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c1c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c1cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c1d0:	f04f 0000 	mov.w	r0, #0
   1c1d4:	bd70      	pop	{r4, r5, r6, pc}
   1c1d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c1da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1c1de:	bd70      	pop	{r4, r5, r6, pc}

0001c1e0 <__aeabi_ddiv>:
   1c1e0:	b570      	push	{r4, r5, r6, lr}
   1c1e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c1e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c1ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c1ee:	bf1d      	ittte	ne
   1c1f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c1f4:	ea94 0f0c 	teqne	r4, ip
   1c1f8:	ea95 0f0c 	teqne	r5, ip
   1c1fc:	f000 f8a7 	bleq	1c34e <__aeabi_ddiv+0x16e>
   1c200:	eba4 0405 	sub.w	r4, r4, r5
   1c204:	ea81 0e03 	eor.w	lr, r1, r3
   1c208:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c20c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c210:	f000 8088 	beq.w	1c324 <__aeabi_ddiv+0x144>
   1c214:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c218:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c21c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1c220:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c224:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1c228:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1c22c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1c230:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1c234:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1c238:	429d      	cmp	r5, r3
   1c23a:	bf08      	it	eq
   1c23c:	4296      	cmpeq	r6, r2
   1c23e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1c242:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1c246:	d202      	bcs.n	1c24e <__aeabi_ddiv+0x6e>
   1c248:	085b      	lsrs	r3, r3, #1
   1c24a:	ea4f 0232 	mov.w	r2, r2, rrx
   1c24e:	1ab6      	subs	r6, r6, r2
   1c250:	eb65 0503 	sbc.w	r5, r5, r3
   1c254:	085b      	lsrs	r3, r3, #1
   1c256:	ea4f 0232 	mov.w	r2, r2, rrx
   1c25a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1c25e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1c262:	ebb6 0e02 	subs.w	lr, r6, r2
   1c266:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c26a:	bf22      	ittt	cs
   1c26c:	1ab6      	subcs	r6, r6, r2
   1c26e:	4675      	movcs	r5, lr
   1c270:	ea40 000c 	orrcs.w	r0, r0, ip
   1c274:	085b      	lsrs	r3, r3, #1
   1c276:	ea4f 0232 	mov.w	r2, r2, rrx
   1c27a:	ebb6 0e02 	subs.w	lr, r6, r2
   1c27e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c282:	bf22      	ittt	cs
   1c284:	1ab6      	subcs	r6, r6, r2
   1c286:	4675      	movcs	r5, lr
   1c288:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1c28c:	085b      	lsrs	r3, r3, #1
   1c28e:	ea4f 0232 	mov.w	r2, r2, rrx
   1c292:	ebb6 0e02 	subs.w	lr, r6, r2
   1c296:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c29a:	bf22      	ittt	cs
   1c29c:	1ab6      	subcs	r6, r6, r2
   1c29e:	4675      	movcs	r5, lr
   1c2a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1c2a4:	085b      	lsrs	r3, r3, #1
   1c2a6:	ea4f 0232 	mov.w	r2, r2, rrx
   1c2aa:	ebb6 0e02 	subs.w	lr, r6, r2
   1c2ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c2b2:	bf22      	ittt	cs
   1c2b4:	1ab6      	subcs	r6, r6, r2
   1c2b6:	4675      	movcs	r5, lr
   1c2b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1c2bc:	ea55 0e06 	orrs.w	lr, r5, r6
   1c2c0:	d018      	beq.n	1c2f4 <__aeabi_ddiv+0x114>
   1c2c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1c2c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1c2ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1c2ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1c2d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1c2d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1c2da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1c2de:	d1c0      	bne.n	1c262 <__aeabi_ddiv+0x82>
   1c2e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c2e4:	d10b      	bne.n	1c2fe <__aeabi_ddiv+0x11e>
   1c2e6:	ea41 0100 	orr.w	r1, r1, r0
   1c2ea:	f04f 0000 	mov.w	r0, #0
   1c2ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1c2f2:	e7b6      	b.n	1c262 <__aeabi_ddiv+0x82>
   1c2f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c2f8:	bf04      	itt	eq
   1c2fa:	4301      	orreq	r1, r0
   1c2fc:	2000      	moveq	r0, #0
   1c2fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c302:	bf88      	it	hi
   1c304:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c308:	f63f aeaf 	bhi.w	1c06a <__aeabi_dmul+0xde>
   1c30c:	ebb5 0c03 	subs.w	ip, r5, r3
   1c310:	bf04      	itt	eq
   1c312:	ebb6 0c02 	subseq.w	ip, r6, r2
   1c316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c31a:	f150 0000 	adcs.w	r0, r0, #0
   1c31e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c322:	bd70      	pop	{r4, r5, r6, pc}
   1c324:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1c328:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1c32c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1c330:	bfc2      	ittt	gt
   1c332:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c33a:	bd70      	popgt	{r4, r5, r6, pc}
   1c33c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c340:	f04f 0e00 	mov.w	lr, #0
   1c344:	3c01      	subs	r4, #1
   1c346:	e690      	b.n	1c06a <__aeabi_dmul+0xde>
   1c348:	ea45 0e06 	orr.w	lr, r5, r6
   1c34c:	e68d      	b.n	1c06a <__aeabi_dmul+0xde>
   1c34e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c352:	ea94 0f0c 	teq	r4, ip
   1c356:	bf08      	it	eq
   1c358:	ea95 0f0c 	teqeq	r5, ip
   1c35c:	f43f af3b 	beq.w	1c1d6 <__aeabi_dmul+0x24a>
   1c360:	ea94 0f0c 	teq	r4, ip
   1c364:	d10a      	bne.n	1c37c <__aeabi_ddiv+0x19c>
   1c366:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c36a:	f47f af34 	bne.w	1c1d6 <__aeabi_dmul+0x24a>
   1c36e:	ea95 0f0c 	teq	r5, ip
   1c372:	f47f af25 	bne.w	1c1c0 <__aeabi_dmul+0x234>
   1c376:	4610      	mov	r0, r2
   1c378:	4619      	mov	r1, r3
   1c37a:	e72c      	b.n	1c1d6 <__aeabi_dmul+0x24a>
   1c37c:	ea95 0f0c 	teq	r5, ip
   1c380:	d106      	bne.n	1c390 <__aeabi_ddiv+0x1b0>
   1c382:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c386:	f43f aefd 	beq.w	1c184 <__aeabi_dmul+0x1f8>
   1c38a:	4610      	mov	r0, r2
   1c38c:	4619      	mov	r1, r3
   1c38e:	e722      	b.n	1c1d6 <__aeabi_dmul+0x24a>
   1c390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c394:	bf18      	it	ne
   1c396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c39a:	f47f aec5 	bne.w	1c128 <__aeabi_dmul+0x19c>
   1c39e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1c3a2:	f47f af0d 	bne.w	1c1c0 <__aeabi_dmul+0x234>
   1c3a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1c3aa:	f47f aeeb 	bne.w	1c184 <__aeabi_dmul+0x1f8>
   1c3ae:	e712      	b.n	1c1d6 <__aeabi_dmul+0x24a>

0001c3b0 <__gedf2>:
   1c3b0:	f04f 3cff 	mov.w	ip, #4294967295
   1c3b4:	e006      	b.n	1c3c4 <__cmpdf2+0x4>
   1c3b6:	bf00      	nop

0001c3b8 <__ledf2>:
   1c3b8:	f04f 0c01 	mov.w	ip, #1
   1c3bc:	e002      	b.n	1c3c4 <__cmpdf2+0x4>
   1c3be:	bf00      	nop

0001c3c0 <__cmpdf2>:
   1c3c0:	f04f 0c01 	mov.w	ip, #1
   1c3c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   1c3c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c3cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c3d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c3d4:	bf18      	it	ne
   1c3d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1c3da:	d01b      	beq.n	1c414 <__cmpdf2+0x54>
   1c3dc:	b001      	add	sp, #4
   1c3de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1c3e2:	bf0c      	ite	eq
   1c3e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1c3e8:	ea91 0f03 	teqne	r1, r3
   1c3ec:	bf02      	ittt	eq
   1c3ee:	ea90 0f02 	teqeq	r0, r2
   1c3f2:	2000      	moveq	r0, #0
   1c3f4:	4770      	bxeq	lr
   1c3f6:	f110 0f00 	cmn.w	r0, #0
   1c3fa:	ea91 0f03 	teq	r1, r3
   1c3fe:	bf58      	it	pl
   1c400:	4299      	cmppl	r1, r3
   1c402:	bf08      	it	eq
   1c404:	4290      	cmpeq	r0, r2
   1c406:	bf2c      	ite	cs
   1c408:	17d8      	asrcs	r0, r3, #31
   1c40a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1c40e:	f040 0001 	orr.w	r0, r0, #1
   1c412:	4770      	bx	lr
   1c414:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c41c:	d102      	bne.n	1c424 <__cmpdf2+0x64>
   1c41e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c422:	d107      	bne.n	1c434 <__cmpdf2+0x74>
   1c424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c42c:	d1d6      	bne.n	1c3dc <__cmpdf2+0x1c>
   1c42e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c432:	d0d3      	beq.n	1c3dc <__cmpdf2+0x1c>
   1c434:	f85d 0b04 	ldr.w	r0, [sp], #4
   1c438:	4770      	bx	lr
   1c43a:	bf00      	nop

0001c43c <__aeabi_cdrcmple>:
   1c43c:	4684      	mov	ip, r0
   1c43e:	4610      	mov	r0, r2
   1c440:	4662      	mov	r2, ip
   1c442:	468c      	mov	ip, r1
   1c444:	4619      	mov	r1, r3
   1c446:	4663      	mov	r3, ip
   1c448:	e000      	b.n	1c44c <__aeabi_cdcmpeq>
   1c44a:	bf00      	nop

0001c44c <__aeabi_cdcmpeq>:
   1c44c:	b501      	push	{r0, lr}
   1c44e:	f7ff ffb7 	bl	1c3c0 <__cmpdf2>
   1c452:	2800      	cmp	r0, #0
   1c454:	bf48      	it	mi
   1c456:	f110 0f00 	cmnmi.w	r0, #0
   1c45a:	bd01      	pop	{r0, pc}

0001c45c <__aeabi_dcmpeq>:
   1c45c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c460:	f7ff fff4 	bl	1c44c <__aeabi_cdcmpeq>
   1c464:	bf0c      	ite	eq
   1c466:	2001      	moveq	r0, #1
   1c468:	2000      	movne	r0, #0
   1c46a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c46e:	bf00      	nop

0001c470 <__aeabi_dcmplt>:
   1c470:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c474:	f7ff ffea 	bl	1c44c <__aeabi_cdcmpeq>
   1c478:	bf34      	ite	cc
   1c47a:	2001      	movcc	r0, #1
   1c47c:	2000      	movcs	r0, #0
   1c47e:	f85d fb08 	ldr.w	pc, [sp], #8
   1c482:	bf00      	nop

0001c484 <__aeabi_dcmple>:
   1c484:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c488:	f7ff ffe0 	bl	1c44c <__aeabi_cdcmpeq>
   1c48c:	bf94      	ite	ls
   1c48e:	2001      	movls	r0, #1
   1c490:	2000      	movhi	r0, #0
   1c492:	f85d fb08 	ldr.w	pc, [sp], #8
   1c496:	bf00      	nop

0001c498 <__aeabi_dcmpge>:
   1c498:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c49c:	f7ff ffce 	bl	1c43c <__aeabi_cdrcmple>
   1c4a0:	bf94      	ite	ls
   1c4a2:	2001      	movls	r0, #1
   1c4a4:	2000      	movhi	r0, #0
   1c4a6:	f85d fb08 	ldr.w	pc, [sp], #8
   1c4aa:	bf00      	nop

0001c4ac <__aeabi_dcmpgt>:
   1c4ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c4b0:	f7ff ffc4 	bl	1c43c <__aeabi_cdrcmple>
   1c4b4:	bf34      	ite	cc
   1c4b6:	2001      	movcc	r0, #1
   1c4b8:	2000      	movcs	r0, #0
   1c4ba:	f85d fb08 	ldr.w	pc, [sp], #8
   1c4be:	bf00      	nop

0001c4c0 <__aeabi_d2iz>:
   1c4c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c4c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c4c8:	d215      	bcs.n	1c4f6 <__aeabi_d2iz+0x36>
   1c4ca:	d511      	bpl.n	1c4f0 <__aeabi_d2iz+0x30>
   1c4cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c4d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c4d4:	d912      	bls.n	1c4fc <__aeabi_d2iz+0x3c>
   1c4d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c4da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c4de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c4e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4e6:	fa23 f002 	lsr.w	r0, r3, r2
   1c4ea:	bf18      	it	ne
   1c4ec:	4240      	negne	r0, r0
   1c4ee:	4770      	bx	lr
   1c4f0:	f04f 0000 	mov.w	r0, #0
   1c4f4:	4770      	bx	lr
   1c4f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c4fa:	d105      	bne.n	1c508 <__aeabi_d2iz+0x48>
   1c4fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c500:	bf08      	it	eq
   1c502:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c506:	4770      	bx	lr
   1c508:	f04f 0000 	mov.w	r0, #0
   1c50c:	4770      	bx	lr
   1c50e:	bf00      	nop

0001c510 <__aeabi_d2uiz>:
   1c510:	004a      	lsls	r2, r1, #1
   1c512:	d211      	bcs.n	1c538 <__aeabi_d2uiz+0x28>
   1c514:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c518:	d211      	bcs.n	1c53e <__aeabi_d2uiz+0x2e>
   1c51a:	d50d      	bpl.n	1c538 <__aeabi_d2uiz+0x28>
   1c51c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c520:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c524:	d40e      	bmi.n	1c544 <__aeabi_d2uiz+0x34>
   1c526:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c52a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c52e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c532:	fa23 f002 	lsr.w	r0, r3, r2
   1c536:	4770      	bx	lr
   1c538:	f04f 0000 	mov.w	r0, #0
   1c53c:	4770      	bx	lr
   1c53e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c542:	d102      	bne.n	1c54a <__aeabi_d2uiz+0x3a>
   1c544:	f04f 30ff 	mov.w	r0, #4294967295
   1c548:	4770      	bx	lr
   1c54a:	f04f 0000 	mov.w	r0, #0
   1c54e:	4770      	bx	lr

0001c550 <__aeabi_d2f>:
   1c550:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1c558:	bf24      	itt	cs
   1c55a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1c55e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1c562:	d90d      	bls.n	1c580 <__aeabi_d2f+0x30>
   1c564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1c56c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1c570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1c578:	bf08      	it	eq
   1c57a:	f020 0001 	biceq.w	r0, r0, #1
   1c57e:	4770      	bx	lr
   1c580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1c584:	d121      	bne.n	1c5ca <__aeabi_d2f+0x7a>
   1c586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1c58a:	bfbc      	itt	lt
   1c58c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1c590:	4770      	bxlt	lr
   1c592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c596:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1c59a:	f1c2 0218 	rsb	r2, r2, #24
   1c59e:	f1c2 0c20 	rsb	ip, r2, #32
   1c5a2:	fa10 f30c 	lsls.w	r3, r0, ip
   1c5a6:	fa20 f002 	lsr.w	r0, r0, r2
   1c5aa:	bf18      	it	ne
   1c5ac:	f040 0001 	orrne.w	r0, r0, #1
   1c5b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c5b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1c5b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c5bc:	ea40 000c 	orr.w	r0, r0, ip
   1c5c0:	fa23 f302 	lsr.w	r3, r3, r2
   1c5c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1c5c8:	e7cc      	b.n	1c564 <__aeabi_d2f+0x14>
   1c5ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1c5ce:	d107      	bne.n	1c5e0 <__aeabi_d2f+0x90>
   1c5d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1c5d4:	bf1e      	ittt	ne
   1c5d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1c5da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1c5de:	4770      	bxne	lr
   1c5e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1c5e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c5e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c5ec:	4770      	bx	lr
   1c5ee:	bf00      	nop

0001c5f0 <__aeabi_frsub>:
   1c5f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c5f4:	e002      	b.n	1c5fc <__addsf3>
   1c5f6:	bf00      	nop

0001c5f8 <__aeabi_fsub>:
   1c5f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c5fc <__addsf3>:
   1c5fc:	0042      	lsls	r2, r0, #1
   1c5fe:	bf1f      	itttt	ne
   1c600:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c604:	ea92 0f03 	teqne	r2, r3
   1c608:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c60c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c610:	d06a      	beq.n	1c6e8 <__addsf3+0xec>
   1c612:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c616:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c61a:	bfc1      	itttt	gt
   1c61c:	18d2      	addgt	r2, r2, r3
   1c61e:	4041      	eorgt	r1, r0
   1c620:	4048      	eorgt	r0, r1
   1c622:	4041      	eorgt	r1, r0
   1c624:	bfb8      	it	lt
   1c626:	425b      	neglt	r3, r3
   1c628:	2b19      	cmp	r3, #25
   1c62a:	bf88      	it	hi
   1c62c:	4770      	bxhi	lr
   1c62e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c636:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c63a:	bf18      	it	ne
   1c63c:	4240      	negne	r0, r0
   1c63e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c642:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c646:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c64a:	bf18      	it	ne
   1c64c:	4249      	negne	r1, r1
   1c64e:	ea92 0f03 	teq	r2, r3
   1c652:	d03f      	beq.n	1c6d4 <__addsf3+0xd8>
   1c654:	f1a2 0201 	sub.w	r2, r2, #1
   1c658:	fa41 fc03 	asr.w	ip, r1, r3
   1c65c:	eb10 000c 	adds.w	r0, r0, ip
   1c660:	f1c3 0320 	rsb	r3, r3, #32
   1c664:	fa01 f103 	lsl.w	r1, r1, r3
   1c668:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c66c:	d502      	bpl.n	1c674 <__addsf3+0x78>
   1c66e:	4249      	negs	r1, r1
   1c670:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c674:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c678:	d313      	bcc.n	1c6a2 <__addsf3+0xa6>
   1c67a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c67e:	d306      	bcc.n	1c68e <__addsf3+0x92>
   1c680:	0840      	lsrs	r0, r0, #1
   1c682:	ea4f 0131 	mov.w	r1, r1, rrx
   1c686:	f102 0201 	add.w	r2, r2, #1
   1c68a:	2afe      	cmp	r2, #254	; 0xfe
   1c68c:	d251      	bcs.n	1c732 <__addsf3+0x136>
   1c68e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c692:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c696:	bf08      	it	eq
   1c698:	f020 0001 	biceq.w	r0, r0, #1
   1c69c:	ea40 0003 	orr.w	r0, r0, r3
   1c6a0:	4770      	bx	lr
   1c6a2:	0049      	lsls	r1, r1, #1
   1c6a4:	eb40 0000 	adc.w	r0, r0, r0
   1c6a8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c6ac:	f1a2 0201 	sub.w	r2, r2, #1
   1c6b0:	d1ed      	bne.n	1c68e <__addsf3+0x92>
   1c6b2:	fab0 fc80 	clz	ip, r0
   1c6b6:	f1ac 0c08 	sub.w	ip, ip, #8
   1c6ba:	ebb2 020c 	subs.w	r2, r2, ip
   1c6be:	fa00 f00c 	lsl.w	r0, r0, ip
   1c6c2:	bfaa      	itet	ge
   1c6c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c6c8:	4252      	neglt	r2, r2
   1c6ca:	4318      	orrge	r0, r3
   1c6cc:	bfbc      	itt	lt
   1c6ce:	40d0      	lsrlt	r0, r2
   1c6d0:	4318      	orrlt	r0, r3
   1c6d2:	4770      	bx	lr
   1c6d4:	f092 0f00 	teq	r2, #0
   1c6d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c6dc:	bf06      	itte	eq
   1c6de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c6e2:	3201      	addeq	r2, #1
   1c6e4:	3b01      	subne	r3, #1
   1c6e6:	e7b5      	b.n	1c654 <__addsf3+0x58>
   1c6e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c6ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c6f0:	bf18      	it	ne
   1c6f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c6f6:	d021      	beq.n	1c73c <__addsf3+0x140>
   1c6f8:	ea92 0f03 	teq	r2, r3
   1c6fc:	d004      	beq.n	1c708 <__addsf3+0x10c>
   1c6fe:	f092 0f00 	teq	r2, #0
   1c702:	bf08      	it	eq
   1c704:	4608      	moveq	r0, r1
   1c706:	4770      	bx	lr
   1c708:	ea90 0f01 	teq	r0, r1
   1c70c:	bf1c      	itt	ne
   1c70e:	2000      	movne	r0, #0
   1c710:	4770      	bxne	lr
   1c712:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c716:	d104      	bne.n	1c722 <__addsf3+0x126>
   1c718:	0040      	lsls	r0, r0, #1
   1c71a:	bf28      	it	cs
   1c71c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c720:	4770      	bx	lr
   1c722:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c726:	bf3c      	itt	cc
   1c728:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c72c:	4770      	bxcc	lr
   1c72e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c732:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c736:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c73a:	4770      	bx	lr
   1c73c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c740:	bf16      	itet	ne
   1c742:	4608      	movne	r0, r1
   1c744:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c748:	4601      	movne	r1, r0
   1c74a:	0242      	lsls	r2, r0, #9
   1c74c:	bf06      	itte	eq
   1c74e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c752:	ea90 0f01 	teqeq	r0, r1
   1c756:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c75a:	4770      	bx	lr

0001c75c <__aeabi_ui2f>:
   1c75c:	f04f 0300 	mov.w	r3, #0
   1c760:	e004      	b.n	1c76c <__aeabi_i2f+0x8>
   1c762:	bf00      	nop

0001c764 <__aeabi_i2f>:
   1c764:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c768:	bf48      	it	mi
   1c76a:	4240      	negmi	r0, r0
   1c76c:	ea5f 0c00 	movs.w	ip, r0
   1c770:	bf08      	it	eq
   1c772:	4770      	bxeq	lr
   1c774:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c778:	4601      	mov	r1, r0
   1c77a:	f04f 0000 	mov.w	r0, #0
   1c77e:	e01c      	b.n	1c7ba <__aeabi_l2f+0x2a>

0001c780 <__aeabi_ul2f>:
   1c780:	ea50 0201 	orrs.w	r2, r0, r1
   1c784:	bf08      	it	eq
   1c786:	4770      	bxeq	lr
   1c788:	f04f 0300 	mov.w	r3, #0
   1c78c:	e00a      	b.n	1c7a4 <__aeabi_l2f+0x14>
   1c78e:	bf00      	nop

0001c790 <__aeabi_l2f>:
   1c790:	ea50 0201 	orrs.w	r2, r0, r1
   1c794:	bf08      	it	eq
   1c796:	4770      	bxeq	lr
   1c798:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c79c:	d502      	bpl.n	1c7a4 <__aeabi_l2f+0x14>
   1c79e:	4240      	negs	r0, r0
   1c7a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c7a4:	ea5f 0c01 	movs.w	ip, r1
   1c7a8:	bf02      	ittt	eq
   1c7aa:	4684      	moveq	ip, r0
   1c7ac:	4601      	moveq	r1, r0
   1c7ae:	2000      	moveq	r0, #0
   1c7b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c7b4:	bf08      	it	eq
   1c7b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c7ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c7be:	fabc f28c 	clz	r2, ip
   1c7c2:	3a08      	subs	r2, #8
   1c7c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c7c8:	db10      	blt.n	1c7ec <__aeabi_l2f+0x5c>
   1c7ca:	fa01 fc02 	lsl.w	ip, r1, r2
   1c7ce:	4463      	add	r3, ip
   1c7d0:	fa00 fc02 	lsl.w	ip, r0, r2
   1c7d4:	f1c2 0220 	rsb	r2, r2, #32
   1c7d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c7dc:	fa20 f202 	lsr.w	r2, r0, r2
   1c7e0:	eb43 0002 	adc.w	r0, r3, r2
   1c7e4:	bf08      	it	eq
   1c7e6:	f020 0001 	biceq.w	r0, r0, #1
   1c7ea:	4770      	bx	lr
   1c7ec:	f102 0220 	add.w	r2, r2, #32
   1c7f0:	fa01 fc02 	lsl.w	ip, r1, r2
   1c7f4:	f1c2 0220 	rsb	r2, r2, #32
   1c7f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c7fc:	fa21 f202 	lsr.w	r2, r1, r2
   1c800:	eb43 0002 	adc.w	r0, r3, r2
   1c804:	bf08      	it	eq
   1c806:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c80a:	4770      	bx	lr

0001c80c <__aeabi_ldivmod>:
   1c80c:	b97b      	cbnz	r3, 1c82e <__aeabi_ldivmod+0x22>
   1c80e:	b972      	cbnz	r2, 1c82e <__aeabi_ldivmod+0x22>
   1c810:	2900      	cmp	r1, #0
   1c812:	bfbe      	ittt	lt
   1c814:	2000      	movlt	r0, #0
   1c816:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c81a:	e006      	blt.n	1c82a <__aeabi_ldivmod+0x1e>
   1c81c:	bf08      	it	eq
   1c81e:	2800      	cmpeq	r0, #0
   1c820:	bf1c      	itt	ne
   1c822:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c826:	f04f 30ff 	movne.w	r0, #4294967295
   1c82a:	f001 b979 	b.w	1db20 <__aeabi_idiv0>
   1c82e:	f1ad 0c08 	sub.w	ip, sp, #8
   1c832:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c836:	2900      	cmp	r1, #0
   1c838:	db09      	blt.n	1c84e <__aeabi_ldivmod+0x42>
   1c83a:	2b00      	cmp	r3, #0
   1c83c:	db1a      	blt.n	1c874 <__aeabi_ldivmod+0x68>
   1c83e:	f000 f885 	bl	1c94c <__udivmoddi4>
   1c842:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c84a:	b004      	add	sp, #16
   1c84c:	4770      	bx	lr
   1c84e:	4240      	negs	r0, r0
   1c850:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c854:	2b00      	cmp	r3, #0
   1c856:	db1b      	blt.n	1c890 <__aeabi_ldivmod+0x84>
   1c858:	f000 f878 	bl	1c94c <__udivmoddi4>
   1c85c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c864:	b004      	add	sp, #16
   1c866:	4240      	negs	r0, r0
   1c868:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c86c:	4252      	negs	r2, r2
   1c86e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c872:	4770      	bx	lr
   1c874:	4252      	negs	r2, r2
   1c876:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c87a:	f000 f867 	bl	1c94c <__udivmoddi4>
   1c87e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c886:	b004      	add	sp, #16
   1c888:	4240      	negs	r0, r0
   1c88a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c88e:	4770      	bx	lr
   1c890:	4252      	negs	r2, r2
   1c892:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c896:	f000 f859 	bl	1c94c <__udivmoddi4>
   1c89a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c89e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c8a2:	b004      	add	sp, #16
   1c8a4:	4252      	negs	r2, r2
   1c8a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c8aa:	4770      	bx	lr

0001c8ac <__aeabi_uldivmod>:
   1c8ac:	b953      	cbnz	r3, 1c8c4 <__aeabi_uldivmod+0x18>
   1c8ae:	b94a      	cbnz	r2, 1c8c4 <__aeabi_uldivmod+0x18>
   1c8b0:	2900      	cmp	r1, #0
   1c8b2:	bf08      	it	eq
   1c8b4:	2800      	cmpeq	r0, #0
   1c8b6:	bf1c      	itt	ne
   1c8b8:	f04f 31ff 	movne.w	r1, #4294967295
   1c8bc:	f04f 30ff 	movne.w	r0, #4294967295
   1c8c0:	f001 b92e 	b.w	1db20 <__aeabi_idiv0>
   1c8c4:	f1ad 0c08 	sub.w	ip, sp, #8
   1c8c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c8cc:	f000 f83e 	bl	1c94c <__udivmoddi4>
   1c8d0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c8d8:	b004      	add	sp, #16
   1c8da:	4770      	bx	lr

0001c8dc <__aeabi_f2lz>:
   1c8dc:	ee07 0a90 	vmov	s15, r0
   1c8e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c8e8:	d401      	bmi.n	1c8ee <__aeabi_f2lz+0x12>
   1c8ea:	f000 b809 	b.w	1c900 <__aeabi_f2ulz>
   1c8ee:	b508      	push	{r3, lr}
   1c8f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c8f4:	f000 f804 	bl	1c900 <__aeabi_f2ulz>
   1c8f8:	4240      	negs	r0, r0
   1c8fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c8fe:	bd08      	pop	{r3, pc}

0001c900 <__aeabi_f2ulz>:
   1c900:	b5d0      	push	{r4, r6, r7, lr}
   1c902:	f7ff faef 	bl	1bee4 <__aeabi_f2d>
   1c906:	2200      	movs	r2, #0
   1c908:	4b0e      	ldr	r3, [pc, #56]	; (1c944 <__aeabi_f2ulz+0x44>)
   1c90a:	4606      	mov	r6, r0
   1c90c:	460f      	mov	r7, r1
   1c90e:	f7ff fb3d 	bl	1bf8c <__aeabi_dmul>
   1c912:	f7ff fdfd 	bl	1c510 <__aeabi_d2uiz>
   1c916:	4604      	mov	r4, r0
   1c918:	f7ff fac2 	bl	1bea0 <__aeabi_ui2d>
   1c91c:	2200      	movs	r2, #0
   1c91e:	4b0a      	ldr	r3, [pc, #40]	; (1c948 <__aeabi_f2ulz+0x48>)
   1c920:	f7ff fb34 	bl	1bf8c <__aeabi_dmul>
   1c924:	4602      	mov	r2, r0
   1c926:	460b      	mov	r3, r1
   1c928:	4630      	mov	r0, r6
   1c92a:	4639      	mov	r1, r7
   1c92c:	f7ff f97a 	bl	1bc24 <__aeabi_dsub>
   1c930:	f7ff fdee 	bl	1c510 <__aeabi_d2uiz>
   1c934:	4623      	mov	r3, r4
   1c936:	2200      	movs	r2, #0
   1c938:	ea42 0200 	orr.w	r2, r2, r0
   1c93c:	4610      	mov	r0, r2
   1c93e:	4619      	mov	r1, r3
   1c940:	bdd0      	pop	{r4, r6, r7, pc}
   1c942:	bf00      	nop
   1c944:	3df00000 	.word	0x3df00000
   1c948:	41f00000 	.word	0x41f00000

0001c94c <__udivmoddi4>:
   1c94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c950:	468c      	mov	ip, r1
   1c952:	460d      	mov	r5, r1
   1c954:	4604      	mov	r4, r0
   1c956:	9e08      	ldr	r6, [sp, #32]
   1c958:	2b00      	cmp	r3, #0
   1c95a:	d151      	bne.n	1ca00 <__udivmoddi4+0xb4>
   1c95c:	428a      	cmp	r2, r1
   1c95e:	4617      	mov	r7, r2
   1c960:	d96d      	bls.n	1ca3e <__udivmoddi4+0xf2>
   1c962:	fab2 fe82 	clz	lr, r2
   1c966:	f1be 0f00 	cmp.w	lr, #0
   1c96a:	d00b      	beq.n	1c984 <__udivmoddi4+0x38>
   1c96c:	f1ce 0c20 	rsb	ip, lr, #32
   1c970:	fa01 f50e 	lsl.w	r5, r1, lr
   1c974:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c978:	fa02 f70e 	lsl.w	r7, r2, lr
   1c97c:	ea4c 0c05 	orr.w	ip, ip, r5
   1c980:	fa00 f40e 	lsl.w	r4, r0, lr
   1c984:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c988:	0c25      	lsrs	r5, r4, #16
   1c98a:	fbbc f8fa 	udiv	r8, ip, sl
   1c98e:	fa1f f987 	uxth.w	r9, r7
   1c992:	fb0a cc18 	mls	ip, sl, r8, ip
   1c996:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c99a:	fb08 f309 	mul.w	r3, r8, r9
   1c99e:	42ab      	cmp	r3, r5
   1c9a0:	d90a      	bls.n	1c9b8 <__udivmoddi4+0x6c>
   1c9a2:	19ed      	adds	r5, r5, r7
   1c9a4:	f108 32ff 	add.w	r2, r8, #4294967295
   1c9a8:	f080 8123 	bcs.w	1cbf2 <__udivmoddi4+0x2a6>
   1c9ac:	42ab      	cmp	r3, r5
   1c9ae:	f240 8120 	bls.w	1cbf2 <__udivmoddi4+0x2a6>
   1c9b2:	f1a8 0802 	sub.w	r8, r8, #2
   1c9b6:	443d      	add	r5, r7
   1c9b8:	1aed      	subs	r5, r5, r3
   1c9ba:	b2a4      	uxth	r4, r4
   1c9bc:	fbb5 f0fa 	udiv	r0, r5, sl
   1c9c0:	fb0a 5510 	mls	r5, sl, r0, r5
   1c9c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c9c8:	fb00 f909 	mul.w	r9, r0, r9
   1c9cc:	45a1      	cmp	r9, r4
   1c9ce:	d909      	bls.n	1c9e4 <__udivmoddi4+0x98>
   1c9d0:	19e4      	adds	r4, r4, r7
   1c9d2:	f100 33ff 	add.w	r3, r0, #4294967295
   1c9d6:	f080 810a 	bcs.w	1cbee <__udivmoddi4+0x2a2>
   1c9da:	45a1      	cmp	r9, r4
   1c9dc:	f240 8107 	bls.w	1cbee <__udivmoddi4+0x2a2>
   1c9e0:	3802      	subs	r0, #2
   1c9e2:	443c      	add	r4, r7
   1c9e4:	eba4 0409 	sub.w	r4, r4, r9
   1c9e8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c9ec:	2100      	movs	r1, #0
   1c9ee:	2e00      	cmp	r6, #0
   1c9f0:	d061      	beq.n	1cab6 <__udivmoddi4+0x16a>
   1c9f2:	fa24 f40e 	lsr.w	r4, r4, lr
   1c9f6:	2300      	movs	r3, #0
   1c9f8:	6034      	str	r4, [r6, #0]
   1c9fa:	6073      	str	r3, [r6, #4]
   1c9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ca00:	428b      	cmp	r3, r1
   1ca02:	d907      	bls.n	1ca14 <__udivmoddi4+0xc8>
   1ca04:	2e00      	cmp	r6, #0
   1ca06:	d054      	beq.n	1cab2 <__udivmoddi4+0x166>
   1ca08:	2100      	movs	r1, #0
   1ca0a:	e886 0021 	stmia.w	r6, {r0, r5}
   1ca0e:	4608      	mov	r0, r1
   1ca10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ca14:	fab3 f183 	clz	r1, r3
   1ca18:	2900      	cmp	r1, #0
   1ca1a:	f040 808e 	bne.w	1cb3a <__udivmoddi4+0x1ee>
   1ca1e:	42ab      	cmp	r3, r5
   1ca20:	d302      	bcc.n	1ca28 <__udivmoddi4+0xdc>
   1ca22:	4282      	cmp	r2, r0
   1ca24:	f200 80fa 	bhi.w	1cc1c <__udivmoddi4+0x2d0>
   1ca28:	1a84      	subs	r4, r0, r2
   1ca2a:	eb65 0503 	sbc.w	r5, r5, r3
   1ca2e:	2001      	movs	r0, #1
   1ca30:	46ac      	mov	ip, r5
   1ca32:	2e00      	cmp	r6, #0
   1ca34:	d03f      	beq.n	1cab6 <__udivmoddi4+0x16a>
   1ca36:	e886 1010 	stmia.w	r6, {r4, ip}
   1ca3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ca3e:	b912      	cbnz	r2, 1ca46 <__udivmoddi4+0xfa>
   1ca40:	2701      	movs	r7, #1
   1ca42:	fbb7 f7f2 	udiv	r7, r7, r2
   1ca46:	fab7 fe87 	clz	lr, r7
   1ca4a:	f1be 0f00 	cmp.w	lr, #0
   1ca4e:	d134      	bne.n	1caba <__udivmoddi4+0x16e>
   1ca50:	1beb      	subs	r3, r5, r7
   1ca52:	0c3a      	lsrs	r2, r7, #16
   1ca54:	fa1f fc87 	uxth.w	ip, r7
   1ca58:	2101      	movs	r1, #1
   1ca5a:	fbb3 f8f2 	udiv	r8, r3, r2
   1ca5e:	0c25      	lsrs	r5, r4, #16
   1ca60:	fb02 3318 	mls	r3, r2, r8, r3
   1ca64:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1ca68:	fb0c f308 	mul.w	r3, ip, r8
   1ca6c:	42ab      	cmp	r3, r5
   1ca6e:	d907      	bls.n	1ca80 <__udivmoddi4+0x134>
   1ca70:	19ed      	adds	r5, r5, r7
   1ca72:	f108 30ff 	add.w	r0, r8, #4294967295
   1ca76:	d202      	bcs.n	1ca7e <__udivmoddi4+0x132>
   1ca78:	42ab      	cmp	r3, r5
   1ca7a:	f200 80d1 	bhi.w	1cc20 <__udivmoddi4+0x2d4>
   1ca7e:	4680      	mov	r8, r0
   1ca80:	1aed      	subs	r5, r5, r3
   1ca82:	b2a3      	uxth	r3, r4
   1ca84:	fbb5 f0f2 	udiv	r0, r5, r2
   1ca88:	fb02 5510 	mls	r5, r2, r0, r5
   1ca8c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1ca90:	fb0c fc00 	mul.w	ip, ip, r0
   1ca94:	45a4      	cmp	ip, r4
   1ca96:	d907      	bls.n	1caa8 <__udivmoddi4+0x15c>
   1ca98:	19e4      	adds	r4, r4, r7
   1ca9a:	f100 33ff 	add.w	r3, r0, #4294967295
   1ca9e:	d202      	bcs.n	1caa6 <__udivmoddi4+0x15a>
   1caa0:	45a4      	cmp	ip, r4
   1caa2:	f200 80b8 	bhi.w	1cc16 <__udivmoddi4+0x2ca>
   1caa6:	4618      	mov	r0, r3
   1caa8:	eba4 040c 	sub.w	r4, r4, ip
   1caac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1cab0:	e79d      	b.n	1c9ee <__udivmoddi4+0xa2>
   1cab2:	4631      	mov	r1, r6
   1cab4:	4630      	mov	r0, r6
   1cab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1caba:	f1ce 0420 	rsb	r4, lr, #32
   1cabe:	fa05 f30e 	lsl.w	r3, r5, lr
   1cac2:	fa07 f70e 	lsl.w	r7, r7, lr
   1cac6:	fa20 f804 	lsr.w	r8, r0, r4
   1caca:	0c3a      	lsrs	r2, r7, #16
   1cacc:	fa25 f404 	lsr.w	r4, r5, r4
   1cad0:	ea48 0803 	orr.w	r8, r8, r3
   1cad4:	fbb4 f1f2 	udiv	r1, r4, r2
   1cad8:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1cadc:	fb02 4411 	mls	r4, r2, r1, r4
   1cae0:	fa1f fc87 	uxth.w	ip, r7
   1cae4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1cae8:	fb01 f30c 	mul.w	r3, r1, ip
   1caec:	42ab      	cmp	r3, r5
   1caee:	fa00 f40e 	lsl.w	r4, r0, lr
   1caf2:	d909      	bls.n	1cb08 <__udivmoddi4+0x1bc>
   1caf4:	19ed      	adds	r5, r5, r7
   1caf6:	f101 30ff 	add.w	r0, r1, #4294967295
   1cafa:	f080 808a 	bcs.w	1cc12 <__udivmoddi4+0x2c6>
   1cafe:	42ab      	cmp	r3, r5
   1cb00:	f240 8087 	bls.w	1cc12 <__udivmoddi4+0x2c6>
   1cb04:	3902      	subs	r1, #2
   1cb06:	443d      	add	r5, r7
   1cb08:	1aeb      	subs	r3, r5, r3
   1cb0a:	fa1f f588 	uxth.w	r5, r8
   1cb0e:	fbb3 f0f2 	udiv	r0, r3, r2
   1cb12:	fb02 3310 	mls	r3, r2, r0, r3
   1cb16:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1cb1a:	fb00 f30c 	mul.w	r3, r0, ip
   1cb1e:	42ab      	cmp	r3, r5
   1cb20:	d907      	bls.n	1cb32 <__udivmoddi4+0x1e6>
   1cb22:	19ed      	adds	r5, r5, r7
   1cb24:	f100 38ff 	add.w	r8, r0, #4294967295
   1cb28:	d26f      	bcs.n	1cc0a <__udivmoddi4+0x2be>
   1cb2a:	42ab      	cmp	r3, r5
   1cb2c:	d96d      	bls.n	1cc0a <__udivmoddi4+0x2be>
   1cb2e:	3802      	subs	r0, #2
   1cb30:	443d      	add	r5, r7
   1cb32:	1aeb      	subs	r3, r5, r3
   1cb34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1cb38:	e78f      	b.n	1ca5a <__udivmoddi4+0x10e>
   1cb3a:	f1c1 0720 	rsb	r7, r1, #32
   1cb3e:	fa22 f807 	lsr.w	r8, r2, r7
   1cb42:	408b      	lsls	r3, r1
   1cb44:	fa05 f401 	lsl.w	r4, r5, r1
   1cb48:	ea48 0303 	orr.w	r3, r8, r3
   1cb4c:	fa20 fe07 	lsr.w	lr, r0, r7
   1cb50:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1cb54:	40fd      	lsrs	r5, r7
   1cb56:	ea4e 0e04 	orr.w	lr, lr, r4
   1cb5a:	fbb5 f9fc 	udiv	r9, r5, ip
   1cb5e:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1cb62:	fb0c 5519 	mls	r5, ip, r9, r5
   1cb66:	fa1f f883 	uxth.w	r8, r3
   1cb6a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1cb6e:	fb09 f408 	mul.w	r4, r9, r8
   1cb72:	42ac      	cmp	r4, r5
   1cb74:	fa02 f201 	lsl.w	r2, r2, r1
   1cb78:	fa00 fa01 	lsl.w	sl, r0, r1
   1cb7c:	d908      	bls.n	1cb90 <__udivmoddi4+0x244>
   1cb7e:	18ed      	adds	r5, r5, r3
   1cb80:	f109 30ff 	add.w	r0, r9, #4294967295
   1cb84:	d243      	bcs.n	1cc0e <__udivmoddi4+0x2c2>
   1cb86:	42ac      	cmp	r4, r5
   1cb88:	d941      	bls.n	1cc0e <__udivmoddi4+0x2c2>
   1cb8a:	f1a9 0902 	sub.w	r9, r9, #2
   1cb8e:	441d      	add	r5, r3
   1cb90:	1b2d      	subs	r5, r5, r4
   1cb92:	fa1f fe8e 	uxth.w	lr, lr
   1cb96:	fbb5 f0fc 	udiv	r0, r5, ip
   1cb9a:	fb0c 5510 	mls	r5, ip, r0, r5
   1cb9e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1cba2:	fb00 f808 	mul.w	r8, r0, r8
   1cba6:	45a0      	cmp	r8, r4
   1cba8:	d907      	bls.n	1cbba <__udivmoddi4+0x26e>
   1cbaa:	18e4      	adds	r4, r4, r3
   1cbac:	f100 35ff 	add.w	r5, r0, #4294967295
   1cbb0:	d229      	bcs.n	1cc06 <__udivmoddi4+0x2ba>
   1cbb2:	45a0      	cmp	r8, r4
   1cbb4:	d927      	bls.n	1cc06 <__udivmoddi4+0x2ba>
   1cbb6:	3802      	subs	r0, #2
   1cbb8:	441c      	add	r4, r3
   1cbba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1cbbe:	eba4 0408 	sub.w	r4, r4, r8
   1cbc2:	fba0 8902 	umull	r8, r9, r0, r2
   1cbc6:	454c      	cmp	r4, r9
   1cbc8:	46c6      	mov	lr, r8
   1cbca:	464d      	mov	r5, r9
   1cbcc:	d315      	bcc.n	1cbfa <__udivmoddi4+0x2ae>
   1cbce:	d012      	beq.n	1cbf6 <__udivmoddi4+0x2aa>
   1cbd0:	b156      	cbz	r6, 1cbe8 <__udivmoddi4+0x29c>
   1cbd2:	ebba 030e 	subs.w	r3, sl, lr
   1cbd6:	eb64 0405 	sbc.w	r4, r4, r5
   1cbda:	fa04 f707 	lsl.w	r7, r4, r7
   1cbde:	40cb      	lsrs	r3, r1
   1cbe0:	431f      	orrs	r7, r3
   1cbe2:	40cc      	lsrs	r4, r1
   1cbe4:	6037      	str	r7, [r6, #0]
   1cbe6:	6074      	str	r4, [r6, #4]
   1cbe8:	2100      	movs	r1, #0
   1cbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cbee:	4618      	mov	r0, r3
   1cbf0:	e6f8      	b.n	1c9e4 <__udivmoddi4+0x98>
   1cbf2:	4690      	mov	r8, r2
   1cbf4:	e6e0      	b.n	1c9b8 <__udivmoddi4+0x6c>
   1cbf6:	45c2      	cmp	sl, r8
   1cbf8:	d2ea      	bcs.n	1cbd0 <__udivmoddi4+0x284>
   1cbfa:	ebb8 0e02 	subs.w	lr, r8, r2
   1cbfe:	eb69 0503 	sbc.w	r5, r9, r3
   1cc02:	3801      	subs	r0, #1
   1cc04:	e7e4      	b.n	1cbd0 <__udivmoddi4+0x284>
   1cc06:	4628      	mov	r0, r5
   1cc08:	e7d7      	b.n	1cbba <__udivmoddi4+0x26e>
   1cc0a:	4640      	mov	r0, r8
   1cc0c:	e791      	b.n	1cb32 <__udivmoddi4+0x1e6>
   1cc0e:	4681      	mov	r9, r0
   1cc10:	e7be      	b.n	1cb90 <__udivmoddi4+0x244>
   1cc12:	4601      	mov	r1, r0
   1cc14:	e778      	b.n	1cb08 <__udivmoddi4+0x1bc>
   1cc16:	3802      	subs	r0, #2
   1cc18:	443c      	add	r4, r7
   1cc1a:	e745      	b.n	1caa8 <__udivmoddi4+0x15c>
   1cc1c:	4608      	mov	r0, r1
   1cc1e:	e708      	b.n	1ca32 <__udivmoddi4+0xe6>
   1cc20:	f1a8 0802 	sub.w	r8, r8, #2
   1cc24:	443d      	add	r5, r7
   1cc26:	e72b      	b.n	1ca80 <__udivmoddi4+0x134>

0001cc28 <selfrel_offset31>:
   1cc28:	6803      	ldr	r3, [r0, #0]
   1cc2a:	005a      	lsls	r2, r3, #1
   1cc2c:	bf4c      	ite	mi
   1cc2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1cc32:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1cc36:	4418      	add	r0, r3
   1cc38:	4770      	bx	lr
   1cc3a:	bf00      	nop

0001cc3c <search_EIT_table>:
   1cc3c:	b361      	cbz	r1, 1cc98 <search_EIT_table+0x5c>
   1cc3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc42:	f101 3aff 	add.w	sl, r1, #4294967295
   1cc46:	4690      	mov	r8, r2
   1cc48:	4606      	mov	r6, r0
   1cc4a:	46d1      	mov	r9, sl
   1cc4c:	2700      	movs	r7, #0
   1cc4e:	eb07 0409 	add.w	r4, r7, r9
   1cc52:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1cc56:	1064      	asrs	r4, r4, #1
   1cc58:	00e5      	lsls	r5, r4, #3
   1cc5a:	1971      	adds	r1, r6, r5
   1cc5c:	4608      	mov	r0, r1
   1cc5e:	f7ff ffe3 	bl	1cc28 <selfrel_offset31>
   1cc62:	45a2      	cmp	sl, r4
   1cc64:	4683      	mov	fp, r0
   1cc66:	f105 0008 	add.w	r0, r5, #8
   1cc6a:	4430      	add	r0, r6
   1cc6c:	d009      	beq.n	1cc82 <search_EIT_table+0x46>
   1cc6e:	f7ff ffdb 	bl	1cc28 <selfrel_offset31>
   1cc72:	45c3      	cmp	fp, r8
   1cc74:	f100 30ff 	add.w	r0, r0, #4294967295
   1cc78:	d805      	bhi.n	1cc86 <search_EIT_table+0x4a>
   1cc7a:	4540      	cmp	r0, r8
   1cc7c:	d209      	bcs.n	1cc92 <search_EIT_table+0x56>
   1cc7e:	1c67      	adds	r7, r4, #1
   1cc80:	e7e5      	b.n	1cc4e <search_EIT_table+0x12>
   1cc82:	45c3      	cmp	fp, r8
   1cc84:	d905      	bls.n	1cc92 <search_EIT_table+0x56>
   1cc86:	42a7      	cmp	r7, r4
   1cc88:	d002      	beq.n	1cc90 <search_EIT_table+0x54>
   1cc8a:	f104 39ff 	add.w	r9, r4, #4294967295
   1cc8e:	e7de      	b.n	1cc4e <search_EIT_table+0x12>
   1cc90:	2100      	movs	r1, #0
   1cc92:	4608      	mov	r0, r1
   1cc94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc98:	4608      	mov	r0, r1
   1cc9a:	4770      	bx	lr

0001cc9c <__gnu_unwind_get_pr_addr>:
   1cc9c:	2801      	cmp	r0, #1
   1cc9e:	d007      	beq.n	1ccb0 <__gnu_unwind_get_pr_addr+0x14>
   1cca0:	2802      	cmp	r0, #2
   1cca2:	d007      	beq.n	1ccb4 <__gnu_unwind_get_pr_addr+0x18>
   1cca4:	4b04      	ldr	r3, [pc, #16]	; (1ccb8 <__gnu_unwind_get_pr_addr+0x1c>)
   1cca6:	2800      	cmp	r0, #0
   1cca8:	bf0c      	ite	eq
   1ccaa:	4618      	moveq	r0, r3
   1ccac:	2000      	movne	r0, #0
   1ccae:	4770      	bx	lr
   1ccb0:	4802      	ldr	r0, [pc, #8]	; (1ccbc <__gnu_unwind_get_pr_addr+0x20>)
   1ccb2:	4770      	bx	lr
   1ccb4:	4802      	ldr	r0, [pc, #8]	; (1ccc0 <__gnu_unwind_get_pr_addr+0x24>)
   1ccb6:	4770      	bx	lr
   1ccb8:	0001d3a1 	.word	0x0001d3a1
   1ccbc:	0001d3a5 	.word	0x0001d3a5
   1ccc0:	0001d3a9 	.word	0x0001d3a9

0001ccc4 <get_eit_entry>:
   1ccc4:	b530      	push	{r4, r5, lr}
   1ccc6:	4b24      	ldr	r3, [pc, #144]	; (1cd58 <get_eit_entry+0x94>)
   1ccc8:	b083      	sub	sp, #12
   1ccca:	4604      	mov	r4, r0
   1cccc:	1e8d      	subs	r5, r1, #2
   1ccce:	b37b      	cbz	r3, 1cd30 <get_eit_entry+0x6c>
   1ccd0:	a901      	add	r1, sp, #4
   1ccd2:	4628      	mov	r0, r5
   1ccd4:	f3af 8000 	nop.w
   1ccd8:	b320      	cbz	r0, 1cd24 <get_eit_entry+0x60>
   1ccda:	9901      	ldr	r1, [sp, #4]
   1ccdc:	462a      	mov	r2, r5
   1ccde:	f7ff ffad 	bl	1cc3c <search_EIT_table>
   1cce2:	4601      	mov	r1, r0
   1cce4:	b1f0      	cbz	r0, 1cd24 <get_eit_entry+0x60>
   1cce6:	f7ff ff9f 	bl	1cc28 <selfrel_offset31>
   1ccea:	684b      	ldr	r3, [r1, #4]
   1ccec:	64a0      	str	r0, [r4, #72]	; 0x48
   1ccee:	2b01      	cmp	r3, #1
   1ccf0:	d012      	beq.n	1cd18 <get_eit_entry+0x54>
   1ccf2:	2b00      	cmp	r3, #0
   1ccf4:	f101 0004 	add.w	r0, r1, #4
   1ccf8:	db20      	blt.n	1cd3c <get_eit_entry+0x78>
   1ccfa:	f7ff ff95 	bl	1cc28 <selfrel_offset31>
   1ccfe:	2300      	movs	r3, #0
   1cd00:	64e0      	str	r0, [r4, #76]	; 0x4c
   1cd02:	6523      	str	r3, [r4, #80]	; 0x50
   1cd04:	6803      	ldr	r3, [r0, #0]
   1cd06:	2b00      	cmp	r3, #0
   1cd08:	db1c      	blt.n	1cd44 <get_eit_entry+0x80>
   1cd0a:	f7ff ff8d 	bl	1cc28 <selfrel_offset31>
   1cd0e:	2300      	movs	r3, #0
   1cd10:	6120      	str	r0, [r4, #16]
   1cd12:	4618      	mov	r0, r3
   1cd14:	b003      	add	sp, #12
   1cd16:	bd30      	pop	{r4, r5, pc}
   1cd18:	2300      	movs	r3, #0
   1cd1a:	6123      	str	r3, [r4, #16]
   1cd1c:	2305      	movs	r3, #5
   1cd1e:	4618      	mov	r0, r3
   1cd20:	b003      	add	sp, #12
   1cd22:	bd30      	pop	{r4, r5, pc}
   1cd24:	2300      	movs	r3, #0
   1cd26:	6123      	str	r3, [r4, #16]
   1cd28:	2309      	movs	r3, #9
   1cd2a:	4618      	mov	r0, r3
   1cd2c:	b003      	add	sp, #12
   1cd2e:	bd30      	pop	{r4, r5, pc}
   1cd30:	490a      	ldr	r1, [pc, #40]	; (1cd5c <get_eit_entry+0x98>)
   1cd32:	480b      	ldr	r0, [pc, #44]	; (1cd60 <get_eit_entry+0x9c>)
   1cd34:	1a09      	subs	r1, r1, r0
   1cd36:	10c9      	asrs	r1, r1, #3
   1cd38:	9101      	str	r1, [sp, #4]
   1cd3a:	e7cf      	b.n	1ccdc <get_eit_entry+0x18>
   1cd3c:	2301      	movs	r3, #1
   1cd3e:	64e0      	str	r0, [r4, #76]	; 0x4c
   1cd40:	6523      	str	r3, [r4, #80]	; 0x50
   1cd42:	e7df      	b.n	1cd04 <get_eit_entry+0x40>
   1cd44:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1cd48:	f7ff ffa8 	bl	1cc9c <__gnu_unwind_get_pr_addr>
   1cd4c:	2800      	cmp	r0, #0
   1cd4e:	6120      	str	r0, [r4, #16]
   1cd50:	bf14      	ite	ne
   1cd52:	2300      	movne	r3, #0
   1cd54:	2309      	moveq	r3, #9
   1cd56:	e7dc      	b.n	1cd12 <get_eit_entry+0x4e>
   1cd58:	00000000 	.word	0x00000000
   1cd5c:	00025574 	.word	0x00025574
   1cd60:	000253ec 	.word	0x000253ec

0001cd64 <restore_non_core_regs>:
   1cd64:	6803      	ldr	r3, [r0, #0]
   1cd66:	07da      	lsls	r2, r3, #31
   1cd68:	b510      	push	{r4, lr}
   1cd6a:	4604      	mov	r4, r0
   1cd6c:	d406      	bmi.n	1cd7c <restore_non_core_regs+0x18>
   1cd6e:	079b      	lsls	r3, r3, #30
   1cd70:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1cd74:	d509      	bpl.n	1cd8a <restore_non_core_regs+0x26>
   1cd76:	f000 fc51 	bl	1d61c <__gnu_Unwind_Restore_VFP_D>
   1cd7a:	6823      	ldr	r3, [r4, #0]
   1cd7c:	0759      	lsls	r1, r3, #29
   1cd7e:	d509      	bpl.n	1cd94 <restore_non_core_regs+0x30>
   1cd80:	071a      	lsls	r2, r3, #28
   1cd82:	d50e      	bpl.n	1cda2 <restore_non_core_regs+0x3e>
   1cd84:	06db      	lsls	r3, r3, #27
   1cd86:	d513      	bpl.n	1cdb0 <restore_non_core_regs+0x4c>
   1cd88:	bd10      	pop	{r4, pc}
   1cd8a:	f000 fc3f 	bl	1d60c <__gnu_Unwind_Restore_VFP>
   1cd8e:	6823      	ldr	r3, [r4, #0]
   1cd90:	0759      	lsls	r1, r3, #29
   1cd92:	d4f5      	bmi.n	1cd80 <restore_non_core_regs+0x1c>
   1cd94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1cd98:	f000 fc48 	bl	1d62c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1cd9c:	6823      	ldr	r3, [r4, #0]
   1cd9e:	071a      	lsls	r2, r3, #28
   1cda0:	d4f0      	bmi.n	1cd84 <restore_non_core_regs+0x20>
   1cda2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1cda6:	f000 fc49 	bl	1d63c <__gnu_Unwind_Restore_WMMXD>
   1cdaa:	6823      	ldr	r3, [r4, #0]
   1cdac:	06db      	lsls	r3, r3, #27
   1cdae:	d4eb      	bmi.n	1cd88 <restore_non_core_regs+0x24>
   1cdb0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1cdb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cdb8:	f000 bc84 	b.w	1d6c4 <__gnu_Unwind_Restore_WMMXC>

0001cdbc <_Unwind_decode_typeinfo_ptr.isra.0>:
   1cdbc:	6803      	ldr	r3, [r0, #0]
   1cdbe:	b103      	cbz	r3, 1cdc2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1cdc0:	4403      	add	r3, r0
   1cdc2:	4618      	mov	r0, r3
   1cdc4:	4770      	bx	lr
   1cdc6:	bf00      	nop

0001cdc8 <__gnu_unwind_24bit.isra.1>:
   1cdc8:	2009      	movs	r0, #9
   1cdca:	4770      	bx	lr

0001cdcc <_Unwind_DebugHook>:
   1cdcc:	4770      	bx	lr
   1cdce:	bf00      	nop

0001cdd0 <unwind_phase2>:
   1cdd0:	b570      	push	{r4, r5, r6, lr}
   1cdd2:	4604      	mov	r4, r0
   1cdd4:	460d      	mov	r5, r1
   1cdd6:	e008      	b.n	1cdea <unwind_phase2+0x1a>
   1cdd8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1cdda:	6163      	str	r3, [r4, #20]
   1cddc:	462a      	mov	r2, r5
   1cdde:	6923      	ldr	r3, [r4, #16]
   1cde0:	4621      	mov	r1, r4
   1cde2:	2001      	movs	r0, #1
   1cde4:	4798      	blx	r3
   1cde6:	2808      	cmp	r0, #8
   1cde8:	d108      	bne.n	1cdfc <unwind_phase2+0x2c>
   1cdea:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cdec:	4620      	mov	r0, r4
   1cdee:	f7ff ff69 	bl	1ccc4 <get_eit_entry>
   1cdf2:	4606      	mov	r6, r0
   1cdf4:	2800      	cmp	r0, #0
   1cdf6:	d0ef      	beq.n	1cdd8 <unwind_phase2+0x8>
   1cdf8:	f000 fe94 	bl	1db24 <abort>
   1cdfc:	2807      	cmp	r0, #7
   1cdfe:	d1fb      	bne.n	1cdf8 <unwind_phase2+0x28>
   1ce00:	4630      	mov	r0, r6
   1ce02:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1ce04:	f7ff ffe2 	bl	1cdcc <_Unwind_DebugHook>
   1ce08:	1d28      	adds	r0, r5, #4
   1ce0a:	f000 fbf3 	bl	1d5f4 <__restore_core_regs>
   1ce0e:	bf00      	nop

0001ce10 <unwind_phase2_forced>:
   1ce10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce14:	1d0c      	adds	r4, r1, #4
   1ce16:	4605      	mov	r5, r0
   1ce18:	4692      	mov	sl, r2
   1ce1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ce1c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1ce20:	ae03      	add	r6, sp, #12
   1ce22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ce24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ce26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ce28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ce2a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ce2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1ce30:	ac02      	add	r4, sp, #8
   1ce32:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1ce36:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1ce3a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1ce3e:	2300      	movs	r3, #0
   1ce40:	4628      	mov	r0, r5
   1ce42:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1ce44:	6023      	str	r3, [r4, #0]
   1ce46:	f7ff ff3d 	bl	1ccc4 <get_eit_entry>
   1ce4a:	f1ba 0f00 	cmp.w	sl, #0
   1ce4e:	4607      	mov	r7, r0
   1ce50:	bf14      	ite	ne
   1ce52:	260a      	movne	r6, #10
   1ce54:	2609      	moveq	r6, #9
   1ce56:	b17f      	cbz	r7, 1ce78 <unwind_phase2_forced+0x68>
   1ce58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ce5a:	f046 0110 	orr.w	r1, r6, #16
   1ce5e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1ce62:	462a      	mov	r2, r5
   1ce64:	6463      	str	r3, [r4, #68]	; 0x44
   1ce66:	2001      	movs	r0, #1
   1ce68:	462b      	mov	r3, r5
   1ce6a:	47c0      	blx	r8
   1ce6c:	bb78      	cbnz	r0, 1cece <unwind_phase2_forced+0xbe>
   1ce6e:	4638      	mov	r0, r7
   1ce70:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1ce74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce78:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1ce7a:	616b      	str	r3, [r5, #20]
   1ce7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1ce80:	4621      	mov	r1, r4
   1ce82:	a87a      	add	r0, sp, #488	; 0x1e8
   1ce84:	f001 fc3c 	bl	1e700 <memcpy>
   1ce88:	692b      	ldr	r3, [r5, #16]
   1ce8a:	aa7a      	add	r2, sp, #488	; 0x1e8
   1ce8c:	4629      	mov	r1, r5
   1ce8e:	4630      	mov	r0, r6
   1ce90:	4798      	blx	r3
   1ce92:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1ce94:	4682      	mov	sl, r0
   1ce96:	e88d 0210 	stmia.w	sp, {r4, r9}
   1ce9a:	4631      	mov	r1, r6
   1ce9c:	6463      	str	r3, [r4, #68]	; 0x44
   1ce9e:	462a      	mov	r2, r5
   1cea0:	462b      	mov	r3, r5
   1cea2:	2001      	movs	r0, #1
   1cea4:	47c0      	blx	r8
   1cea6:	b990      	cbnz	r0, 1cece <unwind_phase2_forced+0xbe>
   1cea8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1ceac:	a97a      	add	r1, sp, #488	; 0x1e8
   1ceae:	4620      	mov	r0, r4
   1ceb0:	f001 fc26 	bl	1e700 <memcpy>
   1ceb4:	f1ba 0f08 	cmp.w	sl, #8
   1ceb8:	d106      	bne.n	1cec8 <unwind_phase2_forced+0xb8>
   1ceba:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cebc:	4628      	mov	r0, r5
   1cebe:	f7ff ff01 	bl	1ccc4 <get_eit_entry>
   1cec2:	2609      	movs	r6, #9
   1cec4:	4607      	mov	r7, r0
   1cec6:	e7c6      	b.n	1ce56 <unwind_phase2_forced+0x46>
   1cec8:	f1ba 0f07 	cmp.w	sl, #7
   1cecc:	d005      	beq.n	1ceda <unwind_phase2_forced+0xca>
   1cece:	2709      	movs	r7, #9
   1ced0:	4638      	mov	r0, r7
   1ced2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1ced6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ceda:	4638      	mov	r0, r7
   1cedc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cede:	f7ff ff75 	bl	1cdcc <_Unwind_DebugHook>
   1cee2:	a803      	add	r0, sp, #12
   1cee4:	f000 fb86 	bl	1d5f4 <__restore_core_regs>

0001cee8 <_Unwind_GetCFA>:
   1cee8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1ceea:	4770      	bx	lr

0001ceec <__gnu_Unwind_RaiseException>:
   1ceec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ceee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1cef0:	640b      	str	r3, [r1, #64]	; 0x40
   1cef2:	1d0e      	adds	r6, r1, #4
   1cef4:	460f      	mov	r7, r1
   1cef6:	4604      	mov	r4, r0
   1cef8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cefa:	b0f9      	sub	sp, #484	; 0x1e4
   1cefc:	ad01      	add	r5, sp, #4
   1cefe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cf00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cf02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cf04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cf06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cf08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1cf0c:	f04f 36ff 	mov.w	r6, #4294967295
   1cf10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1cf14:	9600      	str	r6, [sp, #0]
   1cf16:	e006      	b.n	1cf26 <__gnu_Unwind_RaiseException+0x3a>
   1cf18:	6923      	ldr	r3, [r4, #16]
   1cf1a:	466a      	mov	r2, sp
   1cf1c:	4621      	mov	r1, r4
   1cf1e:	4798      	blx	r3
   1cf20:	2808      	cmp	r0, #8
   1cf22:	4605      	mov	r5, r0
   1cf24:	d108      	bne.n	1cf38 <__gnu_Unwind_RaiseException+0x4c>
   1cf26:	9910      	ldr	r1, [sp, #64]	; 0x40
   1cf28:	4620      	mov	r0, r4
   1cf2a:	f7ff fecb 	bl	1ccc4 <get_eit_entry>
   1cf2e:	2800      	cmp	r0, #0
   1cf30:	d0f2      	beq.n	1cf18 <__gnu_Unwind_RaiseException+0x2c>
   1cf32:	2009      	movs	r0, #9
   1cf34:	b079      	add	sp, #484	; 0x1e4
   1cf36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cf38:	4668      	mov	r0, sp
   1cf3a:	f7ff ff13 	bl	1cd64 <restore_non_core_regs>
   1cf3e:	2d06      	cmp	r5, #6
   1cf40:	d1f7      	bne.n	1cf32 <__gnu_Unwind_RaiseException+0x46>
   1cf42:	4639      	mov	r1, r7
   1cf44:	4620      	mov	r0, r4
   1cf46:	f7ff ff43 	bl	1cdd0 <unwind_phase2>
   1cf4a:	bf00      	nop

0001cf4c <__gnu_Unwind_ForcedUnwind>:
   1cf4c:	b430      	push	{r4, r5}
   1cf4e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1cf50:	60c1      	str	r1, [r0, #12]
   1cf52:	6182      	str	r2, [r0, #24]
   1cf54:	4619      	mov	r1, r3
   1cf56:	641d      	str	r5, [r3, #64]	; 0x40
   1cf58:	2200      	movs	r2, #0
   1cf5a:	bc30      	pop	{r4, r5}
   1cf5c:	e758      	b.n	1ce10 <unwind_phase2_forced>
   1cf5e:	bf00      	nop

0001cf60 <__gnu_Unwind_Resume>:
   1cf60:	b570      	push	{r4, r5, r6, lr}
   1cf62:	68c6      	ldr	r6, [r0, #12]
   1cf64:	6943      	ldr	r3, [r0, #20]
   1cf66:	640b      	str	r3, [r1, #64]	; 0x40
   1cf68:	b126      	cbz	r6, 1cf74 <__gnu_Unwind_Resume+0x14>
   1cf6a:	2201      	movs	r2, #1
   1cf6c:	f7ff ff50 	bl	1ce10 <unwind_phase2_forced>
   1cf70:	f000 fdd8 	bl	1db24 <abort>
   1cf74:	6903      	ldr	r3, [r0, #16]
   1cf76:	460a      	mov	r2, r1
   1cf78:	4604      	mov	r4, r0
   1cf7a:	460d      	mov	r5, r1
   1cf7c:	4601      	mov	r1, r0
   1cf7e:	2002      	movs	r0, #2
   1cf80:	4798      	blx	r3
   1cf82:	2807      	cmp	r0, #7
   1cf84:	d007      	beq.n	1cf96 <__gnu_Unwind_Resume+0x36>
   1cf86:	2808      	cmp	r0, #8
   1cf88:	d103      	bne.n	1cf92 <__gnu_Unwind_Resume+0x32>
   1cf8a:	4629      	mov	r1, r5
   1cf8c:	4620      	mov	r0, r4
   1cf8e:	f7ff ff1f 	bl	1cdd0 <unwind_phase2>
   1cf92:	f000 fdc7 	bl	1db24 <abort>
   1cf96:	4630      	mov	r0, r6
   1cf98:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cf9a:	f7ff ff17 	bl	1cdcc <_Unwind_DebugHook>
   1cf9e:	1d28      	adds	r0, r5, #4
   1cfa0:	f000 fb28 	bl	1d5f4 <__restore_core_regs>

0001cfa4 <__gnu_Unwind_Resume_or_Rethrow>:
   1cfa4:	68c2      	ldr	r2, [r0, #12]
   1cfa6:	b11a      	cbz	r2, 1cfb0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1cfa8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1cfaa:	640a      	str	r2, [r1, #64]	; 0x40
   1cfac:	2200      	movs	r2, #0
   1cfae:	e72f      	b.n	1ce10 <unwind_phase2_forced>
   1cfb0:	e79c      	b.n	1ceec <__gnu_Unwind_RaiseException>
   1cfb2:	bf00      	nop

0001cfb4 <_Unwind_Complete>:
   1cfb4:	4770      	bx	lr
   1cfb6:	bf00      	nop

0001cfb8 <_Unwind_DeleteException>:
   1cfb8:	6883      	ldr	r3, [r0, #8]
   1cfba:	b113      	cbz	r3, 1cfc2 <_Unwind_DeleteException+0xa>
   1cfbc:	4601      	mov	r1, r0
   1cfbe:	2001      	movs	r0, #1
   1cfc0:	4718      	bx	r3
   1cfc2:	4770      	bx	lr

0001cfc4 <_Unwind_VRS_Get>:
   1cfc4:	b500      	push	{lr}
   1cfc6:	2904      	cmp	r1, #4
   1cfc8:	d807      	bhi.n	1cfda <_Unwind_VRS_Get+0x16>
   1cfca:	e8df f001 	tbb	[pc, r1]
   1cfce:	0903      	.short	0x0903
   1cfd0:	0906      	.short	0x0906
   1cfd2:	09          	.byte	0x09
   1cfd3:	00          	.byte	0x00
   1cfd4:	b90b      	cbnz	r3, 1cfda <_Unwind_VRS_Get+0x16>
   1cfd6:	2a0f      	cmp	r2, #15
   1cfd8:	d905      	bls.n	1cfe6 <_Unwind_VRS_Get+0x22>
   1cfda:	2002      	movs	r0, #2
   1cfdc:	f85d fb04 	ldr.w	pc, [sp], #4
   1cfe0:	2001      	movs	r0, #1
   1cfe2:	f85d fb04 	ldr.w	pc, [sp], #4
   1cfe6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cfea:	4618      	mov	r0, r3
   1cfec:	6853      	ldr	r3, [r2, #4]
   1cfee:	9a01      	ldr	r2, [sp, #4]
   1cff0:	6013      	str	r3, [r2, #0]
   1cff2:	f85d fb04 	ldr.w	pc, [sp], #4
   1cff6:	bf00      	nop

0001cff8 <_Unwind_GetGR>:
   1cff8:	b510      	push	{r4, lr}
   1cffa:	b084      	sub	sp, #16
   1cffc:	2300      	movs	r3, #0
   1cffe:	ac03      	add	r4, sp, #12
   1d000:	460a      	mov	r2, r1
   1d002:	9400      	str	r4, [sp, #0]
   1d004:	4619      	mov	r1, r3
   1d006:	f7ff ffdd 	bl	1cfc4 <_Unwind_VRS_Get>
   1d00a:	9803      	ldr	r0, [sp, #12]
   1d00c:	b004      	add	sp, #16
   1d00e:	bd10      	pop	{r4, pc}

0001d010 <_Unwind_VRS_Set>:
   1d010:	b500      	push	{lr}
   1d012:	2904      	cmp	r1, #4
   1d014:	d807      	bhi.n	1d026 <_Unwind_VRS_Set+0x16>
   1d016:	e8df f001 	tbb	[pc, r1]
   1d01a:	0903      	.short	0x0903
   1d01c:	0906      	.short	0x0906
   1d01e:	09          	.byte	0x09
   1d01f:	00          	.byte	0x00
   1d020:	b90b      	cbnz	r3, 1d026 <_Unwind_VRS_Set+0x16>
   1d022:	2a0f      	cmp	r2, #15
   1d024:	d905      	bls.n	1d032 <_Unwind_VRS_Set+0x22>
   1d026:	2002      	movs	r0, #2
   1d028:	f85d fb04 	ldr.w	pc, [sp], #4
   1d02c:	2001      	movs	r0, #1
   1d02e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d032:	9901      	ldr	r1, [sp, #4]
   1d034:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1d038:	6809      	ldr	r1, [r1, #0]
   1d03a:	6051      	str	r1, [r2, #4]
   1d03c:	4618      	mov	r0, r3
   1d03e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d042:	bf00      	nop

0001d044 <_Unwind_SetGR>:
   1d044:	b510      	push	{r4, lr}
   1d046:	b084      	sub	sp, #16
   1d048:	ac04      	add	r4, sp, #16
   1d04a:	2300      	movs	r3, #0
   1d04c:	f844 2d04 	str.w	r2, [r4, #-4]!
   1d050:	460a      	mov	r2, r1
   1d052:	9400      	str	r4, [sp, #0]
   1d054:	4619      	mov	r1, r3
   1d056:	f7ff ffdb 	bl	1d010 <_Unwind_VRS_Set>
   1d05a:	b004      	add	sp, #16
   1d05c:	bd10      	pop	{r4, pc}
   1d05e:	bf00      	nop

0001d060 <__gnu_Unwind_Backtrace>:
   1d060:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d062:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1d064:	6413      	str	r3, [r2, #64]	; 0x40
   1d066:	1d15      	adds	r5, r2, #4
   1d068:	4607      	mov	r7, r0
   1d06a:	460e      	mov	r6, r1
   1d06c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d06e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1d072:	ac17      	add	r4, sp, #92	; 0x5c
   1d074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d07a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d07c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d07e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d082:	f04f 35ff 	mov.w	r5, #4294967295
   1d086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1d08a:	9516      	str	r5, [sp, #88]	; 0x58
   1d08c:	e010      	b.n	1d0b0 <__gnu_Unwind_Backtrace+0x50>
   1d08e:	a816      	add	r0, sp, #88	; 0x58
   1d090:	f7ff ffd8 	bl	1d044 <_Unwind_SetGR>
   1d094:	4631      	mov	r1, r6
   1d096:	a816      	add	r0, sp, #88	; 0x58
   1d098:	47b8      	blx	r7
   1d09a:	aa16      	add	r2, sp, #88	; 0x58
   1d09c:	4669      	mov	r1, sp
   1d09e:	b978      	cbnz	r0, 1d0c0 <__gnu_Unwind_Backtrace+0x60>
   1d0a0:	9b04      	ldr	r3, [sp, #16]
   1d0a2:	2008      	movs	r0, #8
   1d0a4:	4798      	blx	r3
   1d0a6:	2805      	cmp	r0, #5
   1d0a8:	4604      	mov	r4, r0
   1d0aa:	d00a      	beq.n	1d0c2 <__gnu_Unwind_Backtrace+0x62>
   1d0ac:	2809      	cmp	r0, #9
   1d0ae:	d007      	beq.n	1d0c0 <__gnu_Unwind_Backtrace+0x60>
   1d0b0:	9926      	ldr	r1, [sp, #152]	; 0x98
   1d0b2:	4668      	mov	r0, sp
   1d0b4:	f7ff fe06 	bl	1ccc4 <get_eit_entry>
   1d0b8:	466a      	mov	r2, sp
   1d0ba:	210c      	movs	r1, #12
   1d0bc:	2800      	cmp	r0, #0
   1d0be:	d0e6      	beq.n	1d08e <__gnu_Unwind_Backtrace+0x2e>
   1d0c0:	2409      	movs	r4, #9
   1d0c2:	a816      	add	r0, sp, #88	; 0x58
   1d0c4:	f7ff fe4e 	bl	1cd64 <restore_non_core_regs>
   1d0c8:	4620      	mov	r0, r4
   1d0ca:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1d0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d0d0 <__gnu_unwind_pr_common>:
   1d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0d4:	460d      	mov	r5, r1
   1d0d6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1d0d8:	b08b      	sub	sp, #44	; 0x2c
   1d0da:	1d0c      	adds	r4, r1, #4
   1d0dc:	6809      	ldr	r1, [r1, #0]
   1d0de:	9107      	str	r1, [sp, #28]
   1d0e0:	4691      	mov	r9, r2
   1d0e2:	9408      	str	r4, [sp, #32]
   1d0e4:	f000 0b03 	and.w	fp, r0, #3
   1d0e8:	461e      	mov	r6, r3
   1d0ea:	2b00      	cmp	r3, #0
   1d0ec:	d160      	bne.n	1d1b0 <__gnu_unwind_pr_common+0xe0>
   1d0ee:	0209      	lsls	r1, r1, #8
   1d0f0:	2303      	movs	r3, #3
   1d0f2:	9107      	str	r1, [sp, #28]
   1d0f4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1d0f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1d0fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1d0fe:	f1bb 0f02 	cmp.w	fp, #2
   1d102:	bf08      	it	eq
   1d104:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1d106:	f013 0301 	ands.w	r3, r3, #1
   1d10a:	d140      	bne.n	1d18e <__gnu_unwind_pr_common+0xbe>
   1d10c:	9301      	str	r3, [sp, #4]
   1d10e:	f000 0308 	and.w	r3, r0, #8
   1d112:	9303      	str	r3, [sp, #12]
   1d114:	f8d4 8000 	ldr.w	r8, [r4]
   1d118:	f1b8 0f00 	cmp.w	r8, #0
   1d11c:	d039      	beq.n	1d192 <__gnu_unwind_pr_common+0xc2>
   1d11e:	2e02      	cmp	r6, #2
   1d120:	d043      	beq.n	1d1aa <__gnu_unwind_pr_common+0xda>
   1d122:	f8b4 8000 	ldrh.w	r8, [r4]
   1d126:	8867      	ldrh	r7, [r4, #2]
   1d128:	3404      	adds	r4, #4
   1d12a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1d12c:	f027 0a01 	bic.w	sl, r7, #1
   1d130:	210f      	movs	r1, #15
   1d132:	4648      	mov	r0, r9
   1d134:	449a      	add	sl, r3
   1d136:	f7ff ff5f 	bl	1cff8 <_Unwind_GetGR>
   1d13a:	4582      	cmp	sl, r0
   1d13c:	d833      	bhi.n	1d1a6 <__gnu_unwind_pr_common+0xd6>
   1d13e:	f028 0301 	bic.w	r3, r8, #1
   1d142:	449a      	add	sl, r3
   1d144:	4550      	cmp	r0, sl
   1d146:	bf2c      	ite	cs
   1d148:	2000      	movcs	r0, #0
   1d14a:	2001      	movcc	r0, #1
   1d14c:	007f      	lsls	r7, r7, #1
   1d14e:	f007 0702 	and.w	r7, r7, #2
   1d152:	f008 0801 	and.w	r8, r8, #1
   1d156:	ea47 0708 	orr.w	r7, r7, r8
   1d15a:	2f01      	cmp	r7, #1
   1d15c:	d03e      	beq.n	1d1dc <__gnu_unwind_pr_common+0x10c>
   1d15e:	d335      	bcc.n	1d1cc <__gnu_unwind_pr_common+0xfc>
   1d160:	2f02      	cmp	r7, #2
   1d162:	d11c      	bne.n	1d19e <__gnu_unwind_pr_common+0xce>
   1d164:	6823      	ldr	r3, [r4, #0]
   1d166:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1d16a:	9202      	str	r2, [sp, #8]
   1d16c:	f1bb 0f00 	cmp.w	fp, #0
   1d170:	d176      	bne.n	1d260 <__gnu_unwind_pr_common+0x190>
   1d172:	b128      	cbz	r0, 1d180 <__gnu_unwind_pr_common+0xb0>
   1d174:	9903      	ldr	r1, [sp, #12]
   1d176:	2900      	cmp	r1, #0
   1d178:	d07e      	beq.n	1d278 <__gnu_unwind_pr_common+0x1a8>
   1d17a:	2a00      	cmp	r2, #0
   1d17c:	f000 80a6 	beq.w	1d2cc <__gnu_unwind_pr_common+0x1fc>
   1d180:	2b00      	cmp	r3, #0
   1d182:	db77      	blt.n	1d274 <__gnu_unwind_pr_common+0x1a4>
   1d184:	9b02      	ldr	r3, [sp, #8]
   1d186:	3301      	adds	r3, #1
   1d188:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1d18c:	e7c2      	b.n	1d114 <__gnu_unwind_pr_common+0x44>
   1d18e:	2300      	movs	r3, #0
   1d190:	9301      	str	r3, [sp, #4]
   1d192:	2e02      	cmp	r6, #2
   1d194:	dd3e      	ble.n	1d214 <__gnu_unwind_pr_common+0x144>
   1d196:	f7ff fe17 	bl	1cdc8 <__gnu_unwind_24bit.isra.1>
   1d19a:	2800      	cmp	r0, #0
   1d19c:	d040      	beq.n	1d220 <__gnu_unwind_pr_common+0x150>
   1d19e:	2009      	movs	r0, #9
   1d1a0:	b00b      	add	sp, #44	; 0x2c
   1d1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1a6:	2000      	movs	r0, #0
   1d1a8:	e7d0      	b.n	1d14c <__gnu_unwind_pr_common+0x7c>
   1d1aa:	6867      	ldr	r7, [r4, #4]
   1d1ac:	3408      	adds	r4, #8
   1d1ae:	e7bc      	b.n	1d12a <__gnu_unwind_pr_common+0x5a>
   1d1b0:	2b02      	cmp	r3, #2
   1d1b2:	dca3      	bgt.n	1d0fc <__gnu_unwind_pr_common+0x2c>
   1d1b4:	0c0b      	lsrs	r3, r1, #16
   1d1b6:	b2da      	uxtb	r2, r3
   1d1b8:	0409      	lsls	r1, r1, #16
   1d1ba:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1d1be:	2302      	movs	r3, #2
   1d1c0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1d1c4:	9107      	str	r1, [sp, #28]
   1d1c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1d1ca:	e797      	b.n	1d0fc <__gnu_unwind_pr_common+0x2c>
   1d1cc:	f1bb 0f00 	cmp.w	fp, #0
   1d1d0:	d002      	beq.n	1d1d8 <__gnu_unwind_pr_common+0x108>
   1d1d2:	2800      	cmp	r0, #0
   1d1d4:	f040 80bd 	bne.w	1d352 <__gnu_unwind_pr_common+0x282>
   1d1d8:	3404      	adds	r4, #4
   1d1da:	e79b      	b.n	1d114 <__gnu_unwind_pr_common+0x44>
   1d1dc:	f1bb 0f00 	cmp.w	fp, #0
   1d1e0:	d125      	bne.n	1d22e <__gnu_unwind_pr_common+0x15e>
   1d1e2:	b1a8      	cbz	r0, 1d210 <__gnu_unwind_pr_common+0x140>
   1d1e4:	e894 000c 	ldmia.w	r4, {r2, r3}
   1d1e8:	1c99      	adds	r1, r3, #2
   1d1ea:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1d1ee:	d0d6      	beq.n	1d19e <__gnu_unwind_pr_common+0xce>
   1d1f0:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1d1f4:	3301      	adds	r3, #1
   1d1f6:	9106      	str	r1, [sp, #24]
   1d1f8:	f000 80a3 	beq.w	1d342 <__gnu_unwind_pr_common+0x272>
   1d1fc:	1d20      	adds	r0, r4, #4
   1d1fe:	f7ff fddd 	bl	1cdbc <_Unwind_decode_typeinfo_ptr.isra.0>
   1d202:	ab06      	add	r3, sp, #24
   1d204:	4601      	mov	r1, r0
   1d206:	4628      	mov	r0, r5
   1d208:	f7f6 fda8 	bl	13d5c <__cxa_type_match>
   1d20c:	2800      	cmp	r0, #0
   1d20e:	d177      	bne.n	1d300 <__gnu_unwind_pr_common+0x230>
   1d210:	3408      	adds	r4, #8
   1d212:	e77f      	b.n	1d114 <__gnu_unwind_pr_common+0x44>
   1d214:	a907      	add	r1, sp, #28
   1d216:	4648      	mov	r0, r9
   1d218:	f000 faee 	bl	1d7f8 <__gnu_unwind_execute>
   1d21c:	2800      	cmp	r0, #0
   1d21e:	d1be      	bne.n	1d19e <__gnu_unwind_pr_common+0xce>
   1d220:	9b01      	ldr	r3, [sp, #4]
   1d222:	2b00      	cmp	r3, #0
   1d224:	d15c      	bne.n	1d2e0 <__gnu_unwind_pr_common+0x210>
   1d226:	2008      	movs	r0, #8
   1d228:	b00b      	add	sp, #44	; 0x2c
   1d22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d22e:	210d      	movs	r1, #13
   1d230:	4648      	mov	r0, r9
   1d232:	6a2f      	ldr	r7, [r5, #32]
   1d234:	f7ff fee0 	bl	1cff8 <_Unwind_GetGR>
   1d238:	4287      	cmp	r7, r0
   1d23a:	d1e9      	bne.n	1d210 <__gnu_unwind_pr_common+0x140>
   1d23c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d23e:	429c      	cmp	r4, r3
   1d240:	d1e6      	bne.n	1d210 <__gnu_unwind_pr_common+0x140>
   1d242:	4620      	mov	r0, r4
   1d244:	f7ff fcf0 	bl	1cc28 <selfrel_offset31>
   1d248:	210f      	movs	r1, #15
   1d24a:	4602      	mov	r2, r0
   1d24c:	4648      	mov	r0, r9
   1d24e:	f7ff fef9 	bl	1d044 <_Unwind_SetGR>
   1d252:	4648      	mov	r0, r9
   1d254:	462a      	mov	r2, r5
   1d256:	2100      	movs	r1, #0
   1d258:	f7ff fef4 	bl	1d044 <_Unwind_SetGR>
   1d25c:	2007      	movs	r0, #7
   1d25e:	e79f      	b.n	1d1a0 <__gnu_unwind_pr_common+0xd0>
   1d260:	210d      	movs	r1, #13
   1d262:	4648      	mov	r0, r9
   1d264:	6a2f      	ldr	r7, [r5, #32]
   1d266:	f7ff fec7 	bl	1cff8 <_Unwind_GetGR>
   1d26a:	4287      	cmp	r7, r0
   1d26c:	d058      	beq.n	1d320 <__gnu_unwind_pr_common+0x250>
   1d26e:	6823      	ldr	r3, [r4, #0]
   1d270:	2b00      	cmp	r3, #0
   1d272:	da87      	bge.n	1d184 <__gnu_unwind_pr_common+0xb4>
   1d274:	3404      	adds	r4, #4
   1d276:	e785      	b.n	1d184 <__gnu_unwind_pr_common+0xb4>
   1d278:	9b02      	ldr	r3, [sp, #8]
   1d27a:	b33b      	cbz	r3, 1d2cc <__gnu_unwind_pr_common+0x1fc>
   1d27c:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1d280:	1d27      	adds	r7, r4, #4
   1d282:	f8cd b010 	str.w	fp, [sp, #16]
   1d286:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1d28a:	f8dd a008 	ldr.w	sl, [sp, #8]
   1d28e:	9605      	str	r6, [sp, #20]
   1d290:	46a3      	mov	fp, r4
   1d292:	461c      	mov	r4, r3
   1d294:	e002      	b.n	1d29c <__gnu_unwind_pr_common+0x1cc>
   1d296:	45b2      	cmp	sl, r6
   1d298:	46b0      	mov	r8, r6
   1d29a:	d016      	beq.n	1d2ca <__gnu_unwind_pr_common+0x1fa>
   1d29c:	4638      	mov	r0, r7
   1d29e:	9406      	str	r4, [sp, #24]
   1d2a0:	f7ff fd8c 	bl	1cdbc <_Unwind_decode_typeinfo_ptr.isra.0>
   1d2a4:	ab06      	add	r3, sp, #24
   1d2a6:	4601      	mov	r1, r0
   1d2a8:	2200      	movs	r2, #0
   1d2aa:	4628      	mov	r0, r5
   1d2ac:	f7f6 fd56 	bl	13d5c <__cxa_type_match>
   1d2b0:	f108 0601 	add.w	r6, r8, #1
   1d2b4:	3704      	adds	r7, #4
   1d2b6:	2800      	cmp	r0, #0
   1d2b8:	d0ed      	beq.n	1d296 <__gnu_unwind_pr_common+0x1c6>
   1d2ba:	9b02      	ldr	r3, [sp, #8]
   1d2bc:	9e05      	ldr	r6, [sp, #20]
   1d2be:	4543      	cmp	r3, r8
   1d2c0:	465c      	mov	r4, fp
   1d2c2:	f8dd b010 	ldr.w	fp, [sp, #16]
   1d2c6:	d1d2      	bne.n	1d26e <__gnu_unwind_pr_common+0x19e>
   1d2c8:	e000      	b.n	1d2cc <__gnu_unwind_pr_common+0x1fc>
   1d2ca:	465c      	mov	r4, fp
   1d2cc:	4648      	mov	r0, r9
   1d2ce:	210d      	movs	r1, #13
   1d2d0:	f7ff fe92 	bl	1cff8 <_Unwind_GetGR>
   1d2d4:	9b06      	ldr	r3, [sp, #24]
   1d2d6:	6228      	str	r0, [r5, #32]
   1d2d8:	62ac      	str	r4, [r5, #40]	; 0x28
   1d2da:	626b      	str	r3, [r5, #36]	; 0x24
   1d2dc:	2006      	movs	r0, #6
   1d2de:	e75f      	b.n	1d1a0 <__gnu_unwind_pr_common+0xd0>
   1d2e0:	210f      	movs	r1, #15
   1d2e2:	4648      	mov	r0, r9
   1d2e4:	f7ff fe88 	bl	1cff8 <_Unwind_GetGR>
   1d2e8:	210e      	movs	r1, #14
   1d2ea:	4602      	mov	r2, r0
   1d2ec:	4648      	mov	r0, r9
   1d2ee:	f7ff fea9 	bl	1d044 <_Unwind_SetGR>
   1d2f2:	4648      	mov	r0, r9
   1d2f4:	4a29      	ldr	r2, [pc, #164]	; (1d39c <__gnu_unwind_pr_common+0x2cc>)
   1d2f6:	210f      	movs	r1, #15
   1d2f8:	f7ff fea4 	bl	1d044 <_Unwind_SetGR>
   1d2fc:	2007      	movs	r0, #7
   1d2fe:	e74f      	b.n	1d1a0 <__gnu_unwind_pr_common+0xd0>
   1d300:	4607      	mov	r7, r0
   1d302:	210d      	movs	r1, #13
   1d304:	4648      	mov	r0, r9
   1d306:	f7ff fe77 	bl	1cff8 <_Unwind_GetGR>
   1d30a:	2f02      	cmp	r7, #2
   1d30c:	6228      	str	r0, [r5, #32]
   1d30e:	d11d      	bne.n	1d34c <__gnu_unwind_pr_common+0x27c>
   1d310:	462b      	mov	r3, r5
   1d312:	9a06      	ldr	r2, [sp, #24]
   1d314:	f843 2f2c 	str.w	r2, [r3, #44]!
   1d318:	626b      	str	r3, [r5, #36]	; 0x24
   1d31a:	62ac      	str	r4, [r5, #40]	; 0x28
   1d31c:	2006      	movs	r0, #6
   1d31e:	e73f      	b.n	1d1a0 <__gnu_unwind_pr_common+0xd0>
   1d320:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d322:	429c      	cmp	r4, r3
   1d324:	d1a3      	bne.n	1d26e <__gnu_unwind_pr_common+0x19e>
   1d326:	2204      	movs	r2, #4
   1d328:	2700      	movs	r7, #0
   1d32a:	18a3      	adds	r3, r4, r2
   1d32c:	9902      	ldr	r1, [sp, #8]
   1d32e:	62a9      	str	r1, [r5, #40]	; 0x28
   1d330:	62ef      	str	r7, [r5, #44]	; 0x2c
   1d332:	632a      	str	r2, [r5, #48]	; 0x30
   1d334:	636b      	str	r3, [r5, #52]	; 0x34
   1d336:	6823      	ldr	r3, [r4, #0]
   1d338:	42bb      	cmp	r3, r7
   1d33a:	db1d      	blt.n	1d378 <__gnu_unwind_pr_common+0x2a8>
   1d33c:	2301      	movs	r3, #1
   1d33e:	9301      	str	r3, [sp, #4]
   1d340:	e720      	b.n	1d184 <__gnu_unwind_pr_common+0xb4>
   1d342:	4648      	mov	r0, r9
   1d344:	210d      	movs	r1, #13
   1d346:	f7ff fe57 	bl	1cff8 <_Unwind_GetGR>
   1d34a:	6228      	str	r0, [r5, #32]
   1d34c:	9b06      	ldr	r3, [sp, #24]
   1d34e:	626b      	str	r3, [r5, #36]	; 0x24
   1d350:	e7e3      	b.n	1d31a <__gnu_unwind_pr_common+0x24a>
   1d352:	4620      	mov	r0, r4
   1d354:	f7ff fc68 	bl	1cc28 <selfrel_offset31>
   1d358:	3404      	adds	r4, #4
   1d35a:	4606      	mov	r6, r0
   1d35c:	63ac      	str	r4, [r5, #56]	; 0x38
   1d35e:	4628      	mov	r0, r5
   1d360:	f7f6 fd58 	bl	13e14 <__cxa_begin_cleanup>
   1d364:	2800      	cmp	r0, #0
   1d366:	f43f af1a 	beq.w	1d19e <__gnu_unwind_pr_common+0xce>
   1d36a:	4648      	mov	r0, r9
   1d36c:	4632      	mov	r2, r6
   1d36e:	210f      	movs	r1, #15
   1d370:	f7ff fe68 	bl	1d044 <_Unwind_SetGR>
   1d374:	2007      	movs	r0, #7
   1d376:	e713      	b.n	1d1a0 <__gnu_unwind_pr_common+0xd0>
   1d378:	4608      	mov	r0, r1
   1d37a:	3001      	adds	r0, #1
   1d37c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1d380:	f7ff fc52 	bl	1cc28 <selfrel_offset31>
   1d384:	210f      	movs	r1, #15
   1d386:	4602      	mov	r2, r0
   1d388:	4648      	mov	r0, r9
   1d38a:	f7ff fe5b 	bl	1d044 <_Unwind_SetGR>
   1d38e:	4648      	mov	r0, r9
   1d390:	462a      	mov	r2, r5
   1d392:	4639      	mov	r1, r7
   1d394:	f7ff fe56 	bl	1d044 <_Unwind_SetGR>
   1d398:	2007      	movs	r0, #7
   1d39a:	e701      	b.n	1d1a0 <__gnu_unwind_pr_common+0xd0>
   1d39c:	00013f45 	.word	0x00013f45

0001d3a0 <__aeabi_unwind_cpp_pr0>:
   1d3a0:	2300      	movs	r3, #0
   1d3a2:	e695      	b.n	1d0d0 <__gnu_unwind_pr_common>

0001d3a4 <__aeabi_unwind_cpp_pr1>:
   1d3a4:	2301      	movs	r3, #1
   1d3a6:	e693      	b.n	1d0d0 <__gnu_unwind_pr_common>

0001d3a8 <__aeabi_unwind_cpp_pr2>:
   1d3a8:	2302      	movs	r3, #2
   1d3aa:	e691      	b.n	1d0d0 <__gnu_unwind_pr_common>

0001d3ac <_Unwind_VRS_Pop>:
   1d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3ae:	4604      	mov	r4, r0
   1d3b0:	b0c5      	sub	sp, #276	; 0x114
   1d3b2:	2904      	cmp	r1, #4
   1d3b4:	d80d      	bhi.n	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d3b6:	e8df f001 	tbb	[pc, r1]
   1d3ba:	0353      	.short	0x0353
   1d3bc:	310c      	.short	0x310c
   1d3be:	0f          	.byte	0x0f
   1d3bf:	00          	.byte	0x00
   1d3c0:	2b01      	cmp	r3, #1
   1d3c2:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1d3c6:	b295      	uxth	r5, r2
   1d3c8:	d162      	bne.n	1d490 <_Unwind_VRS_Pop+0xe4>
   1d3ca:	1972      	adds	r2, r6, r5
   1d3cc:	2a10      	cmp	r2, #16
   1d3ce:	f240 809b 	bls.w	1d508 <_Unwind_VRS_Pop+0x15c>
   1d3d2:	2002      	movs	r0, #2
   1d3d4:	b045      	add	sp, #276	; 0x114
   1d3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d3d8:	2b00      	cmp	r3, #0
   1d3da:	d1fa      	bne.n	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d3dc:	2a10      	cmp	r2, #16
   1d3de:	d8f8      	bhi.n	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d3e0:	6823      	ldr	r3, [r4, #0]
   1d3e2:	06d8      	lsls	r0, r3, #27
   1d3e4:	f100 80c6 	bmi.w	1d574 <_Unwind_VRS_Pop+0x1c8>
   1d3e8:	ae22      	add	r6, sp, #136	; 0x88
   1d3ea:	4630      	mov	r0, r6
   1d3ec:	9201      	str	r2, [sp, #4]
   1d3ee:	f000 f973 	bl	1d6d8 <__gnu_Unwind_Save_WMMXC>
   1d3f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d3f4:	9a01      	ldr	r2, [sp, #4]
   1d3f6:	2300      	movs	r3, #0
   1d3f8:	2501      	movs	r5, #1
   1d3fa:	fa05 f103 	lsl.w	r1, r5, r3
   1d3fe:	4211      	tst	r1, r2
   1d400:	d003      	beq.n	1d40a <_Unwind_VRS_Pop+0x5e>
   1d402:	6801      	ldr	r1, [r0, #0]
   1d404:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1d408:	3004      	adds	r0, #4
   1d40a:	3301      	adds	r3, #1
   1d40c:	2b04      	cmp	r3, #4
   1d40e:	d1f4      	bne.n	1d3fa <_Unwind_VRS_Pop+0x4e>
   1d410:	63a0      	str	r0, [r4, #56]	; 0x38
   1d412:	4630      	mov	r0, r6
   1d414:	f000 f956 	bl	1d6c4 <__gnu_Unwind_Restore_WMMXC>
   1d418:	2000      	movs	r0, #0
   1d41a:	e7db      	b.n	1d3d4 <_Unwind_VRS_Pop+0x28>
   1d41c:	2b03      	cmp	r3, #3
   1d41e:	d1d8      	bne.n	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d420:	0c15      	lsrs	r5, r2, #16
   1d422:	b297      	uxth	r7, r2
   1d424:	19eb      	adds	r3, r5, r7
   1d426:	2b10      	cmp	r3, #16
   1d428:	d8d3      	bhi.n	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d42a:	6823      	ldr	r3, [r4, #0]
   1d42c:	071e      	lsls	r6, r3, #28
   1d42e:	f100 80b5 	bmi.w	1d59c <_Unwind_VRS_Pop+0x1f0>
   1d432:	ae22      	add	r6, sp, #136	; 0x88
   1d434:	4630      	mov	r0, r6
   1d436:	f000 f923 	bl	1d680 <__gnu_Unwind_Save_WMMXD>
   1d43a:	00ed      	lsls	r5, r5, #3
   1d43c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d43e:	b14f      	cbz	r7, 1d454 <_Unwind_VRS_Pop+0xa8>
   1d440:	3d04      	subs	r5, #4
   1d442:	1971      	adds	r1, r6, r5
   1d444:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1d448:	f853 2b04 	ldr.w	r2, [r3], #4
   1d44c:	f841 2f04 	str.w	r2, [r1, #4]!
   1d450:	4283      	cmp	r3, r0
   1d452:	d1f9      	bne.n	1d448 <_Unwind_VRS_Pop+0x9c>
   1d454:	4630      	mov	r0, r6
   1d456:	63a3      	str	r3, [r4, #56]	; 0x38
   1d458:	f000 f8f0 	bl	1d63c <__gnu_Unwind_Restore_WMMXD>
   1d45c:	2000      	movs	r0, #0
   1d45e:	e7b9      	b.n	1d3d4 <_Unwind_VRS_Pop+0x28>
   1d460:	2b00      	cmp	r3, #0
   1d462:	d1b6      	bne.n	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d464:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1d466:	b297      	uxth	r7, r2
   1d468:	1d20      	adds	r0, r4, #4
   1d46a:	2601      	movs	r6, #1
   1d46c:	fa06 f103 	lsl.w	r1, r6, r3
   1d470:	4239      	tst	r1, r7
   1d472:	f103 0301 	add.w	r3, r3, #1
   1d476:	d002      	beq.n	1d47e <_Unwind_VRS_Pop+0xd2>
   1d478:	6829      	ldr	r1, [r5, #0]
   1d47a:	6001      	str	r1, [r0, #0]
   1d47c:	3504      	adds	r5, #4
   1d47e:	2b10      	cmp	r3, #16
   1d480:	f100 0004 	add.w	r0, r0, #4
   1d484:	d1f2      	bne.n	1d46c <_Unwind_VRS_Pop+0xc0>
   1d486:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1d48a:	d13b      	bne.n	1d504 <_Unwind_VRS_Pop+0x158>
   1d48c:	63a5      	str	r5, [r4, #56]	; 0x38
   1d48e:	e7a1      	b.n	1d3d4 <_Unwind_VRS_Pop+0x28>
   1d490:	2b05      	cmp	r3, #5
   1d492:	d19e      	bne.n	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d494:	1977      	adds	r7, r6, r5
   1d496:	2f20      	cmp	r7, #32
   1d498:	d89b      	bhi.n	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d49a:	2e0f      	cmp	r6, #15
   1d49c:	d966      	bls.n	1d56c <_Unwind_VRS_Pop+0x1c0>
   1d49e:	462f      	mov	r7, r5
   1d4a0:	2d00      	cmp	r5, #0
   1d4a2:	d13a      	bne.n	1d51a <_Unwind_VRS_Pop+0x16e>
   1d4a4:	462a      	mov	r2, r5
   1d4a6:	2700      	movs	r7, #0
   1d4a8:	2a00      	cmp	r2, #0
   1d4aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d4ac:	dd72      	ble.n	1d594 <_Unwind_VRS_Pop+0x1e8>
   1d4ae:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1d4b2:	4601      	mov	r1, r0
   1d4b4:	a844      	add	r0, sp, #272	; 0x110
   1d4b6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d4ba:	388c      	subs	r0, #140	; 0x8c
   1d4bc:	f851 5b04 	ldr.w	r5, [r1], #4
   1d4c0:	f840 5f04 	str.w	r5, [r0, #4]!
   1d4c4:	4291      	cmp	r1, r2
   1d4c6:	d1f9      	bne.n	1d4bc <_Unwind_VRS_Pop+0x110>
   1d4c8:	4608      	mov	r0, r1
   1d4ca:	b197      	cbz	r7, 1d4f2 <_Unwind_VRS_Pop+0x146>
   1d4cc:	2e10      	cmp	r6, #16
   1d4ce:	4632      	mov	r2, r6
   1d4d0:	a944      	add	r1, sp, #272	; 0x110
   1d4d2:	bf38      	it	cc
   1d4d4:	2210      	movcc	r2, #16
   1d4d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1d4da:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1d4de:	0079      	lsls	r1, r7, #1
   1d4e0:	3a04      	subs	r2, #4
   1d4e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d4e6:	f850 5b04 	ldr.w	r5, [r0], #4
   1d4ea:	f842 5f04 	str.w	r5, [r2, #4]!
   1d4ee:	4288      	cmp	r0, r1
   1d4f0:	d1f9      	bne.n	1d4e6 <_Unwind_VRS_Pop+0x13a>
   1d4f2:	2b01      	cmp	r3, #1
   1d4f4:	d048      	beq.n	1d588 <_Unwind_VRS_Pop+0x1dc>
   1d4f6:	2e0f      	cmp	r6, #15
   1d4f8:	63a1      	str	r1, [r4, #56]	; 0x38
   1d4fa:	d933      	bls.n	1d564 <_Unwind_VRS_Pop+0x1b8>
   1d4fc:	b117      	cbz	r7, 1d504 <_Unwind_VRS_Pop+0x158>
   1d4fe:	a802      	add	r0, sp, #8
   1d500:	f000 f894 	bl	1d62c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d504:	2000      	movs	r0, #0
   1d506:	e765      	b.n	1d3d4 <_Unwind_VRS_Pop+0x28>
   1d508:	2e0f      	cmp	r6, #15
   1d50a:	f63f af62 	bhi.w	1d3d2 <_Unwind_VRS_Pop+0x26>
   1d50e:	2700      	movs	r7, #0
   1d510:	6822      	ldr	r2, [r4, #0]
   1d512:	07d1      	lsls	r1, r2, #31
   1d514:	d417      	bmi.n	1d546 <_Unwind_VRS_Pop+0x19a>
   1d516:	2f00      	cmp	r7, #0
   1d518:	d060      	beq.n	1d5dc <_Unwind_VRS_Pop+0x230>
   1d51a:	6822      	ldr	r2, [r4, #0]
   1d51c:	0751      	lsls	r1, r2, #29
   1d51e:	d445      	bmi.n	1d5ac <_Unwind_VRS_Pop+0x200>
   1d520:	2b01      	cmp	r3, #1
   1d522:	d04d      	beq.n	1d5c0 <_Unwind_VRS_Pop+0x214>
   1d524:	2e0f      	cmp	r6, #15
   1d526:	d806      	bhi.n	1d536 <_Unwind_VRS_Pop+0x18a>
   1d528:	a822      	add	r0, sp, #136	; 0x88
   1d52a:	9301      	str	r3, [sp, #4]
   1d52c:	f000 f87a 	bl	1d624 <__gnu_Unwind_Save_VFP_D>
   1d530:	9b01      	ldr	r3, [sp, #4]
   1d532:	2f00      	cmp	r7, #0
   1d534:	d0b6      	beq.n	1d4a4 <_Unwind_VRS_Pop+0xf8>
   1d536:	a802      	add	r0, sp, #8
   1d538:	9301      	str	r3, [sp, #4]
   1d53a:	f000 f87b 	bl	1d634 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d53e:	9b01      	ldr	r3, [sp, #4]
   1d540:	f1c6 0210 	rsb	r2, r6, #16
   1d544:	e7b0      	b.n	1d4a8 <_Unwind_VRS_Pop+0xfc>
   1d546:	f022 0101 	bic.w	r1, r2, #1
   1d54a:	2b05      	cmp	r3, #5
   1d54c:	6021      	str	r1, [r4, #0]
   1d54e:	9301      	str	r3, [sp, #4]
   1d550:	4620      	mov	r0, r4
   1d552:	d03b      	beq.n	1d5cc <_Unwind_VRS_Pop+0x220>
   1d554:	f022 0203 	bic.w	r2, r2, #3
   1d558:	f840 2b48 	str.w	r2, [r0], #72
   1d55c:	f000 f85a 	bl	1d614 <__gnu_Unwind_Save_VFP>
   1d560:	9b01      	ldr	r3, [sp, #4]
   1d562:	e7d8      	b.n	1d516 <_Unwind_VRS_Pop+0x16a>
   1d564:	a822      	add	r0, sp, #136	; 0x88
   1d566:	f000 f859 	bl	1d61c <__gnu_Unwind_Restore_VFP_D>
   1d56a:	e7c7      	b.n	1d4fc <_Unwind_VRS_Pop+0x150>
   1d56c:	2f10      	cmp	r7, #16
   1d56e:	d9ce      	bls.n	1d50e <_Unwind_VRS_Pop+0x162>
   1d570:	3f10      	subs	r7, #16
   1d572:	e7cd      	b.n	1d510 <_Unwind_VRS_Pop+0x164>
   1d574:	f023 0310 	bic.w	r3, r3, #16
   1d578:	6023      	str	r3, [r4, #0]
   1d57a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d57e:	9201      	str	r2, [sp, #4]
   1d580:	f000 f8aa 	bl	1d6d8 <__gnu_Unwind_Save_WMMXC>
   1d584:	9a01      	ldr	r2, [sp, #4]
   1d586:	e72f      	b.n	1d3e8 <_Unwind_VRS_Pop+0x3c>
   1d588:	3104      	adds	r1, #4
   1d58a:	63a1      	str	r1, [r4, #56]	; 0x38
   1d58c:	a822      	add	r0, sp, #136	; 0x88
   1d58e:	f000 f83d 	bl	1d60c <__gnu_Unwind_Restore_VFP>
   1d592:	e7b7      	b.n	1d504 <_Unwind_VRS_Pop+0x158>
   1d594:	2f00      	cmp	r7, #0
   1d596:	d199      	bne.n	1d4cc <_Unwind_VRS_Pop+0x120>
   1d598:	4601      	mov	r1, r0
   1d59a:	e7aa      	b.n	1d4f2 <_Unwind_VRS_Pop+0x146>
   1d59c:	f023 0308 	bic.w	r3, r3, #8
   1d5a0:	6023      	str	r3, [r4, #0]
   1d5a2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d5a6:	f000 f86b 	bl	1d680 <__gnu_Unwind_Save_WMMXD>
   1d5aa:	e742      	b.n	1d432 <_Unwind_VRS_Pop+0x86>
   1d5ac:	4620      	mov	r0, r4
   1d5ae:	f022 0204 	bic.w	r2, r2, #4
   1d5b2:	f840 2bd0 	str.w	r2, [r0], #208
   1d5b6:	9301      	str	r3, [sp, #4]
   1d5b8:	f000 f83c 	bl	1d634 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d5bc:	9b01      	ldr	r3, [sp, #4]
   1d5be:	e7af      	b.n	1d520 <_Unwind_VRS_Pop+0x174>
   1d5c0:	a822      	add	r0, sp, #136	; 0x88
   1d5c2:	9301      	str	r3, [sp, #4]
   1d5c4:	f000 f826 	bl	1d614 <__gnu_Unwind_Save_VFP>
   1d5c8:	9b01      	ldr	r3, [sp, #4]
   1d5ca:	e7b9      	b.n	1d540 <_Unwind_VRS_Pop+0x194>
   1d5cc:	f041 0102 	orr.w	r1, r1, #2
   1d5d0:	f840 1b48 	str.w	r1, [r0], #72
   1d5d4:	f000 f826 	bl	1d624 <__gnu_Unwind_Save_VFP_D>
   1d5d8:	9b01      	ldr	r3, [sp, #4]
   1d5da:	e79c      	b.n	1d516 <_Unwind_VRS_Pop+0x16a>
   1d5dc:	2b01      	cmp	r3, #1
   1d5de:	d003      	beq.n	1d5e8 <_Unwind_VRS_Pop+0x23c>
   1d5e0:	2e0f      	cmp	r6, #15
   1d5e2:	f63f af5f 	bhi.w	1d4a4 <_Unwind_VRS_Pop+0xf8>
   1d5e6:	e79f      	b.n	1d528 <_Unwind_VRS_Pop+0x17c>
   1d5e8:	a822      	add	r0, sp, #136	; 0x88
   1d5ea:	9301      	str	r3, [sp, #4]
   1d5ec:	f000 f812 	bl	1d614 <__gnu_Unwind_Save_VFP>
   1d5f0:	9b01      	ldr	r3, [sp, #4]
   1d5f2:	e757      	b.n	1d4a4 <_Unwind_VRS_Pop+0xf8>

0001d5f4 <__restore_core_regs>:
   1d5f4:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1d5f8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1d5fc:	469c      	mov	ip, r3
   1d5fe:	46a6      	mov	lr, r4
   1d600:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1d604:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1d608:	46e5      	mov	sp, ip
   1d60a:	bd00      	pop	{pc}

0001d60c <__gnu_Unwind_Restore_VFP>:
   1d60c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1d610:	4770      	bx	lr
   1d612:	bf00      	nop

0001d614 <__gnu_Unwind_Save_VFP>:
   1d614:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1d618:	4770      	bx	lr
   1d61a:	bf00      	nop

0001d61c <__gnu_Unwind_Restore_VFP_D>:
   1d61c:	ec90 0b20 	vldmia	r0, {d0-d15}
   1d620:	4770      	bx	lr
   1d622:	bf00      	nop

0001d624 <__gnu_Unwind_Save_VFP_D>:
   1d624:	ec80 0b20 	vstmia	r0, {d0-d15}
   1d628:	4770      	bx	lr
   1d62a:	bf00      	nop

0001d62c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1d62c:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1d630:	4770      	bx	lr
   1d632:	bf00      	nop

0001d634 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1d634:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1d638:	4770      	bx	lr
   1d63a:	bf00      	nop

0001d63c <__gnu_Unwind_Restore_WMMXD>:
   1d63c:	ecf0 0102 	ldfe	f0, [r0], #8
   1d640:	ecf0 1102 	ldfe	f1, [r0], #8
   1d644:	ecf0 2102 	ldfe	f2, [r0], #8
   1d648:	ecf0 3102 	ldfe	f3, [r0], #8
   1d64c:	ecf0 4102 	ldfe	f4, [r0], #8
   1d650:	ecf0 5102 	ldfe	f5, [r0], #8
   1d654:	ecf0 6102 	ldfe	f6, [r0], #8
   1d658:	ecf0 7102 	ldfe	f7, [r0], #8
   1d65c:	ecf0 8102 	ldfp	f0, [r0], #8
   1d660:	ecf0 9102 	ldfp	f1, [r0], #8
   1d664:	ecf0 a102 	ldfp	f2, [r0], #8
   1d668:	ecf0 b102 	ldfp	f3, [r0], #8
   1d66c:	ecf0 c102 	ldfp	f4, [r0], #8
   1d670:	ecf0 d102 	ldfp	f5, [r0], #8
   1d674:	ecf0 e102 	ldfp	f6, [r0], #8
   1d678:	ecf0 f102 	ldfp	f7, [r0], #8
   1d67c:	4770      	bx	lr
   1d67e:	bf00      	nop

0001d680 <__gnu_Unwind_Save_WMMXD>:
   1d680:	ece0 0102 	stfe	f0, [r0], #8
   1d684:	ece0 1102 	stfe	f1, [r0], #8
   1d688:	ece0 2102 	stfe	f2, [r0], #8
   1d68c:	ece0 3102 	stfe	f3, [r0], #8
   1d690:	ece0 4102 	stfe	f4, [r0], #8
   1d694:	ece0 5102 	stfe	f5, [r0], #8
   1d698:	ece0 6102 	stfe	f6, [r0], #8
   1d69c:	ece0 7102 	stfe	f7, [r0], #8
   1d6a0:	ece0 8102 	stfp	f0, [r0], #8
   1d6a4:	ece0 9102 	stfp	f1, [r0], #8
   1d6a8:	ece0 a102 	stfp	f2, [r0], #8
   1d6ac:	ece0 b102 	stfp	f3, [r0], #8
   1d6b0:	ece0 c102 	stfp	f4, [r0], #8
   1d6b4:	ece0 d102 	stfp	f5, [r0], #8
   1d6b8:	ece0 e102 	stfp	f6, [r0], #8
   1d6bc:	ece0 f102 	stfp	f7, [r0], #8
   1d6c0:	4770      	bx	lr
   1d6c2:	bf00      	nop

0001d6c4 <__gnu_Unwind_Restore_WMMXC>:
   1d6c4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d6c8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d6cc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d6d0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d6d4:	4770      	bx	lr
   1d6d6:	bf00      	nop

0001d6d8 <__gnu_Unwind_Save_WMMXC>:
   1d6d8:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d6dc:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d6e0:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d6e4:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d6e8:	4770      	bx	lr
   1d6ea:	bf00      	nop

0001d6ec <_Unwind_RaiseException>:
   1d6ec:	46ec      	mov	ip, sp
   1d6ee:	b500      	push	{lr}
   1d6f0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d6f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d6f8:	f04f 0300 	mov.w	r3, #0
   1d6fc:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d700:	a901      	add	r1, sp, #4
   1d702:	f7ff fbf3 	bl	1ceec <__gnu_Unwind_RaiseException>
   1d706:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d70a:	b012      	add	sp, #72	; 0x48
   1d70c:	4770      	bx	lr
   1d70e:	bf00      	nop

0001d710 <_Unwind_Resume>:
   1d710:	46ec      	mov	ip, sp
   1d712:	b500      	push	{lr}
   1d714:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d718:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d71c:	f04f 0300 	mov.w	r3, #0
   1d720:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d724:	a901      	add	r1, sp, #4
   1d726:	f7ff fc1b 	bl	1cf60 <__gnu_Unwind_Resume>
   1d72a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d72e:	b012      	add	sp, #72	; 0x48
   1d730:	4770      	bx	lr
   1d732:	bf00      	nop

0001d734 <_Unwind_Resume_or_Rethrow>:
   1d734:	46ec      	mov	ip, sp
   1d736:	b500      	push	{lr}
   1d738:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d73c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d740:	f04f 0300 	mov.w	r3, #0
   1d744:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d748:	a901      	add	r1, sp, #4
   1d74a:	f7ff fc2b 	bl	1cfa4 <__gnu_Unwind_Resume_or_Rethrow>
   1d74e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d752:	b012      	add	sp, #72	; 0x48
   1d754:	4770      	bx	lr
   1d756:	bf00      	nop

0001d758 <_Unwind_ForcedUnwind>:
   1d758:	46ec      	mov	ip, sp
   1d75a:	b500      	push	{lr}
   1d75c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d760:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d764:	f04f 0300 	mov.w	r3, #0
   1d768:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d76c:	ab01      	add	r3, sp, #4
   1d76e:	f7ff fbed 	bl	1cf4c <__gnu_Unwind_ForcedUnwind>
   1d772:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d776:	b012      	add	sp, #72	; 0x48
   1d778:	4770      	bx	lr
   1d77a:	bf00      	nop

0001d77c <_Unwind_Backtrace>:
   1d77c:	46ec      	mov	ip, sp
   1d77e:	b500      	push	{lr}
   1d780:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d784:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d788:	f04f 0300 	mov.w	r3, #0
   1d78c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d790:	aa01      	add	r2, sp, #4
   1d792:	f7ff fc65 	bl	1d060 <__gnu_Unwind_Backtrace>
   1d796:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d79a:	b012      	add	sp, #72	; 0x48
   1d79c:	4770      	bx	lr
   1d79e:	bf00      	nop

0001d7a0 <next_unwind_byte>:
   1d7a0:	7a02      	ldrb	r2, [r0, #8]
   1d7a2:	b91a      	cbnz	r2, 1d7ac <next_unwind_byte+0xc>
   1d7a4:	7a43      	ldrb	r3, [r0, #9]
   1d7a6:	b943      	cbnz	r3, 1d7ba <next_unwind_byte+0x1a>
   1d7a8:	20b0      	movs	r0, #176	; 0xb0
   1d7aa:	4770      	bx	lr
   1d7ac:	6803      	ldr	r3, [r0, #0]
   1d7ae:	3a01      	subs	r2, #1
   1d7b0:	7202      	strb	r2, [r0, #8]
   1d7b2:	021a      	lsls	r2, r3, #8
   1d7b4:	6002      	str	r2, [r0, #0]
   1d7b6:	0e18      	lsrs	r0, r3, #24
   1d7b8:	4770      	bx	lr
   1d7ba:	6842      	ldr	r2, [r0, #4]
   1d7bc:	3b01      	subs	r3, #1
   1d7be:	b410      	push	{r4}
   1d7c0:	7243      	strb	r3, [r0, #9]
   1d7c2:	6813      	ldr	r3, [r2, #0]
   1d7c4:	2103      	movs	r1, #3
   1d7c6:	1d14      	adds	r4, r2, #4
   1d7c8:	7201      	strb	r1, [r0, #8]
   1d7ca:	021a      	lsls	r2, r3, #8
   1d7cc:	6044      	str	r4, [r0, #4]
   1d7ce:	6002      	str	r2, [r0, #0]
   1d7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d7d4:	0e18      	lsrs	r0, r3, #24
   1d7d6:	4770      	bx	lr

0001d7d8 <_Unwind_GetGR.constprop.0>:
   1d7d8:	b500      	push	{lr}
   1d7da:	b085      	sub	sp, #20
   1d7dc:	aa03      	add	r2, sp, #12
   1d7de:	2300      	movs	r3, #0
   1d7e0:	9200      	str	r2, [sp, #0]
   1d7e2:	4619      	mov	r1, r3
   1d7e4:	220c      	movs	r2, #12
   1d7e6:	f7ff fbed 	bl	1cfc4 <_Unwind_VRS_Get>
   1d7ea:	9803      	ldr	r0, [sp, #12]
   1d7ec:	b005      	add	sp, #20
   1d7ee:	f85d fb04 	ldr.w	pc, [sp], #4
   1d7f2:	bf00      	nop

0001d7f4 <unwind_UCB_from_context>:
   1d7f4:	e7f0      	b.n	1d7d8 <_Unwind_GetGR.constprop.0>
   1d7f6:	bf00      	nop

0001d7f8 <__gnu_unwind_execute>:
   1d7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d7fc:	4606      	mov	r6, r0
   1d7fe:	b085      	sub	sp, #20
   1d800:	460f      	mov	r7, r1
   1d802:	f04f 0800 	mov.w	r8, #0
   1d806:	4638      	mov	r0, r7
   1d808:	f7ff ffca 	bl	1d7a0 <next_unwind_byte>
   1d80c:	28b0      	cmp	r0, #176	; 0xb0
   1d80e:	4604      	mov	r4, r0
   1d810:	d023      	beq.n	1d85a <__gnu_unwind_execute+0x62>
   1d812:	0605      	lsls	r5, r0, #24
   1d814:	d427      	bmi.n	1d866 <__gnu_unwind_execute+0x6e>
   1d816:	2300      	movs	r3, #0
   1d818:	f10d 090c 	add.w	r9, sp, #12
   1d81c:	4619      	mov	r1, r3
   1d81e:	0085      	lsls	r5, r0, #2
   1d820:	220d      	movs	r2, #13
   1d822:	f8cd 9000 	str.w	r9, [sp]
   1d826:	4630      	mov	r0, r6
   1d828:	f7ff fbcc 	bl	1cfc4 <_Unwind_VRS_Get>
   1d82c:	b2ed      	uxtb	r5, r5
   1d82e:	9b03      	ldr	r3, [sp, #12]
   1d830:	f8cd 9000 	str.w	r9, [sp]
   1d834:	0660      	lsls	r0, r4, #25
   1d836:	f105 0504 	add.w	r5, r5, #4
   1d83a:	bf4c      	ite	mi
   1d83c:	1b5d      	submi	r5, r3, r5
   1d83e:	18ed      	addpl	r5, r5, r3
   1d840:	2300      	movs	r3, #0
   1d842:	4619      	mov	r1, r3
   1d844:	220d      	movs	r2, #13
   1d846:	4630      	mov	r0, r6
   1d848:	9503      	str	r5, [sp, #12]
   1d84a:	f7ff fbe1 	bl	1d010 <_Unwind_VRS_Set>
   1d84e:	4638      	mov	r0, r7
   1d850:	f7ff ffa6 	bl	1d7a0 <next_unwind_byte>
   1d854:	28b0      	cmp	r0, #176	; 0xb0
   1d856:	4604      	mov	r4, r0
   1d858:	d1db      	bne.n	1d812 <__gnu_unwind_execute+0x1a>
   1d85a:	f1b8 0f00 	cmp.w	r8, #0
   1d85e:	f000 8095 	beq.w	1d98c <__gnu_unwind_execute+0x194>
   1d862:	2000      	movs	r0, #0
   1d864:	e01c      	b.n	1d8a0 <__gnu_unwind_execute+0xa8>
   1d866:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d86a:	2b80      	cmp	r3, #128	; 0x80
   1d86c:	d05d      	beq.n	1d92a <__gnu_unwind_execute+0x132>
   1d86e:	2b90      	cmp	r3, #144	; 0x90
   1d870:	d019      	beq.n	1d8a6 <__gnu_unwind_execute+0xae>
   1d872:	2ba0      	cmp	r3, #160	; 0xa0
   1d874:	d02c      	beq.n	1d8d0 <__gnu_unwind_execute+0xd8>
   1d876:	2bb0      	cmp	r3, #176	; 0xb0
   1d878:	d03f      	beq.n	1d8fa <__gnu_unwind_execute+0x102>
   1d87a:	2bc0      	cmp	r3, #192	; 0xc0
   1d87c:	d06c      	beq.n	1d958 <__gnu_unwind_execute+0x160>
   1d87e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d882:	2bd0      	cmp	r3, #208	; 0xd0
   1d884:	d10b      	bne.n	1d89e <__gnu_unwind_execute+0xa6>
   1d886:	f000 0207 	and.w	r2, r0, #7
   1d88a:	3201      	adds	r2, #1
   1d88c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d890:	2305      	movs	r3, #5
   1d892:	2101      	movs	r1, #1
   1d894:	4630      	mov	r0, r6
   1d896:	f7ff fd89 	bl	1d3ac <_Unwind_VRS_Pop>
   1d89a:	2800      	cmp	r0, #0
   1d89c:	d0b3      	beq.n	1d806 <__gnu_unwind_execute+0xe>
   1d89e:	2009      	movs	r0, #9
   1d8a0:	b005      	add	sp, #20
   1d8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d8a6:	f000 030d 	and.w	r3, r0, #13
   1d8aa:	2b0d      	cmp	r3, #13
   1d8ac:	d0f7      	beq.n	1d89e <__gnu_unwind_execute+0xa6>
   1d8ae:	ad03      	add	r5, sp, #12
   1d8b0:	2300      	movs	r3, #0
   1d8b2:	f000 020f 	and.w	r2, r0, #15
   1d8b6:	4619      	mov	r1, r3
   1d8b8:	9500      	str	r5, [sp, #0]
   1d8ba:	4630      	mov	r0, r6
   1d8bc:	f7ff fb82 	bl	1cfc4 <_Unwind_VRS_Get>
   1d8c0:	2300      	movs	r3, #0
   1d8c2:	9500      	str	r5, [sp, #0]
   1d8c4:	4619      	mov	r1, r3
   1d8c6:	220d      	movs	r2, #13
   1d8c8:	4630      	mov	r0, r6
   1d8ca:	f7ff fba1 	bl	1d010 <_Unwind_VRS_Set>
   1d8ce:	e79a      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1d8d0:	43c2      	mvns	r2, r0
   1d8d2:	f002 0307 	and.w	r3, r2, #7
   1d8d6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d8da:	411a      	asrs	r2, r3
   1d8dc:	0701      	lsls	r1, r0, #28
   1d8de:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d8e2:	f04f 0300 	mov.w	r3, #0
   1d8e6:	bf48      	it	mi
   1d8e8:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d8ec:	4619      	mov	r1, r3
   1d8ee:	4630      	mov	r0, r6
   1d8f0:	f7ff fd5c 	bl	1d3ac <_Unwind_VRS_Pop>
   1d8f4:	2800      	cmp	r0, #0
   1d8f6:	d1d2      	bne.n	1d89e <__gnu_unwind_execute+0xa6>
   1d8f8:	e785      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1d8fa:	28b1      	cmp	r0, #177	; 0xb1
   1d8fc:	d057      	beq.n	1d9ae <__gnu_unwind_execute+0x1b6>
   1d8fe:	28b2      	cmp	r0, #178	; 0xb2
   1d900:	d068      	beq.n	1d9d4 <__gnu_unwind_execute+0x1dc>
   1d902:	28b3      	cmp	r0, #179	; 0xb3
   1d904:	f000 8095 	beq.w	1da32 <__gnu_unwind_execute+0x23a>
   1d908:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d90c:	2bb4      	cmp	r3, #180	; 0xb4
   1d90e:	d0c6      	beq.n	1d89e <__gnu_unwind_execute+0xa6>
   1d910:	f000 0207 	and.w	r2, r0, #7
   1d914:	3201      	adds	r2, #1
   1d916:	2301      	movs	r3, #1
   1d918:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d91c:	4619      	mov	r1, r3
   1d91e:	4630      	mov	r0, r6
   1d920:	f7ff fd44 	bl	1d3ac <_Unwind_VRS_Pop>
   1d924:	2800      	cmp	r0, #0
   1d926:	d1ba      	bne.n	1d89e <__gnu_unwind_execute+0xa6>
   1d928:	e76d      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1d92a:	4638      	mov	r0, r7
   1d92c:	f7ff ff38 	bl	1d7a0 <next_unwind_byte>
   1d930:	0224      	lsls	r4, r4, #8
   1d932:	4304      	orrs	r4, r0
   1d934:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d938:	d0b1      	beq.n	1d89e <__gnu_unwind_execute+0xa6>
   1d93a:	0124      	lsls	r4, r4, #4
   1d93c:	2300      	movs	r3, #0
   1d93e:	b2a2      	uxth	r2, r4
   1d940:	4619      	mov	r1, r3
   1d942:	4630      	mov	r0, r6
   1d944:	f7ff fd32 	bl	1d3ac <_Unwind_VRS_Pop>
   1d948:	2800      	cmp	r0, #0
   1d94a:	d1a8      	bne.n	1d89e <__gnu_unwind_execute+0xa6>
   1d94c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d950:	bf18      	it	ne
   1d952:	f04f 0801 	movne.w	r8, #1
   1d956:	e756      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1d958:	28c6      	cmp	r0, #198	; 0xc6
   1d95a:	d07d      	beq.n	1da58 <__gnu_unwind_execute+0x260>
   1d95c:	28c7      	cmp	r0, #199	; 0xc7
   1d95e:	f000 8086 	beq.w	1da6e <__gnu_unwind_execute+0x276>
   1d962:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d966:	2bc0      	cmp	r3, #192	; 0xc0
   1d968:	f000 8094 	beq.w	1da94 <__gnu_unwind_execute+0x29c>
   1d96c:	28c8      	cmp	r0, #200	; 0xc8
   1d96e:	f000 809f 	beq.w	1dab0 <__gnu_unwind_execute+0x2b8>
   1d972:	28c9      	cmp	r0, #201	; 0xc9
   1d974:	d193      	bne.n	1d89e <__gnu_unwind_execute+0xa6>
   1d976:	4638      	mov	r0, r7
   1d978:	f7ff ff12 	bl	1d7a0 <next_unwind_byte>
   1d97c:	0302      	lsls	r2, r0, #12
   1d97e:	f000 000f 	and.w	r0, r0, #15
   1d982:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d986:	3001      	adds	r0, #1
   1d988:	4302      	orrs	r2, r0
   1d98a:	e781      	b.n	1d890 <__gnu_unwind_execute+0x98>
   1d98c:	ac03      	add	r4, sp, #12
   1d98e:	4643      	mov	r3, r8
   1d990:	220e      	movs	r2, #14
   1d992:	4641      	mov	r1, r8
   1d994:	9400      	str	r4, [sp, #0]
   1d996:	4630      	mov	r0, r6
   1d998:	f7ff fb14 	bl	1cfc4 <_Unwind_VRS_Get>
   1d99c:	9400      	str	r4, [sp, #0]
   1d99e:	4630      	mov	r0, r6
   1d9a0:	4643      	mov	r3, r8
   1d9a2:	220f      	movs	r2, #15
   1d9a4:	4641      	mov	r1, r8
   1d9a6:	f7ff fb33 	bl	1d010 <_Unwind_VRS_Set>
   1d9aa:	4640      	mov	r0, r8
   1d9ac:	e778      	b.n	1d8a0 <__gnu_unwind_execute+0xa8>
   1d9ae:	4638      	mov	r0, r7
   1d9b0:	f7ff fef6 	bl	1d7a0 <next_unwind_byte>
   1d9b4:	2800      	cmp	r0, #0
   1d9b6:	f43f af72 	beq.w	1d89e <__gnu_unwind_execute+0xa6>
   1d9ba:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d9be:	f47f af6e 	bne.w	1d89e <__gnu_unwind_execute+0xa6>
   1d9c2:	4602      	mov	r2, r0
   1d9c4:	4619      	mov	r1, r3
   1d9c6:	4630      	mov	r0, r6
   1d9c8:	f7ff fcf0 	bl	1d3ac <_Unwind_VRS_Pop>
   1d9cc:	2800      	cmp	r0, #0
   1d9ce:	f47f af66 	bne.w	1d89e <__gnu_unwind_execute+0xa6>
   1d9d2:	e718      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1d9d4:	2300      	movs	r3, #0
   1d9d6:	f10d 090c 	add.w	r9, sp, #12
   1d9da:	220d      	movs	r2, #13
   1d9dc:	4619      	mov	r1, r3
   1d9de:	f8cd 9000 	str.w	r9, [sp]
   1d9e2:	4630      	mov	r0, r6
   1d9e4:	f7ff faee 	bl	1cfc4 <_Unwind_VRS_Get>
   1d9e8:	4638      	mov	r0, r7
   1d9ea:	f7ff fed9 	bl	1d7a0 <next_unwind_byte>
   1d9ee:	0602      	lsls	r2, r0, #24
   1d9f0:	f04f 0402 	mov.w	r4, #2
   1d9f4:	d50c      	bpl.n	1da10 <__gnu_unwind_execute+0x218>
   1d9f6:	9b03      	ldr	r3, [sp, #12]
   1d9f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d9fc:	40a0      	lsls	r0, r4
   1d9fe:	4403      	add	r3, r0
   1da00:	4638      	mov	r0, r7
   1da02:	9303      	str	r3, [sp, #12]
   1da04:	f7ff fecc 	bl	1d7a0 <next_unwind_byte>
   1da08:	0603      	lsls	r3, r0, #24
   1da0a:	f104 0407 	add.w	r4, r4, #7
   1da0e:	d4f2      	bmi.n	1d9f6 <__gnu_unwind_execute+0x1fe>
   1da10:	9b03      	ldr	r3, [sp, #12]
   1da12:	f8cd 9000 	str.w	r9, [sp]
   1da16:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1da1a:	40a2      	lsls	r2, r4
   1da1c:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1da20:	2300      	movs	r3, #0
   1da22:	4414      	add	r4, r2
   1da24:	4619      	mov	r1, r3
   1da26:	220d      	movs	r2, #13
   1da28:	4630      	mov	r0, r6
   1da2a:	9403      	str	r4, [sp, #12]
   1da2c:	f7ff faf0 	bl	1d010 <_Unwind_VRS_Set>
   1da30:	e6e9      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1da32:	4638      	mov	r0, r7
   1da34:	f7ff feb4 	bl	1d7a0 <next_unwind_byte>
   1da38:	0301      	lsls	r1, r0, #12
   1da3a:	f000 000f 	and.w	r0, r0, #15
   1da3e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1da42:	1c42      	adds	r2, r0, #1
   1da44:	2301      	movs	r3, #1
   1da46:	430a      	orrs	r2, r1
   1da48:	4630      	mov	r0, r6
   1da4a:	4619      	mov	r1, r3
   1da4c:	f7ff fcae 	bl	1d3ac <_Unwind_VRS_Pop>
   1da50:	2800      	cmp	r0, #0
   1da52:	f47f af24 	bne.w	1d89e <__gnu_unwind_execute+0xa6>
   1da56:	e6d6      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1da58:	4638      	mov	r0, r7
   1da5a:	f7ff fea1 	bl	1d7a0 <next_unwind_byte>
   1da5e:	0301      	lsls	r1, r0, #12
   1da60:	f000 000f 	and.w	r0, r0, #15
   1da64:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1da68:	1c42      	adds	r2, r0, #1
   1da6a:	2303      	movs	r3, #3
   1da6c:	e7eb      	b.n	1da46 <__gnu_unwind_execute+0x24e>
   1da6e:	4638      	mov	r0, r7
   1da70:	f7ff fe96 	bl	1d7a0 <next_unwind_byte>
   1da74:	2800      	cmp	r0, #0
   1da76:	f43f af12 	beq.w	1d89e <__gnu_unwind_execute+0xa6>
   1da7a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1da7e:	f47f af0e 	bne.w	1d89e <__gnu_unwind_execute+0xa6>
   1da82:	4602      	mov	r2, r0
   1da84:	2104      	movs	r1, #4
   1da86:	4630      	mov	r0, r6
   1da88:	f7ff fc90 	bl	1d3ac <_Unwind_VRS_Pop>
   1da8c:	2800      	cmp	r0, #0
   1da8e:	f47f af06 	bne.w	1d89e <__gnu_unwind_execute+0xa6>
   1da92:	e6b8      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1da94:	f000 020f 	and.w	r2, r0, #15
   1da98:	3201      	adds	r2, #1
   1da9a:	2303      	movs	r3, #3
   1da9c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1daa0:	4619      	mov	r1, r3
   1daa2:	4630      	mov	r0, r6
   1daa4:	f7ff fc82 	bl	1d3ac <_Unwind_VRS_Pop>
   1daa8:	2800      	cmp	r0, #0
   1daaa:	f47f aef8 	bne.w	1d89e <__gnu_unwind_execute+0xa6>
   1daae:	e6aa      	b.n	1d806 <__gnu_unwind_execute+0xe>
   1dab0:	4638      	mov	r0, r7
   1dab2:	f7ff fe75 	bl	1d7a0 <next_unwind_byte>
   1dab6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1daba:	f000 030f 	and.w	r3, r0, #15
   1dabe:	3210      	adds	r2, #16
   1dac0:	3301      	adds	r3, #1
   1dac2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1dac6:	e6e3      	b.n	1d890 <__gnu_unwind_execute+0x98>

0001dac8 <__gnu_unwind_frame>:
   1dac8:	b510      	push	{r4, lr}
   1daca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1dacc:	b084      	sub	sp, #16
   1dace:	685a      	ldr	r2, [r3, #4]
   1dad0:	2003      	movs	r0, #3
   1dad2:	f88d 000c 	strb.w	r0, [sp, #12]
   1dad6:	79dc      	ldrb	r4, [r3, #7]
   1dad8:	f88d 400d 	strb.w	r4, [sp, #13]
   1dadc:	0212      	lsls	r2, r2, #8
   1dade:	3308      	adds	r3, #8
   1dae0:	4608      	mov	r0, r1
   1dae2:	a901      	add	r1, sp, #4
   1dae4:	9201      	str	r2, [sp, #4]
   1dae6:	9302      	str	r3, [sp, #8]
   1dae8:	f7ff fe86 	bl	1d7f8 <__gnu_unwind_execute>
   1daec:	b004      	add	sp, #16
   1daee:	bd10      	pop	{r4, pc}

0001daf0 <_Unwind_GetRegionStart>:
   1daf0:	b508      	push	{r3, lr}
   1daf2:	f7ff fe7f 	bl	1d7f4 <unwind_UCB_from_context>
   1daf6:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1daf8:	bd08      	pop	{r3, pc}
   1dafa:	bf00      	nop

0001dafc <_Unwind_GetLanguageSpecificData>:
   1dafc:	b508      	push	{r3, lr}
   1dafe:	f7ff fe79 	bl	1d7f4 <unwind_UCB_from_context>
   1db02:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1db04:	79c3      	ldrb	r3, [r0, #7]
   1db06:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1db0a:	3008      	adds	r0, #8
   1db0c:	bd08      	pop	{r3, pc}
   1db0e:	bf00      	nop

0001db10 <_Unwind_GetTextRelBase>:
   1db10:	b508      	push	{r3, lr}
   1db12:	f000 f807 	bl	1db24 <abort>
   1db16:	bf00      	nop

0001db18 <_Unwind_GetDataRelBase>:
   1db18:	b508      	push	{r3, lr}
   1db1a:	f7ff fff9 	bl	1db10 <_Unwind_GetTextRelBase>
   1db1e:	bf00      	nop

0001db20 <__aeabi_idiv0>:
   1db20:	4770      	bx	lr
   1db22:	bf00      	nop

0001db24 <abort>:
   1db24:	b508      	push	{r3, lr}
   1db26:	2006      	movs	r0, #6
   1db28:	f001 f96a 	bl	1ee00 <raise>
   1db2c:	2001      	movs	r0, #1
   1db2e:	f005 f907 	bl	22d40 <_exit>
   1db32:	bf00      	nop

0001db34 <__errno>:
   1db34:	4b01      	ldr	r3, [pc, #4]	; (1db3c <__errno+0x8>)
   1db36:	6818      	ldr	r0, [r3, #0]
   1db38:	4770      	bx	lr
   1db3a:	bf00      	nop
   1db3c:	20000108 	.word	0x20000108

0001db40 <fputc>:
   1db40:	4b14      	ldr	r3, [pc, #80]	; (1db94 <fputc+0x54>)
   1db42:	b570      	push	{r4, r5, r6, lr}
   1db44:	681d      	ldr	r5, [r3, #0]
   1db46:	4606      	mov	r6, r0
   1db48:	460c      	mov	r4, r1
   1db4a:	b10d      	cbz	r5, 1db50 <fputc+0x10>
   1db4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1db4e:	b1c3      	cbz	r3, 1db82 <fputc+0x42>
   1db50:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1db52:	07d8      	lsls	r0, r3, #31
   1db54:	d402      	bmi.n	1db5c <fputc+0x1c>
   1db56:	89a3      	ldrh	r3, [r4, #12]
   1db58:	0599      	lsls	r1, r3, #22
   1db5a:	d516      	bpl.n	1db8a <fputc+0x4a>
   1db5c:	4628      	mov	r0, r5
   1db5e:	4622      	mov	r2, r4
   1db60:	4631      	mov	r1, r6
   1db62:	f000 ff25 	bl	1e9b0 <_putc_r>
   1db66:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1db68:	07da      	lsls	r2, r3, #31
   1db6a:	4605      	mov	r5, r0
   1db6c:	d402      	bmi.n	1db74 <fputc+0x34>
   1db6e:	89a3      	ldrh	r3, [r4, #12]
   1db70:	059b      	lsls	r3, r3, #22
   1db72:	d501      	bpl.n	1db78 <fputc+0x38>
   1db74:	4628      	mov	r0, r5
   1db76:	bd70      	pop	{r4, r5, r6, pc}
   1db78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1db7a:	f000 fa65 	bl	1e048 <__retarget_lock_release_recursive>
   1db7e:	4628      	mov	r0, r5
   1db80:	bd70      	pop	{r4, r5, r6, pc}
   1db82:	4628      	mov	r0, r5
   1db84:	f003 fff6 	bl	21b74 <__sinit>
   1db88:	e7e2      	b.n	1db50 <fputc+0x10>
   1db8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1db8c:	f000 fa5a 	bl	1e044 <__retarget_lock_acquire_recursive>
   1db90:	e7e4      	b.n	1db5c <fputc+0x1c>
   1db92:	bf00      	nop
   1db94:	20000108 	.word	0x20000108

0001db98 <_fputs_r>:
   1db98:	b530      	push	{r4, r5, lr}
   1db9a:	b087      	sub	sp, #28
   1db9c:	4605      	mov	r5, r0
   1db9e:	4608      	mov	r0, r1
   1dba0:	4614      	mov	r4, r2
   1dba2:	9101      	str	r1, [sp, #4]
   1dba4:	f001 fb2c 	bl	1f200 <strlen>
   1dba8:	aa01      	add	r2, sp, #4
   1dbaa:	2301      	movs	r3, #1
   1dbac:	9005      	str	r0, [sp, #20]
   1dbae:	9002      	str	r0, [sp, #8]
   1dbb0:	9203      	str	r2, [sp, #12]
   1dbb2:	9304      	str	r3, [sp, #16]
   1dbb4:	b10d      	cbz	r5, 1dbba <_fputs_r+0x22>
   1dbb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1dbb8:	b333      	cbz	r3, 1dc08 <_fputs_r+0x70>
   1dbba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1dbbc:	f013 0f01 	tst.w	r3, #1
   1dbc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dbc4:	b29a      	uxth	r2, r3
   1dbc6:	d101      	bne.n	1dbcc <_fputs_r+0x34>
   1dbc8:	0590      	lsls	r0, r2, #22
   1dbca:	d521      	bpl.n	1dc10 <_fputs_r+0x78>
   1dbcc:	0491      	lsls	r1, r2, #18
   1dbce:	d406      	bmi.n	1dbde <_fputs_r+0x46>
   1dbd0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1dbd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1dbd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1dbda:	81a3      	strh	r3, [r4, #12]
   1dbdc:	6662      	str	r2, [r4, #100]	; 0x64
   1dbde:	4628      	mov	r0, r5
   1dbe0:	aa03      	add	r2, sp, #12
   1dbe2:	4621      	mov	r1, r4
   1dbe4:	f000 f824 	bl	1dc30 <__sfvwrite_r>
   1dbe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1dbea:	07da      	lsls	r2, r3, #31
   1dbec:	4605      	mov	r5, r0
   1dbee:	d402      	bmi.n	1dbf6 <_fputs_r+0x5e>
   1dbf0:	89a3      	ldrh	r3, [r4, #12]
   1dbf2:	059b      	lsls	r3, r3, #22
   1dbf4:	d502      	bpl.n	1dbfc <_fputs_r+0x64>
   1dbf6:	4628      	mov	r0, r5
   1dbf8:	b007      	add	sp, #28
   1dbfa:	bd30      	pop	{r4, r5, pc}
   1dbfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dbfe:	f000 fa23 	bl	1e048 <__retarget_lock_release_recursive>
   1dc02:	4628      	mov	r0, r5
   1dc04:	b007      	add	sp, #28
   1dc06:	bd30      	pop	{r4, r5, pc}
   1dc08:	4628      	mov	r0, r5
   1dc0a:	f003 ffb3 	bl	21b74 <__sinit>
   1dc0e:	e7d4      	b.n	1dbba <_fputs_r+0x22>
   1dc10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dc12:	f000 fa17 	bl	1e044 <__retarget_lock_acquire_recursive>
   1dc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dc1a:	b29a      	uxth	r2, r3
   1dc1c:	e7d6      	b.n	1dbcc <_fputs_r+0x34>
   1dc1e:	bf00      	nop

0001dc20 <fputs>:
   1dc20:	4b02      	ldr	r3, [pc, #8]	; (1dc2c <fputs+0xc>)
   1dc22:	460a      	mov	r2, r1
   1dc24:	4601      	mov	r1, r0
   1dc26:	6818      	ldr	r0, [r3, #0]
   1dc28:	f7ff bfb6 	b.w	1db98 <_fputs_r>
   1dc2c:	20000108 	.word	0x20000108

0001dc30 <__sfvwrite_r>:
   1dc30:	6893      	ldr	r3, [r2, #8]
   1dc32:	2b00      	cmp	r3, #0
   1dc34:	d073      	beq.n	1dd1e <__sfvwrite_r+0xee>
   1dc36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc3a:	898b      	ldrh	r3, [r1, #12]
   1dc3c:	b083      	sub	sp, #12
   1dc3e:	460c      	mov	r4, r1
   1dc40:	0719      	lsls	r1, r3, #28
   1dc42:	9000      	str	r0, [sp, #0]
   1dc44:	4616      	mov	r6, r2
   1dc46:	d526      	bpl.n	1dc96 <__sfvwrite_r+0x66>
   1dc48:	6922      	ldr	r2, [r4, #16]
   1dc4a:	b322      	cbz	r2, 1dc96 <__sfvwrite_r+0x66>
   1dc4c:	f013 0002 	ands.w	r0, r3, #2
   1dc50:	6835      	ldr	r5, [r6, #0]
   1dc52:	d02c      	beq.n	1dcae <__sfvwrite_r+0x7e>
   1dc54:	f04f 0900 	mov.w	r9, #0
   1dc58:	4fb0      	ldr	r7, [pc, #704]	; (1df1c <__sfvwrite_r+0x2ec>)
   1dc5a:	46c8      	mov	r8, r9
   1dc5c:	46b2      	mov	sl, r6
   1dc5e:	45b8      	cmp	r8, r7
   1dc60:	4643      	mov	r3, r8
   1dc62:	464a      	mov	r2, r9
   1dc64:	bf28      	it	cs
   1dc66:	463b      	movcs	r3, r7
   1dc68:	9800      	ldr	r0, [sp, #0]
   1dc6a:	f1b8 0f00 	cmp.w	r8, #0
   1dc6e:	d050      	beq.n	1dd12 <__sfvwrite_r+0xe2>
   1dc70:	69e1      	ldr	r1, [r4, #28]
   1dc72:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1dc74:	47b0      	blx	r6
   1dc76:	2800      	cmp	r0, #0
   1dc78:	dd58      	ble.n	1dd2c <__sfvwrite_r+0xfc>
   1dc7a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1dc7e:	1a1b      	subs	r3, r3, r0
   1dc80:	4481      	add	r9, r0
   1dc82:	eba8 0800 	sub.w	r8, r8, r0
   1dc86:	f8ca 3008 	str.w	r3, [sl, #8]
   1dc8a:	2b00      	cmp	r3, #0
   1dc8c:	d1e7      	bne.n	1dc5e <__sfvwrite_r+0x2e>
   1dc8e:	2000      	movs	r0, #0
   1dc90:	b003      	add	sp, #12
   1dc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc96:	4621      	mov	r1, r4
   1dc98:	9800      	ldr	r0, [sp, #0]
   1dc9a:	f002 fe43 	bl	20924 <__swsetup_r>
   1dc9e:	2800      	cmp	r0, #0
   1dca0:	f040 8133 	bne.w	1df0a <__sfvwrite_r+0x2da>
   1dca4:	89a3      	ldrh	r3, [r4, #12]
   1dca6:	6835      	ldr	r5, [r6, #0]
   1dca8:	f013 0002 	ands.w	r0, r3, #2
   1dcac:	d1d2      	bne.n	1dc54 <__sfvwrite_r+0x24>
   1dcae:	f013 0901 	ands.w	r9, r3, #1
   1dcb2:	d145      	bne.n	1dd40 <__sfvwrite_r+0x110>
   1dcb4:	464f      	mov	r7, r9
   1dcb6:	9601      	str	r6, [sp, #4]
   1dcb8:	b337      	cbz	r7, 1dd08 <__sfvwrite_r+0xd8>
   1dcba:	059a      	lsls	r2, r3, #22
   1dcbc:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1dcc0:	f140 8083 	bpl.w	1ddca <__sfvwrite_r+0x19a>
   1dcc4:	4547      	cmp	r7, r8
   1dcc6:	46c3      	mov	fp, r8
   1dcc8:	f0c0 80ab 	bcc.w	1de22 <__sfvwrite_r+0x1f2>
   1dccc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1dcd0:	f040 80ac 	bne.w	1de2c <__sfvwrite_r+0x1fc>
   1dcd4:	6820      	ldr	r0, [r4, #0]
   1dcd6:	46ba      	mov	sl, r7
   1dcd8:	465a      	mov	r2, fp
   1dcda:	4649      	mov	r1, r9
   1dcdc:	f000 fdaa 	bl	1e834 <memmove>
   1dce0:	68a2      	ldr	r2, [r4, #8]
   1dce2:	6823      	ldr	r3, [r4, #0]
   1dce4:	eba2 0208 	sub.w	r2, r2, r8
   1dce8:	445b      	add	r3, fp
   1dcea:	60a2      	str	r2, [r4, #8]
   1dcec:	6023      	str	r3, [r4, #0]
   1dcee:	9a01      	ldr	r2, [sp, #4]
   1dcf0:	6893      	ldr	r3, [r2, #8]
   1dcf2:	eba3 030a 	sub.w	r3, r3, sl
   1dcf6:	44d1      	add	r9, sl
   1dcf8:	eba7 070a 	sub.w	r7, r7, sl
   1dcfc:	6093      	str	r3, [r2, #8]
   1dcfe:	2b00      	cmp	r3, #0
   1dd00:	d0c5      	beq.n	1dc8e <__sfvwrite_r+0x5e>
   1dd02:	89a3      	ldrh	r3, [r4, #12]
   1dd04:	2f00      	cmp	r7, #0
   1dd06:	d1d8      	bne.n	1dcba <__sfvwrite_r+0x8a>
   1dd08:	f8d5 9000 	ldr.w	r9, [r5]
   1dd0c:	686f      	ldr	r7, [r5, #4]
   1dd0e:	3508      	adds	r5, #8
   1dd10:	e7d2      	b.n	1dcb8 <__sfvwrite_r+0x88>
   1dd12:	f8d5 9000 	ldr.w	r9, [r5]
   1dd16:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1dd1a:	3508      	adds	r5, #8
   1dd1c:	e79f      	b.n	1dc5e <__sfvwrite_r+0x2e>
   1dd1e:	2000      	movs	r0, #0
   1dd20:	4770      	bx	lr
   1dd22:	4621      	mov	r1, r4
   1dd24:	9800      	ldr	r0, [sp, #0]
   1dd26:	f003 fecd 	bl	21ac4 <_fflush_r>
   1dd2a:	b370      	cbz	r0, 1dd8a <__sfvwrite_r+0x15a>
   1dd2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dd34:	f04f 30ff 	mov.w	r0, #4294967295
   1dd38:	81a3      	strh	r3, [r4, #12]
   1dd3a:	b003      	add	sp, #12
   1dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd40:	4681      	mov	r9, r0
   1dd42:	4633      	mov	r3, r6
   1dd44:	464e      	mov	r6, r9
   1dd46:	46a8      	mov	r8, r5
   1dd48:	469a      	mov	sl, r3
   1dd4a:	464d      	mov	r5, r9
   1dd4c:	b34e      	cbz	r6, 1dda2 <__sfvwrite_r+0x172>
   1dd4e:	b380      	cbz	r0, 1ddb2 <__sfvwrite_r+0x182>
   1dd50:	6820      	ldr	r0, [r4, #0]
   1dd52:	6923      	ldr	r3, [r4, #16]
   1dd54:	6962      	ldr	r2, [r4, #20]
   1dd56:	45b1      	cmp	r9, r6
   1dd58:	46cb      	mov	fp, r9
   1dd5a:	bf28      	it	cs
   1dd5c:	46b3      	movcs	fp, r6
   1dd5e:	4298      	cmp	r0, r3
   1dd60:	465f      	mov	r7, fp
   1dd62:	d904      	bls.n	1dd6e <__sfvwrite_r+0x13e>
   1dd64:	68a3      	ldr	r3, [r4, #8]
   1dd66:	4413      	add	r3, r2
   1dd68:	459b      	cmp	fp, r3
   1dd6a:	f300 80a6 	bgt.w	1deba <__sfvwrite_r+0x28a>
   1dd6e:	4593      	cmp	fp, r2
   1dd70:	db4b      	blt.n	1de0a <__sfvwrite_r+0x1da>
   1dd72:	4613      	mov	r3, r2
   1dd74:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1dd76:	69e1      	ldr	r1, [r4, #28]
   1dd78:	9800      	ldr	r0, [sp, #0]
   1dd7a:	462a      	mov	r2, r5
   1dd7c:	47b8      	blx	r7
   1dd7e:	1e07      	subs	r7, r0, #0
   1dd80:	ddd4      	ble.n	1dd2c <__sfvwrite_r+0xfc>
   1dd82:	ebb9 0907 	subs.w	r9, r9, r7
   1dd86:	d0cc      	beq.n	1dd22 <__sfvwrite_r+0xf2>
   1dd88:	2001      	movs	r0, #1
   1dd8a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1dd8e:	1bdb      	subs	r3, r3, r7
   1dd90:	443d      	add	r5, r7
   1dd92:	1bf6      	subs	r6, r6, r7
   1dd94:	f8ca 3008 	str.w	r3, [sl, #8]
   1dd98:	2b00      	cmp	r3, #0
   1dd9a:	f43f af78 	beq.w	1dc8e <__sfvwrite_r+0x5e>
   1dd9e:	2e00      	cmp	r6, #0
   1dda0:	d1d5      	bne.n	1dd4e <__sfvwrite_r+0x11e>
   1dda2:	f108 0308 	add.w	r3, r8, #8
   1dda6:	e913 0060 	ldmdb	r3, {r5, r6}
   1ddaa:	4698      	mov	r8, r3
   1ddac:	3308      	adds	r3, #8
   1ddae:	2e00      	cmp	r6, #0
   1ddb0:	d0f9      	beq.n	1dda6 <__sfvwrite_r+0x176>
   1ddb2:	4632      	mov	r2, r6
   1ddb4:	210a      	movs	r1, #10
   1ddb6:	4628      	mov	r0, r5
   1ddb8:	f000 fc22 	bl	1e600 <memchr>
   1ddbc:	2800      	cmp	r0, #0
   1ddbe:	f000 80a1 	beq.w	1df04 <__sfvwrite_r+0x2d4>
   1ddc2:	3001      	adds	r0, #1
   1ddc4:	eba0 0905 	sub.w	r9, r0, r5
   1ddc8:	e7c2      	b.n	1dd50 <__sfvwrite_r+0x120>
   1ddca:	6820      	ldr	r0, [r4, #0]
   1ddcc:	6923      	ldr	r3, [r4, #16]
   1ddce:	4298      	cmp	r0, r3
   1ddd0:	d802      	bhi.n	1ddd8 <__sfvwrite_r+0x1a8>
   1ddd2:	6963      	ldr	r3, [r4, #20]
   1ddd4:	429f      	cmp	r7, r3
   1ddd6:	d25d      	bcs.n	1de94 <__sfvwrite_r+0x264>
   1ddd8:	45b8      	cmp	r8, r7
   1ddda:	bf28      	it	cs
   1dddc:	46b8      	movcs	r8, r7
   1ddde:	4642      	mov	r2, r8
   1dde0:	4649      	mov	r1, r9
   1dde2:	f000 fd27 	bl	1e834 <memmove>
   1dde6:	68a3      	ldr	r3, [r4, #8]
   1dde8:	6822      	ldr	r2, [r4, #0]
   1ddea:	eba3 0308 	sub.w	r3, r3, r8
   1ddee:	4442      	add	r2, r8
   1ddf0:	60a3      	str	r3, [r4, #8]
   1ddf2:	6022      	str	r2, [r4, #0]
   1ddf4:	b10b      	cbz	r3, 1ddfa <__sfvwrite_r+0x1ca>
   1ddf6:	46c2      	mov	sl, r8
   1ddf8:	e779      	b.n	1dcee <__sfvwrite_r+0xbe>
   1ddfa:	4621      	mov	r1, r4
   1ddfc:	9800      	ldr	r0, [sp, #0]
   1ddfe:	f003 fe61 	bl	21ac4 <_fflush_r>
   1de02:	2800      	cmp	r0, #0
   1de04:	d192      	bne.n	1dd2c <__sfvwrite_r+0xfc>
   1de06:	46c2      	mov	sl, r8
   1de08:	e771      	b.n	1dcee <__sfvwrite_r+0xbe>
   1de0a:	465a      	mov	r2, fp
   1de0c:	4629      	mov	r1, r5
   1de0e:	f000 fd11 	bl	1e834 <memmove>
   1de12:	68a2      	ldr	r2, [r4, #8]
   1de14:	6823      	ldr	r3, [r4, #0]
   1de16:	eba2 020b 	sub.w	r2, r2, fp
   1de1a:	445b      	add	r3, fp
   1de1c:	60a2      	str	r2, [r4, #8]
   1de1e:	6023      	str	r3, [r4, #0]
   1de20:	e7af      	b.n	1dd82 <__sfvwrite_r+0x152>
   1de22:	6820      	ldr	r0, [r4, #0]
   1de24:	46b8      	mov	r8, r7
   1de26:	46ba      	mov	sl, r7
   1de28:	46bb      	mov	fp, r7
   1de2a:	e755      	b.n	1dcd8 <__sfvwrite_r+0xa8>
   1de2c:	6962      	ldr	r2, [r4, #20]
   1de2e:	6820      	ldr	r0, [r4, #0]
   1de30:	6921      	ldr	r1, [r4, #16]
   1de32:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1de36:	eba0 0a01 	sub.w	sl, r0, r1
   1de3a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1de3e:	f10a 0001 	add.w	r0, sl, #1
   1de42:	ea4f 0868 	mov.w	r8, r8, asr #1
   1de46:	4438      	add	r0, r7
   1de48:	4540      	cmp	r0, r8
   1de4a:	4642      	mov	r2, r8
   1de4c:	bf84      	itt	hi
   1de4e:	4680      	movhi	r8, r0
   1de50:	4642      	movhi	r2, r8
   1de52:	055b      	lsls	r3, r3, #21
   1de54:	d544      	bpl.n	1dee0 <__sfvwrite_r+0x2b0>
   1de56:	4611      	mov	r1, r2
   1de58:	9800      	ldr	r0, [sp, #0]
   1de5a:	f000 f907 	bl	1e06c <_malloc_r>
   1de5e:	4683      	mov	fp, r0
   1de60:	2800      	cmp	r0, #0
   1de62:	d055      	beq.n	1df10 <__sfvwrite_r+0x2e0>
   1de64:	4652      	mov	r2, sl
   1de66:	6921      	ldr	r1, [r4, #16]
   1de68:	f000 fc4a 	bl	1e700 <memcpy>
   1de6c:	89a3      	ldrh	r3, [r4, #12]
   1de6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1de72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1de76:	81a3      	strh	r3, [r4, #12]
   1de78:	eb0b 000a 	add.w	r0, fp, sl
   1de7c:	eba8 030a 	sub.w	r3, r8, sl
   1de80:	f8c4 b010 	str.w	fp, [r4, #16]
   1de84:	f8c4 8014 	str.w	r8, [r4, #20]
   1de88:	6020      	str	r0, [r4, #0]
   1de8a:	60a3      	str	r3, [r4, #8]
   1de8c:	46b8      	mov	r8, r7
   1de8e:	46ba      	mov	sl, r7
   1de90:	46bb      	mov	fp, r7
   1de92:	e721      	b.n	1dcd8 <__sfvwrite_r+0xa8>
   1de94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1de98:	42b9      	cmp	r1, r7
   1de9a:	bf28      	it	cs
   1de9c:	4639      	movcs	r1, r7
   1de9e:	464a      	mov	r2, r9
   1dea0:	fb91 f1f3 	sdiv	r1, r1, r3
   1dea4:	9800      	ldr	r0, [sp, #0]
   1dea6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1dea8:	fb03 f301 	mul.w	r3, r3, r1
   1deac:	69e1      	ldr	r1, [r4, #28]
   1deae:	47b0      	blx	r6
   1deb0:	f1b0 0a00 	subs.w	sl, r0, #0
   1deb4:	f73f af1b 	bgt.w	1dcee <__sfvwrite_r+0xbe>
   1deb8:	e738      	b.n	1dd2c <__sfvwrite_r+0xfc>
   1deba:	461a      	mov	r2, r3
   1debc:	4629      	mov	r1, r5
   1debe:	9301      	str	r3, [sp, #4]
   1dec0:	f000 fcb8 	bl	1e834 <memmove>
   1dec4:	6822      	ldr	r2, [r4, #0]
   1dec6:	9b01      	ldr	r3, [sp, #4]
   1dec8:	9800      	ldr	r0, [sp, #0]
   1deca:	441a      	add	r2, r3
   1decc:	6022      	str	r2, [r4, #0]
   1dece:	4621      	mov	r1, r4
   1ded0:	f003 fdf8 	bl	21ac4 <_fflush_r>
   1ded4:	9b01      	ldr	r3, [sp, #4]
   1ded6:	2800      	cmp	r0, #0
   1ded8:	f47f af28 	bne.w	1dd2c <__sfvwrite_r+0xfc>
   1dedc:	461f      	mov	r7, r3
   1dede:	e750      	b.n	1dd82 <__sfvwrite_r+0x152>
   1dee0:	9800      	ldr	r0, [sp, #0]
   1dee2:	f000 fda5 	bl	1ea30 <_realloc_r>
   1dee6:	4683      	mov	fp, r0
   1dee8:	2800      	cmp	r0, #0
   1deea:	d1c5      	bne.n	1de78 <__sfvwrite_r+0x248>
   1deec:	9d00      	ldr	r5, [sp, #0]
   1deee:	6921      	ldr	r1, [r4, #16]
   1def0:	4628      	mov	r0, r5
   1def2:	f003 fee1 	bl	21cb8 <_free_r>
   1def6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1defa:	220c      	movs	r2, #12
   1defc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1df00:	602a      	str	r2, [r5, #0]
   1df02:	e715      	b.n	1dd30 <__sfvwrite_r+0x100>
   1df04:	f106 0901 	add.w	r9, r6, #1
   1df08:	e722      	b.n	1dd50 <__sfvwrite_r+0x120>
   1df0a:	f04f 30ff 	mov.w	r0, #4294967295
   1df0e:	e6bf      	b.n	1dc90 <__sfvwrite_r+0x60>
   1df10:	9a00      	ldr	r2, [sp, #0]
   1df12:	230c      	movs	r3, #12
   1df14:	6013      	str	r3, [r2, #0]
   1df16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1df1a:	e709      	b.n	1dd30 <__sfvwrite_r+0x100>
   1df1c:	7ffffc00 	.word	0x7ffffc00

0001df20 <_fwrite_r>:
   1df20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df24:	b086      	sub	sp, #24
   1df26:	fb02 f503 	mul.w	r5, r2, r3
   1df2a:	4690      	mov	r8, r2
   1df2c:	461e      	mov	r6, r3
   1df2e:	aa01      	add	r2, sp, #4
   1df30:	2301      	movs	r3, #1
   1df32:	9101      	str	r1, [sp, #4]
   1df34:	9502      	str	r5, [sp, #8]
   1df36:	9505      	str	r5, [sp, #20]
   1df38:	9203      	str	r2, [sp, #12]
   1df3a:	9304      	str	r3, [sp, #16]
   1df3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1df3e:	4607      	mov	r7, r0
   1df40:	b110      	cbz	r0, 1df48 <_fwrite_r+0x28>
   1df42:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1df44:	2b00      	cmp	r3, #0
   1df46:	d031      	beq.n	1dfac <_fwrite_r+0x8c>
   1df48:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1df4a:	f013 0f01 	tst.w	r3, #1
   1df4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1df52:	b29a      	uxth	r2, r3
   1df54:	d101      	bne.n	1df5a <_fwrite_r+0x3a>
   1df56:	0591      	lsls	r1, r2, #22
   1df58:	d52b      	bpl.n	1dfb2 <_fwrite_r+0x92>
   1df5a:	0492      	lsls	r2, r2, #18
   1df5c:	d406      	bmi.n	1df6c <_fwrite_r+0x4c>
   1df5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1df60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1df64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1df68:	81a3      	strh	r3, [r4, #12]
   1df6a:	6662      	str	r2, [r4, #100]	; 0x64
   1df6c:	4638      	mov	r0, r7
   1df6e:	aa03      	add	r2, sp, #12
   1df70:	4621      	mov	r1, r4
   1df72:	f7ff fe5d 	bl	1dc30 <__sfvwrite_r>
   1df76:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1df78:	b940      	cbnz	r0, 1df8c <_fwrite_r+0x6c>
   1df7a:	07d8      	lsls	r0, r3, #31
   1df7c:	d402      	bmi.n	1df84 <_fwrite_r+0x64>
   1df7e:	89a3      	ldrh	r3, [r4, #12]
   1df80:	0599      	lsls	r1, r3, #22
   1df82:	d51d      	bpl.n	1dfc0 <_fwrite_r+0xa0>
   1df84:	4630      	mov	r0, r6
   1df86:	b006      	add	sp, #24
   1df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1df8c:	07da      	lsls	r2, r3, #31
   1df8e:	d506      	bpl.n	1df9e <_fwrite_r+0x7e>
   1df90:	9805      	ldr	r0, [sp, #20]
   1df92:	1a2d      	subs	r5, r5, r0
   1df94:	fbb5 f0f8 	udiv	r0, r5, r8
   1df98:	b006      	add	sp, #24
   1df9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1df9e:	89a3      	ldrh	r3, [r4, #12]
   1dfa0:	059b      	lsls	r3, r3, #22
   1dfa2:	d4f5      	bmi.n	1df90 <_fwrite_r+0x70>
   1dfa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dfa6:	f000 f84f 	bl	1e048 <__retarget_lock_release_recursive>
   1dfaa:	e7f1      	b.n	1df90 <_fwrite_r+0x70>
   1dfac:	f003 fde2 	bl	21b74 <__sinit>
   1dfb0:	e7ca      	b.n	1df48 <_fwrite_r+0x28>
   1dfb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dfb4:	f000 f846 	bl	1e044 <__retarget_lock_acquire_recursive>
   1dfb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dfbc:	b29a      	uxth	r2, r3
   1dfbe:	e7cc      	b.n	1df5a <_fwrite_r+0x3a>
   1dfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dfc2:	f000 f841 	bl	1e048 <__retarget_lock_release_recursive>
   1dfc6:	4630      	mov	r0, r6
   1dfc8:	e7e6      	b.n	1df98 <_fwrite_r+0x78>
   1dfca:	bf00      	nop

0001dfcc <fwrite>:
   1dfcc:	b510      	push	{r4, lr}
   1dfce:	b082      	sub	sp, #8
   1dfd0:	4c05      	ldr	r4, [pc, #20]	; (1dfe8 <fwrite+0x1c>)
   1dfd2:	9300      	str	r3, [sp, #0]
   1dfd4:	6824      	ldr	r4, [r4, #0]
   1dfd6:	4613      	mov	r3, r2
   1dfd8:	460a      	mov	r2, r1
   1dfda:	4601      	mov	r1, r0
   1dfdc:	4620      	mov	r0, r4
   1dfde:	f7ff ff9f 	bl	1df20 <_fwrite_r>
   1dfe2:	b002      	add	sp, #8
   1dfe4:	bd10      	pop	{r4, pc}
   1dfe6:	bf00      	nop
   1dfe8:	20000108 	.word	0x20000108

0001dfec <__libc_init_array>:
   1dfec:	b570      	push	{r4, r5, r6, lr}
   1dfee:	4e0f      	ldr	r6, [pc, #60]	; (1e02c <__libc_init_array+0x40>)
   1dff0:	4d0f      	ldr	r5, [pc, #60]	; (1e030 <__libc_init_array+0x44>)
   1dff2:	1b76      	subs	r6, r6, r5
   1dff4:	10b6      	asrs	r6, r6, #2
   1dff6:	bf18      	it	ne
   1dff8:	2400      	movne	r4, #0
   1dffa:	d005      	beq.n	1e008 <__libc_init_array+0x1c>
   1dffc:	3401      	adds	r4, #1
   1dffe:	f855 3b04 	ldr.w	r3, [r5], #4
   1e002:	4798      	blx	r3
   1e004:	42a6      	cmp	r6, r4
   1e006:	d1f9      	bne.n	1dffc <__libc_init_array+0x10>
   1e008:	4e0a      	ldr	r6, [pc, #40]	; (1e034 <__libc_init_array+0x48>)
   1e00a:	4d0b      	ldr	r5, [pc, #44]	; (1e038 <__libc_init_array+0x4c>)
   1e00c:	1b76      	subs	r6, r6, r5
   1e00e:	f004 feab 	bl	22d68 <_init>
   1e012:	10b6      	asrs	r6, r6, #2
   1e014:	bf18      	it	ne
   1e016:	2400      	movne	r4, #0
   1e018:	d006      	beq.n	1e028 <__libc_init_array+0x3c>
   1e01a:	3401      	adds	r4, #1
   1e01c:	f855 3b04 	ldr.w	r3, [r5], #4
   1e020:	4798      	blx	r3
   1e022:	42a6      	cmp	r6, r4
   1e024:	d1f9      	bne.n	1e01a <__libc_init_array+0x2e>
   1e026:	bd70      	pop	{r4, r5, r6, pc}
   1e028:	bd70      	pop	{r4, r5, r6, pc}
   1e02a:	bf00      	nop
   1e02c:	00022d80 	.word	0x00022d80
   1e030:	00022d80 	.word	0x00022d80
   1e034:	00022db8 	.word	0x00022db8
   1e038:	00022d80 	.word	0x00022d80

0001e03c <__retarget_lock_init_recursive>:
   1e03c:	4770      	bx	lr
   1e03e:	bf00      	nop

0001e040 <__retarget_lock_close_recursive>:
   1e040:	4770      	bx	lr
   1e042:	bf00      	nop

0001e044 <__retarget_lock_acquire_recursive>:
   1e044:	4770      	bx	lr
   1e046:	bf00      	nop

0001e048 <__retarget_lock_release_recursive>:
   1e048:	4770      	bx	lr
   1e04a:	bf00      	nop

0001e04c <malloc>:
   1e04c:	4b02      	ldr	r3, [pc, #8]	; (1e058 <malloc+0xc>)
   1e04e:	4601      	mov	r1, r0
   1e050:	6818      	ldr	r0, [r3, #0]
   1e052:	f000 b80b 	b.w	1e06c <_malloc_r>
   1e056:	bf00      	nop
   1e058:	20000108 	.word	0x20000108

0001e05c <free>:
   1e05c:	4b02      	ldr	r3, [pc, #8]	; (1e068 <free+0xc>)
   1e05e:	4601      	mov	r1, r0
   1e060:	6818      	ldr	r0, [r3, #0]
   1e062:	f003 be29 	b.w	21cb8 <_free_r>
   1e066:	bf00      	nop
   1e068:	20000108 	.word	0x20000108

0001e06c <_malloc_r>:
   1e06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e070:	f101 060b 	add.w	r6, r1, #11
   1e074:	2e16      	cmp	r6, #22
   1e076:	b083      	sub	sp, #12
   1e078:	4605      	mov	r5, r0
   1e07a:	f240 809e 	bls.w	1e1ba <_malloc_r+0x14e>
   1e07e:	f036 0607 	bics.w	r6, r6, #7
   1e082:	f100 80bd 	bmi.w	1e200 <_malloc_r+0x194>
   1e086:	42b1      	cmp	r1, r6
   1e088:	f200 80ba 	bhi.w	1e200 <_malloc_r+0x194>
   1e08c:	f000 fc84 	bl	1e998 <__malloc_lock>
   1e090:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1e094:	f0c0 8293 	bcc.w	1e5be <_malloc_r+0x552>
   1e098:	0a73      	lsrs	r3, r6, #9
   1e09a:	f000 80b8 	beq.w	1e20e <_malloc_r+0x1a2>
   1e09e:	2b04      	cmp	r3, #4
   1e0a0:	f200 8179 	bhi.w	1e396 <_malloc_r+0x32a>
   1e0a4:	09b3      	lsrs	r3, r6, #6
   1e0a6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1e0aa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1e0ae:	00c3      	lsls	r3, r0, #3
   1e0b0:	4fbf      	ldr	r7, [pc, #764]	; (1e3b0 <_malloc_r+0x344>)
   1e0b2:	443b      	add	r3, r7
   1e0b4:	f1a3 0108 	sub.w	r1, r3, #8
   1e0b8:	685c      	ldr	r4, [r3, #4]
   1e0ba:	42a1      	cmp	r1, r4
   1e0bc:	d106      	bne.n	1e0cc <_malloc_r+0x60>
   1e0be:	e00c      	b.n	1e0da <_malloc_r+0x6e>
   1e0c0:	2a00      	cmp	r2, #0
   1e0c2:	f280 80aa 	bge.w	1e21a <_malloc_r+0x1ae>
   1e0c6:	68e4      	ldr	r4, [r4, #12]
   1e0c8:	42a1      	cmp	r1, r4
   1e0ca:	d006      	beq.n	1e0da <_malloc_r+0x6e>
   1e0cc:	6863      	ldr	r3, [r4, #4]
   1e0ce:	f023 0303 	bic.w	r3, r3, #3
   1e0d2:	1b9a      	subs	r2, r3, r6
   1e0d4:	2a0f      	cmp	r2, #15
   1e0d6:	ddf3      	ble.n	1e0c0 <_malloc_r+0x54>
   1e0d8:	4670      	mov	r0, lr
   1e0da:	693c      	ldr	r4, [r7, #16]
   1e0dc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1e3c4 <_malloc_r+0x358>
   1e0e0:	4574      	cmp	r4, lr
   1e0e2:	f000 81ab 	beq.w	1e43c <_malloc_r+0x3d0>
   1e0e6:	6863      	ldr	r3, [r4, #4]
   1e0e8:	f023 0303 	bic.w	r3, r3, #3
   1e0ec:	1b9a      	subs	r2, r3, r6
   1e0ee:	2a0f      	cmp	r2, #15
   1e0f0:	f300 8190 	bgt.w	1e414 <_malloc_r+0x3a8>
   1e0f4:	2a00      	cmp	r2, #0
   1e0f6:	f8c7 e014 	str.w	lr, [r7, #20]
   1e0fa:	f8c7 e010 	str.w	lr, [r7, #16]
   1e0fe:	f280 809d 	bge.w	1e23c <_malloc_r+0x1d0>
   1e102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1e106:	f080 8161 	bcs.w	1e3cc <_malloc_r+0x360>
   1e10a:	08db      	lsrs	r3, r3, #3
   1e10c:	f103 0c01 	add.w	ip, r3, #1
   1e110:	1099      	asrs	r1, r3, #2
   1e112:	687a      	ldr	r2, [r7, #4]
   1e114:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1e118:	f8c4 8008 	str.w	r8, [r4, #8]
   1e11c:	2301      	movs	r3, #1
   1e11e:	408b      	lsls	r3, r1
   1e120:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1e124:	4313      	orrs	r3, r2
   1e126:	3908      	subs	r1, #8
   1e128:	60e1      	str	r1, [r4, #12]
   1e12a:	607b      	str	r3, [r7, #4]
   1e12c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1e130:	f8c8 400c 	str.w	r4, [r8, #12]
   1e134:	1082      	asrs	r2, r0, #2
   1e136:	2401      	movs	r4, #1
   1e138:	4094      	lsls	r4, r2
   1e13a:	429c      	cmp	r4, r3
   1e13c:	f200 808b 	bhi.w	1e256 <_malloc_r+0x1ea>
   1e140:	421c      	tst	r4, r3
   1e142:	d106      	bne.n	1e152 <_malloc_r+0xe6>
   1e144:	f020 0003 	bic.w	r0, r0, #3
   1e148:	0064      	lsls	r4, r4, #1
   1e14a:	421c      	tst	r4, r3
   1e14c:	f100 0004 	add.w	r0, r0, #4
   1e150:	d0fa      	beq.n	1e148 <_malloc_r+0xdc>
   1e152:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1e156:	46cc      	mov	ip, r9
   1e158:	4680      	mov	r8, r0
   1e15a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1e15e:	459c      	cmp	ip, r3
   1e160:	d107      	bne.n	1e172 <_malloc_r+0x106>
   1e162:	e16d      	b.n	1e440 <_malloc_r+0x3d4>
   1e164:	2a00      	cmp	r2, #0
   1e166:	f280 817b 	bge.w	1e460 <_malloc_r+0x3f4>
   1e16a:	68db      	ldr	r3, [r3, #12]
   1e16c:	459c      	cmp	ip, r3
   1e16e:	f000 8167 	beq.w	1e440 <_malloc_r+0x3d4>
   1e172:	6859      	ldr	r1, [r3, #4]
   1e174:	f021 0103 	bic.w	r1, r1, #3
   1e178:	1b8a      	subs	r2, r1, r6
   1e17a:	2a0f      	cmp	r2, #15
   1e17c:	ddf2      	ble.n	1e164 <_malloc_r+0xf8>
   1e17e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1e182:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e186:	9300      	str	r3, [sp, #0]
   1e188:	199c      	adds	r4, r3, r6
   1e18a:	4628      	mov	r0, r5
   1e18c:	f046 0601 	orr.w	r6, r6, #1
   1e190:	f042 0501 	orr.w	r5, r2, #1
   1e194:	605e      	str	r6, [r3, #4]
   1e196:	f8c8 c00c 	str.w	ip, [r8, #12]
   1e19a:	f8cc 8008 	str.w	r8, [ip, #8]
   1e19e:	617c      	str	r4, [r7, #20]
   1e1a0:	613c      	str	r4, [r7, #16]
   1e1a2:	f8c4 e00c 	str.w	lr, [r4, #12]
   1e1a6:	f8c4 e008 	str.w	lr, [r4, #8]
   1e1aa:	6065      	str	r5, [r4, #4]
   1e1ac:	505a      	str	r2, [r3, r1]
   1e1ae:	f000 fbf9 	bl	1e9a4 <__malloc_unlock>
   1e1b2:	9b00      	ldr	r3, [sp, #0]
   1e1b4:	f103 0408 	add.w	r4, r3, #8
   1e1b8:	e01e      	b.n	1e1f8 <_malloc_r+0x18c>
   1e1ba:	2910      	cmp	r1, #16
   1e1bc:	d820      	bhi.n	1e200 <_malloc_r+0x194>
   1e1be:	f000 fbeb 	bl	1e998 <__malloc_lock>
   1e1c2:	2610      	movs	r6, #16
   1e1c4:	2318      	movs	r3, #24
   1e1c6:	2002      	movs	r0, #2
   1e1c8:	4f79      	ldr	r7, [pc, #484]	; (1e3b0 <_malloc_r+0x344>)
   1e1ca:	443b      	add	r3, r7
   1e1cc:	f1a3 0208 	sub.w	r2, r3, #8
   1e1d0:	685c      	ldr	r4, [r3, #4]
   1e1d2:	4294      	cmp	r4, r2
   1e1d4:	f000 813d 	beq.w	1e452 <_malloc_r+0x3e6>
   1e1d8:	6863      	ldr	r3, [r4, #4]
   1e1da:	68e1      	ldr	r1, [r4, #12]
   1e1dc:	68a6      	ldr	r6, [r4, #8]
   1e1de:	f023 0303 	bic.w	r3, r3, #3
   1e1e2:	4423      	add	r3, r4
   1e1e4:	4628      	mov	r0, r5
   1e1e6:	685a      	ldr	r2, [r3, #4]
   1e1e8:	60f1      	str	r1, [r6, #12]
   1e1ea:	f042 0201 	orr.w	r2, r2, #1
   1e1ee:	608e      	str	r6, [r1, #8]
   1e1f0:	605a      	str	r2, [r3, #4]
   1e1f2:	f000 fbd7 	bl	1e9a4 <__malloc_unlock>
   1e1f6:	3408      	adds	r4, #8
   1e1f8:	4620      	mov	r0, r4
   1e1fa:	b003      	add	sp, #12
   1e1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e200:	2400      	movs	r4, #0
   1e202:	230c      	movs	r3, #12
   1e204:	4620      	mov	r0, r4
   1e206:	602b      	str	r3, [r5, #0]
   1e208:	b003      	add	sp, #12
   1e20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e20e:	2040      	movs	r0, #64	; 0x40
   1e210:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e214:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1e218:	e74a      	b.n	1e0b0 <_malloc_r+0x44>
   1e21a:	4423      	add	r3, r4
   1e21c:	68e1      	ldr	r1, [r4, #12]
   1e21e:	685a      	ldr	r2, [r3, #4]
   1e220:	68a6      	ldr	r6, [r4, #8]
   1e222:	f042 0201 	orr.w	r2, r2, #1
   1e226:	60f1      	str	r1, [r6, #12]
   1e228:	4628      	mov	r0, r5
   1e22a:	608e      	str	r6, [r1, #8]
   1e22c:	605a      	str	r2, [r3, #4]
   1e22e:	f000 fbb9 	bl	1e9a4 <__malloc_unlock>
   1e232:	3408      	adds	r4, #8
   1e234:	4620      	mov	r0, r4
   1e236:	b003      	add	sp, #12
   1e238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e23c:	4423      	add	r3, r4
   1e23e:	4628      	mov	r0, r5
   1e240:	685a      	ldr	r2, [r3, #4]
   1e242:	f042 0201 	orr.w	r2, r2, #1
   1e246:	605a      	str	r2, [r3, #4]
   1e248:	f000 fbac 	bl	1e9a4 <__malloc_unlock>
   1e24c:	3408      	adds	r4, #8
   1e24e:	4620      	mov	r0, r4
   1e250:	b003      	add	sp, #12
   1e252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e256:	68bc      	ldr	r4, [r7, #8]
   1e258:	6863      	ldr	r3, [r4, #4]
   1e25a:	f023 0803 	bic.w	r8, r3, #3
   1e25e:	45b0      	cmp	r8, r6
   1e260:	d304      	bcc.n	1e26c <_malloc_r+0x200>
   1e262:	eba8 0306 	sub.w	r3, r8, r6
   1e266:	2b0f      	cmp	r3, #15
   1e268:	f300 8085 	bgt.w	1e376 <_malloc_r+0x30a>
   1e26c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1e3c8 <_malloc_r+0x35c>
   1e270:	4b50      	ldr	r3, [pc, #320]	; (1e3b4 <_malloc_r+0x348>)
   1e272:	f8d9 2000 	ldr.w	r2, [r9]
   1e276:	681b      	ldr	r3, [r3, #0]
   1e278:	3201      	adds	r2, #1
   1e27a:	4433      	add	r3, r6
   1e27c:	eb04 0a08 	add.w	sl, r4, r8
   1e280:	f000 8155 	beq.w	1e52e <_malloc_r+0x4c2>
   1e284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1e288:	330f      	adds	r3, #15
   1e28a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1e28e:	f02b 0b0f 	bic.w	fp, fp, #15
   1e292:	4659      	mov	r1, fp
   1e294:	4628      	mov	r0, r5
   1e296:	f000 fd71 	bl	1ed7c <_sbrk_r>
   1e29a:	1c41      	adds	r1, r0, #1
   1e29c:	4602      	mov	r2, r0
   1e29e:	f000 80fc 	beq.w	1e49a <_malloc_r+0x42e>
   1e2a2:	4582      	cmp	sl, r0
   1e2a4:	f200 80f7 	bhi.w	1e496 <_malloc_r+0x42a>
   1e2a8:	4b43      	ldr	r3, [pc, #268]	; (1e3b8 <_malloc_r+0x34c>)
   1e2aa:	6819      	ldr	r1, [r3, #0]
   1e2ac:	4459      	add	r1, fp
   1e2ae:	6019      	str	r1, [r3, #0]
   1e2b0:	f000 814d 	beq.w	1e54e <_malloc_r+0x4e2>
   1e2b4:	f8d9 0000 	ldr.w	r0, [r9]
   1e2b8:	3001      	adds	r0, #1
   1e2ba:	bf1b      	ittet	ne
   1e2bc:	eba2 0a0a 	subne.w	sl, r2, sl
   1e2c0:	4451      	addne	r1, sl
   1e2c2:	f8c9 2000 	streq.w	r2, [r9]
   1e2c6:	6019      	strne	r1, [r3, #0]
   1e2c8:	f012 0107 	ands.w	r1, r2, #7
   1e2cc:	f000 8115 	beq.w	1e4fa <_malloc_r+0x48e>
   1e2d0:	f1c1 0008 	rsb	r0, r1, #8
   1e2d4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1e2d8:	4402      	add	r2, r0
   1e2da:	3108      	adds	r1, #8
   1e2dc:	eb02 090b 	add.w	r9, r2, fp
   1e2e0:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1e2e4:	eba1 0909 	sub.w	r9, r1, r9
   1e2e8:	4649      	mov	r1, r9
   1e2ea:	4628      	mov	r0, r5
   1e2ec:	9301      	str	r3, [sp, #4]
   1e2ee:	9200      	str	r2, [sp, #0]
   1e2f0:	f000 fd44 	bl	1ed7c <_sbrk_r>
   1e2f4:	1c43      	adds	r3, r0, #1
   1e2f6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1e2fa:	f000 8143 	beq.w	1e584 <_malloc_r+0x518>
   1e2fe:	1a80      	subs	r0, r0, r2
   1e300:	4448      	add	r0, r9
   1e302:	f040 0001 	orr.w	r0, r0, #1
   1e306:	6819      	ldr	r1, [r3, #0]
   1e308:	60ba      	str	r2, [r7, #8]
   1e30a:	4449      	add	r1, r9
   1e30c:	42bc      	cmp	r4, r7
   1e30e:	6050      	str	r0, [r2, #4]
   1e310:	6019      	str	r1, [r3, #0]
   1e312:	d017      	beq.n	1e344 <_malloc_r+0x2d8>
   1e314:	f1b8 0f0f 	cmp.w	r8, #15
   1e318:	f240 80fb 	bls.w	1e512 <_malloc_r+0x4a6>
   1e31c:	6860      	ldr	r0, [r4, #4]
   1e31e:	f1a8 020c 	sub.w	r2, r8, #12
   1e322:	f022 0207 	bic.w	r2, r2, #7
   1e326:	eb04 0e02 	add.w	lr, r4, r2
   1e32a:	f000 0001 	and.w	r0, r0, #1
   1e32e:	f04f 0c05 	mov.w	ip, #5
   1e332:	4310      	orrs	r0, r2
   1e334:	2a0f      	cmp	r2, #15
   1e336:	6060      	str	r0, [r4, #4]
   1e338:	f8ce c004 	str.w	ip, [lr, #4]
   1e33c:	f8ce c008 	str.w	ip, [lr, #8]
   1e340:	f200 8117 	bhi.w	1e572 <_malloc_r+0x506>
   1e344:	4b1d      	ldr	r3, [pc, #116]	; (1e3bc <_malloc_r+0x350>)
   1e346:	68bc      	ldr	r4, [r7, #8]
   1e348:	681a      	ldr	r2, [r3, #0]
   1e34a:	4291      	cmp	r1, r2
   1e34c:	bf88      	it	hi
   1e34e:	6019      	strhi	r1, [r3, #0]
   1e350:	4b1b      	ldr	r3, [pc, #108]	; (1e3c0 <_malloc_r+0x354>)
   1e352:	681a      	ldr	r2, [r3, #0]
   1e354:	4291      	cmp	r1, r2
   1e356:	6862      	ldr	r2, [r4, #4]
   1e358:	bf88      	it	hi
   1e35a:	6019      	strhi	r1, [r3, #0]
   1e35c:	f022 0203 	bic.w	r2, r2, #3
   1e360:	4296      	cmp	r6, r2
   1e362:	eba2 0306 	sub.w	r3, r2, r6
   1e366:	d801      	bhi.n	1e36c <_malloc_r+0x300>
   1e368:	2b0f      	cmp	r3, #15
   1e36a:	dc04      	bgt.n	1e376 <_malloc_r+0x30a>
   1e36c:	4628      	mov	r0, r5
   1e36e:	f000 fb19 	bl	1e9a4 <__malloc_unlock>
   1e372:	2400      	movs	r4, #0
   1e374:	e740      	b.n	1e1f8 <_malloc_r+0x18c>
   1e376:	19a2      	adds	r2, r4, r6
   1e378:	f043 0301 	orr.w	r3, r3, #1
   1e37c:	f046 0601 	orr.w	r6, r6, #1
   1e380:	6066      	str	r6, [r4, #4]
   1e382:	4628      	mov	r0, r5
   1e384:	60ba      	str	r2, [r7, #8]
   1e386:	6053      	str	r3, [r2, #4]
   1e388:	f000 fb0c 	bl	1e9a4 <__malloc_unlock>
   1e38c:	3408      	adds	r4, #8
   1e38e:	4620      	mov	r0, r4
   1e390:	b003      	add	sp, #12
   1e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e396:	2b14      	cmp	r3, #20
   1e398:	d971      	bls.n	1e47e <_malloc_r+0x412>
   1e39a:	2b54      	cmp	r3, #84	; 0x54
   1e39c:	f200 80a3 	bhi.w	1e4e6 <_malloc_r+0x47a>
   1e3a0:	0b33      	lsrs	r3, r6, #12
   1e3a2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1e3a6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1e3aa:	00c3      	lsls	r3, r0, #3
   1e3ac:	e680      	b.n	1e0b0 <_malloc_r+0x44>
   1e3ae:	bf00      	nop
   1e3b0:	200006a4 	.word	0x200006a4
   1e3b4:	200022e0 	.word	0x200022e0
   1e3b8:	200022b0 	.word	0x200022b0
   1e3bc:	200022d8 	.word	0x200022d8
   1e3c0:	200022dc 	.word	0x200022dc
   1e3c4:	200006ac 	.word	0x200006ac
   1e3c8:	20000aac 	.word	0x20000aac
   1e3cc:	0a5a      	lsrs	r2, r3, #9
   1e3ce:	2a04      	cmp	r2, #4
   1e3d0:	d95b      	bls.n	1e48a <_malloc_r+0x41e>
   1e3d2:	2a14      	cmp	r2, #20
   1e3d4:	f200 80ae 	bhi.w	1e534 <_malloc_r+0x4c8>
   1e3d8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1e3dc:	00c9      	lsls	r1, r1, #3
   1e3de:	325b      	adds	r2, #91	; 0x5b
   1e3e0:	eb07 0c01 	add.w	ip, r7, r1
   1e3e4:	5879      	ldr	r1, [r7, r1]
   1e3e6:	f1ac 0c08 	sub.w	ip, ip, #8
   1e3ea:	458c      	cmp	ip, r1
   1e3ec:	f000 8088 	beq.w	1e500 <_malloc_r+0x494>
   1e3f0:	684a      	ldr	r2, [r1, #4]
   1e3f2:	f022 0203 	bic.w	r2, r2, #3
   1e3f6:	4293      	cmp	r3, r2
   1e3f8:	d273      	bcs.n	1e4e2 <_malloc_r+0x476>
   1e3fa:	6889      	ldr	r1, [r1, #8]
   1e3fc:	458c      	cmp	ip, r1
   1e3fe:	d1f7      	bne.n	1e3f0 <_malloc_r+0x384>
   1e400:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1e404:	687b      	ldr	r3, [r7, #4]
   1e406:	60e2      	str	r2, [r4, #12]
   1e408:	f8c4 c008 	str.w	ip, [r4, #8]
   1e40c:	6094      	str	r4, [r2, #8]
   1e40e:	f8cc 400c 	str.w	r4, [ip, #12]
   1e412:	e68f      	b.n	1e134 <_malloc_r+0xc8>
   1e414:	19a1      	adds	r1, r4, r6
   1e416:	f046 0c01 	orr.w	ip, r6, #1
   1e41a:	f042 0601 	orr.w	r6, r2, #1
   1e41e:	f8c4 c004 	str.w	ip, [r4, #4]
   1e422:	4628      	mov	r0, r5
   1e424:	6179      	str	r1, [r7, #20]
   1e426:	6139      	str	r1, [r7, #16]
   1e428:	f8c1 e00c 	str.w	lr, [r1, #12]
   1e42c:	f8c1 e008 	str.w	lr, [r1, #8]
   1e430:	604e      	str	r6, [r1, #4]
   1e432:	50e2      	str	r2, [r4, r3]
   1e434:	f000 fab6 	bl	1e9a4 <__malloc_unlock>
   1e438:	3408      	adds	r4, #8
   1e43a:	e6dd      	b.n	1e1f8 <_malloc_r+0x18c>
   1e43c:	687b      	ldr	r3, [r7, #4]
   1e43e:	e679      	b.n	1e134 <_malloc_r+0xc8>
   1e440:	f108 0801 	add.w	r8, r8, #1
   1e444:	f018 0f03 	tst.w	r8, #3
   1e448:	f10c 0c08 	add.w	ip, ip, #8
   1e44c:	f47f ae85 	bne.w	1e15a <_malloc_r+0xee>
   1e450:	e02d      	b.n	1e4ae <_malloc_r+0x442>
   1e452:	68dc      	ldr	r4, [r3, #12]
   1e454:	42a3      	cmp	r3, r4
   1e456:	bf08      	it	eq
   1e458:	3002      	addeq	r0, #2
   1e45a:	f43f ae3e 	beq.w	1e0da <_malloc_r+0x6e>
   1e45e:	e6bb      	b.n	1e1d8 <_malloc_r+0x16c>
   1e460:	4419      	add	r1, r3
   1e462:	461c      	mov	r4, r3
   1e464:	684a      	ldr	r2, [r1, #4]
   1e466:	68db      	ldr	r3, [r3, #12]
   1e468:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1e46c:	f042 0201 	orr.w	r2, r2, #1
   1e470:	604a      	str	r2, [r1, #4]
   1e472:	4628      	mov	r0, r5
   1e474:	60f3      	str	r3, [r6, #12]
   1e476:	609e      	str	r6, [r3, #8]
   1e478:	f000 fa94 	bl	1e9a4 <__malloc_unlock>
   1e47c:	e6bc      	b.n	1e1f8 <_malloc_r+0x18c>
   1e47e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1e482:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1e486:	00c3      	lsls	r3, r0, #3
   1e488:	e612      	b.n	1e0b0 <_malloc_r+0x44>
   1e48a:	099a      	lsrs	r2, r3, #6
   1e48c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1e490:	00c9      	lsls	r1, r1, #3
   1e492:	3238      	adds	r2, #56	; 0x38
   1e494:	e7a4      	b.n	1e3e0 <_malloc_r+0x374>
   1e496:	42bc      	cmp	r4, r7
   1e498:	d054      	beq.n	1e544 <_malloc_r+0x4d8>
   1e49a:	68bc      	ldr	r4, [r7, #8]
   1e49c:	6862      	ldr	r2, [r4, #4]
   1e49e:	f022 0203 	bic.w	r2, r2, #3
   1e4a2:	e75d      	b.n	1e360 <_malloc_r+0x2f4>
   1e4a4:	f859 3908 	ldr.w	r3, [r9], #-8
   1e4a8:	4599      	cmp	r9, r3
   1e4aa:	f040 8086 	bne.w	1e5ba <_malloc_r+0x54e>
   1e4ae:	f010 0f03 	tst.w	r0, #3
   1e4b2:	f100 30ff 	add.w	r0, r0, #4294967295
   1e4b6:	d1f5      	bne.n	1e4a4 <_malloc_r+0x438>
   1e4b8:	687b      	ldr	r3, [r7, #4]
   1e4ba:	ea23 0304 	bic.w	r3, r3, r4
   1e4be:	607b      	str	r3, [r7, #4]
   1e4c0:	0064      	lsls	r4, r4, #1
   1e4c2:	429c      	cmp	r4, r3
   1e4c4:	f63f aec7 	bhi.w	1e256 <_malloc_r+0x1ea>
   1e4c8:	2c00      	cmp	r4, #0
   1e4ca:	f43f aec4 	beq.w	1e256 <_malloc_r+0x1ea>
   1e4ce:	421c      	tst	r4, r3
   1e4d0:	4640      	mov	r0, r8
   1e4d2:	f47f ae3e 	bne.w	1e152 <_malloc_r+0xe6>
   1e4d6:	0064      	lsls	r4, r4, #1
   1e4d8:	421c      	tst	r4, r3
   1e4da:	f100 0004 	add.w	r0, r0, #4
   1e4de:	d0fa      	beq.n	1e4d6 <_malloc_r+0x46a>
   1e4e0:	e637      	b.n	1e152 <_malloc_r+0xe6>
   1e4e2:	468c      	mov	ip, r1
   1e4e4:	e78c      	b.n	1e400 <_malloc_r+0x394>
   1e4e6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1e4ea:	d815      	bhi.n	1e518 <_malloc_r+0x4ac>
   1e4ec:	0bf3      	lsrs	r3, r6, #15
   1e4ee:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1e4f2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1e4f6:	00c3      	lsls	r3, r0, #3
   1e4f8:	e5da      	b.n	1e0b0 <_malloc_r+0x44>
   1e4fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e4fe:	e6ed      	b.n	1e2dc <_malloc_r+0x270>
   1e500:	687b      	ldr	r3, [r7, #4]
   1e502:	1092      	asrs	r2, r2, #2
   1e504:	2101      	movs	r1, #1
   1e506:	fa01 f202 	lsl.w	r2, r1, r2
   1e50a:	4313      	orrs	r3, r2
   1e50c:	607b      	str	r3, [r7, #4]
   1e50e:	4662      	mov	r2, ip
   1e510:	e779      	b.n	1e406 <_malloc_r+0x39a>
   1e512:	2301      	movs	r3, #1
   1e514:	6053      	str	r3, [r2, #4]
   1e516:	e729      	b.n	1e36c <_malloc_r+0x300>
   1e518:	f240 5254 	movw	r2, #1364	; 0x554
   1e51c:	4293      	cmp	r3, r2
   1e51e:	d822      	bhi.n	1e566 <_malloc_r+0x4fa>
   1e520:	0cb3      	lsrs	r3, r6, #18
   1e522:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e526:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e52a:	00c3      	lsls	r3, r0, #3
   1e52c:	e5c0      	b.n	1e0b0 <_malloc_r+0x44>
   1e52e:	f103 0b10 	add.w	fp, r3, #16
   1e532:	e6ae      	b.n	1e292 <_malloc_r+0x226>
   1e534:	2a54      	cmp	r2, #84	; 0x54
   1e536:	d829      	bhi.n	1e58c <_malloc_r+0x520>
   1e538:	0b1a      	lsrs	r2, r3, #12
   1e53a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e53e:	00c9      	lsls	r1, r1, #3
   1e540:	326e      	adds	r2, #110	; 0x6e
   1e542:	e74d      	b.n	1e3e0 <_malloc_r+0x374>
   1e544:	4b20      	ldr	r3, [pc, #128]	; (1e5c8 <_malloc_r+0x55c>)
   1e546:	6819      	ldr	r1, [r3, #0]
   1e548:	4459      	add	r1, fp
   1e54a:	6019      	str	r1, [r3, #0]
   1e54c:	e6b2      	b.n	1e2b4 <_malloc_r+0x248>
   1e54e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e552:	2800      	cmp	r0, #0
   1e554:	f47f aeae 	bne.w	1e2b4 <_malloc_r+0x248>
   1e558:	eb08 030b 	add.w	r3, r8, fp
   1e55c:	68ba      	ldr	r2, [r7, #8]
   1e55e:	f043 0301 	orr.w	r3, r3, #1
   1e562:	6053      	str	r3, [r2, #4]
   1e564:	e6ee      	b.n	1e344 <_malloc_r+0x2d8>
   1e566:	207f      	movs	r0, #127	; 0x7f
   1e568:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e56c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e570:	e59e      	b.n	1e0b0 <_malloc_r+0x44>
   1e572:	f104 0108 	add.w	r1, r4, #8
   1e576:	4628      	mov	r0, r5
   1e578:	9300      	str	r3, [sp, #0]
   1e57a:	f003 fb9d 	bl	21cb8 <_free_r>
   1e57e:	9b00      	ldr	r3, [sp, #0]
   1e580:	6819      	ldr	r1, [r3, #0]
   1e582:	e6df      	b.n	1e344 <_malloc_r+0x2d8>
   1e584:	2001      	movs	r0, #1
   1e586:	f04f 0900 	mov.w	r9, #0
   1e58a:	e6bc      	b.n	1e306 <_malloc_r+0x29a>
   1e58c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e590:	d805      	bhi.n	1e59e <_malloc_r+0x532>
   1e592:	0bda      	lsrs	r2, r3, #15
   1e594:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e598:	00c9      	lsls	r1, r1, #3
   1e59a:	3277      	adds	r2, #119	; 0x77
   1e59c:	e720      	b.n	1e3e0 <_malloc_r+0x374>
   1e59e:	f240 5154 	movw	r1, #1364	; 0x554
   1e5a2:	428a      	cmp	r2, r1
   1e5a4:	d805      	bhi.n	1e5b2 <_malloc_r+0x546>
   1e5a6:	0c9a      	lsrs	r2, r3, #18
   1e5a8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e5ac:	00c9      	lsls	r1, r1, #3
   1e5ae:	327c      	adds	r2, #124	; 0x7c
   1e5b0:	e716      	b.n	1e3e0 <_malloc_r+0x374>
   1e5b2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e5b6:	227e      	movs	r2, #126	; 0x7e
   1e5b8:	e712      	b.n	1e3e0 <_malloc_r+0x374>
   1e5ba:	687b      	ldr	r3, [r7, #4]
   1e5bc:	e780      	b.n	1e4c0 <_malloc_r+0x454>
   1e5be:	08f0      	lsrs	r0, r6, #3
   1e5c0:	f106 0308 	add.w	r3, r6, #8
   1e5c4:	e600      	b.n	1e1c8 <_malloc_r+0x15c>
   1e5c6:	bf00      	nop
   1e5c8:	200022b0 	.word	0x200022b0

0001e5cc <__ascii_mbtowc>:
   1e5cc:	b082      	sub	sp, #8
   1e5ce:	b149      	cbz	r1, 1e5e4 <__ascii_mbtowc+0x18>
   1e5d0:	b15a      	cbz	r2, 1e5ea <__ascii_mbtowc+0x1e>
   1e5d2:	b16b      	cbz	r3, 1e5f0 <__ascii_mbtowc+0x24>
   1e5d4:	7813      	ldrb	r3, [r2, #0]
   1e5d6:	600b      	str	r3, [r1, #0]
   1e5d8:	7812      	ldrb	r2, [r2, #0]
   1e5da:	1c10      	adds	r0, r2, #0
   1e5dc:	bf18      	it	ne
   1e5de:	2001      	movne	r0, #1
   1e5e0:	b002      	add	sp, #8
   1e5e2:	4770      	bx	lr
   1e5e4:	a901      	add	r1, sp, #4
   1e5e6:	2a00      	cmp	r2, #0
   1e5e8:	d1f3      	bne.n	1e5d2 <__ascii_mbtowc+0x6>
   1e5ea:	4610      	mov	r0, r2
   1e5ec:	b002      	add	sp, #8
   1e5ee:	4770      	bx	lr
   1e5f0:	f06f 0001 	mvn.w	r0, #1
   1e5f4:	e7f4      	b.n	1e5e0 <__ascii_mbtowc+0x14>
   1e5f6:	bf00      	nop
	...

0001e600 <memchr>:
   1e600:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e604:	2a10      	cmp	r2, #16
   1e606:	db2b      	blt.n	1e660 <memchr+0x60>
   1e608:	f010 0f07 	tst.w	r0, #7
   1e60c:	d008      	beq.n	1e620 <memchr+0x20>
   1e60e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e612:	3a01      	subs	r2, #1
   1e614:	428b      	cmp	r3, r1
   1e616:	d02d      	beq.n	1e674 <memchr+0x74>
   1e618:	f010 0f07 	tst.w	r0, #7
   1e61c:	b342      	cbz	r2, 1e670 <memchr+0x70>
   1e61e:	d1f6      	bne.n	1e60e <memchr+0xe>
   1e620:	b4f0      	push	{r4, r5, r6, r7}
   1e622:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e626:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e62a:	f022 0407 	bic.w	r4, r2, #7
   1e62e:	f07f 0700 	mvns.w	r7, #0
   1e632:	2300      	movs	r3, #0
   1e634:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e638:	3c08      	subs	r4, #8
   1e63a:	ea85 0501 	eor.w	r5, r5, r1
   1e63e:	ea86 0601 	eor.w	r6, r6, r1
   1e642:	fa85 f547 	uadd8	r5, r5, r7
   1e646:	faa3 f587 	sel	r5, r3, r7
   1e64a:	fa86 f647 	uadd8	r6, r6, r7
   1e64e:	faa5 f687 	sel	r6, r5, r7
   1e652:	b98e      	cbnz	r6, 1e678 <memchr+0x78>
   1e654:	d1ee      	bne.n	1e634 <memchr+0x34>
   1e656:	bcf0      	pop	{r4, r5, r6, r7}
   1e658:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e65c:	f002 0207 	and.w	r2, r2, #7
   1e660:	b132      	cbz	r2, 1e670 <memchr+0x70>
   1e662:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e666:	3a01      	subs	r2, #1
   1e668:	ea83 0301 	eor.w	r3, r3, r1
   1e66c:	b113      	cbz	r3, 1e674 <memchr+0x74>
   1e66e:	d1f8      	bne.n	1e662 <memchr+0x62>
   1e670:	2000      	movs	r0, #0
   1e672:	4770      	bx	lr
   1e674:	3801      	subs	r0, #1
   1e676:	4770      	bx	lr
   1e678:	2d00      	cmp	r5, #0
   1e67a:	bf06      	itte	eq
   1e67c:	4635      	moveq	r5, r6
   1e67e:	3803      	subeq	r0, #3
   1e680:	3807      	subne	r0, #7
   1e682:	f015 0f01 	tst.w	r5, #1
   1e686:	d107      	bne.n	1e698 <memchr+0x98>
   1e688:	3001      	adds	r0, #1
   1e68a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e68e:	bf02      	ittt	eq
   1e690:	3001      	addeq	r0, #1
   1e692:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e696:	3001      	addeq	r0, #1
   1e698:	bcf0      	pop	{r4, r5, r6, r7}
   1e69a:	3801      	subs	r0, #1
   1e69c:	4770      	bx	lr
   1e69e:	bf00      	nop

0001e6a0 <memcmp>:
   1e6a0:	2a03      	cmp	r2, #3
   1e6a2:	b470      	push	{r4, r5, r6}
   1e6a4:	d922      	bls.n	1e6ec <memcmp+0x4c>
   1e6a6:	ea40 0301 	orr.w	r3, r0, r1
   1e6aa:	079b      	lsls	r3, r3, #30
   1e6ac:	d011      	beq.n	1e6d2 <memcmp+0x32>
   1e6ae:	7803      	ldrb	r3, [r0, #0]
   1e6b0:	780c      	ldrb	r4, [r1, #0]
   1e6b2:	42a3      	cmp	r3, r4
   1e6b4:	d11d      	bne.n	1e6f2 <memcmp+0x52>
   1e6b6:	440a      	add	r2, r1
   1e6b8:	3101      	adds	r1, #1
   1e6ba:	e005      	b.n	1e6c8 <memcmp+0x28>
   1e6bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e6c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e6c4:	42a3      	cmp	r3, r4
   1e6c6:	d114      	bne.n	1e6f2 <memcmp+0x52>
   1e6c8:	4291      	cmp	r1, r2
   1e6ca:	d1f7      	bne.n	1e6bc <memcmp+0x1c>
   1e6cc:	2000      	movs	r0, #0
   1e6ce:	bc70      	pop	{r4, r5, r6}
   1e6d0:	4770      	bx	lr
   1e6d2:	680d      	ldr	r5, [r1, #0]
   1e6d4:	6806      	ldr	r6, [r0, #0]
   1e6d6:	42ae      	cmp	r6, r5
   1e6d8:	460c      	mov	r4, r1
   1e6da:	4603      	mov	r3, r0
   1e6dc:	f101 0104 	add.w	r1, r1, #4
   1e6e0:	f100 0004 	add.w	r0, r0, #4
   1e6e4:	d108      	bne.n	1e6f8 <memcmp+0x58>
   1e6e6:	3a04      	subs	r2, #4
   1e6e8:	2a03      	cmp	r2, #3
   1e6ea:	d8f2      	bhi.n	1e6d2 <memcmp+0x32>
   1e6ec:	2a00      	cmp	r2, #0
   1e6ee:	d1de      	bne.n	1e6ae <memcmp+0xe>
   1e6f0:	e7ec      	b.n	1e6cc <memcmp+0x2c>
   1e6f2:	1b18      	subs	r0, r3, r4
   1e6f4:	bc70      	pop	{r4, r5, r6}
   1e6f6:	4770      	bx	lr
   1e6f8:	4621      	mov	r1, r4
   1e6fa:	4618      	mov	r0, r3
   1e6fc:	e7d7      	b.n	1e6ae <memcmp+0xe>
   1e6fe:	bf00      	nop

0001e700 <memcpy>:
   1e700:	4684      	mov	ip, r0
   1e702:	ea41 0300 	orr.w	r3, r1, r0
   1e706:	f013 0303 	ands.w	r3, r3, #3
   1e70a:	d16d      	bne.n	1e7e8 <memcpy+0xe8>
   1e70c:	3a40      	subs	r2, #64	; 0x40
   1e70e:	d341      	bcc.n	1e794 <memcpy+0x94>
   1e710:	f851 3b04 	ldr.w	r3, [r1], #4
   1e714:	f840 3b04 	str.w	r3, [r0], #4
   1e718:	f851 3b04 	ldr.w	r3, [r1], #4
   1e71c:	f840 3b04 	str.w	r3, [r0], #4
   1e720:	f851 3b04 	ldr.w	r3, [r1], #4
   1e724:	f840 3b04 	str.w	r3, [r0], #4
   1e728:	f851 3b04 	ldr.w	r3, [r1], #4
   1e72c:	f840 3b04 	str.w	r3, [r0], #4
   1e730:	f851 3b04 	ldr.w	r3, [r1], #4
   1e734:	f840 3b04 	str.w	r3, [r0], #4
   1e738:	f851 3b04 	ldr.w	r3, [r1], #4
   1e73c:	f840 3b04 	str.w	r3, [r0], #4
   1e740:	f851 3b04 	ldr.w	r3, [r1], #4
   1e744:	f840 3b04 	str.w	r3, [r0], #4
   1e748:	f851 3b04 	ldr.w	r3, [r1], #4
   1e74c:	f840 3b04 	str.w	r3, [r0], #4
   1e750:	f851 3b04 	ldr.w	r3, [r1], #4
   1e754:	f840 3b04 	str.w	r3, [r0], #4
   1e758:	f851 3b04 	ldr.w	r3, [r1], #4
   1e75c:	f840 3b04 	str.w	r3, [r0], #4
   1e760:	f851 3b04 	ldr.w	r3, [r1], #4
   1e764:	f840 3b04 	str.w	r3, [r0], #4
   1e768:	f851 3b04 	ldr.w	r3, [r1], #4
   1e76c:	f840 3b04 	str.w	r3, [r0], #4
   1e770:	f851 3b04 	ldr.w	r3, [r1], #4
   1e774:	f840 3b04 	str.w	r3, [r0], #4
   1e778:	f851 3b04 	ldr.w	r3, [r1], #4
   1e77c:	f840 3b04 	str.w	r3, [r0], #4
   1e780:	f851 3b04 	ldr.w	r3, [r1], #4
   1e784:	f840 3b04 	str.w	r3, [r0], #4
   1e788:	f851 3b04 	ldr.w	r3, [r1], #4
   1e78c:	f840 3b04 	str.w	r3, [r0], #4
   1e790:	3a40      	subs	r2, #64	; 0x40
   1e792:	d2bd      	bcs.n	1e710 <memcpy+0x10>
   1e794:	3230      	adds	r2, #48	; 0x30
   1e796:	d311      	bcc.n	1e7bc <memcpy+0xbc>
   1e798:	f851 3b04 	ldr.w	r3, [r1], #4
   1e79c:	f840 3b04 	str.w	r3, [r0], #4
   1e7a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e7a4:	f840 3b04 	str.w	r3, [r0], #4
   1e7a8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e7ac:	f840 3b04 	str.w	r3, [r0], #4
   1e7b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e7b4:	f840 3b04 	str.w	r3, [r0], #4
   1e7b8:	3a10      	subs	r2, #16
   1e7ba:	d2ed      	bcs.n	1e798 <memcpy+0x98>
   1e7bc:	320c      	adds	r2, #12
   1e7be:	d305      	bcc.n	1e7cc <memcpy+0xcc>
   1e7c0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e7c4:	f840 3b04 	str.w	r3, [r0], #4
   1e7c8:	3a04      	subs	r2, #4
   1e7ca:	d2f9      	bcs.n	1e7c0 <memcpy+0xc0>
   1e7cc:	3204      	adds	r2, #4
   1e7ce:	d008      	beq.n	1e7e2 <memcpy+0xe2>
   1e7d0:	07d2      	lsls	r2, r2, #31
   1e7d2:	bf1c      	itt	ne
   1e7d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e7d8:	f800 3b01 	strbne.w	r3, [r0], #1
   1e7dc:	d301      	bcc.n	1e7e2 <memcpy+0xe2>
   1e7de:	880b      	ldrh	r3, [r1, #0]
   1e7e0:	8003      	strh	r3, [r0, #0]
   1e7e2:	4660      	mov	r0, ip
   1e7e4:	4770      	bx	lr
   1e7e6:	bf00      	nop
   1e7e8:	2a08      	cmp	r2, #8
   1e7ea:	d313      	bcc.n	1e814 <memcpy+0x114>
   1e7ec:	078b      	lsls	r3, r1, #30
   1e7ee:	d08d      	beq.n	1e70c <memcpy+0xc>
   1e7f0:	f010 0303 	ands.w	r3, r0, #3
   1e7f4:	d08a      	beq.n	1e70c <memcpy+0xc>
   1e7f6:	f1c3 0304 	rsb	r3, r3, #4
   1e7fa:	1ad2      	subs	r2, r2, r3
   1e7fc:	07db      	lsls	r3, r3, #31
   1e7fe:	bf1c      	itt	ne
   1e800:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e804:	f800 3b01 	strbne.w	r3, [r0], #1
   1e808:	d380      	bcc.n	1e70c <memcpy+0xc>
   1e80a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e80e:	f820 3b02 	strh.w	r3, [r0], #2
   1e812:	e77b      	b.n	1e70c <memcpy+0xc>
   1e814:	3a04      	subs	r2, #4
   1e816:	d3d9      	bcc.n	1e7cc <memcpy+0xcc>
   1e818:	3a01      	subs	r2, #1
   1e81a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e81e:	f800 3b01 	strb.w	r3, [r0], #1
   1e822:	d2f9      	bcs.n	1e818 <memcpy+0x118>
   1e824:	780b      	ldrb	r3, [r1, #0]
   1e826:	7003      	strb	r3, [r0, #0]
   1e828:	784b      	ldrb	r3, [r1, #1]
   1e82a:	7043      	strb	r3, [r0, #1]
   1e82c:	788b      	ldrb	r3, [r1, #2]
   1e82e:	7083      	strb	r3, [r0, #2]
   1e830:	4660      	mov	r0, ip
   1e832:	4770      	bx	lr

0001e834 <memmove>:
   1e834:	4288      	cmp	r0, r1
   1e836:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e838:	d90d      	bls.n	1e856 <memmove+0x22>
   1e83a:	188b      	adds	r3, r1, r2
   1e83c:	4298      	cmp	r0, r3
   1e83e:	d20a      	bcs.n	1e856 <memmove+0x22>
   1e840:	1884      	adds	r4, r0, r2
   1e842:	2a00      	cmp	r2, #0
   1e844:	d051      	beq.n	1e8ea <memmove+0xb6>
   1e846:	4622      	mov	r2, r4
   1e848:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e84c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e850:	4299      	cmp	r1, r3
   1e852:	d1f9      	bne.n	1e848 <memmove+0x14>
   1e854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e856:	2a0f      	cmp	r2, #15
   1e858:	d948      	bls.n	1e8ec <memmove+0xb8>
   1e85a:	ea41 0300 	orr.w	r3, r1, r0
   1e85e:	079b      	lsls	r3, r3, #30
   1e860:	d146      	bne.n	1e8f0 <memmove+0xbc>
   1e862:	f100 0410 	add.w	r4, r0, #16
   1e866:	f101 0310 	add.w	r3, r1, #16
   1e86a:	4615      	mov	r5, r2
   1e86c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e870:	f844 6c10 	str.w	r6, [r4, #-16]
   1e874:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e878:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e87c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e880:	f844 6c08 	str.w	r6, [r4, #-8]
   1e884:	3d10      	subs	r5, #16
   1e886:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e88a:	f844 6c04 	str.w	r6, [r4, #-4]
   1e88e:	2d0f      	cmp	r5, #15
   1e890:	f103 0310 	add.w	r3, r3, #16
   1e894:	f104 0410 	add.w	r4, r4, #16
   1e898:	d8e8      	bhi.n	1e86c <memmove+0x38>
   1e89a:	f1a2 0310 	sub.w	r3, r2, #16
   1e89e:	f023 030f 	bic.w	r3, r3, #15
   1e8a2:	f002 0e0f 	and.w	lr, r2, #15
   1e8a6:	3310      	adds	r3, #16
   1e8a8:	f1be 0f03 	cmp.w	lr, #3
   1e8ac:	4419      	add	r1, r3
   1e8ae:	4403      	add	r3, r0
   1e8b0:	d921      	bls.n	1e8f6 <memmove+0xc2>
   1e8b2:	1f1e      	subs	r6, r3, #4
   1e8b4:	460d      	mov	r5, r1
   1e8b6:	4674      	mov	r4, lr
   1e8b8:	3c04      	subs	r4, #4
   1e8ba:	f855 7b04 	ldr.w	r7, [r5], #4
   1e8be:	f846 7f04 	str.w	r7, [r6, #4]!
   1e8c2:	2c03      	cmp	r4, #3
   1e8c4:	d8f8      	bhi.n	1e8b8 <memmove+0x84>
   1e8c6:	f1ae 0404 	sub.w	r4, lr, #4
   1e8ca:	f024 0403 	bic.w	r4, r4, #3
   1e8ce:	3404      	adds	r4, #4
   1e8d0:	4421      	add	r1, r4
   1e8d2:	4423      	add	r3, r4
   1e8d4:	f002 0203 	and.w	r2, r2, #3
   1e8d8:	b162      	cbz	r2, 1e8f4 <memmove+0xc0>
   1e8da:	3b01      	subs	r3, #1
   1e8dc:	440a      	add	r2, r1
   1e8de:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e8e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e8e6:	428a      	cmp	r2, r1
   1e8e8:	d1f9      	bne.n	1e8de <memmove+0xaa>
   1e8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e8ec:	4603      	mov	r3, r0
   1e8ee:	e7f3      	b.n	1e8d8 <memmove+0xa4>
   1e8f0:	4603      	mov	r3, r0
   1e8f2:	e7f2      	b.n	1e8da <memmove+0xa6>
   1e8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e8f6:	4672      	mov	r2, lr
   1e8f8:	e7ee      	b.n	1e8d8 <memmove+0xa4>
   1e8fa:	bf00      	nop

0001e8fc <memset>:
   1e8fc:	b470      	push	{r4, r5, r6}
   1e8fe:	0786      	lsls	r6, r0, #30
   1e900:	d046      	beq.n	1e990 <memset+0x94>
   1e902:	1e54      	subs	r4, r2, #1
   1e904:	2a00      	cmp	r2, #0
   1e906:	d041      	beq.n	1e98c <memset+0x90>
   1e908:	b2ca      	uxtb	r2, r1
   1e90a:	4603      	mov	r3, r0
   1e90c:	e002      	b.n	1e914 <memset+0x18>
   1e90e:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e912:	d33b      	bcc.n	1e98c <memset+0x90>
   1e914:	f803 2b01 	strb.w	r2, [r3], #1
   1e918:	079d      	lsls	r5, r3, #30
   1e91a:	d1f8      	bne.n	1e90e <memset+0x12>
   1e91c:	2c03      	cmp	r4, #3
   1e91e:	d92e      	bls.n	1e97e <memset+0x82>
   1e920:	b2cd      	uxtb	r5, r1
   1e922:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e926:	2c0f      	cmp	r4, #15
   1e928:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e92c:	d919      	bls.n	1e962 <memset+0x66>
   1e92e:	f103 0210 	add.w	r2, r3, #16
   1e932:	4626      	mov	r6, r4
   1e934:	3e10      	subs	r6, #16
   1e936:	2e0f      	cmp	r6, #15
   1e938:	f842 5c10 	str.w	r5, [r2, #-16]
   1e93c:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e940:	f842 5c08 	str.w	r5, [r2, #-8]
   1e944:	f842 5c04 	str.w	r5, [r2, #-4]
   1e948:	f102 0210 	add.w	r2, r2, #16
   1e94c:	d8f2      	bhi.n	1e934 <memset+0x38>
   1e94e:	f1a4 0210 	sub.w	r2, r4, #16
   1e952:	f022 020f 	bic.w	r2, r2, #15
   1e956:	f004 040f 	and.w	r4, r4, #15
   1e95a:	3210      	adds	r2, #16
   1e95c:	2c03      	cmp	r4, #3
   1e95e:	4413      	add	r3, r2
   1e960:	d90d      	bls.n	1e97e <memset+0x82>
   1e962:	461e      	mov	r6, r3
   1e964:	4622      	mov	r2, r4
   1e966:	3a04      	subs	r2, #4
   1e968:	2a03      	cmp	r2, #3
   1e96a:	f846 5b04 	str.w	r5, [r6], #4
   1e96e:	d8fa      	bhi.n	1e966 <memset+0x6a>
   1e970:	1f22      	subs	r2, r4, #4
   1e972:	f022 0203 	bic.w	r2, r2, #3
   1e976:	3204      	adds	r2, #4
   1e978:	4413      	add	r3, r2
   1e97a:	f004 0403 	and.w	r4, r4, #3
   1e97e:	b12c      	cbz	r4, 1e98c <memset+0x90>
   1e980:	b2c9      	uxtb	r1, r1
   1e982:	441c      	add	r4, r3
   1e984:	f803 1b01 	strb.w	r1, [r3], #1
   1e988:	429c      	cmp	r4, r3
   1e98a:	d1fb      	bne.n	1e984 <memset+0x88>
   1e98c:	bc70      	pop	{r4, r5, r6}
   1e98e:	4770      	bx	lr
   1e990:	4614      	mov	r4, r2
   1e992:	4603      	mov	r3, r0
   1e994:	e7c2      	b.n	1e91c <memset+0x20>
   1e996:	bf00      	nop

0001e998 <__malloc_lock>:
   1e998:	4801      	ldr	r0, [pc, #4]	; (1e9a0 <__malloc_lock+0x8>)
   1e99a:	f7ff bb53 	b.w	1e044 <__retarget_lock_acquire_recursive>
   1e99e:	bf00      	nop
   1e9a0:	20002398 	.word	0x20002398

0001e9a4 <__malloc_unlock>:
   1e9a4:	4801      	ldr	r0, [pc, #4]	; (1e9ac <__malloc_unlock+0x8>)
   1e9a6:	f7ff bb4f 	b.w	1e048 <__retarget_lock_release_recursive>
   1e9aa:	bf00      	nop
   1e9ac:	20002398 	.word	0x20002398

0001e9b0 <_putc_r>:
   1e9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9b2:	460e      	mov	r6, r1
   1e9b4:	4614      	mov	r4, r2
   1e9b6:	4607      	mov	r7, r0
   1e9b8:	b108      	cbz	r0, 1e9be <_putc_r+0xe>
   1e9ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e9bc:	b34b      	cbz	r3, 1ea12 <_putc_r+0x62>
   1e9be:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e9c0:	07d8      	lsls	r0, r3, #31
   1e9c2:	d402      	bmi.n	1e9ca <_putc_r+0x1a>
   1e9c4:	89a3      	ldrh	r3, [r4, #12]
   1e9c6:	0599      	lsls	r1, r3, #22
   1e9c8:	d526      	bpl.n	1ea18 <_putc_r+0x68>
   1e9ca:	68a3      	ldr	r3, [r4, #8]
   1e9cc:	3b01      	subs	r3, #1
   1e9ce:	2b00      	cmp	r3, #0
   1e9d0:	60a3      	str	r3, [r4, #8]
   1e9d2:	db11      	blt.n	1e9f8 <_putc_r+0x48>
   1e9d4:	b2f5      	uxtb	r5, r6
   1e9d6:	6823      	ldr	r3, [r4, #0]
   1e9d8:	1c5a      	adds	r2, r3, #1
   1e9da:	6022      	str	r2, [r4, #0]
   1e9dc:	701e      	strb	r6, [r3, #0]
   1e9de:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e9e0:	07da      	lsls	r2, r3, #31
   1e9e2:	d402      	bmi.n	1e9ea <_putc_r+0x3a>
   1e9e4:	89a3      	ldrh	r3, [r4, #12]
   1e9e6:	059b      	lsls	r3, r3, #22
   1e9e8:	d501      	bpl.n	1e9ee <_putc_r+0x3e>
   1e9ea:	4628      	mov	r0, r5
   1e9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e9ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e9f0:	f7ff fb2a 	bl	1e048 <__retarget_lock_release_recursive>
   1e9f4:	4628      	mov	r0, r5
   1e9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e9f8:	69a2      	ldr	r2, [r4, #24]
   1e9fa:	4293      	cmp	r3, r2
   1e9fc:	db02      	blt.n	1ea04 <_putc_r+0x54>
   1e9fe:	b2f5      	uxtb	r5, r6
   1ea00:	2d0a      	cmp	r5, #10
   1ea02:	d1e8      	bne.n	1e9d6 <_putc_r+0x26>
   1ea04:	4631      	mov	r1, r6
   1ea06:	4638      	mov	r0, r7
   1ea08:	4622      	mov	r2, r4
   1ea0a:	f001 ff0f 	bl	2082c <__swbuf_r>
   1ea0e:	4605      	mov	r5, r0
   1ea10:	e7e5      	b.n	1e9de <_putc_r+0x2e>
   1ea12:	f003 f8af 	bl	21b74 <__sinit>
   1ea16:	e7d2      	b.n	1e9be <_putc_r+0xe>
   1ea18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ea1a:	f7ff fb13 	bl	1e044 <__retarget_lock_acquire_recursive>
   1ea1e:	e7d4      	b.n	1e9ca <_putc_r+0x1a>

0001ea20 <realloc>:
   1ea20:	4b02      	ldr	r3, [pc, #8]	; (1ea2c <realloc+0xc>)
   1ea22:	460a      	mov	r2, r1
   1ea24:	4601      	mov	r1, r0
   1ea26:	6818      	ldr	r0, [r3, #0]
   1ea28:	f000 b802 	b.w	1ea30 <_realloc_r>
   1ea2c:	20000108 	.word	0x20000108

0001ea30 <_realloc_r>:
   1ea30:	2900      	cmp	r1, #0
   1ea32:	f000 8095 	beq.w	1eb60 <_realloc_r+0x130>
   1ea36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea3a:	460d      	mov	r5, r1
   1ea3c:	4616      	mov	r6, r2
   1ea3e:	b083      	sub	sp, #12
   1ea40:	4680      	mov	r8, r0
   1ea42:	f106 070b 	add.w	r7, r6, #11
   1ea46:	f7ff ffa7 	bl	1e998 <__malloc_lock>
   1ea4a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1ea4e:	2f16      	cmp	r7, #22
   1ea50:	f02e 0403 	bic.w	r4, lr, #3
   1ea54:	f1a5 0908 	sub.w	r9, r5, #8
   1ea58:	d83c      	bhi.n	1ead4 <_realloc_r+0xa4>
   1ea5a:	2210      	movs	r2, #16
   1ea5c:	4617      	mov	r7, r2
   1ea5e:	42be      	cmp	r6, r7
   1ea60:	d83d      	bhi.n	1eade <_realloc_r+0xae>
   1ea62:	4294      	cmp	r4, r2
   1ea64:	da43      	bge.n	1eaee <_realloc_r+0xbe>
   1ea66:	4bc4      	ldr	r3, [pc, #784]	; (1ed78 <_realloc_r+0x348>)
   1ea68:	6899      	ldr	r1, [r3, #8]
   1ea6a:	eb09 0004 	add.w	r0, r9, r4
   1ea6e:	4288      	cmp	r0, r1
   1ea70:	f000 80b4 	beq.w	1ebdc <_realloc_r+0x1ac>
   1ea74:	6843      	ldr	r3, [r0, #4]
   1ea76:	f023 0101 	bic.w	r1, r3, #1
   1ea7a:	4401      	add	r1, r0
   1ea7c:	6849      	ldr	r1, [r1, #4]
   1ea7e:	07c9      	lsls	r1, r1, #31
   1ea80:	d54c      	bpl.n	1eb1c <_realloc_r+0xec>
   1ea82:	f01e 0f01 	tst.w	lr, #1
   1ea86:	f000 809b 	beq.w	1ebc0 <_realloc_r+0x190>
   1ea8a:	4631      	mov	r1, r6
   1ea8c:	4640      	mov	r0, r8
   1ea8e:	f7ff faed 	bl	1e06c <_malloc_r>
   1ea92:	4606      	mov	r6, r0
   1ea94:	2800      	cmp	r0, #0
   1ea96:	d03a      	beq.n	1eb0e <_realloc_r+0xde>
   1ea98:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1ea9c:	f023 0301 	bic.w	r3, r3, #1
   1eaa0:	444b      	add	r3, r9
   1eaa2:	f1a0 0208 	sub.w	r2, r0, #8
   1eaa6:	429a      	cmp	r2, r3
   1eaa8:	f000 8121 	beq.w	1ecee <_realloc_r+0x2be>
   1eaac:	1f22      	subs	r2, r4, #4
   1eaae:	2a24      	cmp	r2, #36	; 0x24
   1eab0:	f200 8107 	bhi.w	1ecc2 <_realloc_r+0x292>
   1eab4:	2a13      	cmp	r2, #19
   1eab6:	f200 80db 	bhi.w	1ec70 <_realloc_r+0x240>
   1eaba:	4603      	mov	r3, r0
   1eabc:	462a      	mov	r2, r5
   1eabe:	6811      	ldr	r1, [r2, #0]
   1eac0:	6019      	str	r1, [r3, #0]
   1eac2:	6851      	ldr	r1, [r2, #4]
   1eac4:	6059      	str	r1, [r3, #4]
   1eac6:	6892      	ldr	r2, [r2, #8]
   1eac8:	609a      	str	r2, [r3, #8]
   1eaca:	4629      	mov	r1, r5
   1eacc:	4640      	mov	r0, r8
   1eace:	f003 f8f3 	bl	21cb8 <_free_r>
   1ead2:	e01c      	b.n	1eb0e <_realloc_r+0xde>
   1ead4:	f027 0707 	bic.w	r7, r7, #7
   1ead8:	2f00      	cmp	r7, #0
   1eada:	463a      	mov	r2, r7
   1eadc:	dabf      	bge.n	1ea5e <_realloc_r+0x2e>
   1eade:	2600      	movs	r6, #0
   1eae0:	230c      	movs	r3, #12
   1eae2:	4630      	mov	r0, r6
   1eae4:	f8c8 3000 	str.w	r3, [r8]
   1eae8:	b003      	add	sp, #12
   1eaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eaee:	462e      	mov	r6, r5
   1eaf0:	1be3      	subs	r3, r4, r7
   1eaf2:	2b0f      	cmp	r3, #15
   1eaf4:	d81e      	bhi.n	1eb34 <_realloc_r+0x104>
   1eaf6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1eafa:	f003 0301 	and.w	r3, r3, #1
   1eafe:	4323      	orrs	r3, r4
   1eb00:	444c      	add	r4, r9
   1eb02:	f8c9 3004 	str.w	r3, [r9, #4]
   1eb06:	6863      	ldr	r3, [r4, #4]
   1eb08:	f043 0301 	orr.w	r3, r3, #1
   1eb0c:	6063      	str	r3, [r4, #4]
   1eb0e:	4640      	mov	r0, r8
   1eb10:	f7ff ff48 	bl	1e9a4 <__malloc_unlock>
   1eb14:	4630      	mov	r0, r6
   1eb16:	b003      	add	sp, #12
   1eb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb1c:	f023 0303 	bic.w	r3, r3, #3
   1eb20:	18e1      	adds	r1, r4, r3
   1eb22:	4291      	cmp	r1, r2
   1eb24:	db1f      	blt.n	1eb66 <_realloc_r+0x136>
   1eb26:	68c3      	ldr	r3, [r0, #12]
   1eb28:	6882      	ldr	r2, [r0, #8]
   1eb2a:	462e      	mov	r6, r5
   1eb2c:	60d3      	str	r3, [r2, #12]
   1eb2e:	460c      	mov	r4, r1
   1eb30:	609a      	str	r2, [r3, #8]
   1eb32:	e7dd      	b.n	1eaf0 <_realloc_r+0xc0>
   1eb34:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1eb38:	eb09 0107 	add.w	r1, r9, r7
   1eb3c:	f002 0201 	and.w	r2, r2, #1
   1eb40:	444c      	add	r4, r9
   1eb42:	f043 0301 	orr.w	r3, r3, #1
   1eb46:	4317      	orrs	r7, r2
   1eb48:	f8c9 7004 	str.w	r7, [r9, #4]
   1eb4c:	604b      	str	r3, [r1, #4]
   1eb4e:	6863      	ldr	r3, [r4, #4]
   1eb50:	f043 0301 	orr.w	r3, r3, #1
   1eb54:	3108      	adds	r1, #8
   1eb56:	6063      	str	r3, [r4, #4]
   1eb58:	4640      	mov	r0, r8
   1eb5a:	f003 f8ad 	bl	21cb8 <_free_r>
   1eb5e:	e7d6      	b.n	1eb0e <_realloc_r+0xde>
   1eb60:	4611      	mov	r1, r2
   1eb62:	f7ff ba83 	b.w	1e06c <_malloc_r>
   1eb66:	f01e 0f01 	tst.w	lr, #1
   1eb6a:	d18e      	bne.n	1ea8a <_realloc_r+0x5a>
   1eb6c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1eb70:	eba9 0a01 	sub.w	sl, r9, r1
   1eb74:	f8da 1004 	ldr.w	r1, [sl, #4]
   1eb78:	f021 0103 	bic.w	r1, r1, #3
   1eb7c:	440b      	add	r3, r1
   1eb7e:	4423      	add	r3, r4
   1eb80:	4293      	cmp	r3, r2
   1eb82:	db25      	blt.n	1ebd0 <_realloc_r+0x1a0>
   1eb84:	68c2      	ldr	r2, [r0, #12]
   1eb86:	6881      	ldr	r1, [r0, #8]
   1eb88:	4656      	mov	r6, sl
   1eb8a:	60ca      	str	r2, [r1, #12]
   1eb8c:	6091      	str	r1, [r2, #8]
   1eb8e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1eb92:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1eb96:	1f22      	subs	r2, r4, #4
   1eb98:	2a24      	cmp	r2, #36	; 0x24
   1eb9a:	60c1      	str	r1, [r0, #12]
   1eb9c:	6088      	str	r0, [r1, #8]
   1eb9e:	f200 8094 	bhi.w	1ecca <_realloc_r+0x29a>
   1eba2:	2a13      	cmp	r2, #19
   1eba4:	d96f      	bls.n	1ec86 <_realloc_r+0x256>
   1eba6:	6829      	ldr	r1, [r5, #0]
   1eba8:	f8ca 1008 	str.w	r1, [sl, #8]
   1ebac:	6869      	ldr	r1, [r5, #4]
   1ebae:	f8ca 100c 	str.w	r1, [sl, #12]
   1ebb2:	2a1b      	cmp	r2, #27
   1ebb4:	f200 80a2 	bhi.w	1ecfc <_realloc_r+0x2cc>
   1ebb8:	3508      	adds	r5, #8
   1ebba:	f10a 0210 	add.w	r2, sl, #16
   1ebbe:	e063      	b.n	1ec88 <_realloc_r+0x258>
   1ebc0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1ebc4:	eba9 0a03 	sub.w	sl, r9, r3
   1ebc8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1ebcc:	f021 0103 	bic.w	r1, r1, #3
   1ebd0:	1863      	adds	r3, r4, r1
   1ebd2:	4293      	cmp	r3, r2
   1ebd4:	f6ff af59 	blt.w	1ea8a <_realloc_r+0x5a>
   1ebd8:	4656      	mov	r6, sl
   1ebda:	e7d8      	b.n	1eb8e <_realloc_r+0x15e>
   1ebdc:	6841      	ldr	r1, [r0, #4]
   1ebde:	f021 0b03 	bic.w	fp, r1, #3
   1ebe2:	44a3      	add	fp, r4
   1ebe4:	f107 0010 	add.w	r0, r7, #16
   1ebe8:	4583      	cmp	fp, r0
   1ebea:	da56      	bge.n	1ec9a <_realloc_r+0x26a>
   1ebec:	f01e 0f01 	tst.w	lr, #1
   1ebf0:	f47f af4b 	bne.w	1ea8a <_realloc_r+0x5a>
   1ebf4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1ebf8:	eba9 0a01 	sub.w	sl, r9, r1
   1ebfc:	f8da 1004 	ldr.w	r1, [sl, #4]
   1ec00:	f021 0103 	bic.w	r1, r1, #3
   1ec04:	448b      	add	fp, r1
   1ec06:	4558      	cmp	r0, fp
   1ec08:	dce2      	bgt.n	1ebd0 <_realloc_r+0x1a0>
   1ec0a:	4656      	mov	r6, sl
   1ec0c:	f8da 100c 	ldr.w	r1, [sl, #12]
   1ec10:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1ec14:	1f22      	subs	r2, r4, #4
   1ec16:	2a24      	cmp	r2, #36	; 0x24
   1ec18:	60c1      	str	r1, [r0, #12]
   1ec1a:	6088      	str	r0, [r1, #8]
   1ec1c:	f200 808f 	bhi.w	1ed3e <_realloc_r+0x30e>
   1ec20:	2a13      	cmp	r2, #19
   1ec22:	f240 808a 	bls.w	1ed3a <_realloc_r+0x30a>
   1ec26:	6829      	ldr	r1, [r5, #0]
   1ec28:	f8ca 1008 	str.w	r1, [sl, #8]
   1ec2c:	6869      	ldr	r1, [r5, #4]
   1ec2e:	f8ca 100c 	str.w	r1, [sl, #12]
   1ec32:	2a1b      	cmp	r2, #27
   1ec34:	f200 808a 	bhi.w	1ed4c <_realloc_r+0x31c>
   1ec38:	3508      	adds	r5, #8
   1ec3a:	f10a 0210 	add.w	r2, sl, #16
   1ec3e:	6829      	ldr	r1, [r5, #0]
   1ec40:	6011      	str	r1, [r2, #0]
   1ec42:	6869      	ldr	r1, [r5, #4]
   1ec44:	6051      	str	r1, [r2, #4]
   1ec46:	68a9      	ldr	r1, [r5, #8]
   1ec48:	6091      	str	r1, [r2, #8]
   1ec4a:	eb0a 0107 	add.w	r1, sl, r7
   1ec4e:	ebab 0207 	sub.w	r2, fp, r7
   1ec52:	f042 0201 	orr.w	r2, r2, #1
   1ec56:	6099      	str	r1, [r3, #8]
   1ec58:	604a      	str	r2, [r1, #4]
   1ec5a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1ec5e:	f003 0301 	and.w	r3, r3, #1
   1ec62:	431f      	orrs	r7, r3
   1ec64:	4640      	mov	r0, r8
   1ec66:	f8ca 7004 	str.w	r7, [sl, #4]
   1ec6a:	f7ff fe9b 	bl	1e9a4 <__malloc_unlock>
   1ec6e:	e751      	b.n	1eb14 <_realloc_r+0xe4>
   1ec70:	682b      	ldr	r3, [r5, #0]
   1ec72:	6003      	str	r3, [r0, #0]
   1ec74:	686b      	ldr	r3, [r5, #4]
   1ec76:	6043      	str	r3, [r0, #4]
   1ec78:	2a1b      	cmp	r2, #27
   1ec7a:	d82d      	bhi.n	1ecd8 <_realloc_r+0x2a8>
   1ec7c:	f100 0308 	add.w	r3, r0, #8
   1ec80:	f105 0208 	add.w	r2, r5, #8
   1ec84:	e71b      	b.n	1eabe <_realloc_r+0x8e>
   1ec86:	4632      	mov	r2, r6
   1ec88:	6829      	ldr	r1, [r5, #0]
   1ec8a:	6011      	str	r1, [r2, #0]
   1ec8c:	6869      	ldr	r1, [r5, #4]
   1ec8e:	6051      	str	r1, [r2, #4]
   1ec90:	68a9      	ldr	r1, [r5, #8]
   1ec92:	6091      	str	r1, [r2, #8]
   1ec94:	461c      	mov	r4, r3
   1ec96:	46d1      	mov	r9, sl
   1ec98:	e72a      	b.n	1eaf0 <_realloc_r+0xc0>
   1ec9a:	eb09 0107 	add.w	r1, r9, r7
   1ec9e:	ebab 0b07 	sub.w	fp, fp, r7
   1eca2:	f04b 0201 	orr.w	r2, fp, #1
   1eca6:	6099      	str	r1, [r3, #8]
   1eca8:	604a      	str	r2, [r1, #4]
   1ecaa:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1ecae:	f003 0301 	and.w	r3, r3, #1
   1ecb2:	431f      	orrs	r7, r3
   1ecb4:	4640      	mov	r0, r8
   1ecb6:	f845 7c04 	str.w	r7, [r5, #-4]
   1ecba:	f7ff fe73 	bl	1e9a4 <__malloc_unlock>
   1ecbe:	462e      	mov	r6, r5
   1ecc0:	e728      	b.n	1eb14 <_realloc_r+0xe4>
   1ecc2:	4629      	mov	r1, r5
   1ecc4:	f7ff fdb6 	bl	1e834 <memmove>
   1ecc8:	e6ff      	b.n	1eaca <_realloc_r+0x9a>
   1ecca:	4629      	mov	r1, r5
   1eccc:	4630      	mov	r0, r6
   1ecce:	461c      	mov	r4, r3
   1ecd0:	46d1      	mov	r9, sl
   1ecd2:	f7ff fdaf 	bl	1e834 <memmove>
   1ecd6:	e70b      	b.n	1eaf0 <_realloc_r+0xc0>
   1ecd8:	68ab      	ldr	r3, [r5, #8]
   1ecda:	6083      	str	r3, [r0, #8]
   1ecdc:	68eb      	ldr	r3, [r5, #12]
   1ecde:	60c3      	str	r3, [r0, #12]
   1ece0:	2a24      	cmp	r2, #36	; 0x24
   1ece2:	d017      	beq.n	1ed14 <_realloc_r+0x2e4>
   1ece4:	f100 0310 	add.w	r3, r0, #16
   1ece8:	f105 0210 	add.w	r2, r5, #16
   1ecec:	e6e7      	b.n	1eabe <_realloc_r+0x8e>
   1ecee:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1ecf2:	f023 0303 	bic.w	r3, r3, #3
   1ecf6:	441c      	add	r4, r3
   1ecf8:	462e      	mov	r6, r5
   1ecfa:	e6f9      	b.n	1eaf0 <_realloc_r+0xc0>
   1ecfc:	68a9      	ldr	r1, [r5, #8]
   1ecfe:	f8ca 1010 	str.w	r1, [sl, #16]
   1ed02:	68e9      	ldr	r1, [r5, #12]
   1ed04:	f8ca 1014 	str.w	r1, [sl, #20]
   1ed08:	2a24      	cmp	r2, #36	; 0x24
   1ed0a:	d00c      	beq.n	1ed26 <_realloc_r+0x2f6>
   1ed0c:	3510      	adds	r5, #16
   1ed0e:	f10a 0218 	add.w	r2, sl, #24
   1ed12:	e7b9      	b.n	1ec88 <_realloc_r+0x258>
   1ed14:	692b      	ldr	r3, [r5, #16]
   1ed16:	6103      	str	r3, [r0, #16]
   1ed18:	696b      	ldr	r3, [r5, #20]
   1ed1a:	6143      	str	r3, [r0, #20]
   1ed1c:	f105 0218 	add.w	r2, r5, #24
   1ed20:	f100 0318 	add.w	r3, r0, #24
   1ed24:	e6cb      	b.n	1eabe <_realloc_r+0x8e>
   1ed26:	692a      	ldr	r2, [r5, #16]
   1ed28:	f8ca 2018 	str.w	r2, [sl, #24]
   1ed2c:	696a      	ldr	r2, [r5, #20]
   1ed2e:	f8ca 201c 	str.w	r2, [sl, #28]
   1ed32:	3518      	adds	r5, #24
   1ed34:	f10a 0220 	add.w	r2, sl, #32
   1ed38:	e7a6      	b.n	1ec88 <_realloc_r+0x258>
   1ed3a:	4632      	mov	r2, r6
   1ed3c:	e77f      	b.n	1ec3e <_realloc_r+0x20e>
   1ed3e:	4629      	mov	r1, r5
   1ed40:	4630      	mov	r0, r6
   1ed42:	9301      	str	r3, [sp, #4]
   1ed44:	f7ff fd76 	bl	1e834 <memmove>
   1ed48:	9b01      	ldr	r3, [sp, #4]
   1ed4a:	e77e      	b.n	1ec4a <_realloc_r+0x21a>
   1ed4c:	68a9      	ldr	r1, [r5, #8]
   1ed4e:	f8ca 1010 	str.w	r1, [sl, #16]
   1ed52:	68e9      	ldr	r1, [r5, #12]
   1ed54:	f8ca 1014 	str.w	r1, [sl, #20]
   1ed58:	2a24      	cmp	r2, #36	; 0x24
   1ed5a:	d003      	beq.n	1ed64 <_realloc_r+0x334>
   1ed5c:	3510      	adds	r5, #16
   1ed5e:	f10a 0218 	add.w	r2, sl, #24
   1ed62:	e76c      	b.n	1ec3e <_realloc_r+0x20e>
   1ed64:	692a      	ldr	r2, [r5, #16]
   1ed66:	f8ca 2018 	str.w	r2, [sl, #24]
   1ed6a:	696a      	ldr	r2, [r5, #20]
   1ed6c:	f8ca 201c 	str.w	r2, [sl, #28]
   1ed70:	3518      	adds	r5, #24
   1ed72:	f10a 0220 	add.w	r2, sl, #32
   1ed76:	e762      	b.n	1ec3e <_realloc_r+0x20e>
   1ed78:	200006a4 	.word	0x200006a4

0001ed7c <_sbrk_r>:
   1ed7c:	b538      	push	{r3, r4, r5, lr}
   1ed7e:	4c07      	ldr	r4, [pc, #28]	; (1ed9c <_sbrk_r+0x20>)
   1ed80:	2300      	movs	r3, #0
   1ed82:	4605      	mov	r5, r0
   1ed84:	4608      	mov	r0, r1
   1ed86:	6023      	str	r3, [r4, #0]
   1ed88:	f003 ff64 	bl	22c54 <_sbrk>
   1ed8c:	1c43      	adds	r3, r0, #1
   1ed8e:	d000      	beq.n	1ed92 <_sbrk_r+0x16>
   1ed90:	bd38      	pop	{r3, r4, r5, pc}
   1ed92:	6823      	ldr	r3, [r4, #0]
   1ed94:	2b00      	cmp	r3, #0
   1ed96:	d0fb      	beq.n	1ed90 <_sbrk_r+0x14>
   1ed98:	602b      	str	r3, [r5, #0]
   1ed9a:	bd38      	pop	{r3, r4, r5, pc}
   1ed9c:	200023ac 	.word	0x200023ac

0001eda0 <_raise_r>:
   1eda0:	291f      	cmp	r1, #31
   1eda2:	d828      	bhi.n	1edf6 <_raise_r+0x56>
   1eda4:	b520      	push	{r5, lr}
   1eda6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1edaa:	b082      	sub	sp, #8
   1edac:	4605      	mov	r5, r0
   1edae:	b1aa      	cbz	r2, 1eddc <_raise_r+0x3c>
   1edb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1edb4:	b193      	cbz	r3, 1eddc <_raise_r+0x3c>
   1edb6:	2b01      	cmp	r3, #1
   1edb8:	d00e      	beq.n	1edd8 <_raise_r+0x38>
   1edba:	1c58      	adds	r0, r3, #1
   1edbc:	d007      	beq.n	1edce <_raise_r+0x2e>
   1edbe:	2500      	movs	r5, #0
   1edc0:	4608      	mov	r0, r1
   1edc2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1edc6:	4798      	blx	r3
   1edc8:	4628      	mov	r0, r5
   1edca:	b002      	add	sp, #8
   1edcc:	bd20      	pop	{r5, pc}
   1edce:	2316      	movs	r3, #22
   1edd0:	2001      	movs	r0, #1
   1edd2:	602b      	str	r3, [r5, #0]
   1edd4:	b002      	add	sp, #8
   1edd6:	bd20      	pop	{r5, pc}
   1edd8:	2000      	movs	r0, #0
   1edda:	e7f6      	b.n	1edca <_raise_r+0x2a>
   1eddc:	4628      	mov	r0, r5
   1edde:	9101      	str	r1, [sp, #4]
   1ede0:	f000 f82a 	bl	1ee38 <_getpid_r>
   1ede4:	9901      	ldr	r1, [sp, #4]
   1ede6:	460a      	mov	r2, r1
   1ede8:	4601      	mov	r1, r0
   1edea:	4628      	mov	r0, r5
   1edec:	b002      	add	sp, #8
   1edee:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1edf2:	f000 b80d 	b.w	1ee10 <_kill_r>
   1edf6:	2316      	movs	r3, #22
   1edf8:	6003      	str	r3, [r0, #0]
   1edfa:	f04f 30ff 	mov.w	r0, #4294967295
   1edfe:	4770      	bx	lr

0001ee00 <raise>:
   1ee00:	4b02      	ldr	r3, [pc, #8]	; (1ee0c <raise+0xc>)
   1ee02:	4601      	mov	r1, r0
   1ee04:	6818      	ldr	r0, [r3, #0]
   1ee06:	f7ff bfcb 	b.w	1eda0 <_raise_r>
   1ee0a:	bf00      	nop
   1ee0c:	20000108 	.word	0x20000108

0001ee10 <_kill_r>:
   1ee10:	b538      	push	{r3, r4, r5, lr}
   1ee12:	460b      	mov	r3, r1
   1ee14:	4c07      	ldr	r4, [pc, #28]	; (1ee34 <_kill_r+0x24>)
   1ee16:	4605      	mov	r5, r0
   1ee18:	4611      	mov	r1, r2
   1ee1a:	4618      	mov	r0, r3
   1ee1c:	2300      	movs	r3, #0
   1ee1e:	6023      	str	r3, [r4, #0]
   1ee20:	f003 ff92 	bl	22d48 <_kill>
   1ee24:	1c43      	adds	r3, r0, #1
   1ee26:	d000      	beq.n	1ee2a <_kill_r+0x1a>
   1ee28:	bd38      	pop	{r3, r4, r5, pc}
   1ee2a:	6823      	ldr	r3, [r4, #0]
   1ee2c:	2b00      	cmp	r3, #0
   1ee2e:	d0fb      	beq.n	1ee28 <_kill_r+0x18>
   1ee30:	602b      	str	r3, [r5, #0]
   1ee32:	bd38      	pop	{r3, r4, r5, pc}
   1ee34:	200023ac 	.word	0x200023ac

0001ee38 <_getpid_r>:
   1ee38:	f003 bf0a 	b.w	22c50 <_getpid>

0001ee3c <snprintf>:
   1ee3c:	b40c      	push	{r2, r3}
   1ee3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee40:	4b23      	ldr	r3, [pc, #140]	; (1eed0 <snprintf+0x94>)
   1ee42:	1e0c      	subs	r4, r1, #0
   1ee44:	b09d      	sub	sp, #116	; 0x74
   1ee46:	681d      	ldr	r5, [r3, #0]
   1ee48:	db3d      	blt.n	1eec6 <snprintf+0x8a>
   1ee4a:	f44f 7302 	mov.w	r3, #520	; 0x208
   1ee4e:	9002      	str	r0, [sp, #8]
   1ee50:	9006      	str	r0, [sp, #24]
   1ee52:	f8ad 3014 	strh.w	r3, [sp, #20]
   1ee56:	ae23      	add	r6, sp, #140	; 0x8c
   1ee58:	d017      	beq.n	1ee8a <snprintf+0x4e>
   1ee5a:	3c01      	subs	r4, #1
   1ee5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1ee5e:	9404      	str	r4, [sp, #16]
   1ee60:	4633      	mov	r3, r6
   1ee62:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1ee66:	a902      	add	r1, sp, #8
   1ee68:	4628      	mov	r0, r5
   1ee6a:	9407      	str	r4, [sp, #28]
   1ee6c:	9601      	str	r6, [sp, #4]
   1ee6e:	f8ad 7016 	strh.w	r7, [sp, #22]
   1ee72:	f000 fa85 	bl	1f380 <_svfprintf_r>
   1ee76:	1c42      	adds	r2, r0, #1
   1ee78:	db1b      	blt.n	1eeb2 <snprintf+0x76>
   1ee7a:	9b02      	ldr	r3, [sp, #8]
   1ee7c:	2200      	movs	r2, #0
   1ee7e:	701a      	strb	r2, [r3, #0]
   1ee80:	b01d      	add	sp, #116	; 0x74
   1ee82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ee86:	b002      	add	sp, #8
   1ee88:	4770      	bx	lr
   1ee8a:	4633      	mov	r3, r6
   1ee8c:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1ee90:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1ee92:	9404      	str	r4, [sp, #16]
   1ee94:	a902      	add	r1, sp, #8
   1ee96:	4628      	mov	r0, r5
   1ee98:	9407      	str	r4, [sp, #28]
   1ee9a:	9601      	str	r6, [sp, #4]
   1ee9c:	f8ad 7016 	strh.w	r7, [sp, #22]
   1eea0:	f000 fa6e 	bl	1f380 <_svfprintf_r>
   1eea4:	1c43      	adds	r3, r0, #1
   1eea6:	db07      	blt.n	1eeb8 <snprintf+0x7c>
   1eea8:	b01d      	add	sp, #116	; 0x74
   1eeaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1eeae:	b002      	add	sp, #8
   1eeb0:	4770      	bx	lr
   1eeb2:	238b      	movs	r3, #139	; 0x8b
   1eeb4:	602b      	str	r3, [r5, #0]
   1eeb6:	e7e0      	b.n	1ee7a <snprintf+0x3e>
   1eeb8:	238b      	movs	r3, #139	; 0x8b
   1eeba:	602b      	str	r3, [r5, #0]
   1eebc:	b01d      	add	sp, #116	; 0x74
   1eebe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1eec2:	b002      	add	sp, #8
   1eec4:	4770      	bx	lr
   1eec6:	238b      	movs	r3, #139	; 0x8b
   1eec8:	602b      	str	r3, [r5, #0]
   1eeca:	f04f 30ff 	mov.w	r0, #4294967295
   1eece:	e7eb      	b.n	1eea8 <snprintf+0x6c>
   1eed0:	20000108 	.word	0x20000108

0001eed4 <sprintf>:
   1eed4:	b40e      	push	{r1, r2, r3}
   1eed6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eed8:	b09c      	sub	sp, #112	; 0x70
   1eeda:	ab21      	add	r3, sp, #132	; 0x84
   1eedc:	490f      	ldr	r1, [pc, #60]	; (1ef1c <sprintf+0x48>)
   1eede:	f853 2b04 	ldr.w	r2, [r3], #4
   1eee2:	9301      	str	r3, [sp, #4]
   1eee4:	4605      	mov	r5, r0
   1eee6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1eeea:	6808      	ldr	r0, [r1, #0]
   1eeec:	9502      	str	r5, [sp, #8]
   1eeee:	f44f 7702 	mov.w	r7, #520	; 0x208
   1eef2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1eef6:	a902      	add	r1, sp, #8
   1eef8:	9506      	str	r5, [sp, #24]
   1eefa:	f8ad 7014 	strh.w	r7, [sp, #20]
   1eefe:	9404      	str	r4, [sp, #16]
   1ef00:	9407      	str	r4, [sp, #28]
   1ef02:	f8ad 6016 	strh.w	r6, [sp, #22]
   1ef06:	f000 fa3b 	bl	1f380 <_svfprintf_r>
   1ef0a:	9b02      	ldr	r3, [sp, #8]
   1ef0c:	2200      	movs	r2, #0
   1ef0e:	701a      	strb	r2, [r3, #0]
   1ef10:	b01c      	add	sp, #112	; 0x70
   1ef12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ef16:	b003      	add	sp, #12
   1ef18:	4770      	bx	lr
   1ef1a:	bf00      	nop
   1ef1c:	20000108 	.word	0x20000108
   1ef20:	eba2 0003 	sub.w	r0, r2, r3
   1ef24:	4770      	bx	lr
   1ef26:	bf00      	nop

0001ef28 <strcmp>:
   1ef28:	7802      	ldrb	r2, [r0, #0]
   1ef2a:	780b      	ldrb	r3, [r1, #0]
   1ef2c:	2a01      	cmp	r2, #1
   1ef2e:	bf28      	it	cs
   1ef30:	429a      	cmpcs	r2, r3
   1ef32:	d1f5      	bne.n	1ef20 <sprintf+0x4c>
   1ef34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1ef38:	ea40 0401 	orr.w	r4, r0, r1
   1ef3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1ef40:	f06f 0c00 	mvn.w	ip, #0
   1ef44:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1ef48:	b312      	cbz	r2, 1ef90 <strcmp+0x68>
   1ef4a:	ea80 0401 	eor.w	r4, r0, r1
   1ef4e:	f014 0f07 	tst.w	r4, #7
   1ef52:	d16a      	bne.n	1f02a <strcmp+0x102>
   1ef54:	f000 0407 	and.w	r4, r0, #7
   1ef58:	f020 0007 	bic.w	r0, r0, #7
   1ef5c:	f004 0503 	and.w	r5, r4, #3
   1ef60:	f021 0107 	bic.w	r1, r1, #7
   1ef64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ef68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ef6c:	f014 0f04 	tst.w	r4, #4
   1ef70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ef74:	fa0c f405 	lsl.w	r4, ip, r5
   1ef78:	ea62 0204 	orn	r2, r2, r4
   1ef7c:	ea66 0604 	orn	r6, r6, r4
   1ef80:	d00a      	beq.n	1ef98 <strcmp+0x70>
   1ef82:	ea63 0304 	orn	r3, r3, r4
   1ef86:	4662      	mov	r2, ip
   1ef88:	ea67 0704 	orn	r7, r7, r4
   1ef8c:	4666      	mov	r6, ip
   1ef8e:	e003      	b.n	1ef98 <strcmp+0x70>
   1ef90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ef94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ef98:	fa82 f54c 	uadd8	r5, r2, ip
   1ef9c:	ea82 0406 	eor.w	r4, r2, r6
   1efa0:	faa4 f48c 	sel	r4, r4, ip
   1efa4:	bb6c      	cbnz	r4, 1f002 <strcmp+0xda>
   1efa6:	fa83 f54c 	uadd8	r5, r3, ip
   1efaa:	ea83 0507 	eor.w	r5, r3, r7
   1efae:	faa5 f58c 	sel	r5, r5, ip
   1efb2:	b995      	cbnz	r5, 1efda <strcmp+0xb2>
   1efb4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1efb8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1efbc:	fa82 f54c 	uadd8	r5, r2, ip
   1efc0:	ea82 0406 	eor.w	r4, r2, r6
   1efc4:	faa4 f48c 	sel	r4, r4, ip
   1efc8:	fa83 f54c 	uadd8	r5, r3, ip
   1efcc:	ea83 0507 	eor.w	r5, r3, r7
   1efd0:	faa5 f58c 	sel	r5, r5, ip
   1efd4:	4325      	orrs	r5, r4
   1efd6:	d0db      	beq.n	1ef90 <strcmp+0x68>
   1efd8:	b99c      	cbnz	r4, 1f002 <strcmp+0xda>
   1efda:	ba2d      	rev	r5, r5
   1efdc:	fab5 f485 	clz	r4, r5
   1efe0:	f024 0407 	bic.w	r4, r4, #7
   1efe4:	fa27 f104 	lsr.w	r1, r7, r4
   1efe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1efec:	fa23 f304 	lsr.w	r3, r3, r4
   1eff0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1eff4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eff8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1effc:	eba0 0001 	sub.w	r0, r0, r1
   1f000:	4770      	bx	lr
   1f002:	ba24      	rev	r4, r4
   1f004:	fab4 f484 	clz	r4, r4
   1f008:	f024 0407 	bic.w	r4, r4, #7
   1f00c:	fa26 f104 	lsr.w	r1, r6, r4
   1f010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1f014:	fa22 f204 	lsr.w	r2, r2, r4
   1f018:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1f01c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1f020:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f024:	eba0 0001 	sub.w	r0, r0, r1
   1f028:	4770      	bx	lr
   1f02a:	f014 0f03 	tst.w	r4, #3
   1f02e:	d13c      	bne.n	1f0aa <strcmp+0x182>
   1f030:	f010 0403 	ands.w	r4, r0, #3
   1f034:	d128      	bne.n	1f088 <strcmp+0x160>
   1f036:	f850 2b08 	ldr.w	r2, [r0], #8
   1f03a:	f851 3b08 	ldr.w	r3, [r1], #8
   1f03e:	fa82 f54c 	uadd8	r5, r2, ip
   1f042:	ea82 0503 	eor.w	r5, r2, r3
   1f046:	faa5 f58c 	sel	r5, r5, ip
   1f04a:	b95d      	cbnz	r5, 1f064 <strcmp+0x13c>
   1f04c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1f050:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1f054:	fa82 f54c 	uadd8	r5, r2, ip
   1f058:	ea82 0503 	eor.w	r5, r2, r3
   1f05c:	faa5 f58c 	sel	r5, r5, ip
   1f060:	2d00      	cmp	r5, #0
   1f062:	d0e8      	beq.n	1f036 <strcmp+0x10e>
   1f064:	ba2d      	rev	r5, r5
   1f066:	fab5 f485 	clz	r4, r5
   1f06a:	f024 0407 	bic.w	r4, r4, #7
   1f06e:	fa23 f104 	lsr.w	r1, r3, r4
   1f072:	fa22 f204 	lsr.w	r2, r2, r4
   1f076:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1f07a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1f07e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f082:	eba0 0001 	sub.w	r0, r0, r1
   1f086:	4770      	bx	lr
   1f088:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1f08c:	f020 0003 	bic.w	r0, r0, #3
   1f090:	f850 2b08 	ldr.w	r2, [r0], #8
   1f094:	f021 0103 	bic.w	r1, r1, #3
   1f098:	f851 3b08 	ldr.w	r3, [r1], #8
   1f09c:	fa0c f404 	lsl.w	r4, ip, r4
   1f0a0:	ea62 0204 	orn	r2, r2, r4
   1f0a4:	ea63 0304 	orn	r3, r3, r4
   1f0a8:	e7c9      	b.n	1f03e <strcmp+0x116>
   1f0aa:	f010 0403 	ands.w	r4, r0, #3
   1f0ae:	d01a      	beq.n	1f0e6 <strcmp+0x1be>
   1f0b0:	eba1 0104 	sub.w	r1, r1, r4
   1f0b4:	f020 0003 	bic.w	r0, r0, #3
   1f0b8:	07e4      	lsls	r4, r4, #31
   1f0ba:	f850 2b04 	ldr.w	r2, [r0], #4
   1f0be:	d006      	beq.n	1f0ce <strcmp+0x1a6>
   1f0c0:	d20f      	bcs.n	1f0e2 <strcmp+0x1ba>
   1f0c2:	788b      	ldrb	r3, [r1, #2]
   1f0c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1f0c8:	1ae4      	subs	r4, r4, r3
   1f0ca:	d106      	bne.n	1f0da <strcmp+0x1b2>
   1f0cc:	b12b      	cbz	r3, 1f0da <strcmp+0x1b2>
   1f0ce:	78cb      	ldrb	r3, [r1, #3]
   1f0d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1f0d4:	1ae4      	subs	r4, r4, r3
   1f0d6:	d100      	bne.n	1f0da <strcmp+0x1b2>
   1f0d8:	b91b      	cbnz	r3, 1f0e2 <strcmp+0x1ba>
   1f0da:	4620      	mov	r0, r4
   1f0dc:	f85d 4b10 	ldr.w	r4, [sp], #16
   1f0e0:	4770      	bx	lr
   1f0e2:	f101 0104 	add.w	r1, r1, #4
   1f0e6:	f850 2b04 	ldr.w	r2, [r0], #4
   1f0ea:	07cc      	lsls	r4, r1, #31
   1f0ec:	f021 0103 	bic.w	r1, r1, #3
   1f0f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1f0f4:	d848      	bhi.n	1f188 <strcmp+0x260>
   1f0f6:	d224      	bcs.n	1f142 <strcmp+0x21a>
   1f0f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1f0fc:	fa82 f54c 	uadd8	r5, r2, ip
   1f100:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1f104:	faa5 f58c 	sel	r5, r5, ip
   1f108:	d10a      	bne.n	1f120 <strcmp+0x1f8>
   1f10a:	b965      	cbnz	r5, 1f126 <strcmp+0x1fe>
   1f10c:	f851 3b04 	ldr.w	r3, [r1], #4
   1f110:	ea84 0402 	eor.w	r4, r4, r2
   1f114:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1f118:	d10e      	bne.n	1f138 <strcmp+0x210>
   1f11a:	f850 2b04 	ldr.w	r2, [r0], #4
   1f11e:	e7eb      	b.n	1f0f8 <strcmp+0x1d0>
   1f120:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1f124:	e055      	b.n	1f1d2 <strcmp+0x2aa>
   1f126:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1f12a:	d14d      	bne.n	1f1c8 <strcmp+0x2a0>
   1f12c:	7808      	ldrb	r0, [r1, #0]
   1f12e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f132:	f1c0 0000 	rsb	r0, r0, #0
   1f136:	4770      	bx	lr
   1f138:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1f13c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1f140:	e047      	b.n	1f1d2 <strcmp+0x2aa>
   1f142:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1f146:	fa82 f54c 	uadd8	r5, r2, ip
   1f14a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1f14e:	faa5 f58c 	sel	r5, r5, ip
   1f152:	d10a      	bne.n	1f16a <strcmp+0x242>
   1f154:	b965      	cbnz	r5, 1f170 <strcmp+0x248>
   1f156:	f851 3b04 	ldr.w	r3, [r1], #4
   1f15a:	ea84 0402 	eor.w	r4, r4, r2
   1f15e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1f162:	d10c      	bne.n	1f17e <strcmp+0x256>
   1f164:	f850 2b04 	ldr.w	r2, [r0], #4
   1f168:	e7eb      	b.n	1f142 <strcmp+0x21a>
   1f16a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1f16e:	e030      	b.n	1f1d2 <strcmp+0x2aa>
   1f170:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1f174:	d128      	bne.n	1f1c8 <strcmp+0x2a0>
   1f176:	880b      	ldrh	r3, [r1, #0]
   1f178:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1f17c:	e029      	b.n	1f1d2 <strcmp+0x2aa>
   1f17e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1f182:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1f186:	e024      	b.n	1f1d2 <strcmp+0x2aa>
   1f188:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1f18c:	fa82 f54c 	uadd8	r5, r2, ip
   1f190:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1f194:	faa5 f58c 	sel	r5, r5, ip
   1f198:	d10a      	bne.n	1f1b0 <strcmp+0x288>
   1f19a:	b965      	cbnz	r5, 1f1b6 <strcmp+0x28e>
   1f19c:	f851 3b04 	ldr.w	r3, [r1], #4
   1f1a0:	ea84 0402 	eor.w	r4, r4, r2
   1f1a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1f1a8:	d109      	bne.n	1f1be <strcmp+0x296>
   1f1aa:	f850 2b04 	ldr.w	r2, [r0], #4
   1f1ae:	e7eb      	b.n	1f188 <strcmp+0x260>
   1f1b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1f1b4:	e00d      	b.n	1f1d2 <strcmp+0x2aa>
   1f1b6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1f1ba:	d105      	bne.n	1f1c8 <strcmp+0x2a0>
   1f1bc:	680b      	ldr	r3, [r1, #0]
   1f1be:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1f1c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f1c6:	e004      	b.n	1f1d2 <strcmp+0x2aa>
   1f1c8:	f04f 0000 	mov.w	r0, #0
   1f1cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f1d0:	4770      	bx	lr
   1f1d2:	ba12      	rev	r2, r2
   1f1d4:	ba1b      	rev	r3, r3
   1f1d6:	fa82 f44c 	uadd8	r4, r2, ip
   1f1da:	ea82 0403 	eor.w	r4, r2, r3
   1f1de:	faa4 f58c 	sel	r5, r4, ip
   1f1e2:	fab5 f485 	clz	r4, r5
   1f1e6:	fa02 f204 	lsl.w	r2, r2, r4
   1f1ea:	fa03 f304 	lsl.w	r3, r3, r4
   1f1ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1f1f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f1f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1f1fa:	4770      	bx	lr
   1f1fc:	0000      	movs	r0, r0
	...

0001f200 <strlen>:
   1f200:	f890 f000 	pld	[r0]
   1f204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1f208:	f020 0107 	bic.w	r1, r0, #7
   1f20c:	f06f 0c00 	mvn.w	ip, #0
   1f210:	f010 0407 	ands.w	r4, r0, #7
   1f214:	f891 f020 	pld	[r1, #32]
   1f218:	f040 8049 	bne.w	1f2ae <strlen+0xae>
   1f21c:	f04f 0400 	mov.w	r4, #0
   1f220:	f06f 0007 	mvn.w	r0, #7
   1f224:	e9d1 2300 	ldrd	r2, r3, [r1]
   1f228:	f891 f040 	pld	[r1, #64]	; 0x40
   1f22c:	f100 0008 	add.w	r0, r0, #8
   1f230:	fa82 f24c 	uadd8	r2, r2, ip
   1f234:	faa4 f28c 	sel	r2, r4, ip
   1f238:	fa83 f34c 	uadd8	r3, r3, ip
   1f23c:	faa2 f38c 	sel	r3, r2, ip
   1f240:	bb4b      	cbnz	r3, 1f296 <strlen+0x96>
   1f242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1f246:	fa82 f24c 	uadd8	r2, r2, ip
   1f24a:	f100 0008 	add.w	r0, r0, #8
   1f24e:	faa4 f28c 	sel	r2, r4, ip
   1f252:	fa83 f34c 	uadd8	r3, r3, ip
   1f256:	faa2 f38c 	sel	r3, r2, ip
   1f25a:	b9e3      	cbnz	r3, 1f296 <strlen+0x96>
   1f25c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1f260:	fa82 f24c 	uadd8	r2, r2, ip
   1f264:	f100 0008 	add.w	r0, r0, #8
   1f268:	faa4 f28c 	sel	r2, r4, ip
   1f26c:	fa83 f34c 	uadd8	r3, r3, ip
   1f270:	faa2 f38c 	sel	r3, r2, ip
   1f274:	b97b      	cbnz	r3, 1f296 <strlen+0x96>
   1f276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1f27a:	f101 0120 	add.w	r1, r1, #32
   1f27e:	fa82 f24c 	uadd8	r2, r2, ip
   1f282:	f100 0008 	add.w	r0, r0, #8
   1f286:	faa4 f28c 	sel	r2, r4, ip
   1f28a:	fa83 f34c 	uadd8	r3, r3, ip
   1f28e:	faa2 f38c 	sel	r3, r2, ip
   1f292:	2b00      	cmp	r3, #0
   1f294:	d0c6      	beq.n	1f224 <strlen+0x24>
   1f296:	2a00      	cmp	r2, #0
   1f298:	bf04      	itt	eq
   1f29a:	3004      	addeq	r0, #4
   1f29c:	461a      	moveq	r2, r3
   1f29e:	ba12      	rev	r2, r2
   1f2a0:	fab2 f282 	clz	r2, r2
   1f2a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1f2a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1f2ac:	4770      	bx	lr
   1f2ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   1f2b2:	f004 0503 	and.w	r5, r4, #3
   1f2b6:	f1c4 0000 	rsb	r0, r4, #0
   1f2ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1f2be:	f014 0f04 	tst.w	r4, #4
   1f2c2:	f891 f040 	pld	[r1, #64]	; 0x40
   1f2c6:	fa0c f505 	lsl.w	r5, ip, r5
   1f2ca:	ea62 0205 	orn	r2, r2, r5
   1f2ce:	bf1c      	itt	ne
   1f2d0:	ea63 0305 	ornne	r3, r3, r5
   1f2d4:	4662      	movne	r2, ip
   1f2d6:	f04f 0400 	mov.w	r4, #0
   1f2da:	e7a9      	b.n	1f230 <strlen+0x30>

0001f2dc <strncmp>:
   1f2dc:	2a00      	cmp	r2, #0
   1f2de:	d041      	beq.n	1f364 <strncmp+0x88>
   1f2e0:	ea40 0301 	orr.w	r3, r0, r1
   1f2e4:	f013 0303 	ands.w	r3, r3, #3
   1f2e8:	b4f0      	push	{r4, r5, r6, r7}
   1f2ea:	d125      	bne.n	1f338 <strncmp+0x5c>
   1f2ec:	2a03      	cmp	r2, #3
   1f2ee:	d923      	bls.n	1f338 <strncmp+0x5c>
   1f2f0:	6804      	ldr	r4, [r0, #0]
   1f2f2:	680d      	ldr	r5, [r1, #0]
   1f2f4:	42ac      	cmp	r4, r5
   1f2f6:	d11f      	bne.n	1f338 <strncmp+0x5c>
   1f2f8:	3a04      	subs	r2, #4
   1f2fa:	d038      	beq.n	1f36e <strncmp+0x92>
   1f2fc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1f300:	ea25 0404 	bic.w	r4, r5, r4
   1f304:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1f308:	d12e      	bne.n	1f368 <strncmp+0x8c>
   1f30a:	3004      	adds	r0, #4
   1f30c:	3104      	adds	r1, #4
   1f30e:	e00f      	b.n	1f330 <strncmp+0x54>
   1f310:	f850 3b04 	ldr.w	r3, [r0], #4
   1f314:	680e      	ldr	r6, [r1, #0]
   1f316:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1f31a:	42b3      	cmp	r3, r6
   1f31c:	ea24 0403 	bic.w	r4, r4, r3
   1f320:	f101 0104 	add.w	r1, r1, #4
   1f324:	d126      	bne.n	1f374 <strncmp+0x98>
   1f326:	3a04      	subs	r2, #4
   1f328:	d021      	beq.n	1f36e <strncmp+0x92>
   1f32a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1f32e:	d11b      	bne.n	1f368 <strncmp+0x8c>
   1f330:	2a03      	cmp	r2, #3
   1f332:	4607      	mov	r7, r0
   1f334:	460d      	mov	r5, r1
   1f336:	d8eb      	bhi.n	1f310 <strncmp+0x34>
   1f338:	7805      	ldrb	r5, [r0, #0]
   1f33a:	780c      	ldrb	r4, [r1, #0]
   1f33c:	42ac      	cmp	r4, r5
   1f33e:	f102 33ff 	add.w	r3, r2, #4294967295
   1f342:	d11a      	bne.n	1f37a <strncmp+0x9e>
   1f344:	b183      	cbz	r3, 1f368 <strncmp+0x8c>
   1f346:	b914      	cbnz	r4, 1f34e <strncmp+0x72>
   1f348:	e00e      	b.n	1f368 <strncmp+0x8c>
   1f34a:	b16b      	cbz	r3, 1f368 <strncmp+0x8c>
   1f34c:	b17a      	cbz	r2, 1f36e <strncmp+0x92>
   1f34e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1f352:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f356:	42a2      	cmp	r2, r4
   1f358:	f103 33ff 	add.w	r3, r3, #4294967295
   1f35c:	d0f5      	beq.n	1f34a <strncmp+0x6e>
   1f35e:	1b10      	subs	r0, r2, r4
   1f360:	bcf0      	pop	{r4, r5, r6, r7}
   1f362:	4770      	bx	lr
   1f364:	4610      	mov	r0, r2
   1f366:	4770      	bx	lr
   1f368:	2000      	movs	r0, #0
   1f36a:	bcf0      	pop	{r4, r5, r6, r7}
   1f36c:	4770      	bx	lr
   1f36e:	4610      	mov	r0, r2
   1f370:	bcf0      	pop	{r4, r5, r6, r7}
   1f372:	4770      	bx	lr
   1f374:	4629      	mov	r1, r5
   1f376:	4638      	mov	r0, r7
   1f378:	e7de      	b.n	1f338 <strncmp+0x5c>
   1f37a:	462a      	mov	r2, r5
   1f37c:	e7ef      	b.n	1f35e <strncmp+0x82>
   1f37e:	bf00      	nop

0001f380 <_svfprintf_r>:
   1f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f384:	b0c1      	sub	sp, #260	; 0x104
   1f386:	460c      	mov	r4, r1
   1f388:	9107      	str	r1, [sp, #28]
   1f38a:	4692      	mov	sl, r2
   1f38c:	930b      	str	r3, [sp, #44]	; 0x2c
   1f38e:	9008      	str	r0, [sp, #32]
   1f390:	f002 fda2 	bl	21ed8 <_localeconv_r>
   1f394:	6803      	ldr	r3, [r0, #0]
   1f396:	9314      	str	r3, [sp, #80]	; 0x50
   1f398:	4618      	mov	r0, r3
   1f39a:	f7ff ff31 	bl	1f200 <strlen>
   1f39e:	89a3      	ldrh	r3, [r4, #12]
   1f3a0:	9013      	str	r0, [sp, #76]	; 0x4c
   1f3a2:	0619      	lsls	r1, r3, #24
   1f3a4:	d503      	bpl.n	1f3ae <_svfprintf_r+0x2e>
   1f3a6:	6923      	ldr	r3, [r4, #16]
   1f3a8:	2b00      	cmp	r3, #0
   1f3aa:	f001 801b 	beq.w	203e4 <_svfprintf_r+0x1064>
   1f3ae:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1f600 <_svfprintf_r+0x280>
   1f3b2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f3b6:	2300      	movs	r3, #0
   1f3b8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1f3bc:	930f      	str	r3, [sp, #60]	; 0x3c
   1f3be:	9325      	str	r3, [sp, #148]	; 0x94
   1f3c0:	9324      	str	r3, [sp, #144]	; 0x90
   1f3c2:	9312      	str	r3, [sp, #72]	; 0x48
   1f3c4:	9315      	str	r3, [sp, #84]	; 0x54
   1f3c6:	9305      	str	r3, [sp, #20]
   1f3c8:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1f3cc:	46c8      	mov	r8, r9
   1f3ce:	f89a 3000 	ldrb.w	r3, [sl]
   1f3d2:	4654      	mov	r4, sl
   1f3d4:	b1e3      	cbz	r3, 1f410 <_svfprintf_r+0x90>
   1f3d6:	2b25      	cmp	r3, #37	; 0x25
   1f3d8:	d102      	bne.n	1f3e0 <_svfprintf_r+0x60>
   1f3da:	e019      	b.n	1f410 <_svfprintf_r+0x90>
   1f3dc:	2b25      	cmp	r3, #37	; 0x25
   1f3de:	d003      	beq.n	1f3e8 <_svfprintf_r+0x68>
   1f3e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1f3e4:	2b00      	cmp	r3, #0
   1f3e6:	d1f9      	bne.n	1f3dc <_svfprintf_r+0x5c>
   1f3e8:	eba4 050a 	sub.w	r5, r4, sl
   1f3ec:	b185      	cbz	r5, 1f410 <_svfprintf_r+0x90>
   1f3ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f3f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f3f2:	f8c8 a000 	str.w	sl, [r8]
   1f3f6:	3301      	adds	r3, #1
   1f3f8:	442a      	add	r2, r5
   1f3fa:	2b07      	cmp	r3, #7
   1f3fc:	f8c8 5004 	str.w	r5, [r8, #4]
   1f400:	9225      	str	r2, [sp, #148]	; 0x94
   1f402:	9324      	str	r3, [sp, #144]	; 0x90
   1f404:	dc7f      	bgt.n	1f506 <_svfprintf_r+0x186>
   1f406:	f108 0808 	add.w	r8, r8, #8
   1f40a:	9b05      	ldr	r3, [sp, #20]
   1f40c:	442b      	add	r3, r5
   1f40e:	9305      	str	r3, [sp, #20]
   1f410:	7823      	ldrb	r3, [r4, #0]
   1f412:	2b00      	cmp	r3, #0
   1f414:	d07f      	beq.n	1f516 <_svfprintf_r+0x196>
   1f416:	2300      	movs	r3, #0
   1f418:	461a      	mov	r2, r3
   1f41a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f41e:	4619      	mov	r1, r3
   1f420:	9309      	str	r3, [sp, #36]	; 0x24
   1f422:	469b      	mov	fp, r3
   1f424:	f04f 30ff 	mov.w	r0, #4294967295
   1f428:	7863      	ldrb	r3, [r4, #1]
   1f42a:	9006      	str	r0, [sp, #24]
   1f42c:	f104 0a01 	add.w	sl, r4, #1
   1f430:	f10a 0a01 	add.w	sl, sl, #1
   1f434:	f1a3 0020 	sub.w	r0, r3, #32
   1f438:	2858      	cmp	r0, #88	; 0x58
   1f43a:	f200 83d3 	bhi.w	1fbe4 <_svfprintf_r+0x864>
   1f43e:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f442:	023f      	.short	0x023f
   1f444:	03d103d1 	.word	0x03d103d1
   1f448:	03d10247 	.word	0x03d10247
   1f44c:	03d103d1 	.word	0x03d103d1
   1f450:	03d103d1 	.word	0x03d103d1
   1f454:	024c03d1 	.word	0x024c03d1
   1f458:	03d1020a 	.word	0x03d1020a
   1f45c:	0273005d 	.word	0x0273005d
   1f460:	028e03d1 	.word	0x028e03d1
   1f464:	03c103c1 	.word	0x03c103c1
   1f468:	03c103c1 	.word	0x03c103c1
   1f46c:	03c103c1 	.word	0x03c103c1
   1f470:	03c103c1 	.word	0x03c103c1
   1f474:	03d103c1 	.word	0x03d103c1
   1f478:	03d103d1 	.word	0x03d103d1
   1f47c:	03d103d1 	.word	0x03d103d1
   1f480:	03d103d1 	.word	0x03d103d1
   1f484:	03d103d1 	.word	0x03d103d1
   1f488:	033f03d1 	.word	0x033f03d1
   1f48c:	03d1035f 	.word	0x03d1035f
   1f490:	03d1035f 	.word	0x03d1035f
   1f494:	03d103d1 	.word	0x03d103d1
   1f498:	03aa03d1 	.word	0x03aa03d1
   1f49c:	03d103d1 	.word	0x03d103d1
   1f4a0:	03d103af 	.word	0x03d103af
   1f4a4:	03d103d1 	.word	0x03d103d1
   1f4a8:	03d103d1 	.word	0x03d103d1
   1f4ac:	03d10261 	.word	0x03d10261
   1f4b0:	032603d1 	.word	0x032603d1
   1f4b4:	03d103d1 	.word	0x03d103d1
   1f4b8:	03d103d1 	.word	0x03d103d1
   1f4bc:	03d103d1 	.word	0x03d103d1
   1f4c0:	03d103d1 	.word	0x03d103d1
   1f4c4:	03d103d1 	.word	0x03d103d1
   1f4c8:	02e302ce 	.word	0x02e302ce
   1f4cc:	035f035f 	.word	0x035f035f
   1f4d0:	0293035f 	.word	0x0293035f
   1f4d4:	03d102e3 	.word	0x03d102e3
   1f4d8:	029803d1 	.word	0x029803d1
   1f4dc:	02a503d1 	.word	0x02a503d1
   1f4e0:	02bc01d3 	.word	0x02bc01d3
   1f4e4:	03d1020f 	.word	0x03d1020f
   1f4e8:	03d101e8 	.word	0x03d101e8
   1f4ec:	03d1007e 	.word	0x03d1007e
   1f4f0:	021403d1 	.word	0x021403d1
   1f4f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f4f6:	930b      	str	r3, [sp, #44]	; 0x2c
   1f4f8:	4240      	negs	r0, r0
   1f4fa:	9009      	str	r0, [sp, #36]	; 0x24
   1f4fc:	f04b 0b04 	orr.w	fp, fp, #4
   1f500:	f89a 3000 	ldrb.w	r3, [sl]
   1f504:	e794      	b.n	1f430 <_svfprintf_r+0xb0>
   1f506:	aa23      	add	r2, sp, #140	; 0x8c
   1f508:	9907      	ldr	r1, [sp, #28]
   1f50a:	9808      	ldr	r0, [sp, #32]
   1f50c:	f003 f8aa 	bl	22664 <__ssprint_r>
   1f510:	b940      	cbnz	r0, 1f524 <_svfprintf_r+0x1a4>
   1f512:	46c8      	mov	r8, r9
   1f514:	e779      	b.n	1f40a <_svfprintf_r+0x8a>
   1f516:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f518:	b123      	cbz	r3, 1f524 <_svfprintf_r+0x1a4>
   1f51a:	9808      	ldr	r0, [sp, #32]
   1f51c:	9907      	ldr	r1, [sp, #28]
   1f51e:	aa23      	add	r2, sp, #140	; 0x8c
   1f520:	f003 f8a0 	bl	22664 <__ssprint_r>
   1f524:	9b07      	ldr	r3, [sp, #28]
   1f526:	899b      	ldrh	r3, [r3, #12]
   1f528:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f52c:	9b05      	ldr	r3, [sp, #20]
   1f52e:	bf18      	it	ne
   1f530:	f04f 33ff 	movne.w	r3, #4294967295
   1f534:	9305      	str	r3, [sp, #20]
   1f536:	9805      	ldr	r0, [sp, #20]
   1f538:	b041      	add	sp, #260	; 0x104
   1f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f53e:	f01b 0f20 	tst.w	fp, #32
   1f542:	930d      	str	r3, [sp, #52]	; 0x34
   1f544:	f040 81e5 	bne.w	1f912 <_svfprintf_r+0x592>
   1f548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f54a:	f01b 0f10 	tst.w	fp, #16
   1f54e:	4613      	mov	r3, r2
   1f550:	f040 8588 	bne.w	20064 <_svfprintf_r+0xce4>
   1f554:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f558:	f000 8584 	beq.w	20064 <_svfprintf_r+0xce4>
   1f55c:	8814      	ldrh	r4, [r2, #0]
   1f55e:	3204      	adds	r2, #4
   1f560:	2500      	movs	r5, #0
   1f562:	2301      	movs	r3, #1
   1f564:	920b      	str	r2, [sp, #44]	; 0x2c
   1f566:	2700      	movs	r7, #0
   1f568:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f56c:	9906      	ldr	r1, [sp, #24]
   1f56e:	1c4a      	adds	r2, r1, #1
   1f570:	f000 826d 	beq.w	1fa4e <_svfprintf_r+0x6ce>
   1f574:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1f578:	9203      	str	r2, [sp, #12]
   1f57a:	ea54 0205 	orrs.w	r2, r4, r5
   1f57e:	f040 826c 	bne.w	1fa5a <_svfprintf_r+0x6da>
   1f582:	2900      	cmp	r1, #0
   1f584:	f040 8451 	bne.w	1fe2a <_svfprintf_r+0xaaa>
   1f588:	2b00      	cmp	r3, #0
   1f58a:	f040 850b 	bne.w	1ffa4 <_svfprintf_r+0xc24>
   1f58e:	f01b 0301 	ands.w	r3, fp, #1
   1f592:	930a      	str	r3, [sp, #40]	; 0x28
   1f594:	f000 861a 	beq.w	201cc <_svfprintf_r+0xe4c>
   1f598:	ae40      	add	r6, sp, #256	; 0x100
   1f59a:	2330      	movs	r3, #48	; 0x30
   1f59c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f5a0:	9b06      	ldr	r3, [sp, #24]
   1f5a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f5a4:	4293      	cmp	r3, r2
   1f5a6:	bfb8      	it	lt
   1f5a8:	4613      	movlt	r3, r2
   1f5aa:	9304      	str	r3, [sp, #16]
   1f5ac:	2300      	movs	r3, #0
   1f5ae:	930e      	str	r3, [sp, #56]	; 0x38
   1f5b0:	b117      	cbz	r7, 1f5b8 <_svfprintf_r+0x238>
   1f5b2:	9b04      	ldr	r3, [sp, #16]
   1f5b4:	3301      	adds	r3, #1
   1f5b6:	9304      	str	r3, [sp, #16]
   1f5b8:	9b03      	ldr	r3, [sp, #12]
   1f5ba:	f013 0302 	ands.w	r3, r3, #2
   1f5be:	930c      	str	r3, [sp, #48]	; 0x30
   1f5c0:	d002      	beq.n	1f5c8 <_svfprintf_r+0x248>
   1f5c2:	9b04      	ldr	r3, [sp, #16]
   1f5c4:	3302      	adds	r3, #2
   1f5c6:	9304      	str	r3, [sp, #16]
   1f5c8:	9b03      	ldr	r3, [sp, #12]
   1f5ca:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1f5ce:	f040 8320 	bne.w	1fc12 <_svfprintf_r+0x892>
   1f5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f5d4:	9a04      	ldr	r2, [sp, #16]
   1f5d6:	eba3 0b02 	sub.w	fp, r3, r2
   1f5da:	f1bb 0f00 	cmp.w	fp, #0
   1f5de:	f340 8318 	ble.w	1fc12 <_svfprintf_r+0x892>
   1f5e2:	f1bb 0f10 	cmp.w	fp, #16
   1f5e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f5e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f5ea:	dd30      	ble.n	1f64e <_svfprintf_r+0x2ce>
   1f5ec:	4643      	mov	r3, r8
   1f5ee:	4621      	mov	r1, r4
   1f5f0:	46a8      	mov	r8, r5
   1f5f2:	2710      	movs	r7, #16
   1f5f4:	9c08      	ldr	r4, [sp, #32]
   1f5f6:	9d07      	ldr	r5, [sp, #28]
   1f5f8:	e00d      	b.n	1f616 <_svfprintf_r+0x296>
   1f5fa:	bf00      	nop
   1f5fc:	f3af 8000 	nop.w
	...
   1f608:	f1ab 0b10 	sub.w	fp, fp, #16
   1f60c:	f1bb 0f10 	cmp.w	fp, #16
   1f610:	f103 0308 	add.w	r3, r3, #8
   1f614:	dd18      	ble.n	1f648 <_svfprintf_r+0x2c8>
   1f616:	3201      	adds	r2, #1
   1f618:	48b7      	ldr	r0, [pc, #732]	; (1f8f8 <_svfprintf_r+0x578>)
   1f61a:	9224      	str	r2, [sp, #144]	; 0x90
   1f61c:	3110      	adds	r1, #16
   1f61e:	2a07      	cmp	r2, #7
   1f620:	9125      	str	r1, [sp, #148]	; 0x94
   1f622:	e883 0081 	stmia.w	r3, {r0, r7}
   1f626:	ddef      	ble.n	1f608 <_svfprintf_r+0x288>
   1f628:	aa23      	add	r2, sp, #140	; 0x8c
   1f62a:	4629      	mov	r1, r5
   1f62c:	4620      	mov	r0, r4
   1f62e:	f003 f819 	bl	22664 <__ssprint_r>
   1f632:	2800      	cmp	r0, #0
   1f634:	f47f af76 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1f638:	f1ab 0b10 	sub.w	fp, fp, #16
   1f63c:	f1bb 0f10 	cmp.w	fp, #16
   1f640:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f642:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f644:	464b      	mov	r3, r9
   1f646:	dce6      	bgt.n	1f616 <_svfprintf_r+0x296>
   1f648:	4645      	mov	r5, r8
   1f64a:	460c      	mov	r4, r1
   1f64c:	4698      	mov	r8, r3
   1f64e:	3201      	adds	r2, #1
   1f650:	4ba9      	ldr	r3, [pc, #676]	; (1f8f8 <_svfprintf_r+0x578>)
   1f652:	9224      	str	r2, [sp, #144]	; 0x90
   1f654:	445c      	add	r4, fp
   1f656:	2a07      	cmp	r2, #7
   1f658:	9425      	str	r4, [sp, #148]	; 0x94
   1f65a:	e888 0808 	stmia.w	r8, {r3, fp}
   1f65e:	f300 84a6 	bgt.w	1ffae <_svfprintf_r+0xc2e>
   1f662:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f666:	f108 0808 	add.w	r8, r8, #8
   1f66a:	b177      	cbz	r7, 1f68a <_svfprintf_r+0x30a>
   1f66c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f66e:	3301      	adds	r3, #1
   1f670:	3401      	adds	r4, #1
   1f672:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1f676:	2201      	movs	r2, #1
   1f678:	2b07      	cmp	r3, #7
   1f67a:	9425      	str	r4, [sp, #148]	; 0x94
   1f67c:	9324      	str	r3, [sp, #144]	; 0x90
   1f67e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f682:	f300 83f4 	bgt.w	1fe6e <_svfprintf_r+0xaee>
   1f686:	f108 0808 	add.w	r8, r8, #8
   1f68a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f68c:	b16b      	cbz	r3, 1f6aa <_svfprintf_r+0x32a>
   1f68e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f690:	3301      	adds	r3, #1
   1f692:	3402      	adds	r4, #2
   1f694:	a91c      	add	r1, sp, #112	; 0x70
   1f696:	2202      	movs	r2, #2
   1f698:	2b07      	cmp	r3, #7
   1f69a:	9425      	str	r4, [sp, #148]	; 0x94
   1f69c:	9324      	str	r3, [sp, #144]	; 0x90
   1f69e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f6a2:	f300 83d9 	bgt.w	1fe58 <_svfprintf_r+0xad8>
   1f6a6:	f108 0808 	add.w	r8, r8, #8
   1f6aa:	2d80      	cmp	r5, #128	; 0x80
   1f6ac:	f000 8322 	beq.w	1fcf4 <_svfprintf_r+0x974>
   1f6b0:	9b06      	ldr	r3, [sp, #24]
   1f6b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f6b4:	1a9f      	subs	r7, r3, r2
   1f6b6:	2f00      	cmp	r7, #0
   1f6b8:	dd36      	ble.n	1f728 <_svfprintf_r+0x3a8>
   1f6ba:	2f10      	cmp	r7, #16
   1f6bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f6be:	4d8f      	ldr	r5, [pc, #572]	; (1f8fc <_svfprintf_r+0x57c>)
   1f6c0:	dd27      	ble.n	1f712 <_svfprintf_r+0x392>
   1f6c2:	4642      	mov	r2, r8
   1f6c4:	4621      	mov	r1, r4
   1f6c6:	46b0      	mov	r8, r6
   1f6c8:	f04f 0b10 	mov.w	fp, #16
   1f6cc:	462e      	mov	r6, r5
   1f6ce:	9c08      	ldr	r4, [sp, #32]
   1f6d0:	9d07      	ldr	r5, [sp, #28]
   1f6d2:	e004      	b.n	1f6de <_svfprintf_r+0x35e>
   1f6d4:	3f10      	subs	r7, #16
   1f6d6:	2f10      	cmp	r7, #16
   1f6d8:	f102 0208 	add.w	r2, r2, #8
   1f6dc:	dd15      	ble.n	1f70a <_svfprintf_r+0x38a>
   1f6de:	3301      	adds	r3, #1
   1f6e0:	3110      	adds	r1, #16
   1f6e2:	2b07      	cmp	r3, #7
   1f6e4:	9125      	str	r1, [sp, #148]	; 0x94
   1f6e6:	9324      	str	r3, [sp, #144]	; 0x90
   1f6e8:	e882 0840 	stmia.w	r2, {r6, fp}
   1f6ec:	ddf2      	ble.n	1f6d4 <_svfprintf_r+0x354>
   1f6ee:	aa23      	add	r2, sp, #140	; 0x8c
   1f6f0:	4629      	mov	r1, r5
   1f6f2:	4620      	mov	r0, r4
   1f6f4:	f002 ffb6 	bl	22664 <__ssprint_r>
   1f6f8:	2800      	cmp	r0, #0
   1f6fa:	f47f af13 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1f6fe:	3f10      	subs	r7, #16
   1f700:	2f10      	cmp	r7, #16
   1f702:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f704:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f706:	464a      	mov	r2, r9
   1f708:	dce9      	bgt.n	1f6de <_svfprintf_r+0x35e>
   1f70a:	4635      	mov	r5, r6
   1f70c:	460c      	mov	r4, r1
   1f70e:	4646      	mov	r6, r8
   1f710:	4690      	mov	r8, r2
   1f712:	3301      	adds	r3, #1
   1f714:	443c      	add	r4, r7
   1f716:	2b07      	cmp	r3, #7
   1f718:	9425      	str	r4, [sp, #148]	; 0x94
   1f71a:	9324      	str	r3, [sp, #144]	; 0x90
   1f71c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f720:	f300 838f 	bgt.w	1fe42 <_svfprintf_r+0xac2>
   1f724:	f108 0808 	add.w	r8, r8, #8
   1f728:	9b03      	ldr	r3, [sp, #12]
   1f72a:	05df      	lsls	r7, r3, #23
   1f72c:	f100 8273 	bmi.w	1fc16 <_svfprintf_r+0x896>
   1f730:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f732:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f734:	f8c8 6000 	str.w	r6, [r8]
   1f738:	3301      	adds	r3, #1
   1f73a:	440c      	add	r4, r1
   1f73c:	2b07      	cmp	r3, #7
   1f73e:	9425      	str	r4, [sp, #148]	; 0x94
   1f740:	f8c8 1004 	str.w	r1, [r8, #4]
   1f744:	9324      	str	r3, [sp, #144]	; 0x90
   1f746:	f300 835b 	bgt.w	1fe00 <_svfprintf_r+0xa80>
   1f74a:	f108 0808 	add.w	r8, r8, #8
   1f74e:	9b03      	ldr	r3, [sp, #12]
   1f750:	075b      	lsls	r3, r3, #29
   1f752:	d53a      	bpl.n	1f7ca <_svfprintf_r+0x44a>
   1f754:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f756:	9a04      	ldr	r2, [sp, #16]
   1f758:	1a9d      	subs	r5, r3, r2
   1f75a:	2d00      	cmp	r5, #0
   1f75c:	dd35      	ble.n	1f7ca <_svfprintf_r+0x44a>
   1f75e:	2d10      	cmp	r5, #16
   1f760:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f762:	dd20      	ble.n	1f7a6 <_svfprintf_r+0x426>
   1f764:	2610      	movs	r6, #16
   1f766:	9f08      	ldr	r7, [sp, #32]
   1f768:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f76c:	e004      	b.n	1f778 <_svfprintf_r+0x3f8>
   1f76e:	3d10      	subs	r5, #16
   1f770:	2d10      	cmp	r5, #16
   1f772:	f108 0808 	add.w	r8, r8, #8
   1f776:	dd16      	ble.n	1f7a6 <_svfprintf_r+0x426>
   1f778:	3301      	adds	r3, #1
   1f77a:	4a5f      	ldr	r2, [pc, #380]	; (1f8f8 <_svfprintf_r+0x578>)
   1f77c:	9324      	str	r3, [sp, #144]	; 0x90
   1f77e:	3410      	adds	r4, #16
   1f780:	2b07      	cmp	r3, #7
   1f782:	9425      	str	r4, [sp, #148]	; 0x94
   1f784:	e888 0044 	stmia.w	r8, {r2, r6}
   1f788:	ddf1      	ble.n	1f76e <_svfprintf_r+0x3ee>
   1f78a:	aa23      	add	r2, sp, #140	; 0x8c
   1f78c:	4659      	mov	r1, fp
   1f78e:	4638      	mov	r0, r7
   1f790:	f002 ff68 	bl	22664 <__ssprint_r>
   1f794:	2800      	cmp	r0, #0
   1f796:	f47f aec5 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1f79a:	3d10      	subs	r5, #16
   1f79c:	2d10      	cmp	r5, #16
   1f79e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f7a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f7a2:	46c8      	mov	r8, r9
   1f7a4:	dce8      	bgt.n	1f778 <_svfprintf_r+0x3f8>
   1f7a6:	3301      	adds	r3, #1
   1f7a8:	4a53      	ldr	r2, [pc, #332]	; (1f8f8 <_svfprintf_r+0x578>)
   1f7aa:	9324      	str	r3, [sp, #144]	; 0x90
   1f7ac:	442c      	add	r4, r5
   1f7ae:	2b07      	cmp	r3, #7
   1f7b0:	9425      	str	r4, [sp, #148]	; 0x94
   1f7b2:	e888 0024 	stmia.w	r8, {r2, r5}
   1f7b6:	dd08      	ble.n	1f7ca <_svfprintf_r+0x44a>
   1f7b8:	aa23      	add	r2, sp, #140	; 0x8c
   1f7ba:	9907      	ldr	r1, [sp, #28]
   1f7bc:	9808      	ldr	r0, [sp, #32]
   1f7be:	f002 ff51 	bl	22664 <__ssprint_r>
   1f7c2:	2800      	cmp	r0, #0
   1f7c4:	f47f aeae 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1f7c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f7ca:	9b05      	ldr	r3, [sp, #20]
   1f7cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f7ce:	9904      	ldr	r1, [sp, #16]
   1f7d0:	428a      	cmp	r2, r1
   1f7d2:	bfac      	ite	ge
   1f7d4:	189b      	addge	r3, r3, r2
   1f7d6:	185b      	addlt	r3, r3, r1
   1f7d8:	9305      	str	r3, [sp, #20]
   1f7da:	2c00      	cmp	r4, #0
   1f7dc:	f040 831b 	bne.w	1fe16 <_svfprintf_r+0xa96>
   1f7e0:	2300      	movs	r3, #0
   1f7e2:	9324      	str	r3, [sp, #144]	; 0x90
   1f7e4:	46c8      	mov	r8, r9
   1f7e6:	e5f2      	b.n	1f3ce <_svfprintf_r+0x4e>
   1f7e8:	930d      	str	r3, [sp, #52]	; 0x34
   1f7ea:	f01b 0320 	ands.w	r3, fp, #32
   1f7ee:	f040 81de 	bne.w	1fbae <_svfprintf_r+0x82e>
   1f7f2:	f01b 0210 	ands.w	r2, fp, #16
   1f7f6:	f040 842d 	bne.w	20054 <_svfprintf_r+0xcd4>
   1f7fa:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f7fe:	f000 8429 	beq.w	20054 <_svfprintf_r+0xcd4>
   1f802:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f804:	4613      	mov	r3, r2
   1f806:	460a      	mov	r2, r1
   1f808:	3204      	adds	r2, #4
   1f80a:	880c      	ldrh	r4, [r1, #0]
   1f80c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f80e:	2500      	movs	r5, #0
   1f810:	e6a9      	b.n	1f566 <_svfprintf_r+0x1e6>
   1f812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f814:	930d      	str	r3, [sp, #52]	; 0x34
   1f816:	6816      	ldr	r6, [r2, #0]
   1f818:	2400      	movs	r4, #0
   1f81a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f81e:	1d15      	adds	r5, r2, #4
   1f820:	2e00      	cmp	r6, #0
   1f822:	f000 86b5 	beq.w	20590 <_svfprintf_r+0x1210>
   1f826:	9a06      	ldr	r2, [sp, #24]
   1f828:	1c53      	adds	r3, r2, #1
   1f82a:	f000 8617 	beq.w	2045c <_svfprintf_r+0x10dc>
   1f82e:	4621      	mov	r1, r4
   1f830:	4630      	mov	r0, r6
   1f832:	f7fe fee5 	bl	1e600 <memchr>
   1f836:	2800      	cmp	r0, #0
   1f838:	f000 8708 	beq.w	2064c <_svfprintf_r+0x12cc>
   1f83c:	1b83      	subs	r3, r0, r6
   1f83e:	930a      	str	r3, [sp, #40]	; 0x28
   1f840:	9406      	str	r4, [sp, #24]
   1f842:	950b      	str	r5, [sp, #44]	; 0x2c
   1f844:	f8cd b00c 	str.w	fp, [sp, #12]
   1f848:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f84c:	9304      	str	r3, [sp, #16]
   1f84e:	940e      	str	r4, [sp, #56]	; 0x38
   1f850:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f854:	e6ac      	b.n	1f5b0 <_svfprintf_r+0x230>
   1f856:	f89a 3000 	ldrb.w	r3, [sl]
   1f85a:	2201      	movs	r2, #1
   1f85c:	212b      	movs	r1, #43	; 0x2b
   1f85e:	e5e7      	b.n	1f430 <_svfprintf_r+0xb0>
   1f860:	f04b 0b20 	orr.w	fp, fp, #32
   1f864:	f89a 3000 	ldrb.w	r3, [sl]
   1f868:	e5e2      	b.n	1f430 <_svfprintf_r+0xb0>
   1f86a:	930d      	str	r3, [sp, #52]	; 0x34
   1f86c:	2a00      	cmp	r2, #0
   1f86e:	f040 87aa 	bne.w	207c6 <_svfprintf_r+0x1446>
   1f872:	4b23      	ldr	r3, [pc, #140]	; (1f900 <_svfprintf_r+0x580>)
   1f874:	9312      	str	r3, [sp, #72]	; 0x48
   1f876:	f01b 0f20 	tst.w	fp, #32
   1f87a:	f040 8112 	bne.w	1faa2 <_svfprintf_r+0x722>
   1f87e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f880:	f01b 0f10 	tst.w	fp, #16
   1f884:	4613      	mov	r3, r2
   1f886:	f040 83e0 	bne.w	2004a <_svfprintf_r+0xcca>
   1f88a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f88e:	f000 83dc 	beq.w	2004a <_svfprintf_r+0xcca>
   1f892:	3304      	adds	r3, #4
   1f894:	8814      	ldrh	r4, [r2, #0]
   1f896:	930b      	str	r3, [sp, #44]	; 0x2c
   1f898:	2500      	movs	r5, #0
   1f89a:	f01b 0f01 	tst.w	fp, #1
   1f89e:	f000 810d 	beq.w	1fabc <_svfprintf_r+0x73c>
   1f8a2:	ea54 0305 	orrs.w	r3, r4, r5
   1f8a6:	f000 8109 	beq.w	1fabc <_svfprintf_r+0x73c>
   1f8aa:	2330      	movs	r3, #48	; 0x30
   1f8ac:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f8b0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f8b4:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f8b8:	f04b 0b02 	orr.w	fp, fp, #2
   1f8bc:	2302      	movs	r3, #2
   1f8be:	e652      	b.n	1f566 <_svfprintf_r+0x1e6>
   1f8c0:	f89a 3000 	ldrb.w	r3, [sl]
   1f8c4:	2900      	cmp	r1, #0
   1f8c6:	f47f adb3 	bne.w	1f430 <_svfprintf_r+0xb0>
   1f8ca:	2201      	movs	r2, #1
   1f8cc:	2120      	movs	r1, #32
   1f8ce:	e5af      	b.n	1f430 <_svfprintf_r+0xb0>
   1f8d0:	f04b 0b01 	orr.w	fp, fp, #1
   1f8d4:	f89a 3000 	ldrb.w	r3, [sl]
   1f8d8:	e5aa      	b.n	1f430 <_svfprintf_r+0xb0>
   1f8da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f8dc:	6823      	ldr	r3, [r4, #0]
   1f8de:	9309      	str	r3, [sp, #36]	; 0x24
   1f8e0:	4618      	mov	r0, r3
   1f8e2:	2800      	cmp	r0, #0
   1f8e4:	4623      	mov	r3, r4
   1f8e6:	f103 0304 	add.w	r3, r3, #4
   1f8ea:	f6ff ae03 	blt.w	1f4f4 <_svfprintf_r+0x174>
   1f8ee:	930b      	str	r3, [sp, #44]	; 0x2c
   1f8f0:	f89a 3000 	ldrb.w	r3, [sl]
   1f8f4:	e59c      	b.n	1f430 <_svfprintf_r+0xb0>
   1f8f6:	bf00      	nop
   1f8f8:	000250bc 	.word	0x000250bc
   1f8fc:	000250cc 	.word	0x000250cc
   1f900:	0002509c 	.word	0x0002509c
   1f904:	f04b 0b10 	orr.w	fp, fp, #16
   1f908:	f01b 0f20 	tst.w	fp, #32
   1f90c:	930d      	str	r3, [sp, #52]	; 0x34
   1f90e:	f43f ae1b 	beq.w	1f548 <_svfprintf_r+0x1c8>
   1f912:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f914:	3507      	adds	r5, #7
   1f916:	f025 0307 	bic.w	r3, r5, #7
   1f91a:	f103 0208 	add.w	r2, r3, #8
   1f91e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f922:	920b      	str	r2, [sp, #44]	; 0x2c
   1f924:	2301      	movs	r3, #1
   1f926:	e61e      	b.n	1f566 <_svfprintf_r+0x1e6>
   1f928:	f89a 3000 	ldrb.w	r3, [sl]
   1f92c:	2b2a      	cmp	r3, #42	; 0x2a
   1f92e:	f10a 0401 	add.w	r4, sl, #1
   1f932:	f000 873b 	beq.w	207ac <_svfprintf_r+0x142c>
   1f936:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f93a:	2809      	cmp	r0, #9
   1f93c:	46a2      	mov	sl, r4
   1f93e:	f200 8691 	bhi.w	20664 <_svfprintf_r+0x12e4>
   1f942:	2300      	movs	r3, #0
   1f944:	461c      	mov	r4, r3
   1f946:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f94a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f94e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f952:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f956:	2809      	cmp	r0, #9
   1f958:	d9f5      	bls.n	1f946 <_svfprintf_r+0x5c6>
   1f95a:	9406      	str	r4, [sp, #24]
   1f95c:	e56a      	b.n	1f434 <_svfprintf_r+0xb4>
   1f95e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f962:	f89a 3000 	ldrb.w	r3, [sl]
   1f966:	e563      	b.n	1f430 <_svfprintf_r+0xb0>
   1f968:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f96c:	f89a 3000 	ldrb.w	r3, [sl]
   1f970:	e55e      	b.n	1f430 <_svfprintf_r+0xb0>
   1f972:	f89a 3000 	ldrb.w	r3, [sl]
   1f976:	2b6c      	cmp	r3, #108	; 0x6c
   1f978:	bf03      	ittte	eq
   1f97a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f97e:	f04b 0b20 	orreq.w	fp, fp, #32
   1f982:	f10a 0a01 	addeq.w	sl, sl, #1
   1f986:	f04b 0b10 	orrne.w	fp, fp, #16
   1f98a:	e551      	b.n	1f430 <_svfprintf_r+0xb0>
   1f98c:	2a00      	cmp	r2, #0
   1f98e:	f040 871e 	bne.w	207ce <_svfprintf_r+0x144e>
   1f992:	f01b 0f20 	tst.w	fp, #32
   1f996:	f040 8509 	bne.w	203ac <_svfprintf_r+0x102c>
   1f99a:	f01b 0f10 	tst.w	fp, #16
   1f99e:	f040 84bc 	bne.w	2031a <_svfprintf_r+0xf9a>
   1f9a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f9a6:	f000 84b8 	beq.w	2031a <_svfprintf_r+0xf9a>
   1f9aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f9ac:	6813      	ldr	r3, [r2, #0]
   1f9ae:	3204      	adds	r2, #4
   1f9b0:	920b      	str	r2, [sp, #44]	; 0x2c
   1f9b2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f9b6:	801a      	strh	r2, [r3, #0]
   1f9b8:	e509      	b.n	1f3ce <_svfprintf_r+0x4e>
   1f9ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f9bc:	4bb9      	ldr	r3, [pc, #740]	; (1fca4 <_svfprintf_r+0x924>)
   1f9be:	680c      	ldr	r4, [r1, #0]
   1f9c0:	9312      	str	r3, [sp, #72]	; 0x48
   1f9c2:	2230      	movs	r2, #48	; 0x30
   1f9c4:	2378      	movs	r3, #120	; 0x78
   1f9c6:	3104      	adds	r1, #4
   1f9c8:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f9cc:	930d      	str	r3, [sp, #52]	; 0x34
   1f9ce:	f04b 0b02 	orr.w	fp, fp, #2
   1f9d2:	910b      	str	r1, [sp, #44]	; 0x2c
   1f9d4:	2500      	movs	r5, #0
   1f9d6:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f9da:	2302      	movs	r3, #2
   1f9dc:	e5c3      	b.n	1f566 <_svfprintf_r+0x1e6>
   1f9de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f9e0:	930d      	str	r3, [sp, #52]	; 0x34
   1f9e2:	680a      	ldr	r2, [r1, #0]
   1f9e4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f9e8:	2300      	movs	r3, #0
   1f9ea:	460a      	mov	r2, r1
   1f9ec:	461f      	mov	r7, r3
   1f9ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f9f2:	3204      	adds	r2, #4
   1f9f4:	2301      	movs	r3, #1
   1f9f6:	9304      	str	r3, [sp, #16]
   1f9f8:	f8cd b00c 	str.w	fp, [sp, #12]
   1f9fc:	9706      	str	r7, [sp, #24]
   1f9fe:	970e      	str	r7, [sp, #56]	; 0x38
   1fa00:	920b      	str	r2, [sp, #44]	; 0x2c
   1fa02:	930a      	str	r3, [sp, #40]	; 0x28
   1fa04:	ae26      	add	r6, sp, #152	; 0x98
   1fa06:	e5d7      	b.n	1f5b8 <_svfprintf_r+0x238>
   1fa08:	930d      	str	r3, [sp, #52]	; 0x34
   1fa0a:	2a00      	cmp	r2, #0
   1fa0c:	f040 86fe 	bne.w	2080c <_svfprintf_r+0x148c>
   1fa10:	f01b 0f20 	tst.w	fp, #32
   1fa14:	d15d      	bne.n	1fad2 <_svfprintf_r+0x752>
   1fa16:	f01b 0f10 	tst.w	fp, #16
   1fa1a:	f040 8335 	bne.w	20088 <_svfprintf_r+0xd08>
   1fa1e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1fa22:	f000 8331 	beq.w	20088 <_svfprintf_r+0xd08>
   1fa26:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fa28:	f9b1 4000 	ldrsh.w	r4, [r1]
   1fa2c:	3104      	adds	r1, #4
   1fa2e:	17e5      	asrs	r5, r4, #31
   1fa30:	4622      	mov	r2, r4
   1fa32:	462b      	mov	r3, r5
   1fa34:	910b      	str	r1, [sp, #44]	; 0x2c
   1fa36:	2a00      	cmp	r2, #0
   1fa38:	f173 0300 	sbcs.w	r3, r3, #0
   1fa3c:	db58      	blt.n	1faf0 <_svfprintf_r+0x770>
   1fa3e:	9906      	ldr	r1, [sp, #24]
   1fa40:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fa44:	1c4a      	adds	r2, r1, #1
   1fa46:	f04f 0301 	mov.w	r3, #1
   1fa4a:	f47f ad93 	bne.w	1f574 <_svfprintf_r+0x1f4>
   1fa4e:	ea54 0205 	orrs.w	r2, r4, r5
   1fa52:	f000 81ec 	beq.w	1fe2e <_svfprintf_r+0xaae>
   1fa56:	f8cd b00c 	str.w	fp, [sp, #12]
   1fa5a:	2b01      	cmp	r3, #1
   1fa5c:	f000 8283 	beq.w	1ff66 <_svfprintf_r+0xbe6>
   1fa60:	2b02      	cmp	r3, #2
   1fa62:	f040 8213 	bne.w	1fe8c <_svfprintf_r+0xb0c>
   1fa66:	9812      	ldr	r0, [sp, #72]	; 0x48
   1fa68:	464e      	mov	r6, r9
   1fa6a:	0923      	lsrs	r3, r4, #4
   1fa6c:	f004 010f 	and.w	r1, r4, #15
   1fa70:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1fa74:	092a      	lsrs	r2, r5, #4
   1fa76:	461c      	mov	r4, r3
   1fa78:	4615      	mov	r5, r2
   1fa7a:	5c43      	ldrb	r3, [r0, r1]
   1fa7c:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1fa80:	ea54 0305 	orrs.w	r3, r4, r5
   1fa84:	d1f1      	bne.n	1fa6a <_svfprintf_r+0x6ea>
   1fa86:	eba9 0306 	sub.w	r3, r9, r6
   1fa8a:	930a      	str	r3, [sp, #40]	; 0x28
   1fa8c:	e588      	b.n	1f5a0 <_svfprintf_r+0x220>
   1fa8e:	930d      	str	r3, [sp, #52]	; 0x34
   1fa90:	2a00      	cmp	r2, #0
   1fa92:	f040 86b7 	bne.w	20804 <_svfprintf_r+0x1484>
   1fa96:	4b84      	ldr	r3, [pc, #528]	; (1fca8 <_svfprintf_r+0x928>)
   1fa98:	9312      	str	r3, [sp, #72]	; 0x48
   1fa9a:	f01b 0f20 	tst.w	fp, #32
   1fa9e:	f43f aeee 	beq.w	1f87e <_svfprintf_r+0x4fe>
   1faa2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1faa4:	3507      	adds	r5, #7
   1faa6:	f025 0307 	bic.w	r3, r5, #7
   1faaa:	f103 0208 	add.w	r2, r3, #8
   1faae:	f01b 0f01 	tst.w	fp, #1
   1fab2:	920b      	str	r2, [sp, #44]	; 0x2c
   1fab4:	e9d3 4500 	ldrd	r4, r5, [r3]
   1fab8:	f47f aef3 	bne.w	1f8a2 <_svfprintf_r+0x522>
   1fabc:	2302      	movs	r3, #2
   1fabe:	e552      	b.n	1f566 <_svfprintf_r+0x1e6>
   1fac0:	930d      	str	r3, [sp, #52]	; 0x34
   1fac2:	2a00      	cmp	r2, #0
   1fac4:	f040 869a 	bne.w	207fc <_svfprintf_r+0x147c>
   1fac8:	f04b 0b10 	orr.w	fp, fp, #16
   1facc:	f01b 0f20 	tst.w	fp, #32
   1fad0:	d0a1      	beq.n	1fa16 <_svfprintf_r+0x696>
   1fad2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1fad4:	3507      	adds	r5, #7
   1fad6:	f025 0507 	bic.w	r5, r5, #7
   1fada:	e9d5 2300 	ldrd	r2, r3, [r5]
   1fade:	2a00      	cmp	r2, #0
   1fae0:	f105 0108 	add.w	r1, r5, #8
   1fae4:	461d      	mov	r5, r3
   1fae6:	f173 0300 	sbcs.w	r3, r3, #0
   1faea:	910b      	str	r1, [sp, #44]	; 0x2c
   1faec:	4614      	mov	r4, r2
   1faee:	daa6      	bge.n	1fa3e <_svfprintf_r+0x6be>
   1faf0:	272d      	movs	r7, #45	; 0x2d
   1faf2:	4264      	negs	r4, r4
   1faf4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1faf8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1fafc:	2301      	movs	r3, #1
   1fafe:	e535      	b.n	1f56c <_svfprintf_r+0x1ec>
   1fb00:	930d      	str	r3, [sp, #52]	; 0x34
   1fb02:	2a00      	cmp	r2, #0
   1fb04:	f040 8676 	bne.w	207f4 <_svfprintf_r+0x1474>
   1fb08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1fb0a:	f01b 0f08 	tst.w	fp, #8
   1fb0e:	f105 0507 	add.w	r5, r5, #7
   1fb12:	f000 83e8 	beq.w	202e6 <_svfprintf_r+0xf66>
   1fb16:	f025 0307 	bic.w	r3, r5, #7
   1fb1a:	ed93 7b00 	vldr	d7, [r3]
   1fb1e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fb22:	f103 0208 	add.w	r2, r3, #8
   1fb26:	920b      	str	r2, [sp, #44]	; 0x2c
   1fb28:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1fb2c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1fb30:	9116      	str	r1, [sp, #88]	; 0x58
   1fb32:	9317      	str	r3, [sp, #92]	; 0x5c
   1fb34:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1fb38:	f04f 32ff 	mov.w	r2, #4294967295
   1fb3c:	4620      	mov	r0, r4
   1fb3e:	4629      	mov	r1, r5
   1fb40:	4b5a      	ldr	r3, [pc, #360]	; (1fcac <_svfprintf_r+0x92c>)
   1fb42:	f002 ff65 	bl	22a10 <__aeabi_dcmpun>
   1fb46:	2800      	cmp	r0, #0
   1fb48:	f040 834f 	bne.w	201ea <_svfprintf_r+0xe6a>
   1fb4c:	f04f 32ff 	mov.w	r2, #4294967295
   1fb50:	4b56      	ldr	r3, [pc, #344]	; (1fcac <_svfprintf_r+0x92c>)
   1fb52:	4620      	mov	r0, r4
   1fb54:	4629      	mov	r1, r5
   1fb56:	f7fc fc95 	bl	1c484 <__aeabi_dcmple>
   1fb5a:	2800      	cmp	r0, #0
   1fb5c:	f040 8345 	bne.w	201ea <_svfprintf_r+0xe6a>
   1fb60:	2200      	movs	r2, #0
   1fb62:	2300      	movs	r3, #0
   1fb64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fb68:	f7fc fc82 	bl	1c470 <__aeabi_dcmplt>
   1fb6c:	2800      	cmp	r0, #0
   1fb6e:	f040 8533 	bne.w	205d8 <_svfprintf_r+0x1258>
   1fb72:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fb76:	4e4e      	ldr	r6, [pc, #312]	; (1fcb0 <_svfprintf_r+0x930>)
   1fb78:	4b4e      	ldr	r3, [pc, #312]	; (1fcb4 <_svfprintf_r+0x934>)
   1fb7a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1fb7e:	9003      	str	r0, [sp, #12]
   1fb80:	980d      	ldr	r0, [sp, #52]	; 0x34
   1fb82:	2203      	movs	r2, #3
   1fb84:	2100      	movs	r1, #0
   1fb86:	9204      	str	r2, [sp, #16]
   1fb88:	9106      	str	r1, [sp, #24]
   1fb8a:	2847      	cmp	r0, #71	; 0x47
   1fb8c:	bfd8      	it	le
   1fb8e:	461e      	movle	r6, r3
   1fb90:	920a      	str	r2, [sp, #40]	; 0x28
   1fb92:	910e      	str	r1, [sp, #56]	; 0x38
   1fb94:	e50c      	b.n	1f5b0 <_svfprintf_r+0x230>
   1fb96:	f04b 0b08 	orr.w	fp, fp, #8
   1fb9a:	f89a 3000 	ldrb.w	r3, [sl]
   1fb9e:	e447      	b.n	1f430 <_svfprintf_r+0xb0>
   1fba0:	f04b 0b10 	orr.w	fp, fp, #16
   1fba4:	930d      	str	r3, [sp, #52]	; 0x34
   1fba6:	f01b 0320 	ands.w	r3, fp, #32
   1fbaa:	f43f ae22 	beq.w	1f7f2 <_svfprintf_r+0x472>
   1fbae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1fbb0:	3507      	adds	r5, #7
   1fbb2:	f025 0307 	bic.w	r3, r5, #7
   1fbb6:	f103 0208 	add.w	r2, r3, #8
   1fbba:	e9d3 4500 	ldrd	r4, r5, [r3]
   1fbbe:	920b      	str	r2, [sp, #44]	; 0x2c
   1fbc0:	2300      	movs	r3, #0
   1fbc2:	e4d0      	b.n	1f566 <_svfprintf_r+0x1e6>
   1fbc4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1fbc8:	2300      	movs	r3, #0
   1fbca:	461c      	mov	r4, r3
   1fbcc:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1fbd0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1fbd4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1fbd8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1fbdc:	2809      	cmp	r0, #9
   1fbde:	d9f5      	bls.n	1fbcc <_svfprintf_r+0x84c>
   1fbe0:	9409      	str	r4, [sp, #36]	; 0x24
   1fbe2:	e427      	b.n	1f434 <_svfprintf_r+0xb4>
   1fbe4:	930d      	str	r3, [sp, #52]	; 0x34
   1fbe6:	2a00      	cmp	r2, #0
   1fbe8:	f040 85f5 	bne.w	207d6 <_svfprintf_r+0x1456>
   1fbec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1fbee:	2a00      	cmp	r2, #0
   1fbf0:	f43f ac91 	beq.w	1f516 <_svfprintf_r+0x196>
   1fbf4:	2300      	movs	r3, #0
   1fbf6:	2101      	movs	r1, #1
   1fbf8:	461f      	mov	r7, r3
   1fbfa:	9104      	str	r1, [sp, #16]
   1fbfc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1fc00:	f8cd b00c 	str.w	fp, [sp, #12]
   1fc04:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1fc08:	9306      	str	r3, [sp, #24]
   1fc0a:	930e      	str	r3, [sp, #56]	; 0x38
   1fc0c:	910a      	str	r1, [sp, #40]	; 0x28
   1fc0e:	ae26      	add	r6, sp, #152	; 0x98
   1fc10:	e4d2      	b.n	1f5b8 <_svfprintf_r+0x238>
   1fc12:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc14:	e529      	b.n	1f66a <_svfprintf_r+0x2ea>
   1fc16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fc18:	2b65      	cmp	r3, #101	; 0x65
   1fc1a:	f340 80a9 	ble.w	1fd70 <_svfprintf_r+0x9f0>
   1fc1e:	2200      	movs	r2, #0
   1fc20:	2300      	movs	r3, #0
   1fc22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fc26:	f7fc fc19 	bl	1c45c <__aeabi_dcmpeq>
   1fc2a:	2800      	cmp	r0, #0
   1fc2c:	f000 8152 	beq.w	1fed4 <_svfprintf_r+0xb54>
   1fc30:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc32:	4a21      	ldr	r2, [pc, #132]	; (1fcb8 <_svfprintf_r+0x938>)
   1fc34:	f8c8 2000 	str.w	r2, [r8]
   1fc38:	3301      	adds	r3, #1
   1fc3a:	3401      	adds	r4, #1
   1fc3c:	2201      	movs	r2, #1
   1fc3e:	2b07      	cmp	r3, #7
   1fc40:	9425      	str	r4, [sp, #148]	; 0x94
   1fc42:	9324      	str	r3, [sp, #144]	; 0x90
   1fc44:	f8c8 2004 	str.w	r2, [r8, #4]
   1fc48:	f300 836f 	bgt.w	2032a <_svfprintf_r+0xfaa>
   1fc4c:	f108 0808 	add.w	r8, r8, #8
   1fc50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fc52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fc54:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc56:	4293      	cmp	r3, r2
   1fc58:	db03      	blt.n	1fc62 <_svfprintf_r+0x8e2>
   1fc5a:	9b03      	ldr	r3, [sp, #12]
   1fc5c:	07dd      	lsls	r5, r3, #31
   1fc5e:	f57f ad76 	bpl.w	1f74e <_svfprintf_r+0x3ce>
   1fc62:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc64:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1fc66:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fc68:	f8c8 2000 	str.w	r2, [r8]
   1fc6c:	3301      	adds	r3, #1
   1fc6e:	440c      	add	r4, r1
   1fc70:	2b07      	cmp	r3, #7
   1fc72:	f8c8 1004 	str.w	r1, [r8, #4]
   1fc76:	9425      	str	r4, [sp, #148]	; 0x94
   1fc78:	9324      	str	r3, [sp, #144]	; 0x90
   1fc7a:	f300 83a3 	bgt.w	203c4 <_svfprintf_r+0x1044>
   1fc7e:	f108 0808 	add.w	r8, r8, #8
   1fc82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fc84:	1e5e      	subs	r6, r3, #1
   1fc86:	2e00      	cmp	r6, #0
   1fc88:	f77f ad61 	ble.w	1f74e <_svfprintf_r+0x3ce>
   1fc8c:	2e10      	cmp	r6, #16
   1fc8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc90:	4d0a      	ldr	r5, [pc, #40]	; (1fcbc <_svfprintf_r+0x93c>)
   1fc92:	f340 81ef 	ble.w	20074 <_svfprintf_r+0xcf4>
   1fc96:	4622      	mov	r2, r4
   1fc98:	2710      	movs	r7, #16
   1fc9a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fc9e:	9c07      	ldr	r4, [sp, #28]
   1fca0:	e014      	b.n	1fccc <_svfprintf_r+0x94c>
   1fca2:	bf00      	nop
   1fca4:	0002509c 	.word	0x0002509c
   1fca8:	00025088 	.word	0x00025088
   1fcac:	7fefffff 	.word	0x7fefffff
   1fcb0:	0002507c 	.word	0x0002507c
   1fcb4:	00025078 	.word	0x00025078
   1fcb8:	000250b8 	.word	0x000250b8
   1fcbc:	000250cc 	.word	0x000250cc
   1fcc0:	f108 0808 	add.w	r8, r8, #8
   1fcc4:	3e10      	subs	r6, #16
   1fcc6:	2e10      	cmp	r6, #16
   1fcc8:	f340 81d3 	ble.w	20072 <_svfprintf_r+0xcf2>
   1fccc:	3301      	adds	r3, #1
   1fcce:	3210      	adds	r2, #16
   1fcd0:	2b07      	cmp	r3, #7
   1fcd2:	9225      	str	r2, [sp, #148]	; 0x94
   1fcd4:	9324      	str	r3, [sp, #144]	; 0x90
   1fcd6:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fcda:	ddf1      	ble.n	1fcc0 <_svfprintf_r+0x940>
   1fcdc:	aa23      	add	r2, sp, #140	; 0x8c
   1fcde:	4621      	mov	r1, r4
   1fce0:	4658      	mov	r0, fp
   1fce2:	f002 fcbf 	bl	22664 <__ssprint_r>
   1fce6:	2800      	cmp	r0, #0
   1fce8:	f47f ac1c 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1fcec:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fcee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fcf0:	46c8      	mov	r8, r9
   1fcf2:	e7e7      	b.n	1fcc4 <_svfprintf_r+0x944>
   1fcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fcf6:	9a04      	ldr	r2, [sp, #16]
   1fcf8:	1a9f      	subs	r7, r3, r2
   1fcfa:	2f00      	cmp	r7, #0
   1fcfc:	f77f acd8 	ble.w	1f6b0 <_svfprintf_r+0x330>
   1fd00:	2f10      	cmp	r7, #16
   1fd02:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd04:	4db7      	ldr	r5, [pc, #732]	; (1ffe4 <_svfprintf_r+0xc64>)
   1fd06:	dd27      	ble.n	1fd58 <_svfprintf_r+0x9d8>
   1fd08:	4642      	mov	r2, r8
   1fd0a:	4621      	mov	r1, r4
   1fd0c:	46b0      	mov	r8, r6
   1fd0e:	f04f 0b10 	mov.w	fp, #16
   1fd12:	462e      	mov	r6, r5
   1fd14:	9c08      	ldr	r4, [sp, #32]
   1fd16:	9d07      	ldr	r5, [sp, #28]
   1fd18:	e004      	b.n	1fd24 <_svfprintf_r+0x9a4>
   1fd1a:	3f10      	subs	r7, #16
   1fd1c:	2f10      	cmp	r7, #16
   1fd1e:	f102 0208 	add.w	r2, r2, #8
   1fd22:	dd15      	ble.n	1fd50 <_svfprintf_r+0x9d0>
   1fd24:	3301      	adds	r3, #1
   1fd26:	3110      	adds	r1, #16
   1fd28:	2b07      	cmp	r3, #7
   1fd2a:	9125      	str	r1, [sp, #148]	; 0x94
   1fd2c:	9324      	str	r3, [sp, #144]	; 0x90
   1fd2e:	e882 0840 	stmia.w	r2, {r6, fp}
   1fd32:	ddf2      	ble.n	1fd1a <_svfprintf_r+0x99a>
   1fd34:	aa23      	add	r2, sp, #140	; 0x8c
   1fd36:	4629      	mov	r1, r5
   1fd38:	4620      	mov	r0, r4
   1fd3a:	f002 fc93 	bl	22664 <__ssprint_r>
   1fd3e:	2800      	cmp	r0, #0
   1fd40:	f47f abf0 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1fd44:	3f10      	subs	r7, #16
   1fd46:	2f10      	cmp	r7, #16
   1fd48:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fd4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd4c:	464a      	mov	r2, r9
   1fd4e:	dce9      	bgt.n	1fd24 <_svfprintf_r+0x9a4>
   1fd50:	4635      	mov	r5, r6
   1fd52:	460c      	mov	r4, r1
   1fd54:	4646      	mov	r6, r8
   1fd56:	4690      	mov	r8, r2
   1fd58:	3301      	adds	r3, #1
   1fd5a:	443c      	add	r4, r7
   1fd5c:	2b07      	cmp	r3, #7
   1fd5e:	9425      	str	r4, [sp, #148]	; 0x94
   1fd60:	9324      	str	r3, [sp, #144]	; 0x90
   1fd62:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fd66:	f300 8234 	bgt.w	201d2 <_svfprintf_r+0xe52>
   1fd6a:	f108 0808 	add.w	r8, r8, #8
   1fd6e:	e49f      	b.n	1f6b0 <_svfprintf_r+0x330>
   1fd70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fd72:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fd74:	2b01      	cmp	r3, #1
   1fd76:	f340 8200 	ble.w	2017a <_svfprintf_r+0xdfa>
   1fd7a:	3701      	adds	r7, #1
   1fd7c:	3401      	adds	r4, #1
   1fd7e:	2301      	movs	r3, #1
   1fd80:	2f07      	cmp	r7, #7
   1fd82:	9425      	str	r4, [sp, #148]	; 0x94
   1fd84:	9724      	str	r7, [sp, #144]	; 0x90
   1fd86:	f8c8 6000 	str.w	r6, [r8]
   1fd8a:	f8c8 3004 	str.w	r3, [r8, #4]
   1fd8e:	f300 8205 	bgt.w	2019c <_svfprintf_r+0xe1c>
   1fd92:	f108 0808 	add.w	r8, r8, #8
   1fd96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fd98:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1fd9a:	f8c8 3000 	str.w	r3, [r8]
   1fd9e:	3701      	adds	r7, #1
   1fda0:	4414      	add	r4, r2
   1fda2:	2f07      	cmp	r7, #7
   1fda4:	9425      	str	r4, [sp, #148]	; 0x94
   1fda6:	9724      	str	r7, [sp, #144]	; 0x90
   1fda8:	f8c8 2004 	str.w	r2, [r8, #4]
   1fdac:	f300 8202 	bgt.w	201b4 <_svfprintf_r+0xe34>
   1fdb0:	f108 0808 	add.w	r8, r8, #8
   1fdb4:	2300      	movs	r3, #0
   1fdb6:	2200      	movs	r2, #0
   1fdb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fdbc:	f7fc fb4e 	bl	1c45c <__aeabi_dcmpeq>
   1fdc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fdc2:	2800      	cmp	r0, #0
   1fdc4:	f040 8101 	bne.w	1ffca <_svfprintf_r+0xc4a>
   1fdc8:	3b01      	subs	r3, #1
   1fdca:	3701      	adds	r7, #1
   1fdcc:	3601      	adds	r6, #1
   1fdce:	441c      	add	r4, r3
   1fdd0:	2f07      	cmp	r7, #7
   1fdd2:	9724      	str	r7, [sp, #144]	; 0x90
   1fdd4:	9425      	str	r4, [sp, #148]	; 0x94
   1fdd6:	f8c8 6000 	str.w	r6, [r8]
   1fdda:	f8c8 3004 	str.w	r3, [r8, #4]
   1fdde:	f300 8128 	bgt.w	20032 <_svfprintf_r+0xcb2>
   1fde2:	f108 0808 	add.w	r8, r8, #8
   1fde6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1fde8:	f8c8 2004 	str.w	r2, [r8, #4]
   1fdec:	3701      	adds	r7, #1
   1fdee:	4414      	add	r4, r2
   1fdf0:	ab1f      	add	r3, sp, #124	; 0x7c
   1fdf2:	2f07      	cmp	r7, #7
   1fdf4:	9425      	str	r4, [sp, #148]	; 0x94
   1fdf6:	9724      	str	r7, [sp, #144]	; 0x90
   1fdf8:	f8c8 3000 	str.w	r3, [r8]
   1fdfc:	f77f aca5 	ble.w	1f74a <_svfprintf_r+0x3ca>
   1fe00:	aa23      	add	r2, sp, #140	; 0x8c
   1fe02:	9907      	ldr	r1, [sp, #28]
   1fe04:	9808      	ldr	r0, [sp, #32]
   1fe06:	f002 fc2d 	bl	22664 <__ssprint_r>
   1fe0a:	2800      	cmp	r0, #0
   1fe0c:	f47f ab8a 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1fe10:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe12:	46c8      	mov	r8, r9
   1fe14:	e49b      	b.n	1f74e <_svfprintf_r+0x3ce>
   1fe16:	aa23      	add	r2, sp, #140	; 0x8c
   1fe18:	9907      	ldr	r1, [sp, #28]
   1fe1a:	9808      	ldr	r0, [sp, #32]
   1fe1c:	f002 fc22 	bl	22664 <__ssprint_r>
   1fe20:	2800      	cmp	r0, #0
   1fe22:	f43f acdd 	beq.w	1f7e0 <_svfprintf_r+0x460>
   1fe26:	f7ff bb7d 	b.w	1f524 <_svfprintf_r+0x1a4>
   1fe2a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fe2e:	2b01      	cmp	r3, #1
   1fe30:	f000 8135 	beq.w	2009e <_svfprintf_r+0xd1e>
   1fe34:	2b02      	cmp	r3, #2
   1fe36:	d125      	bne.n	1fe84 <_svfprintf_r+0xb04>
   1fe38:	f8cd b00c 	str.w	fp, [sp, #12]
   1fe3c:	2400      	movs	r4, #0
   1fe3e:	2500      	movs	r5, #0
   1fe40:	e611      	b.n	1fa66 <_svfprintf_r+0x6e6>
   1fe42:	aa23      	add	r2, sp, #140	; 0x8c
   1fe44:	9907      	ldr	r1, [sp, #28]
   1fe46:	9808      	ldr	r0, [sp, #32]
   1fe48:	f002 fc0c 	bl	22664 <__ssprint_r>
   1fe4c:	2800      	cmp	r0, #0
   1fe4e:	f47f ab69 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1fe52:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe54:	46c8      	mov	r8, r9
   1fe56:	e467      	b.n	1f728 <_svfprintf_r+0x3a8>
   1fe58:	aa23      	add	r2, sp, #140	; 0x8c
   1fe5a:	9907      	ldr	r1, [sp, #28]
   1fe5c:	9808      	ldr	r0, [sp, #32]
   1fe5e:	f002 fc01 	bl	22664 <__ssprint_r>
   1fe62:	2800      	cmp	r0, #0
   1fe64:	f47f ab5e 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1fe68:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe6a:	46c8      	mov	r8, r9
   1fe6c:	e41d      	b.n	1f6aa <_svfprintf_r+0x32a>
   1fe6e:	aa23      	add	r2, sp, #140	; 0x8c
   1fe70:	9907      	ldr	r1, [sp, #28]
   1fe72:	9808      	ldr	r0, [sp, #32]
   1fe74:	f002 fbf6 	bl	22664 <__ssprint_r>
   1fe78:	2800      	cmp	r0, #0
   1fe7a:	f47f ab53 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1fe7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe80:	46c8      	mov	r8, r9
   1fe82:	e402      	b.n	1f68a <_svfprintf_r+0x30a>
   1fe84:	f8cd b00c 	str.w	fp, [sp, #12]
   1fe88:	2400      	movs	r4, #0
   1fe8a:	2500      	movs	r5, #0
   1fe8c:	4649      	mov	r1, r9
   1fe8e:	e000      	b.n	1fe92 <_svfprintf_r+0xb12>
   1fe90:	4631      	mov	r1, r6
   1fe92:	08e2      	lsrs	r2, r4, #3
   1fe94:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1fe98:	08e8      	lsrs	r0, r5, #3
   1fe9a:	f004 0307 	and.w	r3, r4, #7
   1fe9e:	4605      	mov	r5, r0
   1fea0:	4614      	mov	r4, r2
   1fea2:	3330      	adds	r3, #48	; 0x30
   1fea4:	ea54 0205 	orrs.w	r2, r4, r5
   1fea8:	f801 3c01 	strb.w	r3, [r1, #-1]
   1feac:	f101 36ff 	add.w	r6, r1, #4294967295
   1feb0:	d1ee      	bne.n	1fe90 <_svfprintf_r+0xb10>
   1feb2:	9a03      	ldr	r2, [sp, #12]
   1feb4:	07d2      	lsls	r2, r2, #31
   1feb6:	f57f ade6 	bpl.w	1fa86 <_svfprintf_r+0x706>
   1feba:	2b30      	cmp	r3, #48	; 0x30
   1febc:	f43f ade3 	beq.w	1fa86 <_svfprintf_r+0x706>
   1fec0:	3902      	subs	r1, #2
   1fec2:	2330      	movs	r3, #48	; 0x30
   1fec4:	f806 3c01 	strb.w	r3, [r6, #-1]
   1fec8:	eba9 0301 	sub.w	r3, r9, r1
   1fecc:	930a      	str	r3, [sp, #40]	; 0x28
   1fece:	460e      	mov	r6, r1
   1fed0:	f7ff bb66 	b.w	1f5a0 <_svfprintf_r+0x220>
   1fed4:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fed6:	2900      	cmp	r1, #0
   1fed8:	f340 8231 	ble.w	2033e <_svfprintf_r+0xfbe>
   1fedc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fee0:	4293      	cmp	r3, r2
   1fee2:	bfa8      	it	ge
   1fee4:	4613      	movge	r3, r2
   1fee6:	2b00      	cmp	r3, #0
   1fee8:	461f      	mov	r7, r3
   1feea:	dd0d      	ble.n	1ff08 <_svfprintf_r+0xb88>
   1feec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1feee:	f8c8 6000 	str.w	r6, [r8]
   1fef2:	3301      	adds	r3, #1
   1fef4:	443c      	add	r4, r7
   1fef6:	2b07      	cmp	r3, #7
   1fef8:	9425      	str	r4, [sp, #148]	; 0x94
   1fefa:	f8c8 7004 	str.w	r7, [r8, #4]
   1fefe:	9324      	str	r3, [sp, #144]	; 0x90
   1ff00:	f300 8321 	bgt.w	20546 <_svfprintf_r+0x11c6>
   1ff04:	f108 0808 	add.w	r8, r8, #8
   1ff08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ff0a:	2f00      	cmp	r7, #0
   1ff0c:	bfa8      	it	ge
   1ff0e:	1bdb      	subge	r3, r3, r7
   1ff10:	2b00      	cmp	r3, #0
   1ff12:	461f      	mov	r7, r3
   1ff14:	f340 80d7 	ble.w	200c6 <_svfprintf_r+0xd46>
   1ff18:	2f10      	cmp	r7, #16
   1ff1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ff1c:	4d31      	ldr	r5, [pc, #196]	; (1ffe4 <_svfprintf_r+0xc64>)
   1ff1e:	f340 81f0 	ble.w	20302 <_svfprintf_r+0xf82>
   1ff22:	4642      	mov	r2, r8
   1ff24:	4621      	mov	r1, r4
   1ff26:	46b0      	mov	r8, r6
   1ff28:	f04f 0b10 	mov.w	fp, #16
   1ff2c:	462e      	mov	r6, r5
   1ff2e:	9c08      	ldr	r4, [sp, #32]
   1ff30:	9d07      	ldr	r5, [sp, #28]
   1ff32:	e004      	b.n	1ff3e <_svfprintf_r+0xbbe>
   1ff34:	3208      	adds	r2, #8
   1ff36:	3f10      	subs	r7, #16
   1ff38:	2f10      	cmp	r7, #16
   1ff3a:	f340 81de 	ble.w	202fa <_svfprintf_r+0xf7a>
   1ff3e:	3301      	adds	r3, #1
   1ff40:	3110      	adds	r1, #16
   1ff42:	2b07      	cmp	r3, #7
   1ff44:	9125      	str	r1, [sp, #148]	; 0x94
   1ff46:	9324      	str	r3, [sp, #144]	; 0x90
   1ff48:	e882 0840 	stmia.w	r2, {r6, fp}
   1ff4c:	ddf2      	ble.n	1ff34 <_svfprintf_r+0xbb4>
   1ff4e:	aa23      	add	r2, sp, #140	; 0x8c
   1ff50:	4629      	mov	r1, r5
   1ff52:	4620      	mov	r0, r4
   1ff54:	f002 fb86 	bl	22664 <__ssprint_r>
   1ff58:	2800      	cmp	r0, #0
   1ff5a:	f47f aae3 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1ff5e:	9925      	ldr	r1, [sp, #148]	; 0x94
   1ff60:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ff62:	464a      	mov	r2, r9
   1ff64:	e7e7      	b.n	1ff36 <_svfprintf_r+0xbb6>
   1ff66:	2d00      	cmp	r5, #0
   1ff68:	bf08      	it	eq
   1ff6a:	2c0a      	cmpeq	r4, #10
   1ff6c:	f0c0 8095 	bcc.w	2009a <_svfprintf_r+0xd1a>
   1ff70:	464e      	mov	r6, r9
   1ff72:	4620      	mov	r0, r4
   1ff74:	4629      	mov	r1, r5
   1ff76:	220a      	movs	r2, #10
   1ff78:	2300      	movs	r3, #0
   1ff7a:	f7fc fc97 	bl	1c8ac <__aeabi_uldivmod>
   1ff7e:	3230      	adds	r2, #48	; 0x30
   1ff80:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1ff84:	4620      	mov	r0, r4
   1ff86:	4629      	mov	r1, r5
   1ff88:	2300      	movs	r3, #0
   1ff8a:	220a      	movs	r2, #10
   1ff8c:	f7fc fc8e 	bl	1c8ac <__aeabi_uldivmod>
   1ff90:	4604      	mov	r4, r0
   1ff92:	460d      	mov	r5, r1
   1ff94:	ea54 0305 	orrs.w	r3, r4, r5
   1ff98:	d1eb      	bne.n	1ff72 <_svfprintf_r+0xbf2>
   1ff9a:	eba9 0306 	sub.w	r3, r9, r6
   1ff9e:	930a      	str	r3, [sp, #40]	; 0x28
   1ffa0:	f7ff bafe 	b.w	1f5a0 <_svfprintf_r+0x220>
   1ffa4:	9b06      	ldr	r3, [sp, #24]
   1ffa6:	930a      	str	r3, [sp, #40]	; 0x28
   1ffa8:	464e      	mov	r6, r9
   1ffaa:	f7ff baf9 	b.w	1f5a0 <_svfprintf_r+0x220>
   1ffae:	aa23      	add	r2, sp, #140	; 0x8c
   1ffb0:	9907      	ldr	r1, [sp, #28]
   1ffb2:	9808      	ldr	r0, [sp, #32]
   1ffb4:	f002 fb56 	bl	22664 <__ssprint_r>
   1ffb8:	2800      	cmp	r0, #0
   1ffba:	f47f aab3 	bne.w	1f524 <_svfprintf_r+0x1a4>
   1ffbe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1ffc2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ffc4:	46c8      	mov	r8, r9
   1ffc6:	f7ff bb50 	b.w	1f66a <_svfprintf_r+0x2ea>
   1ffca:	1e5e      	subs	r6, r3, #1
   1ffcc:	2e00      	cmp	r6, #0
   1ffce:	f77f af0a 	ble.w	1fde6 <_svfprintf_r+0xa66>
   1ffd2:	2e10      	cmp	r6, #16
   1ffd4:	4d03      	ldr	r5, [pc, #12]	; (1ffe4 <_svfprintf_r+0xc64>)
   1ffd6:	dd23      	ble.n	20020 <_svfprintf_r+0xca0>
   1ffd8:	4622      	mov	r2, r4
   1ffda:	f04f 0b10 	mov.w	fp, #16
   1ffde:	9c08      	ldr	r4, [sp, #32]
   1ffe0:	e007      	b.n	1fff2 <_svfprintf_r+0xc72>
   1ffe2:	bf00      	nop
   1ffe4:	000250cc 	.word	0x000250cc
   1ffe8:	3e10      	subs	r6, #16
   1ffea:	2e10      	cmp	r6, #16
   1ffec:	f108 0808 	add.w	r8, r8, #8
   1fff0:	dd15      	ble.n	2001e <_svfprintf_r+0xc9e>
   1fff2:	3701      	adds	r7, #1
   1fff4:	3210      	adds	r2, #16
   1fff6:	2f07      	cmp	r7, #7
   1fff8:	9225      	str	r2, [sp, #148]	; 0x94
   1fffa:	9724      	str	r7, [sp, #144]	; 0x90
   1fffc:	e888 0820 	stmia.w	r8, {r5, fp}
   20000:	ddf2      	ble.n	1ffe8 <_svfprintf_r+0xc68>
   20002:	aa23      	add	r2, sp, #140	; 0x8c
   20004:	9907      	ldr	r1, [sp, #28]
   20006:	4620      	mov	r0, r4
   20008:	f002 fb2c 	bl	22664 <__ssprint_r>
   2000c:	2800      	cmp	r0, #0
   2000e:	f47f aa89 	bne.w	1f524 <_svfprintf_r+0x1a4>
   20012:	3e10      	subs	r6, #16
   20014:	2e10      	cmp	r6, #16
   20016:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20018:	9f24      	ldr	r7, [sp, #144]	; 0x90
   2001a:	46c8      	mov	r8, r9
   2001c:	dce9      	bgt.n	1fff2 <_svfprintf_r+0xc72>
   2001e:	4614      	mov	r4, r2
   20020:	3701      	adds	r7, #1
   20022:	4434      	add	r4, r6
   20024:	2f07      	cmp	r7, #7
   20026:	9425      	str	r4, [sp, #148]	; 0x94
   20028:	9724      	str	r7, [sp, #144]	; 0x90
   2002a:	e888 0060 	stmia.w	r8, {r5, r6}
   2002e:	f77f aed8 	ble.w	1fde2 <_svfprintf_r+0xa62>
   20032:	aa23      	add	r2, sp, #140	; 0x8c
   20034:	9907      	ldr	r1, [sp, #28]
   20036:	9808      	ldr	r0, [sp, #32]
   20038:	f002 fb14 	bl	22664 <__ssprint_r>
   2003c:	2800      	cmp	r0, #0
   2003e:	f47f aa71 	bne.w	1f524 <_svfprintf_r+0x1a4>
   20042:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20044:	9f24      	ldr	r7, [sp, #144]	; 0x90
   20046:	46c8      	mov	r8, r9
   20048:	e6cd      	b.n	1fde6 <_svfprintf_r+0xa66>
   2004a:	681c      	ldr	r4, [r3, #0]
   2004c:	3304      	adds	r3, #4
   2004e:	930b      	str	r3, [sp, #44]	; 0x2c
   20050:	2500      	movs	r5, #0
   20052:	e422      	b.n	1f89a <_svfprintf_r+0x51a>
   20054:	990b      	ldr	r1, [sp, #44]	; 0x2c
   20056:	460a      	mov	r2, r1
   20058:	3204      	adds	r2, #4
   2005a:	680c      	ldr	r4, [r1, #0]
   2005c:	920b      	str	r2, [sp, #44]	; 0x2c
   2005e:	2500      	movs	r5, #0
   20060:	f7ff ba81 	b.w	1f566 <_svfprintf_r+0x1e6>
   20064:	3204      	adds	r2, #4
   20066:	681c      	ldr	r4, [r3, #0]
   20068:	920b      	str	r2, [sp, #44]	; 0x2c
   2006a:	2301      	movs	r3, #1
   2006c:	2500      	movs	r5, #0
   2006e:	f7ff ba7a 	b.w	1f566 <_svfprintf_r+0x1e6>
   20072:	4614      	mov	r4, r2
   20074:	3301      	adds	r3, #1
   20076:	4434      	add	r4, r6
   20078:	2b07      	cmp	r3, #7
   2007a:	9425      	str	r4, [sp, #148]	; 0x94
   2007c:	9324      	str	r3, [sp, #144]	; 0x90
   2007e:	e888 0060 	stmia.w	r8, {r5, r6}
   20082:	f77f ab62 	ble.w	1f74a <_svfprintf_r+0x3ca>
   20086:	e6bb      	b.n	1fe00 <_svfprintf_r+0xa80>
   20088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2008a:	6814      	ldr	r4, [r2, #0]
   2008c:	4613      	mov	r3, r2
   2008e:	3304      	adds	r3, #4
   20090:	17e5      	asrs	r5, r4, #31
   20092:	930b      	str	r3, [sp, #44]	; 0x2c
   20094:	4622      	mov	r2, r4
   20096:	462b      	mov	r3, r5
   20098:	e4cd      	b.n	1fa36 <_svfprintf_r+0x6b6>
   2009a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2009e:	f8cd b00c 	str.w	fp, [sp, #12]
   200a2:	ae40      	add	r6, sp, #256	; 0x100
   200a4:	3430      	adds	r4, #48	; 0x30
   200a6:	2301      	movs	r3, #1
   200a8:	f806 4d41 	strb.w	r4, [r6, #-65]!
   200ac:	930a      	str	r3, [sp, #40]	; 0x28
   200ae:	f7ff ba77 	b.w	1f5a0 <_svfprintf_r+0x220>
   200b2:	aa23      	add	r2, sp, #140	; 0x8c
   200b4:	9907      	ldr	r1, [sp, #28]
   200b6:	9808      	ldr	r0, [sp, #32]
   200b8:	f002 fad4 	bl	22664 <__ssprint_r>
   200bc:	2800      	cmp	r0, #0
   200be:	f47f aa31 	bne.w	1f524 <_svfprintf_r+0x1a4>
   200c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   200c4:	46c8      	mov	r8, r9
   200c6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   200c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   200ca:	429a      	cmp	r2, r3
   200cc:	db44      	blt.n	20158 <_svfprintf_r+0xdd8>
   200ce:	9b03      	ldr	r3, [sp, #12]
   200d0:	07d9      	lsls	r1, r3, #31
   200d2:	d441      	bmi.n	20158 <_svfprintf_r+0xdd8>
   200d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   200d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   200d8:	1a9a      	subs	r2, r3, r2
   200da:	1a1d      	subs	r5, r3, r0
   200dc:	4295      	cmp	r5, r2
   200de:	bfa8      	it	ge
   200e0:	4615      	movge	r5, r2
   200e2:	2d00      	cmp	r5, #0
   200e4:	dd0e      	ble.n	20104 <_svfprintf_r+0xd84>
   200e6:	9924      	ldr	r1, [sp, #144]	; 0x90
   200e8:	f8c8 5004 	str.w	r5, [r8, #4]
   200ec:	3101      	adds	r1, #1
   200ee:	4406      	add	r6, r0
   200f0:	442c      	add	r4, r5
   200f2:	2907      	cmp	r1, #7
   200f4:	f8c8 6000 	str.w	r6, [r8]
   200f8:	9425      	str	r4, [sp, #148]	; 0x94
   200fa:	9124      	str	r1, [sp, #144]	; 0x90
   200fc:	f300 823a 	bgt.w	20574 <_svfprintf_r+0x11f4>
   20100:	f108 0808 	add.w	r8, r8, #8
   20104:	2d00      	cmp	r5, #0
   20106:	bfac      	ite	ge
   20108:	1b56      	subge	r6, r2, r5
   2010a:	4616      	movlt	r6, r2
   2010c:	2e00      	cmp	r6, #0
   2010e:	f77f ab1e 	ble.w	1f74e <_svfprintf_r+0x3ce>
   20112:	2e10      	cmp	r6, #16
   20114:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20116:	4db1      	ldr	r5, [pc, #708]	; (203dc <_svfprintf_r+0x105c>)
   20118:	ddac      	ble.n	20074 <_svfprintf_r+0xcf4>
   2011a:	4622      	mov	r2, r4
   2011c:	2710      	movs	r7, #16
   2011e:	f8dd b020 	ldr.w	fp, [sp, #32]
   20122:	9c07      	ldr	r4, [sp, #28]
   20124:	e004      	b.n	20130 <_svfprintf_r+0xdb0>
   20126:	f108 0808 	add.w	r8, r8, #8
   2012a:	3e10      	subs	r6, #16
   2012c:	2e10      	cmp	r6, #16
   2012e:	dda0      	ble.n	20072 <_svfprintf_r+0xcf2>
   20130:	3301      	adds	r3, #1
   20132:	3210      	adds	r2, #16
   20134:	2b07      	cmp	r3, #7
   20136:	9225      	str	r2, [sp, #148]	; 0x94
   20138:	9324      	str	r3, [sp, #144]	; 0x90
   2013a:	e888 00a0 	stmia.w	r8, {r5, r7}
   2013e:	ddf2      	ble.n	20126 <_svfprintf_r+0xda6>
   20140:	aa23      	add	r2, sp, #140	; 0x8c
   20142:	4621      	mov	r1, r4
   20144:	4658      	mov	r0, fp
   20146:	f002 fa8d 	bl	22664 <__ssprint_r>
   2014a:	2800      	cmp	r0, #0
   2014c:	f47f a9ea 	bne.w	1f524 <_svfprintf_r+0x1a4>
   20150:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20152:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20154:	46c8      	mov	r8, r9
   20156:	e7e8      	b.n	2012a <_svfprintf_r+0xdaa>
   20158:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2015a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   2015c:	9914      	ldr	r1, [sp, #80]	; 0x50
   2015e:	f8c8 1000 	str.w	r1, [r8]
   20162:	3301      	adds	r3, #1
   20164:	4404      	add	r4, r0
   20166:	2b07      	cmp	r3, #7
   20168:	9425      	str	r4, [sp, #148]	; 0x94
   2016a:	f8c8 0004 	str.w	r0, [r8, #4]
   2016e:	9324      	str	r3, [sp, #144]	; 0x90
   20170:	f300 81f4 	bgt.w	2055c <_svfprintf_r+0x11dc>
   20174:	f108 0808 	add.w	r8, r8, #8
   20178:	e7ac      	b.n	200d4 <_svfprintf_r+0xd54>
   2017a:	9b03      	ldr	r3, [sp, #12]
   2017c:	07da      	lsls	r2, r3, #31
   2017e:	f53f adfc 	bmi.w	1fd7a <_svfprintf_r+0x9fa>
   20182:	3701      	adds	r7, #1
   20184:	3401      	adds	r4, #1
   20186:	2301      	movs	r3, #1
   20188:	2f07      	cmp	r7, #7
   2018a:	9425      	str	r4, [sp, #148]	; 0x94
   2018c:	9724      	str	r7, [sp, #144]	; 0x90
   2018e:	f8c8 6000 	str.w	r6, [r8]
   20192:	f8c8 3004 	str.w	r3, [r8, #4]
   20196:	f77f ae24 	ble.w	1fde2 <_svfprintf_r+0xa62>
   2019a:	e74a      	b.n	20032 <_svfprintf_r+0xcb2>
   2019c:	aa23      	add	r2, sp, #140	; 0x8c
   2019e:	9907      	ldr	r1, [sp, #28]
   201a0:	9808      	ldr	r0, [sp, #32]
   201a2:	f002 fa5f 	bl	22664 <__ssprint_r>
   201a6:	2800      	cmp	r0, #0
   201a8:	f47f a9bc 	bne.w	1f524 <_svfprintf_r+0x1a4>
   201ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
   201ae:	9f24      	ldr	r7, [sp, #144]	; 0x90
   201b0:	46c8      	mov	r8, r9
   201b2:	e5f0      	b.n	1fd96 <_svfprintf_r+0xa16>
   201b4:	aa23      	add	r2, sp, #140	; 0x8c
   201b6:	9907      	ldr	r1, [sp, #28]
   201b8:	9808      	ldr	r0, [sp, #32]
   201ba:	f002 fa53 	bl	22664 <__ssprint_r>
   201be:	2800      	cmp	r0, #0
   201c0:	f47f a9b0 	bne.w	1f524 <_svfprintf_r+0x1a4>
   201c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   201c6:	9f24      	ldr	r7, [sp, #144]	; 0x90
   201c8:	46c8      	mov	r8, r9
   201ca:	e5f3      	b.n	1fdb4 <_svfprintf_r+0xa34>
   201cc:	464e      	mov	r6, r9
   201ce:	f7ff b9e7 	b.w	1f5a0 <_svfprintf_r+0x220>
   201d2:	aa23      	add	r2, sp, #140	; 0x8c
   201d4:	9907      	ldr	r1, [sp, #28]
   201d6:	9808      	ldr	r0, [sp, #32]
   201d8:	f002 fa44 	bl	22664 <__ssprint_r>
   201dc:	2800      	cmp	r0, #0
   201de:	f47f a9a1 	bne.w	1f524 <_svfprintf_r+0x1a4>
   201e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   201e4:	46c8      	mov	r8, r9
   201e6:	f7ff ba63 	b.w	1f6b0 <_svfprintf_r+0x330>
   201ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   201ee:	4602      	mov	r2, r0
   201f0:	460b      	mov	r3, r1
   201f2:	f002 fc0d 	bl	22a10 <__aeabi_dcmpun>
   201f6:	2800      	cmp	r0, #0
   201f8:	f040 8298 	bne.w	2072c <_svfprintf_r+0x13ac>
   201fc:	9b06      	ldr	r3, [sp, #24]
   201fe:	3301      	adds	r3, #1
   20200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20202:	f023 0720 	bic.w	r7, r3, #32
   20206:	f000 81d2 	beq.w	205ae <_svfprintf_r+0x122e>
   2020a:	2f47      	cmp	r7, #71	; 0x47
   2020c:	f000 8120 	beq.w	20450 <_svfprintf_r+0x10d0>
   20210:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20212:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   20216:	2b00      	cmp	r3, #0
   20218:	9203      	str	r2, [sp, #12]
   2021a:	f2c0 81f0 	blt.w	205fe <_svfprintf_r+0x127e>
   2021e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   20222:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   20226:	2300      	movs	r3, #0
   20228:	930c      	str	r3, [sp, #48]	; 0x30
   2022a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2022c:	2b66      	cmp	r3, #102	; 0x66
   2022e:	f000 81c1 	beq.w	205b4 <_svfprintf_r+0x1234>
   20232:	2b46      	cmp	r3, #70	; 0x46
   20234:	f000 80f1 	beq.w	2041a <_svfprintf_r+0x109a>
   20238:	2f45      	cmp	r7, #69	; 0x45
   2023a:	bf0c      	ite	eq
   2023c:	9b06      	ldreq	r3, [sp, #24]
   2023e:	9d06      	ldrne	r5, [sp, #24]
   20240:	9808      	ldr	r0, [sp, #32]
   20242:	bf08      	it	eq
   20244:	1c5d      	addeq	r5, r3, #1
   20246:	aa21      	add	r2, sp, #132	; 0x84
   20248:	ab1e      	add	r3, sp, #120	; 0x78
   2024a:	9201      	str	r2, [sp, #4]
   2024c:	9300      	str	r3, [sp, #0]
   2024e:	462a      	mov	r2, r5
   20250:	ab1d      	add	r3, sp, #116	; 0x74
   20252:	2102      	movs	r1, #2
   20254:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   20258:	f000 fc6e 	bl	20b38 <_dtoa_r>
   2025c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2025e:	2b67      	cmp	r3, #103	; 0x67
   20260:	4606      	mov	r6, r0
   20262:	f040 81d5 	bne.w	20610 <_svfprintf_r+0x1290>
   20266:	f01b 0f01 	tst.w	fp, #1
   2026a:	f000 824e 	beq.w	2070a <_svfprintf_r+0x138a>
   2026e:	1974      	adds	r4, r6, r5
   20270:	2200      	movs	r2, #0
   20272:	2300      	movs	r3, #0
   20274:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   20278:	f7fc f8f0 	bl	1c45c <__aeabi_dcmpeq>
   2027c:	2800      	cmp	r0, #0
   2027e:	f040 8160 	bne.w	20542 <_svfprintf_r+0x11c2>
   20282:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20284:	42a3      	cmp	r3, r4
   20286:	d206      	bcs.n	20296 <_svfprintf_r+0xf16>
   20288:	2130      	movs	r1, #48	; 0x30
   2028a:	1c5a      	adds	r2, r3, #1
   2028c:	9221      	str	r2, [sp, #132]	; 0x84
   2028e:	7019      	strb	r1, [r3, #0]
   20290:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20292:	429c      	cmp	r4, r3
   20294:	d8f9      	bhi.n	2028a <_svfprintf_r+0xf0a>
   20296:	1b9b      	subs	r3, r3, r6
   20298:	2f47      	cmp	r7, #71	; 0x47
   2029a:	930f      	str	r3, [sp, #60]	; 0x3c
   2029c:	f000 80f0 	beq.w	20480 <_svfprintf_r+0x1100>
   202a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   202a2:	2b65      	cmp	r3, #101	; 0x65
   202a4:	f340 81c3 	ble.w	2062e <_svfprintf_r+0x12ae>
   202a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   202aa:	2b66      	cmp	r3, #102	; 0x66
   202ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   202ae:	930e      	str	r3, [sp, #56]	; 0x38
   202b0:	f000 81c0 	beq.w	20634 <_svfprintf_r+0x12b4>
   202b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   202b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   202b8:	4619      	mov	r1, r3
   202ba:	4291      	cmp	r1, r2
   202bc:	f300 8191 	bgt.w	205e2 <_svfprintf_r+0x1262>
   202c0:	f01b 0f01 	tst.w	fp, #1
   202c4:	f040 8223 	bne.w	2070e <_svfprintf_r+0x138e>
   202c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   202cc:	9304      	str	r3, [sp, #16]
   202ce:	2367      	movs	r3, #103	; 0x67
   202d0:	920a      	str	r2, [sp, #40]	; 0x28
   202d2:	930d      	str	r3, [sp, #52]	; 0x34
   202d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   202d6:	2b00      	cmp	r3, #0
   202d8:	f040 80cb 	bne.w	20472 <_svfprintf_r+0x10f2>
   202dc:	9306      	str	r3, [sp, #24]
   202de:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   202e2:	f7ff b965 	b.w	1f5b0 <_svfprintf_r+0x230>
   202e6:	f025 0507 	bic.w	r5, r5, #7
   202ea:	ed95 7b00 	vldr	d7, [r5]
   202ee:	f105 0308 	add.w	r3, r5, #8
   202f2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   202f6:	930b      	str	r3, [sp, #44]	; 0x2c
   202f8:	e416      	b.n	1fb28 <_svfprintf_r+0x7a8>
   202fa:	4635      	mov	r5, r6
   202fc:	460c      	mov	r4, r1
   202fe:	4646      	mov	r6, r8
   20300:	4690      	mov	r8, r2
   20302:	3301      	adds	r3, #1
   20304:	443c      	add	r4, r7
   20306:	2b07      	cmp	r3, #7
   20308:	9425      	str	r4, [sp, #148]	; 0x94
   2030a:	9324      	str	r3, [sp, #144]	; 0x90
   2030c:	e888 00a0 	stmia.w	r8, {r5, r7}
   20310:	f73f aecf 	bgt.w	200b2 <_svfprintf_r+0xd32>
   20314:	f108 0808 	add.w	r8, r8, #8
   20318:	e6d5      	b.n	200c6 <_svfprintf_r+0xd46>
   2031a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2031c:	6813      	ldr	r3, [r2, #0]
   2031e:	3204      	adds	r2, #4
   20320:	920b      	str	r2, [sp, #44]	; 0x2c
   20322:	9a05      	ldr	r2, [sp, #20]
   20324:	601a      	str	r2, [r3, #0]
   20326:	f7ff b852 	b.w	1f3ce <_svfprintf_r+0x4e>
   2032a:	aa23      	add	r2, sp, #140	; 0x8c
   2032c:	9907      	ldr	r1, [sp, #28]
   2032e:	9808      	ldr	r0, [sp, #32]
   20330:	f002 f998 	bl	22664 <__ssprint_r>
   20334:	2800      	cmp	r0, #0
   20336:	f47f a8f5 	bne.w	1f524 <_svfprintf_r+0x1a4>
   2033a:	46c8      	mov	r8, r9
   2033c:	e488      	b.n	1fc50 <_svfprintf_r+0x8d0>
   2033e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20340:	4a27      	ldr	r2, [pc, #156]	; (203e0 <_svfprintf_r+0x1060>)
   20342:	f8c8 2000 	str.w	r2, [r8]
   20346:	3301      	adds	r3, #1
   20348:	3401      	adds	r4, #1
   2034a:	2201      	movs	r2, #1
   2034c:	2b07      	cmp	r3, #7
   2034e:	9425      	str	r4, [sp, #148]	; 0x94
   20350:	9324      	str	r3, [sp, #144]	; 0x90
   20352:	f8c8 2004 	str.w	r2, [r8, #4]
   20356:	dc54      	bgt.n	20402 <_svfprintf_r+0x1082>
   20358:	f108 0808 	add.w	r8, r8, #8
   2035c:	b929      	cbnz	r1, 2036a <_svfprintf_r+0xfea>
   2035e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20360:	b91b      	cbnz	r3, 2036a <_svfprintf_r+0xfea>
   20362:	9b03      	ldr	r3, [sp, #12]
   20364:	07d8      	lsls	r0, r3, #31
   20366:	f57f a9f2 	bpl.w	1f74e <_svfprintf_r+0x3ce>
   2036a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2036c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   2036e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   20370:	f8c8 2000 	str.w	r2, [r8]
   20374:	3301      	adds	r3, #1
   20376:	4602      	mov	r2, r0
   20378:	4422      	add	r2, r4
   2037a:	2b07      	cmp	r3, #7
   2037c:	9225      	str	r2, [sp, #148]	; 0x94
   2037e:	f8c8 0004 	str.w	r0, [r8, #4]
   20382:	9324      	str	r3, [sp, #144]	; 0x90
   20384:	f300 8195 	bgt.w	206b2 <_svfprintf_r+0x1332>
   20388:	f108 0808 	add.w	r8, r8, #8
   2038c:	2900      	cmp	r1, #0
   2038e:	f2c0 816d 	blt.w	2066c <_svfprintf_r+0x12ec>
   20392:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20394:	f8c8 6000 	str.w	r6, [r8]
   20398:	3301      	adds	r3, #1
   2039a:	188c      	adds	r4, r1, r2
   2039c:	2b07      	cmp	r3, #7
   2039e:	9425      	str	r4, [sp, #148]	; 0x94
   203a0:	9324      	str	r3, [sp, #144]	; 0x90
   203a2:	f8c8 1004 	str.w	r1, [r8, #4]
   203a6:	f77f a9d0 	ble.w	1f74a <_svfprintf_r+0x3ca>
   203aa:	e529      	b.n	1fe00 <_svfprintf_r+0xa80>
   203ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   203ae:	9905      	ldr	r1, [sp, #20]
   203b0:	6813      	ldr	r3, [r2, #0]
   203b2:	17cd      	asrs	r5, r1, #31
   203b4:	4608      	mov	r0, r1
   203b6:	3204      	adds	r2, #4
   203b8:	4629      	mov	r1, r5
   203ba:	920b      	str	r2, [sp, #44]	; 0x2c
   203bc:	e9c3 0100 	strd	r0, r1, [r3]
   203c0:	f7ff b805 	b.w	1f3ce <_svfprintf_r+0x4e>
   203c4:	aa23      	add	r2, sp, #140	; 0x8c
   203c6:	9907      	ldr	r1, [sp, #28]
   203c8:	9808      	ldr	r0, [sp, #32]
   203ca:	f002 f94b 	bl	22664 <__ssprint_r>
   203ce:	2800      	cmp	r0, #0
   203d0:	f47f a8a8 	bne.w	1f524 <_svfprintf_r+0x1a4>
   203d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   203d6:	46c8      	mov	r8, r9
   203d8:	e453      	b.n	1fc82 <_svfprintf_r+0x902>
   203da:	bf00      	nop
   203dc:	000250cc 	.word	0x000250cc
   203e0:	000250b8 	.word	0x000250b8
   203e4:	2140      	movs	r1, #64	; 0x40
   203e6:	9808      	ldr	r0, [sp, #32]
   203e8:	f7fd fe40 	bl	1e06c <_malloc_r>
   203ec:	9a07      	ldr	r2, [sp, #28]
   203ee:	6010      	str	r0, [r2, #0]
   203f0:	6110      	str	r0, [r2, #16]
   203f2:	2800      	cmp	r0, #0
   203f4:	f000 81f6 	beq.w	207e4 <_svfprintf_r+0x1464>
   203f8:	9a07      	ldr	r2, [sp, #28]
   203fa:	2340      	movs	r3, #64	; 0x40
   203fc:	6153      	str	r3, [r2, #20]
   203fe:	f7fe bfd6 	b.w	1f3ae <_svfprintf_r+0x2e>
   20402:	aa23      	add	r2, sp, #140	; 0x8c
   20404:	9907      	ldr	r1, [sp, #28]
   20406:	9808      	ldr	r0, [sp, #32]
   20408:	f002 f92c 	bl	22664 <__ssprint_r>
   2040c:	2800      	cmp	r0, #0
   2040e:	f47f a889 	bne.w	1f524 <_svfprintf_r+0x1a4>
   20412:	991d      	ldr	r1, [sp, #116]	; 0x74
   20414:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20416:	46c8      	mov	r8, r9
   20418:	e7a0      	b.n	2035c <_svfprintf_r+0xfdc>
   2041a:	9d06      	ldr	r5, [sp, #24]
   2041c:	9808      	ldr	r0, [sp, #32]
   2041e:	aa21      	add	r2, sp, #132	; 0x84
   20420:	ab1e      	add	r3, sp, #120	; 0x78
   20422:	9201      	str	r2, [sp, #4]
   20424:	9300      	str	r3, [sp, #0]
   20426:	462a      	mov	r2, r5
   20428:	ab1d      	add	r3, sp, #116	; 0x74
   2042a:	2103      	movs	r1, #3
   2042c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   20430:	f000 fb82 	bl	20b38 <_dtoa_r>
   20434:	4606      	mov	r6, r0
   20436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20438:	2b46      	cmp	r3, #70	; 0x46
   2043a:	eb06 0405 	add.w	r4, r6, r5
   2043e:	f47f af17 	bne.w	20270 <_svfprintf_r+0xef0>
   20442:	7833      	ldrb	r3, [r6, #0]
   20444:	2b30      	cmp	r3, #48	; 0x30
   20446:	f000 817d 	beq.w	20744 <_svfprintf_r+0x13c4>
   2044a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   2044c:	442c      	add	r4, r5
   2044e:	e70f      	b.n	20270 <_svfprintf_r+0xef0>
   20450:	9b06      	ldr	r3, [sp, #24]
   20452:	2b00      	cmp	r3, #0
   20454:	bf08      	it	eq
   20456:	2301      	moveq	r3, #1
   20458:	9306      	str	r3, [sp, #24]
   2045a:	e6d9      	b.n	20210 <_svfprintf_r+0xe90>
   2045c:	4630      	mov	r0, r6
   2045e:	9406      	str	r4, [sp, #24]
   20460:	f7fe fece 	bl	1f200 <strlen>
   20464:	950b      	str	r5, [sp, #44]	; 0x2c
   20466:	900a      	str	r0, [sp, #40]	; 0x28
   20468:	f8cd b00c 	str.w	fp, [sp, #12]
   2046c:	4603      	mov	r3, r0
   2046e:	f7ff b9eb 	b.w	1f848 <_svfprintf_r+0x4c8>
   20472:	272d      	movs	r7, #45	; 0x2d
   20474:	2300      	movs	r3, #0
   20476:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2047a:	9306      	str	r3, [sp, #24]
   2047c:	f7ff b899 	b.w	1f5b2 <_svfprintf_r+0x232>
   20480:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20482:	930e      	str	r3, [sp, #56]	; 0x38
   20484:	461a      	mov	r2, r3
   20486:	3303      	adds	r3, #3
   20488:	db04      	blt.n	20494 <_svfprintf_r+0x1114>
   2048a:	9b06      	ldr	r3, [sp, #24]
   2048c:	4619      	mov	r1, r3
   2048e:	4291      	cmp	r1, r2
   20490:	f6bf af10 	bge.w	202b4 <_svfprintf_r+0xf34>
   20494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20496:	3b02      	subs	r3, #2
   20498:	930d      	str	r3, [sp, #52]	; 0x34
   2049a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2049e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   204a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   204a4:	3b01      	subs	r3, #1
   204a6:	2b00      	cmp	r3, #0
   204a8:	931d      	str	r3, [sp, #116]	; 0x74
   204aa:	bfbd      	ittte	lt
   204ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   204ae:	f1c3 0301 	rsblt	r3, r3, #1
   204b2:	222d      	movlt	r2, #45	; 0x2d
   204b4:	222b      	movge	r2, #43	; 0x2b
   204b6:	2b09      	cmp	r3, #9
   204b8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   204bc:	f340 811d 	ble.w	206fa <_svfprintf_r+0x137a>
   204c0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   204c4:	4620      	mov	r0, r4
   204c6:	4daf      	ldr	r5, [pc, #700]	; (20784 <_svfprintf_r+0x1404>)
   204c8:	e000      	b.n	204cc <_svfprintf_r+0x114c>
   204ca:	4610      	mov	r0, r2
   204cc:	fb85 1203 	smull	r1, r2, r5, r3
   204d0:	17d9      	asrs	r1, r3, #31
   204d2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   204d6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   204da:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   204de:	3230      	adds	r2, #48	; 0x30
   204e0:	2909      	cmp	r1, #9
   204e2:	f800 2c01 	strb.w	r2, [r0, #-1]
   204e6:	460b      	mov	r3, r1
   204e8:	f100 32ff 	add.w	r2, r0, #4294967295
   204ec:	dced      	bgt.n	204ca <_svfprintf_r+0x114a>
   204ee:	3330      	adds	r3, #48	; 0x30
   204f0:	3802      	subs	r0, #2
   204f2:	b2d9      	uxtb	r1, r3
   204f4:	4284      	cmp	r4, r0
   204f6:	f802 1c01 	strb.w	r1, [r2, #-1]
   204fa:	f240 8170 	bls.w	207de <_svfprintf_r+0x145e>
   204fe:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   20502:	4613      	mov	r3, r2
   20504:	e001      	b.n	2050a <_svfprintf_r+0x118a>
   20506:	f813 1b01 	ldrb.w	r1, [r3], #1
   2050a:	f800 1b01 	strb.w	r1, [r0], #1
   2050e:	42a3      	cmp	r3, r4
   20510:	d1f9      	bne.n	20506 <_svfprintf_r+0x1186>
   20512:	3301      	adds	r3, #1
   20514:	1a9b      	subs	r3, r3, r2
   20516:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   2051a:	4413      	add	r3, r2
   2051c:	aa1f      	add	r2, sp, #124	; 0x7c
   2051e:	1a9b      	subs	r3, r3, r2
   20520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20522:	9315      	str	r3, [sp, #84]	; 0x54
   20524:	2a01      	cmp	r2, #1
   20526:	4413      	add	r3, r2
   20528:	930a      	str	r3, [sp, #40]	; 0x28
   2052a:	f340 8120 	ble.w	2076e <_svfprintf_r+0x13ee>
   2052e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20532:	4413      	add	r3, r2
   20534:	930a      	str	r3, [sp, #40]	; 0x28
   20536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2053a:	9304      	str	r3, [sp, #16]
   2053c:	2300      	movs	r3, #0
   2053e:	930e      	str	r3, [sp, #56]	; 0x38
   20540:	e6c8      	b.n	202d4 <_svfprintf_r+0xf54>
   20542:	4623      	mov	r3, r4
   20544:	e6a7      	b.n	20296 <_svfprintf_r+0xf16>
   20546:	aa23      	add	r2, sp, #140	; 0x8c
   20548:	9907      	ldr	r1, [sp, #28]
   2054a:	9808      	ldr	r0, [sp, #32]
   2054c:	f002 f88a 	bl	22664 <__ssprint_r>
   20550:	2800      	cmp	r0, #0
   20552:	f47e afe7 	bne.w	1f524 <_svfprintf_r+0x1a4>
   20556:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20558:	46c8      	mov	r8, r9
   2055a:	e4d5      	b.n	1ff08 <_svfprintf_r+0xb88>
   2055c:	aa23      	add	r2, sp, #140	; 0x8c
   2055e:	9907      	ldr	r1, [sp, #28]
   20560:	9808      	ldr	r0, [sp, #32]
   20562:	f002 f87f 	bl	22664 <__ssprint_r>
   20566:	2800      	cmp	r0, #0
   20568:	f47e afdc 	bne.w	1f524 <_svfprintf_r+0x1a4>
   2056c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2056e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20570:	46c8      	mov	r8, r9
   20572:	e5af      	b.n	200d4 <_svfprintf_r+0xd54>
   20574:	aa23      	add	r2, sp, #140	; 0x8c
   20576:	9907      	ldr	r1, [sp, #28]
   20578:	9808      	ldr	r0, [sp, #32]
   2057a:	f002 f873 	bl	22664 <__ssprint_r>
   2057e:	2800      	cmp	r0, #0
   20580:	f47e afd0 	bne.w	1f524 <_svfprintf_r+0x1a4>
   20584:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20588:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2058a:	1a9a      	subs	r2, r3, r2
   2058c:	46c8      	mov	r8, r9
   2058e:	e5b9      	b.n	20104 <_svfprintf_r+0xd84>
   20590:	9b06      	ldr	r3, [sp, #24]
   20592:	960e      	str	r6, [sp, #56]	; 0x38
   20594:	2b06      	cmp	r3, #6
   20596:	bf28      	it	cs
   20598:	2306      	movcs	r3, #6
   2059a:	9606      	str	r6, [sp, #24]
   2059c:	4637      	mov	r7, r6
   2059e:	9304      	str	r3, [sp, #16]
   205a0:	950b      	str	r5, [sp, #44]	; 0x2c
   205a2:	f8cd b00c 	str.w	fp, [sp, #12]
   205a6:	930a      	str	r3, [sp, #40]	; 0x28
   205a8:	4e77      	ldr	r6, [pc, #476]	; (20788 <_svfprintf_r+0x1408>)
   205aa:	f7ff b801 	b.w	1f5b0 <_svfprintf_r+0x230>
   205ae:	2306      	movs	r3, #6
   205b0:	9306      	str	r3, [sp, #24]
   205b2:	e62d      	b.n	20210 <_svfprintf_r+0xe90>
   205b4:	9c06      	ldr	r4, [sp, #24]
   205b6:	9808      	ldr	r0, [sp, #32]
   205b8:	aa21      	add	r2, sp, #132	; 0x84
   205ba:	ab1e      	add	r3, sp, #120	; 0x78
   205bc:	9201      	str	r2, [sp, #4]
   205be:	9300      	str	r3, [sp, #0]
   205c0:	4622      	mov	r2, r4
   205c2:	ab1d      	add	r3, sp, #116	; 0x74
   205c4:	2103      	movs	r1, #3
   205c6:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   205ca:	f000 fab5 	bl	20b38 <_dtoa_r>
   205ce:	4623      	mov	r3, r4
   205d0:	4606      	mov	r6, r0
   205d2:	1904      	adds	r4, r0, r4
   205d4:	461d      	mov	r5, r3
   205d6:	e734      	b.n	20442 <_svfprintf_r+0x10c2>
   205d8:	272d      	movs	r7, #45	; 0x2d
   205da:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   205de:	f7ff baca 	b.w	1fb76 <_svfprintf_r+0x7f6>
   205e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   205e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   205e6:	4413      	add	r3, r2
   205e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   205ea:	930a      	str	r3, [sp, #40]	; 0x28
   205ec:	2a00      	cmp	r2, #0
   205ee:	f340 80b7 	ble.w	20760 <_svfprintf_r+0x13e0>
   205f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   205f6:	9304      	str	r3, [sp, #16]
   205f8:	2367      	movs	r3, #103	; 0x67
   205fa:	930d      	str	r3, [sp, #52]	; 0x34
   205fc:	e66a      	b.n	202d4 <_svfprintf_r+0xf54>
   205fe:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   20602:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   20606:	9319      	str	r3, [sp, #100]	; 0x64
   20608:	232d      	movs	r3, #45	; 0x2d
   2060a:	9118      	str	r1, [sp, #96]	; 0x60
   2060c:	930c      	str	r3, [sp, #48]	; 0x30
   2060e:	e60c      	b.n	2022a <_svfprintf_r+0xeaa>
   20610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20612:	2b47      	cmp	r3, #71	; 0x47
   20614:	f47f ae2b 	bne.w	2026e <_svfprintf_r+0xeee>
   20618:	f01b 0f01 	tst.w	fp, #1
   2061c:	f47f af0b 	bne.w	20436 <_svfprintf_r+0x10b6>
   20620:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20622:	2f47      	cmp	r7, #71	; 0x47
   20624:	eba3 0306 	sub.w	r3, r3, r6
   20628:	930f      	str	r3, [sp, #60]	; 0x3c
   2062a:	f43f af29 	beq.w	20480 <_svfprintf_r+0x1100>
   2062e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20630:	930e      	str	r3, [sp, #56]	; 0x38
   20632:	e732      	b.n	2049a <_svfprintf_r+0x111a>
   20634:	2b00      	cmp	r3, #0
   20636:	f340 80af 	ble.w	20798 <_svfprintf_r+0x1418>
   2063a:	9a06      	ldr	r2, [sp, #24]
   2063c:	2a00      	cmp	r2, #0
   2063e:	d16b      	bne.n	20718 <_svfprintf_r+0x1398>
   20640:	f01b 0f01 	tst.w	fp, #1
   20644:	d168      	bne.n	20718 <_svfprintf_r+0x1398>
   20646:	9304      	str	r3, [sp, #16]
   20648:	930a      	str	r3, [sp, #40]	; 0x28
   2064a:	e643      	b.n	202d4 <_svfprintf_r+0xf54>
   2064c:	9b06      	ldr	r3, [sp, #24]
   2064e:	9304      	str	r3, [sp, #16]
   20650:	930a      	str	r3, [sp, #40]	; 0x28
   20652:	9006      	str	r0, [sp, #24]
   20654:	950b      	str	r5, [sp, #44]	; 0x2c
   20656:	f8cd b00c 	str.w	fp, [sp, #12]
   2065a:	900e      	str	r0, [sp, #56]	; 0x38
   2065c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20660:	f7fe bfa6 	b.w	1f5b0 <_svfprintf_r+0x230>
   20664:	2000      	movs	r0, #0
   20666:	9006      	str	r0, [sp, #24]
   20668:	f7fe bee4 	b.w	1f434 <_svfprintf_r+0xb4>
   2066c:	424f      	negs	r7, r1
   2066e:	3110      	adds	r1, #16
   20670:	4d46      	ldr	r5, [pc, #280]	; (2078c <_svfprintf_r+0x140c>)
   20672:	da2b      	bge.n	206cc <_svfprintf_r+0x134c>
   20674:	2410      	movs	r4, #16
   20676:	f8dd b020 	ldr.w	fp, [sp, #32]
   2067a:	e004      	b.n	20686 <_svfprintf_r+0x1306>
   2067c:	f108 0808 	add.w	r8, r8, #8
   20680:	3f10      	subs	r7, #16
   20682:	2f10      	cmp	r7, #16
   20684:	dd22      	ble.n	206cc <_svfprintf_r+0x134c>
   20686:	3301      	adds	r3, #1
   20688:	3210      	adds	r2, #16
   2068a:	2b07      	cmp	r3, #7
   2068c:	9225      	str	r2, [sp, #148]	; 0x94
   2068e:	9324      	str	r3, [sp, #144]	; 0x90
   20690:	f8c8 5000 	str.w	r5, [r8]
   20694:	f8c8 4004 	str.w	r4, [r8, #4]
   20698:	ddf0      	ble.n	2067c <_svfprintf_r+0x12fc>
   2069a:	aa23      	add	r2, sp, #140	; 0x8c
   2069c:	9907      	ldr	r1, [sp, #28]
   2069e:	4658      	mov	r0, fp
   206a0:	f001 ffe0 	bl	22664 <__ssprint_r>
   206a4:	2800      	cmp	r0, #0
   206a6:	f47e af3d 	bne.w	1f524 <_svfprintf_r+0x1a4>
   206aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
   206ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   206ae:	46c8      	mov	r8, r9
   206b0:	e7e6      	b.n	20680 <_svfprintf_r+0x1300>
   206b2:	aa23      	add	r2, sp, #140	; 0x8c
   206b4:	9907      	ldr	r1, [sp, #28]
   206b6:	9808      	ldr	r0, [sp, #32]
   206b8:	f001 ffd4 	bl	22664 <__ssprint_r>
   206bc:	2800      	cmp	r0, #0
   206be:	f47e af31 	bne.w	1f524 <_svfprintf_r+0x1a4>
   206c2:	991d      	ldr	r1, [sp, #116]	; 0x74
   206c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   206c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   206c8:	46c8      	mov	r8, r9
   206ca:	e65f      	b.n	2038c <_svfprintf_r+0x100c>
   206cc:	3301      	adds	r3, #1
   206ce:	443a      	add	r2, r7
   206d0:	2b07      	cmp	r3, #7
   206d2:	e888 00a0 	stmia.w	r8, {r5, r7}
   206d6:	9225      	str	r2, [sp, #148]	; 0x94
   206d8:	9324      	str	r3, [sp, #144]	; 0x90
   206da:	f108 0808 	add.w	r8, r8, #8
   206de:	f77f ae58 	ble.w	20392 <_svfprintf_r+0x1012>
   206e2:	aa23      	add	r2, sp, #140	; 0x8c
   206e4:	9907      	ldr	r1, [sp, #28]
   206e6:	9808      	ldr	r0, [sp, #32]
   206e8:	f001 ffbc 	bl	22664 <__ssprint_r>
   206ec:	2800      	cmp	r0, #0
   206ee:	f47e af19 	bne.w	1f524 <_svfprintf_r+0x1a4>
   206f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   206f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   206f6:	46c8      	mov	r8, r9
   206f8:	e64b      	b.n	20392 <_svfprintf_r+0x1012>
   206fa:	3330      	adds	r3, #48	; 0x30
   206fc:	2230      	movs	r2, #48	; 0x30
   206fe:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20702:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20706:	ab20      	add	r3, sp, #128	; 0x80
   20708:	e708      	b.n	2051c <_svfprintf_r+0x119c>
   2070a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2070c:	e5c3      	b.n	20296 <_svfprintf_r+0xf16>
   2070e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20712:	4413      	add	r3, r2
   20714:	930a      	str	r3, [sp, #40]	; 0x28
   20716:	e76c      	b.n	205f2 <_svfprintf_r+0x1272>
   20718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2071a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2071c:	4413      	add	r3, r2
   2071e:	9a06      	ldr	r2, [sp, #24]
   20720:	441a      	add	r2, r3
   20722:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20726:	920a      	str	r2, [sp, #40]	; 0x28
   20728:	9304      	str	r3, [sp, #16]
   2072a:	e5d3      	b.n	202d4 <_svfprintf_r+0xf54>
   2072c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2072e:	4e18      	ldr	r6, [pc, #96]	; (20790 <_svfprintf_r+0x1410>)
   20730:	2b00      	cmp	r3, #0
   20732:	bfb6      	itet	lt
   20734:	272d      	movlt	r7, #45	; 0x2d
   20736:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   2073a:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   2073e:	4b15      	ldr	r3, [pc, #84]	; (20794 <_svfprintf_r+0x1414>)
   20740:	f7ff ba1b 	b.w	1fb7a <_svfprintf_r+0x7fa>
   20744:	2200      	movs	r2, #0
   20746:	2300      	movs	r3, #0
   20748:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   2074c:	f7fb fe86 	bl	1c45c <__aeabi_dcmpeq>
   20750:	2800      	cmp	r0, #0
   20752:	f47f ae7a 	bne.w	2044a <_svfprintf_r+0x10ca>
   20756:	f1c5 0501 	rsb	r5, r5, #1
   2075a:	951d      	str	r5, [sp, #116]	; 0x74
   2075c:	442c      	add	r4, r5
   2075e:	e587      	b.n	20270 <_svfprintf_r+0xef0>
   20760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20764:	f1c3 0301 	rsb	r3, r3, #1
   20768:	441a      	add	r2, r3
   2076a:	4613      	mov	r3, r2
   2076c:	e7d2      	b.n	20714 <_svfprintf_r+0x1394>
   2076e:	f01b 0301 	ands.w	r3, fp, #1
   20772:	930e      	str	r3, [sp, #56]	; 0x38
   20774:	f47f aedb 	bne.w	2052e <_svfprintf_r+0x11ae>
   20778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2077a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2077e:	9304      	str	r3, [sp, #16]
   20780:	e5a8      	b.n	202d4 <_svfprintf_r+0xf54>
   20782:	bf00      	nop
   20784:	66666667 	.word	0x66666667
   20788:	000250b0 	.word	0x000250b0
   2078c:	000250cc 	.word	0x000250cc
   20790:	00025084 	.word	0x00025084
   20794:	00025080 	.word	0x00025080
   20798:	9b06      	ldr	r3, [sp, #24]
   2079a:	b913      	cbnz	r3, 207a2 <_svfprintf_r+0x1422>
   2079c:	f01b 0f01 	tst.w	fp, #1
   207a0:	d002      	beq.n	207a8 <_svfprintf_r+0x1428>
   207a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   207a4:	3301      	adds	r3, #1
   207a6:	e7ba      	b.n	2071e <_svfprintf_r+0x139e>
   207a8:	2301      	movs	r3, #1
   207aa:	e74c      	b.n	20646 <_svfprintf_r+0x12c6>
   207ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   207ae:	f89a 3001 	ldrb.w	r3, [sl, #1]
   207b2:	6828      	ldr	r0, [r5, #0]
   207b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   207b8:	9006      	str	r0, [sp, #24]
   207ba:	4628      	mov	r0, r5
   207bc:	3004      	adds	r0, #4
   207be:	46a2      	mov	sl, r4
   207c0:	900b      	str	r0, [sp, #44]	; 0x2c
   207c2:	f7fe be35 	b.w	1f430 <_svfprintf_r+0xb0>
   207c6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   207ca:	f7ff b852 	b.w	1f872 <_svfprintf_r+0x4f2>
   207ce:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   207d2:	f7ff b8de 	b.w	1f992 <_svfprintf_r+0x612>
   207d6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   207da:	f7ff ba07 	b.w	1fbec <_svfprintf_r+0x86c>
   207de:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   207e2:	e69b      	b.n	2051c <_svfprintf_r+0x119c>
   207e4:	9a08      	ldr	r2, [sp, #32]
   207e6:	230c      	movs	r3, #12
   207e8:	6013      	str	r3, [r2, #0]
   207ea:	f04f 33ff 	mov.w	r3, #4294967295
   207ee:	9305      	str	r3, [sp, #20]
   207f0:	f7fe bea1 	b.w	1f536 <_svfprintf_r+0x1b6>
   207f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   207f8:	f7ff b986 	b.w	1fb08 <_svfprintf_r+0x788>
   207fc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20800:	f7ff b962 	b.w	1fac8 <_svfprintf_r+0x748>
   20804:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20808:	f7ff b945 	b.w	1fa96 <_svfprintf_r+0x716>
   2080c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20810:	f7ff b8fe 	b.w	1fa10 <_svfprintf_r+0x690>

00020814 <write>:
   20814:	b410      	push	{r4}
   20816:	4c04      	ldr	r4, [pc, #16]	; (20828 <write+0x14>)
   20818:	4613      	mov	r3, r2
   2081a:	460a      	mov	r2, r1
   2081c:	4601      	mov	r1, r0
   2081e:	6820      	ldr	r0, [r4, #0]
   20820:	f85d 4b04 	ldr.w	r4, [sp], #4
   20824:	f000 b868 	b.w	208f8 <_write_r>
   20828:	20000108 	.word	0x20000108

0002082c <__swbuf_r>:
   2082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2082e:	460d      	mov	r5, r1
   20830:	4614      	mov	r4, r2
   20832:	4606      	mov	r6, r0
   20834:	b110      	cbz	r0, 2083c <__swbuf_r+0x10>
   20836:	6b83      	ldr	r3, [r0, #56]	; 0x38
   20838:	2b00      	cmp	r3, #0
   2083a:	d04b      	beq.n	208d4 <__swbuf_r+0xa8>
   2083c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20840:	69a3      	ldr	r3, [r4, #24]
   20842:	60a3      	str	r3, [r4, #8]
   20844:	b291      	uxth	r1, r2
   20846:	0708      	lsls	r0, r1, #28
   20848:	d539      	bpl.n	208be <__swbuf_r+0x92>
   2084a:	6923      	ldr	r3, [r4, #16]
   2084c:	2b00      	cmp	r3, #0
   2084e:	d036      	beq.n	208be <__swbuf_r+0x92>
   20850:	b2ed      	uxtb	r5, r5
   20852:	0489      	lsls	r1, r1, #18
   20854:	462f      	mov	r7, r5
   20856:	d515      	bpl.n	20884 <__swbuf_r+0x58>
   20858:	6822      	ldr	r2, [r4, #0]
   2085a:	6961      	ldr	r1, [r4, #20]
   2085c:	1ad3      	subs	r3, r2, r3
   2085e:	428b      	cmp	r3, r1
   20860:	da1c      	bge.n	2089c <__swbuf_r+0x70>
   20862:	3301      	adds	r3, #1
   20864:	68a1      	ldr	r1, [r4, #8]
   20866:	1c50      	adds	r0, r2, #1
   20868:	3901      	subs	r1, #1
   2086a:	60a1      	str	r1, [r4, #8]
   2086c:	6020      	str	r0, [r4, #0]
   2086e:	7015      	strb	r5, [r2, #0]
   20870:	6962      	ldr	r2, [r4, #20]
   20872:	429a      	cmp	r2, r3
   20874:	d01a      	beq.n	208ac <__swbuf_r+0x80>
   20876:	89a3      	ldrh	r3, [r4, #12]
   20878:	07db      	lsls	r3, r3, #31
   2087a:	d501      	bpl.n	20880 <__swbuf_r+0x54>
   2087c:	2d0a      	cmp	r5, #10
   2087e:	d015      	beq.n	208ac <__swbuf_r+0x80>
   20880:	4638      	mov	r0, r7
   20882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20884:	6e61      	ldr	r1, [r4, #100]	; 0x64
   20886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2088a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2088e:	81a2      	strh	r2, [r4, #12]
   20890:	6822      	ldr	r2, [r4, #0]
   20892:	6661      	str	r1, [r4, #100]	; 0x64
   20894:	6961      	ldr	r1, [r4, #20]
   20896:	1ad3      	subs	r3, r2, r3
   20898:	428b      	cmp	r3, r1
   2089a:	dbe2      	blt.n	20862 <__swbuf_r+0x36>
   2089c:	4621      	mov	r1, r4
   2089e:	4630      	mov	r0, r6
   208a0:	f001 f910 	bl	21ac4 <_fflush_r>
   208a4:	b940      	cbnz	r0, 208b8 <__swbuf_r+0x8c>
   208a6:	6822      	ldr	r2, [r4, #0]
   208a8:	2301      	movs	r3, #1
   208aa:	e7db      	b.n	20864 <__swbuf_r+0x38>
   208ac:	4621      	mov	r1, r4
   208ae:	4630      	mov	r0, r6
   208b0:	f001 f908 	bl	21ac4 <_fflush_r>
   208b4:	2800      	cmp	r0, #0
   208b6:	d0e3      	beq.n	20880 <__swbuf_r+0x54>
   208b8:	f04f 37ff 	mov.w	r7, #4294967295
   208bc:	e7e0      	b.n	20880 <__swbuf_r+0x54>
   208be:	4621      	mov	r1, r4
   208c0:	4630      	mov	r0, r6
   208c2:	f000 f82f 	bl	20924 <__swsetup_r>
   208c6:	2800      	cmp	r0, #0
   208c8:	d1f6      	bne.n	208b8 <__swbuf_r+0x8c>
   208ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   208ce:	6923      	ldr	r3, [r4, #16]
   208d0:	b291      	uxth	r1, r2
   208d2:	e7bd      	b.n	20850 <__swbuf_r+0x24>
   208d4:	f001 f94e 	bl	21b74 <__sinit>
   208d8:	e7b0      	b.n	2083c <__swbuf_r+0x10>
   208da:	bf00      	nop

000208dc <__ascii_wctomb>:
   208dc:	b121      	cbz	r1, 208e8 <__ascii_wctomb+0xc>
   208de:	2aff      	cmp	r2, #255	; 0xff
   208e0:	d804      	bhi.n	208ec <__ascii_wctomb+0x10>
   208e2:	700a      	strb	r2, [r1, #0]
   208e4:	2001      	movs	r0, #1
   208e6:	4770      	bx	lr
   208e8:	4608      	mov	r0, r1
   208ea:	4770      	bx	lr
   208ec:	238a      	movs	r3, #138	; 0x8a
   208ee:	6003      	str	r3, [r0, #0]
   208f0:	f04f 30ff 	mov.w	r0, #4294967295
   208f4:	4770      	bx	lr
   208f6:	bf00      	nop

000208f8 <_write_r>:
   208f8:	b570      	push	{r4, r5, r6, lr}
   208fa:	460d      	mov	r5, r1
   208fc:	4c08      	ldr	r4, [pc, #32]	; (20920 <_write_r+0x28>)
   208fe:	4611      	mov	r1, r2
   20900:	4606      	mov	r6, r0
   20902:	461a      	mov	r2, r3
   20904:	4628      	mov	r0, r5
   20906:	2300      	movs	r3, #0
   20908:	6023      	str	r3, [r4, #0]
   2090a:	f002 f935 	bl	22b78 <_write>
   2090e:	1c43      	adds	r3, r0, #1
   20910:	d000      	beq.n	20914 <_write_r+0x1c>
   20912:	bd70      	pop	{r4, r5, r6, pc}
   20914:	6823      	ldr	r3, [r4, #0]
   20916:	2b00      	cmp	r3, #0
   20918:	d0fb      	beq.n	20912 <_write_r+0x1a>
   2091a:	6033      	str	r3, [r6, #0]
   2091c:	bd70      	pop	{r4, r5, r6, pc}
   2091e:	bf00      	nop
   20920:	200023ac 	.word	0x200023ac

00020924 <__swsetup_r>:
   20924:	b538      	push	{r3, r4, r5, lr}
   20926:	4b30      	ldr	r3, [pc, #192]	; (209e8 <__swsetup_r+0xc4>)
   20928:	681b      	ldr	r3, [r3, #0]
   2092a:	4605      	mov	r5, r0
   2092c:	460c      	mov	r4, r1
   2092e:	b113      	cbz	r3, 20936 <__swsetup_r+0x12>
   20930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20932:	2a00      	cmp	r2, #0
   20934:	d038      	beq.n	209a8 <__swsetup_r+0x84>
   20936:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2093a:	b293      	uxth	r3, r2
   2093c:	0718      	lsls	r0, r3, #28
   2093e:	d50c      	bpl.n	2095a <__swsetup_r+0x36>
   20940:	6920      	ldr	r0, [r4, #16]
   20942:	b1a8      	cbz	r0, 20970 <__swsetup_r+0x4c>
   20944:	f013 0201 	ands.w	r2, r3, #1
   20948:	d01e      	beq.n	20988 <__swsetup_r+0x64>
   2094a:	6963      	ldr	r3, [r4, #20]
   2094c:	2200      	movs	r2, #0
   2094e:	425b      	negs	r3, r3
   20950:	61a3      	str	r3, [r4, #24]
   20952:	60a2      	str	r2, [r4, #8]
   20954:	b1f0      	cbz	r0, 20994 <__swsetup_r+0x70>
   20956:	2000      	movs	r0, #0
   20958:	bd38      	pop	{r3, r4, r5, pc}
   2095a:	06d9      	lsls	r1, r3, #27
   2095c:	d53c      	bpl.n	209d8 <__swsetup_r+0xb4>
   2095e:	0758      	lsls	r0, r3, #29
   20960:	d426      	bmi.n	209b0 <__swsetup_r+0x8c>
   20962:	6920      	ldr	r0, [r4, #16]
   20964:	f042 0308 	orr.w	r3, r2, #8
   20968:	81a3      	strh	r3, [r4, #12]
   2096a:	b29b      	uxth	r3, r3
   2096c:	2800      	cmp	r0, #0
   2096e:	d1e9      	bne.n	20944 <__swsetup_r+0x20>
   20970:	f403 7220 	and.w	r2, r3, #640	; 0x280
   20974:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   20978:	d0e4      	beq.n	20944 <__swsetup_r+0x20>
   2097a:	4628      	mov	r0, r5
   2097c:	4621      	mov	r1, r4
   2097e:	f001 fae7 	bl	21f50 <__smakebuf_r>
   20982:	89a3      	ldrh	r3, [r4, #12]
   20984:	6920      	ldr	r0, [r4, #16]
   20986:	e7dd      	b.n	20944 <__swsetup_r+0x20>
   20988:	0799      	lsls	r1, r3, #30
   2098a:	bf58      	it	pl
   2098c:	6962      	ldrpl	r2, [r4, #20]
   2098e:	60a2      	str	r2, [r4, #8]
   20990:	2800      	cmp	r0, #0
   20992:	d1e0      	bne.n	20956 <__swsetup_r+0x32>
   20994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20998:	061a      	lsls	r2, r3, #24
   2099a:	d5dd      	bpl.n	20958 <__swsetup_r+0x34>
   2099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   209a0:	81a3      	strh	r3, [r4, #12]
   209a2:	f04f 30ff 	mov.w	r0, #4294967295
   209a6:	bd38      	pop	{r3, r4, r5, pc}
   209a8:	4618      	mov	r0, r3
   209aa:	f001 f8e3 	bl	21b74 <__sinit>
   209ae:	e7c2      	b.n	20936 <__swsetup_r+0x12>
   209b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   209b2:	b151      	cbz	r1, 209ca <__swsetup_r+0xa6>
   209b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   209b8:	4299      	cmp	r1, r3
   209ba:	d004      	beq.n	209c6 <__swsetup_r+0xa2>
   209bc:	4628      	mov	r0, r5
   209be:	f001 f97b 	bl	21cb8 <_free_r>
   209c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   209c6:	2300      	movs	r3, #0
   209c8:	6323      	str	r3, [r4, #48]	; 0x30
   209ca:	2300      	movs	r3, #0
   209cc:	6920      	ldr	r0, [r4, #16]
   209ce:	6063      	str	r3, [r4, #4]
   209d0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   209d4:	6020      	str	r0, [r4, #0]
   209d6:	e7c5      	b.n	20964 <__swsetup_r+0x40>
   209d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   209dc:	2309      	movs	r3, #9
   209de:	602b      	str	r3, [r5, #0]
   209e0:	f04f 30ff 	mov.w	r0, #4294967295
   209e4:	81a2      	strh	r2, [r4, #12]
   209e6:	bd38      	pop	{r3, r4, r5, pc}
   209e8:	20000108 	.word	0x20000108

000209ec <register_fini>:
   209ec:	4b02      	ldr	r3, [pc, #8]	; (209f8 <register_fini+0xc>)
   209ee:	b113      	cbz	r3, 209f6 <register_fini+0xa>
   209f0:	4802      	ldr	r0, [pc, #8]	; (209fc <register_fini+0x10>)
   209f2:	f000 b805 	b.w	20a00 <atexit>
   209f6:	4770      	bx	lr
   209f8:	00000000 	.word	0x00000000
   209fc:	00021be5 	.word	0x00021be5

00020a00 <atexit>:
   20a00:	2300      	movs	r3, #0
   20a02:	4601      	mov	r1, r0
   20a04:	461a      	mov	r2, r3
   20a06:	4618      	mov	r0, r3
   20a08:	f001 beaa 	b.w	22760 <__register_exitproc>

00020a0c <quorem>:
   20a0c:	6902      	ldr	r2, [r0, #16]
   20a0e:	690b      	ldr	r3, [r1, #16]
   20a10:	4293      	cmp	r3, r2
   20a12:	f300 808d 	bgt.w	20b30 <quorem+0x124>
   20a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a1a:	f103 38ff 	add.w	r8, r3, #4294967295
   20a1e:	f101 0714 	add.w	r7, r1, #20
   20a22:	f100 0b14 	add.w	fp, r0, #20
   20a26:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   20a2a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   20a2e:	ea4f 0488 	mov.w	r4, r8, lsl #2
   20a32:	b083      	sub	sp, #12
   20a34:	3201      	adds	r2, #1
   20a36:	fbb3 f9f2 	udiv	r9, r3, r2
   20a3a:	eb0b 0304 	add.w	r3, fp, r4
   20a3e:	9400      	str	r4, [sp, #0]
   20a40:	eb07 0a04 	add.w	sl, r7, r4
   20a44:	9301      	str	r3, [sp, #4]
   20a46:	f1b9 0f00 	cmp.w	r9, #0
   20a4a:	d039      	beq.n	20ac0 <quorem+0xb4>
   20a4c:	2500      	movs	r5, #0
   20a4e:	462e      	mov	r6, r5
   20a50:	46bc      	mov	ip, r7
   20a52:	46de      	mov	lr, fp
   20a54:	f85c 4b04 	ldr.w	r4, [ip], #4
   20a58:	f8de 3000 	ldr.w	r3, [lr]
   20a5c:	b2a2      	uxth	r2, r4
   20a5e:	fb09 5502 	mla	r5, r9, r2, r5
   20a62:	0c22      	lsrs	r2, r4, #16
   20a64:	0c2c      	lsrs	r4, r5, #16
   20a66:	fb09 4202 	mla	r2, r9, r2, r4
   20a6a:	b2ad      	uxth	r5, r5
   20a6c:	1b75      	subs	r5, r6, r5
   20a6e:	b296      	uxth	r6, r2
   20a70:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   20a74:	fa15 f383 	uxtah	r3, r5, r3
   20a78:	eb06 4623 	add.w	r6, r6, r3, asr #16
   20a7c:	b29b      	uxth	r3, r3
   20a7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20a82:	45e2      	cmp	sl, ip
   20a84:	ea4f 4512 	mov.w	r5, r2, lsr #16
   20a88:	f84e 3b04 	str.w	r3, [lr], #4
   20a8c:	ea4f 4626 	mov.w	r6, r6, asr #16
   20a90:	d2e0      	bcs.n	20a54 <quorem+0x48>
   20a92:	9b00      	ldr	r3, [sp, #0]
   20a94:	f85b 3003 	ldr.w	r3, [fp, r3]
   20a98:	b993      	cbnz	r3, 20ac0 <quorem+0xb4>
   20a9a:	9c01      	ldr	r4, [sp, #4]
   20a9c:	1f23      	subs	r3, r4, #4
   20a9e:	459b      	cmp	fp, r3
   20aa0:	d20c      	bcs.n	20abc <quorem+0xb0>
   20aa2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20aa6:	b94b      	cbnz	r3, 20abc <quorem+0xb0>
   20aa8:	f1a4 0308 	sub.w	r3, r4, #8
   20aac:	e002      	b.n	20ab4 <quorem+0xa8>
   20aae:	681a      	ldr	r2, [r3, #0]
   20ab0:	3b04      	subs	r3, #4
   20ab2:	b91a      	cbnz	r2, 20abc <quorem+0xb0>
   20ab4:	459b      	cmp	fp, r3
   20ab6:	f108 38ff 	add.w	r8, r8, #4294967295
   20aba:	d3f8      	bcc.n	20aae <quorem+0xa2>
   20abc:	f8c0 8010 	str.w	r8, [r0, #16]
   20ac0:	4604      	mov	r4, r0
   20ac2:	f001 fc8d 	bl	223e0 <__mcmp>
   20ac6:	2800      	cmp	r0, #0
   20ac8:	db2e      	blt.n	20b28 <quorem+0x11c>
   20aca:	f109 0901 	add.w	r9, r9, #1
   20ace:	465d      	mov	r5, fp
   20ad0:	2300      	movs	r3, #0
   20ad2:	f857 1b04 	ldr.w	r1, [r7], #4
   20ad6:	6828      	ldr	r0, [r5, #0]
   20ad8:	b28a      	uxth	r2, r1
   20ada:	1a9a      	subs	r2, r3, r2
   20adc:	0c0b      	lsrs	r3, r1, #16
   20ade:	fa12 f280 	uxtah	r2, r2, r0
   20ae2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   20ae6:	eb03 4322 	add.w	r3, r3, r2, asr #16
   20aea:	b292      	uxth	r2, r2
   20aec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   20af0:	45ba      	cmp	sl, r7
   20af2:	f845 2b04 	str.w	r2, [r5], #4
   20af6:	ea4f 4323 	mov.w	r3, r3, asr #16
   20afa:	d2ea      	bcs.n	20ad2 <quorem+0xc6>
   20afc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   20b00:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   20b04:	b982      	cbnz	r2, 20b28 <quorem+0x11c>
   20b06:	1f1a      	subs	r2, r3, #4
   20b08:	4593      	cmp	fp, r2
   20b0a:	d20b      	bcs.n	20b24 <quorem+0x118>
   20b0c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20b10:	b942      	cbnz	r2, 20b24 <quorem+0x118>
   20b12:	3b08      	subs	r3, #8
   20b14:	e002      	b.n	20b1c <quorem+0x110>
   20b16:	681a      	ldr	r2, [r3, #0]
   20b18:	3b04      	subs	r3, #4
   20b1a:	b91a      	cbnz	r2, 20b24 <quorem+0x118>
   20b1c:	459b      	cmp	fp, r3
   20b1e:	f108 38ff 	add.w	r8, r8, #4294967295
   20b22:	d3f8      	bcc.n	20b16 <quorem+0x10a>
   20b24:	f8c4 8010 	str.w	r8, [r4, #16]
   20b28:	4648      	mov	r0, r9
   20b2a:	b003      	add	sp, #12
   20b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b30:	2000      	movs	r0, #0
   20b32:	4770      	bx	lr
   20b34:	0000      	movs	r0, r0
	...

00020b38 <_dtoa_r>:
   20b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b3c:	ec57 6b10 	vmov	r6, r7, d0
   20b40:	b097      	sub	sp, #92	; 0x5c
   20b42:	6c05      	ldr	r5, [r0, #64]	; 0x40
   20b44:	9102      	str	r1, [sp, #8]
   20b46:	4604      	mov	r4, r0
   20b48:	4693      	mov	fp, r2
   20b4a:	9303      	str	r3, [sp, #12]
   20b4c:	e9cd 6700 	strd	r6, r7, [sp]
   20b50:	b14d      	cbz	r5, 20b66 <_dtoa_r+0x2e>
   20b52:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20b54:	606a      	str	r2, [r5, #4]
   20b56:	2301      	movs	r3, #1
   20b58:	4093      	lsls	r3, r2
   20b5a:	60ab      	str	r3, [r5, #8]
   20b5c:	4629      	mov	r1, r5
   20b5e:	f001 fa67 	bl	22030 <_Bfree>
   20b62:	2300      	movs	r3, #0
   20b64:	6423      	str	r3, [r4, #64]	; 0x40
   20b66:	e9dd 2300 	ldrd	r2, r3, [sp]
   20b6a:	2b00      	cmp	r3, #0
   20b6c:	4699      	mov	r9, r3
   20b6e:	db38      	blt.n	20be2 <_dtoa_r+0xaa>
   20b70:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20b72:	2300      	movs	r3, #0
   20b74:	6013      	str	r3, [r2, #0]
   20b76:	4ba0      	ldr	r3, [pc, #640]	; (20df8 <_dtoa_r+0x2c0>)
   20b78:	ea33 0309 	bics.w	r3, r3, r9
   20b7c:	d017      	beq.n	20bae <_dtoa_r+0x76>
   20b7e:	e9dd 6700 	ldrd	r6, r7, [sp]
   20b82:	2200      	movs	r2, #0
   20b84:	2300      	movs	r3, #0
   20b86:	4630      	mov	r0, r6
   20b88:	4639      	mov	r1, r7
   20b8a:	f7fb fc67 	bl	1c45c <__aeabi_dcmpeq>
   20b8e:	4680      	mov	r8, r0
   20b90:	2800      	cmp	r0, #0
   20b92:	d02f      	beq.n	20bf4 <_dtoa_r+0xbc>
   20b94:	9a03      	ldr	r2, [sp, #12]
   20b96:	2301      	movs	r3, #1
   20b98:	6013      	str	r3, [r2, #0]
   20b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20b9c:	2b00      	cmp	r3, #0
   20b9e:	f000 80c4 	beq.w	20d2a <_dtoa_r+0x1f2>
   20ba2:	4896      	ldr	r0, [pc, #600]	; (20dfc <_dtoa_r+0x2c4>)
   20ba4:	6018      	str	r0, [r3, #0]
   20ba6:	3801      	subs	r0, #1
   20ba8:	b017      	add	sp, #92	; 0x5c
   20baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bae:	9a03      	ldr	r2, [sp, #12]
   20bb0:	f242 730f 	movw	r3, #9999	; 0x270f
   20bb4:	6013      	str	r3, [r2, #0]
   20bb6:	9b00      	ldr	r3, [sp, #0]
   20bb8:	b96b      	cbnz	r3, 20bd6 <_dtoa_r+0x9e>
   20bba:	f3c9 0313 	ubfx	r3, r9, #0, #20
   20bbe:	b953      	cbnz	r3, 20bd6 <_dtoa_r+0x9e>
   20bc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20bc2:	488f      	ldr	r0, [pc, #572]	; (20e00 <_dtoa_r+0x2c8>)
   20bc4:	2b00      	cmp	r3, #0
   20bc6:	d0ef      	beq.n	20ba8 <_dtoa_r+0x70>
   20bc8:	f100 0308 	add.w	r3, r0, #8
   20bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   20bce:	6013      	str	r3, [r2, #0]
   20bd0:	b017      	add	sp, #92	; 0x5c
   20bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20bd8:	488a      	ldr	r0, [pc, #552]	; (20e04 <_dtoa_r+0x2cc>)
   20bda:	2b00      	cmp	r3, #0
   20bdc:	d0e4      	beq.n	20ba8 <_dtoa_r+0x70>
   20bde:	1cc3      	adds	r3, r0, #3
   20be0:	e7f4      	b.n	20bcc <_dtoa_r+0x94>
   20be2:	9a01      	ldr	r2, [sp, #4]
   20be4:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   20be8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20bea:	f8cd 9004 	str.w	r9, [sp, #4]
   20bee:	2301      	movs	r3, #1
   20bf0:	6013      	str	r3, [r2, #0]
   20bf2:	e7c0      	b.n	20b76 <_dtoa_r+0x3e>
   20bf4:	aa14      	add	r2, sp, #80	; 0x50
   20bf6:	a915      	add	r1, sp, #84	; 0x54
   20bf8:	ec47 6b10 	vmov	d0, r6, r7
   20bfc:	4620      	mov	r0, r4
   20bfe:	f001 fc8f 	bl	22520 <__d2b>
   20c02:	ea5f 5519 	movs.w	r5, r9, lsr #20
   20c06:	4682      	mov	sl, r0
   20c08:	d073      	beq.n	20cf2 <_dtoa_r+0x1ba>
   20c0a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   20c0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   20c12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   20c16:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   20c1a:	4630      	mov	r0, r6
   20c1c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   20c20:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   20c24:	2200      	movs	r2, #0
   20c26:	4b78      	ldr	r3, [pc, #480]	; (20e08 <_dtoa_r+0x2d0>)
   20c28:	f7fa fffc 	bl	1bc24 <__aeabi_dsub>
   20c2c:	a36c      	add	r3, pc, #432	; (adr r3, 20de0 <_dtoa_r+0x2a8>)
   20c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20c32:	f7fb f9ab 	bl	1bf8c <__aeabi_dmul>
   20c36:	a36c      	add	r3, pc, #432	; (adr r3, 20de8 <_dtoa_r+0x2b0>)
   20c38:	e9d3 2300 	ldrd	r2, r3, [r3]
   20c3c:	f7fa fff4 	bl	1bc28 <__adddf3>
   20c40:	4606      	mov	r6, r0
   20c42:	4628      	mov	r0, r5
   20c44:	460f      	mov	r7, r1
   20c46:	f7fb f93b 	bl	1bec0 <__aeabi_i2d>
   20c4a:	a369      	add	r3, pc, #420	; (adr r3, 20df0 <_dtoa_r+0x2b8>)
   20c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20c50:	f7fb f99c 	bl	1bf8c <__aeabi_dmul>
   20c54:	4602      	mov	r2, r0
   20c56:	460b      	mov	r3, r1
   20c58:	4630      	mov	r0, r6
   20c5a:	4639      	mov	r1, r7
   20c5c:	f7fa ffe4 	bl	1bc28 <__adddf3>
   20c60:	4606      	mov	r6, r0
   20c62:	460f      	mov	r7, r1
   20c64:	f7fb fc2c 	bl	1c4c0 <__aeabi_d2iz>
   20c68:	2200      	movs	r2, #0
   20c6a:	9004      	str	r0, [sp, #16]
   20c6c:	2300      	movs	r3, #0
   20c6e:	4630      	mov	r0, r6
   20c70:	4639      	mov	r1, r7
   20c72:	f7fb fbfd 	bl	1c470 <__aeabi_dcmplt>
   20c76:	2800      	cmp	r0, #0
   20c78:	f040 816f 	bne.w	20f5a <_dtoa_r+0x422>
   20c7c:	9e04      	ldr	r6, [sp, #16]
   20c7e:	2e16      	cmp	r6, #22
   20c80:	f200 8159 	bhi.w	20f36 <_dtoa_r+0x3fe>
   20c84:	4b61      	ldr	r3, [pc, #388]	; (20e0c <_dtoa_r+0x2d4>)
   20c86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   20c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
   20c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20c92:	f7fb fc0b 	bl	1c4ac <__aeabi_dcmpgt>
   20c96:	2800      	cmp	r0, #0
   20c98:	f000 81c4 	beq.w	21024 <_dtoa_r+0x4ec>
   20c9c:	1e73      	subs	r3, r6, #1
   20c9e:	9304      	str	r3, [sp, #16]
   20ca0:	2300      	movs	r3, #0
   20ca2:	930c      	str	r3, [sp, #48]	; 0x30
   20ca4:	eba8 0505 	sub.w	r5, r8, r5
   20ca8:	1e6b      	subs	r3, r5, #1
   20caa:	9305      	str	r3, [sp, #20]
   20cac:	f100 814f 	bmi.w	20f4e <_dtoa_r+0x416>
   20cb0:	2300      	movs	r3, #0
   20cb2:	9306      	str	r3, [sp, #24]
   20cb4:	9b04      	ldr	r3, [sp, #16]
   20cb6:	2b00      	cmp	r3, #0
   20cb8:	f2c0 8140 	blt.w	20f3c <_dtoa_r+0x404>
   20cbc:	9a05      	ldr	r2, [sp, #20]
   20cbe:	930b      	str	r3, [sp, #44]	; 0x2c
   20cc0:	4611      	mov	r1, r2
   20cc2:	4419      	add	r1, r3
   20cc4:	2300      	movs	r3, #0
   20cc6:	9105      	str	r1, [sp, #20]
   20cc8:	930a      	str	r3, [sp, #40]	; 0x28
   20cca:	9b02      	ldr	r3, [sp, #8]
   20ccc:	2b09      	cmp	r3, #9
   20cce:	d82e      	bhi.n	20d2e <_dtoa_r+0x1f6>
   20cd0:	2b05      	cmp	r3, #5
   20cd2:	f340 8651 	ble.w	21978 <_dtoa_r+0xe40>
   20cd6:	3b04      	subs	r3, #4
   20cd8:	9302      	str	r3, [sp, #8]
   20cda:	2700      	movs	r7, #0
   20cdc:	9b02      	ldr	r3, [sp, #8]
   20cde:	3b02      	subs	r3, #2
   20ce0:	2b03      	cmp	r3, #3
   20ce2:	f200 8633 	bhi.w	2194c <_dtoa_r+0xe14>
   20ce6:	e8df f013 	tbh	[pc, r3, lsl #1]
   20cea:	03d6      	.short	0x03d6
   20cec:	03e302cb 	.word	0x03e302cb
   20cf0:	0464      	.short	0x0464
   20cf2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   20cf6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   20cf8:	4445      	add	r5, r8
   20cfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
   20cfe:	2b20      	cmp	r3, #32
   20d00:	f340 818a 	ble.w	21018 <_dtoa_r+0x4e0>
   20d04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   20d08:	fa09 f903 	lsl.w	r9, r9, r3
   20d0c:	9b00      	ldr	r3, [sp, #0]
   20d0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   20d12:	fa23 f000 	lsr.w	r0, r3, r0
   20d16:	ea40 0009 	orr.w	r0, r0, r9
   20d1a:	f7fb f8c1 	bl	1bea0 <__aeabi_ui2d>
   20d1e:	2301      	movs	r3, #1
   20d20:	3d01      	subs	r5, #1
   20d22:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   20d26:	9310      	str	r3, [sp, #64]	; 0x40
   20d28:	e77c      	b.n	20c24 <_dtoa_r+0xec>
   20d2a:	4839      	ldr	r0, [pc, #228]	; (20e10 <_dtoa_r+0x2d8>)
   20d2c:	e73c      	b.n	20ba8 <_dtoa_r+0x70>
   20d2e:	2100      	movs	r1, #0
   20d30:	6461      	str	r1, [r4, #68]	; 0x44
   20d32:	4620      	mov	r0, r4
   20d34:	468b      	mov	fp, r1
   20d36:	f001 f955 	bl	21fe4 <_Balloc>
   20d3a:	f04f 33ff 	mov.w	r3, #4294967295
   20d3e:	9308      	str	r3, [sp, #32]
   20d40:	930d      	str	r3, [sp, #52]	; 0x34
   20d42:	2301      	movs	r3, #1
   20d44:	9007      	str	r0, [sp, #28]
   20d46:	6420      	str	r0, [r4, #64]	; 0x40
   20d48:	f8cd b008 	str.w	fp, [sp, #8]
   20d4c:	9309      	str	r3, [sp, #36]	; 0x24
   20d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20d50:	2b00      	cmp	r3, #0
   20d52:	f2c0 80d0 	blt.w	20ef6 <_dtoa_r+0x3be>
   20d56:	9a04      	ldr	r2, [sp, #16]
   20d58:	2a0e      	cmp	r2, #14
   20d5a:	f300 80cc 	bgt.w	20ef6 <_dtoa_r+0x3be>
   20d5e:	4b2b      	ldr	r3, [pc, #172]	; (20e0c <_dtoa_r+0x2d4>)
   20d60:	f1bb 0f00 	cmp.w	fp, #0
   20d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20d68:	e9d3 8900 	ldrd	r8, r9, [r3]
   20d6c:	f2c0 83be 	blt.w	214ec <_dtoa_r+0x9b4>
   20d70:	e9dd 6700 	ldrd	r6, r7, [sp]
   20d74:	4642      	mov	r2, r8
   20d76:	464b      	mov	r3, r9
   20d78:	4630      	mov	r0, r6
   20d7a:	4639      	mov	r1, r7
   20d7c:	f7fb fa30 	bl	1c1e0 <__aeabi_ddiv>
   20d80:	f7fb fb9e 	bl	1c4c0 <__aeabi_d2iz>
   20d84:	4683      	mov	fp, r0
   20d86:	f7fb f89b 	bl	1bec0 <__aeabi_i2d>
   20d8a:	4642      	mov	r2, r8
   20d8c:	464b      	mov	r3, r9
   20d8e:	f7fb f8fd 	bl	1bf8c <__aeabi_dmul>
   20d92:	460b      	mov	r3, r1
   20d94:	4602      	mov	r2, r0
   20d96:	4639      	mov	r1, r7
   20d98:	4630      	mov	r0, r6
   20d9a:	f7fa ff43 	bl	1bc24 <__aeabi_dsub>
   20d9e:	9d07      	ldr	r5, [sp, #28]
   20da0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   20da4:	702b      	strb	r3, [r5, #0]
   20da6:	9b08      	ldr	r3, [sp, #32]
   20da8:	2b01      	cmp	r3, #1
   20daa:	4606      	mov	r6, r0
   20dac:	460f      	mov	r7, r1
   20dae:	f105 0501 	add.w	r5, r5, #1
   20db2:	d061      	beq.n	20e78 <_dtoa_r+0x340>
   20db4:	2200      	movs	r2, #0
   20db6:	4b17      	ldr	r3, [pc, #92]	; (20e14 <_dtoa_r+0x2dc>)
   20db8:	f7fb f8e8 	bl	1bf8c <__aeabi_dmul>
   20dbc:	2200      	movs	r2, #0
   20dbe:	2300      	movs	r3, #0
   20dc0:	4606      	mov	r6, r0
   20dc2:	460f      	mov	r7, r1
   20dc4:	f7fb fb4a 	bl	1c45c <__aeabi_dcmpeq>
   20dc8:	2800      	cmp	r0, #0
   20dca:	f040 8081 	bne.w	20ed0 <_dtoa_r+0x398>
   20dce:	f8cd a000 	str.w	sl, [sp]
   20dd2:	9402      	str	r4, [sp, #8]
   20dd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20dd8:	9c08      	ldr	r4, [sp, #32]
   20dda:	e028      	b.n	20e2e <_dtoa_r+0x2f6>
   20ddc:	f3af 8000 	nop.w
   20de0:	636f4361 	.word	0x636f4361
   20de4:	3fd287a7 	.word	0x3fd287a7
   20de8:	8b60c8b3 	.word	0x8b60c8b3
   20dec:	3fc68a28 	.word	0x3fc68a28
   20df0:	509f79fb 	.word	0x509f79fb
   20df4:	3fd34413 	.word	0x3fd34413
   20df8:	7ff00000 	.word	0x7ff00000
   20dfc:	000250b9 	.word	0x000250b9
   20e00:	000251e0 	.word	0x000251e0
   20e04:	000251ec 	.word	0x000251ec
   20e08:	3ff80000 	.word	0x3ff80000
   20e0c:	00025218 	.word	0x00025218
   20e10:	000250b8 	.word	0x000250b8
   20e14:	40240000 	.word	0x40240000
   20e18:	f7fb f8b8 	bl	1bf8c <__aeabi_dmul>
   20e1c:	2200      	movs	r2, #0
   20e1e:	2300      	movs	r3, #0
   20e20:	4606      	mov	r6, r0
   20e22:	460f      	mov	r7, r1
   20e24:	f7fb fb1a 	bl	1c45c <__aeabi_dcmpeq>
   20e28:	2800      	cmp	r0, #0
   20e2a:	f040 83c5 	bne.w	215b8 <_dtoa_r+0xa80>
   20e2e:	4642      	mov	r2, r8
   20e30:	464b      	mov	r3, r9
   20e32:	4630      	mov	r0, r6
   20e34:	4639      	mov	r1, r7
   20e36:	f7fb f9d3 	bl	1c1e0 <__aeabi_ddiv>
   20e3a:	f7fb fb41 	bl	1c4c0 <__aeabi_d2iz>
   20e3e:	4683      	mov	fp, r0
   20e40:	f7fb f83e 	bl	1bec0 <__aeabi_i2d>
   20e44:	4642      	mov	r2, r8
   20e46:	464b      	mov	r3, r9
   20e48:	f7fb f8a0 	bl	1bf8c <__aeabi_dmul>
   20e4c:	4602      	mov	r2, r0
   20e4e:	460b      	mov	r3, r1
   20e50:	4630      	mov	r0, r6
   20e52:	4639      	mov	r1, r7
   20e54:	f7fa fee6 	bl	1bc24 <__aeabi_dsub>
   20e58:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   20e5c:	f805 eb01 	strb.w	lr, [r5], #1
   20e60:	eba5 0e0a 	sub.w	lr, r5, sl
   20e64:	45a6      	cmp	lr, r4
   20e66:	4606      	mov	r6, r0
   20e68:	460f      	mov	r7, r1
   20e6a:	f04f 0200 	mov.w	r2, #0
   20e6e:	4b6e      	ldr	r3, [pc, #440]	; (21028 <_dtoa_r+0x4f0>)
   20e70:	d1d2      	bne.n	20e18 <_dtoa_r+0x2e0>
   20e72:	f8dd a000 	ldr.w	sl, [sp]
   20e76:	9c02      	ldr	r4, [sp, #8]
   20e78:	4632      	mov	r2, r6
   20e7a:	463b      	mov	r3, r7
   20e7c:	4630      	mov	r0, r6
   20e7e:	4639      	mov	r1, r7
   20e80:	f7fa fed2 	bl	1bc28 <__adddf3>
   20e84:	4606      	mov	r6, r0
   20e86:	460f      	mov	r7, r1
   20e88:	4602      	mov	r2, r0
   20e8a:	460b      	mov	r3, r1
   20e8c:	4640      	mov	r0, r8
   20e8e:	4649      	mov	r1, r9
   20e90:	f7fb faee 	bl	1c470 <__aeabi_dcmplt>
   20e94:	b948      	cbnz	r0, 20eaa <_dtoa_r+0x372>
   20e96:	4632      	mov	r2, r6
   20e98:	463b      	mov	r3, r7
   20e9a:	4640      	mov	r0, r8
   20e9c:	4649      	mov	r1, r9
   20e9e:	f7fb fadd 	bl	1c45c <__aeabi_dcmpeq>
   20ea2:	b1a8      	cbz	r0, 20ed0 <_dtoa_r+0x398>
   20ea4:	f01b 0f01 	tst.w	fp, #1
   20ea8:	d012      	beq.n	20ed0 <_dtoa_r+0x398>
   20eaa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   20eae:	9a07      	ldr	r2, [sp, #28]
   20eb0:	1e6b      	subs	r3, r5, #1
   20eb2:	e004      	b.n	20ebe <_dtoa_r+0x386>
   20eb4:	429a      	cmp	r2, r3
   20eb6:	f000 842d 	beq.w	21714 <_dtoa_r+0xbdc>
   20eba:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   20ebe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   20ec2:	f103 0501 	add.w	r5, r3, #1
   20ec6:	d0f5      	beq.n	20eb4 <_dtoa_r+0x37c>
   20ec8:	f108 0801 	add.w	r8, r8, #1
   20ecc:	f883 8000 	strb.w	r8, [r3]
   20ed0:	4651      	mov	r1, sl
   20ed2:	4620      	mov	r0, r4
   20ed4:	f001 f8ac 	bl	22030 <_Bfree>
   20ed8:	2200      	movs	r2, #0
   20eda:	9b04      	ldr	r3, [sp, #16]
   20edc:	702a      	strb	r2, [r5, #0]
   20ede:	9a03      	ldr	r2, [sp, #12]
   20ee0:	3301      	adds	r3, #1
   20ee2:	6013      	str	r3, [r2, #0]
   20ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20ee6:	2b00      	cmp	r3, #0
   20ee8:	f000 83a3 	beq.w	21632 <_dtoa_r+0xafa>
   20eec:	9807      	ldr	r0, [sp, #28]
   20eee:	601d      	str	r5, [r3, #0]
   20ef0:	b017      	add	sp, #92	; 0x5c
   20ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20ef8:	2a00      	cmp	r2, #0
   20efa:	d040      	beq.n	20f7e <_dtoa_r+0x446>
   20efc:	9a02      	ldr	r2, [sp, #8]
   20efe:	2a01      	cmp	r2, #1
   20f00:	f340 831c 	ble.w	2153c <_dtoa_r+0xa04>
   20f04:	9b08      	ldr	r3, [sp, #32]
   20f06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20f08:	1e5f      	subs	r7, r3, #1
   20f0a:	42ba      	cmp	r2, r7
   20f0c:	f2c0 8394 	blt.w	21638 <_dtoa_r+0xb00>
   20f10:	1bd7      	subs	r7, r2, r7
   20f12:	9b08      	ldr	r3, [sp, #32]
   20f14:	2b00      	cmp	r3, #0
   20f16:	f2c0 847e 	blt.w	21816 <_dtoa_r+0xcde>
   20f1a:	9d06      	ldr	r5, [sp, #24]
   20f1c:	9b08      	ldr	r3, [sp, #32]
   20f1e:	9a06      	ldr	r2, [sp, #24]
   20f20:	441a      	add	r2, r3
   20f22:	9206      	str	r2, [sp, #24]
   20f24:	9a05      	ldr	r2, [sp, #20]
   20f26:	2101      	movs	r1, #1
   20f28:	441a      	add	r2, r3
   20f2a:	4620      	mov	r0, r4
   20f2c:	9205      	str	r2, [sp, #20]
   20f2e:	f001 f919 	bl	22164 <__i2b>
   20f32:	4606      	mov	r6, r0
   20f34:	e026      	b.n	20f84 <_dtoa_r+0x44c>
   20f36:	2301      	movs	r3, #1
   20f38:	930c      	str	r3, [sp, #48]	; 0x30
   20f3a:	e6b3      	b.n	20ca4 <_dtoa_r+0x16c>
   20f3c:	9a06      	ldr	r2, [sp, #24]
   20f3e:	9b04      	ldr	r3, [sp, #16]
   20f40:	1ad2      	subs	r2, r2, r3
   20f42:	425b      	negs	r3, r3
   20f44:	930a      	str	r3, [sp, #40]	; 0x28
   20f46:	2300      	movs	r3, #0
   20f48:	9206      	str	r2, [sp, #24]
   20f4a:	930b      	str	r3, [sp, #44]	; 0x2c
   20f4c:	e6bd      	b.n	20cca <_dtoa_r+0x192>
   20f4e:	f1c5 0301 	rsb	r3, r5, #1
   20f52:	9306      	str	r3, [sp, #24]
   20f54:	2300      	movs	r3, #0
   20f56:	9305      	str	r3, [sp, #20]
   20f58:	e6ac      	b.n	20cb4 <_dtoa_r+0x17c>
   20f5a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   20f5e:	4648      	mov	r0, r9
   20f60:	f7fa ffae 	bl	1bec0 <__aeabi_i2d>
   20f64:	4602      	mov	r2, r0
   20f66:	460b      	mov	r3, r1
   20f68:	4630      	mov	r0, r6
   20f6a:	4639      	mov	r1, r7
   20f6c:	f7fb fa76 	bl	1c45c <__aeabi_dcmpeq>
   20f70:	2800      	cmp	r0, #0
   20f72:	f47f ae83 	bne.w	20c7c <_dtoa_r+0x144>
   20f76:	f109 33ff 	add.w	r3, r9, #4294967295
   20f7a:	9304      	str	r3, [sp, #16]
   20f7c:	e67e      	b.n	20c7c <_dtoa_r+0x144>
   20f7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20f80:	9d06      	ldr	r5, [sp, #24]
   20f82:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20f84:	2d00      	cmp	r5, #0
   20f86:	dd0c      	ble.n	20fa2 <_dtoa_r+0x46a>
   20f88:	9905      	ldr	r1, [sp, #20]
   20f8a:	2900      	cmp	r1, #0
   20f8c:	460b      	mov	r3, r1
   20f8e:	dd08      	ble.n	20fa2 <_dtoa_r+0x46a>
   20f90:	42a9      	cmp	r1, r5
   20f92:	9a06      	ldr	r2, [sp, #24]
   20f94:	bfa8      	it	ge
   20f96:	462b      	movge	r3, r5
   20f98:	1ad2      	subs	r2, r2, r3
   20f9a:	1aed      	subs	r5, r5, r3
   20f9c:	1acb      	subs	r3, r1, r3
   20f9e:	9206      	str	r2, [sp, #24]
   20fa0:	9305      	str	r3, [sp, #20]
   20fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20fa4:	b1d3      	cbz	r3, 20fdc <_dtoa_r+0x4a4>
   20fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20fa8:	2b00      	cmp	r3, #0
   20faa:	f000 82c0 	beq.w	2152e <_dtoa_r+0x9f6>
   20fae:	2f00      	cmp	r7, #0
   20fb0:	dd10      	ble.n	20fd4 <_dtoa_r+0x49c>
   20fb2:	4631      	mov	r1, r6
   20fb4:	463a      	mov	r2, r7
   20fb6:	4620      	mov	r0, r4
   20fb8:	f001 f970 	bl	2229c <__pow5mult>
   20fbc:	4652      	mov	r2, sl
   20fbe:	4601      	mov	r1, r0
   20fc0:	4606      	mov	r6, r0
   20fc2:	4620      	mov	r0, r4
   20fc4:	f001 f8d8 	bl	22178 <__multiply>
   20fc8:	4651      	mov	r1, sl
   20fca:	4680      	mov	r8, r0
   20fcc:	4620      	mov	r0, r4
   20fce:	f001 f82f 	bl	22030 <_Bfree>
   20fd2:	46c2      	mov	sl, r8
   20fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20fd6:	1bda      	subs	r2, r3, r7
   20fd8:	f040 82aa 	bne.w	21530 <_dtoa_r+0x9f8>
   20fdc:	2101      	movs	r1, #1
   20fde:	4620      	mov	r0, r4
   20fe0:	f001 f8c0 	bl	22164 <__i2b>
   20fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20fe6:	2b00      	cmp	r3, #0
   20fe8:	4681      	mov	r9, r0
   20fea:	dd1f      	ble.n	2102c <_dtoa_r+0x4f4>
   20fec:	4601      	mov	r1, r0
   20fee:	461a      	mov	r2, r3
   20ff0:	4620      	mov	r0, r4
   20ff2:	f001 f953 	bl	2229c <__pow5mult>
   20ff6:	9b02      	ldr	r3, [sp, #8]
   20ff8:	2b01      	cmp	r3, #1
   20ffa:	4681      	mov	r9, r0
   20ffc:	f340 825b 	ble.w	214b6 <_dtoa_r+0x97e>
   21000:	f04f 0800 	mov.w	r8, #0
   21004:	f8d9 3010 	ldr.w	r3, [r9, #16]
   21008:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   2100c:	6918      	ldr	r0, [r3, #16]
   2100e:	f001 f859 	bl	220c4 <__hi0bits>
   21012:	f1c0 0020 	rsb	r0, r0, #32
   21016:	e013      	b.n	21040 <_dtoa_r+0x508>
   21018:	f1c3 0920 	rsb	r9, r3, #32
   2101c:	9b00      	ldr	r3, [sp, #0]
   2101e:	fa03 f009 	lsl.w	r0, r3, r9
   21022:	e67a      	b.n	20d1a <_dtoa_r+0x1e2>
   21024:	900c      	str	r0, [sp, #48]	; 0x30
   21026:	e63d      	b.n	20ca4 <_dtoa_r+0x16c>
   21028:	40240000 	.word	0x40240000
   2102c:	9b02      	ldr	r3, [sp, #8]
   2102e:	2b01      	cmp	r3, #1
   21030:	f340 828d 	ble.w	2154e <_dtoa_r+0xa16>
   21034:	f04f 0800 	mov.w	r8, #0
   21038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2103a:	2001      	movs	r0, #1
   2103c:	2b00      	cmp	r3, #0
   2103e:	d1e1      	bne.n	21004 <_dtoa_r+0x4cc>
   21040:	9a05      	ldr	r2, [sp, #20]
   21042:	4410      	add	r0, r2
   21044:	f010 001f 	ands.w	r0, r0, #31
   21048:	f000 80a1 	beq.w	2118e <_dtoa_r+0x656>
   2104c:	f1c0 0320 	rsb	r3, r0, #32
   21050:	2b04      	cmp	r3, #4
   21052:	f340 848c 	ble.w	2196e <_dtoa_r+0xe36>
   21056:	9b06      	ldr	r3, [sp, #24]
   21058:	f1c0 001c 	rsb	r0, r0, #28
   2105c:	4403      	add	r3, r0
   2105e:	9306      	str	r3, [sp, #24]
   21060:	4613      	mov	r3, r2
   21062:	4403      	add	r3, r0
   21064:	4405      	add	r5, r0
   21066:	9305      	str	r3, [sp, #20]
   21068:	9b06      	ldr	r3, [sp, #24]
   2106a:	2b00      	cmp	r3, #0
   2106c:	dd05      	ble.n	2107a <_dtoa_r+0x542>
   2106e:	4651      	mov	r1, sl
   21070:	461a      	mov	r2, r3
   21072:	4620      	mov	r0, r4
   21074:	f001 f962 	bl	2233c <__lshift>
   21078:	4682      	mov	sl, r0
   2107a:	9b05      	ldr	r3, [sp, #20]
   2107c:	2b00      	cmp	r3, #0
   2107e:	dd05      	ble.n	2108c <_dtoa_r+0x554>
   21080:	4649      	mov	r1, r9
   21082:	461a      	mov	r2, r3
   21084:	4620      	mov	r0, r4
   21086:	f001 f959 	bl	2233c <__lshift>
   2108a:	4681      	mov	r9, r0
   2108c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2108e:	2b00      	cmp	r3, #0
   21090:	f040 8086 	bne.w	211a0 <_dtoa_r+0x668>
   21094:	9b08      	ldr	r3, [sp, #32]
   21096:	2b00      	cmp	r3, #0
   21098:	f340 8269 	ble.w	2156e <_dtoa_r+0xa36>
   2109c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2109e:	2b00      	cmp	r3, #0
   210a0:	f000 8098 	beq.w	211d4 <_dtoa_r+0x69c>
   210a4:	2d00      	cmp	r5, #0
   210a6:	dd05      	ble.n	210b4 <_dtoa_r+0x57c>
   210a8:	4631      	mov	r1, r6
   210aa:	462a      	mov	r2, r5
   210ac:	4620      	mov	r0, r4
   210ae:	f001 f945 	bl	2233c <__lshift>
   210b2:	4606      	mov	r6, r0
   210b4:	f1b8 0f00 	cmp.w	r8, #0
   210b8:	f040 8336 	bne.w	21728 <_dtoa_r+0xbf0>
   210bc:	46b0      	mov	r8, r6
   210be:	9b08      	ldr	r3, [sp, #32]
   210c0:	9a07      	ldr	r2, [sp, #28]
   210c2:	3b01      	subs	r3, #1
   210c4:	18d3      	adds	r3, r2, r3
   210c6:	9308      	str	r3, [sp, #32]
   210c8:	9b00      	ldr	r3, [sp, #0]
   210ca:	f003 0301 	and.w	r3, r3, #1
   210ce:	9309      	str	r3, [sp, #36]	; 0x24
   210d0:	4617      	mov	r7, r2
   210d2:	4649      	mov	r1, r9
   210d4:	4650      	mov	r0, sl
   210d6:	f7ff fc99 	bl	20a0c <quorem>
   210da:	4631      	mov	r1, r6
   210dc:	4605      	mov	r5, r0
   210de:	4650      	mov	r0, sl
   210e0:	f001 f97e 	bl	223e0 <__mcmp>
   210e4:	4642      	mov	r2, r8
   210e6:	4649      	mov	r1, r9
   210e8:	4683      	mov	fp, r0
   210ea:	4620      	mov	r0, r4
   210ec:	f001 f994 	bl	22418 <__mdiff>
   210f0:	f105 0230 	add.w	r2, r5, #48	; 0x30
   210f4:	9200      	str	r2, [sp, #0]
   210f6:	68c2      	ldr	r2, [r0, #12]
   210f8:	4601      	mov	r1, r0
   210fa:	2a00      	cmp	r2, #0
   210fc:	f040 8232 	bne.w	21564 <_dtoa_r+0xa2c>
   21100:	9006      	str	r0, [sp, #24]
   21102:	4650      	mov	r0, sl
   21104:	f001 f96c 	bl	223e0 <__mcmp>
   21108:	9b06      	ldr	r3, [sp, #24]
   2110a:	9005      	str	r0, [sp, #20]
   2110c:	4619      	mov	r1, r3
   2110e:	4620      	mov	r0, r4
   21110:	f000 ff8e 	bl	22030 <_Bfree>
   21114:	9a05      	ldr	r2, [sp, #20]
   21116:	b932      	cbnz	r2, 21126 <_dtoa_r+0x5ee>
   21118:	9b02      	ldr	r3, [sp, #8]
   2111a:	b923      	cbnz	r3, 21126 <_dtoa_r+0x5ee>
   2111c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2111e:	2b00      	cmp	r3, #0
   21120:	f000 83de 	beq.w	218e0 <_dtoa_r+0xda8>
   21124:	9a02      	ldr	r2, [sp, #8]
   21126:	f1bb 0f00 	cmp.w	fp, #0
   2112a:	f2c0 82a2 	blt.w	21672 <_dtoa_r+0xb3a>
   2112e:	d105      	bne.n	2113c <_dtoa_r+0x604>
   21130:	9b02      	ldr	r3, [sp, #8]
   21132:	b91b      	cbnz	r3, 2113c <_dtoa_r+0x604>
   21134:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21136:	2b00      	cmp	r3, #0
   21138:	f000 829b 	beq.w	21672 <_dtoa_r+0xb3a>
   2113c:	2a00      	cmp	r2, #0
   2113e:	f300 8307 	bgt.w	21750 <_dtoa_r+0xc18>
   21142:	f89d 3000 	ldrb.w	r3, [sp]
   21146:	703b      	strb	r3, [r7, #0]
   21148:	9b08      	ldr	r3, [sp, #32]
   2114a:	f107 0b01 	add.w	fp, r7, #1
   2114e:	429f      	cmp	r7, r3
   21150:	465d      	mov	r5, fp
   21152:	f000 8308 	beq.w	21766 <_dtoa_r+0xc2e>
   21156:	4651      	mov	r1, sl
   21158:	2300      	movs	r3, #0
   2115a:	220a      	movs	r2, #10
   2115c:	4620      	mov	r0, r4
   2115e:	f000 ff71 	bl	22044 <__multadd>
   21162:	4546      	cmp	r6, r8
   21164:	4682      	mov	sl, r0
   21166:	4631      	mov	r1, r6
   21168:	f04f 0300 	mov.w	r3, #0
   2116c:	f04f 020a 	mov.w	r2, #10
   21170:	4620      	mov	r0, r4
   21172:	f000 81f1 	beq.w	21558 <_dtoa_r+0xa20>
   21176:	f000 ff65 	bl	22044 <__multadd>
   2117a:	4641      	mov	r1, r8
   2117c:	4606      	mov	r6, r0
   2117e:	2300      	movs	r3, #0
   21180:	220a      	movs	r2, #10
   21182:	4620      	mov	r0, r4
   21184:	f000 ff5e 	bl	22044 <__multadd>
   21188:	465f      	mov	r7, fp
   2118a:	4680      	mov	r8, r0
   2118c:	e7a1      	b.n	210d2 <_dtoa_r+0x59a>
   2118e:	201c      	movs	r0, #28
   21190:	9b06      	ldr	r3, [sp, #24]
   21192:	4403      	add	r3, r0
   21194:	9306      	str	r3, [sp, #24]
   21196:	9b05      	ldr	r3, [sp, #20]
   21198:	4403      	add	r3, r0
   2119a:	4405      	add	r5, r0
   2119c:	9305      	str	r3, [sp, #20]
   2119e:	e763      	b.n	21068 <_dtoa_r+0x530>
   211a0:	4649      	mov	r1, r9
   211a2:	4650      	mov	r0, sl
   211a4:	f001 f91c 	bl	223e0 <__mcmp>
   211a8:	2800      	cmp	r0, #0
   211aa:	f6bf af73 	bge.w	21094 <_dtoa_r+0x55c>
   211ae:	9f04      	ldr	r7, [sp, #16]
   211b0:	4651      	mov	r1, sl
   211b2:	2300      	movs	r3, #0
   211b4:	220a      	movs	r2, #10
   211b6:	4620      	mov	r0, r4
   211b8:	3f01      	subs	r7, #1
   211ba:	9704      	str	r7, [sp, #16]
   211bc:	f000 ff42 	bl	22044 <__multadd>
   211c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   211c2:	4682      	mov	sl, r0
   211c4:	2b00      	cmp	r3, #0
   211c6:	f040 83a7 	bne.w	21918 <_dtoa_r+0xde0>
   211ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   211cc:	2b00      	cmp	r3, #0
   211ce:	f340 83b0 	ble.w	21932 <_dtoa_r+0xdfa>
   211d2:	9308      	str	r3, [sp, #32]
   211d4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   211d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   211dc:	465d      	mov	r5, fp
   211de:	e002      	b.n	211e6 <_dtoa_r+0x6ae>
   211e0:	f000 ff30 	bl	22044 <__multadd>
   211e4:	4682      	mov	sl, r0
   211e6:	4649      	mov	r1, r9
   211e8:	4650      	mov	r0, sl
   211ea:	f7ff fc0f 	bl	20a0c <quorem>
   211ee:	f100 0730 	add.w	r7, r0, #48	; 0x30
   211f2:	f805 7b01 	strb.w	r7, [r5], #1
   211f6:	eba5 030b 	sub.w	r3, r5, fp
   211fa:	4543      	cmp	r3, r8
   211fc:	f04f 020a 	mov.w	r2, #10
   21200:	f04f 0300 	mov.w	r3, #0
   21204:	4651      	mov	r1, sl
   21206:	4620      	mov	r0, r4
   21208:	dbea      	blt.n	211e0 <_dtoa_r+0x6a8>
   2120a:	9b07      	ldr	r3, [sp, #28]
   2120c:	9a08      	ldr	r2, [sp, #32]
   2120e:	9700      	str	r7, [sp, #0]
   21210:	2a01      	cmp	r2, #1
   21212:	bfac      	ite	ge
   21214:	189b      	addge	r3, r3, r2
   21216:	3301      	addlt	r3, #1
   21218:	461d      	mov	r5, r3
   2121a:	f04f 0b00 	mov.w	fp, #0
   2121e:	4651      	mov	r1, sl
   21220:	2201      	movs	r2, #1
   21222:	4620      	mov	r0, r4
   21224:	f001 f88a 	bl	2233c <__lshift>
   21228:	4649      	mov	r1, r9
   2122a:	4682      	mov	sl, r0
   2122c:	f001 f8d8 	bl	223e0 <__mcmp>
   21230:	2800      	cmp	r0, #0
   21232:	f340 823a 	ble.w	216aa <_dtoa_r+0xb72>
   21236:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2123a:	9907      	ldr	r1, [sp, #28]
   2123c:	1e6b      	subs	r3, r5, #1
   2123e:	e004      	b.n	2124a <_dtoa_r+0x712>
   21240:	428b      	cmp	r3, r1
   21242:	f000 81af 	beq.w	215a4 <_dtoa_r+0xa6c>
   21246:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2124a:	2a39      	cmp	r2, #57	; 0x39
   2124c:	f103 0501 	add.w	r5, r3, #1
   21250:	d0f6      	beq.n	21240 <_dtoa_r+0x708>
   21252:	3201      	adds	r2, #1
   21254:	701a      	strb	r2, [r3, #0]
   21256:	4649      	mov	r1, r9
   21258:	4620      	mov	r0, r4
   2125a:	f000 fee9 	bl	22030 <_Bfree>
   2125e:	2e00      	cmp	r6, #0
   21260:	f43f ae36 	beq.w	20ed0 <_dtoa_r+0x398>
   21264:	f1bb 0f00 	cmp.w	fp, #0
   21268:	d005      	beq.n	21276 <_dtoa_r+0x73e>
   2126a:	45b3      	cmp	fp, r6
   2126c:	d003      	beq.n	21276 <_dtoa_r+0x73e>
   2126e:	4659      	mov	r1, fp
   21270:	4620      	mov	r0, r4
   21272:	f000 fedd 	bl	22030 <_Bfree>
   21276:	4631      	mov	r1, r6
   21278:	4620      	mov	r0, r4
   2127a:	f000 fed9 	bl	22030 <_Bfree>
   2127e:	e627      	b.n	20ed0 <_dtoa_r+0x398>
   21280:	2300      	movs	r3, #0
   21282:	9309      	str	r3, [sp, #36]	; 0x24
   21284:	9b04      	ldr	r3, [sp, #16]
   21286:	445b      	add	r3, fp
   21288:	930d      	str	r3, [sp, #52]	; 0x34
   2128a:	3301      	adds	r3, #1
   2128c:	2b01      	cmp	r3, #1
   2128e:	461e      	mov	r6, r3
   21290:	461d      	mov	r5, r3
   21292:	9308      	str	r3, [sp, #32]
   21294:	bfb8      	it	lt
   21296:	2601      	movlt	r6, #1
   21298:	2100      	movs	r1, #0
   2129a:	2e17      	cmp	r6, #23
   2129c:	6461      	str	r1, [r4, #68]	; 0x44
   2129e:	d90a      	bls.n	212b6 <_dtoa_r+0x77e>
   212a0:	2201      	movs	r2, #1
   212a2:	2304      	movs	r3, #4
   212a4:	005b      	lsls	r3, r3, #1
   212a6:	f103 0014 	add.w	r0, r3, #20
   212aa:	4286      	cmp	r6, r0
   212ac:	4611      	mov	r1, r2
   212ae:	f102 0201 	add.w	r2, r2, #1
   212b2:	d2f7      	bcs.n	212a4 <_dtoa_r+0x76c>
   212b4:	6461      	str	r1, [r4, #68]	; 0x44
   212b6:	4620      	mov	r0, r4
   212b8:	f000 fe94 	bl	21fe4 <_Balloc>
   212bc:	2d0e      	cmp	r5, #14
   212be:	9007      	str	r0, [sp, #28]
   212c0:	6420      	str	r0, [r4, #64]	; 0x40
   212c2:	f63f ad44 	bhi.w	20d4e <_dtoa_r+0x216>
   212c6:	2f00      	cmp	r7, #0
   212c8:	f43f ad41 	beq.w	20d4e <_dtoa_r+0x216>
   212cc:	9904      	ldr	r1, [sp, #16]
   212ce:	2900      	cmp	r1, #0
   212d0:	ed9d 7b00 	vldr	d7, [sp]
   212d4:	f340 81f6 	ble.w	216c4 <_dtoa_r+0xb8c>
   212d8:	4bb9      	ldr	r3, [pc, #740]	; (215c0 <_dtoa_r+0xa88>)
   212da:	f001 020f 	and.w	r2, r1, #15
   212de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   212e2:	110d      	asrs	r5, r1, #4
   212e4:	e9d3 6700 	ldrd	r6, r7, [r3]
   212e8:	06eb      	lsls	r3, r5, #27
   212ea:	f140 81ad 	bpl.w	21648 <_dtoa_r+0xb10>
   212ee:	4bb5      	ldr	r3, [pc, #724]	; (215c4 <_dtoa_r+0xa8c>)
   212f0:	ec51 0b17 	vmov	r0, r1, d7
   212f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   212f8:	f7fa ff72 	bl	1c1e0 <__aeabi_ddiv>
   212fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   21300:	f005 050f 	and.w	r5, r5, #15
   21304:	f04f 0903 	mov.w	r9, #3
   21308:	b18d      	cbz	r5, 2132e <_dtoa_r+0x7f6>
   2130a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 215c4 <_dtoa_r+0xa8c>
   2130e:	07e8      	lsls	r0, r5, #31
   21310:	d509      	bpl.n	21326 <_dtoa_r+0x7ee>
   21312:	4630      	mov	r0, r6
   21314:	4639      	mov	r1, r7
   21316:	e9d8 2300 	ldrd	r2, r3, [r8]
   2131a:	f7fa fe37 	bl	1bf8c <__aeabi_dmul>
   2131e:	f109 0901 	add.w	r9, r9, #1
   21322:	4606      	mov	r6, r0
   21324:	460f      	mov	r7, r1
   21326:	106d      	asrs	r5, r5, #1
   21328:	f108 0808 	add.w	r8, r8, #8
   2132c:	d1ef      	bne.n	2130e <_dtoa_r+0x7d6>
   2132e:	463b      	mov	r3, r7
   21330:	4632      	mov	r2, r6
   21332:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21336:	f7fa ff53 	bl	1c1e0 <__aeabi_ddiv>
   2133a:	4607      	mov	r7, r0
   2133c:	4688      	mov	r8, r1
   2133e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21340:	b143      	cbz	r3, 21354 <_dtoa_r+0x81c>
   21342:	2200      	movs	r2, #0
   21344:	4ba0      	ldr	r3, [pc, #640]	; (215c8 <_dtoa_r+0xa90>)
   21346:	4638      	mov	r0, r7
   21348:	4641      	mov	r1, r8
   2134a:	f7fb f891 	bl	1c470 <__aeabi_dcmplt>
   2134e:	2800      	cmp	r0, #0
   21350:	f040 8273 	bne.w	2183a <_dtoa_r+0xd02>
   21354:	4648      	mov	r0, r9
   21356:	f7fa fdb3 	bl	1bec0 <__aeabi_i2d>
   2135a:	463a      	mov	r2, r7
   2135c:	4643      	mov	r3, r8
   2135e:	f7fa fe15 	bl	1bf8c <__aeabi_dmul>
   21362:	4b9a      	ldr	r3, [pc, #616]	; (215cc <_dtoa_r+0xa94>)
   21364:	2200      	movs	r2, #0
   21366:	f7fa fc5f 	bl	1bc28 <__adddf3>
   2136a:	9b08      	ldr	r3, [sp, #32]
   2136c:	4605      	mov	r5, r0
   2136e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21372:	2b00      	cmp	r3, #0
   21374:	f000 8140 	beq.w	215f8 <_dtoa_r+0xac0>
   21378:	9b04      	ldr	r3, [sp, #16]
   2137a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2137e:	9311      	str	r3, [sp, #68]	; 0x44
   21380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21382:	2b00      	cmp	r3, #0
   21384:	f000 81f6 	beq.w	21774 <_dtoa_r+0xc3c>
   21388:	4b8d      	ldr	r3, [pc, #564]	; (215c0 <_dtoa_r+0xa88>)
   2138a:	4991      	ldr	r1, [pc, #580]	; (215d0 <_dtoa_r+0xa98>)
   2138c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   21390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   21394:	2000      	movs	r0, #0
   21396:	f7fa ff23 	bl	1c1e0 <__aeabi_ddiv>
   2139a:	462a      	mov	r2, r5
   2139c:	4633      	mov	r3, r6
   2139e:	f7fa fc41 	bl	1bc24 <__aeabi_dsub>
   213a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   213a6:	4641      	mov	r1, r8
   213a8:	4638      	mov	r0, r7
   213aa:	f7fb f889 	bl	1c4c0 <__aeabi_d2iz>
   213ae:	4605      	mov	r5, r0
   213b0:	f7fa fd86 	bl	1bec0 <__aeabi_i2d>
   213b4:	4602      	mov	r2, r0
   213b6:	460b      	mov	r3, r1
   213b8:	4638      	mov	r0, r7
   213ba:	4641      	mov	r1, r8
   213bc:	f7fa fc32 	bl	1bc24 <__aeabi_dsub>
   213c0:	3530      	adds	r5, #48	; 0x30
   213c2:	fa5f f885 	uxtb.w	r8, r5
   213c6:	9d07      	ldr	r5, [sp, #28]
   213c8:	4606      	mov	r6, r0
   213ca:	460f      	mov	r7, r1
   213cc:	f885 8000 	strb.w	r8, [r5]
   213d0:	4602      	mov	r2, r0
   213d2:	460b      	mov	r3, r1
   213d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   213d8:	3501      	adds	r5, #1
   213da:	f7fb f867 	bl	1c4ac <__aeabi_dcmpgt>
   213de:	2800      	cmp	r0, #0
   213e0:	d156      	bne.n	21490 <_dtoa_r+0x958>
   213e2:	4632      	mov	r2, r6
   213e4:	463b      	mov	r3, r7
   213e6:	2000      	movs	r0, #0
   213e8:	4977      	ldr	r1, [pc, #476]	; (215c8 <_dtoa_r+0xa90>)
   213ea:	f7fa fc1b 	bl	1bc24 <__aeabi_dsub>
   213ee:	4602      	mov	r2, r0
   213f0:	460b      	mov	r3, r1
   213f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   213f6:	f7fb f859 	bl	1c4ac <__aeabi_dcmpgt>
   213fa:	2800      	cmp	r0, #0
   213fc:	f040 8262 	bne.w	218c4 <_dtoa_r+0xd8c>
   21400:	f1b9 0f01 	cmp.w	r9, #1
   21404:	f43f aca3 	beq.w	20d4e <_dtoa_r+0x216>
   21408:	9b07      	ldr	r3, [sp, #28]
   2140a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   2140e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   21412:	4499      	add	r9, r3
   21414:	46a0      	mov	r8, r4
   21416:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   2141a:	e00d      	b.n	21438 <_dtoa_r+0x900>
   2141c:	2000      	movs	r0, #0
   2141e:	496a      	ldr	r1, [pc, #424]	; (215c8 <_dtoa_r+0xa90>)
   21420:	f7fa fc00 	bl	1bc24 <__aeabi_dsub>
   21424:	4652      	mov	r2, sl
   21426:	465b      	mov	r3, fp
   21428:	f7fb f822 	bl	1c470 <__aeabi_dcmplt>
   2142c:	2800      	cmp	r0, #0
   2142e:	f040 8244 	bne.w	218ba <_dtoa_r+0xd82>
   21432:	454d      	cmp	r5, r9
   21434:	f000 824a 	beq.w	218cc <_dtoa_r+0xd94>
   21438:	4650      	mov	r0, sl
   2143a:	4659      	mov	r1, fp
   2143c:	2200      	movs	r2, #0
   2143e:	4b65      	ldr	r3, [pc, #404]	; (215d4 <_dtoa_r+0xa9c>)
   21440:	f7fa fda4 	bl	1bf8c <__aeabi_dmul>
   21444:	2200      	movs	r2, #0
   21446:	4b63      	ldr	r3, [pc, #396]	; (215d4 <_dtoa_r+0xa9c>)
   21448:	4682      	mov	sl, r0
   2144a:	468b      	mov	fp, r1
   2144c:	4630      	mov	r0, r6
   2144e:	4639      	mov	r1, r7
   21450:	f7fa fd9c 	bl	1bf8c <__aeabi_dmul>
   21454:	460f      	mov	r7, r1
   21456:	4606      	mov	r6, r0
   21458:	f7fb f832 	bl	1c4c0 <__aeabi_d2iz>
   2145c:	4604      	mov	r4, r0
   2145e:	f7fa fd2f 	bl	1bec0 <__aeabi_i2d>
   21462:	4602      	mov	r2, r0
   21464:	460b      	mov	r3, r1
   21466:	4630      	mov	r0, r6
   21468:	4639      	mov	r1, r7
   2146a:	f7fa fbdb 	bl	1bc24 <__aeabi_dsub>
   2146e:	3430      	adds	r4, #48	; 0x30
   21470:	b2e4      	uxtb	r4, r4
   21472:	4652      	mov	r2, sl
   21474:	465b      	mov	r3, fp
   21476:	f805 4b01 	strb.w	r4, [r5], #1
   2147a:	4606      	mov	r6, r0
   2147c:	460f      	mov	r7, r1
   2147e:	f7fa fff7 	bl	1c470 <__aeabi_dcmplt>
   21482:	4632      	mov	r2, r6
   21484:	463b      	mov	r3, r7
   21486:	2800      	cmp	r0, #0
   21488:	d0c8      	beq.n	2141c <_dtoa_r+0x8e4>
   2148a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2148e:	4644      	mov	r4, r8
   21490:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21492:	9304      	str	r3, [sp, #16]
   21494:	e51c      	b.n	20ed0 <_dtoa_r+0x398>
   21496:	2300      	movs	r3, #0
   21498:	9309      	str	r3, [sp, #36]	; 0x24
   2149a:	f1bb 0f00 	cmp.w	fp, #0
   2149e:	f340 80da 	ble.w	21656 <_dtoa_r+0xb1e>
   214a2:	465e      	mov	r6, fp
   214a4:	465d      	mov	r5, fp
   214a6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   214aa:	f8cd b020 	str.w	fp, [sp, #32]
   214ae:	e6f3      	b.n	21298 <_dtoa_r+0x760>
   214b0:	2301      	movs	r3, #1
   214b2:	9309      	str	r3, [sp, #36]	; 0x24
   214b4:	e7f1      	b.n	2149a <_dtoa_r+0x962>
   214b6:	9b00      	ldr	r3, [sp, #0]
   214b8:	2b00      	cmp	r3, #0
   214ba:	f47f ada1 	bne.w	21000 <_dtoa_r+0x4c8>
   214be:	e9dd 1200 	ldrd	r1, r2, [sp]
   214c2:	f3c2 0313 	ubfx	r3, r2, #0, #20
   214c6:	2b00      	cmp	r3, #0
   214c8:	f47f adb4 	bne.w	21034 <_dtoa_r+0x4fc>
   214cc:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   214d0:	0d3f      	lsrs	r7, r7, #20
   214d2:	053f      	lsls	r7, r7, #20
   214d4:	2f00      	cmp	r7, #0
   214d6:	f000 8200 	beq.w	218da <_dtoa_r+0xda2>
   214da:	9b06      	ldr	r3, [sp, #24]
   214dc:	3301      	adds	r3, #1
   214de:	9306      	str	r3, [sp, #24]
   214e0:	9b05      	ldr	r3, [sp, #20]
   214e2:	3301      	adds	r3, #1
   214e4:	9305      	str	r3, [sp, #20]
   214e6:	f04f 0801 	mov.w	r8, #1
   214ea:	e5a5      	b.n	21038 <_dtoa_r+0x500>
   214ec:	9b08      	ldr	r3, [sp, #32]
   214ee:	2b00      	cmp	r3, #0
   214f0:	f73f ac3e 	bgt.w	20d70 <_dtoa_r+0x238>
   214f4:	f040 8099 	bne.w	2162a <_dtoa_r+0xaf2>
   214f8:	4649      	mov	r1, r9
   214fa:	2200      	movs	r2, #0
   214fc:	4b36      	ldr	r3, [pc, #216]	; (215d8 <_dtoa_r+0xaa0>)
   214fe:	4640      	mov	r0, r8
   21500:	f7fa fd44 	bl	1bf8c <__aeabi_dmul>
   21504:	e9dd 2300 	ldrd	r2, r3, [sp]
   21508:	f7fa ffc6 	bl	1c498 <__aeabi_dcmpge>
   2150c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21510:	464e      	mov	r6, r9
   21512:	2800      	cmp	r0, #0
   21514:	d03e      	beq.n	21594 <_dtoa_r+0xa5c>
   21516:	ea6f 030b 	mvn.w	r3, fp
   2151a:	9d07      	ldr	r5, [sp, #28]
   2151c:	9304      	str	r3, [sp, #16]
   2151e:	4649      	mov	r1, r9
   21520:	4620      	mov	r0, r4
   21522:	f000 fd85 	bl	22030 <_Bfree>
   21526:	2e00      	cmp	r6, #0
   21528:	f43f acd2 	beq.w	20ed0 <_dtoa_r+0x398>
   2152c:	e6a3      	b.n	21276 <_dtoa_r+0x73e>
   2152e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21530:	4651      	mov	r1, sl
   21532:	4620      	mov	r0, r4
   21534:	f000 feb2 	bl	2229c <__pow5mult>
   21538:	4682      	mov	sl, r0
   2153a:	e54f      	b.n	20fdc <_dtoa_r+0x4a4>
   2153c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2153e:	2a00      	cmp	r2, #0
   21540:	f000 816f 	beq.w	21822 <_dtoa_r+0xcea>
   21544:	f203 4333 	addw	r3, r3, #1075	; 0x433
   21548:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2154a:	9d06      	ldr	r5, [sp, #24]
   2154c:	e4e7      	b.n	20f1e <_dtoa_r+0x3e6>
   2154e:	9b00      	ldr	r3, [sp, #0]
   21550:	2b00      	cmp	r3, #0
   21552:	f47f ad6f 	bne.w	21034 <_dtoa_r+0x4fc>
   21556:	e7b2      	b.n	214be <_dtoa_r+0x986>
   21558:	f000 fd74 	bl	22044 <__multadd>
   2155c:	465f      	mov	r7, fp
   2155e:	4606      	mov	r6, r0
   21560:	4680      	mov	r8, r0
   21562:	e5b6      	b.n	210d2 <_dtoa_r+0x59a>
   21564:	4620      	mov	r0, r4
   21566:	f000 fd63 	bl	22030 <_Bfree>
   2156a:	2201      	movs	r2, #1
   2156c:	e5db      	b.n	21126 <_dtoa_r+0x5ee>
   2156e:	9b02      	ldr	r3, [sp, #8]
   21570:	2b02      	cmp	r3, #2
   21572:	f77f ad93 	ble.w	2109c <_dtoa_r+0x564>
   21576:	9b08      	ldr	r3, [sp, #32]
   21578:	2b00      	cmp	r3, #0
   2157a:	d1cc      	bne.n	21516 <_dtoa_r+0x9de>
   2157c:	4649      	mov	r1, r9
   2157e:	2205      	movs	r2, #5
   21580:	4620      	mov	r0, r4
   21582:	f000 fd5f 	bl	22044 <__multadd>
   21586:	4601      	mov	r1, r0
   21588:	4681      	mov	r9, r0
   2158a:	4650      	mov	r0, sl
   2158c:	f000 ff28 	bl	223e0 <__mcmp>
   21590:	2800      	cmp	r0, #0
   21592:	ddc0      	ble.n	21516 <_dtoa_r+0x9de>
   21594:	9a04      	ldr	r2, [sp, #16]
   21596:	9907      	ldr	r1, [sp, #28]
   21598:	2331      	movs	r3, #49	; 0x31
   2159a:	3201      	adds	r2, #1
   2159c:	9204      	str	r2, [sp, #16]
   2159e:	700b      	strb	r3, [r1, #0]
   215a0:	1c4d      	adds	r5, r1, #1
   215a2:	e7bc      	b.n	2151e <_dtoa_r+0x9e6>
   215a4:	9a04      	ldr	r2, [sp, #16]
   215a6:	3201      	adds	r2, #1
   215a8:	9204      	str	r2, [sp, #16]
   215aa:	9a07      	ldr	r2, [sp, #28]
   215ac:	2331      	movs	r3, #49	; 0x31
   215ae:	7013      	strb	r3, [r2, #0]
   215b0:	e651      	b.n	21256 <_dtoa_r+0x71e>
   215b2:	2301      	movs	r3, #1
   215b4:	9309      	str	r3, [sp, #36]	; 0x24
   215b6:	e665      	b.n	21284 <_dtoa_r+0x74c>
   215b8:	f8dd a000 	ldr.w	sl, [sp]
   215bc:	9c02      	ldr	r4, [sp, #8]
   215be:	e487      	b.n	20ed0 <_dtoa_r+0x398>
   215c0:	00025218 	.word	0x00025218
   215c4:	000251f0 	.word	0x000251f0
   215c8:	3ff00000 	.word	0x3ff00000
   215cc:	401c0000 	.word	0x401c0000
   215d0:	3fe00000 	.word	0x3fe00000
   215d4:	40240000 	.word	0x40240000
   215d8:	40140000 	.word	0x40140000
   215dc:	4648      	mov	r0, r9
   215de:	f7fa fc6f 	bl	1bec0 <__aeabi_i2d>
   215e2:	463a      	mov	r2, r7
   215e4:	4643      	mov	r3, r8
   215e6:	f7fa fcd1 	bl	1bf8c <__aeabi_dmul>
   215ea:	2200      	movs	r2, #0
   215ec:	4bc4      	ldr	r3, [pc, #784]	; (21900 <_dtoa_r+0xdc8>)
   215ee:	f7fa fb1b 	bl	1bc28 <__adddf3>
   215f2:	4605      	mov	r5, r0
   215f4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   215f8:	4641      	mov	r1, r8
   215fa:	2200      	movs	r2, #0
   215fc:	4bc1      	ldr	r3, [pc, #772]	; (21904 <_dtoa_r+0xdcc>)
   215fe:	4638      	mov	r0, r7
   21600:	f7fa fb10 	bl	1bc24 <__aeabi_dsub>
   21604:	462a      	mov	r2, r5
   21606:	4633      	mov	r3, r6
   21608:	4680      	mov	r8, r0
   2160a:	4689      	mov	r9, r1
   2160c:	f7fa ff4e 	bl	1c4ac <__aeabi_dcmpgt>
   21610:	2800      	cmp	r0, #0
   21612:	f040 80ab 	bne.w	2176c <_dtoa_r+0xc34>
   21616:	462a      	mov	r2, r5
   21618:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2161c:	4640      	mov	r0, r8
   2161e:	4649      	mov	r1, r9
   21620:	f7fa ff26 	bl	1c470 <__aeabi_dcmplt>
   21624:	2800      	cmp	r0, #0
   21626:	f43f ab92 	beq.w	20d4e <_dtoa_r+0x216>
   2162a:	f04f 0900 	mov.w	r9, #0
   2162e:	464e      	mov	r6, r9
   21630:	e771      	b.n	21516 <_dtoa_r+0x9de>
   21632:	9807      	ldr	r0, [sp, #28]
   21634:	f7ff bab8 	b.w	20ba8 <_dtoa_r+0x70>
   21638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2163a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2163c:	970a      	str	r7, [sp, #40]	; 0x28
   2163e:	1afb      	subs	r3, r7, r3
   21640:	441a      	add	r2, r3
   21642:	920b      	str	r2, [sp, #44]	; 0x2c
   21644:	2700      	movs	r7, #0
   21646:	e464      	b.n	20f12 <_dtoa_r+0x3da>
   21648:	ed9d 7b00 	vldr	d7, [sp]
   2164c:	f04f 0902 	mov.w	r9, #2
   21650:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   21654:	e658      	b.n	21308 <_dtoa_r+0x7d0>
   21656:	2100      	movs	r1, #0
   21658:	6461      	str	r1, [r4, #68]	; 0x44
   2165a:	4620      	mov	r0, r4
   2165c:	f000 fcc2 	bl	21fe4 <_Balloc>
   21660:	f04f 0b01 	mov.w	fp, #1
   21664:	9007      	str	r0, [sp, #28]
   21666:	6420      	str	r0, [r4, #64]	; 0x40
   21668:	f8cd b020 	str.w	fp, [sp, #32]
   2166c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   21670:	e629      	b.n	212c6 <_dtoa_r+0x78e>
   21672:	2a00      	cmp	r2, #0
   21674:	dd12      	ble.n	2169c <_dtoa_r+0xb64>
   21676:	4651      	mov	r1, sl
   21678:	2201      	movs	r2, #1
   2167a:	4620      	mov	r0, r4
   2167c:	f000 fe5e 	bl	2233c <__lshift>
   21680:	4649      	mov	r1, r9
   21682:	4682      	mov	sl, r0
   21684:	f000 feac 	bl	223e0 <__mcmp>
   21688:	2800      	cmp	r0, #0
   2168a:	f340 8131 	ble.w	218f0 <_dtoa_r+0xdb8>
   2168e:	9b00      	ldr	r3, [sp, #0]
   21690:	2b39      	cmp	r3, #57	; 0x39
   21692:	f000 80f7 	beq.w	21884 <_dtoa_r+0xd4c>
   21696:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2169a:	9300      	str	r3, [sp, #0]
   2169c:	f89d 3000 	ldrb.w	r3, [sp]
   216a0:	703b      	strb	r3, [r7, #0]
   216a2:	46b3      	mov	fp, r6
   216a4:	1c7d      	adds	r5, r7, #1
   216a6:	4646      	mov	r6, r8
   216a8:	e5d5      	b.n	21256 <_dtoa_r+0x71e>
   216aa:	d104      	bne.n	216b6 <_dtoa_r+0xb7e>
   216ac:	9b00      	ldr	r3, [sp, #0]
   216ae:	07db      	lsls	r3, r3, #31
   216b0:	d501      	bpl.n	216b6 <_dtoa_r+0xb7e>
   216b2:	e5c0      	b.n	21236 <_dtoa_r+0x6fe>
   216b4:	4615      	mov	r5, r2
   216b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   216ba:	2b30      	cmp	r3, #48	; 0x30
   216bc:	f105 32ff 	add.w	r2, r5, #4294967295
   216c0:	d0f8      	beq.n	216b4 <_dtoa_r+0xb7c>
   216c2:	e5c8      	b.n	21256 <_dtoa_r+0x71e>
   216c4:	f000 80b4 	beq.w	21830 <_dtoa_r+0xcf8>
   216c8:	9b04      	ldr	r3, [sp, #16]
   216ca:	425d      	negs	r5, r3
   216cc:	4b8e      	ldr	r3, [pc, #568]	; (21908 <_dtoa_r+0xdd0>)
   216ce:	f005 020f 	and.w	r2, r5, #15
   216d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   216d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   216da:	e9dd 0100 	ldrd	r0, r1, [sp]
   216de:	f7fa fc55 	bl	1bf8c <__aeabi_dmul>
   216e2:	112d      	asrs	r5, r5, #4
   216e4:	4607      	mov	r7, r0
   216e6:	4688      	mov	r8, r1
   216e8:	f000 8128 	beq.w	2193c <_dtoa_r+0xe04>
   216ec:	4e87      	ldr	r6, [pc, #540]	; (2190c <_dtoa_r+0xdd4>)
   216ee:	f04f 0902 	mov.w	r9, #2
   216f2:	07e9      	lsls	r1, r5, #31
   216f4:	d509      	bpl.n	2170a <_dtoa_r+0xbd2>
   216f6:	4638      	mov	r0, r7
   216f8:	4641      	mov	r1, r8
   216fa:	e9d6 2300 	ldrd	r2, r3, [r6]
   216fe:	f7fa fc45 	bl	1bf8c <__aeabi_dmul>
   21702:	f109 0901 	add.w	r9, r9, #1
   21706:	4607      	mov	r7, r0
   21708:	4688      	mov	r8, r1
   2170a:	106d      	asrs	r5, r5, #1
   2170c:	f106 0608 	add.w	r6, r6, #8
   21710:	d1ef      	bne.n	216f2 <_dtoa_r+0xbba>
   21712:	e614      	b.n	2133e <_dtoa_r+0x806>
   21714:	9907      	ldr	r1, [sp, #28]
   21716:	2230      	movs	r2, #48	; 0x30
   21718:	700a      	strb	r2, [r1, #0]
   2171a:	9a04      	ldr	r2, [sp, #16]
   2171c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21720:	3201      	adds	r2, #1
   21722:	9204      	str	r2, [sp, #16]
   21724:	f7ff bbd0 	b.w	20ec8 <_dtoa_r+0x390>
   21728:	6871      	ldr	r1, [r6, #4]
   2172a:	4620      	mov	r0, r4
   2172c:	f000 fc5a 	bl	21fe4 <_Balloc>
   21730:	6933      	ldr	r3, [r6, #16]
   21732:	3302      	adds	r3, #2
   21734:	009a      	lsls	r2, r3, #2
   21736:	4605      	mov	r5, r0
   21738:	f106 010c 	add.w	r1, r6, #12
   2173c:	300c      	adds	r0, #12
   2173e:	f7fc ffdf 	bl	1e700 <memcpy>
   21742:	4629      	mov	r1, r5
   21744:	2201      	movs	r2, #1
   21746:	4620      	mov	r0, r4
   21748:	f000 fdf8 	bl	2233c <__lshift>
   2174c:	4680      	mov	r8, r0
   2174e:	e4b6      	b.n	210be <_dtoa_r+0x586>
   21750:	9b00      	ldr	r3, [sp, #0]
   21752:	2b39      	cmp	r3, #57	; 0x39
   21754:	f000 8096 	beq.w	21884 <_dtoa_r+0xd4c>
   21758:	9b00      	ldr	r3, [sp, #0]
   2175a:	3301      	adds	r3, #1
   2175c:	46b3      	mov	fp, r6
   2175e:	703b      	strb	r3, [r7, #0]
   21760:	1c7d      	adds	r5, r7, #1
   21762:	4646      	mov	r6, r8
   21764:	e577      	b.n	21256 <_dtoa_r+0x71e>
   21766:	46b3      	mov	fp, r6
   21768:	4646      	mov	r6, r8
   2176a:	e558      	b.n	2121e <_dtoa_r+0x6e6>
   2176c:	f04f 0900 	mov.w	r9, #0
   21770:	464e      	mov	r6, r9
   21772:	e70f      	b.n	21594 <_dtoa_r+0xa5c>
   21774:	4964      	ldr	r1, [pc, #400]	; (21908 <_dtoa_r+0xdd0>)
   21776:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2177a:	462a      	mov	r2, r5
   2177c:	4633      	mov	r3, r6
   2177e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21782:	f7fa fc03 	bl	1bf8c <__aeabi_dmul>
   21786:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2178a:	4638      	mov	r0, r7
   2178c:	4641      	mov	r1, r8
   2178e:	f7fa fe97 	bl	1c4c0 <__aeabi_d2iz>
   21792:	4605      	mov	r5, r0
   21794:	f7fa fb94 	bl	1bec0 <__aeabi_i2d>
   21798:	4602      	mov	r2, r0
   2179a:	460b      	mov	r3, r1
   2179c:	4638      	mov	r0, r7
   2179e:	4641      	mov	r1, r8
   217a0:	f7fa fa40 	bl	1bc24 <__aeabi_dsub>
   217a4:	9a07      	ldr	r2, [sp, #28]
   217a6:	3530      	adds	r5, #48	; 0x30
   217a8:	f1b9 0f01 	cmp.w	r9, #1
   217ac:	7015      	strb	r5, [r2, #0]
   217ae:	4606      	mov	r6, r0
   217b0:	460f      	mov	r7, r1
   217b2:	f102 0501 	add.w	r5, r2, #1
   217b6:	d01c      	beq.n	217f2 <_dtoa_r+0xcba>
   217b8:	9b07      	ldr	r3, [sp, #28]
   217ba:	4499      	add	r9, r3
   217bc:	2200      	movs	r2, #0
   217be:	4b54      	ldr	r3, [pc, #336]	; (21910 <_dtoa_r+0xdd8>)
   217c0:	4630      	mov	r0, r6
   217c2:	4639      	mov	r1, r7
   217c4:	f7fa fbe2 	bl	1bf8c <__aeabi_dmul>
   217c8:	460f      	mov	r7, r1
   217ca:	4606      	mov	r6, r0
   217cc:	f7fa fe78 	bl	1c4c0 <__aeabi_d2iz>
   217d0:	4680      	mov	r8, r0
   217d2:	f7fa fb75 	bl	1bec0 <__aeabi_i2d>
   217d6:	f108 0830 	add.w	r8, r8, #48	; 0x30
   217da:	4602      	mov	r2, r0
   217dc:	460b      	mov	r3, r1
   217de:	4630      	mov	r0, r6
   217e0:	4639      	mov	r1, r7
   217e2:	f7fa fa1f 	bl	1bc24 <__aeabi_dsub>
   217e6:	f805 8b01 	strb.w	r8, [r5], #1
   217ea:	454d      	cmp	r5, r9
   217ec:	4606      	mov	r6, r0
   217ee:	460f      	mov	r7, r1
   217f0:	d1e4      	bne.n	217bc <_dtoa_r+0xc84>
   217f2:	2200      	movs	r2, #0
   217f4:	4b47      	ldr	r3, [pc, #284]	; (21914 <_dtoa_r+0xddc>)
   217f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   217fa:	f7fa fa15 	bl	1bc28 <__adddf3>
   217fe:	4632      	mov	r2, r6
   21800:	463b      	mov	r3, r7
   21802:	f7fa fe35 	bl	1c470 <__aeabi_dcmplt>
   21806:	2800      	cmp	r0, #0
   21808:	d042      	beq.n	21890 <_dtoa_r+0xd58>
   2180a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2180c:	9304      	str	r3, [sp, #16]
   2180e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21812:	f7ff bb4c 	b.w	20eae <_dtoa_r+0x376>
   21816:	9b06      	ldr	r3, [sp, #24]
   21818:	9a08      	ldr	r2, [sp, #32]
   2181a:	1a9d      	subs	r5, r3, r2
   2181c:	2300      	movs	r3, #0
   2181e:	f7ff bb7e 	b.w	20f1e <_dtoa_r+0x3e6>
   21822:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21824:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21826:	9d06      	ldr	r5, [sp, #24]
   21828:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2182c:	f7ff bb77 	b.w	20f1e <_dtoa_r+0x3e6>
   21830:	e9dd 7800 	ldrd	r7, r8, [sp]
   21834:	f04f 0902 	mov.w	r9, #2
   21838:	e581      	b.n	2133e <_dtoa_r+0x806>
   2183a:	9b08      	ldr	r3, [sp, #32]
   2183c:	2b00      	cmp	r3, #0
   2183e:	f43f aecd 	beq.w	215dc <_dtoa_r+0xaa4>
   21842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21844:	2b00      	cmp	r3, #0
   21846:	f77f aa82 	ble.w	20d4e <_dtoa_r+0x216>
   2184a:	2200      	movs	r2, #0
   2184c:	4b30      	ldr	r3, [pc, #192]	; (21910 <_dtoa_r+0xdd8>)
   2184e:	4638      	mov	r0, r7
   21850:	4641      	mov	r1, r8
   21852:	f7fa fb9b 	bl	1bf8c <__aeabi_dmul>
   21856:	4607      	mov	r7, r0
   21858:	4688      	mov	r8, r1
   2185a:	f109 0001 	add.w	r0, r9, #1
   2185e:	f7fa fb2f 	bl	1bec0 <__aeabi_i2d>
   21862:	463a      	mov	r2, r7
   21864:	4643      	mov	r3, r8
   21866:	f7fa fb91 	bl	1bf8c <__aeabi_dmul>
   2186a:	2200      	movs	r2, #0
   2186c:	4b24      	ldr	r3, [pc, #144]	; (21900 <_dtoa_r+0xdc8>)
   2186e:	f7fa f9db 	bl	1bc28 <__adddf3>
   21872:	9a04      	ldr	r2, [sp, #16]
   21874:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   21878:	3a01      	subs	r2, #1
   2187a:	4605      	mov	r5, r0
   2187c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21880:	9211      	str	r2, [sp, #68]	; 0x44
   21882:	e57d      	b.n	21380 <_dtoa_r+0x848>
   21884:	2239      	movs	r2, #57	; 0x39
   21886:	46b3      	mov	fp, r6
   21888:	703a      	strb	r2, [r7, #0]
   2188a:	4646      	mov	r6, r8
   2188c:	1c7d      	adds	r5, r7, #1
   2188e:	e4d4      	b.n	2123a <_dtoa_r+0x702>
   21890:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21894:	2000      	movs	r0, #0
   21896:	491f      	ldr	r1, [pc, #124]	; (21914 <_dtoa_r+0xddc>)
   21898:	f7fa f9c4 	bl	1bc24 <__aeabi_dsub>
   2189c:	4632      	mov	r2, r6
   2189e:	463b      	mov	r3, r7
   218a0:	f7fa fe04 	bl	1c4ac <__aeabi_dcmpgt>
   218a4:	b910      	cbnz	r0, 218ac <_dtoa_r+0xd74>
   218a6:	f7ff ba52 	b.w	20d4e <_dtoa_r+0x216>
   218aa:	4615      	mov	r5, r2
   218ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   218b0:	2b30      	cmp	r3, #48	; 0x30
   218b2:	f105 32ff 	add.w	r2, r5, #4294967295
   218b6:	d0f8      	beq.n	218aa <_dtoa_r+0xd72>
   218b8:	e5ea      	b.n	21490 <_dtoa_r+0x958>
   218ba:	4643      	mov	r3, r8
   218bc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   218c0:	46a0      	mov	r8, r4
   218c2:	461c      	mov	r4, r3
   218c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   218c6:	9304      	str	r3, [sp, #16]
   218c8:	f7ff baf1 	b.w	20eae <_dtoa_r+0x376>
   218cc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   218d0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   218d4:	4644      	mov	r4, r8
   218d6:	f7ff ba3a 	b.w	20d4e <_dtoa_r+0x216>
   218da:	46b8      	mov	r8, r7
   218dc:	f7ff bbac 	b.w	21038 <_dtoa_r+0x500>
   218e0:	9b00      	ldr	r3, [sp, #0]
   218e2:	2b39      	cmp	r3, #57	; 0x39
   218e4:	d0ce      	beq.n	21884 <_dtoa_r+0xd4c>
   218e6:	f1bb 0f00 	cmp.w	fp, #0
   218ea:	f73f aed4 	bgt.w	21696 <_dtoa_r+0xb5e>
   218ee:	e6d5      	b.n	2169c <_dtoa_r+0xb64>
   218f0:	f47f aed4 	bne.w	2169c <_dtoa_r+0xb64>
   218f4:	9b00      	ldr	r3, [sp, #0]
   218f6:	07da      	lsls	r2, r3, #31
   218f8:	f57f aed0 	bpl.w	2169c <_dtoa_r+0xb64>
   218fc:	e6c7      	b.n	2168e <_dtoa_r+0xb56>
   218fe:	bf00      	nop
   21900:	401c0000 	.word	0x401c0000
   21904:	40140000 	.word	0x40140000
   21908:	00025218 	.word	0x00025218
   2190c:	000251f0 	.word	0x000251f0
   21910:	40240000 	.word	0x40240000
   21914:	3fe00000 	.word	0x3fe00000
   21918:	4631      	mov	r1, r6
   2191a:	2300      	movs	r3, #0
   2191c:	220a      	movs	r2, #10
   2191e:	4620      	mov	r0, r4
   21920:	f000 fb90 	bl	22044 <__multadd>
   21924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21926:	2b00      	cmp	r3, #0
   21928:	4606      	mov	r6, r0
   2192a:	dd0a      	ble.n	21942 <_dtoa_r+0xe0a>
   2192c:	9308      	str	r3, [sp, #32]
   2192e:	f7ff bbb9 	b.w	210a4 <_dtoa_r+0x56c>
   21932:	9b02      	ldr	r3, [sp, #8]
   21934:	2b02      	cmp	r3, #2
   21936:	dc22      	bgt.n	2197e <_dtoa_r+0xe46>
   21938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2193a:	e44a      	b.n	211d2 <_dtoa_r+0x69a>
   2193c:	f04f 0902 	mov.w	r9, #2
   21940:	e4fd      	b.n	2133e <_dtoa_r+0x806>
   21942:	9b02      	ldr	r3, [sp, #8]
   21944:	2b02      	cmp	r3, #2
   21946:	dc1a      	bgt.n	2197e <_dtoa_r+0xe46>
   21948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2194a:	e7ef      	b.n	2192c <_dtoa_r+0xdf4>
   2194c:	2500      	movs	r5, #0
   2194e:	6465      	str	r5, [r4, #68]	; 0x44
   21950:	4629      	mov	r1, r5
   21952:	4620      	mov	r0, r4
   21954:	f000 fb46 	bl	21fe4 <_Balloc>
   21958:	f04f 33ff 	mov.w	r3, #4294967295
   2195c:	9308      	str	r3, [sp, #32]
   2195e:	930d      	str	r3, [sp, #52]	; 0x34
   21960:	2301      	movs	r3, #1
   21962:	9007      	str	r0, [sp, #28]
   21964:	46ab      	mov	fp, r5
   21966:	6420      	str	r0, [r4, #64]	; 0x40
   21968:	9309      	str	r3, [sp, #36]	; 0x24
   2196a:	f7ff b9f0 	b.w	20d4e <_dtoa_r+0x216>
   2196e:	f43f ab7b 	beq.w	21068 <_dtoa_r+0x530>
   21972:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21976:	e40b      	b.n	21190 <_dtoa_r+0x658>
   21978:	2701      	movs	r7, #1
   2197a:	f7ff b9af 	b.w	20cdc <_dtoa_r+0x1a4>
   2197e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21980:	9308      	str	r3, [sp, #32]
   21982:	e5f8      	b.n	21576 <_dtoa_r+0xa3e>

00021984 <__sflush_r>:
   21984:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21988:	b29a      	uxth	r2, r3
   2198a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2198e:	460d      	mov	r5, r1
   21990:	0711      	lsls	r1, r2, #28
   21992:	4680      	mov	r8, r0
   21994:	d43a      	bmi.n	21a0c <__sflush_r+0x88>
   21996:	686a      	ldr	r2, [r5, #4]
   21998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2199c:	2a00      	cmp	r2, #0
   2199e:	81ab      	strh	r3, [r5, #12]
   219a0:	dd6f      	ble.n	21a82 <__sflush_r+0xfe>
   219a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   219a4:	2c00      	cmp	r4, #0
   219a6:	d049      	beq.n	21a3c <__sflush_r+0xb8>
   219a8:	2200      	movs	r2, #0
   219aa:	b29b      	uxth	r3, r3
   219ac:	f8d8 6000 	ldr.w	r6, [r8]
   219b0:	f8c8 2000 	str.w	r2, [r8]
   219b4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   219b8:	d067      	beq.n	21a8a <__sflush_r+0x106>
   219ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   219bc:	075f      	lsls	r7, r3, #29
   219be:	d505      	bpl.n	219cc <__sflush_r+0x48>
   219c0:	6869      	ldr	r1, [r5, #4]
   219c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   219c4:	1a52      	subs	r2, r2, r1
   219c6:	b10b      	cbz	r3, 219cc <__sflush_r+0x48>
   219c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   219ca:	1ad2      	subs	r2, r2, r3
   219cc:	2300      	movs	r3, #0
   219ce:	69e9      	ldr	r1, [r5, #28]
   219d0:	4640      	mov	r0, r8
   219d2:	47a0      	blx	r4
   219d4:	1c44      	adds	r4, r0, #1
   219d6:	d03c      	beq.n	21a52 <__sflush_r+0xce>
   219d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   219dc:	692a      	ldr	r2, [r5, #16]
   219de:	602a      	str	r2, [r5, #0]
   219e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   219e4:	2200      	movs	r2, #0
   219e6:	81ab      	strh	r3, [r5, #12]
   219e8:	04db      	lsls	r3, r3, #19
   219ea:	606a      	str	r2, [r5, #4]
   219ec:	d447      	bmi.n	21a7e <__sflush_r+0xfa>
   219ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   219f0:	f8c8 6000 	str.w	r6, [r8]
   219f4:	b311      	cbz	r1, 21a3c <__sflush_r+0xb8>
   219f6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   219fa:	4299      	cmp	r1, r3
   219fc:	d002      	beq.n	21a04 <__sflush_r+0x80>
   219fe:	4640      	mov	r0, r8
   21a00:	f000 f95a 	bl	21cb8 <_free_r>
   21a04:	2000      	movs	r0, #0
   21a06:	6328      	str	r0, [r5, #48]	; 0x30
   21a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a0c:	692e      	ldr	r6, [r5, #16]
   21a0e:	b1ae      	cbz	r6, 21a3c <__sflush_r+0xb8>
   21a10:	682c      	ldr	r4, [r5, #0]
   21a12:	602e      	str	r6, [r5, #0]
   21a14:	0791      	lsls	r1, r2, #30
   21a16:	bf0c      	ite	eq
   21a18:	696b      	ldreq	r3, [r5, #20]
   21a1a:	2300      	movne	r3, #0
   21a1c:	1ba4      	subs	r4, r4, r6
   21a1e:	60ab      	str	r3, [r5, #8]
   21a20:	e00a      	b.n	21a38 <__sflush_r+0xb4>
   21a22:	4623      	mov	r3, r4
   21a24:	4632      	mov	r2, r6
   21a26:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   21a28:	69e9      	ldr	r1, [r5, #28]
   21a2a:	4640      	mov	r0, r8
   21a2c:	47b8      	blx	r7
   21a2e:	2800      	cmp	r0, #0
   21a30:	eba4 0400 	sub.w	r4, r4, r0
   21a34:	4406      	add	r6, r0
   21a36:	dd04      	ble.n	21a42 <__sflush_r+0xbe>
   21a38:	2c00      	cmp	r4, #0
   21a3a:	dcf2      	bgt.n	21a22 <__sflush_r+0x9e>
   21a3c:	2000      	movs	r0, #0
   21a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a42:	89ab      	ldrh	r3, [r5, #12]
   21a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21a48:	81ab      	strh	r3, [r5, #12]
   21a4a:	f04f 30ff 	mov.w	r0, #4294967295
   21a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a52:	f8d8 4000 	ldr.w	r4, [r8]
   21a56:	2c1d      	cmp	r4, #29
   21a58:	d8f3      	bhi.n	21a42 <__sflush_r+0xbe>
   21a5a:	4b19      	ldr	r3, [pc, #100]	; (21ac0 <__sflush_r+0x13c>)
   21a5c:	40e3      	lsrs	r3, r4
   21a5e:	43db      	mvns	r3, r3
   21a60:	f013 0301 	ands.w	r3, r3, #1
   21a64:	d1ed      	bne.n	21a42 <__sflush_r+0xbe>
   21a66:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   21a6a:	606b      	str	r3, [r5, #4]
   21a6c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   21a70:	6929      	ldr	r1, [r5, #16]
   21a72:	81ab      	strh	r3, [r5, #12]
   21a74:	04da      	lsls	r2, r3, #19
   21a76:	6029      	str	r1, [r5, #0]
   21a78:	d5b9      	bpl.n	219ee <__sflush_r+0x6a>
   21a7a:	2c00      	cmp	r4, #0
   21a7c:	d1b7      	bne.n	219ee <__sflush_r+0x6a>
   21a7e:	6528      	str	r0, [r5, #80]	; 0x50
   21a80:	e7b5      	b.n	219ee <__sflush_r+0x6a>
   21a82:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21a84:	2a00      	cmp	r2, #0
   21a86:	dc8c      	bgt.n	219a2 <__sflush_r+0x1e>
   21a88:	e7d8      	b.n	21a3c <__sflush_r+0xb8>
   21a8a:	2301      	movs	r3, #1
   21a8c:	69e9      	ldr	r1, [r5, #28]
   21a8e:	4640      	mov	r0, r8
   21a90:	47a0      	blx	r4
   21a92:	1c43      	adds	r3, r0, #1
   21a94:	4602      	mov	r2, r0
   21a96:	d002      	beq.n	21a9e <__sflush_r+0x11a>
   21a98:	89ab      	ldrh	r3, [r5, #12]
   21a9a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   21a9c:	e78e      	b.n	219bc <__sflush_r+0x38>
   21a9e:	f8d8 3000 	ldr.w	r3, [r8]
   21aa2:	2b00      	cmp	r3, #0
   21aa4:	d0f8      	beq.n	21a98 <__sflush_r+0x114>
   21aa6:	2b1d      	cmp	r3, #29
   21aa8:	d001      	beq.n	21aae <__sflush_r+0x12a>
   21aaa:	2b16      	cmp	r3, #22
   21aac:	d102      	bne.n	21ab4 <__sflush_r+0x130>
   21aae:	f8c8 6000 	str.w	r6, [r8]
   21ab2:	e7c3      	b.n	21a3c <__sflush_r+0xb8>
   21ab4:	89ab      	ldrh	r3, [r5, #12]
   21ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21aba:	81ab      	strh	r3, [r5, #12]
   21abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ac0:	20400001 	.word	0x20400001

00021ac4 <_fflush_r>:
   21ac4:	b538      	push	{r3, r4, r5, lr}
   21ac6:	460d      	mov	r5, r1
   21ac8:	4604      	mov	r4, r0
   21aca:	b108      	cbz	r0, 21ad0 <_fflush_r+0xc>
   21acc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   21ace:	b1bb      	cbz	r3, 21b00 <_fflush_r+0x3c>
   21ad0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   21ad4:	b188      	cbz	r0, 21afa <_fflush_r+0x36>
   21ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21ad8:	07db      	lsls	r3, r3, #31
   21ada:	d401      	bmi.n	21ae0 <_fflush_r+0x1c>
   21adc:	0581      	lsls	r1, r0, #22
   21ade:	d517      	bpl.n	21b10 <_fflush_r+0x4c>
   21ae0:	4620      	mov	r0, r4
   21ae2:	4629      	mov	r1, r5
   21ae4:	f7ff ff4e 	bl	21984 <__sflush_r>
   21ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21aea:	07da      	lsls	r2, r3, #31
   21aec:	4604      	mov	r4, r0
   21aee:	d402      	bmi.n	21af6 <_fflush_r+0x32>
   21af0:	89ab      	ldrh	r3, [r5, #12]
   21af2:	059b      	lsls	r3, r3, #22
   21af4:	d507      	bpl.n	21b06 <_fflush_r+0x42>
   21af6:	4620      	mov	r0, r4
   21af8:	bd38      	pop	{r3, r4, r5, pc}
   21afa:	4604      	mov	r4, r0
   21afc:	4620      	mov	r0, r4
   21afe:	bd38      	pop	{r3, r4, r5, pc}
   21b00:	f000 f838 	bl	21b74 <__sinit>
   21b04:	e7e4      	b.n	21ad0 <_fflush_r+0xc>
   21b06:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21b08:	f7fc fa9e 	bl	1e048 <__retarget_lock_release_recursive>
   21b0c:	4620      	mov	r0, r4
   21b0e:	bd38      	pop	{r3, r4, r5, pc}
   21b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21b12:	f7fc fa97 	bl	1e044 <__retarget_lock_acquire_recursive>
   21b16:	e7e3      	b.n	21ae0 <_fflush_r+0x1c>

00021b18 <_cleanup_r>:
   21b18:	4901      	ldr	r1, [pc, #4]	; (21b20 <_cleanup_r+0x8>)
   21b1a:	f000 b9b3 	b.w	21e84 <_fwalk_reent>
   21b1e:	bf00      	nop
   21b20:	000228a9 	.word	0x000228a9

00021b24 <std.isra.0>:
   21b24:	b510      	push	{r4, lr}
   21b26:	2300      	movs	r3, #0
   21b28:	4604      	mov	r4, r0
   21b2a:	8181      	strh	r1, [r0, #12]
   21b2c:	81c2      	strh	r2, [r0, #14]
   21b2e:	6003      	str	r3, [r0, #0]
   21b30:	6043      	str	r3, [r0, #4]
   21b32:	6083      	str	r3, [r0, #8]
   21b34:	6643      	str	r3, [r0, #100]	; 0x64
   21b36:	6103      	str	r3, [r0, #16]
   21b38:	6143      	str	r3, [r0, #20]
   21b3a:	6183      	str	r3, [r0, #24]
   21b3c:	4619      	mov	r1, r3
   21b3e:	2208      	movs	r2, #8
   21b40:	305c      	adds	r0, #92	; 0x5c
   21b42:	f7fc fedb 	bl	1e8fc <memset>
   21b46:	4807      	ldr	r0, [pc, #28]	; (21b64 <std.isra.0+0x40>)
   21b48:	4907      	ldr	r1, [pc, #28]	; (21b68 <std.isra.0+0x44>)
   21b4a:	4a08      	ldr	r2, [pc, #32]	; (21b6c <std.isra.0+0x48>)
   21b4c:	4b08      	ldr	r3, [pc, #32]	; (21b70 <std.isra.0+0x4c>)
   21b4e:	6220      	str	r0, [r4, #32]
   21b50:	61e4      	str	r4, [r4, #28]
   21b52:	6261      	str	r1, [r4, #36]	; 0x24
   21b54:	62a2      	str	r2, [r4, #40]	; 0x28
   21b56:	62e3      	str	r3, [r4, #44]	; 0x2c
   21b58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   21b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21b60:	f7fc ba6c 	b.w	1e03c <__retarget_lock_init_recursive>
   21b64:	000225dd 	.word	0x000225dd
   21b68:	00022601 	.word	0x00022601
   21b6c:	0002263d 	.word	0x0002263d
   21b70:	0002265d 	.word	0x0002265d

00021b74 <__sinit>:
   21b74:	b510      	push	{r4, lr}
   21b76:	4604      	mov	r4, r0
   21b78:	4812      	ldr	r0, [pc, #72]	; (21bc4 <__sinit+0x50>)
   21b7a:	f7fc fa63 	bl	1e044 <__retarget_lock_acquire_recursive>
   21b7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21b80:	b9d2      	cbnz	r2, 21bb8 <__sinit+0x44>
   21b82:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21b86:	4810      	ldr	r0, [pc, #64]	; (21bc8 <__sinit+0x54>)
   21b88:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   21b8c:	2103      	movs	r1, #3
   21b8e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21b92:	63e0      	str	r0, [r4, #60]	; 0x3c
   21b94:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21b98:	6860      	ldr	r0, [r4, #4]
   21b9a:	2104      	movs	r1, #4
   21b9c:	f7ff ffc2 	bl	21b24 <std.isra.0>
   21ba0:	2201      	movs	r2, #1
   21ba2:	2109      	movs	r1, #9
   21ba4:	68a0      	ldr	r0, [r4, #8]
   21ba6:	f7ff ffbd 	bl	21b24 <std.isra.0>
   21baa:	2202      	movs	r2, #2
   21bac:	2112      	movs	r1, #18
   21bae:	68e0      	ldr	r0, [r4, #12]
   21bb0:	f7ff ffb8 	bl	21b24 <std.isra.0>
   21bb4:	2301      	movs	r3, #1
   21bb6:	63a3      	str	r3, [r4, #56]	; 0x38
   21bb8:	4802      	ldr	r0, [pc, #8]	; (21bc4 <__sinit+0x50>)
   21bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21bbe:	f7fc ba43 	b.w	1e048 <__retarget_lock_release_recursive>
   21bc2:	bf00      	nop
   21bc4:	20002394 	.word	0x20002394
   21bc8:	00021b19 	.word	0x00021b19

00021bcc <__sfp_lock_acquire>:
   21bcc:	4801      	ldr	r0, [pc, #4]	; (21bd4 <__sfp_lock_acquire+0x8>)
   21bce:	f7fc ba39 	b.w	1e044 <__retarget_lock_acquire_recursive>
   21bd2:	bf00      	nop
   21bd4:	200023a8 	.word	0x200023a8

00021bd8 <__sfp_lock_release>:
   21bd8:	4801      	ldr	r0, [pc, #4]	; (21be0 <__sfp_lock_release+0x8>)
   21bda:	f7fc ba35 	b.w	1e048 <__retarget_lock_release_recursive>
   21bde:	bf00      	nop
   21be0:	200023a8 	.word	0x200023a8

00021be4 <__libc_fini_array>:
   21be4:	b538      	push	{r3, r4, r5, lr}
   21be6:	4c0a      	ldr	r4, [pc, #40]	; (21c10 <__libc_fini_array+0x2c>)
   21be8:	4d0a      	ldr	r5, [pc, #40]	; (21c14 <__libc_fini_array+0x30>)
   21bea:	1b64      	subs	r4, r4, r5
   21bec:	10a4      	asrs	r4, r4, #2
   21bee:	d00a      	beq.n	21c06 <__libc_fini_array+0x22>
   21bf0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   21bf4:	3b01      	subs	r3, #1
   21bf6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   21bfa:	3c01      	subs	r4, #1
   21bfc:	f855 3904 	ldr.w	r3, [r5], #-4
   21c00:	4798      	blx	r3
   21c02:	2c00      	cmp	r4, #0
   21c04:	d1f9      	bne.n	21bfa <__libc_fini_array+0x16>
   21c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21c0a:	f001 b8b3 	b.w	22d74 <_fini>
   21c0e:	bf00      	nop
   21c10:	00022dbc 	.word	0x00022dbc
   21c14:	00022db8 	.word	0x00022db8

00021c18 <_malloc_trim_r>:
   21c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c1a:	4f24      	ldr	r7, [pc, #144]	; (21cac <_malloc_trim_r+0x94>)
   21c1c:	460c      	mov	r4, r1
   21c1e:	4606      	mov	r6, r0
   21c20:	f7fc feba 	bl	1e998 <__malloc_lock>
   21c24:	68bb      	ldr	r3, [r7, #8]
   21c26:	685d      	ldr	r5, [r3, #4]
   21c28:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   21c2c:	310f      	adds	r1, #15
   21c2e:	f025 0503 	bic.w	r5, r5, #3
   21c32:	4429      	add	r1, r5
   21c34:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   21c38:	f021 010f 	bic.w	r1, r1, #15
   21c3c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   21c40:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21c44:	db07      	blt.n	21c56 <_malloc_trim_r+0x3e>
   21c46:	2100      	movs	r1, #0
   21c48:	4630      	mov	r0, r6
   21c4a:	f7fd f897 	bl	1ed7c <_sbrk_r>
   21c4e:	68bb      	ldr	r3, [r7, #8]
   21c50:	442b      	add	r3, r5
   21c52:	4298      	cmp	r0, r3
   21c54:	d004      	beq.n	21c60 <_malloc_trim_r+0x48>
   21c56:	4630      	mov	r0, r6
   21c58:	f7fc fea4 	bl	1e9a4 <__malloc_unlock>
   21c5c:	2000      	movs	r0, #0
   21c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21c60:	4261      	negs	r1, r4
   21c62:	4630      	mov	r0, r6
   21c64:	f7fd f88a 	bl	1ed7c <_sbrk_r>
   21c68:	3001      	adds	r0, #1
   21c6a:	d00d      	beq.n	21c88 <_malloc_trim_r+0x70>
   21c6c:	4b10      	ldr	r3, [pc, #64]	; (21cb0 <_malloc_trim_r+0x98>)
   21c6e:	68ba      	ldr	r2, [r7, #8]
   21c70:	6819      	ldr	r1, [r3, #0]
   21c72:	1b2d      	subs	r5, r5, r4
   21c74:	f045 0501 	orr.w	r5, r5, #1
   21c78:	4630      	mov	r0, r6
   21c7a:	1b09      	subs	r1, r1, r4
   21c7c:	6055      	str	r5, [r2, #4]
   21c7e:	6019      	str	r1, [r3, #0]
   21c80:	f7fc fe90 	bl	1e9a4 <__malloc_unlock>
   21c84:	2001      	movs	r0, #1
   21c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21c88:	2100      	movs	r1, #0
   21c8a:	4630      	mov	r0, r6
   21c8c:	f7fd f876 	bl	1ed7c <_sbrk_r>
   21c90:	68ba      	ldr	r2, [r7, #8]
   21c92:	1a83      	subs	r3, r0, r2
   21c94:	2b0f      	cmp	r3, #15
   21c96:	ddde      	ble.n	21c56 <_malloc_trim_r+0x3e>
   21c98:	4c06      	ldr	r4, [pc, #24]	; (21cb4 <_malloc_trim_r+0x9c>)
   21c9a:	4905      	ldr	r1, [pc, #20]	; (21cb0 <_malloc_trim_r+0x98>)
   21c9c:	6824      	ldr	r4, [r4, #0]
   21c9e:	f043 0301 	orr.w	r3, r3, #1
   21ca2:	1b00      	subs	r0, r0, r4
   21ca4:	6053      	str	r3, [r2, #4]
   21ca6:	6008      	str	r0, [r1, #0]
   21ca8:	e7d5      	b.n	21c56 <_malloc_trim_r+0x3e>
   21caa:	bf00      	nop
   21cac:	200006a4 	.word	0x200006a4
   21cb0:	200022b0 	.word	0x200022b0
   21cb4:	20000aac 	.word	0x20000aac

00021cb8 <_free_r>:
   21cb8:	2900      	cmp	r1, #0
   21cba:	d044      	beq.n	21d46 <_free_r+0x8e>
   21cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21cc0:	460d      	mov	r5, r1
   21cc2:	4680      	mov	r8, r0
   21cc4:	f7fc fe68 	bl	1e998 <__malloc_lock>
   21cc8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   21ccc:	4969      	ldr	r1, [pc, #420]	; (21e74 <_free_r+0x1bc>)
   21cce:	f027 0301 	bic.w	r3, r7, #1
   21cd2:	f1a5 0408 	sub.w	r4, r5, #8
   21cd6:	18e2      	adds	r2, r4, r3
   21cd8:	688e      	ldr	r6, [r1, #8]
   21cda:	6850      	ldr	r0, [r2, #4]
   21cdc:	42b2      	cmp	r2, r6
   21cde:	f020 0003 	bic.w	r0, r0, #3
   21ce2:	d05e      	beq.n	21da2 <_free_r+0xea>
   21ce4:	07fe      	lsls	r6, r7, #31
   21ce6:	6050      	str	r0, [r2, #4]
   21ce8:	d40b      	bmi.n	21d02 <_free_r+0x4a>
   21cea:	f855 7c08 	ldr.w	r7, [r5, #-8]
   21cee:	1be4      	subs	r4, r4, r7
   21cf0:	f101 0e08 	add.w	lr, r1, #8
   21cf4:	68a5      	ldr	r5, [r4, #8]
   21cf6:	4575      	cmp	r5, lr
   21cf8:	443b      	add	r3, r7
   21cfa:	d06d      	beq.n	21dd8 <_free_r+0x120>
   21cfc:	68e7      	ldr	r7, [r4, #12]
   21cfe:	60ef      	str	r7, [r5, #12]
   21d00:	60bd      	str	r5, [r7, #8]
   21d02:	1815      	adds	r5, r2, r0
   21d04:	686d      	ldr	r5, [r5, #4]
   21d06:	07ed      	lsls	r5, r5, #31
   21d08:	d53e      	bpl.n	21d88 <_free_r+0xd0>
   21d0a:	f043 0201 	orr.w	r2, r3, #1
   21d0e:	6062      	str	r2, [r4, #4]
   21d10:	50e3      	str	r3, [r4, r3]
   21d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21d16:	d217      	bcs.n	21d48 <_free_r+0x90>
   21d18:	08db      	lsrs	r3, r3, #3
   21d1a:	1c58      	adds	r0, r3, #1
   21d1c:	109a      	asrs	r2, r3, #2
   21d1e:	684d      	ldr	r5, [r1, #4]
   21d20:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   21d24:	60a7      	str	r7, [r4, #8]
   21d26:	2301      	movs	r3, #1
   21d28:	4093      	lsls	r3, r2
   21d2a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   21d2e:	432b      	orrs	r3, r5
   21d30:	3a08      	subs	r2, #8
   21d32:	60e2      	str	r2, [r4, #12]
   21d34:	604b      	str	r3, [r1, #4]
   21d36:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   21d3a:	60fc      	str	r4, [r7, #12]
   21d3c:	4640      	mov	r0, r8
   21d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21d42:	f7fc be2f 	b.w	1e9a4 <__malloc_unlock>
   21d46:	4770      	bx	lr
   21d48:	0a5a      	lsrs	r2, r3, #9
   21d4a:	2a04      	cmp	r2, #4
   21d4c:	d852      	bhi.n	21df4 <_free_r+0x13c>
   21d4e:	099a      	lsrs	r2, r3, #6
   21d50:	f102 0739 	add.w	r7, r2, #57	; 0x39
   21d54:	00ff      	lsls	r7, r7, #3
   21d56:	f102 0538 	add.w	r5, r2, #56	; 0x38
   21d5a:	19c8      	adds	r0, r1, r7
   21d5c:	59ca      	ldr	r2, [r1, r7]
   21d5e:	3808      	subs	r0, #8
   21d60:	4290      	cmp	r0, r2
   21d62:	d04f      	beq.n	21e04 <_free_r+0x14c>
   21d64:	6851      	ldr	r1, [r2, #4]
   21d66:	f021 0103 	bic.w	r1, r1, #3
   21d6a:	428b      	cmp	r3, r1
   21d6c:	d232      	bcs.n	21dd4 <_free_r+0x11c>
   21d6e:	6892      	ldr	r2, [r2, #8]
   21d70:	4290      	cmp	r0, r2
   21d72:	d1f7      	bne.n	21d64 <_free_r+0xac>
   21d74:	68c3      	ldr	r3, [r0, #12]
   21d76:	60a0      	str	r0, [r4, #8]
   21d78:	60e3      	str	r3, [r4, #12]
   21d7a:	609c      	str	r4, [r3, #8]
   21d7c:	60c4      	str	r4, [r0, #12]
   21d7e:	4640      	mov	r0, r8
   21d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21d84:	f7fc be0e 	b.w	1e9a4 <__malloc_unlock>
   21d88:	6895      	ldr	r5, [r2, #8]
   21d8a:	4f3b      	ldr	r7, [pc, #236]	; (21e78 <_free_r+0x1c0>)
   21d8c:	42bd      	cmp	r5, r7
   21d8e:	4403      	add	r3, r0
   21d90:	d040      	beq.n	21e14 <_free_r+0x15c>
   21d92:	68d0      	ldr	r0, [r2, #12]
   21d94:	60e8      	str	r0, [r5, #12]
   21d96:	f043 0201 	orr.w	r2, r3, #1
   21d9a:	6085      	str	r5, [r0, #8]
   21d9c:	6062      	str	r2, [r4, #4]
   21d9e:	50e3      	str	r3, [r4, r3]
   21da0:	e7b7      	b.n	21d12 <_free_r+0x5a>
   21da2:	07ff      	lsls	r7, r7, #31
   21da4:	4403      	add	r3, r0
   21da6:	d407      	bmi.n	21db8 <_free_r+0x100>
   21da8:	f855 2c08 	ldr.w	r2, [r5, #-8]
   21dac:	1aa4      	subs	r4, r4, r2
   21dae:	4413      	add	r3, r2
   21db0:	68a0      	ldr	r0, [r4, #8]
   21db2:	68e2      	ldr	r2, [r4, #12]
   21db4:	60c2      	str	r2, [r0, #12]
   21db6:	6090      	str	r0, [r2, #8]
   21db8:	4a30      	ldr	r2, [pc, #192]	; (21e7c <_free_r+0x1c4>)
   21dba:	6812      	ldr	r2, [r2, #0]
   21dbc:	f043 0001 	orr.w	r0, r3, #1
   21dc0:	4293      	cmp	r3, r2
   21dc2:	6060      	str	r0, [r4, #4]
   21dc4:	608c      	str	r4, [r1, #8]
   21dc6:	d3b9      	bcc.n	21d3c <_free_r+0x84>
   21dc8:	4b2d      	ldr	r3, [pc, #180]	; (21e80 <_free_r+0x1c8>)
   21dca:	4640      	mov	r0, r8
   21dcc:	6819      	ldr	r1, [r3, #0]
   21dce:	f7ff ff23 	bl	21c18 <_malloc_trim_r>
   21dd2:	e7b3      	b.n	21d3c <_free_r+0x84>
   21dd4:	4610      	mov	r0, r2
   21dd6:	e7cd      	b.n	21d74 <_free_r+0xbc>
   21dd8:	1811      	adds	r1, r2, r0
   21dda:	6849      	ldr	r1, [r1, #4]
   21ddc:	07c9      	lsls	r1, r1, #31
   21dde:	d444      	bmi.n	21e6a <_free_r+0x1b2>
   21de0:	6891      	ldr	r1, [r2, #8]
   21de2:	68d2      	ldr	r2, [r2, #12]
   21de4:	60ca      	str	r2, [r1, #12]
   21de6:	4403      	add	r3, r0
   21de8:	f043 0001 	orr.w	r0, r3, #1
   21dec:	6091      	str	r1, [r2, #8]
   21dee:	6060      	str	r0, [r4, #4]
   21df0:	50e3      	str	r3, [r4, r3]
   21df2:	e7a3      	b.n	21d3c <_free_r+0x84>
   21df4:	2a14      	cmp	r2, #20
   21df6:	d816      	bhi.n	21e26 <_free_r+0x16e>
   21df8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   21dfc:	00ff      	lsls	r7, r7, #3
   21dfe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   21e02:	e7aa      	b.n	21d5a <_free_r+0xa2>
   21e04:	10aa      	asrs	r2, r5, #2
   21e06:	2301      	movs	r3, #1
   21e08:	684d      	ldr	r5, [r1, #4]
   21e0a:	4093      	lsls	r3, r2
   21e0c:	432b      	orrs	r3, r5
   21e0e:	604b      	str	r3, [r1, #4]
   21e10:	4603      	mov	r3, r0
   21e12:	e7b0      	b.n	21d76 <_free_r+0xbe>
   21e14:	f043 0201 	orr.w	r2, r3, #1
   21e18:	614c      	str	r4, [r1, #20]
   21e1a:	610c      	str	r4, [r1, #16]
   21e1c:	60e5      	str	r5, [r4, #12]
   21e1e:	60a5      	str	r5, [r4, #8]
   21e20:	6062      	str	r2, [r4, #4]
   21e22:	50e3      	str	r3, [r4, r3]
   21e24:	e78a      	b.n	21d3c <_free_r+0x84>
   21e26:	2a54      	cmp	r2, #84	; 0x54
   21e28:	d806      	bhi.n	21e38 <_free_r+0x180>
   21e2a:	0b1a      	lsrs	r2, r3, #12
   21e2c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   21e30:	00ff      	lsls	r7, r7, #3
   21e32:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   21e36:	e790      	b.n	21d5a <_free_r+0xa2>
   21e38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   21e3c:	d806      	bhi.n	21e4c <_free_r+0x194>
   21e3e:	0bda      	lsrs	r2, r3, #15
   21e40:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21e44:	00ff      	lsls	r7, r7, #3
   21e46:	f102 0577 	add.w	r5, r2, #119	; 0x77
   21e4a:	e786      	b.n	21d5a <_free_r+0xa2>
   21e4c:	f240 5054 	movw	r0, #1364	; 0x554
   21e50:	4282      	cmp	r2, r0
   21e52:	d806      	bhi.n	21e62 <_free_r+0x1aa>
   21e54:	0c9a      	lsrs	r2, r3, #18
   21e56:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   21e5a:	00ff      	lsls	r7, r7, #3
   21e5c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21e60:	e77b      	b.n	21d5a <_free_r+0xa2>
   21e62:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21e66:	257e      	movs	r5, #126	; 0x7e
   21e68:	e777      	b.n	21d5a <_free_r+0xa2>
   21e6a:	f043 0101 	orr.w	r1, r3, #1
   21e6e:	6061      	str	r1, [r4, #4]
   21e70:	6013      	str	r3, [r2, #0]
   21e72:	e763      	b.n	21d3c <_free_r+0x84>
   21e74:	200006a4 	.word	0x200006a4
   21e78:	200006ac 	.word	0x200006ac
   21e7c:	20000ab0 	.word	0x20000ab0
   21e80:	200022e0 	.word	0x200022e0

00021e84 <_fwalk_reent>:
   21e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21e88:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   21e8c:	d01f      	beq.n	21ece <_fwalk_reent+0x4a>
   21e8e:	4688      	mov	r8, r1
   21e90:	4606      	mov	r6, r0
   21e92:	f04f 0900 	mov.w	r9, #0
   21e96:	687d      	ldr	r5, [r7, #4]
   21e98:	68bc      	ldr	r4, [r7, #8]
   21e9a:	3d01      	subs	r5, #1
   21e9c:	d411      	bmi.n	21ec2 <_fwalk_reent+0x3e>
   21e9e:	89a3      	ldrh	r3, [r4, #12]
   21ea0:	2b01      	cmp	r3, #1
   21ea2:	f105 35ff 	add.w	r5, r5, #4294967295
   21ea6:	d908      	bls.n	21eba <_fwalk_reent+0x36>
   21ea8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21eac:	3301      	adds	r3, #1
   21eae:	4621      	mov	r1, r4
   21eb0:	4630      	mov	r0, r6
   21eb2:	d002      	beq.n	21eba <_fwalk_reent+0x36>
   21eb4:	47c0      	blx	r8
   21eb6:	ea49 0900 	orr.w	r9, r9, r0
   21eba:	1c6b      	adds	r3, r5, #1
   21ebc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   21ec0:	d1ed      	bne.n	21e9e <_fwalk_reent+0x1a>
   21ec2:	683f      	ldr	r7, [r7, #0]
   21ec4:	2f00      	cmp	r7, #0
   21ec6:	d1e6      	bne.n	21e96 <_fwalk_reent+0x12>
   21ec8:	4648      	mov	r0, r9
   21eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21ece:	46b9      	mov	r9, r7
   21ed0:	4648      	mov	r0, r9
   21ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21ed6:	bf00      	nop

00021ed8 <_localeconv_r>:
   21ed8:	4a04      	ldr	r2, [pc, #16]	; (21eec <_localeconv_r+0x14>)
   21eda:	4b05      	ldr	r3, [pc, #20]	; (21ef0 <_localeconv_r+0x18>)
   21edc:	6812      	ldr	r2, [r2, #0]
   21ede:	6b50      	ldr	r0, [r2, #52]	; 0x34
   21ee0:	2800      	cmp	r0, #0
   21ee2:	bf08      	it	eq
   21ee4:	4618      	moveq	r0, r3
   21ee6:	30f0      	adds	r0, #240	; 0xf0
   21ee8:	4770      	bx	lr
   21eea:	bf00      	nop
   21eec:	20000108 	.word	0x20000108
   21ef0:	20000538 	.word	0x20000538

00021ef4 <__swhatbuf_r>:
   21ef4:	b570      	push	{r4, r5, r6, lr}
   21ef6:	460c      	mov	r4, r1
   21ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21efc:	2900      	cmp	r1, #0
   21efe:	b090      	sub	sp, #64	; 0x40
   21f00:	4615      	mov	r5, r2
   21f02:	461e      	mov	r6, r3
   21f04:	db14      	blt.n	21f30 <__swhatbuf_r+0x3c>
   21f06:	aa01      	add	r2, sp, #4
   21f08:	f000 fd30 	bl	2296c <_fstat_r>
   21f0c:	2800      	cmp	r0, #0
   21f0e:	db0f      	blt.n	21f30 <__swhatbuf_r+0x3c>
   21f10:	9a02      	ldr	r2, [sp, #8]
   21f12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   21f16:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   21f1a:	fab2 f282 	clz	r2, r2
   21f1e:	0952      	lsrs	r2, r2, #5
   21f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21f24:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21f28:	6032      	str	r2, [r6, #0]
   21f2a:	602b      	str	r3, [r5, #0]
   21f2c:	b010      	add	sp, #64	; 0x40
   21f2e:	bd70      	pop	{r4, r5, r6, pc}
   21f30:	89a2      	ldrh	r2, [r4, #12]
   21f32:	2300      	movs	r3, #0
   21f34:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   21f38:	6033      	str	r3, [r6, #0]
   21f3a:	d004      	beq.n	21f46 <__swhatbuf_r+0x52>
   21f3c:	2240      	movs	r2, #64	; 0x40
   21f3e:	4618      	mov	r0, r3
   21f40:	602a      	str	r2, [r5, #0]
   21f42:	b010      	add	sp, #64	; 0x40
   21f44:	bd70      	pop	{r4, r5, r6, pc}
   21f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21f4a:	602b      	str	r3, [r5, #0]
   21f4c:	b010      	add	sp, #64	; 0x40
   21f4e:	bd70      	pop	{r4, r5, r6, pc}

00021f50 <__smakebuf_r>:
   21f50:	898a      	ldrh	r2, [r1, #12]
   21f52:	0792      	lsls	r2, r2, #30
   21f54:	460b      	mov	r3, r1
   21f56:	d506      	bpl.n	21f66 <__smakebuf_r+0x16>
   21f58:	f101 0243 	add.w	r2, r1, #67	; 0x43
   21f5c:	2101      	movs	r1, #1
   21f5e:	601a      	str	r2, [r3, #0]
   21f60:	611a      	str	r2, [r3, #16]
   21f62:	6159      	str	r1, [r3, #20]
   21f64:	4770      	bx	lr
   21f66:	b5f0      	push	{r4, r5, r6, r7, lr}
   21f68:	b083      	sub	sp, #12
   21f6a:	ab01      	add	r3, sp, #4
   21f6c:	466a      	mov	r2, sp
   21f6e:	460c      	mov	r4, r1
   21f70:	4606      	mov	r6, r0
   21f72:	f7ff ffbf 	bl	21ef4 <__swhatbuf_r>
   21f76:	9900      	ldr	r1, [sp, #0]
   21f78:	4605      	mov	r5, r0
   21f7a:	4630      	mov	r0, r6
   21f7c:	f7fc f876 	bl	1e06c <_malloc_r>
   21f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21f84:	b1d8      	cbz	r0, 21fbe <__smakebuf_r+0x6e>
   21f86:	9a01      	ldr	r2, [sp, #4]
   21f88:	4f15      	ldr	r7, [pc, #84]	; (21fe0 <__smakebuf_r+0x90>)
   21f8a:	9900      	ldr	r1, [sp, #0]
   21f8c:	63f7      	str	r7, [r6, #60]	; 0x3c
   21f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21f92:	81a3      	strh	r3, [r4, #12]
   21f94:	6020      	str	r0, [r4, #0]
   21f96:	6120      	str	r0, [r4, #16]
   21f98:	6161      	str	r1, [r4, #20]
   21f9a:	b91a      	cbnz	r2, 21fa4 <__smakebuf_r+0x54>
   21f9c:	432b      	orrs	r3, r5
   21f9e:	81a3      	strh	r3, [r4, #12]
   21fa0:	b003      	add	sp, #12
   21fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21fa4:	4630      	mov	r0, r6
   21fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21faa:	f000 fcf3 	bl	22994 <_isatty_r>
   21fae:	b1a0      	cbz	r0, 21fda <__smakebuf_r+0x8a>
   21fb0:	89a3      	ldrh	r3, [r4, #12]
   21fb2:	f023 0303 	bic.w	r3, r3, #3
   21fb6:	f043 0301 	orr.w	r3, r3, #1
   21fba:	b21b      	sxth	r3, r3
   21fbc:	e7ee      	b.n	21f9c <__smakebuf_r+0x4c>
   21fbe:	059a      	lsls	r2, r3, #22
   21fc0:	d4ee      	bmi.n	21fa0 <__smakebuf_r+0x50>
   21fc2:	f023 0303 	bic.w	r3, r3, #3
   21fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21fca:	f043 0302 	orr.w	r3, r3, #2
   21fce:	2101      	movs	r1, #1
   21fd0:	81a3      	strh	r3, [r4, #12]
   21fd2:	6022      	str	r2, [r4, #0]
   21fd4:	6122      	str	r2, [r4, #16]
   21fd6:	6161      	str	r1, [r4, #20]
   21fd8:	e7e2      	b.n	21fa0 <__smakebuf_r+0x50>
   21fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21fde:	e7dd      	b.n	21f9c <__smakebuf_r+0x4c>
   21fe0:	00021b19 	.word	0x00021b19

00021fe4 <_Balloc>:
   21fe4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21fe6:	b570      	push	{r4, r5, r6, lr}
   21fe8:	4605      	mov	r5, r0
   21fea:	460c      	mov	r4, r1
   21fec:	b14b      	cbz	r3, 22002 <_Balloc+0x1e>
   21fee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   21ff2:	b180      	cbz	r0, 22016 <_Balloc+0x32>
   21ff4:	6802      	ldr	r2, [r0, #0]
   21ff6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   21ffa:	2300      	movs	r3, #0
   21ffc:	6103      	str	r3, [r0, #16]
   21ffe:	60c3      	str	r3, [r0, #12]
   22000:	bd70      	pop	{r4, r5, r6, pc}
   22002:	2221      	movs	r2, #33	; 0x21
   22004:	2104      	movs	r1, #4
   22006:	f000 fc0d 	bl	22824 <_calloc_r>
   2200a:	64e8      	str	r0, [r5, #76]	; 0x4c
   2200c:	4603      	mov	r3, r0
   2200e:	2800      	cmp	r0, #0
   22010:	d1ed      	bne.n	21fee <_Balloc+0xa>
   22012:	2000      	movs	r0, #0
   22014:	bd70      	pop	{r4, r5, r6, pc}
   22016:	2101      	movs	r1, #1
   22018:	fa01 f604 	lsl.w	r6, r1, r4
   2201c:	1d72      	adds	r2, r6, #5
   2201e:	4628      	mov	r0, r5
   22020:	0092      	lsls	r2, r2, #2
   22022:	f000 fbff 	bl	22824 <_calloc_r>
   22026:	2800      	cmp	r0, #0
   22028:	d0f3      	beq.n	22012 <_Balloc+0x2e>
   2202a:	6044      	str	r4, [r0, #4]
   2202c:	6086      	str	r6, [r0, #8]
   2202e:	e7e4      	b.n	21ffa <_Balloc+0x16>

00022030 <_Bfree>:
   22030:	b131      	cbz	r1, 22040 <_Bfree+0x10>
   22032:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   22034:	684a      	ldr	r2, [r1, #4]
   22036:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2203a:	6008      	str	r0, [r1, #0]
   2203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   22040:	4770      	bx	lr
   22042:	bf00      	nop

00022044 <__multadd>:
   22044:	b5f0      	push	{r4, r5, r6, r7, lr}
   22046:	690c      	ldr	r4, [r1, #16]
   22048:	b083      	sub	sp, #12
   2204a:	460d      	mov	r5, r1
   2204c:	4606      	mov	r6, r0
   2204e:	f101 0e14 	add.w	lr, r1, #20
   22052:	2700      	movs	r7, #0
   22054:	f8de 0000 	ldr.w	r0, [lr]
   22058:	b281      	uxth	r1, r0
   2205a:	fb02 3301 	mla	r3, r2, r1, r3
   2205e:	0c01      	lsrs	r1, r0, #16
   22060:	0c18      	lsrs	r0, r3, #16
   22062:	fb02 0101 	mla	r1, r2, r1, r0
   22066:	b29b      	uxth	r3, r3
   22068:	3701      	adds	r7, #1
   2206a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2206e:	42bc      	cmp	r4, r7
   22070:	f84e 3b04 	str.w	r3, [lr], #4
   22074:	ea4f 4311 	mov.w	r3, r1, lsr #16
   22078:	dcec      	bgt.n	22054 <__multadd+0x10>
   2207a:	b13b      	cbz	r3, 2208c <__multadd+0x48>
   2207c:	68aa      	ldr	r2, [r5, #8]
   2207e:	4294      	cmp	r4, r2
   22080:	da07      	bge.n	22092 <__multadd+0x4e>
   22082:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   22086:	3401      	adds	r4, #1
   22088:	6153      	str	r3, [r2, #20]
   2208a:	612c      	str	r4, [r5, #16]
   2208c:	4628      	mov	r0, r5
   2208e:	b003      	add	sp, #12
   22090:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22092:	6869      	ldr	r1, [r5, #4]
   22094:	9301      	str	r3, [sp, #4]
   22096:	3101      	adds	r1, #1
   22098:	4630      	mov	r0, r6
   2209a:	f7ff ffa3 	bl	21fe4 <_Balloc>
   2209e:	692a      	ldr	r2, [r5, #16]
   220a0:	3202      	adds	r2, #2
   220a2:	f105 010c 	add.w	r1, r5, #12
   220a6:	4607      	mov	r7, r0
   220a8:	0092      	lsls	r2, r2, #2
   220aa:	300c      	adds	r0, #12
   220ac:	f7fc fb28 	bl	1e700 <memcpy>
   220b0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   220b2:	6869      	ldr	r1, [r5, #4]
   220b4:	9b01      	ldr	r3, [sp, #4]
   220b6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   220ba:	6028      	str	r0, [r5, #0]
   220bc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   220c0:	463d      	mov	r5, r7
   220c2:	e7de      	b.n	22082 <__multadd+0x3e>

000220c4 <__hi0bits>:
   220c4:	0c02      	lsrs	r2, r0, #16
   220c6:	0412      	lsls	r2, r2, #16
   220c8:	4603      	mov	r3, r0
   220ca:	b9b2      	cbnz	r2, 220fa <__hi0bits+0x36>
   220cc:	0403      	lsls	r3, r0, #16
   220ce:	2010      	movs	r0, #16
   220d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   220d4:	bf04      	itt	eq
   220d6:	021b      	lsleq	r3, r3, #8
   220d8:	3008      	addeq	r0, #8
   220da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   220de:	bf04      	itt	eq
   220e0:	011b      	lsleq	r3, r3, #4
   220e2:	3004      	addeq	r0, #4
   220e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   220e8:	bf04      	itt	eq
   220ea:	009b      	lsleq	r3, r3, #2
   220ec:	3002      	addeq	r0, #2
   220ee:	2b00      	cmp	r3, #0
   220f0:	db02      	blt.n	220f8 <__hi0bits+0x34>
   220f2:	005b      	lsls	r3, r3, #1
   220f4:	d403      	bmi.n	220fe <__hi0bits+0x3a>
   220f6:	2020      	movs	r0, #32
   220f8:	4770      	bx	lr
   220fa:	2000      	movs	r0, #0
   220fc:	e7e8      	b.n	220d0 <__hi0bits+0xc>
   220fe:	3001      	adds	r0, #1
   22100:	4770      	bx	lr
   22102:	bf00      	nop

00022104 <__lo0bits>:
   22104:	6803      	ldr	r3, [r0, #0]
   22106:	f013 0207 	ands.w	r2, r3, #7
   2210a:	4601      	mov	r1, r0
   2210c:	d007      	beq.n	2211e <__lo0bits+0x1a>
   2210e:	07da      	lsls	r2, r3, #31
   22110:	d421      	bmi.n	22156 <__lo0bits+0x52>
   22112:	0798      	lsls	r0, r3, #30
   22114:	d421      	bmi.n	2215a <__lo0bits+0x56>
   22116:	089b      	lsrs	r3, r3, #2
   22118:	600b      	str	r3, [r1, #0]
   2211a:	2002      	movs	r0, #2
   2211c:	4770      	bx	lr
   2211e:	b298      	uxth	r0, r3
   22120:	b198      	cbz	r0, 2214a <__lo0bits+0x46>
   22122:	4610      	mov	r0, r2
   22124:	f013 0fff 	tst.w	r3, #255	; 0xff
   22128:	bf04      	itt	eq
   2212a:	0a1b      	lsreq	r3, r3, #8
   2212c:	3008      	addeq	r0, #8
   2212e:	071a      	lsls	r2, r3, #28
   22130:	bf04      	itt	eq
   22132:	091b      	lsreq	r3, r3, #4
   22134:	3004      	addeq	r0, #4
   22136:	079a      	lsls	r2, r3, #30
   22138:	bf04      	itt	eq
   2213a:	089b      	lsreq	r3, r3, #2
   2213c:	3002      	addeq	r0, #2
   2213e:	07da      	lsls	r2, r3, #31
   22140:	d407      	bmi.n	22152 <__lo0bits+0x4e>
   22142:	085b      	lsrs	r3, r3, #1
   22144:	d104      	bne.n	22150 <__lo0bits+0x4c>
   22146:	2020      	movs	r0, #32
   22148:	4770      	bx	lr
   2214a:	0c1b      	lsrs	r3, r3, #16
   2214c:	2010      	movs	r0, #16
   2214e:	e7e9      	b.n	22124 <__lo0bits+0x20>
   22150:	3001      	adds	r0, #1
   22152:	600b      	str	r3, [r1, #0]
   22154:	4770      	bx	lr
   22156:	2000      	movs	r0, #0
   22158:	4770      	bx	lr
   2215a:	085b      	lsrs	r3, r3, #1
   2215c:	600b      	str	r3, [r1, #0]
   2215e:	2001      	movs	r0, #1
   22160:	4770      	bx	lr
   22162:	bf00      	nop

00022164 <__i2b>:
   22164:	b510      	push	{r4, lr}
   22166:	460c      	mov	r4, r1
   22168:	2101      	movs	r1, #1
   2216a:	f7ff ff3b 	bl	21fe4 <_Balloc>
   2216e:	2201      	movs	r2, #1
   22170:	6144      	str	r4, [r0, #20]
   22172:	6102      	str	r2, [r0, #16]
   22174:	bd10      	pop	{r4, pc}
   22176:	bf00      	nop

00022178 <__multiply>:
   22178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2217c:	690c      	ldr	r4, [r1, #16]
   2217e:	6915      	ldr	r5, [r2, #16]
   22180:	42ac      	cmp	r4, r5
   22182:	b083      	sub	sp, #12
   22184:	468b      	mov	fp, r1
   22186:	4616      	mov	r6, r2
   22188:	da04      	bge.n	22194 <__multiply+0x1c>
   2218a:	4622      	mov	r2, r4
   2218c:	46b3      	mov	fp, r6
   2218e:	462c      	mov	r4, r5
   22190:	460e      	mov	r6, r1
   22192:	4615      	mov	r5, r2
   22194:	f8db 3008 	ldr.w	r3, [fp, #8]
   22198:	f8db 1004 	ldr.w	r1, [fp, #4]
   2219c:	eb04 0805 	add.w	r8, r4, r5
   221a0:	4598      	cmp	r8, r3
   221a2:	bfc8      	it	gt
   221a4:	3101      	addgt	r1, #1
   221a6:	f7ff ff1d 	bl	21fe4 <_Balloc>
   221aa:	f100 0914 	add.w	r9, r0, #20
   221ae:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   221b2:	45d1      	cmp	r9, sl
   221b4:	9000      	str	r0, [sp, #0]
   221b6:	d205      	bcs.n	221c4 <__multiply+0x4c>
   221b8:	464b      	mov	r3, r9
   221ba:	2100      	movs	r1, #0
   221bc:	f843 1b04 	str.w	r1, [r3], #4
   221c0:	459a      	cmp	sl, r3
   221c2:	d8fb      	bhi.n	221bc <__multiply+0x44>
   221c4:	f106 0c14 	add.w	ip, r6, #20
   221c8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   221cc:	f10b 0b14 	add.w	fp, fp, #20
   221d0:	459c      	cmp	ip, r3
   221d2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   221d6:	d24c      	bcs.n	22272 <__multiply+0xfa>
   221d8:	f8cd a004 	str.w	sl, [sp, #4]
   221dc:	469a      	mov	sl, r3
   221de:	f8dc 5000 	ldr.w	r5, [ip]
   221e2:	b2af      	uxth	r7, r5
   221e4:	b1ef      	cbz	r7, 22222 <__multiply+0xaa>
   221e6:	2100      	movs	r1, #0
   221e8:	464d      	mov	r5, r9
   221ea:	465e      	mov	r6, fp
   221ec:	460c      	mov	r4, r1
   221ee:	f856 2b04 	ldr.w	r2, [r6], #4
   221f2:	6828      	ldr	r0, [r5, #0]
   221f4:	b293      	uxth	r3, r2
   221f6:	b281      	uxth	r1, r0
   221f8:	fb07 1303 	mla	r3, r7, r3, r1
   221fc:	0c12      	lsrs	r2, r2, #16
   221fe:	0c01      	lsrs	r1, r0, #16
   22200:	4423      	add	r3, r4
   22202:	fb07 1102 	mla	r1, r7, r2, r1
   22206:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2220a:	b29b      	uxth	r3, r3
   2220c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   22210:	45b6      	cmp	lr, r6
   22212:	f845 3b04 	str.w	r3, [r5], #4
   22216:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2221a:	d8e8      	bhi.n	221ee <__multiply+0x76>
   2221c:	602c      	str	r4, [r5, #0]
   2221e:	f8dc 5000 	ldr.w	r5, [ip]
   22222:	0c2d      	lsrs	r5, r5, #16
   22224:	d01d      	beq.n	22262 <__multiply+0xea>
   22226:	f8d9 3000 	ldr.w	r3, [r9]
   2222a:	4648      	mov	r0, r9
   2222c:	461c      	mov	r4, r3
   2222e:	4659      	mov	r1, fp
   22230:	2200      	movs	r2, #0
   22232:	880e      	ldrh	r6, [r1, #0]
   22234:	0c24      	lsrs	r4, r4, #16
   22236:	fb05 4406 	mla	r4, r5, r6, r4
   2223a:	4422      	add	r2, r4
   2223c:	b29b      	uxth	r3, r3
   2223e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   22242:	f840 3b04 	str.w	r3, [r0], #4
   22246:	f851 3b04 	ldr.w	r3, [r1], #4
   2224a:	6804      	ldr	r4, [r0, #0]
   2224c:	0c1b      	lsrs	r3, r3, #16
   2224e:	b2a6      	uxth	r6, r4
   22250:	fb05 6303 	mla	r3, r5, r3, r6
   22254:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   22258:	458e      	cmp	lr, r1
   2225a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2225e:	d8e8      	bhi.n	22232 <__multiply+0xba>
   22260:	6003      	str	r3, [r0, #0]
   22262:	f10c 0c04 	add.w	ip, ip, #4
   22266:	45e2      	cmp	sl, ip
   22268:	f109 0904 	add.w	r9, r9, #4
   2226c:	d8b7      	bhi.n	221de <__multiply+0x66>
   2226e:	f8dd a004 	ldr.w	sl, [sp, #4]
   22272:	f1b8 0f00 	cmp.w	r8, #0
   22276:	dd0b      	ble.n	22290 <__multiply+0x118>
   22278:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2227c:	f1aa 0a04 	sub.w	sl, sl, #4
   22280:	b11b      	cbz	r3, 2228a <__multiply+0x112>
   22282:	e005      	b.n	22290 <__multiply+0x118>
   22284:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   22288:	b913      	cbnz	r3, 22290 <__multiply+0x118>
   2228a:	f1b8 0801 	subs.w	r8, r8, #1
   2228e:	d1f9      	bne.n	22284 <__multiply+0x10c>
   22290:	9800      	ldr	r0, [sp, #0]
   22292:	f8c0 8010 	str.w	r8, [r0, #16]
   22296:	b003      	add	sp, #12
   22298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002229c <__pow5mult>:
   2229c:	f012 0303 	ands.w	r3, r2, #3
   222a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   222a4:	4614      	mov	r4, r2
   222a6:	4607      	mov	r7, r0
   222a8:	d12e      	bne.n	22308 <__pow5mult+0x6c>
   222aa:	460d      	mov	r5, r1
   222ac:	10a4      	asrs	r4, r4, #2
   222ae:	d01c      	beq.n	222ea <__pow5mult+0x4e>
   222b0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   222b2:	b396      	cbz	r6, 2231a <__pow5mult+0x7e>
   222b4:	07e3      	lsls	r3, r4, #31
   222b6:	f04f 0800 	mov.w	r8, #0
   222ba:	d406      	bmi.n	222ca <__pow5mult+0x2e>
   222bc:	1064      	asrs	r4, r4, #1
   222be:	d014      	beq.n	222ea <__pow5mult+0x4e>
   222c0:	6830      	ldr	r0, [r6, #0]
   222c2:	b1a8      	cbz	r0, 222f0 <__pow5mult+0x54>
   222c4:	4606      	mov	r6, r0
   222c6:	07e3      	lsls	r3, r4, #31
   222c8:	d5f8      	bpl.n	222bc <__pow5mult+0x20>
   222ca:	4632      	mov	r2, r6
   222cc:	4629      	mov	r1, r5
   222ce:	4638      	mov	r0, r7
   222d0:	f7ff ff52 	bl	22178 <__multiply>
   222d4:	b1b5      	cbz	r5, 22304 <__pow5mult+0x68>
   222d6:	686a      	ldr	r2, [r5, #4]
   222d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   222da:	1064      	asrs	r4, r4, #1
   222dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   222e0:	6029      	str	r1, [r5, #0]
   222e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   222e6:	4605      	mov	r5, r0
   222e8:	d1ea      	bne.n	222c0 <__pow5mult+0x24>
   222ea:	4628      	mov	r0, r5
   222ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   222f0:	4632      	mov	r2, r6
   222f2:	4631      	mov	r1, r6
   222f4:	4638      	mov	r0, r7
   222f6:	f7ff ff3f 	bl	22178 <__multiply>
   222fa:	6030      	str	r0, [r6, #0]
   222fc:	f8c0 8000 	str.w	r8, [r0]
   22300:	4606      	mov	r6, r0
   22302:	e7e0      	b.n	222c6 <__pow5mult+0x2a>
   22304:	4605      	mov	r5, r0
   22306:	e7d9      	b.n	222bc <__pow5mult+0x20>
   22308:	1e5a      	subs	r2, r3, #1
   2230a:	4d0b      	ldr	r5, [pc, #44]	; (22338 <__pow5mult+0x9c>)
   2230c:	2300      	movs	r3, #0
   2230e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   22312:	f7ff fe97 	bl	22044 <__multadd>
   22316:	4605      	mov	r5, r0
   22318:	e7c8      	b.n	222ac <__pow5mult+0x10>
   2231a:	2101      	movs	r1, #1
   2231c:	4638      	mov	r0, r7
   2231e:	f7ff fe61 	bl	21fe4 <_Balloc>
   22322:	f240 2171 	movw	r1, #625	; 0x271
   22326:	2201      	movs	r2, #1
   22328:	2300      	movs	r3, #0
   2232a:	6141      	str	r1, [r0, #20]
   2232c:	6102      	str	r2, [r0, #16]
   2232e:	4606      	mov	r6, r0
   22330:	64b8      	str	r0, [r7, #72]	; 0x48
   22332:	6003      	str	r3, [r0, #0]
   22334:	e7be      	b.n	222b4 <__pow5mult+0x18>
   22336:	bf00      	nop
   22338:	000252e0 	.word	0x000252e0

0002233c <__lshift>:
   2233c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22340:	4691      	mov	r9, r2
   22342:	690a      	ldr	r2, [r1, #16]
   22344:	688b      	ldr	r3, [r1, #8]
   22346:	ea4f 1469 	mov.w	r4, r9, asr #5
   2234a:	eb04 0802 	add.w	r8, r4, r2
   2234e:	f108 0501 	add.w	r5, r8, #1
   22352:	429d      	cmp	r5, r3
   22354:	460e      	mov	r6, r1
   22356:	4607      	mov	r7, r0
   22358:	6849      	ldr	r1, [r1, #4]
   2235a:	dd04      	ble.n	22366 <__lshift+0x2a>
   2235c:	005b      	lsls	r3, r3, #1
   2235e:	429d      	cmp	r5, r3
   22360:	f101 0101 	add.w	r1, r1, #1
   22364:	dcfa      	bgt.n	2235c <__lshift+0x20>
   22366:	4638      	mov	r0, r7
   22368:	f7ff fe3c 	bl	21fe4 <_Balloc>
   2236c:	2c00      	cmp	r4, #0
   2236e:	f100 0314 	add.w	r3, r0, #20
   22372:	dd06      	ble.n	22382 <__lshift+0x46>
   22374:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   22378:	2100      	movs	r1, #0
   2237a:	f843 1b04 	str.w	r1, [r3], #4
   2237e:	429a      	cmp	r2, r3
   22380:	d1fb      	bne.n	2237a <__lshift+0x3e>
   22382:	6934      	ldr	r4, [r6, #16]
   22384:	f106 0114 	add.w	r1, r6, #20
   22388:	f019 091f 	ands.w	r9, r9, #31
   2238c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   22390:	d01d      	beq.n	223ce <__lshift+0x92>
   22392:	f1c9 0c20 	rsb	ip, r9, #32
   22396:	2200      	movs	r2, #0
   22398:	680c      	ldr	r4, [r1, #0]
   2239a:	fa04 f409 	lsl.w	r4, r4, r9
   2239e:	4314      	orrs	r4, r2
   223a0:	f843 4b04 	str.w	r4, [r3], #4
   223a4:	f851 2b04 	ldr.w	r2, [r1], #4
   223a8:	458e      	cmp	lr, r1
   223aa:	fa22 f20c 	lsr.w	r2, r2, ip
   223ae:	d8f3      	bhi.n	22398 <__lshift+0x5c>
   223b0:	601a      	str	r2, [r3, #0]
   223b2:	b10a      	cbz	r2, 223b8 <__lshift+0x7c>
   223b4:	f108 0502 	add.w	r5, r8, #2
   223b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   223ba:	6872      	ldr	r2, [r6, #4]
   223bc:	3d01      	subs	r5, #1
   223be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   223c2:	6105      	str	r5, [r0, #16]
   223c4:	6031      	str	r1, [r6, #0]
   223c6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   223ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   223ce:	3b04      	subs	r3, #4
   223d0:	f851 2b04 	ldr.w	r2, [r1], #4
   223d4:	f843 2f04 	str.w	r2, [r3, #4]!
   223d8:	458e      	cmp	lr, r1
   223da:	d8f9      	bhi.n	223d0 <__lshift+0x94>
   223dc:	e7ec      	b.n	223b8 <__lshift+0x7c>
   223de:	bf00      	nop

000223e0 <__mcmp>:
   223e0:	b430      	push	{r4, r5}
   223e2:	690b      	ldr	r3, [r1, #16]
   223e4:	4605      	mov	r5, r0
   223e6:	6900      	ldr	r0, [r0, #16]
   223e8:	1ac0      	subs	r0, r0, r3
   223ea:	d10f      	bne.n	2240c <__mcmp+0x2c>
   223ec:	009b      	lsls	r3, r3, #2
   223ee:	3514      	adds	r5, #20
   223f0:	3114      	adds	r1, #20
   223f2:	4419      	add	r1, r3
   223f4:	442b      	add	r3, r5
   223f6:	e001      	b.n	223fc <__mcmp+0x1c>
   223f8:	429d      	cmp	r5, r3
   223fa:	d207      	bcs.n	2240c <__mcmp+0x2c>
   223fc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   22400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   22404:	4294      	cmp	r4, r2
   22406:	d0f7      	beq.n	223f8 <__mcmp+0x18>
   22408:	d302      	bcc.n	22410 <__mcmp+0x30>
   2240a:	2001      	movs	r0, #1
   2240c:	bc30      	pop	{r4, r5}
   2240e:	4770      	bx	lr
   22410:	f04f 30ff 	mov.w	r0, #4294967295
   22414:	e7fa      	b.n	2240c <__mcmp+0x2c>
   22416:	bf00      	nop

00022418 <__mdiff>:
   22418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2241c:	690f      	ldr	r7, [r1, #16]
   2241e:	460e      	mov	r6, r1
   22420:	6911      	ldr	r1, [r2, #16]
   22422:	1a7f      	subs	r7, r7, r1
   22424:	2f00      	cmp	r7, #0
   22426:	4690      	mov	r8, r2
   22428:	d117      	bne.n	2245a <__mdiff+0x42>
   2242a:	0089      	lsls	r1, r1, #2
   2242c:	f106 0514 	add.w	r5, r6, #20
   22430:	f102 0e14 	add.w	lr, r2, #20
   22434:	186b      	adds	r3, r5, r1
   22436:	4471      	add	r1, lr
   22438:	e001      	b.n	2243e <__mdiff+0x26>
   2243a:	429d      	cmp	r5, r3
   2243c:	d25c      	bcs.n	224f8 <__mdiff+0xe0>
   2243e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22442:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   22446:	42a2      	cmp	r2, r4
   22448:	d0f7      	beq.n	2243a <__mdiff+0x22>
   2244a:	d25e      	bcs.n	2250a <__mdiff+0xf2>
   2244c:	4633      	mov	r3, r6
   2244e:	462c      	mov	r4, r5
   22450:	4646      	mov	r6, r8
   22452:	4675      	mov	r5, lr
   22454:	4698      	mov	r8, r3
   22456:	2701      	movs	r7, #1
   22458:	e005      	b.n	22466 <__mdiff+0x4e>
   2245a:	db58      	blt.n	2250e <__mdiff+0xf6>
   2245c:	f106 0514 	add.w	r5, r6, #20
   22460:	f108 0414 	add.w	r4, r8, #20
   22464:	2700      	movs	r7, #0
   22466:	6871      	ldr	r1, [r6, #4]
   22468:	f7ff fdbc 	bl	21fe4 <_Balloc>
   2246c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22470:	6936      	ldr	r6, [r6, #16]
   22472:	60c7      	str	r7, [r0, #12]
   22474:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   22478:	46a6      	mov	lr, r4
   2247a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2247e:	f100 0414 	add.w	r4, r0, #20
   22482:	2300      	movs	r3, #0
   22484:	f85e 1b04 	ldr.w	r1, [lr], #4
   22488:	f855 8b04 	ldr.w	r8, [r5], #4
   2248c:	b28a      	uxth	r2, r1
   2248e:	fa13 f388 	uxtah	r3, r3, r8
   22492:	0c09      	lsrs	r1, r1, #16
   22494:	1a9a      	subs	r2, r3, r2
   22496:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2249a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2249e:	b292      	uxth	r2, r2
   224a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   224a4:	45f4      	cmp	ip, lr
   224a6:	f844 2b04 	str.w	r2, [r4], #4
   224aa:	ea4f 4323 	mov.w	r3, r3, asr #16
   224ae:	d8e9      	bhi.n	22484 <__mdiff+0x6c>
   224b0:	42af      	cmp	r7, r5
   224b2:	d917      	bls.n	224e4 <__mdiff+0xcc>
   224b4:	46a4      	mov	ip, r4
   224b6:	46ae      	mov	lr, r5
   224b8:	f85e 2b04 	ldr.w	r2, [lr], #4
   224bc:	fa13 f382 	uxtah	r3, r3, r2
   224c0:	1419      	asrs	r1, r3, #16
   224c2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   224c6:	b29b      	uxth	r3, r3
   224c8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   224cc:	4577      	cmp	r7, lr
   224ce:	f84c 2b04 	str.w	r2, [ip], #4
   224d2:	ea4f 4321 	mov.w	r3, r1, asr #16
   224d6:	d8ef      	bhi.n	224b8 <__mdiff+0xa0>
   224d8:	43ed      	mvns	r5, r5
   224da:	442f      	add	r7, r5
   224dc:	f027 0703 	bic.w	r7, r7, #3
   224e0:	3704      	adds	r7, #4
   224e2:	443c      	add	r4, r7
   224e4:	3c04      	subs	r4, #4
   224e6:	b922      	cbnz	r2, 224f2 <__mdiff+0xda>
   224e8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   224ec:	3e01      	subs	r6, #1
   224ee:	2b00      	cmp	r3, #0
   224f0:	d0fa      	beq.n	224e8 <__mdiff+0xd0>
   224f2:	6106      	str	r6, [r0, #16]
   224f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   224f8:	2100      	movs	r1, #0
   224fa:	f7ff fd73 	bl	21fe4 <_Balloc>
   224fe:	2201      	movs	r2, #1
   22500:	2300      	movs	r3, #0
   22502:	6102      	str	r2, [r0, #16]
   22504:	6143      	str	r3, [r0, #20]
   22506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2250a:	4674      	mov	r4, lr
   2250c:	e7ab      	b.n	22466 <__mdiff+0x4e>
   2250e:	4633      	mov	r3, r6
   22510:	f106 0414 	add.w	r4, r6, #20
   22514:	f102 0514 	add.w	r5, r2, #20
   22518:	4616      	mov	r6, r2
   2251a:	2701      	movs	r7, #1
   2251c:	4698      	mov	r8, r3
   2251e:	e7a2      	b.n	22466 <__mdiff+0x4e>

00022520 <__d2b>:
   22520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22524:	ec57 6b10 	vmov	r6, r7, d0
   22528:	b083      	sub	sp, #12
   2252a:	4688      	mov	r8, r1
   2252c:	2101      	movs	r1, #1
   2252e:	463c      	mov	r4, r7
   22530:	f3c7 550a 	ubfx	r5, r7, #20, #11
   22534:	4617      	mov	r7, r2
   22536:	f7ff fd55 	bl	21fe4 <_Balloc>
   2253a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2253e:	4681      	mov	r9, r0
   22540:	b10d      	cbz	r5, 22546 <__d2b+0x26>
   22542:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   22546:	9401      	str	r4, [sp, #4]
   22548:	b31e      	cbz	r6, 22592 <__d2b+0x72>
   2254a:	a802      	add	r0, sp, #8
   2254c:	f840 6d08 	str.w	r6, [r0, #-8]!
   22550:	f7ff fdd8 	bl	22104 <__lo0bits>
   22554:	2800      	cmp	r0, #0
   22556:	d134      	bne.n	225c2 <__d2b+0xa2>
   22558:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2255c:	f8c9 2014 	str.w	r2, [r9, #20]
   22560:	2b00      	cmp	r3, #0
   22562:	bf0c      	ite	eq
   22564:	2101      	moveq	r1, #1
   22566:	2102      	movne	r1, #2
   22568:	f8c9 3018 	str.w	r3, [r9, #24]
   2256c:	f8c9 1010 	str.w	r1, [r9, #16]
   22570:	b9dd      	cbnz	r5, 225aa <__d2b+0x8a>
   22572:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   22576:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2257a:	f8c8 0000 	str.w	r0, [r8]
   2257e:	6918      	ldr	r0, [r3, #16]
   22580:	f7ff fda0 	bl	220c4 <__hi0bits>
   22584:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   22588:	6038      	str	r0, [r7, #0]
   2258a:	4648      	mov	r0, r9
   2258c:	b003      	add	sp, #12
   2258e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22592:	a801      	add	r0, sp, #4
   22594:	f7ff fdb6 	bl	22104 <__lo0bits>
   22598:	9b01      	ldr	r3, [sp, #4]
   2259a:	f8c9 3014 	str.w	r3, [r9, #20]
   2259e:	2101      	movs	r1, #1
   225a0:	3020      	adds	r0, #32
   225a2:	f8c9 1010 	str.w	r1, [r9, #16]
   225a6:	2d00      	cmp	r5, #0
   225a8:	d0e3      	beq.n	22572 <__d2b+0x52>
   225aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   225ae:	4405      	add	r5, r0
   225b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   225b4:	f8c8 5000 	str.w	r5, [r8]
   225b8:	6038      	str	r0, [r7, #0]
   225ba:	4648      	mov	r0, r9
   225bc:	b003      	add	sp, #12
   225be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   225c2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   225c6:	f1c0 0220 	rsb	r2, r0, #32
   225ca:	fa03 f202 	lsl.w	r2, r3, r2
   225ce:	430a      	orrs	r2, r1
   225d0:	40c3      	lsrs	r3, r0
   225d2:	9301      	str	r3, [sp, #4]
   225d4:	f8c9 2014 	str.w	r2, [r9, #20]
   225d8:	e7c2      	b.n	22560 <__d2b+0x40>
   225da:	bf00      	nop

000225dc <__sread>:
   225dc:	b510      	push	{r4, lr}
   225de:	460c      	mov	r4, r1
   225e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   225e4:	f000 f9fe 	bl	229e4 <_read_r>
   225e8:	2800      	cmp	r0, #0
   225ea:	db03      	blt.n	225f4 <__sread+0x18>
   225ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   225ee:	4403      	add	r3, r0
   225f0:	6523      	str	r3, [r4, #80]	; 0x50
   225f2:	bd10      	pop	{r4, pc}
   225f4:	89a3      	ldrh	r3, [r4, #12]
   225f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   225fa:	81a3      	strh	r3, [r4, #12]
   225fc:	bd10      	pop	{r4, pc}
   225fe:	bf00      	nop

00022600 <__swrite>:
   22600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22604:	4616      	mov	r6, r2
   22606:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2260a:	461f      	mov	r7, r3
   2260c:	05d3      	lsls	r3, r2, #23
   2260e:	460c      	mov	r4, r1
   22610:	4605      	mov	r5, r0
   22612:	d507      	bpl.n	22624 <__swrite+0x24>
   22614:	2200      	movs	r2, #0
   22616:	2302      	movs	r3, #2
   22618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2261c:	f000 f9cc 	bl	229b8 <_lseek_r>
   22620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22628:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   2262c:	81a2      	strh	r2, [r4, #12]
   2262e:	463b      	mov	r3, r7
   22630:	4632      	mov	r2, r6
   22632:	4628      	mov	r0, r5
   22634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22638:	f7fe b95e 	b.w	208f8 <_write_r>

0002263c <__sseek>:
   2263c:	b510      	push	{r4, lr}
   2263e:	460c      	mov	r4, r1
   22640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22644:	f000 f9b8 	bl	229b8 <_lseek_r>
   22648:	89a3      	ldrh	r3, [r4, #12]
   2264a:	1c42      	adds	r2, r0, #1
   2264c:	bf0e      	itee	eq
   2264e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   22652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   22656:	6520      	strne	r0, [r4, #80]	; 0x50
   22658:	81a3      	strh	r3, [r4, #12]
   2265a:	bd10      	pop	{r4, pc}

0002265c <__sclose>:
   2265c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22660:	f000 b910 	b.w	22884 <_close_r>

00022664 <__ssprint_r>:
   22664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22668:	6893      	ldr	r3, [r2, #8]
   2266a:	b083      	sub	sp, #12
   2266c:	4690      	mov	r8, r2
   2266e:	2b00      	cmp	r3, #0
   22670:	d070      	beq.n	22754 <__ssprint_r+0xf0>
   22672:	4682      	mov	sl, r0
   22674:	460c      	mov	r4, r1
   22676:	6817      	ldr	r7, [r2, #0]
   22678:	688d      	ldr	r5, [r1, #8]
   2267a:	6808      	ldr	r0, [r1, #0]
   2267c:	e042      	b.n	22704 <__ssprint_r+0xa0>
   2267e:	89a3      	ldrh	r3, [r4, #12]
   22680:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22684:	d02e      	beq.n	226e4 <__ssprint_r+0x80>
   22686:	6965      	ldr	r5, [r4, #20]
   22688:	6921      	ldr	r1, [r4, #16]
   2268a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2268e:	eba0 0b01 	sub.w	fp, r0, r1
   22692:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22696:	f10b 0001 	add.w	r0, fp, #1
   2269a:	106d      	asrs	r5, r5, #1
   2269c:	4430      	add	r0, r6
   2269e:	42a8      	cmp	r0, r5
   226a0:	462a      	mov	r2, r5
   226a2:	bf84      	itt	hi
   226a4:	4605      	movhi	r5, r0
   226a6:	462a      	movhi	r2, r5
   226a8:	055b      	lsls	r3, r3, #21
   226aa:	d538      	bpl.n	2271e <__ssprint_r+0xba>
   226ac:	4611      	mov	r1, r2
   226ae:	4650      	mov	r0, sl
   226b0:	f7fb fcdc 	bl	1e06c <_malloc_r>
   226b4:	2800      	cmp	r0, #0
   226b6:	d03c      	beq.n	22732 <__ssprint_r+0xce>
   226b8:	465a      	mov	r2, fp
   226ba:	6921      	ldr	r1, [r4, #16]
   226bc:	9001      	str	r0, [sp, #4]
   226be:	f7fc f81f 	bl	1e700 <memcpy>
   226c2:	89a2      	ldrh	r2, [r4, #12]
   226c4:	9b01      	ldr	r3, [sp, #4]
   226c6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   226ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   226ce:	81a2      	strh	r2, [r4, #12]
   226d0:	eba5 020b 	sub.w	r2, r5, fp
   226d4:	eb03 000b 	add.w	r0, r3, fp
   226d8:	6165      	str	r5, [r4, #20]
   226da:	6123      	str	r3, [r4, #16]
   226dc:	6020      	str	r0, [r4, #0]
   226de:	60a2      	str	r2, [r4, #8]
   226e0:	4635      	mov	r5, r6
   226e2:	46b3      	mov	fp, r6
   226e4:	465a      	mov	r2, fp
   226e6:	4649      	mov	r1, r9
   226e8:	f7fc f8a4 	bl	1e834 <memmove>
   226ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   226f0:	68a2      	ldr	r2, [r4, #8]
   226f2:	6820      	ldr	r0, [r4, #0]
   226f4:	1b55      	subs	r5, r2, r5
   226f6:	4458      	add	r0, fp
   226f8:	1b9e      	subs	r6, r3, r6
   226fa:	60a5      	str	r5, [r4, #8]
   226fc:	6020      	str	r0, [r4, #0]
   226fe:	f8c8 6008 	str.w	r6, [r8, #8]
   22702:	b33e      	cbz	r6, 22754 <__ssprint_r+0xf0>
   22704:	687e      	ldr	r6, [r7, #4]
   22706:	463b      	mov	r3, r7
   22708:	3708      	adds	r7, #8
   2270a:	2e00      	cmp	r6, #0
   2270c:	d0fa      	beq.n	22704 <__ssprint_r+0xa0>
   2270e:	42ae      	cmp	r6, r5
   22710:	f8d3 9000 	ldr.w	r9, [r3]
   22714:	46ab      	mov	fp, r5
   22716:	d2b2      	bcs.n	2267e <__ssprint_r+0x1a>
   22718:	4635      	mov	r5, r6
   2271a:	46b3      	mov	fp, r6
   2271c:	e7e2      	b.n	226e4 <__ssprint_r+0x80>
   2271e:	4650      	mov	r0, sl
   22720:	f7fc f986 	bl	1ea30 <_realloc_r>
   22724:	4603      	mov	r3, r0
   22726:	2800      	cmp	r0, #0
   22728:	d1d2      	bne.n	226d0 <__ssprint_r+0x6c>
   2272a:	6921      	ldr	r1, [r4, #16]
   2272c:	4650      	mov	r0, sl
   2272e:	f7ff fac3 	bl	21cb8 <_free_r>
   22732:	230c      	movs	r3, #12
   22734:	f8ca 3000 	str.w	r3, [sl]
   22738:	89a3      	ldrh	r3, [r4, #12]
   2273a:	2200      	movs	r2, #0
   2273c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22740:	f04f 30ff 	mov.w	r0, #4294967295
   22744:	81a3      	strh	r3, [r4, #12]
   22746:	f8c8 2008 	str.w	r2, [r8, #8]
   2274a:	f8c8 2004 	str.w	r2, [r8, #4]
   2274e:	b003      	add	sp, #12
   22750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22754:	2000      	movs	r0, #0
   22756:	f8c8 0004 	str.w	r0, [r8, #4]
   2275a:	b003      	add	sp, #12
   2275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022760 <__register_exitproc>:
   22760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22764:	4d2c      	ldr	r5, [pc, #176]	; (22818 <__register_exitproc+0xb8>)
   22766:	4606      	mov	r6, r0
   22768:	6828      	ldr	r0, [r5, #0]
   2276a:	4698      	mov	r8, r3
   2276c:	460f      	mov	r7, r1
   2276e:	4691      	mov	r9, r2
   22770:	f7fb fc68 	bl	1e044 <__retarget_lock_acquire_recursive>
   22774:	4b29      	ldr	r3, [pc, #164]	; (2281c <__register_exitproc+0xbc>)
   22776:	681c      	ldr	r4, [r3, #0]
   22778:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2277c:	2b00      	cmp	r3, #0
   2277e:	d03e      	beq.n	227fe <__register_exitproc+0x9e>
   22780:	685a      	ldr	r2, [r3, #4]
   22782:	2a1f      	cmp	r2, #31
   22784:	dc1c      	bgt.n	227c0 <__register_exitproc+0x60>
   22786:	f102 0e01 	add.w	lr, r2, #1
   2278a:	b176      	cbz	r6, 227aa <__register_exitproc+0x4a>
   2278c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22790:	2401      	movs	r4, #1
   22792:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22796:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2279a:	4094      	lsls	r4, r2
   2279c:	4320      	orrs	r0, r4
   2279e:	2e02      	cmp	r6, #2
   227a0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   227a4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   227a8:	d023      	beq.n	227f2 <__register_exitproc+0x92>
   227aa:	3202      	adds	r2, #2
   227ac:	f8c3 e004 	str.w	lr, [r3, #4]
   227b0:	6828      	ldr	r0, [r5, #0]
   227b2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   227b6:	f7fb fc47 	bl	1e048 <__retarget_lock_release_recursive>
   227ba:	2000      	movs	r0, #0
   227bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   227c0:	4b17      	ldr	r3, [pc, #92]	; (22820 <__register_exitproc+0xc0>)
   227c2:	b30b      	cbz	r3, 22808 <__register_exitproc+0xa8>
   227c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   227c8:	f7fb fc40 	bl	1e04c <malloc>
   227cc:	4603      	mov	r3, r0
   227ce:	b1d8      	cbz	r0, 22808 <__register_exitproc+0xa8>
   227d0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   227d4:	6002      	str	r2, [r0, #0]
   227d6:	2100      	movs	r1, #0
   227d8:	6041      	str	r1, [r0, #4]
   227da:	460a      	mov	r2, r1
   227dc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   227e0:	f04f 0e01 	mov.w	lr, #1
   227e4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   227e8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   227ec:	2e00      	cmp	r6, #0
   227ee:	d0dc      	beq.n	227aa <__register_exitproc+0x4a>
   227f0:	e7cc      	b.n	2278c <__register_exitproc+0x2c>
   227f2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   227f6:	430c      	orrs	r4, r1
   227f8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   227fc:	e7d5      	b.n	227aa <__register_exitproc+0x4a>
   227fe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   22802:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22806:	e7bb      	b.n	22780 <__register_exitproc+0x20>
   22808:	6828      	ldr	r0, [r5, #0]
   2280a:	f7fb fc1d 	bl	1e048 <__retarget_lock_release_recursive>
   2280e:	f04f 30ff 	mov.w	r0, #4294967295
   22812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22816:	bf00      	nop
   22818:	20000ab4 	.word	0x20000ab4
   2281c:	00025068 	.word	0x00025068
   22820:	0001e04d 	.word	0x0001e04d

00022824 <_calloc_r>:
   22824:	b510      	push	{r4, lr}
   22826:	fb02 f101 	mul.w	r1, r2, r1
   2282a:	f7fb fc1f 	bl	1e06c <_malloc_r>
   2282e:	4604      	mov	r4, r0
   22830:	b1d8      	cbz	r0, 2286a <_calloc_r+0x46>
   22832:	f850 2c04 	ldr.w	r2, [r0, #-4]
   22836:	f022 0203 	bic.w	r2, r2, #3
   2283a:	3a04      	subs	r2, #4
   2283c:	2a24      	cmp	r2, #36	; 0x24
   2283e:	d818      	bhi.n	22872 <_calloc_r+0x4e>
   22840:	2a13      	cmp	r2, #19
   22842:	d914      	bls.n	2286e <_calloc_r+0x4a>
   22844:	2300      	movs	r3, #0
   22846:	2a1b      	cmp	r2, #27
   22848:	6003      	str	r3, [r0, #0]
   2284a:	6043      	str	r3, [r0, #4]
   2284c:	d916      	bls.n	2287c <_calloc_r+0x58>
   2284e:	2a24      	cmp	r2, #36	; 0x24
   22850:	6083      	str	r3, [r0, #8]
   22852:	60c3      	str	r3, [r0, #12]
   22854:	bf11      	iteee	ne
   22856:	f100 0210 	addne.w	r2, r0, #16
   2285a:	6103      	streq	r3, [r0, #16]
   2285c:	6143      	streq	r3, [r0, #20]
   2285e:	f100 0218 	addeq.w	r2, r0, #24
   22862:	2300      	movs	r3, #0
   22864:	6013      	str	r3, [r2, #0]
   22866:	6053      	str	r3, [r2, #4]
   22868:	6093      	str	r3, [r2, #8]
   2286a:	4620      	mov	r0, r4
   2286c:	bd10      	pop	{r4, pc}
   2286e:	4602      	mov	r2, r0
   22870:	e7f7      	b.n	22862 <_calloc_r+0x3e>
   22872:	2100      	movs	r1, #0
   22874:	f7fc f842 	bl	1e8fc <memset>
   22878:	4620      	mov	r0, r4
   2287a:	bd10      	pop	{r4, pc}
   2287c:	f100 0208 	add.w	r2, r0, #8
   22880:	e7ef      	b.n	22862 <_calloc_r+0x3e>
   22882:	bf00      	nop

00022884 <_close_r>:
   22884:	b538      	push	{r3, r4, r5, lr}
   22886:	4c07      	ldr	r4, [pc, #28]	; (228a4 <_close_r+0x20>)
   22888:	2300      	movs	r3, #0
   2288a:	4605      	mov	r5, r0
   2288c:	4608      	mov	r0, r1
   2288e:	6023      	str	r3, [r4, #0]
   22890:	f000 f9ac 	bl	22bec <_close>
   22894:	1c43      	adds	r3, r0, #1
   22896:	d000      	beq.n	2289a <_close_r+0x16>
   22898:	bd38      	pop	{r3, r4, r5, pc}
   2289a:	6823      	ldr	r3, [r4, #0]
   2289c:	2b00      	cmp	r3, #0
   2289e:	d0fb      	beq.n	22898 <_close_r+0x14>
   228a0:	602b      	str	r3, [r5, #0]
   228a2:	bd38      	pop	{r3, r4, r5, pc}
   228a4:	200023ac 	.word	0x200023ac

000228a8 <_fclose_r>:
   228a8:	b570      	push	{r4, r5, r6, lr}
   228aa:	b159      	cbz	r1, 228c4 <_fclose_r+0x1c>
   228ac:	4605      	mov	r5, r0
   228ae:	460c      	mov	r4, r1
   228b0:	b110      	cbz	r0, 228b8 <_fclose_r+0x10>
   228b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   228b4:	2b00      	cmp	r3, #0
   228b6:	d03c      	beq.n	22932 <_fclose_r+0x8a>
   228b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   228ba:	07d8      	lsls	r0, r3, #31
   228bc:	d505      	bpl.n	228ca <_fclose_r+0x22>
   228be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   228c2:	b92b      	cbnz	r3, 228d0 <_fclose_r+0x28>
   228c4:	2600      	movs	r6, #0
   228c6:	4630      	mov	r0, r6
   228c8:	bd70      	pop	{r4, r5, r6, pc}
   228ca:	89a3      	ldrh	r3, [r4, #12]
   228cc:	0599      	lsls	r1, r3, #22
   228ce:	d53c      	bpl.n	2294a <_fclose_r+0xa2>
   228d0:	4621      	mov	r1, r4
   228d2:	4628      	mov	r0, r5
   228d4:	f7ff f856 	bl	21984 <__sflush_r>
   228d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   228da:	4606      	mov	r6, r0
   228dc:	b133      	cbz	r3, 228ec <_fclose_r+0x44>
   228de:	69e1      	ldr	r1, [r4, #28]
   228e0:	4628      	mov	r0, r5
   228e2:	4798      	blx	r3
   228e4:	2800      	cmp	r0, #0
   228e6:	bfb8      	it	lt
   228e8:	f04f 36ff 	movlt.w	r6, #4294967295
   228ec:	89a3      	ldrh	r3, [r4, #12]
   228ee:	061a      	lsls	r2, r3, #24
   228f0:	d422      	bmi.n	22938 <_fclose_r+0x90>
   228f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   228f4:	b141      	cbz	r1, 22908 <_fclose_r+0x60>
   228f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   228fa:	4299      	cmp	r1, r3
   228fc:	d002      	beq.n	22904 <_fclose_r+0x5c>
   228fe:	4628      	mov	r0, r5
   22900:	f7ff f9da 	bl	21cb8 <_free_r>
   22904:	2300      	movs	r3, #0
   22906:	6323      	str	r3, [r4, #48]	; 0x30
   22908:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2290a:	b121      	cbz	r1, 22916 <_fclose_r+0x6e>
   2290c:	4628      	mov	r0, r5
   2290e:	f7ff f9d3 	bl	21cb8 <_free_r>
   22912:	2300      	movs	r3, #0
   22914:	6463      	str	r3, [r4, #68]	; 0x44
   22916:	f7ff f959 	bl	21bcc <__sfp_lock_acquire>
   2291a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2291c:	2200      	movs	r2, #0
   2291e:	07db      	lsls	r3, r3, #31
   22920:	81a2      	strh	r2, [r4, #12]
   22922:	d50e      	bpl.n	22942 <_fclose_r+0x9a>
   22924:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22926:	f7fb fb8b 	bl	1e040 <__retarget_lock_close_recursive>
   2292a:	f7ff f955 	bl	21bd8 <__sfp_lock_release>
   2292e:	4630      	mov	r0, r6
   22930:	bd70      	pop	{r4, r5, r6, pc}
   22932:	f7ff f91f 	bl	21b74 <__sinit>
   22936:	e7bf      	b.n	228b8 <_fclose_r+0x10>
   22938:	6921      	ldr	r1, [r4, #16]
   2293a:	4628      	mov	r0, r5
   2293c:	f7ff f9bc 	bl	21cb8 <_free_r>
   22940:	e7d7      	b.n	228f2 <_fclose_r+0x4a>
   22942:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22944:	f7fb fb80 	bl	1e048 <__retarget_lock_release_recursive>
   22948:	e7ec      	b.n	22924 <_fclose_r+0x7c>
   2294a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2294c:	f7fb fb7a 	bl	1e044 <__retarget_lock_acquire_recursive>
   22950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22954:	2b00      	cmp	r3, #0
   22956:	d1bb      	bne.n	228d0 <_fclose_r+0x28>
   22958:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2295a:	f016 0601 	ands.w	r6, r6, #1
   2295e:	d1b1      	bne.n	228c4 <_fclose_r+0x1c>
   22960:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22962:	f7fb fb71 	bl	1e048 <__retarget_lock_release_recursive>
   22966:	4630      	mov	r0, r6
   22968:	bd70      	pop	{r4, r5, r6, pc}
   2296a:	bf00      	nop

0002296c <_fstat_r>:
   2296c:	b538      	push	{r3, r4, r5, lr}
   2296e:	460b      	mov	r3, r1
   22970:	4c07      	ldr	r4, [pc, #28]	; (22990 <_fstat_r+0x24>)
   22972:	4605      	mov	r5, r0
   22974:	4611      	mov	r1, r2
   22976:	4618      	mov	r0, r3
   22978:	2300      	movs	r3, #0
   2297a:	6023      	str	r3, [r4, #0]
   2297c:	f000 f9b4 	bl	22ce8 <_fstat>
   22980:	1c43      	adds	r3, r0, #1
   22982:	d000      	beq.n	22986 <_fstat_r+0x1a>
   22984:	bd38      	pop	{r3, r4, r5, pc}
   22986:	6823      	ldr	r3, [r4, #0]
   22988:	2b00      	cmp	r3, #0
   2298a:	d0fb      	beq.n	22984 <_fstat_r+0x18>
   2298c:	602b      	str	r3, [r5, #0]
   2298e:	bd38      	pop	{r3, r4, r5, pc}
   22990:	200023ac 	.word	0x200023ac

00022994 <_isatty_r>:
   22994:	b538      	push	{r3, r4, r5, lr}
   22996:	4c07      	ldr	r4, [pc, #28]	; (229b4 <_isatty_r+0x20>)
   22998:	2300      	movs	r3, #0
   2299a:	4605      	mov	r5, r0
   2299c:	4608      	mov	r0, r1
   2299e:	6023      	str	r3, [r4, #0]
   229a0:	f000 f9b0 	bl	22d04 <_isatty>
   229a4:	1c43      	adds	r3, r0, #1
   229a6:	d000      	beq.n	229aa <_isatty_r+0x16>
   229a8:	bd38      	pop	{r3, r4, r5, pc}
   229aa:	6823      	ldr	r3, [r4, #0]
   229ac:	2b00      	cmp	r3, #0
   229ae:	d0fb      	beq.n	229a8 <_isatty_r+0x14>
   229b0:	602b      	str	r3, [r5, #0]
   229b2:	bd38      	pop	{r3, r4, r5, pc}
   229b4:	200023ac 	.word	0x200023ac

000229b8 <_lseek_r>:
   229b8:	b570      	push	{r4, r5, r6, lr}
   229ba:	460d      	mov	r5, r1
   229bc:	4c08      	ldr	r4, [pc, #32]	; (229e0 <_lseek_r+0x28>)
   229be:	4611      	mov	r1, r2
   229c0:	4606      	mov	r6, r0
   229c2:	461a      	mov	r2, r3
   229c4:	4628      	mov	r0, r5
   229c6:	2300      	movs	r3, #0
   229c8:	6023      	str	r3, [r4, #0]
   229ca:	f000 f8d3 	bl	22b74 <_lseek>
   229ce:	1c43      	adds	r3, r0, #1
   229d0:	d000      	beq.n	229d4 <_lseek_r+0x1c>
   229d2:	bd70      	pop	{r4, r5, r6, pc}
   229d4:	6823      	ldr	r3, [r4, #0]
   229d6:	2b00      	cmp	r3, #0
   229d8:	d0fb      	beq.n	229d2 <_lseek_r+0x1a>
   229da:	6033      	str	r3, [r6, #0]
   229dc:	bd70      	pop	{r4, r5, r6, pc}
   229de:	bf00      	nop
   229e0:	200023ac 	.word	0x200023ac

000229e4 <_read_r>:
   229e4:	b570      	push	{r4, r5, r6, lr}
   229e6:	460d      	mov	r5, r1
   229e8:	4c08      	ldr	r4, [pc, #32]	; (22a0c <_read_r+0x28>)
   229ea:	4611      	mov	r1, r2
   229ec:	4606      	mov	r6, r0
   229ee:	461a      	mov	r2, r3
   229f0:	4628      	mov	r0, r5
   229f2:	2300      	movs	r3, #0
   229f4:	6023      	str	r3, [r4, #0]
   229f6:	f000 f84b 	bl	22a90 <_read>
   229fa:	1c43      	adds	r3, r0, #1
   229fc:	d000      	beq.n	22a00 <_read_r+0x1c>
   229fe:	bd70      	pop	{r4, r5, r6, pc}
   22a00:	6823      	ldr	r3, [r4, #0]
   22a02:	2b00      	cmp	r3, #0
   22a04:	d0fb      	beq.n	229fe <_read_r+0x1a>
   22a06:	6033      	str	r3, [r6, #0]
   22a08:	bd70      	pop	{r4, r5, r6, pc}
   22a0a:	bf00      	nop
   22a0c:	200023ac 	.word	0x200023ac

00022a10 <__aeabi_dcmpun>:
   22a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   22a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22a18:	d102      	bne.n	22a20 <__aeabi_dcmpun+0x10>
   22a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   22a1e:	d10a      	bne.n	22a36 <__aeabi_dcmpun+0x26>
   22a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   22a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22a28:	d102      	bne.n	22a30 <__aeabi_dcmpun+0x20>
   22a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   22a2e:	d102      	bne.n	22a36 <__aeabi_dcmpun+0x26>
   22a30:	f04f 0000 	mov.w	r0, #0
   22a34:	4770      	bx	lr
   22a36:	f04f 0001 	mov.w	r0, #1
   22a3a:	4770      	bx	lr

00022a3c <findslot>:
   22a3c:	4b0b      	ldr	r3, [pc, #44]	; (22a6c <findslot+0x30>)
   22a3e:	681b      	ldr	r3, [r3, #0]
   22a40:	b510      	push	{r4, lr}
   22a42:	4604      	mov	r4, r0
   22a44:	b10b      	cbz	r3, 22a4a <findslot+0xe>
   22a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22a48:	b14a      	cbz	r2, 22a5e <findslot+0x22>
   22a4a:	2c13      	cmp	r4, #19
   22a4c:	d80c      	bhi.n	22a68 <findslot+0x2c>
   22a4e:	4808      	ldr	r0, [pc, #32]	; (22a70 <findslot+0x34>)
   22a50:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   22a54:	3301      	adds	r3, #1
   22a56:	d007      	beq.n	22a68 <findslot+0x2c>
   22a58:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   22a5c:	bd10      	pop	{r4, pc}
   22a5e:	4618      	mov	r0, r3
   22a60:	f7ff f888 	bl	21b74 <__sinit>
   22a64:	2c13      	cmp	r4, #19
   22a66:	d9f2      	bls.n	22a4e <findslot+0x12>
   22a68:	2000      	movs	r0, #0
   22a6a:	bd10      	pop	{r4, pc}
   22a6c:	20000108 	.word	0x20000108
   22a70:	200022e8 	.word	0x200022e8

00022a74 <checkerror.part.0>:
   22a74:	b570      	push	{r4, r5, r6, lr}
   22a76:	f7fb f85d 	bl	1db34 <__errno>
   22a7a:	2413      	movs	r4, #19
   22a7c:	4605      	mov	r5, r0
   22a7e:	2600      	movs	r6, #0
   22a80:	4620      	mov	r0, r4
   22a82:	4631      	mov	r1, r6
   22a84:	beab      	bkpt	0x00ab
   22a86:	4604      	mov	r4, r0
   22a88:	f04f 30ff 	mov.w	r0, #4294967295
   22a8c:	602c      	str	r4, [r5, #0]
   22a8e:	bd70      	pop	{r4, r5, r6, pc}

00022a90 <_read>:
   22a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a92:	b085      	sub	sp, #20
   22a94:	460c      	mov	r4, r1
   22a96:	4616      	mov	r6, r2
   22a98:	f7ff ffd0 	bl	22a3c <findslot>
   22a9c:	b1c8      	cbz	r0, 22ad2 <_read+0x42>
   22a9e:	6803      	ldr	r3, [r0, #0]
   22aa0:	9301      	str	r3, [sp, #4]
   22aa2:	9402      	str	r4, [sp, #8]
   22aa4:	4605      	mov	r5, r0
   22aa6:	9603      	str	r6, [sp, #12]
   22aa8:	2406      	movs	r4, #6
   22aaa:	af01      	add	r7, sp, #4
   22aac:	4620      	mov	r0, r4
   22aae:	4639      	mov	r1, r7
   22ab0:	beab      	bkpt	0x00ab
   22ab2:	4604      	mov	r4, r0
   22ab4:	1c62      	adds	r2, r4, #1
   22ab6:	4620      	mov	r0, r4
   22ab8:	d005      	beq.n	22ac6 <_read+0x36>
   22aba:	686b      	ldr	r3, [r5, #4]
   22abc:	1a30      	subs	r0, r6, r0
   22abe:	4403      	add	r3, r0
   22ac0:	606b      	str	r3, [r5, #4]
   22ac2:	b005      	add	sp, #20
   22ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22ac6:	f7ff ffd5 	bl	22a74 <checkerror.part.0>
   22aca:	1c43      	adds	r3, r0, #1
   22acc:	d1f5      	bne.n	22aba <_read+0x2a>
   22ace:	b005      	add	sp, #20
   22ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22ad2:	f7fb f82f 	bl	1db34 <__errno>
   22ad6:	2309      	movs	r3, #9
   22ad8:	6003      	str	r3, [r0, #0]
   22ada:	f04f 30ff 	mov.w	r0, #4294967295
   22ade:	e7f0      	b.n	22ac2 <_read+0x32>

00022ae0 <_swilseek>:
   22ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ae2:	b083      	sub	sp, #12
   22ae4:	460d      	mov	r5, r1
   22ae6:	4614      	mov	r4, r2
   22ae8:	f7ff ffa8 	bl	22a3c <findslot>
   22aec:	2800      	cmp	r0, #0
   22aee:	d03a      	beq.n	22b66 <_swilseek+0x86>
   22af0:	2c02      	cmp	r4, #2
   22af2:	d825      	bhi.n	22b40 <_swilseek+0x60>
   22af4:	2c01      	cmp	r4, #1
   22af6:	4606      	mov	r6, r0
   22af8:	d01f      	beq.n	22b3a <_swilseek+0x5a>
   22afa:	2c02      	cmp	r4, #2
   22afc:	d010      	beq.n	22b20 <_swilseek+0x40>
   22afe:	466f      	mov	r7, sp
   22b00:	6833      	ldr	r3, [r6, #0]
   22b02:	240a      	movs	r4, #10
   22b04:	e88d 0028 	stmia.w	sp, {r3, r5}
   22b08:	4620      	mov	r0, r4
   22b0a:	4639      	mov	r1, r7
   22b0c:	beab      	bkpt	0x00ab
   22b0e:	4604      	mov	r4, r0
   22b10:	1c63      	adds	r3, r4, #1
   22b12:	d01c      	beq.n	22b4e <_swilseek+0x6e>
   22b14:	2c00      	cmp	r4, #0
   22b16:	db23      	blt.n	22b60 <_swilseek+0x80>
   22b18:	6075      	str	r5, [r6, #4]
   22b1a:	4628      	mov	r0, r5
   22b1c:	b003      	add	sp, #12
   22b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22b20:	af02      	add	r7, sp, #8
   22b22:	6803      	ldr	r3, [r0, #0]
   22b24:	f847 3d08 	str.w	r3, [r7, #-8]!
   22b28:	240c      	movs	r4, #12
   22b2a:	4620      	mov	r0, r4
   22b2c:	4639      	mov	r1, r7
   22b2e:	beab      	bkpt	0x00ab
   22b30:	4604      	mov	r4, r0
   22b32:	1c61      	adds	r1, r4, #1
   22b34:	d00f      	beq.n	22b56 <_swilseek+0x76>
   22b36:	4425      	add	r5, r4
   22b38:	e7e2      	b.n	22b00 <_swilseek+0x20>
   22b3a:	6840      	ldr	r0, [r0, #4]
   22b3c:	182d      	adds	r5, r5, r0
   22b3e:	d5de      	bpl.n	22afe <_swilseek+0x1e>
   22b40:	f7fa fff8 	bl	1db34 <__errno>
   22b44:	2316      	movs	r3, #22
   22b46:	6003      	str	r3, [r0, #0]
   22b48:	f04f 35ff 	mov.w	r5, #4294967295
   22b4c:	e7e5      	b.n	22b1a <_swilseek+0x3a>
   22b4e:	f7ff ff91 	bl	22a74 <checkerror.part.0>
   22b52:	4604      	mov	r4, r0
   22b54:	e7de      	b.n	22b14 <_swilseek+0x34>
   22b56:	f7ff ff8d 	bl	22a74 <checkerror.part.0>
   22b5a:	1c42      	adds	r2, r0, #1
   22b5c:	4604      	mov	r4, r0
   22b5e:	d1ea      	bne.n	22b36 <_swilseek+0x56>
   22b60:	f04f 35ff 	mov.w	r5, #4294967295
   22b64:	e7d9      	b.n	22b1a <_swilseek+0x3a>
   22b66:	f7fa ffe5 	bl	1db34 <__errno>
   22b6a:	2309      	movs	r3, #9
   22b6c:	6003      	str	r3, [r0, #0]
   22b6e:	f04f 35ff 	mov.w	r5, #4294967295
   22b72:	e7d2      	b.n	22b1a <_swilseek+0x3a>

00022b74 <_lseek>:
   22b74:	f7ff bfb4 	b.w	22ae0 <_swilseek>

00022b78 <_write>:
   22b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b7a:	b085      	sub	sp, #20
   22b7c:	460c      	mov	r4, r1
   22b7e:	4616      	mov	r6, r2
   22b80:	f7ff ff5c 	bl	22a3c <findslot>
   22b84:	b350      	cbz	r0, 22bdc <_write+0x64>
   22b86:	6803      	ldr	r3, [r0, #0]
   22b88:	9301      	str	r3, [sp, #4]
   22b8a:	9402      	str	r4, [sp, #8]
   22b8c:	4605      	mov	r5, r0
   22b8e:	9603      	str	r6, [sp, #12]
   22b90:	2405      	movs	r4, #5
   22b92:	af01      	add	r7, sp, #4
   22b94:	4620      	mov	r0, r4
   22b96:	4639      	mov	r1, r7
   22b98:	beab      	bkpt	0x00ab
   22b9a:	4604      	mov	r4, r0
   22b9c:	1c63      	adds	r3, r4, #1
   22b9e:	d016      	beq.n	22bce <_write+0x56>
   22ba0:	2c00      	cmp	r4, #0
   22ba2:	db18      	blt.n	22bd6 <_write+0x5e>
   22ba4:	686a      	ldr	r2, [r5, #4]
   22ba6:	1b30      	subs	r0, r6, r4
   22ba8:	4402      	add	r2, r0
   22baa:	42a6      	cmp	r6, r4
   22bac:	606a      	str	r2, [r5, #4]
   22bae:	d001      	beq.n	22bb4 <_write+0x3c>
   22bb0:	b005      	add	sp, #20
   22bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bb4:	f7fa ffbe 	bl	1db34 <__errno>
   22bb8:	2513      	movs	r5, #19
   22bba:	4606      	mov	r6, r0
   22bbc:	2400      	movs	r4, #0
   22bbe:	4628      	mov	r0, r5
   22bc0:	4621      	mov	r1, r4
   22bc2:	beab      	bkpt	0x00ab
   22bc4:	4605      	mov	r5, r0
   22bc6:	4620      	mov	r0, r4
   22bc8:	6035      	str	r5, [r6, #0]
   22bca:	b005      	add	sp, #20
   22bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bce:	f7ff ff51 	bl	22a74 <checkerror.part.0>
   22bd2:	4604      	mov	r4, r0
   22bd4:	e7e4      	b.n	22ba0 <_write+0x28>
   22bd6:	f04f 30ff 	mov.w	r0, #4294967295
   22bda:	e7e9      	b.n	22bb0 <_write+0x38>
   22bdc:	f7fa ffaa 	bl	1db34 <__errno>
   22be0:	2309      	movs	r3, #9
   22be2:	6003      	str	r3, [r0, #0]
   22be4:	f04f 30ff 	mov.w	r0, #4294967295
   22be8:	e7e2      	b.n	22bb0 <_write+0x38>
   22bea:	bf00      	nop

00022bec <_close>:
   22bec:	b570      	push	{r4, r5, r6, lr}
   22bee:	b082      	sub	sp, #8
   22bf0:	4604      	mov	r4, r0
   22bf2:	f7ff ff23 	bl	22a3c <findslot>
   22bf6:	b310      	cbz	r0, 22c3e <_close+0x52>
   22bf8:	3c01      	subs	r4, #1
   22bfa:	2c01      	cmp	r4, #1
   22bfc:	4606      	mov	r6, r0
   22bfe:	d911      	bls.n	22c24 <_close+0x38>
   22c00:	ad02      	add	r5, sp, #8
   22c02:	6833      	ldr	r3, [r6, #0]
   22c04:	f845 3d04 	str.w	r3, [r5, #-4]!
   22c08:	2402      	movs	r4, #2
   22c0a:	4620      	mov	r0, r4
   22c0c:	4629      	mov	r1, r5
   22c0e:	beab      	bkpt	0x00ab
   22c10:	4604      	mov	r4, r0
   22c12:	1c63      	adds	r3, r4, #1
   22c14:	4620      	mov	r0, r4
   22c16:	d00f      	beq.n	22c38 <_close+0x4c>
   22c18:	b910      	cbnz	r0, 22c20 <_close+0x34>
   22c1a:	f04f 33ff 	mov.w	r3, #4294967295
   22c1e:	6033      	str	r3, [r6, #0]
   22c20:	b002      	add	sp, #8
   22c22:	bd70      	pop	{r4, r5, r6, pc}
   22c24:	4b09      	ldr	r3, [pc, #36]	; (22c4c <_close+0x60>)
   22c26:	689a      	ldr	r2, [r3, #8]
   22c28:	691b      	ldr	r3, [r3, #16]
   22c2a:	429a      	cmp	r2, r3
   22c2c:	d1e8      	bne.n	22c00 <_close+0x14>
   22c2e:	f04f 33ff 	mov.w	r3, #4294967295
   22c32:	6003      	str	r3, [r0, #0]
   22c34:	2000      	movs	r0, #0
   22c36:	e7f3      	b.n	22c20 <_close+0x34>
   22c38:	f7ff ff1c 	bl	22a74 <checkerror.part.0>
   22c3c:	e7ec      	b.n	22c18 <_close+0x2c>
   22c3e:	f7fa ff79 	bl	1db34 <__errno>
   22c42:	2309      	movs	r3, #9
   22c44:	6003      	str	r3, [r0, #0]
   22c46:	f04f 30ff 	mov.w	r0, #4294967295
   22c4a:	e7e9      	b.n	22c20 <_close+0x34>
   22c4c:	200022e8 	.word	0x200022e8

00022c50 <_getpid>:
   22c50:	2001      	movs	r0, #1
   22c52:	4770      	bx	lr

00022c54 <_sbrk>:
   22c54:	4a0e      	ldr	r2, [pc, #56]	; (22c90 <_sbrk+0x3c>)
   22c56:	6813      	ldr	r3, [r2, #0]
   22c58:	b510      	push	{r4, lr}
   22c5a:	b1ab      	cbz	r3, 22c88 <_sbrk+0x34>
   22c5c:	4418      	add	r0, r3
   22c5e:	4669      	mov	r1, sp
   22c60:	4288      	cmp	r0, r1
   22c62:	d809      	bhi.n	22c78 <_sbrk+0x24>
   22c64:	490b      	ldr	r1, [pc, #44]	; (22c94 <_sbrk+0x40>)
   22c66:	4c0c      	ldr	r4, [pc, #48]	; (22c98 <_sbrk+0x44>)
   22c68:	6809      	ldr	r1, [r1, #0]
   22c6a:	42a1      	cmp	r1, r4
   22c6c:	d001      	beq.n	22c72 <_sbrk+0x1e>
   22c6e:	4288      	cmp	r0, r1
   22c70:	d802      	bhi.n	22c78 <_sbrk+0x24>
   22c72:	6010      	str	r0, [r2, #0]
   22c74:	4618      	mov	r0, r3
   22c76:	bd10      	pop	{r4, pc}
   22c78:	f7fa ff5c 	bl	1db34 <__errno>
   22c7c:	230c      	movs	r3, #12
   22c7e:	6003      	str	r3, [r0, #0]
   22c80:	f04f 33ff 	mov.w	r3, #4294967295
   22c84:	4618      	mov	r0, r3
   22c86:	bd10      	pop	{r4, pc}
   22c88:	4b04      	ldr	r3, [pc, #16]	; (22c9c <_sbrk+0x48>)
   22c8a:	6013      	str	r3, [r2, #0]
   22c8c:	e7e6      	b.n	22c5c <_sbrk+0x8>
   22c8e:	bf00      	nop
   22c90:	200022e4 	.word	0x200022e4
   22c94:	20000ab8 	.word	0x20000ab8
   22c98:	cafedead 	.word	0xcafedead
   22c9c:	200023b0 	.word	0x200023b0

00022ca0 <_swistat>:
   22ca0:	b570      	push	{r4, r5, r6, lr}
   22ca2:	460d      	mov	r5, r1
   22ca4:	f7ff feca 	bl	22a3c <findslot>
   22ca8:	b1b8      	cbz	r0, 22cda <_swistat+0x3a>
   22caa:	686b      	ldr	r3, [r5, #4]
   22cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22cb4:	4606      	mov	r6, r0
   22cb6:	606b      	str	r3, [r5, #4]
   22cb8:	62ea      	str	r2, [r5, #44]	; 0x2c
   22cba:	240c      	movs	r4, #12
   22cbc:	4620      	mov	r0, r4
   22cbe:	4631      	mov	r1, r6
   22cc0:	beab      	bkpt	0x00ab
   22cc2:	4604      	mov	r4, r0
   22cc4:	1c62      	adds	r2, r4, #1
   22cc6:	4620      	mov	r0, r4
   22cc8:	d002      	beq.n	22cd0 <_swistat+0x30>
   22cca:	6128      	str	r0, [r5, #16]
   22ccc:	2000      	movs	r0, #0
   22cce:	bd70      	pop	{r4, r5, r6, pc}
   22cd0:	f7ff fed0 	bl	22a74 <checkerror.part.0>
   22cd4:	1c43      	adds	r3, r0, #1
   22cd6:	d1f8      	bne.n	22cca <_swistat+0x2a>
   22cd8:	e7f9      	b.n	22cce <_swistat+0x2e>
   22cda:	f7fa ff2b 	bl	1db34 <__errno>
   22cde:	2309      	movs	r3, #9
   22ce0:	6003      	str	r3, [r0, #0]
   22ce2:	f04f 30ff 	mov.w	r0, #4294967295
   22ce6:	bd70      	pop	{r4, r5, r6, pc}

00022ce8 <_fstat>:
   22ce8:	b538      	push	{r3, r4, r5, lr}
   22cea:	223c      	movs	r2, #60	; 0x3c
   22cec:	460c      	mov	r4, r1
   22cee:	4605      	mov	r5, r0
   22cf0:	4608      	mov	r0, r1
   22cf2:	2100      	movs	r1, #0
   22cf4:	f7fb fe02 	bl	1e8fc <memset>
   22cf8:	4621      	mov	r1, r4
   22cfa:	4628      	mov	r0, r5
   22cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22d00:	f7ff bfce 	b.w	22ca0 <_swistat>

00022d04 <_isatty>:
   22d04:	b570      	push	{r4, r5, r6, lr}
   22d06:	f7ff fe99 	bl	22a3c <findslot>
   22d0a:	4605      	mov	r5, r0
   22d0c:	b190      	cbz	r0, 22d34 <_isatty+0x30>
   22d0e:	2409      	movs	r4, #9
   22d10:	4620      	mov	r0, r4
   22d12:	4629      	mov	r1, r5
   22d14:	beab      	bkpt	0x00ab
   22d16:	4604      	mov	r4, r0
   22d18:	2c01      	cmp	r4, #1
   22d1a:	d009      	beq.n	22d30 <_isatty+0x2c>
   22d1c:	f7fa ff0a 	bl	1db34 <__errno>
   22d20:	2513      	movs	r5, #19
   22d22:	4606      	mov	r6, r0
   22d24:	2400      	movs	r4, #0
   22d26:	4628      	mov	r0, r5
   22d28:	4621      	mov	r1, r4
   22d2a:	beab      	bkpt	0x00ab
   22d2c:	4605      	mov	r5, r0
   22d2e:	6035      	str	r5, [r6, #0]
   22d30:	4620      	mov	r0, r4
   22d32:	bd70      	pop	{r4, r5, r6, pc}
   22d34:	f7fa fefe 	bl	1db34 <__errno>
   22d38:	2209      	movs	r2, #9
   22d3a:	462c      	mov	r4, r5
   22d3c:	6002      	str	r2, [r0, #0]
   22d3e:	e7f7      	b.n	22d30 <_isatty+0x2c>

00022d40 <_exit>:
   22d40:	f04f 31ff 	mov.w	r1, #4294967295
   22d44:	f000 b800 	b.w	22d48 <_kill>

00022d48 <_kill>:
   22d48:	2906      	cmp	r1, #6
   22d4a:	b530      	push	{r4, r5, lr}
   22d4c:	bf0c      	ite	eq
   22d4e:	4d04      	ldreq	r5, [pc, #16]	; (22d60 <_kill+0x18>)
   22d50:	4d04      	ldrne	r5, [pc, #16]	; (22d64 <_kill+0x1c>)
   22d52:	2418      	movs	r4, #24
   22d54:	4620      	mov	r0, r4
   22d56:	4629      	mov	r1, r5
   22d58:	beab      	bkpt	0x00ab
   22d5a:	4604      	mov	r4, r0
   22d5c:	4620      	mov	r0, r4
   22d5e:	bd30      	pop	{r4, r5, pc}
   22d60:	00020023 	.word	0x00020023
   22d64:	00020026 	.word	0x00020026

00022d68 <_init>:
   22d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d6a:	bf00      	nop
   22d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   22d6e:	bc08      	pop	{r3}
   22d70:	469e      	mov	lr, r3
   22d72:	4770      	bx	lr

00022d74 <_fini>:
   22d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d76:	bf00      	nop
   22d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
   22d7a:	bc08      	pop	{r3}
   22d7c:	469e      	mov	lr, r3
   22d7e:	4770      	bx	lr

00022d80 <__init_array_start>:
   22d80:	000209ed 	.word	0x000209ed

00022d84 <__frame_dummy_init_array_entry>:
   22d84:	00004289 00007851 00009955 00009d05     .B..Qx..U.......
   22d94:	0000a831 0000b3c1 0000d871 0000f079     1.......q...y...
   22da4:	0000fda1 00010119 00011ee9 00011fcd     ................
   22db4:	000138f9                                .8..

00022db8 <__do_global_dtors_aux_fini_array_entry>:
   22db8:	00004265                                eB..

00022dbc <__fini_array_end>:
   22dbc:	646e6148 	.word	0x646e6148
   22dc0:	676e696c 	.word	0x676e696c
   22dc4:	75616620 	.word	0x75616620
   22dc8:	203a746c 	.word	0x203a746c
   22dcc:	61656c63 	.word	0x61656c63
   22dd0:	676e6972 	.word	0x676e6972
   22dd4:	75616620 	.word	0x75616620
   22dd8:	2073746c 	.word	0x2073746c
   22ddc:	63207962 	.word	0x63207962
   22de0:	696c6379 	.word	0x696c6379
   22de4:	6520676e 	.word	0x6520676e
   22de8:	6c62616e 	.word	0x6c62616e
   22dec:	69732065 	.word	0x69732065
   22df0:	6c616e67 	.word	0x6c616e67
   22df4:	206f7420 	.word	0x206f7420
   22df8:	6f746f6d 	.word	0x6f746f6d
   22dfc:	00002e72 	.word	0x00002e72
   22e00:	6d6d6f43 	.word	0x6d6d6f43
   22e04:	69646e61 	.word	0x69646e61
   22e08:	0020676e 	.word	0x0020676e
   22e0c:	662a2e25 	.word	0x662a2e25
   22e10:	00000000 	.word	0x00000000
   22e14:	4d505220 	.word	0x4d505220
   22e18:	00000000 	.word	0x00000000
   22e1c:	706d6152 	.word	0x706d6152
   22e20:	20676e69 	.word	0x20676e69
   22e24:	65657053 	.word	0x65657053
   22e28:	2e2e2e64 	.word	0x2e2e2e64
   22e2c:	69615720 	.word	0x69615720
   22e30:	676e6974 	.word	0x676e6974
   22e34:	726f6620 	.word	0x726f6620
   22e38:	464c4820 	.word	0x464c4820
   22e3c:	00000042 	.word	0x00000042
   22e40:	6f746f4d 	.word	0x6f746f4d
   22e44:	61662072 	.word	0x61662072
   22e48:	20746c75 	.word	0x20746c75
   22e4c:	65746564 	.word	0x65746564
   22e50:	64657463 	.word	0x64657463
   22e54:	0000002e 	.word	0x0000002e
   22e58:	62616e45 	.word	0x62616e45
   22e5c:	6120656c 	.word	0x6120656c
   22e60:	6d6f7475 	.word	0x6d6f7475
   22e64:	63697461 	.word	0x63697461
   22e68:	75616620 	.word	0x75616620
   22e6c:	6820746c 	.word	0x6820746c
   22e70:	6c646e61 	.word	0x6c646e61
   22e74:	20676e69 	.word	0x20676e69
   22e78:	73207962 	.word	0x73207962
   22e7c:	69747465 	.word	0x69747465
   22e80:	4820676e 	.word	0x4820676e
   22e84:	4c444e41 	.word	0x4c444e41
   22e88:	4f4d5f45 	.word	0x4f4d5f45
   22e8c:	5f524f54 	.word	0x5f524f54
   22e90:	4c554146 	.word	0x4c554146
   22e94:	74205354 	.word	0x74205354
   22e98:	2e31206f 	.word	0x2e31206f
   22e9c:	00000000 	.word	0x00000000
   22ea0:	69746f4d 	.word	0x69746f4d
   22ea4:	6d206e6f 	.word	0x6d206e6f
   22ea8:	6e207961 	.word	0x6e207961
   22eac:	6820746f 	.word	0x6820746f
   22eb0:	20657661 	.word	0x20657661
   22eb4:	706d6f63 	.word	0x706d6f63
   22eb8:	6574656c 	.word	0x6574656c
   22ebc:	73612064 	.word	0x73612064
   22ec0:	70786520 	.word	0x70786520
   22ec4:	65746365 	.word	0x65746365
   22ec8:	50202e64 	.word	0x50202e64
   22ecc:	65636f72 	.word	0x65636f72
   22ed0:	77206465 	.word	0x77206465
   22ed4:	20687469 	.word	0x20687469
   22ed8:	74756163 	.word	0x74756163
   22edc:	2e6e6f69 	.word	0x2e6e6f69
   22ee0:	00000000 	.word	0x00000000
   22ee4:	65766f4d 	.word	0x65766f4d
   22ee8:	6e6f4420 	.word	0x6e6f4420
   22eec:	00000065 	.word	0x00000065
   22ef0:	69206e41 	.word	0x69206e41
   22ef4:	6c61766e 	.word	0x6c61766e
   22ef8:	76206469 	.word	0x76206469
   22efc:	636f6c65 	.word	0x636f6c65
   22f00:	20797469 	.word	0x20797469
   22f04:	0020666f 	.word	0x0020666f
   22f08:	4d505220 	.word	0x4d505220
   22f0c:	73616820 	.word	0x73616820
   22f10:	65656220 	.word	0x65656220
   22f14:	6572206e 	.word	0x6572206e
   22f18:	73657571 	.word	0x73657571
   22f1c:	2e646574 	.word	0x2e646574
   22f20:	00000000 	.word	0x00000000
   22f24:	6f746f4d 	.word	0x6f746f4d
   22f28:	61662072 	.word	0x61662072
   22f2c:	20746c75 	.word	0x20746c75
   22f30:	65746564 	.word	0x65746564
   22f34:	64657463 	.word	0x64657463
   22f38:	6f4d202e 	.word	0x6f4d202e
   22f3c:	63206576 	.word	0x63206576
   22f40:	65636e61 	.word	0x65636e61
   22f44:	2e64656c 	.word	0x2e64656c
   22f48:	616e4520 	.word	0x616e4520
   22f4c:	20656c62 	.word	0x20656c62
   22f50:	6f747561 	.word	0x6f747561
   22f54:	6974616d 	.word	0x6974616d
   22f58:	61662063 	.word	0x61662063
   22f5c:	20746c75 	.word	0x20746c75
   22f60:	646e6168 	.word	0x646e6168
   22f64:	676e696c 	.word	0x676e696c
   22f68:	20796220 	.word	0x20796220
   22f6c:	74746573 	.word	0x74746573
   22f70:	20676e69 	.word	0x20676e69
   22f74:	444e4148 	.word	0x444e4148
   22f78:	4d5f454c 	.word	0x4d5f454c
   22f7c:	524f544f 	.word	0x524f544f
   22f80:	5541465f 	.word	0x5541465f
   22f84:	2053544c 	.word	0x2053544c
   22f88:	31206f74 	.word	0x31206f74
   22f8c:	0000002e 	.word	0x0000002e
   22f90:	6f746f4d 	.word	0x6f746f4d
   22f94:	6e452072 	.word	0x6e452072
   22f98:	656c6261 	.word	0x656c6261
   22f9c:	00000064 	.word	0x00000064
   22fa0:	74696157 	.word	0x74696157
   22fa4:	20676e69 	.word	0x20676e69
   22fa8:	20726f66 	.word	0x20726f66
   22fac:	42464c48 	.word	0x42464c48
   22fb0:	002e2e2e 	.word	0x002e2e2e
   22fb4:	62616e45 	.word	0x62616e45
   22fb8:	676e696c 	.word	0x676e696c
   22fbc:	79616d20 	.word	0x79616d20
   22fc0:	746f6e20 	.word	0x746f6e20
   22fc4:	76616820 	.word	0x76616820
   22fc8:	6f632065 	.word	0x6f632065
   22fcc:	656c706d 	.word	0x656c706d
   22fd0:	20646574 	.word	0x20646574
   22fd4:	65207361 	.word	0x65207361
   22fd8:	63657078 	.word	0x63657078
   22fdc:	2e646574 	.word	0x2e646574
   22fe0:	6f725020 	.word	0x6f725020
   22fe4:	64656563 	.word	0x64656563
   22fe8:	74697720 	.word	0x74697720
   22fec:	61632068 	.word	0x61632068
   22ff0:	6f697475 	.word	0x6f697475
   22ff4:	00002e6e 	.word	0x00002e6e
   22ff8:	6f746f4d 	.word	0x6f746f4d
   22ffc:	65522072 	.word	0x65522072
   23000:	00796461 	.word	0x00796461

00023004 <CSWTCH.95>:
   23004:	02030406 00000002                       ........

0002300c <_ZN9ClearCoreL11tcc_modulesE>:
   2300c:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   2301c:	43001000                                ...C

00023020 <_ZTVN9ClearCore11MotorDriverE>:
	...
   23028:	00004d11 00004d15 00004d01 00004d05     .M...M...M...M..
   23038:	0000e635 00004cf5 00004d09 00004cf9     5....L...M...L..
   23048:	000053e1 00005c15 00005a3d 00005b35     .S...\..=Z..5[..
   23058:	00004e79 ffffffd0 00000000 00005b2d     yN..........-[..
   23068:	00005c0d 00004ec9                       .\...N..

00023070 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   23070:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   23080:	42001400 42001800 43001400 43001800     ...B...B...C...C

00023090 <_ZTVN9ClearCore7ISerialE>:
	...
   23098:	0001377d 0001377d 0001377d 0001377d     }7..}7..}7..}7..
   230a8:	0001377d 0001377d 0001377d 0001377d     }7..}7..}7..}7..
   230b8:	0001377d 0001377d 0001377d 0001377d     }7..}7..}7..}7..
   230c8:	0001377d 0001377d 0001377d 0001377d     }7..}7..}7..}7..
   230d8:	0001377d 0001377d                       }7..}7..

000230e0 <_ZTVN9ClearCore9SerialUsbE>:
	...
   230e8:	00005fb9 00005fad 00005fd1 00005fdd     ._..._..._..._..
   230f8:	00005fe9 00005ff5 00006001 0000600d     ._..._...`...`..
   23108:	00006019 00006025 00006031 00005fb9     .`..%`..1`..._..
   23118:	00005fc5 00005fc5 00005f31 00005f3d     ._..._..1_..=_..
   23128:	00005f41 00005f4d 00005f59 00005f65     A_..M_..Y_..e_..
   23138:	00005f79 0000603d 00006061 00006091     y_..=`..a`...`..
   23148:	00005f85 00005f91 00005fa1 fffffffc     ._..._..._......
   23158:	00000000 00005f5d 00005f71 00005f7d     ....]_..q_..}_..
   23168:	00006059 00006089 000060d1 00005f89     Y`...`...`..._..
   23178:	00005f29 00005fa5 00005f99 008061fc     )_..._..._...a..
   23188:	00806010 00806014 00806018              .`...`...`..

00023194 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   2319c:	00010171 00010181 0001109d 000103f9     q...............
   231ac:	000102a5 00007861 00010195 000101cd     ....ax..........
   231bc:	0001020d 000101e9 000101f9 0001024d     ............M...
   231cc:	00010169 00007869 00010511 00007865     i...ix......ex..
   231dc:	000106e5 00010601                       ........

000231e4 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   231ec:	00010171 00010181 0001109d 000103f9     q...............
   231fc:	000102a5 00007861 00010195 000101cd     ....ax..........
   2320c:	0001020d 000101e9 000101f9 0001024d     ............M...
   2321c:	00010169 00007869 00010511 00007865     i...ix......ex..
   2322c:	000106e5 00010601 40003c00 4101a000     .........<.@...A
   2323c:	43001400                                ...C

00023240 <_ZN9ClearCore10hBridgeConE>:
   23240:	20001384 20001408                       ... ... 

00023248 <_ZN9ClearCore15MotorConnectorsE>:
   23248:	20000b78 20000cc0 20000e08 20000f50     x.. ... ... P.. 

00023258 <_ZN9ClearCoreL10ConnectorsE>:
   23258:	200011f8 20001264 200012c4 20001324     ... d.. ... $.. 
   23268:	20001384 20001408 20001168 20001198     ... ... h.. ... 
   23278:	200011c8 20000b34 2000109c 200010e0     ... 4.. ... ... 
   23288:	20001124 2000148c 20000b78 20000cc0     $.. ... x.. ... 
   23298:	20000e08 20000f50 200015ec 20001744     ... P.. ... D.. 
   232a8:	2000149c                                ... 

000232ac <_ZN9ClearCoreL10MicroSD_SSE>:
   232ac:	0504003d ffffff00 ffffffff 00ff0500     =...............

000232bc <_ZN9ClearCoreL10XBee_Rx_INE>:
   232bc:	08180150 ffffff00 ffff0102 00ffffff     P...............

000232cc <_ZN9ClearCoreL11Com0_RTS_SSE>:
   232cc:	02120142 ffffff00 ffff0207 00040001     B...............

000232dc <_ZN9ClearCoreL11Com0_RX_SCKE>:
   232dc:	04140144 ffffff00 ffff0107 00060201     D...............

000232ec <_ZN9ClearCoreL11Com1_RTS_SSE>:
   232ec:	0a0a001c ffffff00 00010200 00040200     ................

000232fc <_ZN9ClearCoreL11Com1_RX_SCKE>:
   232fc:	0909001b ff03ff00 01000100 00ff0100     ................

0002330c <_ZN9ClearCoreL11IN06n_QuadAE>:
   2330c:	00100238 ffffff01 ffff0006 00ff0000     8...............

0002331c <_ZN9ClearCoreL11IN07n_QuadBE>:
   2331c:	01110239 ffffff01 ffff0106 00ff0100     9...............

0002332c <_ZN9ClearCoreL11IN08n_QuadIE>:
   2332c:	0212023a ffffff01 ffff0206 00ff0200     :...............

0002333c <_ZN9ClearCoreL11IN09n_AIN09E>:
   2333c:	0707010e ff09ff01 ffffffff 00ffffff     ................

0002334c <_ZN9ClearCoreL11IN10n_AIN10E>:
   2334c:	0606010d ff08ff01 ffffffff 00ffffff     ................

0002335c <_ZN9ClearCoreL11IN11n_AIN11E>:
   2335c:	0505010a ff07ff01 ffffffff 00ffffff     ................

0002336c <_ZN9ClearCoreL11IN12n_AIN12E>:
   2336c:	03030206 ff05ff01 ffffffff 00ffffff     ................

0002337c <_ZN9ClearCoreL11MicroSD_SCKE>:
   2337c:	09090110 ff01ff00 01040104 00ffffff     ................

0002338c <_ZN9ClearCoreL11XBee_CTS_INE>:
   2338c:	09190253 ffffff00 ffff0302 00ffffff     S...............

0002339c <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   2339c:	09190151 ffffff00 ffff0002 00ffffff     Q...............

000233ac <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   233ac:	05150145 ffffff00 ffff0007 00070301     E...............

000233bc <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   233bc:	ff08001a ff02ff00 00000000 00ff0000     ................

000233cc <_ZN9ClearCoreL12MicroSD_MISOE>:
   233cc:	0a0a0120 ffffff00 00050204 00040400      ...............

000233dc <_ZN9ClearCoreL12MicroSD_MOSIE>:
   233dc:	0808010f ff00ff00 00040004 00ffffff     ................

000233ec <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   233ec:	07170049 ffffff00 01040005 00ff0701     I...............

000233fc <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   233fc:	08180252 ffffff00 ffff0202 00ffffff     R...............

0002340c <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   2340c:	03130143 ffffff00 ffff0307 00050101     C...............

0002341c <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   2341c:	0b0b001d ffffff00 01010300 00050300     ................

0002342c <_ZN9ClearCoreL13IN00n_Aout00nE>:
   2342c:	05050012 01ffff00 0100ffff 00ffffff     ................

0002343c <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   2343c:	04140046 ffffff01 00070205 00ff0401     F...............

0002344c <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   2344c:	00100140 ffffff00 00060005 00020003     @...............

0002345c <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   2345c:	03030164 ffffff00 0106ffff 00ffffff     d...............

0002346c <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   2346c:	0e0e0124 ffffff00 00050204 00000004     $...............

0002347c <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   2347c:	0c0c0122 ffffff00 00040004 00060003     "...............

0002348c <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   2348c:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

0002349c <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   2349c:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

000234ac <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   234ac:	0f0f0125 ffffff00 01050304 00010104     %...............

000234bc <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   234bc:	0d0d0123 ffffff00 01040104 00070103     #...............

000234cc <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   234cc:	06160048 ffffff00 00040003 00ff0601     H...............

000234dc <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   234dc:	00100034 ffffff00 00020001 00020001     4...............

000234ec <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   234ec:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

000234fc <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   234fc:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

0002350c <_ZN9ClearCoreL5IN01nE>:
   2350c:	02110107 00ffff00 ffffffff 00ffffff     ................

0002351c <_ZN9ClearCoreL5IN02nE>:
   2351c:	03030008 ffffff00 ffffffff 00ffffff     ................

0002352c <_ZN9ClearCoreL5IN03nE>:
   2352c:	04150211 ffffff00 0000ffff 00ffffff     ................

0002353c <_ZN9ClearCoreL5IN04nE>:
   2353c:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

0002354c <_ZN9ClearCoreL5IN05nE>:
   2354c:	0313023b ffffff00 ffff0306 00ff0300     ;...............

0002355c <_ZN9ClearCoreL5OUT00E>:
   2355c:	00000001 ffffff00 0002ffff 00ffffff     ................

0002356c <_ZN9ClearCoreL5OUT01E>:
   2356c:	01010002 ffffff00 0102ffff 00ffffff     ................

0002357c <_ZN9ClearCoreL5OUT02E>:
   2357c:	06060013 ffffff00 0001ffff 00ffffff     ................

0002358c <_ZN9ClearCoreL5OUT03E>:
   2358c:	07070014 ffffff00 0101ffff 00ffffff     ................

0002359c <_ZN9ClearCoreL6Aout00E>:
   2359c:	02020007 01ffff00 0100ffff 00ffffff     ................

000235ac <_ZN9ClearCoreL6Mtr0_BE>:
   235ac:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

000235bc <_ZN9ClearCoreL6Mtr1_BE>:
   235bc:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

000235cc <_ZN9ClearCoreL7Mtr1_AnE>:
   235cc:	05150047 ffffff00 01070305 00ff0501     G...............

000235dc <_ZN9ClearCoreL9Mtr1_HLFBE>:
   235dc:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   235ec:	00000080 00000040 00000020 00000010     ....@... .......
   235fc:	00000008 00000004 01000000 02000000     ................
   2360c:	04000000 08000000 00800000 00400000     ..............@.
   2361c:	00200000 00004000 00008000 00040000     .. ..@..........
   2362c:	00080000                                ....

00023630 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   23638:	0000b3d1 0000b445 0001377d              ....E...}7..

00023644 <_ZN9ClearCoreL11IN06n_QuadAE>:
   23644:	00100238 ffffff01 ffff0006 00ff0000     8...............

00023654 <_ZN9ClearCoreL11IN07n_QuadBE>:
   23654:	01110239 ffffff01 ffff0106 00ff0100     9...............

00023664 <_ZN9ClearCoreL11IN08n_QuadIE>:
   23664:	0212023a ffffff01 ffff0206 00ff0200     :...............
   23674:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   23684:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   23694:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   236a4:	2e747369 00000063 000236ec 000236dc     ist.c....6...6..
   236b4:	000236bc 000236cc                       .6...6..

000236bc <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   236bc:	01010204 ff0bff00 ffffffff 00ffffff     ................

000236cc <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   236cc:	00000203 ff0aff00 ffffffff 00ffffff     ................

000236dc <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   236dc:	02020205 ff04ff00 ffffffff 00ffffff     ................

000236ec <_ZN9ClearCoreL9_5VOB_MONE>:
   236ec:	04040109 ff06ff00 ffffffff 00ffffff     ................

000236fc <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   23704:	0000d8c5 0000daf5 0000d8c9 0000d8cd     ................
   23714:	0000dbed 0000dc09 0000d8bd 00004cf9     .............L..
   23724:	0000dadd 0000dca5                       ........

0002372c <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   23734:	0000dd49 0000dd59 0000dd4d 0000dd51     I...Y...M...Q...
   23744:	0000dfad 0000dd55 0000dd45 00004cf9     ....U...E....L..
   23754:	0000de81 0000def9                       ........

0002375c <_ZTVN9ClearCore12DigitalInOutE>:
	...
   23764:	0000dff5 0000e0c9 0000dff9 0000dffd     ................
   23774:	0000e565 0000e011 0000d8bd 00004cf9     e............L..
   23784:	0000e359 0000e5a5                       Y.......

0002378c <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   2378c:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   2379c:	42001400 42001800 43001400 43001800     ...B...B...C...C

000237ac <_ZTVN9ClearCore9ConnectorE>:
	...
   237b4:	0000e619 0001377d 0001377d 0001377d     ....}7..}7..}7..
   237c4:	0001377d 0001377d 0001377d 00005f29     }7..}7..}7..)_..
   237d4:	0001377d 0001377d                       }7..}7..

000237dc <_ZTVN9ClearCore9DigitalInE>:
	...
   237e4:	0000e61d 0000e621 0000e62d 0000e631     ....!...-...1...
   237f4:	0000e635 00004cf5 0000dd45 00004cf9     5....L..E....L..
   23804:	0000e729 0000e65d                       )...]...

0002380c <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   23814:	0000e989 0000ee21 0000e98d 0000e991     ....!...........
   23824:	0000ea55 0000ea91 0000d8bd 00004cf9     U............L..
   23834:	0000ec45 0000ed59                       E...Y...

0002383c <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   2383c:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   2384c:	43001000                                ...C

00023850 <_ZTVN9ClearCore7CcioPinE>:
	...
   23858:	0000fdb1 0000fe0d 0000fdb5 0000fdb9     ................
   23868:	0000fe7d 0000fed9 0000feb9 00005f29     }...........)_..
   23878:	0000fdc9 0000fdcd                       ........

00023880 <_ZTVN9ClearCore10SerialBaseE>:
	...
   23888:	00010171 00010181 0001109d 000103f9     q...............
   23898:	000102a5 00007861 00010195 000101cd     ....ax..........
   238a8:	0001020d 000101e9 000101f9 0001024d     ............M...
   238b8:	00010169 00007869 00010511 00007865     i...ix......ex..
   238c8:	000106e5 00010601                       ........

000238d0 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   238d0:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   238e0:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000238f0 <_ZTVN9ClearCore12SerialDriverE>:
	...
   238f8:	00010171 00010181 0001176d 000117c1     q.......m.......
   23908:	000115fd 00007861 00010195 000101cd     ....ax..........
   23918:	0001020d 000101e9 000101f9 0001024d     ............M...
   23928:	00010169 00007869 00010511 00007865     i...ix......ex..
   23938:	000106e5 00010601 00011551 00011619     ........Q.......
   23948:	00011561 0001156d 0001157d 00011905     a...m...}.......
   23958:	00011591 0001180d 0001159d fffffebc     ................
   23968:	00000000 00011559 00011765 00011565     ....Y...e...e...
   23978:	00011575 00011589 000119b9 00011595     u...............
   23988:	00005f29 000115a1 000118fd              )_..........

00023994 <_ZTVN9ClearCore9LedDriverE>:
	...
   2399c:	000119c1 000119c5 000119d1 000119d5     ................
   239ac:	000119e9 00011a01 000119d9 00005f29     ............)_..
   239bc:	000119dd 000119e1                       ........

000239c4 <_usb_ep_cfgs>:
   239c4:	20001f3c 00000000 00000040 20001f7c     <.. ....@...|.. 
   239d4:	00000000 00000040 20001fbc 00000000     ....@...... ....
   239e4:	00000040                                @...

000239e8 <sinTable_q15>:
   239e8:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   239f8:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   23a08:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   23a18:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   23a28:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   23a38:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   23a48:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   23a58:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   23a68:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   23a78:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   23a88:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   23a98:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   23aa8:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   23ab8:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   23ac8:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   23ad8:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   23ae8:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   23af8:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   23b08:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   23b18:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   23b28:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   23b38:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   23b48:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   23b58:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   23b68:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   23b78:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   23b88:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   23b98:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   23ba8:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   23bb8:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   23bc8:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   23bd8:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   23be8:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   23bf8:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   23c08:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   23c18:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   23c28:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   23c38:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   23c48:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   23c58:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   23c68:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   23c78:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   23c88:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   23c98:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   23ca8:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   23cb8:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   23cc8:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   23cd8:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   23ce8:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   23cf8:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   23d08:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   23d18:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   23d28:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   23d38:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   23d48:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   23d58:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   23d68:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   23d78:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   23d88:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   23d98:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   23da8:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   23db8:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   23dc8:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   23dd8:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   23de8:	00000000 65727570 72697620 6c617574     ....pure virtual
   23df8:	74656d20 20646f68 6c6c6163 000a6465      method called..
   23e08:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

00023e18 <_ZTISt9bad_alloc>:
   23e18:	00023f38 00023e24 00023e78              8?..$>..x>..

00023e24 <_ZTSSt9bad_alloc>:
   23e24:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023e34 <_ZTVSt9bad_alloc>:
   23e34:	00000000 00023e18 00013799 000137ad     .....>...7...7..
   23e44:	00013791 3a647473 6461623a 6378655f     .7..std::bad_exc
   23e54:	69747065 00006e6f                       eption..

00023e5c <_ZTIN10__cxxabiv115__forced_unwindE>:
   23e5c:	00023fac 00023e80                       .?...>..

00023e64 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23e64:	00023fac 00023ea0                       .?...>..

00023e6c <_ZTISt13bad_exception>:
   23e6c:	00023f38 00023ec4 00023e78              8?...>..x>..

00023e78 <_ZTISt9exception>:
   23e78:	00023fac 00023ed8                       .?...>..

00023e80 <_ZTSN10__cxxabiv115__forced_unwindE>:
   23e80:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   23e90:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023ea0 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   23ea0:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23eb0:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   23ec0:	00456e6f                                onE.

00023ec4 <_ZTSSt13bad_exception>:
   23ec4:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   23ed4:	0000006e                                n...

00023ed8 <_ZTSSt9exception>:
   23ed8:	65397453 70656378 6e6f6974 00000000     St9exception....

00023ee8 <_ZTVSt13bad_exception>:
   23ee8:	00000000 00023e6c 00013925 00013931     ....l>..%9..19..
   23ef8:	00013929                                )9..

00023efc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   23efc:	00023f38 00023f08 00023f74              8?...?..t?..

00023f08 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   23f08:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   23f18:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   23f28:	456f666e 00000000                       nfoE....

00023f30 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23f30:	00000000 00023efc 00013af9 00013b0d     .....>...:...;..
   23f40:	00013c25 00013c25 00013ce1 00013c55     %<..%<...<..U<..
   23f50:	00013bf5 00013b65 00013b29              .;..e;..);..

00023f5c <_ZTISt9type_info>:
   23f5c:	00023fac 00023f64                       .?..d?..

00023f64 <_ZTSSt9type_info>:
   23f64:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023f74 <_ZTIN10__cxxabiv117__class_type_infoE>:
   23f74:	00023f38 00023f80 00023f5c              8?...?..\?..

00023f80 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23f80:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23f90:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23fa0:	00000045                                E...

00023fa4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23fa4:	00000000 00023f74 00013c99 00013cad     ....t?...<...<..
   23fb4:	00013c25 00013c25 00013ce1 00013c55     %<..%<...<..U<..
   23fc4:	00013cc9 00013d0d 00013c8d 6d726574     .<...=...<..term
   23fd4:	74616e69 61632065 64656c6c 63657220     inate called rec
   23fe4:	69737275 796c6576 0000000a 6d726574     ursively....term
   23ff4:	74616e69 61632065 64656c6c 74666120     inate called aft
   24004:	74207265 776f7268 20676e69 69206e61     er throwing an i
   24014:	6174736e 2065636e 2720666f 00000000     nstance of '....
   24024:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   24034:	64656c6c 74697720 74756f68 206e6120     lled without an 
   24044:	69746361 65206576 70656378 6e6f6974     active exception
   24054:	0000000a 68772020 29287461 0020203a     ....  what():  .

00024064 <standard_subs>:
   24064:	00000074 00024848 00000003 00024848     t...HH......HH..
   24074:	00000003 00000000 00000000 00000061     ............a...
   24084:	00024b5c 0000000e 00024b5c 0000000e     \K......\K......
   24094:	00024b6c 00000009 00000062 00024b78     lK......b...xK..
   240a4:	00000011 00024b78 00000011 00024b8c     ....xK.......K..
   240b4:	0000000c 00000073 00024b9c 0000000b     ....s....K......
   240c4:	00024ba8 00000046 00024b8c 0000000c     .K..F....K......
   240d4:	00000069 00024bf0 0000000c 00024c00     i....K.......L..
   240e4:	00000031 00024c34 0000000d 0000006f     1...4L......o...
   240f4:	00024c44 0000000c 00024c54 00000031     DL......TL..1...
   24104:	00024c88 0000000d 00000064 00024c98     .L......d....L..
   24114:	0000000d 00024ca8 00000032 00024cdc     .....L..2....L..
   24124:	0000000e                                ....

00024128 <cplus_demangle_builtin_types>:
   24128:	00024eec 0000000b 00024eec 0000000b     .N.......N......
   24138:	00000000 00024ef8 00000004 00024f00     .....N.......O..
   24148:	00000007 00000007 00024f08 00000004     .........O......
   24158:	00024f10 00000004 00000000 00024f18     .O...........O..
   24168:	00000006 00024f18 00000006 00000008     .....O..........
   24178:	00024f20 0000000b 00024f20 0000000b      O...... O......
   24188:	00000008 00024f2c 00000005 00024f2c     ....,O......,O..
   24198:	00000005 00000008 00024f34 0000000a     ........4O......
   241a8:	00024f34 0000000a 00000008 00024f40     4O..........@O..
   241b8:	0000000d 00024f40 0000000d 00000000     ....@O..........
   241c8:	00024f50 00000003 00024f50 00000003     PO......PO......
   241d8:	00000001 00024f54 0000000c 00024f64     ....TO......dO..
   241e8:	00000008 00000002 00000000 00000000     ................
	...
   24204:	00024f70 00000004 00024f70 00000004     pO......pO......
   24214:	00000003 00024f78 0000000d 00024f78     ....xO......xO..
   24224:	0000000d 00000004 00024f88 00000008     .........O......
   24234:	00024f88 00000008 00000000 00024f94     .O...........O..
   24244:	00000011 00024f94 00000011 00000000     .....O..........
	...
   24290:	00024fa8 00000005 00024fa8 00000005     .O.......O......
   242a0:	00000000 00024fb0 0000000e 00024fb0     .....O.......O..
   242b0:	0000000e 00000000 00000000 00000000     ................
	...
   242cc:	00024fc0 00000004 00024fc0 00000004     .O.......O......
   242dc:	00000009 00024fc8 00000007 00024f08     .....O.......O..
   242ec:	00000004 00000000 00024fd0 00000009     .........O......
   242fc:	00024f70 00000004 00000005 00024fdc     pO...........O..
   2430c:	00000012 00024fdc 00000012 00000006     .....O..........
   2431c:	00022fb0 00000003 00022fb0 00000003     ./......./......
   2432c:	00000000 00024ff0 00000009 00024ff0     .....O.......O..
   2433c:	00000009 00000000 00024ffc 00000009     .........O......
   2434c:	00024ffc 00000009 00000000 00025008     .O...........P..
   2435c:	0000000a 00025008 0000000a 00000000     .....P..........
   2436c:	00025014 00000004 00025014 00000004     .P.......P......
   2437c:	00000008 0002501c 00000008 0002501c     .....P.......P..
   2438c:	00000008 00000000 00025028 00000008     ........(P......
   2439c:	00025028 00000008 00000000 00025034     (P..........4P..
   243ac:	00000011 00025034 00000011 00000000     ....4P..........

000243bc <cplus_demangle_operators>:
   243bc:	00024cec 00024cf0 00000002 00000002     .L...L..........
   243cc:	00024cf4 00024cf8 00000001 00000002     .L...L..........
   243dc:	00024cfc 00024b20 00000002 00000002     .L.. K..........
   243ec:	00024a18 00024d00 00000001 00000001     .J...M..........
   243fc:	00024d04 00024d00 00000001 00000002     .M...M..........
   2440c:	00024d08 00024d0c 00000008 00000001     .M...M..........
   2441c:	00024d18 00024d0c 00000008 00000001     .M...M..........
   2442c:	00024d1c 00024d20 0000000a 00000002     .M.. M..........
   2443c:	00024828 00024d2c 00000002 00000002     (H..,M..........
   2444c:	00024d30 00024d34 00000001 00000002     0M..4M..........
   2445c:	00024d38 00024d3c 00000001 00000001     8M..<M..........
   2446c:	00024d40 00024d44 00000002 00000002     @M..DM..........
   2447c:	00024d48 00024d4c 00000009 00000001     HM..LM..........
   2448c:	00024d58 00024d5c 0000000c 00000002     XM..\M..........
   2449c:	00024d6c 00024d70 00000001 00000001     lM..pM..........
   244ac:	00024d74 00024d78 00000007 00000001     tM..xM..........
   244bc:	00024d80 00024d84 00000002 00000002     .M...M..........
   244cc:	0002482c 00024eb4 00000001 00000002     ,H...N..........
   244dc:	00024d88 00024d8c 00000001 00000002     .M...M..........
   244ec:	00024d90 00024d94 00000002 00000002     .M...M..........
   244fc:	00024d98 00024d9c 00000001 00000002     .M...M..........
   2450c:	00024da0 00024da4 00000002 00000002     .M...M..........
   2451c:	00024da8 00022fb0 00000003 00000003     .M.../..........
   2452c:	00024dac 00022fb0 00000003 00000003     .M.../..........
   2453c:	00024db0 00022fb0 00000003 00000002     .M.../..........
   2454c:	00024db4 00022fb0 00000003 00000002     .M.../..........
   2455c:	00024db8 00024dbc 00000002 00000002     .M...M..........
   2456c:	00024a1c 00024870 00000002 00000001     .J..pH..........
   2457c:	00024dc0 00024c30 00000001 00000002     .M..0L..........
   2458c:	00024a24 00024890 00000002 00000002     $J...H..........
   2459c:	00024dc4 00024dc8 00000003 00000002     .M...M..........
   245ac:	00024f1c 00024dcc 00000002 00000002     .O...M..........
   245bc:	00024864 00024dd0 0000000b 00000001     dH...M..........
   245cc:	00024ddc 00024de0 00000002 00000002     .M...M..........
   245dc:	00024de4 00024de8 00000001 00000002     .M...M..........
   245ec:	00024dec 00024df0 00000002 00000002     .M...M..........
   245fc:	00024df4 00024df8 00000002 00000002     .M...M..........
   2460c:	00024dfc 00024e00 00000001 00000002     .M...N..........
   2461c:	00024e04 00024d70 00000001 00000002     .N..pM..........
   2462c:	00024e08 00024e0c 00000002 00000001     .N...N..........
   2463c:	00024e10 00024e14 00000005 00000003     .N...N..........
   2464c:	00024e1c 00024e20 00000002 00000002     .N.. N..........
   2465c:	00024fec 00024e00 00000001 00000001     .O...N..........
   2466c:	00024e24 00024e28 00000001 00000001     $N..(N..........
   2467c:	00024e2c 00024e30 00000003 00000003     ,N..0N..........
   2468c:	00024e34 00024e38 00000002 00000002     4N..8N..........
   2469c:	00024e3c 00024e40 00000002 00000002     <N..@N..........
   246ac:	00024b68 00024e44 00000001 00000002     hK..DN..........
   246bc:	00024e48 00024e4c 00000002 00000002     HN..LN..........
   246cc:	00024e50 00024e54 00000001 00000002     PN..TN..........
   246dc:	00024e58 00024e5c 00000003 00000002     XN..\N..........
   246ec:	00024e60 00024e64 00000002 00000001     `N..dN..........
   246fc:	00024e68 00024e54 00000001 00000001     hN..TN..........
   2470c:	00024830 00024e6c 00000002 00000002     0H..lN..........
   2471c:	00024834 00024e70 00000001 00000003     4H..pN..........
   2472c:	00024e74 00024e78 00000002 00000002     tN..xN..........
   2473c:	00024e7c 00024e80 00000003 00000002     |N...N..........
   2474c:	00024e84 00024e88 00000010 00000002     .N...N..........
   2475c:	00024e9c 00024ea0 00000001 00000002     .N...N..........
   2476c:	00024ea4 00024ea8 00000002 00000002     .N...N..........
   2477c:	00024824 00024eac 00000009 00000001     $H...N..........
   2478c:	00024ae8 00024eac 00000009 00000001     .J...N..........
   2479c:	00024eb8 00024ebc 0000000b 00000002     .N...N..........
   247ac:	00024d28 00024ec8 00000007 00000001     (M...N..........
   247bc:	00024ed0 00024ec8 00000007 00000001     .N...N..........
   247cc:	00024ed4 00024ed8 00000005 00000000     .N...N..........
   247dc:	00024ee0 00024ee4 00000006 00000001     .N...N..........
	...
   247fc:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   2480c:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   2481c:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   2482c:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   2483c:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   2484c:	6f747561 00000000 6c636564 65707974     auto....decltype
   2485c:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   2486c:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   2487c:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   2488c:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   2489c:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   248ac:	20726f66 00000000 736e6f63 63757274     for ....construc
   248bc:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   248cc:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   248dc:	6f666e69 726f6620 00000020 65707974     info for ...type
   248ec:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   248fc:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   2490c:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   2491c:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   2492c:	6e616972 65722074 6e727574 75687420     riant return thu
   2493c:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   2494c:	66207373 0020726f 72617567 61762064     ss for .guard va
   2495c:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   2496c:	74696e69 6e756620 6f697463 6f66206e     init function fo
   2497c:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   2498c:	636e7566 6e6f6974 726f6620 00000020     function for ...
   2499c:	65666572 636e6572 65742065 726f706d     reference tempor
   249ac:	20797261 00000023 64646968 61206e65     ary #...hidden a
   249bc:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   249cc:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   249dc:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   249ec:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   249fc:	0000202c 7265706f 726f7461 00000000     , ..operator....
   24a0c:	7265706f 726f7461 00000020 00006461     operator ...ad..
   24a1c:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   24a2c:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   24a3c:	006c6c75 736c6166 00000065 65757274     ull.false...true
   24a4c:	00000000 6176616a 73657220 6372756f     ....java resourc
   24a5c:	00002065 6c636564 65707974 00002820     e ..decltype (..
   24a6c:	73696874 00000000 7261707b 0000236d     this....{parm#..
   24a7c:	626f6c67 63206c61 74736e6f 74637572     global construct
   24a8c:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   24a9c:	626f6c67 64206c61 72747365 6f746375     global destructo
   24aac:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   24abc:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   24acc:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   24adc:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   24aec:	73657220 63697274 00000074 6c6f7620      restrict... vol
   24afc:	6c697461 00000065 6e6f6320 00007473     atile... const..
   24b0c:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   24b1c:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   24b2c:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   24b3c:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   24b4c:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   24b5c:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   24b6c:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   24b7c:	7361623a 735f6369 6e697274 00000067     :basic_string...
   24b8c:	69736162 74735f63 676e6972 00000000     basic_string....
   24b9c:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   24bac:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   24bbc:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   24bcc:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   24bdc:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   24bec:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   24bfc:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   24c0c:	65727473 633c6d61 2c726168 64747320     stream<char, std
   24c1c:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   24c2c:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   24c3c:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   24c4c:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   24c5c:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   24c6c:	64747320 68633a3a 745f7261 74696172      std::char_trait
   24c7c:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   24c8c:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   24c9c:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   24cac:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   24cbc:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   24ccc:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   24cdc:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   24cec:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   24cfc:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   24d0c:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   24d1c:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   24d2c:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   24d3c:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   24d4c:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   24d5c:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   24d6c:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   24d7c:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   24d8c:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   24d9c:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   24dac:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   24dbc:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   24dcc:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   24ddc:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   24dec:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   24dfc:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   24e0c:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   24e1c:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24e2c:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24e3c:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24e4c:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24e5c:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   24e6c:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   24e7c:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   24e8c:	70726574 5f746572 74736163 00000000     terpret_cast....
   24e9c:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   24eac:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   24ebc:	74617473 635f6369 00747361 657a6973     static_cast.size
   24ecc:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   24edc:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   24eec:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   24efc:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   24f0c:	00000000 65747962 00000000 62756f64     ....byte....doub
   24f1c:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   24f2c:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   24f3c:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   24f4c:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   24f5c:	746e6920 00000000 69736e75 64656e67      int....unsigned
   24f6c:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   24f7c:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   24f8c:	38323174 00000000 69736e75 64656e67     t128....unsigned
   24f9c:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   24fac:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   24fbc:	00007472 64696f76 00000000 61686377     rt..void....wcha
   24fcc:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   24fdc:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   24fec:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   24ffc:	69636564 366c616d 00000034 69636564     decimal64...deci
   2500c:	316c616d 00003832 666c6168 00000000     mal128..half....
   2501c:	72616863 745f3631 00000000 72616863     char16_t....char
   2502c:	745f3233 00000000 6c636564 65707974     32_t....decltype
   2503c:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   2504c:	00000000 74727173 00000066              ....sqrtf...

00025058 <TWO52>:
   25058:	00000000 43300000 00000000 c3300000     ......0C......0.

00025068 <_global_impure_ptr>:
   25068:	20000110 00000043 49534f50 00000058     ... C...POSIX...
   25078:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   25088:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   25098:	00000000 33323130 37363534 62613938     ....0123456789ab
   250a8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   250b8:	00000030                                0...

000250bc <blanks.8346>:
   250bc:	20202020 20202020 20202020 20202020                     

000250cc <zeroes.8347>:
   250cc:	30303030 30303030 30303030 30303030     0000000000000000

000250dc <_ctype_>:
   250dc:	20202000 20202020 28282020 20282828     .         ((((( 
   250ec:	20202020 20202020 20202020 20202020                     
   250fc:	10108820 10101010 10101010 10101010      ...............
   2510c:	04040410 04040404 10040404 10101010     ................
   2511c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2512c:	01010101 01010101 01010101 10101010     ................
   2513c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2514c:	02020202 02020202 02020202 10101010     ................
   2515c:	00000020 00000000 00000000 00000000      ...............
	...
   251e0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

000251f0 <__mprec_bigtens>:
   251f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   25200:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   25210:	7f73bf3c 75154fdd                       <.s..O.u

00025218 <__mprec_tens>:
   25218:	00000000 3ff00000 00000000 40240000     .......?......$@
   25228:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   25238:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   25248:	00000000 412e8480 00000000 416312d0     .......A......cA
   25258:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   25268:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   25278:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   25288:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   25298:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   252a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   252b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   252c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   252d8:	79d99db4 44ea7843                       ...yCx.D

000252e0 <p05.7178>:
   252e0:	00000005 00000019 0000007d              ........}...

000252ec <__EH_FRAME_BEGIN__>:
   252ec:	00000000                                ....
