
Move4IncrementsHomeToHardStop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020e50  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00024e50  00024e50  00024e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  00024f4c  00024f4c  00024f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ab0  20000000  000250d4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018f0  20000ab0  00025b90  00030ab0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a91b0  00000000  00000000  00030ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd3b  00000000  00000000  000d9d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f0  00000000  00000000  000e9a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007c50  00000000  00000000  000eb284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f2ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001425c  00000000  00000000  00114a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f1938  00000000  00000000  00128cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000074bc  00000000  00000000  0021a5e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00023c1d  00000000  00000000  00221aa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 fd 94 00 00 d1 42 00 00 d1 42 00 00     ... .....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	99 93 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 6d 92 00 00 7d 92 00 00 8d 92 00 00     .B..m...}.......
    407c:	9d 92 00 00 ad 92 00 00 bd 92 00 00 cd 92 00 00     ................
    408c:	dd 92 00 00 ed 92 00 00 fd 92 00 00 0d 93 00 00     ................
    409c:	1d 93 00 00 2d 93 00 00 39 93 00 00 49 93 00 00     ....-...9...I...
    40ac:	59 93 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     Y....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 01 92 00 00 d1 42 00 00 0d 92 00 00     .B.......B......
    4104:	19 92 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    4114:	d1 42 00 00 25 92 00 00 d1 42 00 00 31 92 00 00     .B..%....B..1...
    4124:	3d 92 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     =....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 49 92 00 00 d1 42 00 00 55 92 00 00     .B..I....B..U...
    4174:	61 92 00 00 00 00 00 00 00 00 00 00 3d 30 01 00     a...........=0..
    4184:	41 30 01 00 45 30 01 00 49 30 01 00 f5 91 00 00     A0..E0..I0......
    4194:	ed 93 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	69 93 00 00 d1 42 00 00 d1 42 00 00 81 93 00 00     i....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ab0 	.word	0x20000ab0
    4280:	00000000 	.word	0x00000000
    4284:	00024e4c 	.word	0x00024e4c

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00024e4c 	.word	0x00024e4c
    42c4:	20000ab4 	.word	0x20000ab4
    42c8:	20000aac 	.word	0x20000aac
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    42d8:	f01a fd12 	bl	1ed00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42dc:	b168      	cbz	r0, 42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x26>
            if (!SendChar(buffer[iChar])) {
    42de:	4e0d      	ldr	r6, [pc, #52]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    42e0:	1825      	adds	r5, r4, r0
    42e2:	e001      	b.n	42e8 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42e4:	42a5      	cmp	r5, r4
    42e6:	d008      	beq.n	42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x26>
            if (!SendChar(buffer[iChar])) {
    42e8:	f814 1b01 	ldrb.w	r1, [r4], #1
    42ec:	4630      	mov	r0, r6
    42ee:	f001 fc9b 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    42f2:	2800      	cmp	r0, #0
    42f4:	d1f6      	bne.n	42e4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x10>
        return Send(nullTermStr) && SendLine();
    }
    42f6:	2000      	movs	r0, #0
    42f8:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    42fa:	210d      	movs	r1, #13
    42fc:	4805      	ldr	r0, [pc, #20]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    42fe:	f001 fc93 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4302:	2800      	cmp	r0, #0
    4304:	d0f7      	beq.n	42f6 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x22>
    4306:	210a      	movs	r1, #10
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    }
    430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    430e:	f001 bc8b 	b.w	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4312:	bf00      	nop
    4314:	20001480 	.word	0x20001480

00004318 <_Z14MoveIncrementsml.part.2>:
 *    int numberOfIncrements  - The number of increments to command
 *    int positionIncrement   - The position increment commanded
 *
 * Returns: True/False depending on whether the move was successfully triggered.
 */
bool MoveIncrements(uint32_t numberOfIncrements, int32_t positionIncrement)
    4318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    431c:	4cae      	ldr	r4, [pc, #696]	; (45d8 <_Z14MoveIncrementsml.part.2+0x2c0>)
            if (!SendChar(buffer[iChar])) {
    431e:	4daf      	ldr	r5, [pc, #700]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    4320:	b08a      	sub	sp, #40	; 0x28
    4322:	4607      	mov	r7, r0
    4324:	460e      	mov	r6, r1
    4326:	f104 0807 	add.w	r8, r4, #7
    432a:	f814 1b01 	ldrb.w	r1, [r4], #1
    432e:	4628      	mov	r0, r5
    4330:	f001 fc7a 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4334:	b108      	cbz	r0, 433a <_Z14MoveIncrementsml.part.2+0x22>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4336:	45a0      	cmp	r8, r4
    4338:	d1f7      	bne.n	432a <_Z14MoveIncrementsml.part.2+0x12>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[1 + 8 * sizeof(number)];
        utoa(number, strRep, radix);
    433a:	a901      	add	r1, sp, #4
    433c:	220a      	movs	r2, #10
    433e:	4638      	mov	r0, r7
    4340:	f01c f834 	bl	203ac <utoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4344:	a801      	add	r0, sp, #4
    4346:	f01a fcdb 	bl	1ed00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    434a:	b170      	cbz	r0, 436a <_Z14MoveIncrementsml.part.2+0x52>
    434c:	ab01      	add	r3, sp, #4
            if (!SendChar(buffer[iChar])) {
    434e:	f8df 828c 	ldr.w	r8, [pc, #652]	; 45dc <_Z14MoveIncrementsml.part.2+0x2c4>
    4352:	181d      	adds	r5, r3, r0
    4354:	461c      	mov	r4, r3
    4356:	e001      	b.n	435c <_Z14MoveIncrementsml.part.2+0x44>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4358:	42a5      	cmp	r5, r4
    435a:	d006      	beq.n	436a <_Z14MoveIncrementsml.part.2+0x52>
            if (!SendChar(buffer[iChar])) {
    435c:	f814 1b01 	ldrb.w	r1, [r4], #1
    4360:	4640      	mov	r0, r8
    4362:	f001 fc61 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4366:	2800      	cmp	r0, #0
    4368:	d1f6      	bne.n	4358 <_Z14MoveIncrementsml.part.2+0x40>
    436a:	4c9d      	ldr	r4, [pc, #628]	; (45e0 <_Z14MoveIncrementsml.part.2+0x2c8>)
    436c:	4d9b      	ldr	r5, [pc, #620]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    436e:	f104 0803 	add.w	r8, r4, #3
    4372:	f814 1b01 	ldrb.w	r1, [r4], #1
    4376:	4628      	mov	r0, r5
    4378:	f001 fc56 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    437c:	b108      	cbz	r0, 4382 <_Z14MoveIncrementsml.part.2+0x6a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    437e:	45a0      	cmp	r8, r4
    4380:	d1f7      	bne.n	4372 <_Z14MoveIncrementsml.part.2+0x5a>

    SerialPort.Send("Moving ");
    SerialPort.Send(numberOfIncrements);
    SerialPort.Send(" * ");

    switch (positionIncrement)
    4382:	4b98      	ldr	r3, [pc, #608]	; (45e4 <_Z14MoveIncrementsml.part.2+0x2cc>)
    4384:	429e      	cmp	r6, r3
    4386:	f000 8119 	beq.w	45bc <_Z14MoveIncrementsml.part.2+0x2a4>
    438a:	f340 80c1 	ble.w	4510 <_Z14MoveIncrementsml.part.2+0x1f8>
    438e:	f240 23ee 	movw	r3, #750	; 0x2ee
    4392:	429e      	cmp	r6, r3
    4394:	f000 80e3 	beq.w	455e <_Z14MoveIncrementsml.part.2+0x246>
    4398:	f240 6382 	movw	r3, #1666	; 0x682
    439c:	429e      	cmp	r6, r3
    439e:	f040 80d9 	bne.w	4554 <_Z14MoveIncrementsml.part.2+0x23c>
        itoa(number, strRep, radix);
    43a2:	4630      	mov	r0, r6
    43a4:	220a      	movs	r2, #10
    43a6:	a901      	add	r1, sp, #4
    43a8:	f019 fc10 	bl	1dbcc <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    43ac:	a801      	add	r0, sp, #4
    43ae:	f01a fca7 	bl	1ed00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43b2:	b160      	cbz	r0, 43ce <_Z14MoveIncrementsml.part.2+0xb6>
    43b4:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    43b6:	4e89      	ldr	r6, [pc, #548]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    43b8:	1825      	adds	r5, r4, r0
    43ba:	e001      	b.n	43c0 <_Z14MoveIncrementsml.part.2+0xa8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43bc:	42ac      	cmp	r4, r5
    43be:	d006      	beq.n	43ce <_Z14MoveIncrementsml.part.2+0xb6>
            if (!SendChar(buffer[iChar])) {
    43c0:	f814 1b01 	ldrb.w	r1, [r4], #1
    43c4:	4630      	mov	r0, r6
    43c6:	f001 fc2f 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ca:	2800      	cmp	r0, #0
    43cc:	d1f6      	bne.n	43bc <_Z14MoveIncrementsml.part.2+0xa4>
        return SendChar('\r') && SendChar('\n');
    43ce:	210d      	movs	r1, #13
    43d0:	4882      	ldr	r0, [pc, #520]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    43d2:	f001 fc29 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43d6:	2800      	cmp	r0, #0
    43d8:	f040 8124 	bne.w	4624 <_Z14MoveIncrementsml.part.2+0x30c>
        motor.MotorInBState(false);
        break;
    case POSITION_INCREMENT_3:
        // Sets Input A and B to position increment 3
        SerialPort.SendLine(POSITION_INCREMENT_3);
        motor.MotorInAState(false);
    43dc:	2100      	movs	r1, #0
        motor.MotorInBState(true);
        break;
    case POSITION_INCREMENT_4:
        // Sets Input A and B to position increment 4
        SerialPort.SendLine(POSITION_INCREMENT_4);
        motor.MotorInAState(true);
    43de:	4882      	ldr	r0, [pc, #520]	; (45e8 <_Z14MoveIncrementsml.part.2+0x2d0>)
    43e0:	f000 fc14 	bl	4c0c <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
        motor.MotorInBState(true);
    43e4:	2101      	movs	r1, #1
    43e6:	4880      	ldr	r0, [pc, #512]	; (45e8 <_Z14MoveIncrementsml.part.2+0x2d0>)
    43e8:	f000 fc2a 	bl	4c40 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    43ec:	487f      	ldr	r0, [pc, #508]	; (45ec <_Z14MoveIncrementsml.part.2+0x2d4>)
    43ee:	4c80      	ldr	r4, [pc, #512]	; (45f0 <_Z14MoveIncrementsml.part.2+0x2d8>)
            if (!SendChar(buffer[iChar])) {
    43f0:	4d7a      	ldr	r5, [pc, #488]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    43f2:	2100      	movs	r1, #0
    43f4:	f005 fa70 	bl	98d8 <Delay_cycles>

    // Delays 20ms longer than the Input A, B filter setting in MSP
    Delay_ms(20 + INPUT_A_B_FILTER);

    // Sends trigger pulses to the motor
    motor.EnableTriggerPulse(numberOfIncrements, TRIGGER_PULSE_TIME, true);
    43f8:	b2b9      	uxth	r1, r7
    43fa:	2301      	movs	r3, #1
    43fc:	2219      	movs	r2, #25
    43fe:	487a      	ldr	r0, [pc, #488]	; (45e8 <_Z14MoveIncrementsml.part.2+0x2d0>)
    4400:	f000 fc36 	bl	4c70 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb>
    4404:	f104 0619 	add.w	r6, r4, #25
    4408:	f814 1b01 	ldrb.w	r1, [r4], #1
    440c:	4628      	mov	r0, r5
    440e:	f001 fc0b 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4412:	b140      	cbz	r0, 4426 <_Z14MoveIncrementsml.part.2+0x10e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4414:	42a6      	cmp	r6, r4
    4416:	d1f7      	bne.n	4408 <_Z14MoveIncrementsml.part.2+0xf0>
        return SendChar('\r') && SendChar('\n');
    4418:	210d      	movs	r1, #13
    441a:	4870      	ldr	r0, [pc, #448]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    441c:	f001 fc04 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4420:	2800      	cmp	r0, #0
    4422:	f040 80c6 	bne.w	45b2 <_Z14MoveIncrementsml.part.2+0x29a>
    4426:	4a70      	ldr	r2, [pc, #448]	; (45e8 <_Z14MoveIncrementsml.part.2+0x2d0>)

    // Waits for HLFB to assert (signaling the move has successfully completed)
    SerialPort.SendLine("Moving.. Waiting for HLFB");
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4428:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    442c:	2b01      	cmp	r3, #1
    442e:	d003      	beq.n	4438 <_Z14MoveIncrementsml.part.2+0x120>
           !motor.StatusReg().bit.MotorInFault)
    4430:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4434:	06d9      	lsls	r1, r3, #27
    4436:	d5f7      	bpl.n	4428 <_Z14MoveIncrementsml.part.2+0x110>
    {
        continue;
    }
    // Check if a motor faulted during move
    // Clear fault if configured to do so
    if (motor.StatusReg().bit.MotorInFault)
    4438:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    443c:	06db      	lsls	r3, r3, #27
    443e:	d418      	bmi.n	4472 <_Z14MoveIncrementsml.part.2+0x15a>
    4440:	4c6c      	ldr	r4, [pc, #432]	; (45f4 <_Z14MoveIncrementsml.part.2+0x2dc>)
            if (!SendChar(buffer[iChar])) {
    4442:	4d66      	ldr	r5, [pc, #408]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    4444:	f104 0609 	add.w	r6, r4, #9
    4448:	f814 1b01 	ldrb.w	r1, [r4], #1
    444c:	4628      	mov	r0, r5
    444e:	f001 fbeb 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4452:	b148      	cbz	r0, 4468 <_Z14MoveIncrementsml.part.2+0x150>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4454:	42a6      	cmp	r6, r4
    4456:	d1f7      	bne.n	4448 <_Z14MoveIncrementsml.part.2+0x130>
        return SendChar('\r') && SendChar('\n');
    4458:	210d      	movs	r1, #13
    445a:	4860      	ldr	r0, [pc, #384]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    445c:	f001 fbe4 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4460:	4604      	mov	r4, r0
    4462:	2800      	cmp	r0, #0
    4464:	f040 80a0 	bne.w	45a8 <_Z14MoveIncrementsml.part.2+0x290>
        return false;
    }
    else
    {
        SerialPort.SendLine("Move Done");
        return true;
    4468:	2401      	movs	r4, #1
    }
}
    446a:	4620      	mov	r0, r4
    446c:	b00a      	add	sp, #40	; 0x28
    446e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4472:	4c61      	ldr	r4, [pc, #388]	; (45f8 <_Z14MoveIncrementsml.part.2+0x2e0>)
            if (!SendChar(buffer[iChar])) {
    4474:	4d59      	ldr	r5, [pc, #356]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    4476:	f104 0615 	add.w	r6, r4, #21
    447a:	f814 1b01 	ldrb.w	r1, [r4], #1
    447e:	4628      	mov	r0, r5
    4480:	f001 fbd2 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4484:	b150      	cbz	r0, 449c <_Z14MoveIncrementsml.part.2+0x184>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4486:	42a6      	cmp	r6, r4
    4488:	d1f7      	bne.n	447a <_Z14MoveIncrementsml.part.2+0x162>
        return SendChar('\r') && SendChar('\n');
    448a:	210d      	movs	r1, #13
    448c:	4853      	ldr	r0, [pc, #332]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    448e:	f001 fbcb 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4492:	b118      	cbz	r0, 449c <_Z14MoveIncrementsml.part.2+0x184>
    4494:	210a      	movs	r1, #10
    4496:	4851      	ldr	r0, [pc, #324]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    4498:	f001 fbc6 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    449c:	4c57      	ldr	r4, [pc, #348]	; (45fc <_Z14MoveIncrementsml.part.2+0x2e4>)
            if (!SendChar(buffer[iChar])) {
    449e:	4d4f      	ldr	r5, [pc, #316]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    44a0:	f104 0644 	add.w	r6, r4, #68	; 0x44
    44a4:	f814 1b01 	ldrb.w	r1, [r4], #1
    44a8:	4628      	mov	r0, r5
    44aa:	f001 fbbd 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44ae:	b150      	cbz	r0, 44c6 <_Z14MoveIncrementsml.part.2+0x1ae>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44b0:	42a6      	cmp	r6, r4
    44b2:	d1f7      	bne.n	44a4 <_Z14MoveIncrementsml.part.2+0x18c>
        return SendChar('\r') && SendChar('\n');
    44b4:	210d      	movs	r1, #13
    44b6:	4849      	ldr	r0, [pc, #292]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    44b8:	f001 fbb6 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44bc:	b118      	cbz	r0, 44c6 <_Z14MoveIncrementsml.part.2+0x1ae>
    44be:	210a      	movs	r1, #10
    44c0:	4846      	ldr	r0, [pc, #280]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    44c2:	f001 fbb1 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44c6:	4c4e      	ldr	r4, [pc, #312]	; (4600 <_Z14MoveIncrementsml.part.2+0x2e8>)
            if (!SendChar(buffer[iChar])) {
    44c8:	4d44      	ldr	r5, [pc, #272]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    44ca:	f104 0640 	add.w	r6, r4, #64	; 0x40
    44ce:	f814 1b01 	ldrb.w	r1, [r4], #1
    44d2:	4628      	mov	r0, r5
    44d4:	f001 fba8 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44d8:	b150      	cbz	r0, 44f0 <_Z14MoveIncrementsml.part.2+0x1d8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44da:	42a6      	cmp	r6, r4
    44dc:	d1f7      	bne.n	44ce <_Z14MoveIncrementsml.part.2+0x1b6>
        return SendChar('\r') && SendChar('\n');
    44de:	210d      	movs	r1, #13
    44e0:	483e      	ldr	r0, [pc, #248]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    44e2:	f001 fba1 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44e6:	b118      	cbz	r0, 44f0 <_Z14MoveIncrementsml.part.2+0x1d8>
    44e8:	210a      	movs	r1, #10
    44ea:	483c      	ldr	r0, [pc, #240]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    44ec:	f001 fb9c 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44f0:	210d      	movs	r1, #13
    44f2:	483a      	ldr	r0, [pc, #232]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    44f4:	f001 fb98 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44f8:	4604      	mov	r4, r0
    44fa:	2800      	cmp	r0, #0
    44fc:	d0b5      	beq.n	446a <_Z14MoveIncrementsml.part.2+0x152>
    44fe:	210a      	movs	r1, #10
    4500:	4836      	ldr	r0, [pc, #216]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    4502:	f001 fb91 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
        return false;
    4506:	2400      	movs	r4, #0
}
    4508:	4620      	mov	r0, r4
    450a:	b00a      	add	sp, #40	; 0x28
    450c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (positionIncrement)
    4510:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
    4514:	429e      	cmp	r6, r3
    4516:	d11d      	bne.n	4554 <_Z14MoveIncrementsml.part.2+0x23c>
        itoa(number, strRep, radix);
    4518:	4630      	mov	r0, r6
    451a:	220a      	movs	r2, #10
    451c:	a901      	add	r1, sp, #4
    451e:	f019 fb55 	bl	1dbcc <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4522:	a801      	add	r0, sp, #4
    4524:	f01a fbec 	bl	1ed00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4528:	b160      	cbz	r0, 4544 <_Z14MoveIncrementsml.part.2+0x22c>
    452a:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    452c:	4e2b      	ldr	r6, [pc, #172]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    452e:	1825      	adds	r5, r4, r0
    4530:	e001      	b.n	4536 <_Z14MoveIncrementsml.part.2+0x21e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4532:	42ac      	cmp	r4, r5
    4534:	d006      	beq.n	4544 <_Z14MoveIncrementsml.part.2+0x22c>
            if (!SendChar(buffer[iChar])) {
    4536:	f814 1b01 	ldrb.w	r1, [r4], #1
    453a:	4630      	mov	r0, r6
    453c:	f001 fb74 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4540:	2800      	cmp	r0, #0
    4542:	d1f6      	bne.n	4532 <_Z14MoveIncrementsml.part.2+0x21a>
        return SendChar('\r') && SendChar('\n');
    4544:	210d      	movs	r1, #13
    4546:	4825      	ldr	r0, [pc, #148]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    4548:	f001 fb6e 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    454c:	2800      	cmp	r0, #0
    454e:	d16e      	bne.n	462e <_Z14MoveIncrementsml.part.2+0x316>
        motor.MotorInAState(true);
    4550:	2101      	movs	r1, #1
    4552:	e744      	b.n	43de <_Z14MoveIncrementsml.part.2+0xc6>
        return false;
    4554:	2400      	movs	r4, #0
}
    4556:	4620      	mov	r0, r4
    4558:	b00a      	add	sp, #40	; 0x28
    455a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        itoa(number, strRep, radix);
    455e:	4630      	mov	r0, r6
    4560:	220a      	movs	r2, #10
    4562:	a901      	add	r1, sp, #4
    4564:	f019 fb32 	bl	1dbcc <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4568:	a801      	add	r0, sp, #4
    456a:	f01a fbc9 	bl	1ed00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    456e:	b160      	cbz	r0, 458a <_Z14MoveIncrementsml.part.2+0x272>
    4570:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    4572:	4e1a      	ldr	r6, [pc, #104]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    4574:	1825      	adds	r5, r4, r0
    4576:	e001      	b.n	457c <_Z14MoveIncrementsml.part.2+0x264>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4578:	42a5      	cmp	r5, r4
    457a:	d006      	beq.n	458a <_Z14MoveIncrementsml.part.2+0x272>
            if (!SendChar(buffer[iChar])) {
    457c:	f814 1b01 	ldrb.w	r1, [r4], #1
    4580:	4630      	mov	r0, r6
    4582:	f001 fb51 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4586:	2800      	cmp	r0, #0
    4588:	d1f6      	bne.n	4578 <_Z14MoveIncrementsml.part.2+0x260>
        return SendChar('\r') && SendChar('\n');
    458a:	210d      	movs	r1, #13
    458c:	4813      	ldr	r0, [pc, #76]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    458e:	f001 fb4b 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4592:	2800      	cmp	r0, #0
    4594:	d155      	bne.n	4642 <_Z14MoveIncrementsml.part.2+0x32a>
        motor.MotorInAState(false);
    4596:	2100      	movs	r1, #0
        motor.MotorInAState(true);
    4598:	4813      	ldr	r0, [pc, #76]	; (45e8 <_Z14MoveIncrementsml.part.2+0x2d0>)
    459a:	f000 fb37 	bl	4c0c <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
        motor.MotorInBState(false);
    459e:	2100      	movs	r1, #0
    45a0:	4811      	ldr	r0, [pc, #68]	; (45e8 <_Z14MoveIncrementsml.part.2+0x2d0>)
    45a2:	f000 fb4d 	bl	4c40 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    45a6:	e721      	b.n	43ec <_Z14MoveIncrementsml.part.2+0xd4>
    45a8:	210a      	movs	r1, #10
    45aa:	480c      	ldr	r0, [pc, #48]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    45ac:	f001 fb3c 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45b0:	e75b      	b.n	446a <_Z14MoveIncrementsml.part.2+0x152>
    45b2:	210a      	movs	r1, #10
    45b4:	4809      	ldr	r0, [pc, #36]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    45b6:	f001 fb37 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45ba:	e734      	b.n	4426 <_Z14MoveIncrementsml.part.2+0x10e>
        itoa(number, strRep, radix);
    45bc:	4630      	mov	r0, r6
    45be:	220a      	movs	r2, #10
    45c0:	a901      	add	r1, sp, #4
    45c2:	f019 fb03 	bl	1dbcc <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    45c6:	a801      	add	r0, sp, #4
    45c8:	f01a fb9a 	bl	1ed00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45cc:	b318      	cbz	r0, 4616 <_Z14MoveIncrementsml.part.2+0x2fe>
    45ce:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    45d0:	4e02      	ldr	r6, [pc, #8]	; (45dc <_Z14MoveIncrementsml.part.2+0x2c4>)
    45d2:	1825      	adds	r5, r4, r0
    45d4:	e018      	b.n	4608 <_Z14MoveIncrementsml.part.2+0x2f0>
    45d6:	bf00      	nop
    45d8:	00022980 	.word	0x00022980
    45dc:	20001480 	.word	0x20001480
    45e0:	00022988 	.word	0x00022988
    45e4:	fffffd12 	.word	0xfffffd12
    45e8:	20000b60 	.word	0x20000b60
    45ec:	00493e00 	.word	0x00493e00
    45f0:	0002298c 	.word	0x0002298c
    45f4:	00022a4c 	.word	0x00022a4c
    45f8:	000229a8 	.word	0x000229a8
    45fc:	000229c0 	.word	0x000229c0
    4600:	00022a08 	.word	0x00022a08
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4604:	42ac      	cmp	r4, r5
    4606:	d006      	beq.n	4616 <_Z14MoveIncrementsml.part.2+0x2fe>
            if (!SendChar(buffer[iChar])) {
    4608:	f814 1b01 	ldrb.w	r1, [r4], #1
    460c:	4630      	mov	r0, r6
    460e:	f001 fb0b 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4612:	2800      	cmp	r0, #0
    4614:	d1f6      	bne.n	4604 <_Z14MoveIncrementsml.part.2+0x2ec>
        return SendChar('\r') && SendChar('\n');
    4616:	210d      	movs	r1, #13
    4618:	480c      	ldr	r0, [pc, #48]	; (464c <_Z14MoveIncrementsml.part.2+0x334>)
    461a:	f001 fb05 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    461e:	b958      	cbnz	r0, 4638 <_Z14MoveIncrementsml.part.2+0x320>
        motor.MotorInAState(true);
    4620:	2101      	movs	r1, #1
    4622:	e7b9      	b.n	4598 <_Z14MoveIncrementsml.part.2+0x280>
    4624:	210a      	movs	r1, #10
    4626:	4809      	ldr	r0, [pc, #36]	; (464c <_Z14MoveIncrementsml.part.2+0x334>)
    4628:	f001 fafe 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    462c:	e6d6      	b.n	43dc <_Z14MoveIncrementsml.part.2+0xc4>
    462e:	210a      	movs	r1, #10
    4630:	4806      	ldr	r0, [pc, #24]	; (464c <_Z14MoveIncrementsml.part.2+0x334>)
    4632:	f001 faf9 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4636:	e78b      	b.n	4550 <_Z14MoveIncrementsml.part.2+0x238>
    4638:	210a      	movs	r1, #10
    463a:	4804      	ldr	r0, [pc, #16]	; (464c <_Z14MoveIncrementsml.part.2+0x334>)
    463c:	f001 faf4 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4640:	e7ee      	b.n	4620 <_Z14MoveIncrementsml.part.2+0x308>
    4642:	210a      	movs	r1, #10
    4644:	4801      	ldr	r0, [pc, #4]	; (464c <_Z14MoveIncrementsml.part.2+0x334>)
    4646:	f001 faef 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    464a:	e7a4      	b.n	4596 <_Z14MoveIncrementsml.part.2+0x27e>
    464c:	20001480 	.word	0x20001480

00004650 <main>:
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    4650:	4b7f      	ldr	r3, [pc, #508]	; (4850 <main+0x200>)
{
    4652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    4656:	4f7f      	ldr	r7, [pc, #508]	; (4854 <main+0x204>)
                          Connector::CPM_MODE_A_DIRECT_B_DIRECT);
    4658:	6818      	ldr	r0, [r3, #0]
    465a:	2209      	movs	r2, #9
    465c:	2102      	movs	r1, #2
    465e:	f006 fbbb 	bl	add8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    4662:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
    4666:	2b02      	cmp	r3, #2
    4668:	d008      	beq.n	467c <main+0x2c>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    466a:	497b      	ldr	r1, [pc, #492]	; (4858 <main+0x208>)
    466c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
        m_hlfbMode = newMode;
    4670:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    4672:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    4674:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    4678:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            case HLFB_CARRIER_45_HZ:
                m_hlfbCarrierLossStateChange_ms =
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_45_HZ;
                break;
            case HLFB_CARRIER_482_HZ:
                m_hlfbCarrierLossStateChange_ms =
    467c:	2204      	movs	r2, #4
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    467e:	2301      	movs	r3, #1
                m_hlfbCarrierLossStateChange_ms =
    4680:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
        m_hlfbCarrierFrequency = freq;
    4684:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
    motor.MotorInAState(false);
    4688:	2100      	movs	r1, #0
    while (!SerialPort && Milliseconds() - startTime < timeout)
    468a:	4e74      	ldr	r6, [pc, #464]	; (485c <main+0x20c>)
    motor.MotorInAState(false);
    468c:	4871      	ldr	r0, [pc, #452]	; (4854 <main+0x204>)
    468e:	f000 fabd 	bl	4c0c <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    motor.MotorInBState(false);
    4692:	2100      	movs	r1, #0
    4694:	486f      	ldr	r0, [pc, #444]	; (4854 <main+0x204>)
    4696:	f000 fad3 	bl	4c40 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    SerialPort.Speed(baudRate);
    469a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    469e:	4630      	mov	r0, r6
    46a0:	f001 faaa 	bl	5bf8 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    46a4:	f005 f8ee 	bl	9884 <Milliseconds>
    46a8:	4605      	mov	r5, r0
    SerialPort.PortOpen();
    46aa:	4630      	mov	r0, r6
    46ac:	f001 fa98 	bl	5be0 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout)
    46b0:	f241 3487 	movw	r4, #4999	; 0x1387
    46b4:	4630      	mov	r0, r6
    46b6:	f001 fa8d 	bl	5bd4 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    46ba:	2800      	cmp	r0, #0
    46bc:	f000 80b8 	beq.w	4830 <main+0x1e0>
    motor.EnableRequest(true);
    46c0:	2101      	movs	r1, #1
    46c2:	4864      	ldr	r0, [pc, #400]	; (4854 <main+0x204>)
    46c4:	f000 fb12 	bl	4cec <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    46c8:	4865      	ldr	r0, [pc, #404]	; (4860 <main+0x210>)
    46ca:	f7ff fe03 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    SerialPort.SendLine("Waiting for HLFB...");
    46ce:	4865      	ldr	r0, [pc, #404]	; (4864 <main+0x214>)
    46d0:	f7ff fe00 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    46d4:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
    46d8:	2b01      	cmp	r3, #1
    46da:	d003      	beq.n	46e4 <main+0x94>
           !motor.StatusReg().bit.MotorInFault)
    46dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    46e0:	06dd      	lsls	r5, r3, #27
    46e2:	d5f7      	bpl.n	46d4 <main+0x84>
    if (motor.StatusReg().bit.MotorInFault)
    46e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    46e8:	06dc      	lsls	r4, r3, #27
    46ea:	f140 80a8 	bpl.w	483e <main+0x1ee>
        SerialPort.SendLine("Motor fault detected.");
    46ee:	485e      	ldr	r0, [pc, #376]	; (4868 <main+0x218>)
    46f0:	f7ff fdf0 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
            SerialPort.SendLine("Enable automatic fault handling by setting HANDLE_MOTOR_FAULTS to 1.");
    46f4:	485d      	ldr	r0, [pc, #372]	; (486c <main+0x21c>)
    46f6:	f7ff fded 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
        SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");
    46fa:	485d      	ldr	r0, [pc, #372]	; (4870 <main+0x220>)
    46fc:	f7ff fdea 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    4700:	210d      	movs	r1, #13
    4702:	4856      	ldr	r0, [pc, #344]	; (485c <main+0x20c>)
    4704:	f001 fa90 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4708:	b118      	cbz	r0, 4712 <main+0xc2>
    470a:	210a      	movs	r1, #10
    470c:	4853      	ldr	r0, [pc, #332]	; (485c <main+0x20c>)
    470e:	f001 fa8b 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4712:	f20f 1934 	addw	r9, pc, #308	; 0x134
    4716:	e9d9 8900 	ldrd	r8, r9, [r9]
    471a:	4d56      	ldr	r5, [pc, #344]	; (4874 <main+0x224>)
            if (!SendChar(buffer[iChar])) {
    471c:	4c4f      	ldr	r4, [pc, #316]	; (485c <main+0x20c>)
    471e:	f8df a164 	ldr.w	sl, [pc, #356]	; 4884 <main+0x234>
    4722:	e02d      	b.n	4780 <main+0x130>
    4724:	f240 21ee 	movw	r1, #750	; 0x2ee
    4728:	2001      	movs	r0, #1
    472a:	f7ff fdf5 	bl	4318 <_Z14MoveIncrementsml.part.2>
    472e:	4649      	mov	r1, r9
    4730:	4640      	mov	r0, r8
    4732:	f005 f8d1 	bl	98d8 <Delay_cycles>
    if (motor.StatusReg().bit.MotorInFault)
    4736:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    473a:	06d9      	lsls	r1, r3, #27
    473c:	d463      	bmi.n	4806 <main+0x1b6>
    473e:	4651      	mov	r1, sl
    4740:	2001      	movs	r0, #1
    4742:	f7ff fde9 	bl	4318 <_Z14MoveIncrementsml.part.2>
    4746:	4640      	mov	r0, r8
    4748:	4649      	mov	r1, r9
    474a:	f005 f8c5 	bl	98d8 <Delay_cycles>
    474e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    4752:	06da      	lsls	r2, r3, #27
    4754:	d442      	bmi.n	47dc <main+0x18c>
    4756:	f240 6182 	movw	r1, #1666	; 0x682
    475a:	2002      	movs	r0, #2
    475c:	f7ff fddc 	bl	4318 <_Z14MoveIncrementsml.part.2>
    4760:	4640      	mov	r0, r8
    4762:	4649      	mov	r1, r9
    4764:	f005 f8b8 	bl	98d8 <Delay_cycles>
    4768:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    476c:	06db      	lsls	r3, r3, #27
    476e:	d420      	bmi.n	47b2 <main+0x162>
    4770:	4941      	ldr	r1, [pc, #260]	; (4878 <main+0x228>)
    4772:	2002      	movs	r0, #2
    4774:	f7ff fdd0 	bl	4318 <_Z14MoveIncrementsml.part.2>
    4778:	4640      	mov	r0, r8
    477a:	4649      	mov	r1, r9
    477c:	f005 f8ac 	bl	98d8 <Delay_cycles>
    4780:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    4784:	06d8      	lsls	r0, r3, #27
    4786:	d5cd      	bpl.n	4724 <main+0xd4>
    4788:	4e3c      	ldr	r6, [pc, #240]	; (487c <main+0x22c>)
    478a:	f816 1b01 	ldrb.w	r1, [r6], #1
    478e:	4620      	mov	r0, r4
    4790:	f001 fa4a 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4794:	2800      	cmp	r0, #0
    4796:	d0ca      	beq.n	472e <main+0xde>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4798:	42b5      	cmp	r5, r6
    479a:	d1f6      	bne.n	478a <main+0x13a>
        return SendChar('\r') && SendChar('\n');
    479c:	210d      	movs	r1, #13
    479e:	4620      	mov	r0, r4
    47a0:	f001 fa42 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47a4:	2800      	cmp	r0, #0
    47a6:	d0c2      	beq.n	472e <main+0xde>
    47a8:	210a      	movs	r1, #10
    47aa:	4620      	mov	r0, r4
    47ac:	f001 fa3c 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47b0:	e7bd      	b.n	472e <main+0xde>
    47b2:	4e32      	ldr	r6, [pc, #200]	; (487c <main+0x22c>)
            if (!SendChar(buffer[iChar])) {
    47b4:	f816 1b01 	ldrb.w	r1, [r6], #1
    47b8:	4620      	mov	r0, r4
    47ba:	f001 fa35 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47be:	2800      	cmp	r0, #0
    47c0:	d0da      	beq.n	4778 <main+0x128>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    47c2:	42ae      	cmp	r6, r5
    47c4:	d1f6      	bne.n	47b4 <main+0x164>
        return SendChar('\r') && SendChar('\n');
    47c6:	210d      	movs	r1, #13
    47c8:	4620      	mov	r0, r4
    47ca:	f001 fa2d 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47ce:	2800      	cmp	r0, #0
    47d0:	d0d2      	beq.n	4778 <main+0x128>
    47d2:	210a      	movs	r1, #10
    47d4:	4620      	mov	r0, r4
    47d6:	f001 fa27 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47da:	e7cd      	b.n	4778 <main+0x128>
    47dc:	4e27      	ldr	r6, [pc, #156]	; (487c <main+0x22c>)
            if (!SendChar(buffer[iChar])) {
    47de:	f816 1b01 	ldrb.w	r1, [r6], #1
    47e2:	4620      	mov	r0, r4
    47e4:	f001 fa20 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47e8:	2800      	cmp	r0, #0
    47ea:	d0b9      	beq.n	4760 <main+0x110>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    47ec:	42ae      	cmp	r6, r5
    47ee:	d1f6      	bne.n	47de <main+0x18e>
        return SendChar('\r') && SendChar('\n');
    47f0:	210d      	movs	r1, #13
    47f2:	4620      	mov	r0, r4
    47f4:	f001 fa18 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47f8:	2800      	cmp	r0, #0
    47fa:	d0b1      	beq.n	4760 <main+0x110>
    47fc:	210a      	movs	r1, #10
    47fe:	4620      	mov	r0, r4
    4800:	f001 fa12 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4804:	e7ac      	b.n	4760 <main+0x110>
    4806:	4e1d      	ldr	r6, [pc, #116]	; (487c <main+0x22c>)
            if (!SendChar(buffer[iChar])) {
    4808:	f816 1b01 	ldrb.w	r1, [r6], #1
    480c:	4620      	mov	r0, r4
    480e:	f001 fa0b 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4812:	2800      	cmp	r0, #0
    4814:	d097      	beq.n	4746 <main+0xf6>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4816:	42ae      	cmp	r6, r5
    4818:	d1f6      	bne.n	4808 <main+0x1b8>
        return SendChar('\r') && SendChar('\n');
    481a:	210d      	movs	r1, #13
    481c:	4620      	mov	r0, r4
    481e:	f001 fa03 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4822:	2800      	cmp	r0, #0
    4824:	d08f      	beq.n	4746 <main+0xf6>
    4826:	210a      	movs	r1, #10
    4828:	4620      	mov	r0, r4
    482a:	f001 f9fd 	bl	5c28 <_ZN9ClearCore9SerialUsb8SendCharEh>
    482e:	e78a      	b.n	4746 <main+0xf6>
    while (!SerialPort && Milliseconds() - startTime < timeout)
    4830:	f005 f828 	bl	9884 <Milliseconds>
    4834:	1b40      	subs	r0, r0, r5
    4836:	42a0      	cmp	r0, r4
    4838:	f67f af3c 	bls.w	46b4 <main+0x64>
    483c:	e740      	b.n	46c0 <main+0x70>
        SerialPort.SendLine("Motor Ready");
    483e:	4810      	ldr	r0, [pc, #64]	; (4880 <main+0x230>)
    4840:	f7ff fd48 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    4844:	e765      	b.n	4712 <main+0xc2>
    4846:	bf00      	nop
    4848:	07270e00 	.word	0x07270e00
    484c:	00000000 	.word	0x00000000
    4850:	20001bfc 	.word	0x20001bfc
    4854:	20000b60 	.word	0x20000b60
    4858:	c61c3c00 	.word	0xc61c3c00
    485c:	20001480 	.word	0x20001480
    4860:	00022ac4 	.word	0x00022ac4
    4864:	00022ad4 	.word	0x00022ad4
    4868:	000229a8 	.word	0x000229a8
    486c:	000229c0 	.word	0x000229c0
    4870:	00022ae8 	.word	0x00022ae8
    4874:	00022ac1 	.word	0x00022ac1
    4878:	fffff97e 	.word	0xfffff97e
    487c:	00022a58 	.word	0x00022a58
    4880:	00022b2c 	.word	0x00022b2c
    4884:	fffffd12 	.word	0xfffffd12

00004888 <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    4888:	2000      	movs	r0, #0
    488a:	4770      	bx	lr

0000488c <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    488c:	f990 0018 	ldrsb.w	r0, [r0, #24]
    4890:	4770      	bx	lr
    4892:	bf00      	nop

00004894 <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    4894:	2006      	movs	r0, #6
    4896:	4770      	bx	lr

00004898 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    4898:	2001      	movs	r0, #1
    489a:	4770      	bx	lr

0000489c <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    489c:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    48a0:	4770      	bx	lr
    48a2:	bf00      	nop

000048a4 <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    48a4:	7980      	ldrb	r0, [r0, #6]
    48a6:	4770      	bx	lr

000048a8 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    48a8:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    48aa:	7983      	ldrb	r3, [r0, #6]
    48ac:	428b      	cmp	r3, r1
    48ae:	f000 80a7 	beq.w	4a00 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    48b2:	f1a1 0309 	sub.w	r3, r1, #9
    48b6:	460d      	mov	r5, r1
    48b8:	4604      	mov	r4, r0
    48ba:	2b03      	cmp	r3, #3
    48bc:	f200 80a2 	bhi.w	4a04 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    48c0:	e8df f003 	tbb	[pc, r3]
    48c4:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    48c8:	3030      	adds	r0, #48	; 0x30
    48ca:	f006 feb5 	bl	b638 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    48ce:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    48d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    48d4:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    48d6:	2200      	movs	r2, #0
    48d8:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    48dc:	b13b      	cbz	r3, 48ee <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    48de:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    48e2:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    48e6:	680b      	ldr	r3, [r1, #0]
    48e8:	4013      	ands	r3, r2
    48ea:	d1fc      	bne.n	48e6 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    48ec:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    48ee:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    48f2:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    48f4:	2200      	movs	r2, #0
    48f6:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    48fa:	b13b      	cbz	r3, 490c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    48fc:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4900:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4904:	680b      	ldr	r3, [r1, #0]
    4906:	4013      	ands	r3, r2
    4908:	d1fc      	bne.n	4904 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    490a:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    490c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4910:	4a3d      	ldr	r2, [pc, #244]	; (4a08 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4912:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4916:	7889      	ldrb	r1, [r1, #2]
    4918:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    491c:	440b      	add	r3, r1
            m_mode = newMode;
    491e:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4920:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4924:	f041 0101 	orr.w	r1, r1, #1
    4928:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    492c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4930:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4934:	7889      	ldrb	r1, [r1, #2]
    4936:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    493a:	440b      	add	r3, r1
    493c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4940:	f042 0201 	orr.w	r2, r2, #1
    4944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4948:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    494a:	b662      	cpsie	i
    return true;
    494c:	2001      	movs	r0, #1
    494e:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4950:	3030      	adds	r0, #48	; 0x30
    4952:	f006 fe71 	bl	b638 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    4956:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    4958:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    495c:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    495e:	2200      	movs	r2, #0
    4960:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4964:	b13b      	cbz	r3, 4976 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    4966:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    496a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    496e:	680b      	ldr	r3, [r1, #0]
    4970:	4013      	ands	r3, r2
    4972:	d1fc      	bne.n	496e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    4974:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4976:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    497a:	4a23      	ldr	r2, [pc, #140]	; (4a08 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    497c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4980:	7889      	ldrb	r1, [r1, #2]
    4982:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4986:	440b      	add	r3, r1
    4988:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    498c:	f36f 0100 	bfc	r1, #0, #1
    4990:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4994:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4998:	f991 3001 	ldrsb.w	r3, [r1, #1]
    499c:	7889      	ldrb	r1, [r1, #2]
    499e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    49a2:	440b      	add	r3, r1
    49a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    49a8:	f042 0201 	orr.w	r2, r2, #1
    49ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    49b0:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    49b2:	b662      	cpsie	i
    return true;
    49b4:	2001      	movs	r0, #1
    49b6:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    49b8:	3030      	adds	r0, #48	; 0x30
    49ba:	f006 fe3d 	bl	b638 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    49be:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    49c2:	4a11      	ldr	r2, [pc, #68]	; (4a08 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    49c4:	f991 3001 	ldrsb.w	r3, [r1, #1]
    49c8:	7889      	ldrb	r1, [r1, #2]
    49ca:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    49ce:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    49d0:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    49d2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    49d6:	f36f 0100 	bfc	r1, #0, #1
    49da:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    49de:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    49e2:	f991 3001 	ldrsb.w	r3, [r1, #1]
    49e6:	7889      	ldrb	r1, [r1, #2]
    49e8:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    49ec:	440b      	add	r3, r1
    return true;
    49ee:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    49f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    49f4:	f36f 0200 	bfc	r2, #0, #1
    49f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    49fc:	71a5      	strb	r5, [r4, #6]
            break;
    49fe:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    4a00:	2001      	movs	r0, #1
    4a02:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    4a04:	2000      	movs	r0, #0
}
    4a06:	bd38      	pop	{r3, r4, r5, pc}
    4a08:	41008000 	.word	0x41008000

00004a0c <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4a0c:	7983      	ldrb	r3, [r0, #6]
    4a0e:	2b0a      	cmp	r3, #10
    4a10:	d00f      	beq.n	4a32 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4a12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4a16:	b1a3      	cbz	r3, 4a42 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    4a18:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4a1c:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4a20:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4a24:	01db      	lsls	r3, r3, #7
    4a26:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4a2e:	615a      	str	r2, [r3, #20]
    4a30:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    4a32:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4a36:	079b      	lsls	r3, r3, #30
    4a38:	d5eb      	bpl.n	4a12 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    4a3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d0ea      	beq.n	4a18 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4a42:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4a46:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4a4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4a4e:	01db      	lsls	r3, r3, #7
    4a50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4a58:	619a      	str	r2, [r3, #24]
    4a5a:	4770      	bx	lr

00004a5c <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    4a5c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    4a60:	e7d4      	b.n	4a0c <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    4a62:	bf00      	nop

00004a64 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a68:	9f08      	ldr	r7, [sp, #32]
    4a6a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    4a6e:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    4a72:	4604      	mov	r4, r0
    4a74:	4616      	mov	r6, r2
    4a76:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    4a78:	463a      	mov	r2, r7
    4a7a:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4a7c:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    4a7e:	f009 fd0b 	bl	e498 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    4a82:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4a86:	f006 fda5 	bl	b5d4 <_ZN9ClearCore13StepGeneratorC1Ev>
    4a8a:	4b5c      	ldr	r3, [pc, #368]	; (4bfc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    4a8c:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    4a90:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    4a94:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    4a98:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    4a9c:	6322      	str	r2, [r4, #48]	; 0x30
    4a9e:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    4aa2:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    4aa4:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    4aa6:	f8df a160 	ldr.w	sl, [pc, #352]	; 4c08 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4aaa:	4f55      	ldr	r7, [pc, #340]	; (4c00 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    4aac:	2101      	movs	r1, #1
    4aae:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4ab2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    4ab6:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    4ab8:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    4abc:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4ac0:	f04f 0e02 	mov.w	lr, #2
    4ac4:	2200      	movs	r2, #0
    4ac6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4aca:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    4ace:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    4ad2:	f04f 33ff 	mov.w	r3, #4294967295
    4ad6:	f04f 0e19 	mov.w	lr, #25
    4ada:	f04f 0903 	mov.w	r9, #3
    4ade:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    4ae2:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    4ae6:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    4aea:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    4aee:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    4af2:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    4af6:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    4afa:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    4afe:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    4b02:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    4b06:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    4b0a:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    4b0e:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    4b12:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    4b16:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    4b1a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    4b1e:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    4b22:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    4b26:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    4b2a:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    4b2e:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    4b32:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    4b36:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4b3a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    4b3e:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    4b42:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    4b46:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    4b4a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    4b4e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    4b52:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    4b56:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    4b5a:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    4b5e:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    4b62:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    4b66:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    4b6a:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    4b6e:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    4b70:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    4b74:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    4b78:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4b7c:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4b7e:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4b80:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    4b84:	2b04      	cmp	r3, #4
    4b86:	bf9c      	itt	ls
    4b88:	4a1e      	ldrls	r2, [pc, #120]	; (4c04 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4b8a:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4b8c:	fbb6 f1f2 	udiv	r1, r6, r2
    4b90:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4b94:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4b98:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4b9a:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4b9e:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4ba2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4ba6:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4baa:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4bac:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4bb0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4bb4:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4bb8:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4bba:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4bbc:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    4bc0:	2a04      	cmp	r2, #4
    4bc2:	bf9a      	itte	ls
    4bc4:	4b0f      	ldrls	r3, [pc, #60]	; (4c04 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4bc6:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4bc8:	2200      	movhi	r2, #0
    4bca:	fbb0 f3f2 	udiv	r3, r0, r2
    4bce:	fb02 0313 	mls	r3, r2, r3, r0
    4bd2:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4bd8:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4bdc:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4be0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4be4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4be8:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4bea:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4bee:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4bf2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    4bf6:	4620      	mov	r0, r4
    4bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bfc:	00022b5c 	.word	0x00022b5c
    4c00:	00022b40 	.word	0x00022b40
    4c04:	00022b38 	.word	0x00022b38
    4c08:	c61c3c00 	.word	0xc61c3c00

00004c0c <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    4c0c:	7983      	ldrb	r3, [r0, #6]
    4c0e:	2b09      	cmp	r3, #9
    4c10:	d003      	beq.n	4c1a <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    4c12:	2b0b      	cmp	r3, #11
    4c14:	d001      	beq.n	4c1a <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    4c16:	2000      	movs	r0, #0
}
    4c18:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    4c1a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4c1e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4c22:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4c26:	01db      	lsls	r3, r3, #7
    4c28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4c2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4c30:	b111      	cbz	r1, 4c38 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    4c32:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    4c34:	615a      	str	r2, [r3, #20]
    4c36:	4770      	bx	lr
    4c38:	2001      	movs	r0, #1
    4c3a:	619a      	str	r2, [r3, #24]
    4c3c:	4770      	bx	lr
    4c3e:	bf00      	nop

00004c40 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>:
    switch (m_mode) {
    4c40:	7983      	ldrb	r3, [r0, #6]
    4c42:	2b09      	cmp	r3, #9
    4c44:	d111      	bne.n	4c6a <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x2a>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    4c46:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    4c4a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    4c4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4c52:	01db      	lsls	r3, r3, #7
    4c54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4c58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4c5c:	b111      	cbz	r1, 4c64 <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x24>
            return true;
    4c5e:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    4c60:	615a      	str	r2, [r3, #20]
    4c62:	4770      	bx	lr
    4c64:	2001      	movs	r0, #1
    4c66:	619a      	str	r2, [r3, #24]
    4c68:	4770      	bx	lr
            return false;
    4c6a:	2000      	movs	r0, #0
}
    4c6c:	4770      	bx	lr
    4c6e:	bf00      	nop

00004c70 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb>:
                                     bool blockUntilDone) {
    4c70:	b470      	push	{r4, r5, r6}
    if (!EnableRequest() || m_inFault) {
    4c72:	f890 4100 	ldrb.w	r4, [r0, #256]	; 0x100
    4c76:	b114      	cbz	r4, 4c7e <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0xe>
    4c78:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
    4c7c:	b10c      	cbz	r4, 4c82 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x12>
}
    4c7e:	bc70      	pop	{r4, r5, r6}
    4c80:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4c82:	b672      	cpsid	i
    if (m_enableTriggerActive) {
    4c84:	f890 4101 	ldrb.w	r4, [r0, #257]	; 0x101
    4c88:	b95c      	cbnz	r4, 4ca2 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x32>
    else if (pulseCount) {
    4c8a:	b989      	cbnz	r1, 4cb0 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x40>
    m_enableTriggerPulseLenMs = time_ms;
    4c8c:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
    4c90:	b662      	cpsie	i
    if (blockUntilDone) {
    4c92:	2b00      	cmp	r3, #0
    4c94:	d0f3      	beq.n	4c7e <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0xe>
        while (EnableTriggerPulseActive()) {
    4c96:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d1fb      	bne.n	4c96 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x26>
}
    4c9e:	bc70      	pop	{r4, r5, r6}
    4ca0:	4770      	bx	lr
        m_enableTriggerPulseCount += (pulseCount * 2);
    4ca2:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    4ca6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    4caa:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    4cae:	e7ed      	b.n	4c8c <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x1c>
        m_enableTriggerPulseStartMs = TimingMgr.Milliseconds();
    4cb0:	4d0c      	ldr	r5, [pc, #48]	; (4ce4 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x74>)

        \param[in] fldsToToggle Union of fields in the shift register to
                   be toggled.
    **/
    void ShifterStateToggle(ShiftChain fldsToToggle) {
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    4cb2:	4c0d      	ldr	r4, [pc, #52]	; (4ce8 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x78>)
    4cb4:	682d      	ldr	r5, [r5, #0]
    4cb6:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
    4cba:	692d      	ldr	r5, [r5, #16]
    4cbc:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
        m_enableTriggerPulseCount = (pulseCount * 2);
    4cc0:	0049      	lsls	r1, r1, #1
        m_enableTriggerActive = true;
    4cc2:	2501      	movs	r5, #1
        m_enableTriggerPulseCount = (pulseCount * 2);
    4cc4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
        m_enableTriggerActive = true;
    4cc8:	f880 5101 	strb.w	r5, [r0, #257]	; 0x101
    4ccc:	f3bf 8f5b 	dmb	ish
    4cd0:	e854 1f00 	ldrex	r1, [r4]
    4cd4:	4071      	eors	r1, r6
    4cd6:	e844 1500 	strex	r5, r1, [r4]
    4cda:	2d00      	cmp	r5, #0
    4cdc:	d1f8      	bne.n	4cd0 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x60>
    4cde:	f3bf 8f5b 	dmb	ish
    4ce2:	e7d3      	b.n	4c8c <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x1c>
    4ce4:	20001be4 	.word	0x20001be4
    4ce8:	20001ac4 	.word	0x20001ac4

00004cec <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    4cec:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4cee:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    4cf2:	b083      	sub	sp, #12
    4cf4:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d171      	bne.n	4dde <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    4cfa:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    4cfe:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    4d02:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    4d06:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    4d0a:	428a      	cmp	r2, r1
    4d0c:	d031      	beq.n	4d72 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    4d0e:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    4d12:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    4d16:	2200      	movs	r2, #0
    4d18:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4d1c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    4d20:	b358      	cbz	r0, 4d7a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    4d22:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    4d24:	b672      	cpsid	i
    if (wasDisabled && value) {
    4d26:	b36b      	cbz	r3, 4d84 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    4d28:	b371      	cbz	r1, 4d88 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    4d2a:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    4d2e:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    4d30:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    4d34:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    4d38:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4d3a:	79a3      	ldrb	r3, [r4, #6]
    4d3c:	2b0a      	cmp	r3, #10
    4d3e:	d02a      	beq.n	4d96 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4d40:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    4d44:	428b      	cmp	r3, r1
    4d46:	d035      	beq.n	4db4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    4d48:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4d4c:	2900      	cmp	r1, #0
    4d4e:	d13b      	bne.n	4dc8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4d50:	f3bf 8f5b 	dmb	ish
    4d54:	4a2d      	ldr	r2, [pc, #180]	; (4e0c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    4d56:	43db      	mvns	r3, r3
    4d58:	e852 0f00 	ldrex	r0, [r2]
    4d5c:	4018      	ands	r0, r3
    4d5e:	e842 0500 	strex	r5, r0, [r2]
    4d62:	2d00      	cmp	r5, #0
    4d64:	d1f8      	bne.n	4d58 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    4d66:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    4d6a:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    4d6e:	b003      	add	sp, #12
    4d70:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    4d72:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    4d76:	2a00      	cmp	r2, #0
    4d78:	d133      	bne.n	4de2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    4d7a:	2900      	cmp	r1, #0
    4d7c:	d0d1      	beq.n	4d22 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    4d7e:	b672      	cpsid	i
    if (wasDisabled && value) {
    4d80:	2b00      	cmp	r3, #0
    4d82:	d1d1      	bne.n	4d28 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    4d84:	2900      	cmp	r1, #0
    4d86:	d1d7      	bne.n	4d38 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    4d88:	2300      	movs	r3, #0
    4d8a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    4d8e:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4d90:	79a3      	ldrb	r3, [r4, #6]
    4d92:	2b0a      	cmp	r3, #10
    4d94:	d1d4      	bne.n	4d40 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4d96:	b919      	cbnz	r1, 4da0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    4d98:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    4d9c:	079a      	lsls	r2, r3, #30
    4d9e:	d428      	bmi.n	4df2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    4da0:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    4da4:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4da6:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4daa:	bf48      	it	mi
    4dac:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4db0:	428b      	cmp	r3, r1
    4db2:	d1c9      	bne.n	4d48 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    4db4:	2d00      	cmp	r5, #0
    4db6:	d0d8      	beq.n	4d6a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    4db8:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	d1d4      	bne.n	4d6a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    4dc0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4dc4:	2900      	cmp	r1, #0
    4dc6:	d0c3      	beq.n	4d50 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4dc8:	f3bf 8f5b 	dmb	ish
    4dcc:	4a0f      	ldr	r2, [pc, #60]	; (4e0c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    4dce:	e852 0f00 	ldrex	r0, [r2]
    4dd2:	4318      	orrs	r0, r3
    4dd4:	e842 0500 	strex	r5, r0, [r2]
    4dd8:	2d00      	cmp	r5, #0
    4dda:	d0c4      	beq.n	4d66 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    4ddc:	e7f7      	b.n	4dce <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4dde:	2300      	movs	r3, #0
    4de0:	e78f      	b.n	4d02 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    4de2:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    4de4:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    4de8:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4dec:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4df0:	e797      	b.n	4d22 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    4df2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    4df6:	9101      	str	r1, [sp, #4]
    4df8:	f043 0310 	orr.w	r3, r3, #16
    4dfc:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    4e00:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4e04:	f006 fc18 	bl	b638 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    4e08:	9901      	ldr	r1, [sp, #4]
    4e0a:	e7c9      	b.n	4da0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    4e0c:	20001ac4 	.word	0x20001ac4

00004e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    4e10:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    4e14:	2b00      	cmp	r3, #0
    4e16:	d04a      	beq.n	4eae <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4e18:	4a35      	ldr	r2, [pc, #212]	; (4ef0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    4e1a:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4e1e:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    4e20:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4e22:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    4e24:	b98b      	cbnz	r3, 4e4a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    4e26:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4e2a:	2b01      	cmp	r3, #1
    4e2c:	d022      	beq.n	4e74 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    4e2e:	2b02      	cmp	r3, #2
    4e30:	d13b      	bne.n	4eaa <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    4e32:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    4e36:	2b00      	cmp	r3, #0
    4e38:	d145      	bne.n	4ec6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    4e3a:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d13c      	bne.n	4ebc <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    4e42:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    4e46:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    4e4a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    4e4e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    4e52:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    4e54:	428b      	cmp	r3, r1
    4e56:	d32b      	bcc.n	4eb0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    4e58:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    4e5c:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    4e60:	3b01      	subs	r3, #1
    4e62:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4e66:	b94b      	cbnz	r3, 4e7c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    4e68:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    4e6c:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4e70:	2b01      	cmp	r3, #1
    4e72:	d1dc      	bne.n	4e2e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    4e74:	2302      	movs	r3, #2
    4e76:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    4e7a:	e7da      	b.n	4e32 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    4e7c:	4b1d      	ldr	r3, [pc, #116]	; (4ef4 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    4e7e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    4e82:	f3bf 8f5b 	dmb	ish
    4e86:	e853 1f00 	ldrex	r1, [r3]
    4e8a:	4051      	eors	r1, r2
    4e8c:	e843 1e00 	strex	lr, r1, [r3]
    4e90:	f1be 0f00 	cmp.w	lr, #0
    4e94:	d1f7      	bne.n	4e86 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    4e96:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    4e9a:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4e9e:	2b01      	cmp	r3, #1
    4ea0:	d1c5      	bne.n	4e2e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    4ea2:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d0e4      	beq.n	4e74 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    4eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    4eae:	4770      	bx	lr
    switch (m_clearFaultState) {
    4eb0:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4eb4:	2b02      	cmp	r3, #2
    4eb6:	d0bc      	beq.n	4e32 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    4eb8:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    4ebc:	3b01      	subs	r3, #1
    4ebe:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    4ec2:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    4ec6:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    4ec8:	f500 7394 	add.w	r3, r0, #296	; 0x128
    4ecc:	f3bf 8f5b 	dmb	ish
    4ed0:	e853 1f00 	ldrex	r1, [r3]
    4ed4:	f021 0120 	bic.w	r1, r1, #32
    4ed8:	e843 1e00 	strex	lr, r1, [r3]
    4edc:	f1be 0f00 	cmp.w	lr, #0
    4ee0:	d1f6      	bne.n	4ed0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    4ee2:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    4ee6:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    4eea:	f85d fb04 	ldr.w	pc, [sp], #4
    4eee:	bf00      	nop
    4ef0:	20001be4 	.word	0x20001be4
    4ef4:	20001ac4 	.word	0x20001ac4

00004ef8 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4ef8:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    4efc:	b570      	push	{r4, r5, r6, lr}
    4efe:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    4f00:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4f04:	2b00      	cmp	r3, #0
    4f06:	d163      	bne.n	4fd0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    4f08:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    4f0c:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    4f10:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    4f14:	bb39      	cbnz	r1, 4f66 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    4f16:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    4f1a:	b672      	cpsid	i
    if (wasDisabled && value) {
    4f1c:	b35b      	cbz	r3, 4f76 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    4f1e:	b365      	cbz	r5, 4f7a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    4f20:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    4f24:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    4f26:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    4f2a:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    4f2e:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4f30:	79a3      	ldrb	r3, [r4, #6]
    4f32:	2b0a      	cmp	r3, #10
    4f34:	d028      	beq.n	4f88 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4f36:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    4f3a:	42ab      	cmp	r3, r5
    4f3c:	d033      	beq.n	4fa6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    4f3e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4f42:	2d00      	cmp	r5, #0
    4f44:	d139      	bne.n	4fba <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4f46:	f3bf 8f5b 	dmb	ish
    4f4a:	4a28      	ldr	r2, [pc, #160]	; (4fec <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    4f4c:	43db      	mvns	r3, r3
    4f4e:	e852 1f00 	ldrex	r1, [r2]
    4f52:	4019      	ands	r1, r3
    4f54:	e842 1000 	strex	r0, r1, [r2]
    4f58:	2800      	cmp	r0, #0
    4f5a:	d1f8      	bne.n	4f4e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    4f5c:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    4f60:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    4f64:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    4f66:	2500      	movs	r5, #0
    4f68:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4f6c:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    4f70:	b672      	cpsid	i
    if (wasDisabled && value) {
    4f72:	2b00      	cmp	r3, #0
    4f74:	d1d3      	bne.n	4f1e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    4f76:	2d00      	cmp	r5, #0
    4f78:	d1d9      	bne.n	4f2e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    4f7a:	2300      	movs	r3, #0
    4f7c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    4f80:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4f82:	79a3      	ldrb	r3, [r4, #6]
    4f84:	2b0a      	cmp	r3, #10
    4f86:	d1d6      	bne.n	4f36 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4f88:	b91d      	cbnz	r5, 4f92 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    4f8a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    4f8e:	079a      	lsls	r2, r3, #30
    4f90:	d420      	bmi.n	4fd4 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    4f92:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    4f96:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4f98:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4f9c:	bf48      	it	mi
    4f9e:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4fa2:	42ab      	cmp	r3, r5
    4fa4:	d1cb      	bne.n	4f3e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    4fa6:	2e00      	cmp	r6, #0
    4fa8:	d0da      	beq.n	4f60 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    4faa:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d1d6      	bne.n	4f60 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    4fb2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4fb6:	2d00      	cmp	r5, #0
    4fb8:	d0c5      	beq.n	4f46 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4fba:	f3bf 8f5b 	dmb	ish
    4fbe:	4a0b      	ldr	r2, [pc, #44]	; (4fec <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    4fc0:	e852 1f00 	ldrex	r1, [r2]
    4fc4:	4319      	orrs	r1, r3
    4fc6:	e842 1000 	strex	r0, r1, [r2]
    4fca:	2800      	cmp	r0, #0
    4fcc:	d0c6      	beq.n	4f5c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    4fce:	e7f7      	b.n	4fc0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4fd0:	2300      	movs	r3, #0
    4fd2:	e79d      	b.n	4f10 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    4fd4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    4fd8:	f043 0310 	orr.w	r3, r3, #16
    4fdc:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    4fe0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4fe4:	f006 fb28 	bl	b638 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    4fe8:	e7d3      	b.n	4f92 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    4fea:	bf00      	nop
    4fec:	20001ac4 	.word	0x20001ac4

00004ff0 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    4ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    4ff2:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    4ff6:	b903      	cbnz	r3, 4ffa <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    4ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ffa:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    4ffc:	f009 f99c 	bl	e338 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5000:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5002:	4a98      	ldr	r2, [pc, #608]	; (5264 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    5004:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5008:	2b0a      	cmp	r3, #10
    500a:	bf08      	it	eq
    500c:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5010:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5014:	bf08      	it	eq
    5016:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    501a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    501e:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5020:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5024:	bf18      	it	ne
    5026:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5028:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    502a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    502c:	f240 80df 	bls.w	51ee <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5030:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5034:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5036:	4a8c      	ldr	r2, [pc, #560]	; (5268 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5038:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    503c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5040:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5044:	1c48      	adds	r0, r1, #1
    5046:	d012      	beq.n	506e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5048:	4888      	ldr	r0, [pc, #544]	; (526c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    504a:	f003 fdfb 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    504e:	6803      	ldr	r3, [r0, #0]
    5050:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5052:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5054:	4798      	blx	r3
    5056:	2809      	cmp	r0, #9
    5058:	f000 8248 	beq.w	54ec <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    505c:	4628      	mov	r0, r5
    505e:	f009 f8f1 	bl	e244 <_ZN9ClearCore9DigitalIn5StateEv>
    5062:	1c01      	adds	r1, r0, #0
    5064:	bf18      	it	ne
    5066:	2101      	movne	r1, #1
    5068:	4620      	mov	r0, r4
    506a:	f7ff fe3f 	bl	4cec <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    506e:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5072:	1c4a      	adds	r2, r1, #1
    5074:	d016      	beq.n	50a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5076:	79a3      	ldrb	r3, [r4, #6]
    5078:	2b0a      	cmp	r3, #10
    507a:	d039      	beq.n	50f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    507c:	487b      	ldr	r0, [pc, #492]	; (526c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    507e:	f003 fde1 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5082:	6803      	ldr	r3, [r0, #0]
    5084:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5086:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5088:	4798      	blx	r3
    508a:	2809      	cmp	r0, #9
    508c:	f000 80d0 	beq.w	5230 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    5090:	4628      	mov	r0, r5
    5092:	f009 f8d7 	bl	e244 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5096:	79a3      	ldrb	r3, [r4, #6]
    5098:	2b09      	cmp	r3, #9
    509a:	f000 80d3 	beq.w	5244 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    509e:	2b0b      	cmp	r3, #11
    50a0:	f000 80d0 	beq.w	5244 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    50a4:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    50a8:	1c4b      	adds	r3, r1, #1
    50aa:	d021      	beq.n	50f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    50ac:	79a3      	ldrb	r3, [r4, #6]
    50ae:	2b0a      	cmp	r3, #10
    50b0:	d01e      	beq.n	50f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    50b2:	486e      	ldr	r0, [pc, #440]	; (526c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    50b4:	f003 fdc6 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    50b8:	6803      	ldr	r3, [r0, #0]
    50ba:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    50bc:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    50be:	4798      	blx	r3
    50c0:	2809      	cmp	r0, #9
    50c2:	f000 8239 	beq.w	5538 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    50c6:	4628      	mov	r0, r5
    50c8:	f009 f8bc 	bl	e244 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    50cc:	79a3      	ldrb	r3, [r4, #6]
    50ce:	2b09      	cmp	r3, #9
    50d0:	d10e      	bne.n	50f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    50d2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    50d6:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    50da:	f993 3001 	ldrsb.w	r3, [r3, #1]
    50de:	01db      	lsls	r3, r3, #7
    50e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    50e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    50e8:	2800      	cmp	r0, #0
    50ea:	f000 81d4 	beq.w	5496 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    50ee:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    50f0:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    50f4:	1c4f      	adds	r7, r1, #1
    50f6:	d010      	beq.n	511a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    50f8:	485c      	ldr	r0, [pc, #368]	; (526c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    50fa:	f003 fda3 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    50fe:	6803      	ldr	r3, [r0, #0]
    5100:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5102:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5104:	4798      	blx	r3
    5106:	2809      	cmp	r0, #9
    5108:	f000 817d 	beq.w	5406 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    510c:	682b      	ldr	r3, [r5, #0]
    510e:	4628      	mov	r0, r5
    5110:	681b      	ldr	r3, [r3, #0]
    5112:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5114:	2804      	cmp	r0, #4
    5116:	f000 8176 	beq.w	5406 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    511a:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    511e:	1c4e      	adds	r6, r1, #1
    5120:	d015      	beq.n	514e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5122:	4852      	ldr	r0, [pc, #328]	; (526c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5124:	f003 fd8e 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5128:	6803      	ldr	r3, [r0, #0]
    512a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    512c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    512e:	4798      	blx	r3
    5130:	2809      	cmp	r0, #9
    5132:	f000 81e6 	beq.w	5502 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    5136:	4628      	mov	r0, r5
    5138:	f009 f884 	bl	e244 <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    513c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5140:	fab0 f080 	clz	r0, r0
    5144:	0940      	lsrs	r0, r0, #5
    5146:	f360 03c3 	bfi	r3, r0, #3, #1
    514a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    514e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    5152:	1c4d      	adds	r5, r1, #1
    5154:	d015      	beq.n	5182 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5156:	4845      	ldr	r0, [pc, #276]	; (526c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5158:	f003 fd74 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    515c:	6803      	ldr	r3, [r0, #0]
    515e:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5160:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5162:	4798      	blx	r3
    5164:	2809      	cmp	r0, #9
    5166:	f000 81d1 	beq.w	550c <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    516a:	4628      	mov	r0, r5
    516c:	f009 f86a 	bl	e244 <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    5170:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5174:	fab0 f080 	clz	r0, r0
    5178:	0940      	lsrs	r0, r0, #5
    517a:	f360 1304 	bfi	r3, r0, #4, #1
    517e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5182:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    5186:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    518a:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    518e:	1c48      	adds	r0, r1, #1
    5190:	f000 8132 	beq.w	53f8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5194:	4835      	ldr	r0, [pc, #212]	; (526c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5196:	f003 fd55 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    519a:	6803      	ldr	r3, [r0, #0]
    519c:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    519e:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    51a0:	4798      	blx	r3
    51a2:	2809      	cmp	r0, #9
    51a4:	f000 81c0 	beq.w	5528 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    51a8:	4638      	mov	r0, r7
    51aa:	f009 f84b 	bl	e244 <_ZN9ClearCore9DigitalIn5StateEv>
    51ae:	fab0 f780 	clz	r7, r0
    51b2:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    51b4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    51b8:	2b00      	cmp	r3, #0
    51ba:	f040 8131 	bne.w	5420 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    51be:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    51c2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    51c6:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    51ca:	2900      	cmp	r1, #0
    51cc:	d152      	bne.n	5274 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    51ce:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    51d2:	0792      	lsls	r2, r2, #30
    51d4:	d54e      	bpl.n	5274 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    51d6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    51da:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    51de:	2800      	cmp	r0, #0
    51e0:	f000 8152 	beq.w	5488 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    51e4:	06d7      	lsls	r7, r2, #27
    51e6:	d549      	bpl.n	527c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    51e8:	f046 0604 	orr.w	r6, r6, #4
    51ec:	e046      	b.n	527c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    51ee:	07aa      	lsls	r2, r5, #30
    51f0:	f000 8161 	beq.w	54b6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    51f4:	2333      	movs	r3, #51	; 0x33
    51f6:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    51f8:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    51fc:	2201      	movs	r2, #1
    51fe:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5202:	b29a      	uxth	r2, r3
    5204:	3200      	adds	r2, #0
    5206:	bf18      	it	ne
    5208:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    520a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    520e:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    5212:	06eb      	lsls	r3, r5, #27
    5214:	f100 8158 	bmi.w	54c8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5218:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    521c:	2b00      	cmp	r3, #0
    521e:	f040 810f 	bne.w	5440 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5222:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    522a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    522e:	e707      	b.n	5040 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5230:	4b0f      	ldr	r3, [pc, #60]	; (5270 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    5232:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5236:	6818      	ldr	r0, [r3, #0]
    5238:	f00a f85a 	bl	f2f0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    523c:	79a3      	ldrb	r3, [r4, #6]
    523e:	2b09      	cmp	r3, #9
    5240:	f47f af2d 	bne.w	509e <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5244:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5248:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    524c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5250:	01db      	lsls	r3, r3, #7
    5252:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5256:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    525a:	2800      	cmp	r0, #0
    525c:	f000 8119 	beq.w	5492 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    5260:	615a      	str	r2, [r3, #20]
    5262:	e71f      	b.n	50a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5264:	00022ba4 	.word	0x00022ba4
    5268:	c61c3c00 	.word	0xc61c3c00
    526c:	200019cc 	.word	0x200019cc
    5270:	20001efc 	.word	0x20001efc
    5274:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5278:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    527c:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    5280:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    5284:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5288:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    528c:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5290:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    5294:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5298:	2b00      	cmp	r3, #0
    529a:	f000 80ab 	beq.w	53f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    529e:	1f98      	subs	r0, r3, #6
    52a0:	bf18      	it	ne
    52a2:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    52a4:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    52a8:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    52ac:	2a00      	cmp	r2, #0
    52ae:	f000 809b 	beq.w	53e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    52b2:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    52b6:	b111      	cbz	r1, 52be <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    52b8:	07af      	lsls	r7, r5, #30
    52ba:	f140 80df 	bpl.w	547c <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    52be:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    52c2:	2b03      	cmp	r3, #3
    52c4:	d071      	beq.n	53aa <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    52c6:	f015 0302 	ands.w	r3, r5, #2
    52ca:	f040 80ce 	bne.w	546a <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    52ce:	2900      	cmp	r1, #0
    52d0:	d06b      	beq.n	53aa <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    52d2:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    52d6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    52da:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    52de:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    52e2:	2b00      	cmp	r3, #0
    52e4:	d065      	beq.n	53b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    52e6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    52ea:	2b00      	cmp	r3, #0
    52ec:	f340 8113 	ble.w	5516 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    52f0:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    52f4:	2201      	movs	r2, #1
            m_enableCounter--;
    52f6:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    52f8:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    52fc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    5300:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    5304:	b11b      	cbz	r3, 530e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    5306:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    5308:	bf48      	it	mi
    530a:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    530e:	1c32      	adds	r2, r6, #0
    5310:	bf18      	it	ne
    5312:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5314:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5318:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    531c:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5320:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5324:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5328:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    532c:	f3bf 8f5b 	dmb	ish
    5330:	e852 1f00 	ldrex	r1, [r2]
    5334:	4319      	orrs	r1, r3
    5336:	e842 1000 	strex	r0, r1, [r2]
    533a:	2800      	cmp	r0, #0
    533c:	d1f8      	bne.n	5330 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    533e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5342:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5346:	f3bf 8f5b 	dmb	ish
    534a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    534e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5352:	e853 2f00 	ldrex	r2, [r3]
    5356:	432a      	orrs	r2, r5
    5358:	e843 2100 	strex	r1, r2, [r3]
    535c:	2900      	cmp	r1, #0
    535e:	d1f8      	bne.n	5352 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    5360:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5364:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    5366:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    536a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    536e:	2b0a      	cmp	r3, #10
    5370:	f47f ae42 	bne.w	4ff8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    5374:	f104 0530 	add.w	r5, r4, #48	; 0x30
    5378:	4628      	mov	r0, r5
    537a:	f005 feb5 	bl	b0e8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    537e:	4628      	mov	r0, r5
    5380:	f006 f9d6 	bl	b730 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    5384:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5388:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    538a:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    538c:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    5390:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    5392:	4282      	cmp	r2, r0
    5394:	f43f ae30 	beq.w	4ff8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    5398:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    539c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    53a0:	680b      	ldr	r3, [r1, #0]
    53a2:	4213      	tst	r3, r2
    53a4:	d1fc      	bne.n	53a0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    53a6:	6028      	str	r0, [r5, #0]
    53a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    53aa:	1c03      	adds	r3, r0, #0
    53ac:	bf18      	it	ne
    53ae:	2301      	movne	r3, #1
    53b0:	e78f      	b.n	52d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    53b2:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    53b6:	2a00      	cmp	r2, #0
    53b8:	d03a      	beq.n	5430 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    53ba:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    53be:	b933      	cbnz	r3, 53ce <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    53c0:	b938      	cbnz	r0, 53d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    53c2:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    53c6:	2204      	movs	r2, #4
    53c8:	f362 258c 	bfi	r5, r2, #10, #3
    53cc:	e79a      	b.n	5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    53ce:	2800      	cmp	r0, #0
    53d0:	d063      	beq.n	549a <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    53d2:	f015 0302 	ands.w	r3, r5, #2
    53d6:	d1f6      	bne.n	53c6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    53d8:	2203      	movs	r2, #3
    53da:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    53de:	f363 1504 	bfi	r5, r3, #4, #1
    53e2:	f005 0302 	and.w	r3, r5, #2
    53e6:	e78d      	b.n	5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    53e8:	f362 0500 	bfi	r5, r2, #0, #1
    53ec:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    53f0:	4613      	mov	r3, r2
    53f2:	e76e      	b.n	52d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    53f4:	4618      	mov	r0, r3
    53f6:	e755      	b.n	52a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    53f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    53fc:	bb93      	cbnz	r3, 5464 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    53fe:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    5402:	461f      	mov	r7, r3
    5404:	e6dd      	b.n	51c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    5406:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    540a:	b381      	cbz	r1, 546e <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    540c:	682b      	ldr	r3, [r5, #0]
    540e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    5412:	695b      	ldr	r3, [r3, #20]
    5414:	b109      	cbz	r1, 541a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5416:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    541a:	4628      	mov	r0, r5
    541c:	4798      	blx	r3
    541e:	e67c      	b.n	511a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    5420:	b307      	cbz	r7, 5464 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    5422:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    5426:	2900      	cmp	r1, #0
    5428:	f000 80ab 	beq.w	5582 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    542c:	460f      	mov	r7, r1
    542e:	e6c8      	b.n	51c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    5430:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    5434:	07aa      	lsls	r2, r5, #30
    5436:	f57f af6a 	bpl.w	530e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    543a:	f046 0610 	orr.w	r6, r6, #16
    543e:	e762      	b.n	5306 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5440:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    5444:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5448:	4073      	eors	r3, r6
    544a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    544c:	4291      	cmp	r1, r2
    544e:	f000 80a4 	beq.w	559a <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5452:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    5456:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    545a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    545e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    5462:	e5ed      	b.n	5040 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    5464:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    5468:	e6ab      	b.n	51c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    546a:	2300      	movs	r3, #0
    546c:	e731      	b.n	52d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    546e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    5472:	682b      	ldr	r3, [r5, #0]
    5474:	2a01      	cmp	r2, #1
    5476:	695b      	ldr	r3, [r3, #20]
    5478:	d1cf      	bne.n	541a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    547a:	e7cc      	b.n	5416 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    547c:	2801      	cmp	r0, #1
    547e:	f47f af1e 	bne.w	52be <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5482:	f045 0501 	orr.w	r5, r5, #1
    5486:	e71c      	b.n	52c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    5488:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    548a:	bf48      	it	mi
    548c:	f046 0602 	orrmi.w	r6, r6, #2
    5490:	e6f4      	b.n	527c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5492:	619a      	str	r2, [r3, #24]
    5494:	e606      	b.n	50a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5496:	619a      	str	r2, [r3, #24]
    5498:	e62a      	b.n	50f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    549a:	2302      	movs	r3, #2
    549c:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    54a0:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    54a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    54a8:	f006 f8c6 	bl	b638 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    54ac:	f046 0620 	orr.w	r6, r6, #32
    54b0:	f005 0302 	and.w	r3, r5, #2
    54b4:	e726      	b.n	5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    54b6:	f004 f9e5 	bl	9884 <Milliseconds>
    54ba:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    54be:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    54c0:	2803      	cmp	r0, #3
    54c2:	f63f ae97 	bhi.w	51f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    54c6:	e6a4      	b.n	5212 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    54c8:	f004 f9dc 	bl	9884 <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    54cc:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    54d0:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    54d4:	2b00      	cmp	r3, #0
    54d6:	d03a      	beq.n	554e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    54d8:	2330      	movs	r3, #48	; 0x30
    54da:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    54dc:	2200      	movs	r2, #0
    54de:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    54e2:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    54e6:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    54ea:	e697      	b.n	521c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    54ec:	4b54      	ldr	r3, [pc, #336]	; (5640 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    54ee:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    54f2:	6818      	ldr	r0, [r3, #0]
    54f4:	f009 fefc 	bl	f2f0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    54f8:	4601      	mov	r1, r0
    54fa:	4620      	mov	r0, r4
    54fc:	f7ff fbf6 	bl	4cec <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    5500:	e5b5      	b.n	506e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    5502:	682b      	ldr	r3, [r5, #0]
    5504:	4628      	mov	r0, r5
    5506:	691b      	ldr	r3, [r3, #16]
    5508:	4798      	blx	r3
    550a:	e617      	b.n	513c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    550c:	682b      	ldr	r3, [r5, #0]
    550e:	4628      	mov	r0, r5
    5510:	691b      	ldr	r3, [r3, #16]
    5512:	4798      	blx	r3
    5514:	e62c      	b.n	5170 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    5516:	2201      	movs	r2, #1
            m_isEnabling = false;
    5518:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    551a:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    551e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    5522:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    5526:	e748      	b.n	53ba <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    5528:	683b      	ldr	r3, [r7, #0]
    552a:	4638      	mov	r0, r7
    552c:	691b      	ldr	r3, [r3, #16]
    552e:	4798      	blx	r3
    5530:	fab0 f780 	clz	r7, r0
    5534:	097f      	lsrs	r7, r7, #5
    5536:	e63d      	b.n	51b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    5538:	4b41      	ldr	r3, [pc, #260]	; (5640 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    553a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    553e:	6818      	ldr	r0, [r3, #0]
    5540:	f009 fed6 	bl	f2f0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5544:	79a3      	ldrb	r3, [r4, #6]
    5546:	2b09      	cmp	r3, #9
    5548:	f43f adc3 	beq.w	50d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    554c:	e5d0      	b.n	50f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    554e:	06ad      	lsls	r5, r5, #26
    5550:	f57f ae62 	bpl.w	5218 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    5554:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5558:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    555c:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5560:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    5564:	8bf8      	ldrh	r0, [r7, #30]
    5566:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    556a:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    556e:	8bbd      	ldrh	r5, [r7, #28]
    5570:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    5574:	b9d0      	cbnz	r0, 55ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    5576:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    557a:	2201      	movs	r2, #1
    557c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    5580:	e64c      	b.n	521c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    5582:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5586:	f006 f873 	bl	b670 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    558a:	2301      	movs	r3, #1
    558c:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    5590:	f046 0608 	orr.w	r6, r6, #8
    5594:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5598:	e613      	b.n	51c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    559a:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    559e:	2a00      	cmp	r2, #0
    55a0:	f43f ad49 	beq.w	5036 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    55a4:	3a01      	subs	r2, #1
    55a6:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    55aa:	e549      	b.n	5040 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    55ac:	ee07 1a90 	vmov	s15, r1
    55b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    55b4:	ee07 2a90 	vmov	s15, r2
    55b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    55bc:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    55c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    55c4:	ee16 0a90 	vmov	r0, s13
    55c8:	f016 fa3c 	bl	1ba44 <__aeabi_f2d>
    55cc:	a318      	add	r3, pc, #96	; (adr r3, 5630 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    55ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    55d2:	f016 f8d7 	bl	1b784 <__aeabi_dsub>
    55d6:	a318      	add	r3, pc, #96	; (adr r3, 5638 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    55d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    55dc:	f016 fa86 	bl	1baec <__aeabi_dmul>
    55e0:	f016 fd66 	bl	1c0b0 <__aeabi_d2f>
    55e4:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    55e8:	b11e      	cbz	r6, 55f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    55ea:	ed9f 7a16 	vldr	s14, [pc, #88]	; 5644 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    55ee:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    55f2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    55f6:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    55fa:	2b02      	cmp	r3, #2
    55fc:	d004      	beq.n	5608 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    55fe:	2302      	movs	r3, #2
    5600:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    5604:	2300      	movs	r3, #0
    5606:	e7b8      	b.n	557a <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    5608:	ee17 0a90 	vmov	r0, s15
    560c:	f016 fa1a 	bl	1ba44 <__aeabi_f2d>
    5610:	2200      	movs	r2, #0
    5612:	4b0d      	ldr	r3, [pc, #52]	; (5648 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    5614:	f016 f8b6 	bl	1b784 <__aeabi_dsub>
    5618:	4602      	mov	r2, r0
    561a:	460b      	mov	r3, r1
    561c:	f016 f8b4 	bl	1b788 <__adddf3>
    5620:	f016 fd46 	bl	1c0b0 <__aeabi_d2f>
    5624:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    5628:	e7e9      	b.n	55fe <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    562a:	bf00      	nop
    562c:	f3af 8000 	nop.w
    5630:	9999999a 	.word	0x9999999a
    5634:	3fa99999 	.word	0x3fa99999
    5638:	71c71c72 	.word	0x71c71c72
    563c:	405bc71c 	.word	0x405bc71c
    5640:	20001efc 	.word	0x20001efc
    5644:	42c80000 	.word	0x42c80000
    5648:	40490000 	.word	0x40490000

0000564c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    564c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5650:	4604      	mov	r4, r0
    5652:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    5654:	4690      	mov	r8, r2
    5656:	2a00      	cmp	r2, #0
    5658:	d154      	bne.n	5704 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    565a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    565c:	1b4d      	subs	r5, r1, r5
    565e:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    5660:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    5664:	2b00      	cmp	r3, #0
    5666:	d04b      	beq.n	5700 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5668:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    566c:	f043 0301 	orr.w	r3, r3, #1
    5670:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5674:	2600      	movs	r6, #0
    5676:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    567a:	b933      	cbnz	r3, 568a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    567c:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5680:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5684:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5686:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    568a:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    568e:	1c48      	adds	r0, r1, #1
    5690:	d016      	beq.n	56c0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5692:	4829      	ldr	r0, [pc, #164]	; (5738 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    5694:	f003 fad6 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5698:	6803      	ldr	r3, [r0, #0]
    569a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    569c:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    569e:	4798      	blx	r3
    56a0:	2809      	cmp	r0, #9
    56a2:	d040      	beq.n	5726 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    56a4:	4648      	mov	r0, r9
    56a6:	f008 fdcd 	bl	e244 <_ZN9ClearCore9DigitalIn5StateEv>
    56aa:	fab0 f080 	clz	r0, r0
    56ae:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    56b0:	b130      	cbz	r0, 56c0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    56b2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    56b6:	f043 0308 	orr.w	r3, r3, #8
    56ba:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    56be:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    56c0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    56c4:	b16d      	cbz	r5, 56e2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    56c6:	06d9      	lsls	r1, r3, #27
    56c8:	d426      	bmi.n	5718 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    56ca:	b196      	cbz	r6, 56f2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    56cc:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    56ce:	4642      	mov	r2, r8
    56d0:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    56d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    56d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    56da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    56de:	f005 bc7f 	b.w	afe0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    56e2:	071a      	lsls	r2, r3, #28
    56e4:	d5f1      	bpl.n	56ca <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    56e6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    56ea:	f043 0302 	orr.w	r3, r3, #2
    56ee:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    56f2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    56f6:	079b      	lsls	r3, r3, #30
    56f8:	d406      	bmi.n	5708 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    56fa:	2000      	movs	r0, #0
    56fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    5700:	2601      	movs	r6, #1
    5702:	e7b8      	b.n	5676 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    5704:	0fcd      	lsrs	r5, r1, #31
    5706:	e7ab      	b.n	5660 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    5708:	f104 0030 	add.w	r0, r4, #48	; 0x30
    570c:	2100      	movs	r1, #0
    570e:	f005 ffaf 	bl	b670 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5712:	2000      	movs	r0, #0
    5714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5718:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    571c:	f043 0304 	orr.w	r3, r3, #4
    5720:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5724:	e7e5      	b.n	56f2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    5726:	f8d9 3000 	ldr.w	r3, [r9]
    572a:	4648      	mov	r0, r9
    572c:	691b      	ldr	r3, [r3, #16]
    572e:	4798      	blx	r3
    5730:	fab0 f080 	clz	r0, r0
    5734:	0940      	lsrs	r0, r0, #5
    5736:	e7bb      	b.n	56b0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    5738:	200019cc 	.word	0x200019cc

0000573c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    573c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5740:	f7ff bf84 	b.w	564c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

00005744 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    5746:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    574a:	4604      	mov	r4, r0
    574c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    574e:	2b00      	cmp	r3, #0
    5750:	d04a      	beq.n	57e8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5752:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    5756:	f043 0301 	orr.w	r3, r3, #1
    575a:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    575e:	2500      	movs	r5, #0
    5760:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5764:	b933      	cbnz	r3, 5774 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5766:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    576a:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    576e:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5770:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5774:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5778:	1c48      	adds	r0, r1, #1
    577a:	d016      	beq.n	57aa <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    577c:	4826      	ldr	r0, [pc, #152]	; (5818 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    577e:	f003 fa61 	bl	8c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5782:	6803      	ldr	r3, [r0, #0]
    5784:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5786:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5788:	4798      	blx	r3
    578a:	2809      	cmp	r0, #9
    578c:	d03c      	beq.n	5808 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    578e:	4638      	mov	r0, r7
    5790:	f008 fd58 	bl	e244 <_ZN9ClearCore9DigitalIn5StateEv>
    5794:	fab0 f080 	clz	r0, r0
    5798:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    579a:	b130      	cbz	r0, 57aa <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    579c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    57a0:	f043 0308 	orr.w	r3, r3, #8
    57a4:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    57a8:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    57aa:	2e00      	cmp	r6, #0
    57ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    57b0:	da0c      	bge.n	57cc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    57b2:	06d9      	lsls	r1, r3, #27
    57b4:	d421      	bmi.n	57fa <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    57b6:	b18d      	cbz	r5, 57dc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    57b8:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    57ba:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    57bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    57c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    57c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    57c8:	f005 bc44 	b.w	b054 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    57cc:	071a      	lsls	r2, r3, #28
    57ce:	d5f2      	bpl.n	57b6 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    57d0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    57d4:	f043 0302 	orr.w	r3, r3, #2
    57d8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    57dc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    57e0:	079b      	lsls	r3, r3, #30
    57e2:	d403      	bmi.n	57ec <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    57e4:	2000      	movs	r0, #0
    57e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    57e8:	2501      	movs	r5, #1
    57ea:	e7b9      	b.n	5760 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    57ec:	f104 0030 	add.w	r0, r4, #48	; 0x30
    57f0:	2100      	movs	r1, #0
    57f2:	f005 ff3d 	bl	b670 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    57f6:	2000      	movs	r0, #0
    57f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    57fa:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    57fe:	f043 0304 	orr.w	r3, r3, #4
    5802:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5806:	e7e9      	b.n	57dc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    5808:	683b      	ldr	r3, [r7, #0]
    580a:	4638      	mov	r0, r7
    580c:	691b      	ldr	r3, [r3, #16]
    580e:	4798      	blx	r3
    5810:	fab0 f080 	clz	r0, r0
    5814:	0940      	lsrs	r0, r0, #5
    5816:	e7c0      	b.n	579a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    5818:	200019cc 	.word	0x200019cc

0000581c <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    581c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5820:	f7ff bf90 	b.w	5744 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

00005824 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5826:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    582a:	4dbc      	ldr	r5, [pc, #752]	; (5b1c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    582c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5830:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5834:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5838:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    583a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    583c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    5840:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    5844:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5848:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    584c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    584e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    5850:	2100      	movs	r1, #0
    5852:	f7ff fa4b 	bl	4cec <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    5856:	4631      	mov	r1, r6
    5858:	4620      	mov	r0, r4
    585a:	f008 fd07 	bl	e26c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    585e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5862:	f993 2001 	ldrsb.w	r2, [r3, #1]
    5866:	7898      	ldrb	r0, [r3, #2]
    5868:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    586c:	1813      	adds	r3, r2, r0
    586e:	2700      	movs	r7, #0
    5870:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5874:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5878:	f991 3001 	ldrsb.w	r3, [r1, #1]
    587c:	788e      	ldrb	r6, [r1, #2]
    587e:	01db      	lsls	r3, r3, #7
    5880:	18e9      	adds	r1, r5, r3
    5882:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5884:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5888:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    588c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    5890:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    5892:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    5896:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5898:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    589c:	f010 0f01 	tst.w	r0, #1
    58a0:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    58a4:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    58a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    58ac:	bf14      	ite	ne
    58ae:	f360 1107 	bfine	r1, r0, #4, #4
    58b2:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    58b6:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    58ba:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    58be:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    58c2:	07f0      	lsls	r0, r6, #31
    58c4:	f04f 0105 	mov.w	r1, #5
    58c8:	bf4c      	ite	mi
    58ca:	f361 1207 	bfimi	r2, r1, #4, #4
    58ce:	f361 0203 	bfipl	r2, r1, #0, #4
    58d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    58d6:	6823      	ldr	r3, [r4, #0]
    58d8:	4a91      	ldr	r2, [pc, #580]	; (5b20 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    58da:	685b      	ldr	r3, [r3, #4]
    58dc:	4293      	cmp	r3, r2
    58de:	f040 8119 	bne.w	5b14 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    58e2:	79a3      	ldrb	r3, [r4, #6]
    58e4:	2b09      	cmp	r3, #9
    58e6:	d022      	beq.n	592e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    58e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    58ec:	f005 fea4 	bl	b638 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    58f0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    58f4:	4b89      	ldr	r3, [pc, #548]	; (5b1c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    58f6:	f991 2001 	ldrsb.w	r2, [r1, #1]
    58fa:	7889      	ldrb	r1, [r1, #2]
    58fc:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5900:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5902:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5904:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    5908:	f36f 0100 	bfc	r1, #0, #1
    590c:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5910:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    5914:	f992 1001 	ldrsb.w	r1, [r2, #1]
    5918:	7892      	ldrb	r2, [r2, #2]
    591a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    591e:	4413      	add	r3, r2
    5920:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5924:	f36f 0200 	bfc	r2, #0, #1
    5928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    592c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    592e:	68e3      	ldr	r3, [r4, #12]
    5930:	6922      	ldr	r2, [r4, #16]
    5932:	01db      	lsls	r3, r3, #7
    5934:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    5938:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    593c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5940:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5944:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    5948:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    594c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5950:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5952:	bf14      	ite	ne
    5954:	f36f 1007 	bfcne	r0, #4, #4
    5958:	f365 0003 	bfieq	r0, r5, #0, #4
    595c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5960:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5964:	496f      	ldr	r1, [pc, #444]	; (5b24 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5966:	f042 0201 	orr.w	r2, r2, #1
    596a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    596e:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    5972:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    5976:	681a      	ldr	r2, [r3, #0]
    5978:	f36f 0241 	bfc	r2, #1, #1
    597c:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    597e:	691a      	ldr	r2, [r3, #16]
    5980:	0792      	lsls	r2, r2, #30
    5982:	d4fc      	bmi.n	597e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    5984:	681a      	ldr	r2, [r3, #0]
    5986:	f042 0201 	orr.w	r2, r2, #1
    598a:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    598c:	691a      	ldr	r2, [r3, #16]
    598e:	f012 0201 	ands.w	r2, r2, #1
    5992:	d1fb      	bne.n	598c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5994:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    5996:	4964      	ldr	r1, [pc, #400]	; (5b28 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5998:	f362 1505 	bfi	r5, r2, #4, #2
    599c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    599e:	681d      	ldr	r5, [r3, #0]
    59a0:	f362 5514 	bfi	r5, r2, #20, #1
    59a4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    59a6:	681d      	ldr	r5, [r3, #0]
    59a8:	f362 5555 	bfi	r5, r2, #21, #1
    59ac:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    59ae:	681d      	ldr	r5, [r3, #0]
    59b0:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    59b4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    59b6:	681d      	ldr	r5, [r3, #0]
    59b8:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    59bc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    59be:	681d      	ldr	r5, [r3, #0]
    59c0:	f362 25cb 	bfi	r5, r2, #11, #1
    59c4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    59c6:	681d      	ldr	r5, [r3, #0]
    59c8:	f362 250a 	bfi	r5, r2, #8, #3
    59cc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    59ce:	681d      	ldr	r5, [r3, #0]
    59d0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    59d4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    59d6:	681d      	ldr	r5, [r3, #0]
    59d8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    59dc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    59de:	681d      	ldr	r5, [r3, #0]
    59e0:	f362 0583 	bfi	r5, r2, #2, #2
    59e4:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    59e6:	88dd      	ldrh	r5, [r3, #6]
    59e8:	2605      	movs	r6, #5
    59ea:	f366 0502 	bfi	r5, r6, #0, #3
    59ee:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    59f0:	88dd      	ldrh	r5, [r3, #6]
    59f2:	f045 0520 	orr.w	r5, r5, #32
    59f6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    59f8:	88dd      	ldrh	r5, [r3, #6]
    59fa:	f362 350c 	bfi	r5, r2, #12, #1
    59fe:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    5a00:	88dd      	ldrh	r5, [r3, #6]
    5a02:	f362 354d 	bfi	r5, r2, #13, #1
    5a06:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    5a08:	88dd      	ldrh	r5, [r3, #6]
    5a0a:	f362 2508 	bfi	r5, r2, #8, #1
    5a0e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    5a10:	88dd      	ldrh	r5, [r3, #6]
    5a12:	f045 0510 	orr.w	r5, r5, #16
    5a16:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    5a18:	780d      	ldrb	r5, [r1, #0]
    5a1a:	f362 0541 	bfi	r5, r2, #1, #1
    5a1e:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    5a20:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    5a24:	688e      	ldr	r6, [r1, #8]
    5a26:	78d5      	ldrb	r5, [r2, #3]
    5a28:	2201      	movs	r2, #1
    5a2a:	40aa      	lsls	r2, r5
    5a2c:	4316      	orrs	r6, r2
    5a2e:	608e      	str	r6, [r1, #8]
    5a30:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    5a32:	698e      	ldr	r6, [r1, #24]
    5a34:	00bf      	lsls	r7, r7, #2
    5a36:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    5a3a:	4316      	orrs	r6, r2
    5a3c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    5a40:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    5a42:	f005 0607 	and.w	r6, r5, #7
    5a46:	f8de c01c 	ldr.w	ip, [lr, #28]
    5a4a:	00b7      	lsls	r7, r6, #2
    5a4c:	2604      	movs	r6, #4
    5a4e:	40be      	lsls	r6, r7
    5a50:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    5a54:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    5a58:	68ce      	ldr	r6, [r1, #12]
    5a5a:	b292      	uxth	r2, r2
    5a5c:	f362 060f 	bfi	r6, r2, #0, #16
    5a60:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    5a62:	780a      	ldrb	r2, [r1, #0]
    5a64:	f042 0202 	orr.w	r2, r2, #2
    5a68:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    5a6a:	684a      	ldr	r2, [r1, #4]
    5a6c:	f012 0202 	ands.w	r2, r2, #2
    5a70:	d1fb      	bne.n	5a6a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    5a72:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    5a76:	492d      	ldr	r1, [pc, #180]	; (5b2c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5a78:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    5a7c:	463e      	mov	r6, r7
    5a7e:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    5a82:	f362 1c86 	bfi	ip, r2, #6, #1
    5a86:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    5a8a:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5a8e:	0657      	lsls	r7, r2, #25
    5a90:	d4fb      	bmi.n	5a8a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    5a92:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5a96:	4f25      	ldr	r7, [pc, #148]	; (5b2c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5a98:	f04f 0c06 	mov.w	ip, #6
    5a9c:	f36c 0203 	bfi	r2, ip, #0, #4
    5aa0:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5aa4:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5aac:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5ab0:	687a      	ldr	r2, [r7, #4]
    5ab2:	f012 0f18 	tst.w	r2, #24
    5ab6:	d1fb      	bne.n	5ab0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5ab8:	4a1d      	ldr	r2, [pc, #116]	; (5b30 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5aba:	4e1e      	ldr	r6, [pc, #120]	; (5b34 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5abc:	3074      	adds	r0, #116	; 0x74
    5abe:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5ac2:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5ac6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5aca:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    5ace:	7991      	ldrb	r1, [r2, #6]
    5ad0:	f041 0102 	orr.w	r1, r1, #2
    5ad4:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    5ad6:	79d1      	ldrb	r1, [r2, #7]
    5ad8:	07c8      	lsls	r0, r1, #31
    5ada:	d4fc      	bmi.n	5ad6 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    5adc:	3512      	adds	r5, #18
    5ade:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    5ae2:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    5ae6:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    5aea:	79d1      	ldrb	r1, [r2, #7]
    5aec:	0789      	lsls	r1, r1, #30
    5aee:	d4fc      	bmi.n	5aea <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    5af0:	681a      	ldr	r2, [r3, #0]
    5af2:	f042 0202 	orr.w	r2, r2, #2
    5af6:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5af8:	691a      	ldr	r2, [r3, #16]
    5afa:	f012 0202 	ands.w	r2, r2, #2
    5afe:	d1fb      	bne.n	5af8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    5b00:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    5b02:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    5b06:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    5b0a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    5b0e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    5b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5b14:	2109      	movs	r1, #9
    5b16:	4620      	mov	r0, r4
    5b18:	4798      	blx	r3
    5b1a:	e708      	b.n	592e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    5b1c:	41008000 	.word	0x41008000
    5b20:	000048a9 	.word	0x000048a9
    5b24:	00022ba4 	.word	0x00022ba4
    5b28:	40002800 	.word	0x40002800
    5b2c:	40001c00 	.word	0x40001c00
    5b30:	4100e000 	.word	0x4100e000
    5b34:	4100e020 	.word	0x4100e020

00005b38 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    5b38:	f04f 30ff 	mov.w	r0, #4294967295
    5b3c:	4770      	bx	lr
    5b3e:	bf00      	nop

00005b40 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    5b40:	f1a1 0002 	sub.w	r0, r1, #2
    5b44:	fab0 f080 	clz	r0, r0
    5b48:	0940      	lsrs	r0, r0, #5
    5b4a:	4770      	bx	lr

00005b4c <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    5b4c:	2002      	movs	r0, #2
    5b4e:	4770      	bx	lr

00005b50 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    5b50:	f1a1 0001 	sub.w	r0, r1, #1
    5b54:	fab0 f080 	clz	r0, r0
    5b58:	0940      	lsrs	r0, r0, #5
    5b5a:	4770      	bx	lr

00005b5c <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    5b5c:	f1a1 0008 	sub.w	r0, r1, #8
    5b60:	fab0 f080 	clz	r0, r0
    5b64:	0940      	lsrs	r0, r0, #5
    5b66:	4770      	bx	lr

00005b68 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    5b68:	7a80      	ldrb	r0, [r0, #10]
    5b6a:	4770      	bx	lr

00005b6c <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    5b6c:	f1a0 0004 	sub.w	r0, r0, #4
    5b70:	e7fa      	b.n	5b68 <_ZN9ClearCore9SerialUsb4ModeEv>
    5b72:	bf00      	nop

00005b74 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    5b74:	7a80      	ldrb	r0, [r0, #10]
    }
    5b76:	1a40      	subs	r0, r0, r1
    5b78:	fab0 f080 	clz	r0, r0
    5b7c:	0940      	lsrs	r0, r0, #5
    5b7e:	4770      	bx	lr

00005b80 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    5b80:	f1a0 0004 	sub.w	r0, r0, #4
    5b84:	e7f6      	b.n	5b74 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    5b86:	bf00      	nop

00005b88 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    5b88:	2008      	movs	r0, #8
    5b8a:	4770      	bx	lr

00005b8c <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    5b8c:	f1a0 0004 	sub.w	r0, r0, #4
    5b90:	e7fa      	b.n	5b88 <_ZN9ClearCore9SerialUsb4TypeEv>
    5b92:	bf00      	nop

00005b94 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    5b94:	2000      	movs	r0, #0
    5b96:	4770      	bx	lr

00005b98 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    5b98:	f1a0 0004 	sub.w	r0, r0, #4
    5b9c:	e7fa      	b.n	5b94 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    5b9e:	bf00      	nop

00005ba0 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    5ba0:	2311      	movs	r3, #17
        m_index = clearCorePin;
    5ba2:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    5ba4:	7283      	strb	r3, [r0, #10]
    5ba6:	4770      	bx	lr

00005ba8 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    5ba8:	f1a0 0004 	sub.w	r0, r0, #4
    5bac:	e7f8      	b.n	5ba0 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    5bae:	bf00      	nop

00005bb0 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    5bb0:	4770      	bx	lr
    5bb2:	bf00      	nop

00005bb4 <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    5bb4:	f1a0 0004 	sub.w	r0, r0, #4
    5bb8:	e7fa      	b.n	5bb0 <_ZN9ClearCore9SerialUsb7RefreshEv>
    5bba:	bf00      	nop

00005bbc <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    5bbc:	4b01      	ldr	r3, [pc, #4]	; (5bc4 <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    5bbe:	6818      	ldr	r0, [r3, #0]
    5bc0:	f000 be5e 	b.w	6880 <_ZN9ClearCore10UsbManager10FlushInputEv>
    5bc4:	20000ad0 	.word	0x20000ad0

00005bc8 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    5bc8:	4b01      	ldr	r3, [pc, #4]	; (5bd0 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    5bca:	6818      	ldr	r0, [r3, #0]
    5bcc:	f000 be66 	b.w	689c <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    5bd0:	20000ad0 	.word	0x20000ad0

00005bd4 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    5bd4:	4b01      	ldr	r3, [pc, #4]	; (5bdc <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    5bd6:	6818      	ldr	r0, [r3, #0]
    5bd8:	f000 be7a 	b.w	68d0 <_ZN9ClearCore10UsbManagercvbEv>
    5bdc:	20000ad0 	.word	0x20000ad0

00005be0 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    5be0:	4b01      	ldr	r3, [pc, #4]	; (5be8 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    5be2:	6818      	ldr	r0, [r3, #0]
    5be4:	f000 be30 	b.w	6848 <_ZN9ClearCore10UsbManager8PortOpenEv>
    5be8:	20000ad0 	.word	0x20000ad0

00005bec <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    5bec:	4b01      	ldr	r3, [pc, #4]	; (5bf4 <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    5bee:	6818      	ldr	r0, [r3, #0]
    5bf0:	f001 ba04 	b.w	6ffc <_ZN9ClearCore10UsbManager9PortCloseEv>
    5bf4:	20000ad0 	.word	0x20000ad0

00005bf8 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    5bf8:	4b01      	ldr	r3, [pc, #4]	; (5c00 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    5bfa:	6818      	ldr	r0, [r3, #0]
    5bfc:	f000 be1c 	b.w	6838 <_ZN9ClearCore10UsbManager5SpeedEm>
    5c00:	20000ad0 	.word	0x20000ad0

00005c04 <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    5c04:	4b01      	ldr	r3, [pc, #4]	; (5c0c <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    5c06:	6818      	ldr	r0, [r3, #0]
    5c08:	f000 be18 	b.w	683c <_ZN9ClearCore10UsbManager5SpeedEv>
    5c0c:	20000ad0 	.word	0x20000ad0

00005c10 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    5c10:	4b01      	ldr	r3, [pc, #4]	; (5c18 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    5c12:	6818      	ldr	r0, [r3, #0]
    5c14:	f000 be7a 	b.w	690c <_ZN9ClearCore10UsbManager7CharGetEv>
    5c18:	20000ad0 	.word	0x20000ad0

00005c1c <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    5c1c:	4b01      	ldr	r3, [pc, #4]	; (5c24 <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    5c1e:	6818      	ldr	r0, [r3, #0]
    5c20:	f000 bfa0 	b.w	6b64 <_ZN9ClearCore10UsbManager8CharPeekEv>
    5c24:	20000ad0 	.word	0x20000ad0

00005c28 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    5c28:	4b01      	ldr	r3, [pc, #4]	; (5c30 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    5c2a:	6818      	ldr	r0, [r3, #0]
    5c2c:	f000 bfa6 	b.w	6b7c <_ZN9ClearCore10UsbManager8SendCharEh>
    5c30:	20000ad0 	.word	0x20000ad0

00005c34 <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    5c34:	4b01      	ldr	r3, [pc, #4]	; (5c3c <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    5c36:	6818      	ldr	r0, [r3, #0]
    5c38:	f000 bfd4 	b.w	6be4 <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    5c3c:	20000ad0 	.word	0x20000ad0

00005c40 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    5c40:	4b01      	ldr	r3, [pc, #4]	; (5c48 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    5c42:	6818      	ldr	r0, [r3, #0]
    5c44:	f000 bfd6 	b.w	6bf4 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    5c48:	20000ad0 	.word	0x20000ad0

00005c4c <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    5c4c:	6803      	ldr	r3, [r0, #0]
    5c4e:	4a04      	ldr	r2, [pc, #16]	; (5c60 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    5c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5c52:	4293      	cmp	r3, r2
    5c54:	d103      	bne.n	5c5e <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    5c56:	4b03      	ldr	r3, [pc, #12]	; (5c64 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    5c58:	6818      	ldr	r0, [r3, #0]
    5c5a:	f000 be39 	b.w	68d0 <_ZN9ClearCore10UsbManagercvbEv>
    5c5e:	4718      	bx	r3
    5c60:	00005bd5 	.word	0x00005bd5
    5c64:	20000ad0 	.word	0x20000ad0

00005c68 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    5c68:	f1a0 0004 	sub.w	r0, r0, #4
    5c6c:	e7ee      	b.n	5c4c <_ZN9ClearCore9SerialUsb10IsWritableEv>
    5c6e:	bf00      	nop

00005c70 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5c70:	b508      	push	{r3, lr}
        return PortIsOpen();
    5c72:	6803      	ldr	r3, [r0, #0]
    5c74:	4a06      	ldr	r2, [pc, #24]	; (5c90 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    5c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5c78:	4293      	cmp	r3, r2
    5c7a:	d105      	bne.n	5c88 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    5c7c:	4b05      	ldr	r3, [pc, #20]	; (5c94 <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    5c7e:	6818      	ldr	r0, [r3, #0]
    5c80:	f000 fe26 	bl	68d0 <_ZN9ClearCore10UsbManagercvbEv>
    }
    5c84:	b200      	sxth	r0, r0
    5c86:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    5c88:	4798      	blx	r3
    }
    5c8a:	b200      	sxth	r0, r0
    5c8c:	bd08      	pop	{r3, pc}
    5c8e:	bf00      	nop
    5c90:	00005bd5 	.word	0x00005bd5
    5c94:	20000ad0 	.word	0x20000ad0

00005c98 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5c98:	f1a0 0004 	sub.w	r0, r0, #4
    5c9c:	e7e8      	b.n	5c70 <_ZN9ClearCore9SerialUsb5StateEv>
    5c9e:	bf00      	nop

00005ca0 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5ca0:	b508      	push	{r3, lr}
            PortOpen();
    5ca2:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    5ca4:	b961      	cbnz	r1, 5cc0 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    5ca6:	4a0b      	ldr	r2, [pc, #44]	; (5cd4 <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    5ca8:	68db      	ldr	r3, [r3, #12]
    5caa:	4293      	cmp	r3, r2
    5cac:	d105      	bne.n	5cba <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    5cae:	4b0a      	ldr	r3, [pc, #40]	; (5cd8 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    5cb0:	6818      	ldr	r0, [r3, #0]
    5cb2:	f001 f9a3 	bl	6ffc <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    5cb6:	2001      	movs	r0, #1
    5cb8:	bd08      	pop	{r3, pc}
            PortClose();
    5cba:	4798      	blx	r3
    }
    5cbc:	2001      	movs	r0, #1
    5cbe:	bd08      	pop	{r3, pc}
    5cc0:	4a06      	ldr	r2, [pc, #24]	; (5cdc <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    5cc2:	689b      	ldr	r3, [r3, #8]
    5cc4:	4293      	cmp	r3, r2
    5cc6:	d1f8      	bne.n	5cba <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    5cc8:	4b03      	ldr	r3, [pc, #12]	; (5cd8 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    5cca:	6818      	ldr	r0, [r3, #0]
    5ccc:	f000 fdbc 	bl	6848 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    5cd0:	2001      	movs	r0, #1
    5cd2:	bd08      	pop	{r3, pc}
    5cd4:	00005bed 	.word	0x00005bed
    5cd8:	20000ad0 	.word	0x20000ad0
    5cdc:	00005be1 	.word	0x00005be1

00005ce0 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5ce0:	f1a0 0004 	sub.w	r0, r0, #4
    5ce4:	e7dc      	b.n	5ca0 <_ZN9ClearCore9SerialUsb5StateEs>
    5ce6:	bf00      	nop

00005ce8 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    5ce8:	b530      	push	{r4, r5, lr}
    5cea:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    5cec:	4d1a      	ldr	r5, [pc, #104]	; (5d58 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    5cee:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    5cf2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    5cf6:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    5cf8:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    5cfc:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    5d00:	d112      	bne.n	5d28 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    5d02:	4621      	mov	r1, r4
    5d04:	4620      	mov	r0, r4
    5d06:	f006 f8dd 	bl	bec4 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    5d0a:	4621      	mov	r1, r4
    5d0c:	2001      	movs	r0, #1
    5d0e:	f006 f8d9 	bl	bec4 <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    5d12:	f006 f8cb 	bl	beac <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    5d16:	f006 f903 	bl	bf20 <cdcdf_acm_get_line_coding>
    5d1a:	6803      	ldr	r3, [r0, #0]
    5d1c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5d20:	d012      	beq.n	5d48 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    5d22:	2000      	movs	r0, #0
    5d24:	b003      	add	sp, #12
    5d26:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    5d28:	490c      	ldr	r1, [pc, #48]	; (5d5c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    5d2a:	2000      	movs	r0, #0
    5d2c:	f006 f8ca 	bl	bec4 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    5d30:	490b      	ldr	r1, [pc, #44]	; (5d60 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    5d32:	2001      	movs	r0, #1
    5d34:	f006 f8c6 	bl	bec4 <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    5d38:	6828      	ldr	r0, [r5, #0]
    5d3a:	2140      	movs	r1, #64	; 0x40
    5d3c:	3080      	adds	r0, #128	; 0x80
    5d3e:	f006 f88d 	bl	be5c <cdcdf_acm_read>
}
    5d42:	2000      	movs	r0, #0
    5d44:	b003      	add	sp, #12
    5d46:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    5d48:	2101      	movs	r1, #1
    5d4a:	4806      	ldr	r0, [pc, #24]	; (5d64 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    5d4c:	f003 fa36 	bl	91bc <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    5d50:	2000      	movs	r0, #0
    5d52:	b003      	add	sp, #12
    5d54:	bd30      	pop	{r4, r5, pc}
    5d56:	bf00      	nop
    5d58:	20000ad0 	.word	0x20000ad0
    5d5c:	00005d69 	.word	0x00005d69
    5d60:	00005fa1 	.word	0x00005fa1
    5d64:	200019cc 	.word	0x200019cc

00005d68 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    5d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d6c:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    5d6e:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    5d70:	498a      	ldr	r1, [pc, #552]	; (5f9c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    5d72:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    5d74:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    5d78:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    5d7c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    5d80:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    5d82:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5d84:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    5d86:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    5d8a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    5d8e:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    5d92:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    5d94:	bf48      	it	mi
    5d96:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    5d98:	2c00      	cmp	r4, #0
    5d9a:	f000 80d6 	beq.w	5f4a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    5d9e:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    5da2:	f000 80d2 	beq.w	5f4a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    5da6:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    5daa:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5dae:	42a3      	cmp	r3, r4
    5db0:	bf28      	it	cs
    5db2:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    5db4:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    5db8:	4299      	cmp	r1, r3
    5dba:	bf28      	it	cs
    5dbc:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    5dbe:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5dc0:	2900      	cmp	r1, #0
    5dc2:	f000 80e8 	beq.w	5f96 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    5dc6:	1d2c      	adds	r4, r5, #4
    5dc8:	4404      	add	r4, r0
    5dca:	1d17      	adds	r7, r2, #4
    5dcc:	42be      	cmp	r6, r7
    5dce:	bf38      	it	cc
    5dd0:	42a2      	cmpcc	r2, r4
    5dd2:	f0c0 80ce 	bcc.w	5f72 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    5dd6:	290b      	cmp	r1, #11
    5dd8:	f240 80cb 	bls.w	5f72 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    5ddc:	4254      	negs	r4, r2
    5dde:	f014 0403 	ands.w	r4, r4, #3
    5de2:	f000 80b7 	beq.w	5f54 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    5de6:	7817      	ldrb	r7, [r2, #0]
    5de8:	5547      	strb	r7, [r0, r5]
    5dea:	2c01      	cmp	r4, #1
    5dec:	f106 0c01 	add.w	ip, r6, #1
    5df0:	f102 0801 	add.w	r8, r2, #1
    5df4:	f000 80b0 	beq.w	5f58 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    5df8:	7857      	ldrb	r7, [r2, #1]
    5dfa:	7077      	strb	r7, [r6, #1]
    5dfc:	2c02      	cmp	r4, #2
    5dfe:	f106 0c02 	add.w	ip, r6, #2
    5e02:	f102 0802 	add.w	r8, r2, #2
    5e06:	f000 80a7 	beq.w	5f58 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    5e0a:	7897      	ldrb	r7, [r2, #2]
    5e0c:	70b7      	strb	r7, [r6, #2]
    5e0e:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5e12:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    5e14:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5e18:	9601      	str	r6, [sp, #4]
    5e1a:	eba1 0b04 	sub.w	fp, r1, r4
    5e1e:	f1ab 0604 	sub.w	r6, fp, #4
    5e22:	08b6      	lsrs	r6, r6, #2
    5e24:	192f      	adds	r7, r5, r4
    5e26:	3601      	adds	r6, #1
    5e28:	ea4f 0986 	mov.w	r9, r6, lsl #2
    5e2c:	4407      	add	r7, r0
    5e2e:	4414      	add	r4, r2
    5e30:	f04f 0e00 	mov.w	lr, #0
    5e34:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    5e38:	f854 ab04 	ldr.w	sl, [r4], #4
    5e3c:	f847 ab04 	str.w	sl, [r7], #4
    5e40:	4576      	cmp	r6, lr
    5e42:	d8f7      	bhi.n	5e34 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    5e44:	9c01      	ldr	r4, [sp, #4]
    5e46:	45cb      	cmp	fp, r9
    5e48:	444c      	add	r4, r9
    5e4a:	eb0c 0709 	add.w	r7, ip, r9
    5e4e:	eb08 0e09 	add.w	lr, r8, r9
    5e52:	f000 8089 	beq.w	5f68 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    5e56:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    5e5a:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5e5e:	1c66      	adds	r6, r4, #1
    5e60:	42b1      	cmp	r1, r6
    5e62:	f240 8081 	bls.w	5f68 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    5e66:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    5e68:	f89e 6001 	ldrb.w	r6, [lr, #1]
    5e6c:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5e6e:	42a1      	cmp	r1, r4
    5e70:	d97a      	bls.n	5f68 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    5e72:	f89e 4002 	ldrb.w	r4, [lr, #2]
    5e76:	70bc      	strb	r4, [r7, #2]
    5e78:	1856      	adds	r6, r2, r1
    5e7a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5e7e:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    5e82:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    5e84:	1a64      	subs	r4, r4, r1
        if (count) {
    5e86:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    5e88:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    5e8c:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    5e90:	d064      	beq.n	5f5c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    5e92:	1d31      	adds	r1, r6, #4
    5e94:	1d02      	adds	r2, r0, #4
    5e96:	4296      	cmp	r6, r2
    5e98:	bf38      	it	cc
    5e9a:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    5e9c:	4604      	mov	r4, r0
    5e9e:	d371      	bcc.n	5f84 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    5ea0:	2b0b      	cmp	r3, #11
    5ea2:	d96f      	bls.n	5f84 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    5ea4:	4272      	negs	r2, r6
    5ea6:	f012 0203 	ands.w	r2, r2, #3
    5eaa:	d05f      	beq.n	5f6c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    5eac:	7831      	ldrb	r1, [r6, #0]
    5eae:	7001      	strb	r1, [r0, #0]
    5eb0:	2a01      	cmp	r2, #1
    5eb2:	f100 0401 	add.w	r4, r0, #1
    5eb6:	f106 0e01 	add.w	lr, r6, #1
    5eba:	d058      	beq.n	5f6e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    5ebc:	7871      	ldrb	r1, [r6, #1]
    5ebe:	7041      	strb	r1, [r0, #1]
    5ec0:	2a02      	cmp	r2, #2
    5ec2:	f100 0402 	add.w	r4, r0, #2
    5ec6:	f106 0e02 	add.w	lr, r6, #2
    5eca:	d050      	beq.n	5f6e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    5ecc:	78b1      	ldrb	r1, [r6, #2]
    5ece:	7081      	strb	r1, [r0, #2]
    5ed0:	1cc4      	adds	r4, r0, #3
    5ed2:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    5ed6:	2703      	movs	r7, #3
    5ed8:	eba3 0c02 	sub.w	ip, r3, r2
    5edc:	f1ac 0104 	sub.w	r1, ip, #4
    5ee0:	0889      	lsrs	r1, r1, #2
    5ee2:	1c4d      	adds	r5, r1, #1
    5ee4:	4416      	add	r6, r2
    5ee6:	ea4f 0885 	mov.w	r8, r5, lsl #2
    5eea:	4402      	add	r2, r0
    5eec:	2100      	movs	r1, #0
    5eee:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    5ef0:	f856 9b04 	ldr.w	r9, [r6], #4
    5ef4:	f842 9b04 	str.w	r9, [r2], #4
    5ef8:	428d      	cmp	r5, r1
    5efa:	d8f8      	bhi.n	5eee <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    5efc:	45c4      	cmp	ip, r8
    5efe:	eb07 0208 	add.w	r2, r7, r8
    5f02:	eb04 0108 	add.w	r1, r4, r8
    5f06:	eb0e 0608 	add.w	r6, lr, r8
    5f0a:	d00d      	beq.n	5f28 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    5f0c:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    5f10:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    5f14:	1c54      	adds	r4, r2, #1
    5f16:	42a3      	cmp	r3, r4
    5f18:	d906      	bls.n	5f28 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    5f1a:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    5f1c:	7874      	ldrb	r4, [r6, #1]
    5f1e:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    5f20:	4293      	cmp	r3, r2
    5f22:	d901      	bls.n	5f28 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    5f24:	78b2      	ldrb	r2, [r6, #2]
    5f26:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    5f28:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    5f2c:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    5f30:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    5f34:	441a      	add	r2, r3
            m_readBufAvail -= count;
    5f36:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    5f38:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    5f3c:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    5f40:	b91c      	cbnz	r4, 5f4a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    5f42:	3080      	adds	r0, #128	; 0x80
    5f44:	2140      	movs	r1, #64	; 0x40
    5f46:	f005 ff89 	bl	be5c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    5f4a:	b662      	cpsie	i
}
    5f4c:	2001      	movs	r0, #1
    5f4e:	b003      	add	sp, #12
    5f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    5f54:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    5f56:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5f58:	9401      	str	r4, [sp, #4]
    5f5a:	e75e      	b.n	5e1a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    5f5c:	4429      	add	r1, r5
    5f5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    5f62:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    5f66:	e7eb      	b.n	5f40 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    5f68:	1856      	adds	r6, r2, r1
    5f6a:	e786      	b.n	5e7a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    5f6c:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    5f6e:	4617      	mov	r7, r2
    5f70:	e7b2      	b.n	5ed8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    5f72:	1e74      	subs	r4, r6, #1
    5f74:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    5f76:	f812 7b01 	ldrb.w	r7, [r2], #1
    5f7a:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5f7e:	42b2      	cmp	r2, r6
    5f80:	d1f9      	bne.n	5f76 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    5f82:	e77a      	b.n	5e7a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    5f84:	1e42      	subs	r2, r0, #1
    5f86:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    5f88:	f816 1b01 	ldrb.w	r1, [r6], #1
    5f8c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    5f90:	42b4      	cmp	r4, r6
    5f92:	d1f9      	bne.n	5f88 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    5f94:	e7c8      	b.n	5f28 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    5f96:	4616      	mov	r6, r2
    5f98:	e773      	b.n	5e82 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    5f9a:	bf00      	nop
    5f9c:	20000ad0 	.word	0x20000ad0

00005fa0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    5fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    5fa4:	48d8      	ldr	r0, [pc, #864]	; (6308 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    5fa6:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    5fa8:	2900      	cmp	r1, #0
    5faa:	f040 81ab 	bne.w	6304 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    5fae:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    5fb0:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    5fb4:	441a      	add	r2, r3
    5fb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    5fba:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    5fbe:	2300      	movs	r3, #0
    5fc0:	f3bf 8f5b 	dmb	ish
    5fc4:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    5fc8:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    5fcc:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    5fce:	f3bf 8f5b 	dmb	ish
    5fd2:	f04f 0101 	mov.w	r1, #1
    5fd6:	f504 7388 	add.w	r3, r4, #272	; 0x110
    5fda:	e8d3 2f4f 	ldrexb	r2, [r3]
    5fde:	e8c3 1f40 	strexb	r0, r1, [r3]
    5fe2:	2800      	cmp	r0, #0
    5fe4:	d1f9      	bne.n	5fda <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    5fe6:	f3bf 8f5b 	dmb	ish
    5fea:	f012 0fff 	tst.w	r2, #255	; 0xff
    5fee:	f040 80dc 	bne.w	61aa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    5ff2:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    5ff6:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    5ffa:	428e      	cmp	r6, r1
    5ffc:	f000 8191 	beq.w	6322 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6000:	f104 0240 	add.w	r2, r4, #64	; 0x40
    6004:	eb02 0706 	add.w	r7, r2, r6
    6008:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    600c:	f0c0 80d1 	bcc.w	61b2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6010:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6014:	4419      	add	r1, r3
    6016:	2940      	cmp	r1, #64	; 0x40
    6018:	bf28      	it	cs
    601a:	2140      	movcs	r1, #64	; 0x40
    601c:	428b      	cmp	r3, r1
    601e:	bf28      	it	cs
    6020:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6022:	2b00      	cmp	r3, #0
    6024:	f000 81a1 	beq.w	636a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    6028:	f106 0540 	add.w	r5, r6, #64	; 0x40
    602c:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    6030:	1960      	adds	r0, r4, r5
    6032:	44a4      	add	ip, r4
    6034:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    6038:	4540      	cmp	r0, r8
    603a:	bf38      	it	cc
    603c:	45e6      	cmpcc	lr, ip
    603e:	f0c0 818a 	bcc.w	6356 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6042:	2b0b      	cmp	r3, #11
    6044:	f240 8187 	bls.w	6356 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6048:	4240      	negs	r0, r0
    604a:	f010 0003 	ands.w	r0, r0, #3
    604e:	f000 8161 	beq.w	6314 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    6052:	5d96      	ldrb	r6, [r2, r6]
    6054:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    6058:	2801      	cmp	r0, #1
    605a:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    605e:	f107 0801 	add.w	r8, r7, #1
    6062:	f000 8159 	beq.w	6318 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    6066:	787e      	ldrb	r6, [r7, #1]
    6068:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    606c:	2802      	cmp	r0, #2
    606e:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    6072:	f107 0802 	add.w	r8, r7, #2
    6076:	f000 814f 	beq.w	6318 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    607a:	78be      	ldrb	r6, [r7, #2]
    607c:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6080:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6082:	f107 0803 	add.w	r8, r7, #3
    6086:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    608a:	9601      	str	r6, [sp, #4]
    608c:	eba3 0b00 	sub.w	fp, r3, r0
    6090:	f1ab 0604 	sub.w	r6, fp, #4
    6094:	08b6      	lsrs	r6, r6, #2
    6096:	4405      	add	r5, r0
    6098:	3601      	adds	r6, #1
    609a:	30c0      	adds	r0, #192	; 0xc0
    609c:	4425      	add	r5, r4
    609e:	4420      	add	r0, r4
    60a0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    60a4:	2700      	movs	r7, #0
    60a6:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    60a8:	f855 ab04 	ldr.w	sl, [r5], #4
    60ac:	f840 ab04 	str.w	sl, [r0], #4
    60b0:	42b7      	cmp	r7, r6
    60b2:	d3f8      	bcc.n	60a6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    60b4:	9801      	ldr	r0, [sp, #4]
    60b6:	45cb      	cmp	fp, r9
    60b8:	4448      	add	r0, r9
    60ba:	eb0c 0509 	add.w	r5, ip, r9
    60be:	eb08 0709 	add.w	r7, r8, r9
    60c2:	d00d      	beq.n	60e0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    60c4:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    60c8:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    60cc:	1c46      	adds	r6, r0, #1
    60ce:	42b3      	cmp	r3, r6
    60d0:	d906      	bls.n	60e0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    60d2:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    60d4:	787e      	ldrb	r6, [r7, #1]
    60d6:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    60d8:	4283      	cmp	r3, r0
    60da:	d901      	bls.n	60e0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    60dc:	78b8      	ldrb	r0, [r7, #2]
    60de:	70a8      	strb	r0, [r5, #2]
    60e0:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    60e4:	1acb      	subs	r3, r1, r3
    60e6:	f000 80fc 	beq.w	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    60ea:	f104 0544 	add.w	r5, r4, #68	; 0x44
    60ee:	1d06      	adds	r6, r0, #4
    60f0:	42b2      	cmp	r2, r6
    60f2:	bf38      	it	cc
    60f4:	42a8      	cmpcc	r0, r5
    60f6:	f0c0 8125 	bcc.w	6344 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    60fa:	2b0b      	cmp	r3, #11
    60fc:	f240 8122 	bls.w	6344 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6100:	4255      	negs	r5, r2
    6102:	f015 0503 	ands.w	r5, r5, #3
    6106:	f000 8109 	beq.w	631c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    610a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    610e:	7002      	strb	r2, [r0, #0]
    6110:	2d01      	cmp	r5, #1
    6112:	f100 0801 	add.w	r8, r0, #1
    6116:	f104 0241 	add.w	r2, r4, #65	; 0x41
    611a:	f000 8100 	beq.w	631e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    611e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    6122:	7042      	strb	r2, [r0, #1]
    6124:	2d02      	cmp	r5, #2
    6126:	f100 0802 	add.w	r8, r0, #2
    612a:	f104 0242 	add.w	r2, r4, #66	; 0x42
    612e:	f000 80f6 	beq.w	631e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    6132:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    6136:	7082      	strb	r2, [r0, #2]
    6138:	f100 0803 	add.w	r8, r0, #3
    613c:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6140:	2703      	movs	r7, #3
    6142:	eba3 0905 	sub.w	r9, r3, r5
    6146:	f1a9 0604 	sub.w	r6, r9, #4
    614a:	08b6      	lsrs	r6, r6, #2
    614c:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    6150:	3601      	adds	r6, #1
    6152:	4428      	add	r0, r5
    6154:	44a4      	add	ip, r4
    6156:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    615a:	f04f 0a00 	mov.w	sl, #0
    615e:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    6162:	f85c 5b04 	ldr.w	r5, [ip], #4
    6166:	f840 5b04 	str.w	r5, [r0], #4
    616a:	4556      	cmp	r6, sl
    616c:	d8f7      	bhi.n	615e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    616e:	45d9      	cmp	r9, fp
    6170:	445f      	add	r7, fp
    6172:	eb08 000b 	add.w	r0, r8, fp
    6176:	eb02 050b 	add.w	r5, r2, fp
    617a:	f000 80b2 	beq.w	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    617e:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    6182:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6186:	1c7a      	adds	r2, r7, #1
    6188:	4293      	cmp	r3, r2
    618a:	f240 80aa 	bls.w	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    618e:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    6190:	786a      	ldrb	r2, [r5, #1]
    6192:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6194:	42bb      	cmp	r3, r7
    6196:	f240 80a4 	bls.w	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    619a:	78ab      	ldrb	r3, [r5, #2]
    619c:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    619e:	4670      	mov	r0, lr
    61a0:	f005 fe70 	bl	be84 <cdcdf_acm_write>
    61a4:	2800      	cmp	r0, #0
    61a6:	f040 80a2 	bne.w	62ee <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    61aa:	2001      	movs	r0, #1
    61ac:	b003      	add	sp, #12
    61ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    61b2:	1b89      	subs	r1, r1, r6
    61b4:	f106 0340 	add.w	r3, r6, #64	; 0x40
    61b8:	f106 0044 	add.w	r0, r6, #68	; 0x44
    61bc:	2940      	cmp	r1, #64	; 0x40
    61be:	eb04 0803 	add.w	r8, r4, r3
    61c2:	4420      	add	r0, r4
    61c4:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    61c8:	bf28      	it	cs
    61ca:	2140      	movcs	r1, #64	; 0x40
    61cc:	45a8      	cmp	r8, r5
    61ce:	bf38      	it	cc
    61d0:	4586      	cmpcc	lr, r0
    61d2:	f0c0 80ad 	bcc.w	6330 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    61d6:	290b      	cmp	r1, #11
    61d8:	f240 80aa 	bls.w	6330 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    61dc:	f1c8 0800 	rsb	r8, r8, #0
    61e0:	f018 0803 	ands.w	r8, r8, #3
    61e4:	f000 8092 	beq.w	630c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    61e8:	5d92      	ldrb	r2, [r2, r6]
    61ea:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    61ee:	f1b8 0f01 	cmp.w	r8, #1
    61f2:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    61f6:	f107 0601 	add.w	r6, r7, #1
    61fa:	f000 8089 	beq.w	6310 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    61fe:	787a      	ldrb	r2, [r7, #1]
    6200:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    6204:	f1b8 0f02 	cmp.w	r8, #2
    6208:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    620c:	f107 0602 	add.w	r6, r7, #2
    6210:	d07e      	beq.n	6310 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6212:	78ba      	ldrb	r2, [r7, #2]
    6214:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    6218:	1cfe      	adds	r6, r7, #3
    621a:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    621e:	f04f 0903 	mov.w	r9, #3
    6222:	4443      	add	r3, r8
    6224:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6228:	58e2      	ldr	r2, [r4, r3]
    622a:	5022      	str	r2, [r4, r0]
    622c:	eba1 0808 	sub.w	r8, r1, r8
    6230:	f1a8 0204 	sub.w	r2, r8, #4
    6234:	4423      	add	r3, r4
    6236:	0892      	lsrs	r2, r2, #2
    6238:	3201      	adds	r2, #1
    623a:	4420      	add	r0, r4
    623c:	685f      	ldr	r7, [r3, #4]
    623e:	6047      	str	r7, [r0, #4]
    6240:	2a02      	cmp	r2, #2
    6242:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    6246:	d035      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6248:	689f      	ldr	r7, [r3, #8]
    624a:	6087      	str	r7, [r0, #8]
    624c:	2a03      	cmp	r2, #3
    624e:	d031      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6250:	68df      	ldr	r7, [r3, #12]
    6252:	60c7      	str	r7, [r0, #12]
    6254:	2a04      	cmp	r2, #4
    6256:	d02d      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6258:	691f      	ldr	r7, [r3, #16]
    625a:	6107      	str	r7, [r0, #16]
    625c:	2a05      	cmp	r2, #5
    625e:	d029      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6260:	695f      	ldr	r7, [r3, #20]
    6262:	6147      	str	r7, [r0, #20]
    6264:	2a06      	cmp	r2, #6
    6266:	d025      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6268:	699f      	ldr	r7, [r3, #24]
    626a:	6187      	str	r7, [r0, #24]
    626c:	2a07      	cmp	r2, #7
    626e:	d021      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6270:	69df      	ldr	r7, [r3, #28]
    6272:	61c7      	str	r7, [r0, #28]
    6274:	2a08      	cmp	r2, #8
    6276:	d01d      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6278:	6a1f      	ldr	r7, [r3, #32]
    627a:	6207      	str	r7, [r0, #32]
    627c:	2a09      	cmp	r2, #9
    627e:	d019      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6280:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    6282:	6247      	str	r7, [r0, #36]	; 0x24
    6284:	2a0a      	cmp	r2, #10
    6286:	d015      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6288:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    628a:	6287      	str	r7, [r0, #40]	; 0x28
    628c:	2a0b      	cmp	r2, #11
    628e:	d011      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6290:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    6292:	62c7      	str	r7, [r0, #44]	; 0x2c
    6294:	2a0c      	cmp	r2, #12
    6296:	d00d      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6298:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    629a:	6307      	str	r7, [r0, #48]	; 0x30
    629c:	2a0d      	cmp	r2, #13
    629e:	d009      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    62a0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    62a2:	6347      	str	r7, [r0, #52]	; 0x34
    62a4:	2a0e      	cmp	r2, #14
    62a6:	d005      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    62a8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    62aa:	6387      	str	r7, [r0, #56]	; 0x38
    62ac:	2a0f      	cmp	r2, #15
    62ae:	d001      	beq.n	62b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    62b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    62b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    62b4:	45e0      	cmp	r8, ip
    62b6:	44e1      	add	r9, ip
    62b8:	eb05 030c 	add.w	r3, r5, ip
    62bc:	eb06 000c 	add.w	r0, r6, ip
    62c0:	d00f      	beq.n	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    62c2:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    62c6:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    62ca:	f109 0201 	add.w	r2, r9, #1
    62ce:	4291      	cmp	r1, r2
    62d0:	d907      	bls.n	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    62d2:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    62d6:	7842      	ldrb	r2, [r0, #1]
    62d8:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    62da:	4549      	cmp	r1, r9
    62dc:	d901      	bls.n	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    62de:	7882      	ldrb	r2, [r0, #2]
    62e0:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    62e2:	4670      	mov	r0, lr
    62e4:	f005 fdce 	bl	be84 <cdcdf_acm_write>
    62e8:	2800      	cmp	r0, #0
    62ea:	f43f af5e 	beq.w	61aa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    62ee:	f3bf 8f5b 	dmb	ish
    62f2:	2300      	movs	r3, #0
    62f4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    62f8:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    62fa:	f3bf 8f5b 	dmb	ish
}
    62fe:	b003      	add	sp, #12
    6300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6304:	6801      	ldr	r1, [r0, #0]
    6306:	e65a      	b.n	5fbe <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    6308:	20000ad0 	.word	0x20000ad0
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    630c:	463e      	mov	r6, r7
    630e:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6310:	46c1      	mov	r9, r8
    6312:	e786      	b.n	6222 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6314:	46b8      	mov	r8, r7
    6316:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6318:	9001      	str	r0, [sp, #4]
    631a:	e6b7      	b.n	608c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    631c:	4680      	mov	r8, r0
    631e:	462f      	mov	r7, r5
    6320:	e70f      	b.n	6142 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    6322:	f3bf 8f5b 	dmb	ish
    6326:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    632a:	f3bf 8f5b 	dmb	ish
    632e:	e73c      	b.n	61aa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    6330:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    6334:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    6336:	f817 2b01 	ldrb.w	r2, [r7], #1
    633a:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    633e:	4287      	cmp	r7, r0
    6340:	d1f9      	bne.n	6336 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    6342:	e7ce      	b.n	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6344:	3801      	subs	r0, #1
    6346:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    6348:	f812 5b01 	ldrb.w	r5, [r2], #1
    634c:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6350:	429a      	cmp	r2, r3
    6352:	d1f9      	bne.n	6348 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    6354:	e7c5      	b.n	62e2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6356:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    635a:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    635c:	f817 5b01 	ldrb.w	r5, [r7], #1
    6360:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6364:	42be      	cmp	r6, r7
    6366:	d1f9      	bne.n	635c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    6368:	e6ba      	b.n	60e0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    636a:	4670      	mov	r0, lr
    636c:	e6ba      	b.n	60e4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    636e:	bf00      	nop

00006370 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    6370:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    6372:	4e16      	ldr	r6, [pc, #88]	; (63cc <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    6374:	6834      	ldr	r4, [r6, #0]
    6376:	f014 0401 	ands.w	r4, r4, #1
    637a:	d002      	beq.n	6382 <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    637c:	4b14      	ldr	r3, [pc, #80]	; (63d0 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    637e:	6818      	ldr	r0, [r3, #0]
    6380:	bd70      	pop	{r4, r5, r6, pc}
    6382:	f44f 7090 	mov.w	r0, #288	; 0x120
    6386:	f00c ffe3 	bl	13350 <_Znwj>
    638a:	4605      	mov	r5, r0
    m_portOpen(false) {
    638c:	f100 0380 	add.w	r3, r0, #128	; 0x80
    6390:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    6394:	490f      	ldr	r1, [pc, #60]	; (63d4 <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    6396:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    639a:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    639e:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    63a2:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    63a6:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    63aa:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    63ae:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    63b2:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    63b6:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    63ba:	2003      	movs	r0, #3
    63bc:	f005 fd82 	bl	bec4 <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    63c0:	4a03      	ldr	r2, [pc, #12]	; (63d0 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    63c2:	2301      	movs	r3, #1
    63c4:	6015      	str	r5, [r2, #0]
    63c6:	4628      	mov	r0, r5
    63c8:	6033      	str	r3, [r6, #0]
}
    63ca:	bd70      	pop	{r4, r5, r6, pc}
    63cc:	20000acc 	.word	0x20000acc
    63d0:	20000b14 	.word	0x20000b14
    63d4:	00005ce9 	.word	0x00005ce9

000063d8 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    63d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    63dc:	4ac7      	ldr	r2, [pc, #796]	; (66fc <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    63de:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    63e2:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    63e6:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    63e8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    63ec:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    63f0:	0659      	lsls	r1, r3, #25
    63f2:	d4fb      	bmi.n	63ec <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    63f4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    63f8:	49c0      	ldr	r1, [pc, #768]	; (66fc <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    63fa:	2004      	movs	r0, #4
    63fc:	f360 0303 	bfi	r3, r0, #0, #4
    6400:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6404:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    640c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6410:	684b      	ldr	r3, [r1, #4]
    6412:	06db      	lsls	r3, r3, #27
    6414:	d4fc      	bmi.n	6410 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    6416:	4bba      	ldr	r3, [pc, #744]	; (6700 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6418:	49ba      	ldr	r1, [pc, #744]	; (6704 <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    641a:	691a      	ldr	r2, [r3, #16]
    641c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6420:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    6422:	699a      	ldr	r2, [r3, #24]
    6424:	f042 0201 	orr.w	r2, r2, #1
    6428:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    642a:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    642e:	2203      	movs	r2, #3
    6430:	f006 f8f4 	bl	c61c <usb_find_str_desc>
    if (!serNumDescPtr) {
    6434:	4604      	mov	r4, r0
    6436:	2800      	cmp	r0, #0
    6438:	f000 819c 	beq.w	6774 <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    643c:	4bb2      	ldr	r3, [pc, #712]	; (6708 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    643e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6440:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6444:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    6446:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6448:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    644a:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    644e:	f100 0730 	add.w	r7, r0, #48	; 0x30
    6452:	3037      	adds	r0, #55	; 0x37
    6454:	2d09      	cmp	r5, #9
    6456:	bf88      	it	hi
    6458:	4607      	movhi	r7, r0
    645a:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    645e:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6462:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6466:	3037      	adds	r0, #55	; 0x37
    6468:	f1b8 0f09 	cmp.w	r8, #9
    646c:	bfc8      	it	gt
    646e:	4684      	movgt	ip, r0
    6470:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    6472:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6476:	f88d c011 	strb.w	ip, [sp, #17]
    647a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    647e:	3037      	adds	r0, #55	; 0x37
    6480:	2e09      	cmp	r6, #9
    6482:	bfc8      	it	gt
    6484:	4684      	movgt	ip, r0
    6486:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6488:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    648c:	f88d c012 	strb.w	ip, [sp, #18]
    6490:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6494:	3037      	adds	r0, #55	; 0x37
    6496:	2d09      	cmp	r5, #9
    6498:	bfc8      	it	gt
    649a:	4684      	movgt	ip, r0
    649c:	fa5f f08e 	uxtb.w	r0, lr
    64a0:	f88d 7010 	strb.w	r7, [sp, #16]
    64a4:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    64a8:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64ac:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    64b0:	3037      	adds	r0, #55	; 0x37
    64b2:	f1be 0f09 	cmp.w	lr, #9
    64b6:	bfd4      	ite	le
    64b8:	46e6      	movle	lr, ip
    64ba:	4686      	movgt	lr, r0
    64bc:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    64be:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    64c2:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64c4:	f88d e014 	strb.w	lr, [sp, #20]
    64c8:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    64cc:	3030      	adds	r0, #48	; 0x30
    64ce:	2f09      	cmp	r7, #9
    64d0:	bfcc      	ite	gt
    64d2:	4677      	movgt	r7, lr
    64d4:	4607      	movle	r7, r0
    64d6:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    64d8:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64da:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    64de:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64e2:	f100 0737 	add.w	r7, r0, #55	; 0x37
    64e6:	3030      	adds	r0, #48	; 0x30
    64e8:	2e09      	cmp	r6, #9
    64ea:	bfcc      	ite	gt
    64ec:	463e      	movgt	r6, r7
    64ee:	4606      	movle	r6, r0
    64f0:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    64f2:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64f4:	f88d 6016 	strb.w	r6, [sp, #22]
    64f8:	f100 0637 	add.w	r6, r0, #55	; 0x37
    64fc:	3030      	adds	r0, #48	; 0x30
    64fe:	2b09      	cmp	r3, #9
    6500:	bfcc      	ite	gt
    6502:	4633      	movgt	r3, r6
    6504:	4603      	movle	r3, r0
    6506:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6508:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    650c:	f88d 3017 	strb.w	r3, [sp, #23]
    6510:	f100 0337 	add.w	r3, r0, #55	; 0x37
    6514:	3030      	adds	r0, #48	; 0x30
    6516:	2d09      	cmp	r5, #9
    6518:	bf88      	it	hi
    651a:	4618      	movhi	r0, r3
    651c:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    6520:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6524:	f88d 0018 	strb.w	r0, [sp, #24]
    6528:	f103 0037 	add.w	r0, r3, #55	; 0x37
    652c:	3330      	adds	r3, #48	; 0x30
    652e:	f1bc 0f09 	cmp.w	ip, #9
    6532:	bfcc      	ite	gt
    6534:	4684      	movgt	ip, r0
    6536:	469c      	movle	ip, r3
    6538:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    653c:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6540:	f88d c019 	strb.w	ip, [sp, #25]
    6544:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6548:	3330      	adds	r3, #48	; 0x30
    654a:	f1be 0f09 	cmp.w	lr, #9
    654e:	bfd8      	it	le
    6550:	469c      	movle	ip, r3
    6552:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    6554:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6558:	f88d c01a 	strb.w	ip, [sp, #26]
    655c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6560:	3330      	adds	r3, #48	; 0x30
    6562:	2f09      	cmp	r7, #9
    6564:	bfd8      	it	le
    6566:	469c      	movle	ip, r3
    6568:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    656a:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    656e:	f88d c01b 	strb.w	ip, [sp, #27]
    6572:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6576:	3330      	adds	r3, #48	; 0x30
    6578:	2e09      	cmp	r6, #9
    657a:	bfd8      	it	le
    657c:	469c      	movle	ip, r3
    657e:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    6580:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6584:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6586:	f88d c01c 	strb.w	ip, [sp, #28]
    658a:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    658e:	3330      	adds	r3, #48	; 0x30
    6590:	2d09      	cmp	r5, #9
    6592:	bfcc      	ite	gt
    6594:	4665      	movgt	r5, ip
    6596:	461d      	movle	r5, r3
    6598:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    659a:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    659c:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    65a0:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65a4:	f103 0537 	add.w	r5, r3, #55	; 0x37
    65a8:	3330      	adds	r3, #48	; 0x30
    65aa:	2809      	cmp	r0, #9
    65ac:	bfcc      	ite	gt
    65ae:	4628      	movgt	r0, r5
    65b0:	4618      	movle	r0, r3
    65b2:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    65b4:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65b8:	f88d 001e 	strb.w	r0, [sp, #30]
    65bc:	f103 0037 	add.w	r0, r3, #55	; 0x37
    65c0:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    65c2:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65c6:	2a09      	cmp	r2, #9
    65c8:	bfcc      	ite	gt
    65ca:	4602      	movgt	r2, r0
    65cc:	461a      	movle	r2, r3
    65ce:	fa5f f58e 	uxtb.w	r5, lr
    65d2:	b2f8      	uxtb	r0, r7
    65d4:	f88d 201f 	strb.w	r2, [sp, #31]
    65d8:	f105 0237 	add.w	r2, r5, #55	; 0x37
    65dc:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    65de:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65e2:	f1be 0f09 	cmp.w	lr, #9
    65e6:	bf88      	it	hi
    65e8:	4615      	movhi	r5, r2
    65ea:	f100 0237 	add.w	r2, r0, #55	; 0x37
    65ee:	3030      	adds	r0, #48	; 0x30
    65f0:	2f09      	cmp	r7, #9
    65f2:	bfc8      	it	gt
    65f4:	4610      	movgt	r0, r2
    65f6:	b2f3      	uxtb	r3, r6
    65f8:	f103 0237 	add.w	r2, r3, #55	; 0x37
    65fc:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    6600:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6602:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6606:	2e09      	cmp	r6, #9
    6608:	bfc8      	it	gt
    660a:	4613      	movgt	r3, r2
    660c:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    660e:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6612:	f102 0837 	add.w	r8, r2, #55	; 0x37
    6616:	3230      	adds	r2, #48	; 0x30
    6618:	2809      	cmp	r0, #9
    661a:	bfd8      	it	le
    661c:	4690      	movle	r8, r2
    661e:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6622:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6626:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    662a:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    662c:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    662e:	f88d 5020 	strb.w	r5, [sp, #32]
    6632:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6636:	3230      	adds	r2, #48	; 0x30
    6638:	f1be 0f09 	cmp.w	lr, #9
    663c:	bfd8      	it	le
    663e:	4614      	movle	r4, r2
    6640:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6642:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6644:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    6648:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    664c:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6650:	3230      	adds	r2, #48	; 0x30
    6652:	2f09      	cmp	r7, #9
    6654:	bfcc      	ite	gt
    6656:	4627      	movgt	r7, r4
    6658:	4617      	movle	r7, r2
    665a:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    665c:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6660:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    6664:	f102 0737 	add.w	r7, r2, #55	; 0x37
    6668:	3230      	adds	r2, #48	; 0x30
    666a:	2e09      	cmp	r6, #9
    666c:	bfcc      	ite	gt
    666e:	463e      	movgt	r6, r7
    6670:	4616      	movle	r6, r2
    6672:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    6674:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6676:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    667a:	f102 0637 	add.w	r6, r2, #55	; 0x37
    667e:	3230      	adds	r2, #48	; 0x30
    6680:	2909      	cmp	r1, #9
    6682:	bfcc      	ite	gt
    6684:	4631      	movgt	r1, r6
    6686:	4611      	movle	r1, r2
    6688:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    668a:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    668e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    6692:	f102 0130 	add.w	r1, r2, #48	; 0x30
    6696:	3237      	adds	r2, #55	; 0x37
    6698:	2d09      	cmp	r5, #9
    669a:	bf88      	it	hi
    669c:	4611      	movhi	r1, r2
    669e:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    66a2:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    66aa:	f102 0130 	add.w	r1, r2, #48	; 0x30
    66ae:	3237      	adds	r2, #55	; 0x37
    66b0:	f1bc 0f09 	cmp.w	ip, #9
    66b4:	bfd4      	ite	le
    66b6:	468c      	movle	ip, r1
    66b8:	4694      	movgt	ip, r2
    66ba:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    66be:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66c2:	f102 0137 	add.w	r1, r2, #55	; 0x37
    66c6:	3230      	adds	r2, #48	; 0x30
    66c8:	f1be 0f09 	cmp.w	lr, #9
    66cc:	bfcc      	ite	gt
    66ce:	468e      	movgt	lr, r1
    66d0:	4696      	movle	lr, r2
    66d2:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    66d4:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66d8:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    66dc:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    66e0:	3130      	adds	r1, #48	; 0x30
    66e2:	2c09      	cmp	r4, #9
    66e4:	bfd8      	it	le
    66e6:	468e      	movle	lr, r1
    66e8:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    66ea:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66ee:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    66f2:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    66f6:	3237      	adds	r2, #55	; 0x37
    66f8:	e008      	b.n	670c <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    66fa:	bf00      	nop
    66fc:	40001c00 	.word	0x40001c00
    6700:	40000800 	.word	0x40000800
    6704:	200000df 	.word	0x200000df
    6708:	00022cb8 	.word	0x00022cb8
    670c:	2f09      	cmp	r7, #9
    670e:	bfd4      	ite	le
    6710:	4677      	movle	r7, lr
    6712:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    6714:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6718:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    671a:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    671e:	b2da      	uxtb	r2, r3
    6720:	b2e9      	uxtb	r1, r5
    6722:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    6726:	f104 0730 	add.w	r7, r4, #48	; 0x30
    672a:	3437      	adds	r4, #55	; 0x37
    672c:	2e09      	cmp	r6, #9
    672e:	bfd8      	it	le
    6730:	463c      	movle	r4, r7
    6732:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    6736:	f102 0730 	add.w	r7, r2, #48	; 0x30
    673a:	3137      	adds	r1, #55	; 0x37
    673c:	3237      	adds	r2, #55	; 0x37
    673e:	2d09      	cmp	r5, #9
    6740:	bfd8      	it	le
    6742:	4671      	movle	r1, lr
    6744:	2b09      	cmp	r3, #9
    6746:	bfd4      	ite	le
    6748:	463b      	movle	r3, r7
    674a:	4613      	movgt	r3, r2
    674c:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    6750:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    6754:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    6758:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    675c:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    6760:	f10d 030f 	add.w	r3, sp, #15
    6764:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    6768:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    676c:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    6770:	428b      	cmp	r3, r1
    6772:	d1f9      	bne.n	6768 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6774:	4b2a      	ldr	r3, [pc, #168]	; (6820 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6776:	4a2b      	ldr	r2, [pc, #172]	; (6824 <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6778:	4f2b      	ldr	r7, [pc, #172]	; (6828 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    677a:	4d2c      	ldr	r5, [pc, #176]	; (682c <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    677c:	482c      	ldr	r0, [pc, #176]	; (6830 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    677e:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6780:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6784:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6788:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    678c:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    6790:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    6794:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6798:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    679a:	629c      	str	r4, [r3, #40]	; 0x28
    679c:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    679e:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    67a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    67a4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    67a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    67ac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    67b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    67b4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    67b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    67bc:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    67c0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    67c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    67c8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    67cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    67d0:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    67d2:	629c      	str	r4, [r3, #40]	; 0x28
    67d4:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    67d6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    67d8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    67dc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    67e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    67e4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    67e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    67ec:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    67f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    67f4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    67f8:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    67fc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6804:	f005 fe52 	bl	c4ac <usbdc_init>
    cdcdf_acm_init();
    6808:	f005 fb0a 	bl	be20 <cdcdf_acm_init>
    usbdc_start(single_desc);
    680c:	4809      	ldr	r0, [pc, #36]	; (6834 <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    680e:	f005 fe7b 	bl	c508 <usbdc_start>
    usbdc_attach();
    6812:	f005 fe91 	bl	c538 <usbdc_attach>
}
    6816:	2001      	movs	r0, #1
    6818:	b00c      	add	sp, #48	; 0x30
    681a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    681e:	bf00      	nop
    6820:	41008000 	.word	0x41008000
    6824:	e000e100 	.word	0xe000e100
    6828:	c0000100 	.word	0xc0000100
    682c:	c0000200 	.word	0xc0000200
    6830:	20000ad4 	.word	0x20000ad4
    6834:	20000000 	.word	0x20000000

00006838 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    6838:	2001      	movs	r0, #1
    683a:	4770      	bx	lr

0000683c <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    683c:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    683e:	f005 fb6f 	bl	bf20 <cdcdf_acm_get_line_coding>
}
    6842:	6800      	ldr	r0, [r0, #0]
    6844:	bd08      	pop	{r3, pc}
    6846:	bf00      	nop

00006848 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    6848:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    684a:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    684e:	b103      	cbz	r3, 6852 <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    6850:	bd38      	pop	{r3, r4, r5, pc}
    6852:	4604      	mov	r4, r0
    m_portOpen = true;
    6854:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6856:	4618      	mov	r0, r3
    m_portOpen = true;
    6858:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    685c:	4906      	ldr	r1, [pc, #24]	; (6878 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    685e:	f005 fb31 	bl	bec4 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6862:	4628      	mov	r0, r5
    6864:	4905      	ldr	r1, [pc, #20]	; (687c <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    6866:	f005 fb2d 	bl	bec4 <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    686a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    686e:	2140      	movs	r1, #64	; 0x40
}
    6870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6874:	f005 baf2 	b.w	be5c <cdcdf_acm_read>
    6878:	00005d69 	.word	0x00005d69
    687c:	00005fa1 	.word	0x00005fa1

00006880 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    6880:	4603      	mov	r3, r0
    m_inHead = 0;
    6882:	2200      	movs	r2, #0
    6884:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    6888:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    688c:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6890:	2140      	movs	r1, #64	; 0x40
    6892:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    6894:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6898:	f005 bae0 	b.w	be5c <cdcdf_acm_read>

0000689c <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    689c:	b538      	push	{r3, r4, r5, lr}
    689e:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    68a0:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    68a4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    68a8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    68ac:	429a      	cmp	r2, r3
    68ae:	d100      	bne.n	68b2 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    68b0:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    68b2:	f005 fb2f 	bl	bf14 <cdcdf_acm_is_enabled>
    68b6:	2800      	cmp	r0, #0
    68b8:	d0fa      	beq.n	68b0 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    68ba:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    68be:	07db      	lsls	r3, r3, #31
    68c0:	d5f6      	bpl.n	68b0 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    68c2:	7b6b      	ldrb	r3, [r5, #13]
    68c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    68c8:	2b02      	cmp	r3, #2
    68ca:	d0eb      	beq.n	68a4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    68cc:	bd38      	pop	{r3, r4, r5, pc}
    68ce:	bf00      	nop

000068d0 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    68d0:	b538      	push	{r3, r4, r5, lr}
    68d2:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    68d4:	f005 fb1e 	bl	bf14 <cdcdf_acm_is_enabled>
    68d8:	4604      	mov	r4, r0
    68da:	b170      	cbz	r0, 68fa <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    68dc:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    68e0:	f014 0401 	ands.w	r4, r4, #1
    68e4:	d009      	beq.n	68fa <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    68e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    68ea:	7b5c      	ldrb	r4, [r3, #13]
    68ec:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    68f0:	f1a4 0402 	sub.w	r4, r4, #2
    68f4:	fab4 f484 	clz	r4, r4
    68f8:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    68fa:	4803      	ldr	r0, [pc, #12]	; (6908 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    68fc:	2100      	movs	r1, #0
    68fe:	f002 ffeb 	bl	98d8 <Delay_cycles>
}
    6902:	4620      	mov	r0, r4
    6904:	bd38      	pop	{r3, r4, r5, pc}
    6906:	bf00      	nop
    6908:	00124f80 	.word	0x00124f80

0000690c <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    690c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    6910:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6914:	4293      	cmp	r3, r2
    6916:	f000 8116 	beq.w	6b46 <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    691a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    691e:	1c5a      	adds	r2, r3, #1
    6920:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    6924:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6926:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    692a:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    692c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    692e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6932:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    6936:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    693a:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    693c:	bf48      	it	mi
    693e:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6940:	2d00      	cmp	r5, #0
    6942:	f000 80e3 	beq.w	6b0c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    6946:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    694a:	f000 80df 	beq.w	6b0c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    694e:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6952:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6956:	42ab      	cmp	r3, r5
    6958:	bf28      	it	cs
    695a:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    695c:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    6960:	4299      	cmp	r1, r3
    6962:	bf28      	it	cs
    6964:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    6966:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6968:	2900      	cmp	r1, #0
    696a:	f000 80f8 	beq.w	6b5e <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    696e:	1d35      	adds	r5, r6, #4
    6970:	4405      	add	r5, r0
    6972:	f102 0e04 	add.w	lr, r2, #4
    6976:	4577      	cmp	r7, lr
    6978:	bf38      	it	cc
    697a:	42aa      	cmpcc	r2, r5
    697c:	f0c0 80da 	bcc.w	6b34 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6980:	290b      	cmp	r1, #11
    6982:	f240 80d7 	bls.w	6b34 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6986:	4255      	negs	r5, r2
    6988:	f015 0503 	ands.w	r5, r5, #3
    698c:	f000 80c3 	beq.w	6b16 <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    6990:	f892 e000 	ldrb.w	lr, [r2]
    6994:	f800 e006 	strb.w	lr, [r0, r6]
    6998:	2d01      	cmp	r5, #1
    699a:	f107 0801 	add.w	r8, r7, #1
    699e:	f102 0901 	add.w	r9, r2, #1
    69a2:	f000 80ba 	beq.w	6b1a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    69a6:	f892 e001 	ldrb.w	lr, [r2, #1]
    69aa:	f887 e001 	strb.w	lr, [r7, #1]
    69ae:	2d02      	cmp	r5, #2
    69b0:	f107 0802 	add.w	r8, r7, #2
    69b4:	f102 0902 	add.w	r9, r2, #2
    69b8:	f000 80af 	beq.w	6b1a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    69bc:	f892 e002 	ldrb.w	lr, [r2, #2]
    69c0:	f887 e002 	strb.w	lr, [r7, #2]
    69c4:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    69c8:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    69ca:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    69ce:	9700      	str	r7, [sp, #0]
    69d0:	eba1 0b05 	sub.w	fp, r1, r5
    69d4:	f1ab 0704 	sub.w	r7, fp, #4
    69d8:	08bf      	lsrs	r7, r7, #2
    69da:	eb06 0e05 	add.w	lr, r6, r5
    69de:	3701      	adds	r7, #1
    69e0:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    69e4:	4486      	add	lr, r0
    69e6:	4415      	add	r5, r2
    69e8:	f04f 0c00 	mov.w	ip, #0
    69ec:	9401      	str	r4, [sp, #4]
    69ee:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    69f2:	f855 4b04 	ldr.w	r4, [r5], #4
    69f6:	f84e 4b04 	str.w	r4, [lr], #4
    69fa:	4567      	cmp	r7, ip
    69fc:	d8f7      	bhi.n	69ee <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    69fe:	9d00      	ldr	r5, [sp, #0]
    6a00:	9c01      	ldr	r4, [sp, #4]
    6a02:	45d3      	cmp	fp, sl
    6a04:	4455      	add	r5, sl
    6a06:	eb08 0e0a 	add.w	lr, r8, sl
    6a0a:	eb09 0c0a 	add.w	ip, r9, sl
    6a0e:	f000 808c 	beq.w	6b2a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6a12:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    6a16:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6a1a:	1c6f      	adds	r7, r5, #1
    6a1c:	42b9      	cmp	r1, r7
    6a1e:	f240 8084 	bls.w	6b2a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6a22:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    6a24:	f89c 7001 	ldrb.w	r7, [ip, #1]
    6a28:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6a2c:	42a9      	cmp	r1, r5
    6a2e:	d97c      	bls.n	6b2a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    6a30:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6a34:	f88e 5002 	strb.w	r5, [lr, #2]
    6a38:	1857      	adds	r7, r2, r1
    6a3a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6a3e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    6a42:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6a44:	1a6d      	subs	r5, r5, r1
        if (count) {
    6a46:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6a48:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    6a4c:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    6a50:	d065      	beq.n	6b1e <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    6a52:	1d01      	adds	r1, r0, #4
    6a54:	1d3a      	adds	r2, r7, #4
    6a56:	4290      	cmp	r0, r2
    6a58:	bf38      	it	cc
    6a5a:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    6a5c:	4605      	mov	r5, r0
    6a5e:	d375      	bcc.n	6b4c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6a60:	2b0b      	cmp	r3, #11
    6a62:	d973      	bls.n	6b4c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6a64:	4242      	negs	r2, r0
    6a66:	f012 0203 	ands.w	r2, r2, #3
    6a6a:	d060      	beq.n	6b2e <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    6a6c:	7839      	ldrb	r1, [r7, #0]
    6a6e:	7001      	strb	r1, [r0, #0]
    6a70:	2a01      	cmp	r2, #1
    6a72:	f100 0501 	add.w	r5, r0, #1
    6a76:	f107 0e01 	add.w	lr, r7, #1
    6a7a:	d059      	beq.n	6b30 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6a7c:	7879      	ldrb	r1, [r7, #1]
    6a7e:	7041      	strb	r1, [r0, #1]
    6a80:	2a02      	cmp	r2, #2
    6a82:	f100 0502 	add.w	r5, r0, #2
    6a86:	f107 0e02 	add.w	lr, r7, #2
    6a8a:	d051      	beq.n	6b30 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6a8c:	78b9      	ldrb	r1, [r7, #2]
    6a8e:	7081      	strb	r1, [r0, #2]
    6a90:	1cc5      	adds	r5, r0, #3
    6a92:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    6a96:	f04f 0803 	mov.w	r8, #3
    6a9a:	eba3 0c02 	sub.w	ip, r3, r2
    6a9e:	f1ac 0104 	sub.w	r1, ip, #4
    6aa2:	0889      	lsrs	r1, r1, #2
    6aa4:	1c4e      	adds	r6, r1, #1
    6aa6:	4417      	add	r7, r2
    6aa8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6aac:	4402      	add	r2, r0
    6aae:	2100      	movs	r1, #0
    6ab0:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6ab2:	f857 ab04 	ldr.w	sl, [r7], #4
    6ab6:	f842 ab04 	str.w	sl, [r2], #4
    6aba:	428e      	cmp	r6, r1
    6abc:	d8f8      	bhi.n	6ab0 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    6abe:	45cc      	cmp	ip, r9
    6ac0:	eb08 0209 	add.w	r2, r8, r9
    6ac4:	eb05 0109 	add.w	r1, r5, r9
    6ac8:	eb0e 0709 	add.w	r7, lr, r9
    6acc:	d00d      	beq.n	6aea <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6ace:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    6ad2:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6ad6:	1c55      	adds	r5, r2, #1
    6ad8:	42ab      	cmp	r3, r5
    6ada:	d906      	bls.n	6aea <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6adc:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6ade:	787d      	ldrb	r5, [r7, #1]
    6ae0:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6ae2:	4293      	cmp	r3, r2
    6ae4:	d901      	bls.n	6aea <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    6ae6:	78ba      	ldrb	r2, [r7, #2]
    6ae8:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    6aea:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6aee:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    6af2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6af6:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6af8:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    6afa:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6afe:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    6b02:	b91d      	cbnz	r5, 6b0c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6b04:	3080      	adds	r0, #128	; 0x80
    6b06:	2140      	movs	r1, #64	; 0x40
    6b08:	f005 f9a8 	bl	be5c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6b0c:	b662      	cpsie	i
    return retVal;
    6b0e:	b220      	sxth	r0, r4
}
    6b10:	b003      	add	sp, #12
    6b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6b16:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    6b18:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6b1a:	9500      	str	r5, [sp, #0]
    6b1c:	e758      	b.n	69d0 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6b1e:	4431      	add	r1, r6
    6b20:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    6b24:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6b28:	e7eb      	b.n	6b02 <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    6b2a:	1857      	adds	r7, r2, r1
    6b2c:	e785      	b.n	6a3a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    6b2e:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    6b30:	4690      	mov	r8, r2
    6b32:	e7b2      	b.n	6a9a <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    6b34:	1e7d      	subs	r5, r7, #1
    6b36:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    6b38:	f812 eb01 	ldrb.w	lr, [r2], #1
    6b3c:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6b40:	42ba      	cmp	r2, r7
    6b42:	d1f9      	bne.n	6b38 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    6b44:	e779      	b.n	6a3a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    6b46:	f04f 30ff 	mov.w	r0, #4294967295
    6b4a:	4770      	bx	lr
    6b4c:	1e42      	subs	r2, r0, #1
    6b4e:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    6b50:	f817 1b01 	ldrb.w	r1, [r7], #1
    6b54:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6b58:	42bd      	cmp	r5, r7
    6b5a:	d1f9      	bne.n	6b50 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    6b5c:	e7c5      	b.n	6aea <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    6b5e:	4617      	mov	r7, r2
    6b60:	e76f      	b.n	6a42 <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    6b62:	bf00      	nop

00006b64 <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    6b64:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6b68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    6b6c:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    6b6e:	bf1a      	itte	ne
    6b70:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    6b74:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    6b76:	f04f 30ff 	moveq.w	r0, #4294967295
}
    6b7a:	4770      	bx	lr

00006b7c <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    6b7c:	b570      	push	{r4, r5, r6, lr}
    6b7e:	4604      	mov	r4, r0
    6b80:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6b82:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6b86:	f005 f9c5 	bl	bf14 <cdcdf_acm_is_enabled>
    6b8a:	b350      	cbz	r0, 6be2 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    6b8c:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    6b90:	f010 0001 	ands.w	r0, r0, #1
    6b94:	d025      	beq.n	6be2 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6b96:	7b6b      	ldrb	r3, [r5, #13]
    6b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6b9c:	2b02      	cmp	r3, #2
    6b9e:	d001      	beq.n	6ba4 <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    6ba0:	2000      	movs	r0, #0
    6ba2:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    6ba4:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    6ba8:	b900      	cbnz	r0, 6bac <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    6baa:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    6bac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    6bb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    6bb4:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6bb6:	1e5a      	subs	r2, r3, #1
    6bb8:	d40e      	bmi.n	6bd8 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    6bba:	2a00      	cmp	r2, #0
    6bbc:	d0e3      	beq.n	6b86 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    6bbe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6bc2:	4423      	add	r3, r4
    6bc4:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    6bc8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6bcc:	3301      	adds	r3, #1
    6bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6bd2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    6bd6:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    6bd8:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    6bdc:	2a00      	cmp	r2, #0
    6bde:	d0d2      	beq.n	6b86 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    6be0:	e7ed      	b.n	6bbe <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    6be2:	bd70      	pop	{r4, r5, r6, pc}

00006be4 <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    6be4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6be8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    6bec:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    6bee:	bf48      	it	mi
    6bf0:	3040      	addmi	r0, #64	; 0x40
}
    6bf2:	4770      	bx	lr

00006bf4 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    6bf4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    6bf8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    6bfc:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6bfe:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    6c00:	bf48      	it	mi
    6c02:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    6c06:	4770      	bx	lr

00006c08 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    6c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6c0c:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    6c10:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6c12:	f04f 0101 	mov.w	r1, #1
    6c16:	f3bf 8f5b 	dmb	ish
    6c1a:	e8d3 2f4f 	ldrexb	r2, [r3]
    6c1e:	e8c3 1f44 	strexb	r4, r1, [r3]
    6c22:	2c00      	cmp	r4, #0
    6c24:	d1f9      	bne.n	6c1a <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    6c26:	f3bf 8f5b 	dmb	ish
    6c2a:	f012 0fff 	tst.w	r2, #255	; 0xff
    6c2e:	f040 80e4 	bne.w	6dfa <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    6c32:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    6c36:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    6c3a:	428e      	cmp	r6, r1
    6c3c:	f000 81b6 	beq.w	6fac <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6c40:	f100 0340 	add.w	r3, r0, #64	; 0x40
    6c44:	eb03 0706 	add.w	r7, r3, r6
    6c48:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    6c4c:	f0c0 80d8 	bcc.w	6e00 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6c50:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6c54:	4411      	add	r1, r2
    6c56:	2940      	cmp	r1, #64	; 0x40
    6c58:	bf28      	it	cs
    6c5a:	2140      	movcs	r1, #64	; 0x40
    6c5c:	428a      	cmp	r2, r1
    6c5e:	bf28      	it	cs
    6c60:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6c62:	2a00      	cmp	r2, #0
    6c64:	f000 81c7 	beq.w	6ff6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    6c68:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    6c6c:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6c70:	eb00 080e 	add.w	r8, r0, lr
    6c74:	4404      	add	r4, r0
    6c76:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    6c7a:	45e0      	cmp	r8, ip
    6c7c:	bf38      	it	cc
    6c7e:	42a5      	cmpcc	r5, r4
    6c80:	f0c0 81ae 	bcc.w	6fe0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6c84:	2a0b      	cmp	r2, #11
    6c86:	f240 81ab 	bls.w	6fe0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6c8a:	426c      	negs	r4, r5
    6c8c:	f014 0403 	ands.w	r4, r4, #3
    6c90:	f000 817f 	beq.w	6f92 <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    6c94:	5d9e      	ldrb	r6, [r3, r6]
    6c96:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    6c9a:	2c01      	cmp	r4, #1
    6c9c:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    6ca0:	f107 0801 	add.w	r8, r7, #1
    6ca4:	f000 817b 	beq.w	6f9e <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6ca8:	787e      	ldrb	r6, [r7, #1]
    6caa:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    6cae:	2c02      	cmp	r4, #2
    6cb0:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    6cb4:	f107 0802 	add.w	r8, r7, #2
    6cb8:	f000 8171 	beq.w	6f9e <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6cbc:	78be      	ldrb	r6, [r7, #2]
    6cbe:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6cc2:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6cc4:	f107 0803 	add.w	r8, r7, #3
    6cc8:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6ccc:	9601      	str	r6, [sp, #4]
    6cce:	eba2 0b04 	sub.w	fp, r2, r4
    6cd2:	f1ab 0704 	sub.w	r7, fp, #4
    6cd6:	08bf      	lsrs	r7, r7, #2
    6cd8:	eb0e 0604 	add.w	r6, lr, r4
    6cdc:	3701      	adds	r7, #1
    6cde:	34c0      	adds	r4, #192	; 0xc0
    6ce0:	4406      	add	r6, r0
    6ce2:	4404      	add	r4, r0
    6ce4:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6ce8:	f04f 0e00 	mov.w	lr, #0
    6cec:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6cf0:	f856 ab04 	ldr.w	sl, [r6], #4
    6cf4:	f844 ab04 	str.w	sl, [r4], #4
    6cf8:	45be      	cmp	lr, r7
    6cfa:	d3f7      	bcc.n	6cec <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    6cfc:	9c01      	ldr	r4, [sp, #4]
    6cfe:	45cb      	cmp	fp, r9
    6d00:	444c      	add	r4, r9
    6d02:	eb08 0e09 	add.w	lr, r8, r9
    6d06:	eb0c 0609 	add.w	r6, ip, r9
    6d0a:	d00f      	beq.n	6d2c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    6d0c:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    6d10:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6d14:	1c67      	adds	r7, r4, #1
    6d16:	42ba      	cmp	r2, r7
    6d18:	d908      	bls.n	6d2c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    6d1a:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6d1c:	f89e 7001 	ldrb.w	r7, [lr, #1]
    6d20:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6d22:	42a2      	cmp	r2, r4
    6d24:	d902      	bls.n	6d2c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    6d26:	f89e 4002 	ldrb.w	r4, [lr, #2]
    6d2a:	70b4      	strb	r4, [r6, #2]
    6d2c:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6d2e:	1a8a      	subs	r2, r1, r2
    6d30:	f000 811a 	beq.w	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6d34:	1d26      	adds	r6, r4, #4
    6d36:	f100 0744 	add.w	r7, r0, #68	; 0x44
    6d3a:	42bc      	cmp	r4, r7
    6d3c:	bf38      	it	cc
    6d3e:	42b3      	cmpcc	r3, r6
    6d40:	f0c0 8145 	bcc.w	6fce <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    6d44:	2a0b      	cmp	r2, #11
    6d46:	f240 8142 	bls.w	6fce <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    6d4a:	425f      	negs	r7, r3
    6d4c:	f017 0703 	ands.w	r7, r7, #3
    6d50:	f000 8129 	beq.w	6fa6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    6d54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    6d58:	7023      	strb	r3, [r4, #0]
    6d5a:	2f01      	cmp	r7, #1
    6d5c:	f104 0c01 	add.w	ip, r4, #1
    6d60:	f100 0341 	add.w	r3, r0, #65	; 0x41
    6d64:	f000 811d 	beq.w	6fa2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    6d68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    6d6c:	7063      	strb	r3, [r4, #1]
    6d6e:	2f02      	cmp	r7, #2
    6d70:	f104 0c02 	add.w	ip, r4, #2
    6d74:	f100 0342 	add.w	r3, r0, #66	; 0x42
    6d78:	f000 8113 	beq.w	6fa2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    6d7c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    6d80:	70a3      	strb	r3, [r4, #2]
    6d82:	f104 0c03 	add.w	ip, r4, #3
    6d86:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6d8a:	f04f 0903 	mov.w	r9, #3
    6d8e:	eba2 0807 	sub.w	r8, r2, r7
    6d92:	f1a8 0e04 	sub.w	lr, r8, #4
    6d96:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    6d9a:	f107 0640 	add.w	r6, r7, #64	; 0x40
    6d9e:	f10e 0e01 	add.w	lr, lr, #1
    6da2:	443c      	add	r4, r7
    6da4:	4406      	add	r6, r0
    6da6:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6daa:	2700      	movs	r7, #0
    6dac:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    6dae:	f856 bb04 	ldr.w	fp, [r6], #4
    6db2:	f844 bb04 	str.w	fp, [r4], #4
    6db6:	45be      	cmp	lr, r7
    6db8:	d8f8      	bhi.n	6dac <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    6dba:	45d0      	cmp	r8, sl
    6dbc:	eb09 040a 	add.w	r4, r9, sl
    6dc0:	eb03 070a 	add.w	r7, r3, sl
    6dc4:	eb0c 060a 	add.w	r6, ip, sl
    6dc8:	f000 80ce 	beq.w	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6dcc:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    6dd0:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6dd4:	1c63      	adds	r3, r4, #1
    6dd6:	429a      	cmp	r2, r3
    6dd8:	f240 80c6 	bls.w	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6ddc:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6dde:	787b      	ldrb	r3, [r7, #1]
    6de0:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6de2:	42a2      	cmp	r2, r4
    6de4:	f240 80c0 	bls.w	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    6de8:	78bb      	ldrb	r3, [r7, #2]
    6dea:	70b3      	strb	r3, [r6, #2]
    6dec:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6dee:	4628      	mov	r0, r5
    6df0:	f005 f848 	bl	be84 <cdcdf_acm_write>
    6df4:	2800      	cmp	r0, #0
    6df6:	f040 80be 	bne.w	6f76 <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    6dfa:	b003      	add	sp, #12
    6dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    6e00:	1b89      	subs	r1, r1, r6
    6e02:	f106 0240 	add.w	r2, r6, #64	; 0x40
    6e06:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6e0a:	2940      	cmp	r1, #64	; 0x40
    6e0c:	eb00 0c02 	add.w	ip, r0, r2
    6e10:	4404      	add	r4, r0
    6e12:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    6e16:	bf28      	it	cs
    6e18:	2140      	movcs	r1, #64	; 0x40
    6e1a:	45f4      	cmp	ip, lr
    6e1c:	bf38      	it	cc
    6e1e:	42a5      	cmpcc	r5, r4
    6e20:	f0c0 80cb 	bcc.w	6fba <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    6e24:	290b      	cmp	r1, #11
    6e26:	f240 80c8 	bls.w	6fba <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    6e2a:	426c      	negs	r4, r5
    6e2c:	f014 0403 	ands.w	r4, r4, #3
    6e30:	f000 80ab 	beq.w	6f8a <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    6e34:	5d9b      	ldrb	r3, [r3, r6]
    6e36:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    6e3a:	2c01      	cmp	r4, #1
    6e3c:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    6e40:	f107 0e01 	add.w	lr, r7, #1
    6e44:	f000 80a9 	beq.w	6f9a <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    6e48:	787b      	ldrb	r3, [r7, #1]
    6e4a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    6e4e:	2c02      	cmp	r4, #2
    6e50:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    6e54:	f107 0e02 	add.w	lr, r7, #2
    6e58:	f000 809f 	beq.w	6f9a <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    6e5c:	78bb      	ldrb	r3, [r7, #2]
    6e5e:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    6e62:	f107 0e03 	add.w	lr, r7, #3
    6e66:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6e6a:	f04f 0c03 	mov.w	ip, #3
    6e6e:	1913      	adds	r3, r2, r4
    6e70:	4403      	add	r3, r0
    6e72:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6e76:	681a      	ldr	r2, [r3, #0]
    6e78:	f840 2008 	str.w	r2, [r0, r8]
    6e7c:	1b0f      	subs	r7, r1, r4
    6e7e:	1f3a      	subs	r2, r7, #4
    6e80:	0892      	lsrs	r2, r2, #2
    6e82:	eb00 0408 	add.w	r4, r0, r8
    6e86:	3201      	adds	r2, #1
    6e88:	f8d3 8004 	ldr.w	r8, [r3, #4]
    6e8c:	f8c4 8004 	str.w	r8, [r4, #4]
    6e90:	2a02      	cmp	r2, #2
    6e92:	ea4f 0882 	mov.w	r8, r2, lsl #2
    6e96:	d04f      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6e98:	f8d3 9008 	ldr.w	r9, [r3, #8]
    6e9c:	f8c4 9008 	str.w	r9, [r4, #8]
    6ea0:	2a03      	cmp	r2, #3
    6ea2:	d049      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6ea4:	f8d3 900c 	ldr.w	r9, [r3, #12]
    6ea8:	f8c4 900c 	str.w	r9, [r4, #12]
    6eac:	2a04      	cmp	r2, #4
    6eae:	d043      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6eb0:	f8d3 9010 	ldr.w	r9, [r3, #16]
    6eb4:	f8c4 9010 	str.w	r9, [r4, #16]
    6eb8:	2a05      	cmp	r2, #5
    6eba:	d03d      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6ebc:	f8d3 9014 	ldr.w	r9, [r3, #20]
    6ec0:	f8c4 9014 	str.w	r9, [r4, #20]
    6ec4:	2a06      	cmp	r2, #6
    6ec6:	d037      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6ec8:	f8d3 9018 	ldr.w	r9, [r3, #24]
    6ecc:	f8c4 9018 	str.w	r9, [r4, #24]
    6ed0:	2a07      	cmp	r2, #7
    6ed2:	d031      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6ed4:	f8d3 901c 	ldr.w	r9, [r3, #28]
    6ed8:	f8c4 901c 	str.w	r9, [r4, #28]
    6edc:	2a08      	cmp	r2, #8
    6ede:	d02b      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6ee0:	f8d3 9020 	ldr.w	r9, [r3, #32]
    6ee4:	f8c4 9020 	str.w	r9, [r4, #32]
    6ee8:	2a09      	cmp	r2, #9
    6eea:	d025      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6eec:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    6ef0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    6ef4:	2a0a      	cmp	r2, #10
    6ef6:	d01f      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6ef8:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    6efc:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    6f00:	2a0b      	cmp	r2, #11
    6f02:	d019      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f04:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    6f08:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    6f0c:	2a0c      	cmp	r2, #12
    6f0e:	d013      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f10:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    6f14:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    6f18:	2a0d      	cmp	r2, #13
    6f1a:	d00d      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f1c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    6f20:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    6f24:	2a0e      	cmp	r2, #14
    6f26:	d007      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f28:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    6f2c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    6f30:	2a0f      	cmp	r2, #15
    6f32:	d001      	beq.n	6f38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6f36:	63e3      	str	r3, [r4, #60]	; 0x3c
    6f38:	4547      	cmp	r7, r8
    6f3a:	eb0c 0308 	add.w	r3, ip, r8
    6f3e:	eb06 0408 	add.w	r4, r6, r8
    6f42:	eb0e 0c08 	add.w	ip, lr, r8
    6f46:	d00f      	beq.n	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6f48:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    6f4c:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6f50:	1c5a      	adds	r2, r3, #1
    6f52:	4291      	cmp	r1, r2
    6f54:	d908      	bls.n	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6f56:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    6f58:	f89c 2001 	ldrb.w	r2, [ip, #1]
    6f5c:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6f5e:	4299      	cmp	r1, r3
    6f60:	d902      	bls.n	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    6f62:	f89c 3002 	ldrb.w	r3, [ip, #2]
    6f66:	70a3      	strb	r3, [r4, #2]
    6f68:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6f6a:	4628      	mov	r0, r5
    6f6c:	f004 ff8a 	bl	be84 <cdcdf_acm_write>
    6f70:	2800      	cmp	r0, #0
    6f72:	f43f af42 	beq.w	6dfa <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    6f76:	f3bf 8f5b 	dmb	ish
    6f7a:	2300      	movs	r3, #0
    6f7c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    6f80:	f3bf 8f5b 	dmb	ish
}
    6f84:	b003      	add	sp, #12
    6f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6f8a:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6f8c:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6f8e:	462e      	mov	r6, r5
    6f90:	e76d      	b.n	6e6e <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    6f92:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6f94:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6f96:	46ac      	mov	ip, r5
    6f98:	e699      	b.n	6cce <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6f9a:	46a4      	mov	ip, r4
    6f9c:	e767      	b.n	6e6e <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6f9e:	9401      	str	r4, [sp, #4]
    6fa0:	e695      	b.n	6cce <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6fa2:	46b9      	mov	r9, r7
    6fa4:	e6f3      	b.n	6d8e <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    6fa6:	46b9      	mov	r9, r7
    6fa8:	46a4      	mov	ip, r4
    6faa:	e6f0      	b.n	6d8e <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    6fac:	f3bf 8f5b 	dmb	ish
    6fb0:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    6fb4:	f3bf 8f5b 	dmb	ish
        return;
    6fb8:	e71f      	b.n	6dfa <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    6fba:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    6fbe:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    6fc0:	f817 2b01 	ldrb.w	r2, [r7], #1
    6fc4:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6fc8:	42a7      	cmp	r7, r4
    6fca:	d1f9      	bne.n	6fc0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    6fcc:	e7cc      	b.n	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6fce:	3c01      	subs	r4, #1
    6fd0:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    6fd2:	f813 6b01 	ldrb.w	r6, [r3], #1
    6fd6:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6fda:	4293      	cmp	r3, r2
    6fdc:	d1f9      	bne.n	6fd2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    6fde:	e7c3      	b.n	6f68 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6fe0:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    6fe4:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    6fe8:	f817 6b01 	ldrb.w	r6, [r7], #1
    6fec:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6ff0:	45be      	cmp	lr, r7
    6ff2:	d1f9      	bne.n	6fe8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    6ff4:	e69a      	b.n	6d2c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6ff6:	462c      	mov	r4, r5
    6ff8:	e699      	b.n	6d2e <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    6ffa:	bf00      	nop

00006ffc <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    6ffc:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    6ffe:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    7002:	b903      	cbnz	r3, 7006 <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    7004:	bd38      	pop	{r3, r4, r5, pc}
    7006:	4605      	mov	r5, r0
    TxPump();
    7008:	f7ff fdfe 	bl	6c08 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    700c:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    7010:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    7014:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7018:	429a      	cmp	r2, r3
    701a:	d00b      	beq.n	7034 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    701c:	f004 ff7a 	bl	bf14 <cdcdf_acm_is_enabled>
    7020:	b140      	cbz	r0, 7034 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    7022:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    7026:	07db      	lsls	r3, r3, #31
    7028:	d504      	bpl.n	7034 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    702a:	7b63      	ldrb	r3, [r4, #13]
    702c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7030:	2b02      	cmp	r3, #2
    7032:	d0ed      	beq.n	7010 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    7034:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    7036:	4621      	mov	r1, r4
    m_portOpen = false;
    7038:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    703c:	4620      	mov	r0, r4
    703e:	f004 ff41 	bl	bec4 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    7042:	4621      	mov	r1, r4
    7044:	2001      	movs	r0, #1
    7046:	f004 ff3d 	bl	bec4 <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    704a:	f004 ff2f 	bl	beac <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    704e:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    7052:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    7056:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    705a:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    705e:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    7062:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    7066:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    706a:	bd38      	pop	{r3, r4, r5, pc}

0000706c <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    706c:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    7070:	b103      	cbz	r3, 7074 <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    7072:	4770      	bx	lr
    7074:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    7078:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    707c:	429a      	cmp	r2, r3
    707e:	f000 80fd 	beq.w	727c <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    7082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7086:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    708a:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    708c:	f04f 0101 	mov.w	r1, #1
    7090:	f3bf 8f5b 	dmb	ish
    7094:	e8d3 2f4f 	ldrexb	r2, [r3]
    7098:	e8c3 1f44 	strexb	r4, r1, [r3]
    709c:	2c00      	cmp	r4, #0
    709e:	d1f9      	bne.n	7094 <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    70a0:	f3bf 8f5b 	dmb	ish
    70a4:	f012 0fff 	tst.w	r2, #255	; 0xff
    70a8:	f040 80e5 	bne.w	7276 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    70ac:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    70b0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    70b4:	428e      	cmp	r6, r1
    70b6:	f000 81ab 	beq.w	7410 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    70ba:	f100 0340 	add.w	r3, r0, #64	; 0x40
    70be:	eb03 0706 	add.w	r7, r3, r6
    70c2:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    70c6:	f0c0 80da 	bcc.w	727e <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    70ca:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    70ce:	4411      	add	r1, r2
    70d0:	2940      	cmp	r1, #64	; 0x40
    70d2:	bf28      	it	cs
    70d4:	2140      	movcs	r1, #64	; 0x40
    70d6:	428a      	cmp	r2, r1
    70d8:	bf28      	it	cs
    70da:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    70dc:	2a00      	cmp	r2, #0
    70de:	f000 81bc 	beq.w	745a <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    70e2:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    70e6:	f106 0444 	add.w	r4, r6, #68	; 0x44
    70ea:	eb00 080e 	add.w	r8, r0, lr
    70ee:	4404      	add	r4, r0
    70f0:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    70f4:	45e0      	cmp	r8, ip
    70f6:	bf38      	it	cc
    70f8:	42a5      	cmpcc	r5, r4
    70fa:	f0c0 81a3 	bcc.w	7444 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    70fe:	2a0b      	cmp	r2, #11
    7100:	f240 81a0 	bls.w	7444 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    7104:	426c      	negs	r4, r5
    7106:	f014 0403 	ands.w	r4, r4, #3
    710a:	f000 8177 	beq.w	73fc <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    710e:	5d9e      	ldrb	r6, [r3, r6]
    7110:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    7114:	2c01      	cmp	r4, #1
    7116:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    711a:	f107 0801 	add.w	r8, r7, #1
    711e:	f000 8171 	beq.w	7404 <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    7122:	787e      	ldrb	r6, [r7, #1]
    7124:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7128:	2c02      	cmp	r4, #2
    712a:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    712e:	f107 0802 	add.w	r8, r7, #2
    7132:	f000 8165 	beq.w	7400 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    7136:	78be      	ldrb	r6, [r7, #2]
    7138:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    713c:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    713e:	f107 0803 	add.w	r8, r7, #3
    7142:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7146:	9601      	str	r6, [sp, #4]
    7148:	eba2 0b04 	sub.w	fp, r2, r4
    714c:	f1ab 0704 	sub.w	r7, fp, #4
    7150:	08bf      	lsrs	r7, r7, #2
    7152:	eb0e 0604 	add.w	r6, lr, r4
    7156:	3701      	adds	r7, #1
    7158:	34c0      	adds	r4, #192	; 0xc0
    715a:	4406      	add	r6, r0
    715c:	4404      	add	r4, r0
    715e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    7162:	f04f 0e00 	mov.w	lr, #0
    7166:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    716a:	f856 ab04 	ldr.w	sl, [r6], #4
    716e:	f844 ab04 	str.w	sl, [r4], #4
    7172:	45be      	cmp	lr, r7
    7174:	d3f7      	bcc.n	7166 <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    7176:	9c01      	ldr	r4, [sp, #4]
    7178:	45cb      	cmp	fp, r9
    717a:	444c      	add	r4, r9
    717c:	eb0c 0609 	add.w	r6, ip, r9
    7180:	eb08 0e09 	add.w	lr, r8, r9
    7184:	d00f      	beq.n	71a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    7186:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    718a:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    718e:	1c67      	adds	r7, r4, #1
    7190:	42ba      	cmp	r2, r7
    7192:	d908      	bls.n	71a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    7194:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7196:	f89e 7001 	ldrb.w	r7, [lr, #1]
    719a:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    719c:	42a2      	cmp	r2, r4
    719e:	d902      	bls.n	71a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    71a0:	f89e 4002 	ldrb.w	r4, [lr, #2]
    71a4:	70b4      	strb	r4, [r6, #2]
    71a6:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71a8:	1a8a      	subs	r2, r1, r2
    71aa:	d058      	beq.n	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    71ac:	1d26      	adds	r6, r4, #4
    71ae:	f100 0744 	add.w	r7, r0, #68	; 0x44
    71b2:	42bc      	cmp	r4, r7
    71b4:	bf38      	it	cc
    71b6:	42b3      	cmpcc	r3, r6
    71b8:	f0c0 813b 	bcc.w	7432 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    71bc:	2a0b      	cmp	r2, #11
    71be:	f240 8138 	bls.w	7432 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    71c2:	425f      	negs	r7, r3
    71c4:	f017 0703 	ands.w	r7, r7, #3
    71c8:	f000 811f 	beq.w	740a <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    71cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    71d0:	7023      	strb	r3, [r4, #0]
    71d2:	2f01      	cmp	r7, #1
    71d4:	f104 0c01 	add.w	ip, r4, #1
    71d8:	f100 0341 	add.w	r3, r0, #65	; 0x41
    71dc:	f000 8116 	beq.w	740c <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    71e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    71e4:	7063      	strb	r3, [r4, #1]
    71e6:	2f02      	cmp	r7, #2
    71e8:	f104 0c02 	add.w	ip, r4, #2
    71ec:	f100 0342 	add.w	r3, r0, #66	; 0x42
    71f0:	f000 810c 	beq.w	740c <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    71f4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    71f8:	70a3      	strb	r3, [r4, #2]
    71fa:	f104 0c03 	add.w	ip, r4, #3
    71fe:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7202:	f04f 0903 	mov.w	r9, #3
    7206:	eba2 0807 	sub.w	r8, r2, r7
    720a:	f1a8 0e04 	sub.w	lr, r8, #4
    720e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    7212:	f107 0640 	add.w	r6, r7, #64	; 0x40
    7216:	f10e 0e01 	add.w	lr, lr, #1
    721a:	443c      	add	r4, r7
    721c:	4406      	add	r6, r0
    721e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    7222:	2700      	movs	r7, #0
    7224:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    7226:	f856 bb04 	ldr.w	fp, [r6], #4
    722a:	f844 bb04 	str.w	fp, [r4], #4
    722e:	45be      	cmp	lr, r7
    7230:	d8f8      	bhi.n	7224 <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    7232:	45d0      	cmp	r8, sl
    7234:	eb09 040a 	add.w	r4, r9, sl
    7238:	eb0c 060a 	add.w	r6, ip, sl
    723c:	eb03 070a 	add.w	r7, r3, sl
    7240:	d00d      	beq.n	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7242:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    7246:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    724a:	1c63      	adds	r3, r4, #1
    724c:	429a      	cmp	r2, r3
    724e:	d906      	bls.n	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7250:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7252:	787b      	ldrb	r3, [r7, #1]
    7254:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7256:	42a2      	cmp	r2, r4
    7258:	d901      	bls.n	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    725a:	78bb      	ldrb	r3, [r7, #2]
    725c:	70b3      	strb	r3, [r6, #2]
    725e:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7260:	4628      	mov	r0, r5
    7262:	f004 fe0f 	bl	be84 <cdcdf_acm_write>
    7266:	b130      	cbz	r0, 7276 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    7268:	f3bf 8f5b 	dmb	ish
    726c:	2300      	movs	r3, #0
    726e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    7272:	f3bf 8f5b 	dmb	ish
}
    7276:	b003      	add	sp, #12
    7278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    727c:	4770      	bx	lr
        count = min(count, tail - head);
    727e:	1b89      	subs	r1, r1, r6
    7280:	f106 0240 	add.w	r2, r6, #64	; 0x40
    7284:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7288:	2940      	cmp	r1, #64	; 0x40
    728a:	eb00 0c02 	add.w	ip, r0, r2
    728e:	4404      	add	r4, r0
    7290:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    7294:	bf28      	it	cs
    7296:	2140      	movcs	r1, #64	; 0x40
    7298:	45f4      	cmp	ip, lr
    729a:	bf38      	it	cc
    729c:	42a5      	cmpcc	r5, r4
    729e:	f0c0 80be 	bcc.w	741e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    72a2:	290b      	cmp	r1, #11
    72a4:	f240 80bb 	bls.w	741e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    72a8:	426c      	negs	r4, r5
    72aa:	f014 0403 	ands.w	r4, r4, #3
    72ae:	f000 809e 	beq.w	73ee <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    72b2:	5d9b      	ldrb	r3, [r3, r6]
    72b4:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    72b8:	2c01      	cmp	r4, #1
    72ba:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    72be:	f107 0e01 	add.w	lr, r7, #1
    72c2:	f000 8096 	beq.w	73f2 <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    72c6:	787b      	ldrb	r3, [r7, #1]
    72c8:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    72cc:	2c02      	cmp	r4, #2
    72ce:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    72d2:	f107 0e02 	add.w	lr, r7, #2
    72d6:	f000 808e 	beq.w	73f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    72da:	78bb      	ldrb	r3, [r7, #2]
    72dc:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    72e0:	f107 0e03 	add.w	lr, r7, #3
    72e4:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    72e8:	f04f 0c03 	mov.w	ip, #3
    72ec:	1913      	adds	r3, r2, r4
    72ee:	4403      	add	r3, r0
    72f0:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    72f4:	681a      	ldr	r2, [r3, #0]
    72f6:	f840 2008 	str.w	r2, [r0, r8]
    72fa:	1b0f      	subs	r7, r1, r4
    72fc:	1f3a      	subs	r2, r7, #4
    72fe:	0892      	lsrs	r2, r2, #2
    7300:	eb00 0408 	add.w	r4, r0, r8
    7304:	3201      	adds	r2, #1
    7306:	f8d3 8004 	ldr.w	r8, [r3, #4]
    730a:	f8c4 8004 	str.w	r8, [r4, #4]
    730e:	2a02      	cmp	r2, #2
    7310:	ea4f 0882 	mov.w	r8, r2, lsl #2
    7314:	d04f      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7316:	f8d3 9008 	ldr.w	r9, [r3, #8]
    731a:	f8c4 9008 	str.w	r9, [r4, #8]
    731e:	2a03      	cmp	r2, #3
    7320:	d049      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7322:	f8d3 900c 	ldr.w	r9, [r3, #12]
    7326:	f8c4 900c 	str.w	r9, [r4, #12]
    732a:	2a04      	cmp	r2, #4
    732c:	d043      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    732e:	f8d3 9010 	ldr.w	r9, [r3, #16]
    7332:	f8c4 9010 	str.w	r9, [r4, #16]
    7336:	2a05      	cmp	r2, #5
    7338:	d03d      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    733a:	f8d3 9014 	ldr.w	r9, [r3, #20]
    733e:	f8c4 9014 	str.w	r9, [r4, #20]
    7342:	2a06      	cmp	r2, #6
    7344:	d037      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7346:	f8d3 9018 	ldr.w	r9, [r3, #24]
    734a:	f8c4 9018 	str.w	r9, [r4, #24]
    734e:	2a07      	cmp	r2, #7
    7350:	d031      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7352:	f8d3 901c 	ldr.w	r9, [r3, #28]
    7356:	f8c4 901c 	str.w	r9, [r4, #28]
    735a:	2a08      	cmp	r2, #8
    735c:	d02b      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    735e:	f8d3 9020 	ldr.w	r9, [r3, #32]
    7362:	f8c4 9020 	str.w	r9, [r4, #32]
    7366:	2a09      	cmp	r2, #9
    7368:	d025      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    736a:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    736e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    7372:	2a0a      	cmp	r2, #10
    7374:	d01f      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7376:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    737a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    737e:	2a0b      	cmp	r2, #11
    7380:	d019      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7382:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    7386:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    738a:	2a0c      	cmp	r2, #12
    738c:	d013      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    738e:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    7392:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7396:	2a0d      	cmp	r2, #13
    7398:	d00d      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    739a:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    739e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    73a2:	2a0e      	cmp	r2, #14
    73a4:	d007      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73a6:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    73aa:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    73ae:	2a0f      	cmp	r2, #15
    73b0:	d001      	beq.n	73b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    73b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    73b6:	4547      	cmp	r7, r8
    73b8:	eb0c 0308 	add.w	r3, ip, r8
    73bc:	eb06 0408 	add.w	r4, r6, r8
    73c0:	eb0e 0c08 	add.w	ip, lr, r8
    73c4:	f43f af4b 	beq.w	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    73c8:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    73cc:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    73d0:	1c5a      	adds	r2, r3, #1
    73d2:	4291      	cmp	r1, r2
    73d4:	f67f af43 	bls.w	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    73d8:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    73da:	f89c 2001 	ldrb.w	r2, [ip, #1]
    73de:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    73e0:	4299      	cmp	r1, r3
    73e2:	f67f af3c 	bls.w	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    73e6:	f89c 3002 	ldrb.w	r3, [ip, #2]
    73ea:	70a3      	strb	r3, [r4, #2]
    73ec:	e737      	b.n	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    73ee:	46be      	mov	lr, r7
    73f0:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    73f2:	46a4      	mov	ip, r4
    73f4:	e77a      	b.n	72ec <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    73f6:	f04f 0c02 	mov.w	ip, #2
    73fa:	e777      	b.n	72ec <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    73fc:	46b8      	mov	r8, r7
    73fe:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7400:	9401      	str	r4, [sp, #4]
    7402:	e6a1      	b.n	7148 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    7404:	2601      	movs	r6, #1
    7406:	9601      	str	r6, [sp, #4]
    7408:	e69e      	b.n	7148 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    740a:	46a4      	mov	ip, r4
    740c:	46b9      	mov	r9, r7
    740e:	e6fa      	b.n	7206 <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    7410:	f3bf 8f5b 	dmb	ish
    7414:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7418:	f3bf 8f5b 	dmb	ish
    741c:	e72b      	b.n	7276 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    741e:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    7422:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7424:	f817 2b01 	ldrb.w	r2, [r7], #1
    7428:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    742c:	42a7      	cmp	r7, r4
    742e:	d1f9      	bne.n	7424 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    7430:	e715      	b.n	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7432:	3c01      	subs	r4, #1
    7434:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    7436:	f813 6b01 	ldrb.w	r6, [r3], #1
    743a:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    743e:	4293      	cmp	r3, r2
    7440:	d1f9      	bne.n	7436 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    7442:	e70c      	b.n	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7444:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7448:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    744c:	f817 6b01 	ldrb.w	r6, [r7], #1
    7450:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7454:	45be      	cmp	lr, r7
    7456:	d1f9      	bne.n	744c <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    7458:	e6a5      	b.n	71a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    745a:	462c      	mov	r4, r5
    745c:	e6a4      	b.n	71a8 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    745e:	bf00      	nop

00007460 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    7460:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    7462:	f7fe ff85 	bl	6370 <_ZN9ClearCore10UsbManager8InstanceEv>
    7466:	4b01      	ldr	r3, [pc, #4]	; (746c <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    7468:	6018      	str	r0, [r3, #0]
    746a:	bd08      	pop	{r3, pc}
    746c:	20000ad0 	.word	0x20000ad0

00007470 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    7470:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7472:	4770      	bx	lr

00007474 <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    7474:	7900      	ldrb	r0, [r0, #4]
    7476:	4770      	bx	lr

00007478 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    7478:	2001      	movs	r0, #1
    747a:	4770      	bx	lr

0000747c <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    747c:	b510      	push	{r4, lr}
    747e:	4604      	mov	r4, r0
    DigitalIn() {};
    7480:	f007 f800 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    7484:	4620      	mov	r0, r4
    7486:	4b0c      	ldr	r3, [pc, #48]	; (74b8 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    7488:	f840 3b30 	str.w	r3, [r0], #48
    748c:	f004 f8a2 	bl	b5d4 <_ZN9ClearCore13StepGeneratorC1Ev>
    7490:	4a0a      	ldr	r2, [pc, #40]	; (74bc <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    7492:	6022      	str	r2, [r4, #0]
            reg = 0;
    7494:	2300      	movs	r3, #0
    MotorDriver() {};
    7496:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    7498:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    749c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    74a0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    74a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    74a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    74ac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    74b0:	6322      	str	r2, [r4, #48]	; 0x30
    74b2:	4620      	mov	r0, r4
    74b4:	bd10      	pop	{r4, pc}
    74b6:	bf00      	nop
    74b8:	00023318 	.word	0x00023318
    74bc:	00022b5c 	.word	0x00022b5c

000074c0 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    74c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    74c4:	4bbf      	ldr	r3, [pc, #764]	; (77c4 <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    74c6:	f8df a340 	ldr.w	sl, [pc, #832]	; 7808 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    74ca:	4abf      	ldr	r2, [pc, #764]	; (77c8 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    74cc:	49bf      	ldr	r1, [pc, #764]	; (77cc <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    74ce:	4dc0      	ldr	r5, [pc, #768]	; (77d0 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    74d0:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    74d2:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    74d4:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    74d6:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    74da:	7007      	strb	r7, [r0, #0]
    74dc:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    74de:	e88d 0108 	stmia.w	sp, {r3, r8}
    74e2:	4620      	mov	r0, r4
    74e4:	4bbb      	ldr	r3, [pc, #748]	; (77d4 <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    74e6:	f00a fb0f 	bl	11b08 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    74ea:	68a1      	ldr	r1, [r4, #8]
    74ec:	6862      	ldr	r2, [r4, #4]
    74ee:	7b23      	ldrb	r3, [r4, #12]
    74f0:	f8ca 1008 	str.w	r1, [sl, #8]
    74f4:	f8ca 2004 	str.w	r2, [sl, #4]
    74f8:	6921      	ldr	r1, [r4, #16]
    74fa:	6962      	ldr	r2, [r4, #20]
    74fc:	f88a 300c 	strb.w	r3, [sl, #12]
    7500:	69a3      	ldr	r3, [r4, #24]
    7502:	f8ca 1010 	str.w	r1, [sl, #16]
    7506:	f8ca 2014 	str.w	r2, [sl, #20]
    750a:	69e1      	ldr	r1, [r4, #28]
    750c:	6a22      	ldr	r2, [r4, #32]
    750e:	f8ca 3018 	str.w	r3, [sl, #24]
    7512:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7514:	f8ca 101c 	str.w	r1, [sl, #28]
    7518:	f8ca 2020 	str.w	r2, [sl, #32]
    751c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    7520:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    7524:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    7528:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    752c:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    7530:	2680      	movs	r6, #128	; 0x80
    7532:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    7534:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    7538:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    753c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    7540:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7544:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    7548:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    754c:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    7550:	a914      	add	r1, sp, #80	; 0x50
    7552:	4632      	mov	r2, r6
    7554:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    7558:	f016 fe9a 	bl	1e290 <memcpy>
    755c:	4632      	mov	r2, r6
    755e:	a934      	add	r1, sp, #208	; 0xd0
    7560:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    7564:	f016 fe94 	bl	1e290 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    7568:	f8cd 8004 	str.w	r8, [sp, #4]
    756c:	499a      	ldr	r1, [pc, #616]	; (77d8 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    756e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    7572:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7576:	9100      	str	r1, [sp, #0]
    7578:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    757c:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    7580:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    7584:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7588:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    758c:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    7590:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    7594:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    7598:	4620      	mov	r0, r4
    759a:	4b90      	ldr	r3, [pc, #576]	; (77dc <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    759c:	4a90      	ldr	r2, [pc, #576]	; (77e0 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    759e:	4991      	ldr	r1, [pc, #580]	; (77e4 <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    75a0:	f008 fbca 	bl	fd38 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    75a4:	6863      	ldr	r3, [r4, #4]
    75a6:	606b      	str	r3, [r5, #4]
    75a8:	69a3      	ldr	r3, [r4, #24]
    75aa:	68a2      	ldr	r2, [r4, #8]
    75ac:	f894 e00c 	ldrb.w	lr, [r4, #12]
    75b0:	6920      	ldr	r0, [r4, #16]
    75b2:	61ab      	str	r3, [r5, #24]
    75b4:	69e3      	ldr	r3, [r4, #28]
    75b6:	60aa      	str	r2, [r5, #8]
    75b8:	f885 e00c 	strb.w	lr, [r5, #12]
    75bc:	6962      	ldr	r2, [r4, #20]
    75be:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    75c2:	6128      	str	r0, [r5, #16]
    75c4:	61eb      	str	r3, [r5, #28]
    75c6:	6a20      	ldr	r0, [r4, #32]
    75c8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    75cc:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    75d0:	616a      	str	r2, [r5, #20]
    75d2:	6228      	str	r0, [r5, #32]
    75d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    75d6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    75d8:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    75dc:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    75e0:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    75e4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    75e8:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    75ec:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    75f0:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    75f4:	a914      	add	r1, sp, #80	; 0x50
    75f6:	626a      	str	r2, [r5, #36]	; 0x24
    75f8:	85a8      	strh	r0, [r5, #44]	; 0x2c
    75fa:	4632      	mov	r2, r6
    75fc:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7600:	f016 fe46 	bl	1e290 <memcpy>
    7604:	4632      	mov	r2, r6
    7606:	a934      	add	r1, sp, #208	; 0xd0
    7608:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    760c:	f016 fe40 	bl	1e290 <memcpy>
    7610:	f504 7098 	add.w	r0, r4, #304	; 0x130
    7614:	c807      	ldmia	r0, {r0, r1, r2}
    7616:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    761a:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    761e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7622:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    7626:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    762a:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    762e:	4620      	mov	r0, r4
    7630:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    7634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7638:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    763c:	f04f 0a01 	mov.w	sl, #1
    7640:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7644:	f00a f806 	bl	11654 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7648:	4b67      	ldr	r3, [pc, #412]	; (77e8 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    764a:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    764c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    7650:	4d66      	ldr	r5, [pc, #408]	; (77ec <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    7652:	f8cd a004 	str.w	sl, [sp, #4]
    7656:	9300      	str	r3, [sp, #0]
    7658:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    765a:	68a6      	ldr	r6, [r4, #8]
    765c:	71aa      	strb	r2, [r5, #6]
    765e:	f8a5 c004 	strh.w	ip, [r5, #4]
    7662:	60ae      	str	r6, [r5, #8]
    7664:	4620      	mov	r0, r4
    7666:	4b62      	ldr	r3, [pc, #392]	; (77f0 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    7668:	4a62      	ldr	r2, [pc, #392]	; (77f4 <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    766a:	4d63      	ldr	r5, [pc, #396]	; (77f8 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    766c:	f005 ff40 	bl	d4f0 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    7670:	f104 000c 	add.w	r0, r4, #12
    7674:	c807      	ldmia	r0, {r0, r1, r2}
    7676:	f894 e006 	ldrb.w	lr, [r4, #6]
    767a:	68a3      	ldr	r3, [r4, #8]
    767c:	88a6      	ldrh	r6, [r4, #4]
    767e:	f885 e006 	strb.w	lr, [r5, #6]
    7682:	60ab      	str	r3, [r5, #8]
    7684:	f894 e018 	ldrb.w	lr, [r4, #24]
    7688:	69e3      	ldr	r3, [r4, #28]
    768a:	60e8      	str	r0, [r5, #12]
    768c:	6a20      	ldr	r0, [r4, #32]
    768e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7692:	80ae      	strh	r6, [r5, #4]
    7694:	6129      	str	r1, [r5, #16]
    7696:	7e66      	ldrb	r6, [r4, #25]
    7698:	6a61      	ldr	r1, [r4, #36]	; 0x24
    769a:	616a      	str	r2, [r5, #20]
    769c:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    76a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    76a2:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    76a6:	61eb      	str	r3, [r5, #28]
    76a8:	6228      	str	r0, [r5, #32]
    76aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    76ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    76ae:	766e      	strb	r6, [r5, #25]
    76b0:	6269      	str	r1, [r5, #36]	; 0x24
    76b2:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    76b6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    76ba:	632a      	str	r2, [r5, #48]	; 0x30
    76bc:	63a8      	str	r0, [r5, #56]	; 0x38
    76be:	636b      	str	r3, [r5, #52]	; 0x34
    76c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    76c4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    76c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    76ca:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    76ce:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    76d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    76d4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    76d8:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    76dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    76de:	6d20      	ldr	r0, [r4, #80]	; 0x50
    76e0:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    76e4:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    76e8:	6429      	str	r1, [r5, #64]	; 0x40
    76ea:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    76ee:	6d61      	ldr	r1, [r4, #84]	; 0x54
    76f0:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    76f4:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    76f8:	64aa      	str	r2, [r5, #72]	; 0x48
    76fa:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    76fe:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7700:	64eb      	str	r3, [r5, #76]	; 0x4c
    7702:	6528      	str	r0, [r5, #80]	; 0x50
    7704:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7706:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    770a:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    770e:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7712:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7716:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    771a:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    771e:	662a      	str	r2, [r5, #96]	; 0x60
    7720:	666b      	str	r3, [r5, #100]	; 0x64
    7722:	6569      	str	r1, [r5, #84]	; 0x54
    7724:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    7726:	4b35      	ldr	r3, [pc, #212]	; (77fc <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    7728:	f8cd a000 	str.w	sl, [sp]
    772c:	4620      	mov	r0, r4
    772e:	66a9      	str	r1, [r5, #104]	; 0x68
    7730:	4a33      	ldr	r2, [pc, #204]	; (7800 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    7732:	4d34      	ldr	r5, [pc, #208]	; (7804 <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    7734:	2140      	movs	r1, #64	; 0x40
    7736:	f006 fbe1 	bl	defc <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    773a:	f894 e006 	ldrb.w	lr, [r4, #6]
    773e:	68a2      	ldr	r2, [r4, #8]
    7740:	68e3      	ldr	r3, [r4, #12]
    7742:	88a6      	ldrh	r6, [r4, #4]
    7744:	6920      	ldr	r0, [r4, #16]
    7746:	6961      	ldr	r1, [r4, #20]
    7748:	f885 e006 	strb.w	lr, [r5, #6]
    774c:	60aa      	str	r2, [r5, #8]
    774e:	f894 e018 	ldrb.w	lr, [r4, #24]
    7752:	69e2      	ldr	r2, [r4, #28]
    7754:	60eb      	str	r3, [r5, #12]
    7756:	6a23      	ldr	r3, [r4, #32]
    7758:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    775c:	80ae      	strh	r6, [r5, #4]
    775e:	6128      	str	r0, [r5, #16]
    7760:	7e66      	ldrb	r6, [r4, #25]
    7762:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7764:	6169      	str	r1, [r5, #20]
    7766:	f885 e018 	strb.w	lr, [r5, #24]
    776a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    776c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7770:	61ea      	str	r2, [r5, #28]
    7772:	622b      	str	r3, [r5, #32]
    7774:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7778:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    777c:	766e      	strb	r6, [r5, #25]
    777e:	6268      	str	r0, [r5, #36]	; 0x24
    7780:	6329      	str	r1, [r5, #48]	; 0x30
    7782:	636a      	str	r2, [r5, #52]	; 0x34
    7784:	63ab      	str	r3, [r5, #56]	; 0x38
    7786:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    778a:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    778e:	f8cd a000 	str.w	sl, [sp]
    7792:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7796:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    779a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    779c:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    77a0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    77a4:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    77a8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    77aa:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    77ae:	642a      	str	r2, [r5, #64]	; 0x40
    77b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    77b2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    77b4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    77b8:	652e      	str	r6, [r5, #80]	; 0x50
    77ba:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    77be:	6d66      	ldr	r6, [r4, #84]	; 0x54
    77c0:	64a9      	str	r1, [r5, #72]	; 0x48
    77c2:	e023      	b.n	780c <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    77c4:	00022ed0 	.word	0x00022ed0
    77c8:	00022f30 	.word	0x00022f30
    77cc:	00022ec0 	.word	0x00022ec0
    77d0:	20001884 	.word	0x20001884
    77d4:	00022df0 	.word	0x00022df0
    77d8:	00022f10 	.word	0x00022f10
    77dc:	00022eb0 	.word	0x00022eb0
    77e0:	00022de0 	.word	0x00022de0
    77e4:	00022f00 	.word	0x00022f00
    77e8:	000230d0 	.word	0x000230d0
    77ec:	20001474 	.word	0x20001474
    77f0:	00023090 	.word	0x00023090
    77f4:	00022f60 	.word	0x00022f60
    77f8:	200011e0 	.word	0x200011e0
    77fc:	000230a0 	.word	0x000230a0
    7800:	00023040 	.word	0x00023040
    7804:	2000124c 	.word	0x2000124c
    7808:	20001740 	.word	0x20001740
    780c:	64ea      	str	r2, [r5, #76]	; 0x4c
    780e:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7812:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7816:	656e      	str	r6, [r5, #84]	; 0x54
    7818:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    781c:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7820:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7824:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7828:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    782c:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7830:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7834:	4620      	mov	r0, r4
    7836:	4db9      	ldr	r5, [pc, #740]	; (7b1c <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    7838:	4bb9      	ldr	r3, [pc, #740]	; (7b20 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    783a:	4aba      	ldr	r2, [pc, #744]	; (7b24 <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    783c:	2120      	movs	r1, #32
    783e:	f006 fb5d 	bl	defc <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7842:	f894 e006 	ldrb.w	lr, [r4, #6]
    7846:	68a2      	ldr	r2, [r4, #8]
    7848:	68e3      	ldr	r3, [r4, #12]
    784a:	88a6      	ldrh	r6, [r4, #4]
    784c:	6920      	ldr	r0, [r4, #16]
    784e:	6961      	ldr	r1, [r4, #20]
    7850:	f885 e006 	strb.w	lr, [r5, #6]
    7854:	60aa      	str	r2, [r5, #8]
    7856:	f894 e018 	ldrb.w	lr, [r4, #24]
    785a:	69e2      	ldr	r2, [r4, #28]
    785c:	60eb      	str	r3, [r5, #12]
    785e:	6a23      	ldr	r3, [r4, #32]
    7860:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7864:	80ae      	strh	r6, [r5, #4]
    7866:	6128      	str	r0, [r5, #16]
    7868:	7e66      	ldrb	r6, [r4, #25]
    786a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    786c:	6169      	str	r1, [r5, #20]
    786e:	f885 e018 	strb.w	lr, [r5, #24]
    7872:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7874:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7878:	61ea      	str	r2, [r5, #28]
    787a:	622b      	str	r3, [r5, #32]
    787c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    787e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7880:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7884:	766e      	strb	r6, [r5, #25]
    7886:	6268      	str	r0, [r5, #36]	; 0x24
    7888:	6329      	str	r1, [r5, #48]	; 0x30
    788a:	636a      	str	r2, [r5, #52]	; 0x34
    788c:	63ab      	str	r3, [r5, #56]	; 0x38
    788e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7892:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    7896:	f8cd a000 	str.w	sl, [sp]
    789a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    789e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    78a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    78a4:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    78a8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    78ac:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    78b0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    78b2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    78b6:	642a      	str	r2, [r5, #64]	; 0x40
    78b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    78ba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    78bc:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    78c0:	652e      	str	r6, [r5, #80]	; 0x50
    78c2:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    78c6:	6d66      	ldr	r6, [r4, #84]	; 0x54
    78c8:	64a9      	str	r1, [r5, #72]	; 0x48
    78ca:	64ea      	str	r2, [r5, #76]	; 0x4c
    78cc:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    78d0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    78d4:	656e      	str	r6, [r5, #84]	; 0x54
    78d6:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    78da:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    78de:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    78e2:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    78e6:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    78ea:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    78ee:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    78f2:	4620      	mov	r0, r4
    78f4:	4d8c      	ldr	r5, [pc, #560]	; (7b28 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    78f6:	4b8d      	ldr	r3, [pc, #564]	; (7b2c <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    78f8:	4a8d      	ldr	r2, [pc, #564]	; (7b30 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    78fa:	2110      	movs	r1, #16
    78fc:	f006 fafe 	bl	defc <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7900:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7904:	68a2      	ldr	r2, [r4, #8]
    7906:	68e3      	ldr	r3, [r4, #12]
    7908:	79a6      	ldrb	r6, [r4, #6]
    790a:	6920      	ldr	r0, [r4, #16]
    790c:	6961      	ldr	r1, [r4, #20]
    790e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7912:	60aa      	str	r2, [r5, #8]
    7914:	f894 e018 	ldrb.w	lr, [r4, #24]
    7918:	69e2      	ldr	r2, [r4, #28]
    791a:	60eb      	str	r3, [r5, #12]
    791c:	6a23      	ldr	r3, [r4, #32]
    791e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7922:	71ae      	strb	r6, [r5, #6]
    7924:	6128      	str	r0, [r5, #16]
    7926:	7e66      	ldrb	r6, [r4, #25]
    7928:	6a60      	ldr	r0, [r4, #36]	; 0x24
    792a:	6169      	str	r1, [r5, #20]
    792c:	f885 e018 	strb.w	lr, [r5, #24]
    7930:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7932:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7936:	61ea      	str	r2, [r5, #28]
    7938:	622b      	str	r3, [r5, #32]
    793a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    793c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    793e:	766e      	strb	r6, [r5, #25]
    7940:	6268      	str	r0, [r5, #36]	; 0x24
    7942:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7946:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    794a:	636a      	str	r2, [r5, #52]	; 0x34
    794c:	63ab      	str	r3, [r5, #56]	; 0x38
    794e:	6329      	str	r1, [r5, #48]	; 0x30
    7950:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7954:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    7958:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    795c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    795e:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    7962:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    7966:	9703      	str	r7, [sp, #12]
    7968:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    796a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    796e:	642b      	str	r3, [r5, #64]	; 0x40
    7970:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7972:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7974:	64a9      	str	r1, [r5, #72]	; 0x48
    7976:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    797a:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    797e:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    7982:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    7986:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7988:	64ea      	str	r2, [r5, #76]	; 0x4c
    798a:	652b      	str	r3, [r5, #80]	; 0x50
    798c:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    7990:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    7994:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    7998:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    799c:	6568      	str	r0, [r5, #84]	; 0x54
    799e:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    79a2:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    79a6:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    79aa:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    79ae:	f04f 0e68 	mov.w	lr, #104	; 0x68
    79b2:	4d60      	ldr	r5, [pc, #384]	; (7b34 <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    79b4:	f8df c19c 	ldr.w	ip, [pc, #412]	; 7b54 <_ZN9ClearCore10SysManagerC1Ev+0x694>
    79b8:	4e5f      	ldr	r6, [pc, #380]	; (7b38 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    79ba:	4b60      	ldr	r3, [pc, #384]	; (7b3c <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    79bc:	4a60      	ldr	r2, [pc, #384]	; (7b40 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    79be:	f8cd e008 	str.w	lr, [sp, #8]
    79c2:	4620      	mov	r0, r4
    79c4:	2108      	movs	r1, #8
    79c6:	9601      	str	r6, [sp, #4]
    79c8:	f8cd c000 	str.w	ip, [sp]
    79cc:	f006 fdf0 	bl	e5b0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    79d0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    79d4:	68a2      	ldr	r2, [r4, #8]
    79d6:	68e3      	ldr	r3, [r4, #12]
    79d8:	79a6      	ldrb	r6, [r4, #6]
    79da:	6920      	ldr	r0, [r4, #16]
    79dc:	6961      	ldr	r1, [r4, #20]
    79de:	f8a5 e004 	strh.w	lr, [r5, #4]
    79e2:	60aa      	str	r2, [r5, #8]
    79e4:	f894 e018 	ldrb.w	lr, [r4, #24]
    79e8:	69e2      	ldr	r2, [r4, #28]
    79ea:	60eb      	str	r3, [r5, #12]
    79ec:	6a23      	ldr	r3, [r4, #32]
    79ee:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    79f2:	71ae      	strb	r6, [r5, #6]
    79f4:	6128      	str	r0, [r5, #16]
    79f6:	7e66      	ldrb	r6, [r4, #25]
    79f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    79fa:	6169      	str	r1, [r5, #20]
    79fc:	f885 e018 	strb.w	lr, [r5, #24]
    7a00:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7a02:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7a06:	61ea      	str	r2, [r5, #28]
    7a08:	622b      	str	r3, [r5, #32]
    7a0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7a0e:	766e      	strb	r6, [r5, #25]
    7a10:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7a14:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7a18:	6329      	str	r1, [r5, #48]	; 0x30
    7a1a:	636a      	str	r2, [r5, #52]	; 0x34
    7a1c:	63ab      	str	r3, [r5, #56]	; 0x38
    7a1e:	6268      	str	r0, [r5, #36]	; 0x24
    7a20:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7a24:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7a28:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7a2e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    7a32:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    7a36:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    7a38:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7a3a:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7a3e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7a42:	642b      	str	r3, [r5, #64]	; 0x40
    7a44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7a46:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7a48:	64a8      	str	r0, [r5, #72]	; 0x48
    7a4a:	652a      	str	r2, [r5, #80]	; 0x50
    7a4c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    7a50:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    7a54:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7a58:	64e9      	str	r1, [r5, #76]	; 0x4c
    7a5a:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    7a5e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7a62:	656b      	str	r3, [r5, #84]	; 0x54
    7a64:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    7a68:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    7a6c:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    7a70:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    7a74:	f04f 0c65 	mov.w	ip, #101	; 0x65
    7a78:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    7a7c:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    7a80:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7a84:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    7a88:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    7a8c:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 7b58 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    7a90:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    7a94:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7a98:	9703      	str	r7, [sp, #12]
    7a9a:	f8cd c008 	str.w	ip, [sp, #8]
    7a9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7aa0:	4b28      	ldr	r3, [pc, #160]	; (7b44 <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    7aa2:	f8cd e004 	str.w	lr, [sp, #4]
    7aa6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    7aa8:	9300      	str	r3, [sp, #0]
    7aaa:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7aae:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7ab2:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7ab4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7ab6:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7aba:	6669      	str	r1, [r5, #100]	; 0x64
    7abc:	66aa      	str	r2, [r5, #104]	; 0x68
    7abe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7ac0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    7ac2:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7ac6:	676e      	str	r6, [r5, #116]	; 0x74
    7ac8:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7acc:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7ad0:	66eb      	str	r3, [r5, #108]	; 0x6c
    7ad2:	67a9      	str	r1, [r5, #120]	; 0x78
    7ad4:	67ea      	str	r2, [r5, #124]	; 0x7c
    7ad6:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7ada:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7ade:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7ae2:	4620      	mov	r0, r4
    7ae4:	4b18      	ldr	r3, [pc, #96]	; (7b48 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    7ae6:	4a19      	ldr	r2, [pc, #100]	; (7b4c <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    7ae8:	4d19      	ldr	r5, [pc, #100]	; (7b50 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    7aea:	2104      	movs	r1, #4
    7aec:	f006 fd60 	bl	e5b0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7af0:	f104 000c 	add.w	r0, r4, #12
    7af4:	c807      	ldmia	r0, {r0, r1, r2}
    7af6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7afa:	68a3      	ldr	r3, [r4, #8]
    7afc:	79a6      	ldrb	r6, [r4, #6]
    7afe:	f8a5 e004 	strh.w	lr, [r5, #4]
    7b02:	60ab      	str	r3, [r5, #8]
    7b04:	f894 e018 	ldrb.w	lr, [r4, #24]
    7b08:	69e3      	ldr	r3, [r4, #28]
    7b0a:	60e8      	str	r0, [r5, #12]
    7b0c:	6a20      	ldr	r0, [r4, #32]
    7b0e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7b12:	71ae      	strb	r6, [r5, #6]
    7b14:	6129      	str	r1, [r5, #16]
    7b16:	7e66      	ldrb	r6, [r4, #25]
    7b18:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7b1a:	e01f      	b.n	7b5c <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    7b1c:	200012ac 	.word	0x200012ac
    7b20:	000230b0 	.word	0x000230b0
    7b24:	00023050 	.word	0x00023050
    7b28:	2000130c 	.word	0x2000130c
    7b2c:	000230c0 	.word	0x000230c0
    7b30:	00023060 	.word	0x00023060
    7b34:	2000136c 	.word	0x2000136c
    7b38:	00022fe0 	.word	0x00022fe0
    7b3c:	00022f80 	.word	0x00022f80
    7b40:	00023070 	.word	0x00023070
    7b44:	00022fb0 	.word	0x00022fb0
    7b48:	00022f90 	.word	0x00022f90
    7b4c:	00023080 	.word	0x00023080
    7b50:	200013f0 	.word	0x200013f0
    7b54:	00022fa0 	.word	0x00022fa0
    7b58:	00022ff0 	.word	0x00022ff0
    7b5c:	616a      	str	r2, [r5, #20]
    7b5e:	f885 e018 	strb.w	lr, [r5, #24]
    7b62:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7b64:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7b68:	61eb      	str	r3, [r5, #28]
    7b6a:	6228      	str	r0, [r5, #32]
    7b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7b6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7b70:	766e      	strb	r6, [r5, #25]
    7b72:	6269      	str	r1, [r5, #36]	; 0x24
    7b74:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7b78:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7b7c:	632a      	str	r2, [r5, #48]	; 0x30
    7b7e:	63a8      	str	r0, [r5, #56]	; 0x38
    7b80:	636b      	str	r3, [r5, #52]	; 0x34
    7b82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7b86:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7b8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7b8c:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7b90:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7b94:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7b96:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7b9a:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7b9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7ba0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7ba2:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7ba6:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7baa:	6429      	str	r1, [r5, #64]	; 0x40
    7bac:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7bb0:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7bb2:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7bb6:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7bba:	64aa      	str	r2, [r5, #72]	; 0x48
    7bbc:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    7bc0:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    7bc4:	64eb      	str	r3, [r5, #76]	; 0x4c
    7bc6:	6528      	str	r0, [r5, #80]	; 0x50
    7bc8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7bcc:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7bd0:	6569      	str	r1, [r5, #84]	; 0x54
    7bd2:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7bd6:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7bda:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7bde:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7be2:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    7be6:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    7bea:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7bee:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7bf2:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7bf4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7bf6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    7bf8:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7bfc:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7c00:	6669      	str	r1, [r5, #100]	; 0x64
    7c02:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7c04:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7c06:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7c0a:	66ab      	str	r3, [r5, #104]	; 0x68
    7c0c:	66e8      	str	r0, [r5, #108]	; 0x6c
    7c0e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    7c10:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7c14:	676e      	str	r6, [r5, #116]	; 0x74
    7c16:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7c1a:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7c1e:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    7c20:	4abe      	ldr	r2, [pc, #760]	; (7f1c <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    7c22:	67eb      	str	r3, [r5, #124]	; 0x7c
    7c24:	4620      	mov	r0, r4
    7c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    7c2a:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7c2e:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7c32:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7c36:	f006 fc2f 	bl	e498 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7c3a:	f104 000c 	add.w	r0, r4, #12
    7c3e:	c807      	ldmia	r0, {r0, r1, r2}
    7c40:	4db7      	ldr	r5, [pc, #732]	; (7f20 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    7c42:	68a3      	ldr	r3, [r4, #8]
    7c44:	f894 c018 	ldrb.w	ip, [r4, #24]
    7c48:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7c4c:	79a6      	ldrb	r6, [r4, #6]
    7c4e:	60ab      	str	r3, [r5, #8]
    7c50:	f885 c018 	strb.w	ip, [r5, #24]
    7c54:	69e3      	ldr	r3, [r4, #28]
    7c56:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7c5a:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7c5e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7c62:	71ae      	strb	r6, [r5, #6]
    7c64:	f894 e019 	ldrb.w	lr, [r4, #25]
    7c68:	6a26      	ldr	r6, [r4, #32]
    7c6a:	60e8      	str	r0, [r5, #12]
    7c6c:	6129      	str	r1, [r5, #16]
    7c6e:	616a      	str	r2, [r5, #20]
    7c70:	61eb      	str	r3, [r5, #28]
    7c72:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    7c78:	4aaa      	ldr	r2, [pc, #680]	; (7f24 <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    7c7a:	f885 e019 	strb.w	lr, [r5, #25]
    7c7e:	4620      	mov	r0, r4
    7c80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7c84:	622e      	str	r6, [r5, #32]
    7c86:	626b      	str	r3, [r5, #36]	; 0x24
    7c88:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7c8c:	f006 fc04 	bl	e498 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7c90:	f104 000c 	add.w	r0, r4, #12
    7c94:	c807      	ldmia	r0, {r0, r1, r2}
    7c96:	4da4      	ldr	r5, [pc, #656]	; (7f28 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    7c98:	68a3      	ldr	r3, [r4, #8]
    7c9a:	f894 c018 	ldrb.w	ip, [r4, #24]
    7c9e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7ca2:	79a6      	ldrb	r6, [r4, #6]
    7ca4:	60ab      	str	r3, [r5, #8]
    7ca6:	f885 c018 	strb.w	ip, [r5, #24]
    7caa:	69e3      	ldr	r3, [r4, #28]
    7cac:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7cb0:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7cb4:	f8a5 e004 	strh.w	lr, [r5, #4]
    7cb8:	71ae      	strb	r6, [r5, #6]
    7cba:	f894 e019 	ldrb.w	lr, [r4, #25]
    7cbe:	6a26      	ldr	r6, [r4, #32]
    7cc0:	60e8      	str	r0, [r5, #12]
    7cc2:	6129      	str	r1, [r5, #16]
    7cc4:	616a      	str	r2, [r5, #20]
    7cc6:	61eb      	str	r3, [r5, #28]
    7cc8:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    7cce:	4a97      	ldr	r2, [pc, #604]	; (7f2c <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    7cd0:	f885 e019 	strb.w	lr, [r5, #25]
    7cd4:	4620      	mov	r0, r4
    7cd6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7cda:	622e      	str	r6, [r5, #32]
    7cdc:	626b      	str	r3, [r5, #36]	; 0x24
    7cde:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7ce2:	f006 fbd9 	bl	e498 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7ce6:	4d92      	ldr	r5, [pc, #584]	; (7f30 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    7ce8:	88a6      	ldrh	r6, [r4, #4]
    7cea:	80ae      	strh	r6, [r5, #4]
    7cec:	f104 000c 	add.w	r0, r4, #12
    7cf0:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    7cf2:	2605      	movs	r6, #5
    7cf4:	f894 e006 	ldrb.w	lr, [r4, #6]
    7cf8:	68a3      	ldr	r3, [r4, #8]
    7cfa:	9600      	str	r6, [sp, #0]
    7cfc:	7e26      	ldrb	r6, [r4, #24]
    7cfe:	f894 c019 	ldrb.w	ip, [r4, #25]
    7d02:	f885 e006 	strb.w	lr, [r5, #6]
    7d06:	60ab      	str	r3, [r5, #8]
    7d08:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7d0c:	69e3      	ldr	r3, [r4, #28]
    7d0e:	6129      	str	r1, [r5, #16]
    7d10:	616a      	str	r2, [r5, #20]
    7d12:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7d14:	6a22      	ldr	r2, [r4, #32]
    7d16:	762e      	strb	r6, [r5, #24]
    7d18:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    7d1c:	60e8      	str	r0, [r5, #12]
    7d1e:	f885 c019 	strb.w	ip, [r5, #25]
    7d22:	61eb      	str	r3, [r5, #28]
    7d24:	622a      	str	r2, [r5, #32]
    7d26:	6269      	str	r1, [r5, #36]	; 0x24
    7d28:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7d2c:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    7d30:	4620      	mov	r0, r4
    7d32:	4d80      	ldr	r5, [pc, #512]	; (7f34 <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    7d34:	4b80      	ldr	r3, [pc, #512]	; (7f38 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    7d36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7d3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7d3e:	f005 fe91 	bl	da64 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7d42:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7d46:	68a2      	ldr	r2, [r4, #8]
    7d48:	68e3      	ldr	r3, [r4, #12]
    7d4a:	79a6      	ldrb	r6, [r4, #6]
    7d4c:	6920      	ldr	r0, [r4, #16]
    7d4e:	6961      	ldr	r1, [r4, #20]
    7d50:	f8a5 e004 	strh.w	lr, [r5, #4]
    7d54:	60aa      	str	r2, [r5, #8]
    7d56:	f894 e018 	ldrb.w	lr, [r4, #24]
    7d5a:	69e2      	ldr	r2, [r4, #28]
    7d5c:	60eb      	str	r3, [r5, #12]
    7d5e:	6a23      	ldr	r3, [r4, #32]
    7d60:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7d64:	71ae      	strb	r6, [r5, #6]
    7d66:	6128      	str	r0, [r5, #16]
    7d68:	7e66      	ldrb	r6, [r4, #25]
    7d6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d6c:	6169      	str	r1, [r5, #20]
    7d6e:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    7d72:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7d74:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7d78:	61ea      	str	r2, [r5, #28]
    7d7a:	622b      	str	r3, [r5, #32]
    7d7c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7d82:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7d86:	766e      	strb	r6, [r5, #25]
    7d88:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    7d8a:	2604      	movs	r6, #4
    7d8c:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7d90:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    7d94:	63ab      	str	r3, [r5, #56]	; 0x38
    7d96:	6329      	str	r1, [r5, #48]	; 0x30
    7d98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    7d9a:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7d9e:	4b67      	ldr	r3, [pc, #412]	; (7f3c <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    7da0:	9600      	str	r6, [sp, #0]
    7da2:	4620      	mov	r0, r4
    7da4:	63e9      	str	r1, [r5, #60]	; 0x3c
    7da6:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7dae:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7db2:	f005 fe57 	bl	da64 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7db6:	f104 0008 	add.w	r0, r4, #8
    7dba:	c80d      	ldmia	r0, {r0, r2, r3}
    7dbc:	4d60      	ldr	r5, [pc, #384]	; (7f40 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    7dbe:	88a1      	ldrh	r1, [r4, #4]
    7dc0:	f894 e006 	ldrb.w	lr, [r4, #6]
    7dc4:	80a9      	strh	r1, [r5, #4]
    7dc6:	f885 e006 	strb.w	lr, [r5, #6]
    7dca:	6961      	ldr	r1, [r4, #20]
    7dcc:	f894 e018 	ldrb.w	lr, [r4, #24]
    7dd0:	60a8      	str	r0, [r5, #8]
    7dd2:	60ea      	str	r2, [r5, #12]
    7dd4:	7e60      	ldrb	r0, [r4, #25]
    7dd6:	69e2      	ldr	r2, [r4, #28]
    7dd8:	612b      	str	r3, [r5, #16]
    7dda:	6a23      	ldr	r3, [r4, #32]
    7ddc:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    7de0:	6169      	str	r1, [r5, #20]
    7de2:	f885 e018 	strb.w	lr, [r5, #24]
    7de6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7de8:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7dec:	7668      	strb	r0, [r5, #25]
    7dee:	61ea      	str	r2, [r5, #28]
    7df0:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    7df4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7df6:	622b      	str	r3, [r5, #32]
    7df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7dfa:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    7dfe:	6269      	str	r1, [r5, #36]	; 0x24
    7e00:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7e04:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    7e08:	63ab      	str	r3, [r5, #56]	; 0x38
    7e0a:	632a      	str	r2, [r5, #48]	; 0x30
    7e0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    7e0e:	f8cd 8000 	str.w	r8, [sp]
    7e12:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7e16:	63ea      	str	r2, [r5, #60]	; 0x3c
    7e18:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7e1c:	4620      	mov	r0, r4
    7e1e:	4d49      	ldr	r5, [pc, #292]	; (7f44 <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    7e20:	4b49      	ldr	r3, [pc, #292]	; (7f48 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    7e22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    7e26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    7e2a:	f005 fe1b 	bl	da64 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7e2e:	f894 c006 	ldrb.w	ip, [r4, #6]
    7e32:	68a2      	ldr	r2, [r4, #8]
    7e34:	68e3      	ldr	r3, [r4, #12]
    7e36:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7e3a:	6920      	ldr	r0, [r4, #16]
    7e3c:	6961      	ldr	r1, [r4, #20]
    7e3e:	f885 c006 	strb.w	ip, [r5, #6]
    7e42:	60aa      	str	r2, [r5, #8]
    7e44:	f894 c018 	ldrb.w	ip, [r4, #24]
    7e48:	69e2      	ldr	r2, [r4, #28]
    7e4a:	60eb      	str	r3, [r5, #12]
    7e4c:	6a23      	ldr	r3, [r4, #32]
    7e4e:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    7e52:	f8a5 e004 	strh.w	lr, [r5, #4]
    7e56:	6128      	str	r0, [r5, #16]
    7e58:	f894 e019 	ldrb.w	lr, [r4, #25]
    7e5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e5e:	6169      	str	r1, [r5, #20]
    7e60:	f885 c018 	strb.w	ip, [r5, #24]
    7e64:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7e66:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7e6a:	61ea      	str	r2, [r5, #28]
    7e6c:	622b      	str	r3, [r5, #32]
    7e6e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7e74:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7e78:	f885 e019 	strb.w	lr, [r5, #25]
    7e7c:	6268      	str	r0, [r5, #36]	; 0x24
    7e7e:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    7e82:	6329      	str	r1, [r5, #48]	; 0x30
    7e84:	63ab      	str	r3, [r5, #56]	; 0x38
    7e86:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    7e8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    7e8c:	f8cd a000 	str.w	sl, [sp]
    7e90:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7e94:	63ea      	str	r2, [r5, #60]	; 0x3c
    7e96:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7e9a:	4620      	mov	r0, r4
    7e9c:	4b2b      	ldr	r3, [pc, #172]	; (7f4c <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    7e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7ea2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    7ea6:	f005 fddd 	bl	da64 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7eaa:	f104 0008 	add.w	r0, r4, #8
    7eae:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    7eb0:	f8df e09c 	ldr.w	lr, [pc, #156]	; 7f50 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    7eb4:	f894 c006 	ldrb.w	ip, [r4, #6]
    7eb8:	88a5      	ldrh	r5, [r4, #4]
    7eba:	f88e c006 	strb.w	ip, [lr, #6]
    7ebe:	f894 c019 	ldrb.w	ip, [r4, #25]
    7ec2:	f894 8018 	ldrb.w	r8, [r4, #24]
    7ec6:	f8ae 5004 	strh.w	r5, [lr, #4]
    7eca:	f8ce 0008 	str.w	r0, [lr, #8]
    7ece:	69e5      	ldr	r5, [r4, #28]
    7ed0:	6a20      	ldr	r0, [r4, #32]
    7ed2:	f8ce 100c 	str.w	r1, [lr, #12]
    7ed6:	f8ce 2010 	str.w	r2, [lr, #16]
    7eda:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    7ede:	f8ce 3014 	str.w	r3, [lr, #20]
    7ee2:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    7ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7ee8:	f88e c019 	strb.w	ip, [lr, #25]
    7eec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7eee:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    7ef2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7ef4:	f88e 8018 	strb.w	r8, [lr, #24]
    7ef8:	f8ce 501c 	str.w	r5, [lr, #28]
    7efc:	f8ce 0020 	str.w	r0, [lr, #32]
    7f00:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    7f04:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    7f08:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    7f0c:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    7f10:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    7f14:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    7f18:	e01c      	b.n	7f54 <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    7f1a:	bf00      	nop
    7f1c:	00022e40 	.word	0x00022e40
    7f20:	20001150 	.word	0x20001150
    7f24:	00022e50 	.word	0x00022e50
    7f28:	20001180 	.word	0x20001180
    7f2c:	00022e60 	.word	0x00022e60
    7f30:	200011b0 	.word	0x200011b0
    7f34:	20000b18 	.word	0x20000b18
    7f38:	00022e70 	.word	0x00022e70
    7f3c:	00022e80 	.word	0x00022e80
    7f40:	20001084 	.word	0x20001084
    7f44:	200010c8 	.word	0x200010c8
    7f48:	00022e90 	.word	0x00022e90
    7f4c:	00022ea0 	.word	0x00022ea0
    7f50:	2000110c 	.word	0x2000110c
    7f54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    7f56:	9702      	str	r7, [sp, #8]
    7f58:	9601      	str	r6, [sp, #4]
    7f5a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    7f5e:	4dcc      	ldr	r5, [pc, #816]	; (8290 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    7f60:	9500      	str	r5, [sp, #0]
    7f62:	4620      	mov	r0, r4
    7f64:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    7f68:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    7f6c:	4bc9      	ldr	r3, [pc, #804]	; (8294 <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    7f6e:	4aca      	ldr	r2, [pc, #808]	; (8298 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    7f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
    7f74:	f7fc fd76 	bl	4a64 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    7f78:	4bc8      	ldr	r3, [pc, #800]	; (829c <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    7f7a:	79a7      	ldrb	r7, [r4, #6]
    7f7c:	68a6      	ldr	r6, [r4, #8]
    7f7e:	68e5      	ldr	r5, [r4, #12]
    7f80:	6920      	ldr	r0, [r4, #16]
    7f82:	6961      	ldr	r1, [r4, #20]
    7f84:	f894 8018 	ldrb.w	r8, [r4, #24]
    7f88:	69e2      	ldr	r2, [r4, #28]
    7f8a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7f8e:	f894 c019 	ldrb.w	ip, [r4, #25]
    7f92:	719f      	strb	r7, [r3, #6]
    7f94:	609e      	str	r6, [r3, #8]
    7f96:	6a67      	ldr	r7, [r4, #36]	; 0x24
    7f98:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    7f9c:	60dd      	str	r5, [r3, #12]
    7f9e:	6118      	str	r0, [r3, #16]
    7fa0:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    7fa4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7fa6:	6159      	str	r1, [r3, #20]
    7fa8:	f883 8018 	strb.w	r8, [r3, #24]
    7fac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7fae:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    7fb2:	61da      	str	r2, [r3, #28]
    7fb4:	6a22      	ldr	r2, [r4, #32]
    7fb6:	f8a3 e004 	strh.w	lr, [r3, #4]
    7fba:	f883 c019 	strb.w	ip, [r3, #25]
    7fbe:	621a      	str	r2, [r3, #32]
    7fc0:	625f      	str	r7, [r3, #36]	; 0x24
    7fc2:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    7fc6:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    7fca:	6358      	str	r0, [r3, #52]	; 0x34
    7fcc:	6399      	str	r1, [r3, #56]	; 0x38
    7fce:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    7fd2:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    7fd6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7fd8:	649a      	str	r2, [r3, #72]	; 0x48
    7fda:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    7fdc:	9207      	str	r2, [sp, #28]
    7fde:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    7fe2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7fe4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    7fe8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    7fea:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    7fee:	64da      	str	r2, [r3, #76]	; 0x4c
    7ff0:	9a07      	ldr	r2, [sp, #28]
    7ff2:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    7ff6:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    7ffa:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    7ffe:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    8002:	6459      	str	r1, [r3, #68]	; 0x44
    8004:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8006:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8008:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    800c:	65da      	str	r2, [r3, #92]	; 0x5c
    800e:	6f27      	ldr	r7, [r4, #112]	; 0x70
    8010:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8012:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    8016:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    801a:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    801e:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    8022:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8024:	6558      	str	r0, [r3, #84]	; 0x54
    8026:	6599      	str	r1, [r3, #88]	; 0x58
    8028:	661a      	str	r2, [r3, #96]	; 0x60
    802a:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    802e:	671f      	str	r7, [r3, #112]	; 0x70
    8030:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    8034:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    8038:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    803c:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    8040:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    8044:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    8048:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    804c:	675e      	str	r6, [r3, #116]	; 0x74
    804e:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    8052:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    8056:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    805a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    805e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8062:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    8066:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    806a:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    806e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    8072:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    8076:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    807a:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    807e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    8082:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    8086:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    808a:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    808e:	4619      	mov	r1, r3
    8090:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    8094:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    8098:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    809c:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    809e:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    80a2:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    80a6:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    80aa:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    80ae:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    80b2:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    80b4:	983a      	ldr	r0, [sp, #232]	; 0xe8
    80b6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    80b8:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    80bc:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    80c0:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    80c4:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    80c8:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    80cc:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    80d0:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    80d4:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    80d8:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    80dc:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    80e0:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    80e4:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    80e8:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    80ec:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    80f0:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    80f4:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    80f8:	9b42      	ldr	r3, [sp, #264]	; 0x108
    80fa:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    80fe:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    8102:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    8106:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    810a:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    810e:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    8112:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    8116:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    811a:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    811e:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    8122:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    8126:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    812a:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    812c:	9d44      	ldr	r5, [sp, #272]	; 0x110
    812e:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    8132:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    8136:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    813a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    813c:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8140:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    8144:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    8148:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    814c:	9e49      	ldr	r6, [sp, #292]	; 0x124
    814e:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    8150:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    8154:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    8158:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    815a:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    815e:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    8162:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    8166:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    816a:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    816e:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    8172:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8174:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    8178:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    817c:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    8180:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    8184:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    8188:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    818c:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    8190:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    8194:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    8198:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    819c:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    819e:	9b50      	ldr	r3, [sp, #320]	; 0x140
    81a0:	9d51      	ldr	r5, [sp, #324]	; 0x144
    81a2:	9852      	ldr	r0, [sp, #328]	; 0x148
    81a4:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    81a8:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    81ac:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    81b0:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    81b4:	9b54      	ldr	r3, [sp, #336]	; 0x150
    81b6:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    81ba:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    81be:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    81c2:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    81c6:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    81ca:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    81ce:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    81d2:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    81d6:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    81da:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    81de:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    81e2:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    81e6:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    81ea:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    81ee:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    81f2:	4a2b      	ldr	r2, [pc, #172]	; (82a0 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    81f4:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    81f8:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    81fc:	2401      	movs	r4, #1
    81fe:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    8202:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    8206:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    820a:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    820e:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    8212:	2605      	movs	r6, #5
    8214:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    8218:	9d58      	ldr	r5, [sp, #352]	; 0x160
    821a:	4f22      	ldr	r7, [pc, #136]	; (82a4 <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    821c:	9402      	str	r4, [sp, #8]
    821e:	e88d 0044 	stmia.w	sp, {r2, r6}
    8222:	a808      	add	r0, sp, #32
    8224:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    8228:	4b1f      	ldr	r3, [pc, #124]	; (82a8 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    822a:	4a20      	ldr	r2, [pc, #128]	; (82ac <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    822c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8230:	f7fc fc18 	bl	4a64 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8234:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    8238:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    823c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    823e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8240:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8242:	980d      	ldr	r0, [sp, #52]	; 0x34
    8244:	71b9      	strb	r1, [r7, #6]
    8246:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8248:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    824c:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8250:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    8254:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    8258:	80ba      	strh	r2, [r7, #4]
    825a:	60bb      	str	r3, [r7, #8]
    825c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    825e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8260:	60fe      	str	r6, [r7, #12]
    8262:	613d      	str	r5, [r7, #16]
    8264:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    8268:	9d15      	ldr	r5, [sp, #84]	; 0x54
    826a:	6178      	str	r0, [r7, #20]
    826c:	61f9      	str	r1, [r7, #28]
    826e:	9816      	ldr	r0, [sp, #88]	; 0x58
    8270:	f887 8018 	strb.w	r8, [r7, #24]
    8274:	a919      	add	r1, sp, #100	; 0x64
    8276:	623a      	str	r2, [r7, #32]
    8278:	627b      	str	r3, [r7, #36]	; 0x24
    827a:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    827e:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    8282:	637d      	str	r5, [r7, #52]	; 0x34
    8284:	63b8      	str	r0, [r7, #56]	; 0x38
    8286:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    828a:	f887 c019 	strb.w	ip, [r7, #25]
    828e:	e00f      	b.n	82b0 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    8290:	00022f70 	.word	0x00022f70
    8294:	000230e0 	.word	0x000230e0
    8298:	00022f20 	.word	0x00022f20
    829c:	20000b60 	.word	0x20000b60
    82a0:	00023110 	.word	0x00023110
    82a4:	20000ca8 	.word	0x20000ca8
    82a8:	000230f0 	.word	0x000230f0
    82ac:	00023100 	.word	0x00023100
    82b0:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    82b4:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    82b8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    82bc:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    82c0:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    82c4:	c90e      	ldmia	r1, {r1, r2, r3}
    82c6:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    82ca:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    82ce:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    82d2:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    82d6:	6479      	str	r1, [r7, #68]	; 0x44
    82d8:	981d      	ldr	r0, [sp, #116]	; 0x74
    82da:	991e      	ldr	r1, [sp, #120]	; 0x78
    82dc:	64ba      	str	r2, [r7, #72]	; 0x48
    82de:	64fb      	str	r3, [r7, #76]	; 0x4c
    82e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    82e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    82e4:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    82e8:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    82ec:	9d24      	ldr	r5, [sp, #144]	; 0x90
    82ee:	9e25      	ldr	r6, [sp, #148]	; 0x94
    82f0:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    82f4:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    82f8:	6578      	str	r0, [r7, #84]	; 0x54
    82fa:	65b9      	str	r1, [r7, #88]	; 0x58
    82fc:	65fa      	str	r2, [r7, #92]	; 0x5c
    82fe:	663b      	str	r3, [r7, #96]	; 0x60
    8300:	673d      	str	r5, [r7, #112]	; 0x70
    8302:	677e      	str	r6, [r7, #116]	; 0x74
    8304:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8308:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    830c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    8310:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8312:	982e      	ldr	r0, [sp, #184]	; 0xb8
    8314:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8318:	4615      	mov	r5, r2
    831a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    831c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    831e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    8322:	461e      	mov	r6, r3
    8324:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8326:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8328:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    832c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    8330:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8332:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8334:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8338:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    833c:	9933      	ldr	r1, [sp, #204]	; 0xcc
    833e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8344:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    8348:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    834a:	9836      	ldr	r0, [sp, #216]	; 0xd8
    834c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8350:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    8354:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8356:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    835c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    8360:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    8364:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    8368:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    836c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8370:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    8372:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8374:	993b      	ldr	r1, [sp, #236]	; 0xec
    8376:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    837a:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    837e:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    8382:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    8386:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    838a:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    838e:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    8392:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    8396:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    839a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    839e:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    83a2:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    83a6:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    83aa:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    83ae:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    83b2:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    83b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    83ba:	9b42      	ldr	r3, [sp, #264]	; 0x108
    83bc:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    83c0:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    83c4:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    83c8:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    83cc:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    83d0:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    83d4:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    83d8:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    83dc:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    83e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    83e4:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    83e8:	9943      	ldr	r1, [sp, #268]	; 0x10c
    83ea:	9d44      	ldr	r5, [sp, #272]	; 0x110
    83ec:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    83f0:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    83f4:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    83f8:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    83fc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    83fe:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    8402:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    8406:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    840a:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    840e:	994b      	ldr	r1, [sp, #300]	; 0x12c
    8410:	9d49      	ldr	r5, [sp, #292]	; 0x124
    8412:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    8416:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    841a:	984a      	ldr	r0, [sp, #296]	; 0x128
    841c:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8420:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    8424:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    8428:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    842c:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8430:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    8434:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8436:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    843a:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    843e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    8442:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    8446:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    844a:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    844e:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8452:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8456:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    845a:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    845c:	9b50      	ldr	r3, [sp, #320]	; 0x140
    845e:	9851      	ldr	r0, [sp, #324]	; 0x144
    8460:	9952      	ldr	r1, [sp, #328]	; 0x148
    8462:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    8466:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    846a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    846e:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8470:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    8474:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    8478:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    847c:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    8480:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    8484:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    8488:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    848c:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    8490:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    8494:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8498:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    849c:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    84a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    84a4:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    84a8:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    84ac:	4aca      	ldr	r2, [pc, #808]	; (87d8 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    84ae:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    84b2:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    84b6:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    84ba:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    84be:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    84c2:	2503      	movs	r5, #3
    84c4:	2602      	movs	r6, #2
    84c6:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    84ca:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    84ce:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    84d2:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    84d6:	9958      	ldr	r1, [sp, #352]	; 0x160
    84d8:	4bc0      	ldr	r3, [pc, #768]	; (87dc <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    84da:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    84de:	a808      	add	r0, sp, #32
    84e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    84e4:	4abe      	ldr	r2, [pc, #760]	; (87e0 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    84e6:	4fbf      	ldr	r7, [pc, #764]	; (87e4 <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    84e8:	f44f 7100 	mov.w	r1, #512	; 0x200
    84ec:	f7fc faba 	bl	4a64 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    84f0:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    84f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    84f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84f8:	990d      	ldr	r1, [sp, #52]	; 0x34
    84fa:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    84fe:	980c      	ldr	r0, [sp, #48]	; 0x30
    8500:	f8a7 c004 	strh.w	ip, [r7, #4]
    8504:	60ba      	str	r2, [r7, #8]
    8506:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    850a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    850c:	60fb      	str	r3, [r7, #12]
    850e:	6179      	str	r1, [r7, #20]
    8510:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8512:	9915      	ldr	r1, [sp, #84]	; 0x54
    8514:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    8518:	f887 e006 	strb.w	lr, [r7, #6]
    851c:	6138      	str	r0, [r7, #16]
    851e:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    8522:	9811      	ldr	r0, [sp, #68]	; 0x44
    8524:	f887 c018 	strb.w	ip, [r7, #24]
    8528:	61fa      	str	r2, [r7, #28]
    852a:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    852e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8530:	623b      	str	r3, [r7, #32]
    8532:	6379      	str	r1, [r7, #52]	; 0x34
    8534:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8538:	f887 e019 	strb.w	lr, [r7, #25]
    853c:	a919      	add	r1, sp, #100	; 0x64
    853e:	6278      	str	r0, [r7, #36]	; 0x24
    8540:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    8544:	63ba      	str	r2, [r7, #56]	; 0x38
    8546:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    854a:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    854e:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    8552:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    8556:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    855a:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    855e:	c90e      	ldmia	r1, {r1, r2, r3}
    8560:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8564:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    8568:	6479      	str	r1, [r7, #68]	; 0x44
    856a:	64ba      	str	r2, [r7, #72]	; 0x48
    856c:	991d      	ldr	r1, [sp, #116]	; 0x74
    856e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8570:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    8574:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    8578:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    857c:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    8580:	64fb      	str	r3, [r7, #76]	; 0x4c
    8582:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    8586:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8588:	9820      	ldr	r0, [sp, #128]	; 0x80
    858a:	6579      	str	r1, [r7, #84]	; 0x54
    858c:	65ba      	str	r2, [r7, #88]	; 0x58
    858e:	9924      	ldr	r1, [sp, #144]	; 0x90
    8590:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8592:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    8596:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    859a:	65fb      	str	r3, [r7, #92]	; 0x5c
    859c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    85a0:	677a      	str	r2, [r7, #116]	; 0x74
    85a2:	6638      	str	r0, [r7, #96]	; 0x60
    85a4:	6739      	str	r1, [r7, #112]	; 0x70
    85a6:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    85aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    85ac:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    85ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    85b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    85b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    85b8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    85ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    85be:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    85c2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    85c4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    85c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    85ca:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    85ce:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    85d0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    85d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    85d6:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    85da:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    85dc:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    85e0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    85e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    85e6:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    85ea:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    85ec:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    85ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    85f2:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    85f6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    85f8:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    85fc:	a939      	add	r1, sp, #228	; 0xe4
    85fe:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    8604:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8608:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    860c:	c90e      	ldmia	r1, {r1, r2, r3}
    860e:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    8612:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    8616:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    861a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    861e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    8622:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    8626:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    862a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    862e:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    8632:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    8636:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    863a:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    863e:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    8642:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8646:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    864a:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    864e:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8652:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8656:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    865a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    865e:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8662:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8664:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    8668:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    866c:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8670:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8674:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8678:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    867c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8680:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    8682:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    8686:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    868a:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    868e:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    8692:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    8696:	9947      	ldr	r1, [sp, #284]	; 0x11c
    8698:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    869c:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    86a0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    86a2:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    86a6:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    86aa:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    86ae:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    86b2:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    86b6:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    86ba:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    86be:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    86c0:	984b      	ldr	r0, [sp, #300]	; 0x12c
    86c2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    86c6:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    86ca:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    86ce:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    86d2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    86d6:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    86d8:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    86dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    86e0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    86e4:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    86e8:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    86ec:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    86f0:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    86f4:	994f      	ldr	r1, [sp, #316]	; 0x13c
    86f6:	9b51      	ldr	r3, [sp, #324]	; 0x144
    86f8:	9a50      	ldr	r2, [sp, #320]	; 0x140
    86fa:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    86fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    8702:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    8706:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    870a:	9852      	ldr	r0, [sp, #328]	; 0x148
    870c:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    8710:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    8714:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    8718:	9a54      	ldr	r2, [sp, #336]	; 0x150
    871a:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    871e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    8722:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    8726:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    872a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    872e:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    8732:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    8736:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    873a:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    873e:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    8742:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    8746:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    874a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    874e:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    8752:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    8756:	f04f 0800 	mov.w	r8, #0
    875a:	f8df e098 	ldr.w	lr, [pc, #152]	; 87f4 <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    875e:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8762:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    8766:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    876a:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    876e:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    8772:	9958      	ldr	r1, [sp, #352]	; 0x160
    8774:	4b1c      	ldr	r3, [pc, #112]	; (87e8 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    8776:	9502      	str	r5, [sp, #8]
    8778:	f8cd 8004 	str.w	r8, [sp, #4]
    877c:	f8cd e000 	str.w	lr, [sp]
    8780:	a808      	add	r0, sp, #32
    8782:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    8786:	4a19      	ldr	r2, [pc, #100]	; (87ec <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    8788:	4f19      	ldr	r7, [pc, #100]	; (87f0 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    878a:	f44f 7180 	mov.w	r1, #256	; 0x100
    878e:	f7fc f969 	bl	4a64 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8792:	a80a      	add	r0, sp, #40	; 0x28
    8794:	c807      	ldmia	r0, {r0, r1, r2}
    8796:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    879a:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    879e:	80bb      	strh	r3, [r7, #4]
    87a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87a2:	f887 e006 	strb.w	lr, [r7, #6]
    87a6:	60b8      	str	r0, [r7, #8]
    87a8:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    87ac:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    87b0:	60f9      	str	r1, [r7, #12]
    87b2:	613a      	str	r2, [r7, #16]
    87b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    87b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    87b8:	617b      	str	r3, [r7, #20]
    87ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    87bc:	f887 e018 	strb.w	lr, [r7, #24]
    87c0:	7678      	strb	r0, [r7, #25]
    87c2:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    87c6:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    87ca:	61f9      	str	r1, [r7, #28]
    87cc:	623a      	str	r2, [r7, #32]
    87ce:	9915      	ldr	r1, [sp, #84]	; 0x54
    87d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    87d2:	627b      	str	r3, [r7, #36]	; 0x24
    87d4:	e010      	b.n	87f8 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    87d6:	bf00      	nop
    87d8:	00023020 	.word	0x00023020
    87dc:	00022fc0 	.word	0x00022fc0
    87e0:	00023000 	.word	0x00023000
    87e4:	20000df0 	.word	0x20000df0
    87e8:	00022fd0 	.word	0x00022fd0
    87ec:	00023010 	.word	0x00023010
    87f0:	20000f38 	.word	0x20000f38
    87f4:	00023030 	.word	0x00023030
    87f8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    87fc:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    8800:	6379      	str	r1, [r7, #52]	; 0x34
    8802:	63ba      	str	r2, [r7, #56]	; 0x38
    8804:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8808:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    880c:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    8810:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    8814:	9919      	ldr	r1, [sp, #100]	; 0x64
    8816:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8818:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    881c:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8820:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8822:	6479      	str	r1, [r7, #68]	; 0x44
    8824:	64ba      	str	r2, [r7, #72]	; 0x48
    8826:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    882a:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    882e:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    8832:	64fb      	str	r3, [r7, #76]	; 0x4c
    8834:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    8838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    883a:	991e      	ldr	r1, [sp, #120]	; 0x78
    883c:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    8840:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8842:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    8846:	657b      	str	r3, [r7, #84]	; 0x54
    8848:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    884c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    884e:	65b9      	str	r1, [r7, #88]	; 0x58
    8850:	65fa      	str	r2, [r7, #92]	; 0x5c
    8852:	9924      	ldr	r1, [sp, #144]	; 0x90
    8854:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8856:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    885a:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    885e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8862:	6739      	str	r1, [r7, #112]	; 0x70
    8864:	663b      	str	r3, [r7, #96]	; 0x60
    8866:	677a      	str	r2, [r7, #116]	; 0x74
    8868:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    886c:	9928      	ldr	r1, [sp, #160]	; 0xa0
    886e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8872:	992c      	ldr	r1, [sp, #176]	; 0xb0
    8874:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    8878:	992d      	ldr	r1, [sp, #180]	; 0xb4
    887a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    887e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    8880:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    8884:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8886:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    888a:	9930      	ldr	r1, [sp, #192]	; 0xc0
    888c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    8890:	9931      	ldr	r1, [sp, #196]	; 0xc4
    8892:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    8896:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8898:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    889c:	9933      	ldr	r1, [sp, #204]	; 0xcc
    889e:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    88a2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    88a4:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    88a8:	9935      	ldr	r1, [sp, #212]	; 0xd4
    88aa:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    88ae:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    88b2:	9936      	ldr	r1, [sp, #216]	; 0xd8
    88b4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    88b8:	9937      	ldr	r1, [sp, #220]	; 0xdc
    88ba:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    88be:	9938      	ldr	r1, [sp, #224]	; 0xe0
    88c0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    88c4:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    88c8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    88cc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    88ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    88d2:	983a      	ldr	r0, [sp, #232]	; 0xe8
    88d4:	993b      	ldr	r1, [sp, #236]	; 0xec
    88d6:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    88da:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    88de:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    88e2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    88e6:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    88ea:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    88ee:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    88f2:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    88f6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    88fa:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    88fe:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    8902:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    8906:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    890a:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    890e:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8912:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8916:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    891a:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    891e:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8922:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8926:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    892a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    892c:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    8930:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8934:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8938:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    893c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8940:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8944:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    8946:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    894a:	9844      	ldr	r0, [sp, #272]	; 0x110
    894c:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    8950:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    8954:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    8958:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    895c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    8960:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    8964:	9847      	ldr	r0, [sp, #284]	; 0x11c
    8966:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    896a:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    896e:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    8972:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    8976:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8978:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    897c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    897e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    8982:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8986:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8988:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    898c:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    8990:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8994:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    8998:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    899c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    89a0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    89a2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    89a6:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    89aa:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    89ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    89b2:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    89b6:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    89b8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    89bc:	9850      	ldr	r0, [sp, #320]	; 0x140
    89be:	9951      	ldr	r1, [sp, #324]	; 0x144
    89c0:	9a52      	ldr	r2, [sp, #328]	; 0x148
    89c2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    89c6:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    89ca:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    89ce:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    89d2:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    89d6:	9a54      	ldr	r2, [sp, #336]	; 0x150
    89d8:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    89dc:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    89e0:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    89e4:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    89e8:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    89ec:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    89f0:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    89f4:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    89f8:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    89fc:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8a00:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    8a04:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    8a08:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8a0c:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    8a10:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    8a14:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    8a18:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8a1c:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    8a20:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    8a24:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    8a28:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    8a2c:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    8a2e:	f8df c208 	ldr.w	ip, [pc, #520]	; 8c38 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    8a32:	9207      	str	r2, [sp, #28]
    8a34:	f8df e204 	ldr.w	lr, [pc, #516]	; 8c3c <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    8a38:	9505      	str	r5, [sp, #20]
    8a3a:	4b78      	ldr	r3, [pc, #480]	; (8c1c <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    8a3c:	9d07      	ldr	r5, [sp, #28]
    8a3e:	4878      	ldr	r0, [pc, #480]	; (8c20 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    8a40:	f8cd e010 	str.w	lr, [sp, #16]
    8a44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8a48:	e88d 1004 	stmia.w	sp, {r2, ip}
    8a4c:	9303      	str	r3, [sp, #12]
    8a4e:	9002      	str	r0, [sp, #8]
    8a50:	4641      	mov	r1, r8
    8a52:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    8a56:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8c40 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    8a5a:	4d72      	ldr	r5, [pc, #456]	; (8c24 <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    8a5c:	a808      	add	r0, sp, #32
    8a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8a62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8a66:	f008 fba7 	bl	111b8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8a6a:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8a6e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8a72:	980c      	ldr	r0, [sp, #48]	; 0x30
    8a74:	f8c8 1008 	str.w	r1, [r8, #8]
    8a78:	f8c8 2004 	str.w	r2, [r8, #4]
    8a7c:	990d      	ldr	r1, [sp, #52]	; 0x34
    8a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8a80:	f888 300c 	strb.w	r3, [r8, #12]
    8a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a86:	f8c8 0010 	str.w	r0, [r8, #16]
    8a8a:	f8c8 1014 	str.w	r1, [r8, #20]
    8a8e:	9810      	ldr	r0, [sp, #64]	; 0x40
    8a90:	9911      	ldr	r1, [sp, #68]	; 0x44
    8a92:	f8c8 2018 	str.w	r2, [r8, #24]
    8a96:	f8c8 301c 	str.w	r3, [r8, #28]
    8a9a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8a9e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8aa2:	f8c8 0020 	str.w	r0, [r8, #32]
    8aa6:	2780      	movs	r7, #128	; 0x80
    8aa8:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    8aac:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    8ab0:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    8ab4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    8ab8:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    8abc:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    8ac0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8ac4:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    8ac8:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    8acc:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    8ad0:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    8ad4:	a914      	add	r1, sp, #80	; 0x50
    8ad6:	463a      	mov	r2, r7
    8ad8:	f108 0030 	add.w	r0, r8, #48	; 0x30
    8adc:	f015 fbd8 	bl	1e290 <memcpy>
    8ae0:	463a      	mov	r2, r7
    8ae2:	a934      	add	r1, sp, #208	; 0xd0
    8ae4:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    8ae8:	f015 fbd2 	bl	1e290 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    8aec:	4b4e      	ldr	r3, [pc, #312]	; (8c28 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    8aee:	9303      	str	r3, [sp, #12]
    8af0:	484e      	ldr	r0, [pc, #312]	; (8c2c <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    8af2:	4a4f      	ldr	r2, [pc, #316]	; (8c30 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    8af4:	9002      	str	r0, [sp, #8]
    8af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8afa:	9201      	str	r2, [sp, #4]
    8afc:	9300      	str	r3, [sp, #0]
    8afe:	9854      	ldr	r0, [sp, #336]	; 0x150
    8b00:	9a55      	ldr	r2, [sp, #340]	; 0x154
    8b02:	9b56      	ldr	r3, [sp, #344]	; 0x158
    8b04:	9605      	str	r6, [sp, #20]
    8b06:	4621      	mov	r1, r4
    8b08:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    8b0a:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    8b0e:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    8b12:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    8b16:	9858      	ldr	r0, [sp, #352]	; 0x160
    8b18:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    8b1c:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    8b20:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    8b24:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    8b28:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    8b2a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8b2c:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    8b2e:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    8b32:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    8b36:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    8b3a:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    8b3e:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    8b42:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    8b46:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    8b4a:	a808      	add	r0, sp, #32
    8b4c:	4e39      	ldr	r6, [pc, #228]	; (8c34 <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    8b4e:	9604      	str	r6, [sp, #16]
    8b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8b54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8b58:	f008 fb2e 	bl	111b8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8b5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b60:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    8b64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8b66:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b6a:	60ac      	str	r4, [r5, #8]
    8b6c:	6068      	str	r0, [r5, #4]
    8b6e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8b70:	980d      	ldr	r0, [sp, #52]	; 0x34
    8b72:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    8b76:	f885 e00c 	strb.w	lr, [r5, #12]
    8b7a:	612a      	str	r2, [r5, #16]
    8b7c:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    8b80:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8b84:	6168      	str	r0, [r5, #20]
    8b86:	61ae      	str	r6, [r5, #24]
    8b88:	9810      	ldr	r0, [sp, #64]	; 0x40
    8b8a:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    8b8e:	61ec      	str	r4, [r5, #28]
    8b90:	626b      	str	r3, [r5, #36]	; 0x24
    8b92:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    8b96:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8b9a:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    8b9e:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    8ba2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    8ba6:	a914      	add	r1, sp, #80	; 0x50
    8ba8:	6228      	str	r0, [r5, #32]
    8baa:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    8bae:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    8bb2:	463a      	mov	r2, r7
    8bb4:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    8bb8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    8bbc:	f015 fb68 	bl	1e290 <memcpy>
    8bc0:	463a      	mov	r2, r7
    8bc2:	a934      	add	r1, sp, #208	; 0xd0
    8bc4:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8bc8:	f015 fb62 	bl	1e290 <memcpy>
    8bcc:	a855      	add	r0, sp, #340	; 0x154
    8bce:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    8bd2:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8bd4:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    8bd8:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8bda:	9e58      	ldr	r6, [sp, #352]	; 0x160
    8bdc:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    8be0:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    8be4:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    8be8:	995b      	ldr	r1, [sp, #364]	; 0x16c
    8bea:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    8bee:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    8bf0:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    8bf4:	4648      	mov	r0, r9
    8bf6:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    8bfa:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    8bfe:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    8c02:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    8c06:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    8c0a:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    8c0e:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    8c12:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    8c16:	b05f      	add	sp, #380	; 0x17c
    8c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c1c:	00022e10 	.word	0x00022e10
    8c20:	00022e00 	.word	0x00022e00
    8c24:	200015e8 	.word	0x200015e8
    8c28:	00022e30 	.word	0x00022e30
    8c2c:	00022e20 	.word	0x00022e20
    8c30:	00022f50 	.word	0x00022f50
    8c34:	00022ef0 	.word	0x00022ef0
    8c38:	00022f40 	.word	0x00022f40
    8c3c:	00022ee0 	.word	0x00022ee0
    8c40:	20001490 	.word	0x20001490

00008c44 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    8c44:	2914      	cmp	r1, #20
    8c46:	dc03      	bgt.n	8c50 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    8c48:	4a03      	ldr	r2, [pc, #12]	; (8c58 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    8c4a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    8c4e:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    8c50:	4b02      	ldr	r3, [pc, #8]	; (8c5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    8c52:	6818      	ldr	r0, [r3, #0]
    8c54:	f006 bea0 	b.w	f998 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    8c58:	00022d8c 	.word	0x00022d8c
    8c5c:	20001efc 	.word	0x20001efc

00008c60 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    8c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8c62:	4ab1      	ldr	r2, [pc, #708]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8c64:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8c68:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    8c6c:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8c6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8c72:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8c76:	065e      	lsls	r6, r3, #25
    8c78:	d4fb      	bmi.n	8c72 <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    8c7a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8c7e:	49aa      	ldr	r1, [pc, #680]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8c80:	2001      	movs	r0, #1
    8c82:	f360 0303 	bfi	r3, r0, #0, #4
    8c86:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8c8a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8c92:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8c96:	684b      	ldr	r3, [r1, #4]
    8c98:	f013 0304 	ands.w	r3, r3, #4
    8c9c:	d1fb      	bne.n	8c96 <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8c9e:	48a3      	ldr	r0, [pc, #652]	; (8f2c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    8ca0:	4aa3      	ldr	r2, [pc, #652]	; (8f30 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8ca2:	6981      	ldr	r1, [r0, #24]
    8ca4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    8ca8:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    8caa:	6811      	ldr	r1, [r2, #0]
    8cac:	f363 0141 	bfi	r1, r3, #1, #1
    8cb0:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    8cb2:	6893      	ldr	r3, [r2, #8]
    8cb4:	f013 0302 	ands.w	r3, r3, #2
    8cb8:	d1fb      	bne.n	8cb2 <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    8cba:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    8cbc:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    8cbe:	499a      	ldr	r1, [pc, #616]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    8cc0:	f040 0002 	orr.w	r0, r0, #2
    8cc4:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    8cc6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8cc8:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    8ccc:	f040 0002 	orr.w	r0, r0, #2
    8cd0:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    8cd2:	6453      	str	r3, [r2, #68]	; 0x44
    8cd4:	6493      	str	r3, [r2, #72]	; 0x48
    8cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
    8cd8:	6513      	str	r3, [r2, #80]	; 0x50
    8cda:	6553      	str	r3, [r2, #84]	; 0x54
    8cdc:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    8cde:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8ce0:	f040 0001 	orr.w	r0, r0, #1
    8ce4:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    8ce6:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    8cea:	f363 1286 	bfi	r2, r3, #6, #1
    8cee:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    8cf2:	460a      	mov	r2, r1
    8cf4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8cf8:	065d      	lsls	r5, r3, #25
    8cfa:	d4fb      	bmi.n	8cf4 <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    8cfc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d00:	4989      	ldr	r1, [pc, #548]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8d02:	2001      	movs	r0, #1
    8d04:	f360 0303 	bfi	r3, r0, #0, #4
    8d08:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8d0c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8d14:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8d18:	684b      	ldr	r3, [r1, #4]
    8d1a:	f013 0304 	ands.w	r3, r3, #4
    8d1e:	d1fb      	bne.n	8d18 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    8d20:	4882      	ldr	r0, [pc, #520]	; (8f2c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    8d22:	4a84      	ldr	r2, [pc, #528]	; (8f34 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    8d24:	6981      	ldr	r1, [r0, #24]
    8d26:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    8d2a:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    8d2c:	6811      	ldr	r1, [r2, #0]
    8d2e:	f363 0141 	bfi	r1, r3, #1, #1
    8d32:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    8d34:	6893      	ldr	r3, [r2, #8]
    8d36:	f013 0302 	ands.w	r3, r3, #2
    8d3a:	d1fb      	bne.n	8d34 <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    8d3c:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    8d3e:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    8d40:	4979      	ldr	r1, [pc, #484]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    8d42:	f040 0002 	orr.w	r0, r0, #2
    8d46:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    8d48:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8d4a:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    8d4e:	f040 0002 	orr.w	r0, r0, #2
    8d52:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    8d54:	6453      	str	r3, [r2, #68]	; 0x44
    8d56:	6493      	str	r3, [r2, #72]	; 0x48
    8d58:	64d3      	str	r3, [r2, #76]	; 0x4c
    8d5a:	6513      	str	r3, [r2, #80]	; 0x50
    8d5c:	6553      	str	r3, [r2, #84]	; 0x54
    8d5e:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    8d60:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    8d64:	f363 1286 	bfi	r2, r3, #6, #1
    8d68:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    8d6c:	460a      	mov	r2, r1
    8d6e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8d72:	065c      	lsls	r4, r3, #25
    8d74:	d4fb      	bmi.n	8d6e <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    8d76:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8d7a:	496b      	ldr	r1, [pc, #428]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8d7c:	2006      	movs	r0, #6
    8d7e:	f360 0303 	bfi	r3, r0, #0, #4
    8d82:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    8d86:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8d8e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    8d92:	684b      	ldr	r3, [r1, #4]
    8d94:	f013 0318 	ands.w	r3, r3, #24
    8d98:	d1fb      	bne.n	8d92 <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    8d9a:	4c64      	ldr	r4, [pc, #400]	; (8f2c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    8d9c:	4a62      	ldr	r2, [pc, #392]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    8d9e:	6960      	ldr	r0, [r4, #20]
    8da0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    8da4:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    8da6:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    8daa:	f363 1086 	bfi	r0, r3, #6, #1
    8dae:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    8db2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8db6:	0658      	lsls	r0, r3, #25
    8db8:	d4fb      	bmi.n	8db2 <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    8dba:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8dbe:	495a      	ldr	r1, [pc, #360]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8dc0:	2006      	movs	r0, #6
    8dc2:	f360 0303 	bfi	r3, r0, #0, #4
    8dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    8dca:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8dd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    8dd6:	684b      	ldr	r3, [r1, #4]
    8dd8:	f013 0318 	ands.w	r3, r3, #24
    8ddc:	d1fb      	bne.n	8dd6 <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    8dde:	4c53      	ldr	r4, [pc, #332]	; (8f2c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    8de0:	4a51      	ldr	r2, [pc, #324]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    8de2:	69a0      	ldr	r0, [r4, #24]
    8de4:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    8de8:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    8dea:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    8dee:	f363 1086 	bfi	r0, r3, #6, #1
    8df2:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    8df6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8dfa:	0659      	lsls	r1, r3, #25
    8dfc:	d4fb      	bmi.n	8df6 <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    8dfe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8e02:	4949      	ldr	r1, [pc, #292]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8e04:	2006      	movs	r0, #6
    8e06:	f360 0303 	bfi	r3, r0, #0, #4
    8e0a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    8e0e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e16:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    8e1a:	684b      	ldr	r3, [r1, #4]
    8e1c:	f013 0318 	ands.w	r3, r3, #24
    8e20:	d1fb      	bne.n	8e1a <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8e22:	4842      	ldr	r0, [pc, #264]	; (8f2c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8e24:	4a40      	ldr	r2, [pc, #256]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8e26:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    8e28:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8e2a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    8e2e:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    8e30:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    8e34:	6a04      	ldr	r4, [r0, #32]
    8e36:	f044 0420 	orr.w	r4, r4, #32
    8e3a:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8e3c:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    8e40:	f363 1086 	bfi	r0, r3, #6, #1
    8e44:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    8e48:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    8e4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8e50:	2b00      	cmp	r3, #0
    8e52:	d1f9      	bne.n	8e48 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    8e54:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    8e58:	4834      	ldr	r0, [pc, #208]	; (8f2c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8e5a:	4c33      	ldr	r4, [pc, #204]	; (8f28 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8e5c:	f363 0103 	bfi	r1, r3, #0, #4
    8e60:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    8e64:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    8e68:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8e6c:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    8e70:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    8e72:	69c1      	ldr	r1, [r0, #28]
    8e74:	f041 0110 	orr.w	r1, r1, #16
    8e78:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8e7a:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    8e7e:	f363 1186 	bfi	r1, r3, #6, #1
    8e82:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    8e86:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    8e8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d1f9      	bne.n	8e86 <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    8e92:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    8e96:	4a28      	ldr	r2, [pc, #160]	; (8f38 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8e98:	4d24      	ldr	r5, [pc, #144]	; (8f2c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8e9a:	f363 0103 	bfi	r1, r3, #0, #4
    8e9e:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    8ea2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    8ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8eaa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    8eae:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8eb0:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8eb2:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    8eb4:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8eb6:	f044 0410 	orr.w	r4, r4, #16
    8eba:	622c      	str	r4, [r5, #32]
    8ebc:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    8ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    8ec4:	f04f 0e01 	mov.w	lr, #1
    8ec8:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    8eca:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    8ecc:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    8ece:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    8ed0:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    8ed2:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    8ed6:	6813      	ldr	r3, [r2, #0]
    8ed8:	f36f 0341 	bfc	r3, #1, #1
    8edc:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    8ede:	6913      	ldr	r3, [r2, #16]
    8ee0:	f013 0302 	ands.w	r3, r3, #2
    8ee4:	d1fb      	bne.n	8ede <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    8ee6:	7910      	ldrb	r0, [r2, #4]
    8ee8:	f040 0002 	orr.w	r0, r0, #2
    8eec:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    8eee:	6810      	ldr	r0, [r2, #0]
    8ef0:	f36e 0083 	bfi	r0, lr, #2, #2
    8ef4:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    8ef6:	6810      	ldr	r0, [r2, #0]
    8ef8:	f367 200a 	bfi	r0, r7, #8, #3
    8efc:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    8efe:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    8f00:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    8f02:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    8f06:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    8f0a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    8f0e:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    8f10:	6813      	ldr	r3, [r2, #0]
    8f12:	f043 0302 	orr.w	r3, r3, #2
    8f16:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    8f18:	6913      	ldr	r3, [r2, #16]
    8f1a:	079b      	lsls	r3, r3, #30
    8f1c:	d4fc      	bmi.n	8f18 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    8f1e:	4561      	cmp	r1, ip
    8f20:	d1d7      	bne.n	8ed2 <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    8f22:	b005      	add	sp, #20
    8f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f26:	bf00      	nop
    8f28:	40001c00 	.word	0x40001c00
    8f2c:	40000800 	.word	0x40000800
    8f30:	41016000 	.word	0x41016000
    8f34:	41018000 	.word	0x41018000
    8f38:	00022d68 	.word	0x00022d68

00008f3c <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8f3c:	498b      	ldr	r1, [pc, #556]	; (916c <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    8f3e:	4a8c      	ldr	r2, [pc, #560]	; (9170 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8f40:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    8f42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    8f4a:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    8f4e:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8f50:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    8f52:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    8f54:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    8f58:	4606      	mov	r6, r0
    InitClocks();
    8f5a:	f7ff fe81 	bl	8c60 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    8f5e:	4b85      	ldr	r3, [pc, #532]	; (9174 <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    8f60:	4985      	ldr	r1, [pc, #532]	; (9178 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    8f62:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    8f64:	680d      	ldr	r5, [r1, #0]
    8f66:	4f85      	ldr	r7, [pc, #532]	; (917c <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    8f68:	f364 0241 	bfi	r2, r4, #1, #1
    8f6c:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    8f6e:	691a      	ldr	r2, [r3, #16]
    8f70:	21a7      	movs	r1, #167	; 0xa7
    8f72:	f361 4217 	bfi	r2, r1, #16, #8
    8f76:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    8f78:	691a      	ldr	r2, [r3, #16]
    8f7a:	f368 0283 	bfi	r2, r8, #2, #2
    8f7e:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    8f80:	691a      	ldr	r2, [r3, #16]
    8f82:	2107      	movs	r1, #7
    8f84:	f361 220b 	bfi	r2, r1, #8, #4
    8f88:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    8f8a:	691a      	ldr	r2, [r3, #16]
    8f8c:	f042 0202 	orr.w	r2, r2, #2
    8f90:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    8f92:	4628      	mov	r0, r5
    8f94:	4641      	mov	r1, r8
    8f96:	f008 fbc1 	bl	1171c <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    8f9a:	4879      	ldr	r0, [pc, #484]	; (9180 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    8f9c:	2100      	movs	r1, #0
    8f9e:	f000 fc9b 	bl	98d8 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    8fa2:	4621      	mov	r1, r4
    8fa4:	4628      	mov	r0, r5
    8fa6:	f008 fbb9 	bl	1171c <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    8faa:	4b76      	ldr	r3, [pc, #472]	; (9184 <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    8fac:	4a76      	ldr	r2, [pc, #472]	; (9188 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    8fae:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    8fb2:	2102      	movs	r1, #2
    8fb4:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    8fb8:	6810      	ldr	r0, [r2, #0]
    8fba:	f006 fe01 	bl	fbc0 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    8fbe:	f857 0f04 	ldr.w	r0, [r7, #4]!
    8fc2:	6803      	ldr	r3, [r0, #0]
    8fc4:	b221      	sxth	r1, r4
    8fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    8fc8:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    8fca:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    8fcc:	2c15      	cmp	r4, #21
    8fce:	d1f6      	bne.n	8fbe <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    8fd0:	f005 fe14 	bl	ebfc <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    8fd4:	4b6d      	ldr	r3, [pc, #436]	; (918c <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    8fd6:	6818      	ldr	r0, [r3, #0]
    8fd8:	f001 ff74 	bl	aec4 <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    8fdc:	486c      	ldr	r0, [pc, #432]	; (9190 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    8fde:	f001 fac9 	bl	a574 <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    8fe2:	4b6c      	ldr	r3, [pc, #432]	; (9194 <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    8fe4:	6818      	ldr	r0, [r3, #0]
    8fe6:	f003 ff21 	bl	ce2c <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    8fea:	4b6b      	ldr	r3, [pc, #428]	; (9198 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    8fec:	6818      	ldr	r0, [r3, #0]
    8fee:	f006 f923 	bl	f238 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    8ff2:	4b6a      	ldr	r3, [pc, #424]	; (919c <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    8ff4:	6818      	ldr	r0, [r3, #0]
    8ff6:	f7fd f9ef 	bl	63d8 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    8ffa:	4869      	ldr	r0, [pc, #420]	; (91a0 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    8ffc:	f002 fd7c 	bl	baf8 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9000:	4a68      	ldr	r2, [pc, #416]	; (91a4 <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    9002:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    9006:	f36f 1386 	bfc	r3, #6, #1
    900a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    900e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9012:	f3c1 1180 	ubfx	r1, r1, #6, #1
    9016:	2900      	cmp	r1, #0
    9018:	d1f9      	bne.n	900e <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    901a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    901e:	4c62      	ldr	r4, [pc, #392]	; (91a8 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    9020:	4f5b      	ldr	r7, [pc, #364]	; (9190 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9022:	4b62      	ldr	r3, [pc, #392]	; (91ac <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    9024:	f8df c190 	ldr.w	ip, [pc, #400]	; 91b8 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9028:	f361 0003 	bfi	r0, r1, #0, #4
    902c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    9030:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9034:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9038:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    903c:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    903e:	6961      	ldr	r1, [r4, #20]
    9040:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    9044:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    9048:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    904c:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    904e:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9050:	f8c3 e000 	str.w	lr, [r3]
    9054:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    9058:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    905c:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    9060:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    9064:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    9068:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    906c:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9070:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    9074:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9078:	f8c3 9000 	str.w	r9, [r3]
    907c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9080:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9084:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    9088:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    908a:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    908e:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9092:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9096:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    909a:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    909e:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90a2:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90a6:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    90aa:	6019      	str	r1, [r3, #0]
    90ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90b0:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90b4:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90b6:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90ba:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    90be:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90c0:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90c4:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90c8:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90cc:	6019      	str	r1, [r3, #0]
    90ce:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90d2:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90d6:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    90da:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90dc:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90e0:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    90e2:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90e6:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90ea:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    90ee:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    90f2:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90f6:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90fa:	f44f 7880 	mov.w	r8, #256	; 0x100
    90fe:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9100:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    9104:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9106:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    910a:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    910e:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9112:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9114:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9118:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    911c:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    911e:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9122:	f8c3 800c 	str.w	r8, [r3, #12]
    9126:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    912a:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    912e:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    9132:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    9136:	f000 fb7f 	bl	9838 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    913a:	b100      	cbz	r0, 913e <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    913c:	e7fe      	b.n	913c <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    913e:	4b1c      	ldr	r3, [pc, #112]	; (91b0 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    9140:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    9142:	4621      	mov	r1, r4
    9144:	4628      	mov	r0, r5
    9146:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    914a:	f008 fad9 	bl	11700 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    914e:	f642 043b 	movw	r4, #10299	; 0x283b
    9152:	f000 fb9d 	bl	9890 <Microseconds>
    9156:	42a0      	cmp	r0, r4
    9158:	d9fb      	bls.n	9152 <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    915a:	4b16      	ldr	r3, [pc, #88]	; (91b4 <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    915c:	6818      	ldr	r0, [r3, #0]
    915e:	f000 fcdd 	bl	9b1c <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    9162:	2301      	movs	r3, #1
    9164:	7033      	strb	r3, [r6, #0]
    9166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    916a:	bf00      	nop
    916c:	e000edf0 	.word	0xe000edf0
    9170:	e0001000 	.word	0xe0001000
    9174:	40001800 	.word	0x40001800
    9178:	20001f18 	.word	0x20001f18
    917c:	00022d88 	.word	0x00022d88
    9180:	0001d4c0 	.word	0x0001d4c0
    9184:	41008000 	.word	0x41008000
    9188:	20001f08 	.word	0x20001f08
    918c:	20001bfc 	.word	0x20001bfc
    9190:	200019d0 	.word	0x200019d0
    9194:	20001dfc 	.word	0x20001dfc
    9198:	20001efc 	.word	0x20001efc
    919c:	20000ad0 	.word	0x20000ad0
    91a0:	20001ae8 	.word	0x20001ae8
    91a4:	40001c00 	.word	0x40001c00
    91a8:	40000800 	.word	0x40000800
    91ac:	e000e100 	.word	0xe000e100
    91b0:	e000ed00 	.word	0xe000ed00
    91b4:	20001bf0 	.word	0x20001bf0
    91b8:	20001be4 	.word	0x20001be4

000091bc <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    91bc:	b672      	cpsid	i
    91be:	4a09      	ldr	r2, [pc, #36]	; (91e4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    91c0:	4b09      	ldr	r3, [pc, #36]	; (91e8 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    91c2:	2901      	cmp	r1, #1
    91c4:	bf18      	it	ne
    91c6:	2300      	movne	r3, #0
    91c8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    91ca:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    91ce:	4907      	ldr	r1, [pc, #28]	; (91ec <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    91d0:	4b07      	ldr	r3, [pc, #28]	; (91f0 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    91d2:	68ca      	ldr	r2, [r1, #12]
    91d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    91d8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    91da:	60cb      	str	r3, [r1, #12]
    91dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    91e0:	bf00      	nop
    91e2:	e7fd      	b.n	91e0 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    91e4:	2002fffc 	.word	0x2002fffc
    91e8:	f01669ef 	.word	0xf01669ef
    91ec:	e000ed00 	.word	0xe000ed00
    91f0:	05fa0004 	.word	0x05fa0004

000091f4 <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    91f4:	4b01      	ldr	r3, [pc, #4]	; (91fc <GMAC_Handler+0x8>)
    91f6:	6818      	ldr	r0, [r3, #0]
    91f8:	f001 b908 	b.w	a40c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    91fc:	20001bf0 	.word	0x20001bf0

00009200 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    9200:	4801      	ldr	r0, [pc, #4]	; (9208 <SERCOM0_0_Handler+0x8>)
    9202:	f007 bf13 	b.w	1102c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9206:	bf00      	nop
    9208:	200015e8 	.word	0x200015e8

0000920c <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    920c:	4801      	ldr	r0, [pc, #4]	; (9214 <SERCOM0_2_Handler+0x8>)
    920e:	f007 bf35 	b.w	1107c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9212:	bf00      	nop
    9214:	200015e8 	.word	0x200015e8

00009218 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    9218:	4801      	ldr	r0, [pc, #4]	; (9220 <SERCOM0_3_Handler+0x8>)
    921a:	f007 bf6b 	b.w	110f4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    921e:	bf00      	nop
    9220:	200015e8 	.word	0x200015e8

00009224 <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    9224:	4801      	ldr	r0, [pc, #4]	; (922c <SERCOM2_0_Handler+0x8>)
    9226:	f007 bf01 	b.w	1102c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    922a:	bf00      	nop
    922c:	20001740 	.word	0x20001740

00009230 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    9230:	4801      	ldr	r0, [pc, #4]	; (9238 <SERCOM2_2_Handler+0x8>)
    9232:	f007 bf23 	b.w	1107c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9236:	bf00      	nop
    9238:	20001740 	.word	0x20001740

0000923c <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    923c:	4801      	ldr	r0, [pc, #4]	; (9244 <SERCOM2_3_Handler+0x8>)
    923e:	f007 bf59 	b.w	110f4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9242:	bf00      	nop
    9244:	20001740 	.word	0x20001740

00009248 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    9248:	4801      	ldr	r0, [pc, #4]	; (9250 <SERCOM7_0_Handler+0x8>)
    924a:	f007 beef 	b.w	1102c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    924e:	bf00      	nop
    9250:	20001490 	.word	0x20001490

00009254 <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    9254:	4801      	ldr	r0, [pc, #4]	; (925c <SERCOM7_2_Handler+0x8>)
    9256:	f007 bf11 	b.w	1107c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    925a:	bf00      	nop
    925c:	20001490 	.word	0x20001490

00009260 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    9260:	4801      	ldr	r0, [pc, #4]	; (9268 <SERCOM7_3_Handler+0x8>)
    9262:	f007 bf47 	b.w	110f4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9266:	bf00      	nop
    9268:	20001490 	.word	0x20001490

0000926c <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    926c:	4b02      	ldr	r3, [pc, #8]	; (9278 <EIC_0_Handler+0xc>)
    926e:	2100      	movs	r1, #0
    9270:	6818      	ldr	r0, [r3, #0]
    9272:	f006 bced 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9276:	bf00      	nop
    9278:	20001f08 	.word	0x20001f08

0000927c <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    927c:	4b02      	ldr	r3, [pc, #8]	; (9288 <EIC_1_Handler+0xc>)
    927e:	2101      	movs	r1, #1
    9280:	6818      	ldr	r0, [r3, #0]
    9282:	f006 bce5 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9286:	bf00      	nop
    9288:	20001f08 	.word	0x20001f08

0000928c <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    928c:	4b02      	ldr	r3, [pc, #8]	; (9298 <EIC_2_Handler+0xc>)
    928e:	2102      	movs	r1, #2
    9290:	6818      	ldr	r0, [r3, #0]
    9292:	f006 bcdd 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9296:	bf00      	nop
    9298:	20001f08 	.word	0x20001f08

0000929c <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    929c:	4b02      	ldr	r3, [pc, #8]	; (92a8 <EIC_3_Handler+0xc>)
    929e:	2103      	movs	r1, #3
    92a0:	6818      	ldr	r0, [r3, #0]
    92a2:	f006 bcd5 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    92a6:	bf00      	nop
    92a8:	20001f08 	.word	0x20001f08

000092ac <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    92ac:	4b02      	ldr	r3, [pc, #8]	; (92b8 <EIC_4_Handler+0xc>)
    92ae:	2104      	movs	r1, #4
    92b0:	6818      	ldr	r0, [r3, #0]
    92b2:	f006 bccd 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    92b6:	bf00      	nop
    92b8:	20001f08 	.word	0x20001f08

000092bc <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    92bc:	4b02      	ldr	r3, [pc, #8]	; (92c8 <EIC_5_Handler+0xc>)
    92be:	2105      	movs	r1, #5
    92c0:	6818      	ldr	r0, [r3, #0]
    92c2:	f006 bcc5 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    92c6:	bf00      	nop
    92c8:	20001f08 	.word	0x20001f08

000092cc <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    92cc:	4b02      	ldr	r3, [pc, #8]	; (92d8 <EIC_6_Handler+0xc>)
    92ce:	2106      	movs	r1, #6
    92d0:	6818      	ldr	r0, [r3, #0]
    92d2:	f006 bcbd 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    92d6:	bf00      	nop
    92d8:	20001f08 	.word	0x20001f08

000092dc <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    92dc:	4b02      	ldr	r3, [pc, #8]	; (92e8 <EIC_7_Handler+0xc>)
    92de:	2107      	movs	r1, #7
    92e0:	6818      	ldr	r0, [r3, #0]
    92e2:	f006 bcb5 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    92e6:	bf00      	nop
    92e8:	20001f08 	.word	0x20001f08

000092ec <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    92ec:	4b02      	ldr	r3, [pc, #8]	; (92f8 <EIC_8_Handler+0xc>)
    92ee:	2108      	movs	r1, #8
    92f0:	6818      	ldr	r0, [r3, #0]
    92f2:	f006 bcad 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    92f6:	bf00      	nop
    92f8:	20001f08 	.word	0x20001f08

000092fc <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    92fc:	4b02      	ldr	r3, [pc, #8]	; (9308 <EIC_9_Handler+0xc>)
    92fe:	2109      	movs	r1, #9
    9300:	6818      	ldr	r0, [r3, #0]
    9302:	f006 bca5 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9306:	bf00      	nop
    9308:	20001f08 	.word	0x20001f08

0000930c <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    930c:	4b02      	ldr	r3, [pc, #8]	; (9318 <EIC_10_Handler+0xc>)
    930e:	210a      	movs	r1, #10
    9310:	6818      	ldr	r0, [r3, #0]
    9312:	f006 bc9d 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9316:	bf00      	nop
    9318:	20001f08 	.word	0x20001f08

0000931c <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    931c:	4b02      	ldr	r3, [pc, #8]	; (9328 <EIC_11_Handler+0xc>)
    931e:	210b      	movs	r1, #11
    9320:	6818      	ldr	r0, [r3, #0]
    9322:	f006 bc95 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9326:	bf00      	nop
    9328:	20001f08 	.word	0x20001f08

0000932c <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    932c:	4b01      	ldr	r3, [pc, #4]	; (9334 <EIC_12_Handler+0x8>)
    932e:	6818      	ldr	r0, [r3, #0]
    9330:	f000 beb0 	b.w	a094 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    9334:	20001bf0 	.word	0x20001bf0

00009338 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    9338:	4b02      	ldr	r3, [pc, #8]	; (9344 <EIC_13_Handler+0xc>)
    933a:	210d      	movs	r1, #13
    933c:	6818      	ldr	r0, [r3, #0]
    933e:	f006 bc87 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9342:	bf00      	nop
    9344:	20001f08 	.word	0x20001f08

00009348 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    9348:	4b02      	ldr	r3, [pc, #8]	; (9354 <EIC_14_Handler+0xc>)
    934a:	210e      	movs	r1, #14
    934c:	6818      	ldr	r0, [r3, #0]
    934e:	f006 bc7f 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9352:	bf00      	nop
    9354:	20001f08 	.word	0x20001f08

00009358 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    9358:	4b02      	ldr	r3, [pc, #8]	; (9364 <EIC_15_Handler+0xc>)
    935a:	210f      	movs	r1, #15
    935c:	6818      	ldr	r0, [r3, #0]
    935e:	f006 bc77 	b.w	fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9362:	bf00      	nop
    9364:	20001f08 	.word	0x20001f08

00009368 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    9368:	4b02      	ldr	r3, [pc, #8]	; (9374 <TCC3_0_Handler+0xc>)
    936a:	4a03      	ldr	r2, [pc, #12]	; (9378 <TCC3_0_Handler+0x10>)
    936c:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    936e:	4803      	ldr	r0, [pc, #12]	; (937c <TCC3_0_Handler+0x14>)
    9370:	f005 b9ce 	b.w	e710 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    9374:	42001000 	.word	0x42001000
    9378:	003ffc0f 	.word	0x003ffc0f
    937c:	200013f0 	.word	0x200013f0

00009380 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    9380:	4b02      	ldr	r3, [pc, #8]	; (938c <TCC4_0_Handler+0xc>)
    9382:	4a03      	ldr	r2, [pc, #12]	; (9390 <TCC4_0_Handler+0x10>)
    9384:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    9386:	4803      	ldr	r0, [pc, #12]	; (9394 <TCC4_0_Handler+0x14>)
    9388:	f005 b9c2 	b.w	e710 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    938c:	43001000 	.word	0x43001000
    9390:	003ffc0f 	.word	0x003ffc0f
    9394:	2000136c 	.word	0x2000136c

00009398 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    9398:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    939a:	4b0d      	ldr	r3, [pc, #52]	; (93d0 <SysTick_Handler+0x38>)
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	b103      	cbz	r3, 93a2 <SysTick_Handler+0xa>
    93a0:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    93a2:	4b0c      	ldr	r3, [pc, #48]	; (93d4 <SysTick_Handler+0x3c>)
    93a4:	781b      	ldrb	r3, [r3, #0]
    93a6:	2b00      	cmp	r3, #0
    93a8:	d0fa      	beq.n	93a0 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    93aa:	4b0b      	ldr	r3, [pc, #44]	; (93d8 <SysTick_Handler+0x40>)
    93ac:	6818      	ldr	r0, [r3, #0]
    93ae:	f006 fa99 	bl	f8e4 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    93b2:	480a      	ldr	r0, [pc, #40]	; (93dc <SysTick_Handler+0x44>)
    93b4:	f7fb fd2c 	bl	4e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    93b8:	4809      	ldr	r0, [pc, #36]	; (93e0 <SysTick_Handler+0x48>)
    93ba:	f7fb fd29 	bl	4e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    93be:	4809      	ldr	r0, [pc, #36]	; (93e4 <SysTick_Handler+0x4c>)
    93c0:	f7fb fd26 	bl	4e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    93c4:	4808      	ldr	r0, [pc, #32]	; (93e8 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    93c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    93ca:	f7fb bd21 	b.w	4e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    93ce:	bf00      	nop
    93d0:	20001080 	.word	0x20001080
    93d4:	200019cc 	.word	0x200019cc
    93d8:	20001efc 	.word	0x20001efc
    93dc:	20000b60 	.word	0x20000b60
    93e0:	20000ca8 	.word	0x20000ca8
    93e4:	20000df0 	.word	0x20000df0
    93e8:	20000f38 	.word	0x20000f38

000093ec <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    93ec:	4a30      	ldr	r2, [pc, #192]	; (94b0 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    93ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    93f2:	4b30      	ldr	r3, [pc, #192]	; (94b4 <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    93f4:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    93f6:	4a30      	ldr	r2, [pc, #192]	; (94b8 <TCC0_0_Handler+0xcc>)
    93f8:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    93fa:	4630      	mov	r0, r6
    93fc:	f000 f9ca 	bl	9794 <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    9400:	4b2e      	ldr	r3, [pc, #184]	; (94bc <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    9402:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 94f8 <TCC0_0_Handler+0x10c>
    9406:	f8d3 9000 	ldr.w	r9, [r3]
    940a:	4648      	mov	r0, r9
    940c:	f005 ff88 	bl	f320 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    9410:	4b2b      	ldr	r3, [pc, #172]	; (94c0 <TCC0_0_Handler+0xd4>)
    9412:	6818      	ldr	r0, [r3, #0]
    9414:	f003 fec4 	bl	d1a0 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    9418:	4b2a      	ldr	r3, [pc, #168]	; (94c4 <TCC0_0_Handler+0xd8>)
    941a:	6818      	ldr	r0, [r3, #0]
    941c:	f008 fa14 	bl	11848 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    9420:	4b29      	ldr	r3, [pc, #164]	; (94c8 <TCC0_0_Handler+0xdc>)
    9422:	6818      	ldr	r0, [r3, #0]
    9424:	f7fd fe22 	bl	706c <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    9428:	4b28      	ldr	r3, [pc, #160]	; (94cc <TCC0_0_Handler+0xe0>)
    942a:	681f      	ldr	r7, [r3, #0]
    942c:	4638      	mov	r0, r7
    942e:	f006 fc3d 	bl	fcac <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    9432:	f898 3000 	ldrb.w	r3, [r8]
    9436:	b15b      	cbz	r3, 9450 <TCC0_0_Handler+0x64>
    9438:	4c25      	ldr	r4, [pc, #148]	; (94d0 <TCC0_0_Handler+0xe4>)
    943a:	4826      	ldr	r0, [pc, #152]	; (94d4 <TCC0_0_Handler+0xe8>)
    943c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    9440:	e001      	b.n	9446 <TCC0_0_Handler+0x5a>
    9442:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    9446:	6803      	ldr	r3, [r0, #0]
    9448:	6a1b      	ldr	r3, [r3, #32]
    944a:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    944c:	42ac      	cmp	r4, r5
    944e:	d1f8      	bne.n	9442 <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    9450:	4638      	mov	r0, r7
    9452:	f006 fc3f 	bl	fcd4 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    9456:	4820      	ldr	r0, [pc, #128]	; (94d8 <TCC0_0_Handler+0xec>)
    9458:	f002 fb7c 	bl	bb54 <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    945c:	481f      	ldr	r0, [pc, #124]	; (94dc <TCC0_0_Handler+0xf0>)
    945e:	f001 f95b 	bl	a718 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    9462:	4630      	mov	r0, r6
    9464:	f000 f9ac 	bl	97c0 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    9468:	4a1d      	ldr	r2, [pc, #116]	; (94e0 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    946a:	491e      	ldr	r1, [pc, #120]	; (94e4 <TCC0_0_Handler+0xf8>)
    tickCnt++;
    946c:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    946e:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    9470:	3301      	adds	r3, #1
    9472:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    9474:	b111      	cbz	r1, 947c <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    9476:	f898 3000 	ldrb.w	r3, [r8]
    947a:	b923      	cbnz	r3, 9486 <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    947c:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    947e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    9482:	f000 b98d 	b.w	97a0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    9486:	4648      	mov	r0, r9
    9488:	f006 fa2c 	bl	f8e4 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    948c:	4816      	ldr	r0, [pc, #88]	; (94e8 <TCC0_0_Handler+0xfc>)
    948e:	f7fb fcbf 	bl	4e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9492:	4816      	ldr	r0, [pc, #88]	; (94ec <TCC0_0_Handler+0x100>)
    9494:	f7fb fcbc 	bl	4e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9498:	4815      	ldr	r0, [pc, #84]	; (94f0 <TCC0_0_Handler+0x104>)
    949a:	f7fb fcb9 	bl	4e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    949e:	4815      	ldr	r0, [pc, #84]	; (94f4 <TCC0_0_Handler+0x108>)
    94a0:	f7fb fcb6 	bl	4e10 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    94a4:	4630      	mov	r0, r6
}
    94a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    94aa:	f000 b979 	b.w	97a0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    94ae:	bf00      	nop
    94b0:	20001be4 	.word	0x20001be4
    94b4:	41016000 	.word	0x41016000
    94b8:	003ffc0f 	.word	0x003ffc0f
    94bc:	20001efc 	.word	0x20001efc
    94c0:	20001dfc 	.word	0x20001dfc
    94c4:	20001f18 	.word	0x20001f18
    94c8:	20000ad0 	.word	0x20000ad0
    94cc:	20001f08 	.word	0x20001f08
    94d0:	00022d8c 	.word	0x00022d8c
    94d4:	200011e0 	.word	0x200011e0
    94d8:	20001ae8 	.word	0x20001ae8
    94dc:	200019d0 	.word	0x200019d0
    94e0:	20001be0 	.word	0x20001be0
    94e4:	20001080 	.word	0x20001080
    94e8:	20000b60 	.word	0x20000b60
    94ec:	20000ca8 	.word	0x20000ca8
    94f0:	20000df0 	.word	0x20000df0
    94f4:	20000f38 	.word	0x20000f38
    94f8:	200019cc 	.word	0x200019cc

000094fc <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    94fc:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    94fe:	4813      	ldr	r0, [pc, #76]	; (954c <Reset_Handler+0x50>)
    9500:	4b13      	ldr	r3, [pc, #76]	; (9550 <Reset_Handler+0x54>)
    9502:	4298      	cmp	r0, r3
    9504:	d00b      	beq.n	951e <Reset_Handler+0x22>
    9506:	4913      	ldr	r1, [pc, #76]	; (9554 <Reset_Handler+0x58>)
    9508:	4281      	cmp	r1, r0
    950a:	d008      	beq.n	951e <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    950c:	4298      	cmp	r0, r3
    950e:	d206      	bcs.n	951e <Reset_Handler+0x22>
            *pDest = *pSrc;
    9510:	43c2      	mvns	r2, r0
    9512:	441a      	add	r2, r3
    9514:	f022 0203 	bic.w	r2, r2, #3
    9518:	3204      	adds	r2, #4
    951a:	f014 feb9 	bl	1e290 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    951e:	480e      	ldr	r0, [pc, #56]	; (9558 <Reset_Handler+0x5c>)
    9520:	4b0e      	ldr	r3, [pc, #56]	; (955c <Reset_Handler+0x60>)
    9522:	4298      	cmp	r0, r3
    9524:	d008      	beq.n	9538 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    9526:	d207      	bcs.n	9538 <Reset_Handler+0x3c>
            *pDest = 0ul;
    9528:	43c2      	mvns	r2, r0
    952a:	441a      	add	r2, r3
    952c:	f022 0203 	bic.w	r2, r2, #3
    9530:	3204      	adds	r2, #4
    9532:	2100      	movs	r1, #0
    9534:	f014 ffaa 	bl	1e48c <memset>
        }
    }

    SystemInit();
    9538:	f002 f93a 	bl	b7b0 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    953c:	f014 fb06 	bl	1db4c <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    9540:	4807      	ldr	r0, [pc, #28]	; (9560 <Reset_Handler+0x64>)
    9542:	f7ff fcfb 	bl	8f3c <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    9546:	f7fb f883 	bl	4650 <main>
    954a:	e7fe      	b.n	954a <Reset_Handler+0x4e>
    954c:	20000000 	.word	0x20000000
    9550:	20000ab0 	.word	0x20000ab0
    9554:	000250d4 	.word	0x000250d4
    9558:	20000ab0 	.word	0x20000ab0
    955c:	200023a0 	.word	0x200023a0
    9560:	200019cc 	.word	0x200019cc

00009564 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    9564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    9568:	4852      	ldr	r0, [pc, #328]	; (96b4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    956a:	4d53      	ldr	r5, [pc, #332]	; (96b8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    956c:	4c53      	ldr	r4, [pc, #332]	; (96bc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    956e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 972c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    9572:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9730 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    9576:	4f52      	ldr	r7, [pc, #328]	; (96c0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    9578:	f002 fa94 	bl	baa4 <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    957c:	4b51      	ldr	r3, [pc, #324]	; (96c4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    957e:	4a52      	ldr	r2, [pc, #328]	; (96c8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    9580:	4852      	ldr	r0, [pc, #328]	; (96cc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    9582:	601a      	str	r2, [r3, #0]
    9584:	2600      	movs	r6, #0
    9586:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    958a:	f000 ff61 	bl	a450 <_ZN9ClearCore13ShiftRegisterC1Ev>
    958e:	4b50      	ldr	r3, [pc, #320]	; (96d0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    9590:	4a50      	ldr	r2, [pc, #320]	; (96d4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    9592:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    9596:	4628      	mov	r0, r5
    9598:	601a      	str	r2, [r3, #0]
    959a:	f004 ff73 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    959e:	4b4e      	ldr	r3, [pc, #312]	; (96d8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    95a0:	602b      	str	r3, [r5, #0]
    95a2:	4620      	mov	r0, r4
    95a4:	f004 ff6e 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    95a8:	4b4c      	ldr	r3, [pc, #304]	; (96dc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    95aa:	6023      	str	r3, [r4, #0]
    95ac:	4648      	mov	r0, r9
    95ae:	f004 ff69 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    95b2:	4c4b      	ldr	r4, [pc, #300]	; (96e0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    95b4:	4d4b      	ldr	r5, [pc, #300]	; (96e4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    95b6:	f8c9 4000 	str.w	r4, [r9]
    95ba:	4640      	mov	r0, r8
    95bc:	f004 ff62 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    95c0:	f8df 9170 	ldr.w	r9, [pc, #368]	; 9734 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    95c4:	f8c8 4000 	str.w	r4, [r8]
    95c8:	4638      	mov	r0, r7
    95ca:	f004 ff5b 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    95ce:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9738 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    95d2:	603c      	str	r4, [r7, #0]
    95d4:	4628      	mov	r0, r5
    95d6:	f004 ff55 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    95da:	4c43      	ldr	r4, [pc, #268]	; (96e8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    95dc:	4f43      	ldr	r7, [pc, #268]	; (96ec <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    95de:	602c      	str	r4, [r5, #0]
    95e0:	4648      	mov	r0, r9
    95e2:	f004 ff4f 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    95e6:	4d42      	ldr	r5, [pc, #264]	; (96f0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    95e8:	f8c9 4000 	str.w	r4, [r9]
    95ec:	4640      	mov	r0, r8
    95ee:	f004 ff49 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    95f2:	4c40      	ldr	r4, [pc, #256]	; (96f4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    95f4:	f8df 9144 	ldr.w	r9, [pc, #324]	; 973c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    95f8:	f8c8 4000 	str.w	r4, [r8]
    95fc:	4638      	mov	r0, r7
    95fe:	f004 ff41 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    9602:	f8df 813c 	ldr.w	r8, [pc, #316]	; 9740 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    9606:	603c      	str	r4, [r7, #0]
    9608:	4628      	mov	r0, r5
    960a:	f004 ff3b 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    960e:	4f3a      	ldr	r7, [pc, #232]	; (96f8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    9610:	602c      	str	r4, [r5, #0]
    9612:	4648      	mov	r0, r9
    9614:	f004 ff36 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    9618:	4c38      	ldr	r4, [pc, #224]	; (96fc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    961a:	4d39      	ldr	r5, [pc, #228]	; (9700 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    961c:	f8c9 4000 	str.w	r4, [r9]
    9620:	4640      	mov	r0, r8
    9622:	f004 ff2f 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    9626:	4638      	mov	r0, r7
    9628:	f8c8 4000 	str.w	r4, [r8]
    962c:	f004 ff2a 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    9630:	4628      	mov	r0, r5
    9632:	603c      	str	r4, [r7, #0]
    9634:	f004 ff26 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    9638:	4832      	ldr	r0, [pc, #200]	; (9704 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    963a:	602c      	str	r4, [r5, #0]
    963c:	f7fd ff1e 	bl	747c <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    9640:	4831      	ldr	r0, [pc, #196]	; (9708 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    9642:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9744 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    9646:	4d31      	ldr	r5, [pc, #196]	; (970c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    9648:	4c31      	ldr	r4, [pc, #196]	; (9710 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    964a:	4f32      	ldr	r7, [pc, #200]	; (9714 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    964c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9748 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    9650:	f7fd ff14 	bl	747c <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    9654:	4830      	ldr	r0, [pc, #192]	; (9718 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    9656:	f7fd ff11 	bl	747c <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    965a:	4830      	ldr	r0, [pc, #192]	; (971c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    965c:	f7fd ff0e 	bl	747c <_ZN9ClearCore11MotorDriverC1Ev>
    9660:	4640      	mov	r0, r8
    9662:	4b2f      	ldr	r3, [pc, #188]	; (9720 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    9664:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    9668:	f004 ff0c 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    966c:	4b2d      	ldr	r3, [pc, #180]	; (9724 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    966e:	f8c8 3000 	str.w	r3, [r8]
    9672:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    9676:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    9678:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    967c:	f8c5 9000 	str.w	r9, [r5]
    9680:	f8c8 3004 	str.w	r3, [r8, #4]
    9684:	f004 fefe 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    9688:	f107 0874 	add.w	r8, r7, #116	; 0x74
    968c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    9690:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    9694:	f8c4 9000 	str.w	r9, [r4]
    9698:	602f      	str	r7, [r5, #0]
    969a:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    969e:	f004 fef1 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    96a2:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    96a6:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    96a8:	481f      	ldr	r0, [pc, #124]	; (9728 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    96aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    96ae:	f7fd bf07 	b.w	74c0 <_ZN9ClearCore10SysManagerC1Ev>
    96b2:	bf00      	nop
    96b4:	20001ae8 	.word	0x20001ae8
    96b8:	20001474 	.word	0x20001474
    96bc:	200011e0 	.word	0x200011e0
    96c0:	2000130c 	.word	0x2000130c
    96c4:	20001884 	.word	0x20001884
    96c8:	00022cd0 	.word	0x00022cd0
    96cc:	200019d0 	.word	0x200019d0
    96d0:	20001740 	.word	0x20001740
    96d4:	00022d20 	.word	0x00022d20
    96d8:	000234d0 	.word	0x000234d0
    96dc:	00023238 	.word	0x00023238
    96e0:	00023298 	.word	0x00023298
    96e4:	2000136c 	.word	0x2000136c
    96e8:	00023348 	.word	0x00023348
    96ec:	20001180 	.word	0x20001180
    96f0:	200011b0 	.word	0x200011b0
    96f4:	00023318 	.word	0x00023318
    96f8:	200010c8 	.word	0x200010c8
    96fc:	00023268 	.word	0x00023268
    9700:	2000110c 	.word	0x2000110c
    9704:	20000b60 	.word	0x20000b60
    9708:	20000ca8 	.word	0x20000ca8
    970c:	20001490 	.word	0x20001490
    9710:	200015e8 	.word	0x200015e8
    9714:	0002342c 	.word	0x0002342c
    9718:	20000df0 	.word	0x20000df0
    971c:	20000f38 	.word	0x20000f38
    9720:	00022bcc 	.word	0x00022bcc
    9724:	00022c1c 	.word	0x00022c1c
    9728:	200019cc 	.word	0x200019cc
    972c:	2000124c 	.word	0x2000124c
    9730:	200012ac 	.word	0x200012ac
    9734:	200013f0 	.word	0x200013f0
    9738:	20001150 	.word	0x20001150
    973c:	20000b18 	.word	0x20000b18
    9740:	20001084 	.word	0x20001084
    9744:	20001480 	.word	0x20001480
    9748:	000233bc 	.word	0x000233bc

0000974c <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    974c:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    974e:	4d0f      	ldr	r5, [pc, #60]	; (978c <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    9750:	682c      	ldr	r4, [r5, #0]
    9752:	f014 0401 	ands.w	r4, r4, #1
    9756:	d002      	beq.n	975e <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    9758:	4b0d      	ldr	r3, [pc, #52]	; (9790 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    975a:	6818      	ldr	r0, [r3, #0]
    975c:	bd70      	pop	{r4, r5, r6, pc}
    975e:	2030      	movs	r0, #48	; 0x30
    9760:	f009 fdf6 	bl	13350 <_Znwj>
    9764:	4a0a      	ldr	r2, [pc, #40]	; (9790 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    9766:	6004      	str	r4, [r0, #0]
    9768:	2105      	movs	r1, #5
    976a:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    976e:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    9770:	7501      	strb	r1, [r0, #20]
    9772:	6084      	str	r4, [r0, #8]
    9774:	60c4      	str	r4, [r0, #12]
    9776:	6104      	str	r4, [r0, #16]
    9778:	6184      	str	r4, [r0, #24]
    977a:	61c4      	str	r4, [r0, #28]
    977c:	6204      	str	r4, [r0, #32]
    977e:	6244      	str	r4, [r0, #36]	; 0x24
    9780:	6284      	str	r4, [r0, #40]	; 0x28
    9782:	62c4      	str	r4, [r0, #44]	; 0x2c
    9784:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    9786:	6010      	str	r0, [r2, #0]
    9788:	602b      	str	r3, [r5, #0]
    return *instance;
}
    978a:	bd70      	pop	{r4, r5, r6, pc}
    978c:	20001bdc 	.word	0x20001bdc
    9790:	20001be8 	.word	0x20001be8

00009794 <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    9794:	4b01      	ldr	r3, [pc, #4]	; (979c <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    9796:	685b      	ldr	r3, [r3, #4]
    9798:	6003      	str	r3, [r0, #0]
    979a:	4770      	bx	lr
    979c:	e0001000 	.word	0xe0001000

000097a0 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    97a0:	4b06      	ldr	r3, [pc, #24]	; (97bc <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    97a2:	6801      	ldr	r1, [r0, #0]
    97a4:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    97a6:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    97a8:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    97aa:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    97ac:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    97ae:	bf38      	it	cc
    97b0:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    97b2:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    97b4:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    97b6:	bf88      	it	hi
    97b8:	6083      	strhi	r3, [r0, #8]
    97ba:	4770      	bx	lr
    97bc:	e0001000 	.word	0xe0001000

000097c0 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    97c0:	4a1c      	ldr	r2, [pc, #112]	; (9834 <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    97c2:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    97c4:	68d3      	ldr	r3, [r2, #12]
    97c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    97ca:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    97cc:	7d03      	ldrb	r3, [r0, #20]
    97ce:	3b01      	subs	r3, #1
    97d0:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    97d2:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    97d4:	7503      	strb	r3, [r0, #20]
    97d6:	b923      	cbnz	r3, 97e2 <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    97d8:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    97da:	2205      	movs	r2, #5
        m_msTickCnt++;
    97dc:	3301      	adds	r3, #1
    97de:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    97e0:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    97e2:	6825      	ldr	r5, [r4, #0]
    97e4:	69a3      	ldr	r3, [r4, #24]
    97e6:	406b      	eors	r3, r5
    97e8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    97ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    97f0:	d001      	beq.n	97f6 <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    97f2:	61a5      	str	r5, [r4, #24]
    97f4:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    97f6:	2d00      	cmp	r5, #0
    97f8:	db08      	blt.n	980c <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    97fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    97fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    97fe:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    9800:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9802:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    9806:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    9808:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    980a:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    980c:	69e1      	ldr	r1, [r4, #28]
    980e:	3101      	adds	r1, #1
    9810:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    9812:	2278      	movs	r2, #120	; 0x78
    9814:	2300      	movs	r3, #0
    9816:	2000      	movs	r0, #0
    9818:	f012 fdf8 	bl	1c40c <__aeabi_uldivmod>
    981c:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    981e:	b128      	cbz	r0, 982c <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    9820:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    9824:	00c3      	lsls	r3, r0, #3
    9826:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    9828:	62e3      	str	r3, [r4, #44]	; 0x2c
    982a:	e7e2      	b.n	97f2 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    982c:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    982e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9830:	e7df      	b.n	97f2 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    9832:	bf00      	nop
    9834:	e000edf0 	.word	0xe000edf0

00009838 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    9838:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    983c:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    983e:	29c7      	cmp	r1, #199	; 0xc7
    9840:	4a0d      	ldr	r2, [pc, #52]	; (9878 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9842:	f103 33ff 	add.w	r3, r3, #4294967295
    9846:	bf8c      	ite	hi
    9848:	2100      	movhi	r1, #0
    984a:	2101      	movls	r1, #1
    984c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    9850:	7011      	strb	r1, [r2, #0]
    9852:	d20e      	bcs.n	9872 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9854:	4a09      	ldr	r2, [pc, #36]	; (987c <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9856:	480a      	ldr	r0, [pc, #40]	; (9880 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    9858:	b410      	push	{r4}
    985a:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    985c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    985e:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9860:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9864:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9866:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9868:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    986a:	6011      	str	r1, [r2, #0]
}
    986c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9870:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9872:	2001      	movs	r0, #1
    9874:	4770      	bx	lr
    9876:	bf00      	nop
    9878:	20001080 	.word	0x20001080
    987c:	e000e010 	.word	0xe000e010
    9880:	e000ed00 	.word	0xe000ed00

00009884 <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    9884:	4b01      	ldr	r3, [pc, #4]	; (988c <Milliseconds+0x8>)
    9886:	681b      	ldr	r3, [r3, #0]
    9888:	6918      	ldr	r0, [r3, #16]
}
    988a:	4770      	bx	lr
    988c:	20001be4 	.word	0x20001be4

00009890 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    9890:	4b0e      	ldr	r3, [pc, #56]	; (98cc <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    9892:	4a0f      	ldr	r2, [pc, #60]	; (98d0 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    9894:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    9896:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    9898:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    989a:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    989c:	db0a      	blt.n	98b4 <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    989e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    98a0:	490c      	ldr	r1, [pc, #48]	; (98d4 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    98a2:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    98a4:	4423      	add	r3, r4
    98a6:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    98aa:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    98ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    98b2:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    98b4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    98b6:	4907      	ldr	r1, [pc, #28]	; (98d4 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    98b8:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    98ba:	1b1b      	subs	r3, r3, r4
    98bc:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    98c0:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    98c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    98c8:	4770      	bx	lr
    98ca:	bf00      	nop
    98cc:	e0001000 	.word	0xe0001000
    98d0:	20001be4 	.word	0x20001be4
    98d4:	88888889 	.word	0x88888889

000098d8 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    98d8:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    98da:	4e0d      	ldr	r6, [pc, #52]	; (9910 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    98dc:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    98e0:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    98e2:	d013      	beq.n	990c <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    98e4:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    98e6:	2500      	movs	r5, #0
    98e8:	1b1c      	subs	r4, r3, r4
    98ea:	428d      	cmp	r5, r1
    98ec:	bf08      	it	eq
    98ee:	4284      	cmpeq	r4, r0
    98f0:	d20c      	bcs.n	990c <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    98f2:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    98f4:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    98f6:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    98fa:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    98fe:	2500      	movs	r5, #0
    9900:	461c      	mov	r4, r3
    9902:	428d      	cmp	r5, r1
    9904:	bf08      	it	eq
    9906:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    9908:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    990a:	d3f2      	bcc.n	98f2 <Delay_cycles+0x1a>
    }
}
    990c:	bc70      	pop	{r4, r5, r6}
    990e:	4770      	bx	lr
    9910:	e0001000 	.word	0xe0001000

00009914 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    9914:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    9916:	f7ff ff19 	bl	974c <_ZN9ClearCore9SysTiming8InstanceEv>
    991a:	4b01      	ldr	r3, [pc, #4]	; (9920 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    991c:	6018      	str	r0, [r3, #0]
    991e:	bd08      	pop	{r3, pc}
    9920:	20001be4 	.word	0x20001be4

00009924 <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    9924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    9926:	4e37      	ldr	r6, [pc, #220]	; (9a04 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    9928:	6835      	ldr	r5, [r6, #0]
    992a:	f015 0501 	ands.w	r5, r5, #1
    992e:	d002      	beq.n	9936 <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    9930:	4b35      	ldr	r3, [pc, #212]	; (9a08 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    9932:	6818      	ldr	r0, [r3, #0]
    9934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9936:	f641 10c4 	movw	r0, #6596	; 0x19c4
    993a:	f009 fd09 	bl	13350 <_Znwj>
    993e:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9940:	2711      	movs	r7, #17
    9942:	2312      	movs	r3, #18
    9944:	6067      	str	r7, [r4, #4]
    9946:	60e3      	str	r3, [r4, #12]
    9948:	2213      	movs	r2, #19
    994a:	210d      	movs	r1, #13
    994c:	2714      	movs	r7, #20
    994e:	230b      	movs	r3, #11
    9950:	6162      	str	r2, [r4, #20]
    9952:	61e1      	str	r1, [r4, #28]
    9954:	6367      	str	r7, [r4, #52]	; 0x34
    9956:	6463      	str	r3, [r4, #68]	; 0x44
    9958:	270c      	movs	r7, #12
    995a:	2302      	movs	r3, #2
    995c:	200f      	movs	r0, #15
    995e:	220e      	movs	r2, #14
    9960:	211c      	movs	r1, #28
    9962:	6323      	str	r3, [r4, #48]	; 0x30
    9964:	63a3      	str	r3, [r4, #56]	; 0x38
    9966:	6423      	str	r3, [r4, #64]	; 0x40
    9968:	6523      	str	r3, [r4, #80]	; 0x50
    996a:	62e0      	str	r0, [r4, #44]	; 0x2c
    996c:	64e2      	str	r2, [r4, #76]	; 0x4c
    996e:	6561      	str	r1, [r4, #84]	; 0x54
    9970:	6267      	str	r7, [r4, #36]	; 0x24
    9972:	4629      	mov	r1, r5
    9974:	63e7      	str	r7, [r4, #60]	; 0x3c
    9976:	65a7      	str	r7, [r4, #88]	; 0x58
    9978:	6025      	str	r5, [r4, #0]
    997a:	60a5      	str	r5, [r4, #8]
    997c:	6125      	str	r5, [r4, #16]
    997e:	61a5      	str	r5, [r4, #24]
    9980:	6225      	str	r5, [r4, #32]
    9982:	62a5      	str	r5, [r4, #40]	; 0x28
    9984:	64a5      	str	r5, [r4, #72]	; 0x48
    9986:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    998a:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    998e:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    9992:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    9996:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    999a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    999e:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    99a2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    99a6:	f504 7094 	add.w	r0, r4, #296	; 0x128
    99aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    99ae:	f014 fd6d 	bl	1e48c <memset>
    99b2:	4629      	mov	r1, r5
    99b4:	f604 1028 	addw	r0, r4, #2344	; 0x928
    99b8:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    99bc:	f014 fd66 	bl	1e48c <memset>
    99c0:	f641 176c 	movw	r7, #6508	; 0x196c
    99c4:	f641 1168 	movw	r1, #6504	; 0x1968
    99c8:	19e3      	adds	r3, r4, r7
    99ca:	f641 126a 	movw	r2, #6506	; 0x196a
    99ce:	20c8      	movs	r0, #200	; 0xc8
    99d0:	5260      	strh	r0, [r4, r1]
    99d2:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    99d6:	2108      	movs	r1, #8
    99d8:	54a1      	strb	r1, [r4, r2]
    99da:	3004      	adds	r0, #4
    99dc:	51e5      	str	r5, [r4, r7]
    99de:	4629      	mov	r1, r5
    99e0:	605d      	str	r5, [r3, #4]
    99e2:	609d      	str	r5, [r3, #8]
    99e4:	60dd      	str	r5, [r3, #12]
    99e6:	611d      	str	r5, [r3, #16]
    99e8:	615d      	str	r5, [r3, #20]
    99ea:	223c      	movs	r2, #60	; 0x3c
    99ec:	f014 fd4e 	bl	1e48c <memset>
    static EthernetManager *instance = new EthernetManager();
    99f0:	4905      	ldr	r1, [pc, #20]	; (9a08 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    99f2:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    99f6:	2301      	movs	r3, #1
    99f8:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    99fa:	6015      	str	r5, [r2, #0]
    99fc:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    99fe:	6033      	str	r3, [r6, #0]
}
    9a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a02:	bf00      	nop
    9a04:	20001bec 	.word	0x20001bec
    9a08:	20001bf4 	.word	0x20001bf4

00009a0c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    9a0c:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    9a0e:	4b3e      	ldr	r3, [pc, #248]	; (9b08 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    9a10:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    9a14:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    9a18:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    9a1c:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9a1e:	493b      	ldr	r1, [pc, #236]	; (9b0c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    9a20:	f042 0210 	orr.w	r2, r2, #16
    9a24:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9a26:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9a28:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9a2a:	6893      	ldr	r3, [r2, #8]
    9a2c:	0759      	lsls	r1, r3, #29
    9a2e:	d5fc      	bpl.n	9a2a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    9a30:	6813      	ldr	r3, [r2, #0]
    9a32:	f36f 1304 	bfc	r3, #4, #1
    9a36:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9a38:	6b53      	ldr	r3, [r2, #52]	; 0x34
    9a3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9a3e:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    9a40:	428b      	cmp	r3, r1
    9a42:	d05d      	beq.n	9b00 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    9a44:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    9a46:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9a48:	4c31      	ldr	r4, [pc, #196]	; (9b10 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9a4a:	492f      	ldr	r1, [pc, #188]	; (9b08 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9a4c:	f043 0310 	orr.w	r3, r3, #16
    9a50:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9a52:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9a54:	688b      	ldr	r3, [r1, #8]
    9a56:	075a      	lsls	r2, r3, #29
    9a58:	d5fc      	bpl.n	9a54 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    9a5a:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9a5c:	4c2b      	ldr	r4, [pc, #172]	; (9b0c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9a5e:	4a2a      	ldr	r2, [pc, #168]	; (9b08 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9a60:	f36f 1304 	bfc	r3, #4, #1
    9a64:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9a66:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9a68:	680b      	ldr	r3, [r1, #0]
    9a6a:	f043 0310 	orr.w	r3, r3, #16
    9a6e:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9a70:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9a72:	6893      	ldr	r3, [r2, #8]
    9a74:	075b      	lsls	r3, r3, #29
    9a76:	d5fc      	bpl.n	9a72 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    9a78:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9a7a:	4c26      	ldr	r4, [pc, #152]	; (9b14 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9a7c:	4922      	ldr	r1, [pc, #136]	; (9b08 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9a7e:	f36f 1304 	bfc	r3, #4, #1
    9a82:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9a84:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9a86:	6813      	ldr	r3, [r2, #0]
    9a88:	f043 0310 	orr.w	r3, r3, #16
    9a8c:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9a8e:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9a90:	688b      	ldr	r3, [r1, #8]
    9a92:	075c      	lsls	r4, r3, #29
    9a94:	d5fc      	bpl.n	9a90 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    9a96:	680b      	ldr	r3, [r1, #0]
    9a98:	f36f 1304 	bfc	r3, #4, #1
    9a9c:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9a9e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9aa0:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    9aa2:	b12b      	cbz	r3, 9ab0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    9aa4:	2301      	movs	r3, #1
    9aa6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
    9aae:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    9ab0:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ab2:	4c19      	ldr	r4, [pc, #100]	; (9b18 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9ab4:	4a14      	ldr	r2, [pc, #80]	; (9b08 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9ab6:	f043 0310 	orr.w	r3, r3, #16
    9aba:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9abc:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9abe:	6893      	ldr	r3, [r2, #8]
    9ac0:	0759      	lsls	r1, r3, #29
    9ac2:	d5fc      	bpl.n	9abe <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    9ac4:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ac6:	4c13      	ldr	r4, [pc, #76]	; (9b14 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9ac8:	490f      	ldr	r1, [pc, #60]	; (9b08 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9aca:	f36f 1304 	bfc	r3, #4, #1
    9ace:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9ad0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9ad2:	6813      	ldr	r3, [r2, #0]
    9ad4:	f043 0310 	orr.w	r3, r3, #16
    9ad8:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ada:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9adc:	688b      	ldr	r3, [r1, #8]
    9ade:	075b      	lsls	r3, r3, #29
    9ae0:	d5fc      	bpl.n	9adc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    9ae2:	680b      	ldr	r3, [r1, #0]
    9ae4:	f36f 1304 	bfc	r3, #4, #1
    9ae8:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9aea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    9aec:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9af0:	2b07      	cmp	r3, #7
    9af2:	d1d7      	bne.n	9aa4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    9af4:	2300      	movs	r3, #0
    9af6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9afa:	f85d 4b04 	ldr.w	r4, [sp], #4
    9afe:	4770      	bx	lr
        m_phyInitFailed = true;
    9b00:	2301      	movs	r3, #1
    9b02:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    9b06:	4770      	bx	lr
    9b08:	42000800 	.word	0x42000800
    9b0c:	60020000 	.word	0x60020000
    9b10:	50028000 	.word	0x50028000
    9b14:	606e0000 	.word	0x606e0000
    9b18:	506e0700 	.word	0x506e0700

00009b1c <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    9b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9b20:	4be2      	ldr	r3, [pc, #904]	; (9eac <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    9b22:	681a      	ldr	r2, [r3, #0]
    9b24:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    9b26:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9b28:	d503      	bpl.n	9b32 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    9b2a:	681a      	ldr	r2, [r3, #0]
    9b2c:	0750      	lsls	r0, r2, #29
    9b2e:	f100 82a2 	bmi.w	a076 <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    9b32:	4ade      	ldr	r2, [pc, #888]	; (9eac <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9b34:	48de      	ldr	r0, [pc, #888]	; (9eb0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    9b36:	6813      	ldr	r3, [r2, #0]
    9b38:	f043 0310 	orr.w	r3, r3, #16
    9b3c:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    9b3e:	6853      	ldr	r3, [r2, #4]
    9b40:	f043 0301 	orr.w	r3, r3, #1
    9b44:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    9b46:	6853      	ldr	r3, [r2, #4]
    9b48:	f043 0302 	orr.w	r3, r3, #2
    9b4c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    9b4e:	6853      	ldr	r3, [r2, #4]
    9b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9b54:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    9b56:	6853      	ldr	r3, [r2, #4]
    9b58:	2104      	movs	r1, #4
    9b5a:	f361 4394 	bfi	r3, r1, #18, #3
    9b5e:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    9b60:	68d3      	ldr	r3, [r2, #12]
    9b62:	f36f 0300 	bfc	r3, #0, #1
    9b66:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    9b68:	6913      	ldr	r3, [r2, #16]
    9b6a:	f361 0304 	bfi	r3, r1, #0, #5
    9b6e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    9b70:	6913      	ldr	r3, [r2, #16]
    9b72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    9b76:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    9b78:	6913      	ldr	r3, [r2, #16]
    9b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9b7e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9b80:	6915      	ldr	r5, [r2, #16]
    9b82:	2302      	movs	r3, #2
    9b84:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9b88:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    9b8c:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9b8e:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    9b90:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9b94:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9b98:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    9b9c:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    9ba0:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    9ba4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    9ba8:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    9bac:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    9bb0:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    9bb4:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9bb8:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9bbc:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    9bc0:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9bc4:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9bc8:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    9bcc:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    9bd0:	66e3      	str	r3, [r4, #108]	; 0x6c
    9bd2:	6763      	str	r3, [r4, #116]	; 0x74
    9bd4:	67e3      	str	r3, [r4, #124]	; 0x7c
    9bd6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    9bda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9bde:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    9be2:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9be6:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9bea:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    9bee:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    9bf2:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    9bf6:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    9bfa:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    9bfe:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    9c02:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    9c06:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    9c0a:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    9c0e:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    9c12:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    9c16:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    9c1a:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    9c1e:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    9c22:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    9c26:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9c2a:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    9c2e:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    9c32:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9c36:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    9c3a:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    9c3e:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9c40:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    9c44:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    9c48:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    9c4c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9c50:	3610      	adds	r6, #16
    9c52:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    9c54:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9c58:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    9c5c:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    9c60:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9c62:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    9c66:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9c6a:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    9c6e:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9c70:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    9c72:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    9c76:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    9c7a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    9c7e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    9c82:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    9c86:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    9c8a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    9c8e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    9c92:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    9c96:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    9c9a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    9c9e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    9ca2:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9ca6:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9caa:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9cae:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    9cb0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cb4:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    9cb8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    9cbc:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    9cc0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    9cc4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    9cc8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    9ccc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cd0:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    9cd4:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    9cd8:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    9cdc:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    9ce0:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    9ce4:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    9ce8:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    9cec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cf0:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    9cf4:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    9cf8:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cfc:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9d00:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d04:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    9d08:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    9d0c:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    9d10:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    9d14:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    9d18:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d1c:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    9d20:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    9d24:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    9d26:	6196      	str	r6, [r2, #24]
    9d28:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9d2c:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9d30:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    9d32:	6823      	ldr	r3, [r4, #0]
    9d34:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    9d36:	01db      	lsls	r3, r3, #7
    9d38:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9d3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9d40:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d42:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    9d46:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    9d4a:	f042 0201 	orr.w	r2, r2, #1
    9d4e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d52:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9d56:	f011 0f01 	tst.w	r1, #1
    9d5a:	f04f 010b 	mov.w	r1, #11
    9d5e:	bf14      	ite	ne
    9d60:	f361 1207 	bfine	r2, r1, #4, #4
    9d64:	f361 0203 	bfieq	r2, r1, #0, #4
    9d68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    9d6c:	68a3      	ldr	r3, [r4, #8]
    9d6e:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    9d70:	01db      	lsls	r3, r3, #7
    9d72:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9d76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9d7a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d7c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9d80:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9d84:	f041 0101 	orr.w	r1, r1, #1
    9d88:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d8c:	f012 0f01 	tst.w	r2, #1
    9d90:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9d94:	f04f 010b 	mov.w	r1, #11
    9d98:	bf14      	ite	ne
    9d9a:	f361 1207 	bfine	r2, r1, #4, #4
    9d9e:	f361 0203 	bfieq	r2, r1, #0, #4
    9da2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    9da6:	6923      	ldr	r3, [r4, #16]
    9da8:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    9daa:	01db      	lsls	r3, r3, #7
    9dac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9db0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9db4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9db6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9dba:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9dbe:	f041 0101 	orr.w	r1, r1, #1
    9dc2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9dc6:	f012 0f01 	tst.w	r2, #1
    9dca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9dce:	f04f 010b 	mov.w	r1, #11
    9dd2:	bf14      	ite	ne
    9dd4:	f361 1207 	bfine	r2, r1, #4, #4
    9dd8:	f361 0203 	bfieq	r2, r1, #0, #4
    9ddc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    9de0:	69a3      	ldr	r3, [r4, #24]
    9de2:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    9de4:	01db      	lsls	r3, r3, #7
    9de6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9dea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9dee:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9df0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9df4:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9df8:	f041 0101 	orr.w	r1, r1, #1
    9dfc:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e00:	f012 0f01 	tst.w	r2, #1
    9e04:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9e08:	f04f 010b 	mov.w	r1, #11
    9e0c:	bf14      	ite	ne
    9e0e:	f361 1207 	bfine	r2, r1, #4, #4
    9e12:	f361 0203 	bfieq	r2, r1, #0, #4
    9e16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    9e1a:	6a23      	ldr	r3, [r4, #32]
    9e1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    9e1e:	01db      	lsls	r3, r3, #7
    9e20:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9e28:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e2a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9e2e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9e32:	f041 0101 	orr.w	r1, r1, #1
    9e36:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e3a:	f012 0f01 	tst.w	r2, #1
    9e3e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9e42:	f04f 010b 	mov.w	r1, #11
    9e46:	bf14      	ite	ne
    9e48:	f361 1207 	bfine	r2, r1, #4, #4
    9e4c:	f361 0203 	bfieq	r2, r1, #0, #4
    9e50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    9e54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9e56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    9e58:	01db      	lsls	r3, r3, #7
    9e5a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9e62:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e64:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9e68:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9e6c:	f041 0101 	orr.w	r1, r1, #1
    9e70:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e74:	f012 0f01 	tst.w	r2, #1
    9e78:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9e7c:	f04f 010b 	mov.w	r1, #11
    9e80:	bf14      	ite	ne
    9e82:	f361 1207 	bfine	r2, r1, #4, #4
    9e86:	f361 0203 	bfieq	r2, r1, #0, #4
    9e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    9e8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9e90:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    9e92:	01db      	lsls	r3, r3, #7
    9e94:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9e9c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e9e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9ea2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9ea6:	f041 0101 	orr.w	r1, r1, #1
    9eaa:	e003      	b.n	9eb4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    9eac:	42000800 	.word	0x42000800
    9eb0:	e000e100 	.word	0xe000e100
    9eb4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9eb8:	f012 0f01 	tst.w	r2, #1
    9ebc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9ec0:	f04f 010b 	mov.w	r1, #11
    9ec4:	bf14      	ite	ne
    9ec6:	f361 1207 	bfine	r2, r1, #4, #4
    9eca:	f361 0203 	bfieq	r2, r1, #0, #4
    9ece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    9ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9ed4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    9ed6:	01db      	lsls	r3, r3, #7
    9ed8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9edc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9ee0:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ee2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9ee6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9eea:	f041 0101 	orr.w	r1, r1, #1
    9eee:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ef2:	f012 0f01 	tst.w	r2, #1
    9ef6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9efa:	f04f 010b 	mov.w	r1, #11
    9efe:	bf14      	ite	ne
    9f00:	f361 1207 	bfine	r2, r1, #4, #4
    9f04:	f361 0203 	bfieq	r2, r1, #0, #4
    9f08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    9f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9f0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    9f10:	01db      	lsls	r3, r3, #7
    9f12:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9f16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9f1a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f1c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9f20:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9f24:	f041 0101 	orr.w	r1, r1, #1
    9f28:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f2c:	f012 0f01 	tst.w	r2, #1
    9f30:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9f34:	f04f 010b 	mov.w	r1, #11
    9f38:	bf14      	ite	ne
    9f3a:	f361 1207 	bfine	r2, r1, #4, #4
    9f3e:	f361 0203 	bfieq	r2, r1, #0, #4
    9f42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    9f46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9f48:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    9f4a:	01db      	lsls	r3, r3, #7
    9f4c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9f50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9f54:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f56:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9f5a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9f5e:	f041 0101 	orr.w	r1, r1, #1
    9f62:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f66:	f012 0f01 	tst.w	r2, #1
    9f6a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9f6e:	f04f 010b 	mov.w	r1, #11
    9f72:	bf14      	ite	ne
    9f74:	f361 1207 	bfine	r2, r1, #4, #4
    9f78:	f361 0203 	bfieq	r2, r1, #0, #4
    9f7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    9f80:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9f82:	6d61      	ldr	r1, [r4, #84]	; 0x54
    9f84:	01db      	lsls	r3, r3, #7
    9f86:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    9f8a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    9f8e:	1850      	adds	r0, r2, r1
    9f90:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    9f92:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    9f96:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    9f9a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    9f9e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    9fa2:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    9fa6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9faa:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    9fac:	bf14      	ite	ne
    9fae:	f36f 1007 	bfcne	r0, #4, #4
    9fb2:	f367 0003 	bfieq	r0, r7, #0, #4
    9fb6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    9fba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    9fbe:	4932      	ldr	r1, [pc, #200]	; (a088 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    9fc0:	4a32      	ldr	r2, [pc, #200]	; (a08c <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    9fc2:	f040 0001 	orr.w	r0, r0, #1
    9fc6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    9fca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    9fce:	f040 0002 	orr.w	r0, r0, #2
    9fd2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    9fd6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    9fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9fdc:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    9fde:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    9fe0:	f043 0302 	orr.w	r3, r3, #2
    9fe4:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    9fe6:	7813      	ldrb	r3, [r2, #0]
    9fe8:	f36f 0341 	bfc	r3, #1, #1
    9fec:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    9fee:	6853      	ldr	r3, [r2, #4]
    9ff0:	0799      	lsls	r1, r3, #30
    9ff2:	d4fc      	bmi.n	9fee <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    9ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    9ff6:	4925      	ldr	r1, [pc, #148]	; (a08c <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    9ff8:	08c3      	lsrs	r3, r0, #3
    9ffa:	009b      	lsls	r3, r3, #2
    9ffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    a000:	2701      	movs	r7, #1
    a002:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    a006:	4087      	lsls	r7, r0
    a008:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a00a:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a00e:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a010:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a012:	f04f 0e0f 	mov.w	lr, #15
    a016:	fa0e fe00 	lsl.w	lr, lr, r0
    a01a:	ea27 070e 	bic.w	r7, r7, lr
    a01e:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    a020:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    a024:	2705      	movs	r7, #5
    a026:	fa07 f000 	lsl.w	r0, r7, r0
    a02a:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    a02e:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    a030:	7813      	ldrb	r3, [r2, #0]
    a032:	f043 0302 	orr.w	r3, r3, #2
    a036:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a038:	684b      	ldr	r3, [r1, #4]
    a03a:	079b      	lsls	r3, r3, #30
    a03c:	d4fc      	bmi.n	a038 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    a03e:	4620      	mov	r0, r4
    a040:	f7ff fce4 	bl	9a0c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a044:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a048:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a04c:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a050:	4b0f      	ldr	r3, [pc, #60]	; (a090 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a052:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a054:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a058:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a05a:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a05e:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a062:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a066:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a068:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a06a:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a06c:	6818      	ldr	r0, [r3, #0]
}
    a06e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a072:	f007 bd8f 	b.w	11b94 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a076:	681a      	ldr	r2, [r3, #0]
    a078:	f36f 02c3 	bfc	r2, #3, #1
    a07c:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a07e:	681a      	ldr	r2, [r3, #0]
    a080:	f36f 0282 	bfc	r2, #2, #1
    a084:	601a      	str	r2, [r3, #0]
    a086:	e554      	b.n	9b32 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a088:	42000800 	.word	0x42000800
    a08c:	40002800 	.word	0x40002800
    a090:	20001f24 	.word	0x20001f24

0000a094 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    a094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a098:	6d85      	ldr	r5, [r0, #88]	; 0x58
    a09a:	4ca1      	ldr	r4, [pc, #644]	; (a320 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    a09c:	4ba1      	ldr	r3, [pc, #644]	; (a324 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a09e:	49a2      	ldr	r1, [pc, #648]	; (a328 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a0a0:	2201      	movs	r2, #1
    a0a2:	40aa      	lsls	r2, r5
    a0a4:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    a0a6:	681a      	ldr	r2, [r3, #0]
    a0a8:	f042 0210 	orr.w	r2, r2, #16
    a0ac:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a0ae:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a0b0:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a0b2:	6893      	ldr	r3, [r2, #8]
    a0b4:	075d      	lsls	r5, r3, #29
    a0b6:	d5fc      	bpl.n	a0b2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    a0b8:	6813      	ldr	r3, [r2, #0]
    a0ba:	f36f 1304 	bfc	r3, #4, #1
    a0be:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a0c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    a0c2:	07cc      	lsls	r4, r1, #31
    a0c4:	d415      	bmi.n	a0f2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    a0c6:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    a0c8:	bf44      	itt	mi
    a0ca:	2300      	movmi	r3, #0
    a0cc:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    a0d0:	078c      	lsls	r4, r1, #30
    a0d2:	d401      	bmi.n	a0d8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    a0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a0d8:	4b92      	ldr	r3, [pc, #584]	; (a324 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a0da:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    a0dc:	2101      	movs	r1, #1
    a0de:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a0e2:	0711      	lsls	r1, r2, #28
    a0e4:	d5f6      	bpl.n	a0d4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    a0e6:	681a      	ldr	r2, [r3, #0]
    a0e8:	0752      	lsls	r2, r2, #29
    a0ea:	f100 8121 	bmi.w	a330 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    a0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a0f2:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a0f4:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    a0f6:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a0f8:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a0fa:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    a0fe:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a102:	d56d      	bpl.n	a1e0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    a104:	6813      	ldr	r3, [r2, #0]
    a106:	075f      	lsls	r7, r3, #29
    a108:	d56a      	bpl.n	a1e0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a10a:	6813      	ldr	r3, [r2, #0]
    a10c:	f36f 03c3 	bfc	r3, #3, #1
    a110:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a112:	6813      	ldr	r3, [r2, #0]
    a114:	f36f 0382 	bfc	r3, #2, #1
    a118:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    a11a:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a11e:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a122:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a126:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a12a:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a12e:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a132:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a136:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a13a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a13e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a142:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a146:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a14a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a152:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a156:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a15a:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a15e:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a162:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a166:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a16a:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a16e:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a172:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a176:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a17a:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a17e:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a182:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a18e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a192:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a196:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a19a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a19e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1a2:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    a1a6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a1aa:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a1ae:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a1b2:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a1b6:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a1ba:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    a1be:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a1c2:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a1c6:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a1ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a1d2:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    a1d4:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a1d8:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a1dc:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    a1e0:	4b50      	ldr	r3, [pc, #320]	; (a324 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a1e2:	4d52      	ldr	r5, [pc, #328]	; (a32c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    a1e4:	681a      	ldr	r2, [r3, #0]
    a1e6:	f042 0210 	orr.w	r2, r2, #16
    a1ea:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a1ec:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a1ee:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a1f0:	6893      	ldr	r3, [r2, #8]
    a1f2:	075e      	lsls	r6, r3, #29
    a1f4:	d5fc      	bpl.n	a1f0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    a1f6:	6813      	ldr	r3, [r2, #0]
    a1f8:	f36f 1304 	bfc	r3, #4, #1
    a1fc:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a1fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a200:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    a202:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a204:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a208:	f366 0500 	bfi	r5, r6, #0, #1
    a20c:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    a20e:	6855      	ldr	r5, [r2, #4]
    a210:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a214:	f363 0541 	bfi	r5, r3, #1, #1
    a218:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a21a:	6813      	ldr	r3, [r2, #0]
    a21c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a220:	b96b      	cbnz	r3, a23e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    a222:	429c      	cmp	r4, r3
    a224:	f43f af4f 	beq.w	a0c6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a228:	b16c      	cbz	r4, a246 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    a22a:	4b3e      	ldr	r3, [pc, #248]	; (a324 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a22c:	681a      	ldr	r2, [r3, #0]
    a22e:	f042 0208 	orr.w	r2, r2, #8
    a232:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a234:	681a      	ldr	r2, [r3, #0]
    a236:	f042 0204 	orr.w	r2, r2, #4
    a23a:	601a      	str	r2, [r3, #0]
    a23c:	e743      	b.n	a0c6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a23e:	6813      	ldr	r3, [r2, #0]
    a240:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a244:	e7ed      	b.n	a222 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a246:	4b37      	ldr	r3, [pc, #220]	; (a324 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a248:	681a      	ldr	r2, [r3, #0]
    a24a:	f364 02c3 	bfi	r2, r4, #3, #1
    a24e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a250:	681a      	ldr	r2, [r3, #0]
    a252:	f364 0282 	bfi	r2, r4, #2, #1
    a256:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a258:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a25c:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a260:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a264:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a268:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a26c:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a270:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a274:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a278:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a27c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a280:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a284:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a288:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a290:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a294:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a298:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a29c:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a2a0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a2a4:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a2a8:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a2ac:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a2b0:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a2b4:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a2b8:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a2bc:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a2c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a2c8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2cc:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a2d0:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2d4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a2d8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2dc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    a2e0:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a2e4:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a2e8:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a2ec:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a2f0:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a2f4:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a2f8:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a2fc:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a300:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a304:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a308:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    a30c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a314:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a318:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    a31c:	e6d3      	b.n	a0c6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    a31e:	bf00      	nop
    a320:	40002800 	.word	0x40002800
    a324:	42000800 	.word	0x42000800
    a328:	606e0000 	.word	0x606e0000
    a32c:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a330:	681a      	ldr	r2, [r3, #0]
    a332:	f36f 02c3 	bfc	r2, #3, #1
    a336:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a338:	681a      	ldr	r2, [r3, #0]
    a33a:	f36f 0282 	bfc	r2, #2, #1
    a33e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a340:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a344:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a348:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a34c:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a350:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a354:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a358:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a35c:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a360:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a364:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a368:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a36c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a370:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a378:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a37c:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a380:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a384:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a388:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a38c:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a390:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a394:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a398:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a39c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3a4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3a8:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3ac:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3b0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3b4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3b8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3bc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3c0:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    a3c4:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a3c8:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a3cc:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a3d0:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a3d4:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a3d8:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a3dc:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a3e0:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    a3e4:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a3e8:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a3ec:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a3f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a3f8:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    a3fa:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a3fe:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a402:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    a406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a40a:	bf00      	nop

0000a40c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    a40c:	4b0b      	ldr	r3, [pc, #44]	; (a43c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    a40e:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    a410:	695a      	ldr	r2, [r3, #20]
    a412:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    a414:	6a1a      	ldr	r2, [r3, #32]
    a416:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    a418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    a41a:	9a00      	ldr	r2, [sp, #0]
    a41c:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    a41e:	bf44      	itt	mi
    a420:	9a00      	ldrmi	r2, [sp, #0]
    a422:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    a424:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    a426:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    a428:	079b      	lsls	r3, r3, #30
        m_recv = true;
    a42a:	bf44      	itt	mi
    a42c:	2301      	movmi	r3, #1
    a42e:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    a432:	4b02      	ldr	r3, [pc, #8]	; (a43c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    a434:	621a      	str	r2, [r3, #32]
}
    a436:	b002      	add	sp, #8
    a438:	4770      	bx	lr
    a43a:	bf00      	nop
    a43c:	42000800 	.word	0x42000800

0000a440 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    a440:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    a442:	f7ff fa6f 	bl	9924 <_ZN9ClearCore15EthernetManager8InstanceEv>
    a446:	4b01      	ldr	r3, [pc, #4]	; (a44c <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    a448:	6018      	str	r0, [r3, #0]
    a44a:	bd08      	pop	{r3, pc}
    a44c:	20001bf0 	.word	0x20001bf0

0000a450 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    a452:	4f46      	ldr	r7, [pc, #280]	; (a56c <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    a454:	f8df e118 	ldr.w	lr, [pc, #280]	; a570 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    a458:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    a45a:	4604      	mov	r4, r0
    m_lastOutput(0) {
    a45c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a45e:	4625      	mov	r5, r4
    a460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a462:	e896 0003 	ldmia.w	r6, {r0, r1}
    a466:	f107 0618 	add.w	r6, r7, #24
    a46a:	e885 0003 	stmia.w	r5, {r0, r1}
    a46e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a470:	f104 0518 	add.w	r5, r4, #24
    a474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a476:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    a47a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a47e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    a482:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a484:	f104 0534 	add.w	r5, r4, #52	; 0x34
    a488:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    a48c:	2608      	movs	r6, #8
    a48e:	257f      	movs	r5, #127	; 0x7f
    a490:	23c8      	movs	r3, #200	; 0xc8
    a492:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    a496:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    a49a:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    a49e:	2500      	movs	r5, #0
    a4a0:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    a4a4:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a4a6:	21fe      	movs	r1, #254	; 0xfe
    a4a8:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    a4ac:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a4b0:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    a4b4:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    a4b6:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a4b8:	4629      	mov	r1, r5
    a4ba:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    a4bc:	6563      	str	r3, [r4, #84]	; 0x54
    a4be:	65a5      	str	r5, [r4, #88]	; 0x58
    a4c0:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    a4c2:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    a4c6:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    a4ca:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a4cc:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    a4d0:	67a5      	str	r5, [r4, #120]	; 0x78
    a4d2:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    a4d6:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    a4d8:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a4da:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    a4de:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    a4e2:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    a4e6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4ea:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    a4ee:	2240      	movs	r2, #64	; 0x40
    a4f0:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    a4f4:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    a4f8:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    a4fc:	f013 ffc6 	bl	1e48c <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    a500:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    a504:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a508:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    a50c:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    a510:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a514:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    a518:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    a51c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    a520:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    a524:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a528:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    a52c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    a530:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    a534:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    a538:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    a53c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    a540:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    a544:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    a548:	4620      	mov	r0, r4
    m_lastOutput(0) {
    a54a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    a54e:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    a552:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    a556:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    a55a:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    a55e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    a562:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a566:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a56c:	00023120 	.word	0x00023120
    a570:	0fe080fc 	.word	0x0fe080fc

0000a574 <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    a574:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    a576:	4a64      	ldr	r2, [pc, #400]	; (a708 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a578:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a57c:	f36f 1386 	bfc	r3, #6, #1
    a580:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a584:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a588:	065d      	lsls	r5, r3, #25
    a58a:	d4fb      	bmi.n	a584 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    a58c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a590:	495d      	ldr	r1, [pc, #372]	; (a708 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a592:	2405      	movs	r4, #5
    a594:	f364 0303 	bfi	r3, r4, #0, #4
    a598:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a59c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a5a4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a5a8:	684b      	ldr	r3, [r1, #4]
    a5aa:	f013 0314 	ands.w	r3, r3, #20
    a5ae:	d1fb      	bne.n	a5a8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a5b0:	4d56      	ldr	r5, [pc, #344]	; (a70c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a5b2:	4957      	ldr	r1, [pc, #348]	; (a710 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a5b4:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a5b6:	4a57      	ldr	r2, [pc, #348]	; (a714 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a5b8:	f044 0404 	orr.w	r4, r4, #4
    a5bc:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a5be:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    a5c2:	2402      	movs	r4, #2
    a5c4:	f364 1507 	bfi	r5, r4, #4, #4
    a5c8:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    a5cc:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    a5d0:	f045 0501 	orr.w	r5, r5, #1
    a5d4:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    a5d8:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a5dc:	f364 1507 	bfi	r5, r4, #4, #4
    a5e0:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    a5e4:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    a5e8:	f045 0501 	orr.w	r5, r5, #1
    a5ec:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    a5f0:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a5f4:	f364 0503 	bfi	r5, r4, #0, #4
    a5f8:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a5fc:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a600:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a602:	f045 0501 	orr.w	r5, r5, #1
    a606:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    a60a:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a60e:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    a612:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    a616:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a61a:	6811      	ldr	r1, [r2, #0]
    a61c:	f363 0141 	bfi	r1, r3, #1, #1
    a620:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a622:	69d3      	ldr	r3, [r2, #28]
    a624:	f013 0302 	ands.w	r3, r3, #2
    a628:	d1fb      	bne.n	a622 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a62a:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a62c:	4939      	ldr	r1, [pc, #228]	; (a714 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a62e:	f044 040c 	orr.w	r4, r4, #12
    a632:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    a634:	6814      	ldr	r4, [r2, #0]
    a636:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    a63a:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    a63e:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    a640:	6854      	ldr	r4, [r2, #4]
    a642:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    a646:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    a648:	6894      	ldr	r4, [r2, #8]
    a64a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    a64e:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    a650:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    a652:	6813      	ldr	r3, [r2, #0]
    a654:	f043 0302 	orr.w	r3, r3, #2
    a658:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a65a:	69cb      	ldr	r3, [r1, #28]
    a65c:	079c      	lsls	r4, r3, #30
    a65e:	d4fc      	bmi.n	a65a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a660:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a664:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    a668:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a66c:	4a29      	ldr	r2, [pc, #164]	; (a714 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    a66e:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a670:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a672:	7e13      	ldrb	r3, [r2, #24]
    a674:	0799      	lsls	r1, r3, #30
    a676:	d5fc      	bpl.n	a672 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a678:	4b25      	ldr	r3, [pc, #148]	; (a710 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a67a:	4a26      	ldr	r2, [pc, #152]	; (a714 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a67c:	2104      	movs	r1, #4
    a67e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a682:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a686:	7e13      	ldrb	r3, [r2, #24]
    a688:	075b      	lsls	r3, r3, #29
    a68a:	d5fc      	bpl.n	a686 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a68c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    a68e:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a692:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    a696:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a69a:	4063      	eors	r3, r4
    a69c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a6a0:	bb7a      	cbnz	r2, a702 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a6a2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a6a6:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    a6aa:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a6ae:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    a6b2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    a6b6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    a6ba:	4059      	eors	r1, r3
    a6bc:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a6be:	404b      	eors	r3, r1
    a6c0:	ea83 0105 	eor.w	r1, r3, r5
    a6c4:	4031      	ands	r1, r6
    a6c6:	4059      	eors	r1, r3
    a6c8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    a6cc:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    a6d0:	404a      	eors	r2, r1
    a6d2:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a6d4:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    a6d6:	b135      	cbz	r5, a6e6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    a6d8:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    a6dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    a6e0:	b10a      	cbz	r2, a6e6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    a6e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    a6e6:	4d0b      	ldr	r5, [pc, #44]	; (a714 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a6e8:	4909      	ldr	r1, [pc, #36]	; (a710 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    a6ea:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    a6ee:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a6f0:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    a6f2:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    a6f4:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a6f6:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    a6fa:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    a6fc:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    a700:	4770      	bx	lr
        output = m_altOutput;
    a702:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    a706:	e7ee      	b.n	a6e6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    a708:	40001c00 	.word	0x40001c00
    a70c:	40000800 	.word	0x40000800
    a710:	41008000 	.word	0x41008000
    a714:	43000800 	.word	0x43000800

0000a718 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    a718:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    a71c:	2b00      	cmp	r3, #0
    a71e:	d078      	beq.n	a812 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    a720:	6d83      	ldr	r3, [r0, #88]	; 0x58
    a722:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    a724:	b4f0      	push	{r4, r5, r6, r7}
    a726:	6582      	str	r2, [r0, #88]	; 0x58
    a728:	b90b      	cbnz	r3, a72e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    a72a:	6d02      	ldr	r2, [r0, #80]	; 0x50
    a72c:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    a72e:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    a730:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    a734:	428a      	cmp	r2, r1
    a736:	bf34      	ite	cc
    a738:	220c      	movcc	r2, #12
    a73a:	2208      	movcs	r2, #8
    a73c:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    a73e:	3301      	adds	r3, #1
    a740:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    a742:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    a744:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    a748:	2b3e      	cmp	r3, #62	; 0x3e
    a74a:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    a74e:	d961      	bls.n	a814 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    a750:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    a754:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    a758:	2400      	movs	r4, #0
    a75a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    a75e:	2b00      	cmp	r3, #0
    a760:	f000 817a 	beq.w	aa58 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    a764:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    a768:	3101      	adds	r1, #1
    a76a:	b2c9      	uxtb	r1, r1
    a76c:	4299      	cmp	r1, r3
    a76e:	460a      	mov	r2, r1
    a770:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    a774:	f2c0 817e 	blt.w	aa74 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    a778:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    a77c:	4623      	mov	r3, r4
    a77e:	e04c      	b.n	a81a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    a780:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    a782:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    a784:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a788:	49b1      	ldr	r1, [pc, #708]	; (aa50 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    a78a:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a78e:	7e0b      	ldrb	r3, [r1, #24]
    a790:	079c      	lsls	r4, r3, #30
    a792:	d5fc      	bpl.n	a78e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a794:	4baf      	ldr	r3, [pc, #700]	; (aa54 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a796:	49ae      	ldr	r1, [pc, #696]	; (aa50 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a798:	2404      	movs	r4, #4
    a79a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a79e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a7a2:	7e0b      	ldrb	r3, [r1, #24]
    a7a4:	075b      	lsls	r3, r3, #29
    a7a6:	d5fc      	bpl.n	a7a2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a7a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a7aa:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    a7ae:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a7b2:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    a7b6:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a7ba:	4073      	eors	r3, r6
    a7bc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a7c0:	2900      	cmp	r1, #0
    a7c2:	f040 80d4 	bne.w	a96e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a7c6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a7ca:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a7ce:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    a7d2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    a7d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a7da:	405a      	eors	r2, r3
    a7dc:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a7de:	4053      	eors	r3, r2
    a7e0:	ea83 0204 	eor.w	r2, r3, r4
    a7e4:	402a      	ands	r2, r5
    a7e6:	405a      	eors	r2, r3
    a7e8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    a7ec:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    a7f0:	4051      	eors	r1, r2
    a7f2:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a7f4:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    a7f6:	b134      	cbz	r4, a806 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    a7f8:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    a7fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    a800:	b10a      	cbz	r2, a806 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    a802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    a806:	4a92      	ldr	r2, [pc, #584]	; (aa50 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    a808:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    a80c:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    a80e:	6293      	str	r3, [r2, #40]	; 0x28
}
    a810:	bcf0      	pop	{r4, r5, r6, r7}
    a812:	4770      	bx	lr
    a814:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    a818:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    a81a:	4293      	cmp	r3, r2
    a81c:	bfb4      	ite	lt
    a81e:	230c      	movlt	r3, #12
    a820:	2308      	movge	r3, #8
    a822:	4403      	add	r3, r0
            if (!m_activeMask) {
    a824:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    a828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    a82a:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    a82e:	2900      	cmp	r1, #0
    a830:	d0a6      	beq.n	a780 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    a832:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    a836:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    a838:	3301      	adds	r3, #1
    a83a:	b2db      	uxtb	r3, r3
    a83c:	2b3f      	cmp	r3, #63	; 0x3f
    a83e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    a842:	f200 8097 	bhi.w	a974 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    a846:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    a84a:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    a84c:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    a84e:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    a850:	d004      	beq.n	a85c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    a852:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    a856:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a858:	bfb8      	it	lt
    a85a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a85c:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    a860:	420a      	tst	r2, r1
    a862:	d004      	beq.n	a86e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    a864:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    a868:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a86a:	bfb8      	it	lt
    a86c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a86e:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    a872:	420a      	tst	r2, r1
    a874:	d004      	beq.n	a880 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    a876:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    a87a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a87c:	bfb8      	it	lt
    a87e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a880:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    a884:	420a      	tst	r2, r1
    a886:	d004      	beq.n	a892 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    a888:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    a88c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a88e:	bfb8      	it	lt
    a890:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a892:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    a896:	420a      	tst	r2, r1
    a898:	d004      	beq.n	a8a4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    a89a:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    a89e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a8a0:	bfb8      	it	lt
    a8a2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a8a4:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    a8a8:	420a      	tst	r2, r1
    a8aa:	d004      	beq.n	a8b6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    a8ac:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    a8b0:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a8b2:	bfb8      	it	lt
    a8b4:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a8b6:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    a8ba:	420a      	tst	r2, r1
    a8bc:	d004      	beq.n	a8c8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    a8be:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    a8c2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a8c4:	bfb8      	it	lt
    a8c6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a8c8:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    a8cc:	420a      	tst	r2, r1
    a8ce:	d004      	beq.n	a8da <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    a8d0:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    a8d4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a8d6:	bfb8      	it	lt
    a8d8:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a8da:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    a8de:	420a      	tst	r2, r1
    a8e0:	d004      	beq.n	a8ec <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    a8e2:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    a8e6:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a8e8:	bfb8      	it	lt
    a8ea:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a8ec:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    a8f0:	420a      	tst	r2, r1
    a8f2:	d004      	beq.n	a8fe <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    a8f4:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    a8f8:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a8fa:	bfb8      	it	lt
    a8fc:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a8fe:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    a902:	420a      	tst	r2, r1
    a904:	d004      	beq.n	a910 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    a906:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    a90a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a90c:	bfb8      	it	lt
    a90e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a910:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    a914:	420a      	tst	r2, r1
    a916:	d004      	beq.n	a922 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    a918:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    a91c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a91e:	bfb8      	it	lt
    a920:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a922:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    a926:	420a      	tst	r2, r1
    a928:	d004      	beq.n	a934 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    a92a:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    a92e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a930:	bfb8      	it	lt
    a932:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a934:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    a938:	420a      	tst	r2, r1
    a93a:	d004      	beq.n	a946 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    a93c:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    a940:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a942:	bfb8      	it	lt
    a944:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a946:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    a94a:	420a      	tst	r2, r1
    a94c:	d004      	beq.n	a958 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    a94e:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    a952:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a954:	bfb8      	it	lt
    a956:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a958:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    a95c:	4211      	tst	r1, r2
    a95e:	d004      	beq.n	a96a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    a960:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    a964:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a966:	bfb8      	it	lt
    a968:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    a96a:	6782      	str	r2, [r0, #120]	; 0x78
    a96c:	e70c      	b.n	a788 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    a96e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    a972:	e748      	b.n	a806 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    a974:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    a976:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    a97a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    a97e:	d004      	beq.n	a98a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    a980:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a984:	2a00      	cmp	r2, #0
    a986:	f040 80cb 	bne.w	ab20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    a98a:	078b      	lsls	r3, r1, #30
    a98c:	d504      	bpl.n	a998 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    a98e:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    a992:	2b00      	cmp	r3, #0
    a994:	f040 80be 	bne.w	ab14 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    a998:	074f      	lsls	r7, r1, #29
    a99a:	d504      	bpl.n	a9a6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    a99c:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    a9a0:	2b00      	cmp	r3, #0
    a9a2:	f040 80b1 	bne.w	ab08 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    a9a6:	070e      	lsls	r6, r1, #28
    a9a8:	d504      	bpl.n	a9b4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    a9aa:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    a9ae:	2b00      	cmp	r3, #0
    a9b0:	f040 80a4 	bne.w	aafc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    a9b4:	06cd      	lsls	r5, r1, #27
    a9b6:	d504      	bpl.n	a9c2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    a9b8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    a9bc:	2b00      	cmp	r3, #0
    a9be:	f040 8097 	bne.w	aaf0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    a9c2:	068c      	lsls	r4, r1, #26
    a9c4:	d504      	bpl.n	a9d0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    a9c6:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	f040 808a 	bne.w	aae4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    a9d0:	064b      	lsls	r3, r1, #25
    a9d2:	d503      	bpl.n	a9dc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    a9d4:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d17d      	bne.n	aad8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    a9dc:	060f      	lsls	r7, r1, #24
    a9de:	d503      	bpl.n	a9e8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    a9e0:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    a9e4:	2b00      	cmp	r3, #0
    a9e6:	d171      	bne.n	aacc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    a9e8:	05ce      	lsls	r6, r1, #23
    a9ea:	d503      	bpl.n	a9f4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    a9ec:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    a9f0:	2b00      	cmp	r3, #0
    a9f2:	d165      	bne.n	aac0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    a9f4:	058d      	lsls	r5, r1, #22
    a9f6:	d503      	bpl.n	aa00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    a9f8:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	d159      	bne.n	aab4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    aa00:	054c      	lsls	r4, r1, #21
    aa02:	d503      	bpl.n	aa0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    aa04:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    aa08:	2b00      	cmp	r3, #0
    aa0a:	d14d      	bne.n	aaa8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    aa0c:	050b      	lsls	r3, r1, #20
    aa0e:	d503      	bpl.n	aa18 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    aa10:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    aa14:	2b00      	cmp	r3, #0
    aa16:	d141      	bne.n	aa9c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    aa18:	04cf      	lsls	r7, r1, #19
    aa1a:	d503      	bpl.n	aa24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    aa1c:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    aa20:	2b00      	cmp	r3, #0
    aa22:	d135      	bne.n	aa90 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    aa24:	048e      	lsls	r6, r1, #18
    aa26:	d502      	bpl.n	aa2e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    aa28:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    aa2c:	bb53      	cbnz	r3, aa84 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    aa2e:	044d      	lsls	r5, r1, #17
    aa30:	d502      	bpl.n	aa38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    aa32:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    aa36:	b9fb      	cbnz	r3, aa78 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    aa38:	0bcb      	lsrs	r3, r1, #15
    aa3a:	d096      	beq.n	a96a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    aa3c:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    aa40:	2b00      	cmp	r3, #0
    aa42:	d092      	beq.n	a96a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    aa44:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    aa48:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    aa4c:	430a      	orrs	r2, r1
    aa4e:	e78c      	b.n	a96a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    aa50:	43000800 	.word	0x43000800
    aa54:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    aa58:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    aa5c:	3901      	subs	r1, #1
    aa5e:	b2c9      	uxtb	r1, r1
    aa60:	42a1      	cmp	r1, r4
    aa62:	460a      	mov	r2, r1
    aa64:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    aa68:	f73f aed7 	bgt.w	a81a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    aa6c:	2101      	movs	r1, #1
    aa6e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    aa72:	e6d2      	b.n	a81a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    aa74:	4623      	mov	r3, r4
    aa76:	e6d0      	b.n	a81a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    aa78:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    aa7c:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    aa80:	4322      	orrs	r2, r4
    aa82:	e7d9      	b.n	aa38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    aa84:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    aa88:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    aa8c:	4322      	orrs	r2, r4
    aa8e:	e7ce      	b.n	aa2e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    aa90:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    aa94:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    aa98:	4322      	orrs	r2, r4
    aa9a:	e7c3      	b.n	aa24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    aa9c:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    aaa0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    aaa4:	4322      	orrs	r2, r4
    aaa6:	e7b7      	b.n	aa18 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    aaa8:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    aaac:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    aab0:	4322      	orrs	r2, r4
    aab2:	e7ab      	b.n	aa0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    aab4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    aab8:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    aabc:	4322      	orrs	r2, r4
    aabe:	e79f      	b.n	aa00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    aac0:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    aac4:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    aac8:	4322      	orrs	r2, r4
    aaca:	e793      	b.n	a9f4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    aacc:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    aad0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    aad4:	4322      	orrs	r2, r4
    aad6:	e787      	b.n	a9e8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    aad8:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    aadc:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    aae0:	4322      	orrs	r2, r4
    aae2:	e77b      	b.n	a9dc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    aae4:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    aae8:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    aaec:	4322      	orrs	r2, r4
    aaee:	e76f      	b.n	a9d0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    aaf0:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    aaf4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    aaf8:	4322      	orrs	r2, r4
    aafa:	e762      	b.n	a9c2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    aafc:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    ab00:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    ab04:	4322      	orrs	r2, r4
    ab06:	e755      	b.n	a9b4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    ab08:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    ab0c:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    ab10:	4322      	orrs	r2, r4
    ab12:	e748      	b.n	a9a6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    ab14:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    ab18:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    ab1c:	4322      	orrs	r2, r4
    ab1e:	e73b      	b.n	a998 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    ab20:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    ab24:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    ab28:	e72f      	b.n	a98a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    ab2a:	bf00      	nop

0000ab2c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    ab30:	2301      	movs	r3, #1
    ab32:	f100 0834 	add.w	r8, r0, #52	; 0x34
    ab36:	4e4d      	ldr	r6, [pc, #308]	; (ac6c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ab38:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    ab3c:	b083      	sub	sp, #12
    ab3e:	4681      	mov	r9, r0
    m_useAltOutput = true;
    ab40:	4645      	mov	r5, r8
    ab42:	f100 0444 	add.w	r4, r0, #68	; 0x44
    ab46:	2200      	movs	r2, #0
    ab48:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    ab4a:	f855 3b04 	ldr.w	r3, [r5], #4
    ab4e:	4313      	orrs	r3, r2
    ab50:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ab54:	4630      	mov	r0, r6
    ab56:	4639      	mov	r1, r7
    ab58:	f7fe febe 	bl	98d8 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    ab5c:	42a5      	cmp	r5, r4
    ab5e:	d002      	beq.n	ab66 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    ab60:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    ab64:	e7f1      	b.n	ab4a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    ab66:	f109 0318 	add.w	r3, r9, #24
    ab6a:	4e40      	ldr	r6, [pc, #256]	; (ac6c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ab6c:	9301      	str	r3, [sp, #4]
    ab6e:	469b      	mov	fp, r3
    ab70:	f04f 0a00 	mov.w	sl, #0
    ab74:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    ab76:	f1ba 0f06 	cmp.w	sl, #6
    ab7a:	4630      	mov	r0, r6
    ab7c:	4639      	mov	r1, r7
    ab7e:	f10a 0a01 	add.w	sl, sl, #1
    ab82:	d148      	bne.n	ac16 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    ab84:	f8db 2000 	ldr.w	r2, [fp]
    ab88:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    ab8c:	4837      	ldr	r0, [pc, #220]	; (ac6c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ab8e:	4313      	orrs	r3, r2
    ab90:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ab94:	2100      	movs	r1, #0
    ab96:	f7fe fe9f 	bl	98d8 <Delay_cycles>
    ab9a:	4835      	ldr	r0, [pc, #212]	; (ac70 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    ab9c:	4e33      	ldr	r6, [pc, #204]	; (ac6c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ab9e:	2100      	movs	r1, #0
    aba0:	f7fe fe9a 	bl	98d8 <Delay_cycles>
    aba4:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    aba6:	f858 2b04 	ldr.w	r2, [r8], #4
    abaa:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    abae:	ea23 0302 	bic.w	r3, r3, r2
    abb2:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    abb6:	4630      	mov	r0, r6
    abb8:	4639      	mov	r1, r7
    abba:	f7fe fe8d 	bl	98d8 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    abbe:	4545      	cmp	r5, r8
    abc0:	d1f1      	bne.n	aba6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    abc2:	f3bf 8f5b 	dmb	ish
    abc6:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    abca:	e853 2f00 	ldrex	r2, [r3]
    abce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    abd2:	e843 2100 	strex	r1, r2, [r3]
    abd6:	2900      	cmp	r1, #0
    abd8:	d1f7      	bne.n	abca <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    abda:	f3bf 8f5b 	dmb	ish
    abde:	4e23      	ldr	r6, [pc, #140]	; (ac6c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    abe0:	2500      	movs	r5, #0
    abe2:	2700      	movs	r7, #0
    abe4:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    abe6:	2d06      	cmp	r5, #6
    abe8:	461a      	mov	r2, r3
    abea:	4630      	mov	r0, r6
    abec:	4639      	mov	r1, r7
    abee:	f105 0501 	add.w	r5, r5, #1
    abf2:	d122      	bne.n	ac3a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    abf4:	681a      	ldr	r2, [r3, #0]
    abf6:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    abfa:	481c      	ldr	r0, [pc, #112]	; (ac6c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    abfc:	ea23 0302 	bic.w	r3, r3, r2
    ac00:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ac04:	2100      	movs	r1, #0
    ac06:	f7fe fe67 	bl	98d8 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    ac0a:	2300      	movs	r3, #0
    ac0c:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    ac10:	b003      	add	sp, #12
    ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    ac16:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    ac1a:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    ac1e:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    ac22:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    ac24:	4313      	orrs	r3, r2
    ac26:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ac2a:	f7fe fe55 	bl	98d8 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    ac2e:	f1ba 0f07 	cmp.w	sl, #7
    ac32:	f10b 0b04 	add.w	fp, fp, #4
    ac36:	d19e      	bne.n	ab76 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    ac38:	e7af      	b.n	ab9a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    ac3a:	f853 3c18 	ldr.w	r3, [r3, #-24]
    ac3e:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    ac42:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    ac44:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    ac48:	ea23 0302 	bic.w	r3, r3, r2
    ac4c:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ac50:	9b01      	ldr	r3, [sp, #4]
    ac52:	3304      	adds	r3, #4
    ac54:	9301      	str	r3, [sp, #4]
    ac56:	f7fe fe3f 	bl	98d8 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    ac5a:	2d07      	cmp	r5, #7
    ac5c:	d1c2      	bne.n	abe4 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    ac5e:	2300      	movs	r3, #0
    ac60:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    ac64:	b003      	add	sp, #12
    ac66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac6a:	bf00      	nop
    ac6c:	002dc6c0 	.word	0x002dc6c0
    ac70:	005b8d80 	.word	0x005b8d80

0000ac74 <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    ac76:	4d0e      	ldr	r5, [pc, #56]	; (acb0 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    ac78:	682b      	ldr	r3, [r5, #0]
    ac7a:	f013 0401 	ands.w	r4, r3, #1
    ac7e:	d002      	beq.n	ac86 <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    ac80:	4b0c      	ldr	r3, [pc, #48]	; (acb4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    ac82:	6818      	ldr	r0, [r3, #0]
    ac84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac86:	2010      	movs	r0, #16
    ac88:	f008 fb62 	bl	13350 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    ac8c:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    ac8e:	4909      	ldr	r1, [pc, #36]	; (acb4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    ac90:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    ac92:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    ac94:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    ac96:	2617      	movs	r6, #23
      m_initialized(false) {
    ac98:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    ac9a:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    ac9c:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    ac9e:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    aca0:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    aca2:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    aca4:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    aca6:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    aca8:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    acaa:	7342      	strb	r2, [r0, #13]
}
    acac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acae:	bf00      	nop
    acb0:	20001bf8 	.word	0x20001bf8
    acb4:	20001c00 	.word	0x20001c00

0000acb8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    acb8:	7843      	ldrb	r3, [r0, #1]
    acba:	428b      	cmp	r3, r1
    acbc:	d06d      	beq.n	ad9a <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    acbe:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    acc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    acc4:	d071      	beq.n	adaa <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    acc6:	d363      	bcc.n	ad90 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    acc8:	2902      	cmp	r1, #2
    acca:	d16b      	bne.n	ada4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    accc:	4e39      	ldr	r6, [pc, #228]	; (adb4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    acce:	f240 188f 	movw	r8, #399	; 0x18f
    acd2:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    acd6:	4a38      	ldr	r2, [pc, #224]	; (adb8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    acd8:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    acda:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    acdc:	4b37      	ldr	r3, [pc, #220]	; (adbc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    acde:	f36f 0441 	bfc	r4, #1, #1
    ace2:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    ace4:	681c      	ldr	r4, [r3, #0]
    ace6:	f36f 0441 	bfc	r4, #1, #1
    acea:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    acec:	6893      	ldr	r3, [r2, #8]
    acee:	079c      	lsls	r4, r3, #30
    acf0:	d4fc      	bmi.n	acec <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    acf2:	4d32      	ldr	r5, [pc, #200]	; (adbc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    acf4:	68ac      	ldr	r4, [r5, #8]
    acf6:	f014 0402 	ands.w	r4, r4, #2
    acfa:	d1fb      	bne.n	acf4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    acfc:	4631      	mov	r1, r6
    acfe:	7800      	ldrb	r0, [r0, #0]
    ad00:	4e2f      	ldr	r6, [pc, #188]	; (adc0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    ad02:	f000 fead 	bl	ba60 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    ad06:	492f      	ldr	r1, [pc, #188]	; (adc4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    ad08:	4a2f      	ldr	r2, [pc, #188]	; (adc8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    ad0a:	4b2b      	ldr	r3, [pc, #172]	; (adb8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    ad0c:	482f      	ldr	r0, [pc, #188]	; (adcc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    ad0e:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    ad10:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    ad12:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ad14:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ad16:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ad18:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ad1a:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ad1c:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ad1e:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ad20:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ad22:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    ad24:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    ad28:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    ad2a:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    ad2c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    ad30:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    ad32:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    ad36:	3018      	adds	r0, #24
    ad38:	3104      	adds	r1, #4
    ad3a:	3204      	adds	r2, #4
    ad3c:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ad3e:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ad40:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ad42:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ad44:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ad46:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ad48:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ad4a:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    ad4c:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    ad50:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    ad54:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    ad58:	f856 0b04 	ldr.w	r0, [r6], #4
    ad5c:	4639      	mov	r1, r7
    ad5e:	3030      	adds	r0, #48	; 0x30
    ad60:	f000 fcb2 	bl	b6c8 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    ad64:	42b4      	cmp	r4, r6
    ad66:	d1f7      	bne.n	ad58 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    ad68:	4a13      	ldr	r2, [pc, #76]	; (adb8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    ad6a:	4914      	ldr	r1, [pc, #80]	; (adbc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    ad6c:	6813      	ldr	r3, [r2, #0]
    ad6e:	f043 0302 	orr.w	r3, r3, #2
    ad72:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    ad74:	680b      	ldr	r3, [r1, #0]
    ad76:	f043 0302 	orr.w	r3, r3, #2
    ad7a:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    ad7c:	6893      	ldr	r3, [r2, #8]
    ad7e:	0799      	lsls	r1, r3, #30
    ad80:	d4fc      	bmi.n	ad7c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    ad82:	4a0e      	ldr	r2, [pc, #56]	; (adbc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    ad84:	6893      	ldr	r3, [r2, #8]
    ad86:	079b      	lsls	r3, r3, #30
    ad88:	d4fc      	bmi.n	ad84 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    ad8a:	2001      	movs	r0, #1
    ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    ad90:	f04f 0813 	mov.w	r8, #19
    ad94:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    ad96:	4e0e      	ldr	r6, [pc, #56]	; (add0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    ad98:	e79d      	b.n	acd6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    ad9a:	7b83      	ldrb	r3, [r0, #14]
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	d08e      	beq.n	acbe <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    ada0:	2000      	movs	r0, #0
    ada2:	4770      	bx	lr
        return false;
    ada4:	2000      	movs	r0, #0
    ada6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    adaa:	f04f 0863 	mov.w	r8, #99	; 0x63
    adae:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    adb0:	4e08      	ldr	r6, [pc, #32]	; (add4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    adb2:	e790      	b.n	acd6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    adb4:	001e8480 	.word	0x001e8480
    adb8:	41016000 	.word	0x41016000
    adbc:	41018000 	.word	0x41018000
    adc0:	00022d7c 	.word	0x00022d7c
    adc4:	41016004 	.word	0x41016004
    adc8:	41016008 	.word	0x41016008
    adcc:	4101600c 	.word	0x4101600c
    add0:	000186a0 	.word	0x000186a0
    add4:	0007a120 	.word	0x0007a120

0000add8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    add8:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    adda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    adde:	4606      	mov	r6, r0
    ade0:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    ade2:	d036      	beq.n	ae52 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    ade4:	460c      	mov	r4, r1
    ade6:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    adea:	2f03      	cmp	r7, #3
    adec:	d907      	bls.n	adfe <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    adee:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    adf0:	7b38      	ldrb	r0, [r7, #12]
    adf2:	1b40      	subs	r0, r0, r5
    adf4:	fab0 f080 	clz	r0, r0
    adf8:	0940      	lsrs	r0, r0, #5
    adfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    adfe:	f8df 90c0 	ldr.w	r9, [pc, #192]	; aec0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ae02:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    ae06:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ae08:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    ae0c:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ae0e:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    ae10:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ae14:	685b      	ldr	r3, [r3, #4]
    ae16:	4629      	mov	r1, r5
    ae18:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    ae1a:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    ae1e:	6803      	ldr	r3, [r0, #0]
    ae20:	4629      	mov	r1, r5
    ae22:	685b      	ldr	r3, [r3, #4]
    ae24:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    ae26:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    ae2a:	f997 2002 	ldrsb.w	r2, [r7, #2]
    ae2e:	684b      	ldr	r3, [r1, #4]
    ae30:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    ae34:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ae38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    ae3c:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    ae3e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ae42:	bf0c      	ite	eq
    ae44:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    ae48:	f36f 0200 	bfcne	r2, #0, #1
    ae4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ae50:	e7ce      	b.n	adf0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    ae52:	f1a2 0709 	sub.w	r7, r2, #9
    ae56:	2f03      	cmp	r7, #3
    ae58:	d907      	bls.n	ae6a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    ae5a:	7b33      	ldrb	r3, [r6, #12]
    ae5c:	42ab      	cmp	r3, r5
    ae5e:	d002      	beq.n	ae66 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    ae60:	2000      	movs	r0, #0
}
    ae62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ae66:	2401      	movs	r4, #1
    ae68:	e7bf      	b.n	adea <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ae6a:	f8df 9054 	ldr.w	r9, [pc, #84]	; aec0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    ae6e:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ae70:	f8d9 0000 	ldr.w	r0, [r9]
    ae74:	6803      	ldr	r3, [r0, #0]
    ae76:	4611      	mov	r1, r2
    ae78:	685b      	ldr	r3, [r3, #4]
    ae7a:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    ae7c:	f8d9 0004 	ldr.w	r0, [r9, #4]
    ae80:	6803      	ldr	r3, [r0, #0]
    ae82:	4629      	mov	r1, r5
    ae84:	685b      	ldr	r3, [r3, #4]
    ae86:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    ae88:	f996 2002 	ldrsb.w	r2, [r6, #2]
    ae8c:	6873      	ldr	r3, [r6, #4]
    ae8e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    ae92:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ae96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    ae9a:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    ae9c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    aea0:	d004      	beq.n	aeac <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    aea2:	f36f 0200 	bfc	r2, #0, #1
    aea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    aeaa:	e7d6      	b.n	ae5a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    aeac:	f042 0201 	orr.w	r2, r2, #1
    aeb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    aeb4:	7b33      	ldrb	r3, [r6, #12]
    aeb6:	2b0a      	cmp	r3, #10
    aeb8:	d1d2      	bne.n	ae60 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    aeba:	2401      	movs	r4, #1
    aebc:	e7a1      	b.n	ae02 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    aebe:	bf00      	nop
    aec0:	00022d7c 	.word	0x00022d7c

0000aec4 <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    aec4:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    aec6:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    aec8:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    aeca:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    aecc:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    aece:	2101      	movs	r1, #1
    aed0:	f7ff fef2 	bl	acb8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    aed4:	f995 2002 	ldrsb.w	r2, [r5, #2]
    aed8:	6868      	ldr	r0, [r5, #4]
    aeda:	01d2      	lsls	r2, r2, #7
    aedc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    aee0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    aee4:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    aee6:	2101      	movs	r1, #1
    aee8:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    aeea:	2600      	movs	r6, #0
    aeec:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    aef0:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    aef2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    aef6:	f010 0f01 	tst.w	r0, #1
    aefa:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    aefe:	f04f 040c 	mov.w	r4, #12
    af02:	bf0c      	ite	eq
    af04:	f364 0003 	bfieq	r0, r4, #0, #4
    af08:	f364 1007 	bfine	r0, r4, #4, #4
    af0c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    af10:	4b2d      	ldr	r3, [pc, #180]	; (afc8 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    af12:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    af14:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    af16:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    af18:	f995 2003 	ldrsb.w	r2, [r5, #3]
    af1c:	68a9      	ldr	r1, [r5, #8]
    af1e:	01d2      	lsls	r2, r2, #7
    af20:	4413      	add	r3, r2
    af22:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    af24:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    af26:	2600      	movs	r6, #0
    af28:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    af2c:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    af2e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    af32:	f011 0f01 	tst.w	r1, #1
    af36:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    af3a:	4e24      	ldr	r6, [pc, #144]	; (afcc <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    af3c:	f04f 040c 	mov.w	r4, #12
    af40:	bf14      	ite	ne
    af42:	f364 1107 	bfine	r1, r4, #4, #4
    af46:	f364 0103 	bfieq	r1, r4, #0, #4
    af4a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    af4e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    af52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    af56:	2400      	movs	r4, #0
    af58:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    af5a:	f856 0b04 	ldr.w	r0, [r6], #4
    af5e:	f3c4 0346 	ubfx	r3, r4, #1, #7
    af62:	6802      	ldr	r2, [r0, #0]
    af64:	442b      	add	r3, r5
    af66:	6852      	ldr	r2, [r2, #4]
    af68:	7b19      	ldrb	r1, [r3, #12]
    af6a:	3401      	adds	r4, #1
    af6c:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    af6e:	2c04      	cmp	r4, #4
    af70:	d1f3      	bne.n	af5a <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    af72:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    af74:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    af78:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    af7a:	686b      	ldr	r3, [r5, #4]
    af7c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    af80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    af84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    af88:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    af8c:	bf14      	ite	ne
    af8e:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    af92:	f042 0201 	orreq.w	r2, r2, #1
    af96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    af9a:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    af9c:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    afa0:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    afa2:	68ab      	ldr	r3, [r5, #8]
    afa4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    afa8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    afac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    afb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    afb4:	bf0c      	ite	eq
    afb6:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    afba:	f36f 0200 	bfcne	r2, #0, #1
    afbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    afc2:	2301      	movs	r3, #1
    afc4:	73ab      	strb	r3, [r5, #14]
    afc6:	bd70      	pop	{r4, r5, r6, pc}
    afc8:	41008000 	.word	0x41008000
    afcc:	00022d7c 	.word	0x00022d7c

0000afd0 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    afd0:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    afd2:	f7ff fe4f 	bl	ac74 <_ZN9ClearCore12MotorManager8InstanceEv>
    afd6:	4b01      	ldr	r3, [pc, #4]	; (afdc <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    afd8:	6018      	str	r0, [r3, #0]
    afda:	bd08      	pop	{r3, pc}
    afdc:	20001bfc 	.word	0x20001bfc

0000afe0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afe2:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    afe4:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    afe6:	f890 3020 	ldrb.w	r3, [r0, #32]
    afea:	b113      	cbz	r3, aff2 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    afec:	2300      	movs	r3, #0
    afee:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    aff0:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    aff2:	b362      	cbz	r2, b04e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    aff4:	69a0      	ldr	r0, [r4, #24]
    aff6:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    aff8:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    affa:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    affc:	bb2b      	cbnz	r3, b04a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    affe:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b000:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    b004:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b008:	2700      	movs	r7, #0
    b00a:	4032      	ands	r2, r6
    b00c:	403b      	ands	r3, r7
    m_stepsSent = 0;
    b00e:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    b010:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b012:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    b016:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    b018:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    b01c:	f010 fd00 	bl	1ba20 <__aeabi_i2d>
    b020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    b024:	4619      	mov	r1, r3
    b026:	f010 fffb 	bl	1c020 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    b02a:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b02c:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b02e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b030:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    b032:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    b036:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    b038:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    b03a:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b03c:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b03e:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b040:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    b042:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b044:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    b046:	4618      	mov	r0, r3
    b048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b04a:	4240      	negs	r0, r0
    b04c:	e7d7      	b.n	affe <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    b04e:	6960      	ldr	r0, [r4, #20]
    b050:	1a08      	subs	r0, r1, r0
            break;
    b052:	e7d5      	b.n	b000 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000b054 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b056:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b058:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    b05a:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    b05c:	0fca      	lsrs	r2, r1, #31
    b05e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    b062:	f884 3020 	strb.w	r3, [r4, #32]
    b066:	4608      	mov	r0, r1
    b068:	f010 fcda 	bl	1ba20 <__aeabi_i2d>
    b06c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    b070:	4619      	mov	r1, r3
    b072:	f010 ffd5 	bl	1c020 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b076:	17c3      	asrs	r3, r0, #31
    b078:	03d9      	lsls	r1, r3, #15
    b07a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b07e:	f241 3288 	movw	r2, #5000	; 0x1388
    b082:	2300      	movs	r3, #0
    b084:	03c0      	lsls	r0, r0, #15
    b086:	f011 f971 	bl	1c36c <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b08a:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b08c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b090:	03de      	lsls	r6, r3, #15
    b092:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b094:	42b2      	cmp	r2, r6
    b096:	f04f 0300 	mov.w	r3, #0
    b09a:	eb73 0507 	sbcs.w	r5, r3, r7
    b09e:	bfbc      	itt	lt
    b0a0:	4616      	movlt	r6, r2
    b0a2:	461f      	movlt	r7, r3
    b0a4:	4286      	cmp	r6, r0
    b0a6:	460b      	mov	r3, r1
    b0a8:	4602      	mov	r2, r0
    b0aa:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b0ae:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b0b2:	bfb8      	it	lt
    b0b4:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b0b6:	2700      	movs	r7, #0
    b0b8:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b0bc:	4030      	ands	r0, r6
    b0be:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    b0c0:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    b0c2:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b0c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b0c6:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b0c8:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    b0ca:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    b0ce:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b0d0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    b0d4:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    b0d6:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    b0d8:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b0da:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    b0dc:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    b0de:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    b0e0:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b0e2:	b662      	cpsie	i
}
    b0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b0e6:	bf00      	nop

0000b0e8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    b0ec:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    b0ee:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    b0f2:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    b0f4:	b085      	sub	sp, #20
    b0f6:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    b0f8:	d038      	beq.n	b16c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    b0fa:	2b07      	cmp	r3, #7
    b0fc:	f200 80da 	bhi.w	b2b4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    b100:	e8df f013 	tbh	[pc, r3, lsl #1]
    b104:	00d8002f 	.word	0x00d8002f
    b108:	00be01d7 	.word	0x00be01d7
    b10c:	025f0086 	.word	0x025f0086
    b110:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    b114:	7b41      	ldrb	r1, [r0, #13]
    b116:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b11a:	428b      	cmp	r3, r1
    b11c:	f000 822d 	beq.w	b57a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    b120:	6980      	ldr	r0, [r0, #24]
    b122:	69e3      	ldr	r3, [r4, #28]
    b124:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b126:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b12a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    b12e:	2300      	movs	r3, #0
    b130:	4016      	ands	r6, r2
    b132:	401f      	ands	r7, r3
    b134:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    b138:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    b13c:	2501      	movs	r5, #1
            m_moveDirChange = false;
    b13e:	2300      	movs	r3, #0
    b140:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    b142:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    b146:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    b148:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b14c:	0bf2      	lsrs	r2, r6, #15
    b14e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    b152:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    b154:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b156:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    b158:	6962      	ldr	r2, [r4, #20]
    b15a:	b101      	cbz	r1, b15e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    b15c:	425b      	negs	r3, r3
    b15e:	4413      	add	r3, r2
    b160:	6163      	str	r3, [r4, #20]
}
    b162:	b005      	add	sp, #20
    b164:	ecbd 8b02 	vpop	{d8}
    b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b16c:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    b16e:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    b172:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    b176:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    b17a:	1457      	asrs	r7, r2, #17
    b17c:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b17e:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    b182:	2900      	cmp	r1, #0
    b184:	d163      	bne.n	b24e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    b186:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b188:	2d00      	cmp	r5, #0
    b18a:	f000 8117 	beq.w	b3bc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    b18e:	7b41      	ldrb	r1, [r0, #13]
    b190:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    b194:	9100      	str	r1, [sp, #0]
    b196:	4291      	cmp	r1, r2
    b198:	f000 81f8 	beq.w	b58c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    b19c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    b1a0:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    b1a2:	2305      	movs	r3, #5
    b1a4:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    b1a6:	6520      	str	r0, [r4, #80]	; 0x50
    b1a8:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b1aa:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b1ae:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    b1b2:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    b1b4:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b1b8:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    b1bc:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b1be:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    b1c2:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    b1c4:	f300 80ab 	bgt.w	b31e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    b1c8:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    b1ca:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b1ce:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    b1d2:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    b1d4:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b1d8:	4629      	mov	r1, r5
    b1da:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    b1dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b1e0:	f011 f914 	bl	1c40c <__aeabi_uldivmod>
    b1e4:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b1e6:	fba0 bc05 	umull	fp, ip, r0, r5
    b1ea:	fb00 cc03 	mla	ip, r0, r3, ip
    b1ee:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    b1f2:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    b1f4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    b1f8:	eb47 0709 	adc.w	r7, r7, r9
    b1fc:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    b200:	2900      	cmp	r1, #0
    b202:	f000 816e 	beq.w	b4e2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    b206:	2307      	movs	r3, #7
    b208:	7323      	strb	r3, [r4, #12]
    b20a:	9900      	ldr	r1, [sp, #0]
    b20c:	69e3      	ldr	r3, [r4, #28]
    b20e:	e79d      	b.n	b14c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b210:	6c01      	ldr	r1, [r0, #64]	; 0x40
    b212:	6c40      	ldr	r0, [r0, #68]	; 0x44
    b214:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b218:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b21c:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    b220:	1952      	adds	r2, r2, r5
    b222:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b226:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    b228:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b22c:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    b230:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b232:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b236:	da54      	bge.n	b2e2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b238:	2900      	cmp	r1, #0
    b23a:	dd52      	ble.n	b2e2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b23c:	2a01      	cmp	r2, #1
    b23e:	f173 0100 	sbcs.w	r1, r3, #0
    b242:	db4e      	blt.n	b2e2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b244:	461f      	mov	r7, r3
    b246:	4616      	mov	r6, r2
    b248:	69e3      	ldr	r3, [r4, #28]
    b24a:	7b61      	ldrb	r1, [r4, #13]
    b24c:	e77e      	b.n	b14c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b24e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b250:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b252:	2b00      	cmp	r3, #0
    b254:	f000 80a1 	beq.w	b39a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    b258:	2d00      	cmp	r5, #0
    b25a:	f040 8130 	bne.w	b4be <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    b25e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    b262:	6820      	ldr	r0, [r4, #0]
    b264:	6523      	str	r3, [r4, #80]	; 0x50
    b266:	2100      	movs	r1, #0
    b268:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    b26a:	7362      	strb	r2, [r4, #13]
    b26c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    b270:	4620      	mov	r0, r4
    b272:	4798      	blx	r3
    b274:	7b63      	ldrb	r3, [r4, #13]
    b276:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    b27a:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b27c:	9300      	str	r3, [sp, #0]
    b27e:	e094      	b.n	b3aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    b280:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    b284:	7b43      	ldrb	r3, [r0, #13]
    b286:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    b28a:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    b28c:	4652      	mov	r2, sl
    b28e:	eb16 060a 	adds.w	r6, r6, sl
    b292:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    b296:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    b29a:	415f      	adcs	r7, r3
    b29c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    b2a0:	2900      	cmp	r1, #0
    b2a2:	d03f      	beq.n	b324 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    b2a4:	f1ba 0f00 	cmp.w	sl, #0
    b2a8:	d139      	bne.n	b31e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    b2aa:	2306      	movs	r3, #6
    b2ac:	7323      	strb	r3, [r4, #12]
    b2ae:	9900      	ldr	r1, [sp, #0]
    b2b0:	69e3      	ldr	r3, [r4, #28]
    b2b2:	e74b      	b.n	b14c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    b2b4:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    b2b6:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    b2b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b2bc:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    b2c0:	2000      	movs	r0, #0
    b2c2:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    b2c4:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    b2c6:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    b2c8:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    b2ca:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    b2cc:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    b2ce:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    b2d0:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    b2d4:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    b2d8:	b005      	add	sp, #20
    b2da:	ecbd 8b02 	vpop	{d8}
    b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    b2e2:	2300      	movs	r3, #0
                m_moveState = MS_END;
    b2e4:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    b2e6:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    b2e8:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    b2ea:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    b2ee:	7322      	strb	r2, [r4, #12]
    b2f0:	69e3      	ldr	r3, [r4, #28]
    b2f2:	7b61      	ldrb	r1, [r4, #13]
    b2f4:	e72a      	b.n	b14c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    b2f6:	2302      	movs	r3, #2
    b2f8:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b2fa:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b2fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b300:	eb05 0263 	add.w	r2, r5, r3, asr #1
    b304:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    b306:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b308:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b30c:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    b30e:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b310:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b314:	f280 80a2 	bge.w	b45c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b318:	2d00      	cmp	r5, #0
    b31a:	f340 809f 	ble.w	b45c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b31e:	9900      	ldr	r1, [sp, #0]
    b320:	69e3      	ldr	r3, [r4, #28]
    b322:	e713      	b.n	b14c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    b324:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    b328:	4286      	cmp	r6, r0
    b32a:	eb77 0501 	sbcs.w	r5, r7, r1
    b32e:	da03      	bge.n	b338 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    b330:	2e01      	cmp	r6, #1
    b332:	f177 0500 	sbcs.w	r5, r7, #0
    b336:	daf2      	bge.n	b31e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    b338:	2500      	movs	r5, #0
    b33a:	1a31      	subs	r1, r6, r0
    b33c:	4628      	mov	r0, r5
    b33e:	f011 f865 	bl	1c40c <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    b342:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b344:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    b348:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b34a:	fb00 9e03 	mla	lr, r0, r3, r9
    b34e:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b350:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b354:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b358:	fb0e 330c 	mla	r3, lr, ip, r3
    b35c:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    b35e:	1a32      	subs	r2, r6, r0
    b360:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b364:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    b368:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    b36a:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b36e:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    b372:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    b374:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b378:	f280 80a9 	bge.w	b4ce <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    b37c:	42a8      	cmp	r0, r5
    b37e:	f340 80a6 	ble.w	b4ce <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    b382:	2a01      	cmp	r2, #1
    b384:	f173 0100 	sbcs.w	r1, r3, #0
    b388:	f2c0 80a1 	blt.w	b4ce <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    b38c:	2004      	movs	r0, #4
    b38e:	461f      	mov	r7, r3
    b390:	9900      	ldr	r1, [sp, #0]
    b392:	7320      	strb	r0, [r4, #12]
    b394:	4616      	mov	r6, r2
    b396:	69e3      	ldr	r3, [r4, #28]
    b398:	e6d8      	b.n	b14c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    b39a:	7b42      	ldrb	r2, [r0, #13]
    b39c:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    b39e:	4619      	mov	r1, r3
    b3a0:	2000      	movs	r0, #0
    b3a2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b3a6:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    b3a8:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    b3aa:	4555      	cmp	r5, sl
    b3ac:	f000 80db 	beq.w	b566 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    b3b0:	dda1      	ble.n	b2f6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    b3b2:	2305      	movs	r3, #5
    b3b4:	7323      	strb	r3, [r4, #12]
    b3b6:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b3ba:	e6f6      	b.n	b1aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    b3bc:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    b3c0:	4611      	mov	r1, r2
    b3c2:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    b3c4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b3c8:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    b3ca:	4613      	mov	r3, r2
    b3cc:	429f      	cmp	r7, r3
    b3ce:	bf08      	it	eq
    b3d0:	428e      	cmpeq	r6, r1
    b3d2:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    b3d6:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    b3da:	d00e      	beq.n	b3fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    b3dc:	6803      	ldr	r3, [r0, #0]
    b3de:	689b      	ldr	r3, [r3, #8]
    b3e0:	4798      	blx	r3
    b3e2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b3e6:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	f040 80ca 	bne.w	b582 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    b3ee:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    b3f2:	e9cd 2300 	strd	r2, r3, [sp]
    b3f6:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    b3fa:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b3fe:	0fcb      	lsrs	r3, r1, #31
    b400:	18c0      	adds	r0, r0, r3
    b402:	464e      	mov	r6, r9
    b404:	f141 0100 	adc.w	r1, r1, #0
    b408:	17f7      	asrs	r7, r6, #31
    b40a:	1049      	asrs	r1, r1, #1
    b40c:	ea4f 0030 	mov.w	r0, r0, rrx
    b410:	464a      	mov	r2, r9
    b412:	463b      	mov	r3, r7
    b414:	f010 ffaa 	bl	1c36c <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b418:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b420:	464a      	mov	r2, r9
    b422:	463b      	mov	r3, r7
    b424:	fb8a 010a 	smull	r0, r1, sl, sl
    b428:	f010 ffa0 	bl	1c36c <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    b42c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b430:	1a82      	subs	r2, r0, r2
    b432:	eb61 0303 	sbc.w	r3, r1, r3
    b436:	4610      	mov	r0, r2
    b438:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b43a:	e9dd 2300 	ldrd	r2, r3, [sp]
    b43e:	4282      	cmp	r2, r0
    b440:	418b      	sbcs	r3, r1
    b442:	db63      	blt.n	b50c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    b444:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    b448:	4555      	cmp	r5, sl
    b44a:	f340 8091 	ble.w	b570 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    b44e:	2305      	movs	r3, #5
    b450:	7323      	strb	r3, [r4, #12]
    b452:	7b63      	ldrb	r3, [r4, #13]
    b454:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b458:	9300      	str	r3, [sp, #0]
    b45a:	e6a6      	b.n	b1aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    b45c:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    b45e:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    b462:	4691      	mov	r9, r2
    b464:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b466:	461a      	mov	r2, r3
    b468:	4629      	mov	r1, r5
    b46a:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    b46c:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b470:	2000      	movs	r0, #0
    b472:	f010 ffcb 	bl	1c40c <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b476:	4602      	mov	r2, r0
    b478:	fba2 0105 	umull	r0, r1, r2, r5
    b47c:	2300      	movs	r3, #0
    b47e:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b482:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    b486:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b488:	4642      	mov	r2, r8
    b48a:	464b      	mov	r3, r9
    b48c:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b490:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b494:	f010 ffba 	bl	1c40c <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b498:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b49c:	0849      	lsrs	r1, r1, #1
    b49e:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b4a2:	1a12      	subs	r2, r2, r0
    b4a4:	eb63 0301 	sbc.w	r3, r3, r1
    b4a8:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    b4ac:	2303      	movs	r3, #3
    b4ae:	7323      	strb	r3, [r4, #12]
    b4b0:	e6ec      	b.n	b28c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    b4b2:	7b43      	ldrb	r3, [r0, #13]
    b4b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b4b6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b4ba:	9300      	str	r3, [sp, #0]
    b4bc:	e71d      	b.n	b2fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b4be:	7b40      	ldrb	r0, [r0, #13]
    b4c0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b4c4:	9000      	str	r0, [sp, #0]
    b4c6:	4290      	cmp	r0, r2
    b4c8:	f47f af6a 	bne.w	b3a0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    b4cc:	e6c9      	b.n	b262 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    b4ce:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    b4d0:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    b4d2:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    b4d4:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    b4d6:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    b4da:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    b4dc:	7322      	strb	r2, [r4, #12]
    b4de:	69e3      	ldr	r3, [r4, #28]
    b4e0:	e634      	b.n	b14c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b4e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b4e6:	fb8a 010a 	smull	r0, r1, sl, sl
    b4ea:	f010 ff8f 	bl	1c40c <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b4ee:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b4f2:	0849      	lsrs	r1, r1, #1
    b4f4:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b4f8:	1a12      	subs	r2, r2, r0
    b4fa:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    b4fe:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b500:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    b504:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    b506:	7320      	strb	r0, [r4, #12]
    b508:	69e3      	ldr	r3, [r4, #28]
    b50a:	e61f      	b.n	b14c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b50c:	69a6      	ldr	r6, [r4, #24]
    b50e:	17f1      	asrs	r1, r6, #31
    b510:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b516:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b518:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b51a:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    b51e:	4159      	adcs	r1, r3
    b520:	460b      	mov	r3, r1
    b522:	fb00 f107 	mul.w	r1, r0, r7
    b526:	fb09 1303 	mla	r3, r9, r3, r1
    b52a:	fba0 0109 	umull	r0, r1, r0, r9
    b52e:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    b530:	f010 fede 	bl	1c2f0 <__aeabi_l2f>
    b534:	ee00 0a10 	vmov	s0, r0
    b538:	eeb5 0a40 	vcmp.f32	s0, #0.0
    b53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b540:	eeb1 8ac0 	vsqrt.f32	s16, s0
    b544:	d439      	bmi.n	b5ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    b546:	ee18 0a10 	vmov	r0, s16
    b54a:	f010 ff77 	bl	1c43c <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    b54e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b552:	4282      	cmp	r2, r0
    b554:	f04f 0300 	mov.w	r3, #0
    b558:	eb73 0601 	sbcs.w	r6, r3, r1
    b55c:	bfb8      	it	lt
    b55e:	4610      	movlt	r0, r2
    b560:	6520      	str	r0, [r4, #80]	; 0x50
    b562:	4682      	mov	sl, r0
    b564:	e770      	b.n	b448 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    b566:	2303      	movs	r3, #3
    b568:	7323      	strb	r3, [r4, #12]
    b56a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b56e:	e68d      	b.n	b28c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    b570:	2302      	movs	r3, #2
    b572:	7323      	strb	r3, [r4, #12]
    b574:	7b63      	ldrb	r3, [r4, #13]
    b576:	9300      	str	r3, [sp, #0]
    b578:	e6bf      	b.n	b2fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    b57a:	69c0      	ldr	r0, [r0, #28]
    b57c:	69a3      	ldr	r3, [r4, #24]
    b57e:	1ac0      	subs	r0, r0, r3
    b580:	e5d1      	b.n	b126 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    b582:	7b63      	ldrb	r3, [r4, #13]
    b584:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b588:	9300      	str	r3, [sp, #0]
    b58a:	e609      	b.n	b1a0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    b58c:	464a      	mov	r2, r9
    b58e:	17d3      	asrs	r3, r2, #31
    b590:	fb85 0105 	smull	r0, r1, r5, r5
    b594:	f010 feea 	bl	1c36c <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b598:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    b59c:	1049      	asrs	r1, r1, #1
    b59e:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b5a2:	1ab6      	subs	r6, r6, r2
    b5a4:	eb67 0703 	sbc.w	r7, r7, r3
    b5a8:	4286      	cmp	r6, r0
    b5aa:	eb77 0301 	sbcs.w	r3, r7, r1
    b5ae:	bfb4      	ite	lt
    b5b0:	2301      	movlt	r3, #1
    b5b2:	2300      	movge	r3, #0
    b5b4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    b5b8:	e716      	b.n	b3e8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    b5ba:	f00f fc6d 	bl	1ae98 <sqrtf>
    b5be:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b5c0:	e7c1      	b.n	b546 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    b5c2:	7b43      	ldrb	r3, [r0, #13]
    b5c4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b5c6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b5ca:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    b5ce:	9300      	str	r3, [sp, #0]
    b5d0:	e5eb      	b.n	b1aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    b5d2:	bf00      	nop

0000b5d4 <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    b5d4:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    b5d6:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    b5d8:	4916      	ldr	r1, [pc, #88]	; (b634 <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    b5da:	6001      	str	r1, [r0, #0]
    b5dc:	2200      	movs	r2, #0
    b5de:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    b5e2:	2501      	movs	r5, #1
    b5e4:	2102      	movs	r1, #2
    b5e6:	2600      	movs	r6, #0
    b5e8:	2700      	movs	r7, #0
    b5ea:	f362 1486 	bfi	r4, r2, #6, #1
    b5ee:	7404      	strb	r4, [r0, #16]
    b5f0:	6042      	str	r2, [r0, #4]
    b5f2:	6082      	str	r2, [r0, #8]
    b5f4:	7302      	strb	r2, [r0, #12]
    b5f6:	7342      	strb	r2, [r0, #13]
    b5f8:	6142      	str	r2, [r0, #20]
    b5fa:	6182      	str	r2, [r0, #24]
    b5fc:	61c2      	str	r2, [r0, #28]
    b5fe:	f880 2020 	strb.w	r2, [r0, #32]
    b602:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    b606:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    b60a:	6282      	str	r2, [r0, #40]	; 0x28
    b60c:	6402      	str	r2, [r0, #64]	; 0x40
    b60e:	6442      	str	r2, [r0, #68]	; 0x44
    b610:	6502      	str	r2, [r0, #80]	; 0x50
    b612:	6642      	str	r2, [r0, #100]	; 0x64
    b614:	7385      	strb	r5, [r0, #14]
    b616:	6245      	str	r5, [r0, #36]	; 0x24
    b618:	6605      	str	r5, [r0, #96]	; 0x60
    b61a:	62c1      	str	r1, [r0, #44]	; 0x2c
    b61c:	6301      	str	r1, [r0, #48]	; 0x30
    b61e:	6681      	str	r1, [r0, #104]	; 0x68
    b620:	66c1      	str	r1, [r0, #108]	; 0x6c
    b622:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    b626:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    b62a:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    b62e:	bcf0      	pop	{r4, r5, r6, r7}
    b630:	4770      	bx	lr
    b632:	bf00      	nop
    b634:	0002316c 	.word	0x0002316c

0000b638 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    b638:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b63a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b63c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b63e:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b640:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b642:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b644:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b646:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b648:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b64a:	2700      	movs	r7, #0
    b64c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b650:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b652:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b654:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b656:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b658:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b65a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b65c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b660:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b662:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b664:	b662      	cpsie	i
}
    b666:	bcd0      	pop	{r4, r6, r7}
    b668:	4770      	bx	lr
    b66a:	bf00      	nop
    b66c:	0000      	movs	r0, r0
	...

0000b670 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    b670:	b510      	push	{r4, lr}
    b672:	4604      	mov	r4, r0
    if (decelMax != 0) {
    b674:	b191      	cbz	r1, b69c <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    b676:	a312      	add	r3, pc, #72	; (adr r3, b6c0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    b678:	e9d3 2300 	ldrd	r2, r3, [r3]
    b67c:	03c8      	lsls	r0, r1, #15
    b67e:	0c49      	lsrs	r1, r1, #17
    b680:	f010 fe74 	bl	1c36c <__aeabi_ldivmod>
    b684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b686:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    b688:	f020 0201 	bic.w	r2, r0, #1
    b68c:	bfb8      	it	lt
    b68e:	2302      	movlt	r3, #2
    b690:	4293      	cmp	r3, r2
    b692:	4618      	mov	r0, r3
    b694:	bfb8      	it	lt
    b696:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    b698:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b69a:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    b69c:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b69e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b6a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    b6a2:	4293      	cmp	r3, r2
    b6a4:	bfb8      	it	lt
    b6a6:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b6a8:	2100      	movs	r1, #0
    m_velocityMove = true;
    b6aa:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b6ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b6ae:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    b6b0:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    b6b4:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b6b6:	b662      	cpsie	i
    b6b8:	bd10      	pop	{r4, pc}
    b6ba:	bf00      	nop
    b6bc:	f3af 8000 	nop.w
    b6c0:	017d7840 	.word	0x017d7840
    b6c4:	00000000 	.word	0x00000000

0000b6c8 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    b6c8:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b6ca:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b6cc:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b6ce:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b6d0:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b6d2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b6d4:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b6d6:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b6d8:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b6da:	2700      	movs	r7, #0
    b6dc:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b6e0:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b6e2:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b6e4:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b6e6:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b6e8:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b6ea:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b6ec:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b6f0:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b6f2:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b6f4:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    b6f6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b6fa:	03ca      	lsls	r2, r1, #15
    b6fc:	0c4b      	lsrs	r3, r1, #17
    b6fe:	4294      	cmp	r4, r2
    b700:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    b704:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    b706:	eb75 0103 	sbcs.w	r1, r5, r3
    b70a:	bfbc      	itt	lt
    b70c:	4622      	movlt	r2, r4
    b70e:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    b710:	2a01      	cmp	r2, #1
    b712:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    b716:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    b718:	bfbc      	itt	lt
    b71a:	2201      	movlt	r2, #1
    b71c:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    b71e:	17e5      	asrs	r5, r4, #31
    b720:	4294      	cmp	r4, r2
    b722:	eb75 0103 	sbcs.w	r1, r5, r3
    b726:	bfb8      	it	lt
    b728:	4622      	movlt	r2, r4
    b72a:	6602      	str	r2, [r0, #96]	; 0x60
}
    b72c:	bcf0      	pop	{r4, r5, r6, r7}
    b72e:	4770      	bx	lr

0000b730 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    b730:	6843      	ldr	r3, [r0, #4]
    b732:	b363      	cbz	r3, b78e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    b734:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    b736:	f013 0218 	ands.w	r2, r3, #24
    b73a:	d12a      	bne.n	b792 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    b73c:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    b73e:	7c02      	ldrb	r2, [r0, #16]
    b740:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    b744:	b2d2      	uxtb	r2, r2
    b746:	4613      	mov	r3, r2
    b748:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    b74c:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    b750:	b2db      	uxtb	r3, r3
    b752:	461a      	mov	r2, r3
    b754:	f3c3 1300 	ubfx	r3, r3, #4, #1
    b758:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    b75c:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    b75e:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    b760:	075a      	lsls	r2, r3, #29
    b762:	d514      	bpl.n	b78e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    b764:	7b42      	ldrb	r2, [r0, #13]
    b766:	b9e2      	cbnz	r2, b7a2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    b768:	0719      	lsls	r1, r3, #28
    b76a:	d510      	bpl.n	b78e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    b76c:	f043 0301 	orr.w	r3, r3, #1
    b770:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    b772:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b774:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    b776:	6b02      	ldr	r2, [r0, #48]	; 0x30
    b778:	4293      	cmp	r3, r2
    b77a:	bfb8      	it	lt
    b77c:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b77e:	2100      	movs	r1, #0
    m_velocityMove = true;
    b780:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b782:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b784:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    b786:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    b78a:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b78c:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    b78e:	2000      	movs	r0, #0
    b790:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    b792:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    b796:	f3c3 1341 	ubfx	r3, r3, #5, #2
    b79a:	1ad3      	subs	r3, r2, r3
    b79c:	bf18      	it	ne
    b79e:	2301      	movne	r3, #1
    b7a0:	e7cd      	b.n	b73e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    b7a2:	06da      	lsls	r2, r3, #27
    b7a4:	d5f3      	bpl.n	b78e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    b7a6:	f043 0302 	orr.w	r3, r3, #2
    b7aa:	7403      	strb	r3, [r0, #16]
    b7ac:	e7e1      	b.n	b772 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    b7ae:	bf00      	nop

0000b7b0 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    b7b0:	4ba1      	ldr	r3, [pc, #644]	; (ba38 <SystemInit+0x288>)
    b7b2:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    b7b6:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    b7b8:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    b7ba:	691a      	ldr	r2, [r3, #16]
    b7bc:	0792      	lsls	r2, r2, #30
    b7be:	d5fc      	bpl.n	b7ba <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    b7c0:	4a9e      	ldr	r2, [pc, #632]	; (ba3c <SystemInit+0x28c>)
    b7c2:	4b9f      	ldr	r3, [pc, #636]	; (ba40 <SystemInit+0x290>)
    b7c4:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    b7c6:	6853      	ldr	r3, [r2, #4]
    b7c8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    b7cc:	d1fb      	bne.n	b7c6 <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    b7ce:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    b7d2:	499a      	ldr	r1, [pc, #616]	; (ba3c <SystemInit+0x28c>)
    b7d4:	f363 1086 	bfi	r0, r3, #6, #1
    b7d8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    b7dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b7e0:	065b      	lsls	r3, r3, #25
    b7e2:	d4fb      	bmi.n	b7dc <SystemInit+0x2c>
    b7e4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b7e8:	4a94      	ldr	r2, [pc, #592]	; (ba3c <SystemInit+0x28c>)
    b7ea:	2005      	movs	r0, #5
    b7ec:	f360 0303 	bfi	r3, r0, #0, #4
    b7f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    b7f4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b7fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    b800:	6853      	ldr	r3, [r2, #4]
    b802:	f013 0f14 	tst.w	r3, #20
    b806:	d1fb      	bne.n	b800 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    b808:	4b8b      	ldr	r3, [pc, #556]	; (ba38 <SystemInit+0x288>)
    b80a:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    b80c:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    b80e:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    b810:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    b812:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    b814:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    b816:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    b81a:	6913      	ldr	r3, [r2, #16]
    b81c:	01df      	lsls	r7, r3, #7
    b81e:	d4fc      	bmi.n	b81a <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    b820:	4a86      	ldr	r2, [pc, #536]	; (ba3c <SystemInit+0x28c>)
    b822:	f44f 7384 	mov.w	r3, #264	; 0x108
    b826:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    b828:	6853      	ldr	r3, [r2, #4]
    b82a:	f013 0304 	ands.w	r3, r3, #4
    b82e:	d1fb      	bne.n	b828 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    b830:	4884      	ldr	r0, [pc, #528]	; (ba44 <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    b832:	4982      	ldr	r1, [pc, #520]	; (ba3c <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    b834:	2401      	movs	r4, #1
    b836:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    b838:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    b83c:	f363 1086 	bfi	r0, r3, #6, #1
    b840:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    b844:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b848:	065e      	lsls	r6, r3, #25
    b84a:	d4fb      	bmi.n	b844 <SystemInit+0x94>
    b84c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b850:	4a7a      	ldr	r2, [pc, #488]	; (ba3c <SystemInit+0x28c>)
    b852:	2005      	movs	r0, #5
    b854:	f360 0303 	bfi	r3, r0, #0, #4
    b858:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    b85c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    b868:	6853      	ldr	r3, [r2, #4]
    b86a:	f013 0314 	ands.w	r3, r3, #20
    b86e:	d1fb      	bne.n	b868 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b870:	4871      	ldr	r0, [pc, #452]	; (ba38 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    b872:	4972      	ldr	r1, [pc, #456]	; (ba3c <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b874:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    b876:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    b878:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b87a:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    b87c:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    b87e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    b882:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    b886:	f363 1086 	bfi	r0, r3, #6, #1
    b88a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    b88e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    b892:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b896:	2b00      	cmp	r3, #0
    b898:	d1f9      	bne.n	b88e <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    b89a:	4c67      	ldr	r4, [pc, #412]	; (ba38 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    b89c:	486a      	ldr	r0, [pc, #424]	; (ba48 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    b89e:	4a67      	ldr	r2, [pc, #412]	; (ba3c <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    b8a0:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    b8a2:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    b8a4:	6853      	ldr	r3, [r2, #4]
    b8a6:	065d      	lsls	r5, r3, #25
    b8a8:	d4fc      	bmi.n	b8a4 <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b8aa:	4b66      	ldr	r3, [pc, #408]	; (ba44 <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    b8ac:	4967      	ldr	r1, [pc, #412]	; (ba4c <SystemInit+0x29c>)
    b8ae:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b8b0:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b8b2:	4e67      	ldr	r6, [pc, #412]	; (ba50 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    b8b4:	4d67      	ldr	r5, [pc, #412]	; (ba54 <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    b8b6:	4c68      	ldr	r4, [pc, #416]	; (ba58 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    b8b8:	4960      	ldr	r1, [pc, #384]	; (ba3c <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b8ba:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    b8be:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    b8c0:	6998      	ldr	r0, [r3, #24]
    b8c2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b8c6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    b8c8:	6958      	ldr	r0, [r3, #20]
    b8ca:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b8ce:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    b8d0:	6998      	ldr	r0, [r3, #24]
    b8d2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    b8d6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    b8d8:	6998      	ldr	r0, [r3, #24]
    b8da:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    b8de:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    b8e0:	69d8      	ldr	r0, [r3, #28]
    b8e2:	f040 0020 	orr.w	r0, r0, #32
    b8e6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    b8e8:	6918      	ldr	r0, [r3, #16]
    b8ea:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b8ee:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    b8f0:	69d8      	ldr	r0, [r3, #28]
    b8f2:	f040 0004 	orr.w	r0, r0, #4
    b8f6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    b8f8:	6a18      	ldr	r0, [r3, #32]
    b8fa:	f040 0001 	orr.w	r0, r0, #1
    b8fe:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    b900:	6a18      	ldr	r0, [r3, #32]
    b902:	f040 0008 	orr.w	r0, r0, #8
    b906:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    b908:	6a18      	ldr	r0, [r3, #32]
    b90a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b90e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    b910:	69d8      	ldr	r0, [r3, #28]
    b912:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b916:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    b918:	6958      	ldr	r0, [r3, #20]
    b91a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b91e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    b920:	6a18      	ldr	r0, [r3, #32]
    b922:	f040 0020 	orr.w	r0, r0, #32
    b926:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b928:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    b92a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b92e:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    b930:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    b934:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    b936:	684b      	ldr	r3, [r1, #4]
    b938:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    b93c:	d1fb      	bne.n	b936 <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    b93e:	4a47      	ldr	r2, [pc, #284]	; (ba5c <SystemInit+0x2ac>)
    b940:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    b942:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    b946:	4a3d      	ldr	r2, [pc, #244]	; (ba3c <SystemInit+0x28c>)
    b948:	f363 1086 	bfi	r0, r3, #6, #1
    b94c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    b950:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    b954:	065c      	lsls	r4, r3, #25
    b956:	d4fb      	bmi.n	b950 <SystemInit+0x1a0>
    b958:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    b95c:	4937      	ldr	r1, [pc, #220]	; (ba3c <SystemInit+0x28c>)
    b95e:	2006      	movs	r0, #6
    b960:	f360 0303 	bfi	r3, r0, #0, #4
    b964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    b968:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    b96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    b974:	684b      	ldr	r3, [r1, #4]
    b976:	f013 0318 	ands.w	r3, r3, #24
    b97a:	d1fb      	bne.n	b974 <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    b97c:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    b980:	4a2e      	ldr	r2, [pc, #184]	; (ba3c <SystemInit+0x28c>)
    b982:	f363 1086 	bfi	r0, r3, #6, #1
    b986:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    b98a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    b98e:	0658      	lsls	r0, r3, #25
    b990:	d4fb      	bmi.n	b98a <SystemInit+0x1da>
    b992:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    b996:	4929      	ldr	r1, [pc, #164]	; (ba3c <SystemInit+0x28c>)
    b998:	2006      	movs	r0, #6
    b99a:	f360 0303 	bfi	r3, r0, #0, #4
    b99e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    b9a2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    b9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9aa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    b9ae:	684b      	ldr	r3, [r1, #4]
    b9b0:	f013 0318 	ands.w	r3, r3, #24
    b9b4:	d1fb      	bne.n	b9ae <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    b9b6:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    b9ba:	4a20      	ldr	r2, [pc, #128]	; (ba3c <SystemInit+0x28c>)
    b9bc:	f363 1086 	bfi	r0, r3, #6, #1
    b9c0:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    b9c4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    b9c8:	0659      	lsls	r1, r3, #25
    b9ca:	d4fb      	bmi.n	b9c4 <SystemInit+0x214>
    b9cc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    b9d0:	491a      	ldr	r1, [pc, #104]	; (ba3c <SystemInit+0x28c>)
    b9d2:	2006      	movs	r0, #6
    b9d4:	f360 0303 	bfi	r3, r0, #0, #4
    b9d8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    b9dc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    b9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9e4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    b9e8:	684b      	ldr	r3, [r1, #4]
    b9ea:	f013 0318 	ands.w	r3, r3, #24
    b9ee:	d1fb      	bne.n	b9e8 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    b9f0:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    b9f4:	4a11      	ldr	r2, [pc, #68]	; (ba3c <SystemInit+0x28c>)
    b9f6:	f363 1086 	bfi	r0, r3, #6, #1
    b9fa:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    b9fe:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ba02:	065b      	lsls	r3, r3, #25
    ba04:	d4fb      	bmi.n	b9fe <SystemInit+0x24e>
    ba06:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ba0a:	490c      	ldr	r1, [pc, #48]	; (ba3c <SystemInit+0x28c>)
    ba0c:	2006      	movs	r0, #6
    ba0e:	f360 0303 	bfi	r3, r0, #0, #4
    ba12:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    ba16:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ba1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba1e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    ba22:	684b      	ldr	r3, [r1, #4]
    ba24:	f013 0f18 	tst.w	r3, #24
    ba28:	d1fb      	bne.n	ba22 <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    ba2a:	4a04      	ldr	r2, [pc, #16]	; (ba3c <SystemInit+0x28c>)
    ba2c:	6853      	ldr	r3, [r2, #4]
    ba2e:	2b00      	cmp	r3, #0
    ba30:	d1fc      	bne.n	ba2c <SystemInit+0x27c>
        continue;
    }
    return;
}
    ba32:	bcf0      	pop	{r4, r5, r6, r7}
    ba34:	4770      	bx	lr
    ba36:	bf00      	nop
    ba38:	40001000 	.word	0x40001000
    ba3c:	40001c00 	.word	0x40001c00
    ba40:	00190301 	.word	0x00190301
    ba44:	40000800 	.word	0x40000800
    ba48:	00020107 	.word	0x00020107
    ba4c:	00320b01 	.word	0x00320b01
    ba50:	41006000 	.word	0x41006000
    ba54:	e000ed00 	.word	0xe000ed00
    ba58:	003a0108 	.word	0x003a0108
    ba5c:	000c0108 	.word	0x000c0108

0000ba60 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    ba60:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    ba62:	4a0e      	ldr	r2, [pc, #56]	; (ba9c <GClkFreqUpdate+0x3c>)
    ba64:	f100 0408 	add.w	r4, r0, #8
    ba68:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    ba6c:	f003 030f 	and.w	r3, r3, #15
    ba70:	2b01      	cmp	r3, #1
    ba72:	d001      	beq.n	ba78 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    ba74:	bc70      	pop	{r4, r5, r6}
    ba76:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    ba78:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    ba7c:	4d08      	ldr	r5, [pc, #32]	; (baa0 <GClkFreqUpdate+0x40>)
    ba7e:	fbb5 f1f1 	udiv	r1, r5, r1
    ba82:	b289      	uxth	r1, r1
    ba84:	f361 461f 	bfi	r6, r1, #16, #16
    ba88:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    ba8c:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    ba8e:	6851      	ldr	r1, [r2, #4]
    ba90:	f3c1 018b 	ubfx	r1, r1, #2, #12
    ba94:	4219      	tst	r1, r3
    ba96:	d1fa      	bne.n	ba8e <GClkFreqUpdate+0x2e>
}
    ba98:	bc70      	pop	{r4, r5, r6}
    ba9a:	4770      	bx	lr
    ba9c:	40001c00 	.word	0x40001c00
    baa0:	017d7840 	.word	0x017d7840

0000baa4 <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    baa4:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    baa6:	4911      	ldr	r1, [pc, #68]	; (baec <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    baa8:	4b11      	ldr	r3, [pc, #68]	; (baf0 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    baaa:	4a12      	ldr	r2, [pc, #72]	; (baf4 <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    baac:	6001      	str	r1, [r0, #0]
    baae:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    bab0:	4604      	mov	r4, r0
      m_stepsLast(0) {
    bab2:	6042      	str	r2, [r0, #4]
    bab4:	6083      	str	r3, [r0, #8]
    bab6:	60c5      	str	r5, [r0, #12]
    bab8:	6105      	str	r5, [r0, #16]
    baba:	6145      	str	r5, [r0, #20]
    babc:	8305      	strh	r5, [r0, #24]
    babe:	4629      	mov	r1, r5
    bac0:	22c8      	movs	r2, #200	; 0xc8
    bac2:	301c      	adds	r0, #28
    bac4:	f012 fce2 	bl	1e48c <memset>
    bac8:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    bacc:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    bad0:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    bad4:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    bad8:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    badc:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    bae0:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    bae4:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    bae8:	4620      	mov	r0, r4
    baea:	bd38      	pop	{r3, r4, r5, pc}
    baec:	00023178 	.word	0x00023178
    baf0:	00023198 	.word	0x00023198
    baf4:	00023188 	.word	0x00023188

0000baf8 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    baf8:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    bafa:	4a12      	ldr	r2, [pc, #72]	; (bb44 <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    bafc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bb00:	f36f 1386 	bfc	r3, #6, #1
    bb04:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bb08:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bb0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bb10:	2b00      	cmp	r3, #0
    bb12:	d1f9      	bne.n	bb08 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    bb14:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    bb18:	490b      	ldr	r1, [pc, #44]	; (bb48 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    bb1a:	4c0c      	ldr	r4, [pc, #48]	; (bb4c <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    bb1c:	4d0c      	ldr	r5, [pc, #48]	; (bb50 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    bb1e:	f363 0003 	bfi	r0, r3, #0, #4
    bb22:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    bb26:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bb2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb2e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bb32:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    bb34:	69cb      	ldr	r3, [r1, #28]
    bb36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bb3a:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    bb3c:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    bb3e:	bc30      	pop	{r4, r5}
    bb40:	4770      	bx	lr
    bb42:	bf00      	nop
    bb44:	40001c00 	.word	0x40001c00
    bb48:	40000800 	.word	0x40000800
    bb4c:	42001c00 	.word	0x42001c00
    bb50:	07030000 	.word	0x07030000

0000bb54 <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    bb56:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	d038      	beq.n	bbd0 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    bb5e:	4a29      	ldr	r2, [pc, #164]	; (bc04 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    bb60:	2360      	movs	r3, #96	; 0x60
    bb62:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    bb64:	6913      	ldr	r3, [r2, #16]
    bb66:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    bb6a:	d1fb      	bne.n	bb64 <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bb6c:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    bb6e:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    bb70:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    bb74:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    bb78:	1aaa      	subs	r2, r5, r2
    bb7a:	b212      	sxth	r2, r2
    bb7c:	4604      	mov	r4, r0
    bb7e:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bb82:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    bb84:	bb29      	cbnz	r1, bbd2 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    bb86:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bb88:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    bb8c:	f3bf 8f5b 	dmb	ish
    bb90:	e853 6f00 	ldrex	r6, [r3]
    bb94:	4416      	add	r6, r2
    bb96:	e843 6100 	strex	r1, r6, [r3]
    bb9a:	2900      	cmp	r1, #0
    bb9c:	d1f8      	bne.n	bb90 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    bb9e:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bba2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bba6:	4d18      	ldr	r5, [pc, #96]	; (bc08 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    bba8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    bbac:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bbae:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bbb0:	fb85 2503 	smull	r2, r5, r5, r3
    bbb4:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bbb6:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bbb8:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bbbc:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bbbe:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bbc0:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bbc4:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bbc8:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    bbca:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bbcc:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    bbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bbd2:	68c6      	ldr	r6, [r0, #12]
    bbd4:	f3bf 8f5b 	dmb	ish
    bbd8:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    bbdc:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bbe0:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    bbe2:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bbe6:	4432      	add	r2, r6
    bbe8:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bbea:	4808      	ldr	r0, [pc, #32]	; (bc0c <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bbec:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bbf0:	f991 1003 	ldrsb.w	r1, [r1, #3]
    bbf4:	6800      	ldr	r0, [r0, #0]
    bbf6:	2201      	movs	r2, #1
    bbf8:	f003 ffee 	bl	fbd8 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    bbfc:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    bc00:	e7c1      	b.n	bb86 <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    bc02:	bf00      	nop
    bc04:	42001c00 	.word	0x42001c00
    bc08:	51eb851f 	.word	0x51eb851f
    bc0c:	20001f08 	.word	0x20001f08

0000bc10 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bc12:	780d      	ldrb	r5, [r1, #0]
    bc14:	f3c5 1441 	ubfx	r4, r5, #5, #2
    bc18:	2c01      	cmp	r4, #1
{
    bc1a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bc1c:	d152      	bne.n	bcc4 <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bc1e:	4e30      	ldr	r6, [pc, #192]	; (bce0 <cdcdf_acm_req+0xd0>)
    bc20:	888c      	ldrh	r4, [r1, #4]
    bc22:	7833      	ldrb	r3, [r6, #0]
    bc24:	42a3      	cmp	r3, r4
    bc26:	d002      	beq.n	bc2e <cdcdf_acm_req+0x1e>
    bc28:	7873      	ldrb	r3, [r6, #1]
    bc2a:	42a3      	cmp	r3, r4
    bc2c:	d14a      	bne.n	bcc4 <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bc2e:	062b      	lsls	r3, r5, #24
    bc30:	4617      	mov	r7, r2
    bc32:	4606      	mov	r6, r0
    bc34:	460c      	mov	r4, r1
    bc36:	d438      	bmi.n	bcaa <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    bc38:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bc3a:	f000 fc7f 	bl	c53c <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    bc3e:	7863      	ldrb	r3, [r4, #1]
    bc40:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bc42:	4601      	mov	r1, r0
	switch (req->bRequest) {
    bc44:	d00f      	beq.n	bc66 <cdcdf_acm_req+0x56>
    bc46:	2b22      	cmp	r3, #34	; 0x22
    bc48:	d128      	bne.n	bc9c <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    bc4a:	2300      	movs	r3, #0
    bc4c:	461a      	mov	r2, r3
    bc4e:	4619      	mov	r1, r3
    bc50:	4618      	mov	r0, r3
    bc52:	f000 fc07 	bl	c464 <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    bc56:	4b23      	ldr	r3, [pc, #140]	; (bce4 <cdcdf_acm_req+0xd4>)
    bc58:	681b      	ldr	r3, [r3, #0]
    bc5a:	b31b      	cbz	r3, bca4 <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    bc5c:	8860      	ldrh	r0, [r4, #2]
    bc5e:	4798      	blx	r3
		return ERR_NONE;
    bc60:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    bc62:	b003      	add	sp, #12
    bc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bc66:	2d07      	cmp	r5, #7
    bc68:	d136      	bne.n	bcd8 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    bc6a:	b37f      	cbz	r7, bccc <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bc6c:	4b1e      	ldr	r3, [pc, #120]	; (bce8 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bc6e:	6800      	ldr	r0, [r0, #0]
    bc70:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bc72:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bc74:	888a      	ldrh	r2, [r1, #4]
    bc76:	7989      	ldrb	r1, [r1, #6]
    bc78:	f88d 1006 	strb.w	r1, [sp, #6]
    bc7c:	466c      	mov	r4, sp
    bc7e:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bc82:	b113      	cbz	r3, bc8a <cdcdf_acm_req+0x7a>
    bc84:	4668      	mov	r0, sp
    bc86:	4798      	blx	r3
    bc88:	b160      	cbz	r0, bca4 <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bc8a:	e894 0003 	ldmia.w	r4, {r0, r1}
    bc8e:	4b17      	ldr	r3, [pc, #92]	; (bcec <cdcdf_acm_req+0xdc>)
    bc90:	0c0a      	lsrs	r2, r1, #16
    bc92:	6018      	str	r0, [r3, #0]
    bc94:	8099      	strh	r1, [r3, #4]
    bc96:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    bc98:	2000      	movs	r0, #0
    bc9a:	e001      	b.n	bca0 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    bc9c:	f06f 000c 	mvn.w	r0, #12
}
    bca0:	b003      	add	sp, #12
    bca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    bca4:	2000      	movs	r0, #0
}
    bca6:	b003      	add	sp, #12
    bca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    bcaa:	2a01      	cmp	r2, #1
    bcac:	d0fa      	beq.n	bca4 <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    bcae:	784b      	ldrb	r3, [r1, #1]
    bcb0:	2b21      	cmp	r3, #33	; 0x21
    bcb2:	d1f3      	bne.n	bc9c <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bcb4:	88ca      	ldrh	r2, [r1, #6]
    bcb6:	2a07      	cmp	r2, #7
    bcb8:	d10e      	bne.n	bcd8 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bcba:	2300      	movs	r3, #0
    bcbc:	490b      	ldr	r1, [pc, #44]	; (bcec <cdcdf_acm_req+0xdc>)
    bcbe:	f000 fbd1 	bl	c464 <usbdc_xfer>
    bcc2:	e7ed      	b.n	bca0 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    bcc4:	f06f 0009 	mvn.w	r0, #9
}
    bcc8:	b003      	add	sp, #12
    bcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bccc:	463b      	mov	r3, r7
    bcce:	462a      	mov	r2, r5
    bcd0:	4630      	mov	r0, r6
    bcd2:	f000 fbc7 	bl	c464 <usbdc_xfer>
    bcd6:	e7e3      	b.n	bca0 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    bcd8:	f04f 30ff 	mov.w	r0, #4294967295
    bcdc:	e7e0      	b.n	bca0 <cdcdf_acm_req+0x90>
    bcde:	bf00      	nop
    bce0:	20001c10 	.word	0x20001c10
    bce4:	20001c18 	.word	0x20001c18
    bce8:	20001c1c 	.word	0x20001c1c
    bcec:	20001c20 	.word	0x20001c20

0000bcf0 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    bcf0:	2901      	cmp	r1, #1
{
    bcf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bcf6:	4616      	mov	r6, r2
	switch (ctrl) {
    bcf8:	d008      	beq.n	bd0c <cdcdf_acm_ctrl+0x1c>
    bcfa:	d314      	bcc.n	bd26 <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    bcfc:	2902      	cmp	r1, #2
    bcfe:	bf0c      	ite	eq
    bd00:	f06f 001a 	mvneq.w	r0, #26
    bd04:	f06f 000c 	mvnne.w	r0, #12
    bd08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bd0c:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    bd0e:	2a00      	cmp	r2, #0
    bd10:	d047      	beq.n	bda2 <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bd12:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bd14:	795b      	ldrb	r3, [r3, #5]
    bd16:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    bd1a:	2b02      	cmp	r3, #2
    bd1c:	d041      	beq.n	bda2 <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    bd1e:	f06f 0009 	mvn.w	r0, #9
    bd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    bd26:	6813      	ldr	r3, [r2, #0]
    bd28:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    bd2a:	2b00      	cmp	r3, #0
    bd2c:	d0f7      	beq.n	bd1e <cdcdf_acm_ctrl+0x2e>
    bd2e:	f107 38ff 	add.w	r8, r7, #4294967295
    bd32:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bd36:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    bd38:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bd3a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    bd3e:	2a02      	cmp	r2, #2
    bd40:	d1ed      	bne.n	bd1e <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bd42:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    bd46:	4291      	cmp	r1, r2
    bd48:	d061      	beq.n	be0e <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bd4a:	2aff      	cmp	r2, #255	; 0xff
    bd4c:	d15b      	bne.n	be06 <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bd4e:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bd52:	4618      	mov	r0, r3
    bd54:	6871      	ldr	r1, [r6, #4]
    bd56:	2205      	movs	r2, #5
    bd58:	f000 fc00 	bl	c55c <usb_find_desc>
		while (NULL != ep) {
    bd5c:	4604      	mov	r4, r0
    bd5e:	b980      	cbnz	r0, bd82 <cdcdf_acm_ctrl+0x92>
    bd60:	e041      	b.n	bde6 <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bd62:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bd64:	bf4c      	ite	mi
    bd66:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bd6a:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bd6c:	4628      	mov	r0, r5
    bd6e:	f000 feaf 	bl	cad0 <usb_d_ep_enable>
			desc->sod = ep;
    bd72:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    bd74:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bd76:	6871      	ldr	r1, [r6, #4]
    bd78:	4420      	add	r0, r4
    bd7a:	f000 fc09 	bl	c590 <usb_find_ep_desc>
		while (NULL != ep) {
    bd7e:	4604      	mov	r4, r0
    bd80:	b388      	cbz	r0, bde6 <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    bd82:	7963      	ldrb	r3, [r4, #5]
    bd84:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    bd86:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bd88:	78e1      	ldrb	r1, [r4, #3]
    bd8a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    bd8e:	b292      	uxth	r2, r2
    bd90:	4628      	mov	r0, r5
    bd92:	f000 fe4b 	bl	ca2c <usb_d_ep_init>
    bd96:	2800      	cmp	r0, #0
    bd98:	d0e3      	beq.n	bd62 <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    bd9a:	f06f 0013 	mvn.w	r0, #19
}
    bd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    bda2:	7823      	ldrb	r3, [r4, #0]
    bda4:	2bff      	cmp	r3, #255	; 0xff
    bda6:	d007      	beq.n	bdb8 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    bda8:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    bdaa:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    bdac:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    bdae:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    bdb0:	d002      	beq.n	bdb8 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bdb2:	f000 fe71 	bl	ca98 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    bdb6:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    bdb8:	7863      	ldrb	r3, [r4, #1]
    bdba:	2bff      	cmp	r3, #255	; 0xff
    bdbc:	d007      	beq.n	bdce <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    bdbe:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    bdc0:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    bdc2:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    bdc4:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    bdc6:	d002      	beq.n	bdce <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bdc8:	f000 fe66 	bl	ca98 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    bdcc:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    bdce:	7920      	ldrb	r0, [r4, #4]
    bdd0:	28ff      	cmp	r0, #255	; 0xff
    bdd2:	d003      	beq.n	bddc <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    bdd4:	f000 fe60 	bl	ca98 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    bdd8:	23ff      	movs	r3, #255	; 0xff
    bdda:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    bddc:	4b0f      	ldr	r3, [pc, #60]	; (be1c <cdcdf_acm_ctrl+0x12c>)
    bdde:	2000      	movs	r0, #0
    bde0:	7158      	strb	r0, [r3, #5]
    bde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bde6:	6833      	ldr	r3, [r6, #0]
    bde8:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    bdea:	7818      	ldrb	r0, [r3, #0]
    bdec:	2204      	movs	r2, #4
    bdee:	4418      	add	r0, r3
    bdf0:	f000 fbb4 	bl	c55c <usb_find_desc>
	for (i = 0; i < 2; i++) {
    bdf4:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bdf6:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    bdf8:	d10d      	bne.n	be16 <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    bdfa:	4b08      	ldr	r3, [pc, #32]	; (be1c <cdcdf_acm_ctrl+0x12c>)
    bdfc:	2201      	movs	r2, #1
    bdfe:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    be00:	2000      	movs	r0, #0
    be02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    be06:	f06f 001b 	mvn.w	r0, #27
    be0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    be0e:	f06f 0011 	mvn.w	r0, #17
    be12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    be16:	2b00      	cmp	r3, #0
    be18:	d18d      	bne.n	bd36 <cdcdf_acm_ctrl+0x46>
    be1a:	e780      	b.n	bd1e <cdcdf_acm_ctrl+0x2e>
    be1c:	20001c10 	.word	0x20001c10

0000be20 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    be20:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    be22:	f000 fb91 	bl	c548 <usbdc_get_state>
    be26:	2801      	cmp	r0, #1
    be28:	d80d      	bhi.n	be46 <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    be2a:	4b08      	ldr	r3, [pc, #32]	; (be4c <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    be2c:	4a08      	ldr	r2, [pc, #32]	; (be50 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    be2e:	4909      	ldr	r1, [pc, #36]	; (be54 <cdcdf_acm_init+0x34>)
    be30:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    be32:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    be34:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    be36:	f000 fb61 	bl	c4fc <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    be3a:	4907      	ldr	r1, [pc, #28]	; (be58 <cdcdf_acm_init+0x38>)
    be3c:	2001      	movs	r0, #1
    be3e:	f000 fb1f 	bl	c480 <usbdc_register_handler>
	return ERR_NONE;
    be42:	2000      	movs	r0, #0
    be44:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    be46:	f06f 0010 	mvn.w	r0, #16
}
    be4a:	bd08      	pop	{r3, pc}
    be4c:	20001c04 	.word	0x20001c04
    be50:	20001c10 	.word	0x20001c10
    be54:	0000bcf1 	.word	0x0000bcf1
    be58:	200000e4 	.word	0x200000e4

0000be5c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    be5c:	4b08      	ldr	r3, [pc, #32]	; (be80 <cdcdf_acm_read+0x24>)
{
    be5e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    be60:	795c      	ldrb	r4, [r3, #5]
    be62:	b13c      	cbz	r4, be74 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    be64:	460a      	mov	r2, r1
}
    be66:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    be6a:	4601      	mov	r1, r0
    be6c:	7918      	ldrb	r0, [r3, #4]
    be6e:	2300      	movs	r3, #0
    be70:	f000 baf8 	b.w	c464 <usbdc_xfer>
}
    be74:	f06f 0010 	mvn.w	r0, #16
    be78:	f85d 4b04 	ldr.w	r4, [sp], #4
    be7c:	4770      	bx	lr
    be7e:	bf00      	nop
    be80:	20001c10 	.word	0x20001c10

0000be84 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    be84:	4b08      	ldr	r3, [pc, #32]	; (bea8 <cdcdf_acm_write+0x24>)
{
    be86:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    be88:	795c      	ldrb	r4, [r3, #5]
    be8a:	b13c      	cbz	r4, be9c <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    be8c:	460a      	mov	r2, r1
}
    be8e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    be92:	4601      	mov	r1, r0
    be94:	78d8      	ldrb	r0, [r3, #3]
    be96:	2301      	movs	r3, #1
    be98:	f000 bae4 	b.w	c464 <usbdc_xfer>
}
    be9c:	f06f 0010 	mvn.w	r0, #16
    bea0:	f85d 4b04 	ldr.w	r4, [sp], #4
    bea4:	4770      	bx	lr
    bea6:	bf00      	nop
    bea8:	20001c10 	.word	0x20001c10

0000beac <cdcdf_acm_stop_xfer>:
{
    beac:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    beae:	4c04      	ldr	r4, [pc, #16]	; (bec0 <cdcdf_acm_stop_xfer+0x14>)
    beb0:	78e0      	ldrb	r0, [r4, #3]
    beb2:	f000 fecb 	bl	cc4c <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    beb6:	7920      	ldrb	r0, [r4, #4]
}
    beb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bebc:	f000 bec6 	b.w	cc4c <usb_d_ep_abort>
    bec0:	20001c10 	.word	0x20001c10

0000bec4 <cdcdf_acm_register_callback>:
{
    bec4:	b508      	push	{r3, lr}
	switch (cb_type) {
    bec6:	2803      	cmp	r0, #3
    bec8:	d81b      	bhi.n	bf02 <cdcdf_acm_register_callback+0x3e>
    beca:	e8df f000 	tbb	[pc, r0]
    bece:	0a12      	.short	0x0a12
    bed0:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    bed2:	4b0d      	ldr	r3, [pc, #52]	; (bf08 <cdcdf_acm_register_callback+0x44>)
    bed4:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    bed6:	2000      	movs	r0, #0
		break;
    bed8:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    beda:	4b0c      	ldr	r3, [pc, #48]	; (bf0c <cdcdf_acm_register_callback+0x48>)
    bedc:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    bede:	2000      	movs	r0, #0
		break;
    bee0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bee2:	4b0b      	ldr	r3, [pc, #44]	; (bf10 <cdcdf_acm_register_callback+0x4c>)
    bee4:	460a      	mov	r2, r1
    bee6:	78d8      	ldrb	r0, [r3, #3]
    bee8:	2102      	movs	r1, #2
    beea:	f000 ff05 	bl	ccf8 <usb_d_ep_register_callback>
	return ERR_NONE;
    beee:	2000      	movs	r0, #0
		break;
    bef0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bef2:	4b07      	ldr	r3, [pc, #28]	; (bf10 <cdcdf_acm_register_callback+0x4c>)
    bef4:	460a      	mov	r2, r1
    bef6:	7918      	ldrb	r0, [r3, #4]
    bef8:	2102      	movs	r1, #2
    befa:	f000 fefd 	bl	ccf8 <usb_d_ep_register_callback>
	return ERR_NONE;
    befe:	2000      	movs	r0, #0
		break;
    bf00:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    bf02:	f06f 000c 	mvn.w	r0, #12
}
    bf06:	bd08      	pop	{r3, pc}
    bf08:	20001c18 	.word	0x20001c18
    bf0c:	20001c1c 	.word	0x20001c1c
    bf10:	20001c10 	.word	0x20001c10

0000bf14 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    bf14:	4b01      	ldr	r3, [pc, #4]	; (bf1c <cdcdf_acm_is_enabled+0x8>)
}
    bf16:	7958      	ldrb	r0, [r3, #5]
    bf18:	4770      	bx	lr
    bf1a:	bf00      	nop
    bf1c:	20001c10 	.word	0x20001c10

0000bf20 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    bf20:	4800      	ldr	r0, [pc, #0]	; (bf24 <cdcdf_acm_get_line_coding+0x4>)
    bf22:	4770      	bx	lr
    bf24:	20001c20 	.word	0x20001c20

0000bf28 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bf28:	4b05      	ldr	r3, [pc, #20]	; (bf40 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    bf2a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bf2c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    bf2e:	b12c      	cbz	r4, bf3c <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    bf30:	6863      	ldr	r3, [r4, #4]
    bf32:	b103      	cbz	r3, bf36 <usbd_sof_cb+0xe>
			sof->cb();
    bf34:	4798      	blx	r3
		sof = sof->next;
    bf36:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    bf38:	2c00      	cmp	r4, #0
    bf3a:	d1f9      	bne.n	bf30 <usbd_sof_cb+0x8>
    bf3c:	bd10      	pop	{r4, pc}
    bf3e:	bf00      	nop
    bf40:	20001c28 	.word	0x20001c28

0000bf44 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    bf44:	b538      	push	{r3, r4, r5, lr}
    bf46:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    bf48:	b189      	cbz	r1, bf6e <usbdc_cb_ctl_done+0x2a>
    bf4a:	2901      	cmp	r1, #1
    bf4c:	d10d      	bne.n	bf6a <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    bf4e:	4b23      	ldr	r3, [pc, #140]	; (bfdc <usbdc_cb_ctl_done+0x98>)
    bf50:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    bf52:	b154      	cbz	r4, bf6a <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    bf54:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    bf56:	2201      	movs	r2, #1
    bf58:	4629      	mov	r1, r5
    bf5a:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    bf5c:	b113      	cbz	r3, bf64 <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    bf5e:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    bf60:	300a      	adds	r0, #10
    bf62:	d102      	bne.n	bf6a <usbdc_cb_ctl_done+0x26>
		h = h->next;
    bf64:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    bf66:	2c00      	cmp	r4, #0
    bf68:	d1f4      	bne.n	bf54 <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    bf6a:	2000      	movs	r0, #0
    bf6c:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    bf6e:	7813      	ldrb	r3, [r2, #0]
    bf70:	2b00      	cmp	r3, #0
    bf72:	d1fa      	bne.n	bf6a <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    bf74:	7853      	ldrb	r3, [r2, #1]
    bf76:	2b05      	cmp	r3, #5
    bf78:	d014      	beq.n	bfa4 <usbdc_cb_ctl_done+0x60>
    bf7a:	2b09      	cmp	r3, #9
    bf7c:	d1f5      	bne.n	bf6a <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    bf7e:	8852      	ldrh	r2, [r2, #2]
    bf80:	4b16      	ldr	r3, [pc, #88]	; (bfdc <usbdc_cb_ctl_done+0x98>)
    bf82:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    bf84:	bb3a      	cbnz	r2, bfd6 <usbdc_cb_ctl_done+0x92>
    bf86:	2503      	movs	r5, #3
    bf88:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    bf8a:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    bf8c:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    bf8e:	2c00      	cmp	r4, #0
    bf90:	d0eb      	beq.n	bf6a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    bf92:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    bf94:	4629      	mov	r1, r5
    bf96:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    bf98:	b103      	cbz	r3, bf9c <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    bf9a:	4798      	blx	r3
		cg = cg->next;
    bf9c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    bf9e:	2c00      	cmp	r4, #0
    bfa0:	d1f7      	bne.n	bf92 <usbdc_cb_ctl_done+0x4e>
    bfa2:	e7e2      	b.n	bf6a <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    bfa4:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    bfa6:	b2c0      	uxtb	r0, r0
    bfa8:	f000 fcf0 	bl	c98c <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    bfac:	886b      	ldrh	r3, [r5, #2]
    bfae:	b97b      	cbnz	r3, bfd0 <usbdc_cb_ctl_done+0x8c>
    bfb0:	2502      	movs	r5, #2
    bfb2:	462a      	mov	r2, r5
    bfb4:	4b09      	ldr	r3, [pc, #36]	; (bfdc <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    bfb6:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    bfb8:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    bfba:	2c00      	cmp	r4, #0
    bfbc:	d0d5      	beq.n	bf6a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    bfbe:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    bfc0:	4629      	mov	r1, r5
    bfc2:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    bfc4:	b103      	cbz	r3, bfc8 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    bfc6:	4798      	blx	r3
		cg = cg->next;
    bfc8:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    bfca:	2c00      	cmp	r4, #0
    bfcc:	d1f7      	bne.n	bfbe <usbdc_cb_ctl_done+0x7a>
    bfce:	e7cc      	b.n	bf6a <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    bfd0:	2503      	movs	r5, #3
    bfd2:	462a      	mov	r2, r5
    bfd4:	e7ee      	b.n	bfb4 <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    bfd6:	2504      	movs	r5, #4
    bfd8:	462a      	mov	r2, r5
    bfda:	e7d6      	b.n	bf8a <usbdc_cb_ctl_done+0x46>
    bfdc:	20001c28 	.word	0x20001c28

0000bfe0 <usbdc_cb_ctl_req>:
{
    bfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    bfe4:	4fb6      	ldr	r7, [pc, #728]	; (c2c0 <usbdc_cb_ctl_req+0x2e0>)
    bfe6:	68bc      	ldr	r4, [r7, #8]
{
    bfe8:	b086      	sub	sp, #24
    bfea:	4606      	mov	r6, r0
    bfec:	460d      	mov	r5, r1
	while (h != NULL) {
    bfee:	b15c      	cbz	r4, c008 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    bff0:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    bff2:	2200      	movs	r2, #0
    bff4:	4629      	mov	r1, r5
    bff6:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    bff8:	b11b      	cbz	r3, c002 <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    bffa:	4798      	blx	r3
			if (0 == rc) {
    bffc:	b170      	cbz	r0, c01c <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    bffe:	300a      	adds	r0, #10
    c000:	d108      	bne.n	c014 <usbdc_cb_ctl_req+0x34>
		h = h->next;
    c002:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c004:	2c00      	cmp	r4, #0
    c006:	d1f3      	bne.n	bff0 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c008:	782b      	ldrb	r3, [r5, #0]
    c00a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c00e:	d025      	beq.n	c05c <usbdc_cb_ctl_req+0x7c>
    c010:	2a80      	cmp	r2, #128	; 0x80
    c012:	d007      	beq.n	c024 <usbdc_cb_ctl_req+0x44>
		return false;
    c014:	2000      	movs	r0, #0
}
    c016:	b006      	add	sp, #24
    c018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    c01c:	2001      	movs	r0, #1
}
    c01e:	b006      	add	sp, #24
    c020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    c024:	786a      	ldrb	r2, [r5, #1]
    c026:	2a0a      	cmp	r2, #10
    c028:	d8f4      	bhi.n	c014 <usbdc_cb_ctl_req+0x34>
    c02a:	a101      	add	r1, pc, #4	; (adr r1, c030 <usbdc_cb_ctl_req+0x50>)
    c02c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c030:	0000c14f 	.word	0x0000c14f
    c034:	0000c015 	.word	0x0000c015
    c038:	0000c015 	.word	0x0000c015
    c03c:	0000c015 	.word	0x0000c015
    c040:	0000c015 	.word	0x0000c015
    c044:	0000c015 	.word	0x0000c015
    c048:	0000c103 	.word	0x0000c103
    c04c:	0000c015 	.word	0x0000c015
    c050:	0000c0e1 	.word	0x0000c0e1
    c054:	0000c015 	.word	0x0000c015
    c058:	0000c099 	.word	0x0000c099
	switch (req->bRequest) {
    c05c:	786a      	ldrb	r2, [r5, #1]
    c05e:	3a01      	subs	r2, #1
    c060:	2a0a      	cmp	r2, #10
    c062:	d8d7      	bhi.n	c014 <usbdc_cb_ctl_req+0x34>
    c064:	a101      	add	r1, pc, #4	; (adr r1, c06c <usbdc_cb_ctl_req+0x8c>)
    c066:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c06a:	bf00      	nop
    c06c:	0000c267 	.word	0x0000c267
    c070:	0000c015 	.word	0x0000c015
    c074:	0000c237 	.word	0x0000c237
    c078:	0000c015 	.word	0x0000c015
    c07c:	0000c219 	.word	0x0000c219
    c080:	0000c015 	.word	0x0000c015
    c084:	0000c015 	.word	0x0000c015
    c088:	0000c015 	.word	0x0000c015
    c08c:	0000c1f3 	.word	0x0000c1f3
    c090:	0000c015 	.word	0x0000c015
    c094:	0000c197 	.word	0x0000c197
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c098:	7f7b      	ldrb	r3, [r7, #29]
    c09a:	88aa      	ldrh	r2, [r5, #4]
    c09c:	4113      	asrs	r3, r2
    c09e:	f013 0301 	ands.w	r3, r3, #1
    c0a2:	f000 818e 	beq.w	c3c2 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c0a6:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c0a8:	b91c      	cbnz	r4, c0b2 <usbdc_cb_ctl_req+0xd2>
    c0aa:	e7b3      	b.n	c014 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c0ac:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c0ae:	2c00      	cmp	r4, #0
    c0b0:	d0b0      	beq.n	c014 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c0b2:	6863      	ldr	r3, [r4, #4]
    c0b4:	462a      	mov	r2, r5
    c0b6:	2102      	movs	r1, #2
    c0b8:	4620      	mov	r0, r4
    c0ba:	4798      	blx	r3
    c0bc:	2800      	cmp	r0, #0
    c0be:	dbf5      	blt.n	c0ac <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c0c0:	697b      	ldr	r3, [r7, #20]
    c0c2:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c0c4:	697b      	ldr	r3, [r7, #20]
    c0c6:	9303      	str	r3, [sp, #12]
    c0c8:	2401      	movs	r4, #1
    c0ca:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c0cc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c0ce:	9404      	str	r4, [sp, #16]
    c0d0:	f88d 3014 	strb.w	r3, [sp, #20]
    c0d4:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c0d8:	f000 fd24 	bl	cb24 <usb_d_ep_transfer>
			return true;
    c0dc:	4620      	mov	r0, r4
    c0de:	e79a      	b.n	c016 <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c0e0:	697b      	ldr	r3, [r7, #20]
    c0e2:	7efa      	ldrb	r2, [r7, #27]
    c0e4:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c0e6:	697b      	ldr	r3, [r7, #20]
    c0e8:	9303      	str	r3, [sp, #12]
    c0ea:	2401      	movs	r4, #1
    c0ec:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c0ee:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c0f0:	f88d 6014 	strb.w	r6, [sp, #20]
    c0f4:	9404      	str	r4, [sp, #16]
    c0f6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c0fa:	f000 fd13 	bl	cb24 <usb_d_ep_transfer>
		return true;
    c0fe:	4620      	mov	r0, r4
    c100:	e789      	b.n	c016 <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c102:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    c104:	0a1a      	lsrs	r2, r3, #8
    c106:	2a02      	cmp	r2, #2
    c108:	f000 810a 	beq.w	c320 <usbdc_cb_ctl_req+0x340>
    c10c:	2a03      	cmp	r2, #3
    c10e:	f000 80f0 	beq.w	c2f2 <usbdc_cb_ctl_req+0x312>
    c112:	2a01      	cmp	r2, #1
    c114:	f47f af7e 	bne.w	c014 <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c118:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    c11a:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c11c:	e893 0003 	ldmia.w	r3, {r0, r1}
    c120:	2c12      	cmp	r4, #18
    c122:	bf28      	it	cs
    c124:	2412      	movcs	r4, #18
    c126:	f000 fa19 	bl	c55c <usb_find_desc>
	if (!dev_desc) {
    c12a:	4603      	mov	r3, r0
    c12c:	2800      	cmp	r0, #0
    c12e:	f43f af71 	beq.w	c014 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c132:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    c134:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c136:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c138:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c13a:	f88d 6014 	strb.w	r6, [sp, #20]
    c13e:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c142:	f000 fcef 	bl	cb24 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c146:	fab0 f080 	clz	r0, r0
    c14a:	0940      	lsrs	r0, r0, #5
    c14c:	e763      	b.n	c016 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c14e:	f003 011f 	and.w	r1, r3, #31
    c152:	2901      	cmp	r1, #1
    c154:	f240 8091 	bls.w	c27a <usbdc_cb_ctl_req+0x29a>
    c158:	2902      	cmp	r1, #2
    c15a:	f47f af5b 	bne.w	c014 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c15e:	88a8      	ldrh	r0, [r5, #4]
    c160:	b2c0      	uxtb	r0, r0
    c162:	f000 fd91 	bl	cc88 <usb_d_ep_halt>
		if (st < 0) {
    c166:	1e03      	subs	r3, r0, #0
    c168:	f6ff af54 	blt.w	c014 <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    c16c:	f003 0301 	and.w	r3, r3, #1
    c170:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c172:	697b      	ldr	r3, [r7, #20]
    c174:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c178:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c17a:	697b      	ldr	r3, [r7, #20]
    c17c:	9303      	str	r3, [sp, #12]
    c17e:	2202      	movs	r2, #2
    c180:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c182:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c184:	f88d 6014 	strb.w	r6, [sp, #20]
    c188:	9204      	str	r2, [sp, #16]
    c18a:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c18e:	f000 fcc9 	bl	cb24 <usb_d_ep_transfer>
	return true;
    c192:	2001      	movs	r0, #1
    c194:	e73f      	b.n	c016 <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c196:	683b      	ldr	r3, [r7, #0]
    c198:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    c19a:	886c      	ldrh	r4, [r5, #2]
    c19c:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c19e:	e893 0003 	ldmia.w	r3, {r0, r1}
    c1a2:	f000 fa0f 	bl	c5c4 <usb_find_cfg_desc>
	if (NULL == ifc) {
    c1a6:	2800      	cmp	r0, #0
    c1a8:	f43f af34 	beq.w	c014 <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    c1ac:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    c1ae:	78c1      	ldrb	r1, [r0, #3]
    c1b0:	7883      	ldrb	r3, [r0, #2]
    c1b2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c1b6:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c1ba:	4619      	mov	r1, r3
    c1bc:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c1be:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c1c0:	f000 f9cc 	bl	c55c <usb_find_desc>
    c1c4:	2800      	cmp	r0, #0
    c1c6:	f43f af25 	beq.w	c014 <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c1ca:	7883      	ldrb	r3, [r0, #2]
    c1cc:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c1ce:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c1d2:	d103      	bne.n	c1dc <usbdc_cb_ctl_req+0x1fc>
    c1d4:	78c3      	ldrb	r3, [r0, #3]
    c1d6:	42a3      	cmp	r3, r4
    c1d8:	f000 80c9 	beq.w	c36e <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    c1dc:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c1de:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    c1e0:	7818      	ldrb	r0, [r3, #0]
    c1e2:	4403      	add	r3, r0
    c1e4:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    c1e6:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c1e8:	f000 f9b8 	bl	c55c <usb_find_desc>
		if (NULL == ifc) {
    c1ec:	2800      	cmp	r0, #0
    c1ee:	d1ec      	bne.n	c1ca <usbdc_cb_ctl_req+0x1ea>
    c1f0:	e710      	b.n	c014 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c1f2:	886a      	ldrh	r2, [r5, #2]
    c1f4:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c1f6:	2a00      	cmp	r2, #0
    c1f8:	d142      	bne.n	c280 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c1fa:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c1fc:	b13c      	cbz	r4, c20e <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c1fe:	6863      	ldr	r3, [r4, #4]
    c200:	4620      	mov	r0, r4
    c202:	2200      	movs	r2, #0
    c204:	2101      	movs	r1, #1
    c206:	4798      	blx	r3
		func = func->next;
    c208:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c20a:	2c00      	cmp	r4, #0
    c20c:	d1f7      	bne.n	c1fe <usbdc_cb_ctl_req+0x21e>
    c20e:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    c210:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c212:	2300      	movs	r3, #0
    c214:	2201      	movs	r2, #1
    c216:	e002      	b.n	c21e <usbdc_cb_ctl_req+0x23e>
    c218:	2300      	movs	r3, #0
    c21a:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    c21c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c21e:	f88d 6014 	strb.w	r6, [sp, #20]
    c222:	9303      	str	r3, [sp, #12]
    c224:	9304      	str	r3, [sp, #16]
    c226:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c22a:	f000 fc7b 	bl	cb24 <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c22e:	fab0 f080 	clz	r0, r0
    c232:	0940      	lsrs	r0, r0, #5
    c234:	e6ef      	b.n	c016 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c236:	2b02      	cmp	r3, #2
    c238:	f47f aeec 	bne.w	c014 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c23c:	88ef      	ldrh	r7, [r5, #6]
    c23e:	2f00      	cmp	r7, #0
    c240:	f47f aee8 	bne.w	c014 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c244:	88a8      	ldrh	r0, [r5, #4]
    c246:	2101      	movs	r1, #1
    c248:	b2c0      	uxtb	r0, r0
    c24a:	f000 fd1d 	bl	cc88 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c24e:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c250:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c252:	9703      	str	r7, [sp, #12]
    c254:	9704      	str	r7, [sp, #16]
    c256:	f88d 6014 	strb.w	r6, [sp, #20]
    c25a:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c25e:	f000 fc61 	bl	cb24 <usb_d_ep_transfer>
		return true;
    c262:	4620      	mov	r0, r4
    c264:	e6d7      	b.n	c016 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c266:	2b02      	cmp	r3, #2
    c268:	f47f aed4 	bne.w	c014 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c26c:	88ef      	ldrh	r7, [r5, #6]
    c26e:	2f00      	cmp	r7, #0
    c270:	f47f aed0 	bne.w	c014 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c274:	88a8      	ldrh	r0, [r5, #4]
    c276:	4639      	mov	r1, r7
    c278:	e7e6      	b.n	c248 <usbdc_cb_ctl_req+0x268>
		st = 0;
    c27a:	2300      	movs	r3, #0
    c27c:	9301      	str	r3, [sp, #4]
    c27e:	e778      	b.n	c172 <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c280:	683b      	ldr	r3, [r7, #0]
    c282:	e893 0003 	ldmia.w	r3, {r0, r1}
    c286:	f000 f99d 	bl	c5c4 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c28a:	2800      	cmp	r0, #0
    c28c:	f43f aec2 	beq.w	c014 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c290:	78c1      	ldrb	r1, [r0, #3]
    c292:	7882      	ldrb	r2, [r0, #2]
    c294:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    c298:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c29c:	4619      	mov	r1, r3
    c29e:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    c2a0:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c2a2:	f000 f95b 	bl	c55c <usb_find_desc>
    c2a6:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c2a8:	2800      	cmp	r0, #0
    c2aa:	d0b0      	beq.n	c20e <usbdc_cb_ctl_req+0x22e>
    c2ac:	24ff      	movs	r4, #255	; 0xff
    c2ae:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c2b0:	f890 8002 	ldrb.w	r8, [r0, #2]
    c2b4:	45a0      	cmp	r8, r4
    c2b6:	d010      	beq.n	c2da <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c2b8:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c2ba:	b92c      	cbnz	r4, c2c8 <usbdc_cb_ctl_req+0x2e8>
    c2bc:	e092      	b.n	c3e4 <usbdc_cb_ctl_req+0x404>
    c2be:	bf00      	nop
    c2c0:	20001c28 	.word	0x20001c28
					func = func->next;
    c2c4:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c2c6:	b134      	cbz	r4, c2d6 <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c2c8:	6863      	ldr	r3, [r4, #4]
    c2ca:	462a      	mov	r2, r5
    c2cc:	2100      	movs	r1, #0
    c2ce:	4620      	mov	r0, r4
    c2d0:	4798      	blx	r3
    c2d2:	2800      	cmp	r0, #0
    c2d4:	d1f6      	bne.n	c2c4 <usbdc_cb_ctl_req+0x2e4>
    c2d6:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    c2d8:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    c2da:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c2dc:	9904      	ldr	r1, [sp, #16]
    c2de:	4403      	add	r3, r0
    c2e0:	4618      	mov	r0, r3
    c2e2:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    c2e4:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c2e6:	f000 f939 	bl	c55c <usb_find_desc>
    c2ea:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c2ec:	2800      	cmp	r0, #0
    c2ee:	d1df      	bne.n	c2b0 <usbdc_cb_ctl_req+0x2d0>
    c2f0:	e78e      	b.n	c210 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c2f2:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c2f4:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c2f6:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c2f8:	e892 0003 	ldmia.w	r2, {r0, r1}
    c2fc:	b2da      	uxtb	r2, r3
    c2fe:	f000 f98d 	bl	c61c <usb_find_str_desc>
	if (NULL == str_desc) {
    c302:	4603      	mov	r3, r0
    c304:	2800      	cmp	r0, #0
    c306:	f43f ae85 	beq.w	c014 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c30a:	7801      	ldrb	r1, [r0, #0]
    c30c:	428c      	cmp	r4, r1
    c30e:	f67f af10 	bls.w	c132 <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c312:	3d01      	subs	r5, #1
    c314:	4225      	tst	r5, r4
    c316:	bf0c      	ite	eq
    c318:	2201      	moveq	r2, #1
    c31a:	2200      	movne	r2, #0
    c31c:	460c      	mov	r4, r1
    c31e:	e709      	b.n	c134 <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c320:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c322:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c324:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c326:	3301      	adds	r3, #1
    c328:	e892 0003 	ldmia.w	r2, {r0, r1}
    c32c:	b2da      	uxtb	r2, r3
    c32e:	f000 f949 	bl	c5c4 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c332:	4602      	mov	r2, r0
    c334:	2800      	cmp	r0, #0
    c336:	f43f ae6d 	beq.w	c014 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c33a:	78c1      	ldrb	r1, [r0, #3]
    c33c:	7883      	ldrb	r3, [r0, #2]
    c33e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    c342:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    c344:	429c      	cmp	r4, r3
    c346:	d94b      	bls.n	c3e0 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c348:	3d01      	subs	r5, #1
    c34a:	4225      	tst	r5, r4
    c34c:	bf0c      	ite	eq
    c34e:	2101      	moveq	r1, #1
    c350:	2100      	movne	r1, #0
    c352:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    c354:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c356:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c358:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c35a:	f88d 6014 	strb.w	r6, [sp, #20]
    c35e:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c362:	f000 fbdf 	bl	cb24 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c366:	fab0 f080 	clz	r0, r0
    c36a:	0940      	lsrs	r0, r0, #5
    c36c:	e653      	b.n	c016 <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c36e:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    c370:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    c372:	b926      	cbnz	r6, c37e <usbdc_cb_ctl_req+0x39e>
    c374:	e64e      	b.n	c014 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c376:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c378:	2e00      	cmp	r6, #0
    c37a:	f43f ae4b 	beq.w	c014 <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c37e:	6873      	ldr	r3, [r6, #4]
    c380:	aa01      	add	r2, sp, #4
    c382:	2101      	movs	r1, #1
    c384:	4630      	mov	r0, r6
    c386:	4798      	blx	r3
    c388:	2800      	cmp	r0, #0
    c38a:	d1f4      	bne.n	c376 <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c38c:	4601      	mov	r1, r0
    c38e:	aa01      	add	r2, sp, #4
    c390:	6873      	ldr	r3, [r6, #4]
    c392:	4630      	mov	r0, r6
    c394:	4798      	blx	r3
    c396:	2800      	cmp	r0, #0
    c398:	f47f ae3c 	bne.w	c014 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c39c:	b12c      	cbz	r4, c3aa <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c39e:	7f7b      	ldrb	r3, [r7, #29]
    c3a0:	2201      	movs	r2, #1
    c3a2:	fa02 f505 	lsl.w	r5, r2, r5
    c3a6:	432b      	orrs	r3, r5
    c3a8:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3aa:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c3ac:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3ae:	9303      	str	r3, [sp, #12]
    c3b0:	9304      	str	r3, [sp, #16]
    c3b2:	f88d 3014 	strb.w	r3, [sp, #20]
    c3b6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c3ba:	f000 fbb3 	bl	cb24 <usb_d_ep_transfer>
			return true;
    c3be:	2001      	movs	r0, #1
    c3c0:	e629      	b.n	c016 <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    c3c2:	697a      	ldr	r2, [r7, #20]
    c3c4:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3c6:	697a      	ldr	r2, [r7, #20]
    c3c8:	9203      	str	r2, [sp, #12]
    c3ca:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c3cc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3ce:	f88d 3014 	strb.w	r3, [sp, #20]
    c3d2:	f88d 3015 	strb.w	r3, [sp, #21]
    c3d6:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    c3d8:	f000 fba4 	bl	cb24 <usb_d_ep_transfer>
		return true;
    c3dc:	4620      	mov	r0, r4
    c3de:	e61a      	b.n	c016 <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    c3e0:	2100      	movs	r1, #0
    c3e2:	e7b7      	b.n	c354 <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    c3e4:	4644      	mov	r4, r8
    c3e6:	e778      	b.n	c2da <usbdc_cb_ctl_req+0x2fa>

0000c3e8 <usbd_event_cb>:
{
    c3e8:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    c3ea:	b338      	cbz	r0, c43c <usbd_event_cb+0x54>
    c3ec:	2801      	cmp	r0, #1
    c3ee:	d124      	bne.n	c43a <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c3f0:	4d19      	ldr	r5, [pc, #100]	; (c458 <usbd_event_cb+0x70>)
    c3f2:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    c3f4:	b13c      	cbz	r4, c406 <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c3f6:	6863      	ldr	r3, [r4, #4]
    c3f8:	4620      	mov	r0, r4
    c3fa:	2200      	movs	r2, #0
    c3fc:	2101      	movs	r1, #1
    c3fe:	4798      	blx	r3
		func = func->next;
    c400:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c402:	2c00      	cmp	r4, #0
    c404:	d1f7      	bne.n	c3f6 <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    c406:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    c408:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    c40a:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    c40c:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c40e:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    c410:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    c412:	f000 fb41 	bl	ca98 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    c416:	7f28      	ldrb	r0, [r5, #28]
    c418:	f000 faba 	bl	c990 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c41c:	4621      	mov	r1, r4
    c41e:	4620      	mov	r0, r4
    c420:	4a0e      	ldr	r2, [pc, #56]	; (c45c <usbd_event_cb+0x74>)
    c422:	f000 fc69 	bl	ccf8 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c426:	4620      	mov	r0, r4
    c428:	4631      	mov	r1, r6
    c42a:	4a0d      	ldr	r2, [pc, #52]	; (c460 <usbd_event_cb+0x78>)
    c42c:	f000 fc64 	bl	ccf8 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    c430:	4620      	mov	r0, r4
}
    c432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    c436:	f000 bb4b 	b.w	cad0 <usb_d_ep_enable>
    c43a:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c43c:	4b06      	ldr	r3, [pc, #24]	; (c458 <usbd_event_cb+0x70>)
    c43e:	68dc      	ldr	r4, [r3, #12]
    c440:	460d      	mov	r5, r1
	while (cg != NULL) {
    c442:	b144      	cbz	r4, c456 <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    c444:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c446:	4629      	mov	r1, r5
    c448:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    c44a:	b103      	cbz	r3, c44e <usbd_event_cb+0x66>
			cg->cb(change, value);
    c44c:	4798      	blx	r3
		cg = cg->next;
    c44e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c450:	2c00      	cmp	r4, #0
    c452:	d1f7      	bne.n	c444 <usbd_event_cb+0x5c>
    c454:	bd70      	pop	{r4, r5, r6, pc}
    c456:	bd70      	pop	{r4, r5, r6, pc}
    c458:	20001c28 	.word	0x20001c28
    c45c:	0000bfe1 	.word	0x0000bfe1
    c460:	0000bf45 	.word	0x0000bf45

0000c464 <usbdc_xfer>:
{
    c464:	b500      	push	{lr}
    c466:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c468:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    c46c:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c46e:	9101      	str	r1, [sp, #4]
    c470:	9202      	str	r2, [sp, #8]
    c472:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c476:	f000 fb55 	bl	cb24 <usb_d_ep_transfer>
}
    c47a:	b005      	add	sp, #20
    c47c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c480 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    c480:	2801      	cmp	r0, #1
    c482:	d009      	beq.n	c498 <usbdc_register_handler+0x18>
    c484:	d305      	bcc.n	c492 <usbdc_register_handler+0x12>
    c486:	2802      	cmp	r0, #2
    c488:	d102      	bne.n	c490 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c48a:	4805      	ldr	r0, [pc, #20]	; (c4a0 <usbdc_register_handler+0x20>)
    c48c:	f000 bc66 	b.w	cd5c <list_insert_at_end>
    c490:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c492:	4804      	ldr	r0, [pc, #16]	; (c4a4 <usbdc_register_handler+0x24>)
    c494:	f000 bc62 	b.w	cd5c <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c498:	4803      	ldr	r0, [pc, #12]	; (c4a8 <usbdc_register_handler+0x28>)
    c49a:	f000 bc5f 	b.w	cd5c <list_insert_at_end>
    c49e:	bf00      	nop
    c4a0:	20001c34 	.word	0x20001c34
    c4a4:	20001c2c 	.word	0x20001c2c
    c4a8:	20001c30 	.word	0x20001c30

0000c4ac <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c4ac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c4ae:	4605      	mov	r5, r0
    c4b0:	3000      	adds	r0, #0
    c4b2:	bf18      	it	ne
    c4b4:	2001      	movne	r0, #1
    c4b6:	f240 3255 	movw	r2, #853	; 0x355
    c4ba:	490c      	ldr	r1, [pc, #48]	; (c4ec <usbdc_init+0x40>)
    c4bc:	f000 fc4a 	bl	cd54 <assert>

	int32_t rc;

	rc = usb_d_init();
    c4c0:	f000 f9dc 	bl	c87c <usb_d_init>
	if (rc < 0) {
    c4c4:	2800      	cmp	r0, #0
    c4c6:	db0f      	blt.n	c4e8 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c4c8:	4c09      	ldr	r4, [pc, #36]	; (c4f0 <usbdc_init+0x44>)
    c4ca:	2220      	movs	r2, #32
    c4cc:	2100      	movs	r1, #0
    c4ce:	4620      	mov	r0, r4
    c4d0:	f011 ffdc 	bl	1e48c <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c4d4:	4907      	ldr	r1, [pc, #28]	; (c4f4 <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    c4d6:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c4d8:	2000      	movs	r0, #0
    c4da:	f000 fa51 	bl	c980 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c4de:	2001      	movs	r0, #1
    c4e0:	4905      	ldr	r1, [pc, #20]	; (c4f8 <usbdc_init+0x4c>)
    c4e2:	f000 fa4d 	bl	c980 <usb_d_register_callback>

	return 0;
    c4e6:	2000      	movs	r0, #0
}
    c4e8:	bd38      	pop	{r3, r4, r5, pc}
    c4ea:	bf00      	nop
    c4ec:	000231a8 	.word	0x000231a8
    c4f0:	20001c28 	.word	0x20001c28
    c4f4:	0000bf29 	.word	0x0000bf29
    c4f8:	0000c3e9 	.word	0x0000c3e9

0000c4fc <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    c4fc:	4601      	mov	r1, r0
    c4fe:	4801      	ldr	r0, [pc, #4]	; (c504 <usbdc_register_function+0x8>)
    c500:	f000 bc2c 	b.w	cd5c <list_insert_at_end>
    c504:	20001c38 	.word	0x20001c38

0000c508 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c508:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c50a:	4b0a      	ldr	r3, [pc, #40]	; (c534 <usbdc_start+0x2c>)
    c50c:	7e9c      	ldrb	r4, [r3, #26]
    c50e:	b954      	cbnz	r4, c526 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    c510:	b160      	cbz	r0, c52c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c512:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    c514:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    c516:	79d2      	ldrb	r2, [r2, #7]
    c518:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c51a:	2201      	movs	r2, #1
    c51c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c51e:	f000 fa31 	bl	c984 <usb_d_enable>
	return ERR_NONE;
    c522:	4620      	mov	r0, r4
    c524:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    c526:	f06f 0003 	mvn.w	r0, #3
    c52a:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    c52c:	f06f 0008 	mvn.w	r0, #8
}
    c530:	bd10      	pop	{r4, pc}
    c532:	bf00      	nop
    c534:	20001c28 	.word	0x20001c28

0000c538 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    c538:	f000 ba26 	b.w	c988 <usb_d_attach>

0000c53c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    c53c:	4b01      	ldr	r3, [pc, #4]	; (c544 <usbdc_get_ctrl_buffer+0x8>)
}
    c53e:	6958      	ldr	r0, [r3, #20]
    c540:	4770      	bx	lr
    c542:	bf00      	nop
    c544:	20001c28 	.word	0x20001c28

0000c548 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    c548:	4b03      	ldr	r3, [pc, #12]	; (c558 <usbdc_get_state+0x10>)
    c54a:	7e98      	ldrb	r0, [r3, #26]
    c54c:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    c550:	bf18      	it	ne
    c552:	2010      	movne	r0, #16
    c554:	4770      	bx	lr
    c556:	bf00      	nop
    c558:	20001c28 	.word	0x20001c28

0000c55c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c55c:	4288      	cmp	r0, r1
    c55e:	d214      	bcs.n	c58a <usb_find_desc+0x2e>
    c560:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c562:	2b01      	cmp	r3, #1
    c564:	d911      	bls.n	c58a <usb_find_desc+0x2e>
{
    c566:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c568:	7844      	ldrb	r4, [r0, #1]
    c56a:	4294      	cmp	r4, r2
    c56c:	d106      	bne.n	c57c <usb_find_desc+0x20>
    c56e:	e009      	b.n	c584 <usb_find_desc+0x28>
    c570:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c572:	2b01      	cmp	r3, #1
    c574:	d905      	bls.n	c582 <usb_find_desc+0x26>
	return desc[1];
    c576:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c578:	4294      	cmp	r4, r2
    c57a:	d003      	beq.n	c584 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    c57c:	4418      	add	r0, r3
	while (desc < eof) {
    c57e:	4281      	cmp	r1, r0
    c580:	d8f6      	bhi.n	c570 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c582:	2000      	movs	r0, #0
}
    c584:	f85d 4b04 	ldr.w	r4, [sp], #4
    c588:	4770      	bx	lr
	return NULL;
    c58a:	2000      	movs	r0, #0
    c58c:	4770      	bx	lr
    c58e:	bf00      	nop

0000c590 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c590:	4288      	cmp	r0, r1
    c592:	d213      	bcs.n	c5bc <usb_find_ep_desc+0x2c>
    c594:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c596:	2b01      	cmp	r3, #1
    c598:	d910      	bls.n	c5bc <usb_find_ep_desc+0x2c>
	return desc[1];
    c59a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c59c:	2a04      	cmp	r2, #4
    c59e:	d00d      	beq.n	c5bc <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c5a0:	2a05      	cmp	r2, #5
    c5a2:	d108      	bne.n	c5b6 <usb_find_ep_desc+0x26>
    c5a4:	e00c      	b.n	c5c0 <usb_find_ep_desc+0x30>
    c5a6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c5a8:	2b01      	cmp	r3, #1
    c5aa:	d907      	bls.n	c5bc <usb_find_ep_desc+0x2c>
    c5ac:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c5ae:	2a04      	cmp	r2, #4
    c5b0:	d004      	beq.n	c5bc <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c5b2:	2a05      	cmp	r2, #5
    c5b4:	d003      	beq.n	c5be <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    c5b6:	4418      	add	r0, r3
	while (desc < eof) {
    c5b8:	4281      	cmp	r1, r0
    c5ba:	d8f4      	bhi.n	c5a6 <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c5bc:	2000      	movs	r0, #0
}
    c5be:	4770      	bx	lr
    c5c0:	4770      	bx	lr
    c5c2:	bf00      	nop

0000c5c4 <usb_find_cfg_desc>:
	while (desc < eof) {
    c5c4:	4288      	cmp	r0, r1
    c5c6:	d226      	bcs.n	c616 <usb_find_cfg_desc+0x52>
    c5c8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c5ca:	2b01      	cmp	r3, #1
    c5cc:	d923      	bls.n	c616 <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c5ce:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c5d0:	7844      	ldrb	r4, [r0, #1]
    c5d2:	2c02      	cmp	r4, #2
    c5d4:	d106      	bne.n	c5e4 <usb_find_cfg_desc+0x20>
    c5d6:	e012      	b.n	c5fe <usb_find_cfg_desc+0x3a>
    c5d8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c5da:	2b01      	cmp	r3, #1
    c5dc:	d905      	bls.n	c5ea <usb_find_cfg_desc+0x26>
	return desc[1];
    c5de:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c5e0:	2c02      	cmp	r4, #2
    c5e2:	d00c      	beq.n	c5fe <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    c5e4:	4418      	add	r0, r3
	while (desc < eof) {
    c5e6:	4281      	cmp	r1, r0
    c5e8:	d8f6      	bhi.n	c5d8 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    c5ea:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    c5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    c5f0:	4770      	bx	lr
		_desc_len_check();
    c5f2:	7803      	ldrb	r3, [r0, #0]
    c5f4:	2b01      	cmp	r3, #1
    c5f6:	d9f8      	bls.n	c5ea <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    c5f8:	7843      	ldrb	r3, [r0, #1]
    c5fa:	2b02      	cmp	r3, #2
    c5fc:	d1f5      	bne.n	c5ea <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    c5fe:	7943      	ldrb	r3, [r0, #5]
    c600:	4293      	cmp	r3, r2
    c602:	d0f3      	beq.n	c5ec <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    c604:	78c4      	ldrb	r4, [r0, #3]
    c606:	7883      	ldrb	r3, [r0, #2]
    c608:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c60c:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    c610:	4281      	cmp	r1, r0
    c612:	d8ee      	bhi.n	c5f2 <usb_find_cfg_desc+0x2e>
    c614:	e7e9      	b.n	c5ea <usb_find_cfg_desc+0x26>
		return NULL;
    c616:	2000      	movs	r0, #0
    c618:	4770      	bx	lr
    c61a:	bf00      	nop

0000c61c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c61c:	4288      	cmp	r0, r1
    c61e:	d216      	bcs.n	c64e <usb_find_str_desc+0x32>
{
    c620:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    c622:	2500      	movs	r5, #0
    c624:	e005      	b.n	c632 <usb_find_str_desc+0x16>
	return desc[1];
    c626:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c628:	2c03      	cmp	r4, #3
    c62a:	d008      	beq.n	c63e <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    c62c:	4418      	add	r0, r3
	while (desc < eof) {
    c62e:	4281      	cmp	r1, r0
    c630:	d902      	bls.n	c638 <usb_find_str_desc+0x1c>
    c632:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c634:	2b01      	cmp	r3, #1
    c636:	d8f6      	bhi.n	c626 <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    c638:	2000      	movs	r0, #0
}
    c63a:	bc30      	pop	{r4, r5}
    c63c:	4770      	bx	lr
			if (i == str_index) {
    c63e:	4295      	cmp	r5, r2
    c640:	d0fb      	beq.n	c63a <usb_find_str_desc+0x1e>
    c642:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    c644:	4281      	cmp	r1, r0
    c646:	f105 0501 	add.w	r5, r5, #1
    c64a:	d8f2      	bhi.n	c632 <usb_find_str_desc+0x16>
    c64c:	e7f4      	b.n	c638 <usb_find_str_desc+0x1c>
	return NULL;
    c64e:	2000      	movs	r0, #0
    c650:	4770      	bx	lr
    c652:	bf00      	nop

0000c654 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    c654:	2000      	movs	r0, #0
    c656:	4770      	bx	lr

0000c658 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    c658:	b5f0      	push	{r4, r5, r6, r7, lr}
    c65a:	4f0f      	ldr	r7, [pc, #60]	; (c698 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c65c:	f000 0e0f 	and.w	lr, r0, #15
    c660:	463a      	mov	r2, r7
{
    c662:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c664:	7854      	ldrb	r4, [r2, #1]
    c666:	42a0      	cmp	r0, r4
    c668:	461e      	mov	r6, r3
    c66a:	f103 0301 	add.w	r3, r3, #1
    c66e:	d008      	beq.n	c682 <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c670:	7815      	ldrb	r5, [r2, #0]
    c672:	3220      	adds	r2, #32
    c674:	b90d      	cbnz	r5, c67a <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c676:	4574      	cmp	r4, lr
    c678:	d003      	beq.n	c682 <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c67a:	2b0d      	cmp	r3, #13
    c67c:	d1f2      	bne.n	c664 <usb_d_cb_trans_more+0xc>
    c67e:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    c682:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    c686:	78b3      	ldrb	r3, [r6, #2]
    c688:	2b03      	cmp	r3, #3
    c68a:	d001      	beq.n	c690 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    c68c:	2000      	movs	r0, #0
    c68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    c690:	69b3      	ldr	r3, [r6, #24]
}
    c692:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    c696:	4718      	bx	r3
    c698:	20001c48 	.word	0x20001c48

0000c69c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    c69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c6a0:	f8df 9130 	ldr.w	r9, [pc, #304]	; c7d4 <_usb_d_cb_trans_done+0x138>
    c6a4:	4607      	mov	r7, r0
    c6a6:	4688      	mov	r8, r1
    c6a8:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c6aa:	f000 010f 	and.w	r1, r0, #15
{
    c6ae:	2300      	movs	r3, #0
    c6b0:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c6b2:	7844      	ldrb	r4, [r0, #1]
    c6b4:	42a7      	cmp	r7, r4
    c6b6:	461e      	mov	r6, r3
    c6b8:	f103 0301 	add.w	r3, r3, #1
    c6bc:	d008      	beq.n	c6d0 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c6be:	7805      	ldrb	r5, [r0, #0]
    c6c0:	3020      	adds	r0, #32
    c6c2:	b90d      	cbnz	r5, c6c8 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c6c4:	428c      	cmp	r4, r1
    c6c6:	d003      	beq.n	c6d0 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c6c8:	2b0d      	cmp	r3, #13
    c6ca:	d1f2      	bne.n	c6b2 <_usb_d_cb_trans_done+0x16>
    c6cc:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    c6d0:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    c6d2:	f1b8 0f00 	cmp.w	r8, #0
    c6d6:	d110      	bne.n	c6fa <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    c6d8:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c6dc:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    c6e0:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c6e4:	b32b      	cbz	r3, c732 <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    c6e6:	2301      	movs	r3, #1
    c6e8:	4641      	mov	r1, r8
    c6ea:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    c6ec:	444e      	add	r6, r9
    c6ee:	4638      	mov	r0, r7
    c6f0:	69f3      	ldr	r3, [r6, #28]
    c6f2:	4798      	blx	r3
}
    c6f4:	b007      	add	sp, #28
    c6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    c6fa:	f1b8 0f01 	cmp.w	r8, #1
    c6fe:	d00b      	beq.n	c718 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    c700:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    c704:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    c708:	d025      	beq.n	c756 <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    c70a:	f1b8 0f03 	cmp.w	r8, #3
    c70e:	d01d      	beq.n	c74c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    c710:	2106      	movs	r1, #6
    c712:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    c714:	70d9      	strb	r1, [r3, #3]
    c716:	e7e9      	b.n	c6ec <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    c718:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c71c:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    c720:	f04f 0802 	mov.w	r8, #2
    c724:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c728:	b1e9      	cbz	r1, c766 <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    c72a:	2305      	movs	r3, #5
    c72c:	4641      	mov	r1, r8
    c72e:	70a3      	strb	r3, [r4, #2]
    c730:	e7dc      	b.n	c6ec <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    c732:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c734:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    c736:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c738:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    c73c:	d01f      	beq.n	c77e <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    c73e:	69e3      	ldr	r3, [r4, #28]
    c740:	7860      	ldrb	r0, [r4, #1]
    c742:	4641      	mov	r1, r8
    c744:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c746:	2302      	movs	r3, #2
    c748:	70a3      	strb	r3, [r4, #2]
    c74a:	e7d3      	b.n	c6f4 <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    c74c:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    c74e:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    c750:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    c752:	70d9      	strb	r1, [r3, #3]
    c754:	e7ca      	b.n	c6ec <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c756:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    c75a:	2104      	movs	r1, #4
    c75c:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c75e:	b158      	cbz	r0, c778 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    c760:	2001      	movs	r0, #1
    c762:	7098      	strb	r0, [r3, #2]
    c764:	e7c2      	b.n	c6ec <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c766:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c768:	f884 8002 	strb.w	r8, [r4, #2]
    c76c:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c76e:	f006 fa5b 	bl	12c28 <_usb_d_dev_ep_stall>
    c772:	78e1      	ldrb	r1, [r4, #3]
    c774:	9a01      	ldr	r2, [sp, #4]
    c776:	e7b9      	b.n	c6ec <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c778:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    c77c:	e7ba      	b.n	c6f4 <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c77e:	69e3      	ldr	r3, [r4, #28]
    c780:	7860      	ldrb	r0, [r4, #1]
    c782:	f994 500c 	ldrsb.w	r5, [r4, #12]
    c786:	2101      	movs	r1, #1
    c788:	4798      	blx	r3
		if (err) {
    c78a:	b160      	cbz	r0, c7a6 <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c78c:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    c78e:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    c790:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c792:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    c794:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    c796:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c798:	bfa8      	it	ge
    c79a:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    c79e:	2101      	movs	r1, #1
    c7a0:	f006 fa42 	bl	12c28 <_usb_d_dev_ep_stall>
    c7a4:	e7a6      	b.n	c6f4 <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    c7a6:	2304      	movs	r3, #4
    c7a8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    c7aa:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    c7ac:	f8cd 800c 	str.w	r8, [sp, #12]
    c7b0:	2d00      	cmp	r5, #0
    c7b2:	bfac      	ite	ge
    c7b4:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    c7b8:	f003 030f 	andlt.w	r3, r3, #15
    c7bc:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    c7be:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    c7c0:	f8cd 8010 	str.w	r8, [sp, #16]
    c7c4:	f88d 3014 	strb.w	r3, [sp, #20]
    c7c8:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    c7cc:	f006 fae8 	bl	12da0 <_usb_d_dev_ep_trans>
    c7d0:	e790      	b.n	c6f4 <_usb_d_cb_trans_done+0x58>
    c7d2:	bf00      	nop
    c7d4:	20001c48 	.word	0x20001c48

0000c7d8 <usb_d_cb_trans_setup>:
{
    c7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7dc:	4f26      	ldr	r7, [pc, #152]	; (c878 <usb_d_cb_trans_setup+0xa0>)
    c7de:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c7e0:	f000 060f 	and.w	r6, r0, #15
    c7e4:	463a      	mov	r2, r7
{
    c7e6:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c7e8:	7851      	ldrb	r1, [r2, #1]
    c7ea:	428c      	cmp	r4, r1
    c7ec:	461d      	mov	r5, r3
    c7ee:	f103 0301 	add.w	r3, r3, #1
    c7f2:	d032      	beq.n	c85a <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c7f4:	7810      	ldrb	r0, [r2, #0]
    c7f6:	3220      	adds	r2, #32
    c7f8:	b908      	cbnz	r0, c7fe <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c7fa:	42b1      	cmp	r1, r6
    c7fc:	d02d      	beq.n	c85a <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c7fe:	2b0d      	cmp	r3, #13
    c800:	d1f2      	bne.n	c7e8 <usb_d_cb_trans_setup+0x10>
    c802:	f06f 0613 	mvn.w	r6, #19
    c806:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    c80a:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    c80c:	4631      	mov	r1, r6
    c80e:	4620      	mov	r0, r4
    c810:	f006 fa9c 	bl	12d4c <_usb_d_dev_ep_read_req>
	if (n != 8) {
    c814:	b2c0      	uxtb	r0, r0
    c816:	2808      	cmp	r0, #8
    c818:	d00a      	beq.n	c830 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c81a:	2101      	movs	r1, #1
    c81c:	4620      	mov	r0, r4
    c81e:	f006 fa03 	bl	12c28 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c822:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    c826:	2101      	movs	r1, #1
}
    c828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c82c:	f006 b9fc 	b.w	12c28 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c830:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c834:	2100      	movs	r1, #0
    c836:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    c838:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c83c:	f006 f9f4 	bl	12c28 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c840:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    c842:	2100      	movs	r1, #0
    c844:	4640      	mov	r0, r8
    c846:	f006 f9ef 	bl	12c28 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    c84a:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c84c:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    c84e:	696b      	ldr	r3, [r5, #20]
    c850:	4620      	mov	r0, r4
    c852:	4798      	blx	r3
    c854:	b120      	cbz	r0, c860 <usb_d_cb_trans_setup+0x88>
    c856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c85a:	016e      	lsls	r6, r5, #5
    c85c:	360c      	adds	r6, #12
    c85e:	e7d4      	b.n	c80a <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    c860:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c862:	4639      	mov	r1, r7
    c864:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    c866:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c868:	f006 f9de 	bl	12c28 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c86c:	4639      	mov	r1, r7
    c86e:	4640      	mov	r0, r8
}
    c870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c874:	f006 b9d8 	b.w	12c28 <_usb_d_dev_ep_stall>
    c878:	20001c48 	.word	0x20001c48

0000c87c <usb_d_init>:

int32_t usb_d_init(void)
{
    c87c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    c87e:	f005 fecf 	bl	12620 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    c882:	2800      	cmp	r0, #0
    c884:	db70      	blt.n	c968 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    c886:	4c39      	ldr	r4, [pc, #228]	; (c96c <usb_d_init+0xf0>)
    c888:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    c88c:	2100      	movs	r1, #0
    c88e:	4620      	mov	r0, r4
    c890:	f011 fdfc 	bl	1e48c <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c894:	4b36      	ldr	r3, [pc, #216]	; (c970 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c896:	4937      	ldr	r1, [pc, #220]	; (c974 <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c898:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    c89a:	22ff      	movs	r2, #255	; 0xff
    c89c:	7062      	strb	r2, [r4, #1]
    c89e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    c8a2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    c8a6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    c8aa:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    c8ae:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    c8b2:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    c8b6:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c8ba:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c8bc:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c8be:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c8c0:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c8c2:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c8c4:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c8c6:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c8c8:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c8ca:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c8cc:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c8ce:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c8d0:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c8d2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c8d6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c8da:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c8de:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c8e2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c8e6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c8ea:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c8ee:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c8f2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c8f6:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c8fa:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c8fe:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    c902:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    c906:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    c90a:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    c90e:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    c912:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c916:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c91a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c91e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c922:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c926:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c92a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c92e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c932:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c936:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c93a:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c93e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c942:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c946:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c94a:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c94e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c952:	f006 fb5d 	bl	13010 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    c956:	4908      	ldr	r1, [pc, #32]	; (c978 <usb_d_init+0xfc>)
    c958:	2001      	movs	r0, #1
    c95a:	f006 fb59 	bl	13010 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    c95e:	2002      	movs	r0, #2
    c960:	4906      	ldr	r1, [pc, #24]	; (c97c <usb_d_init+0x100>)
    c962:	f006 fb55 	bl	13010 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    c966:	2000      	movs	r0, #0
}
    c968:	bd10      	pop	{r4, pc}
    c96a:	bf00      	nop
    c96c:	20001c48 	.word	0x20001c48
    c970:	0000c655 	.word	0x0000c655
    c974:	0000c7d9 	.word	0x0000c7d9
    c978:	0000c659 	.word	0x0000c659
    c97c:	0000c69d 	.word	0x0000c69d

0000c980 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    c980:	f006 bb34 	b.w	12fec <_usb_d_dev_register_callback>

0000c984 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    c984:	f005 beec 	b.w	12760 <_usb_d_dev_enable>

0000c988 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    c988:	f005 bf1a 	b.w	127c0 <_usb_d_dev_attach>

0000c98c <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    c98c:	f005 bf22 	b.w	127d4 <_usb_d_dev_set_address>

0000c990 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    c990:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c992:	4e25      	ldr	r6, [pc, #148]	; (ca28 <usb_d_ep0_init+0x98>)
    c994:	7873      	ldrb	r3, [r6, #1]
    c996:	2b00      	cmp	r3, #0
    c998:	d043      	beq.n	ca22 <usb_d_ep0_init+0x92>
    c99a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    c99e:	2b00      	cmp	r3, #0
    c9a0:	d03f      	beq.n	ca22 <usb_d_ep0_init+0x92>
    c9a2:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d03b      	beq.n	ca22 <usb_d_ep0_init+0x92>
    c9aa:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    c9ae:	b3c3      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9b0:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    c9b4:	b3ab      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9b6:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    c9ba:	b393      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9bc:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    c9c0:	b37b      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9c2:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    c9c6:	b363      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9c8:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    c9cc:	b34b      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9ce:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    c9d2:	b333      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9d4:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    c9d8:	b31b      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9da:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    c9de:	b303      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9e0:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    c9e4:	b1eb      	cbz	r3, ca22 <usb_d_ep0_init+0x92>
    c9e6:	4633      	mov	r3, r6
    c9e8:	2400      	movs	r4, #0
    c9ea:	7859      	ldrb	r1, [r3, #1]
    c9ec:	29ff      	cmp	r1, #255	; 0xff
    c9ee:	d00a      	beq.n	ca06 <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c9f0:	781d      	ldrb	r5, [r3, #0]
    c9f2:	3320      	adds	r3, #32
    c9f4:	b90d      	cbnz	r5, c9fa <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c9f6:	290f      	cmp	r1, #15
    c9f8:	d005      	beq.n	ca06 <usb_d_ep0_init+0x76>
    c9fa:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c9fc:	2c0d      	cmp	r4, #13
    c9fe:	d1f4      	bne.n	c9ea <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    ca00:	f06f 0014 	mvn.w	r0, #20
    ca04:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    ca06:	2100      	movs	r1, #0
    ca08:	4602      	mov	r2, r0
    ca0a:	4608      	mov	r0, r1
    ca0c:	f005 fee8 	bl	127e0 <_usb_d_dev_ep_init>
	if (rc < 0) {
    ca10:	2800      	cmp	r0, #0
    ca12:	db05      	blt.n	ca20 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    ca14:	0164      	lsls	r4, r4, #5
    ca16:	1933      	adds	r3, r6, r4
    ca18:	2000      	movs	r0, #0
    ca1a:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    ca1c:	5530      	strb	r0, [r6, r4]
    ca1e:	bd70      	pop	{r4, r5, r6, pc}
}
    ca20:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    ca22:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    ca26:	bd70      	pop	{r4, r5, r6, pc}
    ca28:	20001c48 	.word	0x20001c48

0000ca2c <usb_d_ep_init>:
{
    ca2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca2e:	4c19      	ldr	r4, [pc, #100]	; (ca94 <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca30:	f000 0c0f 	and.w	ip, r0, #15
    ca34:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    ca38:	4627      	mov	r7, r4
    ca3a:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ca3c:	785d      	ldrb	r5, [r3, #1]
    ca3e:	42a8      	cmp	r0, r5
    ca40:	d024      	beq.n	ca8c <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ca42:	781e      	ldrb	r6, [r3, #0]
    ca44:	3320      	adds	r3, #32
    ca46:	b90e      	cbnz	r6, ca4c <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca48:	4565      	cmp	r5, ip
    ca4a:	d01f      	beq.n	ca8c <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ca4c:	459e      	cmp	lr, r3
    ca4e:	d1f5      	bne.n	ca3c <usb_d_ep_init+0x10>
    ca50:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ca52:	7863      	ldrb	r3, [r4, #1]
    ca54:	2bff      	cmp	r3, #255	; 0xff
    ca56:	d00a      	beq.n	ca6e <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ca58:	7826      	ldrb	r6, [r4, #0]
    ca5a:	3420      	adds	r4, #32
    ca5c:	b90e      	cbnz	r6, ca62 <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca5e:	2b0f      	cmp	r3, #15
    ca60:	d005      	beq.n	ca6e <usb_d_ep_init+0x42>
    ca62:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ca64:	2d0d      	cmp	r5, #13
    ca66:	d1f4      	bne.n	ca52 <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    ca68:	f06f 0014 	mvn.w	r0, #20
    ca6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca6e:	460e      	mov	r6, r1
    ca70:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    ca72:	f005 feb5 	bl	127e0 <_usb_d_dev_ep_init>
	if (rc < 0) {
    ca76:	2800      	cmp	r0, #0
    ca78:	db07      	blt.n	ca8a <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    ca7a:	016d      	lsls	r5, r5, #5
    ca7c:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    ca7e:	f006 0603 	and.w	r6, r6, #3
    ca82:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    ca84:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    ca86:	2000      	movs	r0, #0
    ca88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    ca8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    ca8c:	f06f 0013 	mvn.w	r0, #19
    ca90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca92:	bf00      	nop
    ca94:	20001c48 	.word	0x20001c48

0000ca98 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    ca98:	b570      	push	{r4, r5, r6, lr}
    ca9a:	4e0c      	ldr	r6, [pc, #48]	; (cacc <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca9c:	f000 050f 	and.w	r5, r0, #15
    caa0:	4633      	mov	r3, r6
{
    caa2:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    caa4:	785a      	ldrb	r2, [r3, #1]
    caa6:	4290      	cmp	r0, r2
    caa8:	d008      	beq.n	cabc <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    caaa:	7819      	ldrb	r1, [r3, #0]
    caac:	3320      	adds	r3, #32
    caae:	b909      	cbnz	r1, cab4 <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cab0:	42aa      	cmp	r2, r5
    cab2:	d003      	beq.n	cabc <usb_d_ep_deinit+0x24>
    cab4:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cab6:	2c0d      	cmp	r4, #13
    cab8:	d1f4      	bne.n	caa4 <usb_d_ep_deinit+0xc>
    caba:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    cabc:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    cac0:	f005 ff00 	bl	128c4 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    cac4:	23ff      	movs	r3, #255	; 0xff
    cac6:	7063      	strb	r3, [r4, #1]
    cac8:	bd70      	pop	{r4, r5, r6, pc}
    caca:	bf00      	nop
    cacc:	20001c48 	.word	0x20001c48

0000cad0 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    cad0:	b570      	push	{r4, r5, r6, lr}
    cad2:	4d13      	ldr	r5, [pc, #76]	; (cb20 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cad4:	f000 060f 	and.w	r6, r0, #15
    cad8:	462b      	mov	r3, r5
{
    cada:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cadc:	7859      	ldrb	r1, [r3, #1]
    cade:	4288      	cmp	r0, r1
    cae0:	d00a      	beq.n	caf8 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cae2:	781c      	ldrb	r4, [r3, #0]
    cae4:	3320      	adds	r3, #32
    cae6:	b90c      	cbnz	r4, caec <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cae8:	42b1      	cmp	r1, r6
    caea:	d015      	beq.n	cb18 <usb_d_ep_enable+0x48>
    caec:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    caee:	2a0d      	cmp	r2, #13
    caf0:	d1f4      	bne.n	cadc <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    caf2:	f06f 0011 	mvn.w	r0, #17
    caf6:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    caf8:	0152      	lsls	r2, r2, #5
    cafa:	5cab      	ldrb	r3, [r5, r2]
    cafc:	2b00      	cmp	r3, #0
    cafe:	bf14      	ite	ne
    cb00:	2301      	movne	r3, #1
    cb02:	2302      	moveq	r3, #2
    cb04:	4415      	add	r5, r2
    cb06:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    cb08:	f005 ff6e 	bl	129e8 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    cb0c:	2800      	cmp	r0, #0
    cb0e:	db00      	blt.n	cb12 <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    cb10:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    cb12:	2300      	movs	r3, #0
    cb14:	70ab      	strb	r3, [r5, #2]
    cb16:	bd70      	pop	{r4, r5, r6, pc}
    cb18:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    cb1a:	2302      	movs	r3, #2
    cb1c:	e7f2      	b.n	cb04 <usb_d_ep_enable+0x34>
    cb1e:	bf00      	nop
    cb20:	20001c48 	.word	0x20001c48

0000cb24 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb28:	f8df 811c 	ldr.w	r8, [pc, #284]	; cc48 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    cb2c:	7a05      	ldrb	r5, [r0, #8]
{
    cb2e:	b087      	sub	sp, #28
    cb30:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb32:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    cb36:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cb38:	7859      	ldrb	r1, [r3, #1]
    cb3a:	428d      	cmp	r5, r1
    cb3c:	d00c      	beq.n	cb58 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cb3e:	781c      	ldrb	r4, [r3, #0]
    cb40:	3320      	adds	r3, #32
    cb42:	b90c      	cbnz	r4, cb48 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb44:	42b9      	cmp	r1, r7
    cb46:	d007      	beq.n	cb58 <usb_d_ep_transfer+0x34>
    cb48:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cb4a:	2a0d      	cmp	r2, #13
    cb4c:	d1f4      	bne.n	cb38 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    cb4e:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    cb52:	b007      	add	sp, #28
    cb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    cb58:	0154      	lsls	r4, r2, #5
    cb5a:	4606      	mov	r6, r0
    cb5c:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    cb60:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    cb62:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    cb66:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    cb6a:	f006 fa6f 	bl	1304c <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    cb6e:	f89b 3002 	ldrb.w	r3, [fp, #2]
    cb72:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    cb76:	f89d 7007 	ldrb.w	r7, [sp, #7]
    cb7a:	b2ff      	uxtb	r7, r7
    cb7c:	2f01      	cmp	r7, #1
    cb7e:	d011      	beq.n	cba4 <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    cb80:	a802      	add	r0, sp, #8
    cb82:	f006 fa6b 	bl	1305c <atomic_leave_critical>
		switch (state) {
    cb86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb8a:	b2db      	uxtb	r3, r3
    cb8c:	2b05      	cmp	r3, #5
    cb8e:	d040      	beq.n	cc12 <usb_d_ep_transfer+0xee>
    cb90:	2b06      	cmp	r3, #6
    cb92:	d022      	beq.n	cbda <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    cb94:	2b00      	cmp	r3, #0
    cb96:	bf0c      	ite	eq
    cb98:	f06f 0012 	mvneq.w	r0, #18
    cb9c:	2001      	movne	r0, #1
}
    cb9e:	b007      	add	sp, #28
    cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cba4:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    cba6:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cba8:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    cbac:	f006 fa56 	bl	1305c <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cbb0:	f818 2004 	ldrb.w	r2, [r8, r4]
    cbb4:	b9b2      	cbnz	r2, cbe4 <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    cbb6:	f89b 1013 	ldrb.w	r1, [fp, #19]
    cbba:	f89b 3012 	ldrb.w	r3, [fp, #18]
    cbbe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    cbc2:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    cbc4:	bb4b      	cbnz	r3, cc1a <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    cbc6:	2204      	movs	r2, #4
    cbc8:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    cbcc:	9304      	str	r3, [sp, #16]
    cbce:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cbd0:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cbd2:	9203      	str	r2, [sp, #12]
    cbd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cbd8:	e011      	b.n	cbfe <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    cbda:	f06f 000f 	mvn.w	r0, #15
}
    cbde:	b007      	add	sp, #28
    cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cbe4:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    cbe8:	6833      	ldr	r3, [r6, #0]
    cbea:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cbec:	bf18      	it	ne
    cbee:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    cbf0:	062a      	lsls	r2, r5, #24
    cbf2:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cbf6:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cbf8:	d4ec      	bmi.n	cbd4 <usb_d_ep_transfer+0xb0>
    cbfa:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    cbfe:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cc00:	f88d 3014 	strb.w	r3, [sp, #20]
    cc04:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    cc08:	f006 f8ca 	bl	12da0 <_usb_d_dev_ep_trans>
}
    cc0c:	b007      	add	sp, #28
    cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    cc12:	2002      	movs	r0, #2
}
    cc14:	b007      	add	sp, #28
    cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    cc1a:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    cc1e:	4599      	cmp	r9, r3
    cc20:	464f      	mov	r7, r9
    cc22:	bf28      	it	cs
    cc24:	461f      	movcs	r7, r3
    cc26:	2900      	cmp	r1, #0
    cc28:	db05      	blt.n	cc36 <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    cc2a:	6833      	ldr	r3, [r6, #0]
    cc2c:	9704      	str	r7, [sp, #16]
    cc2e:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cc30:	4617      	mov	r7, r2
    cc32:	7a33      	ldrb	r3, [r6, #8]
    cc34:	e7e1      	b.n	cbfa <usb_d_ep_transfer+0xd6>
    cc36:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    cc38:	6832      	ldr	r2, [r6, #0]
    cc3a:	9704      	str	r7, [sp, #16]
    cc3c:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cc3e:	bf94      	ite	ls
    cc40:	2700      	movls	r7, #0
    cc42:	2701      	movhi	r7, #1
    cc44:	7a33      	ldrb	r3, [r6, #8]
    cc46:	e7c5      	b.n	cbd4 <usb_d_ep_transfer+0xb0>
    cc48:	20001c48 	.word	0x20001c48

0000cc4c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    cc4c:	b570      	push	{r4, r5, r6, lr}
    cc4e:	4e0d      	ldr	r6, [pc, #52]	; (cc84 <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cc50:	f000 050f 	and.w	r5, r0, #15
    cc54:	4633      	mov	r3, r6
{
    cc56:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cc58:	785a      	ldrb	r2, [r3, #1]
    cc5a:	4290      	cmp	r0, r2
    cc5c:	d008      	beq.n	cc70 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cc5e:	7819      	ldrb	r1, [r3, #0]
    cc60:	3320      	adds	r3, #32
    cc62:	b909      	cbnz	r1, cc68 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cc64:	42aa      	cmp	r2, r5
    cc66:	d003      	beq.n	cc70 <usb_d_ep_abort+0x24>
    cc68:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cc6a:	2c0d      	cmp	r4, #13
    cc6c:	d1f4      	bne.n	cc58 <usb_d_ep_abort+0xc>
    cc6e:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cc70:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    cc74:	f006 f962 	bl	12f3c <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cc78:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    cc7a:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cc7c:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    cc7e:	70e3      	strb	r3, [r4, #3]
    cc80:	bd70      	pop	{r4, r5, r6, pc}
    cc82:	bf00      	nop
    cc84:	20001c48 	.word	0x20001c48

0000cc88 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    cc88:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    cc8a:	460c      	mov	r4, r1
    cc8c:	b131      	cbz	r1, cc9c <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    cc8e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    cc90:	bf18      	it	ne
    cc92:	2102      	movne	r1, #2
	}
}
    cc94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    cc98:	f005 bfc6 	b.w	12c28 <_usb_d_dev_ep_stall>
    cc9c:	4e15      	ldr	r6, [pc, #84]	; (ccf4 <usb_d_ep_halt+0x6c>)
    cc9e:	4605      	mov	r5, r0
    cca0:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cca2:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cca6:	785a      	ldrb	r2, [r3, #1]
    cca8:	4295      	cmp	r5, r2
    ccaa:	d00a      	beq.n	ccc2 <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ccac:	7819      	ldrb	r1, [r3, #0]
    ccae:	3320      	adds	r3, #32
    ccb0:	b909      	cbnz	r1, ccb6 <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ccb2:	4282      	cmp	r2, r0
    ccb4:	d005      	beq.n	ccc2 <usb_d_ep_halt+0x3a>
    ccb6:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ccb8:	2c0d      	cmp	r4, #13
    ccba:	d1f4      	bne.n	cca6 <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    ccbc:	f06f 0011 	mvn.w	r0, #17
    ccc0:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    ccc2:	2102      	movs	r1, #2
    ccc4:	4628      	mov	r0, r5
    ccc6:	f005 ffaf 	bl	12c28 <_usb_d_dev_ep_stall>
    ccca:	b900      	cbnz	r0, ccce <usb_d_ep_halt+0x46>
}
    cccc:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    ccce:	2100      	movs	r1, #0
    ccd0:	4628      	mov	r0, r5
    ccd2:	f005 ffa9 	bl	12c28 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    ccd6:	2800      	cmp	r0, #0
    ccd8:	dbf8      	blt.n	cccc <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    ccda:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    ccde:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cce0:	2301      	movs	r3, #1
    cce2:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    cce4:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    cce6:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    cce8:	69e3      	ldr	r3, [r4, #28]
    ccea:	2200      	movs	r2, #0
    ccec:	4798      	blx	r3
	return ERR_NONE;
    ccee:	2000      	movs	r0, #0
    ccf0:	bd70      	pop	{r4, r5, r6, pc}
    ccf2:	bf00      	nop
    ccf4:	20001c48 	.word	0x20001c48

0000ccf8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    ccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccfa:	f8df e054 	ldr.w	lr, [pc, #84]	; cd50 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ccfe:	f000 070f 	and.w	r7, r0, #15
    cd02:	4673      	mov	r3, lr
{
    cd04:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cd06:	785d      	ldrb	r5, [r3, #1]
    cd08:	42a8      	cmp	r0, r5
    cd0a:	d008      	beq.n	cd1e <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cd0c:	781e      	ldrb	r6, [r3, #0]
    cd0e:	3320      	adds	r3, #32
    cd10:	b90e      	cbnz	r6, cd16 <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cd12:	42bd      	cmp	r5, r7
    cd14:	d003      	beq.n	cd1e <usb_d_ep_register_callback+0x26>
    cd16:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cd18:	2c0d      	cmp	r4, #13
    cd1a:	d1f4      	bne.n	cd06 <usb_d_ep_register_callback+0xe>
    cd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    cd1e:	4b0b      	ldr	r3, [pc, #44]	; (cd4c <usb_d_ep_register_callback+0x54>)
    cd20:	2a00      	cmp	r2, #0
    cd22:	bf08      	it	eq
    cd24:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    cd26:	2901      	cmp	r1, #1
    cd28:	d003      	beq.n	cd32 <usb_d_ep_register_callback+0x3a>
    cd2a:	d30a      	bcc.n	cd42 <usb_d_ep_register_callback+0x4a>
    cd2c:	2902      	cmp	r1, #2
    cd2e:	d004      	beq.n	cd3a <usb_d_ep_register_callback+0x42>
    cd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    cd32:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cd36:	61a2      	str	r2, [r4, #24]
		break;
    cd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    cd3a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cd3e:	61e2      	str	r2, [r4, #28]
    cd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    cd42:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cd46:	6162      	str	r2, [r4, #20]
		break;
    cd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd4a:	bf00      	nop
    cd4c:	0000c655 	.word	0x0000c655
    cd50:	20001c48 	.word	0x20001c48

0000cd54 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    cd54:	b900      	cbnz	r0, cd58 <assert+0x4>
		__asm("BKPT #0");
    cd56:	be00      	bkpt	0x0000
    cd58:	4770      	bx	lr
    cd5a:	bf00      	nop

0000cd5c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    cd5c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    cd5e:	6804      	ldr	r4, [r0, #0]
{
    cd60:	4606      	mov	r6, r0
    cd62:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    cd64:	b144      	cbz	r4, cd78 <list_insert_at_end+0x1c>
		if (it == element) {
    cd66:	428c      	cmp	r4, r1
    cd68:	d015      	beq.n	cd96 <list_insert_at_end+0x3a>
    cd6a:	4623      	mov	r3, r4
    cd6c:	e001      	b.n	cd72 <list_insert_at_end+0x16>
    cd6e:	429d      	cmp	r5, r3
    cd70:	d011      	beq.n	cd96 <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    cd72:	681b      	ldr	r3, [r3, #0]
    cd74:	2b00      	cmp	r3, #0
    cd76:	d1fa      	bne.n	cd6e <list_insert_at_end+0x12>
    cd78:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    cd7a:	224f      	movs	r2, #79	; 0x4f
    cd7c:	4908      	ldr	r1, [pc, #32]	; (cda0 <list_insert_at_end+0x44>)
    cd7e:	f7ff ffe9 	bl	cd54 <assert>

	if (!list->head) {
    cd82:	6833      	ldr	r3, [r6, #0]
    cd84:	b90b      	cbnz	r3, cd8a <list_insert_at_end+0x2e>
    cd86:	e008      	b.n	cd9a <list_insert_at_end+0x3e>
    cd88:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    cd8a:	6823      	ldr	r3, [r4, #0]
    cd8c:	2b00      	cmp	r3, #0
    cd8e:	d1fb      	bne.n	cd88 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    cd90:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    cd92:	602b      	str	r3, [r5, #0]
    cd94:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    cd96:	2000      	movs	r0, #0
    cd98:	e7ef      	b.n	cd7a <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    cd9a:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    cd9c:	602b      	str	r3, [r5, #0]
		return;
    cd9e:	bd70      	pop	{r4, r5, r6, pc}
    cda0:	000231c0 	.word	0x000231c0

0000cda4 <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    cda6:	4d1f      	ldr	r5, [pc, #124]	; (ce24 <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    cda8:	682c      	ldr	r4, [r5, #0]
    cdaa:	f014 0401 	ands.w	r4, r4, #1
    cdae:	d002      	beq.n	cdb6 <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    cdb0:	4b1d      	ldr	r3, [pc, #116]	; (ce28 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    cdb2:	6818      	ldr	r0, [r3, #0]
    cdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdb6:	2074      	movs	r0, #116	; 0x74
    cdb8:	f006 faca 	bl	13350 <_Znwj>
    cdbc:	4e1a      	ldr	r6, [pc, #104]	; (ce28 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    cdbe:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    cdc0:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    cdc2:	210c      	movs	r1, #12
    cdc4:	f04f 30ff 	mov.w	r0, #4294967295
    cdc8:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    cdca:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    cdcc:	605c      	str	r4, [r3, #4]
    cdce:	6658      	str	r0, [r3, #100]	; 0x64
    cdd0:	609c      	str	r4, [r3, #8]
    cdd2:	6698      	str	r0, [r3, #104]	; 0x68
    cdd4:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    cdd6:	841c      	strh	r4, [r3, #32]
    cdd8:	611c      	str	r4, [r3, #16]
    cdda:	625c      	str	r4, [r3, #36]	; 0x24
    cddc:	615c      	str	r4, [r3, #20]
    cdde:	851c      	strh	r4, [r3, #40]	; 0x28
    cde0:	619c      	str	r4, [r3, #24]
    cde2:	62dc      	str	r4, [r3, #44]	; 0x2c
    cde4:	61dc      	str	r4, [r3, #28]
    cde6:	861c      	strh	r4, [r3, #48]	; 0x30
    cde8:	635c      	str	r4, [r3, #52]	; 0x34
    cdea:	871c      	strh	r4, [r3, #56]	; 0x38
    cdec:	63dc      	str	r4, [r3, #60]	; 0x3c
    cdee:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    cdf2:	645c      	str	r4, [r3, #68]	; 0x44
    cdf4:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    cdf8:	64dc      	str	r4, [r3, #76]	; 0x4c
    cdfa:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    cdfe:	655c      	str	r4, [r3, #84]	; 0x54
    ce00:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    ce04:	65dc      	str	r4, [r3, #92]	; 0x5c
    ce06:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    ce0a:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    ce0e:	671c      	str	r4, [r3, #112]	; 0x70
    ce10:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    ce14:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    ce18:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    ce1c:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    ce1e:	6033      	str	r3, [r6, #0]
    ce20:	602a      	str	r2, [r5, #0]
}
    ce22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce24:	20001de8 	.word	0x20001de8
    ce28:	20001e20 	.word	0x20001e20

0000ce2c <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    ce2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    ce2e:	4bbd      	ldr	r3, [pc, #756]	; (d124 <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    ce30:	4605      	mov	r5, r0
    };
    ce32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    ce34:	b085      	sub	sp, #20
    };
    ce36:	ac04      	add	r4, sp, #16
    ce38:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    ce3c:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    ce3e:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    ce40:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    ce44:	2303      	movs	r3, #3
    ce46:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    ce4a:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    ce4e:	f245 03c3 	movw	r3, #20675	; 0x50c3
    ce52:	842b      	strh	r3, [r5, #32]
    ce54:	852b      	strh	r3, [r5, #40]	; 0x28
    ce56:	862b      	strh	r3, [r5, #48]	; 0x30
    ce58:	872b      	strh	r3, [r5, #56]	; 0x38
    ce5a:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    ce5e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    ce62:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    ce66:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    ce6a:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    ce6e:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    ce70:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    ce74:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    ce78:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    ce7c:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    ce7e:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    ce80:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    ce82:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    ce84:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    ce86:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    ce8a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    ce8e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    ce92:	07cf      	lsls	r7, r1, #31
    ce94:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    ce98:	f04f 0401 	mov.w	r4, #1
    ce9c:	bf54      	ite	pl
    ce9e:	f364 0003 	bfipl	r0, r4, #0, #4
    cea2:	f364 1007 	bfimi	r0, r4, #4, #4
    cea6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    ceaa:	4a9f      	ldr	r2, [pc, #636]	; (d128 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    ceac:	4413      	add	r3, r2
    ceae:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    ceb0:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    ceb2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    ceb6:	f041 0101 	orr.w	r1, r1, #1
    ceba:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cebe:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cec0:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cec2:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cec6:	01db      	lsls	r3, r3, #7
    cec8:	441a      	add	r2, r3
    ceca:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    cece:	07ce      	lsls	r6, r1, #31
    ced0:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    ced4:	bf54      	ite	pl
    ced6:	f364 0003 	bfipl	r0, r4, #0, #4
    ceda:	f364 1007 	bfimi	r0, r4, #4, #4
    cede:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cee2:	4a91      	ldr	r2, [pc, #580]	; (d128 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    cee4:	4413      	add	r3, r2
    cee6:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cee8:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    ceea:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    ceee:	f041 0101 	orr.w	r1, r1, #1
    cef2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cef6:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cef8:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cefa:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cefe:	01db      	lsls	r3, r3, #7
    cf00:	441a      	add	r2, r3
    cf02:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    cf06:	07cf      	lsls	r7, r1, #31
    cf08:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cf0c:	bf54      	ite	pl
    cf0e:	f364 0003 	bfipl	r0, r4, #0, #4
    cf12:	f364 1007 	bfimi	r0, r4, #4, #4
    cf16:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf1a:	4a83      	ldr	r2, [pc, #524]	; (d128 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    cf1c:	4413      	add	r3, r2
    cf1e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf20:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf22:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    cf26:	f041 0101 	orr.w	r1, r1, #1
    cf2a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cf2e:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cf30:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cf32:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf36:	01db      	lsls	r3, r3, #7
    cf38:	441a      	add	r2, r3
    cf3a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf3e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf42:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cf46:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    cf4c:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf4e:	bf4c      	ite	mi
    cf50:	f364 1007 	bfimi	r0, r4, #4, #4
    cf54:	f364 0003 	bfipl	r0, r4, #0, #4
    cf58:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf5c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    cf60:	4a72      	ldr	r2, [pc, #456]	; (d12c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf62:	f041 0101 	orr.w	r1, r1, #1
    cf66:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    cf6a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    cf6e:	f36f 1386 	bfc	r3, #6, #1
    cf72:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    cf76:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    cf7a:	065f      	lsls	r7, r3, #25
    cf7c:	d4fb      	bmi.n	cf76 <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    cf7e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    cf82:	496a      	ldr	r1, [pc, #424]	; (d12c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    cf84:	2004      	movs	r0, #4
    cf86:	f360 0303 	bfi	r3, r0, #0, #4
    cf8a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    cf8e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    cf92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf96:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    cf9a:	684b      	ldr	r3, [r1, #4]
    cf9c:	06de      	lsls	r6, r3, #27
    cf9e:	d4fc      	bmi.n	cf9a <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    cfa0:	4963      	ldr	r1, [pc, #396]	; (d130 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    cfa2:	4a64      	ldr	r2, [pc, #400]	; (d134 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    cfa4:	6a0b      	ldr	r3, [r1, #32]
    cfa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cfaa:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    cfac:	8813      	ldrh	r3, [r2, #0]
    cfae:	f043 0301 	orr.w	r3, r3, #1
    cfb2:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    cfb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    cfb6:	f013 0301 	ands.w	r3, r3, #1
    cfba:	d1fb      	bne.n	cfb4 <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    cfbc:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    cfc0:	290a      	cmp	r1, #10
    cfc2:	f000 80e7 	beq.w	d194 <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    cfc6:	290c      	cmp	r1, #12
    cfc8:	f000 80df 	beq.w	d18a <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    cfcc:	2908      	cmp	r1, #8
    cfce:	f000 80d5 	beq.w	d17c <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    cfd2:	4b58      	ldr	r3, [pc, #352]	; (d134 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    cfd4:	881a      	ldrh	r2, [r3, #0]
    cfd6:	2101      	movs	r1, #1
    cfd8:	f361 220a 	bfi	r2, r1, #8, #3
    cfdc:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    cfde:	889a      	ldrh	r2, [r3, #4]
    cfe0:	b292      	uxth	r2, r2
    cfe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    cfe6:	f042 0204 	orr.w	r2, r2, #4
    cfea:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    cfec:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    cfee:	f014 0404 	ands.w	r4, r4, #4
    cff2:	d1fb      	bne.n	cfec <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    cff4:	4620      	mov	r0, r4
    cff6:	f001 fe33 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    cffa:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    cffc:	4620      	mov	r0, r4
    cffe:	f001 fe39 	bl	ec74 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d002:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d004:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d006:	f023 0302 	bic.w	r3, r3, #2
    d00a:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d00c:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d00e:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d010:	6833      	ldr	r3, [r6, #0]
    d012:	2b01      	cmp	r3, #1
    d014:	d0fc      	beq.n	d010 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    d016:	4b48      	ldr	r3, [pc, #288]	; (d138 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    d018:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d01a:	4948      	ldr	r1, [pc, #288]	; (d13c <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d01c:	4f48      	ldr	r7, [pc, #288]	; (d140 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    d01e:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d022:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d024:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d026:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d028:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d02a:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d02c:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d02e:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    d030:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d032:	f001 fe15 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d036:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d038:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d03a:	f023 0302 	bic.w	r3, r3, #2
    d03e:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d040:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d042:	6803      	ldr	r3, [r0, #0]
    d044:	2b01      	cmp	r3, #1
    d046:	d0fc      	beq.n	d042 <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    d048:	4b3e      	ldr	r3, [pc, #248]	; (d144 <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    d04a:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    d04c:	2001      	movs	r0, #1
    d04e:	f001 fe11 	bl	ec74 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d052:	2300      	movs	r3, #0
    d054:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d056:	4a37      	ldr	r2, [pc, #220]	; (d134 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    d058:	4e3b      	ldr	r6, [pc, #236]	; (d148 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    d05a:	493c      	ldr	r1, [pc, #240]	; (d14c <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    d05c:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d05e:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d062:	2408      	movs	r4, #8
    d064:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    d066:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d068:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d06a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    d06c:	f043 0301 	orr.w	r3, r3, #1
    d070:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d072:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d074:	075c      	lsls	r4, r3, #29
    d076:	d4fc      	bmi.n	d072 <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d078:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d07a:	492e      	ldr	r1, [pc, #184]	; (d134 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d07c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d080:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    d082:	7a13      	ldrb	r3, [r2, #8]
    d084:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    d088:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d08a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d08c:	06d8      	lsls	r0, r3, #27
    d08e:	d4fc      	bmi.n	d08a <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d090:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d092:	4c28      	ldr	r4, [pc, #160]	; (d134 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d094:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d096:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d098:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    d09c:	d1fb      	bne.n	d096 <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    d09e:	78e3      	ldrb	r3, [r4, #3]
    d0a0:	f043 0301 	orr.w	r3, r3, #1
    d0a4:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d0a6:	f001 fddb 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d0aa:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d0ac:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d0ae:	6813      	ldr	r3, [r2, #0]
    d0b0:	f043 0302 	orr.w	r3, r3, #2
    d0b4:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d0b6:	f001 fdd3 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d0ba:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d0bc:	4a1d      	ldr	r2, [pc, #116]	; (d134 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d0be:	f043 0302 	orr.w	r3, r3, #2
    d0c2:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d0c4:	88a3      	ldrh	r3, [r4, #4]
    d0c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d0ca:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    d0cc:	8823      	ldrh	r3, [r4, #0]
    d0ce:	f043 0302 	orr.w	r3, r3, #2
    d0d2:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d0d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d0d6:	0799      	lsls	r1, r3, #30
    d0d8:	d4fc      	bmi.n	d0d4 <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d0da:	2000      	movs	r0, #0
    d0dc:	f001 fdc0 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d0e0:	6803      	ldr	r3, [r0, #0]
    d0e2:	079a      	lsls	r2, r3, #30
    d0e4:	d4f9      	bmi.n	d0da <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    d0e6:	2001      	movs	r0, #1
    d0e8:	f001 fdba 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d0ec:	6803      	ldr	r3, [r0, #0]
    d0ee:	079b      	lsls	r3, r3, #30
    d0f0:	d4f9      	bmi.n	d0e6 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    d0f2:	4a10      	ldr	r2, [pc, #64]	; (d134 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d0f4:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    d0f8:	f013 0301 	ands.w	r3, r3, #1
    d0fc:	d1fa      	bne.n	d0f4 <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    d0fe:	4e14      	ldr	r6, [pc, #80]	; (d150 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    d100:	4c14      	ldr	r4, [pc, #80]	; (d154 <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    d102:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    d104:	f242 51ff 	movw	r1, #9727	; 0x25ff
    d108:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    d10c:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    d10e:	8029      	strh	r1, [r5, #0]
    d110:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    d112:	8229      	strh	r1, [r5, #16]
    d114:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    d116:	806b      	strh	r3, [r5, #2]
    d118:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    d11a:	826b      	strh	r3, [r5, #18]
    d11c:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    d11e:	80aa      	strh	r2, [r5, #4]
    d120:	e01a      	b.n	d158 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    d122:	bf00      	nop
    d124:	000231e0 	.word	0x000231e0
    d128:	41008000 	.word	0x41008000
    d12c:	40001c00 	.word	0x40001c00
    d130:	40000800 	.word	0x40000800
    d134:	43002000 	.word	0x43002000
    d138:	00204600 	.word	0x00204600
    d13c:	20001dfc 	.word	0x20001dfc
    d140:	43002040 	.word	0x43002040
    d144:	00204700 	.word	0x00204700
    d148:	20001e20 	.word	0x20001e20
    d14c:	43002034 	.word	0x43002034
    d150:	25ff0000 	.word	0x25ff0000
    d154:	60f80000 	.word	0x60f80000
    d158:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    d15a:	82aa      	strh	r2, [r5, #20]
    d15c:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    d15e:	80eb      	strh	r3, [r5, #6]
    d160:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    d162:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    d164:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    d168:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    d16a:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    d16c:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    d16e:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    d170:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    d172:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    d174:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    d176:	83eb      	strh	r3, [r5, #30]
}
    d178:	b005      	add	sp, #20
    d17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d17c:	88d3      	ldrh	r3, [r2, #6]
    d17e:	f043 0318 	orr.w	r3, r3, #24
    d182:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    d184:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    d188:	e723      	b.n	cfd2 <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d18a:	88d0      	ldrh	r0, [r2, #6]
    d18c:	f363 00c4 	bfi	r0, r3, #3, #2
    d190:	80d0      	strh	r0, [r2, #6]
    d192:	e7f7      	b.n	d184 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d194:	88d3      	ldrh	r3, [r2, #6]
    d196:	2002      	movs	r0, #2
    d198:	f360 03c4 	bfi	r3, r0, #3, #2
    d19c:	80d3      	strh	r3, [r2, #6]
    d19e:	e7f1      	b.n	d184 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000d1a0 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    d1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    d1a4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    d1a8:	2b00      	cmp	r3, #0
    d1aa:	f000 80ab 	beq.w	d304 <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    d1ae:	4b89      	ldr	r3, [pc, #548]	; (d3d4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d1b0:	4604      	mov	r4, r0
    d1b2:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    d1b6:	f010 0001 	ands.w	r0, r0, #1
    d1ba:	f000 80a5 	beq.w	d308 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    d1be:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d1c0:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    d1c4:	3301      	adds	r3, #1
    d1c6:	4293      	cmp	r3, r2
    d1c8:	6723      	str	r3, [r4, #112]	; 0x70
    d1ca:	d302      	bcc.n	d1d2 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    d1cc:	2301      	movs	r3, #1
    d1ce:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d1d2:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d1d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d1d6:	8821      	ldrh	r1, [r4, #0]
    d1d8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    d1da:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    d1dc:	fb83 6706 	smull	r6, r7, r3, r6
    d1e0:	0bf2      	lsrs	r2, r6, #15
    d1e2:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    d1e6:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d1e8:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    d1ec:	fb01 f103 	mul.w	r1, r1, r3
    d1f0:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    d1f4:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d1f6:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d1f8:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d1fa:	6262      	str	r2, [r4, #36]	; 0x24
    d1fc:	fb80 8905 	smull	r8, r9, r0, r5
    d200:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d204:	b2b2      	uxth	r2, r6
    d206:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d20a:	fb02 f000 	mul.w	r0, r2, r0
    d20e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d212:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    d216:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d218:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d21a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    d21c:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d21e:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d220:	88a0      	ldrh	r0, [r4, #4]
    d222:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d224:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d228:	fb81 2302 	smull	r2, r3, r1, r2
    d22c:	0bd2      	lsrs	r2, r2, #15
    d22e:	b280      	uxth	r0, r0
    d230:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d234:	fb00 f101 	mul.w	r1, r0, r1
    d238:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d23c:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d242:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    d244:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d246:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d248:	88e1      	ldrh	r1, [r4, #6]
    d24a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d24e:	fb86 8903 	smull	r8, r9, r6, r3
    d252:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d256:	b289      	uxth	r1, r1
    d258:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d25c:	fb01 f606 	mul.w	r6, r1, r6
    d260:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    d264:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    d268:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d26a:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d26c:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d26e:	8923      	ldrh	r3, [r4, #8]
    d270:	63e1      	str	r1, [r4, #60]	; 0x3c
    d272:	fb85 6706 	smull	r6, r7, r5, r6
    d276:	0bf2      	lsrs	r2, r6, #15
    d278:	b29b      	uxth	r3, r3
    d27a:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d27e:	fb03 f505 	mul.w	r5, r3, r5
    d282:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    d286:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    d28a:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d28c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d28e:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d290:	8961      	ldrh	r1, [r4, #10]
    d292:	6462      	str	r2, [r4, #68]	; 0x44
    d294:	fb80 6706 	smull	r6, r7, r0, r6
    d298:	0bf3      	lsrs	r3, r6, #15
    d29a:	b28a      	uxth	r2, r1
    d29c:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d2a0:	fb02 f000 	mul.w	r0, r2, r0
    d2a4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d2a8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    d2ac:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d2ae:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d2b0:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d2b2:	89a0      	ldrh	r0, [r4, #12]
    d2b4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    d2b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d2ba:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    d2be:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    d2c0:	fb83 8902 	smull	r8, r9, r3, r2
    d2c4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    d2c8:	b280      	uxth	r0, r0
    d2ca:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d2ce:	fb00 f303 	mul.w	r3, r0, r3
    d2d2:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d2d6:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    d2da:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d2dc:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d2de:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d2e2:	89e0      	ldrh	r0, [r4, #14]
    d2e4:	6562      	str	r2, [r4, #84]	; 0x54
    d2e6:	0bf3      	lsrs	r3, r6, #15
    d2e8:	b282      	uxth	r2, r0
    d2ea:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d2ee:	fb02 f101 	mul.w	r1, r2, r1
    d2f2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d2f6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    d2fa:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d2fc:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d2fe:	83e2      	strh	r2, [r4, #30]
    d300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d308:	f001 fcaa 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d30c:	6803      	ldr	r3, [r0, #0]
    d30e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d312:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    d314:	2e00      	cmp	r6, #0
    d316:	f47f af52 	bne.w	d1be <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    d31a:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    d31c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d320:	2501      	movs	r5, #1
    d322:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d3e0 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d326:	4f2c      	ldr	r7, [pc, #176]	; (d3d8 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    d328:	e00f      	b.n	d34a <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    d32a:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    d32e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    d332:	b29b      	uxth	r3, r3
    d334:	f1c2 010f 	rsb	r1, r2, #15
    d338:	408b      	lsls	r3, r1
    d33a:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d33c:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    d33e:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d342:	462e      	mov	r6, r5
    d344:	dc0c      	bgt.n	d360 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    d346:	3501      	adds	r5, #1
    d348:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d34a:	2d01      	cmp	r5, #1
    d34c:	d1ed      	bne.n	d32a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    d34e:	f04f 31ff 	mov.w	r1, #4294967295
    d352:	6838      	ldr	r0, [r7, #0]
    d354:	f004 f9c8 	bl	116e8 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    d358:	0703      	lsls	r3, r0, #28
    d35a:	d5e6      	bpl.n	d32a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d35c:	462e      	mov	r6, r5
    d35e:	e7f2      	b.n	d346 <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    d360:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    d364:	429a      	cmp	r2, r3
    d366:	d005      	beq.n	d374 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    d368:	2b0a      	cmp	r3, #10
    d36a:	d02c      	beq.n	d3c6 <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    d36c:	2b0c      	cmp	r3, #12
    d36e:	d024      	beq.n	d3ba <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    d370:	2b08      	cmp	r3, #8
    d372:	d01a      	beq.n	d3aa <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    d374:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    d376:	4b19      	ldr	r3, [pc, #100]	; (d3dc <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    d378:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    d37a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    d37e:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d380:	2000      	movs	r0, #0
    d382:	f001 fc6d 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d386:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d388:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d38a:	6813      	ldr	r3, [r2, #0]
    d38c:	f043 0302 	orr.w	r3, r3, #2
    d390:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d392:	f001 fc65 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d396:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d398:	4a0e      	ldr	r2, [pc, #56]	; (d3d4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d39a:	f043 0302 	orr.w	r3, r3, #2
    d39e:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d3a0:	8893      	ldrh	r3, [r2, #4]
    d3a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d3a6:	8093      	strh	r3, [r2, #4]
    d3a8:	e713      	b.n	d1d2 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d3aa:	490a      	ldr	r1, [pc, #40]	; (d3d4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d3ac:	88ca      	ldrh	r2, [r1, #6]
    d3ae:	f042 0218 	orr.w	r2, r2, #24
    d3b2:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    d3b4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    d3b8:	e7dc      	b.n	d374 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d3ba:	4a06      	ldr	r2, [pc, #24]	; (d3d4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d3bc:	88d1      	ldrh	r1, [r2, #6]
    d3be:	f36f 01c4 	bfc	r1, #3, #2
    d3c2:	80d1      	strh	r1, [r2, #6]
    d3c4:	e7f6      	b.n	d3b4 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d3c6:	4a03      	ldr	r2, [pc, #12]	; (d3d4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d3c8:	88d1      	ldrh	r1, [r2, #6]
    d3ca:	2002      	movs	r0, #2
    d3cc:	f360 01c4 	bfi	r1, r0, #3, #2
    d3d0:	80d1      	strh	r1, [r2, #6]
    d3d2:	e7ef      	b.n	d3b4 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    d3d4:	43002000 	.word	0x43002000
    d3d8:	20001f18 	.word	0x20001f18
    d3dc:	200019d0 	.word	0x200019d0
    d3e0:	20001dec 	.word	0x20001dec

0000d3e4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    d3e4:	2907      	cmp	r1, #7
    d3e6:	dc33      	bgt.n	d450 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    d3e8:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    d3ea:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    d3ec:	b083      	sub	sp, #12
    d3ee:	4605      	mov	r5, r0
    switch (theUnits) {
    d3f0:	d033      	beq.n	d45a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    d3f2:	d336      	bcc.n	d462 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    d3f4:	2b02      	cmp	r3, #2
    d3f6:	d12d      	bne.n	d454 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d3f8:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    d3fa:	1d0c      	adds	r4, r1, #4
    d3fc:	f00e fb10 	bl	1ba20 <__aeabi_i2d>
    d400:	460b      	mov	r3, r1
    d402:	4602      	mov	r2, r0
    d404:	491a      	ldr	r1, [pc, #104]	; (d470 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    d406:	2000      	movs	r0, #0
    d408:	f00e fc9a 	bl	1bd40 <__aeabi_ddiv>
    d40c:	f00e fe50 	bl	1c0b0 <__aeabi_d2f>
    d410:	ed9f 0a18 	vldr	s0, [pc, #96]	; d474 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    d414:	ee00 0a90 	vmov	s1, r0
    d418:	f00d fbaa 	bl	1ab70 <powf>
    d41c:	eddf 6a16 	vldr	s13, [pc, #88]	; d478 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d420:	ed9f 7a16 	vldr	s14, [pc, #88]	; d47c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d424:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    d428:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    d42c:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d42e:	eef4 7ac7 	vcmpe.f32	s15, s14
    d432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d436:	bf49      	itett	mi
    d438:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    d43c:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    d440:	edcd 7a01 	vstrmi	s15, [sp, #4]
    d444:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    d448:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    d44c:	b003      	add	sp, #12
    d44e:	bd30      	pop	{r4, r5, pc}
        return false;
    d450:	2000      	movs	r0, #0
    d452:	4770      	bx	lr
            return false;
    d454:	2000      	movs	r0, #0
}
    d456:	b003      	add	sp, #12
    d458:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    d45a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d45e:	b290      	uxth	r0, r2
    d460:	e7cb      	b.n	d3fa <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    d462:	3104      	adds	r1, #4
            return true;
    d464:	2001      	movs	r0, #1
        m_tc = newTc;
    d466:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    d46a:	b003      	add	sp, #12
    d46c:	bd30      	pop	{r4, r5, pc}
    d46e:	bf00      	nop
    d470:	3ff00000 	.word	0x3ff00000
    d474:	3c23d70a 	.word	0x3c23d70a
    d478:	47000000 	.word	0x47000000
    d47c:	46fffe00 	.word	0x46fffe00

0000d480 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    d482:	f7ff fc8f 	bl	cda4 <_ZN9ClearCore10AdcManager8InstanceEv>
    d486:	4a0f      	ldr	r2, [pc, #60]	; (d4c4 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    d488:	4b0f      	ldr	r3, [pc, #60]	; (d4c8 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    d48a:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    d48c:	2104      	movs	r1, #4
    d48e:	2205      	movs	r2, #5
    d490:	2706      	movs	r7, #6
    d492:	2607      	movs	r6, #7
    d494:	2508      	movs	r5, #8
    d496:	2409      	movs	r4, #9
    d498:	200a      	movs	r0, #10
    d49a:	8019      	strh	r1, [r3, #0]
    d49c:	809a      	strh	r2, [r3, #4]
    d49e:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    d4a2:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    d4a4:	811f      	strh	r7, [r3, #8]
    d4a6:	819e      	strh	r6, [r3, #12]
    d4a8:	821d      	strh	r5, [r3, #16]
    d4aa:	829c      	strh	r4, [r3, #20]
    d4ac:	8318      	strh	r0, [r3, #24]
    d4ae:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    d4b0:	805a      	strh	r2, [r3, #2]
    d4b2:	80da      	strh	r2, [r3, #6]
    d4b4:	815a      	strh	r2, [r3, #10]
    d4b6:	81da      	strh	r2, [r3, #14]
    d4b8:	825a      	strh	r2, [r3, #18]
    d4ba:	82da      	strh	r2, [r3, #22]
    d4bc:	835a      	strh	r2, [r3, #26]
    d4be:	83da      	strh	r2, [r3, #30]
    d4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4c2:	bf00      	nop
    d4c4:	20001dfc 	.word	0x20001dfc
    d4c8:	20001e00 	.word	0x20001e00

0000d4cc <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    d4cc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    d4d0:	4770      	bx	lr
    d4d2:	bf00      	nop

0000d4d4 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d4d4:	7980      	ldrb	r0, [r0, #6]
    d4d6:	4770      	bx	lr

0000d4d8 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    d4d8:	2004      	movs	r0, #4
    d4da:	4770      	bx	lr

0000d4dc <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    d4dc:	7980      	ldrb	r0, [r0, #6]
    d4de:	1ec3      	subs	r3, r0, #3
    d4e0:	2b01      	cmp	r3, #1
    d4e2:	bf83      	ittte	hi
    d4e4:	3806      	subhi	r0, #6
    d4e6:	fab0 f080 	clzhi	r0, r0
    d4ea:	0940      	lsrhi	r0, r0, #5
    d4ec:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    d4ee:	4770      	bx	lr

0000d4f0 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d4f0:	b530      	push	{r4, r5, lr}
    d4f2:	b083      	sub	sp, #12
    d4f4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    d4f8:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d4fa:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d4fc:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d4fe:	f000 fcfd 	bl	defc <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    d502:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d506:	4a05      	ldr	r2, [pc, #20]	; (d51c <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    d508:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d50a:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d50c:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d50e:	4b04      	ldr	r3, [pc, #16]	; (d520 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d510:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d512:	4620      	mov	r0, r4
    d514:	66a3      	str	r3, [r4, #104]	; 0x68
    d516:	b003      	add	sp, #12
    d518:	bd30      	pop	{r4, r5, pc}
    d51a:	bf00      	nop
    d51c:	00023238 	.word	0x00023238
    d520:	06a40000 	.word	0x06a40000

0000d524 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    d524:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d526:	4a3a      	ldr	r2, [pc, #232]	; (d610 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d528:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d52c:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    d530:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d532:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d536:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d53a:	065d      	lsls	r5, r3, #25
    d53c:	d4fb      	bmi.n	d536 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    d53e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d542:	4933      	ldr	r1, [pc, #204]	; (d610 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d544:	2004      	movs	r0, #4
    d546:	f360 0303 	bfi	r3, r0, #0, #4
    d54a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d54e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d556:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d55a:	684b      	ldr	r3, [r1, #4]
    d55c:	06d8      	lsls	r0, r3, #27
    d55e:	d4fc      	bmi.n	d55a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d560:	4a2c      	ldr	r2, [pc, #176]	; (d614 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    d562:	492d      	ldr	r1, [pc, #180]	; (d618 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d564:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    d566:	4b2d      	ldr	r3, [pc, #180]	; (d61c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d568:	2507      	movs	r5, #7
    d56a:	f365 4013 	bfi	r0, r5, #16, #4
    d56e:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    d570:	6a0a      	ldr	r2, [r1, #32]
    d572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d576:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    d578:	781a      	ldrb	r2, [r3, #0]
    d57a:	f042 0201 	orr.w	r2, r2, #1
    d57e:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    d580:	689a      	ldr	r2, [r3, #8]
    d582:	07d2      	lsls	r2, r2, #31
    d584:	d4fc      	bmi.n	d580 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    d586:	785a      	ldrb	r2, [r3, #1]
    d588:	f042 0201 	orr.w	r2, r2, #1
    d58c:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    d58e:	785a      	ldrb	r2, [r3, #1]
    d590:	f042 0206 	orr.w	r2, r2, #6
    d594:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    d596:	899a      	ldrh	r2, [r3, #12]
    d598:	f042 0202 	orr.w	r2, r2, #2
    d59c:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    d59e:	899a      	ldrh	r2, [r3, #12]
    d5a0:	2105      	movs	r1, #5
    d5a2:	f361 220b 	bfi	r2, r1, #8, #4
    d5a6:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    d5a8:	899a      	ldrh	r2, [r3, #12]
    d5aa:	2102      	movs	r1, #2
    d5ac:	f361 0283 	bfi	r2, r1, #2, #2
    d5b0:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    d5b2:	8a1b      	ldrh	r3, [r3, #16]
    d5b4:	b29b      	uxth	r3, r3
    d5b6:	bb23      	cbnz	r3, d602 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d5b8:	4b19      	ldr	r3, [pc, #100]	; (d620 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    d5ba:	681d      	ldr	r5, [r3, #0]
    d5bc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    d5c0:	4628      	mov	r0, r5
    d5c2:	f004 fadd 	bl	11b80 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d5c6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d5ca:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d5ce:	4628      	mov	r0, r5
    d5d0:	f004 fad6 	bl	11b80 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    d5d4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d5d8:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    d5da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d5de:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    d5e2:	461a      	mov	r2, r3
    d5e4:	db03      	blt.n	d5ee <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    d5e6:	2300      	movs	r3, #0
    d5e8:	461a      	mov	r2, r3
    d5ea:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    d5ee:	4410      	add	r0, r2
    d5f0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d5f4:	db04      	blt.n	d600 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    d5f6:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    d5fa:	3304      	adds	r3, #4
    d5fc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    d600:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d602:	4a06      	ldr	r2, [pc, #24]	; (d61c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    d604:	6893      	ldr	r3, [r2, #8]
    d606:	f013 0304 	ands.w	r3, r3, #4
    d60a:	d1fb      	bne.n	d604 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    d60c:	8213      	strh	r3, [r2, #16]
    d60e:	e7d3      	b.n	d5b8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    d610:	40001c00 	.word	0x40001c00
    d614:	40001800 	.word	0x40001800
    d618:	40000800 	.word	0x40000800
    d61c:	43002400 	.word	0x43002400
    d620:	20001f24 	.word	0x20001f24

0000d624 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    d624:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    d626:	4a2e      	ldr	r2, [pc, #184]	; (d6e0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    d628:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d62c:	8a13      	ldrh	r3, [r2, #16]
    d62e:	b29b      	uxth	r3, r3
    d630:	4299      	cmp	r1, r3
    d632:	d003      	beq.n	d63c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d634:	6893      	ldr	r3, [r2, #8]
    d636:	075d      	lsls	r5, r3, #29
    d638:	d4fc      	bmi.n	d634 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    d63a:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d63c:	68c3      	ldr	r3, [r0, #12]
    d63e:	4929      	ldr	r1, [pc, #164]	; (d6e4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    d640:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d642:	4a27      	ldr	r2, [pc, #156]	; (d6e0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d644:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d648:	4423      	add	r3, r4
    d64a:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    d64e:	f044 0401 	orr.w	r4, r4, #1
    d652:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d656:	6e03      	ldr	r3, [r0, #96]	; 0x60
    d658:	6e44      	ldr	r4, [r0, #100]	; 0x64
    d65a:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d65e:	4423      	add	r3, r4
    d660:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d664:	f041 0101 	orr.w	r1, r1, #1
    d668:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d66c:	6893      	ldr	r3, [r2, #8]
    d66e:	079c      	lsls	r4, r3, #30
    d670:	d4fc      	bmi.n	d66c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    d672:	7813      	ldrb	r3, [r2, #0]
    d674:	0799      	lsls	r1, r3, #30
    d676:	d407      	bmi.n	d688 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    d678:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d67a:	4919      	ldr	r1, [pc, #100]	; (d6e0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    d67c:	f043 0302 	orr.w	r3, r3, #2
    d680:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d682:	688b      	ldr	r3, [r1, #8]
    d684:	079a      	lsls	r2, r3, #30
    d686:	d4fc      	bmi.n	d682 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    d688:	4a15      	ldr	r2, [pc, #84]	; (d6e0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    d68a:	79d3      	ldrb	r3, [r2, #7]
    d68c:	079b      	lsls	r3, r3, #30
    d68e:	d0fc      	beq.n	d68a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    d690:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    d692:	4b15      	ldr	r3, [pc, #84]	; (d6e8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    d694:	f002 010f 	and.w	r1, r2, #15
    d698:	185a      	adds	r2, r3, r1
    d69a:	2400      	movs	r4, #0
    d69c:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    d6a0:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d6a2:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    d6a6:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d6aa:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d6ac:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d6b0:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    d6b2:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d6b4:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    d6b6:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d6ba:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d6be:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    d6c2:	33f4      	adds	r3, #244	; 0xf4
    d6c4:	f3bf 8f5b 	dmb	ish
    d6c8:	e853 2f00 	ldrex	r2, [r3]
    d6cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d6d0:	e843 2100 	strex	r1, r2, [r3]
    d6d4:	2900      	cmp	r1, #0
    d6d6:	d1f7      	bne.n	d6c8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    d6d8:	f3bf 8f5b 	dmb	ish
}
    d6dc:	bc70      	pop	{r4, r5, r6}
    d6de:	4770      	bx	lr
    d6e0:	43002400 	.word	0x43002400
    d6e4:	41008000 	.word	0x41008000
    d6e8:	200019d0 	.word	0x200019d0

0000d6ec <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    d6ec:	7983      	ldrb	r3, [r0, #6]
    d6ee:	2b06      	cmp	r3, #6
    d6f0:	d805      	bhi.n	d6fe <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    d6f2:	2201      	movs	r2, #1
    d6f4:	fa02 f303 	lsl.w	r3, r2, r3
    d6f8:	f013 0f54 	tst.w	r3, #84	; 0x54
    d6fc:	d100      	bne.n	d700 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    d6fe:	4770      	bx	lr
            DigitalInOut::Refresh();
    d700:	f000 bc32 	b.w	df68 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000d704 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    d704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    d706:	7983      	ldrb	r3, [r0, #6]
    d708:	428b      	cmp	r3, r1
    d70a:	d06e      	beq.n	d7ea <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    d70c:	1e8a      	subs	r2, r1, #2
    d70e:	460c      	mov	r4, r1
    d710:	4605      	mov	r5, r0
    d712:	2a04      	cmp	r2, #4
    d714:	d80d      	bhi.n	d732 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    d716:	e8df f002 	tbb	[pc, r2]
    d71a:	0311      	.short	0x0311
    d71c:	0c11      	.short	0x0c11
    d71e:	11          	.byte	0x11
    d71f:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    d720:	2102      	movs	r1, #2
    d722:	f000 fad9 	bl	dcd8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    d726:	4628      	mov	r0, r5
    d728:	f7ff ff7c 	bl	d624 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    d72c:	2303      	movs	r3, #3
    d72e:	71ab      	strb	r3, [r5, #6]
            break;
    d730:	4623      	mov	r3, r4
    return (m_mode == newMode);
    d732:	1ae0      	subs	r0, r4, r3
    d734:	fab0 f080 	clz	r0, r0
    d738:	0940      	lsrs	r0, r0, #5
    d73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d73c:	4b2c      	ldr	r3, [pc, #176]	; (d7f0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    d73e:	f3bf 8f5b 	dmb	ish
    d742:	e853 2f00 	ldrex	r2, [r3]
    d746:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    d74a:	e843 2100 	strex	r1, r2, [r3]
    d74e:	2900      	cmp	r1, #0
    d750:	d1f7      	bne.n	d742 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    d752:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    d756:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d758:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d75c:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    d75e:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d760:	4924      	ldr	r1, [pc, #144]	; (d7f4 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d762:	3bf4      	subs	r3, #244	; 0xf4
    d764:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d768:	f04f 0e01 	mov.w	lr, #1
    d76c:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d770:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d774:	ea27 070e 	bic.w	r7, r7, lr
    d778:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    d77c:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d77e:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    d782:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    d786:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    d78a:	4438      	add	r0, r7
    d78c:	ea22 0606 	bic.w	r6, r2, r6
    d790:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    d794:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d798:	4a17      	ldr	r2, [pc, #92]	; (d7f8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d79a:	f36f 0300 	bfc	r3, #0, #1
    d79e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d7a2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    d7a4:	6e68      	ldr	r0, [r5, #100]	; 0x64
    d7a6:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d7aa:	4403      	add	r3, r0
    d7ac:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d7b0:	f36f 0100 	bfc	r1, #0, #1
    d7b4:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d7b8:	6893      	ldr	r3, [r2, #8]
    d7ba:	f013 0302 	ands.w	r3, r3, #2
    d7be:	d1fb      	bne.n	d7b8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    d7c0:	7811      	ldrb	r1, [r2, #0]
    d7c2:	0789      	lsls	r1, r1, #30
    d7c4:	d507      	bpl.n	d7d6 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    d7c6:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d7c8:	490b      	ldr	r1, [pc, #44]	; (d7f8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    d7ca:	f363 0041 	bfi	r0, r3, #1, #1
    d7ce:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d7d0:	688b      	ldr	r3, [r1, #8]
    d7d2:	079b      	lsls	r3, r3, #30
    d7d4:	d4fc      	bmi.n	d7d0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    d7d6:	4621      	mov	r1, r4
    d7d8:	4628      	mov	r0, r5
    d7da:	f000 fa7d 	bl	dcd8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    d7de:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    d7e0:	1ae0      	subs	r0, r4, r3
    d7e2:	fab0 f080 	clz	r0, r0
    d7e6:	0940      	lsrs	r0, r0, #5
    d7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    d7ea:	2001      	movs	r0, #1
}
    d7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d7ee:	bf00      	nop
    d7f0:	20001ac4 	.word	0x20001ac4
    d7f4:	41008000 	.word	0x41008000
    d7f8:	43002400 	.word	0x43002400

0000d7fc <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    d7fc:	7983      	ldrb	r3, [r0, #6]
    d7fe:	2b06      	cmp	r3, #6
    d800:	d805      	bhi.n	d80e <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    d802:	2201      	movs	r2, #1
    d804:	fa02 f303 	lsl.w	r3, r2, r3
    d808:	f013 0f54 	tst.w	r3, #84	; 0x54
    d80c:	d101      	bne.n	d812 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    d80e:	2000      	movs	r0, #0
    d810:	4770      	bx	lr
            state = DigitalInOut::State();
    d812:	f000 bcaf 	b.w	e174 <_ZN9ClearCore12DigitalInOut5StateEv>
    d816:	bf00      	nop

0000d818 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    d818:	7983      	ldrb	r3, [r0, #6]
    d81a:	3b02      	subs	r3, #2
    d81c:	2b04      	cmp	r3, #4
    d81e:	d83c      	bhi.n	d89a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    d820:	e8df f003 	tbb	[pc, r3]
    d824:	3b390339 	.word	0x3b390339
    d828:	39          	.byte	0x39
    d829:	00          	.byte	0x00
            newState = max(newState, 0);
    d82a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    d82e:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    d830:	b289      	uxth	r1, r1
    d832:	f240 74ff 	movw	r4, #2047	; 0x7ff
    d836:	42a1      	cmp	r1, r4
    d838:	bf28      	it	cs
    d83a:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    d83c:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    d83e:	4d19      	ldr	r5, [pc, #100]	; (d8a4 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    d840:	4e19      	ldr	r6, [pc, #100]	; (d8a8 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    d842:	4a1a      	ldr	r2, [pc, #104]	; (d8ac <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    d844:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    d848:	fb85 e503 	smull	lr, r5, r5, r3
    d84c:	f007 070f 	and.w	r7, r7, #15
    d850:	441d      	add	r5, r3
    d852:	443e      	add	r6, r7
    d854:	17db      	asrs	r3, r3, #31
    d856:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    d85a:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    d85e:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    d862:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d866:	4812      	ldr	r0, [pc, #72]	; (d8b0 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    d868:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    d86c:	fba2 5201 	umull	r5, r2, r2, r1
    d870:	1a89      	subs	r1, r1, r2
    d872:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    d876:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    d87a:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    d87c:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    d87e:	42a1      	cmp	r1, r4
    d880:	bf28      	it	cs
    d882:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    d884:	b29b      	uxth	r3, r3
    d886:	4299      	cmp	r1, r3
    d888:	d009      	beq.n	d89e <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d88a:	6883      	ldr	r3, [r0, #8]
    d88c:	075b      	lsls	r3, r3, #29
    d88e:	d4fc      	bmi.n	d88a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    d890:	8201      	strh	r1, [r0, #16]
            success = true;
    d892:	2001      	movs	r0, #1
    d894:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    d896:	f000 b9c3 	b.w	dc20 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    d89a:	2000      	movs	r0, #0
    d89c:	4770      	bx	lr
            success = true;
    d89e:	2001      	movs	r0, #1
}
    d8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8a2:	bf00      	nop
    d8a4:	80100201 	.word	0x80100201
    d8a8:	200019d0 	.word	0x200019d0
    d8ac:	00200401 	.word	0x00200401
    d8b0:	43002400 	.word	0x43002400

0000d8b4 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    d8b4:	b538      	push	{r3, r4, r5, lr}
    d8b6:	4604      	mov	r4, r0
    d8b8:	460d      	mov	r5, r1
    DacInitialize();
    d8ba:	f7ff fe33 	bl	d524 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    d8be:	4620      	mov	r0, r4
    d8c0:	4629      	mov	r1, r5
    d8c2:	f000 fc77 	bl	e1b4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    d8c6:	6920      	ldr	r0, [r4, #16]
    d8c8:	07c2      	lsls	r2, r0, #31
    d8ca:	d521      	bpl.n	d910 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    d8cc:	68e1      	ldr	r1, [r4, #12]
    d8ce:	01c9      	lsls	r1, r1, #7
    d8d0:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    d8d4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d8d8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    d8dc:	2101      	movs	r1, #1
    d8de:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    d8e2:	f361 1307 	bfi	r3, r1, #4, #4
    d8e6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    d8ea:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d8ec:	07cb      	lsls	r3, r1, #31
    d8ee:	d421      	bmi.n	d934 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    d8f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d8f2:	01db      	lsls	r3, r3, #7
    d8f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d8f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d8fc:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    d900:	2101      	movs	r1, #1
    d902:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    d906:	f361 0203 	bfi	r2, r1, #0, #4
    d90a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    d90e:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    d910:	68e2      	ldr	r2, [r4, #12]
    d912:	01d2      	lsls	r2, r2, #7
    d914:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    d918:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d91c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    d920:	2101      	movs	r1, #1
    d922:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    d926:	f361 0203 	bfi	r2, r1, #0, #4
    d92a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    d92e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d930:	07cb      	lsls	r3, r1, #31
    d932:	d5dd      	bpl.n	d8f0 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    d934:	6e22      	ldr	r2, [r4, #96]	; 0x60
    d936:	01d2      	lsls	r2, r2, #7
    d938:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    d93c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d940:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d944:	2101      	movs	r1, #1
    d946:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    d94a:	f361 1307 	bfi	r3, r1, #4, #4
    d94e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    d952:	bd38      	pop	{r3, r4, r5, pc}

0000d954 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
    }
    d954:	2000      	movs	r0, #0
    d956:	4770      	bx	lr

0000d958 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d958:	7980      	ldrb	r0, [r0, #6]
    d95a:	4770      	bx	lr

0000d95c <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    d95c:	2003      	movs	r0, #3
    d95e:	4770      	bx	lr

0000d960 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    d960:	2000      	movs	r0, #0
    d962:	4770      	bx	lr

0000d964 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    d964:	2000      	movs	r0, #0
    d966:	4770      	bx	lr

0000d968 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    d96a:	7983      	ldrb	r3, [r0, #6]
    d96c:	428b      	cmp	r3, r1
    d96e:	d072      	beq.n	da56 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    d970:	2901      	cmp	r1, #1
    d972:	460c      	mov	r4, r1
    d974:	4605      	mov	r5, r0
    d976:	d03c      	beq.n	d9f2 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    d978:	2902      	cmp	r1, #2
    d97a:	d135      	bne.n	d9e8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    d97c:	4e37      	ldr	r6, [pc, #220]	; (da5c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    d97e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    d980:	f3bf 8f5b 	dmb	ish
    d984:	e856 2f00 	ldrex	r2, [r6]
    d988:	431a      	orrs	r2, r3
    d98a:	e846 2100 	strex	r1, r2, [r6]
    d98e:	2900      	cmp	r1, #0
    d990:	d1f8      	bne.n	d984 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    d992:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    d996:	3ef4      	subs	r6, #244	; 0xf4
    d998:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    d99c:	b143      	cbz	r3, d9b0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    d99e:	4b30      	ldr	r3, [pc, #192]	; (da60 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    d9a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    d9a2:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    d9a4:	6e53      	ldr	r3, [r2, #100]	; 0x64
    d9a6:	420b      	tst	r3, r1
    d9a8:	d0fc      	beq.n	d9a4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    d9aa:	4628      	mov	r0, r5
    d9ac:	f000 fda6 	bl	e4fc <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    d9b0:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d9b2:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    d9b6:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    d9b8:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d9bc:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d9c0:	2001      	movs	r0, #1
    d9c2:	4098      	lsls	r0, r3
    d9c4:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d9c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d9cc:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    d9d0:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    d9d2:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    d9d6:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d9d8:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    d9dc:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    d9e0:	4603      	mov	r3, r0
            m_mode = newMode;
    d9e2:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    d9e4:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    d9e8:	1ae0      	subs	r0, r4, r3
    d9ea:	fab0 f080 	clz	r0, r0
    d9ee:	0940      	lsrs	r0, r0, #5
    d9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d9f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    d9f4:	4e19      	ldr	r6, [pc, #100]	; (da5c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    d9f6:	f3bf 8f5b 	dmb	ish
    d9fa:	43db      	mvns	r3, r3
    d9fc:	e856 2f00 	ldrex	r2, [r6]
    da00:	401a      	ands	r2, r3
    da02:	e846 2100 	strex	r1, r2, [r6]
    da06:	2900      	cmp	r1, #0
    da08:	d1f8      	bne.n	d9fc <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    da0a:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    da0e:	3ef4      	subs	r6, #244	; 0xf4
    da10:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    da14:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    da16:	b11b      	cbz	r3, da20 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    da18:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    da1c:	2b00      	cmp	r3, #0
    da1e:	d0fb      	beq.n	da18 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    da20:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da22:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    da26:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    da28:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da2c:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    da2e:	f003 030f 	and.w	r3, r3, #15
    da32:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da36:	fa00 f303 	lsl.w	r3, r0, r3
    da3a:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    da3c:	4603      	mov	r3, r0
    return (m_mode == newMode);
    da3e:	1ae0      	subs	r0, r4, r3
    da40:	4329      	orrs	r1, r5
    da42:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    da46:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    da4a:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da4e:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    da52:	0940      	lsrs	r0, r0, #5
    da54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    da56:	2001      	movs	r0, #1
}
    da58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da5a:	bf00      	nop
    da5c:	20001ac4 	.word	0x20001ac4
    da60:	20001dfc 	.word	0x20001dfc

0000da64 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    da64:	b570      	push	{r4, r5, r6, lr}
    da66:	4604      	mov	r4, r0
    da68:	4616      	mov	r6, r2
      m_analogValid(false) {}
    da6a:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    da6c:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    da70:	f000 fd12 	bl	e498 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    da74:	2300      	movs	r3, #0
    da76:	4a05      	ldr	r2, [pc, #20]	; (da8c <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    da78:	6326      	str	r6, [r4, #48]	; 0x30
    da7a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    da7e:	6022      	str	r2, [r4, #0]
    da80:	63a3      	str	r3, [r4, #56]	; 0x38
    da82:	63e3      	str	r3, [r4, #60]	; 0x3c
    da84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    da88:	4620      	mov	r0, r4
    da8a:	bd70      	pop	{r4, r5, r6, pc}
    da8c:	00023268 	.word	0x00023268

0000da90 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    da90:	7982      	ldrb	r2, [r0, #6]
    da92:	2a01      	cmp	r2, #1
    da94:	d004      	beq.n	daa0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    da96:	2a02      	cmp	r2, #2
    da98:	d101      	bne.n	da9e <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    da9a:	f000 bc4d 	b.w	e338 <_ZN9ClearCore9DigitalIn7RefreshEv>
    da9e:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    daa0:	4a17      	ldr	r2, [pc, #92]	; (db00 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    daa2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    daa4:	6812      	ldr	r2, [r2, #0]
    daa6:	4603      	mov	r3, r0
    daa8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    daaa:	4208      	tst	r0, r1
    daac:	d126      	bne.n	dafc <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    daae:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    dab2:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    dab4:	b991      	cbnz	r1, dadc <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    dab6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    dab8:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    dabc:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    dabe:	2c07      	cmp	r4, #7
    dac0:	b280      	uxth	r0, r0
    dac2:	dc07      	bgt.n	dad4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    dac4:	0400      	lsls	r0, r0, #16
    dac6:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    daca:	3408      	adds	r4, #8
        return (m_z >> 16);
    dacc:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    dace:	6270      	str	r0, [r6, #36]	; 0x24
    dad0:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    dad4:	2201      	movs	r2, #1
    dad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    dada:	e000      	b.n	dade <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    dadc:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    dade:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    dae0:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dae2:	4908      	ldr	r1, [pc, #32]	; (db04 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    dae4:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    dae8:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    daec:	b2d8      	uxtb	r0, r3
    daee:	440a      	add	r2, r1
    daf0:	2802      	cmp	r0, #2
    daf2:	bfd8      	it	le
    daf4:	2300      	movle	r3, #0
    daf6:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    dafa:	bc70      	pop	{r4, r5, r6}
    dafc:	4770      	bx	lr
    dafe:	bf00      	nop
    db00:	20001dfc 	.word	0x20001dfc
    db04:	200019d0 	.word	0x200019d0

0000db08 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    db08:	4b29      	ldr	r3, [pc, #164]	; (dbb0 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    db0a:	b570      	push	{r4, r5, r6, lr}
    db0c:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    db0e:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    db10:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    db12:	4628      	mov	r0, r5
    db14:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    db18:	2301      	movs	r3, #1
    db1a:	2202      	movs	r2, #2
    db1c:	f7ff fc62 	bl	d3e4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    db20:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    db24:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    db26:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    db2a:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    db2c:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    db2e:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    db30:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    db32:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    db34:	4620      	mov	r0, r4
    db36:	f000 fb99 	bl	e26c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    db3a:	6823      	ldr	r3, [r4, #0]
    db3c:	4a1d      	ldr	r2, [pc, #116]	; (dbb4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    db3e:	685b      	ldr	r3, [r3, #4]
    db40:	4293      	cmp	r3, r2
    db42:	d130      	bne.n	dba6 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    db44:	79a3      	ldrb	r3, [r4, #6]
    db46:	2b01      	cmp	r3, #1
    db48:	d02c      	beq.n	dba4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    db4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    db4c:	4a1a      	ldr	r2, [pc, #104]	; (dbb8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    db4e:	f3bf 8f5b 	dmb	ish
    db52:	43db      	mvns	r3, r3
    db54:	e852 1f00 	ldrex	r1, [r2]
    db58:	4019      	ands	r1, r3
    db5a:	e842 1000 	strex	r0, r1, [r2]
    db5e:	2800      	cmp	r0, #0
    db60:	d1f8      	bne.n	db54 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    db62:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    db66:	3af4      	subs	r2, #244	; 0xf4
    db68:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    db6c:	2101      	movs	r1, #1
    db6e:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    db70:	b11b      	cbz	r3, db7a <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    db72:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    db76:	2b00      	cmp	r3, #0
    db78:	d0fb      	beq.n	db72 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    db7a:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    db7c:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    db80:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    db82:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db86:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    db8a:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db8c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    db90:	408b      	lsls	r3, r1
    db92:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    db94:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db96:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    db9a:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    db9e:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    dba2:	bd70      	pop	{r4, r5, r6, pc}
    dba4:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    dba6:	4620      	mov	r0, r4
    dba8:	2101      	movs	r1, #1
}
    dbaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    dbae:	4718      	bx	r3
    dbb0:	20001dfc 	.word	0x20001dfc
    dbb4:	0000d969 	.word	0x0000d969
    dbb8:	20001ac4 	.word	0x20001ac4

0000dbbc <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    dbbc:	7982      	ldrb	r2, [r0, #6]
    dbbe:	2a01      	cmp	r2, #1
    dbc0:	d005      	beq.n	dbce <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    dbc2:	2a02      	cmp	r2, #2
    dbc4:	d101      	bne.n	dbca <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    dbc6:	f000 bb3d 	b.w	e244 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    dbca:	2000      	movs	r0, #0
    dbcc:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    dbce:	4b0b      	ldr	r3, [pc, #44]	; (dbfc <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    dbd0:	b510      	push	{r4, lr}
    dbd2:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    dbd4:	6818      	ldr	r0, [r3, #0]
    dbd6:	f003 fd8d 	bl	116f4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    dbda:	b958      	cbnz	r0, dbf4 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    dbdc:	4b08      	ldr	r3, [pc, #32]	; (dc00 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    dbde:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    dbe0:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    dbe2:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    dbe4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    dbe8:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    dbea:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    dbee:	4118      	asrs	r0, r3
    dbf0:	b200      	sxth	r0, r0
    dbf2:	bd10      	pop	{r4, pc}
                state = -1;
    dbf4:	f04f 30ff 	mov.w	r0, #4294967295
}
    dbf8:	bd10      	pop	{r4, pc}
    dbfa:	bf00      	nop
    dbfc:	20001f18 	.word	0x20001f18
    dc00:	20001dfc 	.word	0x20001dfc

0000dc04 <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    dc04:	7980      	ldrb	r0, [r0, #6]
    dc06:	4770      	bx	lr

0000dc08 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    dc08:	2001      	movs	r0, #1
    dc0a:	4770      	bx	lr

0000dc0c <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    dc0c:	7980      	ldrb	r0, [r0, #6]
    dc0e:	2804      	cmp	r0, #4
    dc10:	bf1d      	ittte	ne
    dc12:	3806      	subne	r0, #6
    dc14:	fab0 f080 	clzne	r0, r0
    dc18:	0940      	lsrne	r0, r0, #5
    dc1a:	2001      	moveq	r0, #1
    }
    dc1c:	4770      	bx	lr
    dc1e:	bf00      	nop

0000dc20 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    dc20:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    dc22:	2300      	movs	r3, #0
    switch (m_mode) {
    dc24:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    dc26:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    dc2a:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    dc2e:	d02a      	beq.n	dc86 <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    dc30:	2a06      	cmp	r2, #6
    dc32:	d126      	bne.n	dc82 <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    dc34:	b28b      	uxth	r3, r1
    dc36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dc3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    dc3e:	bf28      	it	cs
    dc40:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    dc42:	b470      	push	{r4, r5, r6}
    dc44:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dc46:	2b00      	cmp	r3, #0
    dc48:	d040      	beq.n	dccc <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    dc4a:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dc4c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    dc4e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    dc52:	18d6      	adds	r6, r2, r3
    dc54:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    dc58:	42ac      	cmp	r4, r5
    dc5a:	d008      	beq.n	dc6e <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	bf0c      	ite	eq
    dc60:	2440      	moveq	r4, #64	; 0x40
    dc62:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    dc64:	6913      	ldr	r3, [r2, #16]
    dc66:	4223      	tst	r3, r4
    dc68:	d1fc      	bne.n	dc64 <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    dc6a:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    dc6e:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dc70:	4b18      	ldr	r3, [pc, #96]	; (dcd4 <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    dc72:	f002 020f 	and.w	r2, r2, #15
    dc76:	4413      	add	r3, r2
    dc78:	2001      	movs	r0, #1
    dc7a:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    dc7e:	bc70      	pop	{r4, r5, r6}
    dc80:	4770      	bx	lr
    bool success = false;
    dc82:	4618      	mov	r0, r3
    dc84:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    dc86:	1c0b      	adds	r3, r1, #0
    dc88:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    dc8c:	bf18      	it	ne
    dc8e:	2301      	movne	r3, #1
    dc90:	429a      	cmp	r2, r3
    dc92:	d004      	beq.n	dc9e <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dc94:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    dc96:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dc9a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    dc9e:	b121      	cbz	r1, dcaa <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    dca0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    dca4:	fab1 f181 	clz	r1, r1
    dca8:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    dcaa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    dcae:	6b82      	ldr	r2, [r0, #56]	; 0x38
    dcb0:	428b      	cmp	r3, r1
    dcb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dcb4:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    dcb8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dcbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dcc0:	f04f 0001 	mov.w	r0, #1
    dcc4:	bf14      	ite	ne
    dcc6:	619a      	strne	r2, [r3, #24]
    dcc8:	615a      	streq	r2, [r3, #20]
    dcca:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dccc:	43cd      	mvns	r5, r1
    dcce:	b2ed      	uxtb	r5, r5
    dcd0:	e7bc      	b.n	dc4c <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    dcd2:	bf00      	nop
    dcd4:	200019d0 	.word	0x200019d0

0000dcd8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    dcd8:	7983      	ldrb	r3, [r0, #6]
    dcda:	428b      	cmp	r3, r1
    dcdc:	f000 80cb 	beq.w	de76 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    dce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    dce4:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    dce6:	b082      	sub	sp, #8
    dce8:	4604      	mov	r4, r0
    dcea:	460d      	mov	r5, r1
    switch (newMode) {
    dcec:	f000 8087 	beq.w	ddfe <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    dcf0:	2906      	cmp	r1, #6
    dcf2:	d008      	beq.n	dd06 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    dcf4:	2902      	cmp	r1, #2
    dcf6:	d033      	beq.n	dd60 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    dcf8:	1ae8      	subs	r0, r5, r3
    dcfa:	fab0 f080 	clz	r0, r0
    dcfe:	0940      	lsrs	r0, r0, #5
}
    dd00:	b002      	add	sp, #8
    dd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    dd06:	6803      	ldr	r3, [r0, #0]
    dd08:	4a79      	ldr	r2, [pc, #484]	; (def0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    dd0a:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    dd0c:	71a1      	strb	r1, [r4, #6]
    dd0e:	4293      	cmp	r3, r2
    dd10:	f040 80b3 	bne.w	de7a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dd14:	6c01      	ldr	r1, [r0, #64]	; 0x40
    dd16:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dd1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    dd1e:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dd20:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dd22:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    dd26:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    dd2a:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dd2e:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dd30:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dd34:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dd36:	429a      	cmp	r2, r3
    dd38:	d008      	beq.n	dd4c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    dd3a:	2e00      	cmp	r6, #0
    dd3c:	bf0c      	ite	eq
    dd3e:	2640      	moveq	r6, #64	; 0x40
    dd40:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    dd42:	690a      	ldr	r2, [r1, #16]
    dd44:	4232      	tst	r2, r6
    dd46:	d1fc      	bne.n	dd42 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    dd48:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    dd4c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    dd50:	4e68      	ldr	r6, [pc, #416]	; (def4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    dd52:	f001 020f 	and.w	r2, r1, #15
    dd56:	18b3      	adds	r3, r6, r2
    dd58:	2000      	movs	r0, #0
    dd5a:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    dd5e:	e093      	b.n	de88 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    dd60:	2300      	movs	r3, #0
    dd62:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    dd66:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    dd68:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    dd6c:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    dd70:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dd72:	6b81      	ldr	r1, [r0, #56]	; 0x38
    dd74:	01db      	lsls	r3, r3, #7
    dd76:	2a00      	cmp	r2, #0
    dd78:	d177      	bne.n	de6a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    dd7a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    dd7e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    dd82:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dd84:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd88:	4e5a      	ldr	r6, [pc, #360]	; (def4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dd8a:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd8c:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dd90:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    dd94:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dd98:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd9c:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dda0:	f04f 0e01 	mov.w	lr, #1
    dda4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dda8:	443b      	add	r3, r7
    ddaa:	fa0e f702 	lsl.w	r7, lr, r2
    ddae:	ea28 0707 	bic.w	r7, r8, r7
    ddb2:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ddb6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ddba:	ea6f 070c 	mvn.w	r7, ip
    ddbe:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ddc0:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ddc4:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    ddc8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ddcc:	f36f 0200 	bfc	r2, #0, #1
    ddd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    ddd4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    ddd8:	2b00      	cmp	r3, #0
    ddda:	f000 8086 	beq.w	deea <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    ddde:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    dde2:	4845      	ldr	r0, [pc, #276]	; (def8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    dde4:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    dde8:	2200      	movs	r2, #0
    ddea:	401f      	ands	r7, r3
    ddec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ddf0:	6800      	ldr	r0, [r0, #0]
    ddf2:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    ddf6:	f003 fe71 	bl	11adc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    ddfa:	79a3      	ldrb	r3, [r4, #6]
    ddfc:	e77c      	b.n	dcf8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ddfe:	220c      	movs	r2, #12
            State(m_outState);
    de00:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    de02:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    de06:	2600      	movs	r6, #0
            m_mode = newMode;
    de08:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    de0a:	695b      	ldr	r3, [r3, #20]
    de0c:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    de10:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    de14:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    de16:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de18:	4936      	ldr	r1, [pc, #216]	; (def4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    de1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    de1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    de1e:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de22:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    de26:	f04f 0e01 	mov.w	lr, #1
    de2a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    de2e:	fa0e f002 	lsl.w	r0, lr, r2
    de32:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    de36:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    de3a:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    de3e:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de42:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    de46:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    de4a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    de4e:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de52:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    de56:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    de5a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    de5e:	f366 0200 	bfi	r2, r6, #0, #1
    de62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    de66:	79a3      	ldrb	r3, [r4, #6]
            break;
    de68:	e746      	b.n	dcf8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    de6a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    de6e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    de72:	6191      	str	r1, [r2, #24]
    de74:	e786      	b.n	dd84 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    de76:	2001      	movs	r0, #1
    de78:	4770      	bx	lr
            State(0);
    de7a:	2100      	movs	r1, #0
    de7c:	4798      	blx	r3
    de7e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    de82:	4e1c      	ldr	r6, [pc, #112]	; (def4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    de84:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    de88:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    de8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    de8e:	9301      	str	r3, [sp, #4]
    de90:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    de92:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    de94:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    de98:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    de9c:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    dea0:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dea2:	fa0c fe02 	lsl.w	lr, ip, r2
    dea6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    deaa:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    deae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    deb2:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    deb6:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    deb8:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    debc:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    dec0:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    dec4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    dec8:	ea42 020c 	orr.w	r2, r2, ip
    decc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    ded0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    ded4:	2b00      	cmp	r3, #0
    ded6:	d090      	beq.n	ddfa <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    ded8:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    dedc:	4806      	ldr	r0, [pc, #24]	; (def8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    dede:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    dee2:	2200      	movs	r2, #0
    dee4:	ea23 0707 	bic.w	r7, r3, r7
    dee8:	e780      	b.n	ddec <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    deea:	2302      	movs	r3, #2
    deec:	e704      	b.n	dcf8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    deee:	bf00      	nop
    def0:	0000dc21 	.word	0x0000dc21
    def4:	200019d0 	.word	0x200019d0
    def8:	20001f18 	.word	0x20001f18

0000defc <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    defc:	b570      	push	{r4, r5, r6, lr}
    defe:	461d      	mov	r5, r3
    df00:	4604      	mov	r4, r0
    df02:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    df06:	f000 fac7 	bl	e498 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    df0a:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    df0e:	4a14      	ldr	r2, [pc, #80]	; (df60 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    df10:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    df12:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    df14:	78aa      	ldrb	r2, [r5, #2]
    df16:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    df18:	2301      	movs	r3, #1
    df1a:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    df1c:	2200      	movs	r2, #0
    df1e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    df22:	63a3      	str	r3, [r4, #56]	; 0x38
    df24:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    df28:	7aeb      	ldrb	r3, [r5, #11]
    df2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    df2e:	230c      	movs	r3, #12
    df30:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    df34:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    df38:	64a2      	str	r2, [r4, #72]	; 0x48
    df3a:	64e2      	str	r2, [r4, #76]	; 0x4c
    df3c:	6522      	str	r2, [r4, #80]	; 0x50
    df3e:	6562      	str	r2, [r4, #84]	; 0x54
    df40:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    df44:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    df48:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    df4c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    df50:	7aaa      	ldrb	r2, [r5, #10]
    df52:	4b04      	ldr	r3, [pc, #16]	; (df64 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    df54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    df58:	6423      	str	r3, [r4, #64]	; 0x40
}
    df5a:	4620      	mov	r0, r4
    df5c:	bd70      	pop	{r4, r5, r6, pc}
    df5e:	bf00      	nop
    df60:	00023298 	.word	0x00023298
    df64:	000232c0 	.word	0x000232c0

0000df68 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    df68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df6a:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    df6c:	f000 f9e4 	bl	e338 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    df70:	79a3      	ldrb	r3, [r4, #6]
    df72:	2b04      	cmp	r3, #4
    df74:	d12d      	bne.n	dfd2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    df76:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    df7a:	bb5b      	cbnz	r3, dfd4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    df7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    df80:	2b00      	cmp	r3, #0
    df82:	f040 809d 	bne.w	e0c0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    df86:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    df8a:	220c      	movs	r2, #12
    df8c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    df90:	b19b      	cbz	r3, dfba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    df92:	4d75      	ldr	r5, [pc, #468]	; (e168 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    df94:	68a7      	ldr	r7, [r4, #8]
    df96:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    df9a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    df9e:	4873      	ldr	r0, [pc, #460]	; (e16c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    dfa0:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    dfa2:	2601      	movs	r6, #1
    dfa4:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    dfa8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    dfac:	fa06 f101 	lsl.w	r1, r6, r1
    dfb0:	6800      	ldr	r0, [r0, #0]
    dfb2:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    dfb6:	f003 fd91 	bl	11adc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    dfba:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    dfbe:	b143      	cbz	r3, dfd2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    dfc0:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    dfc4:	b303      	cbz	r3, e008 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    dfc6:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    dfca:	429a      	cmp	r2, r3
    dfcc:	db1c      	blt.n	e008 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    dfce:	4293      	cmp	r3, r2
    dfd0:	d070      	beq.n	e0b4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    dfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    dfd4:	3b01      	subs	r3, #1
    dfd6:	b29b      	uxth	r3, r3
    dfd8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    dfdc:	2b00      	cmp	r3, #0
    dfde:	d1ec      	bne.n	dfba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    dfe0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    dfe4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dfe8:	429a      	cmp	r2, r3
    dfea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dfec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    dfee:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    dff2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dff6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dffa:	bf14      	ite	ne
    dffc:	619a      	strne	r2, [r3, #24]
    dffe:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e000:	230c      	movs	r3, #12
    e002:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e006:	e7d8      	b.n	dfba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    e008:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    e00c:	bb5b      	cbnz	r3, e066 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    e00e:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    e012:	2b00      	cmp	r3, #0
    e014:	d14e      	bne.n	e0b4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    e016:	4a56      	ldr	r2, [pc, #344]	; (e170 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e018:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e01a:	6813      	ldr	r3, [r2, #0]
    e01c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e01e:	1a1b      	subs	r3, r3, r0
    e020:	428b      	cmp	r3, r1
    e022:	d3d6      	bcc.n	dfd2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    e024:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e028:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    e02c:	6812      	ldr	r2, [r2, #0]
    e02e:	6522      	str	r2, [r4, #80]	; 0x50
    e030:	fab3 f383 	clz	r3, r3
    e034:	095b      	lsrs	r3, r3, #5
    e036:	428b      	cmp	r3, r1
    e038:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e03a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e03e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e042:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e046:	f04f 020c 	mov.w	r2, #12
    e04a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    e04e:	f04f 0001 	mov.w	r0, #1
    e052:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e054:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    e058:	bf14      	ite	ne
    e05a:	619a      	strne	r2, [r3, #24]
    e05c:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    e05e:	2301      	movs	r3, #1
    e060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    e066:	4a42      	ldr	r2, [pc, #264]	; (e170 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e068:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e06a:	6813      	ldr	r3, [r2, #0]
    e06c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    e06e:	1a1b      	subs	r3, r3, r0
    e070:	428b      	cmp	r3, r1
    e072:	d3ae      	bcc.n	dfd2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    e074:	6812      	ldr	r2, [r2, #0]
    e076:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e07a:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    e07c:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e07e:	220c      	movs	r2, #12
                        m_pulseValue = false;
    e080:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e084:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    e088:	2b00      	cmp	r3, #0
    e08a:	d15b      	bne.n	e144 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    e08c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e08e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e090:	01db      	lsls	r3, r3, #7
    e092:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e096:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e09a:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    e09c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    e0a0:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    e0a4:	3301      	adds	r3, #1
                        m_outState = false;
    e0a6:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    e0a8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    e0ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    e0b0:	2a00      	cmp	r2, #0
    e0b2:	d08e      	beq.n	dfd2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    e0b4:	2300      	movs	r3, #0
    e0b6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    e0ba:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    e0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    e0c0:	4620      	mov	r0, r4
    e0c2:	f000 fa0d 	bl	e4e0 <_ZN9ClearCore9DigitalIn7StateRTEv>
    e0c6:	2800      	cmp	r0, #0
    e0c8:	f47f af5d 	bne.w	df86 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    e0cc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    e0d0:	2b00      	cmp	r3, #0
    e0d2:	f43f af72 	beq.w	dfba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e0d6:	3b01      	subs	r3, #1
    e0d8:	b2db      	uxtb	r3, r3
    e0da:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e0de:	2b00      	cmp	r3, #0
    e0e0:	f47f af6b 	bne.w	dfba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    e0e4:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    e0e8:	b9e6      	cbnz	r6, e124 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    e0ea:	4a1f      	ldr	r2, [pc, #124]	; (e168 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e0ec:	491f      	ldr	r1, [pc, #124]	; (e16c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    e0ee:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    e0f2:	68a3      	ldr	r3, [r4, #8]
    e0f4:	680f      	ldr	r7, [r1, #0]
    e0f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    e0fa:	2501      	movs	r5, #1
    e0fc:	4303      	orrs	r3, r0
    e0fe:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e102:	fa05 f101 	lsl.w	r1, r5, r1
    e106:	4638      	mov	r0, r7
    e108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e10c:	462a      	mov	r2, r5
    e10e:	f003 fce5 	bl	11adc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    e112:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e116:	fa05 f202 	lsl.w	r2, r5, r2
    e11a:	4638      	mov	r0, r7
    e11c:	4631      	mov	r1, r6
    e11e:	b2d2      	uxtb	r2, r2
    e120:	f003 fb30 	bl	11784 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    e124:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e128:	b9ab      	cbnz	r3, e156 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    e12a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e12c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e12e:	01db      	lsls	r3, r3, #7
    e130:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e134:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e138:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    e13a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e13e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e142:	e73a      	b.n	dfba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e144:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e146:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e148:	01db      	lsls	r3, r3, #7
    e14a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e14e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e152:	619a      	str	r2, [r3, #24]
    e154:	e7a2      	b.n	e09c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    e156:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e158:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e15a:	01db      	lsls	r3, r3, #7
    e15c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e160:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e164:	619a      	str	r2, [r3, #24]
    e166:	e7e8      	b.n	e13a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    e168:	200019d0 	.word	0x200019d0
    e16c:	20001f18 	.word	0x20001f18
    e170:	20001be0 	.word	0x20001be0

0000e174 <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    e174:	7983      	ldrb	r3, [r0, #6]
    e176:	2b04      	cmp	r3, #4
    e178:	d014      	beq.n	e1a4 <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    e17a:	2b06      	cmp	r3, #6
    e17c:	d005      	beq.n	e18a <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    e17e:	2b02      	cmp	r3, #2
    e180:	d001      	beq.n	e186 <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    e182:	2000      	movs	r0, #0
    e184:	4770      	bx	lr
            state = DigitalIn::State();
    e186:	f000 b85d 	b.w	e244 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    e18a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e18c:	b173      	cbz	r3, e1ac <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e18e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    e192:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e196:	4413      	add	r3, r2
    e198:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    e19c:	b929      	cbnz	r1, e1aa <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e19e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    e1a2:	4770      	bx	lr
            state = m_outState;
    e1a4:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    e1a8:	4770      	bx	lr
    e1aa:	4770      	bx	lr
    int16_t state = -1;
    e1ac:	f04f 30ff 	mov.w	r0, #4294967295
}
    e1b0:	4770      	bx	lr
    e1b2:	bf00      	nop

0000e1b4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e1b4:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e1b6:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    e1b8:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e1ba:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e1bc:	4604      	mov	r4, r0
    m_outState = false;
    e1be:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    e1c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    e1c6:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e1ca:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e1ce:	d41a      	bmi.n	e206 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    e1d0:	6b02      	ldr	r2, [r0, #48]	; 0x30
    e1d2:	01d2      	lsls	r2, r2, #7
    e1d4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e1d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e1dc:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    e1e0:	2004      	movs	r0, #4
    e1e2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e1e6:	f360 0203 	bfi	r2, r0, #0, #4
    e1ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    e1ee:	4620      	mov	r0, r4
    e1f0:	f000 f83c 	bl	e26c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    e1f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e1f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e1f8:	01db      	lsls	r3, r3, #7
    e1fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e1fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e202:	609a      	str	r2, [r3, #8]
    e204:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e206:	6b00      	ldr	r0, [r0, #48]	; 0x30
    e208:	01c0      	lsls	r0, r0, #7
    e20a:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    e20e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e212:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    e216:	2004      	movs	r0, #4
    e218:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e21c:	f360 1307 	bfi	r3, r0, #4, #4
    e220:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e224:	e7e3      	b.n	e1ee <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    e226:	bf00      	nop

0000e228 <_ZN9ClearCore9Connector4ModeEv>:
    }
    e228:	7980      	ldrb	r0, [r0, #6]
    e22a:	4770      	bx	lr

0000e22c <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    e22c:	7980      	ldrb	r0, [r0, #6]
    e22e:	4770      	bx	lr

0000e230 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    e230:	2902      	cmp	r1, #2
            m_mode = newMode;
    e232:	bf06      	itte	eq
    e234:	7181      	strbeq	r1, [r0, #6]
            return true;
    e236:	2001      	moveq	r0, #1
            return false;
    e238:	2000      	movne	r0, #0
    }
    e23a:	4770      	bx	lr

0000e23c <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    e23c:	2000      	movs	r0, #0
    e23e:	4770      	bx	lr

0000e240 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    e240:	2000      	movs	r0, #0
    e242:	4770      	bx	lr

0000e244 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    e244:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e246:	b113      	cbz	r3, e24e <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    e248:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    e24c:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e24e:	4b06      	ldr	r3, [pc, #24]	; (e268 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    e250:	68c1      	ldr	r1, [r0, #12]
    e252:	681a      	ldr	r2, [r3, #0]
    e254:	6943      	ldr	r3, [r0, #20]
    e256:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e25a:	6812      	ldr	r2, [r2, #0]
    e25c:	421a      	tst	r2, r3
    e25e:	bf0c      	ite	eq
    e260:	2001      	moveq	r0, #1
    e262:	2000      	movne	r0, #0
    e264:	4770      	bx	lr
    e266:	bf00      	nop
    e268:	20001f08 	.word	0x20001f08

0000e26c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    e26c:	4b2e      	ldr	r3, [pc, #184]	; (e328 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    e26e:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    e270:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e274:	68c3      	ldr	r3, [r0, #12]
    e276:	6904      	ldr	r4, [r0, #16]
    e278:	01da      	lsls	r2, r3, #7
    e27a:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    e27e:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e280:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    e284:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    e288:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    e28a:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e28e:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    e292:	d034      	beq.n	e2fe <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    e294:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    e298:	f366 1707 	bfi	r7, r6, #4, #4
    e29c:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e2a0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e2a4:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e2a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e2aa:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e2ac:	2d00      	cmp	r5, #0
    e2ae:	d134      	bne.n	e31a <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    e2b0:	2402      	movs	r4, #2
    e2b2:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e2b6:	4a1d      	ldr	r2, [pc, #116]	; (e32c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e2b8:	6884      	ldr	r4, [r0, #8]
    e2ba:	6812      	ldr	r2, [r2, #0]
    e2bc:	4e1c      	ldr	r6, [pc, #112]	; (e330 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    e2be:	3306      	adds	r3, #6
    e2c0:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e2c2:	f1a3 050c 	sub.w	r5, r3, #12
    e2c6:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e2c8:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e2ca:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e2cc:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e2ce:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e2d0:	6242      	str	r2, [r0, #36]	; 0x24
    e2d2:	43e4      	mvns	r4, r4
    e2d4:	f3bf 8f5b 	dmb	ish
    e2d8:	e856 3f00 	ldrex	r3, [r6]
    e2dc:	4023      	ands	r3, r4
    e2de:	e846 3200 	strex	r2, r3, [r6]
    e2e2:	2a00      	cmp	r2, #0
    e2e4:	d1f8      	bne.n	e2d8 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    e2e6:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    e2ea:	6803      	ldr	r3, [r0, #0]
    e2ec:	4a11      	ldr	r2, [pc, #68]	; (e334 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    e2ee:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    e2f0:	8081      	strh	r1, [r0, #4]
    e2f2:	4293      	cmp	r3, r2
    e2f4:	d115      	bne.n	e322 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    e2f6:	2302      	movs	r3, #2
    e2f8:	7183      	strb	r3, [r0, #6]
}
    e2fa:	bcf0      	pop	{r4, r5, r6, r7}
    e2fc:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e2fe:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    e302:	f367 0603 	bfi	r6, r7, #0, #4
    e306:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e30a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e30e:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e310:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e314:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e316:	2d00      	cmp	r5, #0
    e318:	d0ca      	beq.n	e2b0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e31a:	2403      	movs	r4, #3
    e31c:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    e320:	e7c9      	b.n	e2b6 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    e322:	2102      	movs	r1, #2
}
    e324:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    e326:	4718      	bx	r3
    e328:	00010003 	.word	0x00010003
    e32c:	20001f08 	.word	0x20001f08
    e330:	20001ac4 	.word	0x20001ac4
    e334:	0000e231 	.word	0x0000e231

0000e338 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    e338:	69c2      	ldr	r2, [r0, #28]
    e33a:	6943      	ldr	r3, [r0, #20]
    e33c:	6812      	ldr	r2, [r2, #0]
    e33e:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    e340:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    e342:	d005      	beq.n	e350 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    e344:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    e346:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    e348:	2a00      	cmp	r2, #0
    e34a:	d039      	beq.n	e3c0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    e34c:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    e350:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    e352:	2a00      	cmp	r2, #0
    e354:	d0fa      	beq.n	e34c <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    e356:	3a01      	subs	r2, #1
    e358:	b292      	uxth	r2, r2
    e35a:	8582      	strh	r2, [r0, #44]	; 0x2c
    e35c:	2a00      	cmp	r2, #0
    e35e:	d1f5      	bne.n	e34c <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e360:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e362:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e364:	6809      	ldr	r1, [r1, #0]
    e366:	400b      	ands	r3, r1
    e368:	2b00      	cmp	r3, #0
    e36a:	bf0c      	ite	eq
    e36c:	2301      	moveq	r3, #1
    e36e:	2300      	movne	r3, #0
    e370:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e374:	d053      	beq.n	e41e <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e376:	f3bf 8f5b 	dmb	ish
    e37a:	4b41      	ldr	r3, [pc, #260]	; (e480 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e37c:	43d2      	mvns	r2, r2
    e37e:	e853 1f00 	ldrex	r1, [r3]
    e382:	4011      	ands	r1, r2
    e384:	e843 1e00 	strex	lr, r1, [r3]
    e388:	f1be 0f00 	cmp.w	lr, #0
    e38c:	d1f7      	bne.n	e37e <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    e38e:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    e392:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e396:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e39a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e39c:	2b00      	cmp	r3, #0
    e39e:	d14a      	bne.n	e436 <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e3a0:	f3bf 8f5b 	dmb	ish
    e3a4:	2301      	movs	r3, #1
    e3a6:	408b      	lsls	r3, r1
    e3a8:	43db      	mvns	r3, r3
    e3aa:	e852 1f00 	ldrex	r1, [r2]
    e3ae:	4019      	ands	r1, r3
    e3b0:	e842 1000 	strex	r0, r1, [r2]
    e3b4:	2800      	cmp	r0, #0
    e3b6:	d1f8      	bne.n	e3aa <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    e3b8:	f3bf 8f5b 	dmb	ish
}
    e3bc:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e3c0:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e3c2:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e3c4:	6809      	ldr	r1, [r1, #0]
    e3c6:	400b      	ands	r3, r1
    e3c8:	2b00      	cmp	r3, #0
    e3ca:	bf0c      	ite	eq
    e3cc:	2301      	moveq	r3, #1
    e3ce:	2300      	movne	r3, #0
    e3d0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e3d4:	d047      	beq.n	e466 <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e3d6:	f3bf 8f5b 	dmb	ish
    e3da:	4b29      	ldr	r3, [pc, #164]	; (e480 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e3dc:	43d2      	mvns	r2, r2
    e3de:	e853 1f00 	ldrex	r1, [r3]
    e3e2:	4011      	ands	r1, r2
    e3e4:	e843 1e00 	strex	lr, r1, [r3]
    e3e8:	f1be 0f00 	cmp.w	lr, #0
    e3ec:	d1f7      	bne.n	e3de <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    e3ee:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e3f2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e3f6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e3fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e3fc:	bb3b      	cbnz	r3, e44e <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e3fe:	f3bf 8f5b 	dmb	ish
    e402:	2301      	movs	r3, #1
    e404:	408b      	lsls	r3, r1
    e406:	43db      	mvns	r3, r3
    e408:	e852 1f00 	ldrex	r1, [r2]
    e40c:	4019      	ands	r1, r3
    e40e:	e842 1000 	strex	r0, r1, [r2]
    e412:	2800      	cmp	r0, #0
    e414:	d1f8      	bne.n	e408 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    e416:	f3bf 8f5b 	dmb	ish
}
    e41a:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e41e:	4b18      	ldr	r3, [pc, #96]	; (e480 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e420:	f3bf 8f5b 	dmb	ish
    e424:	e853 1f00 	ldrex	r1, [r3]
    e428:	4311      	orrs	r1, r2
    e42a:	e843 1e00 	strex	lr, r1, [r3]
    e42e:	f1be 0f00 	cmp.w	lr, #0
    e432:	d0ac      	beq.n	e38e <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    e434:	e7f6      	b.n	e424 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e436:	2301      	movs	r3, #1
    e438:	408b      	lsls	r3, r1
    e43a:	f3bf 8f5b 	dmb	ish
    e43e:	e852 1f00 	ldrex	r1, [r2]
    e442:	4319      	orrs	r1, r3
    e444:	e842 1000 	strex	r0, r1, [r2]
    e448:	2800      	cmp	r0, #0
    e44a:	d0e4      	beq.n	e416 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e44c:	e7f7      	b.n	e43e <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    e44e:	2301      	movs	r3, #1
    e450:	408b      	lsls	r3, r1
    e452:	f3bf 8f5b 	dmb	ish
    e456:	e852 1f00 	ldrex	r1, [r2]
    e45a:	4319      	orrs	r1, r3
    e45c:	e842 1000 	strex	r0, r1, [r2]
    e460:	2800      	cmp	r0, #0
    e462:	d0d8      	beq.n	e416 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e464:	e7f7      	b.n	e456 <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    e466:	4b06      	ldr	r3, [pc, #24]	; (e480 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e468:	f3bf 8f5b 	dmb	ish
    e46c:	e853 1f00 	ldrex	r1, [r3]
    e470:	4311      	orrs	r1, r2
    e472:	e843 1e00 	strex	lr, r1, [r3]
    e476:	f1be 0f00 	cmp.w	lr, #0
    e47a:	d0b8      	beq.n	e3ee <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    e47c:	e7f6      	b.n	e46c <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    e47e:	bf00      	nop
    e480:	20001ac4 	.word	0x20001ac4

0000e484 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    e484:	4a03      	ldr	r2, [pc, #12]	; (e494 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    e486:	6002      	str	r2, [r0, #0]
    e488:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e48c:	2200      	movs	r2, #0
    e48e:	8081      	strh	r1, [r0, #4]
    e490:	7182      	strb	r2, [r0, #6]
    e492:	4770      	bx	lr
    e494:	000232e8 	.word	0x000232e8

0000e498 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    e498:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    e49a:	f992 4001 	ldrsb.w	r4, [r2, #1]
    e49e:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    e4a0:	4d0d      	ldr	r5, [pc, #52]	; (e4d8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    e4a2:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    e4a4:	2400      	movs	r4, #0
    e4a6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e4aa:	8086      	strh	r6, [r0, #4]
    e4ac:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    e4ae:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    e4b0:	7895      	ldrb	r5, [r2, #2]
    e4b2:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    e4b4:	2101      	movs	r1, #1
    e4b6:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    e4b8:	6141      	str	r1, [r0, #20]
    e4ba:	78d1      	ldrb	r1, [r2, #3]
    e4bc:	7601      	strb	r1, [r0, #24]
    e4be:	7911      	ldrb	r1, [r2, #4]
    e4c0:	4a06      	ldr	r2, [pc, #24]	; (e4dc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    e4c2:	61c4      	str	r4, [r0, #28]
    e4c4:	6204      	str	r4, [r0, #32]
    e4c6:	6244      	str	r4, [r0, #36]	; 0x24
    e4c8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    e4cc:	7641      	strb	r1, [r0, #25]
    e4ce:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    e4d2:	bc70      	pop	{r4, r5, r6}
    e4d4:	4770      	bx	lr
    e4d6:	bf00      	nop
    e4d8:	00023318 	.word	0x00023318
    e4dc:	00010003 	.word	0x00010003

0000e4e0 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e4e0:	4b05      	ldr	r3, [pc, #20]	; (e4f8 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    e4e2:	68c1      	ldr	r1, [r0, #12]
    e4e4:	681a      	ldr	r2, [r3, #0]
    e4e6:	6943      	ldr	r3, [r0, #20]
    e4e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e4ec:	6812      	ldr	r2, [r2, #0]
    e4ee:	421a      	tst	r2, r3
}
    e4f0:	bf0c      	ite	eq
    e4f2:	2001      	moveq	r0, #1
    e4f4:	2000      	movne	r0, #0
    e4f6:	4770      	bx	lr
    e4f8:	20001f08 	.word	0x20001f08

0000e4fc <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e4fc:	6a03      	ldr	r3, [r0, #32]
    e4fe:	6941      	ldr	r1, [r0, #20]
    e500:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e502:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e504:	400b      	ands	r3, r1
    e506:	2b00      	cmp	r3, #0
    e508:	bf0c      	ite	eq
    e50a:	2301      	moveq	r3, #1
    e50c:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    e50e:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e510:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e514:	d023      	beq.n	e55e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e516:	f3bf 8f5b 	dmb	ish
    e51a:	4b1e      	ldr	r3, [pc, #120]	; (e594 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e51c:	43d2      	mvns	r2, r2
    e51e:	e853 1f00 	ldrex	r1, [r3]
    e522:	4011      	ands	r1, r2
    e524:	e843 1e00 	strex	lr, r1, [r3]
    e528:	f1be 0f00 	cmp.w	lr, #0
    e52c:	d1f7      	bne.n	e51e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    e52e:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e532:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e536:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e53a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e53c:	b9db      	cbnz	r3, e576 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e53e:	f3bf 8f5b 	dmb	ish
    e542:	2301      	movs	r3, #1
    e544:	408b      	lsls	r3, r1
    e546:	43db      	mvns	r3, r3
    e548:	e852 1f00 	ldrex	r1, [r2]
    e54c:	4019      	ands	r1, r3
    e54e:	e842 1000 	strex	r0, r1, [r2]
    e552:	2800      	cmp	r0, #0
    e554:	d1f8      	bne.n	e548 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    e556:	f3bf 8f5b 	dmb	ish
    e55a:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e55e:	4b0d      	ldr	r3, [pc, #52]	; (e594 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e560:	f3bf 8f5b 	dmb	ish
    e564:	e853 1f00 	ldrex	r1, [r3]
    e568:	4311      	orrs	r1, r2
    e56a:	e843 1e00 	strex	lr, r1, [r3]
    e56e:	f1be 0f00 	cmp.w	lr, #0
    e572:	d0dc      	beq.n	e52e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    e574:	e7f6      	b.n	e564 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e576:	2301      	movs	r3, #1
    e578:	408b      	lsls	r3, r1
    e57a:	f3bf 8f5b 	dmb	ish
    e57e:	e852 1f00 	ldrex	r1, [r2]
    e582:	4319      	orrs	r1, r3
    e584:	e842 1000 	strex	r0, r1, [r2]
    e588:	2800      	cmp	r0, #0
    e58a:	d1f8      	bne.n	e57e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e58c:	f3bf 8f5b 	dmb	ish
    e590:	f85d fb04 	ldr.w	pc, [sp], #4
    e594:	20001ac4 	.word	0x20001ac4

0000e598 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e598:	7980      	ldrb	r0, [r0, #6]
    e59a:	4770      	bx	lr

0000e59c <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    e59c:	2005      	movs	r0, #5
    e59e:	4770      	bx	lr

0000e5a0 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    e5a0:	7980      	ldrb	r0, [r0, #6]
    e5a2:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    e5a4:	2804      	cmp	r0, #4
    e5a6:	bf8c      	ite	hi
    e5a8:	2000      	movhi	r0, #0
    e5aa:	2001      	movls	r0, #1
    e5ac:	4770      	bx	lr
    e5ae:	bf00      	nop

0000e5b0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5b2:	b083      	sub	sp, #12
    e5b4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    e5b8:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e5ba:	4604      	mov	r4, r0
    e5bc:	9d08      	ldr	r5, [sp, #32]
    e5be:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e5c0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    e5c4:	f7ff fc9a 	bl	defc <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    e5c8:	2300      	movs	r3, #0
    e5ca:	490f      	ldr	r1, [pc, #60]	; (e608 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    e5cc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    e5d0:	f640 42cc 	movw	r2, #3276	; 0xccc
    e5d4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    e5d8:	6663      	str	r3, [r4, #100]	; 0x64
    e5da:	66a3      	str	r3, [r4, #104]	; 0x68
    e5dc:	66e3      	str	r3, [r4, #108]	; 0x6c
    e5de:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    e5e2:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    e5e6:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    e5ea:	6765      	str	r5, [r4, #116]	; 0x74
    e5ec:	67a6      	str	r6, [r4, #120]	; 0x78
    e5ee:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    e5f2:	6021      	str	r1, [r4, #0]
    e5f4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    e5f8:	7b2a      	ldrb	r2, [r5, #12]
    e5fa:	4b04      	ldr	r3, [pc, #16]	; (e60c <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    e5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e600:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    e602:	4620      	mov	r0, r4
    e604:	b003      	add	sp, #12
    e606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e608:	00023348 	.word	0x00023348
    e60c:	00023370 	.word	0x00023370

0000e610 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e610:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    e612:	6803      	ldr	r3, [r0, #0]
    e614:	4a12      	ldr	r2, [pc, #72]	; (e660 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    e616:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    e618:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    e61c:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e61e:	b082      	sub	sp, #8
    e620:	4604      	mov	r4, r0
    e622:	d115      	bne.n	e650 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    e624:	7980      	ldrb	r0, [r0, #6]
    e626:	2808      	cmp	r0, #8
    e628:	d805      	bhi.n	e636 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    e62a:	2301      	movs	r3, #1
    e62c:	fa03 f000 	lsl.w	r0, r3, r0
    e630:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    e634:	d101      	bne.n	e63a <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    e636:	b002      	add	sp, #8
    e638:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e63a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e63c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e63e:	01db      	lsls	r3, r3, #7
    e640:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e644:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e648:	b131      	cbz	r1, e658 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    e64a:	615a      	str	r2, [r3, #20]
}
    e64c:	b002      	add	sp, #8
    e64e:	bd10      	pop	{r4, pc}
    e650:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    e652:	4798      	blx	r3
    e654:	9901      	ldr	r1, [sp, #4]
    e656:	e7e6      	b.n	e626 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e658:	619a      	str	r2, [r3, #24]
}
    e65a:	b002      	add	sp, #8
    e65c:	bd10      	pop	{r4, pc}
    e65e:	bf00      	nop
    e660:	0000e599 	.word	0x0000e599

0000e664 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    e664:	7982      	ldrb	r2, [r0, #6]
    e666:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    e668:	4601      	mov	r1, r0
    e66a:	d808      	bhi.n	e67e <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    e66c:	2301      	movs	r3, #1
    e66e:	4093      	lsls	r3, r2
    e670:	f013 0f54 	tst.w	r3, #84	; 0x54
    e674:	d112      	bne.n	e69c <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    e676:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    e67a:	d102      	bne.n	e682 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    e67c:	4770      	bx	lr
            state = 0;
    e67e:	2000      	movs	r0, #0
}
    e680:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e682:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e684:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e68a:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e68e:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    e692:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    e696:	f340 004f 	sbfx	r0, r0, #1, #16
    e69a:	4770      	bx	lr
            state = DigitalInOut::State();
    e69c:	f7ff bd6a 	b.w	e174 <_ZN9ClearCore12DigitalInOut5StateEv>

0000e6a0 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    e6a0:	b510      	push	{r4, lr}
    switch (m_mode) {
    e6a2:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e6a4:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    e6a6:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e6a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    e6aa:	2b05      	cmp	r3, #5
    e6ac:	d82a      	bhi.n	e704 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    e6ae:	e8df f003 	tbb	[pc, r3]
    e6b2:	2925      	.short	0x2925
    e6b4:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    e6b8:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e6ba:	4b13      	ldr	r3, [pc, #76]	; (e708 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    e6bc:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    e6c0:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e6c4:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e6c6:	bf1b      	ittet	ne
    e6c8:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    e6cc:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    e6d0:	20ff      	moveq	r0, #255	; 0xff
    e6d2:	11c0      	asrne	r0, r0, #7
    e6d4:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e6d8:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e6dc:	4b0b      	ldr	r3, [pc, #44]	; (e70c <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    e6de:	fb01 f102 	mul.w	r1, r1, r2
    e6e2:	fb83 0301 	smull	r0, r3, r3, r1
    e6e6:	440b      	add	r3, r1
    e6e8:	139b      	asrs	r3, r3, #14
    e6ea:	17c9      	asrs	r1, r1, #31
    e6ec:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e6ee:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e6f0:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e6f2:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e6f4:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e6f6:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    e6f8:	2001      	movs	r0, #1
            break;
    e6fa:	bd10      	pop	{r4, pc}
}
    e6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    e700:	f7ff ba8e 	b.w	dc20 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e704:	2000      	movs	r0, #0
}
    e706:	bd10      	pop	{r4, pc}
    e708:	200019d0 	.word	0x200019d0
    e70c:	80010003 	.word	0x80010003

0000e710 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e710:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    e714:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e718:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    e71c:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e71e:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e720:	b302      	cbz	r2, e764 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e722:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    e726:	2a04      	cmp	r2, #4
    e728:	d01c      	beq.n	e764 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e72a:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    e72c:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    e730:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    e732:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    e736:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    e738:	f004 fdee 	bl	13318 <arm_sin_q15>
    e73c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    e740:	4b41      	ldr	r3, [pc, #260]	; (e848 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e742:	fb11 f100 	smulbb	r1, r1, r0
    e746:	429d      	cmp	r5, r3
    e748:	f341 31cf 	sbfx	r1, r1, #15, #16
    e74c:	d177      	bne.n	e83e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    e74e:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e750:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    e752:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e754:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    e756:	2b05      	cmp	r3, #5
    e758:	d81e      	bhi.n	e798 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e75a:	e8df f003 	tbb	[pc, r3]
    e75e:	1d6b      	.short	0x1d6b
    e760:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e764:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e766:	2a07      	cmp	r2, #7
    e768:	d017      	beq.n	e79a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e76a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e76c:	4c36      	ldr	r4, [pc, #216]	; (e848 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e76e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e770:	f043 0301 	orr.w	r3, r3, #1
    e774:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e776:	6803      	ldr	r3, [r0, #0]
    e778:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e77a:	2500      	movs	r5, #0
    e77c:	42a3      	cmp	r3, r4
    e77e:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    e782:	d132      	bne.n	e7ea <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    e786:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e788:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    e78a:	2a04      	cmp	r2, #4
    e78c:	d804      	bhi.n	e798 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e78e:	e8df f002 	tbb	[pc, r2]
    e792:	0327      	.short	0x0327
    e794:	1b27      	.short	0x1b27
    e796:	27          	.byte	0x27
    e797:	00          	.byte	0x00
    e798:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e79a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    e79e:	4293      	cmp	r3, r2
    e7a0:	ddc3      	ble.n	e72a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e7a2:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e7a4:	4a28      	ldr	r2, [pc, #160]	; (e848 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e7a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e7a8:	f043 0301 	orr.w	r3, r3, #1
    e7ac:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e7ae:	6803      	ldr	r3, [r0, #0]
    e7b0:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e7b2:	2400      	movs	r4, #0
    e7b4:	4293      	cmp	r3, r2
    e7b6:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    e7ba:	d116      	bne.n	e7ea <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e7bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e7be:	085b      	lsrs	r3, r3, #1
    e7c0:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e7c2:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e7c4:	674b      	str	r3, [r1, #116]	; 0x74
    e7c6:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    e7c8:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e7ca:	4a20      	ldr	r2, [pc, #128]	; (e84c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e7cc:	f000 000f 	and.w	r0, r0, #15
    e7d0:	4402      	add	r2, r0
    e7d2:	b29b      	uxth	r3, r3
    e7d4:	2000      	movs	r0, #0
    e7d6:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e7da:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e7dc:	674b      	str	r3, [r1, #116]	; 0x74
    e7de:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e7e0:	2100      	movs	r1, #0
}
    e7e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e7e6:	f7ff ba1b 	b.w	dc20 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    e7ea:	2100      	movs	r1, #0
}
    e7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    e7f0:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    e7f2:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e7f4:	4b15      	ldr	r3, [pc, #84]	; (e84c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e7f6:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    e7fa:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e7fe:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e800:	bf1b      	ittet	ne
    e802:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    e806:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    e80a:	24ff      	moveq	r4, #255	; 0xff
    e80c:	11e4      	asrne	r4, r4, #7
    e80e:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e812:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e816:	4b0e      	ldr	r3, [pc, #56]	; (e850 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    e818:	fb01 f102 	mul.w	r1, r1, r2
    e81c:	fb83 4301 	smull	r4, r3, r3, r1
    e820:	440b      	add	r3, r1
    e822:	139b      	asrs	r3, r3, #14
    e824:	17c9      	asrs	r1, r1, #31
    e826:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e828:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e82a:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e82c:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e82e:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e830:	6741      	str	r1, [r0, #116]	; 0x74
    e832:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e834:	4620      	mov	r0, r4
}
    e836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e83a:	f7ff b9f1 	b.w	dc20 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    e83e:	4620      	mov	r0, r4
    e840:	462b      	mov	r3, r5
}
    e842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    e846:	4718      	bx	r3
    e848:	0000e6a1 	.word	0x0000e6a1
    e84c:	200019d0 	.word	0x200019d0
    e850:	80010003 	.word	0x80010003

0000e854 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    e854:	7983      	ldrb	r3, [r0, #6]
    e856:	3b02      	subs	r3, #2
    e858:	2b05      	cmp	r3, #5
    e85a:	d804      	bhi.n	e866 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    e85c:	e8df f003 	tbb	[pc, r3]
    e860:	03040304 	.word	0x03040304
    e864:	0604      	.short	0x0604
    e866:	4770      	bx	lr
            DigitalInOut::Refresh();
    e868:	f7ff bb7e 	b.w	df68 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    e86c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    e870:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    e872:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    e874:	d02c      	beq.n	e8d0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    e876:	2b04      	cmp	r3, #4
    e878:	d003      	beq.n	e882 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    e87a:	2b02      	cmp	r3, #2
    e87c:	d04c      	beq.n	e918 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    e87e:	bcf0      	pop	{r4, r5, r6, r7}
    e880:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    e882:	4937      	ldr	r1, [pc, #220]	; (e960 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e884:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e886:	680b      	ldr	r3, [r1, #0]
    e888:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    e88a:	1b1b      	subs	r3, r3, r4
    e88c:	4293      	cmp	r3, r2
    e88e:	d9f6      	bls.n	e87e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    e890:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    e892:	2303      	movs	r3, #3
    e894:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    e898:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e89a:	4b32      	ldr	r3, [pc, #200]	; (e964 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    e89c:	f042 0201 	orr.w	r2, r2, #1
    e8a0:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    e8a2:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    e8a4:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e8a6:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e8a8:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e8ac:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    e8b0:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8b2:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e8b6:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8b8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e8bc:	408a      	lsls	r2, r1
    e8be:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    e8c0:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8c2:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e8c6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e8ca:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    e8ce:	e7d6      	b.n	e87e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    e8d0:	4923      	ldr	r1, [pc, #140]	; (e960 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e8d2:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e8d4:	680b      	ldr	r3, [r1, #0]
    e8d6:	6e82      	ldr	r2, [r0, #104]	; 0x68
    e8d8:	1b1b      	subs	r3, r3, r4
    e8da:	4293      	cmp	r3, r2
    e8dc:	d9cf      	bls.n	e87e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8de:	4a21      	ldr	r2, [pc, #132]	; (e964 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    e8e0:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    e8e2:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e8e4:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e8e6:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    e8ea:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    e8ee:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8f0:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e8f4:	2101      	movs	r1, #1
    e8f6:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e8fc:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    e900:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    e902:	ea24 0406 	bic.w	r4, r4, r6
    e906:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e90a:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e90e:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e912:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    e916:	e7b2      	b.n	e87e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    e918:	4b11      	ldr	r3, [pc, #68]	; (e960 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e91a:	6e41      	ldr	r1, [r0, #100]	; 0x64
    e91c:	681b      	ldr	r3, [r3, #0]
    e91e:	6e82      	ldr	r2, [r0, #104]	; 0x68
    e920:	1a5b      	subs	r3, r3, r1
    e922:	4293      	cmp	r3, r2
    e924:	d9ab      	bls.n	e87e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e926:	4a0f      	ldr	r2, [pc, #60]	; (e964 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    e928:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e92a:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e92c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e930:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e934:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e938:	2501      	movs	r5, #1
    e93a:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e93c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e940:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    e944:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    e948:	2500      	movs	r5, #0
    e94a:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    e94e:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e952:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e956:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e95a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    e95e:	e78e      	b.n	e87e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    e960:	20001be0 	.word	0x20001be0
    e964:	200019d0 	.word	0x200019d0

0000e968 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    e968:	b570      	push	{r4, r5, r6, lr}
    e96a:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    e96c:	f7ff fc22 	bl	e1b4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    e970:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    e972:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    e974:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    e978:	6813      	ldr	r3, [r2, #0]
    e97a:	f043 0301 	orr.w	r3, r3, #1
    e97e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    e980:	6893      	ldr	r3, [r2, #8]
    e982:	f013 0301 	ands.w	r3, r3, #1
    e986:	d1fb      	bne.n	e980 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    e988:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    e98a:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    e98c:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    e98e:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    e990:	4b24      	ldr	r3, [pc, #144]	; (ea24 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    e992:	4e25      	ldr	r6, [pc, #148]	; (ea28 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    e994:	4825      	ldr	r0, [pc, #148]	; (ea2c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    e996:	f045 0502 	orr.w	r5, r5, #2
    e99a:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    e99c:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    e99e:	f045 0505 	orr.w	r5, r5, #5
    e9a2:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    e9a4:	6a55      	ldr	r5, [r2, #36]	; 0x24
    e9a6:	430d      	orrs	r5, r1
    e9a8:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    e9aa:	681b      	ldr	r3, [r3, #0]
    e9ac:	fba6 5303 	umull	r5, r3, r6, r3
    e9b0:	0bdb      	lsrs	r3, r3, #15
    e9b2:	3b01      	subs	r3, #1
    e9b4:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    e9b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
    e9b8:	6453      	str	r3, [r2, #68]	; 0x44
    e9ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
    e9bc:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    e9be:	6f63      	ldr	r3, [r4, #116]	; 0x74
    e9c0:	f993 2001 	ldrsb.w	r2, [r3, #1]
    e9c4:	789d      	ldrb	r5, [r3, #2]
    e9c6:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    e9ca:	fa01 f605 	lsl.w	r6, r1, r5
    e9ce:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    e9d0:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    e9d2:	f994 3001 	ldrsb.w	r3, [r4, #1]
    e9d6:	78a4      	ldrb	r4, [r4, #2]
    e9d8:	01db      	lsls	r3, r3, #7
    e9da:	4418      	add	r0, r3
    e9dc:	40a1      	lsls	r1, r4
    e9de:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    e9e0:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e9e2:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    e9e6:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e9e8:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    e9ec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e9f0:	2005      	movs	r0, #5
    e9f2:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    e9f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e9f8:	bf4c      	ite	mi
    e9fa:	f360 1107 	bfimi	r1, r0, #4, #4
    e9fe:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ea02:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ea06:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ea0a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    ea0e:	2105      	movs	r1, #5
    ea10:	07e0      	lsls	r0, r4, #31
    ea12:	bf4c      	ite	mi
    ea14:	f361 1207 	bfimi	r2, r1, #4, #4
    ea18:	f361 0203 	bfipl	r2, r1, #0, #4
    ea1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ea20:	bd70      	pop	{r4, r5, r6, pc}
    ea22:	bf00      	nop
    ea24:	200000e0 	.word	0x200000e0
    ea28:	be37c63b 	.word	0xbe37c63b
    ea2c:	41008000 	.word	0x41008000

0000ea30 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    ea30:	7982      	ldrb	r2, [r0, #6]
    ea32:	428a      	cmp	r2, r1
    ea34:	d07a      	beq.n	eb2c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    ea36:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea3a:	460d      	mov	r5, r1
    ea3c:	d867      	bhi.n	eb0e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    ea3e:	2201      	movs	r2, #1
    ea40:	fa02 f301 	lsl.w	r3, r2, r1
    ea44:	f013 0f54 	tst.w	r3, #84	; 0x54
    ea48:	4604      	mov	r4, r0
    ea4a:	d171      	bne.n	eb30 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    ea4c:	f413 7f90 	tst.w	r3, #288	; 0x120
    ea50:	d05f      	beq.n	eb12 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    ea52:	7901      	ldrb	r1, [r0, #4]
    ea54:	4a5d      	ldr	r2, [pc, #372]	; (ebcc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    ea56:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ea5a:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    ea5e:	2b00      	cmp	r3, #0
    ea60:	f040 809e 	bne.w	eba0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    ea64:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ea66:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ea68:	01db      	lsls	r3, r3, #7
    ea6a:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ea6e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ea72:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    ea74:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ea76:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ea7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ea7e:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea80:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    ea84:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ea88:	f36f 0000 	bfc	r0, #0, #1
    ea8c:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    ea90:	68a3      	ldr	r3, [r4, #8]
    ea92:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea96:	2d05      	cmp	r5, #5
    ea98:	f000 808b 	beq.w	ebb2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    ea9c:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    eaa0:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eaa4:	2701      	movs	r7, #1
    eaa6:	fa07 f101 	lsl.w	r1, r7, r1
    eaaa:	ea20 0101 	bic.w	r1, r0, r1
    eaae:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    eab2:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    eab6:	6f61      	ldr	r1, [r4, #116]	; 0x74
    eab8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    eabc:	f991 3001 	ldrsb.w	r3, [r1, #1]
    eac0:	4a43      	ldr	r2, [pc, #268]	; (ebd0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    eac2:	7889      	ldrb	r1, [r1, #2]
    eac4:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    eac8:	440b      	add	r3, r1
    eaca:	2101      	movs	r1, #1
    eacc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ead0:	4308      	orrs	r0, r1
    ead2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ead6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    ead8:	f990 3001 	ldrsb.w	r3, [r0, #1]
    eadc:	7880      	ldrb	r0, [r0, #2]
    eade:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    eae2:	4403      	add	r3, r0
    eae4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    eae8:	430a      	orrs	r2, r1
    eaea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    eaee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    eaf0:	6813      	ldr	r3, [r2, #0]
    eaf2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    eaf6:	428b      	cmp	r3, r1
    eaf8:	d006      	beq.n	eb08 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    eafa:	6813      	ldr	r3, [r2, #0]
    eafc:	f361 0341 	bfi	r3, r1, #1, #1
    eb00:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    eb02:	6893      	ldr	r3, [r2, #8]
    eb04:	079b      	lsls	r3, r3, #30
    eb06:	d4fc      	bmi.n	eb02 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    eb08:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    eb0a:	2001      	movs	r0, #1
    eb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    eb0e:	2000      	movs	r0, #0
    eb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb12:	061a      	lsls	r2, r3, #24
    eb14:	d5fb      	bpl.n	eb0e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    eb16:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    eb18:	4a2c      	ldr	r2, [pc, #176]	; (ebcc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    eb1a:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    eb1e:	f001 010f 	and.w	r1, r1, #15
    eb22:	1850      	adds	r0, r2, r1
    eb24:	11db      	asrs	r3, r3, #7
    eb26:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    eb2a:	e796      	b.n	ea5a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    eb2c:	2001      	movs	r0, #1
    eb2e:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb30:	4f26      	ldr	r7, [pc, #152]	; (ebcc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    eb32:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    eb34:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb38:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb3c:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb40:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb44:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb46:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb4a:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb4e:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb52:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb56:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb5a:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    eb5e:	f7ff f8bb 	bl	dcd8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    eb62:	2800      	cmp	r0, #0
    eb64:	d0d3      	beq.n	eb0e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    eb66:	6f61      	ldr	r1, [r4, #116]	; 0x74
    eb68:	4b19      	ldr	r3, [pc, #100]	; (ebd0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    eb6a:	f991 2001 	ldrsb.w	r2, [r1, #1]
    eb6e:	7889      	ldrb	r1, [r1, #2]
    eb70:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    eb74:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    eb76:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    eb78:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    eb7c:	f36f 0000 	bfc	r0, #0, #1
    eb80:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    eb84:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    eb86:	f992 0001 	ldrsb.w	r0, [r2, #1]
    eb8a:	7892      	ldrb	r2, [r2, #2]
    eb8c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    eb90:	4413      	add	r3, r2
    eb92:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    eb96:	f36f 0200 	bfc	r2, #0, #1
    eb9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    eb9e:	e7a6      	b.n	eaee <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    eba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eba2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    eba4:	01db      	lsls	r3, r3, #7
    eba6:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ebaa:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ebae:	6146      	str	r6, [r0, #20]
    ebb0:	e760      	b.n	ea74 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ebb2:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ebb6:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ebba:	2601      	movs	r6, #1
    ebbc:	fa06 f101 	lsl.w	r1, r6, r1
    ebc0:	4339      	orrs	r1, r7
    ebc2:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ebc6:	4303      	orrs	r3, r0
    ebc8:	e775      	b.n	eab6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    ebca:	bf00      	nop
    ebcc:	200019d0 	.word	0x200019d0
    ebd0:	41008000 	.word	0x41008000

0000ebd4 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    ebd4:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    ebd6:	4c07      	ldr	r4, [pc, #28]	; (ebf4 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    ebd8:	6823      	ldr	r3, [r4, #0]
    ebda:	07db      	lsls	r3, r3, #31
    ebdc:	d502      	bpl.n	ebe4 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    ebde:	4b06      	ldr	r3, [pc, #24]	; (ebf8 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ebe0:	6818      	ldr	r0, [r3, #0]
    ebe2:	bd10      	pop	{r4, pc}
    ebe4:	2001      	movs	r0, #1
    ebe6:	f004 fbb3 	bl	13350 <_Znwj>
    ebea:	4a03      	ldr	r2, [pc, #12]	; (ebf8 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ebec:	2301      	movs	r3, #1
    ebee:	6010      	str	r0, [r2, #0]
    ebf0:	6023      	str	r3, [r4, #0]
    return *instance;
}
    ebf2:	bd10      	pop	{r4, pc}
    ebf4:	20001e24 	.word	0x20001e24
    ebf8:	20001ef4 	.word	0x20001ef4

0000ebfc <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    ebfc:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ebfe:	4a13      	ldr	r2, [pc, #76]	; (ec4c <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ec00:	4913      	ldr	r1, [pc, #76]	; (ec50 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ec02:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ec04:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ec06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ec0a:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    ec0c:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ec0e:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    ec10:	8813      	ldrh	r3, [r2, #0]
    ec12:	b29b      	uxth	r3, r3
    ec14:	2b01      	cmp	r3, #1
    ec16:	d0fb      	beq.n	ec10 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ec18:	4b0e      	ldr	r3, [pc, #56]	; (ec54 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ec1a:	4d0f      	ldr	r5, [pc, #60]	; (ec58 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ec1c:	4c0f      	ldr	r4, [pc, #60]	; (ec5c <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    ec1e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ec22:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    ec24:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ec28:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ec2c:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ec30:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ec32:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    ec34:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    ec36:	7b51      	ldrb	r1, [r2, #13]
    ec38:	f041 0101 	orr.w	r1, r1, #1
    ec3c:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ec3e:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    ec40:	6913      	ldr	r3, [r2, #16]
    ec42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    ec46:	6113      	str	r3, [r2, #16]
}
    ec48:	bc70      	pop	{r4, r5, r6}
    ec4a:	4770      	bx	lr
    ec4c:	40000800 	.word	0x40000800
    ec50:	4100a000 	.word	0x4100a000
    ec54:	e000e100 	.word	0xe000e100
    ec58:	20001e30 	.word	0x20001e30
    ec5c:	20001e90 	.word	0x20001e90

0000ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    ec60:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    ec62:	bfda      	itte	le
    ec64:	4b02      	ldrle	r3, [pc, #8]	; (ec70 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    ec66:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    ec6a:	2000      	movgt	r0, #0
}
    ec6c:	4770      	bx	lr
    ec6e:	bf00      	nop
    ec70:	4100a040 	.word	0x4100a040

0000ec74 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    ec74:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    ec76:	bfda      	itte	le
    ec78:	4b02      	ldrle	r3, [pc, #8]	; (ec84 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    ec7a:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    ec7e:	2000      	movgt	r0, #0
}
    ec80:	4770      	bx	lr
    ec82:	bf00      	nop
    ec84:	20001e30 	.word	0x20001e30

0000ec88 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    ec88:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    ec8a:	f7ff ffa3 	bl	ebd4 <_ZN9ClearCore10DmaManager8InstanceEv>
    ec8e:	4b01      	ldr	r3, [pc, #4]	; (ec94 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    ec90:	6018      	str	r0, [r3, #0]
    ec92:	bd08      	pop	{r3, pc}
    ec94:	20001ef0 	.word	0x20001ef0

0000ec98 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    ec98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec9c:	4604      	mov	r4, r0
    ec9e:	4267      	negs	r7, r4
    eca0:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    eca4:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    eca8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    ecac:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    ecb0:	4608      	mov	r0, r1
    ecb2:	ea4f 0999 	mov.w	r9, r9, lsr #2
    ecb6:	2101      	movs	r1, #1
    ecb8:	f002 f86e 	bl	10d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    ecbc:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    ecc0:	2600      	movs	r6, #0
    bool sendData = true;
    ecc2:	2201      	movs	r2, #1
    ecc4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ecc8:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    eccc:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    ecd0:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    ecd2:	4690      	mov	r8, r2
    ecd4:	2b02      	cmp	r3, #2
    ecd6:	f000 821b 	beq.w	f110 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    ecda:	2d03      	cmp	r5, #3
    ecdc:	f300 8159 	bgt.w	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    ece0:	b1a3      	cbz	r3, ed0c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    ece2:	2b01      	cmp	r3, #1
    ece4:	d1fc      	bne.n	ece0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    ece6:	b1da      	cbz	r2, ed20 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    ece8:	2e00      	cmp	r6, #0
    ecea:	f040 808d 	bne.w	ee08 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    ecee:	6026      	str	r6, [r4, #0]
    ecf0:	6066      	str	r6, [r4, #4]
    ecf2:	60a6      	str	r6, [r4, #8]
    ecf4:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    ecf6:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    ecf8:	f104 0212 	add.w	r2, r4, #18
    ecfc:	4621      	mov	r1, r4
    ecfe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ed00:	f002 f8f4 	bl	10eec <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    ed04:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ed08:	2200      	movs	r2, #0
    ed0a:	e7e3      	b.n	ecd4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    ed0c:	2a00      	cmp	r2, #0
    ed0e:	d053      	beq.n	edb8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    ed10:	f04f 33ff 	mov.w	r3, #4294967295
    ed14:	6023      	str	r3, [r4, #0]
    ed16:	6063      	str	r3, [r4, #4]
    ed18:	60a3      	str	r3, [r4, #8]
    ed1a:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    ed1c:	2310      	movs	r3, #16
    ed1e:	e7eb      	b.n	ecf8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    ed20:	2e00      	cmp	r6, #0
    ed22:	f040 80a2 	bne.w	ee6a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    ed26:	7ca2      	ldrb	r2, [r4, #18]
    ed28:	2aff      	cmp	r2, #255	; 0xff
    ed2a:	f040 8128 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed2e:	7ce2      	ldrb	r2, [r4, #19]
    ed30:	2aff      	cmp	r2, #255	; 0xff
    ed32:	f040 8124 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed36:	7d22      	ldrb	r2, [r4, #20]
    ed38:	2aff      	cmp	r2, #255	; 0xff
    ed3a:	f040 8120 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed3e:	7d62      	ldrb	r2, [r4, #21]
    ed40:	2aff      	cmp	r2, #255	; 0xff
    ed42:	f040 811c 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed46:	7da2      	ldrb	r2, [r4, #22]
    ed48:	2aff      	cmp	r2, #255	; 0xff
    ed4a:	f040 8118 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed4e:	7de2      	ldrb	r2, [r4, #23]
    ed50:	2aff      	cmp	r2, #255	; 0xff
    ed52:	f040 8114 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed56:	7e22      	ldrb	r2, [r4, #24]
    ed58:	2aff      	cmp	r2, #255	; 0xff
    ed5a:	f040 8110 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed5e:	7e62      	ldrb	r2, [r4, #25]
    ed60:	2aff      	cmp	r2, #255	; 0xff
    ed62:	f040 810c 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed66:	7ea2      	ldrb	r2, [r4, #26]
    ed68:	2aff      	cmp	r2, #255	; 0xff
    ed6a:	f040 8108 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed6e:	7ee2      	ldrb	r2, [r4, #27]
    ed70:	2aff      	cmp	r2, #255	; 0xff
    ed72:	f040 8104 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed76:	7f22      	ldrb	r2, [r4, #28]
    ed78:	2aff      	cmp	r2, #255	; 0xff
    ed7a:	f040 8100 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed7e:	7f62      	ldrb	r2, [r4, #29]
    ed80:	2aff      	cmp	r2, #255	; 0xff
    ed82:	f040 80fc 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed86:	7fa2      	ldrb	r2, [r4, #30]
    ed88:	2aff      	cmp	r2, #255	; 0xff
    ed8a:	f040 80f8 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed8e:	7fe2      	ldrb	r2, [r4, #31]
    ed90:	2aff      	cmp	r2, #255	; 0xff
    ed92:	f040 80f4 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ed96:	f894 2020 	ldrb.w	r2, [r4, #32]
    ed9a:	2aff      	cmp	r2, #255	; 0xff
    ed9c:	f040 80ef 	bne.w	ef7e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eda0:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    eda4:	3eff      	subs	r6, #255	; 0xff
    eda6:	bf18      	it	ne
    eda8:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    edaa:	3501      	adds	r5, #1
    edac:	b2ed      	uxtb	r5, r5
    edae:	2d03      	cmp	r5, #3
    edb0:	f04f 0201 	mov.w	r2, #1
    edb4:	dd94      	ble.n	ece0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    edb6:	e0ec      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    edb8:	7ca2      	ldrb	r2, [r4, #18]
    edba:	bb02      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edbc:	7ce2      	ldrb	r2, [r4, #19]
    edbe:	b9f2      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edc0:	7d22      	ldrb	r2, [r4, #20]
    edc2:	b9e2      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edc4:	7d62      	ldrb	r2, [r4, #21]
    edc6:	b9d2      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edc8:	7da2      	ldrb	r2, [r4, #22]
    edca:	b9c2      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edcc:	7de2      	ldrb	r2, [r4, #23]
    edce:	b9b2      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edd0:	7e22      	ldrb	r2, [r4, #24]
    edd2:	b9a2      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edd4:	7e62      	ldrb	r2, [r4, #25]
    edd6:	b992      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edd8:	7ea2      	ldrb	r2, [r4, #26]
    edda:	b982      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    eddc:	7ee2      	ldrb	r2, [r4, #27]
    edde:	b972      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ede0:	7f22      	ldrb	r2, [r4, #28]
    ede2:	b962      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ede4:	7f62      	ldrb	r2, [r4, #29]
    ede6:	b952      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ede8:	7fa2      	ldrb	r2, [r4, #30]
    edea:	b942      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edec:	7fe2      	ldrb	r2, [r4, #31]
    edee:	b932      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edf0:	f894 2020 	ldrb.w	r2, [r4, #32]
    edf4:	b91a      	cbnz	r2, edfe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    edf6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    edfa:	2a00      	cmp	r2, #0
    edfc:	d0d5      	beq.n	edaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    edfe:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    ee02:	2501      	movs	r5, #1
                        flush0Success = false;
    ee04:	2600      	movs	r6, #0
    ee06:	e772      	b.n	ecee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    ee08:	2f00      	cmp	r7, #0
    ee0a:	f000 80ba 	beq.w	ef82 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    ee0e:	23aa      	movs	r3, #170	; 0xaa
    ee10:	2f01      	cmp	r7, #1
    ee12:	7023      	strb	r3, [r4, #0]
    ee14:	f104 0101 	add.w	r1, r4, #1
    ee18:	f000 80db 	beq.w	efd2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    ee1c:	2f02      	cmp	r7, #2
    ee1e:	7063      	strb	r3, [r4, #1]
    ee20:	f104 0102 	add.w	r1, r4, #2
    ee24:	f000 80d3 	beq.w	efce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    ee28:	70a3      	strb	r3, [r4, #2]
    ee2a:	1ce1      	adds	r1, r4, #3
    ee2c:	220e      	movs	r2, #14
    ee2e:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    ee32:	51e3      	str	r3, [r4, r7]
    ee34:	19e3      	adds	r3, r4, r7
    ee36:	3304      	adds	r3, #4
    ee38:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    ee3c:	f1b9 0f03 	cmp.w	r9, #3
    ee40:	6018      	str	r0, [r3, #0]
    ee42:	6058      	str	r0, [r3, #4]
    ee44:	d000      	beq.n	ee48 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    ee46:	6098      	str	r0, [r3, #8]
    ee48:	45d3      	cmp	fp, sl
    ee4a:	eba2 020a 	sub.w	r2, r2, sl
    ee4e:	eb01 000a 	add.w	r0, r1, sl
    ee52:	d008      	beq.n	ee66 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    ee54:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    ee56:	2a01      	cmp	r2, #1
            *buf++ = val;
    ee58:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    ee5c:	d003      	beq.n	ee66 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    ee5e:	2a02      	cmp	r2, #2
            *buf++ = val;
    ee60:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    ee62:	d000      	beq.n	ee66 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    ee64:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    ee66:	2311      	movs	r3, #17
    ee68:	e746      	b.n	ecf8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    ee6a:	7ca1      	ldrb	r1, [r4, #18]
    ee6c:	29aa      	cmp	r1, #170	; 0xaa
    ee6e:	f000 80aa 	beq.w	efc6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    ee72:	7ce2      	ldrb	r2, [r4, #19]
    ee74:	2aaa      	cmp	r2, #170	; 0xaa
    ee76:	d040      	beq.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ee78:	7d23      	ldrb	r3, [r4, #20]
    ee7a:	2baa      	cmp	r3, #170	; 0xaa
    ee7c:	f000 80a5 	beq.w	efca <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    ee80:	7d63      	ldrb	r3, [r4, #21]
    ee82:	2baa      	cmp	r3, #170	; 0xaa
    ee84:	f000 80a7 	beq.w	efd6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    ee88:	7da3      	ldrb	r3, [r4, #22]
    ee8a:	2baa      	cmp	r3, #170	; 0xaa
    ee8c:	f000 8118 	beq.w	f0c0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    ee90:	7de3      	ldrb	r3, [r4, #23]
    ee92:	2baa      	cmp	r3, #170	; 0xaa
    ee94:	f000 80a1 	beq.w	efda <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    ee98:	7e23      	ldrb	r3, [r4, #24]
    ee9a:	2baa      	cmp	r3, #170	; 0xaa
    ee9c:	f000 8112 	beq.w	f0c4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    eea0:	7e63      	ldrb	r3, [r4, #25]
    eea2:	2baa      	cmp	r3, #170	; 0xaa
    eea4:	f000 8110 	beq.w	f0c8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    eea8:	7ea3      	ldrb	r3, [r4, #26]
    eeaa:	2baa      	cmp	r3, #170	; 0xaa
    eeac:	f000 810e 	beq.w	f0cc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    eeb0:	7ee3      	ldrb	r3, [r4, #27]
    eeb2:	2baa      	cmp	r3, #170	; 0xaa
    eeb4:	f000 8102 	beq.w	f0bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    eeb8:	7f23      	ldrb	r3, [r4, #28]
    eeba:	2baa      	cmp	r3, #170	; 0xaa
    eebc:	f000 8108 	beq.w	f0d0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    eec0:	7f63      	ldrb	r3, [r4, #29]
    eec2:	2baa      	cmp	r3, #170	; 0xaa
    eec4:	f000 811c 	beq.w	f100 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    eec8:	7fa3      	ldrb	r3, [r4, #30]
    eeca:	2baa      	cmp	r3, #170	; 0xaa
    eecc:	f000 811a 	beq.w	f104 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    eed0:	7fe3      	ldrb	r3, [r4, #31]
    eed2:	2baa      	cmp	r3, #170	; 0xaa
    eed4:	f000 8118 	beq.w	f108 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    eed8:	f894 3020 	ldrb.w	r3, [r4, #32]
    eedc:	2baa      	cmp	r3, #170	; 0xaa
    eede:	f000 8115 	beq.w	f10c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    eee2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    eee6:	2baa      	cmp	r3, #170	; 0xaa
    eee8:	f000 8108 	beq.w	f0fc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    eeec:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    eef0:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    eef2:	bf08      	it	eq
    eef4:	2310      	moveq	r3, #16
                        if (!foundAA &&
    eef6:	f040 80ed 	bne.w	f0d4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    eefa:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    eefc:	2502      	movs	r5, #2
    eefe:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    ef02:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    ef04:	74e2      	strb	r2, [r4, #19]
    ef06:	7522      	strb	r2, [r4, #20]
    ef08:	7562      	strb	r2, [r4, #21]
    ef0a:	75a2      	strb	r2, [r4, #22]
    ef0c:	75e2      	strb	r2, [r4, #23]
    ef0e:	7622      	strb	r2, [r4, #24]
    ef10:	7662      	strb	r2, [r4, #25]
    ef12:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    ef14:	76e2      	strb	r2, [r4, #27]
    ef16:	7722      	strb	r2, [r4, #28]
    ef18:	7762      	strb	r2, [r4, #29]
    ef1a:	77a2      	strb	r2, [r4, #30]
    ef1c:	77e2      	strb	r2, [r4, #31]
    ef1e:	f884 2020 	strb.w	r2, [r4, #32]
    ef22:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    ef26:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    ef2a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    ef2e:	105b      	asrs	r3, r3, #1
    ef30:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    ef32:	2701      	movs	r7, #1
    ef34:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    ef36:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    ef3a:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    ef3e:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    ef42:	3a01      	subs	r2, #1
    ef44:	4610      	mov	r0, r2
    ef46:	17d1      	asrs	r1, r2, #31
    ef48:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    ef4a:	42ba      	cmp	r2, r7
    ef4c:	bfc8      	it	gt
    ef4e:	fa42 f707 	asrgt.w	r7, r2, r7
    ef52:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    ef56:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	d13f      	bne.n	efde <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    ef5e:	4b6d      	ldr	r3, [pc, #436]	; (f114 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    ef60:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ef64:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    ef68:	43c9      	mvns	r1, r1
    ef6a:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    ef6c:	4a6a      	ldr	r2, [pc, #424]	; (f118 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    ef6e:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    ef72:	6813      	ldr	r3, [r2, #0]
    ef74:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    ef78:	4628      	mov	r0, r5
    ef7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    ef7e:	2601      	movs	r6, #1
    ef80:	e713      	b.n	edaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    ef82:	4623      	mov	r3, r4
    ef84:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    ef88:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    ef8c:	4621      	mov	r1, r4
    ef8e:	2211      	movs	r2, #17
    ef90:	e752      	b.n	ee38 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    ef92:	4a62      	ldr	r2, [pc, #392]	; (f11c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    ef94:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    ef96:	2301      	movs	r3, #1
    ef98:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    ef9c:	2208      	movs	r2, #8
    ef9e:	2102      	movs	r1, #2
    efa0:	f002 fbf0 	bl	11784 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    efa4:	4a5b      	ldr	r2, [pc, #364]	; (f114 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    efa6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    efaa:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    efae:	495a      	ldr	r1, [pc, #360]	; (f118 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    efb0:	ea23 0300 	bic.w	r3, r3, r0
    efb4:	6809      	ldr	r1, [r1, #0]
    efb6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    efba:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    efbc:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    efc0:	4628      	mov	r0, r5
    efc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    efc6:	4613      	mov	r3, r2
    efc8:	e797      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    efca:	2302      	movs	r3, #2
    efcc:	e795      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    efce:	220f      	movs	r2, #15
    efd0:	e72d      	b.n	ee2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    efd2:	2210      	movs	r2, #16
    efd4:	e72b      	b.n	ee2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    efd6:	2303      	movs	r3, #3
    efd8:	e78f      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    efda:	2305      	movs	r3, #5
    efdc:	e78d      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    efde:	f1c3 0108 	rsb	r1, r3, #8
    efe2:	00ce      	lsls	r6, r1, #3
    efe4:	f04f 30ff 	mov.w	r0, #4294967295
    efe8:	f1c6 0220 	rsb	r2, r6, #32
    efec:	fa00 f202 	lsl.w	r2, r0, r2
    eff0:	fa20 fe06 	lsr.w	lr, r0, r6
    eff4:	f1a6 0720 	sub.w	r7, r6, #32
    eff8:	fa20 f707 	lsr.w	r7, r0, r7
    effc:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f000:	4622      	mov	r2, r4
    f002:	ea4e 0e07 	orr.w	lr, lr, r7
    f006:	40f0      	lsrs	r0, r6
    f008:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f00a:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f00e:	65e0      	str	r0, [r4, #92]	; 0x5c
    f010:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f014:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f016:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f018:	f104 0812 	add.w	r8, r4, #18
    f01c:	7056      	strb	r6, [r2, #1]
    f01e:	7096      	strb	r6, [r2, #2]
    f020:	70d6      	strb	r6, [r2, #3]
    f022:	7116      	strb	r6, [r2, #4]
    f024:	7156      	strb	r6, [r2, #5]
    f026:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f028:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f02c:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f02e:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f032:	4442      	add	r2, r8
    f034:	3301      	adds	r3, #1
    f036:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f038:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f03c:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f03e:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f040:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f042:	f001 ff53 	bl	10eec <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f046:	4631      	mov	r1, r6
    f048:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f04a:	f001 fea5 	bl	10d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f04e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f052:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f056:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f058:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f05a:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f05c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f05e:	f001 fe9b 	bl	10d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f062:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f066:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f068:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f06c:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f070:	2701      	movs	r7, #1
    f072:	4442      	add	r2, r8
    f074:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f078:	4421      	add	r1, r4
    f07a:	f001 ff37 	bl	10eec <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f07e:	4631      	mov	r1, r6
    f080:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f082:	f001 fe89 	bl	10d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f086:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f08a:	4b22      	ldr	r3, [pc, #136]	; (f114 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f08c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f090:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f094:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f098:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f09c:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f0a0:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f0a4:	f04f 0800 	mov.w	r8, #0
    f0a8:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f0ac:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f0b0:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f0b4:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f0b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f0ba:	e757      	b.n	ef6c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f0bc:	2309      	movs	r3, #9
    f0be:	e71c      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f0c0:	2304      	movs	r3, #4
    f0c2:	e71a      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f0c4:	2306      	movs	r3, #6
    f0c6:	e718      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f0c8:	2307      	movs	r3, #7
    f0ca:	e716      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f0cc:	2308      	movs	r3, #8
    f0ce:	e714      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f0d0:	230a      	movs	r3, #10
    f0d2:	e712      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f0d4:	2300      	movs	r3, #0
    f0d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f0da:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f0de:	4a0f      	ldr	r2, [pc, #60]	; (f11c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f0e0:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f0e2:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f0e4:	f04f 0000 	mov.w	r0, #0
    f0e8:	f04f 0100 	mov.w	r1, #0
    f0ec:	bfcc      	ite	gt
    f0ee:	105b      	asrgt	r3, r3, #1
    f0f0:	2301      	movle	r3, #1
    f0f2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f0f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f0fa:	e74b      	b.n	ef94 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f0fc:	230f      	movs	r3, #15
    f0fe:	e6fc      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f100:	230b      	movs	r3, #11
    f102:	e6fa      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f104:	230c      	movs	r3, #12
    f106:	e6f8      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f108:	230d      	movs	r3, #13
    f10a:	e6f6      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f10c:	230e      	movs	r3, #14
    f10e:	e6f4      	b.n	eefa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f110:	2300      	movs	r3, #0
    f112:	e70c      	b.n	ef2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f114:	200019d0 	.word	0x200019d0
    f118:	20001be0 	.word	0x20001be0
    f11c:	20001f18 	.word	0x20001f18

0000f120 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f124:	4f42      	ldr	r7, [pc, #264]	; (f230 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f126:	683c      	ldr	r4, [r7, #0]
    f128:	f014 0401 	ands.w	r4, r4, #1
    f12c:	d003      	beq.n	f136 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f12e:	4b41      	ldr	r3, [pc, #260]	; (f234 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f130:	6818      	ldr	r0, [r3, #0]
    f132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f136:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f13a:	f004 f909 	bl	13350 <_Znwj>
            buf64.writeMarker = 0;
    f13e:	4603      	mov	r3, r0
    f140:	4606      	mov	r6, r0
    f142:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f146:	f04f 38ff 	mov.w	r8, #4294967295
    f14a:	f04f 39ff 	mov.w	r9, #4294967295
    f14e:	2200      	movs	r2, #0
            buf64.inputs = 0;
    f150:	7074      	strb	r4, [r6, #1]
    f152:	705c      	strb	r4, [r3, #1]
    f154:	709c      	strb	r4, [r3, #2]
    f156:	70dc      	strb	r4, [r3, #3]
    f158:	711c      	strb	r4, [r3, #4]
    f15a:	715c      	strb	r4, [r3, #5]
    f15c:	719c      	strb	r4, [r3, #6]
    f15e:	71dc      	strb	r4, [r3, #7]
    f160:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    f162:	7274      	strb	r4, [r6, #9]
    f164:	72b4      	strb	r4, [r6, #10]
    f166:	72f4      	strb	r4, [r6, #11]
    f168:	7334      	strb	r4, [r6, #12]
    f16a:	7374      	strb	r4, [r6, #13]
    f16c:	73b4      	strb	r4, [r6, #14]
    f16e:	73f4      	strb	r4, [r6, #15]
    f170:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    f172:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    f174:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    f176:	74f4      	strb	r4, [r6, #19]
    f178:	7534      	strb	r4, [r6, #20]
    f17a:	7574      	strb	r4, [r6, #21]
    f17c:	75b4      	strb	r4, [r6, #22]
    f17e:	75f4      	strb	r4, [r6, #23]
    f180:	7634      	strb	r4, [r6, #24]
    f182:	7674      	strb	r4, [r6, #25]
    f184:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    f186:	76f4      	strb	r4, [r6, #27]
    f188:	7734      	strb	r4, [r6, #28]
    f18a:	7774      	strb	r4, [r6, #29]
    f18c:	77b4      	strb	r4, [r6, #30]
    f18e:	77f4      	strb	r4, [r6, #31]
    f190:	f886 4020 	strb.w	r4, [r6, #32]
    f194:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    f198:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    f19c:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    f1a0:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    f1a4:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    f1a8:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    f1ac:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    f1b0:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    f1b4:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    f1b8:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    f1bc:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f1c0:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f1c4:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f1c8:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f1cc:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f1d0:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f1d4:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f1d8:	2301      	movs	r3, #1
    f1da:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f1de:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f1e2:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f1e6:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f1ea:	62b4      	str	r4, [r6, #40]	; 0x28
    f1ec:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f1f0:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f1f4:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f1f8:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f1fc:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f200:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f204:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f208:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f20c:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f210:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f214:	4620      	mov	r0, r4
    f216:	3428      	adds	r4, #40	; 0x28
    f218:	f000 fc8a 	bl	fb30 <_ZN9ClearCore7CcioPinC1Ev>
    f21c:	42ac      	cmp	r4, r5
    f21e:	d1f9      	bne.n	f214 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f220:	4a04      	ldr	r2, [pc, #16]	; (f234 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f222:	2301      	movs	r3, #1
    f224:	6016      	str	r6, [r2, #0]
    f226:	4630      	mov	r0, r6
    f228:	603b      	str	r3, [r7, #0]
}
    f22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f22e:	bf00      	nop
    f230:	20001ef8 	.word	0x20001ef8
    f234:	20001f00 	.word	0x20001f00

0000f238 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f238:	b570      	push	{r4, r5, r6, lr}
    f23a:	4606      	mov	r6, r0
    f23c:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f240:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f242:	682b      	ldr	r3, [r5, #0]
    f244:	b221      	sxth	r1, r4
    f246:	3401      	adds	r4, #1
    f248:	4628      	mov	r0, r5
    f24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f24c:	b2a4      	uxth	r4, r4
    f24e:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f250:	2c80      	cmp	r4, #128	; 0x80
    f252:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f256:	d1f4      	bne.n	f242 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f258:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f25c:	2b02      	cmp	r3, #2
    f25e:	d00b      	beq.n	f278 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f260:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f264:	2b00      	cmp	r3, #0
    f266:	d13c      	bne.n	f2e2 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f268:	4a20      	ldr	r2, [pc, #128]	; (f2ec <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f26a:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f26c:	6812      	ldr	r2, [r2, #0]
    f26e:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f272:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f274:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f278:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f27a:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f27c:	2200      	movs	r2, #0
    f27e:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f280:	f04f 34ff 	mov.w	r4, #4294967295
    f284:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f288:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f28c:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f290:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f294:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f298:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f29c:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f2a0:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f2a4:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f2a8:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f2ac:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f2b0:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f2b4:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f2b8:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f2bc:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f2c0:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f2c4:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f2c8:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f2cc:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f2d0:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f2d4:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f2d8:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f2dc:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f2e0:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f2e2:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f2e6:	2b00      	cmp	r3, #0
    f2e8:	d1be      	bne.n	f268 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f2ea:	e7c5      	b.n	f278 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f2ec:	20001be0 	.word	0x20001be0

0000f2f0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f2f0:	3940      	subs	r1, #64	; 0x40
    f2f2:	b28b      	uxth	r3, r1
    f2f4:	2b3f      	cmp	r3, #63	; 0x3f
    f2f6:	d80f      	bhi.n	f318 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f2f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f2fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f2fc:	b2c9      	uxtb	r1, r1
    f2fe:	f1c1 0320 	rsb	r3, r1, #32
    f302:	fa02 f303 	lsl.w	r3, r2, r3
    f306:	40c8      	lsrs	r0, r1
    f308:	3920      	subs	r1, #32
    f30a:	4318      	orrs	r0, r3
    f30c:	fa22 f101 	lsr.w	r1, r2, r1
    f310:	4308      	orrs	r0, r1
}
    f312:	f000 0001 	and.w	r0, r0, #1
    f316:	4770      	bx	lr
    f318:	2000      	movs	r0, #0
    f31a:	f000 0001 	and.w	r0, r0, #1
    f31e:	4770      	bx	lr

0000f320 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f320:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f322:	2900      	cmp	r1, #0
    f324:	f000 8084 	beq.w	f430 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f328:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f32c:	2b00      	cmp	r3, #0
    f32e:	d07f      	beq.n	f430 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f330:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f334:	2a00      	cmp	r2, #0
    f336:	d17b      	bne.n	f430 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f33c:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f340:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f344:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f346:	f000 80a3 	beq.w	f490 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f34a:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f34e:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f352:	2400      	movs	r4, #0
    f354:	2500      	movs	r5, #0
    f356:	4690      	mov	r8, r2
    f358:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f35c:	4696      	mov	lr, r2
    f35e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f362:	e9cd 4500 	strd	r4, r5, [sp]
    f366:	2201      	movs	r2, #1
    f368:	2300      	movs	r3, #0
    f36a:	4626      	mov	r6, r4
    f36c:	462f      	mov	r7, r5
    f36e:	9106      	str	r1, [sp, #24]
    f370:	e037      	b.n	f3e2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f372:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f376:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f37a:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f37e:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f382:	f108 0501 	add.w	r5, r8, #1
    f386:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f388:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f38a:	ea46 0602 	orr.w	r6, r6, r2
    f38e:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f392:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f396:	db06      	blt.n	f3a6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f398:	b12c      	cbz	r4, f3a6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f39a:	e9dd 4500 	ldrd	r4, r5, [sp]
    f39e:	4314      	orrs	r4, r2
    f3a0:	431d      	orrs	r5, r3
    f3a2:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f3a6:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f3aa:	ea04 0802 	and.w	r8, r4, r2
    f3ae:	ea05 0903 	and.w	r9, r5, r3
    f3b2:	ea58 0109 	orrs.w	r1, r8, r9
    f3b6:	d00b      	beq.n	f3d0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    f3b8:	ea24 0402 	bic.w	r4, r4, r2
    f3bc:	ea25 0503 	bic.w	r5, r5, r3
    f3c0:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    f3c4:	e9dd 4500 	ldrd	r4, r5, [sp]
    f3c8:	4314      	orrs	r4, r2
    f3ca:	431d      	orrs	r5, r3
    f3cc:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f3d0:	f10e 0e01 	add.w	lr, lr, #1
    f3d4:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    f3d8:	1892      	adds	r2, r2, r2
    f3da:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f3dc:	45e6      	cmp	lr, ip
    f3de:	46f0      	mov	r8, lr
    f3e0:	da27      	bge.n	f432 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    f3e2:	ea0a 0402 	and.w	r4, sl, r2
    f3e6:	ea0b 0503 	and.w	r5, fp, r3
    f3ea:	ea54 0105 	orrs.w	r1, r4, r5
    f3ee:	d0ef      	beq.n	f3d0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    f3f0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    f3f4:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    f3f8:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    f3fc:	3c01      	subs	r4, #1
    f3fe:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    f402:	2c00      	cmp	r4, #0
    f404:	d1e4      	bne.n	f3d0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    f406:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f40a:	4014      	ands	r4, r2
    f40c:	401d      	ands	r5, r3
    f40e:	432c      	orrs	r4, r5
    f410:	d1af      	bne.n	f372 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    f412:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f416:	ea04 0802 	and.w	r8, r4, r2
    f41a:	ea05 0903 	and.w	r9, r5, r3
    f41e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    f422:	ea58 0409 	orrs.w	r4, r8, r9
    f426:	f000 8115 	beq.w	f654 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    f42a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f42e:	e7c3      	b.n	f3b8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    f430:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f432:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    f436:	9906      	ldr	r1, [sp, #24]
    f438:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f43c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    f440:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f444:	4642      	mov	r2, r8
    f446:	464b      	mov	r3, r9
    f448:	4322      	orrs	r2, r4
    f44a:	432b      	orrs	r3, r5
    f44c:	4614      	mov	r4, r2
    f44e:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f450:	4642      	mov	r2, r8
    f452:	464b      	mov	r3, r9
    f454:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    f458:	43f6      	mvns	r6, r6
    f45a:	43ff      	mvns	r7, r7
    f45c:	ea48 0802 	orr.w	r8, r8, r2
    f460:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f464:	ea04 0206 	and.w	r2, r4, r6
    f468:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    f46c:	e9dd 4500 	ldrd	r4, r5, [sp]
    f470:	ea2a 0404 	bic.w	r4, sl, r4
    f474:	ea2b 0505 	bic.w	r5, fp, r5
    f478:	46a2      	mov	sl, r4
    f47a:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f47c:	ea08 0406 	and.w	r4, r8, r6
    f480:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f484:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    f488:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f48c:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    f490:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    f494:	3d01      	subs	r5, #1
    f496:	b2ed      	uxtb	r5, r5
    f498:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    f49c:	b115      	cbz	r5, f4a4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    f49e:	b011      	add	sp, #68	; 0x44
    f4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4a4:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f4a6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    f4aa:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    f4ae:	4608      	mov	r0, r1
    f4b0:	f001 fd9e 	bl	10ff0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f4b4:	4629      	mov	r1, r5
    f4b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f4b8:	f001 fc6e 	bl	10d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f4bc:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f4c0:	f10c 0309 	add.w	r3, ip, #9
    f4c4:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    f4c6:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f4ca:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    f4cc:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f4ce:	2acc      	cmp	r2, #204	; 0xcc
    f4d0:	f000 814e 	beq.w	f770 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    f4d4:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    f4d8:	1c5a      	adds	r2, r3, #1
    f4da:	b292      	uxth	r2, r2
    f4dc:	3b04      	subs	r3, #4
    f4de:	4616      	mov	r6, r2
    f4e0:	920b      	str	r2, [sp, #44]	; 0x2c
    f4e2:	b29b      	uxth	r3, r3
    f4e4:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    f4e8:	4293      	cmp	r3, r2
    f4ea:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    f4ee:	f240 81c6 	bls.w	f87e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    f4f2:	2200      	movs	r2, #0
    f4f4:	2300      	movs	r3, #0
    f4f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f4fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f4fe:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    f502:	ea22 0000 	bic.w	r0, r2, r0
    f506:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f50a:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f50e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f512:	4610      	mov	r0, r2
    f514:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f516:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f51a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f51e:	f1bc 0f00 	cmp.w	ip, #0
    f522:	f000 81d3 	beq.w	f8cc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    f526:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f52a:	2200      	movs	r2, #0
    f52c:	2000      	movs	r0, #0
    f52e:	2100      	movs	r1, #0
    f530:	4613      	mov	r3, r2
    f532:	e9cd 0100 	strd	r0, r1, [sp]
    f536:	f04f 0801 	mov.w	r8, #1
    f53a:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f53e:	f04f 0a0c 	mov.w	sl, #12
    f542:	e038      	b.n	f5b6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    f544:	0099      	lsls	r1, r3, #2
    f546:	18c8      	adds	r0, r1, r3
    f548:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f54c:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    f550:	f10b 3bff 	add.w	fp, fp, #4294967295
    f554:	fa1f fb8b 	uxth.w	fp, fp
    f558:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    f55c:	f1bb 0f00 	cmp.w	fp, #0
    f560:	d107      	bne.n	f572 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    f562:	ea26 0608 	bic.w	r6, r6, r8
    f566:	ea27 0709 	bic.w	r7, r7, r9
    f56a:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f56e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    f572:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    f576:	ea06 0608 	and.w	r6, r6, r8
    f57a:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f57e:	4419      	add	r1, r3
        if (changedInputs & mask) {
    f580:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f584:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    f588:	d04e      	beq.n	f628 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    f58a:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f58e:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    f592:	b93b      	cbnz	r3, f5a4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    f594:	e9dd 0100 	ldrd	r0, r1, [sp]
    f598:	ea40 0008 	orr.w	r0, r0, r8
    f59c:	ea41 0109 	orr.w	r1, r1, r9
    f5a0:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f5a4:	3201      	adds	r2, #1
    f5a6:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    f5a8:	eb18 0808 	adds.w	r8, r8, r8
    f5ac:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f5b0:	4596      	cmp	lr, r2
    f5b2:	4613      	mov	r3, r2
    f5b4:	dd59      	ble.n	f66a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    f5b6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f5ba:	4606      	mov	r6, r0
    f5bc:	460f      	mov	r7, r1
    f5be:	ea00 0008 	and.w	r0, r0, r8
    f5c2:	ea01 0109 	and.w	r1, r1, r9
    f5c6:	4301      	orrs	r1, r0
    f5c8:	d1bc      	bne.n	f544 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    f5ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f5ce:	ea00 0008 	and.w	r0, r0, r8
    f5d2:	ea01 0109 	and.w	r1, r1, r9
    f5d6:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    f5d8:	ea4f 0183 	mov.w	r1, r3, lsl #2
    f5dc:	eb01 0003 	add.w	r0, r1, r3
    f5e0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    f5e4:	d02b      	beq.n	f63e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    f5e6:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    f5ea:	f1bb 0f00 	cmp.w	fp, #0
    f5ee:	d0c0      	beq.n	f572 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    f5f0:	f10b 3bff 	add.w	fp, fp, #4294967295
    f5f4:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    f5f8:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    f5fc:	f1bb 0f00 	cmp.w	fp, #0
    f600:	d1b7      	bne.n	f572 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    f602:	ea46 0608 	orr.w	r6, r6, r8
    f606:	ea47 0709 	orr.w	r7, r7, r9
    f60a:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    f60e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f612:	ea46 0608 	orr.w	r6, r6, r8
    f616:	ea47 0709 	orr.w	r7, r7, r9
    f61a:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    f61e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    f622:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    f626:	e7a4      	b.n	f572 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    f628:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    f62c:	2800      	cmp	r0, #0
    f62e:	d0b9      	beq.n	f5a4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    f630:	3801      	subs	r0, #1
    f632:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    f634:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f638:	2800      	cmp	r0, #0
    f63a:	d0ab      	beq.n	f594 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    f63c:	e7b2      	b.n	f5a4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    f63e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f642:	ea26 0608 	bic.w	r6, r6, r8
    f646:	ea27 0709 	bic.w	r7, r7, r9
    f64a:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f64e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    f652:	e78e      	b.n	f572 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    f654:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    f658:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    f65c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    f660:	4314      	orrs	r4, r2
    f662:	431d      	orrs	r5, r3
    f664:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f668:	e6b2      	b.n	f3d0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    f66a:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    f66e:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f672:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    f676:	ea80 000a 	eor.w	r0, r0, sl
    f67a:	ea81 010b 	eor.w	r1, r1, fp
    f67e:	4002      	ands	r2, r0
    f680:	400b      	ands	r3, r1
    f682:	ea82 080a 	eor.w	r8, r2, sl
    f686:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f68a:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    f68e:	ea28 000a 	bic.w	r0, r8, sl
    f692:	ea29 010b 	bic.w	r1, r9, fp
    f696:	ea40 0602 	orr.w	r6, r0, r2
    f69a:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f69e:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    f6a2:	e9cd 8900 	strd	r8, r9, [sp]
    f6a6:	ea2a 0808 	bic.w	r8, sl, r8
    f6aa:	ea2b 0909 	bic.w	r9, fp, r9
    f6ae:	ea43 0109 	orr.w	r1, r3, r9
    f6b2:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f6b6:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    f6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f6bc:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f6c0:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f6c4:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    f6c8:	2b00      	cmp	r3, #0
    f6ca:	f000 8083 	beq.w	f7d4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    f6ce:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f6d2:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    f6d6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f6da:	ea03 0907 	and.w	r9, r3, r7
    f6de:	ea29 0101 	bic.w	r1, r9, r1
    f6e2:	ea02 0806 	and.w	r8, r2, r6
    f6e6:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f6e8:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f6ec:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f6ee:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f6f2:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f6f4:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f6f6:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f6fa:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f6fe:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f702:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f704:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f706:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f70a:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f70e:	fa01 f505 	lsl.w	r5, r1, r5
    f712:	fa20 f203 	lsr.w	r2, r0, r3
    f716:	432a      	orrs	r2, r5
    f718:	f1a3 0520 	sub.w	r5, r3, #32
    f71c:	fa21 f505 	lsr.w	r5, r1, r5
    f720:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    f722:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f726:	f8d4 500d 	ldr.w	r5, [r4, #13]
    f72a:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    f72e:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f732:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f736:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    f738:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f73c:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    f73e:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f742:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f744:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f748:	2101      	movs	r1, #1
    f74a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f74c:	f001 fb24 	bl	10d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f750:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f754:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f756:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f758:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f75c:	2501      	movs	r5, #1
    f75e:	321b      	adds	r2, #27
    f760:	4421      	add	r1, r4
    f762:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    f766:	b011      	add	sp, #68	; 0x44
    f768:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f76c:	f001 bbee 	b.w	10f4c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f770:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    f774:	f8d4 701f 	ldr.w	r7, [r4, #31]
    f778:	f8d4 601b 	ldr.w	r6, [r4, #27]
    f77c:	42bb      	cmp	r3, r7
    f77e:	bf08      	it	eq
    f780:	42b2      	cmpeq	r2, r6
    f782:	f47f aea7 	bne.w	f4d4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f786:	f8d4 2013 	ldr.w	r2, [r4, #19]
    f78a:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    f78e:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f792:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    f796:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f798:	ea6f 0903 	mvn.w	r9, r3
    f79c:	ea6f 0802 	mvn.w	r8, r2
    f7a0:	f1c6 0720 	rsb	r7, r6, #32
    f7a4:	fa28 f306 	lsr.w	r3, r8, r6
    f7a8:	fa09 f707 	lsl.w	r7, r9, r7
    f7ac:	f1a6 0220 	sub.w	r2, r6, #32
    f7b0:	fa29 f202 	lsr.w	r2, r9, r2
    f7b4:	433b      	orrs	r3, r7
    f7b6:	4313      	orrs	r3, r2
    f7b8:	9308      	str	r3, [sp, #32]
    f7ba:	fa29 f306 	lsr.w	r3, r9, r6
    f7be:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    f7c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f7c4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    f7c8:	4042      	eors	r2, r0
    f7ca:	404b      	eors	r3, r1
    f7cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f7d0:	950b      	str	r5, [sp, #44]	; 0x2c
    f7d2:	e694      	b.n	f4fe <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f7d4:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    f7d8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    f7dc:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f7e0:	4016      	ands	r6, r2
    f7e2:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    f7e4:	ea40 0206 	orr.w	r2, r0, r6
    f7e8:	ea41 0307 	orr.w	r3, r1, r7
    f7ec:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    f7f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    f7f4:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f7f6:	46b0      	mov	r8, r6
    f7f8:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    f7fa:	bf08      	it	eq
    f7fc:	42b2      	cmpeq	r2, r6
    f7fe:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    f802:	f43f af64 	beq.w	f6ce <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    f806:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    f80a:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    f80e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    f812:	d053      	beq.n	f8bc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    f814:	f8df e0c8 	ldr.w	lr, [pc, #200]	; f8e0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    f818:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f81c:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    f820:	433e      	orrs	r6, r7
    f822:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    f826:	ea29 0701 	bic.w	r7, r9, r1
    f82a:	ea28 0600 	bic.w	r6, r8, r0
    f82e:	ea56 0307 	orrs.w	r3, r6, r7
    f832:	f43f af4c 	beq.w	f6ce <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    f836:	ea48 0200 	orr.w	r2, r8, r0
    f83a:	ea49 0301 	orr.w	r3, r9, r1
    f83e:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f842:	f1bc 0f00 	cmp.w	ip, #0
    f846:	f43f af42 	beq.w	f6ce <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    f84a:	4e24      	ldr	r6, [pc, #144]	; (f8dc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f84c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f84e:	2701      	movs	r7, #1
    f850:	e005      	b.n	f85e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f852:	3501      	adds	r5, #1
    f854:	b2ed      	uxtb	r5, r5
    f856:	4565      	cmp	r5, ip
    f858:	462a      	mov	r2, r5
    f85a:	f6bf af38 	bge.w	f6ce <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    f85e:	ab10      	add	r3, sp, #64	; 0x40
    f860:	442b      	add	r3, r5
    f862:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    f866:	2b00      	cmp	r3, #0
    f868:	d0f3      	beq.n	f852 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f86a:	fa07 f202 	lsl.w	r2, r7, r2
    f86e:	b2d2      	uxtb	r2, r2
    f870:	2103      	movs	r1, #3
    f872:	6830      	ldr	r0, [r6, #0]
    f874:	f001 ff86 	bl	11784 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f878:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f87c:	e7e9      	b.n	f852 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    f87e:	2101      	movs	r1, #1
    f880:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f884:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f886:	f001 fa87 	bl	10d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    f88a:	4914      	ldr	r1, [pc, #80]	; (f8dc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    f88c:	2300      	movs	r3, #0
    f88e:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f890:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    f892:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f896:	2102      	movs	r1, #2
    f898:	2208      	movs	r2, #8
    f89a:	f001 ff73 	bl	11784 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f89e:	4b10      	ldr	r3, [pc, #64]	; (f8e0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    f8a0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    f8a4:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f8a8:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f8ac:	43d2      	mvns	r2, r2
    f8ae:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    f8b0:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f8b2:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f8b6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    f8ba:	e5f0      	b.n	f49e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    f8bc:	4a08      	ldr	r2, [pc, #32]	; (f8e0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f8be:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    f8c2:	ea23 0307 	bic.w	r3, r3, r7
    f8c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    f8ca:	e700      	b.n	f6ce <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f8cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    f8d0:	2200      	movs	r2, #0
    f8d2:	2300      	movs	r3, #0
    f8d4:	e9cd 2300 	strd	r2, r3, [sp]
    f8d8:	e6c9      	b.n	f66e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    f8da:	bf00      	nop
    f8dc:	20001f18 	.word	0x20001f18
    f8e0:	200019d0 	.word	0x200019d0

0000f8e4 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f8e4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f8e6:	b1c1      	cbz	r1, f91a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    f8e8:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f8ec:	b1aa      	cbz	r2, f91a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    f8ee:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    f8f2:	b192      	cbz	r2, f91a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f8f4:	4a09      	ldr	r2, [pc, #36]	; (f91c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    f8f6:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f8f8:	6812      	ldr	r2, [r2, #0]
    f8fa:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f8fe:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f902:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f904:	42a2      	cmp	r2, r4
    f906:	d907      	bls.n	f918 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    f908:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f90a:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    f90e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    f912:	bc30      	pop	{r4, r5}
    f914:	f7ff b9c0 	b.w	ec98 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    f918:	bc30      	pop	{r4, r5}
    f91a:	4770      	bx	lr
    f91c:	20001be0 	.word	0x20001be0

0000f920 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    f920:	4a0e      	ldr	r2, [pc, #56]	; (f95c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    f922:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    f924:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    f928:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    f92c:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    f930:	43f3      	mvns	r3, r6
    f932:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    f934:	2700      	movs	r7, #0
    f936:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    f93a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    f93e:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f942:	bf15      	itete	ne
    f944:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f948:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f94c:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f94e:	400b      	andeq	r3, r1
    f950:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    f954:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    f956:	f7ff bc6f 	b.w	f238 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    f95a:	bf00      	nop
    f95c:	200019d0 	.word	0x200019d0

0000f960 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f960:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    f964:	2b02      	cmp	r3, #2
    f966:	d005      	beq.n	f974 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    f968:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    f96c:	b12b      	cbz	r3, f97a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    f96e:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    f972:	b913      	cbnz	r3, f97a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    f974:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    f978:	4770      	bx	lr
    m_serPort = comInstance;
    f97a:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    f97c:	b109      	cbz	r1, f982 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    f97e:	f7ff b98b 	b.w	ec98 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    f982:	4b04      	ldr	r3, [pc, #16]	; (f994 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f984:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    f988:	681b      	ldr	r3, [r3, #0]
    f98a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    f98e:	4608      	mov	r0, r1
    f990:	4770      	bx	lr
    f992:	bf00      	nop
    f994:	20001be0 	.word	0x20001be0

0000f998 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    f998:	3940      	subs	r1, #64	; 0x40
    f99a:	b28b      	uxth	r3, r1
    f99c:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    f99e:	bf9d      	ittte	ls
    f9a0:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    f9a4:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    f9a8:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    f9aa:	2000      	movhi	r0, #0
    }
}
    f9ac:	4770      	bx	lr
    f9ae:	bf00      	nop

0000f9b0 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    f9b0:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    f9b2:	f7ff fbb5 	bl	f120 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    f9b6:	4b01      	ldr	r3, [pc, #4]	; (f9bc <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    f9b8:	6018      	str	r0, [r3, #0]
    f9ba:	bd08      	pop	{r3, pc}
    f9bc:	20001efc 	.word	0x20001efc

0000f9c0 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    f9c0:	7980      	ldrb	r0, [r0, #6]
    f9c2:	4770      	bx	lr

0000f9c4 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    f9c4:	2009      	movs	r0, #9
    f9c6:	4770      	bx	lr

0000f9c8 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    f9c8:	7980      	ldrb	r0, [r0, #6]
    }
    f9ca:	f1a0 0004 	sub.w	r0, r0, #4
    f9ce:	fab0 f080 	clz	r0, r0
    f9d2:	0940      	lsrs	r0, r0, #5
    f9d4:	4770      	bx	lr
    f9d6:	bf00      	nop

0000f9d8 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    f9d8:	4770      	bx	lr
    f9da:	bf00      	nop

0000f9dc <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    f9dc:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    f9de:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    f9e2:	2201      	movs	r2, #1
    f9e4:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    f9e8:	f1c5 0420 	rsb	r4, r5, #32
    f9ec:	fa22 f404 	lsr.w	r4, r2, r4
    f9f0:	fa02 f303 	lsl.w	r3, r2, r3
    f9f4:	4323      	orrs	r3, r4
    f9f6:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    f9f8:	2602      	movs	r6, #2
    m_filterLength = 3;
    f9fa:	4d07      	ldr	r5, [pc, #28]	; (fa18 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    f9fc:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    f9fe:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fa00:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fa02:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    fa04:	6105      	str	r5, [r0, #16]
    fa06:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fa08:	6082      	str	r2, [r0, #8]
    fa0a:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    fa0c:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    fa0e:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    fa10:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    fa12:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    fa14:	bc70      	pop	{r4, r5, r6}
    fa16:	4770      	bx	lr
    fa18:	00010003 	.word	0x00010003

0000fa1c <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    fa1c:	7983      	ldrb	r3, [r0, #6]
    fa1e:	428b      	cmp	r3, r1
    fa20:	d02f      	beq.n	fa82 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    fa22:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    fa24:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    fa28:	d014      	beq.n	fa54 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    fa2a:	2904      	cmp	r1, #4
    fa2c:	d10b      	bne.n	fa46 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    fa2e:	4b16      	ldr	r3, [pc, #88]	; (fa88 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fa30:	681e      	ldr	r6, [r3, #0]
    fa32:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fa36:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    fa3a:	432b      	orrs	r3, r5
    fa3c:	4322      	orrs	r2, r4
    fa3e:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    fa42:	460b      	mov	r3, r1
            m_mode = newMode;
    fa44:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    fa46:	1ac8      	subs	r0, r1, r3
    fa48:	fab0 f080 	clz	r0, r0
    fa4c:	0940      	lsrs	r0, r0, #5
}
    fa4e:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    fa52:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    fa54:	4b0c      	ldr	r3, [pc, #48]	; (fa88 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fa56:	681e      	ldr	r6, [r3, #0]
    fa58:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fa5c:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fa60:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fa64:	43d2      	mvns	r2, r2
    fa66:	43db      	mvns	r3, r3
    fa68:	4014      	ands	r4, r2
    fa6a:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fa6c:	ea02 0208 	and.w	r2, r2, r8
    fa70:	ea03 0309 	and.w	r3, r3, r9
    fa74:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fa78:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    fa7c:	460b      	mov	r3, r1
            m_mode = newMode;
    fa7e:	7181      	strb	r1, [r0, #6]
            break;
    fa80:	e7e1      	b.n	fa46 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    fa82:	2001      	movs	r0, #1
    fa84:	4770      	bx	lr
    fa86:	bf00      	nop
    fa88:	20001efc 	.word	0x20001efc

0000fa8c <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    fa8c:	7983      	ldrb	r3, [r0, #6]
    fa8e:	2b02      	cmp	r3, #2
    fa90:	d010      	beq.n	fab4 <_ZN9ClearCore7CcioPin5StateEv+0x28>
    fa92:	2b04      	cmp	r3, #4
    fa94:	d10c      	bne.n	fab0 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    fa96:	4b0b      	ldr	r3, [pc, #44]	; (fac4 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fa98:	681b      	ldr	r3, [r3, #0]
    fa9a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fa9e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    faa2:	4002      	ands	r2, r0
    faa4:	400b      	ands	r3, r1
    faa6:	4313      	orrs	r3, r2
    faa8:	bf14      	ite	ne
    faaa:	2001      	movne	r0, #1
    faac:	2000      	moveq	r0, #0
            break;
    faae:	4770      	bx	lr
    switch (m_mode) {
    fab0:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    fab2:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fab4:	4b03      	ldr	r3, [pc, #12]	; (fac4 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fab6:	681b      	ldr	r3, [r3, #0]
    fab8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fabc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    fac0:	e7ef      	b.n	faa2 <_ZN9ClearCore7CcioPin5StateEv+0x16>
    fac2:	bf00      	nop
    fac4:	20001efc 	.word	0x20001efc

0000fac8 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    fac8:	4b06      	ldr	r3, [pc, #24]	; (fae4 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    faca:	681b      	ldr	r3, [r3, #0]
    facc:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fad0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    fad4:	4002      	ands	r2, r0
    fad6:	400b      	ands	r3, r1
    fad8:	4313      	orrs	r3, r2
}
    fada:	bf14      	ite	ne
    fadc:	2001      	movne	r0, #1
    fade:	2000      	moveq	r0, #0
    fae0:	4770      	bx	lr
    fae2:	bf00      	nop
    fae4:	20001efc 	.word	0x20001efc

0000fae8 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    fae8:	7983      	ldrb	r3, [r0, #6]
    faea:	2b04      	cmp	r3, #4
    faec:	d11c      	bne.n	fb28 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    faee:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    faf0:	4b0e      	ldr	r3, [pc, #56]	; (fb2c <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    faf2:	b969      	cbnz	r1, fb10 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    faf4:	6819      	ldr	r1, [r3, #0]
    faf6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fafa:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    fafe:	ea24 0202 	bic.w	r2, r4, r2
    fb02:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    fb06:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fb08:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fb0c:	bc30      	pop	{r4, r5}
    fb0e:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    fb10:	6819      	ldr	r1, [r3, #0]
    fb12:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fb16:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    fb1a:	4322      	orrs	r2, r4
    fb1c:	432b      	orrs	r3, r5
    fb1e:	2001      	movs	r0, #1
    fb20:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fb24:	bc30      	pop	{r4, r5}
    fb26:	4770      	bx	lr
    bool success = false;
    fb28:	2000      	movs	r0, #0
    fb2a:	4770      	bx	lr
    fb2c:	20001efc 	.word	0x20001efc

0000fb30 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    fb30:	b5d0      	push	{r4, r6, r7, lr}
    fb32:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    fb34:	f7fe fca6 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
    fb38:	4b08      	ldr	r3, [pc, #32]	; (fb5c <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    fb3a:	4909      	ldr	r1, [pc, #36]	; (fb60 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    fb3c:	6023      	str	r3, [r4, #0]
    fb3e:	2600      	movs	r6, #0
    fb40:	2300      	movs	r3, #0
    fb42:	2700      	movs	r7, #0
    fb44:	220c      	movs	r2, #12
    fb46:	e9c4 6702 	strd	r6, r7, [r4, #8]
    fb4a:	6121      	str	r1, [r4, #16]
    fb4c:	6162      	str	r2, [r4, #20]
    fb4e:	61a3      	str	r3, [r4, #24]
    fb50:	61e3      	str	r3, [r4, #28]
    fb52:	6223      	str	r3, [r4, #32]
    fb54:	6263      	str	r3, [r4, #36]	; 0x24
    fb56:	4620      	mov	r0, r4
    fb58:	bdd0      	pop	{r4, r6, r7, pc}
    fb5a:	bf00      	nop
    fb5c:	0002338c 	.word	0x0002338c
    fb60:	00010003 	.word	0x00010003

0000fb64 <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    fb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    fb66:	4e14      	ldr	r6, [pc, #80]	; (fbb8 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    fb68:	6834      	ldr	r4, [r6, #0]
    fb6a:	f014 0401 	ands.w	r4, r4, #1
    fb6e:	d002      	beq.n	fb76 <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    fb70:	4b12      	ldr	r3, [pc, #72]	; (fbbc <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    fb72:	6818      	ldr	r0, [r3, #0]
    fb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb76:	2080      	movs	r0, #128	; 0x80
    fb78:	f003 fbea 	bl	13350 <_Znwj>
    fb7c:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    fb7e:	2701      	movs	r7, #1
    fb80:	2240      	movs	r2, #64	; 0x40
    fb82:	602c      	str	r4, [r5, #0]
    fb84:	606c      	str	r4, [r5, #4]
    fb86:	60ac      	str	r4, [r5, #8]
    fb88:	60ec      	str	r4, [r5, #12]
    fb8a:	612c      	str	r4, [r5, #16]
    fb8c:	616c      	str	r4, [r5, #20]
    fb8e:	4621      	mov	r1, r4
    fb90:	61ac      	str	r4, [r5, #24]
    fb92:	61ec      	str	r4, [r5, #28]
    fb94:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    fb96:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    fb98:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    fb9a:	62ec      	str	r4, [r5, #44]	; 0x2c
    fb9c:	632c      	str	r4, [r5, #48]	; 0x30
    fb9e:	636c      	str	r4, [r5, #52]	; 0x34
    fba0:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    fba4:	303c      	adds	r0, #60	; 0x3c
    fba6:	f00e fc71 	bl	1e48c <memset>
    static InputManager *instance = new InputManager();
    fbaa:	4b04      	ldr	r3, [pc, #16]	; (fbbc <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    fbac:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    fbb0:	6037      	str	r7, [r6, #0]
    fbb2:	601d      	str	r5, [r3, #0]
    fbb4:	4628      	mov	r0, r5
}
    fbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbb8:	20001f04 	.word	0x20001f04
    fbbc:	20001f0c 	.word	0x20001f0c

0000fbc0 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    fbc0:	4902      	ldr	r1, [pc, #8]	; (fbcc <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    fbc2:	4a03      	ldr	r2, [pc, #12]	; (fbd0 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    fbc4:	4b03      	ldr	r3, [pc, #12]	; (fbd4 <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    fbc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    fbca:	4770      	bx	lr
    fbcc:	41008020 	.word	0x41008020
    fbd0:	410080a0 	.word	0x410080a0
    fbd4:	41008120 	.word	0x41008120

0000fbd8 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
    fbd8:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    fbda:	b2cc      	uxtb	r4, r1
    fbdc:	2c0f      	cmp	r4, #15
    fbde:	d82e      	bhi.n	fc3e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
    fbe0:	b1b2      	cbz	r2, fc10 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    fbe2:	bb6b      	cbnz	r3, fc40 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    fbe4:	2301      	movs	r3, #1
    fbe6:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    fbea:	f100 0334 	add.w	r3, r0, #52	; 0x34
    fbee:	f3bf 8f5b 	dmb	ish
    fbf2:	e853 2f00 	ldrex	r2, [r3]
    fbf6:	430a      	orrs	r2, r1
    fbf8:	e843 2400 	strex	r4, r2, [r3]
    fbfc:	2c00      	cmp	r4, #0
    fbfe:	d1f8      	bne.n	fbf2 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    fc00:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fc04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fc08:	b1cb      	cbz	r3, fc3e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    fc0a:	4b10      	ldr	r3, [pc, #64]	; (fc4c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fc0c:	6119      	str	r1, [r3, #16]
    fc0e:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    fc10:	2301      	movs	r3, #1
    fc12:	fa03 f101 	lsl.w	r1, r3, r1
    fc16:	43ca      	mvns	r2, r1
    fc18:	f100 0334 	add.w	r3, r0, #52	; 0x34
    fc1c:	f3bf 8f5b 	dmb	ish
    fc20:	e853 4f00 	ldrex	r4, [r3]
    fc24:	4014      	ands	r4, r2
    fc26:	e843 4e00 	strex	lr, r4, [r3]
    fc2a:	f1be 0f00 	cmp.w	lr, #0
    fc2e:	d1f7      	bne.n	fc20 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    fc30:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fc34:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fc38:	b10b      	cbz	r3, fc3e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    fc3a:	4b04      	ldr	r3, [pc, #16]	; (fc4c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fc3c:	60d9      	str	r1, [r3, #12]
    fc3e:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    fc40:	2201      	movs	r2, #1
    fc42:	4b02      	ldr	r3, [pc, #8]	; (fc4c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fc44:	fa02 f101 	lsl.w	r1, r2, r1
    fc48:	6159      	str	r1, [r3, #20]
    fc4a:	e7ce      	b.n	fbea <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    fc4c:	40002800 	.word	0x40002800

0000fc50 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    fc50:	290f      	cmp	r1, #15
    fc52:	dc14      	bgt.n	fc7e <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    fc54:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    fc58:	40cb      	lsrs	r3, r1
    fc5a:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fc5e:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    fc62:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fc64:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    fc68:	d10a      	bne.n	fc80 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    fc6a:	4a0f      	ldr	r2, [pc, #60]	; (fca8 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    fc6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    fc70:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    fc72:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    fc74:	b113      	cbz	r3, fc7c <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    fc76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    fc7a:	4718      	bx	r3
    fc7c:	bd10      	pop	{r4, pc}
    fc7e:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fc80:	43dc      	mvns	r4, r3
    fc82:	f100 0234 	add.w	r2, r0, #52	; 0x34
    fc86:	f3bf 8f5b 	dmb	ish
    fc8a:	e852 ef00 	ldrex	lr, [r2]
    fc8e:	ea0e 0e04 	and.w	lr, lr, r4
    fc92:	e842 ec00 	strex	ip, lr, [r2]
    fc96:	f1bc 0f00 	cmp.w	ip, #0
    fc9a:	d1f6      	bne.n	fc8a <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    fc9c:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    fca0:	4a01      	ldr	r2, [pc, #4]	; (fca8 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    fca2:	60d3      	str	r3, [r2, #12]
    fca4:	e7e1      	b.n	fc6a <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    fca6:	bf00      	nop
    fca8:	40002800 	.word	0x40002800

0000fcac <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fcac:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fcae:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fcb0:	681b      	ldr	r3, [r3, #0]
    fcb2:	60c3      	str	r3, [r0, #12]
    fcb4:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fcb6:	404b      	eors	r3, r1
    fcb8:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fcba:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fcbc:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fcbe:	6881      	ldr	r1, [r0, #8]
    fcc0:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fcc2:	4053      	eors	r3, r2
    fcc4:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fcc6:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fcc8:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fcca:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fccc:	4053      	eors	r3, r2
    fcce:	6203      	str	r3, [r0, #32]
    fcd0:	4770      	bx	lr
    fcd2:	bf00      	nop

0000fcd4 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    fcd4:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    fcd6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fcd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    fcda:	f3bf 8f5b 	dmb	ish
    fcde:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    fce2:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    fce6:	e852 1f00 	ldrex	r1, [r2]
    fcea:	4319      	orrs	r1, r3
    fcec:	e842 1e00 	strex	lr, r1, [r2]
    fcf0:	f1be 0f00 	cmp.w	lr, #0
    fcf4:	d1f7      	bne.n	fce6 <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    fcf6:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    fcfa:	6a41      	ldr	r1, [r0, #36]	; 0x24
    fcfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    fcfe:	f3bf 8f5b 	dmb	ish
    fd02:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    fd06:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    fd0a:	e852 1f00 	ldrex	r1, [r2]
    fd0e:	4319      	orrs	r1, r3
    fd10:	e842 1e00 	strex	lr, r1, [r2]
    fd14:	f1be 0f00 	cmp.w	lr, #0
    fd18:	d1f7      	bne.n	fd0a <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    fd1a:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    fd1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fd20:	6283      	str	r3, [r0, #40]	; 0x28
    fd22:	f85d fb04 	ldr.w	pc, [sp], #4
    fd26:	bf00      	nop

0000fd28 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    fd28:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    fd2a:	f7ff ff1b 	bl	fb64 <_ZN9ClearCore12InputManager8InstanceEv>
    fd2e:	4b01      	ldr	r3, [pc, #4]	; (fd34 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    fd30:	6018      	str	r0, [r3, #0]
    fd32:	bd08      	pop	{r3, pc}
    fd34:	20001f08 	.word	0x20001f08

0000fd38 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fd38:	b530      	push	{r4, r5, lr}
    fd3a:	b083      	sub	sp, #12
    fd3c:	9d06      	ldr	r5, [sp, #24]
    fd3e:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
    fd42:	9500      	str	r5, [sp, #0]
    fd44:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fd46:	4604      	mov	r4, r0
      m_errorCode(0) {
    fd48:	2500      	movs	r5, #0
    fd4a:	f000 ffbb 	bl	10cc4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
    fd4e:	4b09      	ldr	r3, [pc, #36]	; (fd74 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
    fd50:	6023      	str	r3, [r4, #0]
    fd52:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
    fd56:	4620      	mov	r0, r4
    fd58:	2101      	movs	r1, #1
    fd5a:	f001 f811 	bl	10d80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
    fd5e:	462a      	mov	r2, r5
    fd60:	4629      	mov	r1, r5
    fd62:	4620      	mov	r0, r4
    fd64:	f001 f852 	bl	10e0c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
    fd68:	4620      	mov	r0, r4
    fd6a:	f000 ff9f 	bl	10cac <_ZN9ClearCore10SerialBase8PortOpenEv>
}
    fd6e:	4620      	mov	r0, r4
    fd70:	b003      	add	sp, #12
    fd72:	bd30      	pop	{r4, r5, pc}
    fd74:	00022cd0 	.word	0x00022cd0

0000fd78 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
    fd78:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    fd7c:	4770      	bx	lr
    fd7e:	bf00      	nop

0000fd80 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
    fd80:	2300      	movs	r3, #0
    m_outTail = 0;
    fd82:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
    fd86:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
    fd8a:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    fd8e:	4770      	bx	lr

0000fd90 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd90:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
    fd92:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd94:	2104      	movs	r1, #4
    m_inTail = 0;
    fd96:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
    fd9a:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
    fd9c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fda0:	7591      	strb	r1, [r2, #22]
    fda2:	4770      	bx	lr

0000fda4 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
    fda4:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
    fda8:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    fdac:	4291      	cmp	r1, r2
    fdae:	d012      	beq.n	fdd6 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
    fdb0:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
    fdb2:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
    fdb6:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fdba:	6904      	ldr	r4, [r0, #16]
    fdbc:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
    fdbe:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
    fdc0:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fdc2:	2504      	movs	r5, #4
    fdc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
    fdc8:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
    fdcc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fdd0:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
    fdd2:	bc30      	pop	{r4, r5}
    fdd4:	4770      	bx	lr
        return SerialBase::EOB;
    fdd6:	f04f 30ff 	mov.w	r0, #4294967295
    fdda:	4770      	bx	lr

0000fddc <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
    fddc:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    fde0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
    fde4:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
    fde6:	bf1d      	ittte	ne
    fde8:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
    fdec:	3318      	addne	r3, #24
    fdee:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
    fdf2:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
    fdf6:	4770      	bx	lr

0000fdf8 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
    fdf8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    fdfc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
    fe00:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
    fe02:	bf48      	it	mi
    fe04:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
    fe06:	4770      	bx	lr

0000fe08 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
    fe08:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    fe0c:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
    fe10:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
    fe12:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
    fe14:	bf48      	it	mi
    fe16:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
    fe18:	4770      	bx	lr
    fe1a:	bf00      	nop

0000fe1c <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
    fe1c:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
    fe1e:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    fe22:	b1b8      	cbz	r0, fe54 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
    fe24:	79d3      	ldrb	r3, [r2, #7]
    fe26:	2b01      	cmp	r3, #1
    fe28:	d015      	beq.n	fe56 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
    fe2a:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
    fe2c:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
    fe30:	3401      	adds	r4, #1
    fe32:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
    fe36:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
    fe3a:	429c      	cmp	r4, r3
    fe3c:	d0fb      	beq.n	fe36 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
    fe3e:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fe42:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
    fe44:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fe46:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
    fe48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
    fe4c:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fe50:	75ae      	strb	r6, [r5, #22]
}
    fe52:	bc70      	pop	{r4, r5, r6}
    fe54:	4770      	bx	lr
        return false;
    fe56:	2000      	movs	r0, #0
    fe58:	4770      	bx	lr
    fe5a:	bf00      	nop

0000fe5c <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
    fe5c:	79c3      	ldrb	r3, [r0, #7]
    fe5e:	b113      	cbz	r3, fe66 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
    fe60:	2b01      	cmp	r3, #1
    fe62:	d00e      	beq.n	fe82 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
    fe64:	4770      	bx	lr
        while (m_outHead != m_outTail) {
    fe66:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
    fe6a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    fe6e:	429a      	cmp	r2, r3
    fe70:	d1f9      	bne.n	fe66 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
    fe72:	6902      	ldr	r2, [r0, #16]
    fe74:	7e13      	ldrb	r3, [r2, #24]
    fe76:	07d8      	lsls	r0, r3, #31
    fe78:	d4f4      	bmi.n	fe64 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
    fe7a:	7e13      	ldrb	r3, [r2, #24]
    fe7c:	0799      	lsls	r1, r3, #30
    fe7e:	d5fc      	bpl.n	fe7a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
    fe80:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    fe82:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    fe86:	2b07      	cmp	r3, #7
    fe88:	d0ec      	beq.n	fe64 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
    fe8a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
    fe8e:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
    fe90:	b510      	push	{r4, lr}
    fe92:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    fe94:	d005      	beq.n	fea2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
    fe96:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    fe9a:	b113      	cbz	r3, fea2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    fe9c:	79e3      	ldrb	r3, [r4, #7]
    fe9e:	2b01      	cmp	r3, #1
    fea0:	d000      	beq.n	fea4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
    fea2:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
    fea4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    fea8:	f7fe feda 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    feac:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
    feae:	079b      	lsls	r3, r3, #30
    feb0:	d4f1      	bmi.n	fe96 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
    feb2:	e7f6      	b.n	fea2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

0000feb4 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    feb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    feb8:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
    feba:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    febc:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    febe:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fec0:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fec4:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fec6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    feca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    fece:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fed2:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fed4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    fed8:	f36f 0100 	bfc	r1, #0, #1
    fedc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    fee0:	6813      	ldr	r3, [r2, #0]
    fee2:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    fee4:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fee6:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    feea:	d503      	bpl.n	fef4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
    feec:	6813      	ldr	r3, [r2, #0]
    feee:	f36f 0341 	bfc	r3, #1, #1
    fef2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    fef4:	69d3      	ldr	r3, [r2, #28]
    fef6:	f013 0302 	ands.w	r3, r3, #2
    fefa:	d1fb      	bne.n	fef4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
    fefc:	6822      	ldr	r2, [r4, #0]
    fefe:	483a      	ldr	r0, [pc, #232]	; (ffe8 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
    ff00:	6811      	ldr	r1, [r2, #0]
    ff02:	4281      	cmp	r1, r0
    ff04:	d165      	bne.n	ffd2 <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
    ff06:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
    ff0a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
    ff0e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
    ff12:	6853      	ldr	r3, [r2, #4]
    ff14:	4a35      	ldr	r2, [pc, #212]	; (ffec <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
    ff16:	4293      	cmp	r3, r2
    ff18:	d162      	bne.n	ffe0 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff1a:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
    ff1c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff1e:	2204      	movs	r2, #4
    m_inTail = 0;
    ff20:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
    ff24:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
    ff26:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff2a:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
    ff2c:	79e0      	ldrb	r0, [r4, #7]
    ff2e:	2801      	cmp	r0, #1
    ff30:	d124      	bne.n	ff7c <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
    ff32:	4b2f      	ldr	r3, [pc, #188]	; (fff0 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
    ff34:	443b      	add	r3, r7
    ff36:	fbb3 f3f7 	udiv	r3, r3, r7
    ff3a:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
    ff3c:	2bff      	cmp	r3, #255	; 0xff
    ff3e:	bf92      	itee	ls
    ff40:	b2db      	uxtbls	r3, r3
    ff42:	23ff      	movhi	r3, #255	; 0xff
                success = false;
    ff44:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
    ff46:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
    ff48:	b1b6      	cbz	r6, ff78 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
    ff4a:	682b      	ldr	r3, [r5, #0]
    ff4c:	f043 0302 	orr.w	r3, r3, #2
    ff50:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    ff52:	69eb      	ldr	r3, [r5, #28]
    ff54:	079b      	lsls	r3, r3, #30
    ff56:	d4fc      	bmi.n	ff52 <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff58:	6a22      	ldr	r2, [r4, #32]
    ff5a:	f992 1001 	ldrsb.w	r1, [r2, #1]
    ff5e:	7893      	ldrb	r3, [r2, #2]
    ff60:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    ff64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ff68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ff6c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ff70:	f042 0201 	orr.w	r2, r2, #1
    ff74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
    ff78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
    ff7c:	4638      	mov	r0, r7
    ff7e:	f00b fd3f 	bl	1ba00 <__aeabi_ui2d>
    ff82:	2200      	movs	r2, #0
    ff84:	4b1b      	ldr	r3, [pc, #108]	; (fff4 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
    ff86:	f00b fdb1 	bl	1baec <__aeabi_dmul>
    ff8a:	4b1b      	ldr	r3, [pc, #108]	; (fff8 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
    ff8c:	4680      	mov	r8, r0
    ff8e:	6818      	ldr	r0, [r3, #0]
    ff90:	4689      	mov	r9, r1
    ff92:	f00b fd35 	bl	1ba00 <__aeabi_ui2d>
    ff96:	4602      	mov	r2, r0
    ff98:	460b      	mov	r3, r1
    ff9a:	4640      	mov	r0, r8
    ff9c:	4649      	mov	r1, r9
    ff9e:	f00b fecf 	bl	1bd40 <__aeabi_ddiv>
    ffa2:	4602      	mov	r2, r0
    ffa4:	460b      	mov	r3, r1
    ffa6:	2000      	movs	r0, #0
    ffa8:	4914      	ldr	r1, [pc, #80]	; (fffc <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
    ffaa:	f00b fbeb 	bl	1b784 <__aeabi_dsub>
    ffae:	2200      	movs	r2, #0
    ffb0:	4b13      	ldr	r3, [pc, #76]	; (10000 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
    ffb2:	f00b fd9b 	bl	1baec <__aeabi_dmul>
    ffb6:	f00c f87b 	bl	1c0b0 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
    ffba:	f00b fd43 	bl	1ba44 <__aeabi_f2d>
    ffbe:	2200      	movs	r2, #0
    ffc0:	4b10      	ldr	r3, [pc, #64]	; (10004 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
    ffc2:	f00b fbe1 	bl	1b788 <__adddf3>
    ffc6:	f00c f853 	bl	1c070 <__aeabi_d2uiz>
    ffca:	b280      	uxth	r0, r0
    ffcc:	81a8      	strh	r0, [r5, #12]
    bool success = true;
    ffce:	2001      	movs	r0, #1
            break;
    ffd0:	e7ba      	b.n	ff48 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
    ffd2:	4620      	mov	r0, r4
    ffd4:	4788      	blx	r1
    ffd6:	6822      	ldr	r2, [r4, #0]
    FlushInput();
    ffd8:	6853      	ldr	r3, [r2, #4]
    ffda:	4a04      	ldr	r2, [pc, #16]	; (ffec <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
    ffdc:	4293      	cmp	r3, r2
    ffde:	d09c      	beq.n	ff1a <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
    ffe0:	4620      	mov	r0, r4
    ffe2:	4798      	blx	r3
    ffe4:	6925      	ldr	r5, [r4, #16]
    ffe6:	e7a1      	b.n	ff2c <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
    ffe8:	0000fd81 	.word	0x0000fd81
    ffec:	0000fd91 	.word	0x0000fd91
    fff0:	004c4b3f 	.word	0x004c4b3f
    fff4:	40300000 	.word	0x40300000
    fff8:	200000e0 	.word	0x200000e0
    fffc:	3ff00000 	.word	0x3ff00000
   10000:	40f00000 	.word	0x40f00000
   10004:	3fe00000 	.word	0x3fe00000

00010008 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   10008:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1000c:	b903      	cbnz	r3, 10010 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   1000e:	4770      	bx	lr
void SerialBase::PortClose() {
   10010:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   10012:	6805      	ldr	r5, [r0, #0]
   10014:	4a3e      	ldr	r2, [pc, #248]	; (10110 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   10016:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   10018:	4293      	cmp	r3, r2
   1001a:	4604      	mov	r4, r0
   1001c:	d157      	bne.n	100ce <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   1001e:	79c3      	ldrb	r3, [r0, #7]
   10020:	2b00      	cmp	r3, #0
   10022:	d03f      	beq.n	100a4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   10024:	2b01      	cmp	r3, #1
   10026:	d056      	beq.n	100d6 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   10028:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1002a:	69a0      	ldr	r0, [r4, #24]
   1002c:	4939      	ldr	r1, [pc, #228]	; (10114 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   1002e:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10032:	7886      	ldrb	r6, [r0, #2]
   10034:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10038:	2001      	movs	r0, #1
   1003a:	40b0      	lsls	r0, r6
   1003c:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1003e:	6a20      	ldr	r0, [r4, #32]
   10040:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10044:	7880      	ldrb	r0, [r0, #2]
   10046:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   1004a:	4403      	add	r3, r0
   1004c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10050:	f36f 0100 	bfc	r1, #0, #1
   10054:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10058:	6813      	ldr	r3, [r2, #0]
   1005a:	079b      	lsls	r3, r3, #30
   1005c:	d503      	bpl.n	10066 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1005e:	6813      	ldr	r3, [r2, #0]
   10060:	f36f 0341 	bfc	r3, #1, #1
   10064:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10066:	69d3      	ldr	r3, [r2, #28]
   10068:	f013 0302 	ands.w	r3, r3, #2
   1006c:	d1fb      	bne.n	10066 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   1006e:	682a      	ldr	r2, [r5, #0]
   10070:	4929      	ldr	r1, [pc, #164]	; (10118 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   10072:	428a      	cmp	r2, r1
   10074:	d124      	bne.n	100c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   10076:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1007a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1007e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10082:	686b      	ldr	r3, [r5, #4]
   10084:	4a25      	ldr	r2, [pc, #148]	; (1011c <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   10086:	4293      	cmp	r3, r2
   10088:	d11e      	bne.n	100c8 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1008a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1008c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1008e:	2104      	movs	r1, #4
    m_inTail = 0;
   10090:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10094:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10096:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1009a:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   1009c:	2300      	movs	r3, #0
   1009e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   100a2:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   100a4:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   100a8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   100ac:	429a      	cmp	r2, r3
   100ae:	d1f9      	bne.n	100a4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   100b0:	6922      	ldr	r2, [r4, #16]
   100b2:	7e13      	ldrb	r3, [r2, #24]
   100b4:	07d8      	lsls	r0, r3, #31
   100b6:	d4b8      	bmi.n	1002a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   100b8:	7e13      	ldrb	r3, [r2, #24]
   100ba:	0799      	lsls	r1, r3, #30
   100bc:	d5fc      	bpl.n	100b8 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   100be:	e7b4      	b.n	1002a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   100c0:	4620      	mov	r0, r4
   100c2:	4790      	blx	r2
   100c4:	6825      	ldr	r5, [r4, #0]
   100c6:	e7dc      	b.n	10082 <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   100c8:	4620      	mov	r0, r4
   100ca:	4798      	blx	r3
   100cc:	e7e6      	b.n	1009c <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   100ce:	4798      	blx	r3
   100d0:	6922      	ldr	r2, [r4, #16]
   100d2:	6825      	ldr	r5, [r4, #0]
   100d4:	e7a9      	b.n	1002a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   100d6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   100da:	2807      	cmp	r0, #7
   100dc:	d0a4      	beq.n	10028 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   100de:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   100e2:	2b07      	cmp	r3, #7
   100e4:	d0a0      	beq.n	10028 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   100e6:	f7fe fdbb 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   100ea:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   100ec:	079a      	lsls	r2, r3, #30
   100ee:	d5ef      	bpl.n	100d0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   100f0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   100f4:	2b00      	cmp	r3, #0
   100f6:	d0eb      	beq.n	100d0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   100f8:	79e3      	ldrb	r3, [r4, #7]
   100fa:	2b01      	cmp	r3, #1
   100fc:	d1e8      	bne.n	100d0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   100fe:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10102:	f7fe fdad 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10106:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10108:	079a      	lsls	r2, r3, #30
   1010a:	d4f1      	bmi.n	100f0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   1010c:	e7e0      	b.n	100d0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   1010e:	bf00      	nop
   10110:	0000fe5d 	.word	0x0000fe5d
   10114:	41008000 	.word	0x41008000
   10118:	0000fd81 	.word	0x0000fd81
   1011c:	0000fd91 	.word	0x0000fd91

00010120 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   10120:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   10122:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   10124:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   10126:	2b01      	cmp	r3, #1
   10128:	d101      	bne.n	1012e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   1012a:	2000      	movs	r0, #0
   1012c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1012e:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10130:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10132:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10136:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10138:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1013a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1013e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10142:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10146:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1014a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1014e:	f36f 0100 	bfc	r1, #0, #1
   10152:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10156:	6813      	ldr	r3, [r2, #0]
   10158:	0799      	lsls	r1, r3, #30
   1015a:	d503      	bpl.n	10164 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1015c:	6813      	ldr	r3, [r2, #0]
   1015e:	f36f 0341 	bfc	r3, #1, #1
   10162:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10164:	69d3      	ldr	r3, [r2, #28]
   10166:	f013 0302 	ands.w	r3, r3, #2
   1016a:	d1fb      	bne.n	10164 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   1016c:	6802      	ldr	r2, [r0, #0]
   1016e:	4604      	mov	r4, r0
   10170:	6811      	ldr	r1, [r2, #0]
   10172:	4825      	ldr	r0, [pc, #148]	; (10208 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   10174:	4281      	cmp	r1, r0
   10176:	d142      	bne.n	101fe <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10178:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1017c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10180:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10184:	6853      	ldr	r3, [r2, #4]
   10186:	4a21      	ldr	r2, [pc, #132]	; (1020c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10188:	4293      	cmp	r3, r2
   1018a:	d134      	bne.n	101f6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1018c:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1018e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10190:	2104      	movs	r1, #4
    m_inTail = 0;
   10192:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10196:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10198:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1019c:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   1019e:	7923      	ldrb	r3, [r4, #4]
   101a0:	2b02      	cmp	r3, #2
   101a2:	d023      	beq.n	101ec <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   101a4:	6811      	ldr	r1, [r2, #0]
   101a6:	2001      	movs	r0, #1
   101a8:	f360 611b 	bfi	r1, r0, #24, #4
   101ac:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   101ae:	6851      	ldr	r1, [r2, #4]
   101b0:	f363 314d 	bfi	r1, r3, #13, #1
   101b4:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   101b6:	b1bd      	cbz	r5, 101e8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   101b8:	6813      	ldr	r3, [r2, #0]
   101ba:	f043 0302 	orr.w	r3, r3, #2
   101be:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   101c0:	69d3      	ldr	r3, [r2, #28]
   101c2:	079b      	lsls	r3, r3, #30
   101c4:	d4fc      	bmi.n	101c0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101c6:	6a22      	ldr	r2, [r4, #32]
   101c8:	f992 1001 	ldrsb.w	r1, [r2, #1]
   101cc:	7893      	ldrb	r3, [r2, #2]
   101ce:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   101d2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   101d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   101da:	2001      	movs	r0, #1
   101dc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   101e0:	4302      	orrs	r2, r0
   101e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   101e6:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   101e8:	2001      	movs	r0, #1
}
   101ea:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   101ec:	6813      	ldr	r3, [r2, #0]
   101ee:	f36f 631b 	bfc	r3, #24, #4
   101f2:	6013      	str	r3, [r2, #0]
   101f4:	e7df      	b.n	101b6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   101f6:	4620      	mov	r0, r4
   101f8:	4798      	blx	r3
   101fa:	6922      	ldr	r2, [r4, #16]
   101fc:	e7cf      	b.n	1019e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   101fe:	4620      	mov	r0, r4
   10200:	4788      	blx	r1
   10202:	6822      	ldr	r2, [r4, #0]
   10204:	e7be      	b.n	10184 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   10206:	bf00      	nop
   10208:	0000fd81 	.word	0x0000fd81
   1020c:	0000fd91 	.word	0x0000fd91

00010210 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   10210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   10212:	1f4b      	subs	r3, r1, #5
   10214:	2b04      	cmp	r3, #4
   10216:	d85d      	bhi.n	102d4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10218:	79c3      	ldrb	r3, [r0, #7]
   1021a:	2b01      	cmp	r3, #1
   1021c:	d056      	beq.n	102cc <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1021e:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   10220:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10222:	f992 4001 	ldrsb.w	r4, [r2, #1]
   10226:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10228:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1022a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1022e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10232:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10236:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10238:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   1023c:	f36f 0400 	bfc	r4, #0, #1
   10240:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10244:	6813      	ldr	r3, [r2, #0]
   10246:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10248:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1024c:	d503      	bpl.n	10256 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1024e:	6813      	ldr	r3, [r2, #0]
   10250:	f36f 0341 	bfc	r3, #1, #1
   10254:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10256:	69d3      	ldr	r3, [r2, #28]
   10258:	f013 0302 	ands.w	r3, r3, #2
   1025c:	d1fb      	bne.n	10256 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   1025e:	6802      	ldr	r2, [r0, #0]
   10260:	460f      	mov	r7, r1
   10262:	6816      	ldr	r6, [r2, #0]
   10264:	4921      	ldr	r1, [pc, #132]	; (102ec <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   10266:	428e      	cmp	r6, r1
   10268:	4604      	mov	r4, r0
   1026a:	d13b      	bne.n	102e4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   1026c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10270:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10274:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10278:	6853      	ldr	r3, [r2, #4]
   1027a:	4a1d      	ldr	r2, [pc, #116]	; (102f0 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   1027c:	4293      	cmp	r3, r2
   1027e:	d12d      	bne.n	102dc <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10280:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10282:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10284:	2104      	movs	r1, #4
    m_inTail = 0;
   10286:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1028a:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   1028c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10290:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   10292:	6853      	ldr	r3, [r2, #4]
   10294:	f367 0302 	bfi	r3, r7, #0, #3
   10298:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   1029a:	b1ed      	cbz	r5, 102d8 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1029c:	6813      	ldr	r3, [r2, #0]
   1029e:	f043 0302 	orr.w	r3, r3, #2
   102a2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   102a4:	69d3      	ldr	r3, [r2, #28]
   102a6:	079b      	lsls	r3, r3, #30
   102a8:	d4fc      	bmi.n	102a4 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102aa:	6a22      	ldr	r2, [r4, #32]
   102ac:	f992 1001 	ldrsb.w	r1, [r2, #1]
   102b0:	7893      	ldrb	r3, [r2, #2]
   102b2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   102b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   102ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   102be:	2001      	movs	r0, #1
   102c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   102c4:	4302      	orrs	r2, r0
   102c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   102ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   102cc:	f1a1 0308 	sub.w	r3, r1, #8
   102d0:	2b01      	cmp	r3, #1
   102d2:	d9a4      	bls.n	1021e <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   102d4:	2000      	movs	r0, #0
   102d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   102d8:	2001      	movs	r0, #1
}
   102da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   102dc:	4620      	mov	r0, r4
   102de:	4798      	blx	r3
   102e0:	6922      	ldr	r2, [r4, #16]
   102e2:	e7d6      	b.n	10292 <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   102e4:	47b0      	blx	r6
   102e6:	6822      	ldr	r2, [r4, #0]
   102e8:	e7c6      	b.n	10278 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   102ea:	bf00      	nop
   102ec:	0000fd81 	.word	0x0000fd81
   102f0:	0000fd91 	.word	0x0000fd91

000102f4 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   102f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   102f6:	1e4c      	subs	r4, r1, #1
   102f8:	b2e4      	uxtb	r4, r4
   102fa:	2c01      	cmp	r4, #1
   102fc:	d901      	bls.n	10302 <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   102fe:	2000      	movs	r0, #0
}
   10300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   10302:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   10304:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   10306:	b10d      	cbz	r5, 1030c <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   10308:	2001      	movs	r0, #1
   1030a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1030c:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1030e:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10310:	f991 7001 	ldrsb.w	r7, [r1, #1]
   10314:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10316:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10318:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   1031c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10320:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10324:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10328:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1032c:	f365 0100 	bfi	r1, r5, #0, #1
   10330:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10334:	6813      	ldr	r3, [r2, #0]
   10336:	0799      	lsls	r1, r3, #30
   10338:	d503      	bpl.n	10342 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1033a:	6813      	ldr	r3, [r2, #0]
   1033c:	f365 0341 	bfi	r3, r5, #1, #1
   10340:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10342:	69d3      	ldr	r3, [r2, #28]
   10344:	f013 0302 	ands.w	r3, r3, #2
   10348:	d1fb      	bne.n	10342 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   1034a:	6802      	ldr	r2, [r0, #0]
   1034c:	4605      	mov	r5, r0
   1034e:	6811      	ldr	r1, [r2, #0]
   10350:	481d      	ldr	r0, [pc, #116]	; (103c8 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   10352:	4281      	cmp	r1, r0
   10354:	d130      	bne.n	103b8 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   10356:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1035a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   1035e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   10362:	6853      	ldr	r3, [r2, #4]
   10364:	4a19      	ldr	r2, [pc, #100]	; (103cc <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   10366:	4293      	cmp	r3, r2
   10368:	d12a      	bne.n	103c0 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1036a:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   1036c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1036e:	2104      	movs	r1, #4
    m_inTail = 0;
   10370:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   10374:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   10376:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1037a:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   1037c:	6853      	ldr	r3, [r2, #4]
   1037e:	f364 1386 	bfi	r3, r4, #6, #1
   10382:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10384:	2e00      	cmp	r6, #0
   10386:	d0bf      	beq.n	10308 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10388:	6813      	ldr	r3, [r2, #0]
   1038a:	f043 0302 	orr.w	r3, r3, #2
   1038e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10390:	69d3      	ldr	r3, [r2, #28]
   10392:	079b      	lsls	r3, r3, #30
   10394:	d4fc      	bmi.n	10390 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10396:	6a2a      	ldr	r2, [r5, #32]
   10398:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1039c:	7893      	ldrb	r3, [r2, #2]
   1039e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   103a2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   103a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   103aa:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   103b0:	4302      	orrs	r2, r0
   103b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   103b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   103b8:	4628      	mov	r0, r5
   103ba:	4788      	blx	r1
   103bc:	682a      	ldr	r2, [r5, #0]
   103be:	e7d0      	b.n	10362 <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   103c0:	4628      	mov	r0, r5
   103c2:	4798      	blx	r3
   103c4:	692a      	ldr	r2, [r5, #16]
   103c6:	e7d9      	b.n	1037c <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   103c8:	0000fd81 	.word	0x0000fd81
   103cc:	0000fd91 	.word	0x0000fd91

000103d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   103d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   103d4:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   103d6:	682b      	ldr	r3, [r5, #0]
   103d8:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   103dc:	b089      	sub	sp, #36	; 0x24
   103de:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   103e0:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   103e2:	69eb      	ldr	r3, [r5, #28]
   103e4:	f013 0301 	ands.w	r3, r3, #1
   103e8:	d1fb      	bne.n	103e2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   103ea:	6822      	ldr	r2, [r4, #0]
   103ec:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 104c4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   103f0:	6811      	ldr	r1, [r2, #0]
   103f2:	4541      	cmp	r1, r8
   103f4:	d153      	bne.n	1049e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   103f6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   103fa:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   103fe:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10402:	6853      	ldr	r3, [r2, #4]
   10404:	4a28      	ldr	r2, [pc, #160]	; (104a8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   10406:	4293      	cmp	r3, r2
   10408:	d122      	bne.n	10450 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   1040a:	2200      	movs	r2, #0
    m_inTail = 0;
   1040c:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10410:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10412:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10414:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   10418:	4a24      	ldr	r2, [pc, #144]	; (104ac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1041a:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   1041c:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1041e:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   10420:	d01c      	beq.n	1045c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   10422:	4a23      	ldr	r2, [pc, #140]	; (104b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   10424:	4293      	cmp	r3, r2
   10426:	f000 8310 	beq.w	10a4a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   1042a:	4a22      	ldr	r2, [pc, #136]	; (104b4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   1042c:	4293      	cmp	r3, r2
   1042e:	f000 8341 	beq.w	10ab4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   10432:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   10436:	f000 839a 	beq.w	10b6e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   1043a:	4a1f      	ldr	r2, [pc, #124]	; (104b8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   1043c:	4293      	cmp	r3, r2
   1043e:	d043      	beq.n	104c8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   10440:	4a1e      	ldr	r2, [pc, #120]	; (104bc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   10442:	4293      	cmp	r3, r2
   10444:	f000 8372 	beq.w	10b2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   10448:	2000      	movs	r0, #0
}
   1044a:	b009      	add	sp, #36	; 0x24
   1044c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   10450:	4620      	mov	r0, r4
   10452:	4798      	blx	r3
   10454:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   10456:	4a15      	ldr	r2, [pc, #84]	; (104ac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   10458:	4293      	cmp	r3, r2
   1045a:	d1e2      	bne.n	10422 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1045c:	2203      	movs	r2, #3
   1045e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10462:	4a17      	ldr	r2, [pc, #92]	; (104c0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   10464:	9207      	str	r2, [sp, #28]
   10466:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   1046a:	9206      	str	r2, [sp, #24]
   1046c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10470:	9202      	str	r2, [sp, #8]
   10472:	2231      	movs	r2, #49	; 0x31
   10474:	9205      	str	r2, [sp, #20]
   10476:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1047a:	9201      	str	r2, [sp, #4]
   1047c:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1047e:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10480:	2601      	movs	r6, #1
   10482:	f04f 092e 	mov.w	r9, #46	; 0x2e
   10486:	9204      	str	r2, [sp, #16]
   10488:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1048c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10490:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   10492:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10496:	f04f 0a07 	mov.w	sl, #7
   1049a:	9200      	str	r2, [sp, #0]
   1049c:	e02f      	b.n	104fe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   1049e:	4620      	mov	r0, r4
   104a0:	4788      	blx	r1
   104a2:	6822      	ldr	r2, [r4, #0]
   104a4:	e7ad      	b.n	10402 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   104a6:	bf00      	nop
   104a8:	0000fd91 	.word	0x0000fd91
   104ac:	40003000 	.word	0x40003000
   104b0:	41012000 	.word	0x41012000
   104b4:	41014000 	.word	0x41014000
   104b8:	43000400 	.word	0x43000400
   104bc:	43000c00 	.word	0x43000c00
   104c0:	00200500 	.word	0x00200500
   104c4:	0000fd81 	.word	0x0000fd81
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   104c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   104cc:	9207      	str	r2, [sp, #28]
   104ce:	9206      	str	r2, [sp, #24]
   104d0:	2220      	movs	r2, #32
   104d2:	9202      	str	r2, [sp, #8]
   104d4:	2245      	movs	r2, #69	; 0x45
   104d6:	9205      	str	r2, [sp, #20]
   104d8:	2210      	movs	r2, #16
   104da:	9201      	str	r2, [sp, #4]
   104dc:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   104de:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   104e0:	2602      	movs	r6, #2
   104e2:	f04f 0942 	mov.w	r9, #66	; 0x42
   104e6:	9204      	str	r2, [sp, #16]
   104e8:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   104ea:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   104ee:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   104f2:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   104f4:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   104f8:	f04f 0a23 	mov.w	sl, #35	; 0x23
   104fc:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   104fe:	6a21      	ldr	r1, [r4, #32]
   10500:	f991 2001 	ldrsb.w	r2, [r1, #1]
   10504:	f891 b002 	ldrb.w	fp, [r1, #2]
   10508:	01d2      	lsls	r2, r2, #7
   1050a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   1050e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10512:	f04f 0e01 	mov.w	lr, #1
   10516:	fa0e fc0b 	lsl.w	ip, lr, fp
   1051a:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   1051e:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   10522:	f894 c007 	ldrb.w	ip, [r4, #7]
   10526:	45f4      	cmp	ip, lr
   10528:	f040 819d 	bne.w	10866 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1052c:	4dc4      	ldr	r5, [pc, #784]	; (10840 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   1052e:	4ac5      	ldr	r2, [pc, #788]	; (10844 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10530:	f107 0e20 	add.w	lr, r7, #32
   10534:	3620      	adds	r6, #32
   10536:	9f00      	ldr	r7, [sp, #0]
   10538:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   1053c:	9f01      	ldr	r7, [sp, #4]
   1053e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10542:	9f02      	ldr	r7, [sp, #8]
   10544:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10548:	f10a 0e20 	add.w	lr, sl, #32
   1054c:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10550:	f36f 1586 	bfc	r5, #6, #1
   10554:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10558:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   1055c:	066d      	lsls	r5, r5, #25
   1055e:	d4fb      	bmi.n	10558 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   10560:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10564:	4eb7      	ldr	r6, [pc, #732]	; (10844 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10566:	f04f 0c07 	mov.w	ip, #7
   1056a:	f36c 0503 	bfi	r5, ip, #0, #4
   1056e:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10572:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10576:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1057a:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   1057e:	6875      	ldr	r5, [r6, #4]
   10580:	f015 051c 	ands.w	r5, r5, #28
   10584:	d1fb      	bne.n	1057e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   10586:	681a      	ldr	r2, [r3, #0]
   10588:	2603      	movs	r6, #3
   1058a:	f366 0284 	bfi	r2, r6, #2, #3
   1058e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10590:	681a      	ldr	r2, [r3, #0]
   10592:	7a26      	ldrb	r6, [r4, #8]
   10594:	f366 725d 	bfi	r2, r6, #29, #1
   10598:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   1059a:	681a      	ldr	r2, [r3, #0]
   1059c:	7a66      	ldrb	r6, [r4, #9]
   1059e:	f366 721c 	bfi	r2, r6, #28, #1
   105a2:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   105a4:	681a      	ldr	r2, [r3, #0]
   105a6:	f365 621b 	bfi	r2, r5, #24, #4
   105aa:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   105ac:	6962      	ldr	r2, [r4, #20]
   105ae:	681e      	ldr	r6, [r3, #0]
   105b0:	7a52      	ldrb	r2, [r2, #9]
   105b2:	f362 5615 	bfi	r6, r2, #20, #2
   105b6:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   105b8:	7a49      	ldrb	r1, [r1, #9]
   105ba:	681a      	ldr	r2, [r3, #0]
   105bc:	2900      	cmp	r1, #0
   105be:	bf0c      	ite	eq
   105c0:	2100      	moveq	r1, #0
   105c2:	2102      	movne	r1, #2
   105c4:	f361 4211 	bfi	r2, r1, #16, #2
   105c8:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   105ca:	685a      	ldr	r2, [r3, #4]
   105cc:	79a1      	ldrb	r1, [r4, #6]
   105ce:	f361 0202 	bfi	r2, r1, #0, #3
   105d2:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   105d4:	681a      	ldr	r2, [r3, #0]
   105d6:	f365 729e 	bfi	r2, r5, #30, #1
   105da:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   105dc:	681a      	ldr	r2, [r3, #0]
   105de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   105e2:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   105e4:	685a      	ldr	r2, [r3, #4]
   105e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   105ea:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   105ec:	685a      	ldr	r2, [r3, #4]
   105ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   105f2:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   105f4:	69a3      	ldr	r3, [r4, #24]
   105f6:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   105fa:	789a      	ldrb	r2, [r3, #2]
   105fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10600:	01db      	lsls	r3, r3, #7
   10602:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10606:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   1060a:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   1060e:	07d7      	lsls	r7, r2, #31
   10610:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   10614:	bf4c      	ite	mi
   10616:	f366 1507 	bfimi	r5, r6, #4, #4
   1061a:	f366 0503 	bfipl	r5, r6, #0, #4
   1061e:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   10622:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   10624:	2901      	cmp	r1, #1
   10626:	f240 822f 	bls.w	10a88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   1062a:	2902      	cmp	r1, #2
   1062c:	d10a      	bne.n	10644 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   1062e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10632:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10636:	4413      	add	r3, r2
   10638:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1063c:	f042 0201 	orr.w	r2, r2, #1
   10640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   10644:	2807      	cmp	r0, #7
   10646:	d031      	beq.n	106ac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   10648:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1064c:	2b07      	cmp	r3, #7
   1064e:	d02d      	beq.n	106ac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   10650:	f7fe fb06 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10654:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10656:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10658:	f023 0302 	bic.w	r3, r3, #2
   1065c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1065e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10660:	6803      	ldr	r3, [r0, #0]
   10662:	2b01      	cmp	r3, #1
   10664:	d0fc      	beq.n	10660 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   10666:	9b06      	ldr	r3, [sp, #24]
   10668:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   1066a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   1066e:	f7fe fb01 	bl	ec74 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10672:	2300      	movs	r3, #0
   10674:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10676:	6923      	ldr	r3, [r4, #16]
   10678:	3328      	adds	r3, #40	; 0x28
   1067a:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   1067c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10680:	f7fe faee 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10684:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10686:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10688:	f023 0302 	bic.w	r3, r3, #2
   1068c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1068e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10690:	6803      	ldr	r3, [r0, #0]
   10692:	2b01      	cmp	r3, #1
   10694:	d0fc      	beq.n	10690 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   10696:	9b07      	ldr	r3, [sp, #28]
   10698:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   1069a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1069e:	f7fe fae9 	bl	ec74 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   106a2:	2300      	movs	r3, #0
   106a4:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   106a6:	6923      	ldr	r3, [r4, #16]
   106a8:	3328      	adds	r3, #40	; 0x28
   106aa:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   106ac:	6820      	ldr	r0, [r4, #0]
   106ae:	4a66      	ldr	r2, [pc, #408]	; (10848 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   106b0:	6903      	ldr	r3, [r0, #16]
   106b2:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   106b6:	4293      	cmp	r3, r2
   106b8:	f040 81bd 	bne.w	10a36 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106bc:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106be:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106c0:	f991 5001 	ldrsb.w	r5, [r1, #1]
   106c4:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106c6:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106c8:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   106cc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   106d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106d4:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106d8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   106dc:	f36f 0100 	bfc	r1, #0, #1
   106e0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   106e4:	6813      	ldr	r3, [r2, #0]
   106e6:	0799      	lsls	r1, r3, #30
   106e8:	d503      	bpl.n	106f2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   106ea:	6813      	ldr	r3, [r2, #0]
   106ec:	f36f 0341 	bfc	r3, #1, #1
   106f0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   106f2:	69d3      	ldr	r3, [r2, #28]
   106f4:	f013 0302 	ands.w	r3, r3, #2
   106f8:	d1fb      	bne.n	106f2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   106fa:	6802      	ldr	r2, [r0, #0]
   106fc:	4542      	cmp	r2, r8
   106fe:	f040 8211 	bne.w	10b24 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   10702:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10706:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1070a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1070e:	6843      	ldr	r3, [r0, #4]
   10710:	4a4e      	ldr	r2, [pc, #312]	; (1084c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   10712:	4293      	cmp	r3, r2
   10714:	f040 8202 	bne.w	10b1c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10718:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   1071a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1071c:	2204      	movs	r2, #4
    m_inTail = 0;
   1071e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10722:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10724:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10728:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   1072a:	79e3      	ldrb	r3, [r4, #7]
   1072c:	2b01      	cmp	r3, #1
   1072e:	f040 8150 	bne.w	109d2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10732:	4b47      	ldr	r3, [pc, #284]	; (10850 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   10734:	444b      	add	r3, r9
   10736:	fbb3 f3f9 	udiv	r3, r3, r9
   1073a:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   1073c:	2bff      	cmp	r3, #255	; 0xff
   1073e:	bf28      	it	cs
   10740:	23ff      	movcs	r3, #255	; 0xff
   10742:	b2db      	uxtb	r3, r3
   10744:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10746:	2e00      	cmp	r6, #0
   10748:	f000 816f 	beq.w	10a2a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1074c:	682b      	ldr	r3, [r5, #0]
   1074e:	f043 0302 	orr.w	r3, r3, #2
   10752:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10754:	69eb      	ldr	r3, [r5, #28]
   10756:	079b      	lsls	r3, r3, #30
   10758:	d4fc      	bmi.n	10754 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1075a:	6a22      	ldr	r2, [r4, #32]
   1075c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10760:	7890      	ldrb	r0, [r2, #2]
   10762:	01db      	lsls	r3, r3, #7
   10764:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10768:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   1076c:	4402      	add	r2, r0
   1076e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10772:	f041 0101 	orr.w	r1, r1, #1
   10776:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1077a:	69a6      	ldr	r6, [r4, #24]
   1077c:	4a35      	ldr	r2, [pc, #212]	; (10854 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   1077e:	f996 1001 	ldrsb.w	r1, [r6, #1]
   10782:	78b7      	ldrb	r7, [r6, #2]
   10784:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10788:	2601      	movs	r6, #1
   1078a:	40be      	lsls	r6, r7
   1078c:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1078e:	6961      	ldr	r1, [r4, #20]
   10790:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10794:	f891 c002 	ldrb.w	ip, [r1, #2]
   10798:	f991 e001 	ldrsb.w	lr, [r1, #1]
   1079c:	f01c 0f01 	tst.w	ip, #1
   107a0:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   107a4:	f000 8108 	beq.w	109b8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   107a8:	4472      	add	r2, lr
   107aa:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   107ae:	f006 060f 	and.w	r6, r6, #15
   107b2:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   107b6:	f366 1107 	bfi	r1, r6, #4, #4
   107ba:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   107be:	4925      	ldr	r1, [pc, #148]	; (10854 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   107c0:	eb01 020e 	add.w	r2, r1, lr
   107c4:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   107c8:	2701      	movs	r7, #1
   107ca:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   107ce:	f04f 0803 	mov.w	r8, #3
   107d2:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   107d6:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   107d8:	69e2      	ldr	r2, [r4, #28]
   107da:	7894      	ldrb	r4, [r2, #2]
   107dc:	f992 2001 	ldrsb.w	r2, [r2, #1]
   107e0:	01d2      	lsls	r2, r2, #7
   107e2:	4411      	add	r1, r2
   107e4:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   107e8:	f014 0f01 	tst.w	r4, #1
   107ec:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   107f0:	bf14      	ite	ne
   107f2:	f366 1707 	bfine	r7, r6, #4, #4
   107f6:	f366 0703 	bfieq	r7, r6, #0, #4
   107fa:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   107fe:	4915      	ldr	r1, [pc, #84]	; (10854 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10800:	440a      	add	r2, r1
   10802:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10804:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10806:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10808:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   1080c:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10810:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10814:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10818:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1081a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1081e:	bf4c      	ite	mi
   10820:	f366 1207 	bfimi	r2, r6, #4, #4
   10824:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10828:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1082a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1082e:	2201      	movs	r2, #1
   10830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10834:	682b      	ldr	r3, [r5, #0]
   10836:	f043 0302 	orr.w	r3, r3, #2
   1083a:	602b      	str	r3, [r5, #0]
   1083c:	e00c      	b.n	10858 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   1083e:	bf00      	nop
   10840:	e000e100 	.word	0xe000e100
   10844:	40001c00 	.word	0x40001c00
   10848:	0000feb5 	.word	0x0000feb5
   1084c:	0000fd91 	.word	0x0000fd91
   10850:	004c4b3f 	.word	0x004c4b3f
   10854:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10858:	69eb      	ldr	r3, [r5, #28]
   1085a:	079b      	lsls	r3, r3, #30
   1085c:	d4fc      	bmi.n	10858 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   1085e:	2001      	movs	r0, #1
}
   10860:	b009      	add	sp, #36	; 0x24
   10862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   10866:	6829      	ldr	r1, [r5, #0]
   10868:	f36e 0184 	bfi	r1, lr, #2, #3
   1086c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   1086e:	6829      	ldr	r1, [r5, #0]
   10870:	f36f 314f 	bfc	r1, #13, #3
   10874:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10876:	6829      	ldr	r1, [r5, #0]
   10878:	f36f 711c 	bfc	r1, #28, #1
   1087c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   1087e:	6829      	ldr	r1, [r5, #0]
   10880:	f36e 5115 	bfi	r1, lr, #20, #2
   10884:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10886:	f1bc 0f00 	cmp.w	ip, #0
   1088a:	d104      	bne.n	10896 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   1088c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10890:	2900      	cmp	r1, #0
   10892:	f040 81af 	bne.w	10bf4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10896:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10898:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   1089a:	f362 0302 	bfi	r3, r2, #0, #3
   1089e:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   108a0:	682b      	ldr	r3, [r5, #0]
   108a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   108a6:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   108a8:	7923      	ldrb	r3, [r4, #4]
   108aa:	2b02      	cmp	r3, #2
   108ac:	f000 817c 	beq.w	10ba8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   108b0:	682a      	ldr	r2, [r5, #0]
   108b2:	2101      	movs	r1, #1
   108b4:	f361 621b 	bfi	r2, r1, #24, #4
   108b8:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   108ba:	686a      	ldr	r2, [r5, #4]
   108bc:	f363 324d 	bfi	r2, r3, #13, #1
   108c0:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   108c2:	7963      	ldrb	r3, [r4, #5]
   108c4:	686a      	ldr	r2, [r5, #4]
   108c6:	3b01      	subs	r3, #1
   108c8:	f363 1286 	bfi	r2, r3, #6, #1
   108cc:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   108ce:	686b      	ldr	r3, [r5, #4]
   108d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   108d4:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   108d6:	686b      	ldr	r3, [r5, #4]
   108d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   108dc:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   108de:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   108e0:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   108e2:	f36f 2349 	bfc	r3, #9, #1
   108e6:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   108e8:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   108ea:	69eb      	ldr	r3, [r5, #28]
   108ec:	075b      	lsls	r3, r3, #29
   108ee:	d4fc      	bmi.n	108ea <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   108f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   108f4:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   108f6:	4bb7      	ldr	r3, [pc, #732]	; (10bd4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108f8:	9a04      	ldr	r2, [sp, #16]
   108fa:	441a      	add	r2, r3
   108fc:	4610      	mov	r0, r2
   108fe:	9a05      	ldr	r2, [sp, #20]
   10900:	eb03 0109 	add.w	r1, r3, r9
   10904:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10906:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10908:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1090a:	9f00      	ldr	r7, [sp, #0]
   1090c:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10910:	2220      	movs	r2, #32
   10912:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10916:	9901      	ldr	r1, [sp, #4]
   10918:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1091c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10920:	9a02      	ldr	r2, [sp, #8]
   10922:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10926:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   1092a:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   1092e:	69a3      	ldr	r3, [r4, #24]
   10930:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10934:	789a      	ldrb	r2, [r3, #2]
   10936:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1093a:	01db      	lsls	r3, r3, #7
   1093c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10940:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10944:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10948:	07d6      	lsls	r6, r2, #31
   1094a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   1094e:	bf4c      	ite	mi
   10950:	f365 1007 	bfimi	r0, r5, #4, #4
   10954:	f365 0003 	bfipl	r0, r5, #0, #4
   10958:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   1095c:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   1095e:	2901      	cmp	r1, #1
   10960:	f240 80c7 	bls.w	10af2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   10964:	2902      	cmp	r1, #2
   10966:	d10a      	bne.n	1097e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10968:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1096c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10970:	4413      	add	r3, r2
   10972:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10976:	f042 0201 	orr.w	r2, r2, #1
   1097a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   1097e:	f10a 0e20 	add.w	lr, sl, #32
   10982:	4a95      	ldr	r2, [pc, #596]	; (10bd8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10984:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10988:	f36f 1386 	bfc	r3, #6, #1
   1098c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10990:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10994:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10998:	2b00      	cmp	r3, #0
   1099a:	d1f9      	bne.n	10990 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   1099c:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   109a0:	f363 0103 	bfi	r1, r3, #0, #4
   109a4:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   109a8:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   109ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   109b0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   109b4:	6853      	ldr	r3, [r2, #4]
   109b6:	e679      	b.n	106ac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   109b8:	eb02 010e 	add.w	r1, r2, lr
   109bc:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   109c0:	f006 060f 	and.w	r6, r6, #15
   109c4:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   109c8:	f366 0203 	bfi	r2, r6, #0, #4
   109cc:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   109d0:	e6f5      	b.n	107be <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   109d2:	4648      	mov	r0, r9
   109d4:	f00b f814 	bl	1ba00 <__aeabi_ui2d>
   109d8:	2200      	movs	r2, #0
   109da:	4b80      	ldr	r3, [pc, #512]	; (10bdc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   109dc:	f00b f886 	bl	1baec <__aeabi_dmul>
   109e0:	4b7f      	ldr	r3, [pc, #508]	; (10be0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   109e2:	4680      	mov	r8, r0
   109e4:	6818      	ldr	r0, [r3, #0]
   109e6:	4689      	mov	r9, r1
   109e8:	f00b f80a 	bl	1ba00 <__aeabi_ui2d>
   109ec:	4602      	mov	r2, r0
   109ee:	460b      	mov	r3, r1
   109f0:	4640      	mov	r0, r8
   109f2:	4649      	mov	r1, r9
   109f4:	f00b f9a4 	bl	1bd40 <__aeabi_ddiv>
   109f8:	4602      	mov	r2, r0
   109fa:	460b      	mov	r3, r1
   109fc:	2000      	movs	r0, #0
   109fe:	4979      	ldr	r1, [pc, #484]	; (10be4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10a00:	f00a fec0 	bl	1b784 <__aeabi_dsub>
   10a04:	2200      	movs	r2, #0
   10a06:	4b78      	ldr	r3, [pc, #480]	; (10be8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10a08:	f00b f870 	bl	1baec <__aeabi_dmul>
   10a0c:	f00b fb50 	bl	1c0b0 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10a10:	f00b f818 	bl	1ba44 <__aeabi_f2d>
   10a14:	2200      	movs	r2, #0
   10a16:	4b75      	ldr	r3, [pc, #468]	; (10bec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10a18:	f00a feb6 	bl	1b788 <__adddf3>
   10a1c:	f00b fb28 	bl	1c070 <__aeabi_d2uiz>
   10a20:	b280      	uxth	r0, r0
   10a22:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10a24:	2e00      	cmp	r6, #0
   10a26:	f47f ae91 	bne.w	1074c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   10a2a:	6a22      	ldr	r2, [r4, #32]
   10a2c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10a30:	7890      	ldrb	r0, [r2, #2]
   10a32:	01db      	lsls	r3, r3, #7
   10a34:	e6a1      	b.n	1077a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10a36:	4649      	mov	r1, r9
   10a38:	4620      	mov	r0, r4
   10a3a:	4798      	blx	r3
   10a3c:	6a22      	ldr	r2, [r4, #32]
   10a3e:	6925      	ldr	r5, [r4, #16]
   10a40:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10a44:	7890      	ldrb	r0, [r2, #2]
   10a46:	01db      	lsls	r3, r3, #7
   10a48:	e697      	b.n	1077a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10a4e:	9207      	str	r2, [sp, #28]
   10a50:	9206      	str	r2, [sp, #24]
   10a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10a56:	9202      	str	r2, [sp, #8]
   10a58:	2239      	movs	r2, #57	; 0x39
   10a5a:	9205      	str	r2, [sp, #20]
   10a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10a60:	9201      	str	r2, [sp, #4]
   10a62:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10a64:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a66:	2601      	movs	r6, #1
   10a68:	f04f 0936 	mov.w	r9, #54	; 0x36
   10a6c:	9204      	str	r2, [sp, #16]
   10a6e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10a72:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a76:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10a7a:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10a7c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a80:	f04f 0a17 	mov.w	sl, #23
   10a84:	9200      	str	r2, [sp, #0]
   10a86:	e53a      	b.n	104fe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10a88:	2900      	cmp	r1, #0
   10a8a:	f040 8092 	bne.w	10bb2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10a8e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10a92:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10a96:	2501      	movs	r5, #1
   10a98:	4095      	lsls	r5, r2
   10a9a:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10a9c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10aa0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10aa4:	4413      	add	r3, r2
   10aa6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10aaa:	f36f 0200 	bfc	r2, #0, #1
   10aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10ab2:	e5c7      	b.n	10644 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ab4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10ab8:	9207      	str	r2, [sp, #28]
   10aba:	9206      	str	r2, [sp, #24]
   10abc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10ac0:	9202      	str	r2, [sp, #8]
   10ac2:	223d      	movs	r2, #61	; 0x3d
   10ac4:	9205      	str	r2, [sp, #20]
   10ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10aca:	9201      	str	r2, [sp, #4]
   10acc:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10ace:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ad0:	2601      	movs	r6, #1
   10ad2:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10ad6:	9204      	str	r2, [sp, #16]
   10ad8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10adc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ae0:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10ae4:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10ae6:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10aea:	f04f 0a18 	mov.w	sl, #24
   10aee:	9200      	str	r2, [sp, #0]
   10af0:	e505      	b.n	104fe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10af2:	2900      	cmp	r1, #0
   10af4:	d165      	bne.n	10bc2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10af6:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10afa:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10afe:	2001      	movs	r0, #1
   10b00:	4090      	lsls	r0, r2
   10b02:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10b04:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10b08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10b0c:	4413      	add	r3, r2
   10b0e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10b12:	f36f 0200 	bfc	r2, #0, #1
   10b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10b1a:	e730      	b.n	1097e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10b1c:	4620      	mov	r0, r4
   10b1e:	4798      	blx	r3
   10b20:	6925      	ldr	r5, [r4, #16]
   10b22:	e602      	b.n	1072a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10b24:	4620      	mov	r0, r4
   10b26:	4790      	blx	r2
   10b28:	6820      	ldr	r0, [r4, #0]
   10b2a:	e5f0      	b.n	1070e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10b2c:	2205      	movs	r2, #5
   10b2e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10b36:	9202      	str	r2, [sp, #8]
   10b38:	224d      	movs	r2, #77	; 0x4d
   10b3a:	492d      	ldr	r1, [pc, #180]	; (10bf0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10b3c:	9205      	str	r2, [sp, #20]
   10b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10b42:	9201      	str	r2, [sp, #4]
   10b44:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10b46:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10b48:	2602      	movs	r6, #2
   10b4a:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10b4e:	9107      	str	r1, [sp, #28]
   10b50:	9204      	str	r2, [sp, #16]
   10b52:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10b5a:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10b5c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10b60:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10b62:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10b66:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10b6a:	9200      	str	r2, [sp, #0]
   10b6c:	e4c7      	b.n	104fe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10b72:	9207      	str	r2, [sp, #28]
   10b74:	9206      	str	r2, [sp, #24]
   10b76:	2241      	movs	r2, #65	; 0x41
   10b78:	9205      	str	r2, [sp, #20]
   10b7a:	2240      	movs	r2, #64	; 0x40
   10b7c:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b7e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b80:	2102      	movs	r1, #2
   10b82:	f04f 093e 	mov.w	r9, #62	; 0x3e
   10b86:	9204      	str	r2, [sp, #16]
   10b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10b8c:	4637      	mov	r7, r6
   10b8e:	9601      	str	r6, [sp, #4]
   10b90:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b92:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b96:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10b9a:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   10b9c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ba0:	f04f 0a22 	mov.w	sl, #34	; 0x22
   10ba4:	9200      	str	r2, [sp, #0]
   10ba6:	e4aa      	b.n	104fe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   10ba8:	682b      	ldr	r3, [r5, #0]
   10baa:	f36f 631b 	bfc	r3, #24, #4
   10bae:	602b      	str	r3, [r5, #0]
   10bb0:	e687      	b.n	108c2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10bb2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10bb6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10bba:	2501      	movs	r5, #1
   10bbc:	4095      	lsls	r5, r2
   10bbe:	614d      	str	r5, [r1, #20]
   10bc0:	e76c      	b.n	10a9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10bc2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10bc6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10bca:	2001      	movs	r0, #1
   10bcc:	4090      	lsls	r0, r2
   10bce:	6148      	str	r0, [r1, #20]
   10bd0:	e798      	b.n	10b04 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10bd2:	bf00      	nop
   10bd4:	e000e100 	.word	0xe000e100
   10bd8:	40001c00 	.word	0x40001c00
   10bdc:	40300000 	.word	0x40300000
   10be0:	200000e0 	.word	0x200000e0
   10be4:	3ff00000 	.word	0x3ff00000
   10be8:	40f00000 	.word	0x40f00000
   10bec:	3fe00000 	.word	0x3fe00000
   10bf0:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10bf4:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10bf6:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10bf8:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10bfc:	f36c 0100 	bfi	r1, ip, #0, #1
   10c00:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10c04:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10c06:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10c0a:	0790      	lsls	r0, r2, #30
   10c0c:	d503      	bpl.n	10c16 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10c0e:	681a      	ldr	r2, [r3, #0]
   10c10:	f36c 0241 	bfi	r2, ip, #1, #1
   10c14:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10c16:	69da      	ldr	r2, [r3, #28]
   10c18:	f012 0202 	ands.w	r2, r2, #2
   10c1c:	d1fb      	bne.n	10c16 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   10c1e:	6821      	ldr	r1, [r4, #0]
   10c20:	680b      	ldr	r3, [r1, #0]
   10c22:	4543      	cmp	r3, r8
   10c24:	d13b      	bne.n	10c9e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   10c26:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10c2a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   10c2e:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   10c32:	684b      	ldr	r3, [r1, #4]
   10c34:	4a1c      	ldr	r2, [pc, #112]	; (10ca8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   10c36:	4293      	cmp	r3, r2
   10c38:	d12d      	bne.n	10c96 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10c3a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10c3c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10c3e:	2104      	movs	r1, #4
    m_inTail = 0;
   10c40:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10c44:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10c46:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10c4a:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   10c4c:	7b21      	ldrb	r1, [r4, #12]
   10c4e:	6813      	ldr	r3, [r2, #0]
   10c50:	2900      	cmp	r1, #0
   10c52:	bf0c      	ite	eq
   10c54:	2100      	moveq	r1, #0
   10c56:	2102      	movne	r1, #2
   10c58:	f361 4311 	bfi	r3, r1, #16, #2
   10c5c:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   10c5e:	f1bb 0f00 	cmp.w	fp, #0
   10c62:	f43f ae18 	beq.w	10896 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10c66:	6813      	ldr	r3, [r2, #0]
   10c68:	f043 0302 	orr.w	r3, r3, #2
   10c6c:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10c6e:	69d3      	ldr	r3, [r2, #28]
   10c70:	0799      	lsls	r1, r3, #30
   10c72:	d4fc      	bmi.n	10c6e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10c74:	6a23      	ldr	r3, [r4, #32]
   10c76:	f993 2001 	ldrsb.w	r2, [r3, #1]
   10c7a:	789b      	ldrb	r3, [r3, #2]
   10c7c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10c80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10c84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10c88:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10c8c:	f042 0201 	orr.w	r2, r2, #1
   10c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10c94:	e5ff      	b.n	10896 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   10c96:	4620      	mov	r0, r4
   10c98:	4798      	blx	r3
   10c9a:	6922      	ldr	r2, [r4, #16]
   10c9c:	e7d6      	b.n	10c4c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   10c9e:	4620      	mov	r0, r4
   10ca0:	4798      	blx	r3
   10ca2:	6821      	ldr	r1, [r4, #0]
   10ca4:	e7c5      	b.n	10c32 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   10ca6:	bf00      	nop
   10ca8:	0000fd91 	.word	0x0000fd91

00010cac <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   10cac:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   10cb0:	b92a      	cbnz	r2, 10cbe <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   10cb2:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   10cb4:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   10cb6:	428a      	cmp	r2, r1
        m_portOpen = true;
   10cb8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   10cbc:	d900      	bls.n	10cc0 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   10cbe:	4770      	bx	lr
   10cc0:	f7ff bb86 	b.w	103d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00010cc4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cc6:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   10cc8:	4f20      	ldr	r7, [pc, #128]	; (10d4c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   10cca:	6182      	str	r2, [r0, #24]
   10ccc:	61c3      	str	r3, [r0, #28]
   10cce:	4d20      	ldr	r5, [pc, #128]	; (10d50 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   10cd0:	60a7      	str	r7, [r4, #8]
   10cd2:	9f06      	ldr	r7, [sp, #24]
   10cd4:	f8df c080 	ldr.w	ip, [pc, #128]	; 10d58 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10cd8:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   10cdc:	6065      	str	r5, [r4, #4]
   10cde:	2307      	movs	r3, #7
   10ce0:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10ce2:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   10ce4:	6227      	str	r7, [r4, #32]
   10ce6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   10cea:	2780      	movs	r7, #128	; 0x80
   10cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10cf0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   10cf4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   10cf8:	f8c4 c000 	str.w	ip, [r4]
   10cfc:	6261      	str	r1, [r4, #36]	; 0x24
   10cfe:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   10d02:	85a2      	strh	r2, [r4, #44]	; 0x2c
   10d04:	4629      	mov	r1, r5
   10d06:	463a      	mov	r2, r7
   10d08:	6166      	str	r6, [r4, #20]
   10d0a:	7325      	strb	r5, [r4, #12]
   10d0c:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   10d10:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   10d14:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10d18:	f00d fbb8 	bl	1e48c <memset>
   10d1c:	463a      	mov	r2, r7
   10d1e:	4629      	mov	r1, r5
   10d20:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10d24:	f00d fbb2 	bl	1e48c <memset>
   10d28:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   10d2c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   10d30:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   10d34:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   10d38:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   10d3c:	7a32      	ldrb	r2, [r6, #8]
   10d3e:	4b05      	ldr	r3, [pc, #20]	; (10d54 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   10d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10d44:	6123      	str	r3, [r4, #16]
}
   10d46:	4620      	mov	r0, r4
   10d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d4a:	bf00      	nop
   10d4c:	02000100 	.word	0x02000100
   10d50:	00080102 	.word	0x00080102
   10d54:	00023404 	.word	0x00023404
   10d58:	000233bc 	.word	0x000233bc

00010d5c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10d5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   10d5e:	4907      	ldr	r1, [pc, #28]	; (10d7c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10d60:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   10d64:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   10d66:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10d68:	fbb2 f2f3 	udiv	r2, r2, r3
   10d6c:	2a02      	cmp	r2, #2
   10d6e:	bf38      	it	cc
   10d70:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   10d72:	680b      	ldr	r3, [r1, #0]
   10d74:	1a1b      	subs	r3, r3, r0
   10d76:	429a      	cmp	r2, r3
   10d78:	d8fb      	bhi.n	10d72 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   10d7a:	4770      	bx	lr
   10d7c:	20001be0 	.word	0x20001be0

00010d80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   10d80:	2901      	cmp	r1, #1
   10d82:	d901      	bls.n	10d88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   10d84:	2000      	movs	r0, #0
   10d86:	4770      	bx	lr
    if (!m_portOpen) {
   10d88:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   10d8c:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   10d8e:	b10a      	cbz	r2, 10d94 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   10d90:	f7ff bb1e 	b.w	103d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   10d94:	2001      	movs	r0, #1
}
   10d96:	4770      	bx	lr

00010d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   10d98:	2901      	cmp	r1, #1
    m_ssMode = mode;
   10d9a:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   10d9c:	d914      	bls.n	10dc8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   10d9e:	2902      	cmp	r1, #2
   10da0:	d110      	bne.n	10dc4 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10da2:	6982      	ldr	r2, [r0, #24]
   10da4:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10da8:	7893      	ldrb	r3, [r2, #2]
   10daa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10dae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10db2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   10db6:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10db8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10dbc:	4302      	orrs	r2, r0
   10dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10dc2:	4770      	bx	lr
            success = false;
   10dc4:	2000      	movs	r0, #0
}
   10dc6:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10dc8:	6982      	ldr	r2, [r0, #24]
   10dca:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10dce:	7892      	ldrb	r2, [r2, #2]
   10dd0:	01db      	lsls	r3, r3, #7
   10dd2:	b199      	cbz	r1, 10dfc <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   10dd4:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10dd8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10ddc:	2001      	movs	r0, #1
   10dde:	4090      	lsls	r0, r2
   10de0:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10de2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10de6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10dea:	4413      	add	r3, r2
   10dec:	2001      	movs	r0, #1
   10dee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10df2:	f36f 0200 	bfc	r2, #0, #1
   10df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10dfa:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10dfc:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10e00:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10e04:	2001      	movs	r0, #1
   10e06:	4090      	lsls	r0, r2
   10e08:	6188      	str	r0, [r1, #24]
   10e0a:	e7ea      	b.n	10de2 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

00010e0c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   10e0c:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   10e0e:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   10e10:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   10e12:	2b01      	cmp	r3, #1
    m_phase = phase;
   10e14:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   10e16:	d000      	beq.n	10e1a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   10e18:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10e1a:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10e1c:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10e1e:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10e22:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10e24:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10e26:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   10e2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10e32:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10e36:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10e3a:	f36f 0100 	bfc	r1, #0, #1
   10e3e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10e42:	6813      	ldr	r3, [r2, #0]
   10e44:	0799      	lsls	r1, r3, #30
   10e46:	d503      	bpl.n	10e50 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10e48:	6813      	ldr	r3, [r2, #0]
   10e4a:	f36f 0341 	bfc	r3, #1, #1
   10e4e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10e50:	69d3      	ldr	r3, [r2, #28]
   10e52:	f013 0302 	ands.w	r3, r3, #2
   10e56:	d1fb      	bne.n	10e50 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   10e58:	6802      	ldr	r2, [r0, #0]
   10e5a:	4604      	mov	r4, r0
   10e5c:	6811      	ldr	r1, [r2, #0]
   10e5e:	4821      	ldr	r0, [pc, #132]	; (10ee4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   10e60:	4281      	cmp	r1, r0
   10e62:	d136      	bne.n	10ed2 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   10e64:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10e68:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10e6c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10e70:	6853      	ldr	r3, [r2, #4]
   10e72:	4a1d      	ldr	r2, [pc, #116]	; (10ee8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   10e74:	4293      	cmp	r3, r2
   10e76:	d130      	bne.n	10eda <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e78:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10e7a:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e7c:	2104      	movs	r1, #4
    m_inTail = 0;
   10e7e:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10e82:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10e84:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e88:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10e8a:	7a21      	ldrb	r1, [r4, #8]
   10e8c:	681a      	ldr	r2, [r3, #0]
   10e8e:	f361 725d 	bfi	r2, r1, #29, #1
   10e92:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10e94:	7a61      	ldrb	r1, [r4, #9]
   10e96:	681a      	ldr	r2, [r3, #0]
   10e98:	f361 721c 	bfi	r2, r1, #28, #1
   10e9c:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   10e9e:	2d00      	cmp	r5, #0
   10ea0:	d0ba      	beq.n	10e18 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10ea2:	681a      	ldr	r2, [r3, #0]
   10ea4:	f042 0202 	orr.w	r2, r2, #2
   10ea8:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10eaa:	69da      	ldr	r2, [r3, #28]
   10eac:	0792      	lsls	r2, r2, #30
   10eae:	d4fc      	bmi.n	10eaa <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10eb0:	6a22      	ldr	r2, [r4, #32]
   10eb2:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10eb6:	7893      	ldrb	r3, [r2, #2]
   10eb8:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10ebc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ec0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10ec4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10ec8:	f042 0201 	orr.w	r2, r2, #1
   10ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10ed0:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   10ed2:	4620      	mov	r0, r4
   10ed4:	4788      	blx	r1
   10ed6:	6822      	ldr	r2, [r4, #0]
   10ed8:	e7ca      	b.n	10e70 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   10eda:	4620      	mov	r0, r4
   10edc:	4798      	blx	r3
   10ede:	6923      	ldr	r3, [r4, #16]
   10ee0:	e7d3      	b.n	10e8a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   10ee2:	bf00      	nop
   10ee4:	0000fd81 	.word	0x0000fd81
   10ee8:	0000fd91 	.word	0x0000fd91

00010eec <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10eec:	b470      	push	{r4, r5, r6}
   10eee:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   10ef0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10ef4:	b120      	cbz	r0, 10f00 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   10ef6:	79e0      	ldrb	r0, [r4, #7]
   10ef8:	2801      	cmp	r0, #1
        return 0;
   10efa:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   10efe:	d001      	beq.n	10f04 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   10f00:	bc70      	pop	{r4, r5, r6}
   10f02:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   10f04:	2b00      	cmp	r3, #0
   10f06:	ddfb      	ble.n	10f00 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   10f08:	6925      	ldr	r5, [r4, #16]
   10f0a:	b1b9      	cbz	r1, 10f3c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   10f0c:	1c4e      	adds	r6, r1, #1
   10f0e:	7809      	ldrb	r1, [r1, #0]
   10f10:	62a9      	str	r1, [r5, #40]	; 0x28
   10f12:	e003      	b.n	10f1c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   10f14:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10f18:	2900      	cmp	r1, #0
   10f1a:	d0f1      	beq.n	10f00 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10f1c:	7e29      	ldrb	r1, [r5, #24]
   10f1e:	0749      	lsls	r1, r1, #29
   10f20:	d5f8      	bpl.n	10f14 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   10f22:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10f24:	0789      	lsls	r1, r1, #30
   10f26:	d5f5      	bpl.n	10f14 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   10f28:	b152      	cbz	r2, 10f40 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   10f2a:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   10f2c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10f2e:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   10f30:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   10f32:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   10f36:	d007      	beq.n	10f48 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   10f38:	4631      	mov	r1, r6
   10f3a:	e7e5      	b.n	10f08 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   10f3c:	460e      	mov	r6, r1
   10f3e:	e7e7      	b.n	10f10 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   10f40:	3001      	adds	r0, #1
   10f42:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   10f44:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   10f46:	d1f7      	bne.n	10f38 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   10f48:	4618      	mov	r0, r3
   10f4a:	e7d9      	b.n	10f00 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

00010f4c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   10f50:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   10f54:	b12d      	cbz	r5, 10f62 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   10f56:	f890 8007 	ldrb.w	r8, [r0, #7]
   10f5a:	f1b8 0f01 	cmp.w	r8, #1
   10f5e:	d003      	beq.n	10f68 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   10f60:	2500      	movs	r5, #0
}
   10f62:	4628      	mov	r0, r5
   10f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10f68:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   10f6c:	f1be 0f07 	cmp.w	lr, #7
   10f70:	d0f6      	beq.n	10f60 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   10f72:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   10f76:	2c07      	cmp	r4, #7
   10f78:	d0f2      	beq.n	10f60 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   10f7a:	4616      	mov	r6, r2
   10f7c:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10f7e:	4670      	mov	r0, lr
   10f80:	461f      	mov	r7, r3
   10f82:	4689      	mov	r9, r1
   10f84:	f7fd fe76 	bl	ec74 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   10f88:	b336      	cbz	r6, 10fd8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   10f8a:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   10f8c:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   10f90:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   10f92:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   10f94:	b2be      	uxth	r6, r7
   10f96:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   10f98:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10f9c:	f7fd fe60 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10fa0:	6803      	ldr	r3, [r0, #0]
   10fa2:	f043 0302 	orr.w	r3, r3, #2
   10fa6:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10fa8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10fac:	f7fd fe62 	bl	ec74 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   10fb0:	f1b9 0f00 	cmp.w	r9, #0
   10fb4:	d015      	beq.n	10fe2 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   10fb6:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   10fb8:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   10fbc:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   10fbe:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   10fc0:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   10fc2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10fc6:	f7fd fe4b 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10fca:	6803      	ldr	r3, [r0, #0]
   10fcc:	f043 0302 	orr.w	r3, r3, #2
   10fd0:	6003      	str	r3, [r0, #0]
}
   10fd2:	4628      	mov	r0, r5
   10fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   10fd8:	4b04      	ldr	r3, [pc, #16]	; (10fec <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   10fda:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   10fdc:	f8a0 8000 	strh.w	r8, [r0]
   10fe0:	e7d8      	b.n	10f94 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   10fe2:	4b02      	ldr	r3, [pc, #8]	; (10fec <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   10fe4:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   10fe6:	2301      	movs	r3, #1
   10fe8:	8003      	strh	r3, [r0, #0]
   10fea:	e7e9      	b.n	10fc0 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   10fec:	20001f10 	.word	0x20001f10

00010ff0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10ff0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   10ff4:	2b07      	cmp	r3, #7
   10ff6:	d016      	beq.n	11026 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   10ff8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   10ffc:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   10ffe:	b510      	push	{r4, lr}
   11000:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11002:	d005      	beq.n	11010 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   11004:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11008:	b113      	cbz	r3, 11010 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   1100a:	79e3      	ldrb	r3, [r4, #7]
   1100c:	2b01      	cmp	r3, #1
   1100e:	d001      	beq.n	11014 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   11010:	2001      	movs	r0, #1
   11012:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   11014:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11018:	f7fd fe22 	bl	ec60 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1101c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1101e:	079b      	lsls	r3, r3, #30
   11020:	d4f0      	bmi.n	11004 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   11022:	2001      	movs	r0, #1
   11024:	bd10      	pop	{r4, pc}
   11026:	2001      	movs	r0, #1
   11028:	4770      	bx	lr
   1102a:	bf00      	nop

0001102c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   1102c:	79c3      	ldrb	r3, [r0, #7]
   1102e:	2b01      	cmp	r3, #1
   11030:	d022      	beq.n	11078 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   11032:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11036:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   1103a:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   1103c:	429a      	cmp	r2, r3
   1103e:	d019      	beq.n	11074 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   11040:	7e0b      	ldrb	r3, [r1, #24]
   11042:	07da      	lsls	r2, r3, #31
   11044:	d403      	bmi.n	1104e <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   11046:	e018      	b.n	1107a <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   11048:	7e0b      	ldrb	r3, [r1, #24]
   1104a:	07db      	lsls	r3, r3, #31
   1104c:	d514      	bpl.n	11078 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   1104e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   11052:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11056:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   11058:	3301      	adds	r3, #1
   1105a:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   1105e:	628a      	str	r2, [r1, #40]	; 0x28
   11060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   11064:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11068:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   1106c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11070:	429a      	cmp	r2, r3
   11072:	d1e9      	bne.n	11048 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   11074:	2301      	movs	r3, #1
   11076:	750b      	strb	r3, [r1, #20]
   11078:	4770      	bx	lr
   1107a:	4770      	bx	lr

0001107c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   1107c:	79c3      	ldrb	r3, [r0, #7]
   1107e:	2b01      	cmp	r3, #1
   11080:	d100      	bne.n	11084 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   11082:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   11084:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   11086:	6901      	ldr	r1, [r0, #16]
   11088:	f891 3020 	ldrb.w	r3, [r1, #32]
   1108c:	b303      	cbz	r3, 110d0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   1108e:	2300      	movs	r3, #0
   11090:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   11094:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11098:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   1109c:	f103 0218 	add.w	r2, r3, #24
   110a0:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   110a4:	3301      	adds	r3, #1
   110a6:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   110aa:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   110ae:	7e0b      	ldrb	r3, [r1, #24]
   110b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   110b4:	760b      	strb	r3, [r1, #24]
   110b6:	e00b      	b.n	110d0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   110b8:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   110bc:	429a      	cmp	r2, r3
   110be:	d00f      	beq.n	110e0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   110c0:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   110c4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   110c6:	3218      	adds	r2, #24
   110c8:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   110cc:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   110d0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   110d4:	7e0a      	ldrb	r2, [r1, #24]
   110d6:	3301      	adds	r3, #1
   110d8:	0752      	lsls	r2, r2, #29
   110da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   110de:	d4eb      	bmi.n	110b8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   110e0:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   110e4:	429a      	cmp	r2, r3
   110e6:	d002      	beq.n	110ee <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   110e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   110ec:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   110ee:	2304      	movs	r3, #4
   110f0:	750b      	strb	r3, [r1, #20]
}
   110f2:	e7f9      	b.n	110e8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

000110f4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   110f4:	79c3      	ldrb	r3, [r0, #7]
   110f6:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   110f8:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   110fa:	d022      	beq.n	11142 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   110fc:	7e1a      	ldrb	r2, [r3, #24]
   110fe:	09d2      	lsrs	r2, r2, #7
   11100:	d01e      	beq.n	11140 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11102:	2280      	movs	r2, #128	; 0x80
   11104:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   11106:	8b5a      	ldrh	r2, [r3, #26]
   11108:	0792      	lsls	r2, r2, #30
   1110a:	d509      	bpl.n	11120 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   1110c:	8b5a      	ldrh	r2, [r3, #26]
   1110e:	f042 0202 	orr.w	r2, r2, #2
   11112:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   11114:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11118:	f042 0201 	orr.w	r2, r2, #1
   1111c:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   11120:	8b5a      	ldrh	r2, [r3, #26]
   11122:	07d1      	lsls	r1, r2, #31
   11124:	d410      	bmi.n	11148 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   11126:	8b5a      	ldrh	r2, [r3, #26]
   11128:	0752      	lsls	r2, r2, #29
   1112a:	d509      	bpl.n	11140 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   1112c:	8b5a      	ldrh	r2, [r3, #26]
   1112e:	f042 0204 	orr.w	r2, r2, #4
   11132:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   11134:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   11138:	f043 0304 	orr.w	r3, r3, #4
   1113c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   11140:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11142:	2280      	movs	r2, #128	; 0x80
   11144:	761a      	strb	r2, [r3, #24]
            break;
   11146:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   11148:	8b5a      	ldrh	r2, [r3, #26]
   1114a:	f042 0201 	orr.w	r2, r2, #1
   1114e:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   11150:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11154:	f042 0202 	orr.w	r2, r2, #2
   11158:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   1115c:	e7e3      	b.n	11126 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   1115e:	bf00      	nop

00011160 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11160:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   11164:	4770      	bx	lr
   11166:	bf00      	nop

00011168 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11168:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1116c:	e7f8      	b.n	11160 <_ZN9ClearCore12SerialDriver4ModeEv>
   1116e:	bf00      	nop

00011170 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   11170:	2007      	movs	r0, #7
   11172:	4770      	bx	lr

00011174 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   11174:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11178:	e7fa      	b.n	11170 <_ZN9ClearCore12SerialDriver4TypeEv>
   1117a:	bf00      	nop

0001117c <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   1117c:	6803      	ldr	r3, [r0, #0]
   1117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11180:	4718      	bx	r3
   11182:	bf00      	nop

00011184 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   11184:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11188:	e7f8      	b.n	1117c <_ZN9ClearCore12SerialDriver10IsWritableEv>
   1118a:	bf00      	nop

0001118c <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   1118c:	b508      	push	{r3, lr}
        return PortIsOpen();
   1118e:	6803      	ldr	r3, [r0, #0]
   11190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11192:	4798      	blx	r3
    }
   11194:	b200      	sxth	r0, r0
   11196:	bd08      	pop	{r3, pc}

00011198 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11198:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1119c:	e7f6      	b.n	1118c <_ZN9ClearCore12SerialDriver5StateEv>
   1119e:	bf00      	nop

000111a0 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   111a0:	2000      	movs	r0, #0
   111a2:	4770      	bx	lr

000111a4 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   111a4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   111a8:	e7fa      	b.n	111a0 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   111aa:	bf00      	nop

000111ac <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   111ac:	4770      	bx	lr
   111ae:	bf00      	nop

000111b0 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   111b0:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   111b4:	e7fa      	b.n	111ac <_ZN9ClearCore12SerialDriver7RefreshEv>
   111b6:	bf00      	nop

000111b8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   111b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111bc:	b082      	sub	sp, #8
   111be:	4688      	mov	r8, r1
   111c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   111c2:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   111c6:	9500      	str	r5, [sp, #0]
   111c8:	9401      	str	r4, [sp, #4]
   111ca:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   111cc:	4604      	mov	r4, r0
   111ce:	4617      	mov	r7, r2
   111d0:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   111d2:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   111d4:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   111d6:	f7ff fd75 	bl	10cc4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   111da:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   111de:	f7fd f951 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
   111e2:	4b09      	ldr	r3, [pc, #36]	; (11208 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   111e4:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   111e8:	f103 0208 	add.w	r2, r3, #8
   111ec:	4620      	mov	r0, r4
   111ee:	337c      	adds	r3, #124	; 0x7c
   111f0:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   111f4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   111f8:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   111fc:	6022      	str	r2, [r4, #0]
   111fe:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   11202:	b002      	add	sp, #8
   11204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11208:	00023424 	.word	0x00023424

0001120c <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   1120c:	b538      	push	{r3, r4, r5, lr}
   1120e:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11210:	f7fe fe50 	bl	feb4 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   11214:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11218:	4605      	mov	r5, r0
        if (m_portOpen) {
   1121a:	b113      	cbz	r3, 11222 <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   1121c:	4620      	mov	r0, r4
   1121e:	f7ff fd9d 	bl	10d5c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   11222:	4628      	mov	r0, r5
   11224:	bd38      	pop	{r3, r4, r5, pc}
   11226:	bf00      	nop

00011228 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   11228:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   1122a:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   1122e:	428b      	cmp	r3, r1
   11230:	d00d      	beq.n	1124e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   11232:	2b10      	cmp	r3, #16
   11234:	460d      	mov	r5, r1
   11236:	4604      	mov	r4, r0
   11238:	f000 808c 	beq.w	11354 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   1123c:	f1a5 030d 	sub.w	r3, r5, #13
   11240:	2b03      	cmp	r3, #3
   11242:	f200 808c 	bhi.w	1135e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   11246:	e8df f003 	tbb	[pc, r3]
   1124a:	3169      	.short	0x3169
   1124c:	4f06      	.short	0x4f06
        return true;
   1124e:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   11250:	4628      	mov	r0, r5
   11252:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11254:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11256:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1125a:	4b42      	ldr	r3, [pc, #264]	; (11364 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1125c:	f3bf 8f5b 	dmb	ish
   11260:	43d2      	mvns	r2, r2
   11262:	e853 1f00 	ldrex	r1, [r3]
   11266:	4011      	ands	r1, r2
   11268:	e843 1000 	strex	r0, r1, [r3]
   1126c:	2800      	cmp	r0, #0
   1126e:	d1f8      	bne.n	11262 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   11270:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11274:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11278:	f3bf 8f5b 	dmb	ish
   1127c:	e853 1f00 	ldrex	r1, [r3]
   11280:	4311      	orrs	r1, r2
   11282:	e843 1000 	strex	r0, r1, [r3]
   11286:	2800      	cmp	r0, #0
   11288:	d1f8      	bne.n	1127c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   1128a:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   1128e:	2101      	movs	r1, #1
    m_mode = newMode;
   11290:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   11294:	4620      	mov	r0, r4
   11296:	f7ff fd73 	bl	10d80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1129a:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1129e:	2d00      	cmp	r5, #0
   112a0:	d0d5      	beq.n	1124e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   112a2:	4620      	mov	r0, r4
   112a4:	f7ff fd5a 	bl	10d5c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   112a8:	4628      	mov	r0, r5
   112aa:	bd38      	pop	{r3, r4, r5, pc}
   112ac:	4b2d      	ldr	r3, [pc, #180]	; (11364 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   112ae:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   112b2:	f3bf 8f5b 	dmb	ish
   112b6:	e853 1f00 	ldrex	r1, [r3]
   112ba:	4311      	orrs	r1, r2
   112bc:	e843 1000 	strex	r0, r1, [r3]
   112c0:	2800      	cmp	r0, #0
   112c2:	d1f8      	bne.n	112b6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   112c4:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   112c8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   112cc:	f3bf 8f5b 	dmb	ish
   112d0:	43d2      	mvns	r2, r2
   112d2:	e853 1f00 	ldrex	r1, [r3]
   112d6:	4011      	ands	r1, r2
   112d8:	e843 1000 	strex	r0, r1, [r3]
   112dc:	2800      	cmp	r0, #0
   112de:	d1f8      	bne.n	112d2 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   112e0:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   112e4:	2100      	movs	r1, #0
   112e6:	e7d3      	b.n	11290 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   112e8:	2201      	movs	r2, #1
   112ea:	2100      	movs	r1, #0
   112ec:	4620      	mov	r0, r4
   112ee:	f7ff fd8d 	bl	10e0c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   112f2:	2101      	movs	r1, #1
   112f4:	4620      	mov	r0, r4
   112f6:	f7ff fd4f 	bl	10d98 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   112fa:	6823      	ldr	r3, [r4, #0]
   112fc:	4a1a      	ldr	r2, [pc, #104]	; (11368 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   112fe:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11300:	491a      	ldr	r1, [pc, #104]	; (1136c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   11302:	4293      	cmp	r3, r2
   11304:	4620      	mov	r0, r4
   11306:	d1a5      	bne.n	11254 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   11308:	f7fe fdd4 	bl	feb4 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   1130c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11310:	2b00      	cmp	r3, #0
   11312:	d0a0      	beq.n	11256 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   11314:	4620      	mov	r0, r4
   11316:	f7ff fd21 	bl	10d5c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   1131a:	e79c      	b.n	11256 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   1131c:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11320:	4b10      	ldr	r3, [pc, #64]	; (11364 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11322:	f3bf 8f5b 	dmb	ish
   11326:	43d2      	mvns	r2, r2
   11328:	e853 1f00 	ldrex	r1, [r3]
   1132c:	4011      	ands	r1, r2
   1132e:	e843 1000 	strex	r0, r1, [r3]
   11332:	2800      	cmp	r0, #0
   11334:	d1f8      	bne.n	11328 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   11336:	f3bf 8f5b 	dmb	ish
   1133a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1133e:	f3bf 8f5b 	dmb	ish
   11342:	43d2      	mvns	r2, r2
   11344:	e853 1f00 	ldrex	r1, [r3]
   11348:	4011      	ands	r1, r2
   1134a:	e843 1000 	strex	r0, r1, [r3]
   1134e:	2800      	cmp	r0, #0
   11350:	d0c6      	beq.n	112e0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   11352:	e7f7      	b.n	11344 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   11354:	4b06      	ldr	r3, [pc, #24]	; (11370 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   11356:	6818      	ldr	r0, [r3, #0]
   11358:	f7fe fae2 	bl	f920 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1135c:	e76e      	b.n	1123c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   1135e:	2500      	movs	r5, #0
   11360:	e776      	b.n	11250 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   11362:	bf00      	nop
   11364:	20001ac4 	.word	0x20001ac4
   11368:	0001120d 	.word	0x0001120d
   1136c:	0007a120 	.word	0x0007a120
   11370:	20001efc 	.word	0x20001efc

00011374 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   11374:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11378:	f7ff bf56 	b.w	11228 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

0001137c <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   1137c:	b510      	push	{r4, lr}
   1137e:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11380:	f7fe fcfa 	bl	fd78 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11384:	b100      	cbz	r0, 11388 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   11386:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11388:	4620      	mov	r0, r4
   1138a:	f7ff fc8f 	bl	10cac <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   1138e:	4620      	mov	r0, r4
   11390:	f7ff fce4 	bl	10d5c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11394:	4b0c      	ldr	r3, [pc, #48]	; (113c8 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   11396:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1139a:	f3bf 8f5b 	dmb	ish
   1139e:	e853 1f00 	ldrex	r1, [r3]
   113a2:	4311      	orrs	r1, r2
   113a4:	e843 1000 	strex	r0, r1, [r3]
   113a8:	2800      	cmp	r0, #0
   113aa:	d1f8      	bne.n	1139e <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   113ac:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   113b0:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   113b4:	2b10      	cmp	r3, #16
   113b6:	d1e6      	bne.n	11386 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   113b8:	4b04      	ldr	r3, [pc, #16]	; (113cc <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   113ba:	4621      	mov	r1, r4
   113bc:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   113be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   113c2:	f7fe bacd 	b.w	f960 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   113c6:	bf00      	nop
   113c8:	20001ac4 	.word	0x20001ac4
   113cc:	20001efc 	.word	0x20001efc

000113d0 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   113d0:	b510      	push	{r4, lr}
   113d2:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   113d4:	f7fe fcd0 	bl	fd78 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   113d8:	b1a8      	cbz	r0, 11406 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   113da:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   113de:	2b10      	cmp	r3, #16
   113e0:	d012      	beq.n	11408 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   113e2:	4620      	mov	r0, r4
   113e4:	f7fe fe10 	bl	10008 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   113e8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   113ec:	4a09      	ldr	r2, [pc, #36]	; (11414 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   113ee:	f3bf 8f5b 	dmb	ish
   113f2:	43db      	mvns	r3, r3
   113f4:	e852 1f00 	ldrex	r1, [r2]
   113f8:	4019      	ands	r1, r3
   113fa:	e842 1000 	strex	r0, r1, [r2]
   113fe:	2800      	cmp	r0, #0
   11400:	d1f8      	bne.n	113f4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   11402:	f3bf 8f5b 	dmb	ish
   11406:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   11408:	4b03      	ldr	r3, [pc, #12]	; (11418 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   1140a:	6818      	ldr	r0, [r3, #0]
   1140c:	f7fe fa88 	bl	f920 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11410:	e7e7      	b.n	113e2 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   11412:	bf00      	nop
   11414:	20001ac4 	.word	0x20001ac4
   11418:	20001efc 	.word	0x20001efc

0001141c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   1141c:	6803      	ldr	r3, [r0, #0]
   1141e:	4a37      	ldr	r2, [pc, #220]	; (114fc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   11420:	68db      	ldr	r3, [r3, #12]
   11422:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   11424:	b510      	push	{r4, lr}
   11426:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   11428:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   1142c:	d150      	bne.n	114d0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   1142e:	f7fe fca3 	bl	fd78 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11432:	b1a8      	cbz	r0, 11460 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   11434:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11438:	2b10      	cmp	r3, #16
   1143a:	d059      	beq.n	114f0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   1143c:	4620      	mov	r0, r4
   1143e:	f7fe fde3 	bl	10008 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11442:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11446:	4a2e      	ldr	r2, [pc, #184]	; (11500 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11448:	f3bf 8f5b 	dmb	ish
   1144c:	43db      	mvns	r3, r3
   1144e:	e852 1f00 	ldrex	r1, [r2]
   11452:	4019      	ands	r1, r3
   11454:	e842 1000 	strex	r0, r1, [r2]
   11458:	2800      	cmp	r0, #0
   1145a:	d1f8      	bne.n	1144e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   1145c:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   11460:	6823      	ldr	r3, [r4, #0]
   11462:	4a28      	ldr	r2, [pc, #160]	; (11504 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11466:	4293      	cmp	r3, r2
   11468:	d138      	bne.n	114dc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   1146a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1146e:	2b0d      	cmp	r3, #13
   11470:	d028      	beq.n	114c4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   11472:	2b10      	cmp	r3, #16
   11474:	d037      	beq.n	114e6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   11476:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1147a:	4b21      	ldr	r3, [pc, #132]	; (11500 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   1147c:	f3bf 8f5b 	dmb	ish
   11480:	43d2      	mvns	r2, r2
   11482:	e853 1f00 	ldrex	r1, [r3]
   11486:	4011      	ands	r1, r2
   11488:	e843 1000 	strex	r0, r1, [r3]
   1148c:	2800      	cmp	r0, #0
   1148e:	d1f8      	bne.n	11482 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   11490:	f3bf 8f5b 	dmb	ish
   11494:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11498:	f3bf 8f5b 	dmb	ish
   1149c:	43d2      	mvns	r2, r2
   1149e:	e853 1f00 	ldrex	r1, [r3]
   114a2:	4011      	ands	r1, r2
   114a4:	e843 1000 	strex	r0, r1, [r3]
   114a8:	2800      	cmp	r0, #0
   114aa:	d1f8      	bne.n	1149e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   114ac:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   114b0:	230d      	movs	r3, #13
   114b2:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   114b6:	4620      	mov	r0, r4
   114b8:	2100      	movs	r1, #0
   114ba:	f7ff fc61 	bl	10d80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   114be:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   114c2:	b903      	cbnz	r3, 114c6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   114c4:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   114c6:	4620      	mov	r0, r4
}
   114c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   114cc:	f7ff bc46 	b.w	10d5c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   114d0:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   114d2:	6823      	ldr	r3, [r4, #0]
   114d4:	4a0b      	ldr	r2, [pc, #44]	; (11504 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   114d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   114d8:	4293      	cmp	r3, r2
   114da:	d0c6      	beq.n	1146a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   114dc:	4620      	mov	r0, r4
   114de:	210d      	movs	r1, #13
}
   114e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   114e4:	4718      	bx	r3
        CcioMgr.LinkClose();
   114e6:	4b08      	ldr	r3, [pc, #32]	; (11508 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   114e8:	6818      	ldr	r0, [r3, #0]
   114ea:	f7fe fa19 	bl	f920 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   114ee:	e7c2      	b.n	11476 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   114f0:	4b05      	ldr	r3, [pc, #20]	; (11508 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   114f2:	6818      	ldr	r0, [r3, #0]
   114f4:	f7fe fa14 	bl	f920 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   114f8:	e7a0      	b.n	1143c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   114fa:	bf00      	nop
   114fc:	000113d1 	.word	0x000113d1
   11500:	20001ac4 	.word	0x20001ac4
   11504:	00011229 	.word	0x00011229
   11508:	20001efc 	.word	0x20001efc

0001150c <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   1150c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11510:	f7ff bf84 	b.w	1141c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

00011514 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11514:	b510      	push	{r4, lr}
            PortOpen();
   11516:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   11518:	4604      	mov	r4, r0
        if (newState) {
   1151a:	bb09      	cbnz	r1, 11560 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   1151c:	4a26      	ldr	r2, [pc, #152]	; (115b8 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   1151e:	68db      	ldr	r3, [r3, #12]
   11520:	4293      	cmp	r3, r2
   11522:	d11a      	bne.n	1155a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   11524:	f7fe fc28 	bl	fd78 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11528:	b1a8      	cbz	r0, 11556 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   1152a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1152e:	2b10      	cmp	r3, #16
   11530:	d03c      	beq.n	115ac <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   11532:	4620      	mov	r0, r4
   11534:	f7fe fd68 	bl	10008 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11538:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1153c:	4a1f      	ldr	r2, [pc, #124]	; (115bc <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1153e:	f3bf 8f5b 	dmb	ish
   11542:	43db      	mvns	r3, r3
   11544:	e852 1f00 	ldrex	r1, [r2]
   11548:	4019      	ands	r1, r3
   1154a:	e842 1000 	strex	r0, r1, [r2]
   1154e:	2800      	cmp	r0, #0
   11550:	d1f8      	bne.n	11544 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   11552:	f3bf 8f5b 	dmb	ish
    }
   11556:	2001      	movs	r0, #1
   11558:	bd10      	pop	{r4, pc}
            PortClose();
   1155a:	4798      	blx	r3
    }
   1155c:	2001      	movs	r0, #1
   1155e:	bd10      	pop	{r4, pc}
   11560:	4a17      	ldr	r2, [pc, #92]	; (115c0 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   11562:	689b      	ldr	r3, [r3, #8]
   11564:	4293      	cmp	r3, r2
   11566:	d1f8      	bne.n	1155a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   11568:	f7fe fc06 	bl	fd78 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   1156c:	2800      	cmp	r0, #0
   1156e:	d1f2      	bne.n	11556 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   11570:	4620      	mov	r0, r4
   11572:	f7ff fb9b 	bl	10cac <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   11576:	4620      	mov	r0, r4
   11578:	f7ff fbf0 	bl	10d5c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1157c:	4b0f      	ldr	r3, [pc, #60]	; (115bc <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1157e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11582:	f3bf 8f5b 	dmb	ish
   11586:	e853 1f00 	ldrex	r1, [r3]
   1158a:	4311      	orrs	r1, r2
   1158c:	e843 1000 	strex	r0, r1, [r3]
   11590:	2800      	cmp	r0, #0
   11592:	d1f8      	bne.n	11586 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   11594:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11598:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1159c:	2b10      	cmp	r3, #16
   1159e:	d1da      	bne.n	11556 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   115a0:	4b08      	ldr	r3, [pc, #32]	; (115c4 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   115a2:	4621      	mov	r1, r4
   115a4:	6818      	ldr	r0, [r3, #0]
   115a6:	f7fe f9db 	bl	f960 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   115aa:	e7d4      	b.n	11556 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   115ac:	4b05      	ldr	r3, [pc, #20]	; (115c4 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   115ae:	6818      	ldr	r0, [r3, #0]
   115b0:	f7fe f9b6 	bl	f920 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   115b4:	e7bd      	b.n	11532 <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   115b6:	bf00      	nop
   115b8:	000113d1 	.word	0x000113d1
   115bc:	20001ac4 	.word	0x20001ac4
   115c0:	0001137d 	.word	0x0001137d
   115c4:	20001efc 	.word	0x20001efc

000115c8 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   115c8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   115cc:	e7a2      	b.n	11514 <_ZN9ClearCore12SerialDriver5StateEs>
   115ce:	bf00      	nop

000115d0 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   115d0:	7980      	ldrb	r0, [r0, #6]
   115d2:	4770      	bx	lr

000115d4 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   115d4:	f1a1 0004 	sub.w	r0, r1, #4
   115d8:	fab0 f080 	clz	r0, r0
   115dc:	0940      	lsrs	r0, r0, #5
   115de:	4770      	bx	lr

000115e0 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   115e0:	2002      	movs	r0, #2
   115e2:	4770      	bx	lr

000115e4 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   115e4:	2001      	movs	r0, #1
   115e6:	4770      	bx	lr

000115e8 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   115e8:	2000      	movs	r0, #0
   115ea:	4770      	bx	lr

000115ec <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   115ec:	4770      	bx	lr
   115ee:	bf00      	nop

000115f0 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   115f0:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   115f2:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   115f4:	7183      	strb	r3, [r0, #6]
   115f6:	4770      	bx	lr

000115f8 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   115f8:	4b04      	ldr	r3, [pc, #16]	; (1160c <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   115fa:	681a      	ldr	r2, [r3, #0]
   115fc:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   11600:	6883      	ldr	r3, [r0, #8]
   11602:	421a      	tst	r2, r3
}
   11604:	bf14      	ite	ne
   11606:	2001      	movne	r0, #1
   11608:	2000      	moveq	r0, #0
   1160a:	4770      	bx	lr
   1160c:	20001ac4 	.word	0x20001ac4

00011610 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   11610:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   11612:	b971      	cbnz	r1, 11632 <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11614:	f3bf 8f5b 	dmb	ish
   11618:	4a0d      	ldr	r2, [pc, #52]	; (11650 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   1161a:	43db      	mvns	r3, r3
   1161c:	e852 1f00 	ldrex	r1, [r2]
   11620:	4019      	ands	r1, r3
   11622:	e842 1000 	strex	r0, r1, [r2]
   11626:	2800      	cmp	r0, #0
   11628:	d1f8      	bne.n	1161c <_ZN9ClearCore9LedDriver5StateEs+0xc>
   1162a:	f3bf 8f5b 	dmb	ish
    return true;
}
   1162e:	2001      	movs	r0, #1
   11630:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11632:	4a07      	ldr	r2, [pc, #28]	; (11650 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11634:	f3bf 8f5b 	dmb	ish
   11638:	e852 1f00 	ldrex	r1, [r2]
   1163c:	4319      	orrs	r1, r3
   1163e:	e842 1000 	strex	r0, r1, [r2]
   11642:	2800      	cmp	r0, #0
   11644:	d1f8      	bne.n	11638 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11646:	f3bf 8f5b 	dmb	ish
   1164a:	2001      	movs	r0, #1
   1164c:	4770      	bx	lr
   1164e:	bf00      	nop
   11650:	20001ac4 	.word	0x20001ac4

00011654 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   11654:	b538      	push	{r3, r4, r5, lr}
   11656:	4604      	mov	r4, r0
   11658:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   1165a:	f7fc ff13 	bl	e484 <_ZN9ClearCore9ConnectorC1Ev>
   1165e:	4b02      	ldr	r3, [pc, #8]	; (11668 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   11660:	60a5      	str	r5, [r4, #8]
   11662:	6023      	str	r3, [r4, #0]
   11664:	4620      	mov	r0, r4
   11666:	bd38      	pop	{r3, r4, r5, pc}
   11668:	000234d0 	.word	0x000234d0

0001166c <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   1166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   1166e:	4d19      	ldr	r5, [pc, #100]	; (116d4 <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   11670:	682c      	ldr	r4, [r5, #0]
   11672:	f014 0401 	ands.w	r4, r4, #1
   11676:	d002      	beq.n	1167e <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   11678:	4b17      	ldr	r3, [pc, #92]	; (116d8 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   1167a:	6818      	ldr	r0, [r3, #0]
   1167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1167e:	2044      	movs	r0, #68	; 0x44
   11680:	f001 fe66 	bl	13350 <_Znwj>
   11684:	4a14      	ldr	r2, [pc, #80]	; (116d8 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   11686:	4f15      	ldr	r7, [pc, #84]	; (116dc <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   11688:	4e15      	ldr	r6, [pc, #84]	; (116e0 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   1168a:	4916      	ldr	r1, [pc, #88]	; (116e4 <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   1168c:	6004      	str	r4, [r0, #0]
   1168e:	2301      	movs	r3, #1
   11690:	6044      	str	r4, [r0, #4]
   11692:	6084      	str	r4, [r0, #8]
   11694:	60c4      	str	r4, [r0, #12]
   11696:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   11698:	6144      	str	r4, [r0, #20]
   1169a:	6184      	str	r4, [r0, #24]
   1169c:	61c4      	str	r4, [r0, #28]
   1169e:	6244      	str	r4, [r0, #36]	; 0x24
   116a0:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   116a4:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   116a8:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   116ac:	6204      	str	r4, [r0, #32]
   116ae:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   116b2:	8584      	strh	r4, [r0, #44]	; 0x2c
   116b4:	85c4      	strh	r4, [r0, #46]	; 0x2e
   116b6:	8604      	strh	r4, [r0, #48]	; 0x30
   116b8:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   116bc:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   116c0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   116c4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   116c8:	6347      	str	r7, [r0, #52]	; 0x34
   116ca:	6386      	str	r6, [r0, #56]	; 0x38
   116cc:	63c1      	str	r1, [r0, #60]	; 0x3c
   116ce:	6010      	str	r0, [r2, #0]
   116d0:	602b      	str	r3, [r5, #0]
    return *instance;
}
   116d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116d4:	20001f14 	.word	0x20001f14
   116d8:	20001f1c 	.word	0x20001f1c
   116dc:	09c400fa 	.word	0x09c400fa
   116e0:	2cec1388 	.word	0x2cec1388
   116e4:	09c41388 	.word	0x09c41388

000116e8 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   116e8:	6840      	ldr	r0, [r0, #4]
   116ea:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   116ee:	4008      	ands	r0, r1
   116f0:	4770      	bx	lr
   116f2:	bf00      	nop

000116f4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   116f4:	6840      	ldr	r0, [r0, #4]
   116f6:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   116fa:	f3c0 2000 	ubfx	r0, r0, #8, #1
   116fe:	4770      	bx	lr

00011700 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   11700:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   11702:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   11704:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   11706:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   1170a:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   1170c:	4802      	ldr	r0, [pc, #8]	; (11718 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   1170e:	f7f9 fa0d 	bl	ab2c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   11712:	2001      	movs	r0, #1
   11714:	bd08      	pop	{r3, pc}
   11716:	bf00      	nop
   11718:	200019d0 	.word	0x200019d0

0001171c <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   1171c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   11720:	b951      	cbnz	r1, 11738 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   11722:	4b17      	ldr	r3, [pc, #92]	; (11780 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   11724:	2204      	movs	r2, #4
   11726:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   1172a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   1172e:	f042 0201 	orr.w	r2, r2, #1
   11732:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   11736:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   11738:	1d03      	adds	r3, r0, #4
   1173a:	f3bf 8f5b 	dmb	ish
   1173e:	e853 2f00 	ldrex	r2, [r3]
   11742:	f042 0208 	orr.w	r2, r2, #8
   11746:	e843 2100 	strex	r1, r2, [r3]
   1174a:	2900      	cmp	r1, #0
   1174c:	d1f7      	bne.n	1173e <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   1174e:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   11752:	f3bf 8f5b 	dmb	ish
   11756:	300c      	adds	r0, #12
   11758:	e850 3f00 	ldrex	r3, [r0]
   1175c:	f043 0308 	orr.w	r3, r3, #8
   11760:	e840 3200 	strex	r2, r3, [r0]
   11764:	2a00      	cmp	r2, #0
   11766:	d1f7      	bne.n	11758 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   11768:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   1176c:	4b04      	ldr	r3, [pc, #16]	; (11780 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   1176e:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11770:	2102      	movs	r1, #2
   11772:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11776:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   1177a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1177e:	4770      	bx	lr
   11780:	41008000 	.word	0x41008000

00011784 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   11784:	4401      	add	r1, r0
   11786:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   1178a:	431a      	orrs	r2, r3
   1178c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11790:	4770      	bx	lr
   11792:	bf00      	nop

00011794 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   11794:	b2cb      	uxtb	r3, r1
   11796:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   11798:	b510      	push	{r4, lr}
   1179a:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   1179c:	d505      	bpl.n	117aa <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   1179e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   117a2:	f042 0202 	orr.w	r2, r2, #2
   117a6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   117aa:	0798      	lsls	r0, r3, #30
   117ac:	d505      	bpl.n	117ba <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   117ae:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   117b2:	f042 0201 	orr.w	r2, r2, #1
   117b6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   117ba:	075a      	lsls	r2, r3, #29
   117bc:	d505      	bpl.n	117ca <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   117be:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   117c2:	f042 0201 	orr.w	r2, r2, #1
   117c6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   117ca:	06d8      	lsls	r0, r3, #27
   117cc:	d505      	bpl.n	117da <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   117ce:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   117d2:	f042 0204 	orr.w	r2, r2, #4
   117d6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   117da:	f3c1 2107 	ubfx	r1, r1, #8, #8
   117de:	06ca      	lsls	r2, r1, #27
   117e0:	d505      	bpl.n	117ee <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   117e2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   117e6:	f042 0202 	orr.w	r2, r2, #2
   117ea:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   117ee:	4a14      	ldr	r2, [pc, #80]	; (11840 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   117f0:	6812      	ldr	r2, [r2, #0]
   117f2:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   117f6:	b112      	cbz	r2, 117fe <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   117f8:	f011 0f0c 	tst.w	r1, #12
   117fc:	d118      	bne.n	11830 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   117fe:	061b      	lsls	r3, r3, #24
   11800:	d505      	bpl.n	1180e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   11802:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   11806:	f043 0308 	orr.w	r3, r3, #8
   1180a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   1180e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11812:	f001 fc29 	bl	13068 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   11816:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   1181a:	4a0a      	ldr	r2, [pc, #40]	; (11844 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   1181c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   11820:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   11824:	3300      	adds	r3, #0
   11826:	bf18      	it	ne
   11828:	2301      	movne	r3, #1
   1182a:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   1182e:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   11830:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11834:	f042 0204 	orr.w	r2, r2, #4
   11838:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   1183c:	e7df      	b.n	117fe <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   1183e:	bf00      	nop
   11840:	20001bf0 	.word	0x20001bf0
   11844:	200019d0 	.word	0x200019d0

00011848 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   11848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1184c:	b082      	sub	sp, #8
            reg = 0;
   1184e:	2300      	movs	r3, #0
   11850:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11852:	4b98      	ldr	r3, [pc, #608]	; (11ab4 <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   11854:	6844      	ldr	r4, [r0, #4]
   11856:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1185a:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   1185c:	4f96      	ldr	r7, [pc, #600]	; (11ab8 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1185e:	8a13      	ldrh	r3, [r2, #16]
   11860:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11ad8 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   11864:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11866:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   11868:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1186a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   1186c:	bf4c      	ite	mi
   1186e:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11872:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   11876:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   11878:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1187c:	4e8f      	ldr	r6, [pc, #572]	; (11abc <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1187e:	bfd4      	ite	le
   11880:	2300      	movle	r3, #0
   11882:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   11884:	f363 0000 	bfi	r0, r3, #0, #1
   11888:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   1188c:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1188e:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11890:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11892:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11894:	bf4c      	ite	mi
   11896:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1189a:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   1189e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   118a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   118a4:	bfcc      	ite	gt
   118a6:	2300      	movgt	r3, #0
   118a8:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   118aa:	f363 0041 	bfi	r0, r3, #1, #1
   118ae:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   118b2:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   118b4:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   118b8:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   118ba:	b29b      	uxth	r3, r3
    return (currentStatus &&
   118bc:	bf4c      	ite	mi
   118be:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   118c2:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   118c6:	428b      	cmp	r3, r1
   118c8:	bfcc      	ite	gt
   118ca:	2300      	movgt	r3, #0
   118cc:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   118ce:	f363 1004 	bfi	r0, r3, #4, #1
   118d2:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   118d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   118da:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   118de:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   118e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   118e6:	4976      	ldr	r1, [pc, #472]	; (11ac0 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   118e8:	4f76      	ldr	r7, [pc, #472]	; (11ac4 <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   118ea:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   118ec:	43db      	mvns	r3, r3
   118ee:	b2c0      	uxtb	r0, r0
   118f0:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   118f4:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   118f8:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   118fa:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   118fe:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   11902:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11906:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   1190a:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   1190e:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   11912:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11914:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   11918:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1191c:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   11920:	bf18      	it	ne
   11922:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   11924:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11928:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   1192c:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11930:	f083 0301 	eor.w	r3, r3, #1
   11934:	f363 0241 	bfi	r2, r3, #1, #1
   11938:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   1193c:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   1193e:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11942:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11946:	b2d2      	uxtb	r2, r2
   11948:	f361 0282 	bfi	r2, r1, #2, #1
   1194c:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11950:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   11954:	4a5c      	ldr	r2, [pc, #368]	; (11ac8 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   11956:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   1195a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1195e:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11962:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11966:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11968:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   1196c:	4857      	ldr	r0, [pc, #348]	; (11acc <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   1196e:	f88d 1004 	strb.w	r1, [sp, #4]
   11972:	bf18      	it	ne
   11974:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11976:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   1197a:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   1197e:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11980:	4e53      	ldr	r6, [pc, #332]	; (11ad0 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11982:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   11986:	f362 1345 	bfi	r3, r2, #5, #1
   1198a:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   1198e:	4628      	mov	r0, r5
   11990:	9901      	ldr	r1, [sp, #4]
   11992:	f7ff feff 	bl	11794 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11996:	6830      	ldr	r0, [r6, #0]
   11998:	6803      	ldr	r3, [r0, #0]
   1199a:	681b      	ldr	r3, [r3, #0]
   1199c:	4543      	cmp	r3, r8
   1199e:	f040 8084 	bne.w	11aaa <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   119a2:	7980      	ldrb	r0, [r0, #6]
   119a4:	2804      	cmp	r0, #4
   119a6:	d00c      	beq.n	119c2 <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   119a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   119ac:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   119b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   119b4:	bf14      	ite	ne
   119b6:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   119ba:	f023 0308 	biceq.w	r3, r3, #8
   119be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   119c2:	6870      	ldr	r0, [r6, #4]
   119c4:	6803      	ldr	r3, [r0, #0]
   119c6:	681b      	ldr	r3, [r3, #0]
   119c8:	4543      	cmp	r3, r8
   119ca:	d170      	bne.n	11aae <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   119cc:	7980      	ldrb	r0, [r0, #6]
   119ce:	2804      	cmp	r0, #4
   119d0:	d00c      	beq.n	119ec <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   119d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   119d6:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   119da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   119de:	bf14      	ite	ne
   119e0:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   119e4:	f023 0304 	biceq.w	r3, r3, #4
   119e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   119ec:	9a01      	ldr	r2, [sp, #4]
   119ee:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   119f2:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   119f4:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   119f6:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   119fa:	f105 0210 	add.w	r2, r5, #16
   119fe:	f3bf 8f5b 	dmb	ish
   11a02:	e852 1f00 	ldrex	r1, [r2]
   11a06:	4319      	orrs	r1, r3
   11a08:	e842 1000 	strex	r0, r1, [r2]
   11a0c:	2800      	cmp	r0, #0
   11a0e:	d1f8      	bne.n	11a02 <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   11a10:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   11a14:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   11a16:	f3bf 8f5b 	dmb	ish
   11a1a:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   11a1e:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   11a22:	e853 2f00 	ldrex	r2, [r3]
   11a26:	4322      	orrs	r2, r4
   11a28:	e843 2100 	strex	r1, r2, [r3]
   11a2c:	2900      	cmp	r1, #0
   11a2e:	d1f8      	bne.n	11a22 <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   11a30:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   11a34:	f105 0308 	add.w	r3, r5, #8
   11a38:	9a01      	ldr	r2, [sp, #4]
   11a3a:	f3bf 8f5b 	dmb	ish
   11a3e:	e853 1f00 	ldrex	r1, [r3]
   11a42:	4311      	orrs	r1, r2
   11a44:	e843 1000 	strex	r0, r1, [r3]
   11a48:	2800      	cmp	r0, #0
   11a4a:	d1f8      	bne.n	11a3e <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   11a4c:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   11a50:	9b01      	ldr	r3, [sp, #4]
   11a52:	f3bf 8f5b 	dmb	ish
   11a56:	e855 2f00 	ldrex	r2, [r5]
   11a5a:	431a      	orrs	r2, r3
   11a5c:	e845 2100 	strex	r1, r2, [r5]
   11a60:	2900      	cmp	r1, #0
   11a62:	d1f8      	bne.n	11a56 <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   11a64:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11a68:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   11a6a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   11a6e:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11a72:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   11a76:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11a78:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   11a7c:	d012      	beq.n	11aa4 <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   11a7e:	4c15      	ldr	r4, [pc, #84]	; (11ad4 <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   11a80:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   11a84:	f854 0b04 	ldr.w	r0, [r4], #4
   11a88:	f7f3 fa36 	bl	4ef8 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11a8c:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   11a8e:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11a92:	d1f7      	bne.n	11a84 <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   11a94:	6830      	ldr	r0, [r6, #0]
   11a96:	f7fc fdbb 	bl	e610 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   11a9a:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   11a9e:	6870      	ldr	r0, [r6, #4]
   11aa0:	f7fc fdb6 	bl	e610 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   11aa4:	b002      	add	sp, #8
   11aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11aaa:	4798      	blx	r3
   11aac:	e77a      	b.n	119a4 <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11aae:	4798      	blx	r3
   11ab0:	e78d      	b.n	119ce <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   11ab2:	bf00      	nop
   11ab4:	20001dfc 	.word	0x20001dfc
   11ab8:	41008000 	.word	0x41008000
   11abc:	20001bf0 	.word	0x20001bf0
   11ac0:	20001efc 	.word	0x20001efc
   11ac4:	200019d0 	.word	0x200019d0
   11ac8:	20001884 	.word	0x20001884
   11acc:	20001f24 	.word	0x20001f24
   11ad0:	00022d74 	.word	0x00022d74
   11ad4:	00022d7c 	.word	0x00022d7c
   11ad8:	0000e599 	.word	0x0000e599

00011adc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   11adc:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   11ade:	b94a      	cbnz	r2, 11af4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11ae0:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11ae4:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11ae6:	6983      	ldr	r3, [r0, #24]
   11ae8:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11aea:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   11aec:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11aee:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11af0:	6181      	str	r1, [r0, #24]
   11af2:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11af4:	4319      	orrs	r1, r3
   11af6:	e7f5      	b.n	11ae4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011af8 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11af8:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   11afa:	f7ff fdb7 	bl	1166c <_ZN9ClearCore13StatusManager8InstanceEv>
   11afe:	4b01      	ldr	r3, [pc, #4]	; (11b04 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11b00:	6018      	str	r0, [r3, #0]
   11b02:	bd08      	pop	{r3, pc}
   11b04:	20001f18 	.word	0x20001f18

00011b08 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11b08:	b530      	push	{r4, r5, lr}
   11b0a:	b083      	sub	sp, #12
   11b0c:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11b10:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11b12:	9401      	str	r4, [sp, #4]
   11b14:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11b16:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11b18:	f7ff f8d4 	bl	10cc4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11b1c:	4b04      	ldr	r3, [pc, #16]	; (11b30 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11b1e:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11b20:	4620      	mov	r0, r4
   11b22:	2100      	movs	r1, #0
   11b24:	f7ff f92c 	bl	10d80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11b28:	4620      	mov	r0, r4
   11b2a:	b003      	add	sp, #12
   11b2c:	bd30      	pop	{r4, r5, pc}
   11b2e:	bf00      	nop
   11b30:	00022d20 	.word	0x00022d20

00011b34 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11b34:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11b36:	4d0f      	ldr	r5, [pc, #60]	; (11b74 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11b38:	682b      	ldr	r3, [r5, #0]
   11b3a:	f013 0401 	ands.w	r4, r3, #1
   11b3e:	d002      	beq.n	11b46 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11b40:	4b0d      	ldr	r3, [pc, #52]	; (11b78 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11b42:	6818      	ldr	r0, [r3, #0]
   11b44:	bd38      	pop	{r3, r4, r5, pc}
   11b46:	f44f 7002 	mov.w	r0, #520	; 0x208
   11b4a:	f001 fc01 	bl	13350 <_Znwj>
   11b4e:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11b50:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11b54:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11b58:	4908      	ldr	r1, [pc, #32]	; (11b7c <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   11b5a:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   11b5e:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   11b62:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   11b66:	f00c fb93 	bl	1e290 <memcpy>
    static NvmManager *instance = new NvmManager();
   11b6a:	4903      	ldr	r1, [pc, #12]	; (11b78 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11b6c:	2201      	movs	r2, #1
   11b6e:	6008      	str	r0, [r1, #0]
   11b70:	602a      	str	r2, [r5, #0]
}
   11b72:	bd38      	pop	{r3, r4, r5, pc}
   11b74:	20001f20 	.word	0x20001f20
   11b78:	20001f28 	.word	0x20001f28
   11b7c:	00804000 	.word	0x00804000

00011b80 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   11b80:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   11b84:	bf9a      	itte	ls
   11b86:	1840      	addls	r0, r0, r1
   11b88:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   11b8c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   11b90:	4770      	bx	lr
   11b92:	bf00      	nop

00011b94 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   11b94:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   11b96:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   11b9a:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   11b9e:	2400      	movs	r4, #0
   11ba0:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   11ba4:	1c6b      	adds	r3, r5, #1
   11ba6:	bf08      	it	eq
   11ba8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11bac:	d005      	beq.n	11bba <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   11bae:	0c2e      	lsrs	r6, r5, #16
   11bb0:	4627      	mov	r7, r4
   11bb2:	ea56 0007 	orrs.w	r0, r6, r7
   11bb6:	462b      	mov	r3, r5
   11bb8:	d002      	beq.n	11bc0 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   11bba:	4a07      	ldr	r2, [pc, #28]	; (11bd8 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   11bbc:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11bc0:	0a1e      	lsrs	r6, r3, #8
   11bc2:	0e15      	lsrs	r5, r2, #24
   11bc4:	0c14      	lsrs	r4, r2, #16
   11bc6:	0a10      	lsrs	r0, r2, #8
   11bc8:	700e      	strb	r6, [r1, #0]
   11bca:	708d      	strb	r5, [r1, #2]
   11bcc:	70cc      	strb	r4, [r1, #3]
   11bce:	704b      	strb	r3, [r1, #1]
   11bd0:	714a      	strb	r2, [r1, #5]
   11bd2:	7108      	strb	r0, [r1, #4]
    }
}
   11bd4:	bcf0      	pop	{r4, r5, r6, r7}
   11bd6:	4770      	bx	lr
   11bd8:	10b00000 	.word	0x10b00000

00011bdc <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11bdc:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11bde:	f7ff ffa9 	bl	11b34 <_ZN9ClearCore10NvmManager8InstanceEv>
   11be2:	4b01      	ldr	r3, [pc, #4]	; (11be8 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11be4:	6018      	str	r0, [r3, #0]
   11be6:	bd08      	pop	{r3, pc}
   11be8:	20001f24 	.word	0x20001f24

00011bec <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11bec:	2000      	movs	r0, #0
   11bee:	4770      	bx	lr

00011bf0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bf4:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11bf6:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11bf8:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11bfa:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11bfe:	2900      	cmp	r1, #0
   11c00:	d04f      	beq.n	11ca2 <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11c02:	4b55      	ldr	r3, [pc, #340]	; (11d58 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11c04:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11c08:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11c0c:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11c10:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11c12:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11c14:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11c18:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11c1a:	f000 8095 	beq.w	11d48 <_usb_d_dev_in_next+0x158>
   11c1e:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11c22:	f895 c013 	ldrb.w	ip, [r5, #19]
   11c26:	401a      	ands	r2, r3
   11c28:	b292      	uxth	r2, r2
   11c2a:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11c2e:	0163      	lsls	r3, r4, #5
   11c30:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11c34:	2602      	movs	r6, #2
   11c36:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11c3a:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11c3c:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11c3e:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11c40:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11c42:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11c44:	d235      	bcs.n	11cb2 <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11c46:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11c48:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11c4c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11c4e:	d05e      	beq.n	11d0e <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11c50:	682b      	ldr	r3, [r5, #0]
   11c52:	68e8      	ldr	r0, [r5, #12]
   11c54:	4576      	cmp	r6, lr
   11c56:	bf28      	it	cs
   11c58:	4676      	movcs	r6, lr
   11c5a:	4419      	add	r1, r3
   11c5c:	4632      	mov	r2, r6
   11c5e:	f00c fb17 	bl	1e290 <memcpy>
	bank->ADDR.reg          = addr;
   11c62:	4b3d      	ldr	r3, [pc, #244]	; (11d58 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11c64:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11c66:	0162      	lsls	r2, r4, #5
   11c68:	1899      	adds	r1, r3, r2
   11c6a:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11c6c:	4413      	add	r3, r2
   11c6e:	6959      	ldr	r1, [r3, #20]
   11c70:	f366 010d 	bfi	r1, r6, #0, #14
   11c74:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11c76:	6959      	ldr	r1, [r3, #20]
   11c78:	f36f 319b 	bfc	r1, #14, #14
   11c7c:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11c7e:	b947      	cbnz	r7, 11c92 <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11c80:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11c84:	f1b8 0f01 	cmp.w	r8, #1
   11c88:	bf14      	ite	ne
   11c8a:	224a      	movne	r2, #74	; 0x4a
   11c8c:	224e      	moveq	r2, #78	; 0x4e
   11c8e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11c92:	0164      	lsls	r4, r4, #5
   11c94:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11c98:	2380      	movs	r3, #128	; 0x80
   11c9a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ca2:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ca6:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11caa:	f00c 0807 	and.w	r8, ip, #7
   11cae:	460a      	mov	r2, r1
   11cb0:	e7c3      	b.n	11c3a <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   11cb2:	f01c 0f10 	tst.w	ip, #16
   11cb6:	d11a      	bne.n	11cee <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11cb8:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   11cba:	f1b8 0f01 	cmp.w	r8, #1
   11cbe:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11cc2:	bf0c      	ite	eq
   11cc4:	234b      	moveq	r3, #75	; 0x4b
   11cc6:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   11cc8:	4596      	cmp	lr, r2
   11cca:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   11cce:	d02c      	beq.n	11d2a <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11cd0:	28ff      	cmp	r0, #255	; 0xff
   11cd2:	d028      	beq.n	11d26 <_usb_d_dev_in_next+0x136>
   11cd4:	7ceb      	ldrb	r3, [r5, #19]
   11cd6:	065a      	lsls	r2, r3, #25
   11cd8:	d525      	bpl.n	11d26 <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   11cda:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11cde:	491f      	ldr	r1, [pc, #124]	; (11d5c <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   11ce0:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11ce2:	68aa      	ldr	r2, [r5, #8]
   11ce4:	690b      	ldr	r3, [r1, #16]
}
   11ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11cea:	2100      	movs	r1, #0
   11cec:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   11cee:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11cf0:	4b1b      	ldr	r3, [pc, #108]	; (11d60 <_usb_d_dev_in_next+0x170>)
   11cf2:	0162      	lsls	r2, r4, #5
   11cf4:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   11cf6:	f36f 1104 	bfc	r1, #4, #1
   11cfa:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11cfc:	6859      	ldr	r1, [r3, #4]
   11cfe:	f36f 010d 	bfc	r1, #0, #14
   11d02:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11d04:	6859      	ldr	r1, [r3, #4]
   11d06:	f36f 319b 	bfc	r1, #14, #14
   11d0a:	6059      	str	r1, [r3, #4]
   11d0c:	e7b7      	b.n	11c7e <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   11d0e:	4b12      	ldr	r3, [pc, #72]	; (11d58 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11d10:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   11d12:	0162      	lsls	r2, r4, #5
   11d14:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11d16:	4401      	add	r1, r0
   11d18:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   11d1c:	bf28      	it	cs
   11d1e:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   11d22:	6129      	str	r1, [r5, #16]
   11d24:	e7a2      	b.n	11c6c <_usb_d_dev_in_next+0x7c>
   11d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   11d2a:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11d2c:	4a0b      	ldr	r2, [pc, #44]	; (11d5c <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   11d2e:	f36f 1386 	bfc	r3, #6, #1
   11d32:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11d34:	68d3      	ldr	r3, [r2, #12]
   11d36:	4798      	blx	r3
   11d38:	2800      	cmp	r0, #0
   11d3a:	d1f4      	bne.n	11d26 <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   11d3c:	7ceb      	ldrb	r3, [r5, #19]
   11d3e:	7ca8      	ldrb	r0, [r5, #18]
   11d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11d44:	74eb      	strb	r3, [r5, #19]
   11d46:	e7c3      	b.n	11cd0 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11d48:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11d4c:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11d50:	f00c 0807 	and.w	r8, ip, #7
   11d54:	e76b      	b.n	11c2e <_usb_d_dev_in_next+0x3e>
   11d56:	bf00      	nop
   11d58:	2000221c 	.word	0x2000221c
   11d5c:	20001fec 	.word	0x20001fec
   11d60:	2000222c 	.word	0x2000222c

00011d64 <_usb_d_dev_out_next>:
{
   11d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11d68:	7c85      	ldrb	r5, [r0, #18]
{
   11d6a:	b083      	sub	sp, #12
   11d6c:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d6e:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11d70:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d74:	2900      	cmp	r1, #0
   11d76:	f000 8085 	beq.w	11e84 <_usb_d_dev_out_next+0x120>
   11d7a:	4b76      	ldr	r3, [pc, #472]	; (11f54 <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11d7c:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d7e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11d82:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11d84:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d88:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11d8a:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11d8c:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d8e:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11d92:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11d96:	f000 80d7 	beq.w	11f48 <_usb_d_dev_out_next+0x1e4>
   11d9a:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11d9c:	7cc2      	ldrb	r2, [r0, #19]
   11d9e:	b2b6      	uxth	r6, r6
   11da0:	ea09 0306 	and.w	r3, r9, r6
   11da4:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11da8:	0169      	lsls	r1, r5, #5
   11daa:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   11dae:	2001      	movs	r0, #1
   11db0:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   11db4:	0691      	lsls	r1, r2, #26
   11db6:	d512      	bpl.n	11dde <_usb_d_dev_out_next+0x7a>
   11db8:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11dbc:	f1be 0f00 	cmp.w	lr, #0
   11dc0:	d048      	beq.n	11e54 <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11dc2:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11dc4:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11dc6:	ebae 0200 	sub.w	r2, lr, r0
   11dca:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11dcc:	429a      	cmp	r2, r3
   11dce:	bf28      	it	cs
   11dd0:	461a      	movcs	r2, r3
   11dd2:	6823      	ldr	r3, [r4, #0]
   11dd4:	68e1      	ldr	r1, [r4, #12]
   11dd6:	4418      	add	r0, r3
   11dd8:	f00c fa5a 	bl	1e290 <memcpy>
   11ddc:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11dde:	6862      	ldr	r2, [r4, #4]
   11de0:	2a00      	cmp	r2, #0
   11de2:	d036      	beq.n	11e52 <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   11de4:	2f00      	cmp	r7, #0
   11de6:	d15b      	bne.n	11ea0 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   11de8:	68a3      	ldr	r3, [r4, #8]
   11dea:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   11dec:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   11dee:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   11df0:	d960      	bls.n	11eb4 <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   11df2:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   11df4:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   11df6:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   11df8:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   11dfa:	f140 808b 	bpl.w	11f14 <_usb_d_dev_out_next+0x1b0>
   11dfe:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   11e00:	4954      	ldr	r1, [pc, #336]	; (11f54 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11e02:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   11e04:	f841 3008 	str.w	r3, [r1, r8]
   11e08:	42b2      	cmp	r2, r6
   11e0a:	bf28      	it	cs
   11e0c:	4632      	movcs	r2, r6
   11e0e:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11e12:	eb01 0308 	add.w	r3, r1, r8
   11e16:	6858      	ldr	r0, [r3, #4]
   11e18:	f362 309b 	bfi	r0, r2, #14, #14
   11e1c:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11e1e:	685a      	ldr	r2, [r3, #4]
   11e20:	f36f 020d 	bfc	r2, #0, #14
   11e24:	605a      	str	r2, [r3, #4]
	if (!isr) {
   11e26:	b95f      	cbnz	r7, 11e40 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   11e28:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   11e2c:	bf08      	it	eq
   11e2e:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11e30:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   11e34:	bf0a      	itet	eq
   11e36:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   11e38:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   11e3a:	768f      	strbeq	r7, [r1, #26]
   11e3c:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11e40:	016d      	lsls	r5, r5, #5
   11e42:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   11e46:	2340      	movs	r3, #64	; 0x40
   11e48:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   11e4c:	b003      	add	sp, #12
   11e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e52:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11e54:	06d6      	lsls	r6, r2, #27
   11e56:	d54b      	bpl.n	11ef0 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   11e58:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11e5a:	493e      	ldr	r1, [pc, #248]	; (11f54 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11e5c:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   11e5e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11e62:	f043 0320 	orr.w	r3, r3, #32
   11e66:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11e68:	f841 2008 	str.w	r2, [r1, r8]
   11e6c:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11e70:	8a20      	ldrh	r0, [r4, #16]
   11e72:	685a      	ldr	r2, [r3, #4]
   11e74:	f360 329b 	bfi	r2, r0, #14, #14
   11e78:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11e7a:	685a      	ldr	r2, [r3, #4]
   11e7c:	f36f 020d 	bfc	r2, #0, #14
   11e80:	605a      	str	r2, [r3, #4]
   11e82:	e7d0      	b.n	11e26 <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e84:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e86:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e88:	f240 33ff 	movw	r3, #1023	; 0x3ff
   11e8c:	429e      	cmp	r6, r3
   11e8e:	d137      	bne.n	11f00 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e90:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e92:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   11e96:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11e98:	46b9      	mov	r9, r7
   11e9a:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11e9e:	e789      	b.n	11db4 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   11ea0:	8a21      	ldrh	r1, [r4, #16]
   11ea2:	4299      	cmp	r1, r3
   11ea4:	d9a0      	bls.n	11de8 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   11ea6:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11ea8:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   11eaa:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   11eae:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   11eb0:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11eb2:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   11eb4:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11eb8:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   11ebc:	bf0c      	ite	eq
   11ebe:	232d      	moveq	r3, #45	; 0x2d
   11ec0:	2325      	movne	r3, #37	; 0x25
   11ec2:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   11ec6:	b915      	cbnz	r5, 11ece <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   11ec8:	4b22      	ldr	r3, [pc, #136]	; (11f54 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11eca:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   11ecc:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11ece:	7ca0      	ldrb	r0, [r4, #18]
   11ed0:	28ff      	cmp	r0, #255	; 0xff
   11ed2:	d0bb      	beq.n	11e4c <_usb_d_dev_out_next+0xe8>
   11ed4:	7ce3      	ldrb	r3, [r4, #19]
   11ed6:	065a      	lsls	r2, r3, #25
   11ed8:	d5b8      	bpl.n	11e4c <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   11eda:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11ede:	491e      	ldr	r1, [pc, #120]	; (11f58 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   11ee0:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11ee2:	690b      	ldr	r3, [r1, #16]
   11ee4:	68a2      	ldr	r2, [r4, #8]
   11ee6:	2100      	movs	r1, #0
}
   11ee8:	b003      	add	sp, #12
   11eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11eee:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   11ef0:	b117      	cbz	r7, 11ef8 <_usb_d_dev_out_next+0x194>
   11ef2:	8a22      	ldrh	r2, [r4, #16]
   11ef4:	429a      	cmp	r2, r3
   11ef6:	d8d6      	bhi.n	11ea6 <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   11ef8:	68a3      	ldr	r3, [r4, #8]
   11efa:	4453      	add	r3, sl
   11efc:	60a3      	str	r3, [r4, #8]
   11efe:	e7d9      	b.n	11eb4 <_usb_d_dev_out_next+0x150>
   11f00:	3e01      	subs	r6, #1
   11f02:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f04:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f08:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f0a:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11f0c:	4689      	mov	r9, r1
   11f0e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11f12:	e74f      	b.n	11db4 <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   11f14:	8a20      	ldrh	r0, [r4, #16]
   11f16:	4282      	cmp	r2, r0
   11f18:	d905      	bls.n	11f26 <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   11f1a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   11f1e:	d90e      	bls.n	11f3e <_usb_d_dev_out_next+0x1da>
   11f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   11f24:	e005      	b.n	11f32 <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   11f26:	bf3c      	itt	cc
   11f28:	f041 0120 	orrcc.w	r1, r1, #32
   11f2c:	74e1      	strbcc	r1, [r4, #19]
   11f2e:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11f32:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   11f34:	4907      	ldr	r1, [pc, #28]	; (11f54 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11f36:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   11f38:	f841 3008 	str.w	r3, [r1, r8]
   11f3c:	e769      	b.n	11e12 <_usb_d_dev_out_next+0xae>
   11f3e:	ea22 0206 	bic.w	r2, r2, r6
   11f42:	f3c2 020d 	ubfx	r2, r2, #0, #14
   11f46:	e7f4      	b.n	11f32 <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f48:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   11f4a:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f4e:	f002 0b07 	and.w	fp, r2, #7
   11f52:	e729      	b.n	11da8 <_usb_d_dev_out_next+0x44>
   11f54:	2000221c 	.word	0x2000221c
   11f58:	20001fec 	.word	0x20001fec

00011f5c <_usb_d_dev_handler>:
{
   11f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11f60:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   11f64:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11f66:	8c16      	ldrh	r6, [r2, #32]
   11f68:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   11f6a:	2e00      	cmp	r6, #0
   11f6c:	f000 812c 	beq.w	121c8 <_usb_d_dev_handler+0x26c>
   11f70:	4dc4      	ldr	r5, [pc, #784]	; (12284 <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   11f72:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   11f74:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   11f76:	7ca8      	ldrb	r0, [r5, #18]
   11f78:	28ff      	cmp	r0, #255	; 0xff
   11f7a:	d030      	beq.n	11fde <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   11f7c:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   11f80:	fa07 f203 	lsl.w	r2, r7, r3
   11f84:	4232      	tst	r2, r6
   11f86:	d02a      	beq.n	11fde <_usb_d_dev_handler+0x82>
   11f88:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   11f8c:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11f90:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   11f92:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11f96:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   11f9a:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11f9c:	46c1      	mov	r9, r8
	if (flags) {
   11f9e:	d01e      	beq.n	11fde <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   11fa0:	49b9      	ldr	r1, [pc, #740]	; (12288 <_usb_d_dev_handler+0x32c>)
   11fa2:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   11fa6:	eb0a 0c04 	add.w	ip, sl, r4
   11faa:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   11fae:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   11fb2:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   11fb6:	2901      	cmp	r1, #1
   11fb8:	f000 80f4 	beq.w	121a4 <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   11fbc:	f01b 0f80 	tst.w	fp, #128	; 0x80
   11fc0:	d115      	bne.n	11fee <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   11fc2:	f013 0120 	ands.w	r1, r3, #32
   11fc6:	d15a      	bne.n	1207e <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   11fc8:	f013 0f04 	tst.w	r3, #4
   11fcc:	f040 8098 	bne.w	12100 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   11fd0:	07d9      	lsls	r1, r3, #31
   11fd2:	f100 80e2 	bmi.w	1219a <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   11fd6:	f00b 0107 	and.w	r1, fp, #7
   11fda:	2901      	cmp	r1, #1
   11fdc:	d058      	beq.n	12090 <_usb_d_dev_handler+0x134>
   11fde:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   11fe0:	2c1b      	cmp	r4, #27
   11fe2:	f105 0514 	add.w	r5, r5, #20
   11fe6:	d1c6      	bne.n	11f76 <_usb_d_dev_handler+0x1a>
}
   11fe8:	b001      	add	sp, #4
   11fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   11fee:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   11ff2:	f040 8143 	bne.w	1227c <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   11ff6:	f013 0f08 	tst.w	r3, #8
   11ffa:	f040 8189 	bne.w	12310 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   11ffe:	0799      	lsls	r1, r3, #30
   12000:	f100 8137 	bmi.w	12272 <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   12004:	f00b 0107 	and.w	r1, fp, #7
   12008:	2901      	cmp	r1, #1
   1200a:	d1e8      	bne.n	11fde <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   1200c:	0759      	lsls	r1, r3, #29
   1200e:	f100 8241 	bmi.w	12494 <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12012:	06db      	lsls	r3, r3, #27
   12014:	d5e3      	bpl.n	11fde <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12016:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1201a:	d011      	beq.n	12040 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1201c:	499a      	ldr	r1, [pc, #616]	; (12288 <_usb_d_dev_handler+0x32c>)
   1201e:	eb0a 0304 	add.w	r3, sl, r4
   12022:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12026:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1202a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1202e:	f36f 1186 	bfc	r1, #6, #1
   12032:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12036:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12038:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1203c:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12040:	4b91      	ldr	r3, [pc, #580]	; (12288 <_usb_d_dev_handler+0x32c>)
   12042:	eb0a 0104 	add.w	r1, sl, r4
   12046:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   1204a:	4b90      	ldr	r3, [pc, #576]	; (1228c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   1204c:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12050:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12054:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12058:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1205c:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12060:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12064:	216f      	movs	r1, #111	; 0x6f
   12066:	f88e c00a 	strb.w	ip, [lr, #10]
   1206a:	f88e c01a 	strb.w	ip, [lr, #26]
   1206e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12072:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12076:	4b84      	ldr	r3, [pc, #528]	; (12288 <_usb_d_dev_handler+0x32c>)
   12078:	689b      	ldr	r3, [r3, #8]
   1207a:	4798      	blx	r3
   1207c:	e7af      	b.n	11fde <_usb_d_dev_handler+0x82>
   1207e:	68aa      	ldr	r2, [r5, #8]
   12080:	2320      	movs	r3, #32
   12082:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12086:	4b80      	ldr	r3, [pc, #512]	; (12288 <_usb_d_dev_handler+0x32c>)
   12088:	2101      	movs	r1, #1
   1208a:	691b      	ldr	r3, [r3, #16]
   1208c:	4798      	blx	r3
   1208e:	e7a6      	b.n	11fde <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12090:	0719      	lsls	r1, r3, #28
   12092:	f100 80fd 	bmi.w	12290 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12096:	06db      	lsls	r3, r3, #27
   12098:	d5a1      	bpl.n	11fde <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1209a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1209e:	d011      	beq.n	120c4 <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   120a0:	4979      	ldr	r1, [pc, #484]	; (12288 <_usb_d_dev_handler+0x32c>)
   120a2:	eb0a 0304 	add.w	r3, sl, r4
   120a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   120aa:	f04f 0e80 	mov.w	lr, #128	; 0x80
   120ae:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   120b2:	f36f 1186 	bfc	r1, #6, #1
   120b6:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   120ba:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   120bc:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   120c0:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   120c4:	4b70      	ldr	r3, [pc, #448]	; (12288 <_usb_d_dev_handler+0x32c>)
   120c6:	eb0a 0104 	add.w	r1, sl, r4
   120ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   120ce:	4b6f      	ldr	r3, [pc, #444]	; (1228c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   120d0:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   120d4:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   120d8:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   120dc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   120e0:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   120e4:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   120e6:	2100      	movs	r1, #0
   120e8:	f88e 100a 	strb.w	r1, [lr, #10]
   120ec:	f88e 101a 	strb.w	r1, [lr, #26]
   120f0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   120f4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   120f8:	4b63      	ldr	r3, [pc, #396]	; (12288 <_usb_d_dev_handler+0x32c>)
   120fa:	689b      	ldr	r3, [r3, #8]
   120fc:	4798      	blx	r3
   120fe:	e76e      	b.n	11fde <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12100:	4b62      	ldr	r3, [pc, #392]	; (1228c <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12102:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   12106:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12108:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   1210c:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12110:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12114:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12116:	d07c      	beq.n	12212 <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   12118:	f013 0302 	ands.w	r3, r3, #2
   1211c:	d032      	beq.n	12184 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1211e:	f89e 100a 	ldrb.w	r1, [lr, #10]
   12122:	f36f 0141 	bfc	r1, #1, #1
   12126:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1212a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1212e:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12132:	2204      	movs	r2, #4
   12134:	2901      	cmp	r1, #1
   12136:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1213a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1213e:	f47f af4e 	bne.w	11fde <_usb_d_dev_handler+0x82>
   12142:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12146:	f43f af4a 	beq.w	11fde <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   1214a:	494f      	ldr	r1, [pc, #316]	; (12288 <_usb_d_dev_handler+0x32c>)
   1214c:	eb0a 0204 	add.w	r2, sl, r4
   12150:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   12154:	3220      	adds	r2, #32
   12156:	79d1      	ldrb	r1, [r2, #7]
   12158:	09c9      	lsrs	r1, r1, #7
   1215a:	f43f af40 	beq.w	11fde <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1215e:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12160:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12164:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12168:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1216c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12170:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12172:	4b45      	ldr	r3, [pc, #276]	; (12288 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12174:	f36f 1186 	bfc	r1, #6, #1
   12178:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1217a:	691b      	ldr	r3, [r3, #16]
   1217c:	68aa      	ldr	r2, [r5, #8]
   1217e:	2100      	movs	r1, #0
   12180:	4798      	blx	r3
   12182:	e72c      	b.n	11fde <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   12184:	4941      	ldr	r1, [pc, #260]	; (1228c <_usb_d_dev_handler+0x330>)
   12186:	1888      	adds	r0, r1, r2
   12188:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1218c:	2104      	movs	r1, #4
   1218e:	7283      	strb	r3, [r0, #10]
   12190:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12194:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12198:	e721      	b.n	11fde <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   1219a:	2101      	movs	r1, #1
   1219c:	4628      	mov	r0, r5
   1219e:	f7ff fde1 	bl	11d64 <_usb_d_dev_out_next>
   121a2:	e71c      	b.n	11fde <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   121a4:	f013 0f10 	tst.w	r3, #16
   121a8:	f040 80e0 	bne.w	1236c <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   121ac:	065a      	lsls	r2, r3, #25
   121ae:	f100 80e7 	bmi.w	12380 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   121b2:	069b      	lsls	r3, r3, #26
   121b4:	f57f af13 	bpl.w	11fde <_usb_d_dev_handler+0x82>
   121b8:	2320      	movs	r3, #32
   121ba:	68aa      	ldr	r2, [r5, #8]
   121bc:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   121c0:	4b31      	ldr	r3, [pc, #196]	; (12288 <_usb_d_dev_handler+0x32c>)
   121c2:	691b      	ldr	r3, [r3, #16]
   121c4:	4798      	blx	r3
   121c6:	e70a      	b.n	11fde <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   121c8:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   121ca:	8b13      	ldrh	r3, [r2, #24]
   121cc:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   121ce:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   121d0:	f013 0004 	ands.w	r0, r3, #4
   121d4:	f040 80dc 	bne.w	12390 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   121d8:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   121dc:	f040 80e0 	bne.w	123a0 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   121e0:	0618      	lsls	r0, r3, #24
   121e2:	f100 8140 	bmi.w	12466 <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   121e6:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   121ea:	f040 8191 	bne.w	12510 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   121ee:	f013 0108 	ands.w	r1, r3, #8
   121f2:	f040 819e 	bne.w	12532 <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   121f6:	07db      	lsls	r3, r3, #31
   121f8:	f57f aeba 	bpl.w	11f70 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   121fc:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12200:	4821      	ldr	r0, [pc, #132]	; (12288 <_usb_d_dev_handler+0x32c>)
   12202:	8393      	strh	r3, [r2, #28]
   12204:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12206:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12208:	2570      	movs	r5, #112	; 0x70
   1220a:	2004      	movs	r0, #4
   1220c:	8315      	strh	r5, [r2, #24]
   1220e:	4623      	mov	r3, r4
   12210:	e0de      	b.n	123d0 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12212:	f013 0f01 	tst.w	r3, #1
   12216:	f43f af7f 	beq.w	12118 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1221a:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1221e:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12222:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12226:	f04f 0104 	mov.w	r1, #4
   1222a:	f88e 300a 	strb.w	r3, [lr, #10]
   1222e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12232:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12236:	f43f aed2 	beq.w	11fde <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1223a:	4b13      	ldr	r3, [pc, #76]	; (12288 <_usb_d_dev_handler+0x32c>)
   1223c:	eb0a 0104 	add.w	r1, sl, r4
   12240:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12244:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12248:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1224c:	2240      	movs	r2, #64	; 0x40
   1224e:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12252:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12256:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   1225a:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1225e:	4b0a      	ldr	r3, [pc, #40]	; (12288 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12260:	f36f 1286 	bfc	r2, #6, #1
   12264:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12268:	691b      	ldr	r3, [r3, #16]
   1226a:	68aa      	ldr	r2, [r5, #8]
   1226c:	2104      	movs	r1, #4
   1226e:	4798      	blx	r3
   12270:	e6b5      	b.n	11fde <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   12272:	2101      	movs	r1, #1
   12274:	4628      	mov	r0, r5
   12276:	f7ff fcbb 	bl	11bf0 <_usb_d_dev_in_next>
   1227a:	e6b0      	b.n	11fde <_usb_d_dev_handler+0x82>
   1227c:	68aa      	ldr	r2, [r5, #8]
   1227e:	2340      	movs	r3, #64	; 0x40
   12280:	e6ff      	b.n	12082 <_usb_d_dev_handler+0x126>
   12282:	bf00      	nop
   12284:	20002000 	.word	0x20002000
   12288:	20001fec 	.word	0x20001fec
   1228c:	2000221c 	.word	0x2000221c
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12290:	4bc3      	ldr	r3, [pc, #780]	; (125a0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12292:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12296:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12298:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1229c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122a0:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   122a2:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122a4:	f000 8098 	beq.w	123d8 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   122a8:	f013 0302 	ands.w	r3, r3, #2
   122ac:	d053      	beq.n	12356 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   122ae:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122b2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   122b6:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122ba:	2208      	movs	r2, #8
   122bc:	f88e 101a 	strb.w	r1, [lr, #26]
   122c0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122c4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   122c8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   122cc:	f43f ae87 	beq.w	11fde <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   122d0:	4ab4      	ldr	r2, [pc, #720]	; (125a4 <_usb_d_dev_handler+0x648>)
   122d2:	eb0a 0e04 	add.w	lr, sl, r4
   122d6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   122da:	f10e 0e20 	add.w	lr, lr, #32
   122de:	f89e 1007 	ldrb.w	r1, [lr, #7]
   122e2:	09c9      	lsrs	r1, r1, #7
   122e4:	f47f ae7b 	bne.w	11fde <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122e8:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   122ea:	f04f 0c40 	mov.w	ip, #64	; 0x40
   122ee:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122f2:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122f6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   122fa:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122fe:	4ba9      	ldr	r3, [pc, #676]	; (125a4 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12300:	f361 1286 	bfi	r2, r1, #6, #1
   12304:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12308:	691b      	ldr	r3, [r3, #16]
   1230a:	68aa      	ldr	r2, [r5, #8]
   1230c:	4798      	blx	r3
   1230e:	e666      	b.n	11fde <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12310:	4ba3      	ldr	r3, [pc, #652]	; (125a0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12312:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   12316:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12318:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1231c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12320:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12324:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12326:	d07a      	beq.n	1241e <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   12328:	f013 0302 	ands.w	r3, r3, #2
   1232c:	d013      	beq.n	12356 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1232e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12332:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12336:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1233a:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1233e:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12342:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12344:	f88e 101a 	strb.w	r1, [lr, #26]
   12348:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1234c:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12350:	f47f ae45 	bne.w	11fde <_usb_d_dev_handler+0x82>
   12354:	e7b8      	b.n	122c8 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   12356:	4992      	ldr	r1, [pc, #584]	; (125a0 <_usb_d_dev_handler+0x644>)
   12358:	1888      	adds	r0, r1, r2
   1235a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1235e:	2108      	movs	r1, #8
   12360:	7683      	strb	r3, [r0, #26]
   12362:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12366:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   1236a:	e638      	b.n	11fde <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   1236c:	f00b 0307 	and.w	r3, fp, #7
   12370:	2b01      	cmp	r3, #1
   12372:	d07e      	beq.n	12472 <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12374:	2310      	movs	r3, #16
   12376:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   1237a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   1237e:	e62e      	b.n	11fde <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12380:	2340      	movs	r3, #64	; 0x40
   12382:	68aa      	ldr	r2, [r5, #8]
   12384:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12388:	4b86      	ldr	r3, [pc, #536]	; (125a4 <_usb_d_dev_handler+0x648>)
   1238a:	691b      	ldr	r3, [r3, #16]
   1238c:	4798      	blx	r3
   1238e:	e626      	b.n	11fde <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12390:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   12392:	4b84      	ldr	r3, [pc, #528]	; (125a4 <_usb_d_dev_handler+0x648>)
   12394:	8391      	strh	r1, [r2, #28]
   12396:	681b      	ldr	r3, [r3, #0]
}
   12398:	b001      	add	sp, #4
   1239a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   1239e:	4718      	bx	r3
   123a0:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   123a4:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   123a6:	4b7e      	ldr	r3, [pc, #504]	; (125a0 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   123a8:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   123aa:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   123ac:	8314      	strh	r4, [r2, #24]
   123ae:	891a      	ldrh	r2, [r3, #8]
   123b0:	f002 020f 	and.w	r2, r2, #15
   123b4:	2a03      	cmp	r2, #3
   123b6:	f000 8128 	beq.w	1260a <_usb_d_dev_handler+0x6ae>
   123ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   123bc:	f002 020f 	and.w	r2, r2, #15
   123c0:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   123c2:	bf18      	it	ne
   123c4:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   123c6:	f000 811f 	beq.w	12608 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   123ca:	4b76      	ldr	r3, [pc, #472]	; (125a4 <_usb_d_dev_handler+0x648>)
   123cc:	685b      	ldr	r3, [r3, #4]
   123ce:	2003      	movs	r0, #3
}
   123d0:	b001      	add	sp, #4
   123d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   123d6:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123d8:	07d9      	lsls	r1, r3, #31
   123da:	f57f af65 	bpl.w	122a8 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123de:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123e2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   123e6:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123ea:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123ec:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123f0:	f88e 101a 	strb.w	r1, [lr, #26]
   123f4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123f8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123fc:	f43f adef 	beq.w	11fde <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12400:	4a68      	ldr	r2, [pc, #416]	; (125a4 <_usb_d_dev_handler+0x648>)
   12402:	eb0a 0104 	add.w	r1, sl, r4
   12406:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1240a:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1240e:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12410:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12414:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12418:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1241c:	e71d      	b.n	1225a <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1241e:	f013 0f01 	tst.w	r3, #1
   12422:	d081      	beq.n	12328 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12424:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12428:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1242c:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12430:	f04f 0108 	mov.w	r1, #8
   12434:	f88e 301a 	strb.w	r3, [lr, #26]
   12438:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1243c:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12440:	f43f adcd 	beq.w	11fde <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12444:	4b57      	ldr	r3, [pc, #348]	; (125a4 <_usb_d_dev_handler+0x648>)
   12446:	eb0a 0104 	add.w	r1, sl, r4
   1244a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1244e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12452:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12456:	2280      	movs	r2, #128	; 0x80
   12458:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1245c:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12460:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   12464:	e6f9      	b.n	1225a <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   12466:	4b4f      	ldr	r3, [pc, #316]	; (125a4 <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12468:	2080      	movs	r0, #128	; 0x80
   1246a:	685b      	ldr	r3, [r3, #4]
   1246c:	8390      	strh	r0, [r2, #28]
   1246e:	2005      	movs	r0, #5
   12470:	e7ae      	b.n	123d0 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12472:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12476:	f43f ade3 	beq.w	12040 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1247a:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   1247e:	f36f 1386 	bfc	r3, #6, #1
   12482:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12486:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12488:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1248a:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1248e:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   12492:	e5d5      	b.n	12040 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12494:	4b42      	ldr	r3, [pc, #264]	; (125a0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12496:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1249a:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1249c:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   124a0:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124a4:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   124a6:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124a8:	f000 8080 	beq.w	125ac <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   124ac:	f013 0302 	ands.w	r3, r3, #2
   124b0:	f43f ae68 	beq.w	12184 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124b4:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124b8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   124bc:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124c0:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   124c2:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124c6:	f88e 100a 	strb.w	r1, [lr, #10]
   124ca:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124ce:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   124d2:	f43f ad84 	beq.w	11fde <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   124d6:	4a33      	ldr	r2, [pc, #204]	; (125a4 <_usb_d_dev_handler+0x648>)
   124d8:	eb0a 0104 	add.w	r1, sl, r4
   124dc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   124e0:	3120      	adds	r1, #32
   124e2:	79ca      	ldrb	r2, [r1, #7]
   124e4:	09d2      	lsrs	r2, r2, #7
   124e6:	f43f ad7a 	beq.w	11fde <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124ea:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   124ec:	f04f 0e80 	mov.w	lr, #128	; 0x80
   124f0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124f4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124f8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   124fc:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   124fe:	4b29      	ldr	r3, [pc, #164]	; (125a4 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12500:	f36f 1286 	bfc	r2, #6, #1
   12504:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12506:	691b      	ldr	r3, [r3, #16]
   12508:	68aa      	ldr	r2, [r5, #8]
   1250a:	2100      	movs	r1, #0
   1250c:	4798      	blx	r3
   1250e:	e566      	b.n	11fde <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12510:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12512:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   12516:	4924      	ldr	r1, [pc, #144]	; (125a8 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12518:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1251a:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1251c:	8310      	strh	r0, [r2, #24]
   1251e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   12520:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   12524:	2b03      	cmp	r3, #3
   12526:	d1fa      	bne.n	1251e <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   12528:	4b1e      	ldr	r3, [pc, #120]	; (125a4 <_usb_d_dev_handler+0x648>)
   1252a:	2100      	movs	r1, #0
   1252c:	685b      	ldr	r3, [r3, #4]
   1252e:	2002      	movs	r0, #2
   12530:	e74e      	b.n	123d0 <_usb_d_dev_handler+0x474>
   12532:	4e1c      	ldr	r6, [pc, #112]	; (125a4 <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12534:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12538:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1253a:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1253c:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12540:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   12542:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12544:	8291      	strh	r1, [r2, #20]
   12546:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12548:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   1254a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1254e:	e007      	b.n	12560 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   12550:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12552:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12556:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   1255a:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1255e:	d016      	beq.n	1258e <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12560:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12564:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12568:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1256c:	28ff      	cmp	r0, #255	; 0xff
   1256e:	f103 0320 	add.w	r3, r3, #32
   12572:	f104 0401 	add.w	r4, r4, #1
   12576:	d0eb      	beq.n	12550 <_usb_d_dev_handler+0x5f4>
   12578:	79da      	ldrb	r2, [r3, #7]
   1257a:	0651      	lsls	r1, r2, #25
   1257c:	d5e8      	bpl.n	12550 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   1257e:	f36f 1286 	bfc	r2, #6, #1
   12582:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12584:	69ea      	ldr	r2, [r5, #28]
   12586:	6933      	ldr	r3, [r6, #16]
   12588:	2103      	movs	r1, #3
   1258a:	4798      	blx	r3
   1258c:	e7e0      	b.n	12550 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1258e:	2100      	movs	r1, #0
   12590:	2260      	movs	r2, #96	; 0x60
   12592:	4803      	ldr	r0, [pc, #12]	; (125a0 <_usb_d_dev_handler+0x644>)
   12594:	f00b ff7a 	bl	1e48c <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   12598:	6873      	ldr	r3, [r6, #4]
   1259a:	2100      	movs	r1, #0
   1259c:	2001      	movs	r0, #1
   1259e:	e717      	b.n	123d0 <_usb_d_dev_handler+0x474>
   125a0:	2000221c 	.word	0x2000221c
   125a4:	20001fec 	.word	0x20001fec
   125a8:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   125ac:	07d9      	lsls	r1, r3, #31
   125ae:	f57f af7d 	bpl.w	124ac <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   125b2:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125b6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   125ba:	460a      	mov	r2, r1
   125bc:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125c0:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   125c2:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   125c6:	f88e 200a 	strb.w	r2, [lr, #10]
   125ca:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125ce:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   125d2:	f43f ad04 	beq.w	11fde <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   125d6:	4a11      	ldr	r2, [pc, #68]	; (1261c <_usb_d_dev_handler+0x6c0>)
   125d8:	eb0a 0e04 	add.w	lr, sl, r4
   125dc:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   125e0:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125e4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   125e6:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125ea:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125ee:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   125f2:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   125f6:	4b09      	ldr	r3, [pc, #36]	; (1261c <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   125f8:	f36f 1286 	bfc	r2, #6, #1
   125fc:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12600:	691b      	ldr	r3, [r3, #16]
   12602:	68aa      	ldr	r2, [r5, #8]
   12604:	4798      	blx	r3
   12606:	e4ea      	b.n	11fde <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   12608:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   1260a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   1260e:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12610:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   12612:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12614:	f3c1 110a 	ubfx	r1, r1, #4, #11
   12618:	e6d7      	b.n	123ca <_usb_d_dev_handler+0x46e>
   1261a:	bf00      	nop
   1261c:	20001fec 	.word	0x20001fec

00012620 <_usb_d_dev_init>:
{
   12620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   12624:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12628:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   1262a:	07db      	lsls	r3, r3, #31
   1262c:	d551      	bpl.n	126d2 <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1262e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   12632:	789c      	ldrb	r4, [r3, #2]
   12634:	f014 0401 	ands.w	r4, r4, #1
   12638:	d1fb      	bne.n	12632 <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   1263a:	4b45      	ldr	r3, [pc, #276]	; (12750 <_usb_d_dev_init+0x130>)
   1263c:	4a45      	ldr	r2, [pc, #276]	; (12754 <_usb_d_dev_init+0x134>)
   1263e:	601a      	str	r2, [r3, #0]
   12640:	461e      	mov	r6, r3
   12642:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   12644:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   12646:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   12648:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   1264a:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   1264c:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   1264e:	27ff      	movs	r7, #255	; 0xff
   12650:	e007      	b.n	12662 <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   12652:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12654:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12658:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   1265c:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12660:	d01d      	beq.n	1269e <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12662:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12666:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1266a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1266e:	28ff      	cmp	r0, #255	; 0xff
   12670:	f103 0320 	add.w	r3, r3, #32
   12674:	f104 0401 	add.w	r4, r4, #1
   12678:	d0eb      	beq.n	12652 <_usb_d_dev_init+0x32>
   1267a:	79da      	ldrb	r2, [r3, #7]
   1267c:	0651      	lsls	r1, r2, #25
   1267e:	d5e8      	bpl.n	12652 <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   12680:	f36f 1286 	bfc	r2, #6, #1
   12684:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12686:	69ea      	ldr	r2, [r5, #28]
   12688:	6933      	ldr	r3, [r6, #16]
   1268a:	2103      	movs	r1, #3
   1268c:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   1268e:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12690:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12694:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12698:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1269c:	d1e1      	bne.n	12662 <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1269e:	2260      	movs	r2, #96	; 0x60
   126a0:	2100      	movs	r1, #0
   126a2:	482d      	ldr	r0, [pc, #180]	; (12758 <_usb_d_dev_init+0x138>)
   126a4:	f00b fef2 	bl	1e48c <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   126a8:	4b2c      	ldr	r3, [pc, #176]	; (1275c <_usb_d_dev_init+0x13c>)
   126aa:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   126ac:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   126b0:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   126b4:	f013 031f 	ands.w	r3, r3, #31
   126b8:	d027      	beq.n	1270a <_usb_d_dev_init+0xea>
   126ba:	2b1f      	cmp	r3, #31
   126bc:	d025      	beq.n	1270a <_usb_d_dev_init+0xea>
   126be:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   126c0:	b338      	cbz	r0, 12712 <_usb_d_dev_init+0xf2>
   126c2:	281f      	cmp	r0, #31
   126c4:	d025      	beq.n	12712 <_usb_d_dev_init+0xf2>
   126c6:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   126c8:	b332      	cbz	r2, 12718 <_usb_d_dev_init+0xf8>
   126ca:	2a07      	cmp	r2, #7
   126cc:	d024      	beq.n	12718 <_usb_d_dev_init+0xf8>
   126ce:	0311      	lsls	r1, r2, #12
   126d0:	e024      	b.n	1271c <_usb_d_dev_init+0xfc>
   126d2:	7893      	ldrb	r3, [r2, #2]
   126d4:	079f      	lsls	r7, r3, #30
   126d6:	d1fc      	bne.n	126d2 <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   126d8:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   126da:	079e      	lsls	r6, r3, #30
   126dc:	d50d      	bpl.n	126fa <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   126de:	7813      	ldrb	r3, [r2, #0]
   126e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   126e4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   126e6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126ea:	7893      	ldrb	r3, [r2, #2]
   126ec:	079d      	lsls	r5, r3, #30
   126ee:	d1fc      	bne.n	126ea <_usb_d_dev_init+0xca>
   126f0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126f4:	7893      	ldrb	r3, [r2, #2]
   126f6:	079c      	lsls	r4, r3, #30
   126f8:	d4fc      	bmi.n	126f4 <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   126fa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126fe:	2301      	movs	r3, #1
   12700:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12702:	7893      	ldrb	r3, [r2, #2]
   12704:	0798      	lsls	r0, r3, #30
   12706:	d1fc      	bne.n	12702 <_usb_d_dev_init+0xe2>
   12708:	e791      	b.n	1262e <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   1270a:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   1270e:	2800      	cmp	r0, #0
   12710:	d1d7      	bne.n	126c2 <_usb_d_dev_init+0xa2>
   12712:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   12714:	2a00      	cmp	r2, #0
   12716:	d1d8      	bne.n	126ca <_usb_d_dev_init+0xaa>
   12718:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   1271c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12720:	4303      	orrs	r3, r0
   12722:	430b      	orrs	r3, r1
   12724:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   12726:	78d3      	ldrb	r3, [r2, #3]
   12728:	f043 0303 	orr.w	r3, r3, #3
   1272c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   1272e:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12730:	2104      	movs	r1, #4
   12732:	f043 030c 	orr.w	r3, r3, #12
   12736:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12738:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1273a:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1273c:	7898      	ldrb	r0, [r3, #2]
   1273e:	f010 0003 	ands.w	r0, r0, #3
   12742:	d1fb      	bne.n	1273c <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   12744:	4a04      	ldr	r2, [pc, #16]	; (12758 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   12746:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   12748:	2201      	movs	r2, #1
   1274a:	811a      	strh	r2, [r3, #8]
}
   1274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12750:	20001fec 	.word	0x20001fec
   12754:	00011bed 	.word	0x00011bed
   12758:	2000221c 	.word	0x2000221c
   1275c:	00800084 	.word	0x00800084

00012760 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   12760:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12764:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   12766:	079b      	lsls	r3, r3, #30
   12768:	d124      	bne.n	127b4 <_usb_d_dev_enable+0x54>
{
   1276a:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1276c:	7893      	ldrb	r3, [r2, #2]
   1276e:	0798      	lsls	r0, r3, #30
   12770:	d1fc      	bne.n	1276c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   12772:	7813      	ldrb	r3, [r2, #0]
   12774:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   12776:	0799      	lsls	r1, r3, #30
   12778:	d407      	bmi.n	1278a <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   1277a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1277e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12780:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12784:	7893      	ldrb	r3, [r2, #2]
   12786:	079b      	lsls	r3, r3, #30
   12788:	d1fc      	bne.n	12784 <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1278a:	4b0c      	ldr	r3, [pc, #48]	; (127bc <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1278c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12790:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12794:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12798:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1279c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   127a0:	f240 218d 	movw	r1, #653	; 0x28d
   127a4:	6098      	str	r0, [r3, #8]
   127a6:	609e      	str	r6, [r3, #8]
   127a8:	609d      	str	r5, [r3, #8]
   127aa:	609c      	str	r4, [r3, #8]
   127ac:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   127ae:	2000      	movs	r0, #0
}
   127b0:	bc70      	pop	{r4, r5, r6}
   127b2:	4770      	bx	lr
		return -USB_ERR_DENIED;
   127b4:	f06f 0010 	mvn.w	r0, #16
   127b8:	4770      	bx	lr
   127ba:	bf00      	nop
   127bc:	e000e100 	.word	0xe000e100

000127c0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   127c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127c4:	8913      	ldrh	r3, [r2, #8]
   127c6:	f023 0301 	bic.w	r3, r3, #1
   127ca:	041b      	lsls	r3, r3, #16
   127cc:	0c1b      	lsrs	r3, r3, #16
   127ce:	8113      	strh	r3, [r2, #8]
   127d0:	4770      	bx	lr
   127d2:	bf00      	nop

000127d4 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   127d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   127d8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   127dc:	7298      	strb	r0, [r3, #10]
   127de:	4770      	bx	lr

000127e0 <_usb_d_dev_ep_init>:
{
   127e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   127e4:	f010 050f 	ands.w	r5, r0, #15
   127e8:	fa4f fc80 	sxtb.w	ip, r0
   127ec:	d02a      	beq.n	12844 <_usb_d_dev_ep_init+0x64>
   127ee:	f1bc 0f00 	cmp.w	ip, #0
   127f2:	bfb4      	ite	lt
   127f4:	1cab      	addlt	r3, r5, #2
   127f6:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   127f8:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   127fa:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   127fe:	d859      	bhi.n	128b4 <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12800:	009c      	lsls	r4, r3, #2
   12802:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 128bc <_usb_d_dev_ep_init+0xdc>
   12806:	18e6      	adds	r6, r4, r3
   12808:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   1280c:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12810:	2eff      	cmp	r6, #255	; 0xff
   12812:	d14b      	bne.n	128ac <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   12814:	b1d1      	cbz	r1, 1284c <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12816:	f1bc 0f00 	cmp.w	ip, #0
   1281a:	db3a      	blt.n	12892 <_usb_d_dev_ep_init+0xb2>
   1281c:	006f      	lsls	r7, r5, #1
   1281e:	197e      	adds	r6, r7, r5
   12820:	f8df 809c 	ldr.w	r8, [pc, #156]	; 128c0 <_usb_d_dev_ep_init+0xe0>
   12824:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12828:	bb4e      	cbnz	r6, 1287e <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   1282a:	4423      	add	r3, r4
   1282c:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   12830:	3101      	adds	r1, #1
   12832:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   12836:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   1283a:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   1283c:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   1283e:	2000      	movs	r0, #0
   12840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12844:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   12848:	462b      	mov	r3, r5
   1284a:	e7d9      	b.n	12800 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1284c:	b125      	cbz	r5, 12858 <_usb_d_dev_ep_init+0x78>
   1284e:	f1bc 0f00 	cmp.w	ip, #0
   12852:	db01      	blt.n	12858 <_usb_d_dev_ep_init+0x78>
   12854:	1cae      	adds	r6, r5, #2
   12856:	e000      	b.n	1285a <_usb_d_dev_ep_init+0x7a>
   12858:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   1285a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1285e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12862:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12866:	2eff      	cmp	r6, #255	; 0xff
   12868:	d120      	bne.n	128ac <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   1286a:	006f      	lsls	r7, r5, #1
   1286c:	197e      	adds	r6, r7, r5
   1286e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 128c0 <_usb_d_dev_ep_init+0xe0>
   12872:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12876:	b146      	cbz	r6, 1288a <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12878:	f1bc 0f00 	cmp.w	ip, #0
   1287c:	db0c      	blt.n	12898 <_usb_d_dev_ep_init+0xb8>
   1287e:	443d      	add	r5, r7
   12880:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   12884:	892d      	ldrh	r5, [r5, #8]
   12886:	4295      	cmp	r5, r2
   12888:	dacf      	bge.n	1282a <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   1288a:	f06f 0012 	mvn.w	r0, #18
   1288e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12892:	f8df 802c 	ldr.w	r8, [pc, #44]	; 128c0 <_usb_d_dev_ep_init+0xe0>
   12896:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12898:	442f      	add	r7, r5
   1289a:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   1289e:	687d      	ldr	r5, [r7, #4]
   128a0:	b115      	cbz	r5, 128a8 <_usb_d_dev_ep_init+0xc8>
   128a2:	897e      	ldrh	r6, [r7, #10]
   128a4:	4296      	cmp	r6, r2
   128a6:	dbf0      	blt.n	1288a <_usb_d_dev_ep_init+0xaa>
   128a8:	462e      	mov	r6, r5
   128aa:	e7be      	b.n	1282a <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   128ac:	f06f 0013 	mvn.w	r0, #19
   128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   128b4:	f06f 0011 	mvn.w	r0, #17
   128b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128bc:	20001fec 	.word	0x20001fec
   128c0:	000234f8 	.word	0x000234f8

000128c4 <_usb_d_dev_ep_deinit>:
{
   128c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   128c8:	f010 070f 	ands.w	r7, r0, #15
{
   128cc:	b082      	sub	sp, #8
   128ce:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   128d2:	d009      	beq.n	128e8 <_usb_d_dev_ep_deinit+0x24>
   128d4:	f1b9 0f00 	cmp.w	r9, #0
   128d8:	bfb4      	ite	lt
   128da:	1cbe      	addlt	r6, r7, #2
   128dc:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   128de:	2f02      	cmp	r7, #2
   128e0:	d903      	bls.n	128ea <_usb_d_dev_ep_deinit+0x26>
}
   128e2:	b002      	add	sp, #8
   128e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   128e8:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   128ea:	ea4f 0886 	mov.w	r8, r6, lsl #2
   128ee:	4d3d      	ldr	r5, [pc, #244]	; (129e4 <_usb_d_dev_ep_deinit+0x120>)
   128f0:	eb08 0306 	add.w	r3, r8, r6
   128f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   128f8:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   128fc:	29ff      	cmp	r1, #255	; 0xff
   128fe:	d0f0      	beq.n	128e2 <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12900:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12904:	224a      	movs	r2, #74	; 0x4a
   12906:	4604      	mov	r4, r0
   12908:	f88d 2005 	strb.w	r2, [sp, #5]
   1290c:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1290e:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12910:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12914:	d41b      	bmi.n	1294e <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12916:	f003 0307 	and.w	r3, r3, #7
   1291a:	2b01      	cmp	r3, #1
   1291c:	d050      	beq.n	129c0 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   1291e:	f1b9 0f00 	cmp.w	r9, #0
   12922:	db54      	blt.n	129ce <_usb_d_dev_ep_deinit+0x10a>
   12924:	0160      	lsls	r0, r4, #5
   12926:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   1292a:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   1292e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   12932:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   12936:	4446      	add	r6, r8
   12938:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   1293c:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   1293e:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12940:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   12944:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12948:	b002      	add	sp, #8
   1294a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1294e:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12952:	f103 0208 	add.w	r2, r3, #8
   12956:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12958:	f1b9 0f00 	cmp.w	r9, #0
   1295c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12960:	bfb5      	itete	lt
   12962:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12966:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1296a:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1296e:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12972:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12976:	0150      	lsls	r0, r2, #5
   12978:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1297c:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1297e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12982:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12986:	eb08 0306 	add.w	r3, r8, r6
   1298a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   1298e:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12992:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12996:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1299a:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1299e:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   129a0:	f103 0a20 	add.w	sl, r3, #32
   129a4:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   129a8:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   129aa:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   129ae:	4608      	mov	r0, r1
   129b0:	2103      	movs	r1, #3
   129b2:	4798      	blx	r3
   129b4:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   129b8:	f003 0307 	and.w	r3, r3, #7
   129bc:	2b01      	cmp	r3, #1
   129be:	d1ae      	bne.n	1291e <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   129c0:	0160      	lsls	r0, r4, #5
   129c2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   129c6:	2300      	movs	r3, #0
   129c8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   129cc:	e7b3      	b.n	12936 <_usb_d_dev_ep_deinit+0x72>
   129ce:	017f      	lsls	r7, r7, #5
   129d0:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   129d4:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   129d8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   129dc:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   129e0:	e7a9      	b.n	12936 <_usb_d_dev_ep_deinit+0x72>
   129e2:	bf00      	nop
   129e4:	20001fec 	.word	0x20001fec

000129e8 <_usb_d_dev_ep_enable>:
{
   129e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   129ea:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   129ec:	f010 000f 	ands.w	r0, r0, #15
   129f0:	d045      	beq.n	12a7e <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   129f2:	0142      	lsls	r2, r0, #5
   129f4:	2e00      	cmp	r6, #0
   129f6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   129fa:	bfb4      	ite	lt
   129fc:	1c83      	addlt	r3, r0, #2
   129fe:	4603      	movge	r3, r0
   12a00:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12a04:	4a84      	ldr	r2, [pc, #528]	; (12c18 <_usb_d_dev_ep_enable+0x230>)
   12a06:	1c59      	adds	r1, r3, #1
   12a08:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12a0c:	2802      	cmp	r0, #2
   12a0e:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12a10:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12a14:	f200 809f 	bhi.w	12b56 <_usb_d_dev_ep_enable+0x16e>
   12a18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12a1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12a20:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12a24:	2aff      	cmp	r2, #255	; 0xff
   12a26:	f000 8096 	beq.w	12b56 <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12a2a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12a2e:	4d7b      	ldr	r5, [pc, #492]	; (12c1c <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12a30:	f002 0e07 	and.w	lr, r2, #7
   12a34:	0140      	lsls	r0, r0, #5
   12a36:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12a3a:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12a3e:	d028      	beq.n	12a92 <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12a40:	2e00      	cmp	r6, #0
   12a42:	db65      	blt.n	12b10 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12a44:	0761      	lsls	r1, r4, #29
   12a46:	f040 80a4 	bne.w	12b92 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a4a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12a4c:	4b74      	ldr	r3, [pc, #464]	; (12c20 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12a4e:	f002 0207 	and.w	r2, r2, #7
   12a52:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12a56:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a58:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12a5c:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a60:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a64:	d97a      	bls.n	12b5c <_usb_d_dev_ep_enable+0x174>
   12a66:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12a6a:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a6c:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12a6e:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12a70:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a72:	607a      	str	r2, [r7, #4]
   12a74:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12a78:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12a7a:	4608      	mov	r0, r1
   12a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12a7e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12a82:	4968      	ldr	r1, [pc, #416]	; (12c24 <_usb_d_dev_ep_enable+0x23c>)
   12a84:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12a88:	f1a1 0214 	sub.w	r2, r1, #20
   12a8c:	b2e4      	uxtb	r4, r4
   12a8e:	4603      	mov	r3, r0
   12a90:	e7c2      	b.n	12a18 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12a92:	f014 0f77 	tst.w	r4, #119	; 0x77
   12a96:	d17c      	bne.n	12b92 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12a9a:	4a61      	ldr	r2, [pc, #388]	; (12c20 <_usb_d_dev_ep_enable+0x238>)
   12a9c:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12aa0:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12aa6:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12aaa:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12aae:	d94c      	bls.n	12b4a <_usb_d_dev_ep_enable+0x162>
   12ab0:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ab4:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12ab8:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12aba:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12abc:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12ac0:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12ac2:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ac4:	617b      	str	r3, [r7, #20]
   12ac6:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12aca:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ace:	7c8a      	ldrb	r2, [r1, #18]
   12ad0:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12ad2:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ad6:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12ada:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12adc:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12ade:	2000      	movs	r0, #0
   12ae0:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12ae2:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12ae4:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12ae6:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12aea:	6873      	ldr	r3, [r6, #4]
   12aec:	f367 339b 	bfi	r3, r7, #14, #14
   12af0:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12af2:	6872      	ldr	r2, [r6, #4]
   12af4:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12af8:	f360 020d 	bfi	r2, r0, #0, #14
   12afc:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12afe:	2510      	movs	r5, #16
   12b00:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b02:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12b06:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12b0a:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12b10:	f014 0f70 	tst.w	r4, #112	; 0x70
   12b14:	d13d      	bne.n	12b92 <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12b18:	0112      	lsls	r2, r2, #4
   12b1a:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12b1e:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12b22:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12b28:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b2c:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b30:	d91a      	bls.n	12b68 <_usb_d_dev_ep_enable+0x180>
   12b32:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12b36:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b38:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b3a:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12b3c:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b3e:	617a      	str	r2, [r7, #20]
   12b40:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12b44:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12b46:	4608      	mov	r0, r1
   12b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12b4e:	d923      	bls.n	12b98 <_usb_d_dev_ep_enable+0x1b0>
   12b50:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12b54:	e7ae      	b.n	12ab4 <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12b56:	f06f 0011 	mvn.w	r0, #17
   12b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b5c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12b60:	d908      	bls.n	12b74 <_usb_d_dev_ep_enable+0x18c>
   12b62:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12b66:	e780      	b.n	12a6a <_usb_d_dev_ep_enable+0x82>
   12b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12b6c:	d907      	bls.n	12b7e <_usb_d_dev_ep_enable+0x196>
   12b6e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12b72:	e7e0      	b.n	12b36 <_usb_d_dev_ep_enable+0x14e>
   12b74:	2980      	cmp	r1, #128	; 0x80
   12b76:	d907      	bls.n	12b88 <_usb_d_dev_ep_enable+0x1a0>
   12b78:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12b7c:	e775      	b.n	12a6a <_usb_d_dev_ep_enable+0x82>
   12b7e:	2b80      	cmp	r3, #128	; 0x80
   12b80:	d914      	bls.n	12bac <_usb_d_dev_ep_enable+0x1c4>
   12b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12b86:	e7d6      	b.n	12b36 <_usb_d_dev_ep_enable+0x14e>
   12b88:	2940      	cmp	r1, #64	; 0x40
   12b8a:	d914      	bls.n	12bb6 <_usb_d_dev_ep_enable+0x1ce>
   12b8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12b90:	e76b      	b.n	12a6a <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12b92:	f06f 0013 	mvn.w	r0, #19
   12b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b98:	2b80      	cmp	r3, #128	; 0x80
   12b9a:	d902      	bls.n	12ba2 <_usb_d_dev_ep_enable+0x1ba>
   12b9c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12ba0:	e788      	b.n	12ab4 <_usb_d_dev_ep_enable+0xcc>
   12ba2:	2b40      	cmp	r3, #64	; 0x40
   12ba4:	d90c      	bls.n	12bc0 <_usb_d_dev_ep_enable+0x1d8>
   12ba6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12baa:	e783      	b.n	12ab4 <_usb_d_dev_ep_enable+0xcc>
   12bac:	2b40      	cmp	r3, #64	; 0x40
   12bae:	d90c      	bls.n	12bca <_usb_d_dev_ep_enable+0x1e2>
   12bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12bb4:	e7bf      	b.n	12b36 <_usb_d_dev_ep_enable+0x14e>
   12bb6:	2920      	cmp	r1, #32
   12bb8:	d90c      	bls.n	12bd4 <_usb_d_dev_ep_enable+0x1ec>
   12bba:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12bbe:	e754      	b.n	12a6a <_usb_d_dev_ep_enable+0x82>
   12bc0:	2b20      	cmp	r3, #32
   12bc2:	d90c      	bls.n	12bde <_usb_d_dev_ep_enable+0x1f6>
   12bc4:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12bc8:	e774      	b.n	12ab4 <_usb_d_dev_ep_enable+0xcc>
   12bca:	2b20      	cmp	r3, #32
   12bcc:	d90c      	bls.n	12be8 <_usb_d_dev_ep_enable+0x200>
   12bce:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12bd2:	e7b0      	b.n	12b36 <_usb_d_dev_ep_enable+0x14e>
   12bd4:	2910      	cmp	r1, #16
   12bd6:	d90c      	bls.n	12bf2 <_usb_d_dev_ep_enable+0x20a>
   12bd8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12bdc:	e745      	b.n	12a6a <_usb_d_dev_ep_enable+0x82>
   12bde:	2b10      	cmp	r3, #16
   12be0:	d90d      	bls.n	12bfe <_usb_d_dev_ep_enable+0x216>
   12be2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12be6:	e765      	b.n	12ab4 <_usb_d_dev_ep_enable+0xcc>
   12be8:	2b10      	cmp	r3, #16
   12bea:	d90e      	bls.n	12c0a <_usb_d_dev_ep_enable+0x222>
   12bec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12bf0:	e7a1      	b.n	12b36 <_usb_d_dev_ep_enable+0x14e>
   12bf2:	2908      	cmp	r1, #8
   12bf4:	bf94      	ite	ls
   12bf6:	2100      	movls	r1, #0
   12bf8:	2101      	movhi	r1, #1
   12bfa:	0709      	lsls	r1, r1, #28
   12bfc:	e735      	b.n	12a6a <_usb_d_dev_ep_enable+0x82>
   12bfe:	2b08      	cmp	r3, #8
   12c00:	bf94      	ite	ls
   12c02:	2400      	movls	r4, #0
   12c04:	2401      	movhi	r4, #1
   12c06:	0724      	lsls	r4, r4, #28
   12c08:	e754      	b.n	12ab4 <_usb_d_dev_ep_enable+0xcc>
   12c0a:	2b08      	cmp	r3, #8
   12c0c:	bf94      	ite	ls
   12c0e:	2300      	movls	r3, #0
   12c10:	2301      	movhi	r3, #1
   12c12:	071a      	lsls	r2, r3, #28
   12c14:	e78f      	b.n	12b36 <_usb_d_dev_ep_enable+0x14e>
   12c16:	bf00      	nop
   12c18:	20001fec 	.word	0x20001fec
   12c1c:	2000221c 	.word	0x2000221c
   12c20:	0fffc000 	.word	0x0fffc000
   12c24:	20002000 	.word	0x20002000

00012c28 <_usb_d_dev_ep_stall>:
{
   12c28:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12c2a:	f010 000f 	ands.w	r0, r0, #15
{
   12c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12c30:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12c34:	d01e      	beq.n	12c74 <_usb_d_dev_ep_stall+0x4c>
   12c36:	2b00      	cmp	r3, #0
   12c38:	bfb4      	ite	lt
   12c3a:	1c83      	addlt	r3, r0, #2
   12c3c:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12c3e:	1c5c      	adds	r4, r3, #1
   12c40:	4a40      	ldr	r2, [pc, #256]	; (12d44 <_usb_d_dev_ep_stall+0x11c>)
   12c42:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12c46:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12c48:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12c4c:	d86d      	bhi.n	12d2a <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12c4e:	2901      	cmp	r1, #1
   12c50:	d014      	beq.n	12c7c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12c52:	b389      	cbz	r1, 12cb8 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c54:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12c56:	f003 030f 	and.w	r3, r3, #15
   12c5a:	015b      	lsls	r3, r3, #5
   12c5c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c60:	2210      	movs	r2, #16
   12c62:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12c66:	fa02 f305 	lsl.w	r3, r2, r5
   12c6a:	420b      	tst	r3, r1
   12c6c:	bf14      	ite	ne
   12c6e:	2001      	movne	r0, #1
   12c70:	2000      	moveq	r0, #0
   12c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12c74:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12c76:	4a34      	ldr	r2, [pc, #208]	; (12d48 <_usb_d_dev_ep_stall+0x120>)
   12c78:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12c7a:	d1ea      	bne.n	12c52 <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c7c:	4931      	ldr	r1, [pc, #196]	; (12d44 <_usb_d_dev_ep_stall+0x11c>)
   12c7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12c82:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c86:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c88:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c8c:	f002 020f 	and.w	r2, r2, #15
   12c90:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12c92:	2320      	movs	r3, #32
   12c94:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c98:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12c9a:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c9c:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12c9e:	b2db      	uxtb	r3, r3
   12ca0:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12ca4:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12ca8:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12cac:	f043 0308 	orr.w	r3, r3, #8
   12cb0:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   12cb4:	2000      	movs	r0, #0
   12cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12cb8:	009e      	lsls	r6, r3, #2
   12cba:	4c22      	ldr	r4, [pc, #136]	; (12d44 <_usb_d_dev_ep_stall+0x11c>)
   12cbc:	18f2      	adds	r2, r6, r3
   12cbe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12cc2:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12cc4:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   12cc8:	f002 020f 	and.w	r2, r2, #15
   12ccc:	0151      	lsls	r1, r2, #5
   12cce:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12cd2:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12cd4:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   12cd8:	4207      	tst	r7, r0
   12cda:	d01b      	beq.n	12d14 <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12cdc:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12cde:	2720      	movs	r7, #32
   12ce0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12ce4:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12ce6:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   12ce8:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12cec:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12cf0:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12cf4:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   12cf8:	423a      	tst	r2, r7
   12cfa:	d10d      	bne.n	12d18 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12cfc:	4433      	add	r3, r6
   12cfe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12d02:	3420      	adds	r4, #32
   12d04:	79e3      	ldrb	r3, [r4, #7]
   12d06:	f003 0207 	and.w	r2, r3, #7
   12d0a:	2a01      	cmp	r2, #1
   12d0c:	d010      	beq.n	12d30 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   12d0e:	f36f 03c3 	bfc	r3, #3, #1
   12d12:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   12d14:	2000      	movs	r0, #0
   12d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   12d18:	2201      	movs	r2, #1
   12d1a:	fa02 f505 	lsl.w	r5, r2, r5
   12d1e:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d20:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12d24:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   12d28:	e7e8      	b.n	12cfc <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   12d2a:	f06f 0011 	mvn.w	r0, #17
}
   12d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12d30:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   12d34:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   12d38:	d1ec      	bne.n	12d14 <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   12d3a:	f360 03c3 	bfi	r3, r0, #3, #1
   12d3e:	71e3      	strb	r3, [r4, #7]
   12d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d42:	bf00      	nop
   12d44:	20001fec 	.word	0x20001fec
   12d48:	20002000 	.word	0x20002000

00012d4c <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   12d4c:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   12d4e:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   12d52:	4a12      	ldr	r2, [pc, #72]	; (12d9c <_usb_d_dev_ep_read_req+0x50>)
   12d54:	0143      	lsls	r3, r0, #5
   12d56:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   12d58:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12d5a:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12d5c:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12d5e:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12d62:	d818      	bhi.n	12d96 <_usb_d_dev_ep_read_req+0x4a>
   12d64:	b1b9      	cbz	r1, 12d96 <_usb_d_dev_ep_read_req+0x4a>
   12d66:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12d6a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   12d6e:	2a11      	cmp	r2, #17
   12d70:	d10e      	bne.n	12d90 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12d72:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   12d76:	f012 0010 	ands.w	r0, r2, #16
   12d7a:	d007      	beq.n	12d8c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   12d7c:	686a      	ldr	r2, [r5, #4]
   12d7e:	682e      	ldr	r6, [r5, #0]
   12d80:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d82:	2210      	movs	r2, #16
   12d84:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   12d86:	4620      	mov	r0, r4
   12d88:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   12d8c:	bc70      	pop	{r4, r5, r6}
   12d8e:	4770      	bx	lr
		return -USB_ERR_FUNC;
   12d90:	f06f 0012 	mvn.w	r0, #18
   12d94:	e7fa      	b.n	12d8c <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   12d96:	f06f 0011 	mvn.w	r0, #17
   12d9a:	e7f7      	b.n	12d8c <_usb_d_dev_ep_read_req+0x40>
   12d9c:	2000221c 	.word	0x2000221c

00012da0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   12da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   12da4:	7a03      	ldrb	r3, [r0, #8]
   12da6:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12daa:	f013 030f 	ands.w	r3, r3, #15
{
   12dae:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12db0:	d03a      	beq.n	12e28 <_usb_d_dev_ep_trans+0x88>
   12db2:	f1b9 0f00 	cmp.w	r9, #0
   12db6:	bfb4      	ite	lt
   12db8:	1c9d      	addlt	r5, r3, #2
   12dba:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   12dbc:	4e5d      	ldr	r6, [pc, #372]	; (12f34 <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12dbe:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12dc2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   12dc6:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12dca:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12dcc:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   12dd0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12dd4:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   12dd6:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12dda:	d050      	beq.n	12e7e <_usb_d_dev_ep_trans+0xde>
   12ddc:	1e57      	subs	r7, r2, #1
   12dde:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   12de0:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   12de2:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   12de4:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   12de8:	f200 8091 	bhi.w	12f0e <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12dec:	6803      	ldr	r3, [r0, #0]
   12dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12df2:	d223      	bcs.n	12e3c <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   12df4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12df8:	eb0b 0305 	add.w	r3, fp, r5
   12dfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12e00:	6a1b      	ldr	r3, [r3, #32]
   12e02:	2b00      	cmp	r3, #0
   12e04:	f000 8092 	beq.w	12f2c <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   12e08:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   12e0c:	eb0b 0405 	add.w	r4, fp, r5
   12e10:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12e14:	f104 0220 	add.w	r2, r4, #32
   12e18:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   12e1c:	071b      	lsls	r3, r3, #28
   12e1e:	d530      	bpl.n	12e82 <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   12e20:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   12e22:	b007      	add	sp, #28
   12e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12e28:	4e42      	ldr	r6, [pc, #264]	; (12f34 <_usb_d_dev_ep_trans+0x194>)
   12e2a:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   12e2c:	f240 31ff 	movw	r1, #1023	; 0x3ff
   12e30:	428a      	cmp	r2, r1
   12e32:	d01d      	beq.n	12e70 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   12e34:	f106 0814 	add.w	r8, r6, #20
   12e38:	461d      	mov	r5, r3
   12e3a:	e7cf      	b.n	12ddc <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12e3c:	4c3e      	ldr	r4, [pc, #248]	; (12f38 <_usb_d_dev_ep_trans+0x198>)
   12e3e:	eb03 0e01 	add.w	lr, r3, r1
   12e42:	45a6      	cmp	lr, r4
   12e44:	d8d6      	bhi.n	12df4 <_usb_d_dev_ep_trans+0x54>
   12e46:	f013 0303 	ands.w	r3, r3, #3
   12e4a:	d1d3      	bne.n	12df4 <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   12e4c:	f1b9 0f00 	cmp.w	r9, #0
   12e50:	db60      	blt.n	12f14 <_usb_d_dev_ep_trans+0x174>
   12e52:	428a      	cmp	r2, r1
   12e54:	d8ce      	bhi.n	12df4 <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   12e56:	2f00      	cmp	r7, #0
   12e58:	d060      	beq.n	12f1c <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   12e5a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12e5e:	eb0b 0205 	add.w	r2, fp, r5
   12e62:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   12e66:	6a12      	ldr	r2, [r2, #32]
   12e68:	2a00      	cmp	r2, #0
   12e6a:	d050      	beq.n	12f0e <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   12e6c:	469a      	mov	sl, r3
   12e6e:	e7cd      	b.n	12e0c <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   12e70:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   12e72:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   12e74:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   12e78:	f106 0814 	add.w	r8, r6, #20
   12e7c:	e7b6      	b.n	12dec <_usb_d_dev_ep_trans+0x4c>
   12e7e:	4617      	mov	r7, r2
   12e80:	e7ae      	b.n	12de0 <_usb_d_dev_ep_trans+0x40>
   12e82:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   12e84:	a805      	add	r0, sp, #20
   12e86:	9202      	str	r2, [sp, #8]
   12e88:	f000 f8e0 	bl	1304c <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12e8c:	9a02      	ldr	r2, [sp, #8]
   12e8e:	9b01      	ldr	r3, [sp, #4]
   12e90:	79d0      	ldrb	r0, [r2, #7]
   12e92:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   12e96:	d131      	bne.n	12efc <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   12e98:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   12e9c:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   12ea0:	a805      	add	r0, sp, #20
   12ea2:	9303      	str	r3, [sp, #12]
   12ea4:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   12ea6:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   12ea8:	f000 f8d8 	bl	1305c <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   12eac:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   12eae:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   12eb0:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   12eb2:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   12eb6:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   12eb8:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   12ebc:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   12ec0:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   12ec4:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   12ec6:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   12ec8:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   12eca:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   12ece:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12ed0:	7a5b      	ldrb	r3, [r3, #9]
   12ed2:	b9c3      	cbnz	r3, 12f06 <_usb_d_dev_ep_trans+0x166>
   12ed4:	461f      	mov	r7, r3
   12ed6:	445d      	add	r5, fp
   12ed8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   12edc:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12ee0:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   12ee4:	f367 1304 	bfi	r3, r7, #4, #1
   12ee8:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   12eec:	4640      	mov	r0, r8
   12eee:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   12ef2:	db17      	blt.n	12f24 <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   12ef4:	f7fe ff36 	bl	11d64 <_usb_d_dev_out_next>
	return ERR_NONE;
   12ef8:	2000      	movs	r0, #0
   12efa:	e792      	b.n	12e22 <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   12efc:	a805      	add	r0, sp, #20
   12efe:	f000 f8ad 	bl	1305c <atomic_leave_critical>
		return USB_BUSY;
   12f02:	2001      	movs	r0, #1
   12f04:	e78d      	b.n	12e22 <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12f06:	fab7 f787 	clz	r7, r7
   12f0a:	097f      	lsrs	r7, r7, #5
   12f0c:	e7e3      	b.n	12ed6 <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   12f0e:	f06f 0011 	mvn.w	r0, #17
   12f12:	e786      	b.n	12e22 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   12f14:	469a      	mov	sl, r3
   12f16:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12f1a:	e777      	b.n	12e0c <_usb_d_dev_ep_trans+0x6c>
   12f1c:	46ba      	mov	sl, r7
   12f1e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12f22:	e773      	b.n	12e0c <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   12f24:	f7fe fe64 	bl	11bf0 <_usb_d_dev_in_next>
	return ERR_NONE;
   12f28:	2000      	movs	r0, #0
   12f2a:	e77a      	b.n	12e22 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   12f2c:	f06f 0012 	mvn.w	r0, #18
   12f30:	e777      	b.n	12e22 <_usb_d_dev_ep_trans+0x82>
   12f32:	bf00      	nop
   12f34:	20001fec 	.word	0x20001fec
   12f38:	20031fff 	.word	0x20031fff

00012f3c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   12f3c:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f3e:	f010 000f 	ands.w	r0, r0, #15
   12f42:	d117      	bne.n	12f74 <_usb_d_dev_ep_abort+0x38>
{
   12f44:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12f46:	0081      	lsls	r1, r0, #2
   12f48:	4d27      	ldr	r5, [pc, #156]	; (12fe8 <_usb_d_dev_ep_abort+0xac>)
   12f4a:	180a      	adds	r2, r1, r0
   12f4c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   12f50:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12f52:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12f56:	2625      	movs	r6, #37	; 0x25
   12f58:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12f5c:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12f5e:	f04f 064a 	mov.w	r6, #74	; 0x4a
   12f62:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12f66:	d003      	beq.n	12f70 <_usb_d_dev_ep_abort+0x34>
   12f68:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   12f6c:	0652      	lsls	r2, r2, #25
   12f6e:	d408      	bmi.n	12f82 <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   12f70:	b003      	add	sp, #12
   12f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f74:	2b00      	cmp	r3, #0
   12f76:	bfb4      	ite	lt
   12f78:	1c82      	addlt	r2, r0, #2
   12f7a:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   12f7c:	2802      	cmp	r0, #2
   12f7e:	d931      	bls.n	12fe4 <_usb_d_dev_ep_abort+0xa8>
   12f80:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12f82:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12f86:	f102 0608 	add.w	r6, r2, #8
   12f8a:	0177      	lsls	r7, r6, #5
	if (dir) {
   12f8c:	2b00      	cmp	r3, #0
   12f8e:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   12f92:	bfb5      	itete	lt
   12f94:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12f98:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12f9c:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12fa0:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   12fa4:	af02      	add	r7, sp, #8
   12fa6:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12faa:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12fac:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   12fae:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12fb0:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12fb4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12fb8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12fbc:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12fc0:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12fc2:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12fc6:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12fca:	692d      	ldr	r5, [r5, #16]
   12fcc:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   12fce:	f36f 1686 	bfc	r6, #6, #1
   12fd2:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12fd6:	4620      	mov	r0, r4
   12fd8:	2102      	movs	r1, #2
   12fda:	462b      	mov	r3, r5
}
   12fdc:	b003      	add	sp, #12
   12fde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12fe2:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   12fe4:	4610      	mov	r0, r2
   12fe6:	e7ad      	b.n	12f44 <_usb_d_dev_ep_abort+0x8>
   12fe8:	20001fec 	.word	0x20001fec

00012fec <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   12fec:	4b06      	ldr	r3, [pc, #24]	; (13008 <_usb_d_dev_register_callback+0x1c>)
   12fee:	2900      	cmp	r1, #0
   12ff0:	bf08      	it	eq
   12ff2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   12ff4:	2801      	cmp	r0, #1
   12ff6:	d003      	beq.n	13000 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   12ff8:	b908      	cbnz	r0, 12ffe <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   12ffa:	4b04      	ldr	r3, [pc, #16]	; (1300c <_usb_d_dev_register_callback+0x20>)
   12ffc:	6019      	str	r1, [r3, #0]
   12ffe:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   13000:	4b02      	ldr	r3, [pc, #8]	; (1300c <_usb_d_dev_register_callback+0x20>)
   13002:	6059      	str	r1, [r3, #4]
   13004:	4770      	bx	lr
   13006:	bf00      	nop
   13008:	00011bed 	.word	0x00011bed
   1300c:	20001fec 	.word	0x20001fec

00013010 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13010:	4b08      	ldr	r3, [pc, #32]	; (13034 <_usb_d_dev_register_ep_callback+0x24>)
   13012:	2900      	cmp	r1, #0
   13014:	bf08      	it	eq
   13016:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   13018:	b130      	cbz	r0, 13028 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   1301a:	2801      	cmp	r0, #1
   1301c:	d007      	beq.n	1302e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   1301e:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   13020:	bf04      	itt	eq
   13022:	4b05      	ldreq	r3, [pc, #20]	; (13038 <_usb_d_dev_register_ep_callback+0x28>)
   13024:	6119      	streq	r1, [r3, #16]
   13026:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   13028:	4b03      	ldr	r3, [pc, #12]	; (13038 <_usb_d_dev_register_ep_callback+0x28>)
   1302a:	6099      	str	r1, [r3, #8]
   1302c:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   1302e:	4b02      	ldr	r3, [pc, #8]	; (13038 <_usb_d_dev_register_ep_callback+0x28>)
   13030:	60d9      	str	r1, [r3, #12]
   13032:	4770      	bx	lr
   13034:	00011bed 	.word	0x00011bed
   13038:	20001fec 	.word	0x20001fec

0001303c <USB_0_Handler>:
   1303c:	f7fe bf8e 	b.w	11f5c <_usb_d_dev_handler>

00013040 <USB_1_Handler>:
   13040:	f7fe bf8c 	b.w	11f5c <_usb_d_dev_handler>

00013044 <USB_2_Handler>:
   13044:	f7fe bf8a 	b.w	11f5c <_usb_d_dev_handler>

00013048 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   13048:	f7fe bf88 	b.w	11f5c <_usb_d_dev_handler>

0001304c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1304c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   13050:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   13052:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   13054:	f3bf 8f5f 	dmb	sy
   13058:	4770      	bx	lr
   1305a:	bf00      	nop

0001305c <atomic_leave_critical>:
   1305c:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   13060:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   13062:	f383 8810 	msr	PRIMASK, r3
   13066:	4770      	bx	lr

00013068 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   13068:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   1306a:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   1306c:	2b08      	cmp	r3, #8
   1306e:	d810      	bhi.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13070:	e8df f003 	tbb	[pc, r3]
   13074:	604d3b25 	.word	0x604d3b25
   13078:	05a18a74 	.word	0x05a18a74
   1307c:	11          	.byte	0x11
   1307d:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   1307e:	8903      	ldrh	r3, [r0, #8]
   13080:	3b01      	subs	r3, #1
   13082:	b29b      	uxth	r3, r3
   13084:	8103      	strh	r3, [r0, #8]
   13086:	b923      	cbnz	r3, 13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   13088:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1308a:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   1308c:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   1308e:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   13090:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   13092:	bc30      	pop	{r4, r5}
   13094:	4770      	bx	lr
            if (--m_timer) {
   13096:	8903      	ldrh	r3, [r0, #8]
   13098:	3b01      	subs	r3, #1
   1309a:	b29b      	uxth	r3, r3
   1309c:	8103      	strh	r3, [r0, #8]
   1309e:	2b00      	cmp	r3, #0
   130a0:	d1f7      	bne.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   130a2:	8981      	ldrh	r1, [r0, #12]
   130a4:	3901      	subs	r1, #1
   130a6:	b289      	uxth	r1, r1
   130a8:	8181      	strh	r1, [r0, #12]
   130aa:	2900      	cmp	r1, #0
   130ac:	f000 80b3 	beq.w	13216 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   130b0:	8a43      	ldrh	r3, [r0, #18]
   130b2:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   130b4:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   130b6:	2307      	movs	r3, #7
                m_ledOn = true;
   130b8:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   130ba:	7143      	strb	r3, [r0, #5]
                break;
   130bc:	e7e9      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   130be:	7801      	ldrb	r1, [r0, #0]
   130c0:	2900      	cmp	r1, #0
   130c2:	f040 8089 	bne.w	131d8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   130c6:	7841      	ldrb	r1, [r0, #1]
   130c8:	2900      	cmp	r1, #0
   130ca:	f040 80cb 	bne.w	13264 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   130ce:	7883      	ldrb	r3, [r0, #2]
   130d0:	2b00      	cmp	r3, #0
   130d2:	f040 811a 	bne.w	1330a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   130d6:	78c3      	ldrb	r3, [r0, #3]
   130d8:	2b00      	cmp	r3, #0
   130da:	f040 8118 	bne.w	1330e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   130de:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   130e0:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   130e2:	2b00      	cmp	r3, #0
   130e4:	d0d5      	beq.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   130e6:	5d41      	ldrb	r1, [r0, r5]
   130e8:	e077      	b.n	131da <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   130ea:	8903      	ldrh	r3, [r0, #8]
   130ec:	3b01      	subs	r3, #1
   130ee:	b29b      	uxth	r3, r3
   130f0:	8103      	strh	r3, [r0, #8]
   130f2:	2b00      	cmp	r3, #0
   130f4:	d1cd      	bne.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   130f6:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   130f8:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   130fa:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   130fc:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   130fe:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   13100:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13102:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   13106:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   13108:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   1310a:	8143      	strh	r3, [r0, #10]
            break;
   1310c:	e7c1      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   1310e:	8903      	ldrh	r3, [r0, #8]
   13110:	3b01      	subs	r3, #1
   13112:	b29b      	uxth	r3, r3
   13114:	8103      	strh	r3, [r0, #8]
   13116:	2b00      	cmp	r3, #0
   13118:	d1bb      	bne.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   1311a:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1311c:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1311e:	3b01      	subs	r3, #1
   13120:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13122:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13126:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13128:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1312a:	2b00      	cmp	r3, #0
   1312c:	d06d      	beq.n	1320a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   1312e:	8a03      	ldrh	r3, [r0, #16]
   13130:	8103      	strh	r3, [r0, #8]
                break;
   13132:	e7ae      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13134:	8903      	ldrh	r3, [r0, #8]
   13136:	3b01      	subs	r3, #1
   13138:	b29b      	uxth	r3, r3
   1313a:	8103      	strh	r3, [r0, #8]
   1313c:	2b00      	cmp	r3, #0
   1313e:	d1a8      	bne.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   13140:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13142:	8a01      	ldrh	r1, [r0, #16]
   13144:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   13146:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   13148:	3201      	adds	r2, #1
            m_ledOn = true;
   1314a:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   1314c:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1314e:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   13152:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   13154:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   13156:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13158:	8143      	strh	r3, [r0, #10]
            break;
   1315a:	e79a      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   1315c:	8903      	ldrh	r3, [r0, #8]
   1315e:	3b01      	subs	r3, #1
   13160:	b29b      	uxth	r3, r3
   13162:	8103      	strh	r3, [r0, #8]
   13164:	2b00      	cmp	r3, #0
   13166:	d194      	bne.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13168:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1316a:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1316c:	3b01      	subs	r3, #1
   1316e:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13170:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13174:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13176:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13178:	2b00      	cmp	r3, #0
   1317a:	d1d8      	bne.n	1312e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   1317c:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1317e:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   13180:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   13182:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   13184:	7143      	strb	r3, [r0, #5]
            break;
   13186:	e784      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13188:	8903      	ldrh	r3, [r0, #8]
   1318a:	3b01      	subs	r3, #1
   1318c:	b29b      	uxth	r3, r3
   1318e:	8103      	strh	r3, [r0, #8]
   13190:	2b00      	cmp	r3, #0
   13192:	f47f af7e 	bne.w	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13196:	8983      	ldrh	r3, [r0, #12]
   13198:	3b01      	subs	r3, #1
   1319a:	b29b      	uxth	r3, r3
   1319c:	8183      	strh	r3, [r0, #12]
   1319e:	b373      	cbz	r3, 131fe <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   131a0:	8a02      	ldrh	r2, [r0, #16]
   131a2:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   131a4:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   131a6:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   131a8:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   131aa:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   131ae:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   131b0:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   131b2:	8143      	strh	r3, [r0, #10]
                break;
   131b4:	e76d      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   131b6:	8903      	ldrh	r3, [r0, #8]
   131b8:	3b01      	subs	r3, #1
   131ba:	b29b      	uxth	r3, r3
   131bc:	8103      	strh	r3, [r0, #8]
   131be:	2b00      	cmp	r3, #0
   131c0:	f47f af67 	bne.w	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   131c4:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   131c6:	8a42      	ldrh	r2, [r0, #18]
   131c8:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   131ca:	3301      	adds	r3, #1
            m_ledOn = true;
   131cc:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   131ce:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   131d0:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   131d2:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   131d4:	7142      	strb	r2, [r0, #5]
            break;
   131d6:	e75c      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   131d8:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   131da:	f011 0301 	ands.w	r3, r1, #1
   131de:	d149      	bne.n	13274 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   131e0:	3301      	adds	r3, #1
   131e2:	b2db      	uxtb	r3, r3
   131e4:	fa41 f203 	asr.w	r2, r1, r3
   131e8:	07d4      	lsls	r4, r2, #31
   131ea:	d5f9      	bpl.n	131e0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   131ec:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   131ee:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   131f0:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   131f2:	2201      	movs	r2, #1
    m_currentCode = code;
   131f4:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   131f6:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   131f8:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   131fa:	7142      	strb	r2, [r0, #5]
            break;
   131fc:	e749      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   131fe:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   13200:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   13202:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   13204:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   13206:	7143      	strb	r3, [r0, #5]
            break;
   13208:	e743      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   1320a:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   1320c:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   1320e:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   13210:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   13212:	7143      	strb	r3, [r0, #5]
            break;
   13214:	e73d      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   13216:	7983      	ldrb	r3, [r0, #6]
   13218:	79c2      	ldrb	r2, [r0, #7]
   1321a:	3301      	adds	r3, #1
   1321c:	b2db      	uxtb	r3, r3
    if (code > 7) {
   1321e:	2b07      	cmp	r3, #7
        group++;
   13220:	bf85      	ittet	hi
   13222:	3201      	addhi	r2, #1
   13224:	b2d2      	uxtbhi	r2, r2
   13226:	4619      	movls	r1, r3
        code = 0;
   13228:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   1322a:	2a04      	cmp	r2, #4
   1322c:	4615      	mov	r5, r2
   1322e:	dd1b      	ble.n	13268 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   13230:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   13232:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   13234:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   13238:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   1323a:	d01d      	beq.n	13278 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   1323c:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   1323e:	07e9      	lsls	r1, r5, #31
   13240:	d452      	bmi.n	132e8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   13242:	2501      	movs	r5, #1
   13244:	3301      	adds	r3, #1
   13246:	b2db      	uxtb	r3, r3
   13248:	fa44 f103 	asr.w	r1, r4, r3
   1324c:	07c9      	lsls	r1, r1, #31
   1324e:	d5f9      	bpl.n	13244 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   13250:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13252:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   13254:	2d00      	cmp	r5, #0
   13256:	d149      	bne.n	132ec <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   13258:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   1325a:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   1325c:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   1325e:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   13260:	7143      	strb	r3, [r0, #5]
}
   13262:	e716      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   13264:	2501      	movs	r5, #1
   13266:	e7b8      	b.n	131da <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   13268:	5c84      	ldrb	r4, [r0, r2]
   1326a:	fa54 f101 	asrs.w	r1, r4, r1
   1326e:	d029      	beq.n	132c4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   13270:	7bc5      	ldrb	r5, [r0, #15]
   13272:	e7eb      	b.n	1324c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   13274:	2300      	movs	r3, #0
   13276:	e7b9      	b.n	131ec <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   13278:	7843      	ldrb	r3, [r0, #1]
   1327a:	bb83      	cbnz	r3, 132de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1327c:	2102      	movs	r1, #2
   1327e:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   13280:	5cc3      	ldrb	r3, [r0, r3]
   13282:	2b00      	cmp	r3, #0
   13284:	d145      	bne.n	13312 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13286:	1c4a      	adds	r2, r1, #1
   13288:	b2d2      	uxtb	r2, r2
   1328a:	2a05      	cmp	r2, #5
   1328c:	d00d      	beq.n	132aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1328e:	5c83      	ldrb	r3, [r0, r2]
   13290:	bb2b      	cbnz	r3, 132de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13292:	1c8a      	adds	r2, r1, #2
   13294:	b2d2      	uxtb	r2, r2
   13296:	2a05      	cmp	r2, #5
   13298:	d007      	beq.n	132aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1329a:	5c83      	ldrb	r3, [r0, r2]
   1329c:	b9fb      	cbnz	r3, 132de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1329e:	1ccb      	adds	r3, r1, #3
   132a0:	b2db      	uxtb	r3, r3
   132a2:	2b05      	cmp	r3, #5
   132a4:	d001      	beq.n	132aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   132a6:	5cc3      	ldrb	r3, [r0, r3]
   132a8:	b9c3      	cbnz	r3, 132dc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   132aa:	7802      	ldrb	r2, [r0, #0]
   132ac:	b112      	cbz	r2, 132b4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   132ae:	e024      	b.n	132fa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   132b0:	5c83      	ldrb	r3, [r0, r2]
   132b2:	bb23      	cbnz	r3, 132fe <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   132b4:	3201      	adds	r2, #1
   132b6:	b2d2      	uxtb	r2, r2
   132b8:	42aa      	cmp	r2, r5
   132ba:	ddf9      	ble.n	132b0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   132bc:	2300      	movs	r3, #0
   132be:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   132c0:	7143      	strb	r3, [r0, #5]
   132c2:	e6e6      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   132c4:	3201      	adds	r2, #1
   132c6:	b2d2      	uxtb	r2, r2
   132c8:	2a04      	cmp	r2, #4
   132ca:	d8ee      	bhi.n	132aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   132cc:	5c83      	ldrb	r3, [r0, r2]
   132ce:	b933      	cbnz	r3, 132de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   132d0:	1ca9      	adds	r1, r5, #2
   132d2:	b2c9      	uxtb	r1, r1
   132d4:	2905      	cmp	r1, #5
   132d6:	460b      	mov	r3, r1
   132d8:	d1d2      	bne.n	13280 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   132da:	e7e6      	b.n	132aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   132dc:	2204      	movs	r2, #4
   132de:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   132e0:	461c      	mov	r4, r3
   132e2:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   132e4:	2300      	movs	r3, #0
   132e6:	e7b1      	b.n	1324c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   132e8:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   132ea:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   132ec:	8a83      	ldrh	r3, [r0, #20]
   132ee:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   132f0:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   132f2:	2301      	movs	r3, #1
                m_ledOn = false;
   132f4:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   132f6:	7143      	strb	r3, [r0, #5]
   132f8:	e6cb      	b.n	13092 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   132fa:	4613      	mov	r3, r2
   132fc:	2200      	movs	r2, #0
   132fe:	461d      	mov	r5, r3
            m_patternWrap = true;
   13300:	2301      	movs	r3, #1
   13302:	73c3      	strb	r3, [r0, #15]
   13304:	462c      	mov	r4, r5
        code = 0;
   13306:	2300      	movs	r3, #0
   13308:	e799      	b.n	1323e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   1330a:	2502      	movs	r5, #2
   1330c:	e6eb      	b.n	130e6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1330e:	2503      	movs	r5, #3
   13310:	e6e9      	b.n	130e6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   13312:	460a      	mov	r2, r1
   13314:	e7e3      	b.n	132de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   13316:	bf00      	nop

00013318 <arm_sin_q15>:
   13318:	0982      	lsrs	r2, r0, #6
   1331a:	490c      	ldr	r1, [pc, #48]	; (1334c <arm_sin_q15+0x34>)
   1331c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13320:	0240      	lsls	r0, r0, #9
   13322:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   13326:	b410      	push	{r4}
   13328:	3201      	adds	r2, #1
   1332a:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   1332e:	fb03 f304 	mul.w	r3, r3, r4
   13332:	0c1b      	lsrs	r3, r3, #16
   13334:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   13338:	f85d 4b04 	ldr.w	r4, [sp], #4
   1333c:	041b      	lsls	r3, r3, #16
   1333e:	fb10 3002 	smlabb	r0, r0, r2, r3
   13342:	f340 30cf 	sbfx	r0, r0, #15, #16
   13346:	f020 0001 	bic.w	r0, r0, #1
   1334a:	4770      	bx	lr
   1334c:	0002351c 	.word	0x0002351c

00013350 <_Znwj>:
   13350:	b510      	push	{r4, lr}
   13352:	2800      	cmp	r0, #0
   13354:	bf14      	ite	ne
   13356:	4604      	movne	r4, r0
   13358:	2401      	moveq	r4, #1
   1335a:	4620      	mov	r0, r4
   1335c:	f00a fc40 	bl	1dbe0 <malloc>
   13360:	b100      	cbz	r0, 13364 <_Znwj+0x14>
   13362:	bd10      	pop	{r4, pc}
   13364:	f000 f9c8 	bl	136f8 <_ZSt15get_new_handlerv>
   13368:	b108      	cbz	r0, 1336e <_Znwj+0x1e>
   1336a:	4780      	blx	r0
   1336c:	e7f5      	b.n	1335a <_Znwj+0xa>
   1336e:	2004      	movs	r0, #4
   13370:	f000 f8a2 	bl	134b8 <__cxa_allocate_exception>
   13374:	4b02      	ldr	r3, [pc, #8]	; (13380 <_Znwj+0x30>)
   13376:	6003      	str	r3, [r0, #0]
   13378:	4a02      	ldr	r2, [pc, #8]	; (13384 <_Znwj+0x34>)
   1337a:	4903      	ldr	r1, [pc, #12]	; (13388 <_Znwj+0x38>)
   1337c:	f000 f946 	bl	1360c <__cxa_throw>
   13380:	00023970 	.word	0x00023970
   13384:	000133a9 	.word	0x000133a9
   13388:	0002394c 	.word	0x0002394c

0001338c <__cxa_pure_virtual>:
   1338c:	b508      	push	{r3, lr}
   1338e:	221b      	movs	r2, #27
   13390:	4902      	ldr	r1, [pc, #8]	; (1339c <__cxa_pure_virtual+0x10>)
   13392:	2002      	movs	r0, #2
   13394:	f00c ffbe 	bl	20314 <write>
   13398:	f000 f8ee 	bl	13578 <_ZSt9terminatev>
   1339c:	00023920 	.word	0x00023920

000133a0 <_ZNKSt9bad_alloc4whatEv>:
   133a0:	4800      	ldr	r0, [pc, #0]	; (133a4 <_ZNKSt9bad_alloc4whatEv+0x4>)
   133a2:	4770      	bx	lr
   133a4:	0002393c 	.word	0x0002393c

000133a8 <_ZNSt9bad_allocD1Ev>:
   133a8:	b510      	push	{r4, lr}
   133aa:	4b03      	ldr	r3, [pc, #12]	; (133b8 <_ZNSt9bad_allocD1Ev+0x10>)
   133ac:	6003      	str	r3, [r0, #0]
   133ae:	4604      	mov	r4, r0
   133b0:	f000 f8be 	bl	13530 <_ZNSt9exceptionD1Ev>
   133b4:	4620      	mov	r0, r4
   133b6:	bd10      	pop	{r4, pc}
   133b8:	00023970 	.word	0x00023970

000133bc <_ZNSt9bad_allocD0Ev>:
   133bc:	b510      	push	{r4, lr}
   133be:	4b05      	ldr	r3, [pc, #20]	; (133d4 <_ZNSt9bad_allocD0Ev+0x18>)
   133c0:	6003      	str	r3, [r0, #0]
   133c2:	4604      	mov	r4, r0
   133c4:	f000 f8b4 	bl	13530 <_ZNSt9exceptionD1Ev>
   133c8:	4620      	mov	r0, r4
   133ca:	2104      	movs	r1, #4
   133cc:	f000 f804 	bl	133d8 <_ZdlPvj>
   133d0:	4620      	mov	r0, r4
   133d2:	bd10      	pop	{r4, pc}
   133d4:	00023970 	.word	0x00023970

000133d8 <_ZdlPvj>:
   133d8:	f000 bac0 	b.w	1395c <_ZdlPv>

000133dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   133dc:	b4f0      	push	{r4, r5, r6, r7}
   133de:	4c1b      	ldr	r4, [pc, #108]	; (1344c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   133e0:	f850 7c08 	ldr.w	r7, [r0, #-8]
   133e4:	6861      	ldr	r1, [r4, #4]
   133e6:	f1a0 0608 	sub.w	r6, r0, #8
   133ea:	b1c9      	cbz	r1, 13420 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   133ec:	19f5      	adds	r5, r6, r7
   133ee:	42a9      	cmp	r1, r5
   133f0:	d01b      	beq.n	1342a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   133f2:	684a      	ldr	r2, [r1, #4]
   133f4:	b32a      	cbz	r2, 13442 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   133f6:	4295      	cmp	r5, r2
   133f8:	d303      	bcc.n	13402 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   133fa:	e022      	b.n	13442 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   133fc:	429d      	cmp	r5, r3
   133fe:	d205      	bcs.n	1340c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13400:	461a      	mov	r2, r3
   13402:	6853      	ldr	r3, [r2, #4]
   13404:	1d0c      	adds	r4, r1, #4
   13406:	4611      	mov	r1, r2
   13408:	2b00      	cmp	r3, #0
   1340a:	d1f7      	bne.n	133fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   1340c:	6811      	ldr	r1, [r2, #0]
   1340e:	1855      	adds	r5, r2, r1
   13410:	42ae      	cmp	r6, r5
   13412:	d013      	beq.n	1343c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   13414:	f840 3c04 	str.w	r3, [r0, #-4]
   13418:	6823      	ldr	r3, [r4, #0]
   1341a:	605e      	str	r6, [r3, #4]
   1341c:	bcf0      	pop	{r4, r5, r6, r7}
   1341e:	4770      	bx	lr
   13420:	f840 1c04 	str.w	r1, [r0, #-4]
   13424:	6066      	str	r6, [r4, #4]
   13426:	bcf0      	pop	{r4, r5, r6, r7}
   13428:	4770      	bx	lr
   1342a:	680b      	ldr	r3, [r1, #0]
   1342c:	684a      	ldr	r2, [r1, #4]
   1342e:	f840 2c04 	str.w	r2, [r0, #-4]
   13432:	441f      	add	r7, r3
   13434:	f840 7c08 	str.w	r7, [r0, #-8]
   13438:	6066      	str	r6, [r4, #4]
   1343a:	e7ef      	b.n	1341c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   1343c:	440f      	add	r7, r1
   1343e:	6017      	str	r7, [r2, #0]
   13440:	e7ec      	b.n	1341c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   13442:	4613      	mov	r3, r2
   13444:	3404      	adds	r4, #4
   13446:	460a      	mov	r2, r1
   13448:	e7e0      	b.n	1340c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   1344a:	bf00      	nop
   1344c:	2000227c 	.word	0x2000227c

00013450 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   13450:	b430      	push	{r4, r5}
   13452:	4c18      	ldr	r4, [pc, #96]	; (134b4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   13454:	f100 0108 	add.w	r1, r0, #8
   13458:	6863      	ldr	r3, [r4, #4]
   1345a:	2908      	cmp	r1, #8
   1345c:	bf38      	it	cc
   1345e:	2108      	movcc	r1, #8
   13460:	b313      	cbz	r3, 134a8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   13462:	3107      	adds	r1, #7
   13464:	681a      	ldr	r2, [r3, #0]
   13466:	f021 0107 	bic.w	r1, r1, #7
   1346a:	4291      	cmp	r1, r2
   1346c:	d804      	bhi.n	13478 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   1346e:	e01d      	b.n	134ac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   13470:	6802      	ldr	r2, [r0, #0]
   13472:	4291      	cmp	r1, r2
   13474:	d905      	bls.n	13482 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   13476:	4603      	mov	r3, r0
   13478:	6858      	ldr	r0, [r3, #4]
   1347a:	2800      	cmp	r0, #0
   1347c:	d1f8      	bne.n	13470 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   1347e:	bc30      	pop	{r4, r5}
   13480:	4770      	bx	lr
   13482:	3304      	adds	r3, #4
   13484:	1a52      	subs	r2, r2, r1
   13486:	2a07      	cmp	r2, #7
   13488:	d90a      	bls.n	134a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   1348a:	1845      	adds	r5, r0, r1
   1348c:	6844      	ldr	r4, [r0, #4]
   1348e:	606c      	str	r4, [r5, #4]
   13490:	681c      	ldr	r4, [r3, #0]
   13492:	5042      	str	r2, [r0, r1]
   13494:	6021      	str	r1, [r4, #0]
   13496:	601d      	str	r5, [r3, #0]
   13498:	f104 0008 	add.w	r0, r4, #8
   1349c:	bc30      	pop	{r4, r5}
   1349e:	4770      	bx	lr
   134a0:	6842      	ldr	r2, [r0, #4]
   134a2:	601a      	str	r2, [r3, #0]
   134a4:	4604      	mov	r4, r0
   134a6:	e7f7      	b.n	13498 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   134a8:	4618      	mov	r0, r3
   134aa:	e7e8      	b.n	1347e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   134ac:	4618      	mov	r0, r3
   134ae:	1d23      	adds	r3, r4, #4
   134b0:	e7e8      	b.n	13484 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   134b2:	bf00      	nop
   134b4:	2000227c 	.word	0x2000227c

000134b8 <__cxa_allocate_exception>:
   134b8:	b538      	push	{r3, r4, r5, lr}
   134ba:	f100 0580 	add.w	r5, r0, #128	; 0x80
   134be:	4628      	mov	r0, r5
   134c0:	f00a fb8e 	bl	1dbe0 <malloc>
   134c4:	4604      	mov	r4, r0
   134c6:	b138      	cbz	r0, 134d8 <__cxa_allocate_exception+0x20>
   134c8:	2280      	movs	r2, #128	; 0x80
   134ca:	2100      	movs	r1, #0
   134cc:	4620      	mov	r0, r4
   134ce:	f00a ffdd 	bl	1e48c <memset>
   134d2:	f104 0080 	add.w	r0, r4, #128	; 0x80
   134d6:	bd38      	pop	{r3, r4, r5, pc}
   134d8:	4628      	mov	r0, r5
   134da:	f7ff ffb9 	bl	13450 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   134de:	4604      	mov	r4, r0
   134e0:	2800      	cmp	r0, #0
   134e2:	d1f1      	bne.n	134c8 <__cxa_allocate_exception+0x10>
   134e4:	f000 f848 	bl	13578 <_ZSt9terminatev>

000134e8 <__cxa_free_exception>:
   134e8:	4a06      	ldr	r2, [pc, #24]	; (13504 <__cxa_free_exception+0x1c>)
   134ea:	6893      	ldr	r3, [r2, #8]
   134ec:	3880      	subs	r0, #128	; 0x80
   134ee:	4298      	cmp	r0, r3
   134f0:	d905      	bls.n	134fe <__cxa_free_exception+0x16>
   134f2:	68d2      	ldr	r2, [r2, #12]
   134f4:	4413      	add	r3, r2
   134f6:	4298      	cmp	r0, r3
   134f8:	d201      	bcs.n	134fe <__cxa_free_exception+0x16>
   134fa:	f7ff bf6f 	b.w	133dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   134fe:	f00a bb77 	b.w	1dbf0 <free>
   13502:	bf00      	nop
   13504:	2000227c 	.word	0x2000227c

00013508 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   13508:	b538      	push	{r3, r4, r5, lr}
   1350a:	4c08      	ldr	r4, [pc, #32]	; (1352c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   1350c:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   13510:	4628      	mov	r0, r5
   13512:	60e5      	str	r5, [r4, #12]
   13514:	f00a fb64 	bl	1dbe0 <malloc>
   13518:	60a0      	str	r0, [r4, #8]
   1351a:	b120      	cbz	r0, 13526 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   1351c:	2300      	movs	r3, #0
   1351e:	6060      	str	r0, [r4, #4]
   13520:	6005      	str	r5, [r0, #0]
   13522:	6043      	str	r3, [r0, #4]
   13524:	bd38      	pop	{r3, r4, r5, pc}
   13526:	60e0      	str	r0, [r4, #12]
   13528:	6060      	str	r0, [r4, #4]
   1352a:	bd38      	pop	{r3, r4, r5, pc}
   1352c:	2000227c 	.word	0x2000227c

00013530 <_ZNSt9exceptionD1Ev>:
   13530:	4770      	bx	lr
   13532:	bf00      	nop

00013534 <_ZNSt13bad_exceptionD1Ev>:
   13534:	4770      	bx	lr
   13536:	bf00      	nop

00013538 <_ZGTtNKSt13bad_exception4whatEv>:
   13538:	4800      	ldr	r0, [pc, #0]	; (1353c <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   1353a:	4770      	bx	lr
   1353c:	0002397c 	.word	0x0002397c

00013540 <_ZNSt13bad_exceptionD0Ev>:
   13540:	b510      	push	{r4, lr}
   13542:	2104      	movs	r1, #4
   13544:	4604      	mov	r4, r0
   13546:	f7ff ff47 	bl	133d8 <_ZdlPvj>
   1354a:	4620      	mov	r0, r4
   1354c:	bd10      	pop	{r4, pc}
   1354e:	bf00      	nop

00013550 <_ZN10__cxxabiv111__terminateEPFvvE>:
   13550:	b508      	push	{r3, lr}
   13552:	4780      	blx	r0
   13554:	f00a f896 	bl	1d684 <abort>
   13558:	f000 fb6c 	bl	13c34 <__cxa_begin_catch>
   1355c:	f00a f892 	bl	1d684 <abort>
   13560:	460d      	mov	r5, r1
   13562:	4604      	mov	r4, r0
   13564:	f000 fba4 	bl	13cb0 <__cxa_end_catch>
   13568:	3501      	adds	r5, #1
   1356a:	d001      	beq.n	13570 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   1356c:	f000 f9f8 	bl	13960 <__cxa_end_cleanup>
   13570:	4620      	mov	r0, r4
   13572:	f000 faef 	bl	13b54 <__cxa_call_unexpected>
   13576:	bf00      	nop

00013578 <_ZSt9terminatev>:
   13578:	b508      	push	{r3, lr}
   1357a:	4b03      	ldr	r3, [pc, #12]	; (13588 <_ZSt9terminatev+0x10>)
   1357c:	6818      	ldr	r0, [r3, #0]
   1357e:	f3bf 8f5b 	dmb	ish
   13582:	f7ff ffe5 	bl	13550 <_ZN10__cxxabiv111__terminateEPFvvE>
   13586:	bf00      	nop
   13588:	200000f0 	.word	0x200000f0

0001358c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1358c:	b508      	push	{r3, lr}
   1358e:	4780      	blx	r0
   13590:	f7ff fff2 	bl	13578 <_ZSt9terminatev>

00013594 <_ZSt10unexpectedv>:
   13594:	b508      	push	{r3, lr}
   13596:	4b03      	ldr	r3, [pc, #12]	; (135a4 <_ZSt10unexpectedv+0x10>)
   13598:	6818      	ldr	r0, [r3, #0]
   1359a:	f3bf 8f5b 	dmb	ish
   1359e:	f7ff fff5 	bl	1358c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   135a2:	bf00      	nop
   135a4:	200000ec 	.word	0x200000ec

000135a8 <_ZSt13get_terminatev>:
   135a8:	4b02      	ldr	r3, [pc, #8]	; (135b4 <_ZSt13get_terminatev+0xc>)
   135aa:	6818      	ldr	r0, [r3, #0]
   135ac:	f3bf 8f5b 	dmb	ish
   135b0:	4770      	bx	lr
   135b2:	bf00      	nop
   135b4:	200000f0 	.word	0x200000f0

000135b8 <_ZSt14get_unexpectedv>:
   135b8:	4b02      	ldr	r3, [pc, #8]	; (135c4 <_ZSt14get_unexpectedv+0xc>)
   135ba:	6818      	ldr	r0, [r3, #0]
   135bc:	f3bf 8f5b 	dmb	ish
   135c0:	4770      	bx	lr
   135c2:	bf00      	nop
   135c4:	200000ec 	.word	0x200000ec

000135c8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   135c8:	2801      	cmp	r0, #1
   135ca:	b510      	push	{r4, lr}
   135cc:	d81a      	bhi.n	13604 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   135ce:	f3bf 8f5b 	dmb	ish
   135d2:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   135d6:	e853 2f00 	ldrex	r2, [r3]
   135da:	3a01      	subs	r2, #1
   135dc:	e843 2000 	strex	r0, r2, [r3]
   135e0:	2800      	cmp	r0, #0
   135e2:	d1f8      	bne.n	135d6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   135e4:	f3bf 8f5b 	dmb	ish
   135e8:	b95a      	cbnz	r2, 13602 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   135ea:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   135ee:	f101 0458 	add.w	r4, r1, #88	; 0x58
   135f2:	b10b      	cbz	r3, 135f8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   135f4:	4620      	mov	r0, r4
   135f6:	4798      	blx	r3
   135f8:	4620      	mov	r0, r4
   135fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   135fe:	f7ff bf73 	b.w	134e8 <__cxa_free_exception>
   13602:	bd10      	pop	{r4, pc}
   13604:	f851 0c14 	ldr.w	r0, [r1, #-20]
   13608:	f7ff ffa2 	bl	13550 <_ZN10__cxxabiv111__terminateEPFvvE>

0001360c <__cxa_throw>:
   1360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1360e:	4604      	mov	r4, r0
   13610:	460f      	mov	r7, r1
   13612:	4616      	mov	r6, r2
   13614:	f000 fb96 	bl	13d44 <__cxa_get_globals>
   13618:	6843      	ldr	r3, [r0, #4]
   1361a:	2501      	movs	r5, #1
   1361c:	442b      	add	r3, r5
   1361e:	6043      	str	r3, [r0, #4]
   13620:	f844 7c78 	str.w	r7, [r4, #-120]
   13624:	f844 6c74 	str.w	r6, [r4, #-116]
   13628:	f844 5c80 	str.w	r5, [r4, #-128]
   1362c:	f7ff ffc4 	bl	135b8 <_ZSt14get_unexpectedv>
   13630:	f844 0c70 	str.w	r0, [r4, #-112]
   13634:	f7ff ffb8 	bl	135a8 <_ZSt13get_terminatev>
   13638:	2347      	movs	r3, #71	; 0x47
   1363a:	2243      	movs	r2, #67	; 0x43
   1363c:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   13640:	4910      	ldr	r1, [pc, #64]	; (13684 <__cxa_throw+0x78>)
   13642:	f804 3c58 	strb.w	r3, [r4, #-88]
   13646:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   1364a:	232b      	movs	r3, #43	; 0x2b
   1364c:	2755      	movs	r7, #85	; 0x55
   1364e:	2600      	movs	r6, #0
   13650:	f844 0c6c 	str.w	r0, [r4, #-108]
   13654:	f804 ec57 	strb.w	lr, [r4, #-87]
   13658:	f844 1c50 	str.w	r1, [r4, #-80]
   1365c:	f804 2c55 	strb.w	r2, [r4, #-85]
   13660:	f804 2c54 	strb.w	r2, [r4, #-84]
   13664:	f804 3c53 	strb.w	r3, [r4, #-83]
   13668:	f804 3c52 	strb.w	r3, [r4, #-82]
   1366c:	f804 7c56 	strb.w	r7, [r4, #-86]
   13670:	f804 6c51 	strb.w	r6, [r4, #-81]
   13674:	4628      	mov	r0, r5
   13676:	f009 fde9 	bl	1d24c <_Unwind_RaiseException>
   1367a:	4628      	mov	r0, r5
   1367c:	f000 fada 	bl	13c34 <__cxa_begin_catch>
   13680:	f7ff ff7a 	bl	13578 <_ZSt9terminatev>
   13684:	000135c9 	.word	0x000135c9

00013688 <__cxa_rethrow>:
   13688:	b510      	push	{r4, lr}
   1368a:	f000 fb5b 	bl	13d44 <__cxa_get_globals>
   1368e:	6842      	ldr	r2, [r0, #4]
   13690:	6804      	ldr	r4, [r0, #0]
   13692:	3201      	adds	r2, #1
   13694:	6042      	str	r2, [r0, #4]
   13696:	b164      	cbz	r4, 136b2 <__cxa_rethrow+0x2a>
   13698:	f894 2020 	ldrb.w	r2, [r4, #32]
   1369c:	2a47      	cmp	r2, #71	; 0x47
   1369e:	d00a      	beq.n	136b6 <__cxa_rethrow+0x2e>
   136a0:	2200      	movs	r2, #0
   136a2:	6002      	str	r2, [r0, #0]
   136a4:	3420      	adds	r4, #32
   136a6:	4620      	mov	r0, r4
   136a8:	f009 fdf4 	bl	1d294 <_Unwind_Resume_or_Rethrow>
   136ac:	4620      	mov	r0, r4
   136ae:	f000 fac1 	bl	13c34 <__cxa_begin_catch>
   136b2:	f7ff ff61 	bl	13578 <_ZSt9terminatev>
   136b6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   136ba:	2a4e      	cmp	r2, #78	; 0x4e
   136bc:	d1f0      	bne.n	136a0 <__cxa_rethrow+0x18>
   136be:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   136c2:	2a55      	cmp	r2, #85	; 0x55
   136c4:	d1ec      	bne.n	136a0 <__cxa_rethrow+0x18>
   136c6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   136ca:	2a43      	cmp	r2, #67	; 0x43
   136cc:	d1e8      	bne.n	136a0 <__cxa_rethrow+0x18>
   136ce:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   136d2:	2a43      	cmp	r2, #67	; 0x43
   136d4:	d1e4      	bne.n	136a0 <__cxa_rethrow+0x18>
   136d6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   136da:	2a2b      	cmp	r2, #43	; 0x2b
   136dc:	d1e0      	bne.n	136a0 <__cxa_rethrow+0x18>
   136de:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   136e2:	2a2b      	cmp	r2, #43	; 0x2b
   136e4:	d1dc      	bne.n	136a0 <__cxa_rethrow+0x18>
   136e6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   136ea:	2a01      	cmp	r2, #1
   136ec:	d8d8      	bhi.n	136a0 <__cxa_rethrow+0x18>
   136ee:	6962      	ldr	r2, [r4, #20]
   136f0:	4252      	negs	r2, r2
   136f2:	6162      	str	r2, [r4, #20]
   136f4:	e7d6      	b.n	136a4 <__cxa_rethrow+0x1c>
   136f6:	bf00      	nop

000136f8 <_ZSt15get_new_handlerv>:
   136f8:	4b02      	ldr	r3, [pc, #8]	; (13704 <_ZSt15get_new_handlerv+0xc>)
   136fa:	6818      	ldr	r0, [r3, #0]
   136fc:	f3bf 8f5b 	dmb	ish
   13700:	4770      	bx	lr
   13702:	bf00      	nop
   13704:	2000228c 	.word	0x2000228c

00013708 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   13708:	b510      	push	{r4, lr}
   1370a:	4b03      	ldr	r3, [pc, #12]	; (13718 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   1370c:	6003      	str	r3, [r0, #0]
   1370e:	4604      	mov	r4, r0
   13710:	f000 f8ca 	bl	138a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13714:	4620      	mov	r0, r4
   13716:	bd10      	pop	{r4, pc}
   13718:	00023a6c 	.word	0x00023a6c

0001371c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   1371c:	b510      	push	{r4, lr}
   1371e:	4b05      	ldr	r3, [pc, #20]	; (13734 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   13720:	6003      	str	r3, [r0, #0]
   13722:	4604      	mov	r4, r0
   13724:	f000 f8c0 	bl	138a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13728:	4620      	mov	r0, r4
   1372a:	210c      	movs	r1, #12
   1372c:	f7ff fe54 	bl	133d8 <_ZdlPvj>
   13730:	4620      	mov	r0, r4
   13732:	bd10      	pop	{r4, pc}
   13734:	00023a6c 	.word	0x00023a6c

00013738 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   13738:	b570      	push	{r4, r5, r6, lr}
   1373a:	b082      	sub	sp, #8
   1373c:	460d      	mov	r5, r1
   1373e:	9c06      	ldr	r4, [sp, #24]
   13740:	4294      	cmp	r4, r2
   13742:	4606      	mov	r6, r0
   13744:	d009      	beq.n	1375a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   13746:	68b0      	ldr	r0, [r6, #8]
   13748:	6806      	ldr	r6, [r0, #0]
   1374a:	9406      	str	r4, [sp, #24]
   1374c:	6a34      	ldr	r4, [r6, #32]
   1374e:	4629      	mov	r1, r5
   13750:	46a4      	mov	ip, r4
   13752:	b002      	add	sp, #8
   13754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13758:	4760      	bx	ip
   1375a:	4619      	mov	r1, r3
   1375c:	9201      	str	r2, [sp, #4]
   1375e:	9300      	str	r3, [sp, #0]
   13760:	f000 f86a 	bl	13838 <_ZNKSt9type_infoeqERKS_>
   13764:	9b00      	ldr	r3, [sp, #0]
   13766:	9a01      	ldr	r2, [sp, #4]
   13768:	2800      	cmp	r0, #0
   1376a:	d0ec      	beq.n	13746 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   1376c:	2006      	movs	r0, #6
   1376e:	b002      	add	sp, #8
   13770:	bd70      	pop	{r4, r5, r6, pc}
   13772:	bf00      	nop

00013774 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   13774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13778:	b081      	sub	sp, #4
   1377a:	460e      	mov	r6, r1
   1377c:	4619      	mov	r1, r3
   1377e:	461f      	mov	r7, r3
   13780:	4691      	mov	r9, r2
   13782:	4683      	mov	fp, r0
   13784:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13786:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1378a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1378e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13790:	f000 f852 	bl	13838 <_ZNKSt9type_infoeqERKS_>
   13794:	b170      	cbz	r0, 137b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   13796:	2e00      	cmp	r6, #0
   13798:	602c      	str	r4, [r5, #0]
   1379a:	f885 9004 	strb.w	r9, [r5, #4]
   1379e:	db1f      	blt.n	137e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   137a0:	4434      	add	r4, r6
   137a2:	45a0      	cmp	r8, r4
   137a4:	bf0c      	ite	eq
   137a6:	2406      	moveq	r4, #6
   137a8:	2401      	movne	r4, #1
   137aa:	71ac      	strb	r4, [r5, #6]
   137ac:	2000      	movs	r0, #0
   137ae:	b001      	add	sp, #4
   137b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137b4:	4544      	cmp	r4, r8
   137b6:	d018      	beq.n	137ea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   137b8:	f8db 0008 	ldr.w	r0, [fp, #8]
   137bc:	f8d0 e000 	ldr.w	lr, [r0]
   137c0:	950d      	str	r5, [sp, #52]	; 0x34
   137c2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   137c6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   137ca:	940a      	str	r4, [sp, #40]	; 0x28
   137cc:	f8de 401c 	ldr.w	r4, [lr, #28]
   137d0:	463b      	mov	r3, r7
   137d2:	464a      	mov	r2, r9
   137d4:	4631      	mov	r1, r6
   137d6:	46a4      	mov	ip, r4
   137d8:	b001      	add	sp, #4
   137da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137de:	4760      	bx	ip
   137e0:	3602      	adds	r6, #2
   137e2:	d1e3      	bne.n	137ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   137e4:	2301      	movs	r3, #1
   137e6:	71ab      	strb	r3, [r5, #6]
   137e8:	e7e0      	b.n	137ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   137ea:	4651      	mov	r1, sl
   137ec:	4658      	mov	r0, fp
   137ee:	f000 f823 	bl	13838 <_ZNKSt9type_infoeqERKS_>
   137f2:	2800      	cmp	r0, #0
   137f4:	d0e0      	beq.n	137b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   137f6:	2000      	movs	r0, #0
   137f8:	f885 9005 	strb.w	r9, [r5, #5]
   137fc:	b001      	add	sp, #4
   137fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13802:	bf00      	nop

00013804 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   13804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13808:	4607      	mov	r7, r0
   1380a:	460c      	mov	r4, r1
   1380c:	4615      	mov	r5, r2
   1380e:	461e      	mov	r6, r3
   13810:	f000 f862 	bl	138d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   13814:	b108      	cbz	r0, 1381a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   13816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1381a:	68b8      	ldr	r0, [r7, #8]
   1381c:	6807      	ldr	r7, [r0, #0]
   1381e:	4621      	mov	r1, r4
   13820:	69bc      	ldr	r4, [r7, #24]
   13822:	4633      	mov	r3, r6
   13824:	462a      	mov	r2, r5
   13826:	46a4      	mov	ip, r4
   13828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1382c:	4760      	bx	ip
   1382e:	bf00      	nop

00013830 <_ZNSt9type_infoD1Ev>:
   13830:	4770      	bx	lr
   13832:	bf00      	nop

00013834 <_ZNKSt9type_info14__is_pointer_pEv>:
   13834:	2000      	movs	r0, #0
   13836:	4770      	bx	lr

00013838 <_ZNKSt9type_infoeqERKS_>:
   13838:	4281      	cmp	r1, r0
   1383a:	d011      	beq.n	13860 <_ZNKSt9type_infoeqERKS_+0x28>
   1383c:	b508      	push	{r3, lr}
   1383e:	6840      	ldr	r0, [r0, #4]
   13840:	7803      	ldrb	r3, [r0, #0]
   13842:	2b2a      	cmp	r3, #42	; 0x2a
   13844:	d00a      	beq.n	1385c <_ZNKSt9type_infoeqERKS_+0x24>
   13846:	6849      	ldr	r1, [r1, #4]
   13848:	780b      	ldrb	r3, [r1, #0]
   1384a:	2b2a      	cmp	r3, #42	; 0x2a
   1384c:	bf08      	it	eq
   1384e:	3101      	addeq	r1, #1
   13850:	f00b f8ea 	bl	1ea28 <strcmp>
   13854:	fab0 f080 	clz	r0, r0
   13858:	0940      	lsrs	r0, r0, #5
   1385a:	bd08      	pop	{r3, pc}
   1385c:	2000      	movs	r0, #0
   1385e:	bd08      	pop	{r3, pc}
   13860:	2001      	movs	r0, #1
   13862:	4770      	bx	lr

00013864 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   13864:	b570      	push	{r4, r5, r6, lr}
   13866:	6803      	ldr	r3, [r0, #0]
   13868:	b084      	sub	sp, #16
   1386a:	2400      	movs	r4, #0
   1386c:	699e      	ldr	r6, [r3, #24]
   1386e:	9400      	str	r4, [sp, #0]
   13870:	2310      	movs	r3, #16
   13872:	4615      	mov	r5, r2
   13874:	9302      	str	r3, [sp, #8]
   13876:	6812      	ldr	r2, [r2, #0]
   13878:	f88d 4004 	strb.w	r4, [sp, #4]
   1387c:	466b      	mov	r3, sp
   1387e:	9403      	str	r4, [sp, #12]
   13880:	47b0      	blx	r6
   13882:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13886:	f003 0306 	and.w	r3, r3, #6
   1388a:	2b06      	cmp	r3, #6
   1388c:	bf03      	ittte	eq
   1388e:	9b00      	ldreq	r3, [sp, #0]
   13890:	602b      	streq	r3, [r5, #0]
   13892:	2001      	moveq	r0, #1
   13894:	4620      	movne	r0, r4
   13896:	b004      	add	sp, #16
   13898:	bd70      	pop	{r4, r5, r6, pc}
   1389a:	bf00      	nop

0001389c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1389c:	9800      	ldr	r0, [sp, #0]
   1389e:	4290      	cmp	r0, r2
   138a0:	bf0c      	ite	eq
   138a2:	2006      	moveq	r0, #6
   138a4:	2001      	movne	r0, #1
   138a6:	4770      	bx	lr

000138a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   138a8:	b510      	push	{r4, lr}
   138aa:	4b03      	ldr	r3, [pc, #12]	; (138b8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   138ac:	6003      	str	r3, [r0, #0]
   138ae:	4604      	mov	r4, r0
   138b0:	f7ff ffbe 	bl	13830 <_ZNSt9type_infoD1Ev>
   138b4:	4620      	mov	r0, r4
   138b6:	bd10      	pop	{r4, pc}
   138b8:	00023ae0 	.word	0x00023ae0

000138bc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   138bc:	b510      	push	{r4, lr}
   138be:	4b05      	ldr	r3, [pc, #20]	; (138d4 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   138c0:	6003      	str	r3, [r0, #0]
   138c2:	4604      	mov	r4, r0
   138c4:	f7ff ffb4 	bl	13830 <_ZNSt9type_infoD1Ev>
   138c8:	4620      	mov	r0, r4
   138ca:	2108      	movs	r1, #8
   138cc:	f7ff fd84 	bl	133d8 <_ZdlPvj>
   138d0:	4620      	mov	r0, r4
   138d2:	bd10      	pop	{r4, pc}
   138d4:	00023ae0 	.word	0x00023ae0

000138d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   138d8:	b538      	push	{r3, r4, r5, lr}
   138da:	4615      	mov	r5, r2
   138dc:	461c      	mov	r4, r3
   138de:	f7ff ffab 	bl	13838 <_ZNKSt9type_infoeqERKS_>
   138e2:	b120      	cbz	r0, 138ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   138e4:	2208      	movs	r2, #8
   138e6:	2306      	movs	r3, #6
   138e8:	6025      	str	r5, [r4, #0]
   138ea:	60e2      	str	r2, [r4, #12]
   138ec:	7123      	strb	r3, [r4, #4]
   138ee:	bd38      	pop	{r3, r4, r5, pc}

000138f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   138f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138f4:	4617      	mov	r7, r2
   138f6:	461c      	mov	r4, r3
   138f8:	4606      	mov	r6, r0
   138fa:	460d      	mov	r5, r1
   138fc:	f7ff ff9c 	bl	13838 <_ZNKSt9type_infoeqERKS_>
   13900:	b908      	cbnz	r0, 13906 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   13902:	2c03      	cmp	r4, #3
   13904:	d901      	bls.n	1390a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   13906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1390a:	682b      	ldr	r3, [r5, #0]
   1390c:	463a      	mov	r2, r7
   1390e:	4631      	mov	r1, r6
   13910:	4628      	mov	r0, r5
   13912:	695b      	ldr	r3, [r3, #20]
   13914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13918:	4718      	bx	r3
   1391a:	bf00      	nop

0001391c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   1391c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1391e:	b083      	sub	sp, #12
   13920:	4617      	mov	r7, r2
   13922:	9d08      	ldr	r5, [sp, #32]
   13924:	990a      	ldr	r1, [sp, #40]	; 0x28
   13926:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13928:	428d      	cmp	r5, r1
   1392a:	4606      	mov	r6, r0
   1392c:	d00b      	beq.n	13946 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   1392e:	4619      	mov	r1, r3
   13930:	4630      	mov	r0, r6
   13932:	f7ff ff81 	bl	13838 <_ZNKSt9type_infoeqERKS_>
   13936:	b118      	cbz	r0, 13940 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   13938:	2301      	movs	r3, #1
   1393a:	6025      	str	r5, [r4, #0]
   1393c:	7127      	strb	r7, [r4, #4]
   1393e:	71a3      	strb	r3, [r4, #6]
   13940:	2000      	movs	r0, #0
   13942:	b003      	add	sp, #12
   13944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13946:	9909      	ldr	r1, [sp, #36]	; 0x24
   13948:	9301      	str	r3, [sp, #4]
   1394a:	f7ff ff75 	bl	13838 <_ZNKSt9type_infoeqERKS_>
   1394e:	b118      	cbz	r0, 13958 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   13950:	2000      	movs	r0, #0
   13952:	7167      	strb	r7, [r4, #5]
   13954:	b003      	add	sp, #12
   13956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13958:	9b01      	ldr	r3, [sp, #4]
   1395a:	e7e8      	b.n	1392e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0001395c <_ZdlPv>:
   1395c:	f00a b948 	b.w	1dbf0 <free>

00013960 <__cxa_end_cleanup>:
   13960:	b41e      	push	{r1, r2, r3, r4}
   13962:	f000 f891 	bl	13a88 <__gnu_end_cleanup>
   13966:	bc1e      	pop	{r1, r2, r3, r4}
   13968:	f009 fc82 	bl	1d270 <_Unwind_Resume>

0001396c <__cxa_type_match>:
   1396c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1396e:	7802      	ldrb	r2, [r0, #0]
   13970:	2a47      	cmp	r2, #71	; 0x47
   13972:	b083      	sub	sp, #12
   13974:	460d      	mov	r5, r1
   13976:	461f      	mov	r7, r3
   13978:	d01e      	beq.n	139b8 <__cxa_type_match+0x4c>
   1397a:	2300      	movs	r3, #0
   1397c:	4c27      	ldr	r4, [pc, #156]	; (13a1c <__cxa_type_match+0xb0>)
   1397e:	9301      	str	r3, [sp, #4]
   13980:	6823      	ldr	r3, [r4, #0]
   13982:	4620      	mov	r0, r4
   13984:	689b      	ldr	r3, [r3, #8]
   13986:	4798      	blx	r3
   13988:	b180      	cbz	r0, 139ac <__cxa_type_match+0x40>
   1398a:	9b01      	ldr	r3, [sp, #4]
   1398c:	681b      	ldr	r3, [r3, #0]
   1398e:	9301      	str	r3, [sp, #4]
   13990:	2602      	movs	r6, #2
   13992:	682b      	ldr	r3, [r5, #0]
   13994:	4621      	mov	r1, r4
   13996:	4628      	mov	r0, r5
   13998:	691c      	ldr	r4, [r3, #16]
   1399a:	aa01      	add	r2, sp, #4
   1399c:	2301      	movs	r3, #1
   1399e:	47a0      	blx	r4
   139a0:	b130      	cbz	r0, 139b0 <__cxa_type_match+0x44>
   139a2:	9b01      	ldr	r3, [sp, #4]
   139a4:	603b      	str	r3, [r7, #0]
   139a6:	4630      	mov	r0, r6
   139a8:	b003      	add	sp, #12
   139aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139ac:	2601      	movs	r6, #1
   139ae:	e7f0      	b.n	13992 <__cxa_type_match+0x26>
   139b0:	4606      	mov	r6, r0
   139b2:	4630      	mov	r0, r6
   139b4:	b003      	add	sp, #12
   139b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139b8:	7843      	ldrb	r3, [r0, #1]
   139ba:	2b4e      	cmp	r3, #78	; 0x4e
   139bc:	d1dd      	bne.n	1397a <__cxa_type_match+0xe>
   139be:	7883      	ldrb	r3, [r0, #2]
   139c0:	2b55      	cmp	r3, #85	; 0x55
   139c2:	d1da      	bne.n	1397a <__cxa_type_match+0xe>
   139c4:	78c3      	ldrb	r3, [r0, #3]
   139c6:	2b43      	cmp	r3, #67	; 0x43
   139c8:	d019      	beq.n	139fe <__cxa_type_match+0x92>
   139ca:	78c3      	ldrb	r3, [r0, #3]
   139cc:	2b43      	cmp	r3, #67	; 0x43
   139ce:	d1d4      	bne.n	1397a <__cxa_type_match+0xe>
   139d0:	7903      	ldrb	r3, [r0, #4]
   139d2:	2b43      	cmp	r3, #67	; 0x43
   139d4:	d1d1      	bne.n	1397a <__cxa_type_match+0xe>
   139d6:	7943      	ldrb	r3, [r0, #5]
   139d8:	2b2b      	cmp	r3, #43	; 0x2b
   139da:	d1ce      	bne.n	1397a <__cxa_type_match+0xe>
   139dc:	7983      	ldrb	r3, [r0, #6]
   139de:	2b2b      	cmp	r3, #43	; 0x2b
   139e0:	d1cb      	bne.n	1397a <__cxa_type_match+0xe>
   139e2:	79c3      	ldrb	r3, [r0, #7]
   139e4:	2b01      	cmp	r3, #1
   139e6:	d8c8      	bhi.n	1397a <__cxa_type_match+0xe>
   139e8:	d004      	beq.n	139f4 <__cxa_type_match+0x88>
   139ea:	f850 4c20 	ldr.w	r4, [r0, #-32]
   139ee:	3058      	adds	r0, #88	; 0x58
   139f0:	9001      	str	r0, [sp, #4]
   139f2:	e7c5      	b.n	13980 <__cxa_type_match+0x14>
   139f4:	f850 0c20 	ldr.w	r0, [r0, #-32]
   139f8:	f850 4c78 	ldr.w	r4, [r0, #-120]
   139fc:	e7f8      	b.n	139f0 <__cxa_type_match+0x84>
   139fe:	7903      	ldrb	r3, [r0, #4]
   13a00:	2b46      	cmp	r3, #70	; 0x46
   13a02:	d1e2      	bne.n	139ca <__cxa_type_match+0x5e>
   13a04:	7943      	ldrb	r3, [r0, #5]
   13a06:	2b4f      	cmp	r3, #79	; 0x4f
   13a08:	d1df      	bne.n	139ca <__cxa_type_match+0x5e>
   13a0a:	7983      	ldrb	r3, [r0, #6]
   13a0c:	2b52      	cmp	r3, #82	; 0x52
   13a0e:	d1dc      	bne.n	139ca <__cxa_type_match+0x5e>
   13a10:	79c3      	ldrb	r3, [r0, #7]
   13a12:	2b00      	cmp	r3, #0
   13a14:	d1d9      	bne.n	139ca <__cxa_type_match+0x5e>
   13a16:	9301      	str	r3, [sp, #4]
   13a18:	4c01      	ldr	r4, [pc, #4]	; (13a20 <__cxa_type_match+0xb4>)
   13a1a:	e7b1      	b.n	13980 <__cxa_type_match+0x14>
   13a1c:	00023998 	.word	0x00023998
   13a20:	00023990 	.word	0x00023990

00013a24 <__cxa_begin_cleanup>:
   13a24:	b510      	push	{r4, lr}
   13a26:	4604      	mov	r4, r0
   13a28:	f000 f98c 	bl	13d44 <__cxa_get_globals>
   13a2c:	7823      	ldrb	r3, [r4, #0]
   13a2e:	2b47      	cmp	r3, #71	; 0x47
   13a30:	f1a4 0220 	sub.w	r2, r4, #32
   13a34:	d004      	beq.n	13a40 <__cxa_begin_cleanup+0x1c>
   13a36:	6883      	ldr	r3, [r0, #8]
   13a38:	bb23      	cbnz	r3, 13a84 <__cxa_begin_cleanup+0x60>
   13a3a:	6082      	str	r2, [r0, #8]
   13a3c:	2001      	movs	r0, #1
   13a3e:	bd10      	pop	{r4, pc}
   13a40:	7863      	ldrb	r3, [r4, #1]
   13a42:	2b4e      	cmp	r3, #78	; 0x4e
   13a44:	d1f7      	bne.n	13a36 <__cxa_begin_cleanup+0x12>
   13a46:	78a3      	ldrb	r3, [r4, #2]
   13a48:	2b55      	cmp	r3, #85	; 0x55
   13a4a:	d1f4      	bne.n	13a36 <__cxa_begin_cleanup+0x12>
   13a4c:	78e3      	ldrb	r3, [r4, #3]
   13a4e:	2b43      	cmp	r3, #67	; 0x43
   13a50:	d1f1      	bne.n	13a36 <__cxa_begin_cleanup+0x12>
   13a52:	7923      	ldrb	r3, [r4, #4]
   13a54:	2b43      	cmp	r3, #67	; 0x43
   13a56:	d1ee      	bne.n	13a36 <__cxa_begin_cleanup+0x12>
   13a58:	7963      	ldrb	r3, [r4, #5]
   13a5a:	2b2b      	cmp	r3, #43	; 0x2b
   13a5c:	d1eb      	bne.n	13a36 <__cxa_begin_cleanup+0x12>
   13a5e:	79a3      	ldrb	r3, [r4, #6]
   13a60:	2b2b      	cmp	r3, #43	; 0x2b
   13a62:	d1e8      	bne.n	13a36 <__cxa_begin_cleanup+0x12>
   13a64:	79e3      	ldrb	r3, [r4, #7]
   13a66:	2b01      	cmp	r3, #1
   13a68:	d8e5      	bhi.n	13a36 <__cxa_begin_cleanup+0x12>
   13a6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13a6e:	3301      	adds	r3, #1
   13a70:	2b01      	cmp	r3, #1
   13a72:	f844 3c04 	str.w	r3, [r4, #-4]
   13a76:	d1e1      	bne.n	13a3c <__cxa_begin_cleanup+0x18>
   13a78:	6883      	ldr	r3, [r0, #8]
   13a7a:	f844 3c08 	str.w	r3, [r4, #-8]
   13a7e:	6082      	str	r2, [r0, #8]
   13a80:	2001      	movs	r0, #1
   13a82:	bd10      	pop	{r4, pc}
   13a84:	f7ff fd78 	bl	13578 <_ZSt9terminatev>

00013a88 <__gnu_end_cleanup>:
   13a88:	b508      	push	{r3, lr}
   13a8a:	f000 f95b 	bl	13d44 <__cxa_get_globals>
   13a8e:	6883      	ldr	r3, [r0, #8]
   13a90:	b383      	cbz	r3, 13af4 <__gnu_end_cleanup+0x6c>
   13a92:	f893 2020 	ldrb.w	r2, [r3, #32]
   13a96:	2a47      	cmp	r2, #71	; 0x47
   13a98:	d004      	beq.n	13aa4 <__gnu_end_cleanup+0x1c>
   13a9a:	2200      	movs	r2, #0
   13a9c:	6082      	str	r2, [r0, #8]
   13a9e:	f103 0020 	add.w	r0, r3, #32
   13aa2:	bd08      	pop	{r3, pc}
   13aa4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13aa8:	2a4e      	cmp	r2, #78	; 0x4e
   13aaa:	d1f6      	bne.n	13a9a <__gnu_end_cleanup+0x12>
   13aac:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13ab0:	2a55      	cmp	r2, #85	; 0x55
   13ab2:	d1f2      	bne.n	13a9a <__gnu_end_cleanup+0x12>
   13ab4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13ab8:	2a43      	cmp	r2, #67	; 0x43
   13aba:	d1ee      	bne.n	13a9a <__gnu_end_cleanup+0x12>
   13abc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13ac0:	2a43      	cmp	r2, #67	; 0x43
   13ac2:	d1ea      	bne.n	13a9a <__gnu_end_cleanup+0x12>
   13ac4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13ac8:	2a2b      	cmp	r2, #43	; 0x2b
   13aca:	d1e6      	bne.n	13a9a <__gnu_end_cleanup+0x12>
   13acc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13ad0:	2a2b      	cmp	r2, #43	; 0x2b
   13ad2:	d1e2      	bne.n	13a9a <__gnu_end_cleanup+0x12>
   13ad4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13ad8:	2a01      	cmp	r2, #1
   13ada:	d8de      	bhi.n	13a9a <__gnu_end_cleanup+0x12>
   13adc:	69da      	ldr	r2, [r3, #28]
   13ade:	3a01      	subs	r2, #1
   13ae0:	61da      	str	r2, [r3, #28]
   13ae2:	2a00      	cmp	r2, #0
   13ae4:	d1db      	bne.n	13a9e <__gnu_end_cleanup+0x16>
   13ae6:	699a      	ldr	r2, [r3, #24]
   13ae8:	6082      	str	r2, [r0, #8]
   13aea:	2200      	movs	r2, #0
   13aec:	619a      	str	r2, [r3, #24]
   13aee:	f103 0020 	add.w	r0, r3, #32
   13af2:	bd08      	pop	{r3, pc}
   13af4:	f7ff fd40 	bl	13578 <_ZSt9terminatev>

00013af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13af8:	7803      	ldrb	r3, [r0, #0]
   13afa:	2b47      	cmp	r3, #71	; 0x47
   13afc:	d001      	beq.n	13b02 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   13afe:	2000      	movs	r0, #0
   13b00:	4770      	bx	lr
   13b02:	7843      	ldrb	r3, [r0, #1]
   13b04:	2b4e      	cmp	r3, #78	; 0x4e
   13b06:	d1fa      	bne.n	13afe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13b08:	7883      	ldrb	r3, [r0, #2]
   13b0a:	2b55      	cmp	r3, #85	; 0x55
   13b0c:	d1f7      	bne.n	13afe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13b0e:	78c3      	ldrb	r3, [r0, #3]
   13b10:	2b43      	cmp	r3, #67	; 0x43
   13b12:	d1f4      	bne.n	13afe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13b14:	7903      	ldrb	r3, [r0, #4]
   13b16:	2b43      	cmp	r3, #67	; 0x43
   13b18:	d1f1      	bne.n	13afe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13b1a:	7943      	ldrb	r3, [r0, #5]
   13b1c:	2b2b      	cmp	r3, #43	; 0x2b
   13b1e:	d1ee      	bne.n	13afe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13b20:	7983      	ldrb	r3, [r0, #6]
   13b22:	2b2b      	cmp	r3, #43	; 0x2b
   13b24:	d1eb      	bne.n	13afe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13b26:	79c0      	ldrb	r0, [r0, #7]
   13b28:	2801      	cmp	r0, #1
   13b2a:	bf8c      	ite	hi
   13b2c:	2000      	movhi	r0, #0
   13b2e:	2001      	movls	r0, #1
   13b30:	4770      	bx	lr
   13b32:	bf00      	nop

00013b34 <__cxa_call_terminate>:
   13b34:	b510      	push	{r4, lr}
   13b36:	b130      	cbz	r0, 13b46 <__cxa_call_terminate+0x12>
   13b38:	4604      	mov	r4, r0
   13b3a:	f000 f87b 	bl	13c34 <__cxa_begin_catch>
   13b3e:	4620      	mov	r0, r4
   13b40:	f7ff ffda 	bl	13af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13b44:	b908      	cbnz	r0, 13b4a <__cxa_call_terminate+0x16>
   13b46:	f7ff fd17 	bl	13578 <_ZSt9terminatev>
   13b4a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   13b4e:	f7ff fcff 	bl	13550 <_ZN10__cxxabiv111__terminateEPFvvE>
   13b52:	bf00      	nop

00013b54 <__cxa_call_unexpected>:
   13b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b58:	b085      	sub	sp, #20
   13b5a:	4602      	mov	r2, r0
   13b5c:	f7ff ffcc 	bl	13af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13b60:	b160      	cbz	r0, 13b7c <__cxa_call_unexpected+0x28>
   13b62:	f852 8c18 	ldr.w	r8, [r2, #-24]
   13b66:	f852 5c14 	ldr.w	r5, [r2, #-20]
   13b6a:	6a96      	ldr	r6, [r2, #40]	; 0x28
   13b6c:	6b17      	ldr	r7, [r2, #48]	; 0x30
   13b6e:	6b54      	ldr	r4, [r2, #52]	; 0x34
   13b70:	4610      	mov	r0, r2
   13b72:	f000 f85f 	bl	13c34 <__cxa_begin_catch>
   13b76:	4640      	mov	r0, r8
   13b78:	f7ff fd08 	bl	1358c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13b7c:	4610      	mov	r0, r2
   13b7e:	f000 f859 	bl	13c34 <__cxa_begin_catch>
   13b82:	f7ff fd07 	bl	13594 <_ZSt10unexpectedv>
   13b86:	f000 f855 	bl	13c34 <__cxa_begin_catch>
   13b8a:	f7ff fcf5 	bl	13578 <_ZSt9terminatev>
   13b8e:	f000 f851 	bl	13c34 <__cxa_begin_catch>
   13b92:	f000 f8d3 	bl	13d3c <__cxa_get_globals_fast>
   13b96:	6803      	ldr	r3, [r0, #0]
   13b98:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13b9c:	2a01      	cmp	r2, #1
   13b9e:	d036      	beq.n	13c0e <__cxa_call_unexpected+0xba>
   13ba0:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13ba4:	f10d 0a10 	add.w	sl, sp, #16
   13ba8:	f04f 0800 	mov.w	r8, #0
   13bac:	3320      	adds	r3, #32
   13bae:	f84a 2d08 	str.w	r2, [sl, #-8]!
   13bb2:	f027 0b03 	bic.w	fp, r7, #3
   13bb6:	9301      	str	r3, [sp, #4]
   13bb8:	46c1      	mov	r9, r8
   13bba:	45b1      	cmp	r9, r6
   13bbc:	da1b      	bge.n	13bf6 <__cxa_call_unexpected+0xa2>
   13bbe:	6827      	ldr	r7, [r4, #0]
   13bc0:	b107      	cbz	r7, 13bc4 <__cxa_call_unexpected+0x70>
   13bc2:	4427      	add	r7, r4
   13bc4:	4653      	mov	r3, sl
   13bc6:	2200      	movs	r2, #0
   13bc8:	4639      	mov	r1, r7
   13bca:	9801      	ldr	r0, [sp, #4]
   13bcc:	f7ff fece 	bl	1396c <__cxa_type_match>
   13bd0:	bb10      	cbnz	r0, 13c18 <__cxa_call_unexpected+0xc4>
   13bd2:	683b      	ldr	r3, [r7, #0]
   13bd4:	4914      	ldr	r1, [pc, #80]	; (13c28 <__cxa_call_unexpected+0xd4>)
   13bd6:	691b      	ldr	r3, [r3, #16]
   13bd8:	9300      	str	r3, [sp, #0]
   13bda:	aa04      	add	r2, sp, #16
   13bdc:	2301      	movs	r3, #1
   13bde:	f842 0d04 	str.w	r0, [r2, #-4]!
   13be2:	4638      	mov	r0, r7
   13be4:	9f00      	ldr	r7, [sp, #0]
   13be6:	47b8      	blx	r7
   13be8:	2800      	cmp	r0, #0
   13bea:	bf18      	it	ne
   13bec:	4680      	movne	r8, r0
   13bee:	f109 0901 	add.w	r9, r9, #1
   13bf2:	445c      	add	r4, fp
   13bf4:	e7e1      	b.n	13bba <__cxa_call_unexpected+0x66>
   13bf6:	f1b8 0f00 	cmp.w	r8, #0
   13bfa:	d00a      	beq.n	13c12 <__cxa_call_unexpected+0xbe>
   13bfc:	2004      	movs	r0, #4
   13bfe:	f7ff fc5b 	bl	134b8 <__cxa_allocate_exception>
   13c02:	4b0a      	ldr	r3, [pc, #40]	; (13c2c <__cxa_call_unexpected+0xd8>)
   13c04:	6003      	str	r3, [r0, #0]
   13c06:	4a0a      	ldr	r2, [pc, #40]	; (13c30 <__cxa_call_unexpected+0xdc>)
   13c08:	4907      	ldr	r1, [pc, #28]	; (13c28 <__cxa_call_unexpected+0xd4>)
   13c0a:	f7ff fcff 	bl	1360c <__cxa_throw>
   13c0e:	681a      	ldr	r2, [r3, #0]
   13c10:	e7c8      	b.n	13ba4 <__cxa_call_unexpected+0x50>
   13c12:	4628      	mov	r0, r5
   13c14:	f7ff fc9c 	bl	13550 <_ZN10__cxxabiv111__terminateEPFvvE>
   13c18:	f7ff fd36 	bl	13688 <__cxa_rethrow>
   13c1c:	f000 f848 	bl	13cb0 <__cxa_end_catch>
   13c20:	f000 f846 	bl	13cb0 <__cxa_end_catch>
   13c24:	f7ff fe9c 	bl	13960 <__cxa_end_cleanup>
   13c28:	000239a0 	.word	0x000239a0
   13c2c:	00023a24 	.word	0x00023a24
   13c30:	00013535 	.word	0x00013535

00013c34 <__cxa_begin_catch>:
   13c34:	b538      	push	{r3, r4, r5, lr}
   13c36:	4604      	mov	r4, r0
   13c38:	f000 f884 	bl	13d44 <__cxa_get_globals>
   13c3c:	7822      	ldrb	r2, [r4, #0]
   13c3e:	6803      	ldr	r3, [r0, #0]
   13c40:	2a47      	cmp	r2, #71	; 0x47
   13c42:	f1a4 0120 	sub.w	r1, r4, #32
   13c46:	d004      	beq.n	13c52 <__cxa_begin_catch+0x1e>
   13c48:	bb83      	cbnz	r3, 13cac <__cxa_begin_catch+0x78>
   13c4a:	461c      	mov	r4, r3
   13c4c:	6001      	str	r1, [r0, #0]
   13c4e:	4620      	mov	r0, r4
   13c50:	bd38      	pop	{r3, r4, r5, pc}
   13c52:	7862      	ldrb	r2, [r4, #1]
   13c54:	2a4e      	cmp	r2, #78	; 0x4e
   13c56:	d1f7      	bne.n	13c48 <__cxa_begin_catch+0x14>
   13c58:	78a2      	ldrb	r2, [r4, #2]
   13c5a:	2a55      	cmp	r2, #85	; 0x55
   13c5c:	d1f4      	bne.n	13c48 <__cxa_begin_catch+0x14>
   13c5e:	78e2      	ldrb	r2, [r4, #3]
   13c60:	2a43      	cmp	r2, #67	; 0x43
   13c62:	d1f1      	bne.n	13c48 <__cxa_begin_catch+0x14>
   13c64:	7922      	ldrb	r2, [r4, #4]
   13c66:	2a43      	cmp	r2, #67	; 0x43
   13c68:	d1ee      	bne.n	13c48 <__cxa_begin_catch+0x14>
   13c6a:	7962      	ldrb	r2, [r4, #5]
   13c6c:	2a2b      	cmp	r2, #43	; 0x2b
   13c6e:	d1eb      	bne.n	13c48 <__cxa_begin_catch+0x14>
   13c70:	79a2      	ldrb	r2, [r4, #6]
   13c72:	2a2b      	cmp	r2, #43	; 0x2b
   13c74:	d1e8      	bne.n	13c48 <__cxa_begin_catch+0x14>
   13c76:	79e2      	ldrb	r2, [r4, #7]
   13c78:	2a01      	cmp	r2, #1
   13c7a:	d8e5      	bhi.n	13c48 <__cxa_begin_catch+0x14>
   13c7c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   13c80:	2a00      	cmp	r2, #0
   13c82:	db10      	blt.n	13ca6 <__cxa_begin_catch+0x72>
   13c84:	3201      	adds	r2, #1
   13c86:	6845      	ldr	r5, [r0, #4]
   13c88:	f844 2c0c 	str.w	r2, [r4, #-12]
   13c8c:	3d01      	subs	r5, #1
   13c8e:	6045      	str	r5, [r0, #4]
   13c90:	428b      	cmp	r3, r1
   13c92:	bf1c      	itt	ne
   13c94:	f844 3c10 	strne.w	r3, [r4, #-16]
   13c98:	6001      	strne	r1, [r0, #0]
   13c9a:	4620      	mov	r0, r4
   13c9c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13c9e:	f008 ff39 	bl	1cb14 <_Unwind_Complete>
   13ca2:	4620      	mov	r0, r4
   13ca4:	bd38      	pop	{r3, r4, r5, pc}
   13ca6:	f1c2 0201 	rsb	r2, r2, #1
   13caa:	e7ec      	b.n	13c86 <__cxa_begin_catch+0x52>
   13cac:	f7ff fc64 	bl	13578 <_ZSt9terminatev>

00013cb0 <__cxa_end_catch>:
   13cb0:	b508      	push	{r3, lr}
   13cb2:	f000 f843 	bl	13d3c <__cxa_get_globals_fast>
   13cb6:	4602      	mov	r2, r0
   13cb8:	6800      	ldr	r0, [r0, #0]
   13cba:	2800      	cmp	r0, #0
   13cbc:	d03d      	beq.n	13d3a <__cxa_end_catch+0x8a>
   13cbe:	f890 3020 	ldrb.w	r3, [r0, #32]
   13cc2:	2b47      	cmp	r3, #71	; 0x47
   13cc4:	d006      	beq.n	13cd4 <__cxa_end_catch+0x24>
   13cc6:	2300      	movs	r3, #0
   13cc8:	6013      	str	r3, [r2, #0]
   13cca:	3020      	adds	r0, #32
   13ccc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13cd0:	f008 bf22 	b.w	1cb18 <_Unwind_DeleteException>
   13cd4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13cd8:	2b4e      	cmp	r3, #78	; 0x4e
   13cda:	d1f4      	bne.n	13cc6 <__cxa_end_catch+0x16>
   13cdc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   13ce0:	2b55      	cmp	r3, #85	; 0x55
   13ce2:	d1f0      	bne.n	13cc6 <__cxa_end_catch+0x16>
   13ce4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13ce8:	2b43      	cmp	r3, #67	; 0x43
   13cea:	d1ec      	bne.n	13cc6 <__cxa_end_catch+0x16>
   13cec:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13cf0:	2b43      	cmp	r3, #67	; 0x43
   13cf2:	d1e8      	bne.n	13cc6 <__cxa_end_catch+0x16>
   13cf4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13cf8:	2b2b      	cmp	r3, #43	; 0x2b
   13cfa:	d1e4      	bne.n	13cc6 <__cxa_end_catch+0x16>
   13cfc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   13d00:	2b2b      	cmp	r3, #43	; 0x2b
   13d02:	d1e0      	bne.n	13cc6 <__cxa_end_catch+0x16>
   13d04:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13d08:	2b01      	cmp	r3, #1
   13d0a:	d8dc      	bhi.n	13cc6 <__cxa_end_catch+0x16>
   13d0c:	6943      	ldr	r3, [r0, #20]
   13d0e:	2b00      	cmp	r3, #0
   13d10:	db05      	blt.n	13d1e <__cxa_end_catch+0x6e>
   13d12:	3b01      	subs	r3, #1
   13d14:	d008      	beq.n	13d28 <__cxa_end_catch+0x78>
   13d16:	1c5a      	adds	r2, r3, #1
   13d18:	d00d      	beq.n	13d36 <__cxa_end_catch+0x86>
   13d1a:	6143      	str	r3, [r0, #20]
   13d1c:	bd08      	pop	{r3, pc}
   13d1e:	3301      	adds	r3, #1
   13d20:	d1fb      	bne.n	13d1a <__cxa_end_catch+0x6a>
   13d22:	6901      	ldr	r1, [r0, #16]
   13d24:	6011      	str	r1, [r2, #0]
   13d26:	e7f8      	b.n	13d1a <__cxa_end_catch+0x6a>
   13d28:	6903      	ldr	r3, [r0, #16]
   13d2a:	6013      	str	r3, [r2, #0]
   13d2c:	3020      	adds	r0, #32
   13d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13d32:	f008 bef1 	b.w	1cb18 <_Unwind_DeleteException>
   13d36:	f7ff fc1f 	bl	13578 <_ZSt9terminatev>
   13d3a:	bd08      	pop	{r3, pc}

00013d3c <__cxa_get_globals_fast>:
   13d3c:	4800      	ldr	r0, [pc, #0]	; (13d40 <__cxa_get_globals_fast+0x4>)
   13d3e:	4770      	bx	lr
   13d40:	20002290 	.word	0x20002290

00013d44 <__cxa_get_globals>:
   13d44:	4800      	ldr	r0, [pc, #0]	; (13d48 <__cxa_get_globals+0x4>)
   13d46:	4770      	bx	lr
   13d48:	20002290 	.word	0x20002290

00013d4c <_ZL28read_encoded_value_with_basehjPKhPj>:
   13d4c:	2850      	cmp	r0, #80	; 0x50
   13d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d50:	d054      	beq.n	13dfc <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   13d52:	f000 040f 	and.w	r4, r0, #15
   13d56:	2c0c      	cmp	r4, #12
   13d58:	d84e      	bhi.n	13df8 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   13d5a:	e8df f004 	tbb	[pc, r4]
   13d5e:	3907      	.short	0x3907
   13d60:	4d170749 	.word	0x4d170749
   13d64:	1f4d4d4d 	.word	0x1f4d4d4d
   13d68:	071b      	.short	0x071b
   13d6a:	17          	.byte	0x17
   13d6b:	00          	.byte	0x00
   13d6c:	4615      	mov	r5, r2
   13d6e:	f855 4b04 	ldr.w	r4, [r5], #4
   13d72:	b144      	cbz	r4, 13d86 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   13d74:	f000 0670 	and.w	r6, r0, #112	; 0x70
   13d78:	2e10      	cmp	r6, #16
   13d7a:	bf08      	it	eq
   13d7c:	4611      	moveq	r1, r2
   13d7e:	440c      	add	r4, r1
   13d80:	0602      	lsls	r2, r0, #24
   13d82:	bf48      	it	mi
   13d84:	6824      	ldrmi	r4, [r4, #0]
   13d86:	601c      	str	r4, [r3, #0]
   13d88:	4628      	mov	r0, r5
   13d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d8c:	4615      	mov	r5, r2
   13d8e:	f855 4b08 	ldr.w	r4, [r5], #8
   13d92:	e7ee      	b.n	13d72 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13d94:	4615      	mov	r5, r2
   13d96:	f935 4b02 	ldrsh.w	r4, [r5], #2
   13d9a:	e7ea      	b.n	13d72 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13d9c:	2400      	movs	r4, #0
   13d9e:	4627      	mov	r7, r4
   13da0:	4615      	mov	r5, r2
   13da2:	f815 eb01 	ldrb.w	lr, [r5], #1
   13da6:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13daa:	40be      	lsls	r6, r7
   13dac:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13db0:	ea44 0406 	orr.w	r4, r4, r6
   13db4:	f107 0707 	add.w	r7, r7, #7
   13db8:	d1f3      	bne.n	13da2 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   13dba:	2f1f      	cmp	r7, #31
   13dbc:	d8d9      	bhi.n	13d72 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13dbe:	f01e 0f40 	tst.w	lr, #64	; 0x40
   13dc2:	d0d6      	beq.n	13d72 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13dc4:	f04f 36ff 	mov.w	r6, #4294967295
   13dc8:	fa06 f707 	lsl.w	r7, r6, r7
   13dcc:	433c      	orrs	r4, r7
   13dce:	e7d1      	b.n	13d74 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   13dd0:	2400      	movs	r4, #0
   13dd2:	4627      	mov	r7, r4
   13dd4:	4615      	mov	r5, r2
   13dd6:	f815 eb01 	ldrb.w	lr, [r5], #1
   13dda:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13dde:	40be      	lsls	r6, r7
   13de0:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13de4:	ea44 0406 	orr.w	r4, r4, r6
   13de8:	f107 0707 	add.w	r7, r7, #7
   13dec:	d1f3      	bne.n	13dd6 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   13dee:	e7c0      	b.n	13d72 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13df0:	4615      	mov	r5, r2
   13df2:	f835 4b02 	ldrh.w	r4, [r5], #2
   13df6:	e7bc      	b.n	13d72 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13df8:	f009 fc44 	bl	1d684 <abort>
   13dfc:	3203      	adds	r2, #3
   13dfe:	f022 0503 	bic.w	r5, r2, #3
   13e02:	f855 4b04 	ldr.w	r4, [r5], #4
   13e06:	601c      	str	r4, [r3, #0]
   13e08:	4628      	mov	r0, r5
   13e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013e0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   13e0c:	28ff      	cmp	r0, #255	; 0xff
   13e0e:	d00d      	beq.n	13e2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13e10:	f000 0070 	and.w	r0, r0, #112	; 0x70
   13e14:	2820      	cmp	r0, #32
   13e16:	d015      	beq.n	13e44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   13e18:	d90a      	bls.n	13e30 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   13e1a:	2840      	cmp	r0, #64	; 0x40
   13e1c:	d00f      	beq.n	13e3e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   13e1e:	2850      	cmp	r0, #80	; 0x50
   13e20:	d004      	beq.n	13e2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13e22:	2830      	cmp	r0, #48	; 0x30
   13e24:	d108      	bne.n	13e38 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   13e26:	4608      	mov	r0, r1
   13e28:	f009 bc26 	b.w	1d678 <_Unwind_GetDataRelBase>
   13e2c:	2000      	movs	r0, #0
   13e2e:	4770      	bx	lr
   13e30:	2800      	cmp	r0, #0
   13e32:	d0fb      	beq.n	13e2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13e34:	2810      	cmp	r0, #16
   13e36:	d0f9      	beq.n	13e2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13e38:	b508      	push	{r3, lr}
   13e3a:	f009 fc23 	bl	1d684 <abort>
   13e3e:	4608      	mov	r0, r1
   13e40:	f009 bc06 	b.w	1d650 <_Unwind_GetRegionStart>
   13e44:	4608      	mov	r0, r1
   13e46:	f009 bc13 	b.w	1d670 <_Unwind_GetTextRelBase>
   13e4a:	bf00      	nop

00013e4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   13e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e4e:	460c      	mov	r4, r1
   13e50:	4615      	mov	r5, r2
   13e52:	4607      	mov	r7, r0
   13e54:	2800      	cmp	r0, #0
   13e56:	d044      	beq.n	13ee2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   13e58:	f009 fbfa 	bl	1d650 <_Unwind_GetRegionStart>
   13e5c:	6028      	str	r0, [r5, #0]
   13e5e:	7826      	ldrb	r6, [r4, #0]
   13e60:	2eff      	cmp	r6, #255	; 0xff
   13e62:	f104 0401 	add.w	r4, r4, #1
   13e66:	d032      	beq.n	13ece <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   13e68:	4639      	mov	r1, r7
   13e6a:	4630      	mov	r0, r6
   13e6c:	f7ff ffce 	bl	13e0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13e70:	4622      	mov	r2, r4
   13e72:	4601      	mov	r1, r0
   13e74:	1d2b      	adds	r3, r5, #4
   13e76:	4630      	mov	r0, r6
   13e78:	f7ff ff68 	bl	13d4c <_ZL28read_encoded_value_with_basehjPKhPj>
   13e7c:	4604      	mov	r4, r0
   13e7e:	1c60      	adds	r0, r4, #1
   13e80:	7823      	ldrb	r3, [r4, #0]
   13e82:	752b      	strb	r3, [r5, #20]
   13e84:	2bff      	cmp	r3, #255	; 0xff
   13e86:	d029      	beq.n	13edc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   13e88:	2310      	movs	r3, #16
   13e8a:	2400      	movs	r4, #0
   13e8c:	752b      	strb	r3, [r5, #20]
   13e8e:	4622      	mov	r2, r4
   13e90:	f810 1b01 	ldrb.w	r1, [r0], #1
   13e94:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13e98:	4093      	lsls	r3, r2
   13e9a:	0609      	lsls	r1, r1, #24
   13e9c:	ea44 0403 	orr.w	r4, r4, r3
   13ea0:	f102 0207 	add.w	r2, r2, #7
   13ea4:	d4f4      	bmi.n	13e90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   13ea6:	4404      	add	r4, r0
   13ea8:	60ec      	str	r4, [r5, #12]
   13eaa:	7803      	ldrb	r3, [r0, #0]
   13eac:	756b      	strb	r3, [r5, #21]
   13eae:	2400      	movs	r4, #0
   13eb0:	3001      	adds	r0, #1
   13eb2:	4622      	mov	r2, r4
   13eb4:	f810 1b01 	ldrb.w	r1, [r0], #1
   13eb8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13ebc:	4093      	lsls	r3, r2
   13ebe:	431c      	orrs	r4, r3
   13ec0:	060b      	lsls	r3, r1, #24
   13ec2:	f102 0207 	add.w	r2, r2, #7
   13ec6:	d4f5      	bmi.n	13eb4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   13ec8:	4404      	add	r4, r0
   13eca:	612c      	str	r4, [r5, #16]
   13ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ece:	6068      	str	r0, [r5, #4]
   13ed0:	7823      	ldrb	r3, [r4, #0]
   13ed2:	752b      	strb	r3, [r5, #20]
   13ed4:	2bff      	cmp	r3, #255	; 0xff
   13ed6:	f104 0001 	add.w	r0, r4, #1
   13eda:	d1d5      	bne.n	13e88 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   13edc:	2300      	movs	r3, #0
   13ede:	60eb      	str	r3, [r5, #12]
   13ee0:	e7e3      	b.n	13eaa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   13ee2:	e7bb      	b.n	13e5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00013ee4 <__gxx_personality_v0>:
   13ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ee8:	f000 0403 	and.w	r4, r0, #3
   13eec:	b097      	sub	sp, #92	; 0x5c
   13eee:	2300      	movs	r3, #0
   13ef0:	2c01      	cmp	r4, #1
   13ef2:	4689      	mov	r9, r1
   13ef4:	4617      	mov	r7, r2
   13ef6:	930a      	str	r3, [sp, #40]	; 0x28
   13ef8:	d01e      	beq.n	13f38 <__gxx_personality_v0+0x54>
   13efa:	d30e      	bcc.n	13f1a <__gxx_personality_v0+0x36>
   13efc:	2c02      	cmp	r4, #2
   13efe:	d10a      	bne.n	13f16 <__gxx_personality_v0+0x32>
   13f00:	4639      	mov	r1, r7
   13f02:	4648      	mov	r0, r9
   13f04:	f009 fb90 	bl	1d628 <__gnu_unwind_frame>
   13f08:	2800      	cmp	r0, #0
   13f0a:	f000 80a5 	beq.w	14058 <__gxx_personality_v0+0x174>
   13f0e:	2009      	movs	r0, #9
   13f10:	b017      	add	sp, #92	; 0x5c
   13f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f16:	f009 fbb5 	bl	1d684 <abort>
   13f1a:	0700      	lsls	r0, r0, #28
   13f1c:	d4f0      	bmi.n	13f00 <__gxx_personality_v0+0x1c>
   13f1e:	2301      	movs	r3, #1
   13f20:	9303      	str	r3, [sp, #12]
   13f22:	aa16      	add	r2, sp, #88	; 0x58
   13f24:	2300      	movs	r3, #0
   13f26:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13f2a:	4619      	mov	r1, r3
   13f2c:	9200      	str	r2, [sp, #0]
   13f2e:	4638      	mov	r0, r7
   13f30:	220c      	movs	r2, #12
   13f32:	f008 fe1d 	bl	1cb70 <_Unwind_VRS_Set>
   13f36:	e00f      	b.n	13f58 <__gxx_personality_v0+0x74>
   13f38:	f010 0408 	ands.w	r4, r0, #8
   13f3c:	f000 8090 	beq.w	14060 <__gxx_personality_v0+0x17c>
   13f40:	aa16      	add	r2, sp, #88	; 0x58
   13f42:	f044 0402 	orr.w	r4, r4, #2
   13f46:	f842 1d2c 	str.w	r1, [r2, #-44]!
   13f4a:	4638      	mov	r0, r7
   13f4c:	9200      	str	r2, [sp, #0]
   13f4e:	4619      	mov	r1, r3
   13f50:	220c      	movs	r2, #12
   13f52:	9403      	str	r4, [sp, #12]
   13f54:	f008 fe0c 	bl	1cb70 <_Unwind_VRS_Set>
   13f58:	4638      	mov	r0, r7
   13f5a:	f009 fb7f 	bl	1d65c <_Unwind_GetLanguageSpecificData>
   13f5e:	9005      	str	r0, [sp, #20]
   13f60:	2800      	cmp	r0, #0
   13f62:	d0cd      	beq.n	13f00 <__gxx_personality_v0+0x1c>
   13f64:	ab10      	add	r3, sp, #64	; 0x40
   13f66:	461a      	mov	r2, r3
   13f68:	9905      	ldr	r1, [sp, #20]
   13f6a:	9306      	str	r3, [sp, #24]
   13f6c:	4638      	mov	r0, r7
   13f6e:	f7ff ff6d 	bl	13e4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   13f72:	4639      	mov	r1, r7
   13f74:	4604      	mov	r4, r0
   13f76:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   13f7a:	f7ff ff47 	bl	13e0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13f7e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   13f82:	2300      	movs	r3, #0
   13f84:	9012      	str	r0, [sp, #72]	; 0x48
   13f86:	4619      	mov	r1, r3
   13f88:	220f      	movs	r2, #15
   13f8a:	f8cd b000 	str.w	fp, [sp]
   13f8e:	4638      	mov	r0, r7
   13f90:	f008 fdc8 	bl	1cb24 <_Unwind_VRS_Get>
   13f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13f96:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13f98:	f023 0301 	bic.w	r3, r3, #1
   13f9c:	42a2      	cmp	r2, r4
   13f9e:	f103 36ff 	add.w	r6, r3, #4294967295
   13fa2:	d975      	bls.n	14090 <__gxx_personality_v0+0x1ac>
   13fa4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   13fa8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13fac:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   13fb0:	2100      	movs	r1, #0
   13fb2:	4628      	mov	r0, r5
   13fb4:	f7ff ff2a 	bl	13e0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13fb8:	4622      	mov	r2, r4
   13fba:	4653      	mov	r3, sl
   13fbc:	4601      	mov	r1, r0
   13fbe:	4628      	mov	r0, r5
   13fc0:	f7ff fec4 	bl	13d4c <_ZL28read_encoded_value_with_basehjPKhPj>
   13fc4:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13fc8:	4605      	mov	r5, r0
   13fca:	2100      	movs	r1, #0
   13fcc:	4620      	mov	r0, r4
   13fce:	f7ff ff1d 	bl	13e0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13fd2:	462a      	mov	r2, r5
   13fd4:	4643      	mov	r3, r8
   13fd6:	4601      	mov	r1, r0
   13fd8:	4620      	mov	r0, r4
   13fda:	f7ff feb7 	bl	13d4c <_ZL28read_encoded_value_with_basehjPKhPj>
   13fde:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13fe2:	4605      	mov	r5, r0
   13fe4:	2100      	movs	r1, #0
   13fe6:	4620      	mov	r0, r4
   13fe8:	f7ff ff10 	bl	13e0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13fec:	462a      	mov	r2, r5
   13fee:	4601      	mov	r1, r0
   13ff0:	465b      	mov	r3, fp
   13ff2:	4620      	mov	r0, r4
   13ff4:	f7ff feaa 	bl	13d4c <_ZL28read_encoded_value_with_basehjPKhPj>
   13ff8:	4604      	mov	r4, r0
   13ffa:	2000      	movs	r0, #0
   13ffc:	4602      	mov	r2, r0
   13ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
   14002:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   14006:	4093      	lsls	r3, r2
   14008:	0609      	lsls	r1, r1, #24
   1400a:	ea40 0003 	orr.w	r0, r0, r3
   1400e:	f102 0207 	add.w	r2, r2, #7
   14012:	d4f4      	bmi.n	13ffe <__gxx_personality_v0+0x11a>
   14014:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14018:	4413      	add	r3, r2
   1401a:	429e      	cmp	r6, r3
   1401c:	d231      	bcs.n	14082 <__gxx_personality_v0+0x19e>
   1401e:	9b03      	ldr	r3, [sp, #12]
   14020:	07db      	lsls	r3, r3, #31
   14022:	d539      	bpl.n	14098 <__gxx_personality_v0+0x1b4>
   14024:	2500      	movs	r5, #0
   14026:	9504      	str	r5, [sp, #16]
   14028:	2300      	movs	r3, #0
   1402a:	4619      	mov	r1, r3
   1402c:	220d      	movs	r2, #13
   1402e:	f8cd 8000 	str.w	r8, [sp]
   14032:	4638      	mov	r0, r7
   14034:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14036:	f008 fd75 	bl	1cb24 <_Unwind_VRS_Get>
   1403a:	9a05      	ldr	r2, [sp, #20]
   1403c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1403e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   14042:	9a04      	ldr	r2, [sp, #16]
   14044:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   14048:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   1404c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14050:	f8c9 3020 	str.w	r3, [r9, #32]
   14054:	2006      	movs	r0, #6
   14056:	e75b      	b.n	13f10 <__gxx_personality_v0+0x2c>
   14058:	2008      	movs	r0, #8
   1405a:	b017      	add	sp, #92	; 0x5c
   1405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14060:	ab10      	add	r3, sp, #64	; 0x40
   14062:	9300      	str	r3, [sp, #0]
   14064:	9306      	str	r3, [sp, #24]
   14066:	220d      	movs	r2, #13
   14068:	4623      	mov	r3, r4
   1406a:	4621      	mov	r1, r4
   1406c:	4638      	mov	r0, r7
   1406e:	f8d9 5020 	ldr.w	r5, [r9, #32]
   14072:	f008 fd57 	bl	1cb24 <_Unwind_VRS_Get>
   14076:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14078:	429d      	cmp	r5, r3
   1407a:	d012      	beq.n	140a2 <__gxx_personality_v0+0x1be>
   1407c:	2302      	movs	r3, #2
   1407e:	9303      	str	r3, [sp, #12]
   14080:	e74f      	b.n	13f22 <__gxx_personality_v0+0x3e>
   14082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14084:	4413      	add	r3, r2
   14086:	429e      	cmp	r6, r3
   14088:	d359      	bcc.n	1413e <__gxx_personality_v0+0x25a>
   1408a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1408c:	42a3      	cmp	r3, r4
   1408e:	d88d      	bhi.n	13fac <__gxx_personality_v0+0xc8>
   14090:	2500      	movs	r5, #0
   14092:	9504      	str	r5, [sp, #16]
   14094:	2401      	movs	r4, #1
   14096:	e105      	b.n	142a4 <__gxx_personality_v0+0x3c0>
   14098:	9b03      	ldr	r3, [sp, #12]
   1409a:	071b      	lsls	r3, r3, #28
   1409c:	d54c      	bpl.n	14138 <__gxx_personality_v0+0x254>
   1409e:	f7ff fa6b 	bl	13578 <_ZSt9terminatev>
   140a2:	aa16      	add	r2, sp, #88	; 0x58
   140a4:	4623      	mov	r3, r4
   140a6:	f842 9d2c 	str.w	r9, [r2, #-44]!
   140aa:	4621      	mov	r1, r4
   140ac:	9200      	str	r2, [sp, #0]
   140ae:	4638      	mov	r0, r7
   140b0:	220c      	movs	r2, #12
   140b2:	f008 fd5d 	bl	1cb70 <_Unwind_VRS_Set>
   140b6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   140ba:	9304      	str	r3, [sp, #16]
   140bc:	2b00      	cmp	r3, #0
   140be:	d03b      	beq.n	14138 <__gxx_personality_v0+0x254>
   140c0:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   140c4:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   140c8:	2403      	movs	r4, #3
   140ca:	2d00      	cmp	r5, #0
   140cc:	f2c0 8106 	blt.w	142dc <__gxx_personality_v0+0x3f8>
   140d0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   140d4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   140d8:	a916      	add	r1, sp, #88	; 0x58
   140da:	2300      	movs	r3, #0
   140dc:	f841 9d28 	str.w	r9, [r1, #-40]!
   140e0:	461a      	mov	r2, r3
   140e2:	9100      	str	r1, [sp, #0]
   140e4:	4638      	mov	r0, r7
   140e6:	4619      	mov	r1, r3
   140e8:	f008 fd42 	bl	1cb70 <_Unwind_VRS_Set>
   140ec:	2300      	movs	r3, #0
   140ee:	4619      	mov	r1, r3
   140f0:	2201      	movs	r2, #1
   140f2:	f8cd a000 	str.w	sl, [sp]
   140f6:	4638      	mov	r0, r7
   140f8:	950d      	str	r5, [sp, #52]	; 0x34
   140fa:	f008 fd39 	bl	1cb70 <_Unwind_VRS_Set>
   140fe:	2300      	movs	r3, #0
   14100:	4619      	mov	r1, r3
   14102:	220f      	movs	r2, #15
   14104:	f8cd 8000 	str.w	r8, [sp]
   14108:	4638      	mov	r0, r7
   1410a:	f008 fd0b 	bl	1cb24 <_Unwind_VRS_Get>
   1410e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14110:	9a04      	ldr	r2, [sp, #16]
   14112:	f8cd 8000 	str.w	r8, [sp]
   14116:	f003 0501 	and.w	r5, r3, #1
   1411a:	2300      	movs	r3, #0
   1411c:	4315      	orrs	r5, r2
   1411e:	4638      	mov	r0, r7
   14120:	4619      	mov	r1, r3
   14122:	220f      	movs	r2, #15
   14124:	950e      	str	r5, [sp, #56]	; 0x38
   14126:	f008 fd23 	bl	1cb70 <_Unwind_VRS_Set>
   1412a:	2c02      	cmp	r4, #2
   1412c:	f000 8080 	beq.w	14230 <__gxx_personality_v0+0x34c>
   14130:	2007      	movs	r0, #7
   14132:	b017      	add	sp, #92	; 0x5c
   14134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14138:	4648      	mov	r0, r9
   1413a:	f7ff fcfb 	bl	13b34 <__cxa_call_terminate>
   1413e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14140:	9304      	str	r3, [sp, #16]
   14142:	461a      	mov	r2, r3
   14144:	2b00      	cmp	r3, #0
   14146:	d178      	bne.n	1423a <__gxx_personality_v0+0x356>
   14148:	2800      	cmp	r0, #0
   1414a:	f43f aed9 	beq.w	13f00 <__gxx_personality_v0+0x1c>
   1414e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14150:	9a04      	ldr	r2, [sp, #16]
   14152:	3801      	subs	r0, #1
   14154:	4403      	add	r3, r0
   14156:	2a00      	cmp	r2, #0
   14158:	f43f aed2 	beq.w	13f00 <__gxx_personality_v0+0x1c>
   1415c:	2b00      	cmp	r3, #0
   1415e:	d075      	beq.n	1424c <__gxx_personality_v0+0x368>
   14160:	9a03      	ldr	r2, [sp, #12]
   14162:	f012 0208 	ands.w	r2, r2, #8
   14166:	9209      	str	r2, [sp, #36]	; 0x24
   14168:	f000 80f6 	beq.w	14358 <__gxx_personality_v0+0x474>
   1416c:	2147      	movs	r1, #71	; 0x47
   1416e:	224e      	movs	r2, #78	; 0x4e
   14170:	f889 1000 	strb.w	r1, [r9]
   14174:	f889 2001 	strb.w	r2, [r9, #1]
   14178:	2155      	movs	r1, #85	; 0x55
   1417a:	2243      	movs	r2, #67	; 0x43
   1417c:	f889 1002 	strb.w	r1, [r9, #2]
   14180:	f889 2003 	strb.w	r2, [r9, #3]
   14184:	2146      	movs	r1, #70	; 0x46
   14186:	224f      	movs	r2, #79	; 0x4f
   14188:	f889 1004 	strb.w	r1, [r9, #4]
   1418c:	f889 2005 	strb.w	r2, [r9, #5]
   14190:	2152      	movs	r1, #82	; 0x52
   14192:	2200      	movs	r2, #0
   14194:	f889 1006 	strb.w	r1, [r9, #6]
   14198:	f889 2007 	strb.w	r2, [r9, #7]
   1419c:	2200      	movs	r2, #0
   1419e:	9208      	str	r2, [sp, #32]
   141a0:	9707      	str	r7, [sp, #28]
   141a2:	2500      	movs	r5, #0
   141a4:	4629      	mov	r1, r5
   141a6:	e000      	b.n	141aa <__gxx_personality_v0+0x2c6>
   141a8:	4623      	mov	r3, r4
   141aa:	461c      	mov	r4, r3
   141ac:	f814 0b01 	ldrb.w	r0, [r4], #1
   141b0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   141b4:	408a      	lsls	r2, r1
   141b6:	0606      	lsls	r6, r0, #24
   141b8:	ea45 0502 	orr.w	r5, r5, r2
   141bc:	f101 0107 	add.w	r1, r1, #7
   141c0:	d4f2      	bmi.n	141a8 <__gxx_personality_v0+0x2c4>
   141c2:	291f      	cmp	r1, #31
   141c4:	d805      	bhi.n	141d2 <__gxx_personality_v0+0x2ee>
   141c6:	0642      	lsls	r2, r0, #25
   141c8:	d503      	bpl.n	141d2 <__gxx_personality_v0+0x2ee>
   141ca:	2201      	movs	r2, #1
   141cc:	408a      	lsls	r2, r1
   141ce:	4252      	negs	r2, r2
   141d0:	4315      	orrs	r5, r2
   141d2:	2600      	movs	r6, #0
   141d4:	4631      	mov	r1, r6
   141d6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   141da:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   141de:	408a      	lsls	r2, r1
   141e0:	0607      	lsls	r7, r0, #24
   141e2:	ea46 0602 	orr.w	r6, r6, r2
   141e6:	f101 0107 	add.w	r1, r1, #7
   141ea:	d4f4      	bmi.n	141d6 <__gxx_personality_v0+0x2f2>
   141ec:	291f      	cmp	r1, #31
   141ee:	d805      	bhi.n	141fc <__gxx_personality_v0+0x318>
   141f0:	0640      	lsls	r0, r0, #25
   141f2:	d503      	bpl.n	141fc <__gxx_personality_v0+0x318>
   141f4:	2301      	movs	r3, #1
   141f6:	408b      	lsls	r3, r1
   141f8:	425b      	negs	r3, r3
   141fa:	431e      	orrs	r6, r3
   141fc:	2d00      	cmp	r5, #0
   141fe:	d05c      	beq.n	142ba <__gxx_personality_v0+0x3d6>
   14200:	dd5e      	ble.n	142c0 <__gxx_personality_v0+0x3dc>
   14202:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14206:	28ff      	cmp	r0, #255	; 0xff
   14208:	f000 80a4 	beq.w	14354 <__gxx_personality_v0+0x470>
   1420c:	f000 0307 	and.w	r3, r0, #7
   14210:	2b04      	cmp	r3, #4
   14212:	f63f ae80 	bhi.w	13f16 <__gxx_personality_v0+0x32>
   14216:	a201      	add	r2, pc, #4	; (adr r2, 1421c <__gxx_personality_v0+0x338>)
   14218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1421c:	00014287 	.word	0x00014287
   14220:	00013f17 	.word	0x00013f17
   14224:	0001428d 	.word	0x0001428d
   14228:	00014287 	.word	0x00014287
   1422c:	00014265 	.word	0x00014265
   14230:	4648      	mov	r0, r9
   14232:	f7ff fbf7 	bl	13a24 <__cxa_begin_cleanup>
   14236:	2007      	movs	r0, #7
   14238:	e66a      	b.n	13f10 <__gxx_personality_v0+0x2c>
   1423a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1423c:	441a      	add	r2, r3
   1423e:	9204      	str	r2, [sp, #16]
   14240:	2800      	cmp	r0, #0
   14242:	d184      	bne.n	1414e <__gxx_personality_v0+0x26a>
   14244:	9b04      	ldr	r3, [sp, #16]
   14246:	2b00      	cmp	r3, #0
   14248:	f43f ae5a 	beq.w	13f00 <__gxx_personality_v0+0x1c>
   1424c:	9b03      	ldr	r3, [sp, #12]
   1424e:	f013 0301 	ands.w	r3, r3, #1
   14252:	f47f ae55 	bne.w	13f00 <__gxx_personality_v0+0x1c>
   14256:	9a03      	ldr	r2, [sp, #12]
   14258:	f012 0508 	ands.w	r5, r2, #8
   1425c:	f040 8097 	bne.w	1438e <__gxx_personality_v0+0x4aa>
   14260:	2402      	movs	r4, #2
   14262:	e739      	b.n	140d8 <__gxx_personality_v0+0x1f4>
   14264:	00eb      	lsls	r3, r5, #3
   14266:	425b      	negs	r3, r3
   14268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1426a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1426c:	441a      	add	r2, r3
   1426e:	4643      	mov	r3, r8
   14270:	f7ff fd6c 	bl	13d4c <_ZL28read_encoded_value_with_basehjPKhPj>
   14274:	990e      	ldr	r1, [sp, #56]	; 0x38
   14276:	b199      	cbz	r1, 142a0 <__gxx_personality_v0+0x3bc>
   14278:	f1b9 0f00 	cmp.w	r9, #0
   1427c:	d109      	bne.n	14292 <__gxx_personality_v0+0x3ae>
   1427e:	2e00      	cmp	r6, #0
   14280:	d077      	beq.n	14372 <__gxx_personality_v0+0x48e>
   14282:	19a3      	adds	r3, r4, r6
   14284:	e78d      	b.n	141a2 <__gxx_personality_v0+0x2be>
   14286:	00ab      	lsls	r3, r5, #2
   14288:	425b      	negs	r3, r3
   1428a:	e7ed      	b.n	14268 <__gxx_personality_v0+0x384>
   1428c:	006b      	lsls	r3, r5, #1
   1428e:	425b      	negs	r3, r3
   14290:	e7ea      	b.n	14268 <__gxx_personality_v0+0x384>
   14292:	ab0a      	add	r3, sp, #40	; 0x28
   14294:	2200      	movs	r2, #0
   14296:	4648      	mov	r0, r9
   14298:	f7ff fb68 	bl	1396c <__cxa_type_match>
   1429c:	2800      	cmp	r0, #0
   1429e:	d0ee      	beq.n	1427e <__gxx_personality_v0+0x39a>
   142a0:	9f07      	ldr	r7, [sp, #28]
   142a2:	2403      	movs	r4, #3
   142a4:	9b03      	ldr	r3, [sp, #12]
   142a6:	07da      	lsls	r2, r3, #31
   142a8:	d460      	bmi.n	1436c <__gxx_personality_v0+0x488>
   142aa:	9b03      	ldr	r3, [sp, #12]
   142ac:	0719      	lsls	r1, r3, #28
   142ae:	d466      	bmi.n	1437e <__gxx_personality_v0+0x49a>
   142b0:	2c01      	cmp	r4, #1
   142b2:	f43f af41 	beq.w	14138 <__gxx_personality_v0+0x254>
   142b6:	9905      	ldr	r1, [sp, #20]
   142b8:	e707      	b.n	140ca <__gxx_personality_v0+0x1e6>
   142ba:	2301      	movs	r3, #1
   142bc:	9308      	str	r3, [sp, #32]
   142be:	e7de      	b.n	1427e <__gxx_personality_v0+0x39a>
   142c0:	f1b9 0f00 	cmp.w	r9, #0
   142c4:	d001      	beq.n	142ca <__gxx_personality_v0+0x3e6>
   142c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   142c8:	b35b      	cbz	r3, 14322 <__gxx_personality_v0+0x43e>
   142ca:	1c6b      	adds	r3, r5, #1
   142cc:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   142d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   142d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142d6:	2b00      	cmp	r3, #0
   142d8:	d1d1      	bne.n	1427e <__gxx_personality_v0+0x39a>
   142da:	e7e1      	b.n	142a0 <__gxx_personality_v0+0x3bc>
   142dc:	9a06      	ldr	r2, [sp, #24]
   142de:	4638      	mov	r0, r7
   142e0:	f7ff fdb4 	bl	13e4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   142e4:	4639      	mov	r1, r7
   142e6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   142ea:	f7ff fd8f 	bl	13e0c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   142ee:	00aa      	lsls	r2, r5, #2
   142f0:	f082 0203 	eor.w	r2, r2, #3
   142f4:	43d2      	mvns	r2, r2
   142f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   142f8:	9012      	str	r0, [sp, #72]	; 0x48
   142fa:	58b3      	ldr	r3, [r6, r2]
   142fc:	4416      	add	r6, r2
   142fe:	b133      	cbz	r3, 1430e <__gxx_personality_v0+0x42a>
   14300:	4632      	mov	r2, r6
   14302:	2300      	movs	r3, #0
   14304:	f852 1f04 	ldr.w	r1, [r2, #4]!
   14308:	3301      	adds	r3, #1
   1430a:	2900      	cmp	r1, #0
   1430c:	d1fa      	bne.n	14304 <__gxx_personality_v0+0x420>
   1430e:	2204      	movs	r2, #4
   14310:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   14314:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   14318:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   1431c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14320:	e6d6      	b.n	140d0 <__gxx_personality_v0+0x1ec>
   14322:	1c6f      	adds	r7, r5, #1
   14324:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   14328:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1432a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1432c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   14330:	920f      	str	r2, [sp, #60]	; 0x3c
   14332:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   14336:	b921      	cbnz	r1, 14342 <__gxx_personality_v0+0x45e>
   14338:	e7b2      	b.n	142a0 <__gxx_personality_v0+0x3bc>
   1433a:	f857 1f04 	ldr.w	r1, [r7, #4]!
   1433e:	2900      	cmp	r1, #0
   14340:	d0ae      	beq.n	142a0 <__gxx_personality_v0+0x3bc>
   14342:	4439      	add	r1, r7
   14344:	465b      	mov	r3, fp
   14346:	2200      	movs	r2, #0
   14348:	4648      	mov	r0, r9
   1434a:	f7ff fb0f 	bl	1396c <__cxa_type_match>
   1434e:	2800      	cmp	r0, #0
   14350:	d0f3      	beq.n	1433a <__gxx_personality_v0+0x456>
   14352:	e794      	b.n	1427e <__gxx_personality_v0+0x39a>
   14354:	2300      	movs	r3, #0
   14356:	e787      	b.n	14268 <__gxx_personality_v0+0x384>
   14358:	f899 2007 	ldrb.w	r2, [r9, #7]
   1435c:	2a01      	cmp	r2, #1
   1435e:	bf0c      	ite	eq
   14360:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   14364:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   14368:	920a      	str	r2, [sp, #40]	; 0x28
   1436a:	e717      	b.n	1419c <__gxx_personality_v0+0x2b8>
   1436c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14370:	e65a      	b.n	14028 <__gxx_personality_v0+0x144>
   14372:	9b08      	ldr	r3, [sp, #32]
   14374:	9f07      	ldr	r7, [sp, #28]
   14376:	2b00      	cmp	r3, #0
   14378:	f47f af68 	bne.w	1424c <__gxx_personality_v0+0x368>
   1437c:	e5c0      	b.n	13f00 <__gxx_personality_v0+0x1c>
   1437e:	2c01      	cmp	r4, #1
   14380:	f43f ae8d 	beq.w	1409e <__gxx_personality_v0+0x1ba>
   14384:	2d00      	cmp	r5, #0
   14386:	f6bf aea3 	bge.w	140d0 <__gxx_personality_v0+0x1ec>
   1438a:	f7ff f903 	bl	13594 <_ZSt10unexpectedv>
   1438e:	461d      	mov	r5, r3
   14390:	2402      	movs	r4, #2
   14392:	e6a1      	b.n	140d8 <__gxx_personality_v0+0x1f4>
   14394:	f7ff fc4e 	bl	13c34 <__cxa_begin_catch>
   14398:	e681      	b.n	1409e <__gxx_personality_v0+0x1ba>
   1439a:	bf00      	nop

0001439c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1439c:	b570      	push	{r4, r5, r6, lr}
   1439e:	4b3c      	ldr	r3, [pc, #240]	; (14490 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   143a0:	781a      	ldrb	r2, [r3, #0]
   143a2:	b082      	sub	sp, #8
   143a4:	2a00      	cmp	r2, #0
   143a6:	d135      	bne.n	14414 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   143a8:	2401      	movs	r4, #1
   143aa:	701c      	strb	r4, [r3, #0]
   143ac:	f006 fbd2 	bl	1ab54 <__cxa_current_exception_type>
   143b0:	2800      	cmp	r0, #0
   143b2:	d05b      	beq.n	1446c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   143b4:	6844      	ldr	r4, [r0, #4]
   143b6:	4d37      	ldr	r5, [pc, #220]	; (14494 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   143b8:	7823      	ldrb	r3, [r4, #0]
   143ba:	2b2a      	cmp	r3, #42	; 0x2a
   143bc:	ab02      	add	r3, sp, #8
   143be:	f04f 32ff 	mov.w	r2, #4294967295
   143c2:	bf08      	it	eq
   143c4:	3401      	addeq	r4, #1
   143c6:	f843 2d04 	str.w	r2, [r3, #-4]!
   143ca:	2200      	movs	r2, #0
   143cc:	4611      	mov	r1, r2
   143ce:	4620      	mov	r0, r4
   143d0:	f006 fb52 	bl	1aa78 <__cxa_demangle>
   143d4:	682b      	ldr	r3, [r5, #0]
   143d6:	4606      	mov	r6, r0
   143d8:	68db      	ldr	r3, [r3, #12]
   143da:	482f      	ldr	r0, [pc, #188]	; (14498 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   143dc:	2230      	movs	r2, #48	; 0x30
   143de:	2101      	movs	r1, #1
   143e0:	f009 fba4 	bl	1db2c <fwrite>
   143e4:	9b01      	ldr	r3, [sp, #4]
   143e6:	b17b      	cbz	r3, 14408 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   143e8:	682b      	ldr	r3, [r5, #0]
   143ea:	4620      	mov	r0, r4
   143ec:	68d9      	ldr	r1, [r3, #12]
   143ee:	f009 f9c7 	bl	1d780 <fputs>
   143f2:	682b      	ldr	r3, [r5, #0]
   143f4:	4829      	ldr	r0, [pc, #164]	; (1449c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   143f6:	68db      	ldr	r3, [r3, #12]
   143f8:	2202      	movs	r2, #2
   143fa:	2101      	movs	r1, #1
   143fc:	f009 fb96 	bl	1db2c <fwrite>
   14400:	9b01      	ldr	r3, [sp, #4]
   14402:	b18b      	cbz	r3, 14428 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   14404:	f7ff f940 	bl	13688 <__cxa_rethrow>
   14408:	682b      	ldr	r3, [r5, #0]
   1440a:	4630      	mov	r0, r6
   1440c:	68d9      	ldr	r1, [r3, #12]
   1440e:	f009 f9b7 	bl	1d780 <fputs>
   14412:	e7ee      	b.n	143f2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   14414:	4b1f      	ldr	r3, [pc, #124]	; (14494 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14416:	4822      	ldr	r0, [pc, #136]	; (144a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   14418:	681b      	ldr	r3, [r3, #0]
   1441a:	221d      	movs	r2, #29
   1441c:	68db      	ldr	r3, [r3, #12]
   1441e:	2101      	movs	r1, #1
   14420:	f009 fb84 	bl	1db2c <fwrite>
   14424:	f009 f92e 	bl	1d684 <abort>
   14428:	4630      	mov	r0, r6
   1442a:	f009 fbe1 	bl	1dbf0 <free>
   1442e:	e7e9      	b.n	14404 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   14430:	2901      	cmp	r1, #1
   14432:	460c      	mov	r4, r1
   14434:	d127      	bne.n	14486 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   14436:	f7ff fbfd 	bl	13c34 <__cxa_begin_catch>
   1443a:	6803      	ldr	r3, [r0, #0]
   1443c:	689b      	ldr	r3, [r3, #8]
   1443e:	4798      	blx	r3
   14440:	682b      	ldr	r3, [r5, #0]
   14442:	4606      	mov	r6, r0
   14444:	68db      	ldr	r3, [r3, #12]
   14446:	4817      	ldr	r0, [pc, #92]	; (144a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   14448:	4621      	mov	r1, r4
   1444a:	220b      	movs	r2, #11
   1444c:	f009 fb6e 	bl	1db2c <fwrite>
   14450:	682b      	ldr	r3, [r5, #0]
   14452:	4630      	mov	r0, r6
   14454:	68d9      	ldr	r1, [r3, #12]
   14456:	f009 f993 	bl	1d780 <fputs>
   1445a:	682b      	ldr	r3, [r5, #0]
   1445c:	200a      	movs	r0, #10
   1445e:	68d9      	ldr	r1, [r3, #12]
   14460:	f009 f91e 	bl	1d6a0 <fputc>
   14464:	f7ff fc24 	bl	13cb0 <__cxa_end_catch>
   14468:	f009 f90c 	bl	1d684 <abort>
   1446c:	4b09      	ldr	r3, [pc, #36]	; (14494 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1446e:	480e      	ldr	r0, [pc, #56]	; (144a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   14470:	681b      	ldr	r3, [r3, #0]
   14472:	4621      	mov	r1, r4
   14474:	68db      	ldr	r3, [r3, #12]
   14476:	222d      	movs	r2, #45	; 0x2d
   14478:	f009 fb58 	bl	1db2c <fwrite>
   1447c:	e7f4      	b.n	14468 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   1447e:	f7ff fc17 	bl	13cb0 <__cxa_end_catch>
   14482:	f7ff fa6d 	bl	13960 <__cxa_end_cleanup>
   14486:	f7ff fbd5 	bl	13c34 <__cxa_begin_catch>
   1448a:	f7ff fc11 	bl	13cb0 <__cxa_end_catch>
   1448e:	e7eb      	b.n	14468 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14490:	2000229c 	.word	0x2000229c
   14494:	200000f8 	.word	0x200000f8
   14498:	00023b24 	.word	0x00023b24
   1449c:	00023b58 	.word	0x00023b58
   144a0:	00023b04 	.word	0x00023b04
   144a4:	00023b8c 	.word	0x00023b8c
   144a8:	00023b5c 	.word	0x00023b5c

000144ac <d_make_comp>:
   144ac:	b470      	push	{r4, r5, r6}
   144ae:	1e4c      	subs	r4, r1, #1
   144b0:	2c4c      	cmp	r4, #76	; 0x4c
   144b2:	d82d      	bhi.n	14510 <d_make_comp+0x64>
   144b4:	e8df f004 	tbb	[pc, r4]
   144b8:	3c3c3c3c 	.word	0x3c3c3c3c
   144bc:	2c2c2c2c 	.word	0x2c2c2c2c
   144c0:	273c2727 	.word	0x273c2727
   144c4:	27272727 	.word	0x27272727
   144c8:	27272727 	.word	0x27272727
   144cc:	2c272727 	.word	0x2c272727
   144d0:	28282828 	.word	0x28282828
   144d4:	28282828 	.word	0x28282828
   144d8:	2727273c 	.word	0x2727273c
   144dc:	272c2727 	.word	0x272c2727
   144e0:	2c3c3e28 	.word	0x2c3c3e28
   144e4:	3e28283c 	.word	0x3e28283c
   144e8:	27272c2c 	.word	0x27272c2c
   144ec:	3c3c3c27 	.word	0x3c3c3c27
   144f0:	3c273c3c 	.word	0x3c273c3c
   144f4:	2c3c273c 	.word	0x2c3c273c
   144f8:	2727272c 	.word	0x2727272c
   144fc:	272c2c2c 	.word	0x272c2c2c
   14500:	283c2727 	.word	0x283c2727
   14504:	3c          	.byte	0x3c
   14505:	00          	.byte	0x00
   14506:	b11a      	cbz	r2, 14510 <d_make_comp+0x64>
   14508:	6944      	ldr	r4, [r0, #20]
   1450a:	6985      	ldr	r5, [r0, #24]
   1450c:	42ac      	cmp	r4, r5
   1450e:	db02      	blt.n	14516 <d_make_comp+0x6a>
   14510:	2000      	movs	r0, #0
   14512:	bc70      	pop	{r4, r5, r6}
   14514:	4770      	bx	lr
   14516:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1451a:	6906      	ldr	r6, [r0, #16]
   1451c:	00ad      	lsls	r5, r5, #2
   1451e:	3401      	adds	r4, #1
   14520:	6144      	str	r4, [r0, #20]
   14522:	1970      	adds	r0, r6, r5
   14524:	d0f5      	beq.n	14512 <d_make_comp+0x66>
   14526:	5571      	strb	r1, [r6, r5]
   14528:	6042      	str	r2, [r0, #4]
   1452a:	6083      	str	r3, [r0, #8]
   1452c:	bc70      	pop	{r4, r5, r6}
   1452e:	4770      	bx	lr
   14530:	2a00      	cmp	r2, #0
   14532:	d0ed      	beq.n	14510 <d_make_comp+0x64>
   14534:	2b00      	cmp	r3, #0
   14536:	d0eb      	beq.n	14510 <d_make_comp+0x64>
   14538:	6944      	ldr	r4, [r0, #20]
   1453a:	6985      	ldr	r5, [r0, #24]
   1453c:	42ac      	cmp	r4, r5
   1453e:	dae7      	bge.n	14510 <d_make_comp+0x64>
   14540:	e7e9      	b.n	14516 <d_make_comp+0x6a>
   14542:	bf00      	nop

00014544 <d_cv_qualifiers>:
   14544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14548:	68c3      	ldr	r3, [r0, #12]
   1454a:	f1b2 0a00 	subs.w	sl, r2, #0
   1454e:	4604      	mov	r4, r0
   14550:	460e      	mov	r6, r1
   14552:	781a      	ldrb	r2, [r3, #0]
   14554:	bf15      	itete	ne
   14556:	f04f 091e 	movne.w	r9, #30
   1455a:	f04f 091b 	moveq.w	r9, #27
   1455e:	f04f 081d 	movne.w	r8, #29
   14562:	f04f 081a 	moveq.w	r8, #26
   14566:	bf14      	ite	ne
   14568:	271c      	movne	r7, #28
   1456a:	2719      	moveq	r7, #25
   1456c:	460d      	mov	r5, r1
   1456e:	e018      	b.n	145a2 <d_cv_qualifiers+0x5e>
   14570:	2a56      	cmp	r2, #86	; 0x56
   14572:	d01f      	beq.n	145b4 <d_cv_qualifiers+0x70>
   14574:	2a4b      	cmp	r2, #75	; 0x4b
   14576:	d024      	beq.n	145c2 <d_cv_qualifiers+0x7e>
   14578:	2a44      	cmp	r2, #68	; 0x44
   1457a:	d12d      	bne.n	145d8 <d_cv_qualifiers+0x94>
   1457c:	785a      	ldrb	r2, [r3, #1]
   1457e:	2a78      	cmp	r2, #120	; 0x78
   14580:	d127      	bne.n	145d2 <d_cv_qualifiers+0x8e>
   14582:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14584:	3302      	adds	r3, #2
   14586:	3211      	adds	r2, #17
   14588:	60e3      	str	r3, [r4, #12]
   1458a:	6322      	str	r2, [r4, #48]	; 0x30
   1458c:	214c      	movs	r1, #76	; 0x4c
   1458e:	2300      	movs	r3, #0
   14590:	461a      	mov	r2, r3
   14592:	4620      	mov	r0, r4
   14594:	f7ff ff8a 	bl	144ac <d_make_comp>
   14598:	6028      	str	r0, [r5, #0]
   1459a:	b1c8      	cbz	r0, 145d0 <d_cv_qualifiers+0x8c>
   1459c:	68e3      	ldr	r3, [r4, #12]
   1459e:	781a      	ldrb	r2, [r3, #0]
   145a0:	1d05      	adds	r5, r0, #4
   145a2:	2a72      	cmp	r2, #114	; 0x72
   145a4:	d1e4      	bne.n	14570 <d_cv_qualifiers+0x2c>
   145a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
   145a8:	3301      	adds	r3, #1
   145aa:	3209      	adds	r2, #9
   145ac:	60e3      	str	r3, [r4, #12]
   145ae:	6322      	str	r2, [r4, #48]	; 0x30
   145b0:	4639      	mov	r1, r7
   145b2:	e7ec      	b.n	1458e <d_cv_qualifiers+0x4a>
   145b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
   145b6:	3301      	adds	r3, #1
   145b8:	3209      	adds	r2, #9
   145ba:	60e3      	str	r3, [r4, #12]
   145bc:	6322      	str	r2, [r4, #48]	; 0x30
   145be:	4641      	mov	r1, r8
   145c0:	e7e5      	b.n	1458e <d_cv_qualifiers+0x4a>
   145c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   145c4:	3301      	adds	r3, #1
   145c6:	3206      	adds	r2, #6
   145c8:	60e3      	str	r3, [r4, #12]
   145ca:	6322      	str	r2, [r4, #48]	; 0x30
   145cc:	4649      	mov	r1, r9
   145ce:	e7de      	b.n	1458e <d_cv_qualifiers+0x4a>
   145d0:	4605      	mov	r5, r0
   145d2:	4628      	mov	r0, r5
   145d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145d8:	f1ba 0f00 	cmp.w	sl, #0
   145dc:	d1f9      	bne.n	145d2 <d_cv_qualifiers+0x8e>
   145de:	2a46      	cmp	r2, #70	; 0x46
   145e0:	d1f7      	bne.n	145d2 <d_cv_qualifiers+0x8e>
   145e2:	42b5      	cmp	r5, r6
   145e4:	d0f5      	beq.n	145d2 <d_cv_qualifiers+0x8e>
   145e6:	201d      	movs	r0, #29
   145e8:	211e      	movs	r1, #30
   145ea:	221c      	movs	r2, #28
   145ec:	e007      	b.n	145fe <d_cv_qualifiers+0xba>
   145ee:	2b1b      	cmp	r3, #27
   145f0:	d00b      	beq.n	1460a <d_cv_qualifiers+0xc6>
   145f2:	2b19      	cmp	r3, #25
   145f4:	d100      	bne.n	145f8 <d_cv_qualifiers+0xb4>
   145f6:	7032      	strb	r2, [r6, #0]
   145f8:	3604      	adds	r6, #4
   145fa:	42b5      	cmp	r5, r6
   145fc:	d0e9      	beq.n	145d2 <d_cv_qualifiers+0x8e>
   145fe:	6836      	ldr	r6, [r6, #0]
   14600:	7833      	ldrb	r3, [r6, #0]
   14602:	2b1a      	cmp	r3, #26
   14604:	d1f3      	bne.n	145ee <d_cv_qualifiers+0xaa>
   14606:	7030      	strb	r0, [r6, #0]
   14608:	e7f6      	b.n	145f8 <d_cv_qualifiers+0xb4>
   1460a:	7031      	strb	r1, [r6, #0]
   1460c:	e7f4      	b.n	145f8 <d_cv_qualifiers+0xb4>
   1460e:	bf00      	nop

00014610 <d_ref_qualifier>:
   14610:	b410      	push	{r4}
   14612:	68c3      	ldr	r3, [r0, #12]
   14614:	781c      	ldrb	r4, [r3, #0]
   14616:	2c52      	cmp	r4, #82	; 0x52
   14618:	460a      	mov	r2, r1
   1461a:	d00f      	beq.n	1463c <d_ref_qualifier+0x2c>
   1461c:	2c4f      	cmp	r4, #79	; 0x4f
   1461e:	d003      	beq.n	14628 <d_ref_qualifier+0x18>
   14620:	4608      	mov	r0, r1
   14622:	f85d 4b04 	ldr.w	r4, [sp], #4
   14626:	4770      	bx	lr
   14628:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1462a:	3103      	adds	r1, #3
   1462c:	6301      	str	r1, [r0, #48]	; 0x30
   1462e:	2120      	movs	r1, #32
   14630:	3301      	adds	r3, #1
   14632:	60c3      	str	r3, [r0, #12]
   14634:	f85d 4b04 	ldr.w	r4, [sp], #4
   14638:	2300      	movs	r3, #0
   1463a:	e737      	b.n	144ac <d_make_comp>
   1463c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1463e:	3102      	adds	r1, #2
   14640:	6301      	str	r1, [r0, #48]	; 0x30
   14642:	211f      	movs	r1, #31
   14644:	e7f4      	b.n	14630 <d_ref_qualifier+0x20>
   14646:	bf00      	nop

00014648 <d_count_templates_scopes>:
   14648:	2a00      	cmp	r2, #0
   1464a:	d04d      	beq.n	146e8 <d_count_templates_scopes+0xa0>
   1464c:	b570      	push	{r4, r5, r6, lr}
   1464e:	4605      	mov	r5, r0
   14650:	460e      	mov	r6, r1
   14652:	4614      	mov	r4, r2
   14654:	7823      	ldrb	r3, [r4, #0]
   14656:	3b01      	subs	r3, #1
   14658:	2b4c      	cmp	r3, #76	; 0x4c
   1465a:	d82b      	bhi.n	146b4 <d_count_templates_scopes+0x6c>
   1465c:	e8df f003 	tbb	[pc, r3]
   14660:	3f363636 	.word	0x3f363636
   14664:	27272a2a 	.word	0x27272a2a
   14668:	36363636 	.word	0x36363636
   1466c:	36363636 	.word	0x36363636
   14670:	36363636 	.word	0x36363636
   14674:	2a363636 	.word	0x2a363636
   14678:	36363636 	.word	0x36363636
   1467c:	36363636 	.word	0x36363636
   14680:	2f2f3636 	.word	0x2f2f3636
   14684:	362a3636 	.word	0x362a3636
   14688:	2b363636 	.word	0x2b363636
   1468c:	36363636 	.word	0x36363636
   14690:	3636272a 	.word	0x3636272a
   14694:	36363636 	.word	0x36363636
   14698:	36363636 	.word	0x36363636
   1469c:	2a363636 	.word	0x2a363636
   146a0:	2b2b362a 	.word	0x2b2b362a
   146a4:	362a2b2b 	.word	0x362a2b2b
   146a8:	36363636 	.word	0x36363636
   146ac:	36          	.byte	0x36
   146ad:	00          	.byte	0x00
   146ae:	68a4      	ldr	r4, [r4, #8]
   146b0:	2c00      	cmp	r4, #0
   146b2:	d1cf      	bne.n	14654 <d_count_templates_scopes+0xc>
   146b4:	bd70      	pop	{r4, r5, r6, pc}
   146b6:	6864      	ldr	r4, [r4, #4]
   146b8:	2c00      	cmp	r4, #0
   146ba:	d1cb      	bne.n	14654 <d_count_templates_scopes+0xc>
   146bc:	e7fa      	b.n	146b4 <d_count_templates_scopes+0x6c>
   146be:	6862      	ldr	r2, [r4, #4]
   146c0:	7813      	ldrb	r3, [r2, #0]
   146c2:	2b05      	cmp	r3, #5
   146c4:	d103      	bne.n	146ce <d_count_templates_scopes+0x86>
   146c6:	6833      	ldr	r3, [r6, #0]
   146c8:	3301      	adds	r3, #1
   146ca:	6033      	str	r3, [r6, #0]
   146cc:	6862      	ldr	r2, [r4, #4]
   146ce:	4631      	mov	r1, r6
   146d0:	4628      	mov	r0, r5
   146d2:	f7ff ffb9 	bl	14648 <d_count_templates_scopes>
   146d6:	68a4      	ldr	r4, [r4, #8]
   146d8:	2c00      	cmp	r4, #0
   146da:	d1bb      	bne.n	14654 <d_count_templates_scopes+0xc>
   146dc:	e7ea      	b.n	146b4 <d_count_templates_scopes+0x6c>
   146de:	682b      	ldr	r3, [r5, #0]
   146e0:	3301      	adds	r3, #1
   146e2:	602b      	str	r3, [r5, #0]
   146e4:	6862      	ldr	r2, [r4, #4]
   146e6:	e7f2      	b.n	146ce <d_count_templates_scopes+0x86>
   146e8:	4770      	bx	lr
   146ea:	bf00      	nop

000146ec <d_append_buffer>:
   146ec:	b37a      	cbz	r2, 1474e <d_append_buffer+0x62>
   146ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146f2:	460d      	mov	r5, r1
   146f4:	4604      	mov	r4, r0
   146f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   146fa:	18af      	adds	r7, r5, r2
   146fc:	f04f 0800 	mov.w	r8, #0
   14700:	e009      	b.n	14716 <d_append_buffer+0x2a>
   14702:	460b      	mov	r3, r1
   14704:	42bd      	cmp	r5, r7
   14706:	f101 0101 	add.w	r1, r1, #1
   1470a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1470e:	54e6      	strb	r6, [r4, r3]
   14710:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14714:	d019      	beq.n	1474a <d_append_buffer+0x5e>
   14716:	29ff      	cmp	r1, #255	; 0xff
   14718:	f815 6b01 	ldrb.w	r6, [r5], #1
   1471c:	d1f1      	bne.n	14702 <d_append_buffer+0x16>
   1471e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14722:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14726:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1472a:	4620      	mov	r0, r4
   1472c:	4798      	blx	r3
   1472e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14732:	3301      	adds	r3, #1
   14734:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14738:	2300      	movs	r3, #0
   1473a:	2101      	movs	r1, #1
   1473c:	42bd      	cmp	r5, r7
   1473e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14742:	54e6      	strb	r6, [r4, r3]
   14744:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14748:	d1e5      	bne.n	14716 <d_append_buffer+0x2a>
   1474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1474e:	4770      	bx	lr

00014750 <d_number.isra.0>:
   14750:	b470      	push	{r4, r5, r6}
   14752:	6802      	ldr	r2, [r0, #0]
   14754:	7811      	ldrb	r1, [r2, #0]
   14756:	296e      	cmp	r1, #110	; 0x6e
   14758:	d018      	beq.n	1478c <d_number.isra.0+0x3c>
   1475a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1475e:	2b09      	cmp	r3, #9
   14760:	d81e      	bhi.n	147a0 <d_number.isra.0+0x50>
   14762:	2600      	movs	r6, #0
   14764:	2300      	movs	r3, #0
   14766:	3201      	adds	r2, #1
   14768:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1476c:	6002      	str	r2, [r0, #0]
   1476e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   14772:	7811      	ldrb	r1, [r2, #0]
   14774:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   14778:	2d09      	cmp	r5, #9
   1477a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1477e:	d9f2      	bls.n	14766 <d_number.isra.0+0x16>
   14780:	b10e      	cbz	r6, 14786 <d_number.isra.0+0x36>
   14782:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   14786:	4618      	mov	r0, r3
   14788:	bc70      	pop	{r4, r5, r6}
   1478a:	4770      	bx	lr
   1478c:	1c53      	adds	r3, r2, #1
   1478e:	6003      	str	r3, [r0, #0]
   14790:	7851      	ldrb	r1, [r2, #1]
   14792:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14796:	2a09      	cmp	r2, #9
   14798:	d802      	bhi.n	147a0 <d_number.isra.0+0x50>
   1479a:	461a      	mov	r2, r3
   1479c:	2601      	movs	r6, #1
   1479e:	e7e1      	b.n	14764 <d_number.isra.0+0x14>
   147a0:	2300      	movs	r3, #0
   147a2:	e7f0      	b.n	14786 <d_number.isra.0+0x36>

000147a4 <d_number_component>:
   147a4:	6943      	ldr	r3, [r0, #20]
   147a6:	6982      	ldr	r2, [r0, #24]
   147a8:	4293      	cmp	r3, r2
   147aa:	b510      	push	{r4, lr}
   147ac:	da0f      	bge.n	147ce <d_number_component+0x2a>
   147ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   147b2:	6901      	ldr	r1, [r0, #16]
   147b4:	0092      	lsls	r2, r2, #2
   147b6:	3301      	adds	r3, #1
   147b8:	188c      	adds	r4, r1, r2
   147ba:	6143      	str	r3, [r0, #20]
   147bc:	d005      	beq.n	147ca <d_number_component+0x26>
   147be:	2341      	movs	r3, #65	; 0x41
   147c0:	300c      	adds	r0, #12
   147c2:	548b      	strb	r3, [r1, r2]
   147c4:	f7ff ffc4 	bl	14750 <d_number.isra.0>
   147c8:	6060      	str	r0, [r4, #4]
   147ca:	4620      	mov	r0, r4
   147cc:	bd10      	pop	{r4, pc}
   147ce:	2400      	movs	r4, #0
   147d0:	4620      	mov	r0, r4
   147d2:	bd10      	pop	{r4, pc}

000147d4 <d_compact_number>:
   147d4:	b510      	push	{r4, lr}
   147d6:	68c3      	ldr	r3, [r0, #12]
   147d8:	781a      	ldrb	r2, [r3, #0]
   147da:	2a5f      	cmp	r2, #95	; 0x5f
   147dc:	4604      	mov	r4, r0
   147de:	d00d      	beq.n	147fc <d_compact_number+0x28>
   147e0:	2a6e      	cmp	r2, #110	; 0x6e
   147e2:	d00f      	beq.n	14804 <d_compact_number+0x30>
   147e4:	300c      	adds	r0, #12
   147e6:	f7ff ffb3 	bl	14750 <d_number.isra.0>
   147ea:	3001      	adds	r0, #1
   147ec:	d40a      	bmi.n	14804 <d_compact_number+0x30>
   147ee:	68e3      	ldr	r3, [r4, #12]
   147f0:	781a      	ldrb	r2, [r3, #0]
   147f2:	2a5f      	cmp	r2, #95	; 0x5f
   147f4:	d106      	bne.n	14804 <d_compact_number+0x30>
   147f6:	3301      	adds	r3, #1
   147f8:	60e3      	str	r3, [r4, #12]
   147fa:	bd10      	pop	{r4, pc}
   147fc:	3301      	adds	r3, #1
   147fe:	2000      	movs	r0, #0
   14800:	60e3      	str	r3, [r4, #12]
   14802:	bd10      	pop	{r4, pc}
   14804:	f04f 30ff 	mov.w	r0, #4294967295
   14808:	bd10      	pop	{r4, pc}
   1480a:	bf00      	nop

0001480c <d_template_param>:
   1480c:	b538      	push	{r3, r4, r5, lr}
   1480e:	68c3      	ldr	r3, [r0, #12]
   14810:	781a      	ldrb	r2, [r3, #0]
   14812:	2a54      	cmp	r2, #84	; 0x54
   14814:	d001      	beq.n	1481a <d_template_param+0xe>
   14816:	2000      	movs	r0, #0
   14818:	bd38      	pop	{r3, r4, r5, pc}
   1481a:	3301      	adds	r3, #1
   1481c:	60c3      	str	r3, [r0, #12]
   1481e:	4604      	mov	r4, r0
   14820:	f7ff ffd8 	bl	147d4 <d_compact_number>
   14824:	1e05      	subs	r5, r0, #0
   14826:	dbf6      	blt.n	14816 <d_template_param+0xa>
   14828:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1482a:	6963      	ldr	r3, [r4, #20]
   1482c:	69a1      	ldr	r1, [r4, #24]
   1482e:	3201      	adds	r2, #1
   14830:	428b      	cmp	r3, r1
   14832:	62a2      	str	r2, [r4, #40]	; 0x28
   14834:	daef      	bge.n	14816 <d_template_param+0xa>
   14836:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1483a:	6921      	ldr	r1, [r4, #16]
   1483c:	0092      	lsls	r2, r2, #2
   1483e:	3301      	adds	r3, #1
   14840:	1888      	adds	r0, r1, r2
   14842:	6163      	str	r3, [r4, #20]
   14844:	d002      	beq.n	1484c <d_template_param+0x40>
   14846:	2305      	movs	r3, #5
   14848:	548b      	strb	r3, [r1, r2]
   1484a:	6045      	str	r5, [r0, #4]
   1484c:	bd38      	pop	{r3, r4, r5, pc}
   1484e:	bf00      	nop

00014850 <d_source_name>:
   14850:	b570      	push	{r4, r5, r6, lr}
   14852:	4604      	mov	r4, r0
   14854:	300c      	adds	r0, #12
   14856:	f7ff ff7b 	bl	14750 <d_number.isra.0>
   1485a:	1e06      	subs	r6, r0, #0
   1485c:	dd4d      	ble.n	148fa <d_source_name+0xaa>
   1485e:	68e5      	ldr	r5, [r4, #12]
   14860:	6863      	ldr	r3, [r4, #4]
   14862:	1b5b      	subs	r3, r3, r5
   14864:	429e      	cmp	r6, r3
   14866:	dc2b      	bgt.n	148c0 <d_source_name+0x70>
   14868:	68a2      	ldr	r2, [r4, #8]
   1486a:	19ab      	adds	r3, r5, r6
   1486c:	0752      	lsls	r2, r2, #29
   1486e:	60e3      	str	r3, [r4, #12]
   14870:	d504      	bpl.n	1487c <d_source_name+0x2c>
   14872:	5daa      	ldrb	r2, [r5, r6]
   14874:	2a24      	cmp	r2, #36	; 0x24
   14876:	bf04      	itt	eq
   14878:	3301      	addeq	r3, #1
   1487a:	60e3      	streq	r3, [r4, #12]
   1487c:	2e09      	cmp	r6, #9
   1487e:	dd0c      	ble.n	1489a <d_source_name+0x4a>
   14880:	2208      	movs	r2, #8
   14882:	491f      	ldr	r1, [pc, #124]	; (14900 <d_source_name+0xb0>)
   14884:	4628      	mov	r0, r5
   14886:	f009 fcd3 	bl	1e230 <memcmp>
   1488a:	b930      	cbnz	r0, 1489a <d_source_name+0x4a>
   1488c:	7a2b      	ldrb	r3, [r5, #8]
   1488e:	2b2e      	cmp	r3, #46	; 0x2e
   14890:	d019      	beq.n	148c6 <d_source_name+0x76>
   14892:	2b5f      	cmp	r3, #95	; 0x5f
   14894:	d017      	beq.n	148c6 <d_source_name+0x76>
   14896:	2b24      	cmp	r3, #36	; 0x24
   14898:	d015      	beq.n	148c6 <d_source_name+0x76>
   1489a:	6963      	ldr	r3, [r4, #20]
   1489c:	69a2      	ldr	r2, [r4, #24]
   1489e:	4293      	cmp	r3, r2
   148a0:	da0e      	bge.n	148c0 <d_source_name+0x70>
   148a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   148a6:	6921      	ldr	r1, [r4, #16]
   148a8:	0092      	lsls	r2, r2, #2
   148aa:	3301      	adds	r3, #1
   148ac:	1888      	adds	r0, r1, r2
   148ae:	6163      	str	r3, [r4, #20]
   148b0:	d006      	beq.n	148c0 <d_source_name+0x70>
   148b2:	b12d      	cbz	r5, 148c0 <d_source_name+0x70>
   148b4:	2300      	movs	r3, #0
   148b6:	548b      	strb	r3, [r1, r2]
   148b8:	6045      	str	r5, [r0, #4]
   148ba:	6086      	str	r6, [r0, #8]
   148bc:	62e0      	str	r0, [r4, #44]	; 0x2c
   148be:	bd70      	pop	{r4, r5, r6, pc}
   148c0:	2000      	movs	r0, #0
   148c2:	62e0      	str	r0, [r4, #44]	; 0x2c
   148c4:	bd70      	pop	{r4, r5, r6, pc}
   148c6:	7a6b      	ldrb	r3, [r5, #9]
   148c8:	2b4e      	cmp	r3, #78	; 0x4e
   148ca:	d1e6      	bne.n	1489a <d_source_name+0x4a>
   148cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   148ce:	6962      	ldr	r2, [r4, #20]
   148d0:	69a1      	ldr	r1, [r4, #24]
   148d2:	3316      	adds	r3, #22
   148d4:	1b9e      	subs	r6, r3, r6
   148d6:	428a      	cmp	r2, r1
   148d8:	6326      	str	r6, [r4, #48]	; 0x30
   148da:	daf1      	bge.n	148c0 <d_source_name+0x70>
   148dc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   148e0:	6921      	ldr	r1, [r4, #16]
   148e2:	009b      	lsls	r3, r3, #2
   148e4:	3201      	adds	r2, #1
   148e6:	18c8      	adds	r0, r1, r3
   148e8:	6162      	str	r2, [r4, #20]
   148ea:	d0ea      	beq.n	148c2 <d_source_name+0x72>
   148ec:	2500      	movs	r5, #0
   148ee:	54cd      	strb	r5, [r1, r3]
   148f0:	4a04      	ldr	r2, [pc, #16]	; (14904 <d_source_name+0xb4>)
   148f2:	6042      	str	r2, [r0, #4]
   148f4:	2315      	movs	r3, #21
   148f6:	6083      	str	r3, [r0, #8]
   148f8:	e7e3      	b.n	148c2 <d_source_name+0x72>
   148fa:	2000      	movs	r0, #0
   148fc:	bd70      	pop	{r4, r5, r6, pc}
   148fe:	bf00      	nop
   14900:	00024330 	.word	0x00024330
   14904:	0002433c 	.word	0x0002433c

00014908 <d_abi_tags>:
   14908:	b570      	push	{r4, r5, r6, lr}
   1490a:	68c3      	ldr	r3, [r0, #12]
   1490c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1490e:	781a      	ldrb	r2, [r3, #0]
   14910:	2a42      	cmp	r2, #66	; 0x42
   14912:	4604      	mov	r4, r0
   14914:	460d      	mov	r5, r1
   14916:	d10f      	bne.n	14938 <d_abi_tags+0x30>
   14918:	3301      	adds	r3, #1
   1491a:	60e3      	str	r3, [r4, #12]
   1491c:	4620      	mov	r0, r4
   1491e:	f7ff ff97 	bl	14850 <d_source_name>
   14922:	462a      	mov	r2, r5
   14924:	4603      	mov	r3, r0
   14926:	214b      	movs	r1, #75	; 0x4b
   14928:	4620      	mov	r0, r4
   1492a:	f7ff fdbf 	bl	144ac <d_make_comp>
   1492e:	68e3      	ldr	r3, [r4, #12]
   14930:	781a      	ldrb	r2, [r3, #0]
   14932:	2a42      	cmp	r2, #66	; 0x42
   14934:	4605      	mov	r5, r0
   14936:	d0ef      	beq.n	14918 <d_abi_tags+0x10>
   14938:	62e6      	str	r6, [r4, #44]	; 0x2c
   1493a:	4628      	mov	r0, r5
   1493c:	bd70      	pop	{r4, r5, r6, pc}
   1493e:	bf00      	nop

00014940 <d_substitution>:
   14940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14944:	4605      	mov	r5, r0
   14946:	68c0      	ldr	r0, [r0, #12]
   14948:	7803      	ldrb	r3, [r0, #0]
   1494a:	2b53      	cmp	r3, #83	; 0x53
   1494c:	d002      	beq.n	14954 <d_substitution+0x14>
   1494e:	2000      	movs	r0, #0
   14950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14954:	1c43      	adds	r3, r0, #1
   14956:	60eb      	str	r3, [r5, #12]
   14958:	7842      	ldrb	r2, [r0, #1]
   1495a:	b1a2      	cbz	r2, 14986 <d_substitution+0x46>
   1495c:	1c83      	adds	r3, r0, #2
   1495e:	60eb      	str	r3, [r5, #12]
   14960:	7842      	ldrb	r2, [r0, #1]
   14962:	2a5f      	cmp	r2, #95	; 0x5f
   14964:	d15a      	bne.n	14a1c <d_substitution+0xdc>
   14966:	2300      	movs	r3, #0
   14968:	6a2a      	ldr	r2, [r5, #32]
   1496a:	4293      	cmp	r3, r2
   1496c:	d2ef      	bcs.n	1494e <d_substitution+0xe>
   1496e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14970:	69e9      	ldr	r1, [r5, #28]
   14972:	3201      	adds	r2, #1
   14974:	62aa      	str	r2, [r5, #40]	; 0x28
   14976:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   1497a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1497e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   14982:	2b19      	cmp	r3, #25
   14984:	d94f      	bls.n	14a26 <d_substitution+0xe6>
   14986:	68ab      	ldr	r3, [r5, #8]
   14988:	f003 0308 	and.w	r3, r3, #8
   1498c:	2b00      	cmp	r3, #0
   1498e:	bf14      	ite	ne
   14990:	2401      	movne	r4, #1
   14992:	2400      	moveq	r4, #0
   14994:	d101      	bne.n	1499a <d_substitution+0x5a>
   14996:	2900      	cmp	r1, #0
   14998:	d169      	bne.n	14a6e <d_substitution+0x12e>
   1499a:	4b46      	ldr	r3, [pc, #280]	; (14ab4 <d_substitution+0x174>)
   1499c:	2174      	movs	r1, #116	; 0x74
   1499e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   149a2:	e003      	b.n	149ac <d_substitution+0x6c>
   149a4:	331c      	adds	r3, #28
   149a6:	4283      	cmp	r3, r0
   149a8:	d2d1      	bcs.n	1494e <d_substitution+0xe>
   149aa:	7819      	ldrb	r1, [r3, #0]
   149ac:	428a      	cmp	r2, r1
   149ae:	d1f9      	bne.n	149a4 <d_substitution+0x64>
   149b0:	695e      	ldr	r6, [r3, #20]
   149b2:	2e00      	cmp	r6, #0
   149b4:	d07b      	beq.n	14aae <d_substitution+0x16e>
   149b6:	696a      	ldr	r2, [r5, #20]
   149b8:	69a9      	ldr	r1, [r5, #24]
   149ba:	428a      	cmp	r2, r1
   149bc:	da63      	bge.n	14a86 <d_substitution+0x146>
   149be:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   149c2:	f8d5 e010 	ldr.w	lr, [r5, #16]
   149c6:	f8d3 8018 	ldr.w	r8, [r3, #24]
   149ca:	00bf      	lsls	r7, r7, #2
   149cc:	3201      	adds	r2, #1
   149ce:	eb1e 0007 	adds.w	r0, lr, r7
   149d2:	616a      	str	r2, [r5, #20]
   149d4:	d006      	beq.n	149e4 <d_substitution+0xa4>
   149d6:	f04f 0c18 	mov.w	ip, #24
   149da:	f80e c007 	strb.w	ip, [lr, r7]
   149de:	6046      	str	r6, [r0, #4]
   149e0:	f8c0 8008 	str.w	r8, [r0, #8]
   149e4:	62e8      	str	r0, [r5, #44]	; 0x2c
   149e6:	2c00      	cmp	r4, #0
   149e8:	d04a      	beq.n	14a80 <d_substitution+0x140>
   149ea:	68de      	ldr	r6, [r3, #12]
   149ec:	691c      	ldr	r4, [r3, #16]
   149ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   149f0:	4291      	cmp	r1, r2
   149f2:	4423      	add	r3, r4
   149f4:	632b      	str	r3, [r5, #48]	; 0x30
   149f6:	dd41      	ble.n	14a7c <d_substitution+0x13c>
   149f8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   149fc:	6929      	ldr	r1, [r5, #16]
   149fe:	009b      	lsls	r3, r3, #2
   14a00:	3201      	adds	r2, #1
   14a02:	18c8      	adds	r0, r1, r3
   14a04:	616a      	str	r2, [r5, #20]
   14a06:	d003      	beq.n	14a10 <d_substitution+0xd0>
   14a08:	2218      	movs	r2, #24
   14a0a:	54ca      	strb	r2, [r1, r3]
   14a0c:	6046      	str	r6, [r0, #4]
   14a0e:	6084      	str	r4, [r0, #8]
   14a10:	68eb      	ldr	r3, [r5, #12]
   14a12:	781b      	ldrb	r3, [r3, #0]
   14a14:	2b42      	cmp	r3, #66	; 0x42
   14a16:	d038      	beq.n	14a8a <d_substitution+0x14a>
   14a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a1c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14a20:	b2e3      	uxtb	r3, r4
   14a22:	2b09      	cmp	r3, #9
   14a24:	d8ab      	bhi.n	1497e <d_substitution+0x3e>
   14a26:	2100      	movs	r1, #0
   14a28:	e00d      	b.n	14a46 <d_substitution+0x106>
   14a2a:	3b30      	subs	r3, #48	; 0x30
   14a2c:	4299      	cmp	r1, r3
   14a2e:	d88e      	bhi.n	1494e <d_substitution+0xe>
   14a30:	68e9      	ldr	r1, [r5, #12]
   14a32:	780a      	ldrb	r2, [r1, #0]
   14a34:	1c48      	adds	r0, r1, #1
   14a36:	b11a      	cbz	r2, 14a40 <d_substitution+0x100>
   14a38:	60e8      	str	r0, [r5, #12]
   14a3a:	780a      	ldrb	r2, [r1, #0]
   14a3c:	2a5f      	cmp	r2, #95	; 0x5f
   14a3e:	d014      	beq.n	14a6a <d_substitution+0x12a>
   14a40:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14a44:	4619      	mov	r1, r3
   14a46:	b2e4      	uxtb	r4, r4
   14a48:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14a4c:	2c09      	cmp	r4, #9
   14a4e:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   14a52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14a56:	d9e8      	bls.n	14a2a <d_substitution+0xea>
   14a58:	2819      	cmp	r0, #25
   14a5a:	f63f af78 	bhi.w	1494e <d_substitution+0xe>
   14a5e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14a62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14a66:	3b37      	subs	r3, #55	; 0x37
   14a68:	e7e0      	b.n	14a2c <d_substitution+0xec>
   14a6a:	3301      	adds	r3, #1
   14a6c:	e77c      	b.n	14968 <d_substitution+0x28>
   14a6e:	68eb      	ldr	r3, [r5, #12]
   14a70:	781b      	ldrb	r3, [r3, #0]
   14a72:	3b43      	subs	r3, #67	; 0x43
   14a74:	2b01      	cmp	r3, #1
   14a76:	bf98      	it	ls
   14a78:	2401      	movls	r4, #1
   14a7a:	e78e      	b.n	1499a <d_substitution+0x5a>
   14a7c:	2000      	movs	r0, #0
   14a7e:	e7c7      	b.n	14a10 <d_substitution+0xd0>
   14a80:	685e      	ldr	r6, [r3, #4]
   14a82:	689c      	ldr	r4, [r3, #8]
   14a84:	e7b3      	b.n	149ee <d_substitution+0xae>
   14a86:	2000      	movs	r0, #0
   14a88:	e7ac      	b.n	149e4 <d_substitution+0xa4>
   14a8a:	4601      	mov	r1, r0
   14a8c:	4628      	mov	r0, r5
   14a8e:	f7ff ff3b 	bl	14908 <d_abi_tags>
   14a92:	2800      	cmp	r0, #0
   14a94:	f43f af5b 	beq.w	1494e <d_substitution+0xe>
   14a98:	6a2b      	ldr	r3, [r5, #32]
   14a9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14a9c:	4293      	cmp	r3, r2
   14a9e:	dabb      	bge.n	14a18 <d_substitution+0xd8>
   14aa0:	69e9      	ldr	r1, [r5, #28]
   14aa2:	1c5a      	adds	r2, r3, #1
   14aa4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14aa8:	622a      	str	r2, [r5, #32]
   14aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14aae:	69a9      	ldr	r1, [r5, #24]
   14ab0:	696a      	ldr	r2, [r5, #20]
   14ab2:	e798      	b.n	149e6 <d_substitution+0xa6>
   14ab4:	00023b98 	.word	0x00023b98

00014ab8 <d_call_offset>:
   14ab8:	b538      	push	{r3, r4, r5, lr}
   14aba:	4604      	mov	r4, r0
   14abc:	b929      	cbnz	r1, 14aca <d_call_offset+0x12>
   14abe:	68c3      	ldr	r3, [r0, #12]
   14ac0:	781a      	ldrb	r2, [r3, #0]
   14ac2:	b132      	cbz	r2, 14ad2 <d_call_offset+0x1a>
   14ac4:	1c5a      	adds	r2, r3, #1
   14ac6:	60c2      	str	r2, [r0, #12]
   14ac8:	7819      	ldrb	r1, [r3, #0]
   14aca:	2968      	cmp	r1, #104	; 0x68
   14acc:	d019      	beq.n	14b02 <d_call_offset+0x4a>
   14ace:	2976      	cmp	r1, #118	; 0x76
   14ad0:	d001      	beq.n	14ad6 <d_call_offset+0x1e>
   14ad2:	2000      	movs	r0, #0
   14ad4:	bd38      	pop	{r3, r4, r5, pc}
   14ad6:	f104 050c 	add.w	r5, r4, #12
   14ada:	4628      	mov	r0, r5
   14adc:	f7ff fe38 	bl	14750 <d_number.isra.0>
   14ae0:	68e3      	ldr	r3, [r4, #12]
   14ae2:	781a      	ldrb	r2, [r3, #0]
   14ae4:	2a5f      	cmp	r2, #95	; 0x5f
   14ae6:	d1f4      	bne.n	14ad2 <d_call_offset+0x1a>
   14ae8:	3301      	adds	r3, #1
   14aea:	60e3      	str	r3, [r4, #12]
   14aec:	4628      	mov	r0, r5
   14aee:	f7ff fe2f 	bl	14750 <d_number.isra.0>
   14af2:	68e3      	ldr	r3, [r4, #12]
   14af4:	781a      	ldrb	r2, [r3, #0]
   14af6:	2a5f      	cmp	r2, #95	; 0x5f
   14af8:	d1eb      	bne.n	14ad2 <d_call_offset+0x1a>
   14afa:	3301      	adds	r3, #1
   14afc:	60e3      	str	r3, [r4, #12]
   14afe:	2001      	movs	r0, #1
   14b00:	bd38      	pop	{r3, r4, r5, pc}
   14b02:	f104 000c 	add.w	r0, r4, #12
   14b06:	f7ff fe23 	bl	14750 <d_number.isra.0>
   14b0a:	e7f2      	b.n	14af2 <d_call_offset+0x3a>

00014b0c <d_lookup_template_argument.isra.6>:
   14b0c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14b10:	b19b      	cbz	r3, 14b3a <d_lookup_template_argument.isra.6+0x2e>
   14b12:	680a      	ldr	r2, [r1, #0]
   14b14:	685b      	ldr	r3, [r3, #4]
   14b16:	2a00      	cmp	r2, #0
   14b18:	689b      	ldr	r3, [r3, #8]
   14b1a:	db09      	blt.n	14b30 <d_lookup_template_argument.isra.6+0x24>
   14b1c:	b923      	cbnz	r3, 14b28 <d_lookup_template_argument.isra.6+0x1c>
   14b1e:	e007      	b.n	14b30 <d_lookup_template_argument.isra.6+0x24>
   14b20:	b142      	cbz	r2, 14b34 <d_lookup_template_argument.isra.6+0x28>
   14b22:	689b      	ldr	r3, [r3, #8]
   14b24:	3a01      	subs	r2, #1
   14b26:	b11b      	cbz	r3, 14b30 <d_lookup_template_argument.isra.6+0x24>
   14b28:	7819      	ldrb	r1, [r3, #0]
   14b2a:	292f      	cmp	r1, #47	; 0x2f
   14b2c:	d0f8      	beq.n	14b20 <d_lookup_template_argument.isra.6+0x14>
   14b2e:	2300      	movs	r3, #0
   14b30:	4618      	mov	r0, r3
   14b32:	4770      	bx	lr
   14b34:	685b      	ldr	r3, [r3, #4]
   14b36:	4618      	mov	r0, r3
   14b38:	4770      	bx	lr
   14b3a:	2201      	movs	r2, #1
   14b3c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14b40:	e7f6      	b.n	14b30 <d_lookup_template_argument.isra.6+0x24>
   14b42:	bf00      	nop

00014b44 <d_find_pack>:
   14b44:	2900      	cmp	r1, #0
   14b46:	d041      	beq.n	14bcc <d_find_pack+0x88>
   14b48:	b538      	push	{r3, r4, r5, lr}
   14b4a:	4605      	mov	r5, r0
   14b4c:	460c      	mov	r4, r1
   14b4e:	7823      	ldrb	r3, [r4, #0]
   14b50:	2b4b      	cmp	r3, #75	; 0x4b
   14b52:	d827      	bhi.n	14ba4 <d_find_pack+0x60>
   14b54:	e8df f003 	tbb	[pc, r3]
   14b58:	2626262e 	.word	0x2626262e
   14b5c:	2b2e3026 	.word	0x2b2e3026
   14b60:	2626262b 	.word	0x2626262b
   14b64:	26262626 	.word	0x26262626
   14b68:	26262626 	.word	0x26262626
   14b6c:	26262626 	.word	0x26262626
   14b70:	2626262e 	.word	0x2626262e
   14b74:	26262626 	.word	0x26262626
   14b78:	26262626 	.word	0x26262626
   14b7c:	2e262626 	.word	0x2e262626
   14b80:	26262626 	.word	0x26262626
   14b84:	2626262e 	.word	0x2626262e
   14b88:	262b2e26 	.word	0x262b2e26
   14b8c:	26262626 	.word	0x26262626
   14b90:	26262626 	.word	0x26262626
   14b94:	26262626 	.word	0x26262626
   14b98:	26262e2e 	.word	0x26262e2e
   14b9c:	2e2e2e26 	.word	0x2e2e2e26
   14ba0:	2e2e2626 	.word	0x2e2e2626
   14ba4:	6861      	ldr	r1, [r4, #4]
   14ba6:	4628      	mov	r0, r5
   14ba8:	f7ff ffcc 	bl	14b44 <d_find_pack>
   14bac:	b918      	cbnz	r0, 14bb6 <d_find_pack+0x72>
   14bae:	68a4      	ldr	r4, [r4, #8]
   14bb0:	2c00      	cmp	r4, #0
   14bb2:	d1cc      	bne.n	14b4e <d_find_pack+0xa>
   14bb4:	2000      	movs	r0, #0
   14bb6:	bd38      	pop	{r3, r4, r5, pc}
   14bb8:	1d21      	adds	r1, r4, #4
   14bba:	4628      	mov	r0, r5
   14bbc:	f7ff ffa6 	bl	14b0c <d_lookup_template_argument.isra.6>
   14bc0:	2800      	cmp	r0, #0
   14bc2:	d0f7      	beq.n	14bb4 <d_find_pack+0x70>
   14bc4:	7803      	ldrb	r3, [r0, #0]
   14bc6:	2b2f      	cmp	r3, #47	; 0x2f
   14bc8:	d1f4      	bne.n	14bb4 <d_find_pack+0x70>
   14bca:	bd38      	pop	{r3, r4, r5, pc}
   14bcc:	2000      	movs	r0, #0
   14bce:	4770      	bx	lr

00014bd0 <d_growable_string_callback_adapter>:
   14bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bd2:	4615      	mov	r5, r2
   14bd4:	6852      	ldr	r2, [r2, #4]
   14bd6:	68ac      	ldr	r4, [r5, #8]
   14bd8:	1c4b      	adds	r3, r1, #1
   14bda:	4413      	add	r3, r2
   14bdc:	42a3      	cmp	r3, r4
   14bde:	b083      	sub	sp, #12
   14be0:	460e      	mov	r6, r1
   14be2:	4607      	mov	r7, r0
   14be4:	d813      	bhi.n	14c0e <d_growable_string_callback_adapter+0x3e>
   14be6:	68ec      	ldr	r4, [r5, #12]
   14be8:	b10c      	cbz	r4, 14bee <d_growable_string_callback_adapter+0x1e>
   14bea:	b003      	add	sp, #12
   14bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14bee:	e895 0009 	ldmia.w	r5, {r0, r3}
   14bf2:	4632      	mov	r2, r6
   14bf4:	4639      	mov	r1, r7
   14bf6:	4418      	add	r0, r3
   14bf8:	f009 fb4a 	bl	1e290 <memcpy>
   14bfc:	682b      	ldr	r3, [r5, #0]
   14bfe:	686a      	ldr	r2, [r5, #4]
   14c00:	4433      	add	r3, r6
   14c02:	549c      	strb	r4, [r3, r2]
   14c04:	686b      	ldr	r3, [r5, #4]
   14c06:	441e      	add	r6, r3
   14c08:	606e      	str	r6, [r5, #4]
   14c0a:	b003      	add	sp, #12
   14c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c0e:	68ea      	ldr	r2, [r5, #12]
   14c10:	2a00      	cmp	r2, #0
   14c12:	d1ea      	bne.n	14bea <d_growable_string_callback_adapter+0x1a>
   14c14:	b91c      	cbnz	r4, 14c1e <d_growable_string_callback_adapter+0x4e>
   14c16:	2b02      	cmp	r3, #2
   14c18:	f04f 0402 	mov.w	r4, #2
   14c1c:	d902      	bls.n	14c24 <d_growable_string_callback_adapter+0x54>
   14c1e:	0064      	lsls	r4, r4, #1
   14c20:	42a3      	cmp	r3, r4
   14c22:	d8fc      	bhi.n	14c1e <d_growable_string_callback_adapter+0x4e>
   14c24:	4621      	mov	r1, r4
   14c26:	6828      	ldr	r0, [r5, #0]
   14c28:	f009 fcc2 	bl	1e5b0 <realloc>
   14c2c:	b110      	cbz	r0, 14c34 <d_growable_string_callback_adapter+0x64>
   14c2e:	6028      	str	r0, [r5, #0]
   14c30:	60ac      	str	r4, [r5, #8]
   14c32:	e7d8      	b.n	14be6 <d_growable_string_callback_adapter+0x16>
   14c34:	9001      	str	r0, [sp, #4]
   14c36:	6828      	ldr	r0, [r5, #0]
   14c38:	f008 ffda 	bl	1dbf0 <free>
   14c3c:	9b01      	ldr	r3, [sp, #4]
   14c3e:	602b      	str	r3, [r5, #0]
   14c40:	2201      	movs	r2, #1
   14c42:	606b      	str	r3, [r5, #4]
   14c44:	60ab      	str	r3, [r5, #8]
   14c46:	60ea      	str	r2, [r5, #12]
   14c48:	e7cf      	b.n	14bea <d_growable_string_callback_adapter+0x1a>
   14c4a:	bf00      	nop

00014c4c <d_append_num>:
   14c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c50:	b088      	sub	sp, #32
   14c52:	460a      	mov	r2, r1
   14c54:	4604      	mov	r4, r0
   14c56:	491b      	ldr	r1, [pc, #108]	; (14cc4 <d_append_num+0x78>)
   14c58:	a801      	add	r0, sp, #4
   14c5a:	f009 feb7 	bl	1e9cc <sprintf>
   14c5e:	a801      	add	r0, sp, #4
   14c60:	f00a f84e 	bl	1ed00 <strlen>
   14c64:	b350      	cbz	r0, 14cbc <d_append_num+0x70>
   14c66:	ad01      	add	r5, sp, #4
   14c68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14c6c:	182f      	adds	r7, r5, r0
   14c6e:	f04f 0800 	mov.w	r8, #0
   14c72:	e009      	b.n	14c88 <d_append_num+0x3c>
   14c74:	460b      	mov	r3, r1
   14c76:	42bd      	cmp	r5, r7
   14c78:	f101 0101 	add.w	r1, r1, #1
   14c7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14c80:	54e6      	strb	r6, [r4, r3]
   14c82:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14c86:	d019      	beq.n	14cbc <d_append_num+0x70>
   14c88:	29ff      	cmp	r1, #255	; 0xff
   14c8a:	f815 6b01 	ldrb.w	r6, [r5], #1
   14c8e:	d1f1      	bne.n	14c74 <d_append_num+0x28>
   14c90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14c94:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14c98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14c9c:	4620      	mov	r0, r4
   14c9e:	4798      	blx	r3
   14ca0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14ca4:	3301      	adds	r3, #1
   14ca6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14caa:	2300      	movs	r3, #0
   14cac:	2101      	movs	r1, #1
   14cae:	42bd      	cmp	r5, r7
   14cb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14cb4:	54e6      	strb	r6, [r4, r3]
   14cb6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14cba:	d1e5      	bne.n	14c88 <d_append_num+0x3c>
   14cbc:	b008      	add	sp, #32
   14cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14cc2:	bf00      	nop
   14cc4:	00024354 	.word	0x00024354

00014cc8 <d_exprlist>:
   14cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ccc:	68c3      	ldr	r3, [r0, #12]
   14cce:	781d      	ldrb	r5, [r3, #0]
   14cd0:	b083      	sub	sp, #12
   14cd2:	2200      	movs	r2, #0
   14cd4:	428d      	cmp	r5, r1
   14cd6:	4604      	mov	r4, r0
   14cd8:	9201      	str	r2, [sp, #4]
   14cda:	f000 81c6 	beq.w	1506a <d_exprlist+0x3a2>
   14cde:	4688      	mov	r8, r1
   14ce0:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 15180 <d_exprlist+0x4b8>
   14ce4:	ae01      	add	r6, sp, #4
   14ce6:	e023      	b.n	14d30 <d_exprlist+0x68>
   14ce8:	2a66      	cmp	r2, #102	; 0x66
   14cea:	d04c      	beq.n	14d86 <d_exprlist+0xbe>
   14cec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14cf0:	2909      	cmp	r1, #9
   14cf2:	f200 8217 	bhi.w	15124 <d_exprlist+0x45c>
   14cf6:	4620      	mov	r0, r4
   14cf8:	f001 fb10 	bl	1631c <d_unqualified_name>
   14cfc:	4605      	mov	r5, r0
   14cfe:	2800      	cmp	r0, #0
   14d00:	f000 8170 	beq.w	14fe4 <d_exprlist+0x31c>
   14d04:	68e3      	ldr	r3, [r4, #12]
   14d06:	781b      	ldrb	r3, [r3, #0]
   14d08:	2b49      	cmp	r3, #73	; 0x49
   14d0a:	f000 8092 	beq.w	14e32 <d_exprlist+0x16a>
   14d0e:	6367      	str	r7, [r4, #52]	; 0x34
   14d10:	462a      	mov	r2, r5
   14d12:	2300      	movs	r3, #0
   14d14:	212e      	movs	r1, #46	; 0x2e
   14d16:	4620      	mov	r0, r4
   14d18:	f7ff fbc8 	bl	144ac <d_make_comp>
   14d1c:	6030      	str	r0, [r6, #0]
   14d1e:	2800      	cmp	r0, #0
   14d20:	d05b      	beq.n	14dda <d_exprlist+0x112>
   14d22:	68e3      	ldr	r3, [r4, #12]
   14d24:	781a      	ldrb	r2, [r3, #0]
   14d26:	4542      	cmp	r2, r8
   14d28:	f100 0608 	add.w	r6, r0, #8
   14d2c:	f000 8107 	beq.w	14f3e <d_exprlist+0x276>
   14d30:	2501      	movs	r5, #1
   14d32:	6b67      	ldr	r7, [r4, #52]	; 0x34
   14d34:	6365      	str	r5, [r4, #52]	; 0x34
   14d36:	781a      	ldrb	r2, [r3, #0]
   14d38:	2a4c      	cmp	r2, #76	; 0x4c
   14d3a:	d047      	beq.n	14dcc <d_exprlist+0x104>
   14d3c:	2a54      	cmp	r2, #84	; 0x54
   14d3e:	d051      	beq.n	14de4 <d_exprlist+0x11c>
   14d40:	2a73      	cmp	r2, #115	; 0x73
   14d42:	d1d1      	bne.n	14ce8 <d_exprlist+0x20>
   14d44:	785a      	ldrb	r2, [r3, #1]
   14d46:	2a72      	cmp	r2, #114	; 0x72
   14d48:	f000 80e2 	beq.w	14f10 <d_exprlist+0x248>
   14d4c:	2a70      	cmp	r2, #112	; 0x70
   14d4e:	f000 80fd 	beq.w	14f4c <d_exprlist+0x284>
   14d52:	4620      	mov	r0, r4
   14d54:	f001 fa22 	bl	1619c <d_operator_name>
   14d58:	4605      	mov	r5, r0
   14d5a:	2800      	cmp	r0, #0
   14d5c:	f000 8142 	beq.w	14fe4 <d_exprlist+0x31c>
   14d60:	782b      	ldrb	r3, [r5, #0]
   14d62:	2b31      	cmp	r3, #49	; 0x31
   14d64:	d043      	beq.n	14dee <d_exprlist+0x126>
   14d66:	2b32      	cmp	r3, #50	; 0x32
   14d68:	d05c      	beq.n	14e24 <d_exprlist+0x15c>
   14d6a:	2b33      	cmp	r3, #51	; 0x33
   14d6c:	d17b      	bne.n	14e66 <d_exprlist+0x19e>
   14d6e:	68e3      	ldr	r3, [r4, #12]
   14d70:	781a      	ldrb	r2, [r3, #0]
   14d72:	2a5f      	cmp	r2, #95	; 0x5f
   14d74:	f040 80c1 	bne.w	14efa <d_exprlist+0x232>
   14d78:	3301      	adds	r3, #1
   14d7a:	60e3      	str	r3, [r4, #12]
   14d7c:	2145      	movs	r1, #69	; 0x45
   14d7e:	4620      	mov	r0, r4
   14d80:	f7ff ffa2 	bl	14cc8 <d_exprlist>
   14d84:	e0bc      	b.n	14f00 <d_exprlist+0x238>
   14d86:	785a      	ldrb	r2, [r3, #1]
   14d88:	2a70      	cmp	r2, #112	; 0x70
   14d8a:	d1e2      	bne.n	14d52 <d_exprlist+0x8a>
   14d8c:	1c9a      	adds	r2, r3, #2
   14d8e:	60e2      	str	r2, [r4, #12]
   14d90:	789a      	ldrb	r2, [r3, #2]
   14d92:	2a54      	cmp	r2, #84	; 0x54
   14d94:	d069      	beq.n	14e6a <d_exprlist+0x1a2>
   14d96:	4620      	mov	r0, r4
   14d98:	f7ff fd1c 	bl	147d4 <d_compact_number>
   14d9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14da0:	4298      	cmp	r0, r3
   14da2:	d060      	beq.n	14e66 <d_exprlist+0x19e>
   14da4:	1c43      	adds	r3, r0, #1
   14da6:	d05e      	beq.n	14e66 <d_exprlist+0x19e>
   14da8:	3001      	adds	r0, #1
   14daa:	6963      	ldr	r3, [r4, #20]
   14dac:	69a2      	ldr	r2, [r4, #24]
   14dae:	4293      	cmp	r3, r2
   14db0:	da59      	bge.n	14e66 <d_exprlist+0x19e>
   14db2:	6922      	ldr	r2, [r4, #16]
   14db4:	1c59      	adds	r1, r3, #1
   14db6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14dba:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   14dbe:	6161      	str	r1, [r4, #20]
   14dc0:	d051      	beq.n	14e66 <d_exprlist+0x19e>
   14dc2:	2106      	movs	r1, #6
   14dc4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   14dc8:	6068      	str	r0, [r5, #4]
   14dca:	e7a0      	b.n	14d0e <d_exprlist+0x46>
   14dcc:	4620      	mov	r0, r4
   14dce:	f001 fef3 	bl	16bb8 <d_expr_primary>
   14dd2:	4605      	mov	r5, r0
   14dd4:	6367      	str	r7, [r4, #52]	; 0x34
   14dd6:	2d00      	cmp	r5, #0
   14dd8:	d19a      	bne.n	14d10 <d_exprlist+0x48>
   14dda:	2500      	movs	r5, #0
   14ddc:	4628      	mov	r0, r5
   14dde:	b003      	add	sp, #12
   14de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14de4:	4620      	mov	r0, r4
   14de6:	f7ff fd11 	bl	1480c <d_template_param>
   14dea:	4605      	mov	r5, r0
   14dec:	e7f2      	b.n	14dd4 <d_exprlist+0x10c>
   14dee:	f8d5 b004 	ldr.w	fp, [r5, #4]
   14df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14df4:	f8db 2008 	ldr.w	r2, [fp, #8]
   14df8:	f8db a000 	ldr.w	sl, [fp]
   14dfc:	3a02      	subs	r2, #2
   14dfe:	4413      	add	r3, r2
   14e00:	6323      	str	r3, [r4, #48]	; 0x30
   14e02:	4650      	mov	r0, sl
   14e04:	4649      	mov	r1, r9
   14e06:	f009 fe0f 	bl	1ea28 <strcmp>
   14e0a:	2800      	cmp	r0, #0
   14e0c:	f000 80e6 	beq.w	14fdc <d_exprlist+0x314>
   14e10:	f8db 300c 	ldr.w	r3, [fp, #12]
   14e14:	2b03      	cmp	r3, #3
   14e16:	d826      	bhi.n	14e66 <d_exprlist+0x19e>
   14e18:	e8df f013 	tbh	[pc, r3, lsl #1]
   14e1c:	0135002b 	.word	0x0135002b
   14e20:	00a50033 	.word	0x00a50033
   14e24:	686b      	ldr	r3, [r5, #4]
   14e26:	2b03      	cmp	r3, #3
   14e28:	d81d      	bhi.n	14e66 <d_exprlist+0x19e>
   14e2a:	e8df f003 	tbb	[pc, r3]
   14e2e:	6622      	.short	0x6622
   14e30:	1c1c      	.short	0x1c1c
   14e32:	4620      	mov	r0, r4
   14e34:	f000 fc04 	bl	15640 <d_template_args>
   14e38:	462a      	mov	r2, r5
   14e3a:	4603      	mov	r3, r0
   14e3c:	2104      	movs	r1, #4
   14e3e:	4620      	mov	r0, r4
   14e40:	f7ff fb34 	bl	144ac <d_make_comp>
   14e44:	4605      	mov	r5, r0
   14e46:	e7c5      	b.n	14dd4 <d_exprlist+0x10c>
   14e48:	2a74      	cmp	r2, #116	; 0x74
   14e4a:	d182      	bne.n	14d52 <d_exprlist+0x8a>
   14e4c:	785b      	ldrb	r3, [r3, #1]
   14e4e:	2b6c      	cmp	r3, #108	; 0x6c
   14e50:	f47f af7f 	bne.w	14d52 <d_exprlist+0x8a>
   14e54:	4620      	mov	r0, r4
   14e56:	f000 fdb9 	bl	159cc <d_type>
   14e5a:	68e3      	ldr	r3, [r4, #12]
   14e5c:	785a      	ldrb	r2, [r3, #1]
   14e5e:	4605      	mov	r5, r0
   14e60:	2a00      	cmp	r2, #0
   14e62:	f040 8169 	bne.w	15138 <d_exprlist+0x470>
   14e66:	6367      	str	r7, [r4, #52]	; 0x34
   14e68:	e7b7      	b.n	14dda <d_exprlist+0x112>
   14e6a:	3303      	adds	r3, #3
   14e6c:	60e3      	str	r3, [r4, #12]
   14e6e:	2000      	movs	r0, #0
   14e70:	e79b      	b.n	14daa <d_exprlist+0xe2>
   14e72:	462a      	mov	r2, r5
   14e74:	2300      	movs	r3, #0
   14e76:	2135      	movs	r1, #53	; 0x35
   14e78:	4620      	mov	r0, r4
   14e7a:	f7ff fb17 	bl	144ac <d_make_comp>
   14e7e:	4605      	mov	r5, r0
   14e80:	e7a8      	b.n	14dd4 <d_exprlist+0x10c>
   14e82:	f1ba 0f00 	cmp.w	sl, #0
   14e86:	d0ee      	beq.n	14e66 <d_exprlist+0x19e>
   14e88:	686b      	ldr	r3, [r5, #4]
   14e8a:	681b      	ldr	r3, [r3, #0]
   14e8c:	785a      	ldrb	r2, [r3, #1]
   14e8e:	2a63      	cmp	r2, #99	; 0x63
   14e90:	f000 80d2 	beq.w	15038 <d_exprlist+0x370>
   14e94:	f89a 3000 	ldrb.w	r3, [sl]
   14e98:	2b66      	cmp	r3, #102	; 0x66
   14e9a:	f000 80ef 	beq.w	1507c <d_exprlist+0x3b4>
   14e9e:	4620      	mov	r0, r4
   14ea0:	f000 f970 	bl	15184 <d_expression_1>
   14ea4:	4683      	mov	fp, r0
   14ea6:	49b1      	ldr	r1, [pc, #708]	; (1516c <d_exprlist+0x4a4>)
   14ea8:	4650      	mov	r0, sl
   14eaa:	f009 fdbd 	bl	1ea28 <strcmp>
   14eae:	2800      	cmp	r0, #0
   14eb0:	f000 809d 	beq.w	14fee <d_exprlist+0x326>
   14eb4:	49ae      	ldr	r1, [pc, #696]	; (15170 <d_exprlist+0x4a8>)
   14eb6:	4650      	mov	r0, sl
   14eb8:	f009 fdb6 	bl	1ea28 <strcmp>
   14ebc:	b130      	cbz	r0, 14ecc <d_exprlist+0x204>
   14ebe:	4650      	mov	r0, sl
   14ec0:	49ac      	ldr	r1, [pc, #688]	; (15174 <d_exprlist+0x4ac>)
   14ec2:	f009 fdb1 	bl	1ea28 <strcmp>
   14ec6:	2800      	cmp	r0, #0
   14ec8:	f040 8083 	bne.w	14fd2 <d_exprlist+0x30a>
   14ecc:	4620      	mov	r0, r4
   14ece:	f001 fa25 	bl	1631c <d_unqualified_name>
   14ed2:	68e3      	ldr	r3, [r4, #12]
   14ed4:	781b      	ldrb	r3, [r3, #0]
   14ed6:	2b49      	cmp	r3, #73	; 0x49
   14ed8:	4682      	mov	sl, r0
   14eda:	f000 80e9 	beq.w	150b0 <d_exprlist+0x3e8>
   14ede:	4653      	mov	r3, sl
   14ee0:	465a      	mov	r2, fp
   14ee2:	2138      	movs	r1, #56	; 0x38
   14ee4:	4620      	mov	r0, r4
   14ee6:	f7ff fae1 	bl	144ac <d_make_comp>
   14eea:	462a      	mov	r2, r5
   14eec:	4603      	mov	r3, r0
   14eee:	2137      	movs	r1, #55	; 0x37
   14ef0:	4620      	mov	r0, r4
   14ef2:	f7ff fadb 	bl	144ac <d_make_comp>
   14ef6:	4605      	mov	r5, r0
   14ef8:	e76c      	b.n	14dd4 <d_exprlist+0x10c>
   14efa:	4620      	mov	r0, r4
   14efc:	f000 f942 	bl	15184 <d_expression_1>
   14f00:	4603      	mov	r3, r0
   14f02:	462a      	mov	r2, r5
   14f04:	2136      	movs	r1, #54	; 0x36
   14f06:	4620      	mov	r0, r4
   14f08:	f7ff fad0 	bl	144ac <d_make_comp>
   14f0c:	4605      	mov	r5, r0
   14f0e:	e761      	b.n	14dd4 <d_exprlist+0x10c>
   14f10:	3302      	adds	r3, #2
   14f12:	60e3      	str	r3, [r4, #12]
   14f14:	4620      	mov	r0, r4
   14f16:	f000 fd59 	bl	159cc <d_type>
   14f1a:	4682      	mov	sl, r0
   14f1c:	4620      	mov	r0, r4
   14f1e:	f001 f9fd 	bl	1631c <d_unqualified_name>
   14f22:	68e3      	ldr	r3, [r4, #12]
   14f24:	781b      	ldrb	r3, [r3, #0]
   14f26:	2b49      	cmp	r3, #73	; 0x49
   14f28:	4683      	mov	fp, r0
   14f2a:	f000 8093 	beq.w	15054 <d_exprlist+0x38c>
   14f2e:	4603      	mov	r3, r0
   14f30:	4629      	mov	r1, r5
   14f32:	4652      	mov	r2, sl
   14f34:	4620      	mov	r0, r4
   14f36:	f7ff fab9 	bl	144ac <d_make_comp>
   14f3a:	4605      	mov	r5, r0
   14f3c:	e74a      	b.n	14dd4 <d_exprlist+0x10c>
   14f3e:	9d01      	ldr	r5, [sp, #4]
   14f40:	3301      	adds	r3, #1
   14f42:	4628      	mov	r0, r5
   14f44:	60e3      	str	r3, [r4, #12]
   14f46:	b003      	add	sp, #12
   14f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f4c:	3302      	adds	r3, #2
   14f4e:	60e3      	str	r3, [r4, #12]
   14f50:	4620      	mov	r0, r4
   14f52:	f000 f917 	bl	15184 <d_expression_1>
   14f56:	2300      	movs	r3, #0
   14f58:	4602      	mov	r2, r0
   14f5a:	214a      	movs	r1, #74	; 0x4a
   14f5c:	4620      	mov	r0, r4
   14f5e:	f7ff faa5 	bl	144ac <d_make_comp>
   14f62:	4605      	mov	r5, r0
   14f64:	e736      	b.n	14dd4 <d_exprlist+0x10c>
   14f66:	f1ba 0f00 	cmp.w	sl, #0
   14f6a:	f43f af7c 	beq.w	14e66 <d_exprlist+0x19e>
   14f6e:	4982      	ldr	r1, [pc, #520]	; (15178 <d_exprlist+0x4b0>)
   14f70:	4650      	mov	r0, sl
   14f72:	f009 fd59 	bl	1ea28 <strcmp>
   14f76:	2800      	cmp	r0, #0
   14f78:	d03f      	beq.n	14ffa <d_exprlist+0x332>
   14f7a:	f89a 3000 	ldrb.w	r3, [sl]
   14f7e:	2b66      	cmp	r3, #102	; 0x66
   14f80:	f000 80bd 	beq.w	150fe <d_exprlist+0x436>
   14f84:	2b6e      	cmp	r3, #110	; 0x6e
   14f86:	f47f af6e 	bne.w	14e66 <d_exprlist+0x19e>
   14f8a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   14f8e:	2b77      	cmp	r3, #119	; 0x77
   14f90:	d002      	beq.n	14f98 <d_exprlist+0x2d0>
   14f92:	2b61      	cmp	r3, #97	; 0x61
   14f94:	f47f af67 	bne.w	14e66 <d_exprlist+0x19e>
   14f98:	215f      	movs	r1, #95	; 0x5f
   14f9a:	4620      	mov	r0, r4
   14f9c:	f7ff fe94 	bl	14cc8 <d_exprlist>
   14fa0:	4682      	mov	sl, r0
   14fa2:	4620      	mov	r0, r4
   14fa4:	f000 fd12 	bl	159cc <d_type>
   14fa8:	68e3      	ldr	r3, [r4, #12]
   14faa:	781a      	ldrb	r2, [r3, #0]
   14fac:	2a45      	cmp	r2, #69	; 0x45
   14fae:	4683      	mov	fp, r0
   14fb0:	f000 80a1 	beq.w	150f6 <d_exprlist+0x42e>
   14fb4:	2a70      	cmp	r2, #112	; 0x70
   14fb6:	f000 80a6 	beq.w	15106 <d_exprlist+0x43e>
   14fba:	2a69      	cmp	r2, #105	; 0x69
   14fbc:	f47f af53 	bne.w	14e66 <d_exprlist+0x19e>
   14fc0:	785b      	ldrb	r3, [r3, #1]
   14fc2:	2b6c      	cmp	r3, #108	; 0x6c
   14fc4:	f47f af4f 	bne.w	14e66 <d_exprlist+0x19e>
   14fc8:	4620      	mov	r0, r4
   14fca:	f000 f8db 	bl	15184 <d_expression_1>
   14fce:	4603      	mov	r3, r0
   14fd0:	e01f      	b.n	15012 <d_exprlist+0x34a>
   14fd2:	4620      	mov	r0, r4
   14fd4:	f000 f8d6 	bl	15184 <d_expression_1>
   14fd8:	4682      	mov	sl, r0
   14fda:	e780      	b.n	14ede <d_exprlist+0x216>
   14fdc:	4620      	mov	r0, r4
   14fde:	f000 fcf5 	bl	159cc <d_type>
   14fe2:	e78d      	b.n	14f00 <d_exprlist+0x238>
   14fe4:	4628      	mov	r0, r5
   14fe6:	6367      	str	r7, [r4, #52]	; 0x34
   14fe8:	b003      	add	sp, #12
   14fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fee:	2145      	movs	r1, #69	; 0x45
   14ff0:	4620      	mov	r0, r4
   14ff2:	f7ff fe69 	bl	14cc8 <d_exprlist>
   14ff6:	4682      	mov	sl, r0
   14ff8:	e771      	b.n	14ede <d_exprlist+0x216>
   14ffa:	4620      	mov	r0, r4
   14ffc:	f000 f8c2 	bl	15184 <d_expression_1>
   15000:	4682      	mov	sl, r0
   15002:	4620      	mov	r0, r4
   15004:	f000 f8be 	bl	15184 <d_expression_1>
   15008:	4683      	mov	fp, r0
   1500a:	4620      	mov	r0, r4
   1500c:	f000 f8ba 	bl	15184 <d_expression_1>
   15010:	4603      	mov	r3, r0
   15012:	465a      	mov	r2, fp
   15014:	213b      	movs	r1, #59	; 0x3b
   15016:	4620      	mov	r0, r4
   15018:	f7ff fa48 	bl	144ac <d_make_comp>
   1501c:	4652      	mov	r2, sl
   1501e:	4603      	mov	r3, r0
   15020:	213a      	movs	r1, #58	; 0x3a
   15022:	4620      	mov	r0, r4
   15024:	f7ff fa42 	bl	144ac <d_make_comp>
   15028:	462a      	mov	r2, r5
   1502a:	4603      	mov	r3, r0
   1502c:	2139      	movs	r1, #57	; 0x39
   1502e:	4620      	mov	r0, r4
   15030:	f7ff fa3c 	bl	144ac <d_make_comp>
   15034:	4605      	mov	r5, r0
   15036:	e6cd      	b.n	14dd4 <d_exprlist+0x10c>
   15038:	781b      	ldrb	r3, [r3, #0]
   1503a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1503e:	2a01      	cmp	r2, #1
   15040:	d903      	bls.n	1504a <d_exprlist+0x382>
   15042:	3b72      	subs	r3, #114	; 0x72
   15044:	2b01      	cmp	r3, #1
   15046:	f63f af25 	bhi.w	14e94 <d_exprlist+0x1cc>
   1504a:	4620      	mov	r0, r4
   1504c:	f000 fcbe 	bl	159cc <d_type>
   15050:	4683      	mov	fp, r0
   15052:	e728      	b.n	14ea6 <d_exprlist+0x1de>
   15054:	4620      	mov	r0, r4
   15056:	f000 faf3 	bl	15640 <d_template_args>
   1505a:	465a      	mov	r2, fp
   1505c:	4603      	mov	r3, r0
   1505e:	2104      	movs	r1, #4
   15060:	4620      	mov	r0, r4
   15062:	f7ff fa23 	bl	144ac <d_make_comp>
   15066:	4603      	mov	r3, r0
   15068:	e762      	b.n	14f30 <d_exprlist+0x268>
   1506a:	3301      	adds	r3, #1
   1506c:	60c3      	str	r3, [r0, #12]
   1506e:	212e      	movs	r1, #46	; 0x2e
   15070:	4613      	mov	r3, r2
   15072:	b003      	add	sp, #12
   15074:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15078:	f7ff ba18 	b.w	144ac <d_make_comp>
   1507c:	4620      	mov	r0, r4
   1507e:	f001 f88d 	bl	1619c <d_operator_name>
   15082:	4683      	mov	fp, r0
   15084:	e70f      	b.n	14ea6 <d_exprlist+0x1de>
   15086:	f1ba 0f00 	cmp.w	sl, #0
   1508a:	f43f af36 	beq.w	14efa <d_exprlist+0x232>
   1508e:	f89a 3000 	ldrb.w	r3, [sl]
   15092:	2b70      	cmp	r3, #112	; 0x70
   15094:	d017      	beq.n	150c6 <d_exprlist+0x3fe>
   15096:	2b6d      	cmp	r3, #109	; 0x6d
   15098:	d015      	beq.n	150c6 <d_exprlist+0x3fe>
   1509a:	4650      	mov	r0, sl
   1509c:	4937      	ldr	r1, [pc, #220]	; (1517c <d_exprlist+0x4b4>)
   1509e:	f009 fcc3 	bl	1ea28 <strcmp>
   150a2:	2800      	cmp	r0, #0
   150a4:	f47f af29 	bne.w	14efa <d_exprlist+0x232>
   150a8:	4620      	mov	r0, r4
   150aa:	f000 fa65 	bl	15578 <d_template_args_1>
   150ae:	e727      	b.n	14f00 <d_exprlist+0x238>
   150b0:	4620      	mov	r0, r4
   150b2:	f000 fac5 	bl	15640 <d_template_args>
   150b6:	4652      	mov	r2, sl
   150b8:	4603      	mov	r3, r0
   150ba:	2104      	movs	r1, #4
   150bc:	4620      	mov	r0, r4
   150be:	f7ff f9f5 	bl	144ac <d_make_comp>
   150c2:	4682      	mov	sl, r0
   150c4:	e70b      	b.n	14ede <d_exprlist+0x216>
   150c6:	f89a 2001 	ldrb.w	r2, [sl, #1]
   150ca:	429a      	cmp	r2, r3
   150cc:	d1e5      	bne.n	1509a <d_exprlist+0x3d2>
   150ce:	68e3      	ldr	r3, [r4, #12]
   150d0:	781a      	ldrb	r2, [r3, #0]
   150d2:	2a5f      	cmp	r2, #95	; 0x5f
   150d4:	d023      	beq.n	1511e <d_exprlist+0x456>
   150d6:	4650      	mov	r0, sl
   150d8:	4928      	ldr	r1, [pc, #160]	; (1517c <d_exprlist+0x4b4>)
   150da:	f009 fca5 	bl	1ea28 <strcmp>
   150de:	2800      	cmp	r0, #0
   150e0:	d03f      	beq.n	15162 <d_exprlist+0x49a>
   150e2:	4620      	mov	r0, r4
   150e4:	f000 f84e 	bl	15184 <d_expression_1>
   150e8:	4603      	mov	r3, r0
   150ea:	461a      	mov	r2, r3
   150ec:	2138      	movs	r1, #56	; 0x38
   150ee:	4620      	mov	r0, r4
   150f0:	f7ff f9dc 	bl	144ac <d_make_comp>
   150f4:	e704      	b.n	14f00 <d_exprlist+0x238>
   150f6:	3301      	adds	r3, #1
   150f8:	60e3      	str	r3, [r4, #12]
   150fa:	2300      	movs	r3, #0
   150fc:	e789      	b.n	15012 <d_exprlist+0x34a>
   150fe:	4620      	mov	r0, r4
   15100:	f001 f84c 	bl	1619c <d_operator_name>
   15104:	e77c      	b.n	15000 <d_exprlist+0x338>
   15106:	785a      	ldrb	r2, [r3, #1]
   15108:	2a69      	cmp	r2, #105	; 0x69
   1510a:	f47f aeac 	bne.w	14e66 <d_exprlist+0x19e>
   1510e:	3302      	adds	r3, #2
   15110:	60e3      	str	r3, [r4, #12]
   15112:	2145      	movs	r1, #69	; 0x45
   15114:	4620      	mov	r0, r4
   15116:	f7ff fdd7 	bl	14cc8 <d_exprlist>
   1511a:	4603      	mov	r3, r0
   1511c:	e779      	b.n	15012 <d_exprlist+0x34a>
   1511e:	3301      	adds	r3, #1
   15120:	60e3      	str	r3, [r4, #12]
   15122:	e7ba      	b.n	1509a <d_exprlist+0x3d2>
   15124:	2a6f      	cmp	r2, #111	; 0x6f
   15126:	d015      	beq.n	15154 <d_exprlist+0x48c>
   15128:	2a69      	cmp	r2, #105	; 0x69
   1512a:	f47f ae8d 	bne.w	14e48 <d_exprlist+0x180>
   1512e:	785a      	ldrb	r2, [r3, #1]
   15130:	2a6c      	cmp	r2, #108	; 0x6c
   15132:	f47f ae0e 	bne.w	14d52 <d_exprlist+0x8a>
   15136:	2500      	movs	r5, #0
   15138:	3302      	adds	r3, #2
   1513a:	60e3      	str	r3, [r4, #12]
   1513c:	2145      	movs	r1, #69	; 0x45
   1513e:	4620      	mov	r0, r4
   15140:	f7ff fdc2 	bl	14cc8 <d_exprlist>
   15144:	462a      	mov	r2, r5
   15146:	4603      	mov	r3, r0
   15148:	2130      	movs	r1, #48	; 0x30
   1514a:	4620      	mov	r0, r4
   1514c:	f7ff f9ae 	bl	144ac <d_make_comp>
   15150:	4605      	mov	r5, r0
   15152:	e63f      	b.n	14dd4 <d_exprlist+0x10c>
   15154:	785a      	ldrb	r2, [r3, #1]
   15156:	2a6e      	cmp	r2, #110	; 0x6e
   15158:	f47f adfb 	bne.w	14d52 <d_exprlist+0x8a>
   1515c:	3302      	adds	r3, #2
   1515e:	60e3      	str	r3, [r4, #12]
   15160:	e5c9      	b.n	14cf6 <d_exprlist+0x2e>
   15162:	4620      	mov	r0, r4
   15164:	f000 fa08 	bl	15578 <d_template_args_1>
   15168:	4603      	mov	r3, r0
   1516a:	e7be      	b.n	150ea <d_exprlist+0x422>
   1516c:	0002435c 	.word	0x0002435c
   15170:	00024360 	.word	0x00024360
   15174:	00024364 	.word	0x00024364
   15178:	00024368 	.word	0x00024368
   1517c:	00024358 	.word	0x00024358
   15180:	0002485c 	.word	0x0002485c

00015184 <d_expression_1>:
   15184:	68c1      	ldr	r1, [r0, #12]
   15186:	780b      	ldrb	r3, [r1, #0]
   15188:	2b4c      	cmp	r3, #76	; 0x4c
   1518a:	f000 8087 	beq.w	1529c <d_expression_1+0x118>
   1518e:	2b54      	cmp	r3, #84	; 0x54
   15190:	f000 8086 	beq.w	152a0 <d_expression_1+0x11c>
   15194:	2b73      	cmp	r3, #115	; 0x73
   15196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1519a:	4604      	mov	r4, r0
   1519c:	d037      	beq.n	1520e <d_expression_1+0x8a>
   1519e:	2b66      	cmp	r3, #102	; 0x66
   151a0:	d012      	beq.n	151c8 <d_expression_1+0x44>
   151a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   151a6:	2a09      	cmp	r2, #9
   151a8:	f200 81b8 	bhi.w	1551c <d_expression_1+0x398>
   151ac:	4620      	mov	r0, r4
   151ae:	f001 f8b5 	bl	1631c <d_unqualified_name>
   151b2:	4605      	mov	r5, r0
   151b4:	2800      	cmp	r0, #0
   151b6:	d06d      	beq.n	15294 <d_expression_1+0x110>
   151b8:	68e3      	ldr	r3, [r4, #12]
   151ba:	781b      	ldrb	r3, [r3, #0]
   151bc:	2b49      	cmp	r3, #73	; 0x49
   151be:	f000 8088 	beq.w	152d2 <d_expression_1+0x14e>
   151c2:	4628      	mov	r0, r5
   151c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   151c8:	784b      	ldrb	r3, [r1, #1]
   151ca:	2b70      	cmp	r3, #112	; 0x70
   151cc:	d039      	beq.n	15242 <d_expression_1+0xbe>
   151ce:	4620      	mov	r0, r4
   151d0:	f000 ffe4 	bl	1619c <d_operator_name>
   151d4:	4605      	mov	r5, r0
   151d6:	2800      	cmp	r0, #0
   151d8:	d05c      	beq.n	15294 <d_expression_1+0x110>
   151da:	7803      	ldrb	r3, [r0, #0]
   151dc:	2b31      	cmp	r3, #49	; 0x31
   151de:	d061      	beq.n	152a4 <d_expression_1+0x120>
   151e0:	2b32      	cmp	r3, #50	; 0x32
   151e2:	d025      	beq.n	15230 <d_expression_1+0xac>
   151e4:	2b33      	cmp	r3, #51	; 0x33
   151e6:	d155      	bne.n	15294 <d_expression_1+0x110>
   151e8:	68e3      	ldr	r3, [r4, #12]
   151ea:	781a      	ldrb	r2, [r3, #0]
   151ec:	2a5f      	cmp	r2, #95	; 0x5f
   151ee:	f040 81b4 	bne.w	1555a <d_expression_1+0x3d6>
   151f2:	3301      	adds	r3, #1
   151f4:	60e3      	str	r3, [r4, #12]
   151f6:	2145      	movs	r1, #69	; 0x45
   151f8:	4620      	mov	r0, r4
   151fa:	f7ff fd65 	bl	14cc8 <d_exprlist>
   151fe:	4603      	mov	r3, r0
   15200:	462a      	mov	r2, r5
   15202:	4620      	mov	r0, r4
   15204:	2136      	movs	r1, #54	; 0x36
   15206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1520a:	f7ff b94f 	b.w	144ac <d_make_comp>
   1520e:	784b      	ldrb	r3, [r1, #1]
   15210:	2b72      	cmp	r3, #114	; 0x72
   15212:	d069      	beq.n	152e8 <d_expression_1+0x164>
   15214:	2b70      	cmp	r3, #112	; 0x70
   15216:	d1da      	bne.n	151ce <d_expression_1+0x4a>
   15218:	3102      	adds	r1, #2
   1521a:	60c1      	str	r1, [r0, #12]
   1521c:	f7ff ffb2 	bl	15184 <d_expression_1>
   15220:	2300      	movs	r3, #0
   15222:	4602      	mov	r2, r0
   15224:	214a      	movs	r1, #74	; 0x4a
   15226:	4620      	mov	r0, r4
   15228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1522c:	f7ff b93e 	b.w	144ac <d_make_comp>
   15230:	6843      	ldr	r3, [r0, #4]
   15232:	2b03      	cmp	r3, #3
   15234:	d82e      	bhi.n	15294 <d_expression_1+0x110>
   15236:	e8df f013 	tbh	[pc, r3, lsl #1]
   1523a:	0071      	.short	0x0071
   1523c:	002d0190 	.word	0x002d0190
   15240:	002d      	.short	0x002d
   15242:	1c8b      	adds	r3, r1, #2
   15244:	60c3      	str	r3, [r0, #12]
   15246:	788b      	ldrb	r3, [r1, #2]
   15248:	2b54      	cmp	r3, #84	; 0x54
   1524a:	d063      	beq.n	15314 <d_expression_1+0x190>
   1524c:	f7ff fac2 	bl	147d4 <d_compact_number>
   15250:	43c3      	mvns	r3, r0
   15252:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   15256:	d01d      	beq.n	15294 <d_expression_1+0x110>
   15258:	3001      	adds	r0, #1
   1525a:	6963      	ldr	r3, [r4, #20]
   1525c:	69a2      	ldr	r2, [r4, #24]
   1525e:	4293      	cmp	r3, r2
   15260:	da18      	bge.n	15294 <d_expression_1+0x110>
   15262:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15266:	6921      	ldr	r1, [r4, #16]
   15268:	0092      	lsls	r2, r2, #2
   1526a:	3301      	adds	r3, #1
   1526c:	188d      	adds	r5, r1, r2
   1526e:	6163      	str	r3, [r4, #20]
   15270:	d0a7      	beq.n	151c2 <d_expression_1+0x3e>
   15272:	2306      	movs	r3, #6
   15274:	548b      	strb	r3, [r1, r2]
   15276:	6068      	str	r0, [r5, #4]
   15278:	e7a3      	b.n	151c2 <d_expression_1+0x3e>
   1527a:	2b74      	cmp	r3, #116	; 0x74
   1527c:	d1a7      	bne.n	151ce <d_expression_1+0x4a>
   1527e:	784b      	ldrb	r3, [r1, #1]
   15280:	2b6c      	cmp	r3, #108	; 0x6c
   15282:	d1a4      	bne.n	151ce <d_expression_1+0x4a>
   15284:	f000 fba2 	bl	159cc <d_type>
   15288:	68e1      	ldr	r1, [r4, #12]
   1528a:	784b      	ldrb	r3, [r1, #1]
   1528c:	4605      	mov	r5, r0
   1528e:	2b00      	cmp	r3, #0
   15290:	f040 814e 	bne.w	15530 <d_expression_1+0x3ac>
   15294:	2500      	movs	r5, #0
   15296:	4628      	mov	r0, r5
   15298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1529c:	f001 bc8c 	b.w	16bb8 <d_expr_primary>
   152a0:	f7ff bab4 	b.w	1480c <d_template_param>
   152a4:	6847      	ldr	r7, [r0, #4]
   152a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   152a8:	68ba      	ldr	r2, [r7, #8]
   152aa:	683e      	ldr	r6, [r7, #0]
   152ac:	49ac      	ldr	r1, [pc, #688]	; (15560 <d_expression_1+0x3dc>)
   152ae:	3a02      	subs	r2, #2
   152b0:	4413      	add	r3, r2
   152b2:	6323      	str	r3, [r4, #48]	; 0x30
   152b4:	4630      	mov	r0, r6
   152b6:	f009 fbb7 	bl	1ea28 <strcmp>
   152ba:	2800      	cmp	r0, #0
   152bc:	f000 80ab 	beq.w	15416 <d_expression_1+0x292>
   152c0:	68ff      	ldr	r7, [r7, #12]
   152c2:	2f03      	cmp	r7, #3
   152c4:	d8e6      	bhi.n	15294 <d_expression_1+0x110>
   152c6:	e8df f017 	tbh	[pc, r7, lsl #1]
   152ca:	0029      	.short	0x0029
   152cc:	007100ff 	.word	0x007100ff
   152d0:	0031      	.short	0x0031
   152d2:	4620      	mov	r0, r4
   152d4:	f000 f9b4 	bl	15640 <d_template_args>
   152d8:	462a      	mov	r2, r5
   152da:	4603      	mov	r3, r0
   152dc:	2104      	movs	r1, #4
   152de:	4620      	mov	r0, r4
   152e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   152e4:	f7ff b8e2 	b.w	144ac <d_make_comp>
   152e8:	3102      	adds	r1, #2
   152ea:	60c1      	str	r1, [r0, #12]
   152ec:	f000 fb6e 	bl	159cc <d_type>
   152f0:	4605      	mov	r5, r0
   152f2:	4620      	mov	r0, r4
   152f4:	f001 f812 	bl	1631c <d_unqualified_name>
   152f8:	68e3      	ldr	r3, [r4, #12]
   152fa:	781b      	ldrb	r3, [r3, #0]
   152fc:	2b49      	cmp	r3, #73	; 0x49
   152fe:	4606      	mov	r6, r0
   15300:	f000 80ae 	beq.w	15460 <d_expression_1+0x2dc>
   15304:	4603      	mov	r3, r0
   15306:	462a      	mov	r2, r5
   15308:	4620      	mov	r0, r4
   1530a:	2101      	movs	r1, #1
   1530c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15310:	f7ff b8cc 	b.w	144ac <d_make_comp>
   15314:	3103      	adds	r1, #3
   15316:	60c1      	str	r1, [r0, #12]
   15318:	2000      	movs	r0, #0
   1531a:	e79e      	b.n	1525a <d_expression_1+0xd6>
   1531c:	462a      	mov	r2, r5
   1531e:	4620      	mov	r0, r4
   15320:	2300      	movs	r3, #0
   15322:	2135      	movs	r1, #53	; 0x35
   15324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15328:	f7ff b8c0 	b.w	144ac <d_make_comp>
   1532c:	2e00      	cmp	r6, #0
   1532e:	d0b1      	beq.n	15294 <d_expression_1+0x110>
   15330:	498c      	ldr	r1, [pc, #560]	; (15564 <d_expression_1+0x3e0>)
   15332:	4630      	mov	r0, r6
   15334:	f009 fb78 	bl	1ea28 <strcmp>
   15338:	2800      	cmp	r0, #0
   1533a:	d071      	beq.n	15420 <d_expression_1+0x29c>
   1533c:	7833      	ldrb	r3, [r6, #0]
   1533e:	2b66      	cmp	r3, #102	; 0x66
   15340:	f000 80b2 	beq.w	154a8 <d_expression_1+0x324>
   15344:	2b6e      	cmp	r3, #110	; 0x6e
   15346:	d1a5      	bne.n	15294 <d_expression_1+0x110>
   15348:	7873      	ldrb	r3, [r6, #1]
   1534a:	2b77      	cmp	r3, #119	; 0x77
   1534c:	d001      	beq.n	15352 <d_expression_1+0x1ce>
   1534e:	2b61      	cmp	r3, #97	; 0x61
   15350:	d1a0      	bne.n	15294 <d_expression_1+0x110>
   15352:	215f      	movs	r1, #95	; 0x5f
   15354:	4620      	mov	r0, r4
   15356:	f7ff fcb7 	bl	14cc8 <d_exprlist>
   1535a:	4606      	mov	r6, r0
   1535c:	4620      	mov	r0, r4
   1535e:	f000 fb35 	bl	159cc <d_type>
   15362:	68e3      	ldr	r3, [r4, #12]
   15364:	781a      	ldrb	r2, [r3, #0]
   15366:	2a45      	cmp	r2, #69	; 0x45
   15368:	4607      	mov	r7, r0
   1536a:	f000 8099 	beq.w	154a0 <d_expression_1+0x31c>
   1536e:	2a70      	cmp	r2, #112	; 0x70
   15370:	f000 809e 	beq.w	154b0 <d_expression_1+0x32c>
   15374:	2a69      	cmp	r2, #105	; 0x69
   15376:	d18d      	bne.n	15294 <d_expression_1+0x110>
   15378:	785b      	ldrb	r3, [r3, #1]
   1537a:	2b6c      	cmp	r3, #108	; 0x6c
   1537c:	d18a      	bne.n	15294 <d_expression_1+0x110>
   1537e:	4620      	mov	r0, r4
   15380:	f7ff ff00 	bl	15184 <d_expression_1>
   15384:	4603      	mov	r3, r0
   15386:	463a      	mov	r2, r7
   15388:	213b      	movs	r1, #59	; 0x3b
   1538a:	4620      	mov	r0, r4
   1538c:	f7ff f88e 	bl	144ac <d_make_comp>
   15390:	4632      	mov	r2, r6
   15392:	4603      	mov	r3, r0
   15394:	213a      	movs	r1, #58	; 0x3a
   15396:	4620      	mov	r0, r4
   15398:	f7ff f888 	bl	144ac <d_make_comp>
   1539c:	462a      	mov	r2, r5
   1539e:	4603      	mov	r3, r0
   153a0:	2139      	movs	r1, #57	; 0x39
   153a2:	4620      	mov	r0, r4
   153a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   153a8:	f7ff b880 	b.w	144ac <d_make_comp>
   153ac:	2e00      	cmp	r6, #0
   153ae:	f43f af71 	beq.w	15294 <d_expression_1+0x110>
   153b2:	686b      	ldr	r3, [r5, #4]
   153b4:	681b      	ldr	r3, [r3, #0]
   153b6:	785a      	ldrb	r2, [r3, #1]
   153b8:	2a63      	cmp	r2, #99	; 0x63
   153ba:	d044      	beq.n	15446 <d_expression_1+0x2c2>
   153bc:	7833      	ldrb	r3, [r6, #0]
   153be:	2b66      	cmp	r3, #102	; 0x66
   153c0:	d059      	beq.n	15476 <d_expression_1+0x2f2>
   153c2:	4620      	mov	r0, r4
   153c4:	f7ff fede 	bl	15184 <d_expression_1>
   153c8:	4607      	mov	r7, r0
   153ca:	4967      	ldr	r1, [pc, #412]	; (15568 <d_expression_1+0x3e4>)
   153cc:	4630      	mov	r0, r6
   153ce:	f009 fb2b 	bl	1ea28 <strcmp>
   153d2:	b390      	cbz	r0, 1543a <d_expression_1+0x2b6>
   153d4:	4965      	ldr	r1, [pc, #404]	; (1556c <d_expression_1+0x3e8>)
   153d6:	4630      	mov	r0, r6
   153d8:	f009 fb26 	bl	1ea28 <strcmp>
   153dc:	b128      	cbz	r0, 153ea <d_expression_1+0x266>
   153de:	4630      	mov	r0, r6
   153e0:	4963      	ldr	r1, [pc, #396]	; (15570 <d_expression_1+0x3ec>)
   153e2:	f009 fb21 	bl	1ea28 <strcmp>
   153e6:	2800      	cmp	r0, #0
   153e8:	d14a      	bne.n	15480 <d_expression_1+0x2fc>
   153ea:	4620      	mov	r0, r4
   153ec:	f000 ff96 	bl	1631c <d_unqualified_name>
   153f0:	68e3      	ldr	r3, [r4, #12]
   153f2:	781b      	ldrb	r3, [r3, #0]
   153f4:	2b49      	cmp	r3, #73	; 0x49
   153f6:	4606      	mov	r6, r0
   153f8:	d047      	beq.n	1548a <d_expression_1+0x306>
   153fa:	4633      	mov	r3, r6
   153fc:	463a      	mov	r2, r7
   153fe:	2138      	movs	r1, #56	; 0x38
   15400:	4620      	mov	r0, r4
   15402:	f7ff f853 	bl	144ac <d_make_comp>
   15406:	462a      	mov	r2, r5
   15408:	4603      	mov	r3, r0
   1540a:	2137      	movs	r1, #55	; 0x37
   1540c:	4620      	mov	r0, r4
   1540e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15412:	f7ff b84b 	b.w	144ac <d_make_comp>
   15416:	4620      	mov	r0, r4
   15418:	f000 fad8 	bl	159cc <d_type>
   1541c:	4603      	mov	r3, r0
   1541e:	e6ef      	b.n	15200 <d_expression_1+0x7c>
   15420:	4620      	mov	r0, r4
   15422:	f7ff feaf 	bl	15184 <d_expression_1>
   15426:	4606      	mov	r6, r0
   15428:	4620      	mov	r0, r4
   1542a:	f7ff feab 	bl	15184 <d_expression_1>
   1542e:	4607      	mov	r7, r0
   15430:	4620      	mov	r0, r4
   15432:	f7ff fea7 	bl	15184 <d_expression_1>
   15436:	4603      	mov	r3, r0
   15438:	e7a5      	b.n	15386 <d_expression_1+0x202>
   1543a:	2145      	movs	r1, #69	; 0x45
   1543c:	4620      	mov	r0, r4
   1543e:	f7ff fc43 	bl	14cc8 <d_exprlist>
   15442:	4606      	mov	r6, r0
   15444:	e7d9      	b.n	153fa <d_expression_1+0x276>
   15446:	781b      	ldrb	r3, [r3, #0]
   15448:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1544c:	2a01      	cmp	r2, #1
   1544e:	d902      	bls.n	15456 <d_expression_1+0x2d2>
   15450:	3b72      	subs	r3, #114	; 0x72
   15452:	2b01      	cmp	r3, #1
   15454:	d8b2      	bhi.n	153bc <d_expression_1+0x238>
   15456:	4620      	mov	r0, r4
   15458:	f000 fab8 	bl	159cc <d_type>
   1545c:	4607      	mov	r7, r0
   1545e:	e7b4      	b.n	153ca <d_expression_1+0x246>
   15460:	4620      	mov	r0, r4
   15462:	f000 f8ed 	bl	15640 <d_template_args>
   15466:	4632      	mov	r2, r6
   15468:	4603      	mov	r3, r0
   1546a:	2104      	movs	r1, #4
   1546c:	4620      	mov	r0, r4
   1546e:	f7ff f81d 	bl	144ac <d_make_comp>
   15472:	4603      	mov	r3, r0
   15474:	e747      	b.n	15306 <d_expression_1+0x182>
   15476:	4620      	mov	r0, r4
   15478:	f000 fe90 	bl	1619c <d_operator_name>
   1547c:	4607      	mov	r7, r0
   1547e:	e7a4      	b.n	153ca <d_expression_1+0x246>
   15480:	4620      	mov	r0, r4
   15482:	f7ff fe7f 	bl	15184 <d_expression_1>
   15486:	4606      	mov	r6, r0
   15488:	e7b7      	b.n	153fa <d_expression_1+0x276>
   1548a:	4620      	mov	r0, r4
   1548c:	f000 f8d8 	bl	15640 <d_template_args>
   15490:	4632      	mov	r2, r6
   15492:	4603      	mov	r3, r0
   15494:	2104      	movs	r1, #4
   15496:	4620      	mov	r0, r4
   15498:	f7ff f808 	bl	144ac <d_make_comp>
   1549c:	4606      	mov	r6, r0
   1549e:	e7ac      	b.n	153fa <d_expression_1+0x276>
   154a0:	3301      	adds	r3, #1
   154a2:	60e3      	str	r3, [r4, #12]
   154a4:	2300      	movs	r3, #0
   154a6:	e76e      	b.n	15386 <d_expression_1+0x202>
   154a8:	4620      	mov	r0, r4
   154aa:	f000 fe77 	bl	1619c <d_operator_name>
   154ae:	e7ba      	b.n	15426 <d_expression_1+0x2a2>
   154b0:	785a      	ldrb	r2, [r3, #1]
   154b2:	2a69      	cmp	r2, #105	; 0x69
   154b4:	f47f aeee 	bne.w	15294 <d_expression_1+0x110>
   154b8:	3302      	adds	r3, #2
   154ba:	60e3      	str	r3, [r4, #12]
   154bc:	2145      	movs	r1, #69	; 0x45
   154be:	4620      	mov	r0, r4
   154c0:	f7ff fc02 	bl	14cc8 <d_exprlist>
   154c4:	4603      	mov	r3, r0
   154c6:	e75e      	b.n	15386 <d_expression_1+0x202>
   154c8:	2e00      	cmp	r6, #0
   154ca:	d046      	beq.n	1555a <d_expression_1+0x3d6>
   154cc:	7833      	ldrb	r3, [r6, #0]
   154ce:	2b70      	cmp	r3, #112	; 0x70
   154d0:	d015      	beq.n	154fe <d_expression_1+0x37a>
   154d2:	2b6d      	cmp	r3, #109	; 0x6d
   154d4:	d013      	beq.n	154fe <d_expression_1+0x37a>
   154d6:	2700      	movs	r7, #0
   154d8:	4630      	mov	r0, r6
   154da:	4926      	ldr	r1, [pc, #152]	; (15574 <d_expression_1+0x3f0>)
   154dc:	f009 faa4 	bl	1ea28 <strcmp>
   154e0:	b1b8      	cbz	r0, 15512 <d_expression_1+0x38e>
   154e2:	4620      	mov	r0, r4
   154e4:	f7ff fe4e 	bl	15184 <d_expression_1>
   154e8:	4603      	mov	r3, r0
   154ea:	2f00      	cmp	r7, #0
   154ec:	f43f ae88 	beq.w	15200 <d_expression_1+0x7c>
   154f0:	461a      	mov	r2, r3
   154f2:	2138      	movs	r1, #56	; 0x38
   154f4:	4620      	mov	r0, r4
   154f6:	f7fe ffd9 	bl	144ac <d_make_comp>
   154fa:	4603      	mov	r3, r0
   154fc:	e680      	b.n	15200 <d_expression_1+0x7c>
   154fe:	7872      	ldrb	r2, [r6, #1]
   15500:	429a      	cmp	r2, r3
   15502:	d1e8      	bne.n	154d6 <d_expression_1+0x352>
   15504:	68e3      	ldr	r3, [r4, #12]
   15506:	781a      	ldrb	r2, [r3, #0]
   15508:	2a5f      	cmp	r2, #95	; 0x5f
   1550a:	d1e5      	bne.n	154d8 <d_expression_1+0x354>
   1550c:	3301      	adds	r3, #1
   1550e:	60e3      	str	r3, [r4, #12]
   15510:	e7e1      	b.n	154d6 <d_expression_1+0x352>
   15512:	4620      	mov	r0, r4
   15514:	f000 f830 	bl	15578 <d_template_args_1>
   15518:	4603      	mov	r3, r0
   1551a:	e7e6      	b.n	154ea <d_expression_1+0x366>
   1551c:	2b6f      	cmp	r3, #111	; 0x6f
   1551e:	d015      	beq.n	1554c <d_expression_1+0x3c8>
   15520:	2b69      	cmp	r3, #105	; 0x69
   15522:	f47f aeaa 	bne.w	1527a <d_expression_1+0xf6>
   15526:	784b      	ldrb	r3, [r1, #1]
   15528:	2b6c      	cmp	r3, #108	; 0x6c
   1552a:	f47f ae50 	bne.w	151ce <d_expression_1+0x4a>
   1552e:	2500      	movs	r5, #0
   15530:	3102      	adds	r1, #2
   15532:	60e1      	str	r1, [r4, #12]
   15534:	4620      	mov	r0, r4
   15536:	2145      	movs	r1, #69	; 0x45
   15538:	f7ff fbc6 	bl	14cc8 <d_exprlist>
   1553c:	462a      	mov	r2, r5
   1553e:	4603      	mov	r3, r0
   15540:	2130      	movs	r1, #48	; 0x30
   15542:	4620      	mov	r0, r4
   15544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15548:	f7fe bfb0 	b.w	144ac <d_make_comp>
   1554c:	784b      	ldrb	r3, [r1, #1]
   1554e:	2b6e      	cmp	r3, #110	; 0x6e
   15550:	f47f ae3d 	bne.w	151ce <d_expression_1+0x4a>
   15554:	3102      	adds	r1, #2
   15556:	60c1      	str	r1, [r0, #12]
   15558:	e628      	b.n	151ac <d_expression_1+0x28>
   1555a:	2700      	movs	r7, #0
   1555c:	e7c1      	b.n	154e2 <d_expression_1+0x35e>
   1555e:	bf00      	nop
   15560:	0002485c 	.word	0x0002485c
   15564:	00024368 	.word	0x00024368
   15568:	0002435c 	.word	0x0002435c
   1556c:	00024360 	.word	0x00024360
   15570:	00024364 	.word	0x00024364
   15574:	00024358 	.word	0x00024358

00015578 <d_template_args_1>:
   15578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1557c:	68c2      	ldr	r2, [r0, #12]
   1557e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   15582:	7813      	ldrb	r3, [r2, #0]
   15584:	2b45      	cmp	r3, #69	; 0x45
   15586:	b083      	sub	sp, #12
   15588:	4604      	mov	r4, r0
   1558a:	d04e      	beq.n	1562a <d_template_args_1+0xb2>
   1558c:	ae02      	add	r6, sp, #8
   1558e:	2100      	movs	r1, #0
   15590:	f846 1d04 	str.w	r1, [r6, #-4]!
   15594:	2701      	movs	r7, #1
   15596:	3b49      	subs	r3, #73	; 0x49
   15598:	2b0f      	cmp	r3, #15
   1559a:	d83e      	bhi.n	1561a <d_template_args_1+0xa2>
   1559c:	e8df f003 	tbb	[pc, r3]
   155a0:	1b3d3838 	.word	0x1b3d3838
   155a4:	3d3d3d3d 	.word	0x3d3d3d3d
   155a8:	3d3d3d3d 	.word	0x3d3d3d3d
   155ac:	083d3d3d 	.word	0x083d3d3d
   155b0:	3201      	adds	r2, #1
   155b2:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   155b6:	60e2      	str	r2, [r4, #12]
   155b8:	6367      	str	r7, [r4, #52]	; 0x34
   155ba:	4620      	mov	r0, r4
   155bc:	f7ff fde2 	bl	15184 <d_expression_1>
   155c0:	68e3      	ldr	r3, [r4, #12]
   155c2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   155c6:	781a      	ldrb	r2, [r3, #0]
   155c8:	2a45      	cmp	r2, #69	; 0x45
   155ca:	4605      	mov	r5, r0
   155cc:	d02a      	beq.n	15624 <d_template_args_1+0xac>
   155ce:	2000      	movs	r0, #0
   155d0:	b003      	add	sp, #12
   155d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   155d6:	4620      	mov	r0, r4
   155d8:	f001 faee 	bl	16bb8 <d_expr_primary>
   155dc:	4605      	mov	r5, r0
   155de:	2300      	movs	r3, #0
   155e0:	212f      	movs	r1, #47	; 0x2f
   155e2:	462a      	mov	r2, r5
   155e4:	4620      	mov	r0, r4
   155e6:	2d00      	cmp	r5, #0
   155e8:	d0f1      	beq.n	155ce <d_template_args_1+0x56>
   155ea:	f7fe ff5f 	bl	144ac <d_make_comp>
   155ee:	6030      	str	r0, [r6, #0]
   155f0:	f100 0608 	add.w	r6, r0, #8
   155f4:	2800      	cmp	r0, #0
   155f6:	d0ea      	beq.n	155ce <d_template_args_1+0x56>
   155f8:	68e2      	ldr	r2, [r4, #12]
   155fa:	7813      	ldrb	r3, [r2, #0]
   155fc:	2b45      	cmp	r3, #69	; 0x45
   155fe:	d1ca      	bne.n	15596 <d_template_args_1+0x1e>
   15600:	9801      	ldr	r0, [sp, #4]
   15602:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   15606:	3201      	adds	r2, #1
   15608:	60e2      	str	r2, [r4, #12]
   1560a:	b003      	add	sp, #12
   1560c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15610:	4620      	mov	r0, r4
   15612:	f000 f815 	bl	15640 <d_template_args>
   15616:	4605      	mov	r5, r0
   15618:	e7e1      	b.n	155de <d_template_args_1+0x66>
   1561a:	4620      	mov	r0, r4
   1561c:	f000 f9d6 	bl	159cc <d_type>
   15620:	4605      	mov	r5, r0
   15622:	e7dc      	b.n	155de <d_template_args_1+0x66>
   15624:	3301      	adds	r3, #1
   15626:	60e3      	str	r3, [r4, #12]
   15628:	e7d9      	b.n	155de <d_template_args_1+0x66>
   1562a:	3201      	adds	r2, #1
   1562c:	2300      	movs	r3, #0
   1562e:	60c2      	str	r2, [r0, #12]
   15630:	212f      	movs	r1, #47	; 0x2f
   15632:	461a      	mov	r2, r3
   15634:	b003      	add	sp, #12
   15636:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1563a:	f7fe bf37 	b.w	144ac <d_make_comp>
   1563e:	bf00      	nop

00015640 <d_template_args>:
   15640:	68c2      	ldr	r2, [r0, #12]
   15642:	7813      	ldrb	r3, [r2, #0]
   15644:	3b49      	subs	r3, #73	; 0x49
   15646:	2b01      	cmp	r3, #1
   15648:	d802      	bhi.n	15650 <d_template_args+0x10>
   1564a:	3201      	adds	r2, #1
   1564c:	60c2      	str	r2, [r0, #12]
   1564e:	e793      	b.n	15578 <d_template_args_1>
   15650:	2000      	movs	r0, #0
   15652:	4770      	bx	lr

00015654 <d_name>:
   15654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15658:	68c2      	ldr	r2, [r0, #12]
   1565a:	7813      	ldrb	r3, [r2, #0]
   1565c:	3b4e      	subs	r3, #78	; 0x4e
   1565e:	b085      	sub	sp, #20
   15660:	4605      	mov	r5, r0
   15662:	2b0c      	cmp	r3, #12
   15664:	d870      	bhi.n	15748 <d_name+0xf4>
   15666:	e8df f003 	tbb	[pc, r3]
   1566a:	6f1e      	.short	0x6f1e
   1566c:	5b6f6f6f 	.word	0x5b6f6f6f
   15670:	6f6f176f 	.word	0x6f6f176f
   15674:	6f6f      	.short	0x6f6f
   15676:	07          	.byte	0x07
   15677:	00          	.byte	0x00
   15678:	3201      	adds	r2, #1
   1567a:	2100      	movs	r1, #0
   1567c:	60c2      	str	r2, [r0, #12]
   1567e:	f000 ffbd 	bl	165fc <d_encoding>
   15682:	68eb      	ldr	r3, [r5, #12]
   15684:	7819      	ldrb	r1, [r3, #0]
   15686:	2945      	cmp	r1, #69	; 0x45
   15688:	4606      	mov	r6, r0
   1568a:	f000 8099 	beq.w	157c0 <d_name+0x16c>
   1568e:	2200      	movs	r2, #0
   15690:	4610      	mov	r0, r2
   15692:	b005      	add	sp, #20
   15694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15698:	f000 fe40 	bl	1631c <d_unqualified_name>
   1569c:	4602      	mov	r2, r0
   1569e:	4610      	mov	r0, r2
   156a0:	b005      	add	sp, #20
   156a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   156a6:	3201      	adds	r2, #1
   156a8:	60c2      	str	r2, [r0, #12]
   156aa:	a903      	add	r1, sp, #12
   156ac:	2201      	movs	r2, #1
   156ae:	f7fe ff49 	bl	14544 <d_cv_qualifiers>
   156b2:	4681      	mov	r9, r0
   156b4:	2800      	cmp	r0, #0
   156b6:	d0ea      	beq.n	1568e <d_name+0x3a>
   156b8:	2100      	movs	r1, #0
   156ba:	4628      	mov	r0, r5
   156bc:	f7fe ffa8 	bl	14610 <d_ref_qualifier>
   156c0:	68ea      	ldr	r2, [r5, #12]
   156c2:	4eb4      	ldr	r6, [pc, #720]	; (15994 <d_name+0x340>)
   156c4:	7814      	ldrb	r4, [r2, #0]
   156c6:	4680      	mov	r8, r0
   156c8:	2700      	movs	r7, #0
   156ca:	2c00      	cmp	r4, #0
   156cc:	f000 80e8 	beq.w	158a0 <d_name+0x24c>
   156d0:	2c44      	cmp	r4, #68	; 0x44
   156d2:	f000 80d1 	beq.w	15878 <d_name+0x224>
   156d6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   156da:	b2db      	uxtb	r3, r3
   156dc:	2b1c      	cmp	r3, #28
   156de:	f240 80a8 	bls.w	15832 <d_name+0x1de>
   156e2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   156e6:	2b19      	cmp	r3, #25
   156e8:	f240 80a8 	bls.w	1583c <d_name+0x1e8>
   156ec:	2c55      	cmp	r4, #85	; 0x55
   156ee:	f000 80de 	beq.w	158ae <d_name+0x25a>
   156f2:	2c53      	cmp	r4, #83	; 0x53
   156f4:	f000 80f1 	beq.w	158da <d_name+0x286>
   156f8:	2c49      	cmp	r4, #73	; 0x49
   156fa:	f000 80da 	beq.w	158b2 <d_name+0x25e>
   156fe:	2c54      	cmp	r4, #84	; 0x54
   15700:	f000 811f 	beq.w	15942 <d_name+0x2ee>
   15704:	2c45      	cmp	r4, #69	; 0x45
   15706:	f000 814b 	beq.w	159a0 <d_name+0x34c>
   1570a:	2c4d      	cmp	r4, #77	; 0x4d
   1570c:	f040 80c8 	bne.w	158a0 <d_name+0x24c>
   15710:	2f00      	cmp	r7, #0
   15712:	f000 80c5 	beq.w	158a0 <d_name+0x24c>
   15716:	1c53      	adds	r3, r2, #1
   15718:	60eb      	str	r3, [r5, #12]
   1571a:	7854      	ldrb	r4, [r2, #1]
   1571c:	461a      	mov	r2, r3
   1571e:	e7d4      	b.n	156ca <d_name+0x76>
   15720:	7853      	ldrb	r3, [r2, #1]
   15722:	2b74      	cmp	r3, #116	; 0x74
   15724:	d031      	beq.n	1578a <d_name+0x136>
   15726:	2100      	movs	r1, #0
   15728:	f7ff f90a 	bl	14940 <d_substitution>
   1572c:	68eb      	ldr	r3, [r5, #12]
   1572e:	7819      	ldrb	r1, [r3, #0]
   15730:	2949      	cmp	r1, #73	; 0x49
   15732:	4602      	mov	r2, r0
   15734:	d1b3      	bne.n	1569e <d_name+0x4a>
   15736:	3301      	adds	r3, #1
   15738:	60eb      	str	r3, [r5, #12]
   1573a:	4628      	mov	r0, r5
   1573c:	9201      	str	r2, [sp, #4]
   1573e:	f7ff ff1b 	bl	15578 <d_template_args_1>
   15742:	9a01      	ldr	r2, [sp, #4]
   15744:	4603      	mov	r3, r0
   15746:	e017      	b.n	15778 <d_name+0x124>
   15748:	f000 fde8 	bl	1631c <d_unqualified_name>
   1574c:	68eb      	ldr	r3, [r5, #12]
   1574e:	7819      	ldrb	r1, [r3, #0]
   15750:	2949      	cmp	r1, #73	; 0x49
   15752:	4602      	mov	r2, r0
   15754:	d1a3      	bne.n	1569e <d_name+0x4a>
   15756:	2a00      	cmp	r2, #0
   15758:	d099      	beq.n	1568e <d_name+0x3a>
   1575a:	6a29      	ldr	r1, [r5, #32]
   1575c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1575e:	4281      	cmp	r1, r0
   15760:	da95      	bge.n	1568e <d_name+0x3a>
   15762:	69ec      	ldr	r4, [r5, #28]
   15764:	1c48      	adds	r0, r1, #1
   15766:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   1576a:	6228      	str	r0, [r5, #32]
   1576c:	7819      	ldrb	r1, [r3, #0]
   1576e:	3949      	subs	r1, #73	; 0x49
   15770:	2901      	cmp	r1, #1
   15772:	bf88      	it	hi
   15774:	2300      	movhi	r3, #0
   15776:	d9de      	bls.n	15736 <d_name+0xe2>
   15778:	4628      	mov	r0, r5
   1577a:	2104      	movs	r1, #4
   1577c:	f7fe fe96 	bl	144ac <d_make_comp>
   15780:	4602      	mov	r2, r0
   15782:	4610      	mov	r0, r2
   15784:	b005      	add	sp, #20
   15786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1578a:	6943      	ldr	r3, [r0, #20]
   1578c:	6981      	ldr	r1, [r0, #24]
   1578e:	3202      	adds	r2, #2
   15790:	428b      	cmp	r3, r1
   15792:	60c2      	str	r2, [r0, #12]
   15794:	f2c0 80ab 	blt.w	158ee <d_name+0x29a>
   15798:	2400      	movs	r4, #0
   1579a:	4628      	mov	r0, r5
   1579c:	f000 fdbe 	bl	1631c <d_unqualified_name>
   157a0:	4622      	mov	r2, r4
   157a2:	4603      	mov	r3, r0
   157a4:	2101      	movs	r1, #1
   157a6:	4628      	mov	r0, r5
   157a8:	f7fe fe80 	bl	144ac <d_make_comp>
   157ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
   157ae:	68eb      	ldr	r3, [r5, #12]
   157b0:	3103      	adds	r1, #3
   157b2:	6329      	str	r1, [r5, #48]	; 0x30
   157b4:	7819      	ldrb	r1, [r3, #0]
   157b6:	2949      	cmp	r1, #73	; 0x49
   157b8:	4602      	mov	r2, r0
   157ba:	f47f af70 	bne.w	1569e <d_name+0x4a>
   157be:	e7ca      	b.n	15756 <d_name+0x102>
   157c0:	1c5a      	adds	r2, r3, #1
   157c2:	60ea      	str	r2, [r5, #12]
   157c4:	7859      	ldrb	r1, [r3, #1]
   157c6:	2973      	cmp	r1, #115	; 0x73
   157c8:	f000 80a3 	beq.w	15912 <d_name+0x2be>
   157cc:	2964      	cmp	r1, #100	; 0x64
   157ce:	f000 80bc 	beq.w	1594a <d_name+0x2f6>
   157d2:	4628      	mov	r0, r5
   157d4:	f7ff ff3e 	bl	15654 <d_name>
   157d8:	4604      	mov	r4, r0
   157da:	2800      	cmp	r0, #0
   157dc:	d072      	beq.n	158c4 <d_name+0x270>
   157de:	7803      	ldrb	r3, [r0, #0]
   157e0:	2b45      	cmp	r3, #69	; 0x45
   157e2:	f000 8094 	beq.w	1590e <d_name+0x2ba>
   157e6:	2b47      	cmp	r3, #71	; 0x47
   157e8:	f000 8091 	beq.w	1590e <d_name+0x2ba>
   157ec:	68eb      	ldr	r3, [r5, #12]
   157ee:	781a      	ldrb	r2, [r3, #0]
   157f0:	2a5f      	cmp	r2, #95	; 0x5f
   157f2:	f040 808c 	bne.w	1590e <d_name+0x2ba>
   157f6:	f04f 37ff 	mov.w	r7, #4294967295
   157fa:	4628      	mov	r0, r5
   157fc:	3301      	adds	r3, #1
   157fe:	f840 3f0c 	str.w	r3, [r0, #12]!
   15802:	f7fe ffa5 	bl	14750 <d_number.isra.0>
   15806:	2800      	cmp	r0, #0
   15808:	f6ff af41 	blt.w	1568e <d_name+0x3a>
   1580c:	1c7b      	adds	r3, r7, #1
   1580e:	d07e      	beq.n	1590e <d_name+0x2ba>
   15810:	696b      	ldr	r3, [r5, #20]
   15812:	69aa      	ldr	r2, [r5, #24]
   15814:	4293      	cmp	r3, r2
   15816:	da55      	bge.n	158c4 <d_name+0x270>
   15818:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1581c:	6929      	ldr	r1, [r5, #16]
   1581e:	3301      	adds	r3, #1
   15820:	0092      	lsls	r2, r2, #2
   15822:	616b      	str	r3, [r5, #20]
   15824:	188b      	adds	r3, r1, r2
   15826:	d04e      	beq.n	158c6 <d_name+0x272>
   15828:	2046      	movs	r0, #70	; 0x46
   1582a:	5488      	strb	r0, [r1, r2]
   1582c:	609f      	str	r7, [r3, #8]
   1582e:	605c      	str	r4, [r3, #4]
   15830:	e049      	b.n	158c6 <d_name+0x272>
   15832:	fa26 f303 	lsr.w	r3, r6, r3
   15836:	07d9      	lsls	r1, r3, #31
   15838:	f57f af53 	bpl.w	156e2 <d_name+0x8e>
   1583c:	4628      	mov	r0, r5
   1583e:	f000 fd6d 	bl	1631c <d_unqualified_name>
   15842:	b347      	cbz	r7, 15896 <d_name+0x242>
   15844:	2101      	movs	r1, #1
   15846:	4603      	mov	r3, r0
   15848:	463a      	mov	r2, r7
   1584a:	4628      	mov	r0, r5
   1584c:	f7fe fe2e 	bl	144ac <d_make_comp>
   15850:	4607      	mov	r7, r0
   15852:	2c53      	cmp	r4, #83	; 0x53
   15854:	d01c      	beq.n	15890 <d_name+0x23c>
   15856:	68ea      	ldr	r2, [r5, #12]
   15858:	7814      	ldrb	r4, [r2, #0]
   1585a:	2c45      	cmp	r4, #69	; 0x45
   1585c:	f43f af3b 	beq.w	156d6 <d_name+0x82>
   15860:	b1f7      	cbz	r7, 158a0 <d_name+0x24c>
   15862:	6a2b      	ldr	r3, [r5, #32]
   15864:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15866:	428b      	cmp	r3, r1
   15868:	da1a      	bge.n	158a0 <d_name+0x24c>
   1586a:	69e9      	ldr	r1, [r5, #28]
   1586c:	1c58      	adds	r0, r3, #1
   1586e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   15872:	6228      	str	r0, [r5, #32]
   15874:	7814      	ldrb	r4, [r2, #0]
   15876:	e728      	b.n	156ca <d_name+0x76>
   15878:	7853      	ldrb	r3, [r2, #1]
   1587a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1587e:	2b54      	cmp	r3, #84	; 0x54
   15880:	4628      	mov	r0, r5
   15882:	d00a      	beq.n	1589a <d_name+0x246>
   15884:	f000 fd4a 	bl	1631c <d_unqualified_name>
   15888:	2f00      	cmp	r7, #0
   1588a:	d1db      	bne.n	15844 <d_name+0x1f0>
   1588c:	4607      	mov	r7, r0
   1588e:	e7e2      	b.n	15856 <d_name+0x202>
   15890:	68ea      	ldr	r2, [r5, #12]
   15892:	7814      	ldrb	r4, [r2, #0]
   15894:	e719      	b.n	156ca <d_name+0x76>
   15896:	4607      	mov	r7, r0
   15898:	e7db      	b.n	15852 <d_name+0x1fe>
   1589a:	f000 f897 	bl	159cc <d_type>
   1589e:	e7f3      	b.n	15888 <d_name+0x234>
   158a0:	2200      	movs	r2, #0
   158a2:	4610      	mov	r0, r2
   158a4:	f8c9 2000 	str.w	r2, [r9]
   158a8:	b005      	add	sp, #20
   158aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   158ae:	4628      	mov	r0, r5
   158b0:	e7e8      	b.n	15884 <d_name+0x230>
   158b2:	2f00      	cmp	r7, #0
   158b4:	d0f4      	beq.n	158a0 <d_name+0x24c>
   158b6:	3201      	adds	r2, #1
   158b8:	60ea      	str	r2, [r5, #12]
   158ba:	4628      	mov	r0, r5
   158bc:	f7ff fe5c 	bl	15578 <d_template_args_1>
   158c0:	2104      	movs	r1, #4
   158c2:	e7c0      	b.n	15846 <d_name+0x1f2>
   158c4:	2300      	movs	r3, #0
   158c6:	4632      	mov	r2, r6
   158c8:	4628      	mov	r0, r5
   158ca:	2102      	movs	r1, #2
   158cc:	f7fe fdee 	bl	144ac <d_make_comp>
   158d0:	4602      	mov	r2, r0
   158d2:	4610      	mov	r0, r2
   158d4:	b005      	add	sp, #20
   158d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   158da:	2101      	movs	r1, #1
   158dc:	4628      	mov	r0, r5
   158de:	f7ff f82f 	bl	14940 <d_substitution>
   158e2:	2f00      	cmp	r7, #0
   158e4:	d1ae      	bne.n	15844 <d_name+0x1f0>
   158e6:	68ea      	ldr	r2, [r5, #12]
   158e8:	4607      	mov	r7, r0
   158ea:	7814      	ldrb	r4, [r2, #0]
   158ec:	e6ed      	b.n	156ca <d_name+0x76>
   158ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   158f2:	6901      	ldr	r1, [r0, #16]
   158f4:	0092      	lsls	r2, r2, #2
   158f6:	3301      	adds	r3, #1
   158f8:	188c      	adds	r4, r1, r2
   158fa:	6143      	str	r3, [r0, #20]
   158fc:	f43f af4d 	beq.w	1579a <d_name+0x146>
   15900:	2300      	movs	r3, #0
   15902:	548b      	strb	r3, [r1, r2]
   15904:	4824      	ldr	r0, [pc, #144]	; (15998 <d_name+0x344>)
   15906:	6060      	str	r0, [r4, #4]
   15908:	2303      	movs	r3, #3
   1590a:	60a3      	str	r3, [r4, #8]
   1590c:	e745      	b.n	1579a <d_name+0x146>
   1590e:	4623      	mov	r3, r4
   15910:	e7d9      	b.n	158c6 <d_name+0x272>
   15912:	1c9a      	adds	r2, r3, #2
   15914:	60ea      	str	r2, [r5, #12]
   15916:	789a      	ldrb	r2, [r3, #2]
   15918:	2a5f      	cmp	r2, #95	; 0x5f
   1591a:	d032      	beq.n	15982 <d_name+0x32e>
   1591c:	696b      	ldr	r3, [r5, #20]
   1591e:	69aa      	ldr	r2, [r5, #24]
   15920:	4293      	cmp	r3, r2
   15922:	dacf      	bge.n	158c4 <d_name+0x270>
   15924:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15928:	6929      	ldr	r1, [r5, #16]
   1592a:	3301      	adds	r3, #1
   1592c:	0092      	lsls	r2, r2, #2
   1592e:	616b      	str	r3, [r5, #20]
   15930:	188b      	adds	r3, r1, r2
   15932:	d0c8      	beq.n	158c6 <d_name+0x272>
   15934:	2400      	movs	r4, #0
   15936:	548c      	strb	r4, [r1, r2]
   15938:	4818      	ldr	r0, [pc, #96]	; (1599c <d_name+0x348>)
   1593a:	6058      	str	r0, [r3, #4]
   1593c:	220e      	movs	r2, #14
   1593e:	609a      	str	r2, [r3, #8]
   15940:	e7c1      	b.n	158c6 <d_name+0x272>
   15942:	4628      	mov	r0, r5
   15944:	f7fe ff62 	bl	1480c <d_template_param>
   15948:	e79e      	b.n	15888 <d_name+0x234>
   1594a:	3302      	adds	r3, #2
   1594c:	60eb      	str	r3, [r5, #12]
   1594e:	4628      	mov	r0, r5
   15950:	f7fe ff40 	bl	147d4 <d_compact_number>
   15954:	1e07      	subs	r7, r0, #0
   15956:	f6ff ae9a 	blt.w	1568e <d_name+0x3a>
   1595a:	4628      	mov	r0, r5
   1595c:	f7ff fe7a 	bl	15654 <d_name>
   15960:	4604      	mov	r4, r0
   15962:	2800      	cmp	r0, #0
   15964:	f43f af54 	beq.w	15810 <d_name+0x1bc>
   15968:	7803      	ldrb	r3, [r0, #0]
   1596a:	2b45      	cmp	r3, #69	; 0x45
   1596c:	f43f af50 	beq.w	15810 <d_name+0x1bc>
   15970:	2b47      	cmp	r3, #71	; 0x47
   15972:	f43f af4d 	beq.w	15810 <d_name+0x1bc>
   15976:	68eb      	ldr	r3, [r5, #12]
   15978:	781a      	ldrb	r2, [r3, #0]
   1597a:	2a5f      	cmp	r2, #95	; 0x5f
   1597c:	f47f af48 	bne.w	15810 <d_name+0x1bc>
   15980:	e73b      	b.n	157fa <d_name+0x1a6>
   15982:	4628      	mov	r0, r5
   15984:	3303      	adds	r3, #3
   15986:	f840 3f0c 	str.w	r3, [r0, #12]!
   1598a:	f7fe fee1 	bl	14750 <d_number.isra.0>
   1598e:	2800      	cmp	r0, #0
   15990:	dac4      	bge.n	1591c <d_name+0x2c8>
   15992:	e67c      	b.n	1568e <d_name+0x3a>
   15994:	100803ff 	.word	0x100803ff
   15998:	0002437c 	.word	0x0002437c
   1599c:	0002436c 	.word	0x0002436c
   159a0:	f8c9 7000 	str.w	r7, [r9]
   159a4:	2f00      	cmp	r7, #0
   159a6:	f43f ae72 	beq.w	1568e <d_name+0x3a>
   159aa:	f1b8 0f00 	cmp.w	r8, #0
   159ae:	d004      	beq.n	159ba <d_name+0x366>
   159b0:	9b03      	ldr	r3, [sp, #12]
   159b2:	f8c8 3004 	str.w	r3, [r8, #4]
   159b6:	f8cd 800c 	str.w	r8, [sp, #12]
   159ba:	7813      	ldrb	r3, [r2, #0]
   159bc:	2b45      	cmp	r3, #69	; 0x45
   159be:	f47f ae66 	bne.w	1568e <d_name+0x3a>
   159c2:	3201      	adds	r2, #1
   159c4:	60ea      	str	r2, [r5, #12]
   159c6:	9a03      	ldr	r2, [sp, #12]
   159c8:	e669      	b.n	1569e <d_name+0x4a>
   159ca:	bf00      	nop

000159cc <d_type>:
   159cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159d0:	68c2      	ldr	r2, [r0, #12]
   159d2:	7813      	ldrb	r3, [r2, #0]
   159d4:	2b72      	cmp	r3, #114	; 0x72
   159d6:	b083      	sub	sp, #12
   159d8:	4604      	mov	r4, r0
   159da:	d058      	beq.n	15a8e <d_type+0xc2>
   159dc:	2b56      	cmp	r3, #86	; 0x56
   159de:	d056      	beq.n	15a8e <d_type+0xc2>
   159e0:	2b4b      	cmp	r3, #75	; 0x4b
   159e2:	d054      	beq.n	15a8e <d_type+0xc2>
   159e4:	2b44      	cmp	r3, #68	; 0x44
   159e6:	f000 809f 	beq.w	15b28 <d_type+0x15c>
   159ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   159ee:	294a      	cmp	r1, #74	; 0x4a
   159f0:	f200 808a 	bhi.w	15b08 <d_type+0x13c>
   159f4:	e8df f011 	tbh	[pc, r1, lsl #1]
   159f8:	012a012a 	.word	0x012a012a
   159fc:	012a012a 	.word	0x012a012a
   15a00:	012a012a 	.word	0x012a012a
   15a04:	012a012a 	.word	0x012a012a
   15a08:	012a012a 	.word	0x012a012a
   15a0c:	00880088 	.word	0x00880088
   15a10:	00880088 	.word	0x00880088
   15a14:	00880088 	.word	0x00880088
   15a18:	020b0088 	.word	0x020b0088
   15a1c:	01520088 	.word	0x01520088
   15a20:	00880088 	.word	0x00880088
   15a24:	0160014c 	.word	0x0160014c
   15a28:	00880088 	.word	0x00880088
   15a2c:	00880088 	.word	0x00880088
   15a30:	016e0088 	.word	0x016e0088
   15a34:	0186012a 	.word	0x0186012a
   15a38:	008801c3 	.word	0x008801c3
   15a3c:	01a20194 	.word	0x01a20194
   15a40:	01f301d1 	.word	0x01f301d1
   15a44:	00880088 	.word	0x00880088
   15a48:	00880088 	.word	0x00880088
   15a4c:	0088012a 	.word	0x0088012a
   15a50:	00880088 	.word	0x00880088
   15a54:	00880088 	.word	0x00880088
   15a58:	010c0088 	.word	0x010c0088
   15a5c:	010c010c 	.word	0x010c010c
   15a60:	010c010c 	.word	0x010c010c
   15a64:	010c010c 	.word	0x010c010c
   15a68:	010c010c 	.word	0x010c010c
   15a6c:	0088010c 	.word	0x0088010c
   15a70:	010c010c 	.word	0x010c010c
   15a74:	010c010c 	.word	0x010c010c
   15a78:	00880088 	.word	0x00880088
   15a7c:	010c0088 	.word	0x010c0088
   15a80:	013e010c 	.word	0x013e010c
   15a84:	010c010c 	.word	0x010c010c
   15a88:	010c010c 	.word	0x010c010c
   15a8c:	010c      	.short	0x010c
   15a8e:	2200      	movs	r2, #0
   15a90:	a901      	add	r1, sp, #4
   15a92:	4620      	mov	r0, r4
   15a94:	f7fe fd56 	bl	14544 <d_cv_qualifiers>
   15a98:	4605      	mov	r5, r0
   15a9a:	2800      	cmp	r0, #0
   15a9c:	d034      	beq.n	15b08 <d_type+0x13c>
   15a9e:	68e3      	ldr	r3, [r4, #12]
   15aa0:	781b      	ldrb	r3, [r3, #0]
   15aa2:	2b46      	cmp	r3, #70	; 0x46
   15aa4:	4620      	mov	r0, r4
   15aa6:	d034      	beq.n	15b12 <d_type+0x146>
   15aa8:	f7ff ff90 	bl	159cc <d_type>
   15aac:	6028      	str	r0, [r5, #0]
   15aae:	b358      	cbz	r0, 15b08 <d_type+0x13c>
   15ab0:	7803      	ldrb	r3, [r0, #0]
   15ab2:	3b1f      	subs	r3, #31
   15ab4:	2b01      	cmp	r3, #1
   15ab6:	d930      	bls.n	15b1a <d_type+0x14e>
   15ab8:	9a01      	ldr	r2, [sp, #4]
   15aba:	b32a      	cbz	r2, 15b08 <d_type+0x13c>
   15abc:	6a23      	ldr	r3, [r4, #32]
   15abe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15ac0:	428b      	cmp	r3, r1
   15ac2:	da21      	bge.n	15b08 <d_type+0x13c>
   15ac4:	69e0      	ldr	r0, [r4, #28]
   15ac6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   15aca:	9d01      	ldr	r5, [sp, #4]
   15acc:	1c59      	adds	r1, r3, #1
   15ace:	4628      	mov	r0, r5
   15ad0:	6221      	str	r1, [r4, #32]
   15ad2:	b003      	add	sp, #12
   15ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15ad8:	2301      	movs	r3, #1
   15ada:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15adc:	6343      	str	r3, [r0, #52]	; 0x34
   15ade:	f7ff fb51 	bl	15184 <d_expression_1>
   15ae2:	6365      	str	r5, [r4, #52]	; 0x34
   15ae4:	4602      	mov	r2, r0
   15ae6:	2300      	movs	r3, #0
   15ae8:	2142      	movs	r1, #66	; 0x42
   15aea:	4620      	mov	r0, r4
   15aec:	f7fe fcde 	bl	144ac <d_make_comp>
   15af0:	4605      	mov	r5, r0
   15af2:	9001      	str	r0, [sp, #4]
   15af4:	b140      	cbz	r0, 15b08 <d_type+0x13c>
   15af6:	68e3      	ldr	r3, [r4, #12]
   15af8:	781a      	ldrb	r2, [r3, #0]
   15afa:	b12a      	cbz	r2, 15b08 <d_type+0x13c>
   15afc:	1c5a      	adds	r2, r3, #1
   15afe:	60e2      	str	r2, [r4, #12]
   15b00:	781b      	ldrb	r3, [r3, #0]
   15b02:	2b45      	cmp	r3, #69	; 0x45
   15b04:	f000 80aa 	beq.w	15c5c <d_type+0x290>
   15b08:	2500      	movs	r5, #0
   15b0a:	4628      	mov	r0, r5
   15b0c:	b003      	add	sp, #12
   15b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15b12:	f000 fd53 	bl	165bc <d_function_type>
   15b16:	6028      	str	r0, [r5, #0]
   15b18:	e7c9      	b.n	15aae <d_type+0xe2>
   15b1a:	9a01      	ldr	r2, [sp, #4]
   15b1c:	6843      	ldr	r3, [r0, #4]
   15b1e:	6042      	str	r2, [r0, #4]
   15b20:	682a      	ldr	r2, [r5, #0]
   15b22:	9201      	str	r2, [sp, #4]
   15b24:	602b      	str	r3, [r5, #0]
   15b26:	e7c7      	b.n	15ab8 <d_type+0xec>
   15b28:	7853      	ldrb	r3, [r2, #1]
   15b2a:	2b78      	cmp	r3, #120	; 0x78
   15b2c:	d0af      	beq.n	15a8e <d_type+0xc2>
   15b2e:	1c53      	adds	r3, r2, #1
   15b30:	60c3      	str	r3, [r0, #12]
   15b32:	7853      	ldrb	r3, [r2, #1]
   15b34:	2b00      	cmp	r3, #0
   15b36:	d0e7      	beq.n	15b08 <d_type+0x13c>
   15b38:	1c93      	adds	r3, r2, #2
   15b3a:	60c3      	str	r3, [r0, #12]
   15b3c:	7853      	ldrb	r3, [r2, #1]
   15b3e:	3b46      	subs	r3, #70	; 0x46
   15b40:	2b30      	cmp	r3, #48	; 0x30
   15b42:	d8e1      	bhi.n	15b08 <d_type+0x13c>
   15b44:	a101      	add	r1, pc, #4	; (adr r1, 15b4c <d_type+0x180>)
   15b46:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15b4a:	bf00      	nop
   15b4c:	00016037 	.word	0x00016037
   15b50:	00015b09 	.word	0x00015b09
   15b54:	00015b09 	.word	0x00015b09
   15b58:	00015b09 	.word	0x00015b09
   15b5c:	00015b09 	.word	0x00015b09
   15b60:	00015b09 	.word	0x00015b09
   15b64:	00015b09 	.word	0x00015b09
   15b68:	00015b09 	.word	0x00015b09
   15b6c:	00015b09 	.word	0x00015b09
   15b70:	00015b09 	.word	0x00015b09
   15b74:	00015b09 	.word	0x00015b09
   15b78:	00015b09 	.word	0x00015b09
   15b7c:	00015b09 	.word	0x00015b09
   15b80:	00015b09 	.word	0x00015b09
   15b84:	00015ad9 	.word	0x00015ad9
   15b88:	00015b09 	.word	0x00015b09
   15b8c:	00015b09 	.word	0x00015b09
   15b90:	00015b09 	.word	0x00015b09
   15b94:	00015b09 	.word	0x00015b09
   15b98:	00015b09 	.word	0x00015b09
   15b9c:	00015b09 	.word	0x00015b09
   15ba0:	00015b09 	.word	0x00015b09
   15ba4:	00015b09 	.word	0x00015b09
   15ba8:	00015b09 	.word	0x00015b09
   15bac:	00015b09 	.word	0x00015b09
   15bb0:	00015b09 	.word	0x00015b09
   15bb4:	00015b09 	.word	0x00015b09
   15bb8:	0001600b 	.word	0x0001600b
   15bbc:	00015b09 	.word	0x00015b09
   15bc0:	00015fdf 	.word	0x00015fdf
   15bc4:	00015fbf 	.word	0x00015fbf
   15bc8:	00015f95 	.word	0x00015f95
   15bcc:	00015f67 	.word	0x00015f67
   15bd0:	00015b09 	.word	0x00015b09
   15bd4:	00015f39 	.word	0x00015f39
   15bd8:	00015f15 	.word	0x00015f15
   15bdc:	00015b09 	.word	0x00015b09
   15be0:	00015b09 	.word	0x00015b09
   15be4:	00015b09 	.word	0x00015b09
   15be8:	00015b09 	.word	0x00015b09
   15bec:	00015edb 	.word	0x00015edb
   15bf0:	00015b09 	.word	0x00015b09
   15bf4:	00015ec5 	.word	0x00015ec5
   15bf8:	00015b09 	.word	0x00015b09
   15bfc:	00015b09 	.word	0x00015b09
   15c00:	00015e97 	.word	0x00015e97
   15c04:	00015ad9 	.word	0x00015ad9
   15c08:	00015b09 	.word	0x00015b09
   15c0c:	00015e61 	.word	0x00015e61
   15c10:	6960      	ldr	r0, [r4, #20]
   15c12:	69a5      	ldr	r5, [r4, #24]
   15c14:	49bc      	ldr	r1, [pc, #752]	; (15f08 <d_type+0x53c>)
   15c16:	3b61      	subs	r3, #97	; 0x61
   15c18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15c1c:	42a8      	cmp	r0, r5
   15c1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   15c22:	f280 823a 	bge.w	1609a <d_type+0x6ce>
   15c26:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15c2a:	6926      	ldr	r6, [r4, #16]
   15c2c:	0089      	lsls	r1, r1, #2
   15c2e:	3001      	adds	r0, #1
   15c30:	1875      	adds	r5, r6, r1
   15c32:	6160      	str	r0, [r4, #20]
   15c34:	f000 8231 	beq.w	1609a <d_type+0x6ce>
   15c38:	2027      	movs	r0, #39	; 0x27
   15c3a:	5470      	strb	r0, [r6, r1]
   15c3c:	606b      	str	r3, [r5, #4]
   15c3e:	6859      	ldr	r1, [r3, #4]
   15c40:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15c42:	3201      	adds	r2, #1
   15c44:	440b      	add	r3, r1
   15c46:	60e2      	str	r2, [r4, #12]
   15c48:	6323      	str	r3, [r4, #48]	; 0x30
   15c4a:	e75e      	b.n	15b0a <d_type+0x13e>
   15c4c:	4620      	mov	r0, r4
   15c4e:	f7ff fd01 	bl	15654 <d_name>
   15c52:	4605      	mov	r5, r0
   15c54:	9001      	str	r0, [sp, #4]
   15c56:	2d00      	cmp	r5, #0
   15c58:	f43f af56 	beq.w	15b08 <d_type+0x13c>
   15c5c:	6a23      	ldr	r3, [r4, #32]
   15c5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15c60:	4293      	cmp	r3, r2
   15c62:	f6bf af51 	bge.w	15b08 <d_type+0x13c>
   15c66:	69e1      	ldr	r1, [r4, #28]
   15c68:	1c5a      	adds	r2, r3, #1
   15c6a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15c6e:	9d01      	ldr	r5, [sp, #4]
   15c70:	6222      	str	r2, [r4, #32]
   15c72:	e74a      	b.n	15b0a <d_type+0x13e>
   15c74:	3201      	adds	r2, #1
   15c76:	60e2      	str	r2, [r4, #12]
   15c78:	4620      	mov	r0, r4
   15c7a:	f7fe fde9 	bl	14850 <d_source_name>
   15c7e:	2300      	movs	r3, #0
   15c80:	4602      	mov	r2, r0
   15c82:	2128      	movs	r1, #40	; 0x28
   15c84:	4620      	mov	r0, r4
   15c86:	f7fe fc11 	bl	144ac <d_make_comp>
   15c8a:	4605      	mov	r5, r0
   15c8c:	9001      	str	r0, [sp, #4]
   15c8e:	e7e2      	b.n	15c56 <d_type+0x28a>
   15c90:	4620      	mov	r0, r4
   15c92:	f000 fc93 	bl	165bc <d_function_type>
   15c96:	4605      	mov	r5, r0
   15c98:	9001      	str	r0, [sp, #4]
   15c9a:	e7dc      	b.n	15c56 <d_type+0x28a>
   15c9c:	3201      	adds	r2, #1
   15c9e:	60e2      	str	r2, [r4, #12]
   15ca0:	4620      	mov	r0, r4
   15ca2:	f7ff fe93 	bl	159cc <d_type>
   15ca6:	2300      	movs	r3, #0
   15ca8:	4602      	mov	r2, r0
   15caa:	2125      	movs	r1, #37	; 0x25
   15cac:	4620      	mov	r0, r4
   15cae:	f7fe fbfd 	bl	144ac <d_make_comp>
   15cb2:	4605      	mov	r5, r0
   15cb4:	9001      	str	r0, [sp, #4]
   15cb6:	e7ce      	b.n	15c56 <d_type+0x28a>
   15cb8:	3201      	adds	r2, #1
   15cba:	60e2      	str	r2, [r4, #12]
   15cbc:	4620      	mov	r0, r4
   15cbe:	f7ff fe85 	bl	159cc <d_type>
   15cc2:	2300      	movs	r3, #0
   15cc4:	4602      	mov	r2, r0
   15cc6:	2126      	movs	r1, #38	; 0x26
   15cc8:	4620      	mov	r0, r4
   15cca:	f7fe fbef 	bl	144ac <d_make_comp>
   15cce:	4605      	mov	r5, r0
   15cd0:	9001      	str	r0, [sp, #4]
   15cd2:	e7c0      	b.n	15c56 <d_type+0x28a>
   15cd4:	3201      	adds	r2, #1
   15cd6:	60e2      	str	r2, [r4, #12]
   15cd8:	4620      	mov	r0, r4
   15cda:	f7ff fe77 	bl	159cc <d_type>
   15cde:	4605      	mov	r5, r0
   15ce0:	2800      	cmp	r0, #0
   15ce2:	f000 80bb 	beq.w	15e5c <d_type+0x490>
   15ce6:	4620      	mov	r0, r4
   15ce8:	f7ff fe70 	bl	159cc <d_type>
   15cec:	2800      	cmp	r0, #0
   15cee:	f000 80b5 	beq.w	15e5c <d_type+0x490>
   15cf2:	4603      	mov	r3, r0
   15cf4:	462a      	mov	r2, r5
   15cf6:	212b      	movs	r1, #43	; 0x2b
   15cf8:	4620      	mov	r0, r4
   15cfa:	f7fe fbd7 	bl	144ac <d_make_comp>
   15cfe:	4605      	mov	r5, r0
   15d00:	9501      	str	r5, [sp, #4]
   15d02:	e7a8      	b.n	15c56 <d_type+0x28a>
   15d04:	3201      	adds	r2, #1
   15d06:	60e2      	str	r2, [r4, #12]
   15d08:	4620      	mov	r0, r4
   15d0a:	f7ff fe5f 	bl	159cc <d_type>
   15d0e:	2300      	movs	r3, #0
   15d10:	4602      	mov	r2, r0
   15d12:	2124      	movs	r1, #36	; 0x24
   15d14:	4620      	mov	r0, r4
   15d16:	f7fe fbc9 	bl	144ac <d_make_comp>
   15d1a:	4605      	mov	r5, r0
   15d1c:	9001      	str	r0, [sp, #4]
   15d1e:	e79a      	b.n	15c56 <d_type+0x28a>
   15d20:	3201      	adds	r2, #1
   15d22:	60e2      	str	r2, [r4, #12]
   15d24:	4620      	mov	r0, r4
   15d26:	f7ff fe51 	bl	159cc <d_type>
   15d2a:	2300      	movs	r3, #0
   15d2c:	4602      	mov	r2, r0
   15d2e:	2123      	movs	r1, #35	; 0x23
   15d30:	4620      	mov	r0, r4
   15d32:	f7fe fbbb 	bl	144ac <d_make_comp>
   15d36:	4605      	mov	r5, r0
   15d38:	9001      	str	r0, [sp, #4]
   15d3a:	e78c      	b.n	15c56 <d_type+0x28a>
   15d3c:	7853      	ldrb	r3, [r2, #1]
   15d3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15d42:	2a09      	cmp	r2, #9
   15d44:	d905      	bls.n	15d52 <d_type+0x386>
   15d46:	2b5f      	cmp	r3, #95	; 0x5f
   15d48:	d003      	beq.n	15d52 <d_type+0x386>
   15d4a:	3b41      	subs	r3, #65	; 0x41
   15d4c:	2b19      	cmp	r3, #25
   15d4e:	f200 81c3 	bhi.w	160d8 <d_type+0x70c>
   15d52:	2100      	movs	r1, #0
   15d54:	4620      	mov	r0, r4
   15d56:	f7fe fdf3 	bl	14940 <d_substitution>
   15d5a:	68e3      	ldr	r3, [r4, #12]
   15d5c:	9001      	str	r0, [sp, #4]
   15d5e:	781b      	ldrb	r3, [r3, #0]
   15d60:	2b49      	cmp	r3, #73	; 0x49
   15d62:	4605      	mov	r5, r0
   15d64:	f47f aed1 	bne.w	15b0a <d_type+0x13e>
   15d68:	4620      	mov	r0, r4
   15d6a:	f7ff fc69 	bl	15640 <d_template_args>
   15d6e:	462a      	mov	r2, r5
   15d70:	4603      	mov	r3, r0
   15d72:	2104      	movs	r1, #4
   15d74:	4620      	mov	r0, r4
   15d76:	f7fe fb99 	bl	144ac <d_make_comp>
   15d7a:	4605      	mov	r5, r0
   15d7c:	e7c0      	b.n	15d00 <d_type+0x334>
   15d7e:	3201      	adds	r2, #1
   15d80:	60e2      	str	r2, [r4, #12]
   15d82:	4620      	mov	r0, r4
   15d84:	f7ff fe22 	bl	159cc <d_type>
   15d88:	2300      	movs	r3, #0
   15d8a:	4602      	mov	r2, r0
   15d8c:	2122      	movs	r1, #34	; 0x22
   15d8e:	4620      	mov	r0, r4
   15d90:	f7fe fb8c 	bl	144ac <d_make_comp>
   15d94:	4605      	mov	r5, r0
   15d96:	9001      	str	r0, [sp, #4]
   15d98:	e75d      	b.n	15c56 <d_type+0x28a>
   15d9a:	4620      	mov	r0, r4
   15d9c:	f7fe fd36 	bl	1480c <d_template_param>
   15da0:	68e6      	ldr	r6, [r4, #12]
   15da2:	9001      	str	r0, [sp, #4]
   15da4:	7833      	ldrb	r3, [r6, #0]
   15da6:	2b49      	cmp	r3, #73	; 0x49
   15da8:	4605      	mov	r5, r0
   15daa:	f47f af54 	bne.w	15c56 <d_type+0x28a>
   15dae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15db0:	2b00      	cmp	r3, #0
   15db2:	f040 81a9 	bne.w	16108 <d_type+0x73c>
   15db6:	2800      	cmp	r0, #0
   15db8:	f43f aea6 	beq.w	15b08 <d_type+0x13c>
   15dbc:	6a23      	ldr	r3, [r4, #32]
   15dbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15dc0:	4293      	cmp	r3, r2
   15dc2:	f6bf aea1 	bge.w	15b08 <d_type+0x13c>
   15dc6:	69e1      	ldr	r1, [r4, #28]
   15dc8:	1c5a      	adds	r2, r3, #1
   15dca:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15dce:	6222      	str	r2, [r4, #32]
   15dd0:	4620      	mov	r0, r4
   15dd2:	9d01      	ldr	r5, [sp, #4]
   15dd4:	f7ff fc34 	bl	15640 <d_template_args>
   15dd8:	462a      	mov	r2, r5
   15dda:	4603      	mov	r3, r0
   15ddc:	e7c9      	b.n	15d72 <d_type+0x3a6>
   15dde:	3201      	adds	r2, #1
   15de0:	60e2      	str	r2, [r4, #12]
   15de2:	4620      	mov	r0, r4
   15de4:	f7fe fd34 	bl	14850 <d_source_name>
   15de8:	68e3      	ldr	r3, [r4, #12]
   15dea:	9001      	str	r0, [sp, #4]
   15dec:	781b      	ldrb	r3, [r3, #0]
   15dee:	2b49      	cmp	r3, #73	; 0x49
   15df0:	4605      	mov	r5, r0
   15df2:	f000 817e 	beq.w	160f2 <d_type+0x726>
   15df6:	4620      	mov	r0, r4
   15df8:	f7ff fde8 	bl	159cc <d_type>
   15dfc:	9b01      	ldr	r3, [sp, #4]
   15dfe:	4602      	mov	r2, r0
   15e00:	2121      	movs	r1, #33	; 0x21
   15e02:	4620      	mov	r0, r4
   15e04:	f7fe fb52 	bl	144ac <d_make_comp>
   15e08:	4605      	mov	r5, r0
   15e0a:	9001      	str	r0, [sp, #4]
   15e0c:	e723      	b.n	15c56 <d_type+0x28a>
   15e0e:	1c51      	adds	r1, r2, #1
   15e10:	60e1      	str	r1, [r4, #12]
   15e12:	7853      	ldrb	r3, [r2, #1]
   15e14:	2b5f      	cmp	r3, #95	; 0x5f
   15e16:	f000 8144 	beq.w	160a2 <d_type+0x6d6>
   15e1a:	3b30      	subs	r3, #48	; 0x30
   15e1c:	2b09      	cmp	r3, #9
   15e1e:	f200 814e 	bhi.w	160be <d_type+0x6f2>
   15e22:	460b      	mov	r3, r1
   15e24:	3301      	adds	r3, #1
   15e26:	60e3      	str	r3, [r4, #12]
   15e28:	781a      	ldrb	r2, [r3, #0]
   15e2a:	3a30      	subs	r2, #48	; 0x30
   15e2c:	2a09      	cmp	r2, #9
   15e2e:	d9f9      	bls.n	15e24 <d_type+0x458>
   15e30:	6962      	ldr	r2, [r4, #20]
   15e32:	69a0      	ldr	r0, [r4, #24]
   15e34:	4282      	cmp	r2, r0
   15e36:	da11      	bge.n	15e5c <d_type+0x490>
   15e38:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15e3c:	6926      	ldr	r6, [r4, #16]
   15e3e:	0080      	lsls	r0, r0, #2
   15e40:	3201      	adds	r2, #1
   15e42:	1835      	adds	r5, r6, r0
   15e44:	6162      	str	r2, [r4, #20]
   15e46:	d009      	beq.n	15e5c <d_type+0x490>
   15e48:	1a5a      	subs	r2, r3, r1
   15e4a:	d007      	beq.n	15e5c <d_type+0x490>
   15e4c:	2700      	movs	r7, #0
   15e4e:	5437      	strb	r7, [r6, r0]
   15e50:	6069      	str	r1, [r5, #4]
   15e52:	60aa      	str	r2, [r5, #8]
   15e54:	781a      	ldrb	r2, [r3, #0]
   15e56:	2a5f      	cmp	r2, #95	; 0x5f
   15e58:	f000 8190 	beq.w	1617c <d_type+0x7b0>
   15e5c:	2500      	movs	r5, #0
   15e5e:	e74f      	b.n	15d00 <d_type+0x334>
   15e60:	7893      	ldrb	r3, [r2, #2]
   15e62:	2b5f      	cmp	r3, #95	; 0x5f
   15e64:	f000 8180 	beq.w	16168 <d_type+0x79c>
   15e68:	f7fe fc9c 	bl	147a4 <d_number_component>
   15e6c:	4605      	mov	r5, r0
   15e6e:	2d00      	cmp	r5, #0
   15e70:	f43f af46 	beq.w	15d00 <d_type+0x334>
   15e74:	68e3      	ldr	r3, [r4, #12]
   15e76:	781a      	ldrb	r2, [r3, #0]
   15e78:	2a5f      	cmp	r2, #95	; 0x5f
   15e7a:	d1ef      	bne.n	15e5c <d_type+0x490>
   15e7c:	3301      	adds	r3, #1
   15e7e:	60e3      	str	r3, [r4, #12]
   15e80:	4620      	mov	r0, r4
   15e82:	f7ff fda3 	bl	159cc <d_type>
   15e86:	462a      	mov	r2, r5
   15e88:	4603      	mov	r3, r0
   15e8a:	212d      	movs	r1, #45	; 0x2d
   15e8c:	4620      	mov	r0, r4
   15e8e:	f7fe fb0d 	bl	144ac <d_make_comp>
   15e92:	4605      	mov	r5, r0
   15e94:	e734      	b.n	15d00 <d_type+0x334>
   15e96:	6942      	ldr	r2, [r0, #20]
   15e98:	6983      	ldr	r3, [r0, #24]
   15e9a:	429a      	cmp	r2, r3
   15e9c:	f280 80fd 	bge.w	1609a <d_type+0x6ce>
   15ea0:	230c      	movs	r3, #12
   15ea2:	6901      	ldr	r1, [r0, #16]
   15ea4:	fb03 f302 	mul.w	r3, r3, r2
   15ea8:	18cd      	adds	r5, r1, r3
   15eaa:	f102 0201 	add.w	r2, r2, #1
   15eae:	6142      	str	r2, [r0, #20]
   15eb0:	f000 80f3 	beq.w	1609a <d_type+0x6ce>
   15eb4:	4a15      	ldr	r2, [pc, #84]	; (15f0c <d_type+0x540>)
   15eb6:	2027      	movs	r0, #39	; 0x27
   15eb8:	54c8      	strb	r0, [r1, r3]
   15eba:	606a      	str	r2, [r5, #4]
   15ebc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15ebe:	3308      	adds	r3, #8
   15ec0:	6323      	str	r3, [r4, #48]	; 0x30
   15ec2:	e622      	b.n	15b0a <d_type+0x13e>
   15ec4:	f7ff fd82 	bl	159cc <d_type>
   15ec8:	2300      	movs	r3, #0
   15eca:	4602      	mov	r2, r0
   15ecc:	214a      	movs	r1, #74	; 0x4a
   15ece:	4620      	mov	r0, r4
   15ed0:	f7fe faec 	bl	144ac <d_make_comp>
   15ed4:	4605      	mov	r5, r0
   15ed6:	9001      	str	r0, [sp, #4]
   15ed8:	e6bd      	b.n	15c56 <d_type+0x28a>
   15eda:	6942      	ldr	r2, [r0, #20]
   15edc:	6983      	ldr	r3, [r0, #24]
   15ede:	429a      	cmp	r2, r3
   15ee0:	f280 80db 	bge.w	1609a <d_type+0x6ce>
   15ee4:	230c      	movs	r3, #12
   15ee6:	6901      	ldr	r1, [r0, #16]
   15ee8:	fb03 f302 	mul.w	r3, r3, r2
   15eec:	18cd      	adds	r5, r1, r3
   15eee:	f102 0201 	add.w	r2, r2, #1
   15ef2:	6142      	str	r2, [r0, #20]
   15ef4:	f000 80d1 	beq.w	1609a <d_type+0x6ce>
   15ef8:	2027      	movs	r0, #39	; 0x27
   15efa:	4a05      	ldr	r2, [pc, #20]	; (15f10 <d_type+0x544>)
   15efc:	54c8      	strb	r0, [r1, r3]
   15efe:	606a      	str	r2, [r5, #4]
   15f00:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f02:	3311      	adds	r3, #17
   15f04:	6323      	str	r3, [r4, #48]	; 0x30
   15f06:	e600      	b.n	15b0a <d_type+0x13e>
   15f08:	00023c5c 	.word	0x00023c5c
   15f0c:	00023eb4 	.word	0x00023eb4
   15f10:	00023edc 	.word	0x00023edc
   15f14:	6942      	ldr	r2, [r0, #20]
   15f16:	6983      	ldr	r3, [r0, #24]
   15f18:	429a      	cmp	r2, r3
   15f1a:	f280 80be 	bge.w	1609a <d_type+0x6ce>
   15f1e:	230c      	movs	r3, #12
   15f20:	6901      	ldr	r1, [r0, #16]
   15f22:	fb03 f302 	mul.w	r3, r3, r2
   15f26:	18cd      	adds	r5, r1, r3
   15f28:	f102 0201 	add.w	r2, r2, #1
   15f2c:	6142      	str	r2, [r0, #20]
   15f2e:	f000 80b4 	beq.w	1609a <d_type+0x6ce>
   15f32:	2027      	movs	r0, #39	; 0x27
   15f34:	4a92      	ldr	r2, [pc, #584]	; (16180 <d_type+0x7b4>)
   15f36:	e7bf      	b.n	15eb8 <d_type+0x4ec>
   15f38:	6942      	ldr	r2, [r0, #20]
   15f3a:	6983      	ldr	r3, [r0, #24]
   15f3c:	429a      	cmp	r2, r3
   15f3e:	f280 80ac 	bge.w	1609a <d_type+0x6ce>
   15f42:	230c      	movs	r3, #12
   15f44:	6901      	ldr	r1, [r0, #16]
   15f46:	fb03 f302 	mul.w	r3, r3, r2
   15f4a:	18cd      	adds	r5, r1, r3
   15f4c:	f102 0201 	add.w	r2, r2, #1
   15f50:	6142      	str	r2, [r0, #20]
   15f52:	f000 80a2 	beq.w	1609a <d_type+0x6ce>
   15f56:	2027      	movs	r0, #39	; 0x27
   15f58:	4a8a      	ldr	r2, [pc, #552]	; (16184 <d_type+0x7b8>)
   15f5a:	54c8      	strb	r0, [r1, r3]
   15f5c:	606a      	str	r2, [r5, #4]
   15f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f60:	3304      	adds	r3, #4
   15f62:	6323      	str	r3, [r4, #48]	; 0x30
   15f64:	e5d1      	b.n	15b0a <d_type+0x13e>
   15f66:	6942      	ldr	r2, [r0, #20]
   15f68:	6983      	ldr	r3, [r0, #24]
   15f6a:	429a      	cmp	r2, r3
   15f6c:	f280 8095 	bge.w	1609a <d_type+0x6ce>
   15f70:	230c      	movs	r3, #12
   15f72:	6901      	ldr	r1, [r0, #16]
   15f74:	fb03 f302 	mul.w	r3, r3, r2
   15f78:	18cd      	adds	r5, r1, r3
   15f7a:	f102 0201 	add.w	r2, r2, #1
   15f7e:	6142      	str	r2, [r0, #20]
   15f80:	f000 808b 	beq.w	1609a <d_type+0x6ce>
   15f84:	4a80      	ldr	r2, [pc, #512]	; (16188 <d_type+0x7bc>)
   15f86:	2027      	movs	r0, #39	; 0x27
   15f88:	54c8      	strb	r0, [r1, r3]
   15f8a:	606a      	str	r2, [r5, #4]
   15f8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f8e:	3309      	adds	r3, #9
   15f90:	6323      	str	r3, [r4, #48]	; 0x30
   15f92:	e5ba      	b.n	15b0a <d_type+0x13e>
   15f94:	6942      	ldr	r2, [r0, #20]
   15f96:	6983      	ldr	r3, [r0, #24]
   15f98:	429a      	cmp	r2, r3
   15f9a:	da7e      	bge.n	1609a <d_type+0x6ce>
   15f9c:	230c      	movs	r3, #12
   15f9e:	6901      	ldr	r1, [r0, #16]
   15fa0:	fb03 f302 	mul.w	r3, r3, r2
   15fa4:	18cd      	adds	r5, r1, r3
   15fa6:	f102 0201 	add.w	r2, r2, #1
   15faa:	6142      	str	r2, [r0, #20]
   15fac:	d075      	beq.n	1609a <d_type+0x6ce>
   15fae:	2027      	movs	r0, #39	; 0x27
   15fb0:	4a76      	ldr	r2, [pc, #472]	; (1618c <d_type+0x7c0>)
   15fb2:	54c8      	strb	r0, [r1, r3]
   15fb4:	606a      	str	r2, [r5, #4]
   15fb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15fb8:	330a      	adds	r3, #10
   15fba:	6323      	str	r3, [r4, #48]	; 0x30
   15fbc:	e5a5      	b.n	15b0a <d_type+0x13e>
   15fbe:	6942      	ldr	r2, [r0, #20]
   15fc0:	6983      	ldr	r3, [r0, #24]
   15fc2:	429a      	cmp	r2, r3
   15fc4:	da69      	bge.n	1609a <d_type+0x6ce>
   15fc6:	230c      	movs	r3, #12
   15fc8:	6901      	ldr	r1, [r0, #16]
   15fca:	fb03 f302 	mul.w	r3, r3, r2
   15fce:	18cd      	adds	r5, r1, r3
   15fd0:	f102 0201 	add.w	r2, r2, #1
   15fd4:	6142      	str	r2, [r0, #20]
   15fd6:	d060      	beq.n	1609a <d_type+0x6ce>
   15fd8:	2027      	movs	r0, #39	; 0x27
   15fda:	4a6d      	ldr	r2, [pc, #436]	; (16190 <d_type+0x7c4>)
   15fdc:	e7d4      	b.n	15f88 <d_type+0x5bc>
   15fde:	6942      	ldr	r2, [r0, #20]
   15fe0:	6983      	ldr	r3, [r0, #24]
   15fe2:	429a      	cmp	r2, r3
   15fe4:	f6bf ad90 	bge.w	15b08 <d_type+0x13c>
   15fe8:	230c      	movs	r3, #12
   15fea:	6901      	ldr	r1, [r0, #16]
   15fec:	fb03 f302 	mul.w	r3, r3, r2
   15ff0:	18cd      	adds	r5, r1, r3
   15ff2:	f102 0201 	add.w	r2, r2, #1
   15ff6:	6142      	str	r2, [r0, #20]
   15ff8:	f43f ad87 	beq.w	15b0a <d_type+0x13e>
   15ffc:	2000      	movs	r0, #0
   15ffe:	54c8      	strb	r0, [r1, r3]
   16000:	4a64      	ldr	r2, [pc, #400]	; (16194 <d_type+0x7c8>)
   16002:	606a      	str	r2, [r5, #4]
   16004:	230e      	movs	r3, #14
   16006:	60ab      	str	r3, [r5, #8]
   16008:	e57f      	b.n	15b0a <d_type+0x13e>
   1600a:	6942      	ldr	r2, [r0, #20]
   1600c:	6983      	ldr	r3, [r0, #24]
   1600e:	429a      	cmp	r2, r3
   16010:	f6bf ad7a 	bge.w	15b08 <d_type+0x13c>
   16014:	230c      	movs	r3, #12
   16016:	6901      	ldr	r1, [r0, #16]
   16018:	fb03 f302 	mul.w	r3, r3, r2
   1601c:	18cd      	adds	r5, r1, r3
   1601e:	f102 0201 	add.w	r2, r2, #1
   16022:	6142      	str	r2, [r0, #20]
   16024:	f43f ad71 	beq.w	15b0a <d_type+0x13e>
   16028:	2000      	movs	r0, #0
   1602a:	54c8      	strb	r0, [r1, r3]
   1602c:	4a5a      	ldr	r2, [pc, #360]	; (16198 <d_type+0x7cc>)
   1602e:	606a      	str	r2, [r5, #4]
   16030:	2304      	movs	r3, #4
   16032:	60ab      	str	r3, [r5, #8]
   16034:	e569      	b.n	15b0a <d_type+0x13e>
   16036:	6943      	ldr	r3, [r0, #20]
   16038:	6981      	ldr	r1, [r0, #24]
   1603a:	428b      	cmp	r3, r1
   1603c:	da7a      	bge.n	16134 <d_type+0x768>
   1603e:	6900      	ldr	r0, [r0, #16]
   16040:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16044:	0089      	lsls	r1, r1, #2
   16046:	3301      	adds	r3, #1
   16048:	1845      	adds	r5, r0, r1
   1604a:	262c      	movs	r6, #44	; 0x2c
   1604c:	6163      	str	r3, [r4, #20]
   1604e:	9501      	str	r5, [sp, #4]
   16050:	5446      	strb	r6, [r0, r1]
   16052:	7893      	ldrb	r3, [r2, #2]
   16054:	3b30      	subs	r3, #48	; 0x30
   16056:	b2db      	uxtb	r3, r3
   16058:	2b09      	cmp	r3, #9
   1605a:	bf94      	ite	ls
   1605c:	2301      	movls	r3, #1
   1605e:	2300      	movhi	r3, #0
   16060:	812b      	strh	r3, [r5, #8]
   16062:	d97b      	bls.n	1615c <d_type+0x790>
   16064:	4620      	mov	r0, r4
   16066:	f7ff fcb1 	bl	159cc <d_type>
   1606a:	9b01      	ldr	r3, [sp, #4]
   1606c:	6068      	str	r0, [r5, #4]
   1606e:	685b      	ldr	r3, [r3, #4]
   16070:	2b00      	cmp	r3, #0
   16072:	f43f ad49 	beq.w	15b08 <d_type+0x13c>
   16076:	f104 000c 	add.w	r0, r4, #12
   1607a:	f7fe fb69 	bl	14750 <d_number.isra.0>
   1607e:	68e2      	ldr	r2, [r4, #12]
   16080:	7813      	ldrb	r3, [r2, #0]
   16082:	b113      	cbz	r3, 1608a <d_type+0x6be>
   16084:	1c53      	adds	r3, r2, #1
   16086:	60e3      	str	r3, [r4, #12]
   16088:	7813      	ldrb	r3, [r2, #0]
   1608a:	9d01      	ldr	r5, [sp, #4]
   1608c:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   16090:	fab3 f383 	clz	r3, r3
   16094:	095b      	lsrs	r3, r3, #5
   16096:	816b      	strh	r3, [r5, #10]
   16098:	e537      	b.n	15b0a <d_type+0x13e>
   1609a:	2300      	movs	r3, #0
   1609c:	9301      	str	r3, [sp, #4]
   1609e:	685b      	ldr	r3, [r3, #4]
   160a0:	deff      	udf	#255	; 0xff
   160a2:	2500      	movs	r5, #0
   160a4:	3101      	adds	r1, #1
   160a6:	60e1      	str	r1, [r4, #12]
   160a8:	4620      	mov	r0, r4
   160aa:	f7ff fc8f 	bl	159cc <d_type>
   160ae:	462a      	mov	r2, r5
   160b0:	4603      	mov	r3, r0
   160b2:	212a      	movs	r1, #42	; 0x2a
   160b4:	4620      	mov	r0, r4
   160b6:	f7fe f9f9 	bl	144ac <d_make_comp>
   160ba:	4605      	mov	r5, r0
   160bc:	e620      	b.n	15d00 <d_type+0x334>
   160be:	2301      	movs	r3, #1
   160c0:	6b65      	ldr	r5, [r4, #52]	; 0x34
   160c2:	6363      	str	r3, [r4, #52]	; 0x34
   160c4:	4620      	mov	r0, r4
   160c6:	f7ff f85d 	bl	15184 <d_expression_1>
   160ca:	6365      	str	r5, [r4, #52]	; 0x34
   160cc:	4605      	mov	r5, r0
   160ce:	2800      	cmp	r0, #0
   160d0:	f43f aec4 	beq.w	15e5c <d_type+0x490>
   160d4:	68e3      	ldr	r3, [r4, #12]
   160d6:	e6bd      	b.n	15e54 <d_type+0x488>
   160d8:	4620      	mov	r0, r4
   160da:	f7ff fabb 	bl	15654 <d_name>
   160de:	4605      	mov	r5, r0
   160e0:	9001      	str	r0, [sp, #4]
   160e2:	2800      	cmp	r0, #0
   160e4:	f43f ad10 	beq.w	15b08 <d_type+0x13c>
   160e8:	7803      	ldrb	r3, [r0, #0]
   160ea:	2b18      	cmp	r3, #24
   160ec:	f47f adb6 	bne.w	15c5c <d_type+0x290>
   160f0:	e50b      	b.n	15b0a <d_type+0x13e>
   160f2:	4620      	mov	r0, r4
   160f4:	f7ff faa4 	bl	15640 <d_template_args>
   160f8:	462a      	mov	r2, r5
   160fa:	4603      	mov	r3, r0
   160fc:	2104      	movs	r1, #4
   160fe:	4620      	mov	r0, r4
   16100:	f7fe f9d4 	bl	144ac <d_make_comp>
   16104:	9001      	str	r0, [sp, #4]
   16106:	e676      	b.n	15df6 <d_type+0x42a>
   16108:	4620      	mov	r0, r4
   1610a:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1610e:	f8d4 8020 	ldr.w	r8, [r4, #32]
   16112:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   16114:	6b25      	ldr	r5, [r4, #48]	; 0x30
   16116:	f7ff fa93 	bl	15640 <d_template_args>
   1611a:	68e2      	ldr	r2, [r4, #12]
   1611c:	7812      	ldrb	r2, [r2, #0]
   1611e:	2a49      	cmp	r2, #73	; 0x49
   16120:	d00b      	beq.n	1613a <d_type+0x76e>
   16122:	6325      	str	r5, [r4, #48]	; 0x30
   16124:	60e6      	str	r6, [r4, #12]
   16126:	f8c4 9014 	str.w	r9, [r4, #20]
   1612a:	f8c4 8020 	str.w	r8, [r4, #32]
   1612e:	62a7      	str	r7, [r4, #40]	; 0x28
   16130:	9d01      	ldr	r5, [sp, #4]
   16132:	e590      	b.n	15c56 <d_type+0x28a>
   16134:	2300      	movs	r3, #0
   16136:	701b      	strb	r3, [r3, #0]
   16138:	deff      	udf	#255	; 0xff
   1613a:	9b01      	ldr	r3, [sp, #4]
   1613c:	2b00      	cmp	r3, #0
   1613e:	f43f ace3 	beq.w	15b08 <d_type+0x13c>
   16142:	6a22      	ldr	r2, [r4, #32]
   16144:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16146:	428a      	cmp	r2, r1
   16148:	f6bf acde 	bge.w	15b08 <d_type+0x13c>
   1614c:	69e5      	ldr	r5, [r4, #28]
   1614e:	1c51      	adds	r1, r2, #1
   16150:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   16154:	9a01      	ldr	r2, [sp, #4]
   16156:	6221      	str	r1, [r4, #32]
   16158:	4603      	mov	r3, r0
   1615a:	e60a      	b.n	15d72 <d_type+0x3a6>
   1615c:	f104 000c 	add.w	r0, r4, #12
   16160:	f7fe faf6 	bl	14750 <d_number.isra.0>
   16164:	9d01      	ldr	r5, [sp, #4]
   16166:	e77d      	b.n	16064 <d_type+0x698>
   16168:	3203      	adds	r2, #3
   1616a:	2301      	movs	r3, #1
   1616c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   1616e:	60c2      	str	r2, [r0, #12]
   16170:	6343      	str	r3, [r0, #52]	; 0x34
   16172:	f7ff f807 	bl	15184 <d_expression_1>
   16176:	6366      	str	r6, [r4, #52]	; 0x34
   16178:	4605      	mov	r5, r0
   1617a:	e678      	b.n	15e6e <d_type+0x4a2>
   1617c:	4619      	mov	r1, r3
   1617e:	e791      	b.n	160a4 <d_type+0x6d8>
   16180:	00023ec8 	.word	0x00023ec8
   16184:	00023ea0 	.word	0x00023ea0
   16188:	00023e64 	.word	0x00023e64
   1618c:	00023e8c 	.word	0x00023e8c
   16190:	00023e78 	.word	0x00023e78
   16194:	00024388 	.word	0x00024388
   16198:	00024380 	.word	0x00024380

0001619c <d_operator_name>:
   1619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1619e:	68c3      	ldr	r3, [r0, #12]
   161a0:	781e      	ldrb	r6, [r3, #0]
   161a2:	4684      	mov	ip, r0
   161a4:	b326      	cbz	r6, 161f0 <d_operator_name+0x54>
   161a6:	1c5a      	adds	r2, r3, #1
   161a8:	60c2      	str	r2, [r0, #12]
   161aa:	785a      	ldrb	r2, [r3, #1]
   161ac:	781e      	ldrb	r6, [r3, #0]
   161ae:	2a00      	cmp	r2, #0
   161b0:	d058      	beq.n	16264 <d_operator_name+0xc8>
   161b2:	1c9a      	adds	r2, r3, #2
   161b4:	60c2      	str	r2, [r0, #12]
   161b6:	2e76      	cmp	r6, #118	; 0x76
   161b8:	4604      	mov	r4, r0
   161ba:	f893 e001 	ldrb.w	lr, [r3, #1]
   161be:	d043      	beq.n	16248 <d_operator_name+0xac>
   161c0:	2e63      	cmp	r6, #99	; 0x63
   161c2:	d116      	bne.n	161f2 <d_operator_name+0x56>
   161c4:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   161c8:	d113      	bne.n	161f2 <d_operator_name+0x56>
   161ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
   161cc:	6b85      	ldr	r5, [r0, #56]	; 0x38
   161ce:	fab3 f383 	clz	r3, r3
   161d2:	095b      	lsrs	r3, r3, #5
   161d4:	6383      	str	r3, [r0, #56]	; 0x38
   161d6:	f7ff fbf9 	bl	159cc <d_type>
   161da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   161dc:	4602      	mov	r2, r0
   161de:	2b00      	cmp	r3, #0
   161e0:	d052      	beq.n	16288 <d_operator_name+0xec>
   161e2:	2300      	movs	r3, #0
   161e4:	2134      	movs	r1, #52	; 0x34
   161e6:	4620      	mov	r0, r4
   161e8:	f7fe f960 	bl	144ac <d_make_comp>
   161ec:	63a5      	str	r5, [r4, #56]	; 0x38
   161ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161f0:	46b6      	mov	lr, r6
   161f2:	4c28      	ldr	r4, [pc, #160]	; (16294 <d_operator_name+0xf8>)
   161f4:	2043      	movs	r0, #67	; 0x43
   161f6:	2200      	movs	r2, #0
   161f8:	e004      	b.n	16204 <d_operator_name+0x68>
   161fa:	bf94      	ite	ls
   161fc:	1c5a      	addls	r2, r3, #1
   161fe:	4618      	movhi	r0, r3
   16200:	4282      	cmp	r2, r0
   16202:	d02d      	beq.n	16260 <d_operator_name+0xc4>
   16204:	1a83      	subs	r3, r0, r2
   16206:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1620a:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1620e:	0119      	lsls	r1, r3, #4
   16210:	1867      	adds	r7, r4, r1
   16212:	5861      	ldr	r1, [r4, r1]
   16214:	780d      	ldrb	r5, [r1, #0]
   16216:	42b5      	cmp	r5, r6
   16218:	d1ef      	bne.n	161fa <d_operator_name+0x5e>
   1621a:	7849      	ldrb	r1, [r1, #1]
   1621c:	4571      	cmp	r1, lr
   1621e:	d1ec      	bne.n	161fa <d_operator_name+0x5e>
   16220:	f8dc 3014 	ldr.w	r3, [ip, #20]
   16224:	f8dc 2018 	ldr.w	r2, [ip, #24]
   16228:	4293      	cmp	r3, r2
   1622a:	da19      	bge.n	16260 <d_operator_name+0xc4>
   1622c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16230:	f8dc 1010 	ldr.w	r1, [ip, #16]
   16234:	0092      	lsls	r2, r2, #2
   16236:	3301      	adds	r3, #1
   16238:	1888      	adds	r0, r1, r2
   1623a:	f8cc 3014 	str.w	r3, [ip, #20]
   1623e:	d013      	beq.n	16268 <d_operator_name+0xcc>
   16240:	2331      	movs	r3, #49	; 0x31
   16242:	548b      	strb	r3, [r1, r2]
   16244:	6047      	str	r7, [r0, #4]
   16246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16248:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   1624c:	b2eb      	uxtb	r3, r5
   1624e:	2b09      	cmp	r3, #9
   16250:	d8cf      	bhi.n	161f2 <d_operator_name+0x56>
   16252:	f7fe fafd 	bl	14850 <d_source_name>
   16256:	6963      	ldr	r3, [r4, #20]
   16258:	69a2      	ldr	r2, [r4, #24]
   1625a:	4293      	cmp	r3, r2
   1625c:	4601      	mov	r1, r0
   1625e:	db04      	blt.n	1626a <d_operator_name+0xce>
   16260:	2000      	movs	r0, #0
   16262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16264:	4696      	mov	lr, r2
   16266:	e7c4      	b.n	161f2 <d_operator_name+0x56>
   16268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1626a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1626e:	6926      	ldr	r6, [r4, #16]
   16270:	0092      	lsls	r2, r2, #2
   16272:	3301      	adds	r3, #1
   16274:	18b0      	adds	r0, r6, r2
   16276:	6163      	str	r3, [r4, #20]
   16278:	d0f2      	beq.n	16260 <d_operator_name+0xc4>
   1627a:	2900      	cmp	r1, #0
   1627c:	d0f0      	beq.n	16260 <d_operator_name+0xc4>
   1627e:	2332      	movs	r3, #50	; 0x32
   16280:	54b3      	strb	r3, [r6, r2]
   16282:	6045      	str	r5, [r0, #4]
   16284:	6081      	str	r1, [r0, #8]
   16286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16288:	2133      	movs	r1, #51	; 0x33
   1628a:	4620      	mov	r0, r4
   1628c:	f7fe f90e 	bl	144ac <d_make_comp>
   16290:	e7ac      	b.n	161ec <d_operator_name+0x50>
   16292:	bf00      	nop
   16294:	00023ef0 	.word	0x00023ef0

00016298 <d_parmlist>:
   16298:	b530      	push	{r4, r5, lr}
   1629a:	68c2      	ldr	r2, [r0, #12]
   1629c:	b083      	sub	sp, #12
   1629e:	2300      	movs	r3, #0
   162a0:	9301      	str	r3, [sp, #4]
   162a2:	7813      	ldrb	r3, [r2, #0]
   162a4:	b343      	cbz	r3, 162f8 <d_parmlist+0x60>
   162a6:	2b45      	cmp	r3, #69	; 0x45
   162a8:	d026      	beq.n	162f8 <d_parmlist+0x60>
   162aa:	2b2e      	cmp	r3, #46	; 0x2e
   162ac:	d024      	beq.n	162f8 <d_parmlist+0x60>
   162ae:	4604      	mov	r4, r0
   162b0:	ad01      	add	r5, sp, #4
   162b2:	e015      	b.n	162e0 <d_parmlist+0x48>
   162b4:	2b4f      	cmp	r3, #79	; 0x4f
   162b6:	d016      	beq.n	162e6 <d_parmlist+0x4e>
   162b8:	f7ff fb88 	bl	159cc <d_type>
   162bc:	2300      	movs	r3, #0
   162be:	4602      	mov	r2, r0
   162c0:	212e      	movs	r1, #46	; 0x2e
   162c2:	b1c8      	cbz	r0, 162f8 <d_parmlist+0x60>
   162c4:	4620      	mov	r0, r4
   162c6:	f7fe f8f1 	bl	144ac <d_make_comp>
   162ca:	6028      	str	r0, [r5, #0]
   162cc:	b1a0      	cbz	r0, 162f8 <d_parmlist+0x60>
   162ce:	68e2      	ldr	r2, [r4, #12]
   162d0:	7813      	ldrb	r3, [r2, #0]
   162d2:	f100 0508 	add.w	r5, r0, #8
   162d6:	b14b      	cbz	r3, 162ec <d_parmlist+0x54>
   162d8:	2b45      	cmp	r3, #69	; 0x45
   162da:	d007      	beq.n	162ec <d_parmlist+0x54>
   162dc:	2b2e      	cmp	r3, #46	; 0x2e
   162de:	d005      	beq.n	162ec <d_parmlist+0x54>
   162e0:	2b52      	cmp	r3, #82	; 0x52
   162e2:	4620      	mov	r0, r4
   162e4:	d1e6      	bne.n	162b4 <d_parmlist+0x1c>
   162e6:	7853      	ldrb	r3, [r2, #1]
   162e8:	2b45      	cmp	r3, #69	; 0x45
   162ea:	d1e5      	bne.n	162b8 <d_parmlist+0x20>
   162ec:	9801      	ldr	r0, [sp, #4]
   162ee:	b118      	cbz	r0, 162f8 <d_parmlist+0x60>
   162f0:	6883      	ldr	r3, [r0, #8]
   162f2:	b123      	cbz	r3, 162fe <d_parmlist+0x66>
   162f4:	b003      	add	sp, #12
   162f6:	bd30      	pop	{r4, r5, pc}
   162f8:	2000      	movs	r0, #0
   162fa:	b003      	add	sp, #12
   162fc:	bd30      	pop	{r4, r5, pc}
   162fe:	6842      	ldr	r2, [r0, #4]
   16300:	7811      	ldrb	r1, [r2, #0]
   16302:	2927      	cmp	r1, #39	; 0x27
   16304:	d1f6      	bne.n	162f4 <d_parmlist+0x5c>
   16306:	6852      	ldr	r2, [r2, #4]
   16308:	7c11      	ldrb	r1, [r2, #16]
   1630a:	2909      	cmp	r1, #9
   1630c:	d1f2      	bne.n	162f4 <d_parmlist+0x5c>
   1630e:	6851      	ldr	r1, [r2, #4]
   16310:	6b22      	ldr	r2, [r4, #48]	; 0x30
   16312:	1a52      	subs	r2, r2, r1
   16314:	6322      	str	r2, [r4, #48]	; 0x30
   16316:	6043      	str	r3, [r0, #4]
   16318:	e7ec      	b.n	162f4 <d_parmlist+0x5c>
   1631a:	bf00      	nop

0001631c <d_unqualified_name>:
   1631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1631e:	68c1      	ldr	r1, [r0, #12]
   16320:	780b      	ldrb	r3, [r1, #0]
   16322:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16326:	2a09      	cmp	r2, #9
   16328:	4604      	mov	r4, r0
   1632a:	d920      	bls.n	1636e <d_unqualified_name+0x52>
   1632c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   16330:	2a19      	cmp	r2, #25
   16332:	d925      	bls.n	16380 <d_unqualified_name+0x64>
   16334:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   16338:	2a01      	cmp	r2, #1
   1633a:	d92c      	bls.n	16396 <d_unqualified_name+0x7a>
   1633c:	2b4c      	cmp	r3, #76	; 0x4c
   1633e:	f000 8088 	beq.w	16452 <d_unqualified_name+0x136>
   16342:	2b55      	cmp	r3, #85	; 0x55
   16344:	d133      	bne.n	163ae <d_unqualified_name+0x92>
   16346:	784b      	ldrb	r3, [r1, #1]
   16348:	2b6c      	cmp	r3, #108	; 0x6c
   1634a:	d033      	beq.n	163b4 <d_unqualified_name+0x98>
   1634c:	2b74      	cmp	r3, #116	; 0x74
   1634e:	d12e      	bne.n	163ae <d_unqualified_name+0x92>
   16350:	1c4b      	adds	r3, r1, #1
   16352:	60c3      	str	r3, [r0, #12]
   16354:	784b      	ldrb	r3, [r1, #1]
   16356:	2b74      	cmp	r3, #116	; 0x74
   16358:	d05a      	beq.n	16410 <d_unqualified_name+0xf4>
   1635a:	2b42      	cmp	r3, #66	; 0x42
   1635c:	f04f 0500 	mov.w	r5, #0
   16360:	d10c      	bne.n	1637c <d_unqualified_name+0x60>
   16362:	4629      	mov	r1, r5
   16364:	4620      	mov	r0, r4
   16366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1636a:	f7fe bacd 	b.w	14908 <d_abi_tags>
   1636e:	f7fe fa6f 	bl	14850 <d_source_name>
   16372:	68e3      	ldr	r3, [r4, #12]
   16374:	781b      	ldrb	r3, [r3, #0]
   16376:	4605      	mov	r5, r0
   16378:	2b42      	cmp	r3, #66	; 0x42
   1637a:	d0f2      	beq.n	16362 <d_unqualified_name+0x46>
   1637c:	4628      	mov	r0, r5
   1637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16380:	f7ff ff0c 	bl	1619c <d_operator_name>
   16384:	4605      	mov	r5, r0
   16386:	b118      	cbz	r0, 16390 <d_unqualified_name+0x74>
   16388:	7803      	ldrb	r3, [r0, #0]
   1638a:	2b31      	cmp	r3, #49	; 0x31
   1638c:	f000 80b2 	beq.w	164f4 <d_unqualified_name+0x1d8>
   16390:	68e3      	ldr	r3, [r4, #12]
   16392:	781b      	ldrb	r3, [r3, #0]
   16394:	e7f0      	b.n	16378 <d_unqualified_name+0x5c>
   16396:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16398:	b125      	cbz	r5, 163a4 <d_unqualified_name+0x88>
   1639a:	782a      	ldrb	r2, [r5, #0]
   1639c:	2a00      	cmp	r2, #0
   1639e:	d06c      	beq.n	1647a <d_unqualified_name+0x15e>
   163a0:	2a18      	cmp	r2, #24
   163a2:	d06a      	beq.n	1647a <d_unqualified_name+0x15e>
   163a4:	2b43      	cmp	r3, #67	; 0x43
   163a6:	f000 80bf 	beq.w	16528 <d_unqualified_name+0x20c>
   163aa:	2b44      	cmp	r3, #68	; 0x44
   163ac:	d06f      	beq.n	1648e <d_unqualified_name+0x172>
   163ae:	2500      	movs	r5, #0
   163b0:	4628      	mov	r0, r5
   163b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   163b4:	1c4b      	adds	r3, r1, #1
   163b6:	60c3      	str	r3, [r0, #12]
   163b8:	784b      	ldrb	r3, [r1, #1]
   163ba:	2b6c      	cmp	r3, #108	; 0x6c
   163bc:	d1cd      	bne.n	1635a <d_unqualified_name+0x3e>
   163be:	3102      	adds	r1, #2
   163c0:	60c1      	str	r1, [r0, #12]
   163c2:	f7ff ff69 	bl	16298 <d_parmlist>
   163c6:	4606      	mov	r6, r0
   163c8:	b1f0      	cbz	r0, 16408 <d_unqualified_name+0xec>
   163ca:	68e2      	ldr	r2, [r4, #12]
   163cc:	7813      	ldrb	r3, [r2, #0]
   163ce:	2b45      	cmp	r3, #69	; 0x45
   163d0:	d1c3      	bne.n	1635a <d_unqualified_name+0x3e>
   163d2:	3201      	adds	r2, #1
   163d4:	60e2      	str	r2, [r4, #12]
   163d6:	4620      	mov	r0, r4
   163d8:	f7fe f9fc 	bl	147d4 <d_compact_number>
   163dc:	2800      	cmp	r0, #0
   163de:	db13      	blt.n	16408 <d_unqualified_name+0xec>
   163e0:	6963      	ldr	r3, [r4, #20]
   163e2:	69a2      	ldr	r2, [r4, #24]
   163e4:	4293      	cmp	r3, r2
   163e6:	da0f      	bge.n	16408 <d_unqualified_name+0xec>
   163e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   163ec:	6921      	ldr	r1, [r4, #16]
   163ee:	0092      	lsls	r2, r2, #2
   163f0:	3301      	adds	r3, #1
   163f2:	188d      	adds	r5, r1, r2
   163f4:	6163      	str	r3, [r4, #20]
   163f6:	d0cb      	beq.n	16390 <d_unqualified_name+0x74>
   163f8:	2345      	movs	r3, #69	; 0x45
   163fa:	548b      	strb	r3, [r1, r2]
   163fc:	606e      	str	r6, [r5, #4]
   163fe:	60a8      	str	r0, [r5, #8]
   16400:	6a23      	ldr	r3, [r4, #32]
   16402:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16404:	4293      	cmp	r3, r2
   16406:	db1c      	blt.n	16442 <d_unqualified_name+0x126>
   16408:	68e3      	ldr	r3, [r4, #12]
   1640a:	2500      	movs	r5, #0
   1640c:	781b      	ldrb	r3, [r3, #0]
   1640e:	e7b3      	b.n	16378 <d_unqualified_name+0x5c>
   16410:	3102      	adds	r1, #2
   16412:	60c1      	str	r1, [r0, #12]
   16414:	f7fe f9de 	bl	147d4 <d_compact_number>
   16418:	2800      	cmp	r0, #0
   1641a:	dbf5      	blt.n	16408 <d_unqualified_name+0xec>
   1641c:	6963      	ldr	r3, [r4, #20]
   1641e:	69a2      	ldr	r2, [r4, #24]
   16420:	4293      	cmp	r3, r2
   16422:	daf1      	bge.n	16408 <d_unqualified_name+0xec>
   16424:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16428:	6921      	ldr	r1, [r4, #16]
   1642a:	0092      	lsls	r2, r2, #2
   1642c:	3301      	adds	r3, #1
   1642e:	188d      	adds	r5, r1, r2
   16430:	6163      	str	r3, [r4, #20]
   16432:	d0ad      	beq.n	16390 <d_unqualified_name+0x74>
   16434:	2347      	movs	r3, #71	; 0x47
   16436:	548b      	strb	r3, [r1, r2]
   16438:	6068      	str	r0, [r5, #4]
   1643a:	6a23      	ldr	r3, [r4, #32]
   1643c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1643e:	4293      	cmp	r3, r2
   16440:	dae2      	bge.n	16408 <d_unqualified_name+0xec>
   16442:	69e1      	ldr	r1, [r4, #28]
   16444:	68e2      	ldr	r2, [r4, #12]
   16446:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1644a:	3301      	adds	r3, #1
   1644c:	6223      	str	r3, [r4, #32]
   1644e:	7813      	ldrb	r3, [r2, #0]
   16450:	e792      	b.n	16378 <d_unqualified_name+0x5c>
   16452:	3101      	adds	r1, #1
   16454:	60c1      	str	r1, [r0, #12]
   16456:	f7fe f9fb 	bl	14850 <d_source_name>
   1645a:	4605      	mov	r5, r0
   1645c:	2800      	cmp	r0, #0
   1645e:	d0a6      	beq.n	163ae <d_unqualified_name+0x92>
   16460:	68e2      	ldr	r2, [r4, #12]
   16462:	7813      	ldrb	r3, [r2, #0]
   16464:	2b5f      	cmp	r3, #95	; 0x5f
   16466:	d187      	bne.n	16378 <d_unqualified_name+0x5c>
   16468:	4620      	mov	r0, r4
   1646a:	3201      	adds	r2, #1
   1646c:	f840 2f0c 	str.w	r2, [r0, #12]!
   16470:	f7fe f96e 	bl	14750 <d_number.isra.0>
   16474:	2800      	cmp	r0, #0
   16476:	da8b      	bge.n	16390 <d_unqualified_name+0x74>
   16478:	e799      	b.n	163ae <d_unqualified_name+0x92>
   1647a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1647c:	68aa      	ldr	r2, [r5, #8]
   1647e:	4413      	add	r3, r2
   16480:	6323      	str	r3, [r4, #48]	; 0x30
   16482:	780b      	ldrb	r3, [r1, #0]
   16484:	2b43      	cmp	r3, #67	; 0x43
   16486:	d04f      	beq.n	16528 <d_unqualified_name+0x20c>
   16488:	2b44      	cmp	r3, #68	; 0x44
   1648a:	f47f af66 	bne.w	1635a <d_unqualified_name+0x3e>
   1648e:	784b      	ldrb	r3, [r1, #1]
   16490:	3b30      	subs	r3, #48	; 0x30
   16492:	2b05      	cmp	r3, #5
   16494:	d88b      	bhi.n	163ae <d_unqualified_name+0x92>
   16496:	a201      	add	r2, pc, #4	; (adr r2, 1649c <d_unqualified_name+0x180>)
   16498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1649c:	000164f1 	.word	0x000164f1
   164a0:	000164b5 	.word	0x000164b5
   164a4:	000164ed 	.word	0x000164ed
   164a8:	000163af 	.word	0x000163af
   164ac:	000164e9 	.word	0x000164e9
   164b0:	000164e5 	.word	0x000164e5
   164b4:	2702      	movs	r7, #2
   164b6:	6963      	ldr	r3, [r4, #20]
   164b8:	69a2      	ldr	r2, [r4, #24]
   164ba:	1c88      	adds	r0, r1, #2
   164bc:	4293      	cmp	r3, r2
   164be:	60e0      	str	r0, [r4, #12]
   164c0:	da56      	bge.n	16570 <d_unqualified_name+0x254>
   164c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   164c6:	6920      	ldr	r0, [r4, #16]
   164c8:	0092      	lsls	r2, r2, #2
   164ca:	3301      	adds	r3, #1
   164cc:	1886      	adds	r6, r0, r2
   164ce:	6163      	str	r3, [r4, #20]
   164d0:	d005      	beq.n	164de <d_unqualified_name+0x1c2>
   164d2:	2d00      	cmp	r5, #0
   164d4:	d04f      	beq.n	16576 <d_unqualified_name+0x25a>
   164d6:	2308      	movs	r3, #8
   164d8:	5483      	strb	r3, [r0, r2]
   164da:	7137      	strb	r7, [r6, #4]
   164dc:	60b5      	str	r5, [r6, #8]
   164de:	788b      	ldrb	r3, [r1, #2]
   164e0:	4635      	mov	r5, r6
   164e2:	e749      	b.n	16378 <d_unqualified_name+0x5c>
   164e4:	2705      	movs	r7, #5
   164e6:	e7e6      	b.n	164b6 <d_unqualified_name+0x19a>
   164e8:	2704      	movs	r7, #4
   164ea:	e7e4      	b.n	164b6 <d_unqualified_name+0x19a>
   164ec:	2703      	movs	r7, #3
   164ee:	e7e2      	b.n	164b6 <d_unqualified_name+0x19a>
   164f0:	2701      	movs	r7, #1
   164f2:	e7e0      	b.n	164b6 <d_unqualified_name+0x19a>
   164f4:	6842      	ldr	r2, [r0, #4]
   164f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   164f8:	6896      	ldr	r6, [r2, #8]
   164fa:	6810      	ldr	r0, [r2, #0]
   164fc:	491f      	ldr	r1, [pc, #124]	; (1657c <d_unqualified_name+0x260>)
   164fe:	3307      	adds	r3, #7
   16500:	4433      	add	r3, r6
   16502:	6323      	str	r3, [r4, #48]	; 0x30
   16504:	f008 fa90 	bl	1ea28 <strcmp>
   16508:	2800      	cmp	r0, #0
   1650a:	f47f af41 	bne.w	16390 <d_unqualified_name+0x74>
   1650e:	4620      	mov	r0, r4
   16510:	f7fe f99e 	bl	14850 <d_source_name>
   16514:	462a      	mov	r2, r5
   16516:	4603      	mov	r3, r0
   16518:	2136      	movs	r1, #54	; 0x36
   1651a:	4620      	mov	r0, r4
   1651c:	f7fd ffc6 	bl	144ac <d_make_comp>
   16520:	68e3      	ldr	r3, [r4, #12]
   16522:	4605      	mov	r5, r0
   16524:	781b      	ldrb	r3, [r3, #0]
   16526:	e727      	b.n	16378 <d_unqualified_name+0x5c>
   16528:	784b      	ldrb	r3, [r1, #1]
   1652a:	3b31      	subs	r3, #49	; 0x31
   1652c:	2b04      	cmp	r3, #4
   1652e:	f63f af3e 	bhi.w	163ae <d_unqualified_name+0x92>
   16532:	e8df f003 	tbb	[pc, r3]
   16536:	0315      	.short	0x0315
   16538:	191b      	.short	0x191b
   1653a:	17          	.byte	0x17
   1653b:	00          	.byte	0x00
   1653c:	2702      	movs	r7, #2
   1653e:	6963      	ldr	r3, [r4, #20]
   16540:	69a2      	ldr	r2, [r4, #24]
   16542:	1c88      	adds	r0, r1, #2
   16544:	4293      	cmp	r3, r2
   16546:	60e0      	str	r0, [r4, #12]
   16548:	da12      	bge.n	16570 <d_unqualified_name+0x254>
   1654a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1654e:	6920      	ldr	r0, [r4, #16]
   16550:	0092      	lsls	r2, r2, #2
   16552:	3301      	adds	r3, #1
   16554:	1886      	adds	r6, r0, r2
   16556:	6163      	str	r3, [r4, #20]
   16558:	d0c1      	beq.n	164de <d_unqualified_name+0x1c2>
   1655a:	b165      	cbz	r5, 16576 <d_unqualified_name+0x25a>
   1655c:	2307      	movs	r3, #7
   1655e:	e7bb      	b.n	164d8 <d_unqualified_name+0x1bc>
   16560:	2701      	movs	r7, #1
   16562:	e7ec      	b.n	1653e <d_unqualified_name+0x222>
   16564:	2705      	movs	r7, #5
   16566:	e7ea      	b.n	1653e <d_unqualified_name+0x222>
   16568:	2704      	movs	r7, #4
   1656a:	e7e8      	b.n	1653e <d_unqualified_name+0x222>
   1656c:	2703      	movs	r7, #3
   1656e:	e7e6      	b.n	1653e <d_unqualified_name+0x222>
   16570:	788b      	ldrb	r3, [r1, #2]
   16572:	2500      	movs	r5, #0
   16574:	e700      	b.n	16378 <d_unqualified_name+0x5c>
   16576:	788b      	ldrb	r3, [r1, #2]
   16578:	e6fe      	b.n	16378 <d_unqualified_name+0x5c>
   1657a:	bf00      	nop
   1657c:	00024398 	.word	0x00024398

00016580 <d_bare_function_type>:
   16580:	b570      	push	{r4, r5, r6, lr}
   16582:	68c3      	ldr	r3, [r0, #12]
   16584:	781a      	ldrb	r2, [r3, #0]
   16586:	2a4a      	cmp	r2, #74	; 0x4a
   16588:	4604      	mov	r4, r0
   1658a:	d00d      	beq.n	165a8 <d_bare_function_type+0x28>
   1658c:	b971      	cbnz	r1, 165ac <d_bare_function_type+0x2c>
   1658e:	460d      	mov	r5, r1
   16590:	4620      	mov	r0, r4
   16592:	f7ff fe81 	bl	16298 <d_parmlist>
   16596:	b178      	cbz	r0, 165b8 <d_bare_function_type+0x38>
   16598:	4603      	mov	r3, r0
   1659a:	462a      	mov	r2, r5
   1659c:	4620      	mov	r0, r4
   1659e:	2129      	movs	r1, #41	; 0x29
   165a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   165a4:	f7fd bf82 	b.w	144ac <d_make_comp>
   165a8:	3301      	adds	r3, #1
   165aa:	60c3      	str	r3, [r0, #12]
   165ac:	4620      	mov	r0, r4
   165ae:	f7ff fa0d 	bl	159cc <d_type>
   165b2:	4605      	mov	r5, r0
   165b4:	2800      	cmp	r0, #0
   165b6:	d1eb      	bne.n	16590 <d_bare_function_type+0x10>
   165b8:	2000      	movs	r0, #0
   165ba:	bd70      	pop	{r4, r5, r6, pc}

000165bc <d_function_type>:
   165bc:	68c3      	ldr	r3, [r0, #12]
   165be:	781a      	ldrb	r2, [r3, #0]
   165c0:	2a46      	cmp	r2, #70	; 0x46
   165c2:	d001      	beq.n	165c8 <d_function_type+0xc>
   165c4:	2000      	movs	r0, #0
   165c6:	4770      	bx	lr
   165c8:	b510      	push	{r4, lr}
   165ca:	1c5a      	adds	r2, r3, #1
   165cc:	60c2      	str	r2, [r0, #12]
   165ce:	785a      	ldrb	r2, [r3, #1]
   165d0:	2a59      	cmp	r2, #89	; 0x59
   165d2:	bf04      	itt	eq
   165d4:	3302      	addeq	r3, #2
   165d6:	60c3      	streq	r3, [r0, #12]
   165d8:	2101      	movs	r1, #1
   165da:	4604      	mov	r4, r0
   165dc:	f7ff ffd0 	bl	16580 <d_bare_function_type>
   165e0:	4601      	mov	r1, r0
   165e2:	4620      	mov	r0, r4
   165e4:	f7fe f814 	bl	14610 <d_ref_qualifier>
   165e8:	68e3      	ldr	r3, [r4, #12]
   165ea:	781a      	ldrb	r2, [r3, #0]
   165ec:	2a45      	cmp	r2, #69	; 0x45
   165ee:	d001      	beq.n	165f4 <d_function_type+0x38>
   165f0:	2000      	movs	r0, #0
   165f2:	bd10      	pop	{r4, pc}
   165f4:	3301      	adds	r3, #1
   165f6:	60e3      	str	r3, [r4, #12]
   165f8:	bd10      	pop	{r4, pc}
   165fa:	bf00      	nop

000165fc <d_encoding>:
   165fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16600:	68c3      	ldr	r3, [r0, #12]
   16602:	781a      	ldrb	r2, [r3, #0]
   16604:	2a47      	cmp	r2, #71	; 0x47
   16606:	4605      	mov	r5, r0
   16608:	d01f      	beq.n	1664a <d_encoding+0x4e>
   1660a:	2a54      	cmp	r2, #84	; 0x54
   1660c:	d01d      	beq.n	1664a <d_encoding+0x4e>
   1660e:	460e      	mov	r6, r1
   16610:	f7ff f820 	bl	15654 <d_name>
   16614:	4604      	mov	r4, r0
   16616:	b310      	cbz	r0, 1665e <d_encoding+0x62>
   16618:	b32e      	cbz	r6, 16666 <d_encoding+0x6a>
   1661a:	68ab      	ldr	r3, [r5, #8]
   1661c:	07db      	lsls	r3, r3, #31
   1661e:	d422      	bmi.n	16666 <d_encoding+0x6a>
   16620:	7823      	ldrb	r3, [r4, #0]
   16622:	f1a3 021c 	sub.w	r2, r3, #28
   16626:	2a04      	cmp	r2, #4
   16628:	d940      	bls.n	166ac <d_encoding+0xb0>
   1662a:	2b4c      	cmp	r3, #76	; 0x4c
   1662c:	d03e      	beq.n	166ac <d_encoding+0xb0>
   1662e:	2b02      	cmp	r3, #2
   16630:	d116      	bne.n	16660 <d_encoding+0x64>
   16632:	68a3      	ldr	r3, [r4, #8]
   16634:	781a      	ldrb	r2, [r3, #0]
   16636:	f1a2 011c 	sub.w	r1, r2, #28
   1663a:	2904      	cmp	r1, #4
   1663c:	f240 8283 	bls.w	16b46 <d_encoding+0x54a>
   16640:	2a4c      	cmp	r2, #76	; 0x4c
   16642:	f000 8280 	beq.w	16b46 <d_encoding+0x54a>
   16646:	60a3      	str	r3, [r4, #8]
   16648:	e00a      	b.n	16660 <d_encoding+0x64>
   1664a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1664c:	f101 0214 	add.w	r2, r1, #20
   16650:	632a      	str	r2, [r5, #48]	; 0x30
   16652:	781a      	ldrb	r2, [r3, #0]
   16654:	2a54      	cmp	r2, #84	; 0x54
   16656:	d02b      	beq.n	166b0 <d_encoding+0xb4>
   16658:	2a47      	cmp	r2, #71	; 0x47
   1665a:	f000 809f 	beq.w	1679c <d_encoding+0x1a0>
   1665e:	2400      	movs	r4, #0
   16660:	4620      	mov	r0, r4
   16662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16666:	68eb      	ldr	r3, [r5, #12]
   16668:	781b      	ldrb	r3, [r3, #0]
   1666a:	2b00      	cmp	r3, #0
   1666c:	d0f8      	beq.n	16660 <d_encoding+0x64>
   1666e:	2b45      	cmp	r3, #69	; 0x45
   16670:	d0f6      	beq.n	16660 <d_encoding+0x64>
   16672:	4621      	mov	r1, r4
   16674:	780a      	ldrb	r2, [r1, #0]
   16676:	2a20      	cmp	r2, #32
   16678:	f200 8113 	bhi.w	168a2 <d_encoding+0x2a6>
   1667c:	2a1c      	cmp	r2, #28
   1667e:	f080 8112 	bcs.w	168a6 <d_encoding+0x2aa>
   16682:	2a04      	cmp	r2, #4
   16684:	f040 8101 	bne.w	1688a <d_encoding+0x28e>
   16688:	684a      	ldr	r2, [r1, #4]
   1668a:	b16a      	cbz	r2, 166a8 <d_encoding+0xac>
   1668c:	7813      	ldrb	r3, [r2, #0]
   1668e:	2b08      	cmp	r3, #8
   16690:	f103 31ff 	add.w	r1, r3, #4294967295
   16694:	f200 80f6 	bhi.w	16884 <d_encoding+0x288>
   16698:	2b07      	cmp	r3, #7
   1669a:	f080 80f6 	bcs.w	1688a <d_encoding+0x28e>
   1669e:	2901      	cmp	r1, #1
   166a0:	d802      	bhi.n	166a8 <d_encoding+0xac>
   166a2:	6892      	ldr	r2, [r2, #8]
   166a4:	2a00      	cmp	r2, #0
   166a6:	d1f1      	bne.n	1668c <d_encoding+0x90>
   166a8:	2101      	movs	r1, #1
   166aa:	e0ef      	b.n	1688c <d_encoding+0x290>
   166ac:	6864      	ldr	r4, [r4, #4]
   166ae:	e7b7      	b.n	16620 <d_encoding+0x24>
   166b0:	1c5a      	adds	r2, r3, #1
   166b2:	60ea      	str	r2, [r5, #12]
   166b4:	785a      	ldrb	r2, [r3, #1]
   166b6:	2a00      	cmp	r2, #0
   166b8:	d0d1      	beq.n	1665e <d_encoding+0x62>
   166ba:	1c9a      	adds	r2, r3, #2
   166bc:	60ea      	str	r2, [r5, #12]
   166be:	785b      	ldrb	r3, [r3, #1]
   166c0:	3b43      	subs	r3, #67	; 0x43
   166c2:	2b33      	cmp	r3, #51	; 0x33
   166c4:	d8cb      	bhi.n	1665e <d_encoding+0x62>
   166c6:	a201      	add	r2, pc, #4	; (adr r2, 166cc <d_encoding+0xd0>)
   166c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   166cc:	00016b07 	.word	0x00016b07
   166d0:	0001665f 	.word	0x0001665f
   166d4:	0001665f 	.word	0x0001665f
   166d8:	00016af1 	.word	0x00016af1
   166dc:	0001665f 	.word	0x0001665f
   166e0:	00016adb 	.word	0x00016adb
   166e4:	00016ac5 	.word	0x00016ac5
   166e8:	00016aaf 	.word	0x00016aaf
   166ec:	0001665f 	.word	0x0001665f
   166f0:	0001665f 	.word	0x0001665f
   166f4:	0001665f 	.word	0x0001665f
   166f8:	0001665f 	.word	0x0001665f
   166fc:	0001665f 	.word	0x0001665f
   16700:	0001665f 	.word	0x0001665f
   16704:	0001665f 	.word	0x0001665f
   16708:	0001665f 	.word	0x0001665f
   1670c:	00016a99 	.word	0x00016a99
   16710:	00016a7f 	.word	0x00016a7f
   16714:	0001665f 	.word	0x0001665f
   16718:	00016a65 	.word	0x00016a65
   1671c:	00016a4f 	.word	0x00016a4f
   16720:	0001665f 	.word	0x0001665f
   16724:	0001665f 	.word	0x0001665f
   16728:	0001665f 	.word	0x0001665f
   1672c:	0001665f 	.word	0x0001665f
   16730:	0001665f 	.word	0x0001665f
   16734:	0001665f 	.word	0x0001665f
   16738:	0001665f 	.word	0x0001665f
   1673c:	0001665f 	.word	0x0001665f
   16740:	0001665f 	.word	0x0001665f
   16744:	0001665f 	.word	0x0001665f
   16748:	0001665f 	.word	0x0001665f
   1674c:	00016a1b 	.word	0x00016a1b
   16750:	0001665f 	.word	0x0001665f
   16754:	0001665f 	.word	0x0001665f
   16758:	0001665f 	.word	0x0001665f
   1675c:	0001665f 	.word	0x0001665f
   16760:	000169f5 	.word	0x000169f5
   16764:	0001665f 	.word	0x0001665f
   16768:	0001665f 	.word	0x0001665f
   1676c:	0001665f 	.word	0x0001665f
   16770:	0001665f 	.word	0x0001665f
   16774:	0001665f 	.word	0x0001665f
   16778:	0001665f 	.word	0x0001665f
   1677c:	0001665f 	.word	0x0001665f
   16780:	0001665f 	.word	0x0001665f
   16784:	0001665f 	.word	0x0001665f
   16788:	0001665f 	.word	0x0001665f
   1678c:	0001665f 	.word	0x0001665f
   16790:	0001665f 	.word	0x0001665f
   16794:	0001665f 	.word	0x0001665f
   16798:	000169cf 	.word	0x000169cf
   1679c:	1c5a      	adds	r2, r3, #1
   1679e:	60ea      	str	r2, [r5, #12]
   167a0:	785a      	ldrb	r2, [r3, #1]
   167a2:	2a00      	cmp	r2, #0
   167a4:	f43f af5b 	beq.w	1665e <d_encoding+0x62>
   167a8:	1c9a      	adds	r2, r3, #2
   167aa:	60ea      	str	r2, [r5, #12]
   167ac:	785a      	ldrb	r2, [r3, #1]
   167ae:	3a41      	subs	r2, #65	; 0x41
   167b0:	2a31      	cmp	r2, #49	; 0x31
   167b2:	f63f af54 	bhi.w	1665e <d_encoding+0x62>
   167b6:	a101      	add	r1, pc, #4	; (adr r1, 167bc <d_encoding+0x1c0>)
   167b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   167bc:	000168b1 	.word	0x000168b1
   167c0:	0001665f 	.word	0x0001665f
   167c4:	0001665f 	.word	0x0001665f
   167c8:	0001665f 	.word	0x0001665f
   167cc:	0001665f 	.word	0x0001665f
   167d0:	0001665f 	.word	0x0001665f
   167d4:	0001665f 	.word	0x0001665f
   167d8:	0001665f 	.word	0x0001665f
   167dc:	0001665f 	.word	0x0001665f
   167e0:	0001665f 	.word	0x0001665f
   167e4:	0001665f 	.word	0x0001665f
   167e8:	0001665f 	.word	0x0001665f
   167ec:	0001665f 	.word	0x0001665f
   167f0:	0001665f 	.word	0x0001665f
   167f4:	0001665f 	.word	0x0001665f
   167f8:	0001665f 	.word	0x0001665f
   167fc:	0001665f 	.word	0x0001665f
   16800:	000169b1 	.word	0x000169b1
   16804:	0001665f 	.word	0x0001665f
   16808:	00016985 	.word	0x00016985
   1680c:	0001665f 	.word	0x0001665f
   16810:	0001696f 	.word	0x0001696f
   16814:	0001665f 	.word	0x0001665f
   16818:	0001665f 	.word	0x0001665f
   1681c:	0001665f 	.word	0x0001665f
   16820:	0001665f 	.word	0x0001665f
   16824:	0001665f 	.word	0x0001665f
   16828:	0001665f 	.word	0x0001665f
   1682c:	0001665f 	.word	0x0001665f
   16830:	0001665f 	.word	0x0001665f
   16834:	0001665f 	.word	0x0001665f
   16838:	0001665f 	.word	0x0001665f
   1683c:	0001665f 	.word	0x0001665f
   16840:	0001665f 	.word	0x0001665f
   16844:	0001665f 	.word	0x0001665f
   16848:	0001665f 	.word	0x0001665f
   1684c:	0001665f 	.word	0x0001665f
   16850:	0001665f 	.word	0x0001665f
   16854:	0001665f 	.word	0x0001665f
   16858:	0001665f 	.word	0x0001665f
   1685c:	0001665f 	.word	0x0001665f
   16860:	0001665f 	.word	0x0001665f
   16864:	0001665f 	.word	0x0001665f
   16868:	0001665f 	.word	0x0001665f
   1686c:	0001665f 	.word	0x0001665f
   16870:	0001665f 	.word	0x0001665f
   16874:	0001665f 	.word	0x0001665f
   16878:	0001665f 	.word	0x0001665f
   1687c:	0001665f 	.word	0x0001665f
   16880:	000168c9 	.word	0x000168c9
   16884:	2b34      	cmp	r3, #52	; 0x34
   16886:	f47f af0f 	bne.w	166a8 <d_encoding+0xac>
   1688a:	2100      	movs	r1, #0
   1688c:	4628      	mov	r0, r5
   1688e:	f7ff fe77 	bl	16580 <d_bare_function_type>
   16892:	4622      	mov	r2, r4
   16894:	4603      	mov	r3, r0
   16896:	2103      	movs	r1, #3
   16898:	4628      	mov	r0, r5
   1689a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1689e:	f7fd be05 	b.w	144ac <d_make_comp>
   168a2:	2a4c      	cmp	r2, #76	; 0x4c
   168a4:	d1f1      	bne.n	1688a <d_encoding+0x28e>
   168a6:	6849      	ldr	r1, [r1, #4]
   168a8:	2900      	cmp	r1, #0
   168aa:	f47f aee3 	bne.w	16674 <d_encoding+0x78>
   168ae:	e7ed      	b.n	1688c <d_encoding+0x290>
   168b0:	2100      	movs	r1, #0
   168b2:	4628      	mov	r0, r5
   168b4:	f7ff fea2 	bl	165fc <d_encoding>
   168b8:	2300      	movs	r3, #0
   168ba:	4602      	mov	r2, r0
   168bc:	2117      	movs	r1, #23
   168be:	4628      	mov	r0, r5
   168c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168c4:	f7fd bdf2 	b.w	144ac <d_make_comp>
   168c8:	f105 000c 	add.w	r0, r5, #12
   168cc:	f7fd ff40 	bl	14750 <d_number.isra.0>
   168d0:	2801      	cmp	r0, #1
   168d2:	f77f aec4 	ble.w	1665e <d_encoding+0x62>
   168d6:	68eb      	ldr	r3, [r5, #12]
   168d8:	781a      	ldrb	r2, [r3, #0]
   168da:	2a00      	cmp	r2, #0
   168dc:	f43f aebf 	beq.w	1665e <d_encoding+0x62>
   168e0:	1c5f      	adds	r7, r3, #1
   168e2:	60ef      	str	r7, [r5, #12]
   168e4:	781b      	ldrb	r3, [r3, #0]
   168e6:	2b5f      	cmp	r3, #95	; 0x5f
   168e8:	f47f aeb9 	bne.w	1665e <d_encoding+0x62>
   168ec:	2200      	movs	r2, #0
   168ee:	1e46      	subs	r6, r0, #1
   168f0:	4690      	mov	r8, r2
   168f2:	f04f 0940 	mov.w	r9, #64	; 0x40
   168f6:	783b      	ldrb	r3, [r7, #0]
   168f8:	2b00      	cmp	r3, #0
   168fa:	f43f aeb0 	beq.w	1665e <d_encoding+0x62>
   168fe:	2b24      	cmp	r3, #36	; 0x24
   16900:	f000 8128 	beq.w	16b54 <d_encoding+0x558>
   16904:	463c      	mov	r4, r7
   16906:	2100      	movs	r1, #0
   16908:	e004      	b.n	16914 <d_encoding+0x318>
   1690a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1690e:	b123      	cbz	r3, 1691a <d_encoding+0x31e>
   16910:	2b24      	cmp	r3, #36	; 0x24
   16912:	d002      	beq.n	1691a <d_encoding+0x31e>
   16914:	3101      	adds	r1, #1
   16916:	42b1      	cmp	r1, r6
   16918:	dbf7      	blt.n	1690a <d_encoding+0x30e>
   1691a:	696c      	ldr	r4, [r5, #20]
   1691c:	69a8      	ldr	r0, [r5, #24]
   1691e:	4284      	cmp	r4, r0
   16920:	f280 8113 	bge.w	16b4a <d_encoding+0x54e>
   16924:	6928      	ldr	r0, [r5, #16]
   16926:	1c63      	adds	r3, r4, #1
   16928:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1692c:	616b      	str	r3, [r5, #20]
   1692e:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   16932:	f000 810a 	beq.w	16b4a <d_encoding+0x54e>
   16936:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   1693a:	605f      	str	r7, [r3, #4]
   1693c:	6099      	str	r1, [r3, #8]
   1693e:	68ef      	ldr	r7, [r5, #12]
   16940:	440f      	add	r7, r1
   16942:	1a76      	subs	r6, r6, r1
   16944:	60ef      	str	r7, [r5, #12]
   16946:	2a00      	cmp	r2, #0
   16948:	f000 8121 	beq.w	16b8e <d_encoding+0x592>
   1694c:	213f      	movs	r1, #63	; 0x3f
   1694e:	4628      	mov	r0, r5
   16950:	f7fd fdac 	bl	144ac <d_make_comp>
   16954:	4602      	mov	r2, r0
   16956:	2800      	cmp	r0, #0
   16958:	f43f ae81 	beq.w	1665e <d_encoding+0x62>
   1695c:	2e00      	cmp	r6, #0
   1695e:	dcca      	bgt.n	168f6 <d_encoding+0x2fa>
   16960:	4628      	mov	r0, r5
   16962:	2300      	movs	r3, #0
   16964:	213e      	movs	r1, #62	; 0x3e
   16966:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1696a:	f7fd bd9f 	b.w	144ac <d_make_comp>
   1696e:	4628      	mov	r0, r5
   16970:	f7fe fe70 	bl	15654 <d_name>
   16974:	2300      	movs	r3, #0
   16976:	4602      	mov	r2, r0
   16978:	2113      	movs	r1, #19
   1697a:	4628      	mov	r0, r5
   1697c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16980:	f7fd bd94 	b.w	144ac <d_make_comp>
   16984:	789a      	ldrb	r2, [r3, #2]
   16986:	2100      	movs	r1, #0
   16988:	4628      	mov	r0, r5
   1698a:	2a00      	cmp	r2, #0
   1698c:	f000 8101 	beq.w	16b92 <d_encoding+0x596>
   16990:	1cda      	adds	r2, r3, #3
   16992:	60ea      	str	r2, [r5, #12]
   16994:	789b      	ldrb	r3, [r3, #2]
   16996:	2b6e      	cmp	r3, #110	; 0x6e
   16998:	f040 80fb 	bne.w	16b92 <d_encoding+0x596>
   1699c:	f7ff fe2e 	bl	165fc <d_encoding>
   169a0:	2300      	movs	r3, #0
   169a2:	4602      	mov	r2, r0
   169a4:	2149      	movs	r1, #73	; 0x49
   169a6:	4628      	mov	r0, r5
   169a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169ac:	f7fd bd7e 	b.w	144ac <d_make_comp>
   169b0:	4628      	mov	r0, r5
   169b2:	f7fe fe4f 	bl	15654 <d_name>
   169b6:	4604      	mov	r4, r0
   169b8:	4628      	mov	r0, r5
   169ba:	f7fd fef3 	bl	147a4 <d_number_component>
   169be:	4622      	mov	r2, r4
   169c0:	4603      	mov	r3, r0
   169c2:	2116      	movs	r1, #22
   169c4:	4628      	mov	r0, r5
   169c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169ca:	f7fd bd6f 	b.w	144ac <d_make_comp>
   169ce:	2176      	movs	r1, #118	; 0x76
   169d0:	4628      	mov	r0, r5
   169d2:	f7fe f871 	bl	14ab8 <d_call_offset>
   169d6:	2800      	cmp	r0, #0
   169d8:	f43f ae41 	beq.w	1665e <d_encoding+0x62>
   169dc:	2100      	movs	r1, #0
   169de:	4628      	mov	r0, r5
   169e0:	f7ff fe0c 	bl	165fc <d_encoding>
   169e4:	2300      	movs	r3, #0
   169e6:	4602      	mov	r2, r0
   169e8:	2110      	movs	r1, #16
   169ea:	4628      	mov	r0, r5
   169ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169f0:	f7fd bd5c 	b.w	144ac <d_make_comp>
   169f4:	2168      	movs	r1, #104	; 0x68
   169f6:	4628      	mov	r0, r5
   169f8:	f7fe f85e 	bl	14ab8 <d_call_offset>
   169fc:	2800      	cmp	r0, #0
   169fe:	f43f ae2e 	beq.w	1665e <d_encoding+0x62>
   16a02:	2100      	movs	r1, #0
   16a04:	4628      	mov	r0, r5
   16a06:	f7ff fdf9 	bl	165fc <d_encoding>
   16a0a:	2300      	movs	r3, #0
   16a0c:	4602      	mov	r2, r0
   16a0e:	210f      	movs	r1, #15
   16a10:	4628      	mov	r0, r5
   16a12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a16:	f7fd bd49 	b.w	144ac <d_make_comp>
   16a1a:	2100      	movs	r1, #0
   16a1c:	4628      	mov	r0, r5
   16a1e:	f7fe f84b 	bl	14ab8 <d_call_offset>
   16a22:	2800      	cmp	r0, #0
   16a24:	f43f ae1b 	beq.w	1665e <d_encoding+0x62>
   16a28:	2100      	movs	r1, #0
   16a2a:	4628      	mov	r0, r5
   16a2c:	f7fe f844 	bl	14ab8 <d_call_offset>
   16a30:	2800      	cmp	r0, #0
   16a32:	f43f ae14 	beq.w	1665e <d_encoding+0x62>
   16a36:	2100      	movs	r1, #0
   16a38:	4628      	mov	r0, r5
   16a3a:	f7ff fddf 	bl	165fc <d_encoding>
   16a3e:	2300      	movs	r3, #0
   16a40:	4602      	mov	r2, r0
   16a42:	2111      	movs	r1, #17
   16a44:	4628      	mov	r0, r5
   16a46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a4a:	f7fd bd2f 	b.w	144ac <d_make_comp>
   16a4e:	4628      	mov	r0, r5
   16a50:	f7fe fe00 	bl	15654 <d_name>
   16a54:	2300      	movs	r3, #0
   16a56:	4602      	mov	r2, r0
   16a58:	2115      	movs	r1, #21
   16a5a:	4628      	mov	r0, r5
   16a5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a60:	f7fd bd24 	b.w	144ac <d_make_comp>
   16a64:	310f      	adds	r1, #15
   16a66:	6329      	str	r1, [r5, #48]	; 0x30
   16a68:	4628      	mov	r0, r5
   16a6a:	f7fe ffaf 	bl	159cc <d_type>
   16a6e:	2300      	movs	r3, #0
   16a70:	4602      	mov	r2, r0
   16a72:	2109      	movs	r1, #9
   16a74:	4628      	mov	r0, r5
   16a76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a7a:	f7fd bd17 	b.w	144ac <d_make_comp>
   16a7e:	310a      	adds	r1, #10
   16a80:	6329      	str	r1, [r5, #48]	; 0x30
   16a82:	4628      	mov	r0, r5
   16a84:	f7fe ffa2 	bl	159cc <d_type>
   16a88:	2300      	movs	r3, #0
   16a8a:	4602      	mov	r2, r0
   16a8c:	210a      	movs	r1, #10
   16a8e:	4628      	mov	r0, r5
   16a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a94:	f7fd bd0a 	b.w	144ac <d_make_comp>
   16a98:	4628      	mov	r0, r5
   16a9a:	f7fe ff97 	bl	159cc <d_type>
   16a9e:	2300      	movs	r3, #0
   16aa0:	4602      	mov	r2, r0
   16aa2:	210d      	movs	r1, #13
   16aa4:	4628      	mov	r0, r5
   16aa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16aaa:	f7fd bcff 	b.w	144ac <d_make_comp>
   16aae:	4628      	mov	r0, r5
   16ab0:	f7fe ff8c 	bl	159cc <d_type>
   16ab4:	2300      	movs	r3, #0
   16ab6:	4602      	mov	r2, r0
   16ab8:	2112      	movs	r1, #18
   16aba:	4628      	mov	r0, r5
   16abc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ac0:	f7fd bcf4 	b.w	144ac <d_make_comp>
   16ac4:	4628      	mov	r0, r5
   16ac6:	f7fe ff81 	bl	159cc <d_type>
   16aca:	2300      	movs	r3, #0
   16acc:	4602      	mov	r2, r0
   16ace:	210c      	movs	r1, #12
   16ad0:	4628      	mov	r0, r5
   16ad2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ad6:	f7fd bce9 	b.w	144ac <d_make_comp>
   16ada:	4628      	mov	r0, r5
   16adc:	f7fe fdba 	bl	15654 <d_name>
   16ae0:	2300      	movs	r3, #0
   16ae2:	4602      	mov	r2, r0
   16ae4:	2114      	movs	r1, #20
   16ae6:	4628      	mov	r0, r5
   16ae8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16aec:	f7fd bcde 	b.w	144ac <d_make_comp>
   16af0:	4628      	mov	r0, r5
   16af2:	f7fe ff6b 	bl	159cc <d_type>
   16af6:	2300      	movs	r3, #0
   16af8:	4602      	mov	r2, r0
   16afa:	210e      	movs	r1, #14
   16afc:	4628      	mov	r0, r5
   16afe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b02:	f7fd bcd3 	b.w	144ac <d_make_comp>
   16b06:	4628      	mov	r0, r5
   16b08:	f7fe ff60 	bl	159cc <d_type>
   16b0c:	4604      	mov	r4, r0
   16b0e:	f105 000c 	add.w	r0, r5, #12
   16b12:	f7fd fe1d 	bl	14750 <d_number.isra.0>
   16b16:	2800      	cmp	r0, #0
   16b18:	f6ff ada1 	blt.w	1665e <d_encoding+0x62>
   16b1c:	68eb      	ldr	r3, [r5, #12]
   16b1e:	781a      	ldrb	r2, [r3, #0]
   16b20:	2a5f      	cmp	r2, #95	; 0x5f
   16b22:	f47f ad9c 	bne.w	1665e <d_encoding+0x62>
   16b26:	3301      	adds	r3, #1
   16b28:	60eb      	str	r3, [r5, #12]
   16b2a:	4628      	mov	r0, r5
   16b2c:	f7fe ff4e 	bl	159cc <d_type>
   16b30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16b32:	1d59      	adds	r1, r3, #5
   16b34:	6329      	str	r1, [r5, #48]	; 0x30
   16b36:	4602      	mov	r2, r0
   16b38:	4623      	mov	r3, r4
   16b3a:	4628      	mov	r0, r5
   16b3c:	210b      	movs	r1, #11
   16b3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b42:	f7fd bcb3 	b.w	144ac <d_make_comp>
   16b46:	685b      	ldr	r3, [r3, #4]
   16b48:	e574      	b.n	16634 <d_encoding+0x38>
   16b4a:	68eb      	ldr	r3, [r5, #12]
   16b4c:	440b      	add	r3, r1
   16b4e:	60eb      	str	r3, [r5, #12]
   16b50:	2400      	movs	r4, #0
   16b52:	e585      	b.n	16660 <d_encoding+0x64>
   16b54:	787b      	ldrb	r3, [r7, #1]
   16b56:	2b53      	cmp	r3, #83	; 0x53
   16b58:	d027      	beq.n	16baa <d_encoding+0x5ae>
   16b5a:	2b5f      	cmp	r3, #95	; 0x5f
   16b5c:	d023      	beq.n	16ba6 <d_encoding+0x5aa>
   16b5e:	2b24      	cmp	r3, #36	; 0x24
   16b60:	f47f ad7d 	bne.w	1665e <d_encoding+0x62>
   16b64:	4618      	mov	r0, r3
   16b66:	6969      	ldr	r1, [r5, #20]
   16b68:	69ab      	ldr	r3, [r5, #24]
   16b6a:	4299      	cmp	r1, r3
   16b6c:	da1f      	bge.n	16bae <d_encoding+0x5b2>
   16b6e:	692c      	ldr	r4, [r5, #16]
   16b70:	1c4f      	adds	r7, r1, #1
   16b72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16b76:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   16b7a:	616f      	str	r7, [r5, #20]
   16b7c:	d017      	beq.n	16bae <d_encoding+0x5b2>
   16b7e:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   16b82:	6058      	str	r0, [r3, #4]
   16b84:	68ef      	ldr	r7, [r5, #12]
   16b86:	3702      	adds	r7, #2
   16b88:	3e02      	subs	r6, #2
   16b8a:	60ef      	str	r7, [r5, #12]
   16b8c:	e6db      	b.n	16946 <d_encoding+0x34a>
   16b8e:	461a      	mov	r2, r3
   16b90:	e6e4      	b.n	1695c <d_encoding+0x360>
   16b92:	f7ff fd33 	bl	165fc <d_encoding>
   16b96:	2300      	movs	r3, #0
   16b98:	4602      	mov	r2, r0
   16b9a:	2148      	movs	r1, #72	; 0x48
   16b9c:	4628      	mov	r0, r5
   16b9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ba2:	f7fd bc83 	b.w	144ac <d_make_comp>
   16ba6:	202e      	movs	r0, #46	; 0x2e
   16ba8:	e7dd      	b.n	16b66 <d_encoding+0x56a>
   16baa:	202f      	movs	r0, #47	; 0x2f
   16bac:	e7db      	b.n	16b66 <d_encoding+0x56a>
   16bae:	68eb      	ldr	r3, [r5, #12]
   16bb0:	3302      	adds	r3, #2
   16bb2:	60eb      	str	r3, [r5, #12]
   16bb4:	2400      	movs	r4, #0
   16bb6:	e553      	b.n	16660 <d_encoding+0x64>

00016bb8 <d_expr_primary>:
   16bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bba:	68c2      	ldr	r2, [r0, #12]
   16bbc:	7813      	ldrb	r3, [r2, #0]
   16bbe:	2b4c      	cmp	r3, #76	; 0x4c
   16bc0:	d001      	beq.n	16bc6 <d_expr_primary+0xe>
   16bc2:	2000      	movs	r0, #0
   16bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bc6:	1c53      	adds	r3, r2, #1
   16bc8:	60c3      	str	r3, [r0, #12]
   16bca:	7851      	ldrb	r1, [r2, #1]
   16bcc:	295f      	cmp	r1, #95	; 0x5f
   16bce:	4605      	mov	r5, r0
   16bd0:	d03a      	beq.n	16c48 <d_expr_primary+0x90>
   16bd2:	295a      	cmp	r1, #90	; 0x5a
   16bd4:	d03f      	beq.n	16c56 <d_expr_primary+0x9e>
   16bd6:	f7fe fef9 	bl	159cc <d_type>
   16bda:	2800      	cmp	r0, #0
   16bdc:	d0f1      	beq.n	16bc2 <d_expr_primary+0xa>
   16bde:	7803      	ldrb	r3, [r0, #0]
   16be0:	2b27      	cmp	r3, #39	; 0x27
   16be2:	d046      	beq.n	16c72 <d_expr_primary+0xba>
   16be4:	68ee      	ldr	r6, [r5, #12]
   16be6:	7833      	ldrb	r3, [r6, #0]
   16be8:	2b6e      	cmp	r3, #110	; 0x6e
   16bea:	d04b      	beq.n	16c84 <d_expr_primary+0xcc>
   16bec:	213c      	movs	r1, #60	; 0x3c
   16bee:	2b45      	cmp	r3, #69	; 0x45
   16bf0:	d04e      	beq.n	16c90 <d_expr_primary+0xd8>
   16bf2:	2b00      	cmp	r3, #0
   16bf4:	d0e5      	beq.n	16bc2 <d_expr_primary+0xa>
   16bf6:	4633      	mov	r3, r6
   16bf8:	e001      	b.n	16bfe <d_expr_primary+0x46>
   16bfa:	2c00      	cmp	r4, #0
   16bfc:	d0e1      	beq.n	16bc2 <d_expr_primary+0xa>
   16bfe:	3301      	adds	r3, #1
   16c00:	60eb      	str	r3, [r5, #12]
   16c02:	781c      	ldrb	r4, [r3, #0]
   16c04:	2c45      	cmp	r4, #69	; 0x45
   16c06:	d1f8      	bne.n	16bfa <d_expr_primary+0x42>
   16c08:	1b9c      	subs	r4, r3, r6
   16c0a:	696b      	ldr	r3, [r5, #20]
   16c0c:	69aa      	ldr	r2, [r5, #24]
   16c0e:	4293      	cmp	r3, r2
   16c10:	da2d      	bge.n	16c6e <d_expr_primary+0xb6>
   16c12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16c16:	692f      	ldr	r7, [r5, #16]
   16c18:	3301      	adds	r3, #1
   16c1a:	0092      	lsls	r2, r2, #2
   16c1c:	616b      	str	r3, [r5, #20]
   16c1e:	18bb      	adds	r3, r7, r2
   16c20:	d025      	beq.n	16c6e <d_expr_primary+0xb6>
   16c22:	b326      	cbz	r6, 16c6e <d_expr_primary+0xb6>
   16c24:	b31c      	cbz	r4, 16c6e <d_expr_primary+0xb6>
   16c26:	f04f 0e00 	mov.w	lr, #0
   16c2a:	f807 e002 	strb.w	lr, [r7, r2]
   16c2e:	605e      	str	r6, [r3, #4]
   16c30:	609c      	str	r4, [r3, #8]
   16c32:	4602      	mov	r2, r0
   16c34:	4628      	mov	r0, r5
   16c36:	f7fd fc39 	bl	144ac <d_make_comp>
   16c3a:	68eb      	ldr	r3, [r5, #12]
   16c3c:	781a      	ldrb	r2, [r3, #0]
   16c3e:	2a45      	cmp	r2, #69	; 0x45
   16c40:	d1bf      	bne.n	16bc2 <d_expr_primary+0xa>
   16c42:	3301      	adds	r3, #1
   16c44:	60eb      	str	r3, [r5, #12]
   16c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c48:	1c93      	adds	r3, r2, #2
   16c4a:	60c3      	str	r3, [r0, #12]
   16c4c:	7892      	ldrb	r2, [r2, #2]
   16c4e:	2a5a      	cmp	r2, #90	; 0x5a
   16c50:	bf18      	it	ne
   16c52:	2000      	movne	r0, #0
   16c54:	d107      	bne.n	16c66 <d_expr_primary+0xae>
   16c56:	3301      	adds	r3, #1
   16c58:	60eb      	str	r3, [r5, #12]
   16c5a:	2100      	movs	r1, #0
   16c5c:	4628      	mov	r0, r5
   16c5e:	f7ff fccd 	bl	165fc <d_encoding>
   16c62:	68eb      	ldr	r3, [r5, #12]
   16c64:	781a      	ldrb	r2, [r3, #0]
   16c66:	2a45      	cmp	r2, #69	; 0x45
   16c68:	d0eb      	beq.n	16c42 <d_expr_primary+0x8a>
   16c6a:	2000      	movs	r0, #0
   16c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c6e:	2300      	movs	r3, #0
   16c70:	e7df      	b.n	16c32 <d_expr_primary+0x7a>
   16c72:	6843      	ldr	r3, [r0, #4]
   16c74:	7c1a      	ldrb	r2, [r3, #16]
   16c76:	2a00      	cmp	r2, #0
   16c78:	d0b4      	beq.n	16be4 <d_expr_primary+0x2c>
   16c7a:	685a      	ldr	r2, [r3, #4]
   16c7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16c7e:	1a9b      	subs	r3, r3, r2
   16c80:	632b      	str	r3, [r5, #48]	; 0x30
   16c82:	e7af      	b.n	16be4 <d_expr_primary+0x2c>
   16c84:	1c72      	adds	r2, r6, #1
   16c86:	60ea      	str	r2, [r5, #12]
   16c88:	7873      	ldrb	r3, [r6, #1]
   16c8a:	213d      	movs	r1, #61	; 0x3d
   16c8c:	4616      	mov	r6, r2
   16c8e:	e7ae      	b.n	16bee <d_expr_primary+0x36>
   16c90:	2400      	movs	r4, #0
   16c92:	e7ba      	b.n	16c0a <d_expr_primary+0x52>

00016c94 <d_print_comp_inner>:
   16c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c98:	4604      	mov	r4, r0
   16c9a:	b095      	sub	sp, #84	; 0x54
   16c9c:	2a00      	cmp	r2, #0
   16c9e:	f000 80db 	beq.w	16e58 <d_print_comp_inner+0x1c4>
   16ca2:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   16ca6:	2f00      	cmp	r7, #0
   16ca8:	f040 80c2 	bne.w	16e30 <d_print_comp_inner+0x19c>
   16cac:	7813      	ldrb	r3, [r2, #0]
   16cae:	4688      	mov	r8, r1
   16cb0:	4615      	mov	r5, r2
   16cb2:	2b4d      	cmp	r3, #77	; 0x4d
   16cb4:	f201 81e6 	bhi.w	18084 <d_print_comp_inner+0x13f0>
   16cb8:	e8df f013 	tbh	[pc, r3, lsl #1]
   16cbc:	043c045a 	.word	0x043c045a
   16cc0:	03a4043c 	.word	0x03a4043c
   16cc4:	048904a5 	.word	0x048904a5
   16cc8:	038e04ea 	.word	0x038e04ea
   16ccc:	0330037c 	.word	0x0330037c
   16cd0:	030a0356 	.word	0x030a0356
   16cd4:	029802e4 	.word	0x029802e4
   16cd8:	027202be 	.word	0x027202be
   16cdc:	01f0024c 	.word	0x01f0024c
   16ce0:	01ca0226 	.word	0x01ca0226
   16ce4:	015801a4 	.word	0x015801a4
   16ce8:	0132017e 	.word	0x0132017e
   16cec:	00f2010b 	.word	0x00f2010b
   16cf0:	00f200f2 	.word	0x00f200f2
   16cf4:	00d400d4 	.word	0x00d400d4
   16cf8:	00d400d4 	.word	0x00d400d4
   16cfc:	00d400d4 	.word	0x00d400d4
   16d00:	06d500d4 	.word	0x06d500d4
   16d04:	00d406d5 	.word	0x00d406d5
   16d08:	06a900d4 	.word	0x06a900d4
   16d0c:	069306fc 	.word	0x069306fc
   16d10:	0701071d 	.word	0x0701071d
   16d14:	07010788 	.word	0x07010788
   16d18:	057b057b 	.word	0x057b057b
   16d1c:	06060630 	.word	0x06060630
   16d20:	09e405e0 	.word	0x09e405e0
   16d24:	068e05ad 	.word	0x068e05ad
   16d28:	004e0654 	.word	0x004e0654
   16d2c:	094c0485 	.word	0x094c0485
   16d30:	08df08df 	.word	0x08df08df
   16d34:	08ae08ae 	.word	0x08ae08ae
   16d38:	05480888 	.word	0x05480888
   16d3c:	08e4053a 	.word	0x08e4053a
   16d40:	09be0514 	.word	0x09be0514
   16d44:	09980914 	.word	0x09980914
   16d48:	07cb09e4 	.word	0x07cb09e4
   16d4c:	07f10862 	.word	0x07f10862
   16d50:	04130817 	.word	0x04130817
   16d54:	055200d4 	.word	0x055200d4
   16d58:	68ab      	ldr	r3, [r5, #8]
   16d5a:	781b      	ldrb	r3, [r3, #0]
   16d5c:	2b38      	cmp	r3, #56	; 0x38
   16d5e:	d17b      	bne.n	16e58 <d_print_comp_inner+0x1c4>
   16d60:	686a      	ldr	r2, [r5, #4]
   16d62:	6853      	ldr	r3, [r2, #4]
   16d64:	681b      	ldr	r3, [r3, #0]
   16d66:	7859      	ldrb	r1, [r3, #1]
   16d68:	2963      	cmp	r1, #99	; 0x63
   16d6a:	f002 814a 	beq.w	19002 <d_print_comp_inner+0x236e>
   16d6e:	f105 0308 	add.w	r3, r5, #8
   16d72:	4641      	mov	r1, r8
   16d74:	4620      	mov	r0, r4
   16d76:	f003 fbbb 	bl	1a4f0 <d_maybe_print_fold_expression.isra.15>
   16d7a:	4606      	mov	r6, r0
   16d7c:	2800      	cmp	r0, #0
   16d7e:	d157      	bne.n	16e30 <d_print_comp_inner+0x19c>
   16d80:	686b      	ldr	r3, [r5, #4]
   16d82:	781a      	ldrb	r2, [r3, #0]
   16d84:	2a31      	cmp	r2, #49	; 0x31
   16d86:	f002 836b 	beq.w	19460 <d_print_comp_inner+0x27cc>
   16d8a:	685b      	ldr	r3, [r3, #4]
   16d8c:	49c7      	ldr	r1, [pc, #796]	; (170ac <d_print_comp_inner+0x418>)
   16d8e:	6818      	ldr	r0, [r3, #0]
   16d90:	f007 fe4a 	bl	1ea28 <strcmp>
   16d94:	68ab      	ldr	r3, [r5, #8]
   16d96:	b920      	cbnz	r0, 16da2 <d_print_comp_inner+0x10e>
   16d98:	685a      	ldr	r2, [r3, #4]
   16d9a:	7811      	ldrb	r1, [r2, #0]
   16d9c:	2903      	cmp	r1, #3
   16d9e:	f002 83a5 	beq.w	194ec <d_print_comp_inner+0x2858>
   16da2:	685a      	ldr	r2, [r3, #4]
   16da4:	4641      	mov	r1, r8
   16da6:	4620      	mov	r0, r4
   16da8:	f003 fb3e 	bl	1a428 <d_print_subexpr>
   16dac:	686f      	ldr	r7, [r5, #4]
   16dae:	49c0      	ldr	r1, [pc, #768]	; (170b0 <d_print_comp_inner+0x41c>)
   16db0:	687b      	ldr	r3, [r7, #4]
   16db2:	f8d3 9000 	ldr.w	r9, [r3]
   16db6:	4648      	mov	r0, r9
   16db8:	f007 fe36 	bl	1ea28 <strcmp>
   16dbc:	4606      	mov	r6, r0
   16dbe:	2800      	cmp	r0, #0
   16dc0:	f042 826f 	bne.w	192a2 <d_print_comp_inner+0x260e>
   16dc4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16dc8:	29ff      	cmp	r1, #255	; 0xff
   16dca:	f002 844a 	beq.w	19662 <d_print_comp_inner+0x29ce>
   16dce:	1c4a      	adds	r2, r1, #1
   16dd0:	235b      	movs	r3, #91	; 0x5b
   16dd2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16dd6:	5463      	strb	r3, [r4, r1]
   16dd8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16ddc:	68ab      	ldr	r3, [r5, #8]
   16dde:	4641      	mov	r1, r8
   16de0:	689a      	ldr	r2, [r3, #8]
   16de2:	4620      	mov	r0, r4
   16de4:	f002 fcfa 	bl	197dc <d_print_comp>
   16de8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16dec:	29ff      	cmp	r1, #255	; 0xff
   16dee:	f002 8425 	beq.w	1963c <d_print_comp_inner+0x29a8>
   16df2:	235d      	movs	r3, #93	; 0x5d
   16df4:	1c4a      	adds	r2, r1, #1
   16df6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16dfa:	5463      	strb	r3, [r4, r1]
   16dfc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16e00:	686b      	ldr	r3, [r5, #4]
   16e02:	781a      	ldrb	r2, [r3, #0]
   16e04:	2a31      	cmp	r2, #49	; 0x31
   16e06:	d113      	bne.n	16e30 <d_print_comp_inner+0x19c>
   16e08:	685b      	ldr	r3, [r3, #4]
   16e0a:	689a      	ldr	r2, [r3, #8]
   16e0c:	2a01      	cmp	r2, #1
   16e0e:	d10f      	bne.n	16e30 <d_print_comp_inner+0x19c>
   16e10:	685b      	ldr	r3, [r3, #4]
   16e12:	781b      	ldrb	r3, [r3, #0]
   16e14:	2b3e      	cmp	r3, #62	; 0x3e
   16e16:	d10b      	bne.n	16e30 <d_print_comp_inner+0x19c>
   16e18:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16e1c:	29ff      	cmp	r1, #255	; 0xff
   16e1e:	f002 8482 	beq.w	19726 <d_print_comp_inner+0x2a92>
   16e22:	2329      	movs	r3, #41	; 0x29
   16e24:	1c4a      	adds	r2, r1, #1
   16e26:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16e2a:	5463      	strb	r3, [r4, r1]
   16e2c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16e30:	b015      	add	sp, #84	; 0x54
   16e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   16e3a:	2b00      	cmp	r3, #0
   16e3c:	f2c1 84a4 	blt.w	18788 <d_print_comp_inner+0x1af4>
   16e40:	2b00      	cmp	r3, #0
   16e42:	f002 8432 	beq.w	196aa <d_print_comp_inner+0x2a16>
   16e46:	6880      	ldr	r0, [r0, #8]
   16e48:	3b01      	subs	r3, #1
   16e4a:	b110      	cbz	r0, 16e52 <d_print_comp_inner+0x1be>
   16e4c:	7802      	ldrb	r2, [r0, #0]
   16e4e:	2a2f      	cmp	r2, #47	; 0x2f
   16e50:	d0f6      	beq.n	16e40 <d_print_comp_inner+0x1ac>
   16e52:	b10f      	cbz	r7, 16e58 <d_print_comp_inner+0x1c4>
   16e54:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16e58:	2301      	movs	r3, #1
   16e5a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16e5e:	b015      	add	sp, #84	; 0x54
   16e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e64:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   16e68:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16e6c:	9505      	str	r5, [sp, #20]
   16e6e:	ab14      	add	r3, sp, #80	; 0x50
   16e70:	2100      	movs	r1, #0
   16e72:	f843 cd40 	str.w	ip, [r3, #-64]!
   16e76:	9106      	str	r1, [sp, #24]
   16e78:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16e7c:	9207      	str	r2, [sp, #28]
   16e7e:	686a      	ldr	r2, [r5, #4]
   16e80:	4641      	mov	r1, r8
   16e82:	4620      	mov	r0, r4
   16e84:	f002 fcaa 	bl	197dc <d_print_comp>
   16e88:	9b06      	ldr	r3, [sp, #24]
   16e8a:	2b00      	cmp	r3, #0
   16e8c:	f001 8389 	beq.w	185a2 <d_print_comp_inner+0x190e>
   16e90:	9b04      	ldr	r3, [sp, #16]
   16e92:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16e96:	2f00      	cmp	r7, #0
   16e98:	d0ca      	beq.n	16e30 <d_print_comp_inner+0x19c>
   16e9a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16e9e:	e7c7      	b.n	16e30 <d_print_comp_inner+0x19c>
   16ea0:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   16ea4:	f1bc 0f00 	cmp.w	ip, #0
   16ea8:	d0de      	beq.n	16e68 <d_print_comp_inner+0x1d4>
   16eaa:	4662      	mov	r2, ip
   16eac:	e005      	b.n	16eba <d_print_comp_inner+0x226>
   16eae:	428b      	cmp	r3, r1
   16eb0:	f001 86b8 	beq.w	18c24 <d_print_comp_inner+0x1f90>
   16eb4:	6812      	ldr	r2, [r2, #0]
   16eb6:	2a00      	cmp	r2, #0
   16eb8:	d0d6      	beq.n	16e68 <d_print_comp_inner+0x1d4>
   16eba:	6890      	ldr	r0, [r2, #8]
   16ebc:	2800      	cmp	r0, #0
   16ebe:	d1f9      	bne.n	16eb4 <d_print_comp_inner+0x220>
   16ec0:	6851      	ldr	r1, [r2, #4]
   16ec2:	7809      	ldrb	r1, [r1, #0]
   16ec4:	f1a1 0e19 	sub.w	lr, r1, #25
   16ec8:	f1be 0f02 	cmp.w	lr, #2
   16ecc:	d9ef      	bls.n	16eae <d_print_comp_inner+0x21a>
   16ece:	4607      	mov	r7, r0
   16ed0:	e7ca      	b.n	16e68 <d_print_comp_inner+0x1d4>
   16ed2:	68af      	ldr	r7, [r5, #8]
   16ed4:	686d      	ldr	r5, [r5, #4]
   16ed6:	2f00      	cmp	r7, #0
   16ed8:	d0aa      	beq.n	16e30 <d_print_comp_inner+0x19c>
   16eda:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16ede:	442f      	add	r7, r5
   16ee0:	f04f 0800 	mov.w	r8, #0
   16ee4:	e008      	b.n	16ef8 <d_print_comp_inner+0x264>
   16ee6:	460b      	mov	r3, r1
   16ee8:	3101      	adds	r1, #1
   16eea:	42bd      	cmp	r5, r7
   16eec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16ef0:	54e6      	strb	r6, [r4, r3]
   16ef2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   16ef6:	d09b      	beq.n	16e30 <d_print_comp_inner+0x19c>
   16ef8:	29ff      	cmp	r1, #255	; 0xff
   16efa:	f815 6b01 	ldrb.w	r6, [r5], #1
   16efe:	d1f2      	bne.n	16ee6 <d_print_comp_inner+0x252>
   16f00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f04:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   16f08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f0c:	4620      	mov	r0, r4
   16f0e:	4798      	blx	r3
   16f10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f14:	3301      	adds	r3, #1
   16f16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f1a:	2101      	movs	r1, #1
   16f1c:	2300      	movs	r3, #0
   16f1e:	e7e4      	b.n	16eea <d_print_comp_inner+0x256>
   16f20:	4e64      	ldr	r6, [pc, #400]	; (170b4 <d_print_comp_inner+0x420>)
   16f22:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f26:	f106 0a11 	add.w	sl, r6, #17
   16f2a:	f04f 0900 	mov.w	r9, #0
   16f2e:	e009      	b.n	16f44 <d_print_comp_inner+0x2b0>
   16f30:	460b      	mov	r3, r1
   16f32:	3101      	adds	r1, #1
   16f34:	4556      	cmp	r6, sl
   16f36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f3a:	54e7      	strb	r7, [r4, r3]
   16f3c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f40:	f001 8296 	beq.w	18470 <d_print_comp_inner+0x17dc>
   16f44:	29ff      	cmp	r1, #255	; 0xff
   16f46:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f4a:	d1f1      	bne.n	16f30 <d_print_comp_inner+0x29c>
   16f4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f50:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f58:	4620      	mov	r0, r4
   16f5a:	4798      	blx	r3
   16f5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f60:	3301      	adds	r3, #1
   16f62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f66:	2101      	movs	r1, #1
   16f68:	2300      	movs	r3, #0
   16f6a:	e7e3      	b.n	16f34 <d_print_comp_inner+0x2a0>
   16f6c:	4e52      	ldr	r6, [pc, #328]	; (170b8 <d_print_comp_inner+0x424>)
   16f6e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f72:	f106 0a19 	add.w	sl, r6, #25
   16f76:	f04f 0900 	mov.w	r9, #0
   16f7a:	e009      	b.n	16f90 <d_print_comp_inner+0x2fc>
   16f7c:	460b      	mov	r3, r1
   16f7e:	3101      	adds	r1, #1
   16f80:	4556      	cmp	r6, sl
   16f82:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f86:	54e7      	strb	r7, [r4, r3]
   16f88:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f8c:	f001 82a8 	beq.w	184e0 <d_print_comp_inner+0x184c>
   16f90:	29ff      	cmp	r1, #255	; 0xff
   16f92:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f96:	d1f1      	bne.n	16f7c <d_print_comp_inner+0x2e8>
   16f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f9c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16fa0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16fa4:	4620      	mov	r0, r4
   16fa6:	4798      	blx	r3
   16fa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16fac:	3301      	adds	r3, #1
   16fae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16fb2:	2101      	movs	r1, #1
   16fb4:	2300      	movs	r3, #0
   16fb6:	e7e3      	b.n	16f80 <d_print_comp_inner+0x2ec>
   16fb8:	4e40      	ldr	r6, [pc, #256]	; (170bc <d_print_comp_inner+0x428>)
   16fba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16fbe:	f106 0a15 	add.w	sl, r6, #21
   16fc2:	f04f 0900 	mov.w	r9, #0
   16fc6:	e009      	b.n	16fdc <d_print_comp_inner+0x348>
   16fc8:	460b      	mov	r3, r1
   16fca:	3101      	adds	r1, #1
   16fcc:	4556      	cmp	r6, sl
   16fce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16fd2:	54e7      	strb	r7, [r4, r3]
   16fd4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16fd8:	f001 8251 	beq.w	1847e <d_print_comp_inner+0x17ea>
   16fdc:	29ff      	cmp	r1, #255	; 0xff
   16fde:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16fe2:	d1f1      	bne.n	16fc8 <d_print_comp_inner+0x334>
   16fe4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16fe8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16fec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16ff0:	4620      	mov	r0, r4
   16ff2:	4798      	blx	r3
   16ff4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16ff8:	3301      	adds	r3, #1
   16ffa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16ffe:	2101      	movs	r1, #1
   17000:	2300      	movs	r3, #0
   17002:	e7e3      	b.n	16fcc <d_print_comp_inner+0x338>
   17004:	4e2e      	ldr	r6, [pc, #184]	; (170c0 <d_print_comp_inner+0x42c>)
   17006:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1700a:	f106 0a16 	add.w	sl, r6, #22
   1700e:	f04f 0900 	mov.w	r9, #0
   17012:	e009      	b.n	17028 <d_print_comp_inner+0x394>
   17014:	460b      	mov	r3, r1
   17016:	3101      	adds	r1, #1
   17018:	4556      	cmp	r6, sl
   1701a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1701e:	54e7      	strb	r7, [r4, r3]
   17020:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17024:	f001 8263 	beq.w	184ee <d_print_comp_inner+0x185a>
   17028:	29ff      	cmp	r1, #255	; 0xff
   1702a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1702e:	d1f1      	bne.n	17014 <d_print_comp_inner+0x380>
   17030:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17034:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17038:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1703c:	4620      	mov	r0, r4
   1703e:	4798      	blx	r3
   17040:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17044:	3301      	adds	r3, #1
   17046:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1704a:	2101      	movs	r1, #1
   1704c:	2300      	movs	r3, #0
   1704e:	e7e3      	b.n	17018 <d_print_comp_inner+0x384>
   17050:	4e1c      	ldr	r6, [pc, #112]	; (170c4 <d_print_comp_inner+0x430>)
   17052:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17056:	f106 0a13 	add.w	sl, r6, #19
   1705a:	f04f 0900 	mov.w	r9, #0
   1705e:	e009      	b.n	17074 <d_print_comp_inner+0x3e0>
   17060:	460b      	mov	r3, r1
   17062:	3101      	adds	r1, #1
   17064:	45b2      	cmp	sl, r6
   17066:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1706a:	54e7      	strb	r7, [r4, r3]
   1706c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17070:	f001 8077 	beq.w	18162 <d_print_comp_inner+0x14ce>
   17074:	29ff      	cmp	r1, #255	; 0xff
   17076:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1707a:	d1f1      	bne.n	17060 <d_print_comp_inner+0x3cc>
   1707c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17080:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17084:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17088:	4620      	mov	r0, r4
   1708a:	4798      	blx	r3
   1708c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17090:	3301      	adds	r3, #1
   17092:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17096:	2101      	movs	r1, #1
   17098:	2300      	movs	r3, #0
   1709a:	e7e3      	b.n	17064 <d_print_comp_inner+0x3d0>
   1709c:	4e0a      	ldr	r6, [pc, #40]	; (170c8 <d_print_comp_inner+0x434>)
   1709e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170a2:	f106 0a1a 	add.w	sl, r6, #26
   170a6:	f04f 0900 	mov.w	r9, #0
   170aa:	e019      	b.n	170e0 <d_print_comp_inner+0x44c>
   170ac:	0002435c 	.word	0x0002435c
   170b0:	00024558 	.word	0x00024558
   170b4:	000244e7 	.word	0x000244e7
   170b8:	000244b3 	.word	0x000244b3
   170bc:	000244cf 	.word	0x000244cf
   170c0:	0002449b 	.word	0x0002449b
   170c4:	00024487 	.word	0x00024487
   170c8:	0002445b 	.word	0x0002445b
   170cc:	460b      	mov	r3, r1
   170ce:	3101      	adds	r1, #1
   170d0:	4556      	cmp	r6, sl
   170d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   170d6:	54e7      	strb	r7, [r4, r3]
   170d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   170dc:	f001 804f 	beq.w	1817e <d_print_comp_inner+0x14ea>
   170e0:	29ff      	cmp	r1, #255	; 0xff
   170e2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   170e6:	d1f1      	bne.n	170cc <d_print_comp_inner+0x438>
   170e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170f4:	4620      	mov	r0, r4
   170f6:	4798      	blx	r3
   170f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   170fc:	3301      	adds	r3, #1
   170fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17102:	2101      	movs	r1, #1
   17104:	2300      	movs	r3, #0
   17106:	e7e3      	b.n	170d0 <d_print_comp_inner+0x43c>
   17108:	4eb5      	ldr	r6, [pc, #724]	; (173e0 <d_print_comp_inner+0x74c>)
   1710a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1710e:	f106 0a0f 	add.w	sl, r6, #15
   17112:	f04f 0900 	mov.w	r9, #0
   17116:	e009      	b.n	1712c <d_print_comp_inner+0x498>
   17118:	460b      	mov	r3, r1
   1711a:	3101      	adds	r1, #1
   1711c:	4556      	cmp	r6, sl
   1711e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17122:	54e7      	strb	r7, [r4, r3]
   17124:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17128:	f001 8022 	beq.w	18170 <d_print_comp_inner+0x14dc>
   1712c:	29ff      	cmp	r1, #255	; 0xff
   1712e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17132:	d1f1      	bne.n	17118 <d_print_comp_inner+0x484>
   17134:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17138:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1713c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17140:	4620      	mov	r0, r4
   17142:	4798      	blx	r3
   17144:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17148:	3301      	adds	r3, #1
   1714a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1714e:	2101      	movs	r1, #1
   17150:	2300      	movs	r3, #0
   17152:	e7e3      	b.n	1711c <d_print_comp_inner+0x488>
   17154:	4ea3      	ldr	r6, [pc, #652]	; (173e4 <d_print_comp_inner+0x750>)
   17156:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1715a:	f106 0a11 	add.w	sl, r6, #17
   1715e:	f04f 0900 	mov.w	r9, #0
   17162:	e009      	b.n	17178 <d_print_comp_inner+0x4e4>
   17164:	460b      	mov	r3, r1
   17166:	3101      	adds	r1, #1
   17168:	4556      	cmp	r6, sl
   1716a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1716e:	54e7      	strb	r7, [r4, r3]
   17170:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17174:	f001 800a 	beq.w	1818c <d_print_comp_inner+0x14f8>
   17178:	29ff      	cmp	r1, #255	; 0xff
   1717a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1717e:	d1f1      	bne.n	17164 <d_print_comp_inner+0x4d0>
   17180:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17184:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17188:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1718c:	4620      	mov	r0, r4
   1718e:	4798      	blx	r3
   17190:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17194:	3301      	adds	r3, #1
   17196:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1719a:	2101      	movs	r1, #1
   1719c:	2300      	movs	r3, #0
   1719e:	e7e3      	b.n	17168 <d_print_comp_inner+0x4d4>
   171a0:	4e91      	ldr	r6, [pc, #580]	; (173e8 <d_print_comp_inner+0x754>)
   171a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171a6:	f106 0a15 	add.w	sl, r6, #21
   171aa:	f04f 0900 	mov.w	r9, #0
   171ae:	e009      	b.n	171c4 <d_print_comp_inner+0x530>
   171b0:	460b      	mov	r3, r1
   171b2:	3101      	adds	r1, #1
   171b4:	4556      	cmp	r6, sl
   171b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   171ba:	54e7      	strb	r7, [r4, r3]
   171bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   171c0:	f000 87b3 	beq.w	1812a <d_print_comp_inner+0x1496>
   171c4:	29ff      	cmp	r1, #255	; 0xff
   171c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   171ca:	d1f1      	bne.n	171b0 <d_print_comp_inner+0x51c>
   171cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   171d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   171d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   171d8:	4620      	mov	r0, r4
   171da:	4798      	blx	r3
   171dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   171e0:	3301      	adds	r3, #1
   171e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171e6:	2101      	movs	r1, #1
   171e8:	2300      	movs	r3, #0
   171ea:	e7e3      	b.n	171b4 <d_print_comp_inner+0x520>
   171ec:	4e7f      	ldr	r6, [pc, #508]	; (173ec <d_print_comp_inner+0x758>)
   171ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171f2:	f106 0a12 	add.w	sl, r6, #18
   171f6:	f04f 0900 	mov.w	r9, #0
   171fa:	e009      	b.n	17210 <d_print_comp_inner+0x57c>
   171fc:	460b      	mov	r3, r1
   171fe:	3101      	adds	r1, #1
   17200:	45b2      	cmp	sl, r6
   17202:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17206:	54e7      	strb	r7, [r4, r3]
   17208:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1720c:	f000 879b 	beq.w	18146 <d_print_comp_inner+0x14b2>
   17210:	29ff      	cmp	r1, #255	; 0xff
   17212:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17216:	d1f1      	bne.n	171fc <d_print_comp_inner+0x568>
   17218:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1721c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17220:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17224:	4620      	mov	r0, r4
   17226:	4798      	blx	r3
   17228:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1722c:	3301      	adds	r3, #1
   1722e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17232:	2101      	movs	r1, #1
   17234:	2300      	movs	r3, #0
   17236:	e7e3      	b.n	17200 <d_print_comp_inner+0x56c>
   17238:	4e6d      	ldr	r6, [pc, #436]	; (173f0 <d_print_comp_inner+0x75c>)
   1723a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1723e:	f106 0a10 	add.w	sl, r6, #16
   17242:	f04f 0900 	mov.w	r9, #0
   17246:	e009      	b.n	1725c <d_print_comp_inner+0x5c8>
   17248:	460b      	mov	r3, r1
   1724a:	3101      	adds	r1, #1
   1724c:	4556      	cmp	r6, sl
   1724e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17252:	54e7      	strb	r7, [r4, r3]
   17254:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17258:	f000 876e 	beq.w	18138 <d_print_comp_inner+0x14a4>
   1725c:	29ff      	cmp	r1, #255	; 0xff
   1725e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17262:	d1f1      	bne.n	17248 <d_print_comp_inner+0x5b4>
   17264:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17268:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1726c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17270:	4620      	mov	r0, r4
   17272:	4798      	blx	r3
   17274:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17278:	3301      	adds	r3, #1
   1727a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1727e:	2101      	movs	r1, #1
   17280:	2300      	movs	r3, #0
   17282:	e7e3      	b.n	1724c <d_print_comp_inner+0x5b8>
   17284:	4e5b      	ldr	r6, [pc, #364]	; (173f4 <d_print_comp_inner+0x760>)
   17286:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1728a:	f106 0a0d 	add.w	sl, r6, #13
   1728e:	f04f 0900 	mov.w	r9, #0
   17292:	e009      	b.n	172a8 <d_print_comp_inner+0x614>
   17294:	460b      	mov	r3, r1
   17296:	3101      	adds	r1, #1
   17298:	4556      	cmp	r6, sl
   1729a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1729e:	54e7      	strb	r7, [r4, r3]
   172a0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172a4:	f000 8756 	beq.w	18154 <d_print_comp_inner+0x14c0>
   172a8:	29ff      	cmp	r1, #255	; 0xff
   172aa:	f816 7b01 	ldrb.w	r7, [r6], #1
   172ae:	d1f1      	bne.n	17294 <d_print_comp_inner+0x600>
   172b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   172b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172bc:	4620      	mov	r0, r4
   172be:	4798      	blx	r3
   172c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   172c4:	3301      	adds	r3, #1
   172c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   172ca:	2101      	movs	r1, #1
   172cc:	2300      	movs	r3, #0
   172ce:	e7e3      	b.n	17298 <d_print_comp_inner+0x604>
   172d0:	4e49      	ldr	r6, [pc, #292]	; (173f8 <d_print_comp_inner+0x764>)
   172d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   172d6:	f106 0a18 	add.w	sl, r6, #24
   172da:	f04f 0900 	mov.w	r9, #0
   172de:	e009      	b.n	172f4 <d_print_comp_inner+0x660>
   172e0:	460b      	mov	r3, r1
   172e2:	3101      	adds	r1, #1
   172e4:	45b2      	cmp	sl, r6
   172e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172ea:	54e7      	strb	r7, [r4, r3]
   172ec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172f0:	f000 86e3 	beq.w	180ba <d_print_comp_inner+0x1426>
   172f4:	29ff      	cmp	r1, #255	; 0xff
   172f6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   172fa:	d1f1      	bne.n	172e0 <d_print_comp_inner+0x64c>
   172fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17300:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17304:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17308:	4620      	mov	r0, r4
   1730a:	4798      	blx	r3
   1730c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17310:	3301      	adds	r3, #1
   17312:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17316:	2101      	movs	r1, #1
   17318:	2300      	movs	r3, #0
   1731a:	e7e3      	b.n	172e4 <d_print_comp_inner+0x650>
   1731c:	4e37      	ldr	r6, [pc, #220]	; (173fc <d_print_comp_inner+0x768>)
   1731e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17322:	f106 0a0b 	add.w	sl, r6, #11
   17326:	f04f 0900 	mov.w	r9, #0
   1732a:	e009      	b.n	17340 <d_print_comp_inner+0x6ac>
   1732c:	460b      	mov	r3, r1
   1732e:	3101      	adds	r1, #1
   17330:	45b2      	cmp	sl, r6
   17332:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17336:	54e7      	strb	r7, [r4, r3]
   17338:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1733c:	f000 87ca 	beq.w	182d4 <d_print_comp_inner+0x1640>
   17340:	29ff      	cmp	r1, #255	; 0xff
   17342:	f816 7b01 	ldrb.w	r7, [r6], #1
   17346:	d1f1      	bne.n	1732c <d_print_comp_inner+0x698>
   17348:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1734c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17350:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17354:	4620      	mov	r0, r4
   17356:	4798      	blx	r3
   17358:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1735c:	3301      	adds	r3, #1
   1735e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17362:	2101      	movs	r1, #1
   17364:	2300      	movs	r3, #0
   17366:	e7e3      	b.n	17330 <d_print_comp_inner+0x69c>
   17368:	4e25      	ldr	r6, [pc, #148]	; (17400 <d_print_comp_inner+0x76c>)
   1736a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1736e:	f106 0a08 	add.w	sl, r6, #8
   17372:	f04f 0900 	mov.w	r9, #0
   17376:	e009      	b.n	1738c <d_print_comp_inner+0x6f8>
   17378:	460b      	mov	r3, r1
   1737a:	3101      	adds	r1, #1
   1737c:	45b2      	cmp	sl, r6
   1737e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17382:	54e7      	strb	r7, [r4, r3]
   17384:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17388:	f000 86c8 	beq.w	1811c <d_print_comp_inner+0x1488>
   1738c:	29ff      	cmp	r1, #255	; 0xff
   1738e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17392:	d1f1      	bne.n	17378 <d_print_comp_inner+0x6e4>
   17394:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17398:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1739c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173a0:	4620      	mov	r0, r4
   173a2:	4798      	blx	r3
   173a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173a8:	3301      	adds	r3, #1
   173aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173ae:	2101      	movs	r1, #1
   173b0:	2300      	movs	r3, #0
   173b2:	e7e3      	b.n	1737c <d_print_comp_inner+0x6e8>
   173b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173b8:	29ff      	cmp	r1, #255	; 0xff
   173ba:	f001 847c 	beq.w	18cb6 <d_print_comp_inner+0x2022>
   173be:	1c4a      	adds	r2, r1, #1
   173c0:	237e      	movs	r3, #126	; 0x7e
   173c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   173c6:	5463      	strb	r3, [r4, r1]
   173c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   173cc:	4641      	mov	r1, r8
   173ce:	68aa      	ldr	r2, [r5, #8]
   173d0:	4620      	mov	r0, r4
   173d2:	f002 fa03 	bl	197dc <d_print_comp>
   173d6:	e52b      	b.n	16e30 <d_print_comp_inner+0x19c>
   173d8:	68aa      	ldr	r2, [r5, #8]
   173da:	f002 f9ff 	bl	197dc <d_print_comp>
   173de:	e527      	b.n	16e30 <d_print_comp_inner+0x19c>
   173e0:	00024477 	.word	0x00024477
   173e4:	00024447 	.word	0x00024447
   173e8:	00024443 	.word	0x00024443
   173ec:	0002441b 	.word	0x0002441b
   173f0:	0002442f 	.word	0x0002442f
   173f4:	0002440c 	.word	0x0002440c
   173f8:	000243e7 	.word	0x000243e7
   173fc:	000243d0 	.word	0x000243d0
   17400:	000243db 	.word	0x000243db
   17404:	2200      	movs	r2, #0
   17406:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1740a:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1740e:	686e      	ldr	r6, [r5, #4]
   17410:	9300      	str	r3, [sp, #0]
   17412:	2e00      	cmp	r6, #0
   17414:	f000 864c 	beq.w	180b0 <d_print_comp_inner+0x141c>
   17418:	f10d 0910 	add.w	r9, sp, #16
   1741c:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   17420:	4617      	mov	r7, r2
   17422:	4696      	mov	lr, r2
   17424:	464b      	mov	r3, r9
   17426:	7831      	ldrb	r1, [r6, #0]
   17428:	601a      	str	r2, [r3, #0]
   1742a:	f1a1 021c 	sub.w	r2, r1, #28
   1742e:	2a04      	cmp	r2, #4
   17430:	605e      	str	r6, [r3, #4]
   17432:	f8c3 e008 	str.w	lr, [r3, #8]
   17436:	f8c3 c00c 	str.w	ip, [r3, #12]
   1743a:	f107 0701 	add.w	r7, r7, #1
   1743e:	4618      	mov	r0, r3
   17440:	461a      	mov	r2, r3
   17442:	f240 862a 	bls.w	1809a <d_print_comp_inner+0x1406>
   17446:	294c      	cmp	r1, #76	; 0x4c
   17448:	f000 8627 	beq.w	1809a <d_print_comp_inner+0x1406>
   1744c:	2904      	cmp	r1, #4
   1744e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17452:	f001 87bb 	beq.w	193cc <d_print_comp_inner+0x2738>
   17456:	2902      	cmp	r1, #2
   17458:	d11a      	bne.n	17490 <d_print_comp_inner+0x7fc>
   1745a:	f8d6 b008 	ldr.w	fp, [r6, #8]
   1745e:	f89b 3000 	ldrb.w	r3, [fp]
   17462:	2b46      	cmp	r3, #70	; 0x46
   17464:	f002 8035 	beq.w	194d2 <d_print_comp_inner+0x283e>
   17468:	462b      	mov	r3, r5
   1746a:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   1746e:	9601      	str	r6, [sp, #4]
   17470:	465d      	mov	r5, fp
   17472:	4676      	mov	r6, lr
   17474:	46a2      	mov	sl, r4
   17476:	469b      	mov	fp, r3
   17478:	782b      	ldrb	r3, [r5, #0]
   1747a:	f1a3 021c 	sub.w	r2, r3, #28
   1747e:	2a04      	cmp	r2, #4
   17480:	f241 805d 	bls.w	1853e <d_print_comp_inner+0x18aa>
   17484:	2b4c      	cmp	r3, #76	; 0x4c
   17486:	f001 805a 	beq.w	1853e <d_print_comp_inner+0x18aa>
   1748a:	9e01      	ldr	r6, [sp, #4]
   1748c:	4654      	mov	r4, sl
   1748e:	465d      	mov	r5, fp
   17490:	68aa      	ldr	r2, [r5, #8]
   17492:	4641      	mov	r1, r8
   17494:	4620      	mov	r0, r4
   17496:	f002 f9a1 	bl	197dc <d_print_comp>
   1749a:	7833      	ldrb	r3, [r6, #0]
   1749c:	2b04      	cmp	r3, #4
   1749e:	f002 8020 	beq.w	194e2 <d_print_comp_inner+0x284e>
   174a2:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   174a6:	2620      	movs	r6, #32
   174a8:	f859 5c08 	ldr.w	r5, [r9, #-8]
   174ac:	3f01      	subs	r7, #1
   174ae:	b985      	cbnz	r5, 174d2 <d_print_comp_inner+0x83e>
   174b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   174b4:	29ff      	cmp	r1, #255	; 0xff
   174b6:	f002 8043 	beq.w	19540 <d_print_comp_inner+0x28ac>
   174ba:	1c4b      	adds	r3, r1, #1
   174bc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   174c0:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   174c4:	5466      	strb	r6, [r4, r1]
   174c6:	4620      	mov	r0, r4
   174c8:	4641      	mov	r1, r8
   174ca:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   174ce:	f002 f995 	bl	197fc <d_print_mod>
   174d2:	f1a9 0910 	sub.w	r9, r9, #16
   174d6:	2f00      	cmp	r7, #0
   174d8:	d1e6      	bne.n	174a8 <d_print_comp_inner+0x814>
   174da:	9b00      	ldr	r3, [sp, #0]
   174dc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   174e0:	e4a6      	b.n	16e30 <d_print_comp_inner+0x19c>
   174e2:	4ed1      	ldr	r6, [pc, #836]	; (17828 <d_print_comp_inner+0xb94>)
   174e4:	686a      	ldr	r2, [r5, #4]
   174e6:	f002 f979 	bl	197dc <d_print_comp>
   174ea:	f106 0a05 	add.w	sl, r6, #5
   174ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   174f2:	f04f 0900 	mov.w	r9, #0
   174f6:	e009      	b.n	1750c <d_print_comp_inner+0x878>
   174f8:	460b      	mov	r3, r1
   174fa:	3101      	adds	r1, #1
   174fc:	45b2      	cmp	sl, r6
   174fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17502:	54e7      	strb	r7, [r4, r3]
   17504:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17508:	f000 86d1 	beq.w	182ae <d_print_comp_inner+0x161a>
   1750c:	29ff      	cmp	r1, #255	; 0xff
   1750e:	f816 7b01 	ldrb.w	r7, [r6], #1
   17512:	d1f1      	bne.n	174f8 <d_print_comp_inner+0x864>
   17514:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17518:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1751c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17520:	4620      	mov	r0, r4
   17522:	4798      	blx	r3
   17524:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17528:	3301      	adds	r3, #1
   1752a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1752e:	2101      	movs	r1, #1
   17530:	2300      	movs	r3, #0
   17532:	e7e3      	b.n	174fc <d_print_comp_inner+0x868>
   17534:	686a      	ldr	r2, [r5, #4]
   17536:	f002 f951 	bl	197dc <d_print_comp>
   1753a:	f018 0904 	ands.w	r9, r8, #4
   1753e:	f001 82aa 	beq.w	18a96 <d_print_comp_inner+0x1e02>
   17542:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17546:	29ff      	cmp	r1, #255	; 0xff
   17548:	f001 859a 	beq.w	19080 <d_print_comp_inner+0x23ec>
   1754c:	1c4a      	adds	r2, r1, #1
   1754e:	232e      	movs	r3, #46	; 0x2e
   17550:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17554:	5463      	strb	r3, [r4, r1]
   17556:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1755a:	68ad      	ldr	r5, [r5, #8]
   1755c:	782b      	ldrb	r3, [r5, #0]
   1755e:	2b46      	cmp	r3, #70	; 0x46
   17560:	f001 83cc 	beq.w	18cfc <d_print_comp_inner+0x2068>
   17564:	462a      	mov	r2, r5
   17566:	4641      	mov	r1, r8
   17568:	4620      	mov	r0, r4
   1756a:	f002 f937 	bl	197dc <d_print_comp>
   1756e:	e45f      	b.n	16e30 <d_print_comp_inner+0x19c>
   17570:	f011 0804 	ands.w	r8, r1, #4
   17574:	f041 808b 	bne.w	1868e <d_print_comp_inner+0x19fa>
   17578:	68af      	ldr	r7, [r5, #8]
   1757a:	686d      	ldr	r5, [r5, #4]
   1757c:	2f00      	cmp	r7, #0
   1757e:	f43f ac57 	beq.w	16e30 <d_print_comp_inner+0x19c>
   17582:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17586:	442f      	add	r7, r5
   17588:	e009      	b.n	1759e <d_print_comp_inner+0x90a>
   1758a:	460b      	mov	r3, r1
   1758c:	3101      	adds	r1, #1
   1758e:	42bd      	cmp	r5, r7
   17590:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17594:	54e6      	strb	r6, [r4, r3]
   17596:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1759a:	f43f ac49 	beq.w	16e30 <d_print_comp_inner+0x19c>
   1759e:	29ff      	cmp	r1, #255	; 0xff
   175a0:	f815 6b01 	ldrb.w	r6, [r5], #1
   175a4:	d1f1      	bne.n	1758a <d_print_comp_inner+0x8f6>
   175a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   175aa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   175ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   175b2:	4620      	mov	r0, r4
   175b4:	4798      	blx	r3
   175b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175ba:	3301      	adds	r3, #1
   175bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   175c0:	2101      	movs	r1, #1
   175c2:	2300      	movs	r3, #0
   175c4:	e7e3      	b.n	1758e <d_print_comp_inner+0x8fa>
   175c6:	2301      	movs	r3, #1
   175c8:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   175cc:	e430      	b.n	16e30 <d_print_comp_inner+0x19c>
   175ce:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   175d2:	2b00      	cmp	r3, #0
   175d4:	f041 8106 	bne.w	187e4 <d_print_comp_inner+0x1b50>
   175d8:	1d29      	adds	r1, r5, #4
   175da:	f7fd fa97 	bl	14b0c <d_lookup_template_argument.isra.6>
   175de:	2800      	cmp	r0, #0
   175e0:	f43f ac3a 	beq.w	16e58 <d_print_comp_inner+0x1c4>
   175e4:	7803      	ldrb	r3, [r0, #0]
   175e6:	2b2f      	cmp	r3, #47	; 0x2f
   175e8:	f001 83fc 	beq.w	18de4 <d_print_comp_inner+0x2150>
   175ec:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   175f0:	682b      	ldr	r3, [r5, #0]
   175f2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   175f6:	4602      	mov	r2, r0
   175f8:	4641      	mov	r1, r8
   175fa:	4620      	mov	r0, r4
   175fc:	f002 f8ee 	bl	197dc <d_print_comp>
   17600:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   17604:	e414      	b.n	16e30 <d_print_comp_inner+0x19c>
   17606:	2300      	movs	r3, #0
   17608:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   1760c:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   17610:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17614:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   17618:	f011 0f04 	tst.w	r1, #4
   1761c:	686e      	ldr	r6, [r5, #4]
   1761e:	d005      	beq.n	1762c <d_print_comp_inner+0x998>
   17620:	7833      	ldrb	r3, [r6, #0]
   17622:	b91b      	cbnz	r3, 1762c <d_print_comp_inner+0x998>
   17624:	68b2      	ldr	r2, [r6, #8]
   17626:	2a06      	cmp	r2, #6
   17628:	f001 853c 	beq.w	190a4 <d_print_comp_inner+0x2410>
   1762c:	4632      	mov	r2, r6
   1762e:	4641      	mov	r1, r8
   17630:	4620      	mov	r0, r4
   17632:	f002 f8d3 	bl	197dc <d_print_comp>
   17636:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1763a:	2b3c      	cmp	r3, #60	; 0x3c
   1763c:	f001 8274 	beq.w	18b28 <d_print_comp_inner+0x1e94>
   17640:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17644:	2bff      	cmp	r3, #255	; 0xff
   17646:	f001 8489 	beq.w	18f5c <d_print_comp_inner+0x22c8>
   1764a:	1c59      	adds	r1, r3, #1
   1764c:	223c      	movs	r2, #60	; 0x3c
   1764e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17652:	54e2      	strb	r2, [r4, r3]
   17654:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17658:	4641      	mov	r1, r8
   1765a:	68aa      	ldr	r2, [r5, #8]
   1765c:	4620      	mov	r0, r4
   1765e:	f002 f8bd 	bl	197dc <d_print_comp>
   17662:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   17666:	2b3e      	cmp	r3, #62	; 0x3e
   17668:	f001 8239 	beq.w	18ade <d_print_comp_inner+0x1e4a>
   1766c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17670:	2bff      	cmp	r3, #255	; 0xff
   17672:	f001 8460 	beq.w	18f36 <d_print_comp_inner+0x22a2>
   17676:	1c59      	adds	r1, r3, #1
   17678:	223e      	movs	r2, #62	; 0x3e
   1767a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1767e:	54e2      	strb	r2, [r4, r3]
   17680:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17684:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   17688:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   1768c:	f7ff bbd0 	b.w	16e30 <d_print_comp_inner+0x19c>
   17690:	686f      	ldr	r7, [r5, #4]
   17692:	2f00      	cmp	r7, #0
   17694:	f001 8082 	beq.w	1879c <d_print_comp_inner+0x1b08>
   17698:	4d64      	ldr	r5, [pc, #400]	; (1782c <d_print_comp_inner+0xb98>)
   1769a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1769e:	f105 0906 	add.w	r9, r5, #6
   176a2:	f04f 0800 	mov.w	r8, #0
   176a6:	e009      	b.n	176bc <d_print_comp_inner+0xa28>
   176a8:	460b      	mov	r3, r1
   176aa:	3101      	adds	r1, #1
   176ac:	45a9      	cmp	r9, r5
   176ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   176b2:	54e6      	strb	r6, [r4, r3]
   176b4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   176b8:	f000 8782 	beq.w	185c0 <d_print_comp_inner+0x192c>
   176bc:	29ff      	cmp	r1, #255	; 0xff
   176be:	f815 6b01 	ldrb.w	r6, [r5], #1
   176c2:	d1f1      	bne.n	176a8 <d_print_comp_inner+0xa14>
   176c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176c8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   176cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176d0:	4620      	mov	r0, r4
   176d2:	4798      	blx	r3
   176d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176d8:	3301      	adds	r3, #1
   176da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176de:	2101      	movs	r1, #1
   176e0:	2300      	movs	r3, #0
   176e2:	e7e3      	b.n	176ac <d_print_comp_inner+0xa18>
   176e4:	4e52      	ldr	r6, [pc, #328]	; (17830 <d_print_comp_inner+0xb9c>)
   176e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   176ea:	f106 0a0a 	add.w	sl, r6, #10
   176ee:	f04f 0900 	mov.w	r9, #0
   176f2:	e009      	b.n	17708 <d_print_comp_inner+0xa74>
   176f4:	460b      	mov	r3, r1
   176f6:	3101      	adds	r1, #1
   176f8:	4556      	cmp	r6, sl
   176fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   176fe:	54e7      	strb	r7, [r4, r3]
   17700:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17704:	f000 8701 	beq.w	1850a <d_print_comp_inner+0x1876>
   17708:	29ff      	cmp	r1, #255	; 0xff
   1770a:	f816 7b01 	ldrb.w	r7, [r6], #1
   1770e:	d1f1      	bne.n	176f4 <d_print_comp_inner+0xa60>
   17710:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17714:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17718:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1771c:	4620      	mov	r0, r4
   1771e:	4798      	blx	r3
   17720:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17724:	3301      	adds	r3, #1
   17726:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1772a:	2101      	movs	r1, #1
   1772c:	2300      	movs	r3, #0
   1772e:	e7e3      	b.n	176f8 <d_print_comp_inner+0xa64>
   17730:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17734:	792d      	ldrb	r5, [r5, #4]
   17736:	29ff      	cmp	r1, #255	; 0xff
   17738:	f001 82ab 	beq.w	18c92 <d_print_comp_inner+0x1ffe>
   1773c:	1c4b      	adds	r3, r1, #1
   1773e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17742:	5465      	strb	r5, [r4, r1]
   17744:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17748:	f7ff bb72 	b.w	16e30 <d_print_comp_inner+0x19c>
   1774c:	686a      	ldr	r2, [r5, #4]
   1774e:	f002 f845 	bl	197dc <d_print_comp>
   17752:	68aa      	ldr	r2, [r5, #8]
   17754:	4641      	mov	r1, r8
   17756:	4620      	mov	r0, r4
   17758:	f002 f840 	bl	197dc <d_print_comp>
   1775c:	f7ff bb68 	b.w	16e30 <d_print_comp_inner+0x19c>
   17760:	4e34      	ldr	r6, [pc, #208]	; (17834 <d_print_comp_inner+0xba0>)
   17762:	686a      	ldr	r2, [r5, #4]
   17764:	f002 f83a 	bl	197dc <d_print_comp>
   17768:	f106 0a08 	add.w	sl, r6, #8
   1776c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17770:	f04f 0900 	mov.w	r9, #0
   17774:	e009      	b.n	1778a <d_print_comp_inner+0xaf6>
   17776:	460b      	mov	r3, r1
   17778:	3101      	adds	r1, #1
   1777a:	4556      	cmp	r6, sl
   1777c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17780:	54e7      	strb	r7, [r4, r3]
   17782:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17786:	f000 8508 	beq.w	1819a <d_print_comp_inner+0x1506>
   1778a:	29ff      	cmp	r1, #255	; 0xff
   1778c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17790:	d1f1      	bne.n	17776 <d_print_comp_inner+0xae2>
   17792:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17796:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1779a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1779e:	4620      	mov	r0, r4
   177a0:	4798      	blx	r3
   177a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177a6:	3301      	adds	r3, #1
   177a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   177ac:	2101      	movs	r1, #1
   177ae:	2300      	movs	r3, #0
   177b0:	e7e3      	b.n	1777a <d_print_comp_inner+0xae6>
   177b2:	686a      	ldr	r2, [r5, #4]
   177b4:	b10a      	cbz	r2, 177ba <d_print_comp_inner+0xb26>
   177b6:	f002 f811 	bl	197dc <d_print_comp>
   177ba:	68ab      	ldr	r3, [r5, #8]
   177bc:	2b00      	cmp	r3, #0
   177be:	f43f ab37 	beq.w	16e30 <d_print_comp_inner+0x19c>
   177c2:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   177c6:	2efd      	cmp	r6, #253	; 0xfd
   177c8:	f201 81bc 	bhi.w	18b44 <d_print_comp_inner+0x1eb0>
   177cc:	4f1a      	ldr	r7, [pc, #104]	; (17838 <d_print_comp_inner+0xba4>)
   177ce:	f04f 0a00 	mov.w	sl, #0
   177d2:	f107 0b02 	add.w	fp, r7, #2
   177d6:	4631      	mov	r1, r6
   177d8:	e009      	b.n	177ee <d_print_comp_inner+0xb5a>
   177da:	460b      	mov	r3, r1
   177dc:	3101      	adds	r1, #1
   177de:	455f      	cmp	r7, fp
   177e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   177e4:	54e6      	strb	r6, [r4, r3]
   177e6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   177ea:	f000 86c1 	beq.w	18570 <d_print_comp_inner+0x18dc>
   177ee:	29ff      	cmp	r1, #255	; 0xff
   177f0:	f817 6b01 	ldrb.w	r6, [r7], #1
   177f4:	d1f1      	bne.n	177da <d_print_comp_inner+0xb46>
   177f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   177fa:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   177fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17802:	4620      	mov	r0, r4
   17804:	4798      	blx	r3
   17806:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1780a:	3301      	adds	r3, #1
   1780c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17810:	2101      	movs	r1, #1
   17812:	2300      	movs	r3, #0
   17814:	e7e3      	b.n	177de <d_print_comp_inner+0xb4a>
   17816:	4e09      	ldr	r6, [pc, #36]	; (1783c <d_print_comp_inner+0xba8>)
   17818:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1781c:	f106 0a09 	add.w	sl, r6, #9
   17820:	f04f 0900 	mov.w	r9, #0
   17824:	e016      	b.n	17854 <d_print_comp_inner+0xbc0>
   17826:	bf00      	nop
   17828:	0002439c 	.word	0x0002439c
   1782c:	000245a8 	.word	0x000245a8
   17830:	00024594 	.word	0x00024594
   17834:	0002460f 	.word	0x0002460f
   17838:	00024530 	.word	0x00024530
   1783c:	0002453f 	.word	0x0002453f
   17840:	460b      	mov	r3, r1
   17842:	3101      	adds	r1, #1
   17844:	4556      	cmp	r6, sl
   17846:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1784a:	54e7      	strb	r7, [r4, r3]
   1784c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17850:	f000 8594 	beq.w	1837c <d_print_comp_inner+0x16e8>
   17854:	29ff      	cmp	r1, #255	; 0xff
   17856:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1785a:	d1f1      	bne.n	17840 <d_print_comp_inner+0xbac>
   1785c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17860:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17868:	4620      	mov	r0, r4
   1786a:	4798      	blx	r3
   1786c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17870:	3301      	adds	r3, #1
   17872:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17876:	2101      	movs	r1, #1
   17878:	2300      	movs	r3, #0
   1787a:	e7e3      	b.n	17844 <d_print_comp_inner+0xbb0>
   1787c:	4ed1      	ldr	r6, [pc, #836]	; (17bc4 <d_print_comp_inner+0xf30>)
   1787e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17882:	f106 0a09 	add.w	sl, r6, #9
   17886:	f04f 0900 	mov.w	r9, #0
   1788a:	e009      	b.n	178a0 <d_print_comp_inner+0xc0c>
   1788c:	460b      	mov	r3, r1
   1788e:	3101      	adds	r1, #1
   17890:	4556      	cmp	r6, sl
   17892:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17896:	54e7      	strb	r7, [r4, r3]
   17898:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1789c:	f000 8597 	beq.w	183ce <d_print_comp_inner+0x173a>
   178a0:	29ff      	cmp	r1, #255	; 0xff
   178a2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   178a6:	d1f1      	bne.n	1788c <d_print_comp_inner+0xbf8>
   178a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   178ac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   178b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   178b4:	4620      	mov	r0, r4
   178b6:	4798      	blx	r3
   178b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   178bc:	3301      	adds	r3, #1
   178be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   178c2:	2101      	movs	r1, #1
   178c4:	2300      	movs	r3, #0
   178c6:	e7e3      	b.n	17890 <d_print_comp_inner+0xbfc>
   178c8:	f8d5 a004 	ldr.w	sl, [r5, #4]
   178cc:	4dbe      	ldr	r5, [pc, #760]	; (17bc8 <d_print_comp_inner+0xf34>)
   178ce:	f8da 7008 	ldr.w	r7, [sl, #8]
   178d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   178d6:	f105 0808 	add.w	r8, r5, #8
   178da:	f04f 0900 	mov.w	r9, #0
   178de:	e009      	b.n	178f4 <d_print_comp_inner+0xc60>
   178e0:	460b      	mov	r3, r1
   178e2:	3101      	adds	r1, #1
   178e4:	45a8      	cmp	r8, r5
   178e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   178ea:	54e6      	strb	r6, [r4, r3]
   178ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   178f0:	f000 8506 	beq.w	18300 <d_print_comp_inner+0x166c>
   178f4:	29ff      	cmp	r1, #255	; 0xff
   178f6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   178fa:	d1f1      	bne.n	178e0 <d_print_comp_inner+0xc4c>
   178fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17900:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17904:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17908:	4620      	mov	r0, r4
   1790a:	4798      	blx	r3
   1790c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17910:	3301      	adds	r3, #1
   17912:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17916:	2101      	movs	r1, #1
   17918:	2300      	movs	r3, #0
   1791a:	e7e3      	b.n	178e4 <d_print_comp_inner+0xc50>
   1791c:	686a      	ldr	r2, [r5, #4]
   1791e:	68ae      	ldr	r6, [r5, #8]
   17920:	b10a      	cbz	r2, 17926 <d_print_comp_inner+0xc92>
   17922:	f001 ff5b 	bl	197dc <d_print_comp>
   17926:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1792a:	2bff      	cmp	r3, #255	; 0xff
   1792c:	f001 82b1 	beq.w	18e92 <d_print_comp_inner+0x21fe>
   17930:	1c5a      	adds	r2, r3, #1
   17932:	257b      	movs	r5, #123	; 0x7b
   17934:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17938:	4641      	mov	r1, r8
   1793a:	54e5      	strb	r5, [r4, r3]
   1793c:	4632      	mov	r2, r6
   1793e:	4620      	mov	r0, r4
   17940:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17944:	f001 ff4a 	bl	197dc <d_print_comp>
   17948:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1794c:	29ff      	cmp	r1, #255	; 0xff
   1794e:	f001 81e7 	beq.w	18d20 <d_print_comp_inner+0x208c>
   17952:	1c4a      	adds	r2, r1, #1
   17954:	237d      	movs	r3, #125	; 0x7d
   17956:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1795a:	5463      	strb	r3, [r4, r1]
   1795c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17960:	f7ff ba66 	b.w	16e30 <d_print_comp_inner+0x19c>
   17964:	f8d5 9004 	ldr.w	r9, [r5, #4]
   17968:	68ae      	ldr	r6, [r5, #8]
   1796a:	f899 3000 	ldrb.w	r3, [r9]
   1796e:	2b31      	cmp	r3, #49	; 0x31
   17970:	f000 87cb 	beq.w	1890a <d_print_comp_inner+0x1c76>
   17974:	2b33      	cmp	r3, #51	; 0x33
   17976:	f041 86d3 	bne.w	19720 <d_print_comp_inner+0x2a8c>
   1797a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1797e:	29ff      	cmp	r1, #255	; 0xff
   17980:	f001 84c3 	beq.w	1930a <d_print_comp_inner+0x2676>
   17984:	1c4a      	adds	r2, r1, #1
   17986:	2328      	movs	r3, #40	; 0x28
   17988:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1798c:	5463      	strb	r3, [r4, r1]
   1798e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17992:	a904      	add	r1, sp, #16
   17994:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17998:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1799c:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   179a0:	4620      	mov	r0, r4
   179a2:	4641      	mov	r1, r8
   179a4:	9305      	str	r3, [sp, #20]
   179a6:	9204      	str	r2, [sp, #16]
   179a8:	f7ff f974 	bl	16c94 <d_print_comp_inner>
   179ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   179b0:	9b05      	ldr	r3, [sp, #20]
   179b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   179b6:	29ff      	cmp	r1, #255	; 0xff
   179b8:	f001 8496 	beq.w	192e8 <d_print_comp_inner+0x2654>
   179bc:	2329      	movs	r3, #41	; 0x29
   179be:	1c4a      	adds	r2, r1, #1
   179c0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   179c4:	5463      	strb	r3, [r4, r1]
   179c6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   179ca:	4632      	mov	r2, r6
   179cc:	4641      	mov	r1, r8
   179ce:	4620      	mov	r0, r4
   179d0:	f002 fd2a 	bl	1a428 <d_print_subexpr>
   179d4:	f7ff ba2c 	b.w	16e30 <d_print_comp_inner+0x19c>
   179d8:	686a      	ldr	r2, [r5, #4]
   179da:	f002 fce7 	bl	1a3ac <d_print_expr_op>
   179de:	f7ff ba27 	b.w	16e30 <d_print_comp_inner+0x19c>
   179e2:	f011 0f20 	tst.w	r1, #32
   179e6:	f040 8753 	bne.w	18890 <d_print_comp_inner+0x1bfc>
   179ea:	686a      	ldr	r2, [r5, #4]
   179ec:	b11a      	cbz	r2, 179f6 <d_print_comp_inner+0xd62>
   179ee:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   179f2:	f001 81d0 	beq.w	18d96 <d_print_comp_inner+0x2102>
   179f6:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   179fa:	f105 0208 	add.w	r2, r5, #8
   179fe:	4641      	mov	r1, r8
   17a00:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17a04:	4620      	mov	r0, r4
   17a06:	f002 fbdd 	bl	1a1c4 <d_print_function_type.isra.11>
   17a0a:	f7ff ba11 	b.w	16e30 <d_print_comp_inner+0x19c>
   17a0e:	f011 0804 	ands.w	r8, r1, #4
   17a12:	686b      	ldr	r3, [r5, #4]
   17a14:	f040 8612 	bne.w	1863c <d_print_comp_inner+0x19a8>
   17a18:	e893 00a0 	ldmia.w	r3, {r5, r7}
   17a1c:	2f00      	cmp	r7, #0
   17a1e:	f43f aa07 	beq.w	16e30 <d_print_comp_inner+0x19c>
   17a22:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a26:	442f      	add	r7, r5
   17a28:	e009      	b.n	17a3e <d_print_comp_inner+0xdaa>
   17a2a:	460b      	mov	r3, r1
   17a2c:	3101      	adds	r1, #1
   17a2e:	42bd      	cmp	r5, r7
   17a30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a34:	54e6      	strb	r6, [r4, r3]
   17a36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17a3a:	f43f a9f9 	beq.w	16e30 <d_print_comp_inner+0x19c>
   17a3e:	29ff      	cmp	r1, #255	; 0xff
   17a40:	f815 6b01 	ldrb.w	r6, [r5], #1
   17a44:	d1f1      	bne.n	17a2a <d_print_comp_inner+0xd96>
   17a46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a4a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17a4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17a52:	4620      	mov	r0, r4
   17a54:	4798      	blx	r3
   17a56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a5a:	3301      	adds	r3, #1
   17a5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a60:	2101      	movs	r1, #1
   17a62:	2300      	movs	r3, #0
   17a64:	e7e3      	b.n	17a2e <d_print_comp_inner+0xd9a>
   17a66:	6869      	ldr	r1, [r5, #4]
   17a68:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   17a6c:	780b      	ldrb	r3, [r1, #0]
   17a6e:	2f00      	cmp	r7, #0
   17a70:	f040 85e1 	bne.w	18636 <d_print_comp_inner+0x19a2>
   17a74:	2b05      	cmp	r3, #5
   17a76:	f001 81c7 	beq.w	18e08 <d_print_comp_inner+0x2174>
   17a7a:	2b23      	cmp	r3, #35	; 0x23
   17a7c:	f000 8689 	beq.w	18792 <d_print_comp_inner+0x1afe>
   17a80:	782a      	ldrb	r2, [r5, #0]
   17a82:	429a      	cmp	r2, r3
   17a84:	f000 8685 	beq.w	18792 <d_print_comp_inner+0x1afe>
   17a88:	2b24      	cmp	r3, #36	; 0x24
   17a8a:	f47f a9eb 	bne.w	16e64 <d_print_comp_inner+0x1d0>
   17a8e:	a814      	add	r0, sp, #80	; 0x50
   17a90:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17a94:	684a      	ldr	r2, [r1, #4]
   17a96:	f840 3d40 	str.w	r3, [r0, #-64]!
   17a9a:	2100      	movs	r1, #0
   17a9c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17aa0:	9505      	str	r5, [sp, #20]
   17aa2:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17aa6:	9106      	str	r1, [sp, #24]
   17aa8:	9307      	str	r3, [sp, #28]
   17aaa:	2a00      	cmp	r2, #0
   17aac:	f47f a9e8 	bne.w	16e80 <d_print_comp_inner+0x1ec>
   17ab0:	f7ff b9e5 	b.w	16e7e <d_print_comp_inner+0x1ea>
   17ab4:	686a      	ldr	r2, [r5, #4]
   17ab6:	f001 fe91 	bl	197dc <d_print_comp>
   17aba:	f7ff b9b9 	b.w	16e30 <d_print_comp_inner+0x19c>
   17abe:	ab14      	add	r3, sp, #80	; 0x50
   17ac0:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   17ac4:	f843 2d40 	str.w	r2, [r3, #-64]!
   17ac8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17acc:	68aa      	ldr	r2, [r5, #8]
   17ace:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17ad2:	9307      	str	r3, [sp, #28]
   17ad4:	2600      	movs	r6, #0
   17ad6:	9505      	str	r5, [sp, #20]
   17ad8:	9606      	str	r6, [sp, #24]
   17ada:	f001 fe7f 	bl	197dc <d_print_comp>
   17ade:	9b06      	ldr	r3, [sp, #24]
   17ae0:	b923      	cbnz	r3, 17aec <d_print_comp_inner+0xe58>
   17ae2:	462a      	mov	r2, r5
   17ae4:	4641      	mov	r1, r8
   17ae6:	4620      	mov	r0, r4
   17ae8:	f001 fe88 	bl	197fc <d_print_mod>
   17aec:	9b04      	ldr	r3, [sp, #16]
   17aee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17af2:	f7ff b99d 	b.w	16e30 <d_print_comp_inner+0x19c>
   17af6:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   17afa:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   17afe:	f849 bd40 	str.w	fp, [r9, #-64]!
   17b02:	2200      	movs	r2, #0
   17b04:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17b08:	f8cd b000 	str.w	fp, [sp]
   17b0c:	4659      	mov	r1, fp
   17b0e:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   17b12:	9505      	str	r5, [sp, #20]
   17b14:	9206      	str	r2, [sp, #24]
   17b16:	9307      	str	r3, [sp, #28]
   17b18:	2900      	cmp	r1, #0
   17b1a:	f001 83a0 	beq.w	1925e <d_print_comp_inner+0x25ca>
   17b1e:	684b      	ldr	r3, [r1, #4]
   17b20:	781b      	ldrb	r3, [r3, #0]
   17b22:	3b19      	subs	r3, #25
   17b24:	2b02      	cmp	r3, #2
   17b26:	f201 839a 	bhi.w	1925e <d_print_comp_inner+0x25ca>
   17b2a:	46ac      	mov	ip, r5
   17b2c:	2701      	movs	r7, #1
   17b2e:	460e      	mov	r6, r1
   17b30:	464d      	mov	r5, r9
   17b32:	e004      	b.n	17b3e <d_print_comp_inner+0xeaa>
   17b34:	6873      	ldr	r3, [r6, #4]
   17b36:	781b      	ldrb	r3, [r3, #0]
   17b38:	3b19      	subs	r3, #25
   17b3a:	2b02      	cmp	r3, #2
   17b3c:	d81b      	bhi.n	17b76 <d_print_comp_inner+0xee2>
   17b3e:	68b3      	ldr	r3, [r6, #8]
   17b40:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17b44:	aa14      	add	r2, sp, #80	; 0x50
   17b46:	eb02 0b0e 	add.w	fp, r2, lr
   17b4a:	b98b      	cbnz	r3, 17b70 <d_print_comp_inner+0xedc>
   17b4c:	2f03      	cmp	r7, #3
   17b4e:	f201 80f9 	bhi.w	18d44 <d_print_comp_inner+0x20b0>
   17b52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17b56:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   17b5a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17b5e:	f84b 5c40 	str.w	r5, [fp, #-64]
   17b62:	2301      	movs	r3, #1
   17b64:	eb09 050e 	add.w	r5, r9, lr
   17b68:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   17b6c:	3701      	adds	r7, #1
   17b6e:	60b3      	str	r3, [r6, #8]
   17b70:	6836      	ldr	r6, [r6, #0]
   17b72:	2e00      	cmp	r6, #0
   17b74:	d1de      	bne.n	17b34 <d_print_comp_inner+0xea0>
   17b76:	f8dc 2008 	ldr.w	r2, [ip, #8]
   17b7a:	4641      	mov	r1, r8
   17b7c:	4620      	mov	r0, r4
   17b7e:	4665      	mov	r5, ip
   17b80:	f001 fe2c 	bl	197dc <d_print_comp>
   17b84:	9b06      	ldr	r3, [sp, #24]
   17b86:	9a00      	ldr	r2, [sp, #0]
   17b88:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17b8c:	2b00      	cmp	r3, #0
   17b8e:	f47f a94f 	bne.w	16e30 <d_print_comp_inner+0x19c>
   17b92:	2f01      	cmp	r7, #1
   17b94:	d00c      	beq.n	17bb0 <d_print_comp_inner+0xf1c>
   17b96:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17b9a:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17b9e:	3f01      	subs	r7, #1
   17ba0:	4641      	mov	r1, r8
   17ba2:	4620      	mov	r0, r4
   17ba4:	f001 fe2a 	bl	197fc <d_print_mod>
   17ba8:	2f01      	cmp	r7, #1
   17baa:	f1a9 0910 	sub.w	r9, r9, #16
   17bae:	d1f4      	bne.n	17b9a <d_print_comp_inner+0xf06>
   17bb0:	1d2a      	adds	r2, r5, #4
   17bb2:	4641      	mov	r1, r8
   17bb4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17bb8:	4620      	mov	r0, r4
   17bba:	f002 fa27 	bl	1a00c <d_print_array_type.isra.10>
   17bbe:	f7ff b937 	b.w	16e30 <d_print_comp_inner+0x19c>
   17bc2:	bf00      	nop
   17bc4:	0002453f 	.word	0x0002453f
   17bc8:	00024533 	.word	0x00024533
   17bcc:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17bd0:	2b00      	cmp	r3, #0
   17bd2:	f040 8674 	bne.w	188be <d_print_comp_inner+0x1c2a>
   17bd6:	686a      	ldr	r2, [r5, #4]
   17bd8:	4bd5      	ldr	r3, [pc, #852]	; (17f30 <d_print_comp_inner+0x129c>)
   17bda:	6851      	ldr	r1, [r2, #4]
   17bdc:	4299      	cmp	r1, r3
   17bde:	f000 866a 	beq.w	188b6 <d_print_comp_inner+0x1c22>
   17be2:	4641      	mov	r1, r8
   17be4:	4620      	mov	r0, r4
   17be6:	f001 fdf9 	bl	197dc <d_print_comp>
   17bea:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17bee:	2bff      	cmp	r3, #255	; 0xff
   17bf0:	f001 82b2 	beq.w	19158 <d_print_comp_inner+0x24c4>
   17bf4:	1c59      	adds	r1, r3, #1
   17bf6:	2220      	movs	r2, #32
   17bf8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17bfc:	54e2      	strb	r2, [r4, r3]
   17bfe:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17c02:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17c06:	2b00      	cmp	r3, #0
   17c08:	f000 8595 	beq.w	18736 <d_print_comp_inner+0x1aa2>
   17c0c:	4dc9      	ldr	r5, [pc, #804]	; (17f34 <d_print_comp_inner+0x12a0>)
   17c0e:	f04f 0800 	mov.w	r8, #0
   17c12:	1daf      	adds	r7, r5, #6
   17c14:	e009      	b.n	17c2a <d_print_comp_inner+0xf96>
   17c16:	460b      	mov	r3, r1
   17c18:	3101      	adds	r1, #1
   17c1a:	42bd      	cmp	r5, r7
   17c1c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c20:	54e6      	strb	r6, [r4, r3]
   17c22:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17c26:	f43f a903 	beq.w	16e30 <d_print_comp_inner+0x19c>
   17c2a:	29ff      	cmp	r1, #255	; 0xff
   17c2c:	f815 6b01 	ldrb.w	r6, [r5], #1
   17c30:	d1f1      	bne.n	17c16 <d_print_comp_inner+0xf82>
   17c32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c36:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17c3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c3e:	4620      	mov	r0, r4
   17c40:	4798      	blx	r3
   17c42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c46:	3301      	adds	r3, #1
   17c48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c4c:	2101      	movs	r1, #1
   17c4e:	2300      	movs	r3, #0
   17c50:	e7e3      	b.n	17c1a <d_print_comp_inner+0xf86>
   17c52:	4eb9      	ldr	r6, [pc, #740]	; (17f38 <d_print_comp_inner+0x12a4>)
   17c54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c58:	f106 090e 	add.w	r9, r6, #14
   17c5c:	f04f 0800 	mov.w	r8, #0
   17c60:	e009      	b.n	17c76 <d_print_comp_inner+0xfe2>
   17c62:	460b      	mov	r3, r1
   17c64:	3101      	adds	r1, #1
   17c66:	45b1      	cmp	r9, r6
   17c68:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c6c:	54e7      	strb	r7, [r4, r3]
   17c6e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c72:	f000 83b3 	beq.w	183dc <d_print_comp_inner+0x1748>
   17c76:	29ff      	cmp	r1, #255	; 0xff
   17c78:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c7c:	d1f1      	bne.n	17c62 <d_print_comp_inner+0xfce>
   17c7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c82:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17c86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c8a:	4620      	mov	r0, r4
   17c8c:	4798      	blx	r3
   17c8e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c92:	3301      	adds	r3, #1
   17c94:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c98:	2101      	movs	r1, #1
   17c9a:	2300      	movs	r3, #0
   17c9c:	e7e3      	b.n	17c66 <d_print_comp_inner+0xfd2>
   17c9e:	4ea7      	ldr	r6, [pc, #668]	; (17f3c <d_print_comp_inner+0x12a8>)
   17ca0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17ca4:	f106 0a1a 	add.w	sl, r6, #26
   17ca8:	f04f 0900 	mov.w	r9, #0
   17cac:	e009      	b.n	17cc2 <d_print_comp_inner+0x102e>
   17cae:	460b      	mov	r3, r1
   17cb0:	3101      	adds	r1, #1
   17cb2:	4556      	cmp	r6, sl
   17cb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cb8:	54e7      	strb	r7, [r4, r3]
   17cba:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17cbe:	f000 82ef 	beq.w	182a0 <d_print_comp_inner+0x160c>
   17cc2:	29ff      	cmp	r1, #255	; 0xff
   17cc4:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17cc8:	d1f1      	bne.n	17cae <d_print_comp_inner+0x101a>
   17cca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17cce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17cd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17cd6:	4620      	mov	r0, r4
   17cd8:	4798      	blx	r3
   17cda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17cde:	3301      	adds	r3, #1
   17ce0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ce4:	2101      	movs	r1, #1
   17ce6:	2300      	movs	r3, #0
   17ce8:	e7e3      	b.n	17cb2 <d_print_comp_inner+0x101e>
   17cea:	6869      	ldr	r1, [r5, #4]
   17cec:	f7fc ff2a 	bl	14b44 <d_find_pack>
   17cf0:	f04f 0900 	mov.w	r9, #0
   17cf4:	2800      	cmp	r0, #0
   17cf6:	f001 835d 	beq.w	193b4 <d_print_comp_inner+0x2720>
   17cfa:	7803      	ldrb	r3, [r0, #0]
   17cfc:	2b2f      	cmp	r3, #47	; 0x2f
   17cfe:	f040 8457 	bne.w	185b0 <d_print_comp_inner+0x191c>
   17d02:	6843      	ldr	r3, [r0, #4]
   17d04:	2b00      	cmp	r3, #0
   17d06:	f000 8453 	beq.w	185b0 <d_print_comp_inner+0x191c>
   17d0a:	6880      	ldr	r0, [r0, #8]
   17d0c:	f109 0901 	add.w	r9, r9, #1
   17d10:	2800      	cmp	r0, #0
   17d12:	d1f2      	bne.n	17cfa <d_print_comp_inner+0x1066>
   17d14:	686b      	ldr	r3, [r5, #4]
   17d16:	9300      	str	r3, [sp, #0]
   17d18:	f109 33ff 	add.w	r3, r9, #4294967295
   17d1c:	9301      	str	r3, [sp, #4]
   17d1e:	f04f 0a00 	mov.w	sl, #0
   17d22:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   17d26:	9a00      	ldr	r2, [sp, #0]
   17d28:	4641      	mov	r1, r8
   17d2a:	4620      	mov	r0, r4
   17d2c:	f001 fd56 	bl	197dc <d_print_comp>
   17d30:	9b01      	ldr	r3, [sp, #4]
   17d32:	42bb      	cmp	r3, r7
   17d34:	f340 81ab 	ble.w	1808e <d_print_comp_inner+0x13fa>
   17d38:	4d81      	ldr	r5, [pc, #516]	; (17f40 <d_print_comp_inner+0x12ac>)
   17d3a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17d3e:	f105 0b02 	add.w	fp, r5, #2
   17d42:	e009      	b.n	17d58 <d_print_comp_inner+0x10c4>
   17d44:	460b      	mov	r3, r1
   17d46:	3101      	adds	r1, #1
   17d48:	45ab      	cmp	fp, r5
   17d4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d4e:	54e6      	strb	r6, [r4, r3]
   17d50:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17d54:	f000 819b 	beq.w	1808e <d_print_comp_inner+0x13fa>
   17d58:	29ff      	cmp	r1, #255	; 0xff
   17d5a:	f815 6b01 	ldrb.w	r6, [r5], #1
   17d5e:	d1f1      	bne.n	17d44 <d_print_comp_inner+0x10b0>
   17d60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d64:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17d68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d6c:	4620      	mov	r0, r4
   17d6e:	4798      	blx	r3
   17d70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d74:	3301      	adds	r3, #1
   17d76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d7a:	2101      	movs	r1, #1
   17d7c:	2300      	movs	r3, #0
   17d7e:	e7e3      	b.n	17d48 <d_print_comp_inner+0x10b4>
   17d80:	4e70      	ldr	r6, [pc, #448]	; (17f44 <d_print_comp_inner+0x12b0>)
   17d82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d86:	f106 0a16 	add.w	sl, r6, #22
   17d8a:	f04f 0900 	mov.w	r9, #0
   17d8e:	e009      	b.n	17da4 <d_print_comp_inner+0x1110>
   17d90:	460b      	mov	r3, r1
   17d92:	3101      	adds	r1, #1
   17d94:	45b2      	cmp	sl, r6
   17d96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d9a:	54e7      	strb	r7, [r4, r3]
   17d9c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17da0:	f000 835f 	beq.w	18462 <d_print_comp_inner+0x17ce>
   17da4:	29ff      	cmp	r1, #255	; 0xff
   17da6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17daa:	d1f1      	bne.n	17d90 <d_print_comp_inner+0x10fc>
   17dac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17db0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17db4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17db8:	4620      	mov	r0, r4
   17dba:	4798      	blx	r3
   17dbc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17dc0:	3301      	adds	r3, #1
   17dc2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17dc6:	2101      	movs	r1, #1
   17dc8:	2300      	movs	r3, #0
   17dca:	e7e3      	b.n	17d94 <d_print_comp_inner+0x1100>
   17dcc:	4e5e      	ldr	r6, [pc, #376]	; (17f48 <d_print_comp_inner+0x12b4>)
   17dce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17dd2:	f106 0a0e 	add.w	sl, r6, #14
   17dd6:	f04f 0900 	mov.w	r9, #0
   17dda:	e009      	b.n	17df0 <d_print_comp_inner+0x115c>
   17ddc:	460b      	mov	r3, r1
   17dde:	3101      	adds	r1, #1
   17de0:	4556      	cmp	r6, sl
   17de2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17de6:	54e7      	strb	r7, [r4, r3]
   17de8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17dec:	f000 83a0 	beq.w	18530 <d_print_comp_inner+0x189c>
   17df0:	29ff      	cmp	r1, #255	; 0xff
   17df2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17df6:	d1f1      	bne.n	17ddc <d_print_comp_inner+0x1148>
   17df8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17dfc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17e00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e04:	4620      	mov	r0, r4
   17e06:	4798      	blx	r3
   17e08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e0c:	3301      	adds	r3, #1
   17e0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e12:	2101      	movs	r1, #1
   17e14:	2300      	movs	r3, #0
   17e16:	e7e3      	b.n	17de0 <d_print_comp_inner+0x114c>
   17e18:	686a      	ldr	r2, [r5, #4]
   17e1a:	7811      	ldrb	r1, [r2, #0]
   17e1c:	2927      	cmp	r1, #39	; 0x27
   17e1e:	f000 8615 	beq.w	18a4c <d_print_comp_inner+0x1db8>
   17e22:	2600      	movs	r6, #0
   17e24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17e28:	29ff      	cmp	r1, #255	; 0xff
   17e2a:	f001 80c5 	beq.w	18fb8 <d_print_comp_inner+0x2324>
   17e2e:	2328      	movs	r3, #40	; 0x28
   17e30:	1c4a      	adds	r2, r1, #1
   17e32:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17e36:	5463      	strb	r3, [r4, r1]
   17e38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17e3c:	686a      	ldr	r2, [r5, #4]
   17e3e:	4641      	mov	r1, r8
   17e40:	4620      	mov	r0, r4
   17e42:	f001 fccb 	bl	197dc <d_print_comp>
   17e46:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17e4a:	2bff      	cmp	r3, #255	; 0xff
   17e4c:	f001 8099 	beq.w	18f82 <d_print_comp_inner+0x22ee>
   17e50:	1c59      	adds	r1, r3, #1
   17e52:	2229      	movs	r2, #41	; 0x29
   17e54:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e58:	54e2      	strb	r2, [r4, r3]
   17e5a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17e5e:	782b      	ldrb	r3, [r5, #0]
   17e60:	2b3d      	cmp	r3, #61	; 0x3d
   17e62:	f000 86e6 	beq.w	18c32 <d_print_comp_inner+0x1f9e>
   17e66:	2e08      	cmp	r6, #8
   17e68:	f000 867f 	beq.w	18b6a <d_print_comp_inner+0x1ed6>
   17e6c:	68aa      	ldr	r2, [r5, #8]
   17e6e:	4641      	mov	r1, r8
   17e70:	4620      	mov	r0, r4
   17e72:	f001 fcb3 	bl	197dc <d_print_comp>
   17e76:	f7fe bfdb 	b.w	16e30 <d_print_comp_inner+0x19c>
   17e7a:	2301      	movs	r3, #1
   17e7c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17e80:	f7fe bfd6 	b.w	16e30 <d_print_comp_inner+0x19c>
   17e84:	686a      	ldr	r2, [r5, #4]
   17e86:	4931      	ldr	r1, [pc, #196]	; (17f4c <d_print_comp_inner+0x12b8>)
   17e88:	a804      	add	r0, sp, #16
   17e8a:	f006 fd9f 	bl	1e9cc <sprintf>
   17e8e:	a804      	add	r0, sp, #16
   17e90:	f006 ff36 	bl	1ed00 <strlen>
   17e94:	2800      	cmp	r0, #0
   17e96:	f43e afcb 	beq.w	16e30 <d_print_comp_inner+0x19c>
   17e9a:	ad04      	add	r5, sp, #16
   17e9c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17ea0:	182f      	adds	r7, r5, r0
   17ea2:	f04f 0800 	mov.w	r8, #0
   17ea6:	e009      	b.n	17ebc <d_print_comp_inner+0x1228>
   17ea8:	460b      	mov	r3, r1
   17eaa:	3101      	adds	r1, #1
   17eac:	42bd      	cmp	r5, r7
   17eae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17eb2:	54e6      	strb	r6, [r4, r3]
   17eb4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17eb8:	f43e afba 	beq.w	16e30 <d_print_comp_inner+0x19c>
   17ebc:	29ff      	cmp	r1, #255	; 0xff
   17ebe:	f815 6b01 	ldrb.w	r6, [r5], #1
   17ec2:	d1f1      	bne.n	17ea8 <d_print_comp_inner+0x1214>
   17ec4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ec8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17ecc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ed0:	4620      	mov	r0, r4
   17ed2:	4798      	blx	r3
   17ed4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ed8:	3301      	adds	r3, #1
   17eda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ede:	2101      	movs	r1, #1
   17ee0:	2300      	movs	r3, #0
   17ee2:	e7e3      	b.n	17eac <d_print_comp_inner+0x1218>
   17ee4:	4e1a      	ldr	r6, [pc, #104]	; (17f50 <d_print_comp_inner+0x12bc>)
   17ee6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17eea:	f106 0a1c 	add.w	sl, r6, #28
   17eee:	f04f 0900 	mov.w	r9, #0
   17ef2:	e009      	b.n	17f08 <d_print_comp_inner+0x1274>
   17ef4:	460b      	mov	r3, r1
   17ef6:	3101      	adds	r1, #1
   17ef8:	4556      	cmp	r6, sl
   17efa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17efe:	54e7      	strb	r7, [r4, r3]
   17f00:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17f04:	f000 82fa 	beq.w	184fc <d_print_comp_inner+0x1868>
   17f08:	29ff      	cmp	r1, #255	; 0xff
   17f0a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17f0e:	d1f1      	bne.n	17ef4 <d_print_comp_inner+0x1260>
   17f10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f14:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17f18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f1c:	4620      	mov	r0, r4
   17f1e:	4798      	blx	r3
   17f20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f24:	3301      	adds	r3, #1
   17f26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f2a:	2101      	movs	r1, #1
   17f2c:	2300      	movs	r3, #0
   17f2e:	e7e3      	b.n	17ef8 <d_print_comp_inner+0x1264>
   17f30:	00023cfc 	.word	0x00023cfc
   17f34:	00024520 	.word	0x00024520
   17f38:	000245ff 	.word	0x000245ff
   17f3c:	000244fb 	.word	0x000244fb
   17f40:	00024530 	.word	0x00024530
   17f44:	000244ff 	.word	0x000244ff
   17f48:	00024583 	.word	0x00024583
   17f4c:	00024354 	.word	0x00024354
   17f50:	000245cf 	.word	0x000245cf
   17f54:	68ab      	ldr	r3, [r5, #8]
   17f56:	781a      	ldrb	r2, [r3, #0]
   17f58:	2a3a      	cmp	r2, #58	; 0x3a
   17f5a:	f47e af7d 	bne.w	16e58 <d_print_comp_inner+0x1c4>
   17f5e:	689b      	ldr	r3, [r3, #8]
   17f60:	781b      	ldrb	r3, [r3, #0]
   17f62:	2b3b      	cmp	r3, #59	; 0x3b
   17f64:	f47e af78 	bne.w	16e58 <d_print_comp_inner+0x1c4>
   17f68:	f105 0308 	add.w	r3, r5, #8
   17f6c:	686a      	ldr	r2, [r5, #4]
   17f6e:	f002 fabf 	bl	1a4f0 <d_maybe_print_fold_expression.isra.15>
   17f72:	4606      	mov	r6, r0
   17f74:	2800      	cmp	r0, #0
   17f76:	f47e af5b 	bne.w	16e30 <d_print_comp_inner+0x19c>
   17f7a:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17f7e:	68aa      	ldr	r2, [r5, #8]
   17f80:	f8da 1004 	ldr.w	r1, [sl, #4]
   17f84:	6893      	ldr	r3, [r2, #8]
   17f86:	6808      	ldr	r0, [r1, #0]
   17f88:	49d6      	ldr	r1, [pc, #856]	; (182e4 <d_print_comp_inner+0x1650>)
   17f8a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   17f8e:	685f      	ldr	r7, [r3, #4]
   17f90:	689d      	ldr	r5, [r3, #8]
   17f92:	f006 fd49 	bl	1ea28 <strcmp>
   17f96:	2800      	cmp	r0, #0
   17f98:	f001 82e2 	beq.w	19560 <d_print_comp_inner+0x28cc>
   17f9c:	2204      	movs	r2, #4
   17f9e:	49d2      	ldr	r1, [pc, #840]	; (182e8 <d_print_comp_inner+0x1654>)
   17fa0:	4620      	mov	r0, r4
   17fa2:	f7fc fba3 	bl	146ec <d_append_buffer>
   17fa6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17faa:	b183      	cbz	r3, 17fce <d_print_comp_inner+0x133a>
   17fac:	4641      	mov	r1, r8
   17fae:	464a      	mov	r2, r9
   17fb0:	4620      	mov	r0, r4
   17fb2:	f002 fa39 	bl	1a428 <d_print_subexpr>
   17fb6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17fba:	29ff      	cmp	r1, #255	; 0xff
   17fbc:	f001 83ec 	beq.w	19798 <d_print_comp_inner+0x2b04>
   17fc0:	2320      	movs	r3, #32
   17fc2:	1c4a      	adds	r2, r1, #1
   17fc4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17fc8:	5463      	strb	r3, [r4, r1]
   17fca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17fce:	463a      	mov	r2, r7
   17fd0:	4641      	mov	r1, r8
   17fd2:	4620      	mov	r0, r4
   17fd4:	f001 fc02 	bl	197dc <d_print_comp>
   17fd8:	2d00      	cmp	r5, #0
   17fda:	f43e af29 	beq.w	16e30 <d_print_comp_inner+0x19c>
   17fde:	462a      	mov	r2, r5
   17fe0:	4641      	mov	r1, r8
   17fe2:	4620      	mov	r0, r4
   17fe4:	f002 fa20 	bl	1a428 <d_print_subexpr>
   17fe8:	f7fe bf22 	b.w	16e30 <d_print_comp_inner+0x19c>
   17fec:	4ebf      	ldr	r6, [pc, #764]	; (182ec <d_print_comp_inner+0x1658>)
   17fee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17ff2:	f106 0a08 	add.w	sl, r6, #8
   17ff6:	f04f 0900 	mov.w	r9, #0
   17ffa:	e009      	b.n	18010 <d_print_comp_inner+0x137c>
   17ffc:	460b      	mov	r3, r1
   17ffe:	3101      	adds	r1, #1
   18000:	4556      	cmp	r6, sl
   18002:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18006:	54e7      	strb	r7, [r4, r3]
   18008:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1800c:	f000 80d8 	beq.w	181c0 <d_print_comp_inner+0x152c>
   18010:	29ff      	cmp	r1, #255	; 0xff
   18012:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18016:	d1f1      	bne.n	17ffc <d_print_comp_inner+0x1368>
   18018:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1801c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18020:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18024:	4620      	mov	r0, r4
   18026:	4798      	blx	r3
   18028:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1802c:	3301      	adds	r3, #1
   1802e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18032:	2101      	movs	r1, #1
   18034:	2300      	movs	r3, #0
   18036:	e7e3      	b.n	18000 <d_print_comp_inner+0x136c>
   18038:	4ead      	ldr	r6, [pc, #692]	; (182f0 <d_print_comp_inner+0x165c>)
   1803a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1803e:	f106 0a1d 	add.w	sl, r6, #29
   18042:	f04f 0900 	mov.w	r9, #0
   18046:	e009      	b.n	1805c <d_print_comp_inner+0x13c8>
   18048:	460b      	mov	r3, r1
   1804a:	3101      	adds	r1, #1
   1804c:	45b2      	cmp	sl, r6
   1804e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18052:	54e7      	strb	r7, [r4, r3]
   18054:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18058:	f000 81fc 	beq.w	18454 <d_print_comp_inner+0x17c0>
   1805c:	29ff      	cmp	r1, #255	; 0xff
   1805e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18062:	d1f1      	bne.n	18048 <d_print_comp_inner+0x13b4>
   18064:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18068:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1806c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18070:	4620      	mov	r0, r4
   18072:	4798      	blx	r3
   18074:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18078:	3301      	adds	r3, #1
   1807a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1807e:	2101      	movs	r1, #1
   18080:	2300      	movs	r3, #0
   18082:	e7e3      	b.n	1804c <d_print_comp_inner+0x13b8>
   18084:	2301      	movs	r3, #1
   18086:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1808a:	f7fe bed1 	b.w	16e30 <d_print_comp_inner+0x19c>
   1808e:	3701      	adds	r7, #1
   18090:	454f      	cmp	r7, r9
   18092:	f47f ae46 	bne.w	17d22 <d_print_comp_inner+0x108e>
   18096:	f7fe becb 	b.w	16e30 <d_print_comp_inner+0x19c>
   1809a:	6876      	ldr	r6, [r6, #4]
   1809c:	2e00      	cmp	r6, #0
   1809e:	f001 806e 	beq.w	1917e <d_print_comp_inner+0x24ea>
   180a2:	2f04      	cmp	r7, #4
   180a4:	f103 0310 	add.w	r3, r3, #16
   180a8:	f47f a9bd 	bne.w	17426 <d_print_comp_inner+0x792>
   180ac:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   180b0:	2301      	movs	r3, #1
   180b2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   180b6:	f7fe bebb 	b.w	16e30 <d_print_comp_inner+0x19c>
   180ba:	4e8e      	ldr	r6, [pc, #568]	; (182f4 <d_print_comp_inner+0x1660>)
   180bc:	686a      	ldr	r2, [r5, #4]
   180be:	4641      	mov	r1, r8
   180c0:	4620      	mov	r0, r4
   180c2:	f001 fb8b 	bl	197dc <d_print_comp>
   180c6:	f106 0a04 	add.w	sl, r6, #4
   180ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   180ce:	f04f 0900 	mov.w	r9, #0
   180d2:	e008      	b.n	180e6 <d_print_comp_inner+0x1452>
   180d4:	460b      	mov	r3, r1
   180d6:	3101      	adds	r1, #1
   180d8:	45b2      	cmp	sl, r6
   180da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   180de:	54e7      	strb	r7, [r4, r3]
   180e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   180e4:	d013      	beq.n	1810e <d_print_comp_inner+0x147a>
   180e6:	29ff      	cmp	r1, #255	; 0xff
   180e8:	f816 7b01 	ldrb.w	r7, [r6], #1
   180ec:	d1f2      	bne.n	180d4 <d_print_comp_inner+0x1440>
   180ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180f2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   180f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   180fa:	4620      	mov	r0, r4
   180fc:	4798      	blx	r3
   180fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18102:	3301      	adds	r3, #1
   18104:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18108:	2101      	movs	r1, #1
   1810a:	2300      	movs	r3, #0
   1810c:	e7e4      	b.n	180d8 <d_print_comp_inner+0x1444>
   1810e:	68aa      	ldr	r2, [r5, #8]
   18110:	4641      	mov	r1, r8
   18112:	4620      	mov	r0, r4
   18114:	f001 fb62 	bl	197dc <d_print_comp>
   18118:	f7fe be8a 	b.w	16e30 <d_print_comp_inner+0x19c>
   1811c:	686a      	ldr	r2, [r5, #4]
   1811e:	4641      	mov	r1, r8
   18120:	4620      	mov	r0, r4
   18122:	f001 fb5b 	bl	197dc <d_print_comp>
   18126:	f7fe be83 	b.w	16e30 <d_print_comp_inner+0x19c>
   1812a:	686a      	ldr	r2, [r5, #4]
   1812c:	4641      	mov	r1, r8
   1812e:	4620      	mov	r0, r4
   18130:	f001 fb54 	bl	197dc <d_print_comp>
   18134:	f7fe be7c 	b.w	16e30 <d_print_comp_inner+0x19c>
   18138:	686a      	ldr	r2, [r5, #4]
   1813a:	4641      	mov	r1, r8
   1813c:	4620      	mov	r0, r4
   1813e:	f001 fb4d 	bl	197dc <d_print_comp>
   18142:	f7fe be75 	b.w	16e30 <d_print_comp_inner+0x19c>
   18146:	686a      	ldr	r2, [r5, #4]
   18148:	4641      	mov	r1, r8
   1814a:	4620      	mov	r0, r4
   1814c:	f001 fb46 	bl	197dc <d_print_comp>
   18150:	f7fe be6e 	b.w	16e30 <d_print_comp_inner+0x19c>
   18154:	686a      	ldr	r2, [r5, #4]
   18156:	4641      	mov	r1, r8
   18158:	4620      	mov	r0, r4
   1815a:	f001 fb3f 	bl	197dc <d_print_comp>
   1815e:	f7fe be67 	b.w	16e30 <d_print_comp_inner+0x19c>
   18162:	686a      	ldr	r2, [r5, #4]
   18164:	4641      	mov	r1, r8
   18166:	4620      	mov	r0, r4
   18168:	f001 fb38 	bl	197dc <d_print_comp>
   1816c:	f7fe be60 	b.w	16e30 <d_print_comp_inner+0x19c>
   18170:	686a      	ldr	r2, [r5, #4]
   18172:	4641      	mov	r1, r8
   18174:	4620      	mov	r0, r4
   18176:	f001 fb31 	bl	197dc <d_print_comp>
   1817a:	f7fe be59 	b.w	16e30 <d_print_comp_inner+0x19c>
   1817e:	686a      	ldr	r2, [r5, #4]
   18180:	4641      	mov	r1, r8
   18182:	4620      	mov	r0, r4
   18184:	f001 fb2a 	bl	197dc <d_print_comp>
   18188:	f7fe be52 	b.w	16e30 <d_print_comp_inner+0x19c>
   1818c:	686a      	ldr	r2, [r5, #4]
   1818e:	4641      	mov	r1, r8
   18190:	4620      	mov	r0, r4
   18192:	f001 fb23 	bl	197dc <d_print_comp>
   18196:	f7fe be4b 	b.w	16e30 <d_print_comp_inner+0x19c>
   1819a:	4641      	mov	r1, r8
   1819c:	68aa      	ldr	r2, [r5, #8]
   1819e:	4620      	mov	r0, r4
   181a0:	f001 fb1c 	bl	197dc <d_print_comp>
   181a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   181a8:	29ff      	cmp	r1, #255	; 0xff
   181aa:	f000 8560 	beq.w	18c6e <d_print_comp_inner+0x1fda>
   181ae:	1c4a      	adds	r2, r1, #1
   181b0:	235d      	movs	r3, #93	; 0x5d
   181b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   181b6:	5463      	strb	r3, [r4, r1]
   181b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   181bc:	f7fe be38 	b.w	16e30 <d_print_comp_inner+0x19c>
   181c0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   181c4:	4e4c      	ldr	r6, [pc, #304]	; (182f8 <d_print_comp_inner+0x1664>)
   181c6:	3301      	adds	r3, #1
   181c8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   181cc:	4641      	mov	r1, r8
   181ce:	686a      	ldr	r2, [r5, #4]
   181d0:	4620      	mov	r0, r4
   181d2:	f001 fb03 	bl	197dc <d_print_comp>
   181d6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   181da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   181de:	3b01      	subs	r3, #1
   181e0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   181e4:	f106 0902 	add.w	r9, r6, #2
   181e8:	f04f 0800 	mov.w	r8, #0
   181ec:	e008      	b.n	18200 <d_print_comp_inner+0x156c>
   181ee:	460b      	mov	r3, r1
   181f0:	3101      	adds	r1, #1
   181f2:	454e      	cmp	r6, r9
   181f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   181f8:	54e7      	strb	r7, [r4, r3]
   181fa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   181fe:	d013      	beq.n	18228 <d_print_comp_inner+0x1594>
   18200:	29ff      	cmp	r1, #255	; 0xff
   18202:	f816 7b01 	ldrb.w	r7, [r6], #1
   18206:	d1f2      	bne.n	181ee <d_print_comp_inner+0x155a>
   18208:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1820c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18210:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18214:	4620      	mov	r0, r4
   18216:	4798      	blx	r3
   18218:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1821c:	3301      	adds	r3, #1
   1821e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18222:	2101      	movs	r1, #1
   18224:	2300      	movs	r3, #0
   18226:	e7e4      	b.n	181f2 <d_print_comp_inner+0x155e>
   18228:	68aa      	ldr	r2, [r5, #8]
   1822a:	4934      	ldr	r1, [pc, #208]	; (182fc <d_print_comp_inner+0x1668>)
   1822c:	3201      	adds	r2, #1
   1822e:	a804      	add	r0, sp, #16
   18230:	f006 fbcc 	bl	1e9cc <sprintf>
   18234:	a804      	add	r0, sp, #16
   18236:	f006 fd63 	bl	1ed00 <strlen>
   1823a:	b318      	cbz	r0, 18284 <d_print_comp_inner+0x15f0>
   1823c:	ad04      	add	r5, sp, #16
   1823e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18242:	182f      	adds	r7, r5, r0
   18244:	f04f 0800 	mov.w	r8, #0
   18248:	e008      	b.n	1825c <d_print_comp_inner+0x15c8>
   1824a:	460b      	mov	r3, r1
   1824c:	3101      	adds	r1, #1
   1824e:	42af      	cmp	r7, r5
   18250:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18254:	54e6      	strb	r6, [r4, r3]
   18256:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1825a:	d015      	beq.n	18288 <d_print_comp_inner+0x15f4>
   1825c:	29ff      	cmp	r1, #255	; 0xff
   1825e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18262:	d1f2      	bne.n	1824a <d_print_comp_inner+0x15b6>
   18264:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18268:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1826c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18270:	4620      	mov	r0, r4
   18272:	4798      	blx	r3
   18274:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18278:	3301      	adds	r3, #1
   1827a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1827e:	2101      	movs	r1, #1
   18280:	2300      	movs	r3, #0
   18282:	e7e4      	b.n	1824e <d_print_comp_inner+0x15ba>
   18284:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18288:	29ff      	cmp	r1, #255	; 0xff
   1828a:	f000 8560 	beq.w	18d4e <d_print_comp_inner+0x20ba>
   1828e:	1c4a      	adds	r2, r1, #1
   18290:	237d      	movs	r3, #125	; 0x7d
   18292:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18296:	5463      	strb	r3, [r4, r1]
   18298:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1829c:	f7fe bdc8 	b.w	16e30 <d_print_comp_inner+0x19c>
   182a0:	686a      	ldr	r2, [r5, #4]
   182a2:	4641      	mov	r1, r8
   182a4:	4620      	mov	r0, r4
   182a6:	f001 fa99 	bl	197dc <d_print_comp>
   182aa:	f7fe bdc1 	b.w	16e30 <d_print_comp_inner+0x19c>
   182ae:	4641      	mov	r1, r8
   182b0:	68aa      	ldr	r2, [r5, #8]
   182b2:	4620      	mov	r0, r4
   182b4:	f001 fa92 	bl	197dc <d_print_comp>
   182b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   182bc:	29ff      	cmp	r1, #255	; 0xff
   182be:	f000 850b 	beq.w	18cd8 <d_print_comp_inner+0x2044>
   182c2:	1c4a      	adds	r2, r1, #1
   182c4:	235d      	movs	r3, #93	; 0x5d
   182c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   182ca:	5463      	strb	r3, [r4, r1]
   182cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   182d0:	f7fe bdae 	b.w	16e30 <d_print_comp_inner+0x19c>
   182d4:	686a      	ldr	r2, [r5, #4]
   182d6:	4641      	mov	r1, r8
   182d8:	4620      	mov	r0, r4
   182da:	f001 fa7f 	bl	197dc <d_print_comp>
   182de:	f7fe bda7 	b.w	16e30 <d_print_comp_inner+0x19c>
   182e2:	bf00      	nop
   182e4:	00024368 	.word	0x00024368
   182e8:	00024560 	.word	0x00024560
   182ec:	000245ef 	.word	0x000245ef
   182f0:	000245af 	.word	0x000245af
   182f4:	00024404 	.word	0x00024404
   182f8:	000245fc 	.word	0x000245fc
   182fc:	00024354 	.word	0x00024354
   18300:	f8da 5004 	ldr.w	r5, [sl, #4]
   18304:	782b      	ldrb	r3, [r5, #0]
   18306:	3b61      	subs	r3, #97	; 0x61
   18308:	2b19      	cmp	r3, #25
   1830a:	d809      	bhi.n	18320 <d_print_comp_inner+0x168c>
   1830c:	29ff      	cmp	r1, #255	; 0xff
   1830e:	f000 8793 	beq.w	19238 <d_print_comp_inner+0x25a4>
   18312:	2320      	movs	r3, #32
   18314:	1c4a      	adds	r2, r1, #1
   18316:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1831a:	5463      	strb	r3, [r4, r1]
   1831c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18320:	19eb      	adds	r3, r5, r7
   18322:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18326:	2b20      	cmp	r3, #32
   18328:	bf08      	it	eq
   1832a:	f107 37ff 	addeq.w	r7, r7, #4294967295
   1832e:	2f00      	cmp	r7, #0
   18330:	f43e ad7e 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18334:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18338:	442f      	add	r7, r5
   1833a:	f04f 0800 	mov.w	r8, #0
   1833e:	e009      	b.n	18354 <d_print_comp_inner+0x16c0>
   18340:	460b      	mov	r3, r1
   18342:	3101      	adds	r1, #1
   18344:	42af      	cmp	r7, r5
   18346:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1834a:	54e6      	strb	r6, [r4, r3]
   1834c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18350:	f43e ad6e 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18354:	29ff      	cmp	r1, #255	; 0xff
   18356:	f815 6b01 	ldrb.w	r6, [r5], #1
   1835a:	d1f1      	bne.n	18340 <d_print_comp_inner+0x16ac>
   1835c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18360:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18364:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18368:	4620      	mov	r0, r4
   1836a:	4798      	blx	r3
   1836c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18370:	3301      	adds	r3, #1
   18372:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18376:	2101      	movs	r1, #1
   18378:	2300      	movs	r3, #0
   1837a:	e7e3      	b.n	18344 <d_print_comp_inner+0x16b0>
   1837c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18380:	b13a      	cbz	r2, 18392 <d_print_comp_inner+0x16fe>
   18382:	ab14      	add	r3, sp, #80	; 0x50
   18384:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18388:	f843 1d48 	str.w	r1, [r3, #-72]!
   1838c:	9203      	str	r2, [sp, #12]
   1838e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18392:	686b      	ldr	r3, [r5, #4]
   18394:	781a      	ldrb	r2, [r3, #0]
   18396:	2a04      	cmp	r2, #4
   18398:	f000 830e 	beq.w	189b8 <d_print_comp_inner+0x1d24>
   1839c:	a804      	add	r0, sp, #16
   1839e:	461a      	mov	r2, r3
   183a0:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   183a4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   183a8:	4641      	mov	r1, r8
   183aa:	4620      	mov	r0, r4
   183ac:	9304      	str	r3, [sp, #16]
   183ae:	9505      	str	r5, [sp, #20]
   183b0:	f7fe fc70 	bl	16c94 <d_print_comp_inner>
   183b4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   183b8:	9a05      	ldr	r2, [sp, #20]
   183ba:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   183be:	2b00      	cmp	r3, #0
   183c0:	f43e ad36 	beq.w	16e30 <d_print_comp_inner+0x19c>
   183c4:	9b02      	ldr	r3, [sp, #8]
   183c6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   183ca:	f7fe bd31 	b.w	16e30 <d_print_comp_inner+0x19c>
   183ce:	68aa      	ldr	r2, [r5, #8]
   183d0:	4641      	mov	r1, r8
   183d2:	4620      	mov	r0, r4
   183d4:	f001 fa02 	bl	197dc <d_print_comp>
   183d8:	f7fe bd2a 	b.w	16e30 <d_print_comp_inner+0x19c>
   183dc:	686a      	ldr	r2, [r5, #4]
   183de:	49d8      	ldr	r1, [pc, #864]	; (18740 <d_print_comp_inner+0x1aac>)
   183e0:	3201      	adds	r2, #1
   183e2:	a804      	add	r0, sp, #16
   183e4:	f006 faf2 	bl	1e9cc <sprintf>
   183e8:	a804      	add	r0, sp, #16
   183ea:	f006 fc89 	bl	1ed00 <strlen>
   183ee:	b318      	cbz	r0, 18438 <d_print_comp_inner+0x17a4>
   183f0:	ad04      	add	r5, sp, #16
   183f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   183f6:	182f      	adds	r7, r5, r0
   183f8:	f04f 0800 	mov.w	r8, #0
   183fc:	e008      	b.n	18410 <d_print_comp_inner+0x177c>
   183fe:	460b      	mov	r3, r1
   18400:	3101      	adds	r1, #1
   18402:	42bd      	cmp	r5, r7
   18404:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18408:	54e6      	strb	r6, [r4, r3]
   1840a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1840e:	d015      	beq.n	1843c <d_print_comp_inner+0x17a8>
   18410:	29ff      	cmp	r1, #255	; 0xff
   18412:	f815 6b01 	ldrb.w	r6, [r5], #1
   18416:	d1f2      	bne.n	183fe <d_print_comp_inner+0x176a>
   18418:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1841c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18420:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18424:	4620      	mov	r0, r4
   18426:	4798      	blx	r3
   18428:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1842c:	3301      	adds	r3, #1
   1842e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18432:	2101      	movs	r1, #1
   18434:	2300      	movs	r3, #0
   18436:	e7e4      	b.n	18402 <d_print_comp_inner+0x176e>
   18438:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1843c:	29ff      	cmp	r1, #255	; 0xff
   1843e:	f000 8404 	beq.w	18c4a <d_print_comp_inner+0x1fb6>
   18442:	1c4a      	adds	r2, r1, #1
   18444:	237d      	movs	r3, #125	; 0x7d
   18446:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1844a:	5463      	strb	r3, [r4, r1]
   1844c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18450:	f7fe bcee 	b.w	16e30 <d_print_comp_inner+0x19c>
   18454:	686a      	ldr	r2, [r5, #4]
   18456:	4641      	mov	r1, r8
   18458:	4620      	mov	r0, r4
   1845a:	f001 f9bf 	bl	197dc <d_print_comp>
   1845e:	f7fe bce7 	b.w	16e30 <d_print_comp_inner+0x19c>
   18462:	686a      	ldr	r2, [r5, #4]
   18464:	4641      	mov	r1, r8
   18466:	4620      	mov	r0, r4
   18468:	f001 f9b8 	bl	197dc <d_print_comp>
   1846c:	f7fe bce0 	b.w	16e30 <d_print_comp_inner+0x19c>
   18470:	686a      	ldr	r2, [r5, #4]
   18472:	4641      	mov	r1, r8
   18474:	4620      	mov	r0, r4
   18476:	f001 f9b1 	bl	197dc <d_print_comp>
   1847a:	f7fe bcd9 	b.w	16e30 <d_print_comp_inner+0x19c>
   1847e:	4eb1      	ldr	r6, [pc, #708]	; (18744 <d_print_comp_inner+0x1ab0>)
   18480:	68aa      	ldr	r2, [r5, #8]
   18482:	4641      	mov	r1, r8
   18484:	4620      	mov	r0, r4
   18486:	f001 f9a9 	bl	197dc <d_print_comp>
   1848a:	f106 0a05 	add.w	sl, r6, #5
   1848e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18492:	f04f 0900 	mov.w	r9, #0
   18496:	e008      	b.n	184aa <d_print_comp_inner+0x1816>
   18498:	460b      	mov	r3, r1
   1849a:	3101      	adds	r1, #1
   1849c:	4556      	cmp	r6, sl
   1849e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   184a2:	54e7      	strb	r7, [r4, r3]
   184a4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   184a8:	d013      	beq.n	184d2 <d_print_comp_inner+0x183e>
   184aa:	29ff      	cmp	r1, #255	; 0xff
   184ac:	f816 7b01 	ldrb.w	r7, [r6], #1
   184b0:	d1f2      	bne.n	18498 <d_print_comp_inner+0x1804>
   184b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184b6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   184ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   184be:	4620      	mov	r0, r4
   184c0:	4798      	blx	r3
   184c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   184c6:	3301      	adds	r3, #1
   184c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   184cc:	2101      	movs	r1, #1
   184ce:	2300      	movs	r3, #0
   184d0:	e7e4      	b.n	1849c <d_print_comp_inner+0x1808>
   184d2:	686a      	ldr	r2, [r5, #4]
   184d4:	4641      	mov	r1, r8
   184d6:	4620      	mov	r0, r4
   184d8:	f001 f980 	bl	197dc <d_print_comp>
   184dc:	f7fe bca8 	b.w	16e30 <d_print_comp_inner+0x19c>
   184e0:	686a      	ldr	r2, [r5, #4]
   184e2:	4641      	mov	r1, r8
   184e4:	4620      	mov	r0, r4
   184e6:	f001 f979 	bl	197dc <d_print_comp>
   184ea:	f7fe bca1 	b.w	16e30 <d_print_comp_inner+0x19c>
   184ee:	686a      	ldr	r2, [r5, #4]
   184f0:	4641      	mov	r1, r8
   184f2:	4620      	mov	r0, r4
   184f4:	f001 f972 	bl	197dc <d_print_comp>
   184f8:	f7fe bc9a 	b.w	16e30 <d_print_comp_inner+0x19c>
   184fc:	686a      	ldr	r2, [r5, #4]
   184fe:	4641      	mov	r1, r8
   18500:	4620      	mov	r0, r4
   18502:	f001 f96b 	bl	197dc <d_print_comp>
   18506:	f7fe bc93 	b.w	16e30 <d_print_comp_inner+0x19c>
   1850a:	4641      	mov	r1, r8
   1850c:	686a      	ldr	r2, [r5, #4]
   1850e:	4620      	mov	r0, r4
   18510:	f001 f964 	bl	197dc <d_print_comp>
   18514:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18518:	29ff      	cmp	r1, #255	; 0xff
   1851a:	f000 842a 	beq.w	18d72 <d_print_comp_inner+0x20de>
   1851e:	1c4a      	adds	r2, r1, #1
   18520:	2329      	movs	r3, #41	; 0x29
   18522:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18526:	5463      	strb	r3, [r4, r1]
   18528:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1852c:	f7fe bc80 	b.w	16e30 <d_print_comp_inner+0x19c>
   18530:	686a      	ldr	r2, [r5, #4]
   18532:	4641      	mov	r1, r8
   18534:	4620      	mov	r0, r4
   18536:	f001 f951 	bl	197dc <d_print_comp>
   1853a:	f7fe bc79 	b.w	16e30 <d_print_comp_inner+0x19c>
   1853e:	2f04      	cmp	r7, #4
   18540:	f1a6 0410 	sub.w	r4, r6, #16
   18544:	f106 0e10 	add.w	lr, r6, #16
   18548:	f000 8722 	beq.w	19390 <d_print_comp_inner+0x26fc>
   1854c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   18550:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   18554:	2300      	movs	r3, #0
   18556:	f84e 4c10 	str.w	r4, [lr, #-16]
   1855a:	e906 1008 	stmdb	r6, {r3, ip}
   1855e:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   18562:	f846 5c0c 	str.w	r5, [r6, #-12]
   18566:	686d      	ldr	r5, [r5, #4]
   18568:	3701      	adds	r7, #1
   1856a:	4676      	mov	r6, lr
   1856c:	f7fe bf84 	b.w	17478 <d_print_comp_inner+0x7e4>
   18570:	68aa      	ldr	r2, [r5, #8]
   18572:	9300      	str	r3, [sp, #0]
   18574:	460e      	mov	r6, r1
   18576:	4620      	mov	r0, r4
   18578:	4641      	mov	r1, r8
   1857a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   1857e:	f001 f92d 	bl	197dc <d_print_comp>
   18582:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18586:	9b00      	ldr	r3, [sp, #0]
   18588:	4295      	cmp	r5, r2
   1858a:	f47e ac51 	bne.w	16e30 <d_print_comp_inner+0x19c>
   1858e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   18592:	42b2      	cmp	r2, r6
   18594:	f47e ac4c 	bne.w	16e30 <d_print_comp_inner+0x19c>
   18598:	3b01      	subs	r3, #1
   1859a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1859e:	f7fe bc47 	b.w	16e30 <d_print_comp_inner+0x19c>
   185a2:	462a      	mov	r2, r5
   185a4:	4641      	mov	r1, r8
   185a6:	4620      	mov	r0, r4
   185a8:	f001 f928 	bl	197fc <d_print_mod>
   185ac:	f7fe bc70 	b.w	16e90 <d_print_comp_inner+0x1fc>
   185b0:	686b      	ldr	r3, [r5, #4]
   185b2:	9300      	str	r3, [sp, #0]
   185b4:	f1b9 0f00 	cmp.w	r9, #0
   185b8:	f47f abae 	bne.w	17d18 <d_print_comp_inner+0x1084>
   185bc:	f7fe bc38 	b.w	16e30 <d_print_comp_inner+0x19c>
   185c0:	463a      	mov	r2, r7
   185c2:	a804      	add	r0, sp, #16
   185c4:	495e      	ldr	r1, [pc, #376]	; (18740 <d_print_comp_inner+0x1aac>)
   185c6:	f006 fa01 	bl	1e9cc <sprintf>
   185ca:	a804      	add	r0, sp, #16
   185cc:	f006 fb98 	bl	1ed00 <strlen>
   185d0:	b318      	cbz	r0, 1861a <d_print_comp_inner+0x1986>
   185d2:	ad04      	add	r5, sp, #16
   185d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   185d8:	182f      	adds	r7, r5, r0
   185da:	f04f 0800 	mov.w	r8, #0
   185de:	e008      	b.n	185f2 <d_print_comp_inner+0x195e>
   185e0:	460b      	mov	r3, r1
   185e2:	3101      	adds	r1, #1
   185e4:	42af      	cmp	r7, r5
   185e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   185ea:	54e6      	strb	r6, [r4, r3]
   185ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   185f0:	d015      	beq.n	1861e <d_print_comp_inner+0x198a>
   185f2:	29ff      	cmp	r1, #255	; 0xff
   185f4:	f815 6b01 	ldrb.w	r6, [r5], #1
   185f8:	d1f2      	bne.n	185e0 <d_print_comp_inner+0x194c>
   185fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185fe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18602:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18606:	4620      	mov	r0, r4
   18608:	4798      	blx	r3
   1860a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1860e:	3301      	adds	r3, #1
   18610:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18614:	2101      	movs	r1, #1
   18616:	2300      	movs	r3, #0
   18618:	e7e4      	b.n	185e4 <d_print_comp_inner+0x1950>
   1861a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1861e:	29ff      	cmp	r1, #255	; 0xff
   18620:	f000 84dd 	beq.w	18fde <d_print_comp_inner+0x234a>
   18624:	1c4a      	adds	r2, r1, #1
   18626:	237d      	movs	r3, #125	; 0x7d
   18628:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1862c:	5463      	strb	r3, [r4, r1]
   1862e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18632:	f7fe bbfd 	b.w	16e30 <d_print_comp_inner+0x19c>
   18636:	2700      	movs	r7, #0
   18638:	f7ff ba1f 	b.w	17a7a <d_print_comp_inner+0xde6>
   1863c:	68df      	ldr	r7, [r3, #12]
   1863e:	689d      	ldr	r5, [r3, #8]
   18640:	2f00      	cmp	r7, #0
   18642:	f43e abf5 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18646:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1864a:	442f      	add	r7, r5
   1864c:	f04f 0800 	mov.w	r8, #0
   18650:	e009      	b.n	18666 <d_print_comp_inner+0x19d2>
   18652:	460b      	mov	r3, r1
   18654:	3101      	adds	r1, #1
   18656:	42bd      	cmp	r5, r7
   18658:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1865c:	54e6      	strb	r6, [r4, r3]
   1865e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18662:	f43e abe5 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18666:	29ff      	cmp	r1, #255	; 0xff
   18668:	f815 6b01 	ldrb.w	r6, [r5], #1
   1866c:	d1f1      	bne.n	18652 <d_print_comp_inner+0x19be>
   1866e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18672:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18676:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1867a:	4620      	mov	r0, r4
   1867c:	4798      	blx	r3
   1867e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18682:	3301      	adds	r3, #1
   18684:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18688:	2101      	movs	r1, #1
   1868a:	2300      	movs	r3, #0
   1868c:	e7e3      	b.n	18656 <d_print_comp_inner+0x19c2>
   1868e:	686e      	ldr	r6, [r5, #4]
   18690:	68af      	ldr	r7, [r5, #8]
   18692:	4437      	add	r7, r6
   18694:	42be      	cmp	r6, r7
   18696:	f4be abcb 	bcs.w	16e30 <d_print_comp_inner+0x19c>
   1869a:	f04f 0800 	mov.w	r8, #0
   1869e:	e00d      	b.n	186bc <d_print_comp_inner+0x1a28>
   186a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   186a4:	29ff      	cmp	r1, #255	; 0xff
   186a6:	d036      	beq.n	18716 <d_print_comp_inner+0x1a82>
   186a8:	1c4b      	adds	r3, r1, #1
   186aa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   186ae:	5465      	strb	r5, [r4, r1]
   186b0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   186b4:	3601      	adds	r6, #1
   186b6:	42b7      	cmp	r7, r6
   186b8:	f67e abba 	bls.w	16e30 <d_print_comp_inner+0x19c>
   186bc:	1bbb      	subs	r3, r7, r6
   186be:	2b03      	cmp	r3, #3
   186c0:	7835      	ldrb	r5, [r6, #0]
   186c2:	dded      	ble.n	186a0 <d_print_comp_inner+0x1a0c>
   186c4:	2d5f      	cmp	r5, #95	; 0x5f
   186c6:	d1eb      	bne.n	186a0 <d_print_comp_inner+0x1a0c>
   186c8:	7873      	ldrb	r3, [r6, #1]
   186ca:	2b5f      	cmp	r3, #95	; 0x5f
   186cc:	d1e8      	bne.n	186a0 <d_print_comp_inner+0x1a0c>
   186ce:	78b3      	ldrb	r3, [r6, #2]
   186d0:	2b55      	cmp	r3, #85	; 0x55
   186d2:	d1e5      	bne.n	186a0 <d_print_comp_inner+0x1a0c>
   186d4:	1cf3      	adds	r3, r6, #3
   186d6:	429f      	cmp	r7, r3
   186d8:	d9e2      	bls.n	186a0 <d_print_comp_inner+0x1a0c>
   186da:	2000      	movs	r0, #0
   186dc:	e006      	b.n	186ec <d_print_comp_inner+0x1a58>
   186de:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   186e2:	429f      	cmp	r7, r3
   186e4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   186e8:	f000 85c7 	beq.w	1927a <d_print_comp_inner+0x25e6>
   186ec:	4699      	mov	r9, r3
   186ee:	f813 5b01 	ldrb.w	r5, [r3], #1
   186f2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   186f6:	b2d1      	uxtb	r1, r2
   186f8:	2909      	cmp	r1, #9
   186fa:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   186fe:	d9f0      	bls.n	186e2 <d_print_comp_inner+0x1a4e>
   18700:	f1be 0f05 	cmp.w	lr, #5
   18704:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   18708:	d9e9      	bls.n	186de <d_print_comp_inner+0x1a4a>
   1870a:	2a05      	cmp	r2, #5
   1870c:	f200 8743 	bhi.w	19596 <d_print_comp_inner+0x2902>
   18710:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   18714:	e7e5      	b.n	186e2 <d_print_comp_inner+0x1a4e>
   18716:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1871a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1871e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18722:	4620      	mov	r0, r4
   18724:	4798      	blx	r3
   18726:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1872a:	3301      	adds	r3, #1
   1872c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18730:	2100      	movs	r1, #0
   18732:	2301      	movs	r3, #1
   18734:	e7b9      	b.n	186aa <d_print_comp_inner+0x1a16>
   18736:	4d04      	ldr	r5, [pc, #16]	; (18748 <d_print_comp_inner+0x1ab4>)
   18738:	4698      	mov	r8, r3
   1873a:	1daf      	adds	r7, r5, #6
   1873c:	e010      	b.n	18760 <d_print_comp_inner+0x1acc>
   1873e:	bf00      	nop
   18740:	00024354 	.word	0x00024354
   18744:	000244c8 	.word	0x000244c8
   18748:	00024528 	.word	0x00024528
   1874c:	460b      	mov	r3, r1
   1874e:	3101      	adds	r1, #1
   18750:	42bd      	cmp	r5, r7
   18752:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18756:	54e6      	strb	r6, [r4, r3]
   18758:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1875c:	f43e ab68 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18760:	29ff      	cmp	r1, #255	; 0xff
   18762:	f815 6b01 	ldrb.w	r6, [r5], #1
   18766:	d1f1      	bne.n	1874c <d_print_comp_inner+0x1ab8>
   18768:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1876c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18770:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18774:	4620      	mov	r0, r4
   18776:	4798      	blx	r3
   18778:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1877c:	3301      	adds	r3, #1
   1877e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18782:	2101      	movs	r1, #1
   18784:	2300      	movs	r3, #0
   18786:	e7e3      	b.n	18750 <d_print_comp_inner+0x1abc>
   18788:	782b      	ldrb	r3, [r5, #0]
   1878a:	2b2f      	cmp	r3, #47	; 0x2f
   1878c:	f47e ab6a 	bne.w	16e64 <d_print_comp_inner+0x1d0>
   18790:	4601      	mov	r1, r0
   18792:	460d      	mov	r5, r1
   18794:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18798:	f7fe bb66 	b.w	16e68 <d_print_comp_inner+0x1d4>
   1879c:	4dd7      	ldr	r5, [pc, #860]	; (18afc <d_print_comp_inner+0x1e68>)
   1879e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   187a2:	f105 0804 	add.w	r8, r5, #4
   187a6:	e009      	b.n	187bc <d_print_comp_inner+0x1b28>
   187a8:	460b      	mov	r3, r1
   187aa:	3101      	adds	r1, #1
   187ac:	45a8      	cmp	r8, r5
   187ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187b2:	54e6      	strb	r6, [r4, r3]
   187b4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   187b8:	f43e ab3a 	beq.w	16e30 <d_print_comp_inner+0x19c>
   187bc:	29ff      	cmp	r1, #255	; 0xff
   187be:	f815 6b01 	ldrb.w	r6, [r5], #1
   187c2:	d1f1      	bne.n	187a8 <d_print_comp_inner+0x1b14>
   187c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   187c8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   187cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   187d0:	4620      	mov	r0, r4
   187d2:	4798      	blx	r3
   187d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   187d8:	3301      	adds	r3, #1
   187da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   187de:	2101      	movs	r1, #1
   187e0:	2300      	movs	r3, #0
   187e2:	e7e3      	b.n	187ac <d_print_comp_inner+0x1b18>
   187e4:	4ec6      	ldr	r6, [pc, #792]	; (18b00 <d_print_comp_inner+0x1e6c>)
   187e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   187ea:	f106 0905 	add.w	r9, r6, #5
   187ee:	f04f 0800 	mov.w	r8, #0
   187f2:	e008      	b.n	18806 <d_print_comp_inner+0x1b72>
   187f4:	460b      	mov	r3, r1
   187f6:	3101      	adds	r1, #1
   187f8:	45b1      	cmp	r9, r6
   187fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187fe:	54e7      	strb	r7, [r4, r3]
   18800:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18804:	d013      	beq.n	1882e <d_print_comp_inner+0x1b9a>
   18806:	29ff      	cmp	r1, #255	; 0xff
   18808:	f816 7b01 	ldrb.w	r7, [r6], #1
   1880c:	d1f2      	bne.n	187f4 <d_print_comp_inner+0x1b60>
   1880e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18812:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18816:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1881a:	4620      	mov	r0, r4
   1881c:	4798      	blx	r3
   1881e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18822:	3301      	adds	r3, #1
   18824:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18828:	2101      	movs	r1, #1
   1882a:	2300      	movs	r3, #0
   1882c:	e7e4      	b.n	187f8 <d_print_comp_inner+0x1b64>
   1882e:	686a      	ldr	r2, [r5, #4]
   18830:	49b4      	ldr	r1, [pc, #720]	; (18b04 <d_print_comp_inner+0x1e70>)
   18832:	3201      	adds	r2, #1
   18834:	a804      	add	r0, sp, #16
   18836:	f006 f8c9 	bl	1e9cc <sprintf>
   1883a:	a804      	add	r0, sp, #16
   1883c:	f006 fa60 	bl	1ed00 <strlen>
   18840:	2800      	cmp	r0, #0
   18842:	f43e aaf5 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18846:	ad04      	add	r5, sp, #16
   18848:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1884c:	182f      	adds	r7, r5, r0
   1884e:	f04f 0800 	mov.w	r8, #0
   18852:	e009      	b.n	18868 <d_print_comp_inner+0x1bd4>
   18854:	460b      	mov	r3, r1
   18856:	3101      	adds	r1, #1
   18858:	42af      	cmp	r7, r5
   1885a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1885e:	54e6      	strb	r6, [r4, r3]
   18860:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18864:	f43e aae4 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18868:	29ff      	cmp	r1, #255	; 0xff
   1886a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1886e:	d1f1      	bne.n	18854 <d_print_comp_inner+0x1bc0>
   18870:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18874:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18878:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1887c:	4620      	mov	r0, r4
   1887e:	4798      	blx	r3
   18880:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18884:	3301      	adds	r3, #1
   18886:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1888a:	2101      	movs	r1, #1
   1888c:	2300      	movs	r3, #0
   1888e:	e7e3      	b.n	18858 <d_print_comp_inner+0x1bc4>
   18890:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   18894:	f105 0208 	add.w	r2, r5, #8
   18898:	4641      	mov	r1, r8
   1889a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1889e:	f001 fc91 	bl	1a1c4 <d_print_function_type.isra.11>
   188a2:	686a      	ldr	r2, [r5, #4]
   188a4:	2a00      	cmp	r2, #0
   188a6:	f43e aac3 	beq.w	16e30 <d_print_comp_inner+0x19c>
   188aa:	4641      	mov	r1, r8
   188ac:	4620      	mov	r0, r4
   188ae:	f000 ff95 	bl	197dc <d_print_comp>
   188b2:	f7fe babd 	b.w	16e30 <d_print_comp_inner+0x19c>
   188b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   188ba:	f7ff b9a2 	b.w	17c02 <d_print_comp_inner+0xf6e>
   188be:	4e92      	ldr	r6, [pc, #584]	; (18b08 <d_print_comp_inner+0x1e74>)
   188c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   188c4:	f106 0a05 	add.w	sl, r6, #5
   188c8:	f04f 0900 	mov.w	r9, #0
   188cc:	e009      	b.n	188e2 <d_print_comp_inner+0x1c4e>
   188ce:	460b      	mov	r3, r1
   188d0:	3101      	adds	r1, #1
   188d2:	45b2      	cmp	sl, r6
   188d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   188d8:	54e7      	strb	r7, [r4, r3]
   188da:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   188de:	f43f a97a 	beq.w	17bd6 <d_print_comp_inner+0xf42>
   188e2:	29ff      	cmp	r1, #255	; 0xff
   188e4:	f816 7b01 	ldrb.w	r7, [r6], #1
   188e8:	d1f1      	bne.n	188ce <d_print_comp_inner+0x1c3a>
   188ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   188ee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   188f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   188f6:	4620      	mov	r0, r4
   188f8:	4798      	blx	r3
   188fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   188fe:	3301      	adds	r3, #1
   18900:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18904:	2101      	movs	r1, #1
   18906:	2300      	movs	r3, #0
   18908:	e7e3      	b.n	188d2 <d_print_comp_inner+0x1c3e>
   1890a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1890e:	497f      	ldr	r1, [pc, #508]	; (18b0c <d_print_comp_inner+0x1e78>)
   18910:	681f      	ldr	r7, [r3, #0]
   18912:	4638      	mov	r0, r7
   18914:	f006 f888 	bl	1ea28 <strcmp>
   18918:	f896 a000 	ldrb.w	sl, [r6]
   1891c:	b918      	cbnz	r0, 18926 <d_print_comp_inner+0x1c92>
   1891e:	f1ba 0f03 	cmp.w	sl, #3
   18922:	f000 851b 	beq.w	1935c <d_print_comp_inner+0x26c8>
   18926:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   1892a:	f000 85fd 	beq.w	19528 <d_print_comp_inner+0x2894>
   1892e:	4978      	ldr	r1, [pc, #480]	; (18b10 <d_print_comp_inner+0x1e7c>)
   18930:	4638      	mov	r0, r7
   18932:	f006 f879 	bl	1ea28 <strcmp>
   18936:	4605      	mov	r5, r0
   18938:	2800      	cmp	r0, #0
   1893a:	f000 8135 	beq.w	18ba8 <d_print_comp_inner+0x1f14>
   1893e:	4975      	ldr	r1, [pc, #468]	; (18b14 <d_print_comp_inner+0x1e80>)
   18940:	4638      	mov	r0, r7
   18942:	f006 f871 	bl	1ea28 <strcmp>
   18946:	2800      	cmp	r0, #0
   18948:	f000 82b6 	beq.w	18eb8 <d_print_comp_inner+0x2224>
   1894c:	464a      	mov	r2, r9
   1894e:	4641      	mov	r1, r8
   18950:	4620      	mov	r0, r4
   18952:	f001 fd2b 	bl	1a3ac <d_print_expr_op>
   18956:	2f00      	cmp	r7, #0
   18958:	f43f a837 	beq.w	179ca <d_print_comp_inner+0xd36>
   1895c:	496e      	ldr	r1, [pc, #440]	; (18b18 <d_print_comp_inner+0x1e84>)
   1895e:	4638      	mov	r0, r7
   18960:	f006 f862 	bl	1ea28 <strcmp>
   18964:	2800      	cmp	r0, #0
   18966:	f000 8384 	beq.w	19072 <d_print_comp_inner+0x23de>
   1896a:	4638      	mov	r0, r7
   1896c:	496b      	ldr	r1, [pc, #428]	; (18b1c <d_print_comp_inner+0x1e88>)
   1896e:	f006 f85b 	bl	1ea28 <strcmp>
   18972:	4605      	mov	r5, r0
   18974:	2800      	cmp	r0, #0
   18976:	f47f a828 	bne.w	179ca <d_print_comp_inner+0xd36>
   1897a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1897e:	2bff      	cmp	r3, #255	; 0xff
   18980:	f000 84db 	beq.w	1933a <d_print_comp_inner+0x26a6>
   18984:	1c58      	adds	r0, r3, #1
   18986:	2528      	movs	r5, #40	; 0x28
   18988:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1898c:	4641      	mov	r1, r8
   1898e:	54e5      	strb	r5, [r4, r3]
   18990:	4632      	mov	r2, r6
   18992:	4620      	mov	r0, r4
   18994:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18998:	f000 ff20 	bl	197dc <d_print_comp>
   1899c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189a0:	29ff      	cmp	r1, #255	; 0xff
   189a2:	f000 846d 	beq.w	19280 <d_print_comp_inner+0x25ec>
   189a6:	2329      	movs	r3, #41	; 0x29
   189a8:	1c4a      	adds	r2, r1, #1
   189aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   189ae:	5463      	strb	r3, [r4, r1]
   189b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   189b4:	f7fe ba3c 	b.w	16e30 <d_print_comp_inner+0x19c>
   189b8:	f10d 0910 	add.w	r9, sp, #16
   189bc:	685a      	ldr	r2, [r3, #4]
   189be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   189c2:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   189c6:	4641      	mov	r1, r8
   189c8:	4620      	mov	r0, r4
   189ca:	9204      	str	r2, [sp, #16]
   189cc:	9305      	str	r3, [sp, #20]
   189ce:	f7fe f961 	bl	16c94 <d_print_comp_inner>
   189d2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   189d6:	9a05      	ldr	r2, [sp, #20]
   189d8:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   189dc:	b113      	cbz	r3, 189e4 <d_print_comp_inner+0x1d50>
   189de:	9b02      	ldr	r3, [sp, #8]
   189e0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   189e4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   189e8:	2b3c      	cmp	r3, #60	; 0x3c
   189ea:	f000 83d9 	beq.w	191a0 <d_print_comp_inner+0x250c>
   189ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189f2:	29ff      	cmp	r1, #255	; 0xff
   189f4:	f000 8467 	beq.w	192c6 <d_print_comp_inner+0x2632>
   189f8:	1c4a      	adds	r2, r1, #1
   189fa:	233c      	movs	r3, #60	; 0x3c
   189fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a00:	5463      	strb	r3, [r4, r1]
   18a02:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a06:	686b      	ldr	r3, [r5, #4]
   18a08:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18a0c:	689b      	ldr	r3, [r3, #8]
   18a0e:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18a12:	461a      	mov	r2, r3
   18a14:	4641      	mov	r1, r8
   18a16:	4620      	mov	r0, r4
   18a18:	9304      	str	r3, [sp, #16]
   18a1a:	9505      	str	r5, [sp, #20]
   18a1c:	f7fe f93a 	bl	16c94 <d_print_comp_inner>
   18a20:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18a24:	9a05      	ldr	r2, [sp, #20]
   18a26:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18a2a:	2b3e      	cmp	r3, #62	; 0x3e
   18a2c:	f000 83ab 	beq.w	19186 <d_print_comp_inner+0x24f2>
   18a30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a34:	29ff      	cmp	r1, #255	; 0xff
   18a36:	f000 849a 	beq.w	1936e <d_print_comp_inner+0x26da>
   18a3a:	233e      	movs	r3, #62	; 0x3e
   18a3c:	1c4a      	adds	r2, r1, #1
   18a3e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a42:	5463      	strb	r3, [r4, r1]
   18a44:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a48:	f7fe b9f2 	b.w	16e30 <d_print_comp_inner+0x19c>
   18a4c:	6852      	ldr	r2, [r2, #4]
   18a4e:	7c16      	ldrb	r6, [r2, #16]
   18a50:	2e00      	cmp	r6, #0
   18a52:	f43f a9e7 	beq.w	17e24 <d_print_comp_inner+0x1190>
   18a56:	2e06      	cmp	r6, #6
   18a58:	f240 8337 	bls.w	190ca <d_print_comp_inner+0x2436>
   18a5c:	2e07      	cmp	r6, #7
   18a5e:	f47f a9e1 	bne.w	17e24 <d_print_comp_inner+0x1190>
   18a62:	68aa      	ldr	r2, [r5, #8]
   18a64:	7811      	ldrb	r1, [r2, #0]
   18a66:	2900      	cmp	r1, #0
   18a68:	f47f a9dc 	bne.w	17e24 <d_print_comp_inner+0x1190>
   18a6c:	6891      	ldr	r1, [r2, #8]
   18a6e:	2901      	cmp	r1, #1
   18a70:	f47f a9d8 	bne.w	17e24 <d_print_comp_inner+0x1190>
   18a74:	2b3c      	cmp	r3, #60	; 0x3c
   18a76:	f47f a9d5 	bne.w	17e24 <d_print_comp_inner+0x1190>
   18a7a:	6853      	ldr	r3, [r2, #4]
   18a7c:	781b      	ldrb	r3, [r3, #0]
   18a7e:	2b30      	cmp	r3, #48	; 0x30
   18a80:	f000 8626 	beq.w	196d0 <d_print_comp_inner+0x2a3c>
   18a84:	2b31      	cmp	r3, #49	; 0x31
   18a86:	f47f a9cd 	bne.w	17e24 <d_print_comp_inner+0x1190>
   18a8a:	2204      	movs	r2, #4
   18a8c:	4924      	ldr	r1, [pc, #144]	; (18b20 <d_print_comp_inner+0x1e8c>)
   18a8e:	f7fb fe2d 	bl	146ec <d_append_buffer>
   18a92:	f7fe b9cd 	b.w	16e30 <d_print_comp_inner+0x19c>
   18a96:	4e23      	ldr	r6, [pc, #140]	; (18b24 <d_print_comp_inner+0x1e90>)
   18a98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a9c:	f106 0a02 	add.w	sl, r6, #2
   18aa0:	e009      	b.n	18ab6 <d_print_comp_inner+0x1e22>
   18aa2:	460b      	mov	r3, r1
   18aa4:	3101      	adds	r1, #1
   18aa6:	45b2      	cmp	sl, r6
   18aa8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18aac:	54e7      	strb	r7, [r4, r3]
   18aae:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18ab2:	f43e ad52 	beq.w	1755a <d_print_comp_inner+0x8c6>
   18ab6:	29ff      	cmp	r1, #255	; 0xff
   18ab8:	f816 7b01 	ldrb.w	r7, [r6], #1
   18abc:	d1f1      	bne.n	18aa2 <d_print_comp_inner+0x1e0e>
   18abe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ac2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18ac6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18aca:	4620      	mov	r0, r4
   18acc:	4798      	blx	r3
   18ace:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ad2:	3301      	adds	r3, #1
   18ad4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ad8:	2101      	movs	r1, #1
   18ada:	2300      	movs	r3, #0
   18adc:	e7e3      	b.n	18aa6 <d_print_comp_inner+0x1e12>
   18ade:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ae2:	29ff      	cmp	r1, #255	; 0xff
   18ae4:	f000 84e4 	beq.w	194b0 <d_print_comp_inner+0x281c>
   18ae8:	2220      	movs	r2, #32
   18aea:	1c4b      	adds	r3, r1, #1
   18aec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18af0:	5462      	strb	r2, [r4, r1]
   18af2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18af6:	f7fe bdbb 	b.w	17670 <d_print_comp_inner+0x9dc>
   18afa:	bf00      	nop
   18afc:	000245a0 	.word	0x000245a0
   18b00:	000243c8 	.word	0x000243c8
   18b04:	00024354 	.word	0x00024354
   18b08:	00024518 	.word	0x00024518
   18b0c:	0002454c 	.word	0x0002454c
   18b10:	0002461c 	.word	0x0002461c
   18b14:	00024358 	.word	0x00024358
   18b18:	00024550 	.word	0x00024550
   18b1c:	0002485c 	.word	0x0002485c
   18b20:	0002457c 	.word	0x0002457c
   18b24:	000243a4 	.word	0x000243a4
   18b28:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b2c:	29ff      	cmp	r1, #255	; 0xff
   18b2e:	f000 8465 	beq.w	193fc <d_print_comp_inner+0x2768>
   18b32:	2220      	movs	r2, #32
   18b34:	1c4b      	adds	r3, r1, #1
   18b36:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18b3a:	5462      	strb	r2, [r4, r1]
   18b3c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18b40:	f7fe bd80 	b.w	17644 <d_print_comp_inner+0x9b0>
   18b44:	2700      	movs	r7, #0
   18b46:	55a7      	strb	r7, [r4, r6]
   18b48:	4631      	mov	r1, r6
   18b4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b52:	4620      	mov	r0, r4
   18b54:	4798      	blx	r3
   18b56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b5a:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18b5e:	3301      	adds	r3, #1
   18b60:	463e      	mov	r6, r7
   18b62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b66:	f7fe be31 	b.w	177cc <d_print_comp_inner+0xb38>
   18b6a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b6e:	29ff      	cmp	r1, #255	; 0xff
   18b70:	f000 8465 	beq.w	1943e <d_print_comp_inner+0x27aa>
   18b74:	1c4a      	adds	r2, r1, #1
   18b76:	235b      	movs	r3, #91	; 0x5b
   18b78:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b7c:	5463      	strb	r3, [r4, r1]
   18b7e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18b82:	4641      	mov	r1, r8
   18b84:	68aa      	ldr	r2, [r5, #8]
   18b86:	4620      	mov	r0, r4
   18b88:	f000 fe28 	bl	197dc <d_print_comp>
   18b8c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b90:	29ff      	cmp	r1, #255	; 0xff
   18b92:	f000 8312 	beq.w	191ba <d_print_comp_inner+0x2526>
   18b96:	235d      	movs	r3, #93	; 0x5d
   18b98:	1c4a      	adds	r2, r1, #1
   18b9a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b9e:	5463      	strb	r3, [r4, r1]
   18ba0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ba4:	f7fe b944 	b.w	16e30 <d_print_comp_inner+0x19c>
   18ba8:	4631      	mov	r1, r6
   18baa:	4620      	mov	r0, r4
   18bac:	f7fb ffca 	bl	14b44 <d_find_pack>
   18bb0:	b928      	cbnz	r0, 18bbe <d_print_comp_inner+0x1f2a>
   18bb2:	e007      	b.n	18bc4 <d_print_comp_inner+0x1f30>
   18bb4:	6843      	ldr	r3, [r0, #4]
   18bb6:	b12b      	cbz	r3, 18bc4 <d_print_comp_inner+0x1f30>
   18bb8:	6880      	ldr	r0, [r0, #8]
   18bba:	3501      	adds	r5, #1
   18bbc:	b110      	cbz	r0, 18bc4 <d_print_comp_inner+0x1f30>
   18bbe:	7803      	ldrb	r3, [r0, #0]
   18bc0:	2b2f      	cmp	r3, #47	; 0x2f
   18bc2:	d0f7      	beq.n	18bb4 <d_print_comp_inner+0x1f20>
   18bc4:	462a      	mov	r2, r5
   18bc6:	a804      	add	r0, sp, #16
   18bc8:	49d4      	ldr	r1, [pc, #848]	; (18f1c <d_print_comp_inner+0x2288>)
   18bca:	f005 feff 	bl	1e9cc <sprintf>
   18bce:	a804      	add	r0, sp, #16
   18bd0:	f006 f896 	bl	1ed00 <strlen>
   18bd4:	2800      	cmp	r0, #0
   18bd6:	f43e a92b 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18bda:	ad04      	add	r5, sp, #16
   18bdc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18be0:	182f      	adds	r7, r5, r0
   18be2:	f04f 0800 	mov.w	r8, #0
   18be6:	e009      	b.n	18bfc <d_print_comp_inner+0x1f68>
   18be8:	460b      	mov	r3, r1
   18bea:	3101      	adds	r1, #1
   18bec:	42bd      	cmp	r5, r7
   18bee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18bf2:	54e6      	strb	r6, [r4, r3]
   18bf4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18bf8:	f43e a91a 	beq.w	16e30 <d_print_comp_inner+0x19c>
   18bfc:	29ff      	cmp	r1, #255	; 0xff
   18bfe:	f815 6b01 	ldrb.w	r6, [r5], #1
   18c02:	d1f1      	bne.n	18be8 <d_print_comp_inner+0x1f54>
   18c04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c08:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18c0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c10:	4620      	mov	r0, r4
   18c12:	4798      	blx	r3
   18c14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c18:	3301      	adds	r3, #1
   18c1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c1e:	2101      	movs	r1, #1
   18c20:	2300      	movs	r3, #0
   18c22:	e7e3      	b.n	18bec <d_print_comp_inner+0x1f58>
   18c24:	686a      	ldr	r2, [r5, #4]
   18c26:	4641      	mov	r1, r8
   18c28:	4620      	mov	r0, r4
   18c2a:	f000 fdd7 	bl	197dc <d_print_comp>
   18c2e:	f7fe b8ff 	b.w	16e30 <d_print_comp_inner+0x19c>
   18c32:	29ff      	cmp	r1, #255	; 0xff
   18c34:	f000 83d2 	beq.w	193dc <d_print_comp_inner+0x2748>
   18c38:	232d      	movs	r3, #45	; 0x2d
   18c3a:	1c4a      	adds	r2, r1, #1
   18c3c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18c40:	5463      	strb	r3, [r4, r1]
   18c42:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18c46:	f7ff b90e 	b.w	17e66 <d_print_comp_inner+0x11d2>
   18c4a:	2500      	movs	r5, #0
   18c4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18c58:	4620      	mov	r0, r4
   18c5a:	4798      	blx	r3
   18c5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c60:	3301      	adds	r3, #1
   18c62:	4629      	mov	r1, r5
   18c64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c68:	2201      	movs	r2, #1
   18c6a:	f7ff bbeb 	b.w	18444 <d_print_comp_inner+0x17b0>
   18c6e:	2500      	movs	r5, #0
   18c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c78:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18c7c:	4620      	mov	r0, r4
   18c7e:	4798      	blx	r3
   18c80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c84:	3301      	adds	r3, #1
   18c86:	4629      	mov	r1, r5
   18c88:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c8c:	2201      	movs	r2, #1
   18c8e:	f7ff ba8f 	b.w	181b0 <d_print_comp_inner+0x151c>
   18c92:	2600      	movs	r6, #0
   18c94:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18c98:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18c9c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18ca0:	4798      	blx	r3
   18ca2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ca6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18caa:	3301      	adds	r3, #1
   18cac:	4631      	mov	r1, r6
   18cae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cb2:	f7fe bd43 	b.w	1773c <d_print_comp_inner+0xaa8>
   18cb6:	2600      	movs	r6, #0
   18cb8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18cbc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18cc0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18cc4:	4798      	blx	r3
   18cc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cca:	3301      	adds	r3, #1
   18ccc:	4631      	mov	r1, r6
   18cce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cd2:	2201      	movs	r2, #1
   18cd4:	f7fe bb74 	b.w	173c0 <d_print_comp_inner+0x72c>
   18cd8:	2500      	movs	r5, #0
   18cda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18cde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ce2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18ce6:	4620      	mov	r0, r4
   18ce8:	4798      	blx	r3
   18cea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cee:	3301      	adds	r3, #1
   18cf0:	4629      	mov	r1, r5
   18cf2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cf6:	2201      	movs	r2, #1
   18cf8:	f7ff bae4 	b.w	182c4 <d_print_comp_inner+0x1630>
   18cfc:	220d      	movs	r2, #13
   18cfe:	4988      	ldr	r1, [pc, #544]	; (18f20 <d_print_comp_inner+0x228c>)
   18d00:	4620      	mov	r0, r4
   18d02:	f7fb fcf3 	bl	146ec <d_append_buffer>
   18d06:	68a9      	ldr	r1, [r5, #8]
   18d08:	4620      	mov	r0, r4
   18d0a:	3101      	adds	r1, #1
   18d0c:	f7fb ff9e 	bl	14c4c <d_append_num>
   18d10:	2203      	movs	r2, #3
   18d12:	4984      	ldr	r1, [pc, #528]	; (18f24 <d_print_comp_inner+0x2290>)
   18d14:	4620      	mov	r0, r4
   18d16:	f7fb fce9 	bl	146ec <d_append_buffer>
   18d1a:	686d      	ldr	r5, [r5, #4]
   18d1c:	f7fe bc22 	b.w	17564 <d_print_comp_inner+0x8d0>
   18d20:	2500      	movs	r5, #0
   18d22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d2a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d2e:	4620      	mov	r0, r4
   18d30:	4798      	blx	r3
   18d32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d36:	3301      	adds	r3, #1
   18d38:	4629      	mov	r1, r5
   18d3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d3e:	2201      	movs	r2, #1
   18d40:	f7fe be08 	b.w	17954 <d_print_comp_inner+0xcc0>
   18d44:	2301      	movs	r3, #1
   18d46:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18d4a:	f7fe b871 	b.w	16e30 <d_print_comp_inner+0x19c>
   18d4e:	2500      	movs	r5, #0
   18d50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d58:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d5c:	4620      	mov	r0, r4
   18d5e:	4798      	blx	r3
   18d60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d64:	3301      	adds	r3, #1
   18d66:	4629      	mov	r1, r5
   18d68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d6c:	2201      	movs	r2, #1
   18d6e:	f7ff ba8f 	b.w	18290 <d_print_comp_inner+0x15fc>
   18d72:	2500      	movs	r5, #0
   18d74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d7c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d80:	4620      	mov	r0, r4
   18d82:	4798      	blx	r3
   18d84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d88:	3301      	adds	r3, #1
   18d8a:	4629      	mov	r1, r5
   18d8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d90:	2201      	movs	r2, #1
   18d92:	f7ff bbc5 	b.w	18520 <d_print_comp_inner+0x188c>
   18d96:	a914      	add	r1, sp, #80	; 0x50
   18d98:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18d9c:	f841 0d40 	str.w	r0, [r1, #-64]!
   18da0:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   18da4:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18da8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   18dac:	4620      	mov	r0, r4
   18dae:	4641      	mov	r1, r8
   18db0:	9306      	str	r3, [sp, #24]
   18db2:	9607      	str	r6, [sp, #28]
   18db4:	9505      	str	r5, [sp, #20]
   18db6:	f000 fd11 	bl	197dc <d_print_comp>
   18dba:	9e06      	ldr	r6, [sp, #24]
   18dbc:	9b04      	ldr	r3, [sp, #16]
   18dbe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18dc2:	2e00      	cmp	r6, #0
   18dc4:	f47e a834 	bne.w	16e30 <d_print_comp_inner+0x19c>
   18dc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18dcc:	29ff      	cmp	r1, #255	; 0xff
   18dce:	f000 8409 	beq.w	195e4 <d_print_comp_inner+0x2950>
   18dd2:	2320      	movs	r3, #32
   18dd4:	1c4a      	adds	r2, r1, #1
   18dd6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18dda:	5463      	strb	r3, [r4, r1]
   18ddc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18de0:	f7fe be0b 	b.w	179fa <d_print_comp_inner+0xd66>
   18de4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18de8:	2b00      	cmp	r3, #0
   18dea:	f6fe abff 	blt.w	175ec <d_print_comp_inner+0x958>
   18dee:	2b00      	cmp	r3, #0
   18df0:	f000 829d 	beq.w	1932e <d_print_comp_inner+0x269a>
   18df4:	6880      	ldr	r0, [r0, #8]
   18df6:	3b01      	subs	r3, #1
   18df8:	2800      	cmp	r0, #0
   18dfa:	f43e a82d 	beq.w	16e58 <d_print_comp_inner+0x1c4>
   18dfe:	7802      	ldrb	r2, [r0, #0]
   18e00:	2a2f      	cmp	r2, #47	; 0x2f
   18e02:	d0f4      	beq.n	18dee <d_print_comp_inner+0x215a>
   18e04:	f7fe b828 	b.w	16e58 <d_print_comp_inner+0x1c4>
   18e08:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   18e0c:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   18e10:	f1be 0f00 	cmp.w	lr, #0
   18e14:	dd14      	ble.n	18e40 <d_print_comp_inner+0x21ac>
   18e16:	6813      	ldr	r3, [r2, #0]
   18e18:	4299      	cmp	r1, r3
   18e1a:	f000 83f5 	beq.w	19608 <d_print_comp_inner+0x2974>
   18e1e:	f102 0008 	add.w	r0, r2, #8
   18e22:	463b      	mov	r3, r7
   18e24:	46a4      	mov	ip, r4
   18e26:	e004      	b.n	18e32 <d_print_comp_inner+0x219e>
   18e28:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18e2c:	42a1      	cmp	r1, r4
   18e2e:	f000 81d4 	beq.w	191da <d_print_comp_inner+0x2546>
   18e32:	3301      	adds	r3, #1
   18e34:	459e      	cmp	lr, r3
   18e36:	4681      	mov	r9, r0
   18e38:	f100 0008 	add.w	r0, r0, #8
   18e3c:	d1f4      	bne.n	18e28 <d_print_comp_inner+0x2194>
   18e3e:	4664      	mov	r4, ip
   18e40:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18e44:	459e      	cmp	lr, r3
   18e46:	f280 84b9 	bge.w	197bc <d_print_comp_inner+0x2b28>
   18e4a:	f10e 0301 	add.w	r3, lr, #1
   18e4e:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   18e52:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   18e56:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   18e5a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18e5e:	3004      	adds	r0, #4
   18e60:	468e      	mov	lr, r1
   18e62:	2a00      	cmp	r2, #0
   18e64:	f000 848d 	beq.w	19782 <d_print_comp_inner+0x2aee>
   18e68:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   18e6c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   18e70:	428b      	cmp	r3, r1
   18e72:	f103 0c01 	add.w	ip, r3, #1
   18e76:	f280 84a1 	bge.w	197bc <d_print_comp_inner+0x2b28>
   18e7a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   18e7e:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   18e82:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18e86:	6851      	ldr	r1, [r2, #4]
   18e88:	6059      	str	r1, [r3, #4]
   18e8a:	6003      	str	r3, [r0, #0]
   18e8c:	6812      	ldr	r2, [r2, #0]
   18e8e:	4618      	mov	r0, r3
   18e90:	e7e7      	b.n	18e62 <d_print_comp_inner+0x21ce>
   18e92:	2500      	movs	r5, #0
   18e94:	4619      	mov	r1, r3
   18e96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e9e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18ea2:	4620      	mov	r0, r4
   18ea4:	4798      	blx	r3
   18ea6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18eaa:	1c5a      	adds	r2, r3, #1
   18eac:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18eb0:	462b      	mov	r3, r5
   18eb2:	2201      	movs	r2, #1
   18eb4:	f7fe bd3d 	b.w	17932 <d_print_comp_inner+0xc9e>
   18eb8:	2e00      	cmp	r6, #0
   18eba:	f000 844d 	beq.w	19758 <d_print_comp_inner+0x2ac4>
   18ebe:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   18ec2:	f040 8488 	bne.w	197d6 <d_print_comp_inner+0x2b42>
   18ec6:	6873      	ldr	r3, [r6, #4]
   18ec8:	b373      	cbz	r3, 18f28 <d_print_comp_inner+0x2294>
   18eca:	4607      	mov	r7, r0
   18ecc:	e007      	b.n	18ede <d_print_comp_inner+0x224a>
   18ece:	3701      	adds	r7, #1
   18ed0:	68b6      	ldr	r6, [r6, #8]
   18ed2:	b356      	cbz	r6, 18f2a <d_print_comp_inner+0x2296>
   18ed4:	7833      	ldrb	r3, [r6, #0]
   18ed6:	2b2f      	cmp	r3, #47	; 0x2f
   18ed8:	d127      	bne.n	18f2a <d_print_comp_inner+0x2296>
   18eda:	6873      	ldr	r3, [r6, #4]
   18edc:	b32b      	cbz	r3, 18f2a <d_print_comp_inner+0x2296>
   18ede:	781a      	ldrb	r2, [r3, #0]
   18ee0:	2a4a      	cmp	r2, #74	; 0x4a
   18ee2:	d1f4      	bne.n	18ece <d_print_comp_inner+0x223a>
   18ee4:	6859      	ldr	r1, [r3, #4]
   18ee6:	4620      	mov	r0, r4
   18ee8:	f7fb fe2c 	bl	14b44 <d_find_pack>
   18eec:	b198      	cbz	r0, 18f16 <d_print_comp_inner+0x2282>
   18eee:	7803      	ldrb	r3, [r0, #0]
   18ef0:	2b2f      	cmp	r3, #47	; 0x2f
   18ef2:	f040 846c 	bne.w	197ce <d_print_comp_inner+0x2b3a>
   18ef6:	6843      	ldr	r3, [r0, #4]
   18ef8:	2b00      	cmp	r3, #0
   18efa:	f000 8464 	beq.w	197c6 <d_print_comp_inner+0x2b32>
   18efe:	4603      	mov	r3, r0
   18f00:	2000      	movs	r0, #0
   18f02:	e004      	b.n	18f0e <d_print_comp_inner+0x227a>
   18f04:	781a      	ldrb	r2, [r3, #0]
   18f06:	2a2f      	cmp	r2, #47	; 0x2f
   18f08:	d105      	bne.n	18f16 <d_print_comp_inner+0x2282>
   18f0a:	685a      	ldr	r2, [r3, #4]
   18f0c:	b11a      	cbz	r2, 18f16 <d_print_comp_inner+0x2282>
   18f0e:	689b      	ldr	r3, [r3, #8]
   18f10:	3001      	adds	r0, #1
   18f12:	2b00      	cmp	r3, #0
   18f14:	d1f6      	bne.n	18f04 <d_print_comp_inner+0x2270>
   18f16:	4407      	add	r7, r0
   18f18:	e7da      	b.n	18ed0 <d_print_comp_inner+0x223c>
   18f1a:	bf00      	nop
   18f1c:	00024354 	.word	0x00024354
   18f20:	000243a8 	.word	0x000243a8
   18f24:	000243b8 	.word	0x000243b8
   18f28:	461f      	mov	r7, r3
   18f2a:	4639      	mov	r1, r7
   18f2c:	4620      	mov	r0, r4
   18f2e:	f7fb fe8d 	bl	14c4c <d_append_num>
   18f32:	f7fd bf7d 	b.w	16e30 <d_print_comp_inner+0x19c>
   18f36:	2500      	movs	r5, #0
   18f38:	4619      	mov	r1, r3
   18f3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f42:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18f46:	4620      	mov	r0, r4
   18f48:	4798      	blx	r3
   18f4a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f4e:	1c5a      	adds	r2, r3, #1
   18f50:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18f54:	462b      	mov	r3, r5
   18f56:	2101      	movs	r1, #1
   18f58:	f7fe bb8e 	b.w	17678 <d_print_comp_inner+0x9e4>
   18f5c:	2600      	movs	r6, #0
   18f5e:	4619      	mov	r1, r3
   18f60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f68:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18f6c:	4620      	mov	r0, r4
   18f6e:	4798      	blx	r3
   18f70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f74:	1c5a      	adds	r2, r3, #1
   18f76:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18f7a:	4633      	mov	r3, r6
   18f7c:	2101      	movs	r1, #1
   18f7e:	f7fe bb65 	b.w	1764c <d_print_comp_inner+0x9b8>
   18f82:	2200      	movs	r2, #0
   18f84:	4619      	mov	r1, r3
   18f86:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   18f8a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f92:	4620      	mov	r0, r4
   18f94:	4798      	blx	r3
   18f96:	2329      	movs	r3, #41	; 0x29
   18f98:	7023      	strb	r3, [r4, #0]
   18f9a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f9e:	782a      	ldrb	r2, [r5, #0]
   18fa0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18fa4:	2101      	movs	r1, #1
   18fa6:	3301      	adds	r3, #1
   18fa8:	2a3d      	cmp	r2, #61	; 0x3d
   18faa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18fae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18fb2:	f47e af58 	bne.w	17e66 <d_print_comp_inner+0x11d2>
   18fb6:	e63f      	b.n	18c38 <d_print_comp_inner+0x1fa4>
   18fb8:	2700      	movs	r7, #0
   18fba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fbe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18fc2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18fc6:	4620      	mov	r0, r4
   18fc8:	4798      	blx	r3
   18fca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18fce:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18fd2:	3301      	adds	r3, #1
   18fd4:	4639      	mov	r1, r7
   18fd6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18fda:	f7fe bf28 	b.w	17e2e <d_print_comp_inner+0x119a>
   18fde:	2500      	movs	r5, #0
   18fe0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fe4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18fe8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18fec:	4620      	mov	r0, r4
   18fee:	4798      	blx	r3
   18ff0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ff4:	3301      	adds	r3, #1
   18ff6:	4629      	mov	r1, r5
   18ff8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ffc:	2201      	movs	r2, #1
   18ffe:	f7ff bb12 	b.w	18626 <d_print_comp_inner+0x1992>
   19002:	781b      	ldrb	r3, [r3, #0]
   19004:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   19008:	2901      	cmp	r1, #1
   1900a:	d903      	bls.n	19014 <d_print_comp_inner+0x2380>
   1900c:	3b72      	subs	r3, #114	; 0x72
   1900e:	2b01      	cmp	r3, #1
   19010:	f63d aead 	bhi.w	16d6e <d_print_comp_inner+0xda>
   19014:	4641      	mov	r1, r8
   19016:	4620      	mov	r0, r4
   19018:	f001 f9c8 	bl	1a3ac <d_print_expr_op>
   1901c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19020:	29ff      	cmp	r1, #255	; 0xff
   19022:	f000 8271 	beq.w	19508 <d_print_comp_inner+0x2874>
   19026:	1c4a      	adds	r2, r1, #1
   19028:	233c      	movs	r3, #60	; 0x3c
   1902a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1902e:	5463      	strb	r3, [r4, r1]
   19030:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19034:	68ab      	ldr	r3, [r5, #8]
   19036:	4641      	mov	r1, r8
   19038:	685a      	ldr	r2, [r3, #4]
   1903a:	4620      	mov	r0, r4
   1903c:	f000 fbce 	bl	197dc <d_print_comp>
   19040:	2202      	movs	r2, #2
   19042:	49d5      	ldr	r1, [pc, #852]	; (19398 <d_print_comp_inner+0x2704>)
   19044:	4620      	mov	r0, r4
   19046:	f7fb fb51 	bl	146ec <d_append_buffer>
   1904a:	68ab      	ldr	r3, [r5, #8]
   1904c:	4641      	mov	r1, r8
   1904e:	689a      	ldr	r2, [r3, #8]
   19050:	4620      	mov	r0, r4
   19052:	f000 fbc3 	bl	197dc <d_print_comp>
   19056:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1905a:	29ff      	cmp	r1, #255	; 0xff
   1905c:	f000 81df 	beq.w	1941e <d_print_comp_inner+0x278a>
   19060:	2329      	movs	r3, #41	; 0x29
   19062:	1c4a      	adds	r2, r1, #1
   19064:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19068:	5463      	strb	r3, [r4, r1]
   1906a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1906e:	f7fd bedf 	b.w	16e30 <d_print_comp_inner+0x19c>
   19072:	4632      	mov	r2, r6
   19074:	4641      	mov	r1, r8
   19076:	4620      	mov	r0, r4
   19078:	f000 fbb0 	bl	197dc <d_print_comp>
   1907c:	f7fd bed8 	b.w	16e30 <d_print_comp_inner+0x19c>
   19080:	2600      	movs	r6, #0
   19082:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19086:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1908a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1908e:	4620      	mov	r0, r4
   19090:	4798      	blx	r3
   19092:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19096:	3301      	adds	r3, #1
   19098:	4631      	mov	r1, r6
   1909a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1909e:	2201      	movs	r2, #1
   190a0:	f7fe ba55 	b.w	1754e <d_print_comp_inner+0x8ba>
   190a4:	49bd      	ldr	r1, [pc, #756]	; (1939c <d_print_comp_inner+0x2708>)
   190a6:	6870      	ldr	r0, [r6, #4]
   190a8:	f005 fe98 	bl	1eddc <strncmp>
   190ac:	2800      	cmp	r0, #0
   190ae:	f47e aabd 	bne.w	1762c <d_print_comp_inner+0x998>
   190b2:	68aa      	ldr	r2, [r5, #8]
   190b4:	4641      	mov	r1, r8
   190b6:	4620      	mov	r0, r4
   190b8:	f000 fb90 	bl	197dc <d_print_comp>
   190bc:	2202      	movs	r2, #2
   190be:	49b8      	ldr	r1, [pc, #736]	; (193a0 <d_print_comp_inner+0x270c>)
   190c0:	4620      	mov	r0, r4
   190c2:	f7fb fb13 	bl	146ec <d_append_buffer>
   190c6:	f7fe badd 	b.w	17684 <d_print_comp_inner+0x9f0>
   190ca:	68aa      	ldr	r2, [r5, #8]
   190cc:	7817      	ldrb	r7, [r2, #0]
   190ce:	2f00      	cmp	r7, #0
   190d0:	f47e aea8 	bne.w	17e24 <d_print_comp_inner+0x1190>
   190d4:	2b3d      	cmp	r3, #61	; 0x3d
   190d6:	f000 82ef 	beq.w	196b8 <d_print_comp_inner+0x2a24>
   190da:	68aa      	ldr	r2, [r5, #8]
   190dc:	4641      	mov	r1, r8
   190de:	4620      	mov	r0, r4
   190e0:	3e02      	subs	r6, #2
   190e2:	f000 fb7b 	bl	197dc <d_print_comp>
   190e6:	2e04      	cmp	r6, #4
   190e8:	f63d aea2 	bhi.w	16e30 <d_print_comp_inner+0x19c>
   190ec:	e8df f006 	tbb	[pc, r6]
   190f0:	0a111826 	.word	0x0a111826
   190f4:	03          	.byte	0x03
   190f5:	00          	.byte	0x00
   190f6:	4620      	mov	r0, r4
   190f8:	2203      	movs	r2, #3
   190fa:	49aa      	ldr	r1, [pc, #680]	; (193a4 <d_print_comp_inner+0x2710>)
   190fc:	f7fb faf6 	bl	146ec <d_append_buffer>
   19100:	f7fd be96 	b.w	16e30 <d_print_comp_inner+0x19c>
   19104:	4620      	mov	r0, r4
   19106:	2202      	movs	r2, #2
   19108:	49a7      	ldr	r1, [pc, #668]	; (193a8 <d_print_comp_inner+0x2714>)
   1910a:	f7fb faef 	bl	146ec <d_append_buffer>
   1910e:	f7fd be8f 	b.w	16e30 <d_print_comp_inner+0x19c>
   19112:	4620      	mov	r0, r4
   19114:	2202      	movs	r2, #2
   19116:	49a5      	ldr	r1, [pc, #660]	; (193ac <d_print_comp_inner+0x2718>)
   19118:	f7fb fae8 	bl	146ec <d_append_buffer>
   1911c:	f7fd be88 	b.w	16e30 <d_print_comp_inner+0x19c>
   19120:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19124:	29ff      	cmp	r1, #255	; 0xff
   19126:	f000 831a 	beq.w	1975e <d_print_comp_inner+0x2aca>
   1912a:	236c      	movs	r3, #108	; 0x6c
   1912c:	1c4a      	adds	r2, r1, #1
   1912e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19132:	5463      	strb	r3, [r4, r1]
   19134:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19138:	f7fd be7a 	b.w	16e30 <d_print_comp_inner+0x19c>
   1913c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19140:	29ff      	cmp	r1, #255	; 0xff
   19142:	f000 82db 	beq.w	196fc <d_print_comp_inner+0x2a68>
   19146:	2375      	movs	r3, #117	; 0x75
   19148:	1c4a      	adds	r2, r1, #1
   1914a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1914e:	5463      	strb	r3, [r4, r1]
   19150:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19154:	f7fd be6c 	b.w	16e30 <d_print_comp_inner+0x19c>
   19158:	2600      	movs	r6, #0
   1915a:	4619      	mov	r1, r3
   1915c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19160:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19164:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19168:	4620      	mov	r0, r4
   1916a:	4798      	blx	r3
   1916c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19170:	1c5a      	adds	r2, r3, #1
   19172:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19176:	4633      	mov	r3, r6
   19178:	2101      	movs	r1, #1
   1917a:	f7fe bd3c 	b.w	17bf6 <d_print_comp_inner+0xf62>
   1917e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19182:	f7fe bf95 	b.w	180b0 <d_print_comp_inner+0x141c>
   19186:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1918a:	29ff      	cmp	r1, #255	; 0xff
   1918c:	f000 8244 	beq.w	19618 <d_print_comp_inner+0x2984>
   19190:	2320      	movs	r3, #32
   19192:	1c4a      	adds	r2, r1, #1
   19194:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19198:	5463      	strb	r3, [r4, r1]
   1919a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1919e:	e447      	b.n	18a30 <d_print_comp_inner+0x1d9c>
   191a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   191a4:	29ff      	cmp	r1, #255	; 0xff
   191a6:	f000 826e 	beq.w	19686 <d_print_comp_inner+0x29f2>
   191aa:	2320      	movs	r3, #32
   191ac:	1c4a      	adds	r2, r1, #1
   191ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   191b2:	5463      	strb	r3, [r4, r1]
   191b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   191b8:	e419      	b.n	189ee <d_print_comp_inner+0x1d5a>
   191ba:	2500      	movs	r5, #0
   191bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191c0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   191c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191c8:	4620      	mov	r0, r4
   191ca:	4798      	blx	r3
   191cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191d0:	3301      	adds	r3, #1
   191d2:	4629      	mov	r1, r5
   191d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   191d8:	e4dd      	b.n	18b96 <d_print_comp_inner+0x1f02>
   191da:	4664      	mov	r4, ip
   191dc:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   191e0:	b1d8      	cbz	r0, 1921a <d_print_comp_inner+0x2586>
   191e2:	6802      	ldr	r2, [r0, #0]
   191e4:	4291      	cmp	r1, r2
   191e6:	d00a      	beq.n	191fe <d_print_comp_inner+0x256a>
   191e8:	4603      	mov	r3, r0
   191ea:	e004      	b.n	191f6 <d_print_comp_inner+0x2562>
   191ec:	685b      	ldr	r3, [r3, #4]
   191ee:	b1a3      	cbz	r3, 1921a <d_print_comp_inner+0x2586>
   191f0:	681a      	ldr	r2, [r3, #0]
   191f2:	4291      	cmp	r1, r2
   191f4:	d003      	beq.n	191fe <d_print_comp_inner+0x256a>
   191f6:	4295      	cmp	r5, r2
   191f8:	d1f8      	bne.n	191ec <d_print_comp_inner+0x2558>
   191fa:	4298      	cmp	r0, r3
   191fc:	d0f6      	beq.n	191ec <d_print_comp_inner+0x2558>
   191fe:	3104      	adds	r1, #4
   19200:	4620      	mov	r0, r4
   19202:	f7fb fc83 	bl	14b0c <d_lookup_template_argument.isra.6>
   19206:	2800      	cmp	r0, #0
   19208:	f43d ae26 	beq.w	16e58 <d_print_comp_inner+0x1c4>
   1920c:	7803      	ldrb	r3, [r0, #0]
   1920e:	2b2f      	cmp	r3, #47	; 0x2f
   19210:	f43d ae11 	beq.w	16e36 <d_print_comp_inner+0x1a2>
   19214:	4601      	mov	r1, r0
   19216:	f7fe bc30 	b.w	17a7a <d_print_comp_inner+0xde6>
   1921a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1921e:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   19222:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19226:	3104      	adds	r1, #4
   19228:	4620      	mov	r0, r4
   1922a:	f7fb fc6f 	bl	14b0c <d_lookup_template_argument.isra.6>
   1922e:	2800      	cmp	r0, #0
   19230:	f43d ae10 	beq.w	16e54 <d_print_comp_inner+0x1c0>
   19234:	2701      	movs	r7, #1
   19236:	e7e9      	b.n	1920c <d_print_comp_inner+0x2578>
   19238:	2600      	movs	r6, #0
   1923a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1923e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19242:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19246:	4620      	mov	r0, r4
   19248:	4798      	blx	r3
   1924a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1924e:	f8da 5004 	ldr.w	r5, [sl, #4]
   19252:	3301      	adds	r3, #1
   19254:	4631      	mov	r1, r6
   19256:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1925a:	f7ff b85a 	b.w	18312 <d_print_comp_inner+0x167e>
   1925e:	68aa      	ldr	r2, [r5, #8]
   19260:	4641      	mov	r1, r8
   19262:	4620      	mov	r0, r4
   19264:	f000 faba 	bl	197dc <d_print_comp>
   19268:	9b06      	ldr	r3, [sp, #24]
   1926a:	9a00      	ldr	r2, [sp, #0]
   1926c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   19270:	2b00      	cmp	r3, #0
   19272:	f43e ac9d 	beq.w	17bb0 <d_print_comp_inner+0xf1c>
   19276:	f7fd bddb 	b.w	16e30 <d_print_comp_inner+0x19c>
   1927a:	255f      	movs	r5, #95	; 0x5f
   1927c:	f7ff ba10 	b.w	186a0 <d_print_comp_inner+0x1a0c>
   19280:	2500      	movs	r5, #0
   19282:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19286:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1928a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1928e:	4620      	mov	r0, r4
   19290:	4798      	blx	r3
   19292:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19296:	3301      	adds	r3, #1
   19298:	4629      	mov	r1, r5
   1929a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1929e:	f7ff bb82 	b.w	189a6 <d_print_comp_inner+0x1d12>
   192a2:	4648      	mov	r0, r9
   192a4:	4942      	ldr	r1, [pc, #264]	; (193b0 <d_print_comp_inner+0x271c>)
   192a6:	f005 fbbf 	bl	1ea28 <strcmp>
   192aa:	b120      	cbz	r0, 192b6 <d_print_comp_inner+0x2622>
   192ac:	463a      	mov	r2, r7
   192ae:	4641      	mov	r1, r8
   192b0:	4620      	mov	r0, r4
   192b2:	f001 f87b 	bl	1a3ac <d_print_expr_op>
   192b6:	68ab      	ldr	r3, [r5, #8]
   192b8:	4641      	mov	r1, r8
   192ba:	689a      	ldr	r2, [r3, #8]
   192bc:	4620      	mov	r0, r4
   192be:	f001 f8b3 	bl	1a428 <d_print_subexpr>
   192c2:	f7fd bd9d 	b.w	16e00 <d_print_comp_inner+0x16c>
   192c6:	2600      	movs	r6, #0
   192c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192cc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   192d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192d4:	4620      	mov	r0, r4
   192d6:	4798      	blx	r3
   192d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192dc:	3301      	adds	r3, #1
   192de:	4631      	mov	r1, r6
   192e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192e4:	f7ff bb88 	b.w	189f8 <d_print_comp_inner+0x1d64>
   192e8:	2500      	movs	r5, #0
   192ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192ee:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   192f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192f6:	4620      	mov	r0, r4
   192f8:	4798      	blx	r3
   192fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192fe:	3301      	adds	r3, #1
   19300:	4629      	mov	r1, r5
   19302:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19306:	f7fe bb59 	b.w	179bc <d_print_comp_inner+0xd28>
   1930a:	2500      	movs	r5, #0
   1930c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19310:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19314:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19318:	4798      	blx	r3
   1931a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1931e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19322:	3301      	adds	r3, #1
   19324:	4629      	mov	r1, r5
   19326:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1932a:	f7fe bb2b 	b.w	17984 <d_print_comp_inner+0xcf0>
   1932e:	6840      	ldr	r0, [r0, #4]
   19330:	2800      	cmp	r0, #0
   19332:	f43d ad91 	beq.w	16e58 <d_print_comp_inner+0x1c4>
   19336:	f7fe b959 	b.w	175ec <d_print_comp_inner+0x958>
   1933a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   1933e:	4619      	mov	r1, r3
   19340:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19344:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19348:	4620      	mov	r0, r4
   1934a:	4798      	blx	r3
   1934c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19350:	1c5a      	adds	r2, r3, #1
   19352:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19356:	462b      	mov	r3, r5
   19358:	f7ff bb14 	b.w	18984 <d_print_comp_inner+0x1cf0>
   1935c:	6873      	ldr	r3, [r6, #4]
   1935e:	781a      	ldrb	r2, [r3, #0]
   19360:	2a01      	cmp	r2, #1
   19362:	f000 8153 	beq.w	1960c <d_print_comp_inner+0x2978>
   19366:	f896 a000 	ldrb.w	sl, [r6]
   1936a:	f7ff bae0 	b.w	1892e <d_print_comp_inner+0x1c9a>
   1936e:	2500      	movs	r5, #0
   19370:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19374:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19378:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1937c:	4620      	mov	r0, r4
   1937e:	4798      	blx	r3
   19380:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19384:	3301      	adds	r3, #1
   19386:	4629      	mov	r1, r5
   19388:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1938c:	f7ff bb55 	b.w	18a3a <d_print_comp_inner+0x1da6>
   19390:	4654      	mov	r4, sl
   19392:	f7fe be8d 	b.w	180b0 <d_print_comp_inner+0x141c>
   19396:	bf00      	nop
   19398:	00024554 	.word	0x00024554
   1939c:	000243bc 	.word	0x000243bc
   193a0:	000243c4 	.word	0x000243c4
   193a4:	00024570 	.word	0x00024570
   193a8:	0002456c 	.word	0x0002456c
   193ac:	00024568 	.word	0x00024568
   193b0:	0002435c 	.word	0x0002435c
   193b4:	686a      	ldr	r2, [r5, #4]
   193b6:	4641      	mov	r1, r8
   193b8:	4620      	mov	r0, r4
   193ba:	f001 f835 	bl	1a428 <d_print_subexpr>
   193be:	4620      	mov	r0, r4
   193c0:	2203      	movs	r2, #3
   193c2:	49e2      	ldr	r1, [pc, #904]	; (1974c <d_print_comp_inner+0x2ab8>)
   193c4:	f7fb f992 	bl	146ec <d_append_buffer>
   193c8:	f7fd bd32 	b.w	16e30 <d_print_comp_inner+0x19c>
   193cc:	ab14      	add	r3, sp, #80	; 0x50
   193ce:	9603      	str	r6, [sp, #12]
   193d0:	f843 cd48 	str.w	ip, [r3, #-72]!
   193d4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   193d8:	f7fe b85a 	b.w	17490 <d_print_comp_inner+0x7fc>
   193dc:	2700      	movs	r7, #0
   193de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193e2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   193e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193ea:	4620      	mov	r0, r4
   193ec:	4798      	blx	r3
   193ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193f2:	3301      	adds	r3, #1
   193f4:	4639      	mov	r1, r7
   193f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193fa:	e41d      	b.n	18c38 <d_print_comp_inner+0x1fa4>
   193fc:	2600      	movs	r6, #0
   193fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19402:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19406:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1940a:	4620      	mov	r0, r4
   1940c:	4798      	blx	r3
   1940e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19412:	3301      	adds	r3, #1
   19414:	4631      	mov	r1, r6
   19416:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1941a:	f7ff bb8a 	b.w	18b32 <d_print_comp_inner+0x1e9e>
   1941e:	2500      	movs	r5, #0
   19420:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19424:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19428:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1942c:	4620      	mov	r0, r4
   1942e:	4798      	blx	r3
   19430:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19434:	3301      	adds	r3, #1
   19436:	4629      	mov	r1, r5
   19438:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1943c:	e610      	b.n	19060 <d_print_comp_inner+0x23cc>
   1943e:	2600      	movs	r6, #0
   19440:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19444:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19448:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1944c:	4620      	mov	r0, r4
   1944e:	4798      	blx	r3
   19450:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19454:	3301      	adds	r3, #1
   19456:	4631      	mov	r1, r6
   19458:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1945c:	f7ff bb8a 	b.w	18b74 <d_print_comp_inner+0x1ee0>
   19460:	685a      	ldr	r2, [r3, #4]
   19462:	6891      	ldr	r1, [r2, #8]
   19464:	2901      	cmp	r1, #1
   19466:	f47d ac90 	bne.w	16d8a <d_print_comp_inner+0xf6>
   1946a:	6852      	ldr	r2, [r2, #4]
   1946c:	7812      	ldrb	r2, [r2, #0]
   1946e:	2a3e      	cmp	r2, #62	; 0x3e
   19470:	f47d ac8b 	bne.w	16d8a <d_print_comp_inner+0xf6>
   19474:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19478:	29ff      	cmp	r1, #255	; 0xff
   1947a:	d10f      	bne.n	1949c <d_print_comp_inner+0x2808>
   1947c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19480:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19484:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19488:	4620      	mov	r0, r4
   1948a:	4798      	blx	r3
   1948c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19490:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19494:	3301      	adds	r3, #1
   19496:	4631      	mov	r1, r6
   19498:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1949c:	2328      	movs	r3, #40	; 0x28
   1949e:	1c4a      	adds	r2, r1, #1
   194a0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   194a4:	5463      	strb	r3, [r4, r1]
   194a6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   194aa:	686b      	ldr	r3, [r5, #4]
   194ac:	f7fd bc6d 	b.w	16d8a <d_print_comp_inner+0xf6>
   194b0:	2500      	movs	r5, #0
   194b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194b6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   194ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194be:	4620      	mov	r0, r4
   194c0:	4798      	blx	r3
   194c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194c6:	3301      	adds	r3, #1
   194c8:	4629      	mov	r1, r5
   194ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194ce:	f7ff bb0b 	b.w	18ae8 <d_print_comp_inner+0x1e54>
   194d2:	f8db b004 	ldr.w	fp, [fp, #4]
   194d6:	f1bb 0f00 	cmp.w	fp, #0
   194da:	f43e ade9 	beq.w	180b0 <d_print_comp_inner+0x141c>
   194de:	f7fd bfc3 	b.w	17468 <d_print_comp_inner+0x7d4>
   194e2:	9b02      	ldr	r3, [sp, #8]
   194e4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   194e8:	f7fd bfdb 	b.w	174a2 <d_print_comp_inner+0x80e>
   194ec:	6893      	ldr	r3, [r2, #8]
   194ee:	781b      	ldrb	r3, [r3, #0]
   194f0:	2b29      	cmp	r3, #41	; 0x29
   194f2:	bf1c      	itt	ne
   194f4:	2301      	movne	r3, #1
   194f6:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   194fa:	6852      	ldr	r2, [r2, #4]
   194fc:	4641      	mov	r1, r8
   194fe:	4620      	mov	r0, r4
   19500:	f000 ff92 	bl	1a428 <d_print_subexpr>
   19504:	f7fd bc52 	b.w	16dac <d_print_comp_inner+0x118>
   19508:	2600      	movs	r6, #0
   1950a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1950e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19512:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19516:	4620      	mov	r0, r4
   19518:	4798      	blx	r3
   1951a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1951e:	3301      	adds	r3, #1
   19520:	4631      	mov	r1, r6
   19522:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19526:	e57e      	b.n	19026 <d_print_comp_inner+0x2392>
   19528:	6872      	ldr	r2, [r6, #4]
   1952a:	4641      	mov	r1, r8
   1952c:	4620      	mov	r0, r4
   1952e:	f000 ff7b 	bl	1a428 <d_print_subexpr>
   19532:	464a      	mov	r2, r9
   19534:	4641      	mov	r1, r8
   19536:	4620      	mov	r0, r4
   19538:	f000 ff38 	bl	1a3ac <d_print_expr_op>
   1953c:	f7fd bc78 	b.w	16e30 <d_print_comp_inner+0x19c>
   19540:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19544:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19548:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1954c:	4620      	mov	r0, r4
   1954e:	4798      	blx	r3
   19550:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19554:	3301      	adds	r3, #1
   19556:	4629      	mov	r1, r5
   19558:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1955c:	f7fd bfad 	b.w	174ba <d_print_comp_inner+0x826>
   19560:	464a      	mov	r2, r9
   19562:	4641      	mov	r1, r8
   19564:	4620      	mov	r0, r4
   19566:	f000 ff5f 	bl	1a428 <d_print_subexpr>
   1956a:	4652      	mov	r2, sl
   1956c:	4641      	mov	r1, r8
   1956e:	4620      	mov	r0, r4
   19570:	f000 ff1c 	bl	1a3ac <d_print_expr_op>
   19574:	463a      	mov	r2, r7
   19576:	4641      	mov	r1, r8
   19578:	4620      	mov	r0, r4
   1957a:	f000 ff55 	bl	1a428 <d_print_subexpr>
   1957e:	4620      	mov	r0, r4
   19580:	2203      	movs	r2, #3
   19582:	4973      	ldr	r1, [pc, #460]	; (19750 <d_print_comp_inner+0x2abc>)
   19584:	f7fb f8b2 	bl	146ec <d_append_buffer>
   19588:	462a      	mov	r2, r5
   1958a:	4641      	mov	r1, r8
   1958c:	4620      	mov	r0, r4
   1958e:	f000 ff4b 	bl	1a428 <d_print_subexpr>
   19592:	f7fd bc4d 	b.w	16e30 <d_print_comp_inner+0x19c>
   19596:	454f      	cmp	r7, r9
   19598:	f67f ae6f 	bls.w	1927a <d_print_comp_inner+0x25e6>
   1959c:	2d5f      	cmp	r5, #95	; 0x5f
   1959e:	f47f ae6c 	bne.w	1927a <d_print_comp_inner+0x25e6>
   195a2:	28ff      	cmp	r0, #255	; 0xff
   195a4:	f63f a87c 	bhi.w	186a0 <d_print_comp_inner+0x1a0c>
   195a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   195ac:	29ff      	cmp	r1, #255	; 0xff
   195ae:	b2c5      	uxtb	r5, r0
   195b0:	d10f      	bne.n	195d2 <d_print_comp_inner+0x293e>
   195b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   195ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195be:	4620      	mov	r0, r4
   195c0:	4798      	blx	r3
   195c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195c6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   195ca:	3301      	adds	r3, #1
   195cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195d0:	2100      	movs	r1, #0
   195d2:	1c4b      	adds	r3, r1, #1
   195d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   195d8:	464e      	mov	r6, r9
   195da:	5465      	strb	r5, [r4, r1]
   195dc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   195e0:	f7ff b868 	b.w	186b4 <d_print_comp_inner+0x1a20>
   195e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195e8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   195ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195f0:	4620      	mov	r0, r4
   195f2:	4798      	blx	r3
   195f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195f8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   195fc:	3301      	adds	r3, #1
   195fe:	4631      	mov	r1, r6
   19600:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19604:	f7ff bbe5 	b.w	18dd2 <d_print_comp_inner+0x213e>
   19608:	4691      	mov	r9, r2
   1960a:	e5e7      	b.n	191dc <d_print_comp_inner+0x2548>
   1960c:	68b2      	ldr	r2, [r6, #8]
   1960e:	7812      	ldrb	r2, [r2, #0]
   19610:	2a29      	cmp	r2, #41	; 0x29
   19612:	bf08      	it	eq
   19614:	461e      	moveq	r6, r3
   19616:	e6a6      	b.n	19366 <d_print_comp_inner+0x26d2>
   19618:	2500      	movs	r5, #0
   1961a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1961e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19622:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19626:	4620      	mov	r0, r4
   19628:	4798      	blx	r3
   1962a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1962e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19632:	3301      	adds	r3, #1
   19634:	4629      	mov	r1, r5
   19636:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1963a:	e5a9      	b.n	19190 <d_print_comp_inner+0x24fc>
   1963c:	2600      	movs	r6, #0
   1963e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19642:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19646:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1964a:	4620      	mov	r0, r4
   1964c:	4798      	blx	r3
   1964e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19652:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19656:	3301      	adds	r3, #1
   19658:	4631      	mov	r1, r6
   1965a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1965e:	f7fd bbc8 	b.w	16df2 <d_print_comp_inner+0x15e>
   19662:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   19666:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1966a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1966e:	4620      	mov	r0, r4
   19670:	4798      	blx	r3
   19672:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19676:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1967a:	3301      	adds	r3, #1
   1967c:	4631      	mov	r1, r6
   1967e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19682:	f7fd bba4 	b.w	16dce <d_print_comp_inner+0x13a>
   19686:	2600      	movs	r6, #0
   19688:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1968c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19690:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19694:	4620      	mov	r0, r4
   19696:	4798      	blx	r3
   19698:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1969c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   196a0:	3301      	adds	r3, #1
   196a2:	4631      	mov	r1, r6
   196a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196a8:	e57f      	b.n	191aa <d_print_comp_inner+0x2516>
   196aa:	6841      	ldr	r1, [r0, #4]
   196ac:	2900      	cmp	r1, #0
   196ae:	f43d abd0 	beq.w	16e52 <d_print_comp_inner+0x1be>
   196b2:	780b      	ldrb	r3, [r1, #0]
   196b4:	f7fe b9e1 	b.w	17a7a <d_print_comp_inner+0xde6>
   196b8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   196bc:	29ff      	cmp	r1, #255	; 0xff
   196be:	d00d      	beq.n	196dc <d_print_comp_inner+0x2a48>
   196c0:	232d      	movs	r3, #45	; 0x2d
   196c2:	1c4a      	adds	r2, r1, #1
   196c4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   196c8:	5463      	strb	r3, [r4, r1]
   196ca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   196ce:	e504      	b.n	190da <d_print_comp_inner+0x2446>
   196d0:	2205      	movs	r2, #5
   196d2:	4920      	ldr	r1, [pc, #128]	; (19754 <d_print_comp_inner+0x2ac0>)
   196d4:	f7fb f80a 	bl	146ec <d_append_buffer>
   196d8:	f7fd bbaa 	b.w	16e30 <d_print_comp_inner+0x19c>
   196dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   196e0:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   196e4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   196e8:	4798      	blx	r3
   196ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196ee:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   196f2:	3301      	adds	r3, #1
   196f4:	4639      	mov	r1, r7
   196f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196fa:	e7e1      	b.n	196c0 <d_print_comp_inner+0x2a2c>
   196fc:	2500      	movs	r5, #0
   196fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19702:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19706:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1970a:	4620      	mov	r0, r4
   1970c:	4798      	blx	r3
   1970e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19712:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19716:	3301      	adds	r3, #1
   19718:	4629      	mov	r1, r5
   1971a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1971e:	e512      	b.n	19146 <d_print_comp_inner+0x24b2>
   19720:	2700      	movs	r7, #0
   19722:	f7ff b913 	b.w	1894c <d_print_comp_inner+0x1cb8>
   19726:	2500      	movs	r5, #0
   19728:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1972c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19730:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19734:	4620      	mov	r0, r4
   19736:	4798      	blx	r3
   19738:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1973c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19740:	3301      	adds	r3, #1
   19742:	4629      	mov	r1, r5
   19744:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19748:	f7fd bb6b 	b.w	16e22 <d_print_comp_inner+0x18e>
   1974c:	00022ae4 	.word	0x00022ae4
   19750:	0002455c 	.word	0x0002455c
   19754:	00024574 	.word	0x00024574
   19758:	4637      	mov	r7, r6
   1975a:	f7ff bbe6 	b.w	18f2a <d_print_comp_inner+0x2296>
   1975e:	2500      	movs	r5, #0
   19760:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19764:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19768:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1976c:	4620      	mov	r0, r4
   1976e:	4798      	blx	r3
   19770:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19774:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19778:	3301      	adds	r3, #1
   1977a:	4629      	mov	r1, r5
   1977c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19780:	e4d3      	b.n	1912a <d_print_comp_inner+0x2496>
   19782:	4671      	mov	r1, lr
   19784:	6002      	str	r2, [r0, #0]
   19786:	3104      	adds	r1, #4
   19788:	4620      	mov	r0, r4
   1978a:	f7fb f9bf 	bl	14b0c <d_lookup_template_argument.isra.6>
   1978e:	2800      	cmp	r0, #0
   19790:	f47f ad3c 	bne.w	1920c <d_print_comp_inner+0x2578>
   19794:	f7fd bb60 	b.w	16e58 <d_print_comp_inner+0x1c4>
   19798:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1979c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   197a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197a4:	4620      	mov	r0, r4
   197a6:	4798      	blx	r3
   197a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197ac:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   197b0:	3301      	adds	r3, #1
   197b2:	4631      	mov	r1, r6
   197b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197b8:	f7fe bc02 	b.w	17fc0 <d_print_comp_inner+0x132c>
   197bc:	2301      	movs	r3, #1
   197be:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   197c2:	f7fd bb35 	b.w	16e30 <d_print_comp_inner+0x19c>
   197c6:	4618      	mov	r0, r3
   197c8:	4407      	add	r7, r0
   197ca:	f7ff bb81 	b.w	18ed0 <d_print_comp_inner+0x223c>
   197ce:	2000      	movs	r0, #0
   197d0:	4407      	add	r7, r0
   197d2:	f7ff bb7d 	b.w	18ed0 <d_print_comp_inner+0x223c>
   197d6:	4607      	mov	r7, r0
   197d8:	f7ff bba7 	b.w	18f2a <d_print_comp_inner+0x2296>

000197dc <d_print_comp>:
   197dc:	b510      	push	{r4, lr}
   197de:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   197e2:	b082      	sub	sp, #8
   197e4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   197e8:	4604      	mov	r4, r0
   197ea:	e88d 000c 	stmia.w	sp, {r2, r3}
   197ee:	f7fd fa51 	bl	16c94 <d_print_comp_inner>
   197f2:	9b01      	ldr	r3, [sp, #4]
   197f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   197f8:	b002      	add	sp, #8
   197fa:	bd10      	pop	{r4, pc}

000197fc <d_print_mod>:
   197fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19800:	7813      	ldrb	r3, [r2, #0]
   19802:	3b03      	subs	r3, #3
   19804:	b082      	sub	sp, #8
   19806:	4615      	mov	r5, r2
   19808:	4604      	mov	r4, r0
   1980a:	4688      	mov	r8, r1
   1980c:	2b49      	cmp	r3, #73	; 0x49
   1980e:	f200 8223 	bhi.w	19c58 <d_print_mod+0x45c>
   19812:	e8df f013 	tbh	[pc, r3, lsl #1]
   19816:	01e7      	.short	0x01e7
   19818:	02210221 	.word	0x02210221
   1981c:	02210221 	.word	0x02210221
   19820:	02210221 	.word	0x02210221
   19824:	02210221 	.word	0x02210221
   19828:	02210221 	.word	0x02210221
   1982c:	02210221 	.word	0x02210221
   19830:	02210221 	.word	0x02210221
   19834:	02210221 	.word	0x02210221
   19838:	02210221 	.word	0x02210221
   1983c:	02210221 	.word	0x02210221
   19840:	01e90221 	.word	0x01e90221
   19844:	01a80182 	.word	0x01a80182
   19848:	018201e9 	.word	0x018201e9
   1984c:	01cd01a8 	.word	0x01cd01a8
   19850:	006f01da 	.word	0x006f01da
   19854:	009c008c 	.word	0x009c008c
   19858:	00cf00ab 	.word	0x00cf00ab
   1985c:	022100f4 	.word	0x022100f4
   19860:	02210221 	.word	0x02210221
   19864:	01190221 	.word	0x01190221
   19868:	015c0221 	.word	0x015c0221
   1986c:	02210221 	.word	0x02210221
   19870:	02210221 	.word	0x02210221
   19874:	02210221 	.word	0x02210221
   19878:	02210221 	.word	0x02210221
   1987c:	02210221 	.word	0x02210221
   19880:	02210221 	.word	0x02210221
   19884:	02210221 	.word	0x02210221
   19888:	02210221 	.word	0x02210221
   1988c:	02210221 	.word	0x02210221
   19890:	02210221 	.word	0x02210221
   19894:	02210221 	.word	0x02210221
   19898:	02210221 	.word	0x02210221
   1989c:	02210221 	.word	0x02210221
   198a0:	02210221 	.word	0x02210221
   198a4:	02210221 	.word	0x02210221
   198a8:	004a      	.short	0x004a
   198aa:	4dd3      	ldr	r5, [pc, #844]	; (19bf8 <d_print_mod+0x3fc>)
   198ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   198b0:	f105 0711 	add.w	r7, r5, #17
   198b4:	f04f 0800 	mov.w	r8, #0
   198b8:	e008      	b.n	198cc <d_print_mod+0xd0>
   198ba:	460b      	mov	r3, r1
   198bc:	3101      	adds	r1, #1
   198be:	42bd      	cmp	r5, r7
   198c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   198c4:	54e6      	strb	r6, [r4, r3]
   198c6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   198ca:	d02d      	beq.n	19928 <d_print_mod+0x12c>
   198cc:	29ff      	cmp	r1, #255	; 0xff
   198ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   198d2:	d1f2      	bne.n	198ba <d_print_mod+0xbe>
   198d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198d8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   198dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   198e0:	4620      	mov	r0, r4
   198e2:	4798      	blx	r3
   198e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198e8:	3301      	adds	r3, #1
   198ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198ee:	2101      	movs	r1, #1
   198f0:	2300      	movs	r3, #0
   198f2:	e7e4      	b.n	198be <d_print_mod+0xc2>
   198f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   198f8:	29ff      	cmp	r1, #255	; 0xff
   198fa:	f000 81f7 	beq.w	19cec <d_print_mod+0x4f0>
   198fe:	1c4a      	adds	r2, r1, #1
   19900:	2320      	movs	r3, #32
   19902:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19906:	5463      	strb	r3, [r4, r1]
   19908:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1990c:	68aa      	ldr	r2, [r5, #8]
   1990e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19912:	9200      	str	r2, [sp, #0]
   19914:	4641      	mov	r1, r8
   19916:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1991a:	4620      	mov	r0, r4
   1991c:	9301      	str	r3, [sp, #4]
   1991e:	f7fd f9b9 	bl	16c94 <d_print_comp_inner>
   19922:	9b01      	ldr	r3, [sp, #4]
   19924:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19928:	b002      	add	sp, #8
   1992a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1992e:	f011 0504 	ands.w	r5, r1, #4
   19932:	d1f9      	bne.n	19928 <d_print_mod+0x12c>
   19934:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19938:	2bff      	cmp	r3, #255	; 0xff
   1993a:	f000 821c 	beq.w	19d76 <d_print_mod+0x57a>
   1993e:	222a      	movs	r2, #42	; 0x2a
   19940:	1c59      	adds	r1, r3, #1
   19942:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19946:	54e2      	strb	r2, [r4, r3]
   19948:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1994c:	e7ec      	b.n	19928 <d_print_mod+0x12c>
   1994e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19952:	29ff      	cmp	r1, #255	; 0xff
   19954:	f000 81b9 	beq.w	19cca <d_print_mod+0x4ce>
   19958:	1c4a      	adds	r2, r1, #1
   1995a:	2326      	movs	r3, #38	; 0x26
   1995c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19960:	5463      	strb	r3, [r4, r1]
   19962:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19966:	b002      	add	sp, #8
   19968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1996c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19970:	4da2      	ldr	r5, [pc, #648]	; (19bfc <d_print_mod+0x400>)
   19972:	f04f 0800 	mov.w	r8, #0
   19976:	1caf      	adds	r7, r5, #2
   19978:	e008      	b.n	1998c <d_print_mod+0x190>
   1997a:	460b      	mov	r3, r1
   1997c:	3101      	adds	r1, #1
   1997e:	42bd      	cmp	r5, r7
   19980:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19984:	54e6      	strb	r6, [r4, r3]
   19986:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1998a:	d0cd      	beq.n	19928 <d_print_mod+0x12c>
   1998c:	29ff      	cmp	r1, #255	; 0xff
   1998e:	f815 6b01 	ldrb.w	r6, [r5], #1
   19992:	d1f2      	bne.n	1997a <d_print_mod+0x17e>
   19994:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19998:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1999c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199a0:	4620      	mov	r0, r4
   199a2:	4798      	blx	r3
   199a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199a8:	3301      	adds	r3, #1
   199aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199ae:	2101      	movs	r1, #1
   199b0:	2300      	movs	r3, #0
   199b2:	e7e4      	b.n	1997e <d_print_mod+0x182>
   199b4:	4d92      	ldr	r5, [pc, #584]	; (19c00 <d_print_mod+0x404>)
   199b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   199ba:	f105 0708 	add.w	r7, r5, #8
   199be:	f04f 0800 	mov.w	r8, #0
   199c2:	e008      	b.n	199d6 <d_print_mod+0x1da>
   199c4:	460b      	mov	r3, r1
   199c6:	3101      	adds	r1, #1
   199c8:	42bd      	cmp	r5, r7
   199ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   199ce:	54e6      	strb	r6, [r4, r3]
   199d0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   199d4:	d0a8      	beq.n	19928 <d_print_mod+0x12c>
   199d6:	29ff      	cmp	r1, #255	; 0xff
   199d8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   199dc:	d1f2      	bne.n	199c4 <d_print_mod+0x1c8>
   199de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199e2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   199e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199ea:	4620      	mov	r0, r4
   199ec:	4798      	blx	r3
   199ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199f2:	3301      	adds	r3, #1
   199f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199f8:	2101      	movs	r1, #1
   199fa:	2300      	movs	r3, #0
   199fc:	e7e4      	b.n	199c8 <d_print_mod+0x1cc>
   199fe:	4d81      	ldr	r5, [pc, #516]	; (19c04 <d_print_mod+0x408>)
   19a00:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a04:	f105 070a 	add.w	r7, r5, #10
   19a08:	f04f 0800 	mov.w	r8, #0
   19a0c:	e008      	b.n	19a20 <d_print_mod+0x224>
   19a0e:	460b      	mov	r3, r1
   19a10:	3101      	adds	r1, #1
   19a12:	42bd      	cmp	r5, r7
   19a14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a18:	54e6      	strb	r6, [r4, r3]
   19a1a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a1e:	d083      	beq.n	19928 <d_print_mod+0x12c>
   19a20:	29ff      	cmp	r1, #255	; 0xff
   19a22:	f815 6b01 	ldrb.w	r6, [r5], #1
   19a26:	d1f2      	bne.n	19a0e <d_print_mod+0x212>
   19a28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a34:	4620      	mov	r0, r4
   19a36:	4798      	blx	r3
   19a38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a3c:	3301      	adds	r3, #1
   19a3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a42:	2101      	movs	r1, #1
   19a44:	2300      	movs	r3, #0
   19a46:	e7e4      	b.n	19a12 <d_print_mod+0x216>
   19a48:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   19a4c:	2b28      	cmp	r3, #40	; 0x28
   19a4e:	d00b      	beq.n	19a68 <d_print_mod+0x26c>
   19a50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19a54:	2bff      	cmp	r3, #255	; 0xff
   19a56:	f000 8126 	beq.w	19ca6 <d_print_mod+0x4aa>
   19a5a:	2220      	movs	r2, #32
   19a5c:	1c59      	adds	r1, r3, #1
   19a5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a62:	54e2      	strb	r2, [r4, r3]
   19a64:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19a68:	686a      	ldr	r2, [r5, #4]
   19a6a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19a6e:	4d66      	ldr	r5, [pc, #408]	; (19c08 <d_print_mod+0x40c>)
   19a70:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19a74:	4641      	mov	r1, r8
   19a76:	4620      	mov	r0, r4
   19a78:	9301      	str	r3, [sp, #4]
   19a7a:	9200      	str	r2, [sp, #0]
   19a7c:	f7fd f90a 	bl	16c94 <d_print_comp_inner>
   19a80:	9b01      	ldr	r3, [sp, #4]
   19a82:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19a86:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19a8a:	1cef      	adds	r7, r5, #3
   19a8c:	f04f 0800 	mov.w	r8, #0
   19a90:	e009      	b.n	19aa6 <d_print_mod+0x2aa>
   19a92:	460b      	mov	r3, r1
   19a94:	3101      	adds	r1, #1
   19a96:	42bd      	cmp	r5, r7
   19a98:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a9c:	54e6      	strb	r6, [r4, r3]
   19a9e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19aa2:	f43f af41 	beq.w	19928 <d_print_mod+0x12c>
   19aa6:	29ff      	cmp	r1, #255	; 0xff
   19aa8:	f815 6b01 	ldrb.w	r6, [r5], #1
   19aac:	d1f1      	bne.n	19a92 <d_print_mod+0x296>
   19aae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ab2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19ab6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19aba:	4620      	mov	r0, r4
   19abc:	4798      	blx	r3
   19abe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ac2:	3301      	adds	r3, #1
   19ac4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ac8:	2101      	movs	r1, #1
   19aca:	2300      	movs	r3, #0
   19acc:	e7e3      	b.n	19a96 <d_print_mod+0x29a>
   19ace:	4e4f      	ldr	r6, [pc, #316]	; (19c0c <d_print_mod+0x410>)
   19ad0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ad4:	f106 0a0a 	add.w	sl, r6, #10
   19ad8:	f04f 0900 	mov.w	r9, #0
   19adc:	e009      	b.n	19af2 <d_print_mod+0x2f6>
   19ade:	460b      	mov	r3, r1
   19ae0:	3101      	adds	r1, #1
   19ae2:	4556      	cmp	r6, sl
   19ae4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ae8:	54e7      	strb	r7, [r4, r3]
   19aea:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19aee:	f000 80c0 	beq.w	19c72 <d_print_mod+0x476>
   19af2:	29ff      	cmp	r1, #255	; 0xff
   19af4:	f816 7b01 	ldrb.w	r7, [r6], #1
   19af8:	d1f1      	bne.n	19ade <d_print_mod+0x2e2>
   19afa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19afe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19b02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b06:	4620      	mov	r0, r4
   19b08:	4798      	blx	r3
   19b0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b0e:	3301      	adds	r3, #1
   19b10:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b14:	2101      	movs	r1, #1
   19b16:	2300      	movs	r3, #0
   19b18:	e7e3      	b.n	19ae2 <d_print_mod+0x2e6>
   19b1a:	4d3d      	ldr	r5, [pc, #244]	; (19c10 <d_print_mod+0x414>)
   19b1c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19b20:	f105 0709 	add.w	r7, r5, #9
   19b24:	f04f 0800 	mov.w	r8, #0
   19b28:	e009      	b.n	19b3e <d_print_mod+0x342>
   19b2a:	460b      	mov	r3, r1
   19b2c:	3101      	adds	r1, #1
   19b2e:	42bd      	cmp	r5, r7
   19b30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b34:	54e6      	strb	r6, [r4, r3]
   19b36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19b3a:	f43f aef5 	beq.w	19928 <d_print_mod+0x12c>
   19b3e:	29ff      	cmp	r1, #255	; 0xff
   19b40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19b44:	d1f1      	bne.n	19b2a <d_print_mod+0x32e>
   19b46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b4a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b52:	4620      	mov	r0, r4
   19b54:	4798      	blx	r3
   19b56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b5a:	3301      	adds	r3, #1
   19b5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b60:	2101      	movs	r1, #1
   19b62:	2300      	movs	r3, #0
   19b64:	e7e3      	b.n	19b2e <d_print_mod+0x332>
   19b66:	4d2b      	ldr	r5, [pc, #172]	; (19c14 <d_print_mod+0x418>)
   19b68:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19b6c:	1daf      	adds	r7, r5, #6
   19b6e:	f04f 0800 	mov.w	r8, #0
   19b72:	e009      	b.n	19b88 <d_print_mod+0x38c>
   19b74:	460b      	mov	r3, r1
   19b76:	3101      	adds	r1, #1
   19b78:	42bd      	cmp	r5, r7
   19b7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b7e:	54e6      	strb	r6, [r4, r3]
   19b80:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19b84:	f43f aed0 	beq.w	19928 <d_print_mod+0x12c>
   19b88:	29ff      	cmp	r1, #255	; 0xff
   19b8a:	f815 6b01 	ldrb.w	r6, [r5], #1
   19b8e:	d1f1      	bne.n	19b74 <d_print_mod+0x378>
   19b90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b94:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b9c:	4620      	mov	r0, r4
   19b9e:	4798      	blx	r3
   19ba0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ba4:	3301      	adds	r3, #1
   19ba6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19baa:	2101      	movs	r1, #1
   19bac:	2300      	movs	r3, #0
   19bae:	e7e3      	b.n	19b78 <d_print_mod+0x37c>
   19bb0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19bb4:	2bff      	cmp	r3, #255	; 0xff
   19bb6:	f000 80cc 	beq.w	19d52 <d_print_mod+0x556>
   19bba:	2220      	movs	r2, #32
   19bbc:	1c59      	adds	r1, r3, #1
   19bbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19bc2:	54e2      	strb	r2, [r4, r3]
   19bc4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19bc8:	e6c3      	b.n	19952 <d_print_mod+0x156>
   19bca:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19bce:	2bff      	cmp	r3, #255	; 0xff
   19bd0:	f000 80ad 	beq.w	19d2e <d_print_mod+0x532>
   19bd4:	2220      	movs	r2, #32
   19bd6:	1c59      	adds	r1, r3, #1
   19bd8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19bdc:	54e2      	strb	r2, [r4, r3]
   19bde:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19be2:	e6c5      	b.n	19970 <d_print_mod+0x174>
   19be4:	686a      	ldr	r2, [r5, #4]
   19be6:	e692      	b.n	1990e <d_print_mod+0x112>
   19be8:	4d0b      	ldr	r5, [pc, #44]	; (19c18 <d_print_mod+0x41c>)
   19bea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19bee:	f105 0709 	add.w	r7, r5, #9
   19bf2:	f04f 0800 	mov.w	r8, #0
   19bf6:	e01b      	b.n	19c30 <d_print_mod+0x434>
   19bf8:	0002463f 	.word	0x0002463f
   19bfc:	00024654 	.word	0x00024654
   19c00:	00024657 	.word	0x00024657
   19c04:	00024664 	.word	0x00024664
   19c08:	00024670 	.word	0x00024670
   19c0c:	00024674 	.word	0x00024674
   19c10:	0002462b 	.word	0x0002462b
   19c14:	00024638 	.word	0x00024638
   19c18:	0002461f 	.word	0x0002461f
   19c1c:	460b      	mov	r3, r1
   19c1e:	3101      	adds	r1, #1
   19c20:	42af      	cmp	r7, r5
   19c22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c26:	54e6      	strb	r6, [r4, r3]
   19c28:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19c2c:	f43f ae7c 	beq.w	19928 <d_print_mod+0x12c>
   19c30:	29ff      	cmp	r1, #255	; 0xff
   19c32:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19c36:	d1f1      	bne.n	19c1c <d_print_mod+0x420>
   19c38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19c40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c44:	4620      	mov	r0, r4
   19c46:	4798      	blx	r3
   19c48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c4c:	3301      	adds	r3, #1
   19c4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c52:	2101      	movs	r1, #1
   19c54:	2300      	movs	r3, #0
   19c56:	e7e3      	b.n	19c20 <d_print_mod+0x424>
   19c58:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19c5c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19c60:	462a      	mov	r2, r5
   19c62:	9301      	str	r3, [sp, #4]
   19c64:	9500      	str	r5, [sp, #0]
   19c66:	f7fd f815 	bl	16c94 <d_print_comp_inner>
   19c6a:	9b01      	ldr	r3, [sp, #4]
   19c6c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19c70:	e65a      	b.n	19928 <d_print_mod+0x12c>
   19c72:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19c76:	686a      	ldr	r2, [r5, #4]
   19c78:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19c7c:	4641      	mov	r1, r8
   19c7e:	4620      	mov	r0, r4
   19c80:	9301      	str	r3, [sp, #4]
   19c82:	9200      	str	r2, [sp, #0]
   19c84:	f7fd f806 	bl	16c94 <d_print_comp_inner>
   19c88:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19c8c:	9b01      	ldr	r3, [sp, #4]
   19c8e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19c92:	29ff      	cmp	r1, #255	; 0xff
   19c94:	d03a      	beq.n	19d0c <d_print_mod+0x510>
   19c96:	1c4a      	adds	r2, r1, #1
   19c98:	2329      	movs	r3, #41	; 0x29
   19c9a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19c9e:	5463      	strb	r3, [r4, r1]
   19ca0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19ca4:	e640      	b.n	19928 <d_print_mod+0x12c>
   19ca6:	2600      	movs	r6, #0
   19ca8:	4619      	mov	r1, r3
   19caa:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19cae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19cb2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19cb6:	4798      	blx	r3
   19cb8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19cbc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19cc0:	1c5a      	adds	r2, r3, #1
   19cc2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19cc6:	4633      	mov	r3, r6
   19cc8:	e6c7      	b.n	19a5a <d_print_mod+0x25e>
   19cca:	2500      	movs	r5, #0
   19ccc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19cd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19cd4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19cd8:	4620      	mov	r0, r4
   19cda:	4798      	blx	r3
   19cdc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ce0:	3301      	adds	r3, #1
   19ce2:	4629      	mov	r1, r5
   19ce4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ce8:	2201      	movs	r2, #1
   19cea:	e636      	b.n	1995a <d_print_mod+0x15e>
   19cec:	2600      	movs	r6, #0
   19cee:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19cf2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19cf6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19cfa:	4798      	blx	r3
   19cfc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d00:	3301      	adds	r3, #1
   19d02:	4631      	mov	r1, r6
   19d04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d08:	2201      	movs	r2, #1
   19d0a:	e5f9      	b.n	19900 <d_print_mod+0x104>
   19d0c:	2500      	movs	r5, #0
   19d0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d16:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19d1a:	4620      	mov	r0, r4
   19d1c:	4798      	blx	r3
   19d1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d22:	3301      	adds	r3, #1
   19d24:	4629      	mov	r1, r5
   19d26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d2a:	2201      	movs	r2, #1
   19d2c:	e7b4      	b.n	19c98 <d_print_mod+0x49c>
   19d2e:	2500      	movs	r5, #0
   19d30:	4619      	mov	r1, r3
   19d32:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19d36:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19d3a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19d3e:	4798      	blx	r3
   19d40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d44:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19d48:	1c5a      	adds	r2, r3, #1
   19d4a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19d4e:	462b      	mov	r3, r5
   19d50:	e740      	b.n	19bd4 <d_print_mod+0x3d8>
   19d52:	2500      	movs	r5, #0
   19d54:	4619      	mov	r1, r3
   19d56:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19d5a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19d5e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19d62:	4798      	blx	r3
   19d64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d68:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19d6c:	1c5a      	adds	r2, r3, #1
   19d6e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19d72:	462b      	mov	r3, r5
   19d74:	e721      	b.n	19bba <d_print_mod+0x3be>
   19d76:	4619      	mov	r1, r3
   19d78:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19d7c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19d80:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19d84:	4798      	blx	r3
   19d86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d8a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19d8e:	1c5a      	adds	r2, r3, #1
   19d90:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19d94:	462b      	mov	r3, r5
   19d96:	e5d2      	b.n	1993e <d_print_mod+0x142>

00019d98 <d_print_mod_list>:
   19d98:	2a00      	cmp	r2, #0
   19d9a:	f000 80a1 	beq.w	19ee0 <d_print_mod_list+0x148>
   19d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19da2:	461e      	mov	r6, r3
   19da4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   19da8:	b089      	sub	sp, #36	; 0x24
   19daa:	4605      	mov	r5, r0
   19dac:	bb43      	cbnz	r3, 19e00 <d_print_mod_list+0x68>
   19dae:	460f      	mov	r7, r1
   19db0:	4614      	mov	r4, r2
   19db2:	f04f 0801 	mov.w	r8, #1
   19db6:	e002      	b.n	19dbe <d_print_mod_list+0x26>
   19db8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19dbc:	bb03      	cbnz	r3, 19e00 <d_print_mod_list+0x68>
   19dbe:	68a3      	ldr	r3, [r4, #8]
   19dc0:	b9db      	cbnz	r3, 19dfa <d_print_mod_list+0x62>
   19dc2:	6862      	ldr	r2, [r4, #4]
   19dc4:	7813      	ldrb	r3, [r2, #0]
   19dc6:	b92e      	cbnz	r6, 19dd4 <d_print_mod_list+0x3c>
   19dc8:	f1a3 011c 	sub.w	r1, r3, #28
   19dcc:	2904      	cmp	r1, #4
   19dce:	d914      	bls.n	19dfa <d_print_mod_list+0x62>
   19dd0:	2b4c      	cmp	r3, #76	; 0x4c
   19dd2:	d012      	beq.n	19dfa <d_print_mod_list+0x62>
   19dd4:	68e1      	ldr	r1, [r4, #12]
   19dd6:	f8c4 8008 	str.w	r8, [r4, #8]
   19dda:	2b29      	cmp	r3, #41	; 0x29
   19ddc:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   19de0:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   19de4:	d00f      	beq.n	19e06 <d_print_mod_list+0x6e>
   19de6:	2b2a      	cmp	r3, #42	; 0x2a
   19de8:	d018      	beq.n	19e1c <d_print_mod_list+0x84>
   19dea:	2b02      	cmp	r3, #2
   19dec:	d021      	beq.n	19e32 <d_print_mod_list+0x9a>
   19dee:	4639      	mov	r1, r7
   19df0:	4628      	mov	r0, r5
   19df2:	f7ff fd03 	bl	197fc <d_print_mod>
   19df6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19dfa:	6824      	ldr	r4, [r4, #0]
   19dfc:	2c00      	cmp	r4, #0
   19dfe:	d1db      	bne.n	19db8 <d_print_mod_list+0x20>
   19e00:	b009      	add	sp, #36	; 0x24
   19e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e06:	6823      	ldr	r3, [r4, #0]
   19e08:	3208      	adds	r2, #8
   19e0a:	4639      	mov	r1, r7
   19e0c:	4628      	mov	r0, r5
   19e0e:	f000 f9d9 	bl	1a1c4 <d_print_function_type.isra.11>
   19e12:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19e16:	b009      	add	sp, #36	; 0x24
   19e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e1c:	6823      	ldr	r3, [r4, #0]
   19e1e:	3204      	adds	r2, #4
   19e20:	4639      	mov	r1, r7
   19e22:	4628      	mov	r0, r5
   19e24:	f000 f8f2 	bl	1a00c <d_print_array_type.isra.10>
   19e28:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19e2c:	b009      	add	sp, #36	; 0x24
   19e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e32:	2600      	movs	r6, #0
   19e34:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   19e38:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   19e3c:	6852      	ldr	r2, [r2, #4]
   19e3e:	4639      	mov	r1, r7
   19e40:	4628      	mov	r0, r5
   19e42:	f7ff fccb 	bl	197dc <d_print_comp>
   19e46:	f017 0a04 	ands.w	sl, r7, #4
   19e4a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   19e4e:	d023      	beq.n	19e98 <d_print_mod_list+0x100>
   19e50:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19e54:	29ff      	cmp	r1, #255	; 0xff
   19e56:	f000 80c1 	beq.w	19fdc <d_print_mod_list+0x244>
   19e5a:	1c4a      	adds	r2, r1, #1
   19e5c:	232e      	movs	r3, #46	; 0x2e
   19e5e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   19e62:	546b      	strb	r3, [r5, r1]
   19e64:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   19e68:	6863      	ldr	r3, [r4, #4]
   19e6a:	689c      	ldr	r4, [r3, #8]
   19e6c:	7823      	ldrb	r3, [r4, #0]
   19e6e:	2b46      	cmp	r3, #70	; 0x46
   19e70:	d037      	beq.n	19ee2 <d_print_mod_list+0x14a>
   19e72:	f1a3 021c 	sub.w	r2, r3, #28
   19e76:	2a04      	cmp	r2, #4
   19e78:	d90b      	bls.n	19e92 <d_print_mod_list+0xfa>
   19e7a:	2b4c      	cmp	r3, #76	; 0x4c
   19e7c:	d009      	beq.n	19e92 <d_print_mod_list+0xfa>
   19e7e:	4622      	mov	r2, r4
   19e80:	4639      	mov	r1, r7
   19e82:	4628      	mov	r0, r5
   19e84:	f7ff fcaa 	bl	197dc <d_print_comp>
   19e88:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19e8c:	b009      	add	sp, #36	; 0x24
   19e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e92:	6864      	ldr	r4, [r4, #4]
   19e94:	7823      	ldrb	r3, [r4, #0]
   19e96:	e7ec      	b.n	19e72 <d_print_mod_list+0xda>
   19e98:	4e58      	ldr	r6, [pc, #352]	; (19ffc <d_print_mod_list+0x264>)
   19e9a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19e9e:	f106 0b02 	add.w	fp, r6, #2
   19ea2:	e009      	b.n	19eb8 <d_print_mod_list+0x120>
   19ea4:	460b      	mov	r3, r1
   19ea6:	3101      	adds	r1, #1
   19ea8:	455e      	cmp	r6, fp
   19eaa:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19eae:	f805 8003 	strb.w	r8, [r5, r3]
   19eb2:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19eb6:	d0d7      	beq.n	19e68 <d_print_mod_list+0xd0>
   19eb8:	29ff      	cmp	r1, #255	; 0xff
   19eba:	f816 8b01 	ldrb.w	r8, [r6], #1
   19ebe:	d1f1      	bne.n	19ea4 <d_print_mod_list+0x10c>
   19ec0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19ec4:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   19ec8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19ecc:	4628      	mov	r0, r5
   19ece:	4798      	blx	r3
   19ed0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19ed4:	3301      	adds	r3, #1
   19ed6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19eda:	2101      	movs	r1, #1
   19edc:	2300      	movs	r3, #0
   19ede:	e7e3      	b.n	19ea8 <d_print_mod_list+0x110>
   19ee0:	4770      	bx	lr
   19ee2:	4e47      	ldr	r6, [pc, #284]	; (1a000 <d_print_mod_list+0x268>)
   19ee4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19ee8:	f106 0a0d 	add.w	sl, r6, #13
   19eec:	f04f 0b00 	mov.w	fp, #0
   19ef0:	e009      	b.n	19f06 <d_print_mod_list+0x16e>
   19ef2:	460b      	mov	r3, r1
   19ef4:	3101      	adds	r1, #1
   19ef6:	45b2      	cmp	sl, r6
   19ef8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19efc:	f805 8003 	strb.w	r8, [r5, r3]
   19f00:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19f04:	d013      	beq.n	19f2e <d_print_mod_list+0x196>
   19f06:	29ff      	cmp	r1, #255	; 0xff
   19f08:	f816 8b01 	ldrb.w	r8, [r6], #1
   19f0c:	d1f1      	bne.n	19ef2 <d_print_mod_list+0x15a>
   19f0e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19f12:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19f16:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19f1a:	4628      	mov	r0, r5
   19f1c:	4798      	blx	r3
   19f1e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19f22:	3301      	adds	r3, #1
   19f24:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19f28:	2101      	movs	r1, #1
   19f2a:	2300      	movs	r3, #0
   19f2c:	e7e3      	b.n	19ef6 <d_print_mod_list+0x15e>
   19f2e:	68a2      	ldr	r2, [r4, #8]
   19f30:	4934      	ldr	r1, [pc, #208]	; (1a004 <d_print_mod_list+0x26c>)
   19f32:	3201      	adds	r2, #1
   19f34:	a801      	add	r0, sp, #4
   19f36:	f004 fd49 	bl	1e9cc <sprintf>
   19f3a:	a801      	add	r0, sp, #4
   19f3c:	f004 fee0 	bl	1ed00 <strlen>
   19f40:	b328      	cbz	r0, 19f8e <d_print_mod_list+0x1f6>
   19f42:	ae01      	add	r6, sp, #4
   19f44:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19f48:	eb06 0a00 	add.w	sl, r6, r0
   19f4c:	f04f 0b00 	mov.w	fp, #0
   19f50:	e009      	b.n	19f66 <d_print_mod_list+0x1ce>
   19f52:	460b      	mov	r3, r1
   19f54:	3101      	adds	r1, #1
   19f56:	45b2      	cmp	sl, r6
   19f58:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19f5c:	f805 8003 	strb.w	r8, [r5, r3]
   19f60:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19f64:	d015      	beq.n	19f92 <d_print_mod_list+0x1fa>
   19f66:	29ff      	cmp	r1, #255	; 0xff
   19f68:	f816 8b01 	ldrb.w	r8, [r6], #1
   19f6c:	d1f1      	bne.n	19f52 <d_print_mod_list+0x1ba>
   19f6e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19f72:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19f76:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19f7a:	4628      	mov	r0, r5
   19f7c:	4798      	blx	r3
   19f7e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19f82:	3301      	adds	r3, #1
   19f84:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19f88:	2101      	movs	r1, #1
   19f8a:	2300      	movs	r3, #0
   19f8c:	e7e3      	b.n	19f56 <d_print_mod_list+0x1be>
   19f8e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19f92:	4e1d      	ldr	r6, [pc, #116]	; (1a008 <d_print_mod_list+0x270>)
   19f94:	f04f 0b00 	mov.w	fp, #0
   19f98:	f106 0a03 	add.w	sl, r6, #3
   19f9c:	e00a      	b.n	19fb4 <d_print_mod_list+0x21c>
   19f9e:	460b      	mov	r3, r1
   19fa0:	3101      	adds	r1, #1
   19fa2:	45b2      	cmp	sl, r6
   19fa4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19fa8:	f805 8003 	strb.w	r8, [r5, r3]
   19fac:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19fb0:	f43f af6f 	beq.w	19e92 <d_print_mod_list+0xfa>
   19fb4:	29ff      	cmp	r1, #255	; 0xff
   19fb6:	f816 8b01 	ldrb.w	r8, [r6], #1
   19fba:	d1f0      	bne.n	19f9e <d_print_mod_list+0x206>
   19fbc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19fc0:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19fc4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19fc8:	4628      	mov	r0, r5
   19fca:	4798      	blx	r3
   19fcc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19fd0:	3301      	adds	r3, #1
   19fd2:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19fd6:	2101      	movs	r1, #1
   19fd8:	2300      	movs	r3, #0
   19fda:	e7e2      	b.n	19fa2 <d_print_mod_list+0x20a>
   19fdc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19fe0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19fe4:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   19fe8:	4628      	mov	r0, r5
   19fea:	4798      	blx	r3
   19fec:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19ff0:	3301      	adds	r3, #1
   19ff2:	4631      	mov	r1, r6
   19ff4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19ff8:	2201      	movs	r2, #1
   19ffa:	e72f      	b.n	19e5c <d_print_mod_list+0xc4>
   19ffc:	000243a4 	.word	0x000243a4
   1a000:	000243a8 	.word	0x000243a8
   1a004:	00024354 	.word	0x00024354
   1a008:	000243b8 	.word	0x000243b8

0001a00c <d_print_array_type.isra.10>:
   1a00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a010:	4604      	mov	r4, r0
   1a012:	460f      	mov	r7, r1
   1a014:	4690      	mov	r8, r2
   1a016:	b163      	cbz	r3, 1a032 <d_print_array_type.isra.10+0x26>
   1a018:	461e      	mov	r6, r3
   1a01a:	461a      	mov	r2, r3
   1a01c:	6893      	ldr	r3, [r2, #8]
   1a01e:	b393      	cbz	r3, 1a086 <d_print_array_type.isra.10+0x7a>
   1a020:	6812      	ldr	r2, [r2, #0]
   1a022:	2a00      	cmp	r2, #0
   1a024:	d1fa      	bne.n	1a01c <d_print_array_type.isra.10+0x10>
   1a026:	4613      	mov	r3, r2
   1a028:	4639      	mov	r1, r7
   1a02a:	4632      	mov	r2, r6
   1a02c:	4620      	mov	r0, r4
   1a02e:	f7ff feb3 	bl	19d98 <d_print_mod_list>
   1a032:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a036:	29ff      	cmp	r1, #255	; 0xff
   1a038:	f000 808d 	beq.w	1a156 <d_print_array_type.isra.10+0x14a>
   1a03c:	1c4b      	adds	r3, r1, #1
   1a03e:	2220      	movs	r2, #32
   1a040:	2bff      	cmp	r3, #255	; 0xff
   1a042:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a046:	5462      	strb	r2, [r4, r1]
   1a048:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a04c:	d068      	beq.n	1a120 <d_print_array_type.isra.10+0x114>
   1a04e:	225b      	movs	r2, #91	; 0x5b
   1a050:	1c59      	adds	r1, r3, #1
   1a052:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a056:	54e2      	strb	r2, [r4, r3]
   1a058:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a05c:	f8d8 2000 	ldr.w	r2, [r8]
   1a060:	b12a      	cbz	r2, 1a06e <d_print_array_type.isra.10+0x62>
   1a062:	4639      	mov	r1, r7
   1a064:	4620      	mov	r0, r4
   1a066:	f7ff fbb9 	bl	197dc <d_print_comp>
   1a06a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a06e:	29ff      	cmp	r1, #255	; 0xff
   1a070:	f000 8082 	beq.w	1a178 <d_print_array_type.isra.10+0x16c>
   1a074:	1c4a      	adds	r2, r1, #1
   1a076:	235d      	movs	r3, #93	; 0x5d
   1a078:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a07c:	5463      	strb	r3, [r4, r1]
   1a07e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a086:	6852      	ldr	r2, [r2, #4]
   1a088:	7812      	ldrb	r2, [r2, #0]
   1a08a:	2a2a      	cmp	r2, #42	; 0x2a
   1a08c:	d03f      	beq.n	1a10e <d_print_array_type.isra.10+0x102>
   1a08e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a1c0 <d_print_array_type.isra.10+0x1b4>
   1a092:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a096:	461d      	mov	r5, r3
   1a098:	f109 0b02 	add.w	fp, r9, #2
   1a09c:	e00a      	b.n	1a0b4 <d_print_array_type.isra.10+0xa8>
   1a09e:	460b      	mov	r3, r1
   1a0a0:	45cb      	cmp	fp, r9
   1a0a2:	f101 0101 	add.w	r1, r1, #1
   1a0a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a0aa:	f804 a003 	strb.w	sl, [r4, r3]
   1a0ae:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a0b2:	d01a      	beq.n	1a0ea <d_print_array_type.isra.10+0xde>
   1a0b4:	29ff      	cmp	r1, #255	; 0xff
   1a0b6:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a0ba:	d1f0      	bne.n	1a09e <d_print_array_type.isra.10+0x92>
   1a0bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a0c0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a0c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a0c8:	4620      	mov	r0, r4
   1a0ca:	4798      	blx	r3
   1a0cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0d0:	3301      	adds	r3, #1
   1a0d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a0d6:	2300      	movs	r3, #0
   1a0d8:	2101      	movs	r1, #1
   1a0da:	45cb      	cmp	fp, r9
   1a0dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a0e0:	f804 a003 	strb.w	sl, [r4, r3]
   1a0e4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a0e8:	d1e4      	bne.n	1a0b4 <d_print_array_type.isra.10+0xa8>
   1a0ea:	2300      	movs	r3, #0
   1a0ec:	4632      	mov	r2, r6
   1a0ee:	4639      	mov	r1, r7
   1a0f0:	4620      	mov	r0, r4
   1a0f2:	f7ff fe51 	bl	19d98 <d_print_mod_list>
   1a0f6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a0fa:	2bff      	cmp	r3, #255	; 0xff
   1a0fc:	d04d      	beq.n	1a19a <d_print_array_type.isra.10+0x18e>
   1a0fe:	1c59      	adds	r1, r3, #1
   1a100:	2229      	movs	r2, #41	; 0x29
   1a102:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a106:	54e2      	strb	r2, [r4, r3]
   1a108:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a10c:	e793      	b.n	1a036 <d_print_array_type.isra.10+0x2a>
   1a10e:	4632      	mov	r2, r6
   1a110:	4639      	mov	r1, r7
   1a112:	4620      	mov	r0, r4
   1a114:	f7ff fe40 	bl	19d98 <d_print_mod_list>
   1a118:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a11c:	2bff      	cmp	r3, #255	; 0xff
   1a11e:	d196      	bne.n	1a04e <d_print_array_type.isra.10+0x42>
   1a120:	2200      	movs	r2, #0
   1a122:	4619      	mov	r1, r3
   1a124:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1a128:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a12c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a130:	4620      	mov	r0, r4
   1a132:	4798      	blx	r3
   1a134:	235b      	movs	r3, #91	; 0x5b
   1a136:	7023      	strb	r3, [r4, #0]
   1a138:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a13c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a140:	f8d8 2000 	ldr.w	r2, [r8]
   1a144:	3301      	adds	r3, #1
   1a146:	2101      	movs	r1, #1
   1a148:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a14c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a150:	2a00      	cmp	r2, #0
   1a152:	d186      	bne.n	1a062 <d_print_array_type.isra.10+0x56>
   1a154:	e78e      	b.n	1a074 <d_print_array_type.isra.10+0x68>
   1a156:	2500      	movs	r5, #0
   1a158:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a15c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a160:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a164:	4620      	mov	r0, r4
   1a166:	4798      	blx	r3
   1a168:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a16c:	3301      	adds	r3, #1
   1a16e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a172:	4629      	mov	r1, r5
   1a174:	2301      	movs	r3, #1
   1a176:	e762      	b.n	1a03e <d_print_array_type.isra.10+0x32>
   1a178:	2500      	movs	r5, #0
   1a17a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a17e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a182:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a186:	4620      	mov	r0, r4
   1a188:	4798      	blx	r3
   1a18a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a18e:	3301      	adds	r3, #1
   1a190:	4629      	mov	r1, r5
   1a192:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a196:	2201      	movs	r2, #1
   1a198:	e76d      	b.n	1a076 <d_print_array_type.isra.10+0x6a>
   1a19a:	2500      	movs	r5, #0
   1a19c:	4619      	mov	r1, r3
   1a19e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1a6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a1aa:	4620      	mov	r0, r4
   1a1ac:	4798      	blx	r3
   1a1ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1b2:	1c5a      	adds	r2, r3, #1
   1a1b4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a1b8:	462b      	mov	r3, r5
   1a1ba:	2101      	movs	r1, #1
   1a1bc:	e7a0      	b.n	1a100 <d_print_array_type.isra.10+0xf4>
   1a1be:	bf00      	nop
   1a1c0:	0002459c 	.word	0x0002459c

0001a1c4 <d_print_function_type.isra.11>:
   1a1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a1c8:	4604      	mov	r4, r0
   1a1ca:	b083      	sub	sp, #12
   1a1cc:	460e      	mov	r6, r1
   1a1ce:	4617      	mov	r7, r2
   1a1d0:	461d      	mov	r5, r3
   1a1d2:	b34b      	cbz	r3, 1a228 <d_print_function_type.isra.11+0x64>
   1a1d4:	689b      	ldr	r3, [r3, #8]
   1a1d6:	bb3b      	cbnz	r3, 1a228 <d_print_function_type.isra.11+0x64>
   1a1d8:	462a      	mov	r2, r5
   1a1da:	2001      	movs	r0, #1
   1a1dc:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a3a8 <d_print_function_type.isra.11+0x1e4>
   1a1e0:	e006      	b.n	1a1f0 <d_print_function_type.isra.11+0x2c>
   1a1e2:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a1e6:	d15a      	bne.n	1a29e <d_print_function_type.isra.11+0xda>
   1a1e8:	6812      	ldr	r2, [r2, #0]
   1a1ea:	b1ea      	cbz	r2, 1a228 <d_print_function_type.isra.11+0x64>
   1a1ec:	6893      	ldr	r3, [r2, #8]
   1a1ee:	b9db      	cbnz	r3, 1a228 <d_print_function_type.isra.11+0x64>
   1a1f0:	6853      	ldr	r3, [r2, #4]
   1a1f2:	781b      	ldrb	r3, [r3, #0]
   1a1f4:	3b19      	subs	r3, #25
   1a1f6:	b2db      	uxtb	r3, r3
   1a1f8:	2b12      	cmp	r3, #18
   1a1fa:	fa00 f103 	lsl.w	r1, r0, r3
   1a1fe:	d8f3      	bhi.n	1a1e8 <d_print_function_type.isra.11+0x24>
   1a200:	ea11 0f0e 	tst.w	r1, lr
   1a204:	d0ed      	beq.n	1a1e2 <d_print_function_type.isra.11+0x1e>
   1a206:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a20a:	2b20      	cmp	r3, #32
   1a20c:	d04d      	beq.n	1a2aa <d_print_function_type.isra.11+0xe6>
   1a20e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a212:	2bff      	cmp	r3, #255	; 0xff
   1a214:	f000 80b4 	beq.w	1a380 <d_print_function_type.isra.11+0x1bc>
   1a218:	1c59      	adds	r1, r3, #1
   1a21a:	2220      	movs	r2, #32
   1a21c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a220:	54e2      	strb	r2, [r4, r3]
   1a222:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a226:	e042      	b.n	1a2ae <d_print_function_type.isra.11+0xea>
   1a228:	2300      	movs	r3, #0
   1a22a:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a22e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a232:	4631      	mov	r1, r6
   1a234:	462a      	mov	r2, r5
   1a236:	4620      	mov	r0, r4
   1a238:	f7ff fdae 	bl	19d98 <d_print_mod_list>
   1a23c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a240:	29ff      	cmp	r1, #255	; 0xff
   1a242:	d056      	beq.n	1a2f2 <d_print_function_type.isra.11+0x12e>
   1a244:	1c4b      	adds	r3, r1, #1
   1a246:	2228      	movs	r2, #40	; 0x28
   1a248:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a24c:	5462      	strb	r2, [r4, r1]
   1a24e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a252:	6838      	ldr	r0, [r7, #0]
   1a254:	b178      	cbz	r0, 1a276 <d_print_function_type.isra.11+0xb2>
   1a256:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a25a:	9000      	str	r0, [sp, #0]
   1a25c:	4602      	mov	r2, r0
   1a25e:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a262:	4631      	mov	r1, r6
   1a264:	4620      	mov	r0, r4
   1a266:	9301      	str	r3, [sp, #4]
   1a268:	f7fc fd14 	bl	16c94 <d_print_comp_inner>
   1a26c:	9a01      	ldr	r2, [sp, #4]
   1a26e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a272:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a276:	2bff      	cmp	r3, #255	; 0xff
   1a278:	d04d      	beq.n	1a316 <d_print_function_type.isra.11+0x152>
   1a27a:	1c5a      	adds	r2, r3, #1
   1a27c:	2029      	movs	r0, #41	; 0x29
   1a27e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a282:	4631      	mov	r1, r6
   1a284:	54e0      	strb	r0, [r4, r3]
   1a286:	462a      	mov	r2, r5
   1a288:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a28c:	2301      	movs	r3, #1
   1a28e:	4620      	mov	r0, r4
   1a290:	f7ff fd82 	bl	19d98 <d_print_mod_list>
   1a294:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a298:	b003      	add	sp, #12
   1a29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a29e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a2a2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a2a6:	2a28      	cmp	r2, #40	; 0x28
   1a2a8:	d1af      	bne.n	1a20a <d_print_function_type.isra.11+0x46>
   1a2aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a2ae:	29ff      	cmp	r1, #255	; 0xff
   1a2b0:	d054      	beq.n	1a35c <d_print_function_type.isra.11+0x198>
   1a2b2:	1c4a      	adds	r2, r1, #1
   1a2b4:	2328      	movs	r3, #40	; 0x28
   1a2b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a2ba:	5463      	strb	r3, [r4, r1]
   1a2bc:	f04f 0900 	mov.w	r9, #0
   1a2c0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a2c4:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a2c8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a2cc:	464b      	mov	r3, r9
   1a2ce:	462a      	mov	r2, r5
   1a2d0:	4631      	mov	r1, r6
   1a2d2:	4620      	mov	r0, r4
   1a2d4:	f7ff fd60 	bl	19d98 <d_print_mod_list>
   1a2d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a2dc:	2bff      	cmp	r3, #255	; 0xff
   1a2de:	d02c      	beq.n	1a33a <d_print_function_type.isra.11+0x176>
   1a2e0:	1c59      	adds	r1, r3, #1
   1a2e2:	2229      	movs	r2, #41	; 0x29
   1a2e4:	29ff      	cmp	r1, #255	; 0xff
   1a2e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a2ea:	54e2      	strb	r2, [r4, r3]
   1a2ec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a2f0:	d1a8      	bne.n	1a244 <d_print_function_type.isra.11+0x80>
   1a2f2:	f04f 0900 	mov.w	r9, #0
   1a2f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2fa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a2fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a302:	4620      	mov	r0, r4
   1a304:	4798      	blx	r3
   1a306:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a30a:	3301      	adds	r3, #1
   1a30c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a310:	4649      	mov	r1, r9
   1a312:	2301      	movs	r3, #1
   1a314:	e797      	b.n	1a246 <d_print_function_type.isra.11+0x82>
   1a316:	2700      	movs	r7, #0
   1a318:	4619      	mov	r1, r3
   1a31a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a31e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a322:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a326:	4620      	mov	r0, r4
   1a328:	4798      	blx	r3
   1a32a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a32e:	1c5a      	adds	r2, r3, #1
   1a330:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a334:	463b      	mov	r3, r7
   1a336:	2201      	movs	r2, #1
   1a338:	e7a0      	b.n	1a27c <d_print_function_type.isra.11+0xb8>
   1a33a:	4619      	mov	r1, r3
   1a33c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a340:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a344:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a348:	4620      	mov	r0, r4
   1a34a:	4798      	blx	r3
   1a34c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a350:	1c5a      	adds	r2, r3, #1
   1a352:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a356:	464b      	mov	r3, r9
   1a358:	2101      	movs	r1, #1
   1a35a:	e7c2      	b.n	1a2e2 <d_print_function_type.isra.11+0x11e>
   1a35c:	f04f 0800 	mov.w	r8, #0
   1a360:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a364:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a368:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a36c:	4620      	mov	r0, r4
   1a36e:	4798      	blx	r3
   1a370:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a374:	3301      	adds	r3, #1
   1a376:	4641      	mov	r1, r8
   1a378:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a37c:	2201      	movs	r2, #1
   1a37e:	e799      	b.n	1a2b4 <d_print_function_type.isra.11+0xf0>
   1a380:	f04f 0800 	mov.w	r8, #0
   1a384:	4619      	mov	r1, r3
   1a386:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a38a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a38e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a392:	4620      	mov	r0, r4
   1a394:	4798      	blx	r3
   1a396:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a39a:	1c5a      	adds	r2, r3, #1
   1a39c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a3a0:	4643      	mov	r3, r8
   1a3a2:	2101      	movs	r1, #1
   1a3a4:	e739      	b.n	1a21a <d_print_function_type.isra.11+0x56>
   1a3a6:	bf00      	nop
   1a3a8:	00043107 	.word	0x00043107

0001a3ac <d_print_expr_op>:
   1a3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3b0:	7815      	ldrb	r5, [r2, #0]
   1a3b2:	2d31      	cmp	r5, #49	; 0x31
   1a3b4:	b082      	sub	sp, #8
   1a3b6:	4613      	mov	r3, r2
   1a3b8:	4604      	mov	r4, r0
   1a3ba:	d00d      	beq.n	1a3d8 <d_print_expr_op+0x2c>
   1a3bc:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a3c0:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a3c4:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a3c8:	f7fc fc64 	bl	16c94 <d_print_comp_inner>
   1a3cc:	9b01      	ldr	r3, [sp, #4]
   1a3ce:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a3d2:	b002      	add	sp, #8
   1a3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3d8:	6853      	ldr	r3, [r2, #4]
   1a3da:	689f      	ldr	r7, [r3, #8]
   1a3dc:	685d      	ldr	r5, [r3, #4]
   1a3de:	2f00      	cmp	r7, #0
   1a3e0:	d0f7      	beq.n	1a3d2 <d_print_expr_op+0x26>
   1a3e2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a3e6:	442f      	add	r7, r5
   1a3e8:	f04f 0800 	mov.w	r8, #0
   1a3ec:	e008      	b.n	1a400 <d_print_expr_op+0x54>
   1a3ee:	460b      	mov	r3, r1
   1a3f0:	3101      	adds	r1, #1
   1a3f2:	42bd      	cmp	r5, r7
   1a3f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a3f8:	54e6      	strb	r6, [r4, r3]
   1a3fa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a3fe:	d0e8      	beq.n	1a3d2 <d_print_expr_op+0x26>
   1a400:	29ff      	cmp	r1, #255	; 0xff
   1a402:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a406:	d1f2      	bne.n	1a3ee <d_print_expr_op+0x42>
   1a408:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a40c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a414:	4620      	mov	r0, r4
   1a416:	4798      	blx	r3
   1a418:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a41c:	3301      	adds	r3, #1
   1a41e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a422:	2101      	movs	r1, #1
   1a424:	2300      	movs	r3, #0
   1a426:	e7e4      	b.n	1a3f2 <d_print_expr_op+0x46>

0001a428 <d_print_subexpr>:
   1a428:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a42a:	7813      	ldrb	r3, [r2, #0]
   1a42c:	2b01      	cmp	r3, #1
   1a42e:	b083      	sub	sp, #12
   1a430:	4615      	mov	r5, r2
   1a432:	460e      	mov	r6, r1
   1a434:	4604      	mov	r4, r0
   1a436:	d929      	bls.n	1a48c <d_print_subexpr+0x64>
   1a438:	2b30      	cmp	r3, #48	; 0x30
   1a43a:	d027      	beq.n	1a48c <d_print_subexpr+0x64>
   1a43c:	2b06      	cmp	r3, #6
   1a43e:	d025      	beq.n	1a48c <d_print_subexpr+0x64>
   1a440:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a444:	29ff      	cmp	r1, #255	; 0xff
   1a446:	d031      	beq.n	1a4ac <d_print_subexpr+0x84>
   1a448:	1c4a      	adds	r2, r1, #1
   1a44a:	2328      	movs	r3, #40	; 0x28
   1a44c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a450:	5463      	strb	r3, [r4, r1]
   1a452:	462a      	mov	r2, r5
   1a454:	4631      	mov	r1, r6
   1a456:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a45a:	4620      	mov	r0, r4
   1a45c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a460:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a464:	9301      	str	r3, [sp, #4]
   1a466:	9500      	str	r5, [sp, #0]
   1a468:	f7fc fc14 	bl	16c94 <d_print_comp_inner>
   1a46c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a470:	9b01      	ldr	r3, [sp, #4]
   1a472:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a476:	29ff      	cmp	r1, #255	; 0xff
   1a478:	d028      	beq.n	1a4cc <d_print_subexpr+0xa4>
   1a47a:	1c4a      	adds	r2, r1, #1
   1a47c:	2329      	movs	r3, #41	; 0x29
   1a47e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a482:	5463      	strb	r3, [r4, r1]
   1a484:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a488:	b003      	add	sp, #12
   1a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a48c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a490:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a494:	4631      	mov	r1, r6
   1a496:	462a      	mov	r2, r5
   1a498:	4620      	mov	r0, r4
   1a49a:	9301      	str	r3, [sp, #4]
   1a49c:	9500      	str	r5, [sp, #0]
   1a49e:	f7fc fbf9 	bl	16c94 <d_print_comp_inner>
   1a4a2:	9b01      	ldr	r3, [sp, #4]
   1a4a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a4a8:	b003      	add	sp, #12
   1a4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4ac:	2700      	movs	r7, #0
   1a4ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4b6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a4ba:	4798      	blx	r3
   1a4bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4c0:	3301      	adds	r3, #1
   1a4c2:	4639      	mov	r1, r7
   1a4c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4c8:	2201      	movs	r2, #1
   1a4ca:	e7be      	b.n	1a44a <d_print_subexpr+0x22>
   1a4cc:	2500      	movs	r5, #0
   1a4ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4d6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a4da:	4620      	mov	r0, r4
   1a4dc:	4798      	blx	r3
   1a4de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4e2:	3301      	adds	r3, #1
   1a4e4:	4629      	mov	r1, r5
   1a4e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4ea:	2201      	movs	r2, #1
   1a4ec:	e7c6      	b.n	1a47c <d_print_subexpr+0x54>
   1a4ee:	bf00      	nop

0001a4f0 <d_maybe_print_fold_expression.isra.15>:
   1a4f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4f4:	6852      	ldr	r2, [r2, #4]
   1a4f6:	6812      	ldr	r2, [r2, #0]
   1a4f8:	7815      	ldrb	r5, [r2, #0]
   1a4fa:	2d66      	cmp	r5, #102	; 0x66
   1a4fc:	d002      	beq.n	1a504 <d_maybe_print_fold_expression.isra.15+0x14>
   1a4fe:	2000      	movs	r0, #0
   1a500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a504:	681b      	ldr	r3, [r3, #0]
   1a506:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a50a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a50e:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a512:	f899 3000 	ldrb.w	r3, [r9]
   1a516:	2b3b      	cmp	r3, #59	; 0x3b
   1a518:	f04f 33ff 	mov.w	r3, #4294967295
   1a51c:	bf04      	itt	eq
   1a51e:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a522:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a526:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a52a:	7853      	ldrb	r3, [r2, #1]
   1a52c:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a530:	bf18      	it	ne
   1a532:	2500      	movne	r5, #0
   1a534:	460e      	mov	r6, r1
   1a536:	4604      	mov	r4, r0
   1a538:	2b26      	cmp	r3, #38	; 0x26
   1a53a:	d82b      	bhi.n	1a594 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a53c:	e8df f003 	tbb	[pc, r3]
   1a540:	2a2a2a90 	.word	0x2a2a2a90
   1a544:	2a902a2a 	.word	0x2a902a2a
   1a548:	2a2a2a2a 	.word	0x2a2a2a2a
   1a54c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a550:	2a2a2a2a 	.word	0x2a2a2a2a
   1a554:	2a2a2a2a 	.word	0x2a2a2a2a
   1a558:	2a2a2a2a 	.word	0x2a2a2a2a
   1a55c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a560:	2a2a2a6a 	.word	0x2a2a2a6a
   1a564:	2a2a      	.short	0x2a2a
   1a566:	2f          	.byte	0x2f
   1a567:	00          	.byte	0x00
   1a568:	4642      	mov	r2, r8
   1a56a:	4631      	mov	r1, r6
   1a56c:	4620      	mov	r0, r4
   1a56e:	f7ff ff1d 	bl	1a3ac <d_print_expr_op>
   1a572:	464a      	mov	r2, r9
   1a574:	4631      	mov	r1, r6
   1a576:	4620      	mov	r0, r4
   1a578:	f7ff ff56 	bl	1a428 <d_print_subexpr>
   1a57c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a580:	29ff      	cmp	r1, #255	; 0xff
   1a582:	f000 80b2 	beq.w	1a6ea <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a586:	1c4a      	adds	r2, r1, #1
   1a588:	2329      	movs	r3, #41	; 0x29
   1a58a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a58e:	5463      	strb	r3, [r4, r1]
   1a590:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a594:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a598:	2001      	movs	r0, #1
   1a59a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a59e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a5a2:	29ff      	cmp	r1, #255	; 0xff
   1a5a4:	f000 80c5 	beq.w	1a732 <d_maybe_print_fold_expression.isra.15+0x242>
   1a5a8:	1c4a      	adds	r2, r1, #1
   1a5aa:	2328      	movs	r3, #40	; 0x28
   1a5ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a5b0:	4620      	mov	r0, r4
   1a5b2:	5463      	strb	r3, [r4, r1]
   1a5b4:	464a      	mov	r2, r9
   1a5b6:	4631      	mov	r1, r6
   1a5b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a5bc:	4d65      	ldr	r5, [pc, #404]	; (1a754 <d_maybe_print_fold_expression.isra.15+0x264>)
   1a5be:	f7ff ff33 	bl	1a428 <d_print_subexpr>
   1a5c2:	4642      	mov	r2, r8
   1a5c4:	4631      	mov	r1, r6
   1a5c6:	4620      	mov	r0, r4
   1a5c8:	f7ff fef0 	bl	1a3ac <d_print_expr_op>
   1a5cc:	f105 0904 	add.w	r9, r5, #4
   1a5d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a5d4:	f04f 0800 	mov.w	r8, #0
   1a5d8:	e008      	b.n	1a5ec <d_maybe_print_fold_expression.isra.15+0xfc>
   1a5da:	460b      	mov	r3, r1
   1a5dc:	3101      	adds	r1, #1
   1a5de:	45a9      	cmp	r9, r5
   1a5e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a5e4:	54e6      	strb	r6, [r4, r3]
   1a5e6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a5ea:	d0d3      	beq.n	1a594 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a5ec:	29ff      	cmp	r1, #255	; 0xff
   1a5ee:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a5f2:	d1f2      	bne.n	1a5da <d_maybe_print_fold_expression.isra.15+0xea>
   1a5f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5f8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a5fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a600:	4620      	mov	r0, r4
   1a602:	4798      	blx	r3
   1a604:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a608:	3301      	adds	r3, #1
   1a60a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a60e:	2101      	movs	r1, #1
   1a610:	2300      	movs	r3, #0
   1a612:	e7e4      	b.n	1a5de <d_maybe_print_fold_expression.isra.15+0xee>
   1a614:	4d50      	ldr	r5, [pc, #320]	; (1a758 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a616:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a61a:	f105 0b04 	add.w	fp, r5, #4
   1a61e:	e009      	b.n	1a634 <d_maybe_print_fold_expression.isra.15+0x144>
   1a620:	460b      	mov	r3, r1
   1a622:	3101      	adds	r1, #1
   1a624:	455d      	cmp	r5, fp
   1a626:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a62a:	f804 a003 	strb.w	sl, [r4, r3]
   1a62e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a632:	d099      	beq.n	1a568 <d_maybe_print_fold_expression.isra.15+0x78>
   1a634:	29ff      	cmp	r1, #255	; 0xff
   1a636:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a63a:	d1f1      	bne.n	1a620 <d_maybe_print_fold_expression.isra.15+0x130>
   1a63c:	f04f 0300 	mov.w	r3, #0
   1a640:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a644:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a648:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a64c:	4620      	mov	r0, r4
   1a64e:	4798      	blx	r3
   1a650:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a654:	3301      	adds	r3, #1
   1a656:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a65a:	2101      	movs	r1, #1
   1a65c:	2300      	movs	r3, #0
   1a65e:	e7e1      	b.n	1a624 <d_maybe_print_fold_expression.isra.15+0x134>
   1a660:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a664:	2bff      	cmp	r3, #255	; 0xff
   1a666:	d051      	beq.n	1a70c <d_maybe_print_fold_expression.isra.15+0x21c>
   1a668:	1c59      	adds	r1, r3, #1
   1a66a:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a66e:	464a      	mov	r2, r9
   1a670:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a674:	4620      	mov	r0, r4
   1a676:	f804 e003 	strb.w	lr, [r4, r3]
   1a67a:	4631      	mov	r1, r6
   1a67c:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a680:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1a75c <d_maybe_print_fold_expression.isra.15+0x26c>
   1a684:	f7ff fed0 	bl	1a428 <d_print_subexpr>
   1a688:	4631      	mov	r1, r6
   1a68a:	4642      	mov	r2, r8
   1a68c:	4620      	mov	r0, r4
   1a68e:	f7ff fe8d 	bl	1a3ac <d_print_expr_op>
   1a692:	f109 0b03 	add.w	fp, r9, #3
   1a696:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a69a:	e009      	b.n	1a6b0 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a69c:	460b      	mov	r3, r1
   1a69e:	3101      	adds	r1, #1
   1a6a0:	45cb      	cmp	fp, r9
   1a6a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a6a6:	f804 a003 	strb.w	sl, [r4, r3]
   1a6aa:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a6ae:	d015      	beq.n	1a6dc <d_maybe_print_fold_expression.isra.15+0x1ec>
   1a6b0:	29ff      	cmp	r1, #255	; 0xff
   1a6b2:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a6b6:	d1f1      	bne.n	1a69c <d_maybe_print_fold_expression.isra.15+0x1ac>
   1a6b8:	f04f 0300 	mov.w	r3, #0
   1a6bc:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a6c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a6c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6c8:	4620      	mov	r0, r4
   1a6ca:	4798      	blx	r3
   1a6cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6d0:	3301      	adds	r3, #1
   1a6d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a6d6:	2101      	movs	r1, #1
   1a6d8:	2300      	movs	r3, #0
   1a6da:	e7e1      	b.n	1a6a0 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1a6dc:	4642      	mov	r2, r8
   1a6de:	4631      	mov	r1, r6
   1a6e0:	4620      	mov	r0, r4
   1a6e2:	f7ff fe63 	bl	1a3ac <d_print_expr_op>
   1a6e6:	462a      	mov	r2, r5
   1a6e8:	e744      	b.n	1a574 <d_maybe_print_fold_expression.isra.15+0x84>
   1a6ea:	2500      	movs	r5, #0
   1a6ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a6f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a6f8:	4620      	mov	r0, r4
   1a6fa:	4798      	blx	r3
   1a6fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a700:	3301      	adds	r3, #1
   1a702:	4629      	mov	r1, r5
   1a704:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a708:	2201      	movs	r2, #1
   1a70a:	e73d      	b.n	1a588 <d_maybe_print_fold_expression.isra.15+0x98>
   1a70c:	f04f 0a00 	mov.w	sl, #0
   1a710:	4619      	mov	r1, r3
   1a712:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a716:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a71a:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1a71e:	4798      	blx	r3
   1a720:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a724:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1a728:	1c5a      	adds	r2, r3, #1
   1a72a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a72e:	4653      	mov	r3, sl
   1a730:	e79a      	b.n	1a668 <d_maybe_print_fold_expression.isra.15+0x178>
   1a732:	2500      	movs	r5, #0
   1a734:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a738:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a73c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a740:	4798      	blx	r3
   1a742:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a746:	3301      	adds	r3, #1
   1a748:	4629      	mov	r1, r5
   1a74a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a74e:	2201      	movs	r2, #1
   1a750:	e72b      	b.n	1a5aa <d_maybe_print_fold_expression.isra.15+0xba>
   1a752:	bf00      	nop
   1a754:	00024688 	.word	0x00024688
   1a758:	00024680 	.word	0x00024680
   1a75c:	00022ae4 	.word	0x00022ae4

0001a760 <d_demangle_callback.constprop.17>:
   1a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a764:	b0e7      	sub	sp, #412	; 0x19c
   1a766:	f890 9000 	ldrb.w	r9, [r0]
   1a76a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a76e:	af00      	add	r7, sp, #0
   1a770:	4605      	mov	r5, r0
   1a772:	4688      	mov	r8, r1
   1a774:	4616      	mov	r6, r2
   1a776:	f000 80f1 	beq.w	1a95c <d_demangle_callback.constprop.17+0x1fc>
   1a77a:	2208      	movs	r2, #8
   1a77c:	49bd      	ldr	r1, [pc, #756]	; (1aa74 <d_demangle_callback.constprop.17+0x314>)
   1a77e:	4628      	mov	r0, r5
   1a780:	f004 fb2c 	bl	1eddc <strncmp>
   1a784:	b948      	cbnz	r0, 1a79a <d_demangle_callback.constprop.17+0x3a>
   1a786:	7a2b      	ldrb	r3, [r5, #8]
   1a788:	2b2e      	cmp	r3, #46	; 0x2e
   1a78a:	f000 80d6 	beq.w	1a93a <d_demangle_callback.constprop.17+0x1da>
   1a78e:	2b5f      	cmp	r3, #95	; 0x5f
   1a790:	f000 80d3 	beq.w	1a93a <d_demangle_callback.constprop.17+0x1da>
   1a794:	2b24      	cmp	r3, #36	; 0x24
   1a796:	f000 80d0 	beq.w	1a93a <d_demangle_callback.constprop.17+0x1da>
   1a79a:	f04f 0a00 	mov.w	sl, #0
   1a79e:	4628      	mov	r0, r5
   1a7a0:	f004 faae 	bl	1ed00 <strlen>
   1a7a4:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1a7a8:	0083      	lsls	r3, r0, #2
   1a7aa:	eb03 020b 	add.w	r2, r3, fp
   1a7ae:	0092      	lsls	r2, r2, #2
   1a7b0:	3208      	adds	r2, #8
   1a7b2:	330a      	adds	r3, #10
   1a7b4:	ebad 0d02 	sub.w	sp, sp, r2
   1a7b8:	f023 0307 	bic.w	r3, r3, #7
   1a7bc:	2400      	movs	r4, #0
   1a7be:	466a      	mov	r2, sp
   1a7c0:	1829      	adds	r1, r5, r0
   1a7c2:	ebad 0d03 	sub.w	sp, sp, r3
   1a7c6:	f1ba 0f01 	cmp.w	sl, #1
   1a7ca:	f04f 0311 	mov.w	r3, #17
   1a7ce:	627a      	str	r2, [r7, #36]	; 0x24
   1a7d0:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a7d4:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1a7d8:	617d      	str	r5, [r7, #20]
   1a7da:	623d      	str	r5, [r7, #32]
   1a7dc:	63b8      	str	r0, [r7, #56]	; 0x38
   1a7de:	61b9      	str	r1, [r7, #24]
   1a7e0:	61fb      	str	r3, [r7, #28]
   1a7e2:	62bc      	str	r4, [r7, #40]	; 0x28
   1a7e4:	637c      	str	r4, [r7, #52]	; 0x34
   1a7e6:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a7e8:	643c      	str	r4, [r7, #64]	; 0x40
   1a7ea:	647c      	str	r4, [r7, #68]	; 0x44
   1a7ec:	64bc      	str	r4, [r7, #72]	; 0x48
   1a7ee:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a7f0:	f000 80bb 	beq.w	1a96a <d_demangle_callback.constprop.17+0x20a>
   1a7f4:	f0c0 80cf 	bcc.w	1a996 <d_demangle_callback.constprop.17+0x236>
   1a7f8:	7aeb      	ldrb	r3, [r5, #11]
   1a7fa:	f1ba 0f02 	cmp.w	sl, #2
   1a7fe:	bf18      	it	ne
   1a800:	f04f 0944 	movne.w	r9, #68	; 0x44
   1a804:	f105 0a0b 	add.w	sl, r5, #11
   1a808:	bf08      	it	eq
   1a80a:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1a80e:	2b5f      	cmp	r3, #95	; 0x5f
   1a810:	f8c7 a020 	str.w	sl, [r7, #32]
   1a814:	f000 80b2 	beq.w	1a97c <d_demangle_callback.constprop.17+0x21c>
   1a818:	4650      	mov	r0, sl
   1a81a:	607a      	str	r2, [r7, #4]
   1a81c:	f004 fa70 	bl	1ed00 <strlen>
   1a820:	f1bb 0f00 	cmp.w	fp, #0
   1a824:	687a      	ldr	r2, [r7, #4]
   1a826:	f340 80bf 	ble.w	1a9a8 <d_demangle_callback.constprop.17+0x248>
   1a82a:	2301      	movs	r3, #1
   1a82c:	62bb      	str	r3, [r7, #40]	; 0x28
   1a82e:	2800      	cmp	r0, #0
   1a830:	f000 80ba 	beq.w	1a9a8 <d_demangle_callback.constprop.17+0x248>
   1a834:	2300      	movs	r3, #0
   1a836:	f8c2 a004 	str.w	sl, [r2, #4]
   1a83a:	6090      	str	r0, [r2, #8]
   1a83c:	7013      	strb	r3, [r2, #0]
   1a83e:	4649      	mov	r1, r9
   1a840:	2300      	movs	r3, #0
   1a842:	f107 0014 	add.w	r0, r7, #20
   1a846:	f7f9 fe31 	bl	144ac <d_make_comp>
   1a84a:	6a3c      	ldr	r4, [r7, #32]
   1a84c:	4605      	mov	r5, r0
   1a84e:	4620      	mov	r0, r4
   1a850:	f004 fa56 	bl	1ed00 <strlen>
   1a854:	1823      	adds	r3, r4, r0
   1a856:	623b      	str	r3, [r7, #32]
   1a858:	f814 9000 	ldrb.w	r9, [r4, r0]
   1a85c:	f1b9 0f00 	cmp.w	r9, #0
   1a860:	f040 8086 	bne.w	1a970 <d_demangle_callback.constprop.17+0x210>
   1a864:	2d00      	cmp	r5, #0
   1a866:	f000 8083 	beq.w	1a970 <d_demangle_callback.constprop.17+0x210>
   1a86a:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1a86e:	462a      	mov	r2, r5
   1a870:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1a874:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1a878:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1a87c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1a880:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1a884:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1a888:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1a88c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a890:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1a894:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1a898:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1a89c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1a8a0:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1a8a4:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1a8a8:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1a8ac:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1a8b0:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1a8b4:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1a8b8:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1a8bc:	f7f9 fec4 	bl	14648 <d_count_templates_scopes>
   1a8c0:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1a8c4:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1a8c8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a8cc:	613b      	str	r3, [r7, #16]
   1a8ce:	00d0      	lsls	r0, r2, #3
   1a8d0:	fb01 f102 	mul.w	r1, r1, r2
   1a8d4:	3008      	adds	r0, #8
   1a8d6:	46e8      	mov	r8, sp
   1a8d8:	00ca      	lsls	r2, r1, #3
   1a8da:	ebad 0d00 	sub.w	sp, sp, r0
   1a8de:	4668      	mov	r0, sp
   1a8e0:	3208      	adds	r2, #8
   1a8e2:	ebad 0d02 	sub.w	sp, sp, r2
   1a8e6:	f107 060c 	add.w	r6, r7, #12
   1a8ea:	462a      	mov	r2, r5
   1a8ec:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1a8f0:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1a8f4:	4620      	mov	r0, r4
   1a8f6:	2111      	movs	r1, #17
   1a8f8:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1a8fc:	60fd      	str	r5, [r7, #12]
   1a8fe:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1a902:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1a906:	f7fc f9c5 	bl	16c94 <d_print_comp_inner>
   1a90a:	693b      	ldr	r3, [r7, #16]
   1a90c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a910:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a914:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a918:	f804 9001 	strb.w	r9, [r4, r1]
   1a91c:	4620      	mov	r0, r4
   1a91e:	46c5      	mov	sp, r8
   1a920:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a924:	4798      	blx	r3
   1a926:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1a92a:	fab0 f080 	clz	r0, r0
   1a92e:	0940      	lsrs	r0, r0, #5
   1a930:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a934:	46bd      	mov	sp, r7
   1a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a93a:	7a6b      	ldrb	r3, [r5, #9]
   1a93c:	2b44      	cmp	r3, #68	; 0x44
   1a93e:	d002      	beq.n	1a946 <d_demangle_callback.constprop.17+0x1e6>
   1a940:	2b49      	cmp	r3, #73	; 0x49
   1a942:	f47f af2a 	bne.w	1a79a <d_demangle_callback.constprop.17+0x3a>
   1a946:	7aaa      	ldrb	r2, [r5, #10]
   1a948:	2a5f      	cmp	r2, #95	; 0x5f
   1a94a:	f47f af26 	bne.w	1a79a <d_demangle_callback.constprop.17+0x3a>
   1a94e:	2b49      	cmp	r3, #73	; 0x49
   1a950:	bf14      	ite	ne
   1a952:	f04f 0a03 	movne.w	sl, #3
   1a956:	f04f 0a02 	moveq.w	sl, #2
   1a95a:	e720      	b.n	1a79e <d_demangle_callback.constprop.17+0x3e>
   1a95c:	7843      	ldrb	r3, [r0, #1]
   1a95e:	2b5a      	cmp	r3, #90	; 0x5a
   1a960:	f47f af0b 	bne.w	1a77a <d_demangle_callback.constprop.17+0x1a>
   1a964:	f04f 0a01 	mov.w	sl, #1
   1a968:	e719      	b.n	1a79e <d_demangle_callback.constprop.17+0x3e>
   1a96a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a96e:	d01d      	beq.n	1a9ac <d_demangle_callback.constprop.17+0x24c>
   1a970:	2000      	movs	r0, #0
   1a972:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a976:	46bd      	mov	sp, r7
   1a978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a97c:	7b2b      	ldrb	r3, [r5, #12]
   1a97e:	2b5a      	cmp	r3, #90	; 0x5a
   1a980:	f47f af4a 	bne.w	1a818 <d_demangle_callback.constprop.17+0xb8>
   1a984:	350d      	adds	r5, #13
   1a986:	4621      	mov	r1, r4
   1a988:	f107 0014 	add.w	r0, r7, #20
   1a98c:	623d      	str	r5, [r7, #32]
   1a98e:	f7fb fe35 	bl	165fc <d_encoding>
   1a992:	4602      	mov	r2, r0
   1a994:	e753      	b.n	1a83e <d_demangle_callback.constprop.17+0xde>
   1a996:	f107 0014 	add.w	r0, r7, #20
   1a99a:	f7fb f817 	bl	159cc <d_type>
   1a99e:	6a3b      	ldr	r3, [r7, #32]
   1a9a0:	4605      	mov	r5, r0
   1a9a2:	f893 9000 	ldrb.w	r9, [r3]
   1a9a6:	e759      	b.n	1a85c <d_demangle_callback.constprop.17+0xfc>
   1a9a8:	2200      	movs	r2, #0
   1a9aa:	e748      	b.n	1a83e <d_demangle_callback.constprop.17+0xde>
   1a9ac:	786b      	ldrb	r3, [r5, #1]
   1a9ae:	2b5a      	cmp	r3, #90	; 0x5a
   1a9b0:	d1de      	bne.n	1a970 <d_demangle_callback.constprop.17+0x210>
   1a9b2:	3502      	adds	r5, #2
   1a9b4:	4651      	mov	r1, sl
   1a9b6:	f107 0014 	add.w	r0, r7, #20
   1a9ba:	623d      	str	r5, [r7, #32]
   1a9bc:	f7fb fe1e 	bl	165fc <d_encoding>
   1a9c0:	69fb      	ldr	r3, [r7, #28]
   1a9c2:	07db      	lsls	r3, r3, #31
   1a9c4:	4605      	mov	r5, r0
   1a9c6:	d551      	bpl.n	1aa6c <d_demangle_callback.constprop.17+0x30c>
   1a9c8:	6a38      	ldr	r0, [r7, #32]
   1a9ca:	f890 9000 	ldrb.w	r9, [r0]
   1a9ce:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1a9d2:	f47f af43 	bne.w	1a85c <d_demangle_callback.constprop.17+0xfc>
   1a9d6:	7843      	ldrb	r3, [r0, #1]
   1a9d8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1a9dc:	2a19      	cmp	r2, #25
   1a9de:	d939      	bls.n	1aa54 <d_demangle_callback.constprop.17+0x2f4>
   1a9e0:	2b5f      	cmp	r3, #95	; 0x5f
   1a9e2:	d037      	beq.n	1aa54 <d_demangle_callback.constprop.17+0x2f4>
   1a9e4:	3b30      	subs	r3, #48	; 0x30
   1a9e6:	2b09      	cmp	r3, #9
   1a9e8:	d840      	bhi.n	1aa6c <d_demangle_callback.constprop.17+0x30c>
   1a9ea:	7803      	ldrb	r3, [r0, #0]
   1a9ec:	4602      	mov	r2, r0
   1a9ee:	2b2e      	cmp	r3, #46	; 0x2e
   1a9f0:	d112      	bne.n	1aa18 <d_demangle_callback.constprop.17+0x2b8>
   1a9f2:	7853      	ldrb	r3, [r2, #1]
   1a9f4:	3b30      	subs	r3, #48	; 0x30
   1a9f6:	2b09      	cmp	r3, #9
   1a9f8:	d80e      	bhi.n	1aa18 <d_demangle_callback.constprop.17+0x2b8>
   1a9fa:	7893      	ldrb	r3, [r2, #2]
   1a9fc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1aa00:	2909      	cmp	r1, #9
   1aa02:	f102 0202 	add.w	r2, r2, #2
   1aa06:	d8f2      	bhi.n	1a9ee <d_demangle_callback.constprop.17+0x28e>
   1aa08:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1aa0c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1aa10:	2909      	cmp	r1, #9
   1aa12:	d9f9      	bls.n	1aa08 <d_demangle_callback.constprop.17+0x2a8>
   1aa14:	2b2e      	cmp	r3, #46	; 0x2e
   1aa16:	d0ec      	beq.n	1a9f2 <d_demangle_callback.constprop.17+0x292>
   1aa18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa1c:	623a      	str	r2, [r7, #32]
   1aa1e:	4299      	cmp	r1, r3
   1aa20:	da16      	bge.n	1aa50 <d_demangle_callback.constprop.17+0x2f0>
   1aa22:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1aa26:	1c4b      	adds	r3, r1, #1
   1aa28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1aa2c:	62bb      	str	r3, [r7, #40]	; 0x28
   1aa2e:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1aa32:	d00d      	beq.n	1aa50 <d_demangle_callback.constprop.17+0x2f0>
   1aa34:	1a12      	subs	r2, r2, r0
   1aa36:	d00b      	beq.n	1aa50 <d_demangle_callback.constprop.17+0x2f0>
   1aa38:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1aa3c:	6058      	str	r0, [r3, #4]
   1aa3e:	609a      	str	r2, [r3, #8]
   1aa40:	462a      	mov	r2, r5
   1aa42:	214d      	movs	r1, #77	; 0x4d
   1aa44:	f107 0014 	add.w	r0, r7, #20
   1aa48:	f7f9 fd30 	bl	144ac <d_make_comp>
   1aa4c:	4605      	mov	r5, r0
   1aa4e:	e7bb      	b.n	1a9c8 <d_demangle_callback.constprop.17+0x268>
   1aa50:	2300      	movs	r3, #0
   1aa52:	e7f5      	b.n	1aa40 <d_demangle_callback.constprop.17+0x2e0>
   1aa54:	1c81      	adds	r1, r0, #2
   1aa56:	460a      	mov	r2, r1
   1aa58:	f811 3b01 	ldrb.w	r3, [r1], #1
   1aa5c:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1aa60:	f1be 0f19 	cmp.w	lr, #25
   1aa64:	d9f7      	bls.n	1aa56 <d_demangle_callback.constprop.17+0x2f6>
   1aa66:	2b5f      	cmp	r3, #95	; 0x5f
   1aa68:	d0f5      	beq.n	1aa56 <d_demangle_callback.constprop.17+0x2f6>
   1aa6a:	e7c0      	b.n	1a9ee <d_demangle_callback.constprop.17+0x28e>
   1aa6c:	6a3b      	ldr	r3, [r7, #32]
   1aa6e:	f893 9000 	ldrb.w	r9, [r3]
   1aa72:	e6f3      	b.n	1a85c <d_demangle_callback.constprop.17+0xfc>
   1aa74:	00024330 	.word	0x00024330

0001aa78 <__cxa_demangle>:
   1aa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa7c:	b084      	sub	sp, #16
   1aa7e:	b378      	cbz	r0, 1aae0 <__cxa_demangle+0x68>
   1aa80:	b101      	cbz	r1, 1aa84 <__cxa_demangle+0xc>
   1aa82:	b36a      	cbz	r2, 1aae0 <__cxa_demangle+0x68>
   1aa84:	2400      	movs	r4, #0
   1aa86:	4616      	mov	r6, r2
   1aa88:	460d      	mov	r5, r1
   1aa8a:	466a      	mov	r2, sp
   1aa8c:	4927      	ldr	r1, [pc, #156]	; (1ab2c <__cxa_demangle+0xb4>)
   1aa8e:	9400      	str	r4, [sp, #0]
   1aa90:	461f      	mov	r7, r3
   1aa92:	9401      	str	r4, [sp, #4]
   1aa94:	9402      	str	r4, [sp, #8]
   1aa96:	9403      	str	r4, [sp, #12]
   1aa98:	f7ff fe62 	bl	1a760 <d_demangle_callback.constprop.17>
   1aa9c:	2800      	cmp	r0, #0
   1aa9e:	d03f      	beq.n	1ab20 <__cxa_demangle+0xa8>
   1aaa0:	9b03      	ldr	r3, [sp, #12]
   1aaa2:	b1d3      	cbz	r3, 1aada <__cxa_demangle+0x62>
   1aaa4:	f04f 0801 	mov.w	r8, #1
   1aaa8:	9c00      	ldr	r4, [sp, #0]
   1aaaa:	b35c      	cbz	r4, 1ab04 <__cxa_demangle+0x8c>
   1aaac:	b33d      	cbz	r5, 1aafe <__cxa_demangle+0x86>
   1aaae:	4620      	mov	r0, r4
   1aab0:	f004 f926 	bl	1ed00 <strlen>
   1aab4:	6833      	ldr	r3, [r6, #0]
   1aab6:	4298      	cmp	r0, r3
   1aab8:	d21b      	bcs.n	1aaf2 <__cxa_demangle+0x7a>
   1aaba:	1c42      	adds	r2, r0, #1
   1aabc:	4621      	mov	r1, r4
   1aabe:	4628      	mov	r0, r5
   1aac0:	f003 fbe6 	bl	1e290 <memcpy>
   1aac4:	4620      	mov	r0, r4
   1aac6:	f003 f893 	bl	1dbf0 <free>
   1aaca:	462c      	mov	r4, r5
   1aacc:	b10f      	cbz	r7, 1aad2 <__cxa_demangle+0x5a>
   1aace:	2300      	movs	r3, #0
   1aad0:	603b      	str	r3, [r7, #0]
   1aad2:	4620      	mov	r0, r4
   1aad4:	b004      	add	sp, #16
   1aad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aada:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1aade:	e7e3      	b.n	1aaa8 <__cxa_demangle+0x30>
   1aae0:	b113      	cbz	r3, 1aae8 <__cxa_demangle+0x70>
   1aae2:	f06f 0202 	mvn.w	r2, #2
   1aae6:	601a      	str	r2, [r3, #0]
   1aae8:	2400      	movs	r4, #0
   1aaea:	4620      	mov	r0, r4
   1aaec:	b004      	add	sp, #16
   1aaee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aaf2:	4628      	mov	r0, r5
   1aaf4:	f003 f87c 	bl	1dbf0 <free>
   1aaf8:	f8c6 8000 	str.w	r8, [r6]
   1aafc:	e7e6      	b.n	1aacc <__cxa_demangle+0x54>
   1aafe:	2e00      	cmp	r6, #0
   1ab00:	d1fa      	bne.n	1aaf8 <__cxa_demangle+0x80>
   1ab02:	e7e3      	b.n	1aacc <__cxa_demangle+0x54>
   1ab04:	2f00      	cmp	r7, #0
   1ab06:	d0ef      	beq.n	1aae8 <__cxa_demangle+0x70>
   1ab08:	f1b8 0f01 	cmp.w	r8, #1
   1ab0c:	d004      	beq.n	1ab18 <__cxa_demangle+0xa0>
   1ab0e:	f06f 0301 	mvn.w	r3, #1
   1ab12:	603b      	str	r3, [r7, #0]
   1ab14:	2400      	movs	r4, #0
   1ab16:	e7dc      	b.n	1aad2 <__cxa_demangle+0x5a>
   1ab18:	f04f 33ff 	mov.w	r3, #4294967295
   1ab1c:	603b      	str	r3, [r7, #0]
   1ab1e:	e7d8      	b.n	1aad2 <__cxa_demangle+0x5a>
   1ab20:	9800      	ldr	r0, [sp, #0]
   1ab22:	f003 f865 	bl	1dbf0 <free>
   1ab26:	2f00      	cmp	r7, #0
   1ab28:	d1f1      	bne.n	1ab0e <__cxa_demangle+0x96>
   1ab2a:	e7dd      	b.n	1aae8 <__cxa_demangle+0x70>
   1ab2c:	00014bd1 	.word	0x00014bd1

0001ab30 <__gcclibcxx_demangle_callback>:
   1ab30:	b160      	cbz	r0, 1ab4c <__gcclibcxx_demangle_callback+0x1c>
   1ab32:	b508      	push	{r3, lr}
   1ab34:	b139      	cbz	r1, 1ab46 <__gcclibcxx_demangle_callback+0x16>
   1ab36:	f7ff fe13 	bl	1a760 <d_demangle_callback.constprop.17>
   1ab3a:	2800      	cmp	r0, #0
   1ab3c:	bf0c      	ite	eq
   1ab3e:	f06f 0001 	mvneq.w	r0, #1
   1ab42:	2000      	movne	r0, #0
   1ab44:	bd08      	pop	{r3, pc}
   1ab46:	f06f 0002 	mvn.w	r0, #2
   1ab4a:	bd08      	pop	{r3, pc}
   1ab4c:	f06f 0002 	mvn.w	r0, #2
   1ab50:	4770      	bx	lr
   1ab52:	bf00      	nop

0001ab54 <__cxa_current_exception_type>:
   1ab54:	b508      	push	{r3, lr}
   1ab56:	f7f9 f8f5 	bl	13d44 <__cxa_get_globals>
   1ab5a:	6800      	ldr	r0, [r0, #0]
   1ab5c:	b130      	cbz	r0, 1ab6c <__cxa_current_exception_type+0x18>
   1ab5e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1ab62:	2b01      	cmp	r3, #1
   1ab64:	bf04      	itt	eq
   1ab66:	6800      	ldreq	r0, [r0, #0]
   1ab68:	3878      	subeq	r0, #120	; 0x78
   1ab6a:	6800      	ldr	r0, [r0, #0]
   1ab6c:	bd08      	pop	{r3, pc}
   1ab6e:	bf00      	nop

0001ab70 <powf>:
   1ab70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab72:	ed2d 8b04 	vpush	{d8-d9}
   1ab76:	4db3      	ldr	r5, [pc, #716]	; (1ae44 <powf+0x2d4>)
   1ab78:	b08b      	sub	sp, #44	; 0x2c
   1ab7a:	eef0 8a40 	vmov.f32	s17, s0
   1ab7e:	eeb0 8a60 	vmov.f32	s16, s1
   1ab82:	f000 f9df 	bl	1af44 <__ieee754_powf>
   1ab86:	f995 4000 	ldrsb.w	r4, [r5]
   1ab8a:	1c63      	adds	r3, r4, #1
   1ab8c:	eeb0 9a40 	vmov.f32	s18, s0
   1ab90:	d02e      	beq.n	1abf0 <powf+0x80>
   1ab92:	eeb4 8a48 	vcmp.f32	s16, s16
   1ab96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab9a:	d629      	bvs.n	1abf0 <powf+0x80>
   1ab9c:	eef4 8a68 	vcmp.f32	s17, s17
   1aba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aba4:	f180 80a2 	bvs.w	1acec <powf+0x17c>
   1aba8:	eef5 8a40 	vcmp.f32	s17, #0.0
   1abac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abb0:	d124      	bne.n	1abfc <powf+0x8c>
   1abb2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1abb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abba:	d159      	bne.n	1ac70 <powf+0x100>
   1abbc:	2301      	movs	r3, #1
   1abbe:	4aa2      	ldr	r2, [pc, #648]	; (1ae48 <powf+0x2d8>)
   1abc0:	9300      	str	r3, [sp, #0]
   1abc2:	ee18 0a90 	vmov	r0, s17
   1abc6:	2300      	movs	r3, #0
   1abc8:	9201      	str	r2, [sp, #4]
   1abca:	9308      	str	r3, [sp, #32]
   1abcc:	f000 ff3a 	bl	1ba44 <__aeabi_f2d>
   1abd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1abd4:	ee18 0a10 	vmov	r0, s16
   1abd8:	f000 ff34 	bl	1ba44 <__aeabi_f2d>
   1abdc:	2200      	movs	r2, #0
   1abde:	2300      	movs	r3, #0
   1abe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1abe4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1abe8:	2c00      	cmp	r4, #0
   1abea:	d067      	beq.n	1acbc <powf+0x14c>
   1abec:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1abf0:	eeb0 0a49 	vmov.f32	s0, s18
   1abf4:	b00b      	add	sp, #44	; 0x2c
   1abf6:	ecbd 8b04 	vpop	{d8-d9}
   1abfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1abfc:	f000 fd3a 	bl	1b674 <finitef>
   1ac00:	4604      	mov	r4, r0
   1ac02:	2800      	cmp	r0, #0
   1ac04:	f000 8091 	beq.w	1ad2a <powf+0x1ba>
   1ac08:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1ac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac10:	d1ee      	bne.n	1abf0 <powf+0x80>
   1ac12:	eeb0 0a68 	vmov.f32	s0, s17
   1ac16:	f000 fd2d 	bl	1b674 <finitef>
   1ac1a:	2800      	cmp	r0, #0
   1ac1c:	d0e8      	beq.n	1abf0 <powf+0x80>
   1ac1e:	eeb0 0a48 	vmov.f32	s0, s16
   1ac22:	f000 fd27 	bl	1b674 <finitef>
   1ac26:	2800      	cmp	r0, #0
   1ac28:	d0e2      	beq.n	1abf0 <powf+0x80>
   1ac2a:	2304      	movs	r3, #4
   1ac2c:	4a86      	ldr	r2, [pc, #536]	; (1ae48 <powf+0x2d8>)
   1ac2e:	9300      	str	r3, [sp, #0]
   1ac30:	ee18 0a90 	vmov	r0, s17
   1ac34:	2300      	movs	r3, #0
   1ac36:	9308      	str	r3, [sp, #32]
   1ac38:	9201      	str	r2, [sp, #4]
   1ac3a:	f000 ff03 	bl	1ba44 <__aeabi_f2d>
   1ac3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ac42:	ee18 0a10 	vmov	r0, s16
   1ac46:	f000 fefd 	bl	1ba44 <__aeabi_f2d>
   1ac4a:	2600      	movs	r6, #0
   1ac4c:	2700      	movs	r7, #0
   1ac4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ac52:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1ac56:	f995 3000 	ldrsb.w	r3, [r5]
   1ac5a:	2b02      	cmp	r3, #2
   1ac5c:	d003      	beq.n	1ac66 <powf+0xf6>
   1ac5e:	4668      	mov	r0, sp
   1ac60:	f000 fc6c 	bl	1b53c <matherr>
   1ac64:	bb80      	cbnz	r0, 1acc8 <powf+0x158>
   1ac66:	f002 fd15 	bl	1d694 <__errno>
   1ac6a:	2322      	movs	r3, #34	; 0x22
   1ac6c:	6003      	str	r3, [r0, #0]
   1ac6e:	e02b      	b.n	1acc8 <powf+0x158>
   1ac70:	eeb0 0a48 	vmov.f32	s0, s16
   1ac74:	f000 fcfe 	bl	1b674 <finitef>
   1ac78:	2800      	cmp	r0, #0
   1ac7a:	d0b9      	beq.n	1abf0 <powf+0x80>
   1ac7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ac80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac84:	d5b4      	bpl.n	1abf0 <powf+0x80>
   1ac86:	2301      	movs	r3, #1
   1ac88:	4a6f      	ldr	r2, [pc, #444]	; (1ae48 <powf+0x2d8>)
   1ac8a:	9300      	str	r3, [sp, #0]
   1ac8c:	ee18 0a90 	vmov	r0, s17
   1ac90:	2300      	movs	r3, #0
   1ac92:	9308      	str	r3, [sp, #32]
   1ac94:	9201      	str	r2, [sp, #4]
   1ac96:	f000 fed5 	bl	1ba44 <__aeabi_f2d>
   1ac9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ac9e:	ee18 0a10 	vmov	r0, s16
   1aca2:	f000 fecf 	bl	1ba44 <__aeabi_f2d>
   1aca6:	f995 3000 	ldrsb.w	r3, [r5]
   1acaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1acae:	2b00      	cmp	r3, #0
   1acb0:	f040 809b 	bne.w	1adea <powf+0x27a>
   1acb4:	2200      	movs	r2, #0
   1acb6:	2300      	movs	r3, #0
   1acb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1acbc:	4668      	mov	r0, sp
   1acbe:	f000 fc3d 	bl	1b53c <matherr>
   1acc2:	2800      	cmp	r0, #0
   1acc4:	f000 808c 	beq.w	1ade0 <powf+0x270>
   1acc8:	9b08      	ldr	r3, [sp, #32]
   1acca:	b11b      	cbz	r3, 1acd4 <powf+0x164>
   1accc:	f002 fce2 	bl	1d694 <__errno>
   1acd0:	9b08      	ldr	r3, [sp, #32]
   1acd2:	6003      	str	r3, [r0, #0]
   1acd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1acd8:	f001 f9ea 	bl	1c0b0 <__aeabi_d2f>
   1acdc:	ee09 0a10 	vmov	s18, r0
   1ace0:	eeb0 0a49 	vmov.f32	s0, s18
   1ace4:	b00b      	add	sp, #44	; 0x2c
   1ace6:	ecbd 8b04 	vpop	{d8-d9}
   1acea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1acec:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1acf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1acf4:	f47f af7c 	bne.w	1abf0 <powf+0x80>
   1acf8:	2301      	movs	r3, #1
   1acfa:	4a53      	ldr	r2, [pc, #332]	; (1ae48 <powf+0x2d8>)
   1acfc:	9300      	str	r3, [sp, #0]
   1acfe:	ee18 0a90 	vmov	r0, s17
   1ad02:	2300      	movs	r3, #0
   1ad04:	9201      	str	r2, [sp, #4]
   1ad06:	9308      	str	r3, [sp, #32]
   1ad08:	f000 fe9c 	bl	1ba44 <__aeabi_f2d>
   1ad0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ad10:	ee18 0a10 	vmov	r0, s16
   1ad14:	f000 fe96 	bl	1ba44 <__aeabi_f2d>
   1ad18:	4b4c      	ldr	r3, [pc, #304]	; (1ae4c <powf+0x2dc>)
   1ad1a:	2200      	movs	r2, #0
   1ad1c:	2c02      	cmp	r4, #2
   1ad1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad22:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad26:	d1c9      	bne.n	1acbc <powf+0x14c>
   1ad28:	e760      	b.n	1abec <powf+0x7c>
   1ad2a:	eeb0 0a68 	vmov.f32	s0, s17
   1ad2e:	f000 fca1 	bl	1b674 <finitef>
   1ad32:	2800      	cmp	r0, #0
   1ad34:	f43f af68 	beq.w	1ac08 <powf+0x98>
   1ad38:	eeb0 0a48 	vmov.f32	s0, s16
   1ad3c:	f000 fc9a 	bl	1b674 <finitef>
   1ad40:	2800      	cmp	r0, #0
   1ad42:	f43f af61 	beq.w	1ac08 <powf+0x98>
   1ad46:	eeb4 9a49 	vcmp.f32	s18, s18
   1ad4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad4e:	f180 8087 	bvs.w	1ae60 <powf+0x2f0>
   1ad52:	4b3d      	ldr	r3, [pc, #244]	; (1ae48 <powf+0x2d8>)
   1ad54:	9408      	str	r4, [sp, #32]
   1ad56:	2203      	movs	r2, #3
   1ad58:	ee18 0a90 	vmov	r0, s17
   1ad5c:	e88d 000c 	stmia.w	sp, {r2, r3}
   1ad60:	f000 fe70 	bl	1ba44 <__aeabi_f2d>
   1ad64:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ad68:	ee18 0a10 	vmov	r0, s16
   1ad6c:	f000 fe6a 	bl	1ba44 <__aeabi_f2d>
   1ad70:	f995 3000 	ldrsb.w	r3, [r5]
   1ad74:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad78:	2b00      	cmp	r3, #0
   1ad7a:	d13d      	bne.n	1adf8 <powf+0x288>
   1ad7c:	4b34      	ldr	r3, [pc, #208]	; (1ae50 <powf+0x2e0>)
   1ad7e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ad82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1ad86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad8e:	f57f af66 	bpl.w	1ac5e <powf+0xee>
   1ad92:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ad96:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ad9a:	ee17 0a90 	vmov	r0, s15
   1ad9e:	f000 fe51 	bl	1ba44 <__aeabi_f2d>
   1ada2:	4606      	mov	r6, r0
   1ada4:	460f      	mov	r7, r1
   1ada6:	ec47 6b10 	vmov	d0, r6, r7
   1adaa:	f000 fbc9 	bl	1b540 <rint>
   1adae:	4630      	mov	r0, r6
   1adb0:	ec53 2b10 	vmov	r2, r3, d0
   1adb4:	4639      	mov	r1, r7
   1adb6:	f001 f901 	bl	1bfbc <__aeabi_dcmpeq>
   1adba:	2800      	cmp	r0, #0
   1adbc:	d13f      	bne.n	1ae3e <powf+0x2ce>
   1adbe:	4925      	ldr	r1, [pc, #148]	; (1ae54 <powf+0x2e4>)
   1adc0:	f995 3000 	ldrsb.w	r3, [r5]
   1adc4:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1adc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1adcc:	e745      	b.n	1ac5a <powf+0xea>
   1adce:	4610      	mov	r0, r2
   1add0:	4619      	mov	r1, r3
   1add2:	f000 ffb5 	bl	1bd40 <__aeabi_ddiv>
   1add6:	2c02      	cmp	r4, #2
   1add8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1addc:	f47f af6e 	bne.w	1acbc <powf+0x14c>
   1ade0:	f002 fc58 	bl	1d694 <__errno>
   1ade4:	2321      	movs	r3, #33	; 0x21
   1ade6:	6003      	str	r3, [r0, #0]
   1ade8:	e76e      	b.n	1acc8 <powf+0x158>
   1adea:	491b      	ldr	r1, [pc, #108]	; (1ae58 <powf+0x2e8>)
   1adec:	2000      	movs	r0, #0
   1adee:	2b02      	cmp	r3, #2
   1adf0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1adf4:	d0f4      	beq.n	1ade0 <powf+0x270>
   1adf6:	e761      	b.n	1acbc <powf+0x14c>
   1adf8:	4918      	ldr	r1, [pc, #96]	; (1ae5c <powf+0x2ec>)
   1adfa:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1adfe:	2000      	movs	r0, #0
   1ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae04:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ae08:	f57f af27 	bpl.w	1ac5a <powf+0xea>
   1ae0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ae10:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ae14:	ee17 0a90 	vmov	r0, s15
   1ae18:	f000 fe14 	bl	1ba44 <__aeabi_f2d>
   1ae1c:	4606      	mov	r6, r0
   1ae1e:	460f      	mov	r7, r1
   1ae20:	ec47 6b10 	vmov	d0, r6, r7
   1ae24:	f000 fb8c 	bl	1b540 <rint>
   1ae28:	4630      	mov	r0, r6
   1ae2a:	ec53 2b10 	vmov	r2, r3, d0
   1ae2e:	4639      	mov	r1, r7
   1ae30:	f001 f8c4 	bl	1bfbc <__aeabi_dcmpeq>
   1ae34:	b918      	cbnz	r0, 1ae3e <powf+0x2ce>
   1ae36:	4b08      	ldr	r3, [pc, #32]	; (1ae58 <powf+0x2e8>)
   1ae38:	2200      	movs	r2, #0
   1ae3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae3e:	f995 3000 	ldrsb.w	r3, [r5]
   1ae42:	e70a      	b.n	1ac5a <powf+0xea>
   1ae44:	200000f4 	.word	0x200000f4
   1ae48:	00024b7c 	.word	0x00024b7c
   1ae4c:	3ff00000 	.word	0x3ff00000
   1ae50:	47efffff 	.word	0x47efffff
   1ae54:	c7efffff 	.word	0xc7efffff
   1ae58:	fff00000 	.word	0xfff00000
   1ae5c:	7ff00000 	.word	0x7ff00000
   1ae60:	4b0c      	ldr	r3, [pc, #48]	; (1ae94 <powf+0x324>)
   1ae62:	9408      	str	r4, [sp, #32]
   1ae64:	2201      	movs	r2, #1
   1ae66:	ee18 0a90 	vmov	r0, s17
   1ae6a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1ae6e:	f000 fde9 	bl	1ba44 <__aeabi_f2d>
   1ae72:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ae76:	ee18 0a10 	vmov	r0, s16
   1ae7a:	f000 fde3 	bl	1ba44 <__aeabi_f2d>
   1ae7e:	f995 4000 	ldrsb.w	r4, [r5]
   1ae82:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae86:	2200      	movs	r2, #0
   1ae88:	2300      	movs	r3, #0
   1ae8a:	2c00      	cmp	r4, #0
   1ae8c:	d19f      	bne.n	1adce <powf+0x25e>
   1ae8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae92:	e713      	b.n	1acbc <powf+0x14c>
   1ae94:	00024b7c 	.word	0x00024b7c

0001ae98 <sqrtf>:
   1ae98:	b510      	push	{r4, lr}
   1ae9a:	ed2d 8b02 	vpush	{d8}
   1ae9e:	b08a      	sub	sp, #40	; 0x28
   1aea0:	eeb0 8a40 	vmov.f32	s16, s0
   1aea4:	f000 fb46 	bl	1b534 <__ieee754_sqrtf>
   1aea8:	4b24      	ldr	r3, [pc, #144]	; (1af3c <sqrtf+0xa4>)
   1aeaa:	f993 4000 	ldrsb.w	r4, [r3]
   1aeae:	1c63      	adds	r3, r4, #1
   1aeb0:	d009      	beq.n	1aec6 <sqrtf+0x2e>
   1aeb2:	eeb4 8a48 	vcmp.f32	s16, s16
   1aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aeba:	d604      	bvs.n	1aec6 <sqrtf+0x2e>
   1aebc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1aec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aec4:	d403      	bmi.n	1aece <sqrtf+0x36>
   1aec6:	b00a      	add	sp, #40	; 0x28
   1aec8:	ecbd 8b02 	vpop	{d8}
   1aecc:	bd10      	pop	{r4, pc}
   1aece:	2301      	movs	r3, #1
   1aed0:	4a1b      	ldr	r2, [pc, #108]	; (1af40 <sqrtf+0xa8>)
   1aed2:	9300      	str	r3, [sp, #0]
   1aed4:	ee18 0a10 	vmov	r0, s16
   1aed8:	2300      	movs	r3, #0
   1aeda:	9201      	str	r2, [sp, #4]
   1aedc:	9308      	str	r3, [sp, #32]
   1aede:	f000 fdb1 	bl	1ba44 <__aeabi_f2d>
   1aee2:	2200      	movs	r2, #0
   1aee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1aee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aeec:	2300      	movs	r3, #0
   1aeee:	b1bc      	cbz	r4, 1af20 <sqrtf+0x88>
   1aef0:	4610      	mov	r0, r2
   1aef2:	4619      	mov	r1, r3
   1aef4:	f000 ff24 	bl	1bd40 <__aeabi_ddiv>
   1aef8:	2c02      	cmp	r4, #2
   1aefa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aefe:	d111      	bne.n	1af24 <sqrtf+0x8c>
   1af00:	f002 fbc8 	bl	1d694 <__errno>
   1af04:	2321      	movs	r3, #33	; 0x21
   1af06:	6003      	str	r3, [r0, #0]
   1af08:	9b08      	ldr	r3, [sp, #32]
   1af0a:	b98b      	cbnz	r3, 1af30 <sqrtf+0x98>
   1af0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1af10:	f001 f8ce 	bl	1c0b0 <__aeabi_d2f>
   1af14:	ee00 0a10 	vmov	s0, r0
   1af18:	b00a      	add	sp, #40	; 0x28
   1af1a:	ecbd 8b02 	vpop	{d8}
   1af1e:	bd10      	pop	{r4, pc}
   1af20:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1af24:	4668      	mov	r0, sp
   1af26:	f000 fb09 	bl	1b53c <matherr>
   1af2a:	2800      	cmp	r0, #0
   1af2c:	d1ec      	bne.n	1af08 <sqrtf+0x70>
   1af2e:	e7e7      	b.n	1af00 <sqrtf+0x68>
   1af30:	f002 fbb0 	bl	1d694 <__errno>
   1af34:	9b08      	ldr	r3, [sp, #32]
   1af36:	6003      	str	r3, [r0, #0]
   1af38:	e7e8      	b.n	1af0c <sqrtf+0x74>
   1af3a:	bf00      	nop
   1af3c:	200000f4 	.word	0x200000f4
   1af40:	00024b84 	.word	0x00024b84

0001af44 <__ieee754_powf>:
   1af44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af48:	ed2d 8b02 	vpush	{d8}
   1af4c:	b082      	sub	sp, #8
   1af4e:	edcd 0a00 	vstr	s1, [sp]
   1af52:	9c00      	ldr	r4, [sp, #0]
   1af54:	ed8d 0a01 	vstr	s0, [sp, #4]
   1af58:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1af5c:	d014      	beq.n	1af88 <__ieee754_powf+0x44>
   1af5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1af62:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1af66:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1af6a:	dd07      	ble.n	1af7c <__ieee754_powf+0x38>
   1af6c:	4858      	ldr	r0, [pc, #352]	; (1b0d0 <__ieee754_powf+0x18c>)
   1af6e:	b002      	add	sp, #8
   1af70:	ecbd 8b02 	vpop	{d8}
   1af74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af78:	f000 bb86 	b.w	1b688 <nanf>
   1af7c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1af80:	dd09      	ble.n	1af96 <__ieee754_powf+0x52>
   1af82:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1af86:	d1f1      	bne.n	1af6c <__ieee754_powf+0x28>
   1af88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1af8c:	b002      	add	sp, #8
   1af8e:	ecbd 8b02 	vpop	{d8}
   1af92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1af96:	f1b8 0f00 	cmp.w	r8, #0
   1af9a:	db4d      	blt.n	1b038 <__ieee754_powf+0xf4>
   1af9c:	f04f 0a00 	mov.w	sl, #0
   1afa0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1afa4:	d03f      	beq.n	1b026 <__ieee754_powf+0xe2>
   1afa6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1afaa:	d058      	beq.n	1b05e <__ieee754_powf+0x11a>
   1afac:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1afb0:	d06e      	beq.n	1b090 <__ieee754_powf+0x14c>
   1afb2:	9d01      	ldr	r5, [sp, #4]
   1afb4:	f8dd 9000 	ldr.w	r9, [sp]
   1afb8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1afbc:	ee00 5a10 	vmov	s0, r5
   1afc0:	d01c      	beq.n	1affc <__ieee754_powf+0xb8>
   1afc2:	f000 fb4f 	bl	1b664 <fabsf>
   1afc6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1afca:	d04d      	beq.n	1b068 <__ieee754_powf+0x124>
   1afcc:	2f00      	cmp	r7, #0
   1afce:	d04b      	beq.n	1b068 <__ieee754_powf+0x124>
   1afd0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1afd4:	d048      	beq.n	1b068 <__ieee754_powf+0x124>
   1afd6:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1afda:	3b01      	subs	r3, #1
   1afdc:	ea5a 0203 	orrs.w	r2, sl, r3
   1afe0:	d06e      	beq.n	1b0c0 <__ieee754_powf+0x17c>
   1afe2:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1afe6:	dd7b      	ble.n	1b0e0 <__ieee754_powf+0x19c>
   1afe8:	4a3a      	ldr	r2, [pc, #232]	; (1b0d4 <__ieee754_powf+0x190>)
   1afea:	4297      	cmp	r7, r2
   1afec:	f300 81c8 	bgt.w	1b380 <__ieee754_powf+0x43c>
   1aff0:	2c00      	cmp	r4, #0
   1aff2:	f2c0 81cb 	blt.w	1b38c <__ieee754_powf+0x448>
   1aff6:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1b0d8 <__ieee754_powf+0x194>
   1affa:	e7c7      	b.n	1af8c <__ieee754_powf+0x48>
   1affc:	f1b8 0f00 	cmp.w	r8, #0
   1b000:	da4b      	bge.n	1b09a <__ieee754_powf+0x156>
   1b002:	f000 fb2f 	bl	1b664 <fabsf>
   1b006:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b00a:	d001      	beq.n	1b010 <__ieee754_powf+0xcc>
   1b00c:	2f00      	cmp	r7, #0
   1b00e:	d1df      	bne.n	1afd0 <__ieee754_powf+0x8c>
   1b010:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1b014:	ea57 030a 	orrs.w	r3, r7, sl
   1b018:	d04d      	beq.n	1b0b6 <__ieee754_powf+0x172>
   1b01a:	f1ba 0f01 	cmp.w	sl, #1
   1b01e:	d1b5      	bne.n	1af8c <__ieee754_powf+0x48>
   1b020:	eeb1 0a40 	vneg.f32	s0, s0
   1b024:	e7b2      	b.n	1af8c <__ieee754_powf+0x48>
   1b026:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b02a:	d0ad      	beq.n	1af88 <__ieee754_powf+0x44>
   1b02c:	dd29      	ble.n	1b082 <__ieee754_powf+0x13e>
   1b02e:	2c00      	cmp	r4, #0
   1b030:	dbe1      	blt.n	1aff6 <__ieee754_powf+0xb2>
   1b032:	ed9d 0a00 	vldr	s0, [sp]
   1b036:	e7a9      	b.n	1af8c <__ieee754_powf+0x48>
   1b038:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1b03c:	da1e      	bge.n	1b07c <__ieee754_powf+0x138>
   1b03e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b042:	db09      	blt.n	1b058 <__ieee754_powf+0x114>
   1b044:	15f3      	asrs	r3, r6, #23
   1b046:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1b04a:	fa46 f203 	asr.w	r2, r6, r3
   1b04e:	fa02 f303 	lsl.w	r3, r2, r3
   1b052:	429e      	cmp	r6, r3
   1b054:	f000 818f 	beq.w	1b376 <__ieee754_powf+0x432>
   1b058:	f04f 0a00 	mov.w	sl, #0
   1b05c:	e7a3      	b.n	1afa6 <__ieee754_powf+0x62>
   1b05e:	2c00      	cmp	r4, #0
   1b060:	db22      	blt.n	1b0a8 <__ieee754_powf+0x164>
   1b062:	ed9d 0a01 	vldr	s0, [sp, #4]
   1b066:	e791      	b.n	1af8c <__ieee754_powf+0x48>
   1b068:	2c00      	cmp	r4, #0
   1b06a:	bfbc      	itt	lt
   1b06c:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1b070:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1b074:	f1b8 0f00 	cmp.w	r8, #0
   1b078:	da88      	bge.n	1af8c <__ieee754_powf+0x48>
   1b07a:	e7c9      	b.n	1b010 <__ieee754_powf+0xcc>
   1b07c:	f04f 0a02 	mov.w	sl, #2
   1b080:	e78e      	b.n	1afa0 <__ieee754_powf+0x5c>
   1b082:	2c00      	cmp	r4, #0
   1b084:	dab7      	bge.n	1aff6 <__ieee754_powf+0xb2>
   1b086:	eddd 7a00 	vldr	s15, [sp]
   1b08a:	eeb1 0a67 	vneg.f32	s0, s15
   1b08e:	e77d      	b.n	1af8c <__ieee754_powf+0x48>
   1b090:	eddd 7a01 	vldr	s15, [sp, #4]
   1b094:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1b098:	e778      	b.n	1af8c <__ieee754_powf+0x48>
   1b09a:	b002      	add	sp, #8
   1b09c:	ecbd 8b02 	vpop	{d8}
   1b0a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b0a4:	f000 ba46 	b.w	1b534 <__ieee754_sqrtf>
   1b0a8:	ed9d 7a01 	vldr	s14, [sp, #4]
   1b0ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b0b0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1b0b4:	e76a      	b.n	1af8c <__ieee754_powf+0x48>
   1b0b6:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b0ba:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b0be:	e765      	b.n	1af8c <__ieee754_powf+0x48>
   1b0c0:	ee07 5a90 	vmov	s15, r5
   1b0c4:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1b0c8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b0cc:	e75e      	b.n	1af8c <__ieee754_powf+0x48>
   1b0ce:	bf00      	nop
   1b0d0:	00024618 	.word	0x00024618
   1b0d4:	3f7ffff7 	.word	0x3f7ffff7
   1b0d8:	00000000 	.word	0x00000000
   1b0dc:	4b800000 	.word	0x4b800000
   1b0e0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1b0e4:	f280 815f 	bge.w	1b3a6 <__ieee754_powf+0x462>
   1b0e8:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1b0dc <__ieee754_powf+0x198>
   1b0ec:	ee60 7a27 	vmul.f32	s15, s0, s15
   1b0f0:	f06f 0217 	mvn.w	r2, #23
   1b0f4:	ee17 7a90 	vmov	r7, s15
   1b0f8:	48ee      	ldr	r0, [pc, #952]	; (1b4b4 <__ieee754_powf+0x570>)
   1b0fa:	15f9      	asrs	r1, r7, #23
   1b0fc:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1b100:	397f      	subs	r1, #127	; 0x7f
   1b102:	4287      	cmp	r7, r0
   1b104:	4411      	add	r1, r2
   1b106:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1b10a:	f340 8144 	ble.w	1b396 <__ieee754_powf+0x452>
   1b10e:	48ea      	ldr	r0, [pc, #936]	; (1b4b8 <__ieee754_powf+0x574>)
   1b110:	4287      	cmp	r7, r0
   1b112:	f340 8191 	ble.w	1b438 <__ieee754_powf+0x4f4>
   1b116:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b4bc <__ieee754_powf+0x578>
   1b11a:	3101      	adds	r1, #1
   1b11c:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1b120:	eef0 3a64 	vmov.f32	s7, s9
   1b124:	2500      	movs	r5, #0
   1b126:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b12a:	ee06 2a90 	vmov	s13, r2
   1b12e:	ee76 7a86 	vadd.f32	s15, s13, s12
   1b132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b136:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1b13a:	1052      	asrs	r2, r2, #1
   1b13c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1b140:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1b144:	442a      	add	r2, r5
   1b146:	48de      	ldr	r0, [pc, #888]	; (1b4c0 <__ieee754_powf+0x57c>)
   1b148:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1b14c:	ee07 2a90 	vmov	s15, r2
   1b150:	ee27 4a08 	vmul.f32	s8, s14, s16
   1b154:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1b158:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b4c4 <__ieee754_powf+0x580>
   1b15c:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b4c8 <__ieee754_powf+0x584>
   1b160:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b4cc <__ieee754_powf+0x588>
   1b164:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b4d0 <__ieee754_powf+0x58c>
   1b168:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b4d4 <__ieee754_powf+0x590>
   1b16c:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b4d8 <__ieee754_powf+0x594>
   1b170:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b4dc <__ieee754_powf+0x598>
   1b174:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b4e0 <__ieee754_powf+0x59c>
   1b178:	ee24 6a04 	vmul.f32	s12, s8, s8
   1b17c:	ee14 2a10 	vmov	r2, s8
   1b180:	eea6 0a28 	vfma.f32	s0, s12, s17
   1b184:	4002      	ands	r2, r0
   1b186:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1b18a:	eeb0 5a61 	vmov.f32	s10, s3
   1b18e:	ee05 2a90 	vmov	s11, r2
   1b192:	eea6 5a00 	vfma.f32	s10, s12, s0
   1b196:	eef1 1a65 	vneg.f32	s3, s11
   1b19a:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1b19e:	eef0 7a60 	vmov.f32	s15, s1
   1b1a2:	eee6 7a05 	vfma.f32	s15, s12, s10
   1b1a6:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1b1aa:	eeb0 5a41 	vmov.f32	s10, s2
   1b1ae:	eea6 5a27 	vfma.f32	s10, s12, s15
   1b1b2:	ee67 6a08 	vmul.f32	s13, s14, s16
   1b1b6:	eeb0 7a42 	vmov.f32	s14, s4
   1b1ba:	eea6 7a05 	vfma.f32	s14, s12, s10
   1b1be:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b1c2:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b1c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b1ca:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b1ce:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b1d2:	eeb0 7a45 	vmov.f32	s14, s10
   1b1d6:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b1da:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b4e4 <__ieee754_powf+0x5a0>
   1b1de:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b1e2:	ee07 1a10 	vmov	s14, r1
   1b1e6:	ee16 2a10 	vmov	r2, s12
   1b1ea:	4002      	ands	r2, r0
   1b1ec:	ee06 2a10 	vmov	s12, r2
   1b1f0:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b1f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b1f8:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b1fc:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b200:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b204:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b208:	eef0 6a67 	vmov.f32	s13, s15
   1b20c:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b210:	ee16 2a90 	vmov	r2, s13
   1b214:	4002      	ands	r2, r0
   1b216:	ee06 2a90 	vmov	s13, r2
   1b21a:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b21e:	ee05 2a90 	vmov	s11, r2
   1b222:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b226:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b22a:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b22e:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b232:	eef0 6a67 	vmov.f32	s13, s15
   1b236:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b23a:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b23e:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b242:	ee16 2a90 	vmov	r2, s13
   1b246:	4002      	ands	r2, r0
   1b248:	ee06 2a90 	vmov	s13, r2
   1b24c:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b250:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b254:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b258:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b25c:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b260:	f024 040f 	bic.w	r4, r4, #15
   1b264:	ee07 9a10 	vmov	s14, r9
   1b268:	ee06 4a10 	vmov	s12, r4
   1b26c:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b270:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b274:	ee07 4a10 	vmov	s14, r4
   1b278:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b27c:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b280:	ea5a 0303 	orrs.w	r3, sl, r3
   1b284:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b288:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b28c:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b290:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b294:	ee16 2a90 	vmov	r2, s13
   1b298:	bf14      	ite	ne
   1b29a:	eeb0 8a46 	vmovne.f32	s16, s12
   1b29e:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b2a2:	2a00      	cmp	r2, #0
   1b2a4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b2a8:	f340 80b3 	ble.w	1b412 <__ieee754_powf+0x4ce>
   1b2ac:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b2b0:	f300 8086 	bgt.w	1b3c0 <__ieee754_powf+0x47c>
   1b2b4:	d079      	beq.n	1b3aa <__ieee754_powf+0x466>
   1b2b6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b2ba:	f300 8088 	bgt.w	1b3ce <__ieee754_powf+0x48a>
   1b2be:	2100      	movs	r1, #0
   1b2c0:	4608      	mov	r0, r1
   1b2c2:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b2c6:	f023 030f 	bic.w	r3, r3, #15
   1b2ca:	ee06 3a10 	vmov	s12, r3
   1b2ce:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b4e8 <__ieee754_powf+0x5a4>
   1b2d2:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b4ec <__ieee754_powf+0x5a8>
   1b2d6:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b4f0 <__ieee754_powf+0x5ac>
   1b2da:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b4f4 <__ieee754_powf+0x5b0>
   1b2de:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b4f8 <__ieee754_powf+0x5b4>
   1b2e2:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b4fc <__ieee754_powf+0x5b8>
   1b2e6:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b500 <__ieee754_powf+0x5bc>
   1b2ea:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b504 <__ieee754_powf+0x5c0>
   1b2ee:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b2f2:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b2f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b2fa:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b2fe:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b302:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b306:	eef0 7a47 	vmov.f32	s15, s14
   1b30a:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b30e:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b312:	eef0 1a47 	vmov.f32	s3, s14
   1b316:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b31a:	eeb0 6a63 	vmov.f32	s12, s7
   1b31e:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b322:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b326:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b32a:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b32e:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b332:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b336:	eeb0 6a45 	vmov.f32	s12, s10
   1b33a:	eeb0 5a47 	vmov.f32	s10, s14
   1b33e:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b342:	eef0 6a45 	vmov.f32	s13, s10
   1b346:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b34a:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b34e:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b352:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b356:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b35a:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b35e:	ee10 3a10 	vmov	r3, s0
   1b362:	440b      	add	r3, r1
   1b364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b368:	f2c0 80a0 	blt.w	1b4ac <__ieee754_powf+0x568>
   1b36c:	ee00 3a10 	vmov	s0, r3
   1b370:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b374:	e60a      	b.n	1af8c <__ieee754_powf+0x48>
   1b376:	f002 0201 	and.w	r2, r2, #1
   1b37a:	f1c2 0a02 	rsb	sl, r2, #2
   1b37e:	e612      	b.n	1afa6 <__ieee754_powf+0x62>
   1b380:	4a61      	ldr	r2, [pc, #388]	; (1b508 <__ieee754_powf+0x5c4>)
   1b382:	4297      	cmp	r7, r2
   1b384:	dd61      	ble.n	1b44a <__ieee754_powf+0x506>
   1b386:	2c00      	cmp	r4, #0
   1b388:	f77f ae35 	ble.w	1aff6 <__ieee754_powf+0xb2>
   1b38c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b50c <__ieee754_powf+0x5c8>
   1b390:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b394:	e5fa      	b.n	1af8c <__ieee754_powf+0x48>
   1b396:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b4bc <__ieee754_powf+0x578>
   1b39a:	2500      	movs	r5, #0
   1b39c:	eef0 3a64 	vmov.f32	s7, s9
   1b3a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b3a4:	e6c1      	b.n	1b12a <__ieee754_powf+0x1e6>
   1b3a6:	2200      	movs	r2, #0
   1b3a8:	e6a6      	b.n	1b0f8 <__ieee754_powf+0x1b4>
   1b3aa:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b510 <__ieee754_powf+0x5cc>
   1b3ae:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b3b2:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b3b6:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b3be:	dd06      	ble.n	1b3ce <__ieee754_powf+0x48a>
   1b3c0:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b50c <__ieee754_powf+0x5c8>
   1b3c4:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b3c8:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b3cc:	e5de      	b.n	1af8c <__ieee754_powf+0x48>
   1b3ce:	15db      	asrs	r3, r3, #23
   1b3d0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b3d4:	3b7e      	subs	r3, #126	; 0x7e
   1b3d6:	fa41 f303 	asr.w	r3, r1, r3
   1b3da:	4413      	add	r3, r2
   1b3dc:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b3e0:	4c4c      	ldr	r4, [pc, #304]	; (1b514 <__ieee754_powf+0x5d0>)
   1b3e2:	397f      	subs	r1, #127	; 0x7f
   1b3e4:	410c      	asrs	r4, r1
   1b3e6:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b3ea:	ea23 0304 	bic.w	r3, r3, r4
   1b3ee:	ee06 3a90 	vmov	s13, r3
   1b3f2:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b3f6:	f1c1 0117 	rsb	r1, r1, #23
   1b3fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b3fe:	4108      	asrs	r0, r1
   1b400:	2a00      	cmp	r2, #0
   1b402:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b406:	bfb8      	it	lt
   1b408:	4240      	neglt	r0, r0
   1b40a:	05c1      	lsls	r1, r0, #23
   1b40c:	ee16 2a90 	vmov	r2, s13
   1b410:	e757      	b.n	1b2c2 <__ieee754_powf+0x37e>
   1b412:	4941      	ldr	r1, [pc, #260]	; (1b518 <__ieee754_powf+0x5d4>)
   1b414:	428b      	cmp	r3, r1
   1b416:	dc08      	bgt.n	1b42a <__ieee754_powf+0x4e6>
   1b418:	f47f af4d 	bne.w	1b2b6 <__ieee754_powf+0x372>
   1b41c:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b420:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b428:	d8d1      	bhi.n	1b3ce <__ieee754_powf+0x48a>
   1b42a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b51c <__ieee754_powf+0x5d8>
   1b42e:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b432:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b436:	e5a9      	b.n	1af8c <__ieee754_powf+0x48>
   1b438:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b520 <__ieee754_powf+0x5dc>
   1b43c:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b524 <__ieee754_powf+0x5e0>
   1b440:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b444:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b448:	e66f      	b.n	1b12a <__ieee754_powf+0x1e6>
   1b44a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b44e:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b452:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b4d0 <__ieee754_powf+0x58c>
   1b456:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b528 <__ieee754_powf+0x5e4>
   1b45a:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b52c <__ieee754_powf+0x5e8>
   1b45e:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b530 <__ieee754_powf+0x5ec>
   1b462:	eeb1 6a40 	vneg.f32	s12, s0
   1b466:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b46a:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b46e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b472:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b476:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b47a:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b47e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b482:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b486:	eef0 6a67 	vmov.f32	s13, s15
   1b48a:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b48e:	ee16 2a90 	vmov	r2, s13
   1b492:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b496:	f022 020f 	bic.w	r2, r2, #15
   1b49a:	ee07 2a10 	vmov	s14, r2
   1b49e:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b4a2:	ee06 2a90 	vmov	s13, r2
   1b4a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b4aa:	e6d7      	b.n	1b25c <__ieee754_powf+0x318>
   1b4ac:	f000 f8f2 	bl	1b694 <scalbnf>
   1b4b0:	e75e      	b.n	1b370 <__ieee754_powf+0x42c>
   1b4b2:	bf00      	nop
   1b4b4:	001cc471 	.word	0x001cc471
   1b4b8:	005db3d6 	.word	0x005db3d6
   1b4bc:	00000000 	.word	0x00000000
   1b4c0:	fffff000 	.word	0xfffff000
   1b4c4:	3e53f142 	.word	0x3e53f142
   1b4c8:	3e6c3255 	.word	0x3e6c3255
   1b4cc:	3e8ba305 	.word	0x3e8ba305
   1b4d0:	3eaaaaab 	.word	0x3eaaaaab
   1b4d4:	3edb6db7 	.word	0x3edb6db7
   1b4d8:	3f19999a 	.word	0x3f19999a
   1b4dc:	3f76384f 	.word	0x3f76384f
   1b4e0:	369dc3a0 	.word	0x369dc3a0
   1b4e4:	3f763800 	.word	0x3f763800
   1b4e8:	35bfbe8c 	.word	0x35bfbe8c
   1b4ec:	3f317218 	.word	0x3f317218
   1b4f0:	3f317200 	.word	0x3f317200
   1b4f4:	b5ddea0e 	.word	0xb5ddea0e
   1b4f8:	3331bb4c 	.word	0x3331bb4c
   1b4fc:	388ab355 	.word	0x388ab355
   1b500:	bb360b61 	.word	0xbb360b61
   1b504:	3e2aaaab 	.word	0x3e2aaaab
   1b508:	3f800007 	.word	0x3f800007
   1b50c:	7149f2ca 	.word	0x7149f2ca
   1b510:	3338aa3c 	.word	0x3338aa3c
   1b514:	007fffff 	.word	0x007fffff
   1b518:	43160000 	.word	0x43160000
   1b51c:	0da24260 	.word	0x0da24260
   1b520:	3f15c000 	.word	0x3f15c000
   1b524:	35d1cfdc 	.word	0x35d1cfdc
   1b528:	3fb8aa3b 	.word	0x3fb8aa3b
   1b52c:	36eca570 	.word	0x36eca570
   1b530:	3fb8aa00 	.word	0x3fb8aa00

0001b534 <__ieee754_sqrtf>:
   1b534:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b538:	4770      	bx	lr
   1b53a:	bf00      	nop

0001b53c <matherr>:
   1b53c:	2000      	movs	r0, #0
   1b53e:	4770      	bx	lr

0001b540 <rint>:
   1b540:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b542:	ec53 2b10 	vmov	r2, r3, d0
   1b546:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b54a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b54e:	2813      	cmp	r0, #19
   1b550:	b083      	sub	sp, #12
   1b552:	4619      	mov	r1, r3
   1b554:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b558:	ee10 5a10 	vmov	r5, s0
   1b55c:	dc2f      	bgt.n	1b5be <rint+0x7e>
   1b55e:	2800      	cmp	r0, #0
   1b560:	db49      	blt.n	1b5f6 <rint+0xb6>
   1b562:	4e3e      	ldr	r6, [pc, #248]	; (1b65c <rint+0x11c>)
   1b564:	4106      	asrs	r6, r0
   1b566:	ea03 0706 	and.w	r7, r3, r6
   1b56a:	4317      	orrs	r7, r2
   1b56c:	d02c      	beq.n	1b5c8 <rint+0x88>
   1b56e:	0876      	lsrs	r6, r6, #1
   1b570:	4033      	ands	r3, r6
   1b572:	431d      	orrs	r5, r3
   1b574:	d00c      	beq.n	1b590 <rint+0x50>
   1b576:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b57a:	2813      	cmp	r0, #19
   1b57c:	ea21 0606 	bic.w	r6, r1, r6
   1b580:	fa43 f100 	asr.w	r1, r3, r0
   1b584:	ea41 0106 	orr.w	r1, r1, r6
   1b588:	bf0c      	ite	eq
   1b58a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b58e:	2500      	movne	r5, #0
   1b590:	4833      	ldr	r0, [pc, #204]	; (1b660 <rint+0x120>)
   1b592:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b596:	462a      	mov	r2, r5
   1b598:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b59c:	4610      	mov	r0, r2
   1b59e:	462b      	mov	r3, r5
   1b5a0:	4622      	mov	r2, r4
   1b5a2:	f000 f8f1 	bl	1b788 <__adddf3>
   1b5a6:	e9cd 0100 	strd	r0, r1, [sp]
   1b5aa:	4622      	mov	r2, r4
   1b5ac:	462b      	mov	r3, r5
   1b5ae:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b5b2:	f000 f8e7 	bl	1b784 <__aeabi_dsub>
   1b5b6:	ec41 0b10 	vmov	d0, r0, r1
   1b5ba:	b003      	add	sp, #12
   1b5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b5be:	2833      	cmp	r0, #51	; 0x33
   1b5c0:	dd06      	ble.n	1b5d0 <rint+0x90>
   1b5c2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b5c6:	d040      	beq.n	1b64a <rint+0x10a>
   1b5c8:	ec43 2b10 	vmov	d0, r2, r3
   1b5cc:	b003      	add	sp, #12
   1b5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b5d0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b5d4:	f04f 30ff 	mov.w	r0, #4294967295
   1b5d8:	40f0      	lsrs	r0, r6
   1b5da:	4202      	tst	r2, r0
   1b5dc:	d0f4      	beq.n	1b5c8 <rint+0x88>
   1b5de:	0840      	lsrs	r0, r0, #1
   1b5e0:	4202      	tst	r2, r0
   1b5e2:	d0d5      	beq.n	1b590 <rint+0x50>
   1b5e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b5e8:	ea25 0000 	bic.w	r0, r5, r0
   1b5ec:	fa43 f606 	asr.w	r6, r3, r6
   1b5f0:	ea46 0500 	orr.w	r5, r6, r0
   1b5f4:	e7cc      	b.n	1b590 <rint+0x50>
   1b5f6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b5fa:	4310      	orrs	r0, r2
   1b5fc:	d0e4      	beq.n	1b5c8 <rint+0x88>
   1b5fe:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b602:	4310      	orrs	r0, r2
   1b604:	4247      	negs	r7, r0
   1b606:	4307      	orrs	r7, r0
   1b608:	4d15      	ldr	r5, [pc, #84]	; (1b660 <rint+0x120>)
   1b60a:	0c5e      	lsrs	r6, r3, #17
   1b60c:	0b3f      	lsrs	r7, r7, #12
   1b60e:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b612:	0476      	lsls	r6, r6, #17
   1b614:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b618:	ea43 0106 	orr.w	r1, r3, r6
   1b61c:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b620:	ee10 0a10 	vmov	r0, s0
   1b624:	4632      	mov	r2, r6
   1b626:	463b      	mov	r3, r7
   1b628:	f000 f8ae 	bl	1b788 <__adddf3>
   1b62c:	e9cd 0100 	strd	r0, r1, [sp]
   1b630:	463b      	mov	r3, r7
   1b632:	4632      	mov	r2, r6
   1b634:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b638:	f000 f8a4 	bl	1b784 <__aeabi_dsub>
   1b63c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b640:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b644:	ec41 0b10 	vmov	d0, r0, r1
   1b648:	e7c0      	b.n	1b5cc <rint+0x8c>
   1b64a:	ee10 0a10 	vmov	r0, s0
   1b64e:	4619      	mov	r1, r3
   1b650:	f000 f89a 	bl	1b788 <__adddf3>
   1b654:	ec41 0b10 	vmov	d0, r0, r1
   1b658:	e7b8      	b.n	1b5cc <rint+0x8c>
   1b65a:	bf00      	nop
   1b65c:	000fffff 	.word	0x000fffff
   1b660:	00024b90 	.word	0x00024b90

0001b664 <fabsf>:
   1b664:	ee10 3a10 	vmov	r3, s0
   1b668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b66c:	ee00 3a10 	vmov	s0, r3
   1b670:	4770      	bx	lr
   1b672:	bf00      	nop

0001b674 <finitef>:
   1b674:	ee10 3a10 	vmov	r3, s0
   1b678:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b67c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b680:	bfac      	ite	ge
   1b682:	2000      	movge	r0, #0
   1b684:	2001      	movlt	r0, #1
   1b686:	4770      	bx	lr

0001b688 <nanf>:
   1b688:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b690 <nanf+0x8>
   1b68c:	4770      	bx	lr
   1b68e:	bf00      	nop
   1b690:	7fc00000 	.word	0x7fc00000

0001b694 <scalbnf>:
   1b694:	b508      	push	{r3, lr}
   1b696:	ee10 3a10 	vmov	r3, s0
   1b69a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b69e:	ed2d 8b02 	vpush	{d8}
   1b6a2:	d011      	beq.n	1b6c8 <scalbnf+0x34>
   1b6a4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b6a8:	d211      	bcs.n	1b6ce <scalbnf+0x3a>
   1b6aa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b6ae:	d313      	bcc.n	1b6d8 <scalbnf+0x44>
   1b6b0:	0dd2      	lsrs	r2, r2, #23
   1b6b2:	4402      	add	r2, r0
   1b6b4:	2afe      	cmp	r2, #254	; 0xfe
   1b6b6:	dc2e      	bgt.n	1b716 <scalbnf+0x82>
   1b6b8:	2a00      	cmp	r2, #0
   1b6ba:	dd1a      	ble.n	1b6f2 <scalbnf+0x5e>
   1b6bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b6c0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b6c4:	ee00 3a10 	vmov	s0, r3
   1b6c8:	ecbd 8b02 	vpop	{d8}
   1b6cc:	bd08      	pop	{r3, pc}
   1b6ce:	ecbd 8b02 	vpop	{d8}
   1b6d2:	ee30 0a00 	vadd.f32	s0, s0, s0
   1b6d6:	bd08      	pop	{r3, pc}
   1b6d8:	4b1d      	ldr	r3, [pc, #116]	; (1b750 <scalbnf+0xbc>)
   1b6da:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1b754 <scalbnf+0xc0>
   1b6de:	4298      	cmp	r0, r3
   1b6e0:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b6e4:	db22      	blt.n	1b72c <scalbnf+0x98>
   1b6e6:	ee10 3a10 	vmov	r3, s0
   1b6ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1b6ee:	3a19      	subs	r2, #25
   1b6f0:	e7df      	b.n	1b6b2 <scalbnf+0x1e>
   1b6f2:	f112 0f16 	cmn.w	r2, #22
   1b6f6:	da1e      	bge.n	1b736 <scalbnf+0xa2>
   1b6f8:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b6fc:	4298      	cmp	r0, r3
   1b6fe:	dc0a      	bgt.n	1b716 <scalbnf+0x82>
   1b700:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1b758 <scalbnf+0xc4>
   1b704:	eef0 0a40 	vmov.f32	s1, s0
   1b708:	eeb0 0a48 	vmov.f32	s0, s16
   1b70c:	f000 f82a 	bl	1b764 <copysignf>
   1b710:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b714:	e7d8      	b.n	1b6c8 <scalbnf+0x34>
   1b716:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1b75c <scalbnf+0xc8>
   1b71a:	eef0 0a40 	vmov.f32	s1, s0
   1b71e:	eeb0 0a48 	vmov.f32	s0, s16
   1b722:	f000 f81f 	bl	1b764 <copysignf>
   1b726:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b72a:	e7cd      	b.n	1b6c8 <scalbnf+0x34>
   1b72c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1b758 <scalbnf+0xc4>
   1b730:	ee20 0a20 	vmul.f32	s0, s0, s1
   1b734:	e7c8      	b.n	1b6c8 <scalbnf+0x34>
   1b736:	3219      	adds	r2, #25
   1b738:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b73c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b740:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b760 <scalbnf+0xcc>
   1b744:	ee00 3a10 	vmov	s0, r3
   1b748:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b74c:	e7bc      	b.n	1b6c8 <scalbnf+0x34>
   1b74e:	bf00      	nop
   1b750:	ffff3cb0 	.word	0xffff3cb0
   1b754:	4c000000 	.word	0x4c000000
   1b758:	0da24260 	.word	0x0da24260
   1b75c:	7149f2ca 	.word	0x7149f2ca
   1b760:	33000000 	.word	0x33000000

0001b764 <copysignf>:
   1b764:	ee10 3a10 	vmov	r3, s0
   1b768:	ee10 2a90 	vmov	r2, s1
   1b76c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b770:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1b774:	4313      	orrs	r3, r2
   1b776:	ee00 3a10 	vmov	s0, r3
   1b77a:	4770      	bx	lr

0001b77c <__aeabi_drsub>:
   1b77c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b780:	e002      	b.n	1b788 <__adddf3>
   1b782:	bf00      	nop

0001b784 <__aeabi_dsub>:
   1b784:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b788 <__adddf3>:
   1b788:	b530      	push	{r4, r5, lr}
   1b78a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b78e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b792:	ea94 0f05 	teq	r4, r5
   1b796:	bf08      	it	eq
   1b798:	ea90 0f02 	teqeq	r0, r2
   1b79c:	bf1f      	itttt	ne
   1b79e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b7a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b7a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b7aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b7ae:	f000 80e2 	beq.w	1b976 <__adddf3+0x1ee>
   1b7b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b7b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b7ba:	bfb8      	it	lt
   1b7bc:	426d      	neglt	r5, r5
   1b7be:	dd0c      	ble.n	1b7da <__adddf3+0x52>
   1b7c0:	442c      	add	r4, r5
   1b7c2:	ea80 0202 	eor.w	r2, r0, r2
   1b7c6:	ea81 0303 	eor.w	r3, r1, r3
   1b7ca:	ea82 0000 	eor.w	r0, r2, r0
   1b7ce:	ea83 0101 	eor.w	r1, r3, r1
   1b7d2:	ea80 0202 	eor.w	r2, r0, r2
   1b7d6:	ea81 0303 	eor.w	r3, r1, r3
   1b7da:	2d36      	cmp	r5, #54	; 0x36
   1b7dc:	bf88      	it	hi
   1b7de:	bd30      	pophi	{r4, r5, pc}
   1b7e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b7e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b7e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b7ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b7f0:	d002      	beq.n	1b7f8 <__adddf3+0x70>
   1b7f2:	4240      	negs	r0, r0
   1b7f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b7f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b7fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b800:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b804:	d002      	beq.n	1b80c <__adddf3+0x84>
   1b806:	4252      	negs	r2, r2
   1b808:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b80c:	ea94 0f05 	teq	r4, r5
   1b810:	f000 80a7 	beq.w	1b962 <__adddf3+0x1da>
   1b814:	f1a4 0401 	sub.w	r4, r4, #1
   1b818:	f1d5 0e20 	rsbs	lr, r5, #32
   1b81c:	db0d      	blt.n	1b83a <__adddf3+0xb2>
   1b81e:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b822:	fa22 f205 	lsr.w	r2, r2, r5
   1b826:	1880      	adds	r0, r0, r2
   1b828:	f141 0100 	adc.w	r1, r1, #0
   1b82c:	fa03 f20e 	lsl.w	r2, r3, lr
   1b830:	1880      	adds	r0, r0, r2
   1b832:	fa43 f305 	asr.w	r3, r3, r5
   1b836:	4159      	adcs	r1, r3
   1b838:	e00e      	b.n	1b858 <__adddf3+0xd0>
   1b83a:	f1a5 0520 	sub.w	r5, r5, #32
   1b83e:	f10e 0e20 	add.w	lr, lr, #32
   1b842:	2a01      	cmp	r2, #1
   1b844:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b848:	bf28      	it	cs
   1b84a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b84e:	fa43 f305 	asr.w	r3, r3, r5
   1b852:	18c0      	adds	r0, r0, r3
   1b854:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b858:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b85c:	d507      	bpl.n	1b86e <__adddf3+0xe6>
   1b85e:	f04f 0e00 	mov.w	lr, #0
   1b862:	f1dc 0c00 	rsbs	ip, ip, #0
   1b866:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b86a:	eb6e 0101 	sbc.w	r1, lr, r1
   1b86e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b872:	d31b      	bcc.n	1b8ac <__adddf3+0x124>
   1b874:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b878:	d30c      	bcc.n	1b894 <__adddf3+0x10c>
   1b87a:	0849      	lsrs	r1, r1, #1
   1b87c:	ea5f 0030 	movs.w	r0, r0, rrx
   1b880:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b884:	f104 0401 	add.w	r4, r4, #1
   1b888:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b88c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b890:	f080 809a 	bcs.w	1b9c8 <__adddf3+0x240>
   1b894:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b898:	bf08      	it	eq
   1b89a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b89e:	f150 0000 	adcs.w	r0, r0, #0
   1b8a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b8a6:	ea41 0105 	orr.w	r1, r1, r5
   1b8aa:	bd30      	pop	{r4, r5, pc}
   1b8ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b8b0:	4140      	adcs	r0, r0
   1b8b2:	eb41 0101 	adc.w	r1, r1, r1
   1b8b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b8ba:	f1a4 0401 	sub.w	r4, r4, #1
   1b8be:	d1e9      	bne.n	1b894 <__adddf3+0x10c>
   1b8c0:	f091 0f00 	teq	r1, #0
   1b8c4:	bf04      	itt	eq
   1b8c6:	4601      	moveq	r1, r0
   1b8c8:	2000      	moveq	r0, #0
   1b8ca:	fab1 f381 	clz	r3, r1
   1b8ce:	bf08      	it	eq
   1b8d0:	3320      	addeq	r3, #32
   1b8d2:	f1a3 030b 	sub.w	r3, r3, #11
   1b8d6:	f1b3 0220 	subs.w	r2, r3, #32
   1b8da:	da0c      	bge.n	1b8f6 <__adddf3+0x16e>
   1b8dc:	320c      	adds	r2, #12
   1b8de:	dd08      	ble.n	1b8f2 <__adddf3+0x16a>
   1b8e0:	f102 0c14 	add.w	ip, r2, #20
   1b8e4:	f1c2 020c 	rsb	r2, r2, #12
   1b8e8:	fa01 f00c 	lsl.w	r0, r1, ip
   1b8ec:	fa21 f102 	lsr.w	r1, r1, r2
   1b8f0:	e00c      	b.n	1b90c <__adddf3+0x184>
   1b8f2:	f102 0214 	add.w	r2, r2, #20
   1b8f6:	bfd8      	it	le
   1b8f8:	f1c2 0c20 	rsble	ip, r2, #32
   1b8fc:	fa01 f102 	lsl.w	r1, r1, r2
   1b900:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b904:	bfdc      	itt	le
   1b906:	ea41 010c 	orrle.w	r1, r1, ip
   1b90a:	4090      	lslle	r0, r2
   1b90c:	1ae4      	subs	r4, r4, r3
   1b90e:	bfa2      	ittt	ge
   1b910:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b914:	4329      	orrge	r1, r5
   1b916:	bd30      	popge	{r4, r5, pc}
   1b918:	ea6f 0404 	mvn.w	r4, r4
   1b91c:	3c1f      	subs	r4, #31
   1b91e:	da1c      	bge.n	1b95a <__adddf3+0x1d2>
   1b920:	340c      	adds	r4, #12
   1b922:	dc0e      	bgt.n	1b942 <__adddf3+0x1ba>
   1b924:	f104 0414 	add.w	r4, r4, #20
   1b928:	f1c4 0220 	rsb	r2, r4, #32
   1b92c:	fa20 f004 	lsr.w	r0, r0, r4
   1b930:	fa01 f302 	lsl.w	r3, r1, r2
   1b934:	ea40 0003 	orr.w	r0, r0, r3
   1b938:	fa21 f304 	lsr.w	r3, r1, r4
   1b93c:	ea45 0103 	orr.w	r1, r5, r3
   1b940:	bd30      	pop	{r4, r5, pc}
   1b942:	f1c4 040c 	rsb	r4, r4, #12
   1b946:	f1c4 0220 	rsb	r2, r4, #32
   1b94a:	fa20 f002 	lsr.w	r0, r0, r2
   1b94e:	fa01 f304 	lsl.w	r3, r1, r4
   1b952:	ea40 0003 	orr.w	r0, r0, r3
   1b956:	4629      	mov	r1, r5
   1b958:	bd30      	pop	{r4, r5, pc}
   1b95a:	fa21 f004 	lsr.w	r0, r1, r4
   1b95e:	4629      	mov	r1, r5
   1b960:	bd30      	pop	{r4, r5, pc}
   1b962:	f094 0f00 	teq	r4, #0
   1b966:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b96a:	bf06      	itte	eq
   1b96c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b970:	3401      	addeq	r4, #1
   1b972:	3d01      	subne	r5, #1
   1b974:	e74e      	b.n	1b814 <__adddf3+0x8c>
   1b976:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b97a:	bf18      	it	ne
   1b97c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b980:	d029      	beq.n	1b9d6 <__adddf3+0x24e>
   1b982:	ea94 0f05 	teq	r4, r5
   1b986:	bf08      	it	eq
   1b988:	ea90 0f02 	teqeq	r0, r2
   1b98c:	d005      	beq.n	1b99a <__adddf3+0x212>
   1b98e:	ea54 0c00 	orrs.w	ip, r4, r0
   1b992:	bf04      	itt	eq
   1b994:	4619      	moveq	r1, r3
   1b996:	4610      	moveq	r0, r2
   1b998:	bd30      	pop	{r4, r5, pc}
   1b99a:	ea91 0f03 	teq	r1, r3
   1b99e:	bf1e      	ittt	ne
   1b9a0:	2100      	movne	r1, #0
   1b9a2:	2000      	movne	r0, #0
   1b9a4:	bd30      	popne	{r4, r5, pc}
   1b9a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b9aa:	d105      	bne.n	1b9b8 <__adddf3+0x230>
   1b9ac:	0040      	lsls	r0, r0, #1
   1b9ae:	4149      	adcs	r1, r1
   1b9b0:	bf28      	it	cs
   1b9b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b9b6:	bd30      	pop	{r4, r5, pc}
   1b9b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b9bc:	bf3c      	itt	cc
   1b9be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b9c2:	bd30      	popcc	{r4, r5, pc}
   1b9c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b9c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b9cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b9d0:	f04f 0000 	mov.w	r0, #0
   1b9d4:	bd30      	pop	{r4, r5, pc}
   1b9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b9da:	bf1a      	itte	ne
   1b9dc:	4619      	movne	r1, r3
   1b9de:	4610      	movne	r0, r2
   1b9e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b9e4:	bf1c      	itt	ne
   1b9e6:	460b      	movne	r3, r1
   1b9e8:	4602      	movne	r2, r0
   1b9ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b9ee:	bf06      	itte	eq
   1b9f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b9f4:	ea91 0f03 	teqeq	r1, r3
   1b9f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b9fc:	bd30      	pop	{r4, r5, pc}
   1b9fe:	bf00      	nop

0001ba00 <__aeabi_ui2d>:
   1ba00:	f090 0f00 	teq	r0, #0
   1ba04:	bf04      	itt	eq
   1ba06:	2100      	moveq	r1, #0
   1ba08:	4770      	bxeq	lr
   1ba0a:	b530      	push	{r4, r5, lr}
   1ba0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1ba10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1ba14:	f04f 0500 	mov.w	r5, #0
   1ba18:	f04f 0100 	mov.w	r1, #0
   1ba1c:	e750      	b.n	1b8c0 <__adddf3+0x138>
   1ba1e:	bf00      	nop

0001ba20 <__aeabi_i2d>:
   1ba20:	f090 0f00 	teq	r0, #0
   1ba24:	bf04      	itt	eq
   1ba26:	2100      	moveq	r1, #0
   1ba28:	4770      	bxeq	lr
   1ba2a:	b530      	push	{r4, r5, lr}
   1ba2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1ba30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1ba34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1ba38:	bf48      	it	mi
   1ba3a:	4240      	negmi	r0, r0
   1ba3c:	f04f 0100 	mov.w	r1, #0
   1ba40:	e73e      	b.n	1b8c0 <__adddf3+0x138>
   1ba42:	bf00      	nop

0001ba44 <__aeabi_f2d>:
   1ba44:	0042      	lsls	r2, r0, #1
   1ba46:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1ba4a:	ea4f 0131 	mov.w	r1, r1, rrx
   1ba4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1ba52:	bf1f      	itttt	ne
   1ba54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1ba58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1ba5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1ba60:	4770      	bxne	lr
   1ba62:	f092 0f00 	teq	r2, #0
   1ba66:	bf14      	ite	ne
   1ba68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1ba6c:	4770      	bxeq	lr
   1ba6e:	b530      	push	{r4, r5, lr}
   1ba70:	f44f 7460 	mov.w	r4, #896	; 0x380
   1ba74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1ba78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ba7c:	e720      	b.n	1b8c0 <__adddf3+0x138>
   1ba7e:	bf00      	nop

0001ba80 <__aeabi_ul2d>:
   1ba80:	ea50 0201 	orrs.w	r2, r0, r1
   1ba84:	bf08      	it	eq
   1ba86:	4770      	bxeq	lr
   1ba88:	b530      	push	{r4, r5, lr}
   1ba8a:	f04f 0500 	mov.w	r5, #0
   1ba8e:	e00a      	b.n	1baa6 <__aeabi_l2d+0x16>

0001ba90 <__aeabi_l2d>:
   1ba90:	ea50 0201 	orrs.w	r2, r0, r1
   1ba94:	bf08      	it	eq
   1ba96:	4770      	bxeq	lr
   1ba98:	b530      	push	{r4, r5, lr}
   1ba9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1ba9e:	d502      	bpl.n	1baa6 <__aeabi_l2d+0x16>
   1baa0:	4240      	negs	r0, r0
   1baa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1baa6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1baaa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1baae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1bab2:	f43f aedc 	beq.w	1b86e <__adddf3+0xe6>
   1bab6:	f04f 0203 	mov.w	r2, #3
   1baba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1babe:	bf18      	it	ne
   1bac0:	3203      	addne	r2, #3
   1bac2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bac6:	bf18      	it	ne
   1bac8:	3203      	addne	r2, #3
   1baca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1bace:	f1c2 0320 	rsb	r3, r2, #32
   1bad2:	fa00 fc03 	lsl.w	ip, r0, r3
   1bad6:	fa20 f002 	lsr.w	r0, r0, r2
   1bada:	fa01 fe03 	lsl.w	lr, r1, r3
   1bade:	ea40 000e 	orr.w	r0, r0, lr
   1bae2:	fa21 f102 	lsr.w	r1, r1, r2
   1bae6:	4414      	add	r4, r2
   1bae8:	e6c1      	b.n	1b86e <__adddf3+0xe6>
   1baea:	bf00      	nop

0001baec <__aeabi_dmul>:
   1baec:	b570      	push	{r4, r5, r6, lr}
   1baee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1baf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1baf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bafa:	bf1d      	ittte	ne
   1bafc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bb00:	ea94 0f0c 	teqne	r4, ip
   1bb04:	ea95 0f0c 	teqne	r5, ip
   1bb08:	f000 f8de 	bleq	1bcc8 <__aeabi_dmul+0x1dc>
   1bb0c:	442c      	add	r4, r5
   1bb0e:	ea81 0603 	eor.w	r6, r1, r3
   1bb12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1bb16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1bb1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1bb1e:	bf18      	it	ne
   1bb20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1bb24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bb28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bb2c:	d038      	beq.n	1bba0 <__aeabi_dmul+0xb4>
   1bb2e:	fba0 ce02 	umull	ip, lr, r0, r2
   1bb32:	f04f 0500 	mov.w	r5, #0
   1bb36:	fbe1 e502 	umlal	lr, r5, r1, r2
   1bb3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1bb3e:	fbe0 e503 	umlal	lr, r5, r0, r3
   1bb42:	f04f 0600 	mov.w	r6, #0
   1bb46:	fbe1 5603 	umlal	r5, r6, r1, r3
   1bb4a:	f09c 0f00 	teq	ip, #0
   1bb4e:	bf18      	it	ne
   1bb50:	f04e 0e01 	orrne.w	lr, lr, #1
   1bb54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1bb58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1bb5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1bb60:	d204      	bcs.n	1bb6c <__aeabi_dmul+0x80>
   1bb62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1bb66:	416d      	adcs	r5, r5
   1bb68:	eb46 0606 	adc.w	r6, r6, r6
   1bb6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1bb70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1bb74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1bb78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1bb7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1bb80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bb84:	bf88      	it	hi
   1bb86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bb8a:	d81e      	bhi.n	1bbca <__aeabi_dmul+0xde>
   1bb8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1bb90:	bf08      	it	eq
   1bb92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1bb96:	f150 0000 	adcs.w	r0, r0, #0
   1bb9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bb9e:	bd70      	pop	{r4, r5, r6, pc}
   1bba0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1bba4:	ea46 0101 	orr.w	r1, r6, r1
   1bba8:	ea40 0002 	orr.w	r0, r0, r2
   1bbac:	ea81 0103 	eor.w	r1, r1, r3
   1bbb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1bbb4:	bfc2      	ittt	gt
   1bbb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bbba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bbbe:	bd70      	popgt	{r4, r5, r6, pc}
   1bbc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bbc4:	f04f 0e00 	mov.w	lr, #0
   1bbc8:	3c01      	subs	r4, #1
   1bbca:	f300 80ab 	bgt.w	1bd24 <__aeabi_dmul+0x238>
   1bbce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1bbd2:	bfde      	ittt	le
   1bbd4:	2000      	movle	r0, #0
   1bbd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1bbda:	bd70      	pople	{r4, r5, r6, pc}
   1bbdc:	f1c4 0400 	rsb	r4, r4, #0
   1bbe0:	3c20      	subs	r4, #32
   1bbe2:	da35      	bge.n	1bc50 <__aeabi_dmul+0x164>
   1bbe4:	340c      	adds	r4, #12
   1bbe6:	dc1b      	bgt.n	1bc20 <__aeabi_dmul+0x134>
   1bbe8:	f104 0414 	add.w	r4, r4, #20
   1bbec:	f1c4 0520 	rsb	r5, r4, #32
   1bbf0:	fa00 f305 	lsl.w	r3, r0, r5
   1bbf4:	fa20 f004 	lsr.w	r0, r0, r4
   1bbf8:	fa01 f205 	lsl.w	r2, r1, r5
   1bbfc:	ea40 0002 	orr.w	r0, r0, r2
   1bc00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1bc04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bc08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bc0c:	fa21 f604 	lsr.w	r6, r1, r4
   1bc10:	eb42 0106 	adc.w	r1, r2, r6
   1bc14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bc18:	bf08      	it	eq
   1bc1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bc1e:	bd70      	pop	{r4, r5, r6, pc}
   1bc20:	f1c4 040c 	rsb	r4, r4, #12
   1bc24:	f1c4 0520 	rsb	r5, r4, #32
   1bc28:	fa00 f304 	lsl.w	r3, r0, r4
   1bc2c:	fa20 f005 	lsr.w	r0, r0, r5
   1bc30:	fa01 f204 	lsl.w	r2, r1, r4
   1bc34:	ea40 0002 	orr.w	r0, r0, r2
   1bc38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bc3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bc40:	f141 0100 	adc.w	r1, r1, #0
   1bc44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bc48:	bf08      	it	eq
   1bc4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bc4e:	bd70      	pop	{r4, r5, r6, pc}
   1bc50:	f1c4 0520 	rsb	r5, r4, #32
   1bc54:	fa00 f205 	lsl.w	r2, r0, r5
   1bc58:	ea4e 0e02 	orr.w	lr, lr, r2
   1bc5c:	fa20 f304 	lsr.w	r3, r0, r4
   1bc60:	fa01 f205 	lsl.w	r2, r1, r5
   1bc64:	ea43 0302 	orr.w	r3, r3, r2
   1bc68:	fa21 f004 	lsr.w	r0, r1, r4
   1bc6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bc70:	fa21 f204 	lsr.w	r2, r1, r4
   1bc74:	ea20 0002 	bic.w	r0, r0, r2
   1bc78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1bc7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bc80:	bf08      	it	eq
   1bc82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bc86:	bd70      	pop	{r4, r5, r6, pc}
   1bc88:	f094 0f00 	teq	r4, #0
   1bc8c:	d10f      	bne.n	1bcae <__aeabi_dmul+0x1c2>
   1bc8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1bc92:	0040      	lsls	r0, r0, #1
   1bc94:	eb41 0101 	adc.w	r1, r1, r1
   1bc98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bc9c:	bf08      	it	eq
   1bc9e:	3c01      	subeq	r4, #1
   1bca0:	d0f7      	beq.n	1bc92 <__aeabi_dmul+0x1a6>
   1bca2:	ea41 0106 	orr.w	r1, r1, r6
   1bca6:	f095 0f00 	teq	r5, #0
   1bcaa:	bf18      	it	ne
   1bcac:	4770      	bxne	lr
   1bcae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1bcb2:	0052      	lsls	r2, r2, #1
   1bcb4:	eb43 0303 	adc.w	r3, r3, r3
   1bcb8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1bcbc:	bf08      	it	eq
   1bcbe:	3d01      	subeq	r5, #1
   1bcc0:	d0f7      	beq.n	1bcb2 <__aeabi_dmul+0x1c6>
   1bcc2:	ea43 0306 	orr.w	r3, r3, r6
   1bcc6:	4770      	bx	lr
   1bcc8:	ea94 0f0c 	teq	r4, ip
   1bccc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bcd0:	bf18      	it	ne
   1bcd2:	ea95 0f0c 	teqne	r5, ip
   1bcd6:	d00c      	beq.n	1bcf2 <__aeabi_dmul+0x206>
   1bcd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bcdc:	bf18      	it	ne
   1bcde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bce2:	d1d1      	bne.n	1bc88 <__aeabi_dmul+0x19c>
   1bce4:	ea81 0103 	eor.w	r1, r1, r3
   1bce8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bcec:	f04f 0000 	mov.w	r0, #0
   1bcf0:	bd70      	pop	{r4, r5, r6, pc}
   1bcf2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bcf6:	bf06      	itte	eq
   1bcf8:	4610      	moveq	r0, r2
   1bcfa:	4619      	moveq	r1, r3
   1bcfc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bd00:	d019      	beq.n	1bd36 <__aeabi_dmul+0x24a>
   1bd02:	ea94 0f0c 	teq	r4, ip
   1bd06:	d102      	bne.n	1bd0e <__aeabi_dmul+0x222>
   1bd08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1bd0c:	d113      	bne.n	1bd36 <__aeabi_dmul+0x24a>
   1bd0e:	ea95 0f0c 	teq	r5, ip
   1bd12:	d105      	bne.n	1bd20 <__aeabi_dmul+0x234>
   1bd14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1bd18:	bf1c      	itt	ne
   1bd1a:	4610      	movne	r0, r2
   1bd1c:	4619      	movne	r1, r3
   1bd1e:	d10a      	bne.n	1bd36 <__aeabi_dmul+0x24a>
   1bd20:	ea81 0103 	eor.w	r1, r1, r3
   1bd24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bd28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bd2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bd30:	f04f 0000 	mov.w	r0, #0
   1bd34:	bd70      	pop	{r4, r5, r6, pc}
   1bd36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bd3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1bd3e:	bd70      	pop	{r4, r5, r6, pc}

0001bd40 <__aeabi_ddiv>:
   1bd40:	b570      	push	{r4, r5, r6, lr}
   1bd42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bd46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bd4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bd4e:	bf1d      	ittte	ne
   1bd50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bd54:	ea94 0f0c 	teqne	r4, ip
   1bd58:	ea95 0f0c 	teqne	r5, ip
   1bd5c:	f000 f8a7 	bleq	1beae <__aeabi_ddiv+0x16e>
   1bd60:	eba4 0405 	sub.w	r4, r4, r5
   1bd64:	ea81 0e03 	eor.w	lr, r1, r3
   1bd68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bd6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bd70:	f000 8088 	beq.w	1be84 <__aeabi_ddiv+0x144>
   1bd74:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bd78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1bd7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1bd80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1bd84:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1bd88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1bd8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1bd90:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1bd94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1bd98:	429d      	cmp	r5, r3
   1bd9a:	bf08      	it	eq
   1bd9c:	4296      	cmpeq	r6, r2
   1bd9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1bda2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1bda6:	d202      	bcs.n	1bdae <__aeabi_ddiv+0x6e>
   1bda8:	085b      	lsrs	r3, r3, #1
   1bdaa:	ea4f 0232 	mov.w	r2, r2, rrx
   1bdae:	1ab6      	subs	r6, r6, r2
   1bdb0:	eb65 0503 	sbc.w	r5, r5, r3
   1bdb4:	085b      	lsrs	r3, r3, #1
   1bdb6:	ea4f 0232 	mov.w	r2, r2, rrx
   1bdba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1bdbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1bdc2:	ebb6 0e02 	subs.w	lr, r6, r2
   1bdc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bdca:	bf22      	ittt	cs
   1bdcc:	1ab6      	subcs	r6, r6, r2
   1bdce:	4675      	movcs	r5, lr
   1bdd0:	ea40 000c 	orrcs.w	r0, r0, ip
   1bdd4:	085b      	lsrs	r3, r3, #1
   1bdd6:	ea4f 0232 	mov.w	r2, r2, rrx
   1bdda:	ebb6 0e02 	subs.w	lr, r6, r2
   1bdde:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bde2:	bf22      	ittt	cs
   1bde4:	1ab6      	subcs	r6, r6, r2
   1bde6:	4675      	movcs	r5, lr
   1bde8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bdec:	085b      	lsrs	r3, r3, #1
   1bdee:	ea4f 0232 	mov.w	r2, r2, rrx
   1bdf2:	ebb6 0e02 	subs.w	lr, r6, r2
   1bdf6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bdfa:	bf22      	ittt	cs
   1bdfc:	1ab6      	subcs	r6, r6, r2
   1bdfe:	4675      	movcs	r5, lr
   1be00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1be04:	085b      	lsrs	r3, r3, #1
   1be06:	ea4f 0232 	mov.w	r2, r2, rrx
   1be0a:	ebb6 0e02 	subs.w	lr, r6, r2
   1be0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1be12:	bf22      	ittt	cs
   1be14:	1ab6      	subcs	r6, r6, r2
   1be16:	4675      	movcs	r5, lr
   1be18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1be1c:	ea55 0e06 	orrs.w	lr, r5, r6
   1be20:	d018      	beq.n	1be54 <__aeabi_ddiv+0x114>
   1be22:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1be26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1be2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1be2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1be32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1be36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1be3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1be3e:	d1c0      	bne.n	1bdc2 <__aeabi_ddiv+0x82>
   1be40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1be44:	d10b      	bne.n	1be5e <__aeabi_ddiv+0x11e>
   1be46:	ea41 0100 	orr.w	r1, r1, r0
   1be4a:	f04f 0000 	mov.w	r0, #0
   1be4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1be52:	e7b6      	b.n	1bdc2 <__aeabi_ddiv+0x82>
   1be54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1be58:	bf04      	itt	eq
   1be5a:	4301      	orreq	r1, r0
   1be5c:	2000      	moveq	r0, #0
   1be5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1be62:	bf88      	it	hi
   1be64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1be68:	f63f aeaf 	bhi.w	1bbca <__aeabi_dmul+0xde>
   1be6c:	ebb5 0c03 	subs.w	ip, r5, r3
   1be70:	bf04      	itt	eq
   1be72:	ebb6 0c02 	subseq.w	ip, r6, r2
   1be76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1be7a:	f150 0000 	adcs.w	r0, r0, #0
   1be7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1be82:	bd70      	pop	{r4, r5, r6, pc}
   1be84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1be88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1be8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1be90:	bfc2      	ittt	gt
   1be92:	ebd4 050c 	rsbsgt	r5, r4, ip
   1be96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1be9a:	bd70      	popgt	{r4, r5, r6, pc}
   1be9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bea0:	f04f 0e00 	mov.w	lr, #0
   1bea4:	3c01      	subs	r4, #1
   1bea6:	e690      	b.n	1bbca <__aeabi_dmul+0xde>
   1bea8:	ea45 0e06 	orr.w	lr, r5, r6
   1beac:	e68d      	b.n	1bbca <__aeabi_dmul+0xde>
   1beae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1beb2:	ea94 0f0c 	teq	r4, ip
   1beb6:	bf08      	it	eq
   1beb8:	ea95 0f0c 	teqeq	r5, ip
   1bebc:	f43f af3b 	beq.w	1bd36 <__aeabi_dmul+0x24a>
   1bec0:	ea94 0f0c 	teq	r4, ip
   1bec4:	d10a      	bne.n	1bedc <__aeabi_ddiv+0x19c>
   1bec6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1beca:	f47f af34 	bne.w	1bd36 <__aeabi_dmul+0x24a>
   1bece:	ea95 0f0c 	teq	r5, ip
   1bed2:	f47f af25 	bne.w	1bd20 <__aeabi_dmul+0x234>
   1bed6:	4610      	mov	r0, r2
   1bed8:	4619      	mov	r1, r3
   1beda:	e72c      	b.n	1bd36 <__aeabi_dmul+0x24a>
   1bedc:	ea95 0f0c 	teq	r5, ip
   1bee0:	d106      	bne.n	1bef0 <__aeabi_ddiv+0x1b0>
   1bee2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bee6:	f43f aefd 	beq.w	1bce4 <__aeabi_dmul+0x1f8>
   1beea:	4610      	mov	r0, r2
   1beec:	4619      	mov	r1, r3
   1beee:	e722      	b.n	1bd36 <__aeabi_dmul+0x24a>
   1bef0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bef4:	bf18      	it	ne
   1bef6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1befa:	f47f aec5 	bne.w	1bc88 <__aeabi_dmul+0x19c>
   1befe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1bf02:	f47f af0d 	bne.w	1bd20 <__aeabi_dmul+0x234>
   1bf06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1bf0a:	f47f aeeb 	bne.w	1bce4 <__aeabi_dmul+0x1f8>
   1bf0e:	e712      	b.n	1bd36 <__aeabi_dmul+0x24a>

0001bf10 <__gedf2>:
   1bf10:	f04f 3cff 	mov.w	ip, #4294967295
   1bf14:	e006      	b.n	1bf24 <__cmpdf2+0x4>
   1bf16:	bf00      	nop

0001bf18 <__ledf2>:
   1bf18:	f04f 0c01 	mov.w	ip, #1
   1bf1c:	e002      	b.n	1bf24 <__cmpdf2+0x4>
   1bf1e:	bf00      	nop

0001bf20 <__cmpdf2>:
   1bf20:	f04f 0c01 	mov.w	ip, #1
   1bf24:	f84d cd04 	str.w	ip, [sp, #-4]!
   1bf28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bf2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bf30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bf34:	bf18      	it	ne
   1bf36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1bf3a:	d01b      	beq.n	1bf74 <__cmpdf2+0x54>
   1bf3c:	b001      	add	sp, #4
   1bf3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1bf42:	bf0c      	ite	eq
   1bf44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1bf48:	ea91 0f03 	teqne	r1, r3
   1bf4c:	bf02      	ittt	eq
   1bf4e:	ea90 0f02 	teqeq	r0, r2
   1bf52:	2000      	moveq	r0, #0
   1bf54:	4770      	bxeq	lr
   1bf56:	f110 0f00 	cmn.w	r0, #0
   1bf5a:	ea91 0f03 	teq	r1, r3
   1bf5e:	bf58      	it	pl
   1bf60:	4299      	cmppl	r1, r3
   1bf62:	bf08      	it	eq
   1bf64:	4290      	cmpeq	r0, r2
   1bf66:	bf2c      	ite	cs
   1bf68:	17d8      	asrcs	r0, r3, #31
   1bf6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1bf6e:	f040 0001 	orr.w	r0, r0, #1
   1bf72:	4770      	bx	lr
   1bf74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bf78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bf7c:	d102      	bne.n	1bf84 <__cmpdf2+0x64>
   1bf7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1bf82:	d107      	bne.n	1bf94 <__cmpdf2+0x74>
   1bf84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bf88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bf8c:	d1d6      	bne.n	1bf3c <__cmpdf2+0x1c>
   1bf8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1bf92:	d0d3      	beq.n	1bf3c <__cmpdf2+0x1c>
   1bf94:	f85d 0b04 	ldr.w	r0, [sp], #4
   1bf98:	4770      	bx	lr
   1bf9a:	bf00      	nop

0001bf9c <__aeabi_cdrcmple>:
   1bf9c:	4684      	mov	ip, r0
   1bf9e:	4610      	mov	r0, r2
   1bfa0:	4662      	mov	r2, ip
   1bfa2:	468c      	mov	ip, r1
   1bfa4:	4619      	mov	r1, r3
   1bfa6:	4663      	mov	r3, ip
   1bfa8:	e000      	b.n	1bfac <__aeabi_cdcmpeq>
   1bfaa:	bf00      	nop

0001bfac <__aeabi_cdcmpeq>:
   1bfac:	b501      	push	{r0, lr}
   1bfae:	f7ff ffb7 	bl	1bf20 <__cmpdf2>
   1bfb2:	2800      	cmp	r0, #0
   1bfb4:	bf48      	it	mi
   1bfb6:	f110 0f00 	cmnmi.w	r0, #0
   1bfba:	bd01      	pop	{r0, pc}

0001bfbc <__aeabi_dcmpeq>:
   1bfbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bfc0:	f7ff fff4 	bl	1bfac <__aeabi_cdcmpeq>
   1bfc4:	bf0c      	ite	eq
   1bfc6:	2001      	moveq	r0, #1
   1bfc8:	2000      	movne	r0, #0
   1bfca:	f85d fb08 	ldr.w	pc, [sp], #8
   1bfce:	bf00      	nop

0001bfd0 <__aeabi_dcmplt>:
   1bfd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bfd4:	f7ff ffea 	bl	1bfac <__aeabi_cdcmpeq>
   1bfd8:	bf34      	ite	cc
   1bfda:	2001      	movcc	r0, #1
   1bfdc:	2000      	movcs	r0, #0
   1bfde:	f85d fb08 	ldr.w	pc, [sp], #8
   1bfe2:	bf00      	nop

0001bfe4 <__aeabi_dcmple>:
   1bfe4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bfe8:	f7ff ffe0 	bl	1bfac <__aeabi_cdcmpeq>
   1bfec:	bf94      	ite	ls
   1bfee:	2001      	movls	r0, #1
   1bff0:	2000      	movhi	r0, #0
   1bff2:	f85d fb08 	ldr.w	pc, [sp], #8
   1bff6:	bf00      	nop

0001bff8 <__aeabi_dcmpge>:
   1bff8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bffc:	f7ff ffce 	bl	1bf9c <__aeabi_cdrcmple>
   1c000:	bf94      	ite	ls
   1c002:	2001      	movls	r0, #1
   1c004:	2000      	movhi	r0, #0
   1c006:	f85d fb08 	ldr.w	pc, [sp], #8
   1c00a:	bf00      	nop

0001c00c <__aeabi_dcmpgt>:
   1c00c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c010:	f7ff ffc4 	bl	1bf9c <__aeabi_cdrcmple>
   1c014:	bf34      	ite	cc
   1c016:	2001      	movcc	r0, #1
   1c018:	2000      	movcs	r0, #0
   1c01a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c01e:	bf00      	nop

0001c020 <__aeabi_d2iz>:
   1c020:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c024:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c028:	d215      	bcs.n	1c056 <__aeabi_d2iz+0x36>
   1c02a:	d511      	bpl.n	1c050 <__aeabi_d2iz+0x30>
   1c02c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c030:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c034:	d912      	bls.n	1c05c <__aeabi_d2iz+0x3c>
   1c036:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c03a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c03e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c042:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c046:	fa23 f002 	lsr.w	r0, r3, r2
   1c04a:	bf18      	it	ne
   1c04c:	4240      	negne	r0, r0
   1c04e:	4770      	bx	lr
   1c050:	f04f 0000 	mov.w	r0, #0
   1c054:	4770      	bx	lr
   1c056:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c05a:	d105      	bne.n	1c068 <__aeabi_d2iz+0x48>
   1c05c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c060:	bf08      	it	eq
   1c062:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c066:	4770      	bx	lr
   1c068:	f04f 0000 	mov.w	r0, #0
   1c06c:	4770      	bx	lr
   1c06e:	bf00      	nop

0001c070 <__aeabi_d2uiz>:
   1c070:	004a      	lsls	r2, r1, #1
   1c072:	d211      	bcs.n	1c098 <__aeabi_d2uiz+0x28>
   1c074:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c078:	d211      	bcs.n	1c09e <__aeabi_d2uiz+0x2e>
   1c07a:	d50d      	bpl.n	1c098 <__aeabi_d2uiz+0x28>
   1c07c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c084:	d40e      	bmi.n	1c0a4 <__aeabi_d2uiz+0x34>
   1c086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c08a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c08e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c092:	fa23 f002 	lsr.w	r0, r3, r2
   1c096:	4770      	bx	lr
   1c098:	f04f 0000 	mov.w	r0, #0
   1c09c:	4770      	bx	lr
   1c09e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c0a2:	d102      	bne.n	1c0aa <__aeabi_d2uiz+0x3a>
   1c0a4:	f04f 30ff 	mov.w	r0, #4294967295
   1c0a8:	4770      	bx	lr
   1c0aa:	f04f 0000 	mov.w	r0, #0
   1c0ae:	4770      	bx	lr

0001c0b0 <__aeabi_d2f>:
   1c0b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c0b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1c0b8:	bf24      	itt	cs
   1c0ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1c0be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1c0c2:	d90d      	bls.n	1c0e0 <__aeabi_d2f+0x30>
   1c0c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c0c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1c0cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1c0d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c0d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1c0d8:	bf08      	it	eq
   1c0da:	f020 0001 	biceq.w	r0, r0, #1
   1c0de:	4770      	bx	lr
   1c0e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1c0e4:	d121      	bne.n	1c12a <__aeabi_d2f+0x7a>
   1c0e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1c0ea:	bfbc      	itt	lt
   1c0ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1c0f0:	4770      	bxlt	lr
   1c0f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c0f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1c0fa:	f1c2 0218 	rsb	r2, r2, #24
   1c0fe:	f1c2 0c20 	rsb	ip, r2, #32
   1c102:	fa10 f30c 	lsls.w	r3, r0, ip
   1c106:	fa20 f002 	lsr.w	r0, r0, r2
   1c10a:	bf18      	it	ne
   1c10c:	f040 0001 	orrne.w	r0, r0, #1
   1c110:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c114:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1c118:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c11c:	ea40 000c 	orr.w	r0, r0, ip
   1c120:	fa23 f302 	lsr.w	r3, r3, r2
   1c124:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1c128:	e7cc      	b.n	1c0c4 <__aeabi_d2f+0x14>
   1c12a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1c12e:	d107      	bne.n	1c140 <__aeabi_d2f+0x90>
   1c130:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1c134:	bf1e      	ittt	ne
   1c136:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1c13a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1c13e:	4770      	bxne	lr
   1c140:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1c144:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c148:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c14c:	4770      	bx	lr
   1c14e:	bf00      	nop

0001c150 <__aeabi_frsub>:
   1c150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c154:	e002      	b.n	1c15c <__addsf3>
   1c156:	bf00      	nop

0001c158 <__aeabi_fsub>:
   1c158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c15c <__addsf3>:
   1c15c:	0042      	lsls	r2, r0, #1
   1c15e:	bf1f      	itttt	ne
   1c160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c164:	ea92 0f03 	teqne	r2, r3
   1c168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c16c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c170:	d06a      	beq.n	1c248 <__addsf3+0xec>
   1c172:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c17a:	bfc1      	itttt	gt
   1c17c:	18d2      	addgt	r2, r2, r3
   1c17e:	4041      	eorgt	r1, r0
   1c180:	4048      	eorgt	r0, r1
   1c182:	4041      	eorgt	r1, r0
   1c184:	bfb8      	it	lt
   1c186:	425b      	neglt	r3, r3
   1c188:	2b19      	cmp	r3, #25
   1c18a:	bf88      	it	hi
   1c18c:	4770      	bxhi	lr
   1c18e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c19a:	bf18      	it	ne
   1c19c:	4240      	negne	r0, r0
   1c19e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c1a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c1a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c1aa:	bf18      	it	ne
   1c1ac:	4249      	negne	r1, r1
   1c1ae:	ea92 0f03 	teq	r2, r3
   1c1b2:	d03f      	beq.n	1c234 <__addsf3+0xd8>
   1c1b4:	f1a2 0201 	sub.w	r2, r2, #1
   1c1b8:	fa41 fc03 	asr.w	ip, r1, r3
   1c1bc:	eb10 000c 	adds.w	r0, r0, ip
   1c1c0:	f1c3 0320 	rsb	r3, r3, #32
   1c1c4:	fa01 f103 	lsl.w	r1, r1, r3
   1c1c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c1cc:	d502      	bpl.n	1c1d4 <__addsf3+0x78>
   1c1ce:	4249      	negs	r1, r1
   1c1d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c1d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c1d8:	d313      	bcc.n	1c202 <__addsf3+0xa6>
   1c1da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c1de:	d306      	bcc.n	1c1ee <__addsf3+0x92>
   1c1e0:	0840      	lsrs	r0, r0, #1
   1c1e2:	ea4f 0131 	mov.w	r1, r1, rrx
   1c1e6:	f102 0201 	add.w	r2, r2, #1
   1c1ea:	2afe      	cmp	r2, #254	; 0xfe
   1c1ec:	d251      	bcs.n	1c292 <__addsf3+0x136>
   1c1ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c1f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c1f6:	bf08      	it	eq
   1c1f8:	f020 0001 	biceq.w	r0, r0, #1
   1c1fc:	ea40 0003 	orr.w	r0, r0, r3
   1c200:	4770      	bx	lr
   1c202:	0049      	lsls	r1, r1, #1
   1c204:	eb40 0000 	adc.w	r0, r0, r0
   1c208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c20c:	f1a2 0201 	sub.w	r2, r2, #1
   1c210:	d1ed      	bne.n	1c1ee <__addsf3+0x92>
   1c212:	fab0 fc80 	clz	ip, r0
   1c216:	f1ac 0c08 	sub.w	ip, ip, #8
   1c21a:	ebb2 020c 	subs.w	r2, r2, ip
   1c21e:	fa00 f00c 	lsl.w	r0, r0, ip
   1c222:	bfaa      	itet	ge
   1c224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c228:	4252      	neglt	r2, r2
   1c22a:	4318      	orrge	r0, r3
   1c22c:	bfbc      	itt	lt
   1c22e:	40d0      	lsrlt	r0, r2
   1c230:	4318      	orrlt	r0, r3
   1c232:	4770      	bx	lr
   1c234:	f092 0f00 	teq	r2, #0
   1c238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c23c:	bf06      	itte	eq
   1c23e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c242:	3201      	addeq	r2, #1
   1c244:	3b01      	subne	r3, #1
   1c246:	e7b5      	b.n	1c1b4 <__addsf3+0x58>
   1c248:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c24c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c250:	bf18      	it	ne
   1c252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c256:	d021      	beq.n	1c29c <__addsf3+0x140>
   1c258:	ea92 0f03 	teq	r2, r3
   1c25c:	d004      	beq.n	1c268 <__addsf3+0x10c>
   1c25e:	f092 0f00 	teq	r2, #0
   1c262:	bf08      	it	eq
   1c264:	4608      	moveq	r0, r1
   1c266:	4770      	bx	lr
   1c268:	ea90 0f01 	teq	r0, r1
   1c26c:	bf1c      	itt	ne
   1c26e:	2000      	movne	r0, #0
   1c270:	4770      	bxne	lr
   1c272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c276:	d104      	bne.n	1c282 <__addsf3+0x126>
   1c278:	0040      	lsls	r0, r0, #1
   1c27a:	bf28      	it	cs
   1c27c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c280:	4770      	bx	lr
   1c282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c286:	bf3c      	itt	cc
   1c288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c28c:	4770      	bxcc	lr
   1c28e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c29a:	4770      	bx	lr
   1c29c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c2a0:	bf16      	itet	ne
   1c2a2:	4608      	movne	r0, r1
   1c2a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c2a8:	4601      	movne	r1, r0
   1c2aa:	0242      	lsls	r2, r0, #9
   1c2ac:	bf06      	itte	eq
   1c2ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c2b2:	ea90 0f01 	teqeq	r0, r1
   1c2b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c2ba:	4770      	bx	lr

0001c2bc <__aeabi_ui2f>:
   1c2bc:	f04f 0300 	mov.w	r3, #0
   1c2c0:	e004      	b.n	1c2cc <__aeabi_i2f+0x8>
   1c2c2:	bf00      	nop

0001c2c4 <__aeabi_i2f>:
   1c2c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c2c8:	bf48      	it	mi
   1c2ca:	4240      	negmi	r0, r0
   1c2cc:	ea5f 0c00 	movs.w	ip, r0
   1c2d0:	bf08      	it	eq
   1c2d2:	4770      	bxeq	lr
   1c2d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c2d8:	4601      	mov	r1, r0
   1c2da:	f04f 0000 	mov.w	r0, #0
   1c2de:	e01c      	b.n	1c31a <__aeabi_l2f+0x2a>

0001c2e0 <__aeabi_ul2f>:
   1c2e0:	ea50 0201 	orrs.w	r2, r0, r1
   1c2e4:	bf08      	it	eq
   1c2e6:	4770      	bxeq	lr
   1c2e8:	f04f 0300 	mov.w	r3, #0
   1c2ec:	e00a      	b.n	1c304 <__aeabi_l2f+0x14>
   1c2ee:	bf00      	nop

0001c2f0 <__aeabi_l2f>:
   1c2f0:	ea50 0201 	orrs.w	r2, r0, r1
   1c2f4:	bf08      	it	eq
   1c2f6:	4770      	bxeq	lr
   1c2f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c2fc:	d502      	bpl.n	1c304 <__aeabi_l2f+0x14>
   1c2fe:	4240      	negs	r0, r0
   1c300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c304:	ea5f 0c01 	movs.w	ip, r1
   1c308:	bf02      	ittt	eq
   1c30a:	4684      	moveq	ip, r0
   1c30c:	4601      	moveq	r1, r0
   1c30e:	2000      	moveq	r0, #0
   1c310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c314:	bf08      	it	eq
   1c316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c31a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c31e:	fabc f28c 	clz	r2, ip
   1c322:	3a08      	subs	r2, #8
   1c324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c328:	db10      	blt.n	1c34c <__aeabi_l2f+0x5c>
   1c32a:	fa01 fc02 	lsl.w	ip, r1, r2
   1c32e:	4463      	add	r3, ip
   1c330:	fa00 fc02 	lsl.w	ip, r0, r2
   1c334:	f1c2 0220 	rsb	r2, r2, #32
   1c338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c33c:	fa20 f202 	lsr.w	r2, r0, r2
   1c340:	eb43 0002 	adc.w	r0, r3, r2
   1c344:	bf08      	it	eq
   1c346:	f020 0001 	biceq.w	r0, r0, #1
   1c34a:	4770      	bx	lr
   1c34c:	f102 0220 	add.w	r2, r2, #32
   1c350:	fa01 fc02 	lsl.w	ip, r1, r2
   1c354:	f1c2 0220 	rsb	r2, r2, #32
   1c358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c35c:	fa21 f202 	lsr.w	r2, r1, r2
   1c360:	eb43 0002 	adc.w	r0, r3, r2
   1c364:	bf08      	it	eq
   1c366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c36a:	4770      	bx	lr

0001c36c <__aeabi_ldivmod>:
   1c36c:	b97b      	cbnz	r3, 1c38e <__aeabi_ldivmod+0x22>
   1c36e:	b972      	cbnz	r2, 1c38e <__aeabi_ldivmod+0x22>
   1c370:	2900      	cmp	r1, #0
   1c372:	bfbe      	ittt	lt
   1c374:	2000      	movlt	r0, #0
   1c376:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c37a:	e006      	blt.n	1c38a <__aeabi_ldivmod+0x1e>
   1c37c:	bf08      	it	eq
   1c37e:	2800      	cmpeq	r0, #0
   1c380:	bf1c      	itt	ne
   1c382:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c386:	f04f 30ff 	movne.w	r0, #4294967295
   1c38a:	f001 b979 	b.w	1d680 <__aeabi_idiv0>
   1c38e:	f1ad 0c08 	sub.w	ip, sp, #8
   1c392:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c396:	2900      	cmp	r1, #0
   1c398:	db09      	blt.n	1c3ae <__aeabi_ldivmod+0x42>
   1c39a:	2b00      	cmp	r3, #0
   1c39c:	db1a      	blt.n	1c3d4 <__aeabi_ldivmod+0x68>
   1c39e:	f000 f885 	bl	1c4ac <__udivmoddi4>
   1c3a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c3a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c3aa:	b004      	add	sp, #16
   1c3ac:	4770      	bx	lr
   1c3ae:	4240      	negs	r0, r0
   1c3b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3b4:	2b00      	cmp	r3, #0
   1c3b6:	db1b      	blt.n	1c3f0 <__aeabi_ldivmod+0x84>
   1c3b8:	f000 f878 	bl	1c4ac <__udivmoddi4>
   1c3bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c3c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c3c4:	b004      	add	sp, #16
   1c3c6:	4240      	negs	r0, r0
   1c3c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3cc:	4252      	negs	r2, r2
   1c3ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c3d2:	4770      	bx	lr
   1c3d4:	4252      	negs	r2, r2
   1c3d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c3da:	f000 f867 	bl	1c4ac <__udivmoddi4>
   1c3de:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c3e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c3e6:	b004      	add	sp, #16
   1c3e8:	4240      	negs	r0, r0
   1c3ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3ee:	4770      	bx	lr
   1c3f0:	4252      	negs	r2, r2
   1c3f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c3f6:	f000 f859 	bl	1c4ac <__udivmoddi4>
   1c3fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c3fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c402:	b004      	add	sp, #16
   1c404:	4252      	negs	r2, r2
   1c406:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c40a:	4770      	bx	lr

0001c40c <__aeabi_uldivmod>:
   1c40c:	b953      	cbnz	r3, 1c424 <__aeabi_uldivmod+0x18>
   1c40e:	b94a      	cbnz	r2, 1c424 <__aeabi_uldivmod+0x18>
   1c410:	2900      	cmp	r1, #0
   1c412:	bf08      	it	eq
   1c414:	2800      	cmpeq	r0, #0
   1c416:	bf1c      	itt	ne
   1c418:	f04f 31ff 	movne.w	r1, #4294967295
   1c41c:	f04f 30ff 	movne.w	r0, #4294967295
   1c420:	f001 b92e 	b.w	1d680 <__aeabi_idiv0>
   1c424:	f1ad 0c08 	sub.w	ip, sp, #8
   1c428:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c42c:	f000 f83e 	bl	1c4ac <__udivmoddi4>
   1c430:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c438:	b004      	add	sp, #16
   1c43a:	4770      	bx	lr

0001c43c <__aeabi_f2lz>:
   1c43c:	ee07 0a90 	vmov	s15, r0
   1c440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c448:	d401      	bmi.n	1c44e <__aeabi_f2lz+0x12>
   1c44a:	f000 b809 	b.w	1c460 <__aeabi_f2ulz>
   1c44e:	b508      	push	{r3, lr}
   1c450:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c454:	f000 f804 	bl	1c460 <__aeabi_f2ulz>
   1c458:	4240      	negs	r0, r0
   1c45a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c45e:	bd08      	pop	{r3, pc}

0001c460 <__aeabi_f2ulz>:
   1c460:	b5d0      	push	{r4, r6, r7, lr}
   1c462:	f7ff faef 	bl	1ba44 <__aeabi_f2d>
   1c466:	2200      	movs	r2, #0
   1c468:	4b0e      	ldr	r3, [pc, #56]	; (1c4a4 <__aeabi_f2ulz+0x44>)
   1c46a:	4606      	mov	r6, r0
   1c46c:	460f      	mov	r7, r1
   1c46e:	f7ff fb3d 	bl	1baec <__aeabi_dmul>
   1c472:	f7ff fdfd 	bl	1c070 <__aeabi_d2uiz>
   1c476:	4604      	mov	r4, r0
   1c478:	f7ff fac2 	bl	1ba00 <__aeabi_ui2d>
   1c47c:	2200      	movs	r2, #0
   1c47e:	4b0a      	ldr	r3, [pc, #40]	; (1c4a8 <__aeabi_f2ulz+0x48>)
   1c480:	f7ff fb34 	bl	1baec <__aeabi_dmul>
   1c484:	4602      	mov	r2, r0
   1c486:	460b      	mov	r3, r1
   1c488:	4630      	mov	r0, r6
   1c48a:	4639      	mov	r1, r7
   1c48c:	f7ff f97a 	bl	1b784 <__aeabi_dsub>
   1c490:	f7ff fdee 	bl	1c070 <__aeabi_d2uiz>
   1c494:	4623      	mov	r3, r4
   1c496:	2200      	movs	r2, #0
   1c498:	ea42 0200 	orr.w	r2, r2, r0
   1c49c:	4610      	mov	r0, r2
   1c49e:	4619      	mov	r1, r3
   1c4a0:	bdd0      	pop	{r4, r6, r7, pc}
   1c4a2:	bf00      	nop
   1c4a4:	3df00000 	.word	0x3df00000
   1c4a8:	41f00000 	.word	0x41f00000

0001c4ac <__udivmoddi4>:
   1c4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c4b0:	468c      	mov	ip, r1
   1c4b2:	460d      	mov	r5, r1
   1c4b4:	4604      	mov	r4, r0
   1c4b6:	9e08      	ldr	r6, [sp, #32]
   1c4b8:	2b00      	cmp	r3, #0
   1c4ba:	d151      	bne.n	1c560 <__udivmoddi4+0xb4>
   1c4bc:	428a      	cmp	r2, r1
   1c4be:	4617      	mov	r7, r2
   1c4c0:	d96d      	bls.n	1c59e <__udivmoddi4+0xf2>
   1c4c2:	fab2 fe82 	clz	lr, r2
   1c4c6:	f1be 0f00 	cmp.w	lr, #0
   1c4ca:	d00b      	beq.n	1c4e4 <__udivmoddi4+0x38>
   1c4cc:	f1ce 0c20 	rsb	ip, lr, #32
   1c4d0:	fa01 f50e 	lsl.w	r5, r1, lr
   1c4d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c4d8:	fa02 f70e 	lsl.w	r7, r2, lr
   1c4dc:	ea4c 0c05 	orr.w	ip, ip, r5
   1c4e0:	fa00 f40e 	lsl.w	r4, r0, lr
   1c4e4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c4e8:	0c25      	lsrs	r5, r4, #16
   1c4ea:	fbbc f8fa 	udiv	r8, ip, sl
   1c4ee:	fa1f f987 	uxth.w	r9, r7
   1c4f2:	fb0a cc18 	mls	ip, sl, r8, ip
   1c4f6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c4fa:	fb08 f309 	mul.w	r3, r8, r9
   1c4fe:	42ab      	cmp	r3, r5
   1c500:	d90a      	bls.n	1c518 <__udivmoddi4+0x6c>
   1c502:	19ed      	adds	r5, r5, r7
   1c504:	f108 32ff 	add.w	r2, r8, #4294967295
   1c508:	f080 8123 	bcs.w	1c752 <__udivmoddi4+0x2a6>
   1c50c:	42ab      	cmp	r3, r5
   1c50e:	f240 8120 	bls.w	1c752 <__udivmoddi4+0x2a6>
   1c512:	f1a8 0802 	sub.w	r8, r8, #2
   1c516:	443d      	add	r5, r7
   1c518:	1aed      	subs	r5, r5, r3
   1c51a:	b2a4      	uxth	r4, r4
   1c51c:	fbb5 f0fa 	udiv	r0, r5, sl
   1c520:	fb0a 5510 	mls	r5, sl, r0, r5
   1c524:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c528:	fb00 f909 	mul.w	r9, r0, r9
   1c52c:	45a1      	cmp	r9, r4
   1c52e:	d909      	bls.n	1c544 <__udivmoddi4+0x98>
   1c530:	19e4      	adds	r4, r4, r7
   1c532:	f100 33ff 	add.w	r3, r0, #4294967295
   1c536:	f080 810a 	bcs.w	1c74e <__udivmoddi4+0x2a2>
   1c53a:	45a1      	cmp	r9, r4
   1c53c:	f240 8107 	bls.w	1c74e <__udivmoddi4+0x2a2>
   1c540:	3802      	subs	r0, #2
   1c542:	443c      	add	r4, r7
   1c544:	eba4 0409 	sub.w	r4, r4, r9
   1c548:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c54c:	2100      	movs	r1, #0
   1c54e:	2e00      	cmp	r6, #0
   1c550:	d061      	beq.n	1c616 <__udivmoddi4+0x16a>
   1c552:	fa24 f40e 	lsr.w	r4, r4, lr
   1c556:	2300      	movs	r3, #0
   1c558:	6034      	str	r4, [r6, #0]
   1c55a:	6073      	str	r3, [r6, #4]
   1c55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c560:	428b      	cmp	r3, r1
   1c562:	d907      	bls.n	1c574 <__udivmoddi4+0xc8>
   1c564:	2e00      	cmp	r6, #0
   1c566:	d054      	beq.n	1c612 <__udivmoddi4+0x166>
   1c568:	2100      	movs	r1, #0
   1c56a:	e886 0021 	stmia.w	r6, {r0, r5}
   1c56e:	4608      	mov	r0, r1
   1c570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c574:	fab3 f183 	clz	r1, r3
   1c578:	2900      	cmp	r1, #0
   1c57a:	f040 808e 	bne.w	1c69a <__udivmoddi4+0x1ee>
   1c57e:	42ab      	cmp	r3, r5
   1c580:	d302      	bcc.n	1c588 <__udivmoddi4+0xdc>
   1c582:	4282      	cmp	r2, r0
   1c584:	f200 80fa 	bhi.w	1c77c <__udivmoddi4+0x2d0>
   1c588:	1a84      	subs	r4, r0, r2
   1c58a:	eb65 0503 	sbc.w	r5, r5, r3
   1c58e:	2001      	movs	r0, #1
   1c590:	46ac      	mov	ip, r5
   1c592:	2e00      	cmp	r6, #0
   1c594:	d03f      	beq.n	1c616 <__udivmoddi4+0x16a>
   1c596:	e886 1010 	stmia.w	r6, {r4, ip}
   1c59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c59e:	b912      	cbnz	r2, 1c5a6 <__udivmoddi4+0xfa>
   1c5a0:	2701      	movs	r7, #1
   1c5a2:	fbb7 f7f2 	udiv	r7, r7, r2
   1c5a6:	fab7 fe87 	clz	lr, r7
   1c5aa:	f1be 0f00 	cmp.w	lr, #0
   1c5ae:	d134      	bne.n	1c61a <__udivmoddi4+0x16e>
   1c5b0:	1beb      	subs	r3, r5, r7
   1c5b2:	0c3a      	lsrs	r2, r7, #16
   1c5b4:	fa1f fc87 	uxth.w	ip, r7
   1c5b8:	2101      	movs	r1, #1
   1c5ba:	fbb3 f8f2 	udiv	r8, r3, r2
   1c5be:	0c25      	lsrs	r5, r4, #16
   1c5c0:	fb02 3318 	mls	r3, r2, r8, r3
   1c5c4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c5c8:	fb0c f308 	mul.w	r3, ip, r8
   1c5cc:	42ab      	cmp	r3, r5
   1c5ce:	d907      	bls.n	1c5e0 <__udivmoddi4+0x134>
   1c5d0:	19ed      	adds	r5, r5, r7
   1c5d2:	f108 30ff 	add.w	r0, r8, #4294967295
   1c5d6:	d202      	bcs.n	1c5de <__udivmoddi4+0x132>
   1c5d8:	42ab      	cmp	r3, r5
   1c5da:	f200 80d1 	bhi.w	1c780 <__udivmoddi4+0x2d4>
   1c5de:	4680      	mov	r8, r0
   1c5e0:	1aed      	subs	r5, r5, r3
   1c5e2:	b2a3      	uxth	r3, r4
   1c5e4:	fbb5 f0f2 	udiv	r0, r5, r2
   1c5e8:	fb02 5510 	mls	r5, r2, r0, r5
   1c5ec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c5f0:	fb0c fc00 	mul.w	ip, ip, r0
   1c5f4:	45a4      	cmp	ip, r4
   1c5f6:	d907      	bls.n	1c608 <__udivmoddi4+0x15c>
   1c5f8:	19e4      	adds	r4, r4, r7
   1c5fa:	f100 33ff 	add.w	r3, r0, #4294967295
   1c5fe:	d202      	bcs.n	1c606 <__udivmoddi4+0x15a>
   1c600:	45a4      	cmp	ip, r4
   1c602:	f200 80b8 	bhi.w	1c776 <__udivmoddi4+0x2ca>
   1c606:	4618      	mov	r0, r3
   1c608:	eba4 040c 	sub.w	r4, r4, ip
   1c60c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c610:	e79d      	b.n	1c54e <__udivmoddi4+0xa2>
   1c612:	4631      	mov	r1, r6
   1c614:	4630      	mov	r0, r6
   1c616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c61a:	f1ce 0420 	rsb	r4, lr, #32
   1c61e:	fa05 f30e 	lsl.w	r3, r5, lr
   1c622:	fa07 f70e 	lsl.w	r7, r7, lr
   1c626:	fa20 f804 	lsr.w	r8, r0, r4
   1c62a:	0c3a      	lsrs	r2, r7, #16
   1c62c:	fa25 f404 	lsr.w	r4, r5, r4
   1c630:	ea48 0803 	orr.w	r8, r8, r3
   1c634:	fbb4 f1f2 	udiv	r1, r4, r2
   1c638:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c63c:	fb02 4411 	mls	r4, r2, r1, r4
   1c640:	fa1f fc87 	uxth.w	ip, r7
   1c644:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c648:	fb01 f30c 	mul.w	r3, r1, ip
   1c64c:	42ab      	cmp	r3, r5
   1c64e:	fa00 f40e 	lsl.w	r4, r0, lr
   1c652:	d909      	bls.n	1c668 <__udivmoddi4+0x1bc>
   1c654:	19ed      	adds	r5, r5, r7
   1c656:	f101 30ff 	add.w	r0, r1, #4294967295
   1c65a:	f080 808a 	bcs.w	1c772 <__udivmoddi4+0x2c6>
   1c65e:	42ab      	cmp	r3, r5
   1c660:	f240 8087 	bls.w	1c772 <__udivmoddi4+0x2c6>
   1c664:	3902      	subs	r1, #2
   1c666:	443d      	add	r5, r7
   1c668:	1aeb      	subs	r3, r5, r3
   1c66a:	fa1f f588 	uxth.w	r5, r8
   1c66e:	fbb3 f0f2 	udiv	r0, r3, r2
   1c672:	fb02 3310 	mls	r3, r2, r0, r3
   1c676:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c67a:	fb00 f30c 	mul.w	r3, r0, ip
   1c67e:	42ab      	cmp	r3, r5
   1c680:	d907      	bls.n	1c692 <__udivmoddi4+0x1e6>
   1c682:	19ed      	adds	r5, r5, r7
   1c684:	f100 38ff 	add.w	r8, r0, #4294967295
   1c688:	d26f      	bcs.n	1c76a <__udivmoddi4+0x2be>
   1c68a:	42ab      	cmp	r3, r5
   1c68c:	d96d      	bls.n	1c76a <__udivmoddi4+0x2be>
   1c68e:	3802      	subs	r0, #2
   1c690:	443d      	add	r5, r7
   1c692:	1aeb      	subs	r3, r5, r3
   1c694:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c698:	e78f      	b.n	1c5ba <__udivmoddi4+0x10e>
   1c69a:	f1c1 0720 	rsb	r7, r1, #32
   1c69e:	fa22 f807 	lsr.w	r8, r2, r7
   1c6a2:	408b      	lsls	r3, r1
   1c6a4:	fa05 f401 	lsl.w	r4, r5, r1
   1c6a8:	ea48 0303 	orr.w	r3, r8, r3
   1c6ac:	fa20 fe07 	lsr.w	lr, r0, r7
   1c6b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c6b4:	40fd      	lsrs	r5, r7
   1c6b6:	ea4e 0e04 	orr.w	lr, lr, r4
   1c6ba:	fbb5 f9fc 	udiv	r9, r5, ip
   1c6be:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c6c2:	fb0c 5519 	mls	r5, ip, r9, r5
   1c6c6:	fa1f f883 	uxth.w	r8, r3
   1c6ca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c6ce:	fb09 f408 	mul.w	r4, r9, r8
   1c6d2:	42ac      	cmp	r4, r5
   1c6d4:	fa02 f201 	lsl.w	r2, r2, r1
   1c6d8:	fa00 fa01 	lsl.w	sl, r0, r1
   1c6dc:	d908      	bls.n	1c6f0 <__udivmoddi4+0x244>
   1c6de:	18ed      	adds	r5, r5, r3
   1c6e0:	f109 30ff 	add.w	r0, r9, #4294967295
   1c6e4:	d243      	bcs.n	1c76e <__udivmoddi4+0x2c2>
   1c6e6:	42ac      	cmp	r4, r5
   1c6e8:	d941      	bls.n	1c76e <__udivmoddi4+0x2c2>
   1c6ea:	f1a9 0902 	sub.w	r9, r9, #2
   1c6ee:	441d      	add	r5, r3
   1c6f0:	1b2d      	subs	r5, r5, r4
   1c6f2:	fa1f fe8e 	uxth.w	lr, lr
   1c6f6:	fbb5 f0fc 	udiv	r0, r5, ip
   1c6fa:	fb0c 5510 	mls	r5, ip, r0, r5
   1c6fe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c702:	fb00 f808 	mul.w	r8, r0, r8
   1c706:	45a0      	cmp	r8, r4
   1c708:	d907      	bls.n	1c71a <__udivmoddi4+0x26e>
   1c70a:	18e4      	adds	r4, r4, r3
   1c70c:	f100 35ff 	add.w	r5, r0, #4294967295
   1c710:	d229      	bcs.n	1c766 <__udivmoddi4+0x2ba>
   1c712:	45a0      	cmp	r8, r4
   1c714:	d927      	bls.n	1c766 <__udivmoddi4+0x2ba>
   1c716:	3802      	subs	r0, #2
   1c718:	441c      	add	r4, r3
   1c71a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c71e:	eba4 0408 	sub.w	r4, r4, r8
   1c722:	fba0 8902 	umull	r8, r9, r0, r2
   1c726:	454c      	cmp	r4, r9
   1c728:	46c6      	mov	lr, r8
   1c72a:	464d      	mov	r5, r9
   1c72c:	d315      	bcc.n	1c75a <__udivmoddi4+0x2ae>
   1c72e:	d012      	beq.n	1c756 <__udivmoddi4+0x2aa>
   1c730:	b156      	cbz	r6, 1c748 <__udivmoddi4+0x29c>
   1c732:	ebba 030e 	subs.w	r3, sl, lr
   1c736:	eb64 0405 	sbc.w	r4, r4, r5
   1c73a:	fa04 f707 	lsl.w	r7, r4, r7
   1c73e:	40cb      	lsrs	r3, r1
   1c740:	431f      	orrs	r7, r3
   1c742:	40cc      	lsrs	r4, r1
   1c744:	6037      	str	r7, [r6, #0]
   1c746:	6074      	str	r4, [r6, #4]
   1c748:	2100      	movs	r1, #0
   1c74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c74e:	4618      	mov	r0, r3
   1c750:	e6f8      	b.n	1c544 <__udivmoddi4+0x98>
   1c752:	4690      	mov	r8, r2
   1c754:	e6e0      	b.n	1c518 <__udivmoddi4+0x6c>
   1c756:	45c2      	cmp	sl, r8
   1c758:	d2ea      	bcs.n	1c730 <__udivmoddi4+0x284>
   1c75a:	ebb8 0e02 	subs.w	lr, r8, r2
   1c75e:	eb69 0503 	sbc.w	r5, r9, r3
   1c762:	3801      	subs	r0, #1
   1c764:	e7e4      	b.n	1c730 <__udivmoddi4+0x284>
   1c766:	4628      	mov	r0, r5
   1c768:	e7d7      	b.n	1c71a <__udivmoddi4+0x26e>
   1c76a:	4640      	mov	r0, r8
   1c76c:	e791      	b.n	1c692 <__udivmoddi4+0x1e6>
   1c76e:	4681      	mov	r9, r0
   1c770:	e7be      	b.n	1c6f0 <__udivmoddi4+0x244>
   1c772:	4601      	mov	r1, r0
   1c774:	e778      	b.n	1c668 <__udivmoddi4+0x1bc>
   1c776:	3802      	subs	r0, #2
   1c778:	443c      	add	r4, r7
   1c77a:	e745      	b.n	1c608 <__udivmoddi4+0x15c>
   1c77c:	4608      	mov	r0, r1
   1c77e:	e708      	b.n	1c592 <__udivmoddi4+0xe6>
   1c780:	f1a8 0802 	sub.w	r8, r8, #2
   1c784:	443d      	add	r5, r7
   1c786:	e72b      	b.n	1c5e0 <__udivmoddi4+0x134>

0001c788 <selfrel_offset31>:
   1c788:	6803      	ldr	r3, [r0, #0]
   1c78a:	005a      	lsls	r2, r3, #1
   1c78c:	bf4c      	ite	mi
   1c78e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1c792:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1c796:	4418      	add	r0, r3
   1c798:	4770      	bx	lr
   1c79a:	bf00      	nop

0001c79c <search_EIT_table>:
   1c79c:	b361      	cbz	r1, 1c7f8 <search_EIT_table+0x5c>
   1c79e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7a2:	f101 3aff 	add.w	sl, r1, #4294967295
   1c7a6:	4690      	mov	r8, r2
   1c7a8:	4606      	mov	r6, r0
   1c7aa:	46d1      	mov	r9, sl
   1c7ac:	2700      	movs	r7, #0
   1c7ae:	eb07 0409 	add.w	r4, r7, r9
   1c7b2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1c7b6:	1064      	asrs	r4, r4, #1
   1c7b8:	00e5      	lsls	r5, r4, #3
   1c7ba:	1971      	adds	r1, r6, r5
   1c7bc:	4608      	mov	r0, r1
   1c7be:	f7ff ffe3 	bl	1c788 <selfrel_offset31>
   1c7c2:	45a2      	cmp	sl, r4
   1c7c4:	4683      	mov	fp, r0
   1c7c6:	f105 0008 	add.w	r0, r5, #8
   1c7ca:	4430      	add	r0, r6
   1c7cc:	d009      	beq.n	1c7e2 <search_EIT_table+0x46>
   1c7ce:	f7ff ffdb 	bl	1c788 <selfrel_offset31>
   1c7d2:	45c3      	cmp	fp, r8
   1c7d4:	f100 30ff 	add.w	r0, r0, #4294967295
   1c7d8:	d805      	bhi.n	1c7e6 <search_EIT_table+0x4a>
   1c7da:	4540      	cmp	r0, r8
   1c7dc:	d209      	bcs.n	1c7f2 <search_EIT_table+0x56>
   1c7de:	1c67      	adds	r7, r4, #1
   1c7e0:	e7e5      	b.n	1c7ae <search_EIT_table+0x12>
   1c7e2:	45c3      	cmp	fp, r8
   1c7e4:	d905      	bls.n	1c7f2 <search_EIT_table+0x56>
   1c7e6:	42a7      	cmp	r7, r4
   1c7e8:	d002      	beq.n	1c7f0 <search_EIT_table+0x54>
   1c7ea:	f104 39ff 	add.w	r9, r4, #4294967295
   1c7ee:	e7de      	b.n	1c7ae <search_EIT_table+0x12>
   1c7f0:	2100      	movs	r1, #0
   1c7f2:	4608      	mov	r0, r1
   1c7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7f8:	4608      	mov	r0, r1
   1c7fa:	4770      	bx	lr

0001c7fc <__gnu_unwind_get_pr_addr>:
   1c7fc:	2801      	cmp	r0, #1
   1c7fe:	d007      	beq.n	1c810 <__gnu_unwind_get_pr_addr+0x14>
   1c800:	2802      	cmp	r0, #2
   1c802:	d007      	beq.n	1c814 <__gnu_unwind_get_pr_addr+0x18>
   1c804:	4b04      	ldr	r3, [pc, #16]	; (1c818 <__gnu_unwind_get_pr_addr+0x1c>)
   1c806:	2800      	cmp	r0, #0
   1c808:	bf0c      	ite	eq
   1c80a:	4618      	moveq	r0, r3
   1c80c:	2000      	movne	r0, #0
   1c80e:	4770      	bx	lr
   1c810:	4802      	ldr	r0, [pc, #8]	; (1c81c <__gnu_unwind_get_pr_addr+0x20>)
   1c812:	4770      	bx	lr
   1c814:	4802      	ldr	r0, [pc, #8]	; (1c820 <__gnu_unwind_get_pr_addr+0x24>)
   1c816:	4770      	bx	lr
   1c818:	0001cf01 	.word	0x0001cf01
   1c81c:	0001cf05 	.word	0x0001cf05
   1c820:	0001cf09 	.word	0x0001cf09

0001c824 <get_eit_entry>:
   1c824:	b530      	push	{r4, r5, lr}
   1c826:	4b24      	ldr	r3, [pc, #144]	; (1c8b8 <get_eit_entry+0x94>)
   1c828:	b083      	sub	sp, #12
   1c82a:	4604      	mov	r4, r0
   1c82c:	1e8d      	subs	r5, r1, #2
   1c82e:	b37b      	cbz	r3, 1c890 <get_eit_entry+0x6c>
   1c830:	a901      	add	r1, sp, #4
   1c832:	4628      	mov	r0, r5
   1c834:	f3af 8000 	nop.w
   1c838:	b320      	cbz	r0, 1c884 <get_eit_entry+0x60>
   1c83a:	9901      	ldr	r1, [sp, #4]
   1c83c:	462a      	mov	r2, r5
   1c83e:	f7ff ffad 	bl	1c79c <search_EIT_table>
   1c842:	4601      	mov	r1, r0
   1c844:	b1f0      	cbz	r0, 1c884 <get_eit_entry+0x60>
   1c846:	f7ff ff9f 	bl	1c788 <selfrel_offset31>
   1c84a:	684b      	ldr	r3, [r1, #4]
   1c84c:	64a0      	str	r0, [r4, #72]	; 0x48
   1c84e:	2b01      	cmp	r3, #1
   1c850:	d012      	beq.n	1c878 <get_eit_entry+0x54>
   1c852:	2b00      	cmp	r3, #0
   1c854:	f101 0004 	add.w	r0, r1, #4
   1c858:	db20      	blt.n	1c89c <get_eit_entry+0x78>
   1c85a:	f7ff ff95 	bl	1c788 <selfrel_offset31>
   1c85e:	2300      	movs	r3, #0
   1c860:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c862:	6523      	str	r3, [r4, #80]	; 0x50
   1c864:	6803      	ldr	r3, [r0, #0]
   1c866:	2b00      	cmp	r3, #0
   1c868:	db1c      	blt.n	1c8a4 <get_eit_entry+0x80>
   1c86a:	f7ff ff8d 	bl	1c788 <selfrel_offset31>
   1c86e:	2300      	movs	r3, #0
   1c870:	6120      	str	r0, [r4, #16]
   1c872:	4618      	mov	r0, r3
   1c874:	b003      	add	sp, #12
   1c876:	bd30      	pop	{r4, r5, pc}
   1c878:	2300      	movs	r3, #0
   1c87a:	6123      	str	r3, [r4, #16]
   1c87c:	2305      	movs	r3, #5
   1c87e:	4618      	mov	r0, r3
   1c880:	b003      	add	sp, #12
   1c882:	bd30      	pop	{r4, r5, pc}
   1c884:	2300      	movs	r3, #0
   1c886:	6123      	str	r3, [r4, #16]
   1c888:	2309      	movs	r3, #9
   1c88a:	4618      	mov	r0, r3
   1c88c:	b003      	add	sp, #12
   1c88e:	bd30      	pop	{r4, r5, pc}
   1c890:	490a      	ldr	r1, [pc, #40]	; (1c8bc <get_eit_entry+0x98>)
   1c892:	480b      	ldr	r0, [pc, #44]	; (1c8c0 <get_eit_entry+0x9c>)
   1c894:	1a09      	subs	r1, r1, r0
   1c896:	10c9      	asrs	r1, r1, #3
   1c898:	9101      	str	r1, [sp, #4]
   1c89a:	e7cf      	b.n	1c83c <get_eit_entry+0x18>
   1c89c:	2301      	movs	r3, #1
   1c89e:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c8a0:	6523      	str	r3, [r4, #80]	; 0x50
   1c8a2:	e7df      	b.n	1c864 <get_eit_entry+0x40>
   1c8a4:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1c8a8:	f7ff ffa8 	bl	1c7fc <__gnu_unwind_get_pr_addr>
   1c8ac:	2800      	cmp	r0, #0
   1c8ae:	6120      	str	r0, [r4, #16]
   1c8b0:	bf14      	ite	ne
   1c8b2:	2300      	movne	r3, #0
   1c8b4:	2309      	moveq	r3, #9
   1c8b6:	e7dc      	b.n	1c872 <get_eit_entry+0x4e>
   1c8b8:	00000000 	.word	0x00000000
   1c8bc:	000250d4 	.word	0x000250d4
   1c8c0:	00024f4c 	.word	0x00024f4c

0001c8c4 <restore_non_core_regs>:
   1c8c4:	6803      	ldr	r3, [r0, #0]
   1c8c6:	07da      	lsls	r2, r3, #31
   1c8c8:	b510      	push	{r4, lr}
   1c8ca:	4604      	mov	r4, r0
   1c8cc:	d406      	bmi.n	1c8dc <restore_non_core_regs+0x18>
   1c8ce:	079b      	lsls	r3, r3, #30
   1c8d0:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1c8d4:	d509      	bpl.n	1c8ea <restore_non_core_regs+0x26>
   1c8d6:	f000 fc51 	bl	1d17c <__gnu_Unwind_Restore_VFP_D>
   1c8da:	6823      	ldr	r3, [r4, #0]
   1c8dc:	0759      	lsls	r1, r3, #29
   1c8de:	d509      	bpl.n	1c8f4 <restore_non_core_regs+0x30>
   1c8e0:	071a      	lsls	r2, r3, #28
   1c8e2:	d50e      	bpl.n	1c902 <restore_non_core_regs+0x3e>
   1c8e4:	06db      	lsls	r3, r3, #27
   1c8e6:	d513      	bpl.n	1c910 <restore_non_core_regs+0x4c>
   1c8e8:	bd10      	pop	{r4, pc}
   1c8ea:	f000 fc3f 	bl	1d16c <__gnu_Unwind_Restore_VFP>
   1c8ee:	6823      	ldr	r3, [r4, #0]
   1c8f0:	0759      	lsls	r1, r3, #29
   1c8f2:	d4f5      	bmi.n	1c8e0 <restore_non_core_regs+0x1c>
   1c8f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1c8f8:	f000 fc48 	bl	1d18c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1c8fc:	6823      	ldr	r3, [r4, #0]
   1c8fe:	071a      	lsls	r2, r3, #28
   1c900:	d4f0      	bmi.n	1c8e4 <restore_non_core_regs+0x20>
   1c902:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1c906:	f000 fc49 	bl	1d19c <__gnu_Unwind_Restore_WMMXD>
   1c90a:	6823      	ldr	r3, [r4, #0]
   1c90c:	06db      	lsls	r3, r3, #27
   1c90e:	d4eb      	bmi.n	1c8e8 <restore_non_core_regs+0x24>
   1c910:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1c914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c918:	f000 bc84 	b.w	1d224 <__gnu_Unwind_Restore_WMMXC>

0001c91c <_Unwind_decode_typeinfo_ptr.isra.0>:
   1c91c:	6803      	ldr	r3, [r0, #0]
   1c91e:	b103      	cbz	r3, 1c922 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1c920:	4403      	add	r3, r0
   1c922:	4618      	mov	r0, r3
   1c924:	4770      	bx	lr
   1c926:	bf00      	nop

0001c928 <__gnu_unwind_24bit.isra.1>:
   1c928:	2009      	movs	r0, #9
   1c92a:	4770      	bx	lr

0001c92c <_Unwind_DebugHook>:
   1c92c:	4770      	bx	lr
   1c92e:	bf00      	nop

0001c930 <unwind_phase2>:
   1c930:	b570      	push	{r4, r5, r6, lr}
   1c932:	4604      	mov	r4, r0
   1c934:	460d      	mov	r5, r1
   1c936:	e008      	b.n	1c94a <unwind_phase2+0x1a>
   1c938:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1c93a:	6163      	str	r3, [r4, #20]
   1c93c:	462a      	mov	r2, r5
   1c93e:	6923      	ldr	r3, [r4, #16]
   1c940:	4621      	mov	r1, r4
   1c942:	2001      	movs	r0, #1
   1c944:	4798      	blx	r3
   1c946:	2808      	cmp	r0, #8
   1c948:	d108      	bne.n	1c95c <unwind_phase2+0x2c>
   1c94a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c94c:	4620      	mov	r0, r4
   1c94e:	f7ff ff69 	bl	1c824 <get_eit_entry>
   1c952:	4606      	mov	r6, r0
   1c954:	2800      	cmp	r0, #0
   1c956:	d0ef      	beq.n	1c938 <unwind_phase2+0x8>
   1c958:	f000 fe94 	bl	1d684 <abort>
   1c95c:	2807      	cmp	r0, #7
   1c95e:	d1fb      	bne.n	1c958 <unwind_phase2+0x28>
   1c960:	4630      	mov	r0, r6
   1c962:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c964:	f7ff ffe2 	bl	1c92c <_Unwind_DebugHook>
   1c968:	1d28      	adds	r0, r5, #4
   1c96a:	f000 fbf3 	bl	1d154 <__restore_core_regs>
   1c96e:	bf00      	nop

0001c970 <unwind_phase2_forced>:
   1c970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c974:	1d0c      	adds	r4, r1, #4
   1c976:	4605      	mov	r5, r0
   1c978:	4692      	mov	sl, r2
   1c97a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c97c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1c980:	ae03      	add	r6, sp, #12
   1c982:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c986:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c98a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c98c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1c990:	ac02      	add	r4, sp, #8
   1c992:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1c996:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c99a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1c99e:	2300      	movs	r3, #0
   1c9a0:	4628      	mov	r0, r5
   1c9a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c9a4:	6023      	str	r3, [r4, #0]
   1c9a6:	f7ff ff3d 	bl	1c824 <get_eit_entry>
   1c9aa:	f1ba 0f00 	cmp.w	sl, #0
   1c9ae:	4607      	mov	r7, r0
   1c9b0:	bf14      	ite	ne
   1c9b2:	260a      	movne	r6, #10
   1c9b4:	2609      	moveq	r6, #9
   1c9b6:	b17f      	cbz	r7, 1c9d8 <unwind_phase2_forced+0x68>
   1c9b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c9ba:	f046 0110 	orr.w	r1, r6, #16
   1c9be:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c9c2:	462a      	mov	r2, r5
   1c9c4:	6463      	str	r3, [r4, #68]	; 0x44
   1c9c6:	2001      	movs	r0, #1
   1c9c8:	462b      	mov	r3, r5
   1c9ca:	47c0      	blx	r8
   1c9cc:	bb78      	cbnz	r0, 1ca2e <unwind_phase2_forced+0xbe>
   1c9ce:	4638      	mov	r0, r7
   1c9d0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c9d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c9da:	616b      	str	r3, [r5, #20]
   1c9dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c9e0:	4621      	mov	r1, r4
   1c9e2:	a87a      	add	r0, sp, #488	; 0x1e8
   1c9e4:	f001 fc54 	bl	1e290 <memcpy>
   1c9e8:	692b      	ldr	r3, [r5, #16]
   1c9ea:	aa7a      	add	r2, sp, #488	; 0x1e8
   1c9ec:	4629      	mov	r1, r5
   1c9ee:	4630      	mov	r0, r6
   1c9f0:	4798      	blx	r3
   1c9f2:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1c9f4:	4682      	mov	sl, r0
   1c9f6:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c9fa:	4631      	mov	r1, r6
   1c9fc:	6463      	str	r3, [r4, #68]	; 0x44
   1c9fe:	462a      	mov	r2, r5
   1ca00:	462b      	mov	r3, r5
   1ca02:	2001      	movs	r0, #1
   1ca04:	47c0      	blx	r8
   1ca06:	b990      	cbnz	r0, 1ca2e <unwind_phase2_forced+0xbe>
   1ca08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1ca0c:	a97a      	add	r1, sp, #488	; 0x1e8
   1ca0e:	4620      	mov	r0, r4
   1ca10:	f001 fc3e 	bl	1e290 <memcpy>
   1ca14:	f1ba 0f08 	cmp.w	sl, #8
   1ca18:	d106      	bne.n	1ca28 <unwind_phase2_forced+0xb8>
   1ca1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1ca1c:	4628      	mov	r0, r5
   1ca1e:	f7ff ff01 	bl	1c824 <get_eit_entry>
   1ca22:	2609      	movs	r6, #9
   1ca24:	4607      	mov	r7, r0
   1ca26:	e7c6      	b.n	1c9b6 <unwind_phase2_forced+0x46>
   1ca28:	f1ba 0f07 	cmp.w	sl, #7
   1ca2c:	d005      	beq.n	1ca3a <unwind_phase2_forced+0xca>
   1ca2e:	2709      	movs	r7, #9
   1ca30:	4638      	mov	r0, r7
   1ca32:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1ca36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ca3a:	4638      	mov	r0, r7
   1ca3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1ca3e:	f7ff ff75 	bl	1c92c <_Unwind_DebugHook>
   1ca42:	a803      	add	r0, sp, #12
   1ca44:	f000 fb86 	bl	1d154 <__restore_core_regs>

0001ca48 <_Unwind_GetCFA>:
   1ca48:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1ca4a:	4770      	bx	lr

0001ca4c <__gnu_Unwind_RaiseException>:
   1ca4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca4e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1ca50:	640b      	str	r3, [r1, #64]	; 0x40
   1ca52:	1d0e      	adds	r6, r1, #4
   1ca54:	460f      	mov	r7, r1
   1ca56:	4604      	mov	r4, r0
   1ca58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ca5a:	b0f9      	sub	sp, #484	; 0x1e4
   1ca5c:	ad01      	add	r5, sp, #4
   1ca5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ca60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ca62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ca64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ca66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ca68:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1ca6c:	f04f 36ff 	mov.w	r6, #4294967295
   1ca70:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1ca74:	9600      	str	r6, [sp, #0]
   1ca76:	e006      	b.n	1ca86 <__gnu_Unwind_RaiseException+0x3a>
   1ca78:	6923      	ldr	r3, [r4, #16]
   1ca7a:	466a      	mov	r2, sp
   1ca7c:	4621      	mov	r1, r4
   1ca7e:	4798      	blx	r3
   1ca80:	2808      	cmp	r0, #8
   1ca82:	4605      	mov	r5, r0
   1ca84:	d108      	bne.n	1ca98 <__gnu_Unwind_RaiseException+0x4c>
   1ca86:	9910      	ldr	r1, [sp, #64]	; 0x40
   1ca88:	4620      	mov	r0, r4
   1ca8a:	f7ff fecb 	bl	1c824 <get_eit_entry>
   1ca8e:	2800      	cmp	r0, #0
   1ca90:	d0f2      	beq.n	1ca78 <__gnu_Unwind_RaiseException+0x2c>
   1ca92:	2009      	movs	r0, #9
   1ca94:	b079      	add	sp, #484	; 0x1e4
   1ca96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca98:	4668      	mov	r0, sp
   1ca9a:	f7ff ff13 	bl	1c8c4 <restore_non_core_regs>
   1ca9e:	2d06      	cmp	r5, #6
   1caa0:	d1f7      	bne.n	1ca92 <__gnu_Unwind_RaiseException+0x46>
   1caa2:	4639      	mov	r1, r7
   1caa4:	4620      	mov	r0, r4
   1caa6:	f7ff ff43 	bl	1c930 <unwind_phase2>
   1caaa:	bf00      	nop

0001caac <__gnu_Unwind_ForcedUnwind>:
   1caac:	b430      	push	{r4, r5}
   1caae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1cab0:	60c1      	str	r1, [r0, #12]
   1cab2:	6182      	str	r2, [r0, #24]
   1cab4:	4619      	mov	r1, r3
   1cab6:	641d      	str	r5, [r3, #64]	; 0x40
   1cab8:	2200      	movs	r2, #0
   1caba:	bc30      	pop	{r4, r5}
   1cabc:	e758      	b.n	1c970 <unwind_phase2_forced>
   1cabe:	bf00      	nop

0001cac0 <__gnu_Unwind_Resume>:
   1cac0:	b570      	push	{r4, r5, r6, lr}
   1cac2:	68c6      	ldr	r6, [r0, #12]
   1cac4:	6943      	ldr	r3, [r0, #20]
   1cac6:	640b      	str	r3, [r1, #64]	; 0x40
   1cac8:	b126      	cbz	r6, 1cad4 <__gnu_Unwind_Resume+0x14>
   1caca:	2201      	movs	r2, #1
   1cacc:	f7ff ff50 	bl	1c970 <unwind_phase2_forced>
   1cad0:	f000 fdd8 	bl	1d684 <abort>
   1cad4:	6903      	ldr	r3, [r0, #16]
   1cad6:	460a      	mov	r2, r1
   1cad8:	4604      	mov	r4, r0
   1cada:	460d      	mov	r5, r1
   1cadc:	4601      	mov	r1, r0
   1cade:	2002      	movs	r0, #2
   1cae0:	4798      	blx	r3
   1cae2:	2807      	cmp	r0, #7
   1cae4:	d007      	beq.n	1caf6 <__gnu_Unwind_Resume+0x36>
   1cae6:	2808      	cmp	r0, #8
   1cae8:	d103      	bne.n	1caf2 <__gnu_Unwind_Resume+0x32>
   1caea:	4629      	mov	r1, r5
   1caec:	4620      	mov	r0, r4
   1caee:	f7ff ff1f 	bl	1c930 <unwind_phase2>
   1caf2:	f000 fdc7 	bl	1d684 <abort>
   1caf6:	4630      	mov	r0, r6
   1caf8:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cafa:	f7ff ff17 	bl	1c92c <_Unwind_DebugHook>
   1cafe:	1d28      	adds	r0, r5, #4
   1cb00:	f000 fb28 	bl	1d154 <__restore_core_regs>

0001cb04 <__gnu_Unwind_Resume_or_Rethrow>:
   1cb04:	68c2      	ldr	r2, [r0, #12]
   1cb06:	b11a      	cbz	r2, 1cb10 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1cb08:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1cb0a:	640a      	str	r2, [r1, #64]	; 0x40
   1cb0c:	2200      	movs	r2, #0
   1cb0e:	e72f      	b.n	1c970 <unwind_phase2_forced>
   1cb10:	e79c      	b.n	1ca4c <__gnu_Unwind_RaiseException>
   1cb12:	bf00      	nop

0001cb14 <_Unwind_Complete>:
   1cb14:	4770      	bx	lr
   1cb16:	bf00      	nop

0001cb18 <_Unwind_DeleteException>:
   1cb18:	6883      	ldr	r3, [r0, #8]
   1cb1a:	b113      	cbz	r3, 1cb22 <_Unwind_DeleteException+0xa>
   1cb1c:	4601      	mov	r1, r0
   1cb1e:	2001      	movs	r0, #1
   1cb20:	4718      	bx	r3
   1cb22:	4770      	bx	lr

0001cb24 <_Unwind_VRS_Get>:
   1cb24:	b500      	push	{lr}
   1cb26:	2904      	cmp	r1, #4
   1cb28:	d807      	bhi.n	1cb3a <_Unwind_VRS_Get+0x16>
   1cb2a:	e8df f001 	tbb	[pc, r1]
   1cb2e:	0903      	.short	0x0903
   1cb30:	0906      	.short	0x0906
   1cb32:	09          	.byte	0x09
   1cb33:	00          	.byte	0x00
   1cb34:	b90b      	cbnz	r3, 1cb3a <_Unwind_VRS_Get+0x16>
   1cb36:	2a0f      	cmp	r2, #15
   1cb38:	d905      	bls.n	1cb46 <_Unwind_VRS_Get+0x22>
   1cb3a:	2002      	movs	r0, #2
   1cb3c:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb40:	2001      	movs	r0, #1
   1cb42:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb46:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cb4a:	4618      	mov	r0, r3
   1cb4c:	6853      	ldr	r3, [r2, #4]
   1cb4e:	9a01      	ldr	r2, [sp, #4]
   1cb50:	6013      	str	r3, [r2, #0]
   1cb52:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb56:	bf00      	nop

0001cb58 <_Unwind_GetGR>:
   1cb58:	b510      	push	{r4, lr}
   1cb5a:	b084      	sub	sp, #16
   1cb5c:	2300      	movs	r3, #0
   1cb5e:	ac03      	add	r4, sp, #12
   1cb60:	460a      	mov	r2, r1
   1cb62:	9400      	str	r4, [sp, #0]
   1cb64:	4619      	mov	r1, r3
   1cb66:	f7ff ffdd 	bl	1cb24 <_Unwind_VRS_Get>
   1cb6a:	9803      	ldr	r0, [sp, #12]
   1cb6c:	b004      	add	sp, #16
   1cb6e:	bd10      	pop	{r4, pc}

0001cb70 <_Unwind_VRS_Set>:
   1cb70:	b500      	push	{lr}
   1cb72:	2904      	cmp	r1, #4
   1cb74:	d807      	bhi.n	1cb86 <_Unwind_VRS_Set+0x16>
   1cb76:	e8df f001 	tbb	[pc, r1]
   1cb7a:	0903      	.short	0x0903
   1cb7c:	0906      	.short	0x0906
   1cb7e:	09          	.byte	0x09
   1cb7f:	00          	.byte	0x00
   1cb80:	b90b      	cbnz	r3, 1cb86 <_Unwind_VRS_Set+0x16>
   1cb82:	2a0f      	cmp	r2, #15
   1cb84:	d905      	bls.n	1cb92 <_Unwind_VRS_Set+0x22>
   1cb86:	2002      	movs	r0, #2
   1cb88:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb8c:	2001      	movs	r0, #1
   1cb8e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb92:	9901      	ldr	r1, [sp, #4]
   1cb94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cb98:	6809      	ldr	r1, [r1, #0]
   1cb9a:	6051      	str	r1, [r2, #4]
   1cb9c:	4618      	mov	r0, r3
   1cb9e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cba2:	bf00      	nop

0001cba4 <_Unwind_SetGR>:
   1cba4:	b510      	push	{r4, lr}
   1cba6:	b084      	sub	sp, #16
   1cba8:	ac04      	add	r4, sp, #16
   1cbaa:	2300      	movs	r3, #0
   1cbac:	f844 2d04 	str.w	r2, [r4, #-4]!
   1cbb0:	460a      	mov	r2, r1
   1cbb2:	9400      	str	r4, [sp, #0]
   1cbb4:	4619      	mov	r1, r3
   1cbb6:	f7ff ffdb 	bl	1cb70 <_Unwind_VRS_Set>
   1cbba:	b004      	add	sp, #16
   1cbbc:	bd10      	pop	{r4, pc}
   1cbbe:	bf00      	nop

0001cbc0 <__gnu_Unwind_Backtrace>:
   1cbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbc2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1cbc4:	6413      	str	r3, [r2, #64]	; 0x40
   1cbc6:	1d15      	adds	r5, r2, #4
   1cbc8:	4607      	mov	r7, r0
   1cbca:	460e      	mov	r6, r1
   1cbcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cbce:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1cbd2:	ac17      	add	r4, sp, #92	; 0x5c
   1cbd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cbd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cbd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cbda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cbdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cbde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cbe2:	f04f 35ff 	mov.w	r5, #4294967295
   1cbe6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1cbea:	9516      	str	r5, [sp, #88]	; 0x58
   1cbec:	e010      	b.n	1cc10 <__gnu_Unwind_Backtrace+0x50>
   1cbee:	a816      	add	r0, sp, #88	; 0x58
   1cbf0:	f7ff ffd8 	bl	1cba4 <_Unwind_SetGR>
   1cbf4:	4631      	mov	r1, r6
   1cbf6:	a816      	add	r0, sp, #88	; 0x58
   1cbf8:	47b8      	blx	r7
   1cbfa:	aa16      	add	r2, sp, #88	; 0x58
   1cbfc:	4669      	mov	r1, sp
   1cbfe:	b978      	cbnz	r0, 1cc20 <__gnu_Unwind_Backtrace+0x60>
   1cc00:	9b04      	ldr	r3, [sp, #16]
   1cc02:	2008      	movs	r0, #8
   1cc04:	4798      	blx	r3
   1cc06:	2805      	cmp	r0, #5
   1cc08:	4604      	mov	r4, r0
   1cc0a:	d00a      	beq.n	1cc22 <__gnu_Unwind_Backtrace+0x62>
   1cc0c:	2809      	cmp	r0, #9
   1cc0e:	d007      	beq.n	1cc20 <__gnu_Unwind_Backtrace+0x60>
   1cc10:	9926      	ldr	r1, [sp, #152]	; 0x98
   1cc12:	4668      	mov	r0, sp
   1cc14:	f7ff fe06 	bl	1c824 <get_eit_entry>
   1cc18:	466a      	mov	r2, sp
   1cc1a:	210c      	movs	r1, #12
   1cc1c:	2800      	cmp	r0, #0
   1cc1e:	d0e6      	beq.n	1cbee <__gnu_Unwind_Backtrace+0x2e>
   1cc20:	2409      	movs	r4, #9
   1cc22:	a816      	add	r0, sp, #88	; 0x58
   1cc24:	f7ff fe4e 	bl	1c8c4 <restore_non_core_regs>
   1cc28:	4620      	mov	r0, r4
   1cc2a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1cc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cc30 <__gnu_unwind_pr_common>:
   1cc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc34:	460d      	mov	r5, r1
   1cc36:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1cc38:	b08b      	sub	sp, #44	; 0x2c
   1cc3a:	1d0c      	adds	r4, r1, #4
   1cc3c:	6809      	ldr	r1, [r1, #0]
   1cc3e:	9107      	str	r1, [sp, #28]
   1cc40:	4691      	mov	r9, r2
   1cc42:	9408      	str	r4, [sp, #32]
   1cc44:	f000 0b03 	and.w	fp, r0, #3
   1cc48:	461e      	mov	r6, r3
   1cc4a:	2b00      	cmp	r3, #0
   1cc4c:	d160      	bne.n	1cd10 <__gnu_unwind_pr_common+0xe0>
   1cc4e:	0209      	lsls	r1, r1, #8
   1cc50:	2303      	movs	r3, #3
   1cc52:	9107      	str	r1, [sp, #28]
   1cc54:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1cc58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cc5c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cc5e:	f1bb 0f02 	cmp.w	fp, #2
   1cc62:	bf08      	it	eq
   1cc64:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1cc66:	f013 0301 	ands.w	r3, r3, #1
   1cc6a:	d140      	bne.n	1ccee <__gnu_unwind_pr_common+0xbe>
   1cc6c:	9301      	str	r3, [sp, #4]
   1cc6e:	f000 0308 	and.w	r3, r0, #8
   1cc72:	9303      	str	r3, [sp, #12]
   1cc74:	f8d4 8000 	ldr.w	r8, [r4]
   1cc78:	f1b8 0f00 	cmp.w	r8, #0
   1cc7c:	d039      	beq.n	1ccf2 <__gnu_unwind_pr_common+0xc2>
   1cc7e:	2e02      	cmp	r6, #2
   1cc80:	d043      	beq.n	1cd0a <__gnu_unwind_pr_common+0xda>
   1cc82:	f8b4 8000 	ldrh.w	r8, [r4]
   1cc86:	8867      	ldrh	r7, [r4, #2]
   1cc88:	3404      	adds	r4, #4
   1cc8a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1cc8c:	f027 0a01 	bic.w	sl, r7, #1
   1cc90:	210f      	movs	r1, #15
   1cc92:	4648      	mov	r0, r9
   1cc94:	449a      	add	sl, r3
   1cc96:	f7ff ff5f 	bl	1cb58 <_Unwind_GetGR>
   1cc9a:	4582      	cmp	sl, r0
   1cc9c:	d833      	bhi.n	1cd06 <__gnu_unwind_pr_common+0xd6>
   1cc9e:	f028 0301 	bic.w	r3, r8, #1
   1cca2:	449a      	add	sl, r3
   1cca4:	4550      	cmp	r0, sl
   1cca6:	bf2c      	ite	cs
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	2001      	movcc	r0, #1
   1ccac:	007f      	lsls	r7, r7, #1
   1ccae:	f007 0702 	and.w	r7, r7, #2
   1ccb2:	f008 0801 	and.w	r8, r8, #1
   1ccb6:	ea47 0708 	orr.w	r7, r7, r8
   1ccba:	2f01      	cmp	r7, #1
   1ccbc:	d03e      	beq.n	1cd3c <__gnu_unwind_pr_common+0x10c>
   1ccbe:	d335      	bcc.n	1cd2c <__gnu_unwind_pr_common+0xfc>
   1ccc0:	2f02      	cmp	r7, #2
   1ccc2:	d11c      	bne.n	1ccfe <__gnu_unwind_pr_common+0xce>
   1ccc4:	6823      	ldr	r3, [r4, #0]
   1ccc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1ccca:	9202      	str	r2, [sp, #8]
   1cccc:	f1bb 0f00 	cmp.w	fp, #0
   1ccd0:	d176      	bne.n	1cdc0 <__gnu_unwind_pr_common+0x190>
   1ccd2:	b128      	cbz	r0, 1cce0 <__gnu_unwind_pr_common+0xb0>
   1ccd4:	9903      	ldr	r1, [sp, #12]
   1ccd6:	2900      	cmp	r1, #0
   1ccd8:	d07e      	beq.n	1cdd8 <__gnu_unwind_pr_common+0x1a8>
   1ccda:	2a00      	cmp	r2, #0
   1ccdc:	f000 80a6 	beq.w	1ce2c <__gnu_unwind_pr_common+0x1fc>
   1cce0:	2b00      	cmp	r3, #0
   1cce2:	db77      	blt.n	1cdd4 <__gnu_unwind_pr_common+0x1a4>
   1cce4:	9b02      	ldr	r3, [sp, #8]
   1cce6:	3301      	adds	r3, #1
   1cce8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1ccec:	e7c2      	b.n	1cc74 <__gnu_unwind_pr_common+0x44>
   1ccee:	2300      	movs	r3, #0
   1ccf0:	9301      	str	r3, [sp, #4]
   1ccf2:	2e02      	cmp	r6, #2
   1ccf4:	dd3e      	ble.n	1cd74 <__gnu_unwind_pr_common+0x144>
   1ccf6:	f7ff fe17 	bl	1c928 <__gnu_unwind_24bit.isra.1>
   1ccfa:	2800      	cmp	r0, #0
   1ccfc:	d040      	beq.n	1cd80 <__gnu_unwind_pr_common+0x150>
   1ccfe:	2009      	movs	r0, #9
   1cd00:	b00b      	add	sp, #44	; 0x2c
   1cd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd06:	2000      	movs	r0, #0
   1cd08:	e7d0      	b.n	1ccac <__gnu_unwind_pr_common+0x7c>
   1cd0a:	6867      	ldr	r7, [r4, #4]
   1cd0c:	3408      	adds	r4, #8
   1cd0e:	e7bc      	b.n	1cc8a <__gnu_unwind_pr_common+0x5a>
   1cd10:	2b02      	cmp	r3, #2
   1cd12:	dca3      	bgt.n	1cc5c <__gnu_unwind_pr_common+0x2c>
   1cd14:	0c0b      	lsrs	r3, r1, #16
   1cd16:	b2da      	uxtb	r2, r3
   1cd18:	0409      	lsls	r1, r1, #16
   1cd1a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1cd1e:	2302      	movs	r3, #2
   1cd20:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1cd24:	9107      	str	r1, [sp, #28]
   1cd26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cd2a:	e797      	b.n	1cc5c <__gnu_unwind_pr_common+0x2c>
   1cd2c:	f1bb 0f00 	cmp.w	fp, #0
   1cd30:	d002      	beq.n	1cd38 <__gnu_unwind_pr_common+0x108>
   1cd32:	2800      	cmp	r0, #0
   1cd34:	f040 80bd 	bne.w	1ceb2 <__gnu_unwind_pr_common+0x282>
   1cd38:	3404      	adds	r4, #4
   1cd3a:	e79b      	b.n	1cc74 <__gnu_unwind_pr_common+0x44>
   1cd3c:	f1bb 0f00 	cmp.w	fp, #0
   1cd40:	d125      	bne.n	1cd8e <__gnu_unwind_pr_common+0x15e>
   1cd42:	b1a8      	cbz	r0, 1cd70 <__gnu_unwind_pr_common+0x140>
   1cd44:	e894 000c 	ldmia.w	r4, {r2, r3}
   1cd48:	1c99      	adds	r1, r3, #2
   1cd4a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1cd4e:	d0d6      	beq.n	1ccfe <__gnu_unwind_pr_common+0xce>
   1cd50:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1cd54:	3301      	adds	r3, #1
   1cd56:	9106      	str	r1, [sp, #24]
   1cd58:	f000 80a3 	beq.w	1cea2 <__gnu_unwind_pr_common+0x272>
   1cd5c:	1d20      	adds	r0, r4, #4
   1cd5e:	f7ff fddd 	bl	1c91c <_Unwind_decode_typeinfo_ptr.isra.0>
   1cd62:	ab06      	add	r3, sp, #24
   1cd64:	4601      	mov	r1, r0
   1cd66:	4628      	mov	r0, r5
   1cd68:	f7f6 fe00 	bl	1396c <__cxa_type_match>
   1cd6c:	2800      	cmp	r0, #0
   1cd6e:	d177      	bne.n	1ce60 <__gnu_unwind_pr_common+0x230>
   1cd70:	3408      	adds	r4, #8
   1cd72:	e77f      	b.n	1cc74 <__gnu_unwind_pr_common+0x44>
   1cd74:	a907      	add	r1, sp, #28
   1cd76:	4648      	mov	r0, r9
   1cd78:	f000 faee 	bl	1d358 <__gnu_unwind_execute>
   1cd7c:	2800      	cmp	r0, #0
   1cd7e:	d1be      	bne.n	1ccfe <__gnu_unwind_pr_common+0xce>
   1cd80:	9b01      	ldr	r3, [sp, #4]
   1cd82:	2b00      	cmp	r3, #0
   1cd84:	d15c      	bne.n	1ce40 <__gnu_unwind_pr_common+0x210>
   1cd86:	2008      	movs	r0, #8
   1cd88:	b00b      	add	sp, #44	; 0x2c
   1cd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd8e:	210d      	movs	r1, #13
   1cd90:	4648      	mov	r0, r9
   1cd92:	6a2f      	ldr	r7, [r5, #32]
   1cd94:	f7ff fee0 	bl	1cb58 <_Unwind_GetGR>
   1cd98:	4287      	cmp	r7, r0
   1cd9a:	d1e9      	bne.n	1cd70 <__gnu_unwind_pr_common+0x140>
   1cd9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cd9e:	429c      	cmp	r4, r3
   1cda0:	d1e6      	bne.n	1cd70 <__gnu_unwind_pr_common+0x140>
   1cda2:	4620      	mov	r0, r4
   1cda4:	f7ff fcf0 	bl	1c788 <selfrel_offset31>
   1cda8:	210f      	movs	r1, #15
   1cdaa:	4602      	mov	r2, r0
   1cdac:	4648      	mov	r0, r9
   1cdae:	f7ff fef9 	bl	1cba4 <_Unwind_SetGR>
   1cdb2:	4648      	mov	r0, r9
   1cdb4:	462a      	mov	r2, r5
   1cdb6:	2100      	movs	r1, #0
   1cdb8:	f7ff fef4 	bl	1cba4 <_Unwind_SetGR>
   1cdbc:	2007      	movs	r0, #7
   1cdbe:	e79f      	b.n	1cd00 <__gnu_unwind_pr_common+0xd0>
   1cdc0:	210d      	movs	r1, #13
   1cdc2:	4648      	mov	r0, r9
   1cdc4:	6a2f      	ldr	r7, [r5, #32]
   1cdc6:	f7ff fec7 	bl	1cb58 <_Unwind_GetGR>
   1cdca:	4287      	cmp	r7, r0
   1cdcc:	d058      	beq.n	1ce80 <__gnu_unwind_pr_common+0x250>
   1cdce:	6823      	ldr	r3, [r4, #0]
   1cdd0:	2b00      	cmp	r3, #0
   1cdd2:	da87      	bge.n	1cce4 <__gnu_unwind_pr_common+0xb4>
   1cdd4:	3404      	adds	r4, #4
   1cdd6:	e785      	b.n	1cce4 <__gnu_unwind_pr_common+0xb4>
   1cdd8:	9b02      	ldr	r3, [sp, #8]
   1cdda:	b33b      	cbz	r3, 1ce2c <__gnu_unwind_pr_common+0x1fc>
   1cddc:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1cde0:	1d27      	adds	r7, r4, #4
   1cde2:	f8cd b010 	str.w	fp, [sp, #16]
   1cde6:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1cdea:	f8dd a008 	ldr.w	sl, [sp, #8]
   1cdee:	9605      	str	r6, [sp, #20]
   1cdf0:	46a3      	mov	fp, r4
   1cdf2:	461c      	mov	r4, r3
   1cdf4:	e002      	b.n	1cdfc <__gnu_unwind_pr_common+0x1cc>
   1cdf6:	45b2      	cmp	sl, r6
   1cdf8:	46b0      	mov	r8, r6
   1cdfa:	d016      	beq.n	1ce2a <__gnu_unwind_pr_common+0x1fa>
   1cdfc:	4638      	mov	r0, r7
   1cdfe:	9406      	str	r4, [sp, #24]
   1ce00:	f7ff fd8c 	bl	1c91c <_Unwind_decode_typeinfo_ptr.isra.0>
   1ce04:	ab06      	add	r3, sp, #24
   1ce06:	4601      	mov	r1, r0
   1ce08:	2200      	movs	r2, #0
   1ce0a:	4628      	mov	r0, r5
   1ce0c:	f7f6 fdae 	bl	1396c <__cxa_type_match>
   1ce10:	f108 0601 	add.w	r6, r8, #1
   1ce14:	3704      	adds	r7, #4
   1ce16:	2800      	cmp	r0, #0
   1ce18:	d0ed      	beq.n	1cdf6 <__gnu_unwind_pr_common+0x1c6>
   1ce1a:	9b02      	ldr	r3, [sp, #8]
   1ce1c:	9e05      	ldr	r6, [sp, #20]
   1ce1e:	4543      	cmp	r3, r8
   1ce20:	465c      	mov	r4, fp
   1ce22:	f8dd b010 	ldr.w	fp, [sp, #16]
   1ce26:	d1d2      	bne.n	1cdce <__gnu_unwind_pr_common+0x19e>
   1ce28:	e000      	b.n	1ce2c <__gnu_unwind_pr_common+0x1fc>
   1ce2a:	465c      	mov	r4, fp
   1ce2c:	4648      	mov	r0, r9
   1ce2e:	210d      	movs	r1, #13
   1ce30:	f7ff fe92 	bl	1cb58 <_Unwind_GetGR>
   1ce34:	9b06      	ldr	r3, [sp, #24]
   1ce36:	6228      	str	r0, [r5, #32]
   1ce38:	62ac      	str	r4, [r5, #40]	; 0x28
   1ce3a:	626b      	str	r3, [r5, #36]	; 0x24
   1ce3c:	2006      	movs	r0, #6
   1ce3e:	e75f      	b.n	1cd00 <__gnu_unwind_pr_common+0xd0>
   1ce40:	210f      	movs	r1, #15
   1ce42:	4648      	mov	r0, r9
   1ce44:	f7ff fe88 	bl	1cb58 <_Unwind_GetGR>
   1ce48:	210e      	movs	r1, #14
   1ce4a:	4602      	mov	r2, r0
   1ce4c:	4648      	mov	r0, r9
   1ce4e:	f7ff fea9 	bl	1cba4 <_Unwind_SetGR>
   1ce52:	4648      	mov	r0, r9
   1ce54:	4a29      	ldr	r2, [pc, #164]	; (1cefc <__gnu_unwind_pr_common+0x2cc>)
   1ce56:	210f      	movs	r1, #15
   1ce58:	f7ff fea4 	bl	1cba4 <_Unwind_SetGR>
   1ce5c:	2007      	movs	r0, #7
   1ce5e:	e74f      	b.n	1cd00 <__gnu_unwind_pr_common+0xd0>
   1ce60:	4607      	mov	r7, r0
   1ce62:	210d      	movs	r1, #13
   1ce64:	4648      	mov	r0, r9
   1ce66:	f7ff fe77 	bl	1cb58 <_Unwind_GetGR>
   1ce6a:	2f02      	cmp	r7, #2
   1ce6c:	6228      	str	r0, [r5, #32]
   1ce6e:	d11d      	bne.n	1ceac <__gnu_unwind_pr_common+0x27c>
   1ce70:	462b      	mov	r3, r5
   1ce72:	9a06      	ldr	r2, [sp, #24]
   1ce74:	f843 2f2c 	str.w	r2, [r3, #44]!
   1ce78:	626b      	str	r3, [r5, #36]	; 0x24
   1ce7a:	62ac      	str	r4, [r5, #40]	; 0x28
   1ce7c:	2006      	movs	r0, #6
   1ce7e:	e73f      	b.n	1cd00 <__gnu_unwind_pr_common+0xd0>
   1ce80:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ce82:	429c      	cmp	r4, r3
   1ce84:	d1a3      	bne.n	1cdce <__gnu_unwind_pr_common+0x19e>
   1ce86:	2204      	movs	r2, #4
   1ce88:	2700      	movs	r7, #0
   1ce8a:	18a3      	adds	r3, r4, r2
   1ce8c:	9902      	ldr	r1, [sp, #8]
   1ce8e:	62a9      	str	r1, [r5, #40]	; 0x28
   1ce90:	62ef      	str	r7, [r5, #44]	; 0x2c
   1ce92:	632a      	str	r2, [r5, #48]	; 0x30
   1ce94:	636b      	str	r3, [r5, #52]	; 0x34
   1ce96:	6823      	ldr	r3, [r4, #0]
   1ce98:	42bb      	cmp	r3, r7
   1ce9a:	db1d      	blt.n	1ced8 <__gnu_unwind_pr_common+0x2a8>
   1ce9c:	2301      	movs	r3, #1
   1ce9e:	9301      	str	r3, [sp, #4]
   1cea0:	e720      	b.n	1cce4 <__gnu_unwind_pr_common+0xb4>
   1cea2:	4648      	mov	r0, r9
   1cea4:	210d      	movs	r1, #13
   1cea6:	f7ff fe57 	bl	1cb58 <_Unwind_GetGR>
   1ceaa:	6228      	str	r0, [r5, #32]
   1ceac:	9b06      	ldr	r3, [sp, #24]
   1ceae:	626b      	str	r3, [r5, #36]	; 0x24
   1ceb0:	e7e3      	b.n	1ce7a <__gnu_unwind_pr_common+0x24a>
   1ceb2:	4620      	mov	r0, r4
   1ceb4:	f7ff fc68 	bl	1c788 <selfrel_offset31>
   1ceb8:	3404      	adds	r4, #4
   1ceba:	4606      	mov	r6, r0
   1cebc:	63ac      	str	r4, [r5, #56]	; 0x38
   1cebe:	4628      	mov	r0, r5
   1cec0:	f7f6 fdb0 	bl	13a24 <__cxa_begin_cleanup>
   1cec4:	2800      	cmp	r0, #0
   1cec6:	f43f af1a 	beq.w	1ccfe <__gnu_unwind_pr_common+0xce>
   1ceca:	4648      	mov	r0, r9
   1cecc:	4632      	mov	r2, r6
   1cece:	210f      	movs	r1, #15
   1ced0:	f7ff fe68 	bl	1cba4 <_Unwind_SetGR>
   1ced4:	2007      	movs	r0, #7
   1ced6:	e713      	b.n	1cd00 <__gnu_unwind_pr_common+0xd0>
   1ced8:	4608      	mov	r0, r1
   1ceda:	3001      	adds	r0, #1
   1cedc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1cee0:	f7ff fc52 	bl	1c788 <selfrel_offset31>
   1cee4:	210f      	movs	r1, #15
   1cee6:	4602      	mov	r2, r0
   1cee8:	4648      	mov	r0, r9
   1ceea:	f7ff fe5b 	bl	1cba4 <_Unwind_SetGR>
   1ceee:	4648      	mov	r0, r9
   1cef0:	462a      	mov	r2, r5
   1cef2:	4639      	mov	r1, r7
   1cef4:	f7ff fe56 	bl	1cba4 <_Unwind_SetGR>
   1cef8:	2007      	movs	r0, #7
   1cefa:	e701      	b.n	1cd00 <__gnu_unwind_pr_common+0xd0>
   1cefc:	00013b55 	.word	0x00013b55

0001cf00 <__aeabi_unwind_cpp_pr0>:
   1cf00:	2300      	movs	r3, #0
   1cf02:	e695      	b.n	1cc30 <__gnu_unwind_pr_common>

0001cf04 <__aeabi_unwind_cpp_pr1>:
   1cf04:	2301      	movs	r3, #1
   1cf06:	e693      	b.n	1cc30 <__gnu_unwind_pr_common>

0001cf08 <__aeabi_unwind_cpp_pr2>:
   1cf08:	2302      	movs	r3, #2
   1cf0a:	e691      	b.n	1cc30 <__gnu_unwind_pr_common>

0001cf0c <_Unwind_VRS_Pop>:
   1cf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf0e:	4604      	mov	r4, r0
   1cf10:	b0c5      	sub	sp, #276	; 0x114
   1cf12:	2904      	cmp	r1, #4
   1cf14:	d80d      	bhi.n	1cf32 <_Unwind_VRS_Pop+0x26>
   1cf16:	e8df f001 	tbb	[pc, r1]
   1cf1a:	0353      	.short	0x0353
   1cf1c:	310c      	.short	0x310c
   1cf1e:	0f          	.byte	0x0f
   1cf1f:	00          	.byte	0x00
   1cf20:	2b01      	cmp	r3, #1
   1cf22:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1cf26:	b295      	uxth	r5, r2
   1cf28:	d162      	bne.n	1cff0 <_Unwind_VRS_Pop+0xe4>
   1cf2a:	1972      	adds	r2, r6, r5
   1cf2c:	2a10      	cmp	r2, #16
   1cf2e:	f240 809b 	bls.w	1d068 <_Unwind_VRS_Pop+0x15c>
   1cf32:	2002      	movs	r0, #2
   1cf34:	b045      	add	sp, #276	; 0x114
   1cf36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cf38:	2b00      	cmp	r3, #0
   1cf3a:	d1fa      	bne.n	1cf32 <_Unwind_VRS_Pop+0x26>
   1cf3c:	2a10      	cmp	r2, #16
   1cf3e:	d8f8      	bhi.n	1cf32 <_Unwind_VRS_Pop+0x26>
   1cf40:	6823      	ldr	r3, [r4, #0]
   1cf42:	06d8      	lsls	r0, r3, #27
   1cf44:	f100 80c6 	bmi.w	1d0d4 <_Unwind_VRS_Pop+0x1c8>
   1cf48:	ae22      	add	r6, sp, #136	; 0x88
   1cf4a:	4630      	mov	r0, r6
   1cf4c:	9201      	str	r2, [sp, #4]
   1cf4e:	f000 f973 	bl	1d238 <__gnu_Unwind_Save_WMMXC>
   1cf52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cf54:	9a01      	ldr	r2, [sp, #4]
   1cf56:	2300      	movs	r3, #0
   1cf58:	2501      	movs	r5, #1
   1cf5a:	fa05 f103 	lsl.w	r1, r5, r3
   1cf5e:	4211      	tst	r1, r2
   1cf60:	d003      	beq.n	1cf6a <_Unwind_VRS_Pop+0x5e>
   1cf62:	6801      	ldr	r1, [r0, #0]
   1cf64:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1cf68:	3004      	adds	r0, #4
   1cf6a:	3301      	adds	r3, #1
   1cf6c:	2b04      	cmp	r3, #4
   1cf6e:	d1f4      	bne.n	1cf5a <_Unwind_VRS_Pop+0x4e>
   1cf70:	63a0      	str	r0, [r4, #56]	; 0x38
   1cf72:	4630      	mov	r0, r6
   1cf74:	f000 f956 	bl	1d224 <__gnu_Unwind_Restore_WMMXC>
   1cf78:	2000      	movs	r0, #0
   1cf7a:	e7db      	b.n	1cf34 <_Unwind_VRS_Pop+0x28>
   1cf7c:	2b03      	cmp	r3, #3
   1cf7e:	d1d8      	bne.n	1cf32 <_Unwind_VRS_Pop+0x26>
   1cf80:	0c15      	lsrs	r5, r2, #16
   1cf82:	b297      	uxth	r7, r2
   1cf84:	19eb      	adds	r3, r5, r7
   1cf86:	2b10      	cmp	r3, #16
   1cf88:	d8d3      	bhi.n	1cf32 <_Unwind_VRS_Pop+0x26>
   1cf8a:	6823      	ldr	r3, [r4, #0]
   1cf8c:	071e      	lsls	r6, r3, #28
   1cf8e:	f100 80b5 	bmi.w	1d0fc <_Unwind_VRS_Pop+0x1f0>
   1cf92:	ae22      	add	r6, sp, #136	; 0x88
   1cf94:	4630      	mov	r0, r6
   1cf96:	f000 f923 	bl	1d1e0 <__gnu_Unwind_Save_WMMXD>
   1cf9a:	00ed      	lsls	r5, r5, #3
   1cf9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cf9e:	b14f      	cbz	r7, 1cfb4 <_Unwind_VRS_Pop+0xa8>
   1cfa0:	3d04      	subs	r5, #4
   1cfa2:	1971      	adds	r1, r6, r5
   1cfa4:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1cfa8:	f853 2b04 	ldr.w	r2, [r3], #4
   1cfac:	f841 2f04 	str.w	r2, [r1, #4]!
   1cfb0:	4283      	cmp	r3, r0
   1cfb2:	d1f9      	bne.n	1cfa8 <_Unwind_VRS_Pop+0x9c>
   1cfb4:	4630      	mov	r0, r6
   1cfb6:	63a3      	str	r3, [r4, #56]	; 0x38
   1cfb8:	f000 f8f0 	bl	1d19c <__gnu_Unwind_Restore_WMMXD>
   1cfbc:	2000      	movs	r0, #0
   1cfbe:	e7b9      	b.n	1cf34 <_Unwind_VRS_Pop+0x28>
   1cfc0:	2b00      	cmp	r3, #0
   1cfc2:	d1b6      	bne.n	1cf32 <_Unwind_VRS_Pop+0x26>
   1cfc4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1cfc6:	b297      	uxth	r7, r2
   1cfc8:	1d20      	adds	r0, r4, #4
   1cfca:	2601      	movs	r6, #1
   1cfcc:	fa06 f103 	lsl.w	r1, r6, r3
   1cfd0:	4239      	tst	r1, r7
   1cfd2:	f103 0301 	add.w	r3, r3, #1
   1cfd6:	d002      	beq.n	1cfde <_Unwind_VRS_Pop+0xd2>
   1cfd8:	6829      	ldr	r1, [r5, #0]
   1cfda:	6001      	str	r1, [r0, #0]
   1cfdc:	3504      	adds	r5, #4
   1cfde:	2b10      	cmp	r3, #16
   1cfe0:	f100 0004 	add.w	r0, r0, #4
   1cfe4:	d1f2      	bne.n	1cfcc <_Unwind_VRS_Pop+0xc0>
   1cfe6:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1cfea:	d13b      	bne.n	1d064 <_Unwind_VRS_Pop+0x158>
   1cfec:	63a5      	str	r5, [r4, #56]	; 0x38
   1cfee:	e7a1      	b.n	1cf34 <_Unwind_VRS_Pop+0x28>
   1cff0:	2b05      	cmp	r3, #5
   1cff2:	d19e      	bne.n	1cf32 <_Unwind_VRS_Pop+0x26>
   1cff4:	1977      	adds	r7, r6, r5
   1cff6:	2f20      	cmp	r7, #32
   1cff8:	d89b      	bhi.n	1cf32 <_Unwind_VRS_Pop+0x26>
   1cffa:	2e0f      	cmp	r6, #15
   1cffc:	d966      	bls.n	1d0cc <_Unwind_VRS_Pop+0x1c0>
   1cffe:	462f      	mov	r7, r5
   1d000:	2d00      	cmp	r5, #0
   1d002:	d13a      	bne.n	1d07a <_Unwind_VRS_Pop+0x16e>
   1d004:	462a      	mov	r2, r5
   1d006:	2700      	movs	r7, #0
   1d008:	2a00      	cmp	r2, #0
   1d00a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d00c:	dd72      	ble.n	1d0f4 <_Unwind_VRS_Pop+0x1e8>
   1d00e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1d012:	4601      	mov	r1, r0
   1d014:	a844      	add	r0, sp, #272	; 0x110
   1d016:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d01a:	388c      	subs	r0, #140	; 0x8c
   1d01c:	f851 5b04 	ldr.w	r5, [r1], #4
   1d020:	f840 5f04 	str.w	r5, [r0, #4]!
   1d024:	4291      	cmp	r1, r2
   1d026:	d1f9      	bne.n	1d01c <_Unwind_VRS_Pop+0x110>
   1d028:	4608      	mov	r0, r1
   1d02a:	b197      	cbz	r7, 1d052 <_Unwind_VRS_Pop+0x146>
   1d02c:	2e10      	cmp	r6, #16
   1d02e:	4632      	mov	r2, r6
   1d030:	a944      	add	r1, sp, #272	; 0x110
   1d032:	bf38      	it	cc
   1d034:	2210      	movcc	r2, #16
   1d036:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1d03a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1d03e:	0079      	lsls	r1, r7, #1
   1d040:	3a04      	subs	r2, #4
   1d042:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d046:	f850 5b04 	ldr.w	r5, [r0], #4
   1d04a:	f842 5f04 	str.w	r5, [r2, #4]!
   1d04e:	4288      	cmp	r0, r1
   1d050:	d1f9      	bne.n	1d046 <_Unwind_VRS_Pop+0x13a>
   1d052:	2b01      	cmp	r3, #1
   1d054:	d048      	beq.n	1d0e8 <_Unwind_VRS_Pop+0x1dc>
   1d056:	2e0f      	cmp	r6, #15
   1d058:	63a1      	str	r1, [r4, #56]	; 0x38
   1d05a:	d933      	bls.n	1d0c4 <_Unwind_VRS_Pop+0x1b8>
   1d05c:	b117      	cbz	r7, 1d064 <_Unwind_VRS_Pop+0x158>
   1d05e:	a802      	add	r0, sp, #8
   1d060:	f000 f894 	bl	1d18c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d064:	2000      	movs	r0, #0
   1d066:	e765      	b.n	1cf34 <_Unwind_VRS_Pop+0x28>
   1d068:	2e0f      	cmp	r6, #15
   1d06a:	f63f af62 	bhi.w	1cf32 <_Unwind_VRS_Pop+0x26>
   1d06e:	2700      	movs	r7, #0
   1d070:	6822      	ldr	r2, [r4, #0]
   1d072:	07d1      	lsls	r1, r2, #31
   1d074:	d417      	bmi.n	1d0a6 <_Unwind_VRS_Pop+0x19a>
   1d076:	2f00      	cmp	r7, #0
   1d078:	d060      	beq.n	1d13c <_Unwind_VRS_Pop+0x230>
   1d07a:	6822      	ldr	r2, [r4, #0]
   1d07c:	0751      	lsls	r1, r2, #29
   1d07e:	d445      	bmi.n	1d10c <_Unwind_VRS_Pop+0x200>
   1d080:	2b01      	cmp	r3, #1
   1d082:	d04d      	beq.n	1d120 <_Unwind_VRS_Pop+0x214>
   1d084:	2e0f      	cmp	r6, #15
   1d086:	d806      	bhi.n	1d096 <_Unwind_VRS_Pop+0x18a>
   1d088:	a822      	add	r0, sp, #136	; 0x88
   1d08a:	9301      	str	r3, [sp, #4]
   1d08c:	f000 f87a 	bl	1d184 <__gnu_Unwind_Save_VFP_D>
   1d090:	9b01      	ldr	r3, [sp, #4]
   1d092:	2f00      	cmp	r7, #0
   1d094:	d0b6      	beq.n	1d004 <_Unwind_VRS_Pop+0xf8>
   1d096:	a802      	add	r0, sp, #8
   1d098:	9301      	str	r3, [sp, #4]
   1d09a:	f000 f87b 	bl	1d194 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d09e:	9b01      	ldr	r3, [sp, #4]
   1d0a0:	f1c6 0210 	rsb	r2, r6, #16
   1d0a4:	e7b0      	b.n	1d008 <_Unwind_VRS_Pop+0xfc>
   1d0a6:	f022 0101 	bic.w	r1, r2, #1
   1d0aa:	2b05      	cmp	r3, #5
   1d0ac:	6021      	str	r1, [r4, #0]
   1d0ae:	9301      	str	r3, [sp, #4]
   1d0b0:	4620      	mov	r0, r4
   1d0b2:	d03b      	beq.n	1d12c <_Unwind_VRS_Pop+0x220>
   1d0b4:	f022 0203 	bic.w	r2, r2, #3
   1d0b8:	f840 2b48 	str.w	r2, [r0], #72
   1d0bc:	f000 f85a 	bl	1d174 <__gnu_Unwind_Save_VFP>
   1d0c0:	9b01      	ldr	r3, [sp, #4]
   1d0c2:	e7d8      	b.n	1d076 <_Unwind_VRS_Pop+0x16a>
   1d0c4:	a822      	add	r0, sp, #136	; 0x88
   1d0c6:	f000 f859 	bl	1d17c <__gnu_Unwind_Restore_VFP_D>
   1d0ca:	e7c7      	b.n	1d05c <_Unwind_VRS_Pop+0x150>
   1d0cc:	2f10      	cmp	r7, #16
   1d0ce:	d9ce      	bls.n	1d06e <_Unwind_VRS_Pop+0x162>
   1d0d0:	3f10      	subs	r7, #16
   1d0d2:	e7cd      	b.n	1d070 <_Unwind_VRS_Pop+0x164>
   1d0d4:	f023 0310 	bic.w	r3, r3, #16
   1d0d8:	6023      	str	r3, [r4, #0]
   1d0da:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d0de:	9201      	str	r2, [sp, #4]
   1d0e0:	f000 f8aa 	bl	1d238 <__gnu_Unwind_Save_WMMXC>
   1d0e4:	9a01      	ldr	r2, [sp, #4]
   1d0e6:	e72f      	b.n	1cf48 <_Unwind_VRS_Pop+0x3c>
   1d0e8:	3104      	adds	r1, #4
   1d0ea:	63a1      	str	r1, [r4, #56]	; 0x38
   1d0ec:	a822      	add	r0, sp, #136	; 0x88
   1d0ee:	f000 f83d 	bl	1d16c <__gnu_Unwind_Restore_VFP>
   1d0f2:	e7b7      	b.n	1d064 <_Unwind_VRS_Pop+0x158>
   1d0f4:	2f00      	cmp	r7, #0
   1d0f6:	d199      	bne.n	1d02c <_Unwind_VRS_Pop+0x120>
   1d0f8:	4601      	mov	r1, r0
   1d0fa:	e7aa      	b.n	1d052 <_Unwind_VRS_Pop+0x146>
   1d0fc:	f023 0308 	bic.w	r3, r3, #8
   1d100:	6023      	str	r3, [r4, #0]
   1d102:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d106:	f000 f86b 	bl	1d1e0 <__gnu_Unwind_Save_WMMXD>
   1d10a:	e742      	b.n	1cf92 <_Unwind_VRS_Pop+0x86>
   1d10c:	4620      	mov	r0, r4
   1d10e:	f022 0204 	bic.w	r2, r2, #4
   1d112:	f840 2bd0 	str.w	r2, [r0], #208
   1d116:	9301      	str	r3, [sp, #4]
   1d118:	f000 f83c 	bl	1d194 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d11c:	9b01      	ldr	r3, [sp, #4]
   1d11e:	e7af      	b.n	1d080 <_Unwind_VRS_Pop+0x174>
   1d120:	a822      	add	r0, sp, #136	; 0x88
   1d122:	9301      	str	r3, [sp, #4]
   1d124:	f000 f826 	bl	1d174 <__gnu_Unwind_Save_VFP>
   1d128:	9b01      	ldr	r3, [sp, #4]
   1d12a:	e7b9      	b.n	1d0a0 <_Unwind_VRS_Pop+0x194>
   1d12c:	f041 0102 	orr.w	r1, r1, #2
   1d130:	f840 1b48 	str.w	r1, [r0], #72
   1d134:	f000 f826 	bl	1d184 <__gnu_Unwind_Save_VFP_D>
   1d138:	9b01      	ldr	r3, [sp, #4]
   1d13a:	e79c      	b.n	1d076 <_Unwind_VRS_Pop+0x16a>
   1d13c:	2b01      	cmp	r3, #1
   1d13e:	d003      	beq.n	1d148 <_Unwind_VRS_Pop+0x23c>
   1d140:	2e0f      	cmp	r6, #15
   1d142:	f63f af5f 	bhi.w	1d004 <_Unwind_VRS_Pop+0xf8>
   1d146:	e79f      	b.n	1d088 <_Unwind_VRS_Pop+0x17c>
   1d148:	a822      	add	r0, sp, #136	; 0x88
   1d14a:	9301      	str	r3, [sp, #4]
   1d14c:	f000 f812 	bl	1d174 <__gnu_Unwind_Save_VFP>
   1d150:	9b01      	ldr	r3, [sp, #4]
   1d152:	e757      	b.n	1d004 <_Unwind_VRS_Pop+0xf8>

0001d154 <__restore_core_regs>:
   1d154:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1d158:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1d15c:	469c      	mov	ip, r3
   1d15e:	46a6      	mov	lr, r4
   1d160:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1d164:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1d168:	46e5      	mov	sp, ip
   1d16a:	bd00      	pop	{pc}

0001d16c <__gnu_Unwind_Restore_VFP>:
   1d16c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1d170:	4770      	bx	lr
   1d172:	bf00      	nop

0001d174 <__gnu_Unwind_Save_VFP>:
   1d174:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1d178:	4770      	bx	lr
   1d17a:	bf00      	nop

0001d17c <__gnu_Unwind_Restore_VFP_D>:
   1d17c:	ec90 0b20 	vldmia	r0, {d0-d15}
   1d180:	4770      	bx	lr
   1d182:	bf00      	nop

0001d184 <__gnu_Unwind_Save_VFP_D>:
   1d184:	ec80 0b20 	vstmia	r0, {d0-d15}
   1d188:	4770      	bx	lr
   1d18a:	bf00      	nop

0001d18c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1d18c:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1d190:	4770      	bx	lr
   1d192:	bf00      	nop

0001d194 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1d194:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1d198:	4770      	bx	lr
   1d19a:	bf00      	nop

0001d19c <__gnu_Unwind_Restore_WMMXD>:
   1d19c:	ecf0 0102 	ldfe	f0, [r0], #8
   1d1a0:	ecf0 1102 	ldfe	f1, [r0], #8
   1d1a4:	ecf0 2102 	ldfe	f2, [r0], #8
   1d1a8:	ecf0 3102 	ldfe	f3, [r0], #8
   1d1ac:	ecf0 4102 	ldfe	f4, [r0], #8
   1d1b0:	ecf0 5102 	ldfe	f5, [r0], #8
   1d1b4:	ecf0 6102 	ldfe	f6, [r0], #8
   1d1b8:	ecf0 7102 	ldfe	f7, [r0], #8
   1d1bc:	ecf0 8102 	ldfp	f0, [r0], #8
   1d1c0:	ecf0 9102 	ldfp	f1, [r0], #8
   1d1c4:	ecf0 a102 	ldfp	f2, [r0], #8
   1d1c8:	ecf0 b102 	ldfp	f3, [r0], #8
   1d1cc:	ecf0 c102 	ldfp	f4, [r0], #8
   1d1d0:	ecf0 d102 	ldfp	f5, [r0], #8
   1d1d4:	ecf0 e102 	ldfp	f6, [r0], #8
   1d1d8:	ecf0 f102 	ldfp	f7, [r0], #8
   1d1dc:	4770      	bx	lr
   1d1de:	bf00      	nop

0001d1e0 <__gnu_Unwind_Save_WMMXD>:
   1d1e0:	ece0 0102 	stfe	f0, [r0], #8
   1d1e4:	ece0 1102 	stfe	f1, [r0], #8
   1d1e8:	ece0 2102 	stfe	f2, [r0], #8
   1d1ec:	ece0 3102 	stfe	f3, [r0], #8
   1d1f0:	ece0 4102 	stfe	f4, [r0], #8
   1d1f4:	ece0 5102 	stfe	f5, [r0], #8
   1d1f8:	ece0 6102 	stfe	f6, [r0], #8
   1d1fc:	ece0 7102 	stfe	f7, [r0], #8
   1d200:	ece0 8102 	stfp	f0, [r0], #8
   1d204:	ece0 9102 	stfp	f1, [r0], #8
   1d208:	ece0 a102 	stfp	f2, [r0], #8
   1d20c:	ece0 b102 	stfp	f3, [r0], #8
   1d210:	ece0 c102 	stfp	f4, [r0], #8
   1d214:	ece0 d102 	stfp	f5, [r0], #8
   1d218:	ece0 e102 	stfp	f6, [r0], #8
   1d21c:	ece0 f102 	stfp	f7, [r0], #8
   1d220:	4770      	bx	lr
   1d222:	bf00      	nop

0001d224 <__gnu_Unwind_Restore_WMMXC>:
   1d224:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d228:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d22c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d230:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d234:	4770      	bx	lr
   1d236:	bf00      	nop

0001d238 <__gnu_Unwind_Save_WMMXC>:
   1d238:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d23c:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d240:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d244:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d248:	4770      	bx	lr
   1d24a:	bf00      	nop

0001d24c <_Unwind_RaiseException>:
   1d24c:	46ec      	mov	ip, sp
   1d24e:	b500      	push	{lr}
   1d250:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d254:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d258:	f04f 0300 	mov.w	r3, #0
   1d25c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d260:	a901      	add	r1, sp, #4
   1d262:	f7ff fbf3 	bl	1ca4c <__gnu_Unwind_RaiseException>
   1d266:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d26a:	b012      	add	sp, #72	; 0x48
   1d26c:	4770      	bx	lr
   1d26e:	bf00      	nop

0001d270 <_Unwind_Resume>:
   1d270:	46ec      	mov	ip, sp
   1d272:	b500      	push	{lr}
   1d274:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d278:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d27c:	f04f 0300 	mov.w	r3, #0
   1d280:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d284:	a901      	add	r1, sp, #4
   1d286:	f7ff fc1b 	bl	1cac0 <__gnu_Unwind_Resume>
   1d28a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d28e:	b012      	add	sp, #72	; 0x48
   1d290:	4770      	bx	lr
   1d292:	bf00      	nop

0001d294 <_Unwind_Resume_or_Rethrow>:
   1d294:	46ec      	mov	ip, sp
   1d296:	b500      	push	{lr}
   1d298:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d29c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d2a0:	f04f 0300 	mov.w	r3, #0
   1d2a4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d2a8:	a901      	add	r1, sp, #4
   1d2aa:	f7ff fc2b 	bl	1cb04 <__gnu_Unwind_Resume_or_Rethrow>
   1d2ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d2b2:	b012      	add	sp, #72	; 0x48
   1d2b4:	4770      	bx	lr
   1d2b6:	bf00      	nop

0001d2b8 <_Unwind_ForcedUnwind>:
   1d2b8:	46ec      	mov	ip, sp
   1d2ba:	b500      	push	{lr}
   1d2bc:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d2c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d2c4:	f04f 0300 	mov.w	r3, #0
   1d2c8:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d2cc:	ab01      	add	r3, sp, #4
   1d2ce:	f7ff fbed 	bl	1caac <__gnu_Unwind_ForcedUnwind>
   1d2d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d2d6:	b012      	add	sp, #72	; 0x48
   1d2d8:	4770      	bx	lr
   1d2da:	bf00      	nop

0001d2dc <_Unwind_Backtrace>:
   1d2dc:	46ec      	mov	ip, sp
   1d2de:	b500      	push	{lr}
   1d2e0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d2e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d2e8:	f04f 0300 	mov.w	r3, #0
   1d2ec:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d2f0:	aa01      	add	r2, sp, #4
   1d2f2:	f7ff fc65 	bl	1cbc0 <__gnu_Unwind_Backtrace>
   1d2f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d2fa:	b012      	add	sp, #72	; 0x48
   1d2fc:	4770      	bx	lr
   1d2fe:	bf00      	nop

0001d300 <next_unwind_byte>:
   1d300:	7a02      	ldrb	r2, [r0, #8]
   1d302:	b91a      	cbnz	r2, 1d30c <next_unwind_byte+0xc>
   1d304:	7a43      	ldrb	r3, [r0, #9]
   1d306:	b943      	cbnz	r3, 1d31a <next_unwind_byte+0x1a>
   1d308:	20b0      	movs	r0, #176	; 0xb0
   1d30a:	4770      	bx	lr
   1d30c:	6803      	ldr	r3, [r0, #0]
   1d30e:	3a01      	subs	r2, #1
   1d310:	7202      	strb	r2, [r0, #8]
   1d312:	021a      	lsls	r2, r3, #8
   1d314:	6002      	str	r2, [r0, #0]
   1d316:	0e18      	lsrs	r0, r3, #24
   1d318:	4770      	bx	lr
   1d31a:	6842      	ldr	r2, [r0, #4]
   1d31c:	3b01      	subs	r3, #1
   1d31e:	b410      	push	{r4}
   1d320:	7243      	strb	r3, [r0, #9]
   1d322:	6813      	ldr	r3, [r2, #0]
   1d324:	2103      	movs	r1, #3
   1d326:	1d14      	adds	r4, r2, #4
   1d328:	7201      	strb	r1, [r0, #8]
   1d32a:	021a      	lsls	r2, r3, #8
   1d32c:	6044      	str	r4, [r0, #4]
   1d32e:	6002      	str	r2, [r0, #0]
   1d330:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d334:	0e18      	lsrs	r0, r3, #24
   1d336:	4770      	bx	lr

0001d338 <_Unwind_GetGR.constprop.0>:
   1d338:	b500      	push	{lr}
   1d33a:	b085      	sub	sp, #20
   1d33c:	aa03      	add	r2, sp, #12
   1d33e:	2300      	movs	r3, #0
   1d340:	9200      	str	r2, [sp, #0]
   1d342:	4619      	mov	r1, r3
   1d344:	220c      	movs	r2, #12
   1d346:	f7ff fbed 	bl	1cb24 <_Unwind_VRS_Get>
   1d34a:	9803      	ldr	r0, [sp, #12]
   1d34c:	b005      	add	sp, #20
   1d34e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d352:	bf00      	nop

0001d354 <unwind_UCB_from_context>:
   1d354:	e7f0      	b.n	1d338 <_Unwind_GetGR.constprop.0>
   1d356:	bf00      	nop

0001d358 <__gnu_unwind_execute>:
   1d358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d35c:	4606      	mov	r6, r0
   1d35e:	b085      	sub	sp, #20
   1d360:	460f      	mov	r7, r1
   1d362:	f04f 0800 	mov.w	r8, #0
   1d366:	4638      	mov	r0, r7
   1d368:	f7ff ffca 	bl	1d300 <next_unwind_byte>
   1d36c:	28b0      	cmp	r0, #176	; 0xb0
   1d36e:	4604      	mov	r4, r0
   1d370:	d023      	beq.n	1d3ba <__gnu_unwind_execute+0x62>
   1d372:	0605      	lsls	r5, r0, #24
   1d374:	d427      	bmi.n	1d3c6 <__gnu_unwind_execute+0x6e>
   1d376:	2300      	movs	r3, #0
   1d378:	f10d 090c 	add.w	r9, sp, #12
   1d37c:	4619      	mov	r1, r3
   1d37e:	0085      	lsls	r5, r0, #2
   1d380:	220d      	movs	r2, #13
   1d382:	f8cd 9000 	str.w	r9, [sp]
   1d386:	4630      	mov	r0, r6
   1d388:	f7ff fbcc 	bl	1cb24 <_Unwind_VRS_Get>
   1d38c:	b2ed      	uxtb	r5, r5
   1d38e:	9b03      	ldr	r3, [sp, #12]
   1d390:	f8cd 9000 	str.w	r9, [sp]
   1d394:	0660      	lsls	r0, r4, #25
   1d396:	f105 0504 	add.w	r5, r5, #4
   1d39a:	bf4c      	ite	mi
   1d39c:	1b5d      	submi	r5, r3, r5
   1d39e:	18ed      	addpl	r5, r5, r3
   1d3a0:	2300      	movs	r3, #0
   1d3a2:	4619      	mov	r1, r3
   1d3a4:	220d      	movs	r2, #13
   1d3a6:	4630      	mov	r0, r6
   1d3a8:	9503      	str	r5, [sp, #12]
   1d3aa:	f7ff fbe1 	bl	1cb70 <_Unwind_VRS_Set>
   1d3ae:	4638      	mov	r0, r7
   1d3b0:	f7ff ffa6 	bl	1d300 <next_unwind_byte>
   1d3b4:	28b0      	cmp	r0, #176	; 0xb0
   1d3b6:	4604      	mov	r4, r0
   1d3b8:	d1db      	bne.n	1d372 <__gnu_unwind_execute+0x1a>
   1d3ba:	f1b8 0f00 	cmp.w	r8, #0
   1d3be:	f000 8095 	beq.w	1d4ec <__gnu_unwind_execute+0x194>
   1d3c2:	2000      	movs	r0, #0
   1d3c4:	e01c      	b.n	1d400 <__gnu_unwind_execute+0xa8>
   1d3c6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d3ca:	2b80      	cmp	r3, #128	; 0x80
   1d3cc:	d05d      	beq.n	1d48a <__gnu_unwind_execute+0x132>
   1d3ce:	2b90      	cmp	r3, #144	; 0x90
   1d3d0:	d019      	beq.n	1d406 <__gnu_unwind_execute+0xae>
   1d3d2:	2ba0      	cmp	r3, #160	; 0xa0
   1d3d4:	d02c      	beq.n	1d430 <__gnu_unwind_execute+0xd8>
   1d3d6:	2bb0      	cmp	r3, #176	; 0xb0
   1d3d8:	d03f      	beq.n	1d45a <__gnu_unwind_execute+0x102>
   1d3da:	2bc0      	cmp	r3, #192	; 0xc0
   1d3dc:	d06c      	beq.n	1d4b8 <__gnu_unwind_execute+0x160>
   1d3de:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d3e2:	2bd0      	cmp	r3, #208	; 0xd0
   1d3e4:	d10b      	bne.n	1d3fe <__gnu_unwind_execute+0xa6>
   1d3e6:	f000 0207 	and.w	r2, r0, #7
   1d3ea:	3201      	adds	r2, #1
   1d3ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d3f0:	2305      	movs	r3, #5
   1d3f2:	2101      	movs	r1, #1
   1d3f4:	4630      	mov	r0, r6
   1d3f6:	f7ff fd89 	bl	1cf0c <_Unwind_VRS_Pop>
   1d3fa:	2800      	cmp	r0, #0
   1d3fc:	d0b3      	beq.n	1d366 <__gnu_unwind_execute+0xe>
   1d3fe:	2009      	movs	r0, #9
   1d400:	b005      	add	sp, #20
   1d402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d406:	f000 030d 	and.w	r3, r0, #13
   1d40a:	2b0d      	cmp	r3, #13
   1d40c:	d0f7      	beq.n	1d3fe <__gnu_unwind_execute+0xa6>
   1d40e:	ad03      	add	r5, sp, #12
   1d410:	2300      	movs	r3, #0
   1d412:	f000 020f 	and.w	r2, r0, #15
   1d416:	4619      	mov	r1, r3
   1d418:	9500      	str	r5, [sp, #0]
   1d41a:	4630      	mov	r0, r6
   1d41c:	f7ff fb82 	bl	1cb24 <_Unwind_VRS_Get>
   1d420:	2300      	movs	r3, #0
   1d422:	9500      	str	r5, [sp, #0]
   1d424:	4619      	mov	r1, r3
   1d426:	220d      	movs	r2, #13
   1d428:	4630      	mov	r0, r6
   1d42a:	f7ff fba1 	bl	1cb70 <_Unwind_VRS_Set>
   1d42e:	e79a      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d430:	43c2      	mvns	r2, r0
   1d432:	f002 0307 	and.w	r3, r2, #7
   1d436:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d43a:	411a      	asrs	r2, r3
   1d43c:	0701      	lsls	r1, r0, #28
   1d43e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d442:	f04f 0300 	mov.w	r3, #0
   1d446:	bf48      	it	mi
   1d448:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d44c:	4619      	mov	r1, r3
   1d44e:	4630      	mov	r0, r6
   1d450:	f7ff fd5c 	bl	1cf0c <_Unwind_VRS_Pop>
   1d454:	2800      	cmp	r0, #0
   1d456:	d1d2      	bne.n	1d3fe <__gnu_unwind_execute+0xa6>
   1d458:	e785      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d45a:	28b1      	cmp	r0, #177	; 0xb1
   1d45c:	d057      	beq.n	1d50e <__gnu_unwind_execute+0x1b6>
   1d45e:	28b2      	cmp	r0, #178	; 0xb2
   1d460:	d068      	beq.n	1d534 <__gnu_unwind_execute+0x1dc>
   1d462:	28b3      	cmp	r0, #179	; 0xb3
   1d464:	f000 8095 	beq.w	1d592 <__gnu_unwind_execute+0x23a>
   1d468:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d46c:	2bb4      	cmp	r3, #180	; 0xb4
   1d46e:	d0c6      	beq.n	1d3fe <__gnu_unwind_execute+0xa6>
   1d470:	f000 0207 	and.w	r2, r0, #7
   1d474:	3201      	adds	r2, #1
   1d476:	2301      	movs	r3, #1
   1d478:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d47c:	4619      	mov	r1, r3
   1d47e:	4630      	mov	r0, r6
   1d480:	f7ff fd44 	bl	1cf0c <_Unwind_VRS_Pop>
   1d484:	2800      	cmp	r0, #0
   1d486:	d1ba      	bne.n	1d3fe <__gnu_unwind_execute+0xa6>
   1d488:	e76d      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d48a:	4638      	mov	r0, r7
   1d48c:	f7ff ff38 	bl	1d300 <next_unwind_byte>
   1d490:	0224      	lsls	r4, r4, #8
   1d492:	4304      	orrs	r4, r0
   1d494:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d498:	d0b1      	beq.n	1d3fe <__gnu_unwind_execute+0xa6>
   1d49a:	0124      	lsls	r4, r4, #4
   1d49c:	2300      	movs	r3, #0
   1d49e:	b2a2      	uxth	r2, r4
   1d4a0:	4619      	mov	r1, r3
   1d4a2:	4630      	mov	r0, r6
   1d4a4:	f7ff fd32 	bl	1cf0c <_Unwind_VRS_Pop>
   1d4a8:	2800      	cmp	r0, #0
   1d4aa:	d1a8      	bne.n	1d3fe <__gnu_unwind_execute+0xa6>
   1d4ac:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d4b0:	bf18      	it	ne
   1d4b2:	f04f 0801 	movne.w	r8, #1
   1d4b6:	e756      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d4b8:	28c6      	cmp	r0, #198	; 0xc6
   1d4ba:	d07d      	beq.n	1d5b8 <__gnu_unwind_execute+0x260>
   1d4bc:	28c7      	cmp	r0, #199	; 0xc7
   1d4be:	f000 8086 	beq.w	1d5ce <__gnu_unwind_execute+0x276>
   1d4c2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d4c6:	2bc0      	cmp	r3, #192	; 0xc0
   1d4c8:	f000 8094 	beq.w	1d5f4 <__gnu_unwind_execute+0x29c>
   1d4cc:	28c8      	cmp	r0, #200	; 0xc8
   1d4ce:	f000 809f 	beq.w	1d610 <__gnu_unwind_execute+0x2b8>
   1d4d2:	28c9      	cmp	r0, #201	; 0xc9
   1d4d4:	d193      	bne.n	1d3fe <__gnu_unwind_execute+0xa6>
   1d4d6:	4638      	mov	r0, r7
   1d4d8:	f7ff ff12 	bl	1d300 <next_unwind_byte>
   1d4dc:	0302      	lsls	r2, r0, #12
   1d4de:	f000 000f 	and.w	r0, r0, #15
   1d4e2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d4e6:	3001      	adds	r0, #1
   1d4e8:	4302      	orrs	r2, r0
   1d4ea:	e781      	b.n	1d3f0 <__gnu_unwind_execute+0x98>
   1d4ec:	ac03      	add	r4, sp, #12
   1d4ee:	4643      	mov	r3, r8
   1d4f0:	220e      	movs	r2, #14
   1d4f2:	4641      	mov	r1, r8
   1d4f4:	9400      	str	r4, [sp, #0]
   1d4f6:	4630      	mov	r0, r6
   1d4f8:	f7ff fb14 	bl	1cb24 <_Unwind_VRS_Get>
   1d4fc:	9400      	str	r4, [sp, #0]
   1d4fe:	4630      	mov	r0, r6
   1d500:	4643      	mov	r3, r8
   1d502:	220f      	movs	r2, #15
   1d504:	4641      	mov	r1, r8
   1d506:	f7ff fb33 	bl	1cb70 <_Unwind_VRS_Set>
   1d50a:	4640      	mov	r0, r8
   1d50c:	e778      	b.n	1d400 <__gnu_unwind_execute+0xa8>
   1d50e:	4638      	mov	r0, r7
   1d510:	f7ff fef6 	bl	1d300 <next_unwind_byte>
   1d514:	2800      	cmp	r0, #0
   1d516:	f43f af72 	beq.w	1d3fe <__gnu_unwind_execute+0xa6>
   1d51a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d51e:	f47f af6e 	bne.w	1d3fe <__gnu_unwind_execute+0xa6>
   1d522:	4602      	mov	r2, r0
   1d524:	4619      	mov	r1, r3
   1d526:	4630      	mov	r0, r6
   1d528:	f7ff fcf0 	bl	1cf0c <_Unwind_VRS_Pop>
   1d52c:	2800      	cmp	r0, #0
   1d52e:	f47f af66 	bne.w	1d3fe <__gnu_unwind_execute+0xa6>
   1d532:	e718      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d534:	2300      	movs	r3, #0
   1d536:	f10d 090c 	add.w	r9, sp, #12
   1d53a:	220d      	movs	r2, #13
   1d53c:	4619      	mov	r1, r3
   1d53e:	f8cd 9000 	str.w	r9, [sp]
   1d542:	4630      	mov	r0, r6
   1d544:	f7ff faee 	bl	1cb24 <_Unwind_VRS_Get>
   1d548:	4638      	mov	r0, r7
   1d54a:	f7ff fed9 	bl	1d300 <next_unwind_byte>
   1d54e:	0602      	lsls	r2, r0, #24
   1d550:	f04f 0402 	mov.w	r4, #2
   1d554:	d50c      	bpl.n	1d570 <__gnu_unwind_execute+0x218>
   1d556:	9b03      	ldr	r3, [sp, #12]
   1d558:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d55c:	40a0      	lsls	r0, r4
   1d55e:	4403      	add	r3, r0
   1d560:	4638      	mov	r0, r7
   1d562:	9303      	str	r3, [sp, #12]
   1d564:	f7ff fecc 	bl	1d300 <next_unwind_byte>
   1d568:	0603      	lsls	r3, r0, #24
   1d56a:	f104 0407 	add.w	r4, r4, #7
   1d56e:	d4f2      	bmi.n	1d556 <__gnu_unwind_execute+0x1fe>
   1d570:	9b03      	ldr	r3, [sp, #12]
   1d572:	f8cd 9000 	str.w	r9, [sp]
   1d576:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d57a:	40a2      	lsls	r2, r4
   1d57c:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d580:	2300      	movs	r3, #0
   1d582:	4414      	add	r4, r2
   1d584:	4619      	mov	r1, r3
   1d586:	220d      	movs	r2, #13
   1d588:	4630      	mov	r0, r6
   1d58a:	9403      	str	r4, [sp, #12]
   1d58c:	f7ff faf0 	bl	1cb70 <_Unwind_VRS_Set>
   1d590:	e6e9      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d592:	4638      	mov	r0, r7
   1d594:	f7ff feb4 	bl	1d300 <next_unwind_byte>
   1d598:	0301      	lsls	r1, r0, #12
   1d59a:	f000 000f 	and.w	r0, r0, #15
   1d59e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d5a2:	1c42      	adds	r2, r0, #1
   1d5a4:	2301      	movs	r3, #1
   1d5a6:	430a      	orrs	r2, r1
   1d5a8:	4630      	mov	r0, r6
   1d5aa:	4619      	mov	r1, r3
   1d5ac:	f7ff fcae 	bl	1cf0c <_Unwind_VRS_Pop>
   1d5b0:	2800      	cmp	r0, #0
   1d5b2:	f47f af24 	bne.w	1d3fe <__gnu_unwind_execute+0xa6>
   1d5b6:	e6d6      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d5b8:	4638      	mov	r0, r7
   1d5ba:	f7ff fea1 	bl	1d300 <next_unwind_byte>
   1d5be:	0301      	lsls	r1, r0, #12
   1d5c0:	f000 000f 	and.w	r0, r0, #15
   1d5c4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d5c8:	1c42      	adds	r2, r0, #1
   1d5ca:	2303      	movs	r3, #3
   1d5cc:	e7eb      	b.n	1d5a6 <__gnu_unwind_execute+0x24e>
   1d5ce:	4638      	mov	r0, r7
   1d5d0:	f7ff fe96 	bl	1d300 <next_unwind_byte>
   1d5d4:	2800      	cmp	r0, #0
   1d5d6:	f43f af12 	beq.w	1d3fe <__gnu_unwind_execute+0xa6>
   1d5da:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d5de:	f47f af0e 	bne.w	1d3fe <__gnu_unwind_execute+0xa6>
   1d5e2:	4602      	mov	r2, r0
   1d5e4:	2104      	movs	r1, #4
   1d5e6:	4630      	mov	r0, r6
   1d5e8:	f7ff fc90 	bl	1cf0c <_Unwind_VRS_Pop>
   1d5ec:	2800      	cmp	r0, #0
   1d5ee:	f47f af06 	bne.w	1d3fe <__gnu_unwind_execute+0xa6>
   1d5f2:	e6b8      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d5f4:	f000 020f 	and.w	r2, r0, #15
   1d5f8:	3201      	adds	r2, #1
   1d5fa:	2303      	movs	r3, #3
   1d5fc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d600:	4619      	mov	r1, r3
   1d602:	4630      	mov	r0, r6
   1d604:	f7ff fc82 	bl	1cf0c <_Unwind_VRS_Pop>
   1d608:	2800      	cmp	r0, #0
   1d60a:	f47f aef8 	bne.w	1d3fe <__gnu_unwind_execute+0xa6>
   1d60e:	e6aa      	b.n	1d366 <__gnu_unwind_execute+0xe>
   1d610:	4638      	mov	r0, r7
   1d612:	f7ff fe75 	bl	1d300 <next_unwind_byte>
   1d616:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d61a:	f000 030f 	and.w	r3, r0, #15
   1d61e:	3210      	adds	r2, #16
   1d620:	3301      	adds	r3, #1
   1d622:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d626:	e6e3      	b.n	1d3f0 <__gnu_unwind_execute+0x98>

0001d628 <__gnu_unwind_frame>:
   1d628:	b510      	push	{r4, lr}
   1d62a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d62c:	b084      	sub	sp, #16
   1d62e:	685a      	ldr	r2, [r3, #4]
   1d630:	2003      	movs	r0, #3
   1d632:	f88d 000c 	strb.w	r0, [sp, #12]
   1d636:	79dc      	ldrb	r4, [r3, #7]
   1d638:	f88d 400d 	strb.w	r4, [sp, #13]
   1d63c:	0212      	lsls	r2, r2, #8
   1d63e:	3308      	adds	r3, #8
   1d640:	4608      	mov	r0, r1
   1d642:	a901      	add	r1, sp, #4
   1d644:	9201      	str	r2, [sp, #4]
   1d646:	9302      	str	r3, [sp, #8]
   1d648:	f7ff fe86 	bl	1d358 <__gnu_unwind_execute>
   1d64c:	b004      	add	sp, #16
   1d64e:	bd10      	pop	{r4, pc}

0001d650 <_Unwind_GetRegionStart>:
   1d650:	b508      	push	{r3, lr}
   1d652:	f7ff fe7f 	bl	1d354 <unwind_UCB_from_context>
   1d656:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d658:	bd08      	pop	{r3, pc}
   1d65a:	bf00      	nop

0001d65c <_Unwind_GetLanguageSpecificData>:
   1d65c:	b508      	push	{r3, lr}
   1d65e:	f7ff fe79 	bl	1d354 <unwind_UCB_from_context>
   1d662:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d664:	79c3      	ldrb	r3, [r0, #7]
   1d666:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d66a:	3008      	adds	r0, #8
   1d66c:	bd08      	pop	{r3, pc}
   1d66e:	bf00      	nop

0001d670 <_Unwind_GetTextRelBase>:
   1d670:	b508      	push	{r3, lr}
   1d672:	f000 f807 	bl	1d684 <abort>
   1d676:	bf00      	nop

0001d678 <_Unwind_GetDataRelBase>:
   1d678:	b508      	push	{r3, lr}
   1d67a:	f7ff fff9 	bl	1d670 <_Unwind_GetTextRelBase>
   1d67e:	bf00      	nop

0001d680 <__aeabi_idiv0>:
   1d680:	4770      	bx	lr
   1d682:	bf00      	nop

0001d684 <abort>:
   1d684:	b508      	push	{r3, lr}
   1d686:	2006      	movs	r0, #6
   1d688:	f001 f982 	bl	1e990 <raise>
   1d68c:	2001      	movs	r0, #1
   1d68e:	f005 f917 	bl	228c0 <_exit>
   1d692:	bf00      	nop

0001d694 <__errno>:
   1d694:	4b01      	ldr	r3, [pc, #4]	; (1d69c <__errno+0x8>)
   1d696:	6818      	ldr	r0, [r3, #0]
   1d698:	4770      	bx	lr
   1d69a:	bf00      	nop
   1d69c:	200000f8 	.word	0x200000f8

0001d6a0 <fputc>:
   1d6a0:	4b14      	ldr	r3, [pc, #80]	; (1d6f4 <fputc+0x54>)
   1d6a2:	b570      	push	{r4, r5, r6, lr}
   1d6a4:	681d      	ldr	r5, [r3, #0]
   1d6a6:	4606      	mov	r6, r0
   1d6a8:	460c      	mov	r4, r1
   1d6aa:	b10d      	cbz	r5, 1d6b0 <fputc+0x10>
   1d6ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d6ae:	b1c3      	cbz	r3, 1d6e2 <fputc+0x42>
   1d6b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d6b2:	07d8      	lsls	r0, r3, #31
   1d6b4:	d402      	bmi.n	1d6bc <fputc+0x1c>
   1d6b6:	89a3      	ldrh	r3, [r4, #12]
   1d6b8:	0599      	lsls	r1, r3, #22
   1d6ba:	d516      	bpl.n	1d6ea <fputc+0x4a>
   1d6bc:	4628      	mov	r0, r5
   1d6be:	4622      	mov	r2, r4
   1d6c0:	4631      	mov	r1, r6
   1d6c2:	f000 ff3d 	bl	1e540 <_putc_r>
   1d6c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d6c8:	07da      	lsls	r2, r3, #31
   1d6ca:	4605      	mov	r5, r0
   1d6cc:	d402      	bmi.n	1d6d4 <fputc+0x34>
   1d6ce:	89a3      	ldrh	r3, [r4, #12]
   1d6d0:	059b      	lsls	r3, r3, #22
   1d6d2:	d501      	bpl.n	1d6d8 <fputc+0x38>
   1d6d4:	4628      	mov	r0, r5
   1d6d6:	bd70      	pop	{r4, r5, r6, pc}
   1d6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d6da:	f000 fa7f 	bl	1dbdc <__retarget_lock_release_recursive>
   1d6de:	4628      	mov	r0, r5
   1d6e0:	bd70      	pop	{r4, r5, r6, pc}
   1d6e2:	4628      	mov	r0, r5
   1d6e4:	f004 f806 	bl	216f4 <__sinit>
   1d6e8:	e7e2      	b.n	1d6b0 <fputc+0x10>
   1d6ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d6ec:	f000 fa74 	bl	1dbd8 <__retarget_lock_acquire_recursive>
   1d6f0:	e7e4      	b.n	1d6bc <fputc+0x1c>
   1d6f2:	bf00      	nop
   1d6f4:	200000f8 	.word	0x200000f8

0001d6f8 <_fputs_r>:
   1d6f8:	b530      	push	{r4, r5, lr}
   1d6fa:	b087      	sub	sp, #28
   1d6fc:	4605      	mov	r5, r0
   1d6fe:	4608      	mov	r0, r1
   1d700:	4614      	mov	r4, r2
   1d702:	9101      	str	r1, [sp, #4]
   1d704:	f001 fafc 	bl	1ed00 <strlen>
   1d708:	aa01      	add	r2, sp, #4
   1d70a:	2301      	movs	r3, #1
   1d70c:	9005      	str	r0, [sp, #20]
   1d70e:	9002      	str	r0, [sp, #8]
   1d710:	9203      	str	r2, [sp, #12]
   1d712:	9304      	str	r3, [sp, #16]
   1d714:	b10d      	cbz	r5, 1d71a <_fputs_r+0x22>
   1d716:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d718:	b333      	cbz	r3, 1d768 <_fputs_r+0x70>
   1d71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d71c:	f013 0f01 	tst.w	r3, #1
   1d720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d724:	b29a      	uxth	r2, r3
   1d726:	d101      	bne.n	1d72c <_fputs_r+0x34>
   1d728:	0590      	lsls	r0, r2, #22
   1d72a:	d521      	bpl.n	1d770 <_fputs_r+0x78>
   1d72c:	0491      	lsls	r1, r2, #18
   1d72e:	d406      	bmi.n	1d73e <_fputs_r+0x46>
   1d730:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d73a:	81a3      	strh	r3, [r4, #12]
   1d73c:	6662      	str	r2, [r4, #100]	; 0x64
   1d73e:	4628      	mov	r0, r5
   1d740:	aa03      	add	r2, sp, #12
   1d742:	4621      	mov	r1, r4
   1d744:	f000 f824 	bl	1d790 <__sfvwrite_r>
   1d748:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d74a:	07da      	lsls	r2, r3, #31
   1d74c:	4605      	mov	r5, r0
   1d74e:	d402      	bmi.n	1d756 <_fputs_r+0x5e>
   1d750:	89a3      	ldrh	r3, [r4, #12]
   1d752:	059b      	lsls	r3, r3, #22
   1d754:	d502      	bpl.n	1d75c <_fputs_r+0x64>
   1d756:	4628      	mov	r0, r5
   1d758:	b007      	add	sp, #28
   1d75a:	bd30      	pop	{r4, r5, pc}
   1d75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d75e:	f000 fa3d 	bl	1dbdc <__retarget_lock_release_recursive>
   1d762:	4628      	mov	r0, r5
   1d764:	b007      	add	sp, #28
   1d766:	bd30      	pop	{r4, r5, pc}
   1d768:	4628      	mov	r0, r5
   1d76a:	f003 ffc3 	bl	216f4 <__sinit>
   1d76e:	e7d4      	b.n	1d71a <_fputs_r+0x22>
   1d770:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d772:	f000 fa31 	bl	1dbd8 <__retarget_lock_acquire_recursive>
   1d776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d77a:	b29a      	uxth	r2, r3
   1d77c:	e7d6      	b.n	1d72c <_fputs_r+0x34>
   1d77e:	bf00      	nop

0001d780 <fputs>:
   1d780:	4b02      	ldr	r3, [pc, #8]	; (1d78c <fputs+0xc>)
   1d782:	460a      	mov	r2, r1
   1d784:	4601      	mov	r1, r0
   1d786:	6818      	ldr	r0, [r3, #0]
   1d788:	f7ff bfb6 	b.w	1d6f8 <_fputs_r>
   1d78c:	200000f8 	.word	0x200000f8

0001d790 <__sfvwrite_r>:
   1d790:	6893      	ldr	r3, [r2, #8]
   1d792:	2b00      	cmp	r3, #0
   1d794:	d073      	beq.n	1d87e <__sfvwrite_r+0xee>
   1d796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d79a:	898b      	ldrh	r3, [r1, #12]
   1d79c:	b083      	sub	sp, #12
   1d79e:	460c      	mov	r4, r1
   1d7a0:	0719      	lsls	r1, r3, #28
   1d7a2:	9000      	str	r0, [sp, #0]
   1d7a4:	4616      	mov	r6, r2
   1d7a6:	d526      	bpl.n	1d7f6 <__sfvwrite_r+0x66>
   1d7a8:	6922      	ldr	r2, [r4, #16]
   1d7aa:	b322      	cbz	r2, 1d7f6 <__sfvwrite_r+0x66>
   1d7ac:	f013 0002 	ands.w	r0, r3, #2
   1d7b0:	6835      	ldr	r5, [r6, #0]
   1d7b2:	d02c      	beq.n	1d80e <__sfvwrite_r+0x7e>
   1d7b4:	f04f 0900 	mov.w	r9, #0
   1d7b8:	4fb0      	ldr	r7, [pc, #704]	; (1da7c <__sfvwrite_r+0x2ec>)
   1d7ba:	46c8      	mov	r8, r9
   1d7bc:	46b2      	mov	sl, r6
   1d7be:	45b8      	cmp	r8, r7
   1d7c0:	4643      	mov	r3, r8
   1d7c2:	464a      	mov	r2, r9
   1d7c4:	bf28      	it	cs
   1d7c6:	463b      	movcs	r3, r7
   1d7c8:	9800      	ldr	r0, [sp, #0]
   1d7ca:	f1b8 0f00 	cmp.w	r8, #0
   1d7ce:	d050      	beq.n	1d872 <__sfvwrite_r+0xe2>
   1d7d0:	69e1      	ldr	r1, [r4, #28]
   1d7d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d7d4:	47b0      	blx	r6
   1d7d6:	2800      	cmp	r0, #0
   1d7d8:	dd58      	ble.n	1d88c <__sfvwrite_r+0xfc>
   1d7da:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d7de:	1a1b      	subs	r3, r3, r0
   1d7e0:	4481      	add	r9, r0
   1d7e2:	eba8 0800 	sub.w	r8, r8, r0
   1d7e6:	f8ca 3008 	str.w	r3, [sl, #8]
   1d7ea:	2b00      	cmp	r3, #0
   1d7ec:	d1e7      	bne.n	1d7be <__sfvwrite_r+0x2e>
   1d7ee:	2000      	movs	r0, #0
   1d7f0:	b003      	add	sp, #12
   1d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7f6:	4621      	mov	r1, r4
   1d7f8:	9800      	ldr	r0, [sp, #0]
   1d7fa:	f002 fe55 	bl	204a8 <__swsetup_r>
   1d7fe:	2800      	cmp	r0, #0
   1d800:	f040 8133 	bne.w	1da6a <__sfvwrite_r+0x2da>
   1d804:	89a3      	ldrh	r3, [r4, #12]
   1d806:	6835      	ldr	r5, [r6, #0]
   1d808:	f013 0002 	ands.w	r0, r3, #2
   1d80c:	d1d2      	bne.n	1d7b4 <__sfvwrite_r+0x24>
   1d80e:	f013 0901 	ands.w	r9, r3, #1
   1d812:	d145      	bne.n	1d8a0 <__sfvwrite_r+0x110>
   1d814:	464f      	mov	r7, r9
   1d816:	9601      	str	r6, [sp, #4]
   1d818:	b337      	cbz	r7, 1d868 <__sfvwrite_r+0xd8>
   1d81a:	059a      	lsls	r2, r3, #22
   1d81c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1d820:	f140 8083 	bpl.w	1d92a <__sfvwrite_r+0x19a>
   1d824:	4547      	cmp	r7, r8
   1d826:	46c3      	mov	fp, r8
   1d828:	f0c0 80ab 	bcc.w	1d982 <__sfvwrite_r+0x1f2>
   1d82c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d830:	f040 80ac 	bne.w	1d98c <__sfvwrite_r+0x1fc>
   1d834:	6820      	ldr	r0, [r4, #0]
   1d836:	46ba      	mov	sl, r7
   1d838:	465a      	mov	r2, fp
   1d83a:	4649      	mov	r1, r9
   1d83c:	f000 fdc2 	bl	1e3c4 <memmove>
   1d840:	68a2      	ldr	r2, [r4, #8]
   1d842:	6823      	ldr	r3, [r4, #0]
   1d844:	eba2 0208 	sub.w	r2, r2, r8
   1d848:	445b      	add	r3, fp
   1d84a:	60a2      	str	r2, [r4, #8]
   1d84c:	6023      	str	r3, [r4, #0]
   1d84e:	9a01      	ldr	r2, [sp, #4]
   1d850:	6893      	ldr	r3, [r2, #8]
   1d852:	eba3 030a 	sub.w	r3, r3, sl
   1d856:	44d1      	add	r9, sl
   1d858:	eba7 070a 	sub.w	r7, r7, sl
   1d85c:	6093      	str	r3, [r2, #8]
   1d85e:	2b00      	cmp	r3, #0
   1d860:	d0c5      	beq.n	1d7ee <__sfvwrite_r+0x5e>
   1d862:	89a3      	ldrh	r3, [r4, #12]
   1d864:	2f00      	cmp	r7, #0
   1d866:	d1d8      	bne.n	1d81a <__sfvwrite_r+0x8a>
   1d868:	f8d5 9000 	ldr.w	r9, [r5]
   1d86c:	686f      	ldr	r7, [r5, #4]
   1d86e:	3508      	adds	r5, #8
   1d870:	e7d2      	b.n	1d818 <__sfvwrite_r+0x88>
   1d872:	f8d5 9000 	ldr.w	r9, [r5]
   1d876:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d87a:	3508      	adds	r5, #8
   1d87c:	e79f      	b.n	1d7be <__sfvwrite_r+0x2e>
   1d87e:	2000      	movs	r0, #0
   1d880:	4770      	bx	lr
   1d882:	4621      	mov	r1, r4
   1d884:	9800      	ldr	r0, [sp, #0]
   1d886:	f003 fedd 	bl	21644 <_fflush_r>
   1d88a:	b370      	cbz	r0, 1d8ea <__sfvwrite_r+0x15a>
   1d88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d894:	f04f 30ff 	mov.w	r0, #4294967295
   1d898:	81a3      	strh	r3, [r4, #12]
   1d89a:	b003      	add	sp, #12
   1d89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8a0:	4681      	mov	r9, r0
   1d8a2:	4633      	mov	r3, r6
   1d8a4:	464e      	mov	r6, r9
   1d8a6:	46a8      	mov	r8, r5
   1d8a8:	469a      	mov	sl, r3
   1d8aa:	464d      	mov	r5, r9
   1d8ac:	b34e      	cbz	r6, 1d902 <__sfvwrite_r+0x172>
   1d8ae:	b380      	cbz	r0, 1d912 <__sfvwrite_r+0x182>
   1d8b0:	6820      	ldr	r0, [r4, #0]
   1d8b2:	6923      	ldr	r3, [r4, #16]
   1d8b4:	6962      	ldr	r2, [r4, #20]
   1d8b6:	45b1      	cmp	r9, r6
   1d8b8:	46cb      	mov	fp, r9
   1d8ba:	bf28      	it	cs
   1d8bc:	46b3      	movcs	fp, r6
   1d8be:	4298      	cmp	r0, r3
   1d8c0:	465f      	mov	r7, fp
   1d8c2:	d904      	bls.n	1d8ce <__sfvwrite_r+0x13e>
   1d8c4:	68a3      	ldr	r3, [r4, #8]
   1d8c6:	4413      	add	r3, r2
   1d8c8:	459b      	cmp	fp, r3
   1d8ca:	f300 80a6 	bgt.w	1da1a <__sfvwrite_r+0x28a>
   1d8ce:	4593      	cmp	fp, r2
   1d8d0:	db4b      	blt.n	1d96a <__sfvwrite_r+0x1da>
   1d8d2:	4613      	mov	r3, r2
   1d8d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d8d6:	69e1      	ldr	r1, [r4, #28]
   1d8d8:	9800      	ldr	r0, [sp, #0]
   1d8da:	462a      	mov	r2, r5
   1d8dc:	47b8      	blx	r7
   1d8de:	1e07      	subs	r7, r0, #0
   1d8e0:	ddd4      	ble.n	1d88c <__sfvwrite_r+0xfc>
   1d8e2:	ebb9 0907 	subs.w	r9, r9, r7
   1d8e6:	d0cc      	beq.n	1d882 <__sfvwrite_r+0xf2>
   1d8e8:	2001      	movs	r0, #1
   1d8ea:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d8ee:	1bdb      	subs	r3, r3, r7
   1d8f0:	443d      	add	r5, r7
   1d8f2:	1bf6      	subs	r6, r6, r7
   1d8f4:	f8ca 3008 	str.w	r3, [sl, #8]
   1d8f8:	2b00      	cmp	r3, #0
   1d8fa:	f43f af78 	beq.w	1d7ee <__sfvwrite_r+0x5e>
   1d8fe:	2e00      	cmp	r6, #0
   1d900:	d1d5      	bne.n	1d8ae <__sfvwrite_r+0x11e>
   1d902:	f108 0308 	add.w	r3, r8, #8
   1d906:	e913 0060 	ldmdb	r3, {r5, r6}
   1d90a:	4698      	mov	r8, r3
   1d90c:	3308      	adds	r3, #8
   1d90e:	2e00      	cmp	r6, #0
   1d910:	d0f9      	beq.n	1d906 <__sfvwrite_r+0x176>
   1d912:	4632      	mov	r2, r6
   1d914:	210a      	movs	r1, #10
   1d916:	4628      	mov	r0, r5
   1d918:	f000 fc3a 	bl	1e190 <memchr>
   1d91c:	2800      	cmp	r0, #0
   1d91e:	f000 80a1 	beq.w	1da64 <__sfvwrite_r+0x2d4>
   1d922:	3001      	adds	r0, #1
   1d924:	eba0 0905 	sub.w	r9, r0, r5
   1d928:	e7c2      	b.n	1d8b0 <__sfvwrite_r+0x120>
   1d92a:	6820      	ldr	r0, [r4, #0]
   1d92c:	6923      	ldr	r3, [r4, #16]
   1d92e:	4298      	cmp	r0, r3
   1d930:	d802      	bhi.n	1d938 <__sfvwrite_r+0x1a8>
   1d932:	6963      	ldr	r3, [r4, #20]
   1d934:	429f      	cmp	r7, r3
   1d936:	d25d      	bcs.n	1d9f4 <__sfvwrite_r+0x264>
   1d938:	45b8      	cmp	r8, r7
   1d93a:	bf28      	it	cs
   1d93c:	46b8      	movcs	r8, r7
   1d93e:	4642      	mov	r2, r8
   1d940:	4649      	mov	r1, r9
   1d942:	f000 fd3f 	bl	1e3c4 <memmove>
   1d946:	68a3      	ldr	r3, [r4, #8]
   1d948:	6822      	ldr	r2, [r4, #0]
   1d94a:	eba3 0308 	sub.w	r3, r3, r8
   1d94e:	4442      	add	r2, r8
   1d950:	60a3      	str	r3, [r4, #8]
   1d952:	6022      	str	r2, [r4, #0]
   1d954:	b10b      	cbz	r3, 1d95a <__sfvwrite_r+0x1ca>
   1d956:	46c2      	mov	sl, r8
   1d958:	e779      	b.n	1d84e <__sfvwrite_r+0xbe>
   1d95a:	4621      	mov	r1, r4
   1d95c:	9800      	ldr	r0, [sp, #0]
   1d95e:	f003 fe71 	bl	21644 <_fflush_r>
   1d962:	2800      	cmp	r0, #0
   1d964:	d192      	bne.n	1d88c <__sfvwrite_r+0xfc>
   1d966:	46c2      	mov	sl, r8
   1d968:	e771      	b.n	1d84e <__sfvwrite_r+0xbe>
   1d96a:	465a      	mov	r2, fp
   1d96c:	4629      	mov	r1, r5
   1d96e:	f000 fd29 	bl	1e3c4 <memmove>
   1d972:	68a2      	ldr	r2, [r4, #8]
   1d974:	6823      	ldr	r3, [r4, #0]
   1d976:	eba2 020b 	sub.w	r2, r2, fp
   1d97a:	445b      	add	r3, fp
   1d97c:	60a2      	str	r2, [r4, #8]
   1d97e:	6023      	str	r3, [r4, #0]
   1d980:	e7af      	b.n	1d8e2 <__sfvwrite_r+0x152>
   1d982:	6820      	ldr	r0, [r4, #0]
   1d984:	46b8      	mov	r8, r7
   1d986:	46ba      	mov	sl, r7
   1d988:	46bb      	mov	fp, r7
   1d98a:	e755      	b.n	1d838 <__sfvwrite_r+0xa8>
   1d98c:	6962      	ldr	r2, [r4, #20]
   1d98e:	6820      	ldr	r0, [r4, #0]
   1d990:	6921      	ldr	r1, [r4, #16]
   1d992:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1d996:	eba0 0a01 	sub.w	sl, r0, r1
   1d99a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1d99e:	f10a 0001 	add.w	r0, sl, #1
   1d9a2:	ea4f 0868 	mov.w	r8, r8, asr #1
   1d9a6:	4438      	add	r0, r7
   1d9a8:	4540      	cmp	r0, r8
   1d9aa:	4642      	mov	r2, r8
   1d9ac:	bf84      	itt	hi
   1d9ae:	4680      	movhi	r8, r0
   1d9b0:	4642      	movhi	r2, r8
   1d9b2:	055b      	lsls	r3, r3, #21
   1d9b4:	d544      	bpl.n	1da40 <__sfvwrite_r+0x2b0>
   1d9b6:	4611      	mov	r1, r2
   1d9b8:	9800      	ldr	r0, [sp, #0]
   1d9ba:	f000 f921 	bl	1dc00 <_malloc_r>
   1d9be:	4683      	mov	fp, r0
   1d9c0:	2800      	cmp	r0, #0
   1d9c2:	d055      	beq.n	1da70 <__sfvwrite_r+0x2e0>
   1d9c4:	4652      	mov	r2, sl
   1d9c6:	6921      	ldr	r1, [r4, #16]
   1d9c8:	f000 fc62 	bl	1e290 <memcpy>
   1d9cc:	89a3      	ldrh	r3, [r4, #12]
   1d9ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1d9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d9d6:	81a3      	strh	r3, [r4, #12]
   1d9d8:	eb0b 000a 	add.w	r0, fp, sl
   1d9dc:	eba8 030a 	sub.w	r3, r8, sl
   1d9e0:	f8c4 b010 	str.w	fp, [r4, #16]
   1d9e4:	f8c4 8014 	str.w	r8, [r4, #20]
   1d9e8:	6020      	str	r0, [r4, #0]
   1d9ea:	60a3      	str	r3, [r4, #8]
   1d9ec:	46b8      	mov	r8, r7
   1d9ee:	46ba      	mov	sl, r7
   1d9f0:	46bb      	mov	fp, r7
   1d9f2:	e721      	b.n	1d838 <__sfvwrite_r+0xa8>
   1d9f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d9f8:	42b9      	cmp	r1, r7
   1d9fa:	bf28      	it	cs
   1d9fc:	4639      	movcs	r1, r7
   1d9fe:	464a      	mov	r2, r9
   1da00:	fb91 f1f3 	sdiv	r1, r1, r3
   1da04:	9800      	ldr	r0, [sp, #0]
   1da06:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1da08:	fb03 f301 	mul.w	r3, r3, r1
   1da0c:	69e1      	ldr	r1, [r4, #28]
   1da0e:	47b0      	blx	r6
   1da10:	f1b0 0a00 	subs.w	sl, r0, #0
   1da14:	f73f af1b 	bgt.w	1d84e <__sfvwrite_r+0xbe>
   1da18:	e738      	b.n	1d88c <__sfvwrite_r+0xfc>
   1da1a:	461a      	mov	r2, r3
   1da1c:	4629      	mov	r1, r5
   1da1e:	9301      	str	r3, [sp, #4]
   1da20:	f000 fcd0 	bl	1e3c4 <memmove>
   1da24:	6822      	ldr	r2, [r4, #0]
   1da26:	9b01      	ldr	r3, [sp, #4]
   1da28:	9800      	ldr	r0, [sp, #0]
   1da2a:	441a      	add	r2, r3
   1da2c:	6022      	str	r2, [r4, #0]
   1da2e:	4621      	mov	r1, r4
   1da30:	f003 fe08 	bl	21644 <_fflush_r>
   1da34:	9b01      	ldr	r3, [sp, #4]
   1da36:	2800      	cmp	r0, #0
   1da38:	f47f af28 	bne.w	1d88c <__sfvwrite_r+0xfc>
   1da3c:	461f      	mov	r7, r3
   1da3e:	e750      	b.n	1d8e2 <__sfvwrite_r+0x152>
   1da40:	9800      	ldr	r0, [sp, #0]
   1da42:	f000 fdbd 	bl	1e5c0 <_realloc_r>
   1da46:	4683      	mov	fp, r0
   1da48:	2800      	cmp	r0, #0
   1da4a:	d1c5      	bne.n	1d9d8 <__sfvwrite_r+0x248>
   1da4c:	9d00      	ldr	r5, [sp, #0]
   1da4e:	6921      	ldr	r1, [r4, #16]
   1da50:	4628      	mov	r0, r5
   1da52:	f003 fef1 	bl	21838 <_free_r>
   1da56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1da5a:	220c      	movs	r2, #12
   1da5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1da60:	602a      	str	r2, [r5, #0]
   1da62:	e715      	b.n	1d890 <__sfvwrite_r+0x100>
   1da64:	f106 0901 	add.w	r9, r6, #1
   1da68:	e722      	b.n	1d8b0 <__sfvwrite_r+0x120>
   1da6a:	f04f 30ff 	mov.w	r0, #4294967295
   1da6e:	e6bf      	b.n	1d7f0 <__sfvwrite_r+0x60>
   1da70:	9a00      	ldr	r2, [sp, #0]
   1da72:	230c      	movs	r3, #12
   1da74:	6013      	str	r3, [r2, #0]
   1da76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1da7a:	e709      	b.n	1d890 <__sfvwrite_r+0x100>
   1da7c:	7ffffc00 	.word	0x7ffffc00

0001da80 <_fwrite_r>:
   1da80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da84:	b086      	sub	sp, #24
   1da86:	fb02 f503 	mul.w	r5, r2, r3
   1da8a:	4690      	mov	r8, r2
   1da8c:	461e      	mov	r6, r3
   1da8e:	aa01      	add	r2, sp, #4
   1da90:	2301      	movs	r3, #1
   1da92:	9101      	str	r1, [sp, #4]
   1da94:	9502      	str	r5, [sp, #8]
   1da96:	9505      	str	r5, [sp, #20]
   1da98:	9203      	str	r2, [sp, #12]
   1da9a:	9304      	str	r3, [sp, #16]
   1da9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1da9e:	4607      	mov	r7, r0
   1daa0:	b110      	cbz	r0, 1daa8 <_fwrite_r+0x28>
   1daa2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1daa4:	2b00      	cmp	r3, #0
   1daa6:	d031      	beq.n	1db0c <_fwrite_r+0x8c>
   1daa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1daaa:	f013 0f01 	tst.w	r3, #1
   1daae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dab2:	b29a      	uxth	r2, r3
   1dab4:	d101      	bne.n	1daba <_fwrite_r+0x3a>
   1dab6:	0591      	lsls	r1, r2, #22
   1dab8:	d52b      	bpl.n	1db12 <_fwrite_r+0x92>
   1daba:	0492      	lsls	r2, r2, #18
   1dabc:	d406      	bmi.n	1dacc <_fwrite_r+0x4c>
   1dabe:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1dac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1dac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1dac8:	81a3      	strh	r3, [r4, #12]
   1daca:	6662      	str	r2, [r4, #100]	; 0x64
   1dacc:	4638      	mov	r0, r7
   1dace:	aa03      	add	r2, sp, #12
   1dad0:	4621      	mov	r1, r4
   1dad2:	f7ff fe5d 	bl	1d790 <__sfvwrite_r>
   1dad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1dad8:	b940      	cbnz	r0, 1daec <_fwrite_r+0x6c>
   1dada:	07d8      	lsls	r0, r3, #31
   1dadc:	d402      	bmi.n	1dae4 <_fwrite_r+0x64>
   1dade:	89a3      	ldrh	r3, [r4, #12]
   1dae0:	0599      	lsls	r1, r3, #22
   1dae2:	d51d      	bpl.n	1db20 <_fwrite_r+0xa0>
   1dae4:	4630      	mov	r0, r6
   1dae6:	b006      	add	sp, #24
   1dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1daec:	07da      	lsls	r2, r3, #31
   1daee:	d506      	bpl.n	1dafe <_fwrite_r+0x7e>
   1daf0:	9805      	ldr	r0, [sp, #20]
   1daf2:	1a2d      	subs	r5, r5, r0
   1daf4:	fbb5 f0f8 	udiv	r0, r5, r8
   1daf8:	b006      	add	sp, #24
   1dafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dafe:	89a3      	ldrh	r3, [r4, #12]
   1db00:	059b      	lsls	r3, r3, #22
   1db02:	d4f5      	bmi.n	1daf0 <_fwrite_r+0x70>
   1db04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1db06:	f000 f869 	bl	1dbdc <__retarget_lock_release_recursive>
   1db0a:	e7f1      	b.n	1daf0 <_fwrite_r+0x70>
   1db0c:	f003 fdf2 	bl	216f4 <__sinit>
   1db10:	e7ca      	b.n	1daa8 <_fwrite_r+0x28>
   1db12:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1db14:	f000 f860 	bl	1dbd8 <__retarget_lock_acquire_recursive>
   1db18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1db1c:	b29a      	uxth	r2, r3
   1db1e:	e7cc      	b.n	1daba <_fwrite_r+0x3a>
   1db20:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1db22:	f000 f85b 	bl	1dbdc <__retarget_lock_release_recursive>
   1db26:	4630      	mov	r0, r6
   1db28:	e7e6      	b.n	1daf8 <_fwrite_r+0x78>
   1db2a:	bf00      	nop

0001db2c <fwrite>:
   1db2c:	b510      	push	{r4, lr}
   1db2e:	b082      	sub	sp, #8
   1db30:	4c05      	ldr	r4, [pc, #20]	; (1db48 <fwrite+0x1c>)
   1db32:	9300      	str	r3, [sp, #0]
   1db34:	6824      	ldr	r4, [r4, #0]
   1db36:	4613      	mov	r3, r2
   1db38:	460a      	mov	r2, r1
   1db3a:	4601      	mov	r1, r0
   1db3c:	4620      	mov	r0, r4
   1db3e:	f7ff ff9f 	bl	1da80 <_fwrite_r>
   1db42:	b002      	add	sp, #8
   1db44:	bd10      	pop	{r4, pc}
   1db46:	bf00      	nop
   1db48:	200000f8 	.word	0x200000f8

0001db4c <__libc_init_array>:
   1db4c:	b570      	push	{r4, r5, r6, lr}
   1db4e:	4e0f      	ldr	r6, [pc, #60]	; (1db8c <__libc_init_array+0x40>)
   1db50:	4d0f      	ldr	r5, [pc, #60]	; (1db90 <__libc_init_array+0x44>)
   1db52:	1b76      	subs	r6, r6, r5
   1db54:	10b6      	asrs	r6, r6, #2
   1db56:	bf18      	it	ne
   1db58:	2400      	movne	r4, #0
   1db5a:	d005      	beq.n	1db68 <__libc_init_array+0x1c>
   1db5c:	3401      	adds	r4, #1
   1db5e:	f855 3b04 	ldr.w	r3, [r5], #4
   1db62:	4798      	blx	r3
   1db64:	42a6      	cmp	r6, r4
   1db66:	d1f9      	bne.n	1db5c <__libc_init_array+0x10>
   1db68:	4e0a      	ldr	r6, [pc, #40]	; (1db94 <__libc_init_array+0x48>)
   1db6a:	4d0b      	ldr	r5, [pc, #44]	; (1db98 <__libc_init_array+0x4c>)
   1db6c:	1b76      	subs	r6, r6, r5
   1db6e:	f004 febb 	bl	228e8 <_init>
   1db72:	10b6      	asrs	r6, r6, #2
   1db74:	bf18      	it	ne
   1db76:	2400      	movne	r4, #0
   1db78:	d006      	beq.n	1db88 <__libc_init_array+0x3c>
   1db7a:	3401      	adds	r4, #1
   1db7c:	f855 3b04 	ldr.w	r3, [r5], #4
   1db80:	4798      	blx	r3
   1db82:	42a6      	cmp	r6, r4
   1db84:	d1f9      	bne.n	1db7a <__libc_init_array+0x2e>
   1db86:	bd70      	pop	{r4, r5, r6, pc}
   1db88:	bd70      	pop	{r4, r5, r6, pc}
   1db8a:	bf00      	nop
   1db8c:	00022900 	.word	0x00022900
   1db90:	00022900 	.word	0x00022900
   1db94:	00022938 	.word	0x00022938
   1db98:	00022900 	.word	0x00022900

0001db9c <__itoa>:
   1db9c:	1e93      	subs	r3, r2, #2
   1db9e:	2b22      	cmp	r3, #34	; 0x22
   1dba0:	d810      	bhi.n	1dbc4 <__itoa+0x28>
   1dba2:	2a0a      	cmp	r2, #10
   1dba4:	b510      	push	{r4, lr}
   1dba6:	d006      	beq.n	1dbb6 <__itoa+0x1a>
   1dba8:	2300      	movs	r3, #0
   1dbaa:	460c      	mov	r4, r1
   1dbac:	4419      	add	r1, r3
   1dbae:	f002 fbbd 	bl	2032c <__utoa>
   1dbb2:	4620      	mov	r0, r4
   1dbb4:	bd10      	pop	{r4, pc}
   1dbb6:	2800      	cmp	r0, #0
   1dbb8:	daf6      	bge.n	1dba8 <__itoa+0xc>
   1dbba:	232d      	movs	r3, #45	; 0x2d
   1dbbc:	700b      	strb	r3, [r1, #0]
   1dbbe:	4240      	negs	r0, r0
   1dbc0:	2301      	movs	r3, #1
   1dbc2:	e7f2      	b.n	1dbaa <__itoa+0xe>
   1dbc4:	2000      	movs	r0, #0
   1dbc6:	7008      	strb	r0, [r1, #0]
   1dbc8:	4770      	bx	lr
   1dbca:	bf00      	nop

0001dbcc <itoa>:
   1dbcc:	f7ff bfe6 	b.w	1db9c <__itoa>

0001dbd0 <__retarget_lock_init_recursive>:
   1dbd0:	4770      	bx	lr
   1dbd2:	bf00      	nop

0001dbd4 <__retarget_lock_close_recursive>:
   1dbd4:	4770      	bx	lr
   1dbd6:	bf00      	nop

0001dbd8 <__retarget_lock_acquire_recursive>:
   1dbd8:	4770      	bx	lr
   1dbda:	bf00      	nop

0001dbdc <__retarget_lock_release_recursive>:
   1dbdc:	4770      	bx	lr
   1dbde:	bf00      	nop

0001dbe0 <malloc>:
   1dbe0:	4b02      	ldr	r3, [pc, #8]	; (1dbec <malloc+0xc>)
   1dbe2:	4601      	mov	r1, r0
   1dbe4:	6818      	ldr	r0, [r3, #0]
   1dbe6:	f000 b80b 	b.w	1dc00 <_malloc_r>
   1dbea:	bf00      	nop
   1dbec:	200000f8 	.word	0x200000f8

0001dbf0 <free>:
   1dbf0:	4b02      	ldr	r3, [pc, #8]	; (1dbfc <free+0xc>)
   1dbf2:	4601      	mov	r1, r0
   1dbf4:	6818      	ldr	r0, [r3, #0]
   1dbf6:	f003 be1f 	b.w	21838 <_free_r>
   1dbfa:	bf00      	nop
   1dbfc:	200000f8 	.word	0x200000f8

0001dc00 <_malloc_r>:
   1dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc04:	f101 060b 	add.w	r6, r1, #11
   1dc08:	2e16      	cmp	r6, #22
   1dc0a:	b083      	sub	sp, #12
   1dc0c:	4605      	mov	r5, r0
   1dc0e:	f240 809e 	bls.w	1dd4e <_malloc_r+0x14e>
   1dc12:	f036 0607 	bics.w	r6, r6, #7
   1dc16:	f100 80bd 	bmi.w	1dd94 <_malloc_r+0x194>
   1dc1a:	42b1      	cmp	r1, r6
   1dc1c:	f200 80ba 	bhi.w	1dd94 <_malloc_r+0x194>
   1dc20:	f000 fc82 	bl	1e528 <__malloc_lock>
   1dc24:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1dc28:	f0c0 8293 	bcc.w	1e152 <_malloc_r+0x552>
   1dc2c:	0a73      	lsrs	r3, r6, #9
   1dc2e:	f000 80b8 	beq.w	1dda2 <_malloc_r+0x1a2>
   1dc32:	2b04      	cmp	r3, #4
   1dc34:	f200 8179 	bhi.w	1df2a <_malloc_r+0x32a>
   1dc38:	09b3      	lsrs	r3, r6, #6
   1dc3a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1dc3e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1dc42:	00c3      	lsls	r3, r0, #3
   1dc44:	4fbf      	ldr	r7, [pc, #764]	; (1df44 <_malloc_r+0x344>)
   1dc46:	443b      	add	r3, r7
   1dc48:	f1a3 0108 	sub.w	r1, r3, #8
   1dc4c:	685c      	ldr	r4, [r3, #4]
   1dc4e:	42a1      	cmp	r1, r4
   1dc50:	d106      	bne.n	1dc60 <_malloc_r+0x60>
   1dc52:	e00c      	b.n	1dc6e <_malloc_r+0x6e>
   1dc54:	2a00      	cmp	r2, #0
   1dc56:	f280 80aa 	bge.w	1ddae <_malloc_r+0x1ae>
   1dc5a:	68e4      	ldr	r4, [r4, #12]
   1dc5c:	42a1      	cmp	r1, r4
   1dc5e:	d006      	beq.n	1dc6e <_malloc_r+0x6e>
   1dc60:	6863      	ldr	r3, [r4, #4]
   1dc62:	f023 0303 	bic.w	r3, r3, #3
   1dc66:	1b9a      	subs	r2, r3, r6
   1dc68:	2a0f      	cmp	r2, #15
   1dc6a:	ddf3      	ble.n	1dc54 <_malloc_r+0x54>
   1dc6c:	4670      	mov	r0, lr
   1dc6e:	693c      	ldr	r4, [r7, #16]
   1dc70:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1df58 <_malloc_r+0x358>
   1dc74:	4574      	cmp	r4, lr
   1dc76:	f000 81ab 	beq.w	1dfd0 <_malloc_r+0x3d0>
   1dc7a:	6863      	ldr	r3, [r4, #4]
   1dc7c:	f023 0303 	bic.w	r3, r3, #3
   1dc80:	1b9a      	subs	r2, r3, r6
   1dc82:	2a0f      	cmp	r2, #15
   1dc84:	f300 8190 	bgt.w	1dfa8 <_malloc_r+0x3a8>
   1dc88:	2a00      	cmp	r2, #0
   1dc8a:	f8c7 e014 	str.w	lr, [r7, #20]
   1dc8e:	f8c7 e010 	str.w	lr, [r7, #16]
   1dc92:	f280 809d 	bge.w	1ddd0 <_malloc_r+0x1d0>
   1dc96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dc9a:	f080 8161 	bcs.w	1df60 <_malloc_r+0x360>
   1dc9e:	08db      	lsrs	r3, r3, #3
   1dca0:	f103 0c01 	add.w	ip, r3, #1
   1dca4:	1099      	asrs	r1, r3, #2
   1dca6:	687a      	ldr	r2, [r7, #4]
   1dca8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1dcac:	f8c4 8008 	str.w	r8, [r4, #8]
   1dcb0:	2301      	movs	r3, #1
   1dcb2:	408b      	lsls	r3, r1
   1dcb4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1dcb8:	4313      	orrs	r3, r2
   1dcba:	3908      	subs	r1, #8
   1dcbc:	60e1      	str	r1, [r4, #12]
   1dcbe:	607b      	str	r3, [r7, #4]
   1dcc0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1dcc4:	f8c8 400c 	str.w	r4, [r8, #12]
   1dcc8:	1082      	asrs	r2, r0, #2
   1dcca:	2401      	movs	r4, #1
   1dccc:	4094      	lsls	r4, r2
   1dcce:	429c      	cmp	r4, r3
   1dcd0:	f200 808b 	bhi.w	1ddea <_malloc_r+0x1ea>
   1dcd4:	421c      	tst	r4, r3
   1dcd6:	d106      	bne.n	1dce6 <_malloc_r+0xe6>
   1dcd8:	f020 0003 	bic.w	r0, r0, #3
   1dcdc:	0064      	lsls	r4, r4, #1
   1dcde:	421c      	tst	r4, r3
   1dce0:	f100 0004 	add.w	r0, r0, #4
   1dce4:	d0fa      	beq.n	1dcdc <_malloc_r+0xdc>
   1dce6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1dcea:	46cc      	mov	ip, r9
   1dcec:	4680      	mov	r8, r0
   1dcee:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1dcf2:	459c      	cmp	ip, r3
   1dcf4:	d107      	bne.n	1dd06 <_malloc_r+0x106>
   1dcf6:	e16d      	b.n	1dfd4 <_malloc_r+0x3d4>
   1dcf8:	2a00      	cmp	r2, #0
   1dcfa:	f280 817b 	bge.w	1dff4 <_malloc_r+0x3f4>
   1dcfe:	68db      	ldr	r3, [r3, #12]
   1dd00:	459c      	cmp	ip, r3
   1dd02:	f000 8167 	beq.w	1dfd4 <_malloc_r+0x3d4>
   1dd06:	6859      	ldr	r1, [r3, #4]
   1dd08:	f021 0103 	bic.w	r1, r1, #3
   1dd0c:	1b8a      	subs	r2, r1, r6
   1dd0e:	2a0f      	cmp	r2, #15
   1dd10:	ddf2      	ble.n	1dcf8 <_malloc_r+0xf8>
   1dd12:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1dd16:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1dd1a:	9300      	str	r3, [sp, #0]
   1dd1c:	199c      	adds	r4, r3, r6
   1dd1e:	4628      	mov	r0, r5
   1dd20:	f046 0601 	orr.w	r6, r6, #1
   1dd24:	f042 0501 	orr.w	r5, r2, #1
   1dd28:	605e      	str	r6, [r3, #4]
   1dd2a:	f8c8 c00c 	str.w	ip, [r8, #12]
   1dd2e:	f8cc 8008 	str.w	r8, [ip, #8]
   1dd32:	617c      	str	r4, [r7, #20]
   1dd34:	613c      	str	r4, [r7, #16]
   1dd36:	f8c4 e00c 	str.w	lr, [r4, #12]
   1dd3a:	f8c4 e008 	str.w	lr, [r4, #8]
   1dd3e:	6065      	str	r5, [r4, #4]
   1dd40:	505a      	str	r2, [r3, r1]
   1dd42:	f000 fbf7 	bl	1e534 <__malloc_unlock>
   1dd46:	9b00      	ldr	r3, [sp, #0]
   1dd48:	f103 0408 	add.w	r4, r3, #8
   1dd4c:	e01e      	b.n	1dd8c <_malloc_r+0x18c>
   1dd4e:	2910      	cmp	r1, #16
   1dd50:	d820      	bhi.n	1dd94 <_malloc_r+0x194>
   1dd52:	f000 fbe9 	bl	1e528 <__malloc_lock>
   1dd56:	2610      	movs	r6, #16
   1dd58:	2318      	movs	r3, #24
   1dd5a:	2002      	movs	r0, #2
   1dd5c:	4f79      	ldr	r7, [pc, #484]	; (1df44 <_malloc_r+0x344>)
   1dd5e:	443b      	add	r3, r7
   1dd60:	f1a3 0208 	sub.w	r2, r3, #8
   1dd64:	685c      	ldr	r4, [r3, #4]
   1dd66:	4294      	cmp	r4, r2
   1dd68:	f000 813d 	beq.w	1dfe6 <_malloc_r+0x3e6>
   1dd6c:	6863      	ldr	r3, [r4, #4]
   1dd6e:	68e1      	ldr	r1, [r4, #12]
   1dd70:	68a6      	ldr	r6, [r4, #8]
   1dd72:	f023 0303 	bic.w	r3, r3, #3
   1dd76:	4423      	add	r3, r4
   1dd78:	4628      	mov	r0, r5
   1dd7a:	685a      	ldr	r2, [r3, #4]
   1dd7c:	60f1      	str	r1, [r6, #12]
   1dd7e:	f042 0201 	orr.w	r2, r2, #1
   1dd82:	608e      	str	r6, [r1, #8]
   1dd84:	605a      	str	r2, [r3, #4]
   1dd86:	f000 fbd5 	bl	1e534 <__malloc_unlock>
   1dd8a:	3408      	adds	r4, #8
   1dd8c:	4620      	mov	r0, r4
   1dd8e:	b003      	add	sp, #12
   1dd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd94:	2400      	movs	r4, #0
   1dd96:	230c      	movs	r3, #12
   1dd98:	4620      	mov	r0, r4
   1dd9a:	602b      	str	r3, [r5, #0]
   1dd9c:	b003      	add	sp, #12
   1dd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dda2:	2040      	movs	r0, #64	; 0x40
   1dda4:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dda8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1ddac:	e74a      	b.n	1dc44 <_malloc_r+0x44>
   1ddae:	4423      	add	r3, r4
   1ddb0:	68e1      	ldr	r1, [r4, #12]
   1ddb2:	685a      	ldr	r2, [r3, #4]
   1ddb4:	68a6      	ldr	r6, [r4, #8]
   1ddb6:	f042 0201 	orr.w	r2, r2, #1
   1ddba:	60f1      	str	r1, [r6, #12]
   1ddbc:	4628      	mov	r0, r5
   1ddbe:	608e      	str	r6, [r1, #8]
   1ddc0:	605a      	str	r2, [r3, #4]
   1ddc2:	f000 fbb7 	bl	1e534 <__malloc_unlock>
   1ddc6:	3408      	adds	r4, #8
   1ddc8:	4620      	mov	r0, r4
   1ddca:	b003      	add	sp, #12
   1ddcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddd0:	4423      	add	r3, r4
   1ddd2:	4628      	mov	r0, r5
   1ddd4:	685a      	ldr	r2, [r3, #4]
   1ddd6:	f042 0201 	orr.w	r2, r2, #1
   1ddda:	605a      	str	r2, [r3, #4]
   1dddc:	f000 fbaa 	bl	1e534 <__malloc_unlock>
   1dde0:	3408      	adds	r4, #8
   1dde2:	4620      	mov	r0, r4
   1dde4:	b003      	add	sp, #12
   1dde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddea:	68bc      	ldr	r4, [r7, #8]
   1ddec:	6863      	ldr	r3, [r4, #4]
   1ddee:	f023 0803 	bic.w	r8, r3, #3
   1ddf2:	45b0      	cmp	r8, r6
   1ddf4:	d304      	bcc.n	1de00 <_malloc_r+0x200>
   1ddf6:	eba8 0306 	sub.w	r3, r8, r6
   1ddfa:	2b0f      	cmp	r3, #15
   1ddfc:	f300 8085 	bgt.w	1df0a <_malloc_r+0x30a>
   1de00:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1df5c <_malloc_r+0x35c>
   1de04:	4b50      	ldr	r3, [pc, #320]	; (1df48 <_malloc_r+0x348>)
   1de06:	f8d9 2000 	ldr.w	r2, [r9]
   1de0a:	681b      	ldr	r3, [r3, #0]
   1de0c:	3201      	adds	r2, #1
   1de0e:	4433      	add	r3, r6
   1de10:	eb04 0a08 	add.w	sl, r4, r8
   1de14:	f000 8155 	beq.w	1e0c2 <_malloc_r+0x4c2>
   1de18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1de1c:	330f      	adds	r3, #15
   1de1e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1de22:	f02b 0b0f 	bic.w	fp, fp, #15
   1de26:	4659      	mov	r1, fp
   1de28:	4628      	mov	r0, r5
   1de2a:	f000 fd6f 	bl	1e90c <_sbrk_r>
   1de2e:	1c41      	adds	r1, r0, #1
   1de30:	4602      	mov	r2, r0
   1de32:	f000 80fc 	beq.w	1e02e <_malloc_r+0x42e>
   1de36:	4582      	cmp	sl, r0
   1de38:	f200 80f7 	bhi.w	1e02a <_malloc_r+0x42a>
   1de3c:	4b43      	ldr	r3, [pc, #268]	; (1df4c <_malloc_r+0x34c>)
   1de3e:	6819      	ldr	r1, [r3, #0]
   1de40:	4459      	add	r1, fp
   1de42:	6019      	str	r1, [r3, #0]
   1de44:	f000 814d 	beq.w	1e0e2 <_malloc_r+0x4e2>
   1de48:	f8d9 0000 	ldr.w	r0, [r9]
   1de4c:	3001      	adds	r0, #1
   1de4e:	bf1b      	ittet	ne
   1de50:	eba2 0a0a 	subne.w	sl, r2, sl
   1de54:	4451      	addne	r1, sl
   1de56:	f8c9 2000 	streq.w	r2, [r9]
   1de5a:	6019      	strne	r1, [r3, #0]
   1de5c:	f012 0107 	ands.w	r1, r2, #7
   1de60:	f000 8115 	beq.w	1e08e <_malloc_r+0x48e>
   1de64:	f1c1 0008 	rsb	r0, r1, #8
   1de68:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1de6c:	4402      	add	r2, r0
   1de6e:	3108      	adds	r1, #8
   1de70:	eb02 090b 	add.w	r9, r2, fp
   1de74:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1de78:	eba1 0909 	sub.w	r9, r1, r9
   1de7c:	4649      	mov	r1, r9
   1de7e:	4628      	mov	r0, r5
   1de80:	9301      	str	r3, [sp, #4]
   1de82:	9200      	str	r2, [sp, #0]
   1de84:	f000 fd42 	bl	1e90c <_sbrk_r>
   1de88:	1c43      	adds	r3, r0, #1
   1de8a:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1de8e:	f000 8143 	beq.w	1e118 <_malloc_r+0x518>
   1de92:	1a80      	subs	r0, r0, r2
   1de94:	4448      	add	r0, r9
   1de96:	f040 0001 	orr.w	r0, r0, #1
   1de9a:	6819      	ldr	r1, [r3, #0]
   1de9c:	60ba      	str	r2, [r7, #8]
   1de9e:	4449      	add	r1, r9
   1dea0:	42bc      	cmp	r4, r7
   1dea2:	6050      	str	r0, [r2, #4]
   1dea4:	6019      	str	r1, [r3, #0]
   1dea6:	d017      	beq.n	1ded8 <_malloc_r+0x2d8>
   1dea8:	f1b8 0f0f 	cmp.w	r8, #15
   1deac:	f240 80fb 	bls.w	1e0a6 <_malloc_r+0x4a6>
   1deb0:	6860      	ldr	r0, [r4, #4]
   1deb2:	f1a8 020c 	sub.w	r2, r8, #12
   1deb6:	f022 0207 	bic.w	r2, r2, #7
   1deba:	eb04 0e02 	add.w	lr, r4, r2
   1debe:	f000 0001 	and.w	r0, r0, #1
   1dec2:	f04f 0c05 	mov.w	ip, #5
   1dec6:	4310      	orrs	r0, r2
   1dec8:	2a0f      	cmp	r2, #15
   1deca:	6060      	str	r0, [r4, #4]
   1decc:	f8ce c004 	str.w	ip, [lr, #4]
   1ded0:	f8ce c008 	str.w	ip, [lr, #8]
   1ded4:	f200 8117 	bhi.w	1e106 <_malloc_r+0x506>
   1ded8:	4b1d      	ldr	r3, [pc, #116]	; (1df50 <_malloc_r+0x350>)
   1deda:	68bc      	ldr	r4, [r7, #8]
   1dedc:	681a      	ldr	r2, [r3, #0]
   1dede:	4291      	cmp	r1, r2
   1dee0:	bf88      	it	hi
   1dee2:	6019      	strhi	r1, [r3, #0]
   1dee4:	4b1b      	ldr	r3, [pc, #108]	; (1df54 <_malloc_r+0x354>)
   1dee6:	681a      	ldr	r2, [r3, #0]
   1dee8:	4291      	cmp	r1, r2
   1deea:	6862      	ldr	r2, [r4, #4]
   1deec:	bf88      	it	hi
   1deee:	6019      	strhi	r1, [r3, #0]
   1def0:	f022 0203 	bic.w	r2, r2, #3
   1def4:	4296      	cmp	r6, r2
   1def6:	eba2 0306 	sub.w	r3, r2, r6
   1defa:	d801      	bhi.n	1df00 <_malloc_r+0x300>
   1defc:	2b0f      	cmp	r3, #15
   1defe:	dc04      	bgt.n	1df0a <_malloc_r+0x30a>
   1df00:	4628      	mov	r0, r5
   1df02:	f000 fb17 	bl	1e534 <__malloc_unlock>
   1df06:	2400      	movs	r4, #0
   1df08:	e740      	b.n	1dd8c <_malloc_r+0x18c>
   1df0a:	19a2      	adds	r2, r4, r6
   1df0c:	f043 0301 	orr.w	r3, r3, #1
   1df10:	f046 0601 	orr.w	r6, r6, #1
   1df14:	6066      	str	r6, [r4, #4]
   1df16:	4628      	mov	r0, r5
   1df18:	60ba      	str	r2, [r7, #8]
   1df1a:	6053      	str	r3, [r2, #4]
   1df1c:	f000 fb0a 	bl	1e534 <__malloc_unlock>
   1df20:	3408      	adds	r4, #8
   1df22:	4620      	mov	r0, r4
   1df24:	b003      	add	sp, #12
   1df26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df2a:	2b14      	cmp	r3, #20
   1df2c:	d971      	bls.n	1e012 <_malloc_r+0x412>
   1df2e:	2b54      	cmp	r3, #84	; 0x54
   1df30:	f200 80a3 	bhi.w	1e07a <_malloc_r+0x47a>
   1df34:	0b33      	lsrs	r3, r6, #12
   1df36:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1df3a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1df3e:	00c3      	lsls	r3, r0, #3
   1df40:	e680      	b.n	1dc44 <_malloc_r+0x44>
   1df42:	bf00      	nop
   1df44:	20000694 	.word	0x20000694
   1df48:	200022d0 	.word	0x200022d0
   1df4c:	200022a0 	.word	0x200022a0
   1df50:	200022c8 	.word	0x200022c8
   1df54:	200022cc 	.word	0x200022cc
   1df58:	2000069c 	.word	0x2000069c
   1df5c:	20000a9c 	.word	0x20000a9c
   1df60:	0a5a      	lsrs	r2, r3, #9
   1df62:	2a04      	cmp	r2, #4
   1df64:	d95b      	bls.n	1e01e <_malloc_r+0x41e>
   1df66:	2a14      	cmp	r2, #20
   1df68:	f200 80ae 	bhi.w	1e0c8 <_malloc_r+0x4c8>
   1df6c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1df70:	00c9      	lsls	r1, r1, #3
   1df72:	325b      	adds	r2, #91	; 0x5b
   1df74:	eb07 0c01 	add.w	ip, r7, r1
   1df78:	5879      	ldr	r1, [r7, r1]
   1df7a:	f1ac 0c08 	sub.w	ip, ip, #8
   1df7e:	458c      	cmp	ip, r1
   1df80:	f000 8088 	beq.w	1e094 <_malloc_r+0x494>
   1df84:	684a      	ldr	r2, [r1, #4]
   1df86:	f022 0203 	bic.w	r2, r2, #3
   1df8a:	4293      	cmp	r3, r2
   1df8c:	d273      	bcs.n	1e076 <_malloc_r+0x476>
   1df8e:	6889      	ldr	r1, [r1, #8]
   1df90:	458c      	cmp	ip, r1
   1df92:	d1f7      	bne.n	1df84 <_malloc_r+0x384>
   1df94:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1df98:	687b      	ldr	r3, [r7, #4]
   1df9a:	60e2      	str	r2, [r4, #12]
   1df9c:	f8c4 c008 	str.w	ip, [r4, #8]
   1dfa0:	6094      	str	r4, [r2, #8]
   1dfa2:	f8cc 400c 	str.w	r4, [ip, #12]
   1dfa6:	e68f      	b.n	1dcc8 <_malloc_r+0xc8>
   1dfa8:	19a1      	adds	r1, r4, r6
   1dfaa:	f046 0c01 	orr.w	ip, r6, #1
   1dfae:	f042 0601 	orr.w	r6, r2, #1
   1dfb2:	f8c4 c004 	str.w	ip, [r4, #4]
   1dfb6:	4628      	mov	r0, r5
   1dfb8:	6179      	str	r1, [r7, #20]
   1dfba:	6139      	str	r1, [r7, #16]
   1dfbc:	f8c1 e00c 	str.w	lr, [r1, #12]
   1dfc0:	f8c1 e008 	str.w	lr, [r1, #8]
   1dfc4:	604e      	str	r6, [r1, #4]
   1dfc6:	50e2      	str	r2, [r4, r3]
   1dfc8:	f000 fab4 	bl	1e534 <__malloc_unlock>
   1dfcc:	3408      	adds	r4, #8
   1dfce:	e6dd      	b.n	1dd8c <_malloc_r+0x18c>
   1dfd0:	687b      	ldr	r3, [r7, #4]
   1dfd2:	e679      	b.n	1dcc8 <_malloc_r+0xc8>
   1dfd4:	f108 0801 	add.w	r8, r8, #1
   1dfd8:	f018 0f03 	tst.w	r8, #3
   1dfdc:	f10c 0c08 	add.w	ip, ip, #8
   1dfe0:	f47f ae85 	bne.w	1dcee <_malloc_r+0xee>
   1dfe4:	e02d      	b.n	1e042 <_malloc_r+0x442>
   1dfe6:	68dc      	ldr	r4, [r3, #12]
   1dfe8:	42a3      	cmp	r3, r4
   1dfea:	bf08      	it	eq
   1dfec:	3002      	addeq	r0, #2
   1dfee:	f43f ae3e 	beq.w	1dc6e <_malloc_r+0x6e>
   1dff2:	e6bb      	b.n	1dd6c <_malloc_r+0x16c>
   1dff4:	4419      	add	r1, r3
   1dff6:	461c      	mov	r4, r3
   1dff8:	684a      	ldr	r2, [r1, #4]
   1dffa:	68db      	ldr	r3, [r3, #12]
   1dffc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1e000:	f042 0201 	orr.w	r2, r2, #1
   1e004:	604a      	str	r2, [r1, #4]
   1e006:	4628      	mov	r0, r5
   1e008:	60f3      	str	r3, [r6, #12]
   1e00a:	609e      	str	r6, [r3, #8]
   1e00c:	f000 fa92 	bl	1e534 <__malloc_unlock>
   1e010:	e6bc      	b.n	1dd8c <_malloc_r+0x18c>
   1e012:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1e016:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1e01a:	00c3      	lsls	r3, r0, #3
   1e01c:	e612      	b.n	1dc44 <_malloc_r+0x44>
   1e01e:	099a      	lsrs	r2, r3, #6
   1e020:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1e024:	00c9      	lsls	r1, r1, #3
   1e026:	3238      	adds	r2, #56	; 0x38
   1e028:	e7a4      	b.n	1df74 <_malloc_r+0x374>
   1e02a:	42bc      	cmp	r4, r7
   1e02c:	d054      	beq.n	1e0d8 <_malloc_r+0x4d8>
   1e02e:	68bc      	ldr	r4, [r7, #8]
   1e030:	6862      	ldr	r2, [r4, #4]
   1e032:	f022 0203 	bic.w	r2, r2, #3
   1e036:	e75d      	b.n	1def4 <_malloc_r+0x2f4>
   1e038:	f859 3908 	ldr.w	r3, [r9], #-8
   1e03c:	4599      	cmp	r9, r3
   1e03e:	f040 8086 	bne.w	1e14e <_malloc_r+0x54e>
   1e042:	f010 0f03 	tst.w	r0, #3
   1e046:	f100 30ff 	add.w	r0, r0, #4294967295
   1e04a:	d1f5      	bne.n	1e038 <_malloc_r+0x438>
   1e04c:	687b      	ldr	r3, [r7, #4]
   1e04e:	ea23 0304 	bic.w	r3, r3, r4
   1e052:	607b      	str	r3, [r7, #4]
   1e054:	0064      	lsls	r4, r4, #1
   1e056:	429c      	cmp	r4, r3
   1e058:	f63f aec7 	bhi.w	1ddea <_malloc_r+0x1ea>
   1e05c:	2c00      	cmp	r4, #0
   1e05e:	f43f aec4 	beq.w	1ddea <_malloc_r+0x1ea>
   1e062:	421c      	tst	r4, r3
   1e064:	4640      	mov	r0, r8
   1e066:	f47f ae3e 	bne.w	1dce6 <_malloc_r+0xe6>
   1e06a:	0064      	lsls	r4, r4, #1
   1e06c:	421c      	tst	r4, r3
   1e06e:	f100 0004 	add.w	r0, r0, #4
   1e072:	d0fa      	beq.n	1e06a <_malloc_r+0x46a>
   1e074:	e637      	b.n	1dce6 <_malloc_r+0xe6>
   1e076:	468c      	mov	ip, r1
   1e078:	e78c      	b.n	1df94 <_malloc_r+0x394>
   1e07a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1e07e:	d815      	bhi.n	1e0ac <_malloc_r+0x4ac>
   1e080:	0bf3      	lsrs	r3, r6, #15
   1e082:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1e086:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1e08a:	00c3      	lsls	r3, r0, #3
   1e08c:	e5da      	b.n	1dc44 <_malloc_r+0x44>
   1e08e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e092:	e6ed      	b.n	1de70 <_malloc_r+0x270>
   1e094:	687b      	ldr	r3, [r7, #4]
   1e096:	1092      	asrs	r2, r2, #2
   1e098:	2101      	movs	r1, #1
   1e09a:	fa01 f202 	lsl.w	r2, r1, r2
   1e09e:	4313      	orrs	r3, r2
   1e0a0:	607b      	str	r3, [r7, #4]
   1e0a2:	4662      	mov	r2, ip
   1e0a4:	e779      	b.n	1df9a <_malloc_r+0x39a>
   1e0a6:	2301      	movs	r3, #1
   1e0a8:	6053      	str	r3, [r2, #4]
   1e0aa:	e729      	b.n	1df00 <_malloc_r+0x300>
   1e0ac:	f240 5254 	movw	r2, #1364	; 0x554
   1e0b0:	4293      	cmp	r3, r2
   1e0b2:	d822      	bhi.n	1e0fa <_malloc_r+0x4fa>
   1e0b4:	0cb3      	lsrs	r3, r6, #18
   1e0b6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e0ba:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e0be:	00c3      	lsls	r3, r0, #3
   1e0c0:	e5c0      	b.n	1dc44 <_malloc_r+0x44>
   1e0c2:	f103 0b10 	add.w	fp, r3, #16
   1e0c6:	e6ae      	b.n	1de26 <_malloc_r+0x226>
   1e0c8:	2a54      	cmp	r2, #84	; 0x54
   1e0ca:	d829      	bhi.n	1e120 <_malloc_r+0x520>
   1e0cc:	0b1a      	lsrs	r2, r3, #12
   1e0ce:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e0d2:	00c9      	lsls	r1, r1, #3
   1e0d4:	326e      	adds	r2, #110	; 0x6e
   1e0d6:	e74d      	b.n	1df74 <_malloc_r+0x374>
   1e0d8:	4b20      	ldr	r3, [pc, #128]	; (1e15c <_malloc_r+0x55c>)
   1e0da:	6819      	ldr	r1, [r3, #0]
   1e0dc:	4459      	add	r1, fp
   1e0de:	6019      	str	r1, [r3, #0]
   1e0e0:	e6b2      	b.n	1de48 <_malloc_r+0x248>
   1e0e2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e0e6:	2800      	cmp	r0, #0
   1e0e8:	f47f aeae 	bne.w	1de48 <_malloc_r+0x248>
   1e0ec:	eb08 030b 	add.w	r3, r8, fp
   1e0f0:	68ba      	ldr	r2, [r7, #8]
   1e0f2:	f043 0301 	orr.w	r3, r3, #1
   1e0f6:	6053      	str	r3, [r2, #4]
   1e0f8:	e6ee      	b.n	1ded8 <_malloc_r+0x2d8>
   1e0fa:	207f      	movs	r0, #127	; 0x7f
   1e0fc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e100:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e104:	e59e      	b.n	1dc44 <_malloc_r+0x44>
   1e106:	f104 0108 	add.w	r1, r4, #8
   1e10a:	4628      	mov	r0, r5
   1e10c:	9300      	str	r3, [sp, #0]
   1e10e:	f003 fb93 	bl	21838 <_free_r>
   1e112:	9b00      	ldr	r3, [sp, #0]
   1e114:	6819      	ldr	r1, [r3, #0]
   1e116:	e6df      	b.n	1ded8 <_malloc_r+0x2d8>
   1e118:	2001      	movs	r0, #1
   1e11a:	f04f 0900 	mov.w	r9, #0
   1e11e:	e6bc      	b.n	1de9a <_malloc_r+0x29a>
   1e120:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e124:	d805      	bhi.n	1e132 <_malloc_r+0x532>
   1e126:	0bda      	lsrs	r2, r3, #15
   1e128:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e12c:	00c9      	lsls	r1, r1, #3
   1e12e:	3277      	adds	r2, #119	; 0x77
   1e130:	e720      	b.n	1df74 <_malloc_r+0x374>
   1e132:	f240 5154 	movw	r1, #1364	; 0x554
   1e136:	428a      	cmp	r2, r1
   1e138:	d805      	bhi.n	1e146 <_malloc_r+0x546>
   1e13a:	0c9a      	lsrs	r2, r3, #18
   1e13c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e140:	00c9      	lsls	r1, r1, #3
   1e142:	327c      	adds	r2, #124	; 0x7c
   1e144:	e716      	b.n	1df74 <_malloc_r+0x374>
   1e146:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e14a:	227e      	movs	r2, #126	; 0x7e
   1e14c:	e712      	b.n	1df74 <_malloc_r+0x374>
   1e14e:	687b      	ldr	r3, [r7, #4]
   1e150:	e780      	b.n	1e054 <_malloc_r+0x454>
   1e152:	08f0      	lsrs	r0, r6, #3
   1e154:	f106 0308 	add.w	r3, r6, #8
   1e158:	e600      	b.n	1dd5c <_malloc_r+0x15c>
   1e15a:	bf00      	nop
   1e15c:	200022a0 	.word	0x200022a0

0001e160 <__ascii_mbtowc>:
   1e160:	b082      	sub	sp, #8
   1e162:	b149      	cbz	r1, 1e178 <__ascii_mbtowc+0x18>
   1e164:	b15a      	cbz	r2, 1e17e <__ascii_mbtowc+0x1e>
   1e166:	b16b      	cbz	r3, 1e184 <__ascii_mbtowc+0x24>
   1e168:	7813      	ldrb	r3, [r2, #0]
   1e16a:	600b      	str	r3, [r1, #0]
   1e16c:	7812      	ldrb	r2, [r2, #0]
   1e16e:	1c10      	adds	r0, r2, #0
   1e170:	bf18      	it	ne
   1e172:	2001      	movne	r0, #1
   1e174:	b002      	add	sp, #8
   1e176:	4770      	bx	lr
   1e178:	a901      	add	r1, sp, #4
   1e17a:	2a00      	cmp	r2, #0
   1e17c:	d1f3      	bne.n	1e166 <__ascii_mbtowc+0x6>
   1e17e:	4610      	mov	r0, r2
   1e180:	b002      	add	sp, #8
   1e182:	4770      	bx	lr
   1e184:	f06f 0001 	mvn.w	r0, #1
   1e188:	e7f4      	b.n	1e174 <__ascii_mbtowc+0x14>
   1e18a:	bf00      	nop
   1e18c:	0000      	movs	r0, r0
	...

0001e190 <memchr>:
   1e190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e194:	2a10      	cmp	r2, #16
   1e196:	db2b      	blt.n	1e1f0 <memchr+0x60>
   1e198:	f010 0f07 	tst.w	r0, #7
   1e19c:	d008      	beq.n	1e1b0 <memchr+0x20>
   1e19e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e1a2:	3a01      	subs	r2, #1
   1e1a4:	428b      	cmp	r3, r1
   1e1a6:	d02d      	beq.n	1e204 <memchr+0x74>
   1e1a8:	f010 0f07 	tst.w	r0, #7
   1e1ac:	b342      	cbz	r2, 1e200 <memchr+0x70>
   1e1ae:	d1f6      	bne.n	1e19e <memchr+0xe>
   1e1b0:	b4f0      	push	{r4, r5, r6, r7}
   1e1b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e1b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e1ba:	f022 0407 	bic.w	r4, r2, #7
   1e1be:	f07f 0700 	mvns.w	r7, #0
   1e1c2:	2300      	movs	r3, #0
   1e1c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e1c8:	3c08      	subs	r4, #8
   1e1ca:	ea85 0501 	eor.w	r5, r5, r1
   1e1ce:	ea86 0601 	eor.w	r6, r6, r1
   1e1d2:	fa85 f547 	uadd8	r5, r5, r7
   1e1d6:	faa3 f587 	sel	r5, r3, r7
   1e1da:	fa86 f647 	uadd8	r6, r6, r7
   1e1de:	faa5 f687 	sel	r6, r5, r7
   1e1e2:	b98e      	cbnz	r6, 1e208 <memchr+0x78>
   1e1e4:	d1ee      	bne.n	1e1c4 <memchr+0x34>
   1e1e6:	bcf0      	pop	{r4, r5, r6, r7}
   1e1e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e1ec:	f002 0207 	and.w	r2, r2, #7
   1e1f0:	b132      	cbz	r2, 1e200 <memchr+0x70>
   1e1f2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e1f6:	3a01      	subs	r2, #1
   1e1f8:	ea83 0301 	eor.w	r3, r3, r1
   1e1fc:	b113      	cbz	r3, 1e204 <memchr+0x74>
   1e1fe:	d1f8      	bne.n	1e1f2 <memchr+0x62>
   1e200:	2000      	movs	r0, #0
   1e202:	4770      	bx	lr
   1e204:	3801      	subs	r0, #1
   1e206:	4770      	bx	lr
   1e208:	2d00      	cmp	r5, #0
   1e20a:	bf06      	itte	eq
   1e20c:	4635      	moveq	r5, r6
   1e20e:	3803      	subeq	r0, #3
   1e210:	3807      	subne	r0, #7
   1e212:	f015 0f01 	tst.w	r5, #1
   1e216:	d107      	bne.n	1e228 <memchr+0x98>
   1e218:	3001      	adds	r0, #1
   1e21a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e21e:	bf02      	ittt	eq
   1e220:	3001      	addeq	r0, #1
   1e222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e226:	3001      	addeq	r0, #1
   1e228:	bcf0      	pop	{r4, r5, r6, r7}
   1e22a:	3801      	subs	r0, #1
   1e22c:	4770      	bx	lr
   1e22e:	bf00      	nop

0001e230 <memcmp>:
   1e230:	2a03      	cmp	r2, #3
   1e232:	b470      	push	{r4, r5, r6}
   1e234:	d922      	bls.n	1e27c <memcmp+0x4c>
   1e236:	ea40 0301 	orr.w	r3, r0, r1
   1e23a:	079b      	lsls	r3, r3, #30
   1e23c:	d011      	beq.n	1e262 <memcmp+0x32>
   1e23e:	7803      	ldrb	r3, [r0, #0]
   1e240:	780c      	ldrb	r4, [r1, #0]
   1e242:	42a3      	cmp	r3, r4
   1e244:	d11d      	bne.n	1e282 <memcmp+0x52>
   1e246:	440a      	add	r2, r1
   1e248:	3101      	adds	r1, #1
   1e24a:	e005      	b.n	1e258 <memcmp+0x28>
   1e24c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e250:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e254:	42a3      	cmp	r3, r4
   1e256:	d114      	bne.n	1e282 <memcmp+0x52>
   1e258:	4291      	cmp	r1, r2
   1e25a:	d1f7      	bne.n	1e24c <memcmp+0x1c>
   1e25c:	2000      	movs	r0, #0
   1e25e:	bc70      	pop	{r4, r5, r6}
   1e260:	4770      	bx	lr
   1e262:	680d      	ldr	r5, [r1, #0]
   1e264:	6806      	ldr	r6, [r0, #0]
   1e266:	42ae      	cmp	r6, r5
   1e268:	460c      	mov	r4, r1
   1e26a:	4603      	mov	r3, r0
   1e26c:	f101 0104 	add.w	r1, r1, #4
   1e270:	f100 0004 	add.w	r0, r0, #4
   1e274:	d108      	bne.n	1e288 <memcmp+0x58>
   1e276:	3a04      	subs	r2, #4
   1e278:	2a03      	cmp	r2, #3
   1e27a:	d8f2      	bhi.n	1e262 <memcmp+0x32>
   1e27c:	2a00      	cmp	r2, #0
   1e27e:	d1de      	bne.n	1e23e <memcmp+0xe>
   1e280:	e7ec      	b.n	1e25c <memcmp+0x2c>
   1e282:	1b18      	subs	r0, r3, r4
   1e284:	bc70      	pop	{r4, r5, r6}
   1e286:	4770      	bx	lr
   1e288:	4621      	mov	r1, r4
   1e28a:	4618      	mov	r0, r3
   1e28c:	e7d7      	b.n	1e23e <memcmp+0xe>
   1e28e:	bf00      	nop

0001e290 <memcpy>:
   1e290:	4684      	mov	ip, r0
   1e292:	ea41 0300 	orr.w	r3, r1, r0
   1e296:	f013 0303 	ands.w	r3, r3, #3
   1e29a:	d16d      	bne.n	1e378 <memcpy+0xe8>
   1e29c:	3a40      	subs	r2, #64	; 0x40
   1e29e:	d341      	bcc.n	1e324 <memcpy+0x94>
   1e2a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2a4:	f840 3b04 	str.w	r3, [r0], #4
   1e2a8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2ac:	f840 3b04 	str.w	r3, [r0], #4
   1e2b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2b4:	f840 3b04 	str.w	r3, [r0], #4
   1e2b8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2bc:	f840 3b04 	str.w	r3, [r0], #4
   1e2c0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2c4:	f840 3b04 	str.w	r3, [r0], #4
   1e2c8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2cc:	f840 3b04 	str.w	r3, [r0], #4
   1e2d0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2d4:	f840 3b04 	str.w	r3, [r0], #4
   1e2d8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2dc:	f840 3b04 	str.w	r3, [r0], #4
   1e2e0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2e4:	f840 3b04 	str.w	r3, [r0], #4
   1e2e8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2ec:	f840 3b04 	str.w	r3, [r0], #4
   1e2f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2f4:	f840 3b04 	str.w	r3, [r0], #4
   1e2f8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2fc:	f840 3b04 	str.w	r3, [r0], #4
   1e300:	f851 3b04 	ldr.w	r3, [r1], #4
   1e304:	f840 3b04 	str.w	r3, [r0], #4
   1e308:	f851 3b04 	ldr.w	r3, [r1], #4
   1e30c:	f840 3b04 	str.w	r3, [r0], #4
   1e310:	f851 3b04 	ldr.w	r3, [r1], #4
   1e314:	f840 3b04 	str.w	r3, [r0], #4
   1e318:	f851 3b04 	ldr.w	r3, [r1], #4
   1e31c:	f840 3b04 	str.w	r3, [r0], #4
   1e320:	3a40      	subs	r2, #64	; 0x40
   1e322:	d2bd      	bcs.n	1e2a0 <memcpy+0x10>
   1e324:	3230      	adds	r2, #48	; 0x30
   1e326:	d311      	bcc.n	1e34c <memcpy+0xbc>
   1e328:	f851 3b04 	ldr.w	r3, [r1], #4
   1e32c:	f840 3b04 	str.w	r3, [r0], #4
   1e330:	f851 3b04 	ldr.w	r3, [r1], #4
   1e334:	f840 3b04 	str.w	r3, [r0], #4
   1e338:	f851 3b04 	ldr.w	r3, [r1], #4
   1e33c:	f840 3b04 	str.w	r3, [r0], #4
   1e340:	f851 3b04 	ldr.w	r3, [r1], #4
   1e344:	f840 3b04 	str.w	r3, [r0], #4
   1e348:	3a10      	subs	r2, #16
   1e34a:	d2ed      	bcs.n	1e328 <memcpy+0x98>
   1e34c:	320c      	adds	r2, #12
   1e34e:	d305      	bcc.n	1e35c <memcpy+0xcc>
   1e350:	f851 3b04 	ldr.w	r3, [r1], #4
   1e354:	f840 3b04 	str.w	r3, [r0], #4
   1e358:	3a04      	subs	r2, #4
   1e35a:	d2f9      	bcs.n	1e350 <memcpy+0xc0>
   1e35c:	3204      	adds	r2, #4
   1e35e:	d008      	beq.n	1e372 <memcpy+0xe2>
   1e360:	07d2      	lsls	r2, r2, #31
   1e362:	bf1c      	itt	ne
   1e364:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e368:	f800 3b01 	strbne.w	r3, [r0], #1
   1e36c:	d301      	bcc.n	1e372 <memcpy+0xe2>
   1e36e:	880b      	ldrh	r3, [r1, #0]
   1e370:	8003      	strh	r3, [r0, #0]
   1e372:	4660      	mov	r0, ip
   1e374:	4770      	bx	lr
   1e376:	bf00      	nop
   1e378:	2a08      	cmp	r2, #8
   1e37a:	d313      	bcc.n	1e3a4 <memcpy+0x114>
   1e37c:	078b      	lsls	r3, r1, #30
   1e37e:	d08d      	beq.n	1e29c <memcpy+0xc>
   1e380:	f010 0303 	ands.w	r3, r0, #3
   1e384:	d08a      	beq.n	1e29c <memcpy+0xc>
   1e386:	f1c3 0304 	rsb	r3, r3, #4
   1e38a:	1ad2      	subs	r2, r2, r3
   1e38c:	07db      	lsls	r3, r3, #31
   1e38e:	bf1c      	itt	ne
   1e390:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e394:	f800 3b01 	strbne.w	r3, [r0], #1
   1e398:	d380      	bcc.n	1e29c <memcpy+0xc>
   1e39a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e39e:	f820 3b02 	strh.w	r3, [r0], #2
   1e3a2:	e77b      	b.n	1e29c <memcpy+0xc>
   1e3a4:	3a04      	subs	r2, #4
   1e3a6:	d3d9      	bcc.n	1e35c <memcpy+0xcc>
   1e3a8:	3a01      	subs	r2, #1
   1e3aa:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e3ae:	f800 3b01 	strb.w	r3, [r0], #1
   1e3b2:	d2f9      	bcs.n	1e3a8 <memcpy+0x118>
   1e3b4:	780b      	ldrb	r3, [r1, #0]
   1e3b6:	7003      	strb	r3, [r0, #0]
   1e3b8:	784b      	ldrb	r3, [r1, #1]
   1e3ba:	7043      	strb	r3, [r0, #1]
   1e3bc:	788b      	ldrb	r3, [r1, #2]
   1e3be:	7083      	strb	r3, [r0, #2]
   1e3c0:	4660      	mov	r0, ip
   1e3c2:	4770      	bx	lr

0001e3c4 <memmove>:
   1e3c4:	4288      	cmp	r0, r1
   1e3c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e3c8:	d90d      	bls.n	1e3e6 <memmove+0x22>
   1e3ca:	188b      	adds	r3, r1, r2
   1e3cc:	4298      	cmp	r0, r3
   1e3ce:	d20a      	bcs.n	1e3e6 <memmove+0x22>
   1e3d0:	1884      	adds	r4, r0, r2
   1e3d2:	2a00      	cmp	r2, #0
   1e3d4:	d051      	beq.n	1e47a <memmove+0xb6>
   1e3d6:	4622      	mov	r2, r4
   1e3d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e3dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e3e0:	4299      	cmp	r1, r3
   1e3e2:	d1f9      	bne.n	1e3d8 <memmove+0x14>
   1e3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3e6:	2a0f      	cmp	r2, #15
   1e3e8:	d948      	bls.n	1e47c <memmove+0xb8>
   1e3ea:	ea41 0300 	orr.w	r3, r1, r0
   1e3ee:	079b      	lsls	r3, r3, #30
   1e3f0:	d146      	bne.n	1e480 <memmove+0xbc>
   1e3f2:	f100 0410 	add.w	r4, r0, #16
   1e3f6:	f101 0310 	add.w	r3, r1, #16
   1e3fa:	4615      	mov	r5, r2
   1e3fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e400:	f844 6c10 	str.w	r6, [r4, #-16]
   1e404:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e408:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e40c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e410:	f844 6c08 	str.w	r6, [r4, #-8]
   1e414:	3d10      	subs	r5, #16
   1e416:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e41a:	f844 6c04 	str.w	r6, [r4, #-4]
   1e41e:	2d0f      	cmp	r5, #15
   1e420:	f103 0310 	add.w	r3, r3, #16
   1e424:	f104 0410 	add.w	r4, r4, #16
   1e428:	d8e8      	bhi.n	1e3fc <memmove+0x38>
   1e42a:	f1a2 0310 	sub.w	r3, r2, #16
   1e42e:	f023 030f 	bic.w	r3, r3, #15
   1e432:	f002 0e0f 	and.w	lr, r2, #15
   1e436:	3310      	adds	r3, #16
   1e438:	f1be 0f03 	cmp.w	lr, #3
   1e43c:	4419      	add	r1, r3
   1e43e:	4403      	add	r3, r0
   1e440:	d921      	bls.n	1e486 <memmove+0xc2>
   1e442:	1f1e      	subs	r6, r3, #4
   1e444:	460d      	mov	r5, r1
   1e446:	4674      	mov	r4, lr
   1e448:	3c04      	subs	r4, #4
   1e44a:	f855 7b04 	ldr.w	r7, [r5], #4
   1e44e:	f846 7f04 	str.w	r7, [r6, #4]!
   1e452:	2c03      	cmp	r4, #3
   1e454:	d8f8      	bhi.n	1e448 <memmove+0x84>
   1e456:	f1ae 0404 	sub.w	r4, lr, #4
   1e45a:	f024 0403 	bic.w	r4, r4, #3
   1e45e:	3404      	adds	r4, #4
   1e460:	4421      	add	r1, r4
   1e462:	4423      	add	r3, r4
   1e464:	f002 0203 	and.w	r2, r2, #3
   1e468:	b162      	cbz	r2, 1e484 <memmove+0xc0>
   1e46a:	3b01      	subs	r3, #1
   1e46c:	440a      	add	r2, r1
   1e46e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e472:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e476:	428a      	cmp	r2, r1
   1e478:	d1f9      	bne.n	1e46e <memmove+0xaa>
   1e47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e47c:	4603      	mov	r3, r0
   1e47e:	e7f3      	b.n	1e468 <memmove+0xa4>
   1e480:	4603      	mov	r3, r0
   1e482:	e7f2      	b.n	1e46a <memmove+0xa6>
   1e484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e486:	4672      	mov	r2, lr
   1e488:	e7ee      	b.n	1e468 <memmove+0xa4>
   1e48a:	bf00      	nop

0001e48c <memset>:
   1e48c:	b470      	push	{r4, r5, r6}
   1e48e:	0786      	lsls	r6, r0, #30
   1e490:	d046      	beq.n	1e520 <memset+0x94>
   1e492:	1e54      	subs	r4, r2, #1
   1e494:	2a00      	cmp	r2, #0
   1e496:	d041      	beq.n	1e51c <memset+0x90>
   1e498:	b2ca      	uxtb	r2, r1
   1e49a:	4603      	mov	r3, r0
   1e49c:	e002      	b.n	1e4a4 <memset+0x18>
   1e49e:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e4a2:	d33b      	bcc.n	1e51c <memset+0x90>
   1e4a4:	f803 2b01 	strb.w	r2, [r3], #1
   1e4a8:	079d      	lsls	r5, r3, #30
   1e4aa:	d1f8      	bne.n	1e49e <memset+0x12>
   1e4ac:	2c03      	cmp	r4, #3
   1e4ae:	d92e      	bls.n	1e50e <memset+0x82>
   1e4b0:	b2cd      	uxtb	r5, r1
   1e4b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e4b6:	2c0f      	cmp	r4, #15
   1e4b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e4bc:	d919      	bls.n	1e4f2 <memset+0x66>
   1e4be:	f103 0210 	add.w	r2, r3, #16
   1e4c2:	4626      	mov	r6, r4
   1e4c4:	3e10      	subs	r6, #16
   1e4c6:	2e0f      	cmp	r6, #15
   1e4c8:	f842 5c10 	str.w	r5, [r2, #-16]
   1e4cc:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e4d0:	f842 5c08 	str.w	r5, [r2, #-8]
   1e4d4:	f842 5c04 	str.w	r5, [r2, #-4]
   1e4d8:	f102 0210 	add.w	r2, r2, #16
   1e4dc:	d8f2      	bhi.n	1e4c4 <memset+0x38>
   1e4de:	f1a4 0210 	sub.w	r2, r4, #16
   1e4e2:	f022 020f 	bic.w	r2, r2, #15
   1e4e6:	f004 040f 	and.w	r4, r4, #15
   1e4ea:	3210      	adds	r2, #16
   1e4ec:	2c03      	cmp	r4, #3
   1e4ee:	4413      	add	r3, r2
   1e4f0:	d90d      	bls.n	1e50e <memset+0x82>
   1e4f2:	461e      	mov	r6, r3
   1e4f4:	4622      	mov	r2, r4
   1e4f6:	3a04      	subs	r2, #4
   1e4f8:	2a03      	cmp	r2, #3
   1e4fa:	f846 5b04 	str.w	r5, [r6], #4
   1e4fe:	d8fa      	bhi.n	1e4f6 <memset+0x6a>
   1e500:	1f22      	subs	r2, r4, #4
   1e502:	f022 0203 	bic.w	r2, r2, #3
   1e506:	3204      	adds	r2, #4
   1e508:	4413      	add	r3, r2
   1e50a:	f004 0403 	and.w	r4, r4, #3
   1e50e:	b12c      	cbz	r4, 1e51c <memset+0x90>
   1e510:	b2c9      	uxtb	r1, r1
   1e512:	441c      	add	r4, r3
   1e514:	f803 1b01 	strb.w	r1, [r3], #1
   1e518:	429c      	cmp	r4, r3
   1e51a:	d1fb      	bne.n	1e514 <memset+0x88>
   1e51c:	bc70      	pop	{r4, r5, r6}
   1e51e:	4770      	bx	lr
   1e520:	4614      	mov	r4, r2
   1e522:	4603      	mov	r3, r0
   1e524:	e7c2      	b.n	1e4ac <memset+0x20>
   1e526:	bf00      	nop

0001e528 <__malloc_lock>:
   1e528:	4801      	ldr	r0, [pc, #4]	; (1e530 <__malloc_lock+0x8>)
   1e52a:	f7ff bb55 	b.w	1dbd8 <__retarget_lock_acquire_recursive>
   1e52e:	bf00      	nop
   1e530:	20002388 	.word	0x20002388

0001e534 <__malloc_unlock>:
   1e534:	4801      	ldr	r0, [pc, #4]	; (1e53c <__malloc_unlock+0x8>)
   1e536:	f7ff bb51 	b.w	1dbdc <__retarget_lock_release_recursive>
   1e53a:	bf00      	nop
   1e53c:	20002388 	.word	0x20002388

0001e540 <_putc_r>:
   1e540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e542:	460e      	mov	r6, r1
   1e544:	4614      	mov	r4, r2
   1e546:	4607      	mov	r7, r0
   1e548:	b108      	cbz	r0, 1e54e <_putc_r+0xe>
   1e54a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e54c:	b34b      	cbz	r3, 1e5a2 <_putc_r+0x62>
   1e54e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e550:	07d8      	lsls	r0, r3, #31
   1e552:	d402      	bmi.n	1e55a <_putc_r+0x1a>
   1e554:	89a3      	ldrh	r3, [r4, #12]
   1e556:	0599      	lsls	r1, r3, #22
   1e558:	d526      	bpl.n	1e5a8 <_putc_r+0x68>
   1e55a:	68a3      	ldr	r3, [r4, #8]
   1e55c:	3b01      	subs	r3, #1
   1e55e:	2b00      	cmp	r3, #0
   1e560:	60a3      	str	r3, [r4, #8]
   1e562:	db11      	blt.n	1e588 <_putc_r+0x48>
   1e564:	b2f5      	uxtb	r5, r6
   1e566:	6823      	ldr	r3, [r4, #0]
   1e568:	1c5a      	adds	r2, r3, #1
   1e56a:	6022      	str	r2, [r4, #0]
   1e56c:	701e      	strb	r6, [r3, #0]
   1e56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e570:	07da      	lsls	r2, r3, #31
   1e572:	d402      	bmi.n	1e57a <_putc_r+0x3a>
   1e574:	89a3      	ldrh	r3, [r4, #12]
   1e576:	059b      	lsls	r3, r3, #22
   1e578:	d501      	bpl.n	1e57e <_putc_r+0x3e>
   1e57a:	4628      	mov	r0, r5
   1e57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e57e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e580:	f7ff fb2c 	bl	1dbdc <__retarget_lock_release_recursive>
   1e584:	4628      	mov	r0, r5
   1e586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e588:	69a2      	ldr	r2, [r4, #24]
   1e58a:	4293      	cmp	r3, r2
   1e58c:	db02      	blt.n	1e594 <_putc_r+0x54>
   1e58e:	b2f5      	uxtb	r5, r6
   1e590:	2d0a      	cmp	r5, #10
   1e592:	d1e8      	bne.n	1e566 <_putc_r+0x26>
   1e594:	4631      	mov	r1, r6
   1e596:	4638      	mov	r0, r7
   1e598:	4622      	mov	r2, r4
   1e59a:	f001 ff09 	bl	203b0 <__swbuf_r>
   1e59e:	4605      	mov	r5, r0
   1e5a0:	e7e5      	b.n	1e56e <_putc_r+0x2e>
   1e5a2:	f003 f8a7 	bl	216f4 <__sinit>
   1e5a6:	e7d2      	b.n	1e54e <_putc_r+0xe>
   1e5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e5aa:	f7ff fb15 	bl	1dbd8 <__retarget_lock_acquire_recursive>
   1e5ae:	e7d4      	b.n	1e55a <_putc_r+0x1a>

0001e5b0 <realloc>:
   1e5b0:	4b02      	ldr	r3, [pc, #8]	; (1e5bc <realloc+0xc>)
   1e5b2:	460a      	mov	r2, r1
   1e5b4:	4601      	mov	r1, r0
   1e5b6:	6818      	ldr	r0, [r3, #0]
   1e5b8:	f000 b802 	b.w	1e5c0 <_realloc_r>
   1e5bc:	200000f8 	.word	0x200000f8

0001e5c0 <_realloc_r>:
   1e5c0:	2900      	cmp	r1, #0
   1e5c2:	f000 8095 	beq.w	1e6f0 <_realloc_r+0x130>
   1e5c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5ca:	460d      	mov	r5, r1
   1e5cc:	4616      	mov	r6, r2
   1e5ce:	b083      	sub	sp, #12
   1e5d0:	4680      	mov	r8, r0
   1e5d2:	f106 070b 	add.w	r7, r6, #11
   1e5d6:	f7ff ffa7 	bl	1e528 <__malloc_lock>
   1e5da:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e5de:	2f16      	cmp	r7, #22
   1e5e0:	f02e 0403 	bic.w	r4, lr, #3
   1e5e4:	f1a5 0908 	sub.w	r9, r5, #8
   1e5e8:	d83c      	bhi.n	1e664 <_realloc_r+0xa4>
   1e5ea:	2210      	movs	r2, #16
   1e5ec:	4617      	mov	r7, r2
   1e5ee:	42be      	cmp	r6, r7
   1e5f0:	d83d      	bhi.n	1e66e <_realloc_r+0xae>
   1e5f2:	4294      	cmp	r4, r2
   1e5f4:	da43      	bge.n	1e67e <_realloc_r+0xbe>
   1e5f6:	4bc4      	ldr	r3, [pc, #784]	; (1e908 <_realloc_r+0x348>)
   1e5f8:	6899      	ldr	r1, [r3, #8]
   1e5fa:	eb09 0004 	add.w	r0, r9, r4
   1e5fe:	4288      	cmp	r0, r1
   1e600:	f000 80b4 	beq.w	1e76c <_realloc_r+0x1ac>
   1e604:	6843      	ldr	r3, [r0, #4]
   1e606:	f023 0101 	bic.w	r1, r3, #1
   1e60a:	4401      	add	r1, r0
   1e60c:	6849      	ldr	r1, [r1, #4]
   1e60e:	07c9      	lsls	r1, r1, #31
   1e610:	d54c      	bpl.n	1e6ac <_realloc_r+0xec>
   1e612:	f01e 0f01 	tst.w	lr, #1
   1e616:	f000 809b 	beq.w	1e750 <_realloc_r+0x190>
   1e61a:	4631      	mov	r1, r6
   1e61c:	4640      	mov	r0, r8
   1e61e:	f7ff faef 	bl	1dc00 <_malloc_r>
   1e622:	4606      	mov	r6, r0
   1e624:	2800      	cmp	r0, #0
   1e626:	d03a      	beq.n	1e69e <_realloc_r+0xde>
   1e628:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e62c:	f023 0301 	bic.w	r3, r3, #1
   1e630:	444b      	add	r3, r9
   1e632:	f1a0 0208 	sub.w	r2, r0, #8
   1e636:	429a      	cmp	r2, r3
   1e638:	f000 8121 	beq.w	1e87e <_realloc_r+0x2be>
   1e63c:	1f22      	subs	r2, r4, #4
   1e63e:	2a24      	cmp	r2, #36	; 0x24
   1e640:	f200 8107 	bhi.w	1e852 <_realloc_r+0x292>
   1e644:	2a13      	cmp	r2, #19
   1e646:	f200 80db 	bhi.w	1e800 <_realloc_r+0x240>
   1e64a:	4603      	mov	r3, r0
   1e64c:	462a      	mov	r2, r5
   1e64e:	6811      	ldr	r1, [r2, #0]
   1e650:	6019      	str	r1, [r3, #0]
   1e652:	6851      	ldr	r1, [r2, #4]
   1e654:	6059      	str	r1, [r3, #4]
   1e656:	6892      	ldr	r2, [r2, #8]
   1e658:	609a      	str	r2, [r3, #8]
   1e65a:	4629      	mov	r1, r5
   1e65c:	4640      	mov	r0, r8
   1e65e:	f003 f8eb 	bl	21838 <_free_r>
   1e662:	e01c      	b.n	1e69e <_realloc_r+0xde>
   1e664:	f027 0707 	bic.w	r7, r7, #7
   1e668:	2f00      	cmp	r7, #0
   1e66a:	463a      	mov	r2, r7
   1e66c:	dabf      	bge.n	1e5ee <_realloc_r+0x2e>
   1e66e:	2600      	movs	r6, #0
   1e670:	230c      	movs	r3, #12
   1e672:	4630      	mov	r0, r6
   1e674:	f8c8 3000 	str.w	r3, [r8]
   1e678:	b003      	add	sp, #12
   1e67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e67e:	462e      	mov	r6, r5
   1e680:	1be3      	subs	r3, r4, r7
   1e682:	2b0f      	cmp	r3, #15
   1e684:	d81e      	bhi.n	1e6c4 <_realloc_r+0x104>
   1e686:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e68a:	f003 0301 	and.w	r3, r3, #1
   1e68e:	4323      	orrs	r3, r4
   1e690:	444c      	add	r4, r9
   1e692:	f8c9 3004 	str.w	r3, [r9, #4]
   1e696:	6863      	ldr	r3, [r4, #4]
   1e698:	f043 0301 	orr.w	r3, r3, #1
   1e69c:	6063      	str	r3, [r4, #4]
   1e69e:	4640      	mov	r0, r8
   1e6a0:	f7ff ff48 	bl	1e534 <__malloc_unlock>
   1e6a4:	4630      	mov	r0, r6
   1e6a6:	b003      	add	sp, #12
   1e6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6ac:	f023 0303 	bic.w	r3, r3, #3
   1e6b0:	18e1      	adds	r1, r4, r3
   1e6b2:	4291      	cmp	r1, r2
   1e6b4:	db1f      	blt.n	1e6f6 <_realloc_r+0x136>
   1e6b6:	68c3      	ldr	r3, [r0, #12]
   1e6b8:	6882      	ldr	r2, [r0, #8]
   1e6ba:	462e      	mov	r6, r5
   1e6bc:	60d3      	str	r3, [r2, #12]
   1e6be:	460c      	mov	r4, r1
   1e6c0:	609a      	str	r2, [r3, #8]
   1e6c2:	e7dd      	b.n	1e680 <_realloc_r+0xc0>
   1e6c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e6c8:	eb09 0107 	add.w	r1, r9, r7
   1e6cc:	f002 0201 	and.w	r2, r2, #1
   1e6d0:	444c      	add	r4, r9
   1e6d2:	f043 0301 	orr.w	r3, r3, #1
   1e6d6:	4317      	orrs	r7, r2
   1e6d8:	f8c9 7004 	str.w	r7, [r9, #4]
   1e6dc:	604b      	str	r3, [r1, #4]
   1e6de:	6863      	ldr	r3, [r4, #4]
   1e6e0:	f043 0301 	orr.w	r3, r3, #1
   1e6e4:	3108      	adds	r1, #8
   1e6e6:	6063      	str	r3, [r4, #4]
   1e6e8:	4640      	mov	r0, r8
   1e6ea:	f003 f8a5 	bl	21838 <_free_r>
   1e6ee:	e7d6      	b.n	1e69e <_realloc_r+0xde>
   1e6f0:	4611      	mov	r1, r2
   1e6f2:	f7ff ba85 	b.w	1dc00 <_malloc_r>
   1e6f6:	f01e 0f01 	tst.w	lr, #1
   1e6fa:	d18e      	bne.n	1e61a <_realloc_r+0x5a>
   1e6fc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e700:	eba9 0a01 	sub.w	sl, r9, r1
   1e704:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e708:	f021 0103 	bic.w	r1, r1, #3
   1e70c:	440b      	add	r3, r1
   1e70e:	4423      	add	r3, r4
   1e710:	4293      	cmp	r3, r2
   1e712:	db25      	blt.n	1e760 <_realloc_r+0x1a0>
   1e714:	68c2      	ldr	r2, [r0, #12]
   1e716:	6881      	ldr	r1, [r0, #8]
   1e718:	4656      	mov	r6, sl
   1e71a:	60ca      	str	r2, [r1, #12]
   1e71c:	6091      	str	r1, [r2, #8]
   1e71e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e722:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e726:	1f22      	subs	r2, r4, #4
   1e728:	2a24      	cmp	r2, #36	; 0x24
   1e72a:	60c1      	str	r1, [r0, #12]
   1e72c:	6088      	str	r0, [r1, #8]
   1e72e:	f200 8094 	bhi.w	1e85a <_realloc_r+0x29a>
   1e732:	2a13      	cmp	r2, #19
   1e734:	d96f      	bls.n	1e816 <_realloc_r+0x256>
   1e736:	6829      	ldr	r1, [r5, #0]
   1e738:	f8ca 1008 	str.w	r1, [sl, #8]
   1e73c:	6869      	ldr	r1, [r5, #4]
   1e73e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e742:	2a1b      	cmp	r2, #27
   1e744:	f200 80a2 	bhi.w	1e88c <_realloc_r+0x2cc>
   1e748:	3508      	adds	r5, #8
   1e74a:	f10a 0210 	add.w	r2, sl, #16
   1e74e:	e063      	b.n	1e818 <_realloc_r+0x258>
   1e750:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e754:	eba9 0a03 	sub.w	sl, r9, r3
   1e758:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e75c:	f021 0103 	bic.w	r1, r1, #3
   1e760:	1863      	adds	r3, r4, r1
   1e762:	4293      	cmp	r3, r2
   1e764:	f6ff af59 	blt.w	1e61a <_realloc_r+0x5a>
   1e768:	4656      	mov	r6, sl
   1e76a:	e7d8      	b.n	1e71e <_realloc_r+0x15e>
   1e76c:	6841      	ldr	r1, [r0, #4]
   1e76e:	f021 0b03 	bic.w	fp, r1, #3
   1e772:	44a3      	add	fp, r4
   1e774:	f107 0010 	add.w	r0, r7, #16
   1e778:	4583      	cmp	fp, r0
   1e77a:	da56      	bge.n	1e82a <_realloc_r+0x26a>
   1e77c:	f01e 0f01 	tst.w	lr, #1
   1e780:	f47f af4b 	bne.w	1e61a <_realloc_r+0x5a>
   1e784:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e788:	eba9 0a01 	sub.w	sl, r9, r1
   1e78c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e790:	f021 0103 	bic.w	r1, r1, #3
   1e794:	448b      	add	fp, r1
   1e796:	4558      	cmp	r0, fp
   1e798:	dce2      	bgt.n	1e760 <_realloc_r+0x1a0>
   1e79a:	4656      	mov	r6, sl
   1e79c:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e7a0:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e7a4:	1f22      	subs	r2, r4, #4
   1e7a6:	2a24      	cmp	r2, #36	; 0x24
   1e7a8:	60c1      	str	r1, [r0, #12]
   1e7aa:	6088      	str	r0, [r1, #8]
   1e7ac:	f200 808f 	bhi.w	1e8ce <_realloc_r+0x30e>
   1e7b0:	2a13      	cmp	r2, #19
   1e7b2:	f240 808a 	bls.w	1e8ca <_realloc_r+0x30a>
   1e7b6:	6829      	ldr	r1, [r5, #0]
   1e7b8:	f8ca 1008 	str.w	r1, [sl, #8]
   1e7bc:	6869      	ldr	r1, [r5, #4]
   1e7be:	f8ca 100c 	str.w	r1, [sl, #12]
   1e7c2:	2a1b      	cmp	r2, #27
   1e7c4:	f200 808a 	bhi.w	1e8dc <_realloc_r+0x31c>
   1e7c8:	3508      	adds	r5, #8
   1e7ca:	f10a 0210 	add.w	r2, sl, #16
   1e7ce:	6829      	ldr	r1, [r5, #0]
   1e7d0:	6011      	str	r1, [r2, #0]
   1e7d2:	6869      	ldr	r1, [r5, #4]
   1e7d4:	6051      	str	r1, [r2, #4]
   1e7d6:	68a9      	ldr	r1, [r5, #8]
   1e7d8:	6091      	str	r1, [r2, #8]
   1e7da:	eb0a 0107 	add.w	r1, sl, r7
   1e7de:	ebab 0207 	sub.w	r2, fp, r7
   1e7e2:	f042 0201 	orr.w	r2, r2, #1
   1e7e6:	6099      	str	r1, [r3, #8]
   1e7e8:	604a      	str	r2, [r1, #4]
   1e7ea:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e7ee:	f003 0301 	and.w	r3, r3, #1
   1e7f2:	431f      	orrs	r7, r3
   1e7f4:	4640      	mov	r0, r8
   1e7f6:	f8ca 7004 	str.w	r7, [sl, #4]
   1e7fa:	f7ff fe9b 	bl	1e534 <__malloc_unlock>
   1e7fe:	e751      	b.n	1e6a4 <_realloc_r+0xe4>
   1e800:	682b      	ldr	r3, [r5, #0]
   1e802:	6003      	str	r3, [r0, #0]
   1e804:	686b      	ldr	r3, [r5, #4]
   1e806:	6043      	str	r3, [r0, #4]
   1e808:	2a1b      	cmp	r2, #27
   1e80a:	d82d      	bhi.n	1e868 <_realloc_r+0x2a8>
   1e80c:	f100 0308 	add.w	r3, r0, #8
   1e810:	f105 0208 	add.w	r2, r5, #8
   1e814:	e71b      	b.n	1e64e <_realloc_r+0x8e>
   1e816:	4632      	mov	r2, r6
   1e818:	6829      	ldr	r1, [r5, #0]
   1e81a:	6011      	str	r1, [r2, #0]
   1e81c:	6869      	ldr	r1, [r5, #4]
   1e81e:	6051      	str	r1, [r2, #4]
   1e820:	68a9      	ldr	r1, [r5, #8]
   1e822:	6091      	str	r1, [r2, #8]
   1e824:	461c      	mov	r4, r3
   1e826:	46d1      	mov	r9, sl
   1e828:	e72a      	b.n	1e680 <_realloc_r+0xc0>
   1e82a:	eb09 0107 	add.w	r1, r9, r7
   1e82e:	ebab 0b07 	sub.w	fp, fp, r7
   1e832:	f04b 0201 	orr.w	r2, fp, #1
   1e836:	6099      	str	r1, [r3, #8]
   1e838:	604a      	str	r2, [r1, #4]
   1e83a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e83e:	f003 0301 	and.w	r3, r3, #1
   1e842:	431f      	orrs	r7, r3
   1e844:	4640      	mov	r0, r8
   1e846:	f845 7c04 	str.w	r7, [r5, #-4]
   1e84a:	f7ff fe73 	bl	1e534 <__malloc_unlock>
   1e84e:	462e      	mov	r6, r5
   1e850:	e728      	b.n	1e6a4 <_realloc_r+0xe4>
   1e852:	4629      	mov	r1, r5
   1e854:	f7ff fdb6 	bl	1e3c4 <memmove>
   1e858:	e6ff      	b.n	1e65a <_realloc_r+0x9a>
   1e85a:	4629      	mov	r1, r5
   1e85c:	4630      	mov	r0, r6
   1e85e:	461c      	mov	r4, r3
   1e860:	46d1      	mov	r9, sl
   1e862:	f7ff fdaf 	bl	1e3c4 <memmove>
   1e866:	e70b      	b.n	1e680 <_realloc_r+0xc0>
   1e868:	68ab      	ldr	r3, [r5, #8]
   1e86a:	6083      	str	r3, [r0, #8]
   1e86c:	68eb      	ldr	r3, [r5, #12]
   1e86e:	60c3      	str	r3, [r0, #12]
   1e870:	2a24      	cmp	r2, #36	; 0x24
   1e872:	d017      	beq.n	1e8a4 <_realloc_r+0x2e4>
   1e874:	f100 0310 	add.w	r3, r0, #16
   1e878:	f105 0210 	add.w	r2, r5, #16
   1e87c:	e6e7      	b.n	1e64e <_realloc_r+0x8e>
   1e87e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e882:	f023 0303 	bic.w	r3, r3, #3
   1e886:	441c      	add	r4, r3
   1e888:	462e      	mov	r6, r5
   1e88a:	e6f9      	b.n	1e680 <_realloc_r+0xc0>
   1e88c:	68a9      	ldr	r1, [r5, #8]
   1e88e:	f8ca 1010 	str.w	r1, [sl, #16]
   1e892:	68e9      	ldr	r1, [r5, #12]
   1e894:	f8ca 1014 	str.w	r1, [sl, #20]
   1e898:	2a24      	cmp	r2, #36	; 0x24
   1e89a:	d00c      	beq.n	1e8b6 <_realloc_r+0x2f6>
   1e89c:	3510      	adds	r5, #16
   1e89e:	f10a 0218 	add.w	r2, sl, #24
   1e8a2:	e7b9      	b.n	1e818 <_realloc_r+0x258>
   1e8a4:	692b      	ldr	r3, [r5, #16]
   1e8a6:	6103      	str	r3, [r0, #16]
   1e8a8:	696b      	ldr	r3, [r5, #20]
   1e8aa:	6143      	str	r3, [r0, #20]
   1e8ac:	f105 0218 	add.w	r2, r5, #24
   1e8b0:	f100 0318 	add.w	r3, r0, #24
   1e8b4:	e6cb      	b.n	1e64e <_realloc_r+0x8e>
   1e8b6:	692a      	ldr	r2, [r5, #16]
   1e8b8:	f8ca 2018 	str.w	r2, [sl, #24]
   1e8bc:	696a      	ldr	r2, [r5, #20]
   1e8be:	f8ca 201c 	str.w	r2, [sl, #28]
   1e8c2:	3518      	adds	r5, #24
   1e8c4:	f10a 0220 	add.w	r2, sl, #32
   1e8c8:	e7a6      	b.n	1e818 <_realloc_r+0x258>
   1e8ca:	4632      	mov	r2, r6
   1e8cc:	e77f      	b.n	1e7ce <_realloc_r+0x20e>
   1e8ce:	4629      	mov	r1, r5
   1e8d0:	4630      	mov	r0, r6
   1e8d2:	9301      	str	r3, [sp, #4]
   1e8d4:	f7ff fd76 	bl	1e3c4 <memmove>
   1e8d8:	9b01      	ldr	r3, [sp, #4]
   1e8da:	e77e      	b.n	1e7da <_realloc_r+0x21a>
   1e8dc:	68a9      	ldr	r1, [r5, #8]
   1e8de:	f8ca 1010 	str.w	r1, [sl, #16]
   1e8e2:	68e9      	ldr	r1, [r5, #12]
   1e8e4:	f8ca 1014 	str.w	r1, [sl, #20]
   1e8e8:	2a24      	cmp	r2, #36	; 0x24
   1e8ea:	d003      	beq.n	1e8f4 <_realloc_r+0x334>
   1e8ec:	3510      	adds	r5, #16
   1e8ee:	f10a 0218 	add.w	r2, sl, #24
   1e8f2:	e76c      	b.n	1e7ce <_realloc_r+0x20e>
   1e8f4:	692a      	ldr	r2, [r5, #16]
   1e8f6:	f8ca 2018 	str.w	r2, [sl, #24]
   1e8fa:	696a      	ldr	r2, [r5, #20]
   1e8fc:	f8ca 201c 	str.w	r2, [sl, #28]
   1e900:	3518      	adds	r5, #24
   1e902:	f10a 0220 	add.w	r2, sl, #32
   1e906:	e762      	b.n	1e7ce <_realloc_r+0x20e>
   1e908:	20000694 	.word	0x20000694

0001e90c <_sbrk_r>:
   1e90c:	b538      	push	{r3, r4, r5, lr}
   1e90e:	4c07      	ldr	r4, [pc, #28]	; (1e92c <_sbrk_r+0x20>)
   1e910:	2300      	movs	r3, #0
   1e912:	4605      	mov	r5, r0
   1e914:	4608      	mov	r0, r1
   1e916:	6023      	str	r3, [r4, #0]
   1e918:	f003 ff5c 	bl	227d4 <_sbrk>
   1e91c:	1c43      	adds	r3, r0, #1
   1e91e:	d000      	beq.n	1e922 <_sbrk_r+0x16>
   1e920:	bd38      	pop	{r3, r4, r5, pc}
   1e922:	6823      	ldr	r3, [r4, #0]
   1e924:	2b00      	cmp	r3, #0
   1e926:	d0fb      	beq.n	1e920 <_sbrk_r+0x14>
   1e928:	602b      	str	r3, [r5, #0]
   1e92a:	bd38      	pop	{r3, r4, r5, pc}
   1e92c:	2000239c 	.word	0x2000239c

0001e930 <_raise_r>:
   1e930:	291f      	cmp	r1, #31
   1e932:	d828      	bhi.n	1e986 <_raise_r+0x56>
   1e934:	b520      	push	{r5, lr}
   1e936:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1e93a:	b082      	sub	sp, #8
   1e93c:	4605      	mov	r5, r0
   1e93e:	b1aa      	cbz	r2, 1e96c <_raise_r+0x3c>
   1e940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e944:	b193      	cbz	r3, 1e96c <_raise_r+0x3c>
   1e946:	2b01      	cmp	r3, #1
   1e948:	d00e      	beq.n	1e968 <_raise_r+0x38>
   1e94a:	1c58      	adds	r0, r3, #1
   1e94c:	d007      	beq.n	1e95e <_raise_r+0x2e>
   1e94e:	2500      	movs	r5, #0
   1e950:	4608      	mov	r0, r1
   1e952:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1e956:	4798      	blx	r3
   1e958:	4628      	mov	r0, r5
   1e95a:	b002      	add	sp, #8
   1e95c:	bd20      	pop	{r5, pc}
   1e95e:	2316      	movs	r3, #22
   1e960:	2001      	movs	r0, #1
   1e962:	602b      	str	r3, [r5, #0]
   1e964:	b002      	add	sp, #8
   1e966:	bd20      	pop	{r5, pc}
   1e968:	2000      	movs	r0, #0
   1e96a:	e7f6      	b.n	1e95a <_raise_r+0x2a>
   1e96c:	4628      	mov	r0, r5
   1e96e:	9101      	str	r1, [sp, #4]
   1e970:	f000 f82a 	bl	1e9c8 <_getpid_r>
   1e974:	9901      	ldr	r1, [sp, #4]
   1e976:	460a      	mov	r2, r1
   1e978:	4601      	mov	r1, r0
   1e97a:	4628      	mov	r0, r5
   1e97c:	b002      	add	sp, #8
   1e97e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1e982:	f000 b80d 	b.w	1e9a0 <_kill_r>
   1e986:	2316      	movs	r3, #22
   1e988:	6003      	str	r3, [r0, #0]
   1e98a:	f04f 30ff 	mov.w	r0, #4294967295
   1e98e:	4770      	bx	lr

0001e990 <raise>:
   1e990:	4b02      	ldr	r3, [pc, #8]	; (1e99c <raise+0xc>)
   1e992:	4601      	mov	r1, r0
   1e994:	6818      	ldr	r0, [r3, #0]
   1e996:	f7ff bfcb 	b.w	1e930 <_raise_r>
   1e99a:	bf00      	nop
   1e99c:	200000f8 	.word	0x200000f8

0001e9a0 <_kill_r>:
   1e9a0:	b538      	push	{r3, r4, r5, lr}
   1e9a2:	460b      	mov	r3, r1
   1e9a4:	4c07      	ldr	r4, [pc, #28]	; (1e9c4 <_kill_r+0x24>)
   1e9a6:	4605      	mov	r5, r0
   1e9a8:	4611      	mov	r1, r2
   1e9aa:	4618      	mov	r0, r3
   1e9ac:	2300      	movs	r3, #0
   1e9ae:	6023      	str	r3, [r4, #0]
   1e9b0:	f003 ff8a 	bl	228c8 <_kill>
   1e9b4:	1c43      	adds	r3, r0, #1
   1e9b6:	d000      	beq.n	1e9ba <_kill_r+0x1a>
   1e9b8:	bd38      	pop	{r3, r4, r5, pc}
   1e9ba:	6823      	ldr	r3, [r4, #0]
   1e9bc:	2b00      	cmp	r3, #0
   1e9be:	d0fb      	beq.n	1e9b8 <_kill_r+0x18>
   1e9c0:	602b      	str	r3, [r5, #0]
   1e9c2:	bd38      	pop	{r3, r4, r5, pc}
   1e9c4:	2000239c 	.word	0x2000239c

0001e9c8 <_getpid_r>:
   1e9c8:	f003 bf02 	b.w	227d0 <_getpid>

0001e9cc <sprintf>:
   1e9cc:	b40e      	push	{r1, r2, r3}
   1e9ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9d0:	b09c      	sub	sp, #112	; 0x70
   1e9d2:	ab21      	add	r3, sp, #132	; 0x84
   1e9d4:	490f      	ldr	r1, [pc, #60]	; (1ea14 <sprintf+0x48>)
   1e9d6:	f853 2b04 	ldr.w	r2, [r3], #4
   1e9da:	9301      	str	r3, [sp, #4]
   1e9dc:	4605      	mov	r5, r0
   1e9de:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1e9e2:	6808      	ldr	r0, [r1, #0]
   1e9e4:	9502      	str	r5, [sp, #8]
   1e9e6:	f44f 7702 	mov.w	r7, #520	; 0x208
   1e9ea:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e9ee:	a902      	add	r1, sp, #8
   1e9f0:	9506      	str	r5, [sp, #24]
   1e9f2:	f8ad 7014 	strh.w	r7, [sp, #20]
   1e9f6:	9404      	str	r4, [sp, #16]
   1e9f8:	9407      	str	r4, [sp, #28]
   1e9fa:	f8ad 6016 	strh.w	r6, [sp, #22]
   1e9fe:	f000 fa3f 	bl	1ee80 <_svfprintf_r>
   1ea02:	9b02      	ldr	r3, [sp, #8]
   1ea04:	2200      	movs	r2, #0
   1ea06:	701a      	strb	r2, [r3, #0]
   1ea08:	b01c      	add	sp, #112	; 0x70
   1ea0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ea0e:	b003      	add	sp, #12
   1ea10:	4770      	bx	lr
   1ea12:	bf00      	nop
   1ea14:	200000f8 	.word	0x200000f8
	...
   1ea20:	eba2 0003 	sub.w	r0, r2, r3
   1ea24:	4770      	bx	lr
   1ea26:	bf00      	nop

0001ea28 <strcmp>:
   1ea28:	7802      	ldrb	r2, [r0, #0]
   1ea2a:	780b      	ldrb	r3, [r1, #0]
   1ea2c:	2a01      	cmp	r2, #1
   1ea2e:	bf28      	it	cs
   1ea30:	429a      	cmpcs	r2, r3
   1ea32:	d1f5      	bne.n	1ea20 <sprintf+0x54>
   1ea34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1ea38:	ea40 0401 	orr.w	r4, r0, r1
   1ea3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1ea40:	f06f 0c00 	mvn.w	ip, #0
   1ea44:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1ea48:	b312      	cbz	r2, 1ea90 <strcmp+0x68>
   1ea4a:	ea80 0401 	eor.w	r4, r0, r1
   1ea4e:	f014 0f07 	tst.w	r4, #7
   1ea52:	d16a      	bne.n	1eb2a <strcmp+0x102>
   1ea54:	f000 0407 	and.w	r4, r0, #7
   1ea58:	f020 0007 	bic.w	r0, r0, #7
   1ea5c:	f004 0503 	and.w	r5, r4, #3
   1ea60:	f021 0107 	bic.w	r1, r1, #7
   1ea64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ea68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ea6c:	f014 0f04 	tst.w	r4, #4
   1ea70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ea74:	fa0c f405 	lsl.w	r4, ip, r5
   1ea78:	ea62 0204 	orn	r2, r2, r4
   1ea7c:	ea66 0604 	orn	r6, r6, r4
   1ea80:	d00a      	beq.n	1ea98 <strcmp+0x70>
   1ea82:	ea63 0304 	orn	r3, r3, r4
   1ea86:	4662      	mov	r2, ip
   1ea88:	ea67 0704 	orn	r7, r7, r4
   1ea8c:	4666      	mov	r6, ip
   1ea8e:	e003      	b.n	1ea98 <strcmp+0x70>
   1ea90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ea94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ea98:	fa82 f54c 	uadd8	r5, r2, ip
   1ea9c:	ea82 0406 	eor.w	r4, r2, r6
   1eaa0:	faa4 f48c 	sel	r4, r4, ip
   1eaa4:	bb6c      	cbnz	r4, 1eb02 <strcmp+0xda>
   1eaa6:	fa83 f54c 	uadd8	r5, r3, ip
   1eaaa:	ea83 0507 	eor.w	r5, r3, r7
   1eaae:	faa5 f58c 	sel	r5, r5, ip
   1eab2:	b995      	cbnz	r5, 1eada <strcmp+0xb2>
   1eab4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1eab8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1eabc:	fa82 f54c 	uadd8	r5, r2, ip
   1eac0:	ea82 0406 	eor.w	r4, r2, r6
   1eac4:	faa4 f48c 	sel	r4, r4, ip
   1eac8:	fa83 f54c 	uadd8	r5, r3, ip
   1eacc:	ea83 0507 	eor.w	r5, r3, r7
   1ead0:	faa5 f58c 	sel	r5, r5, ip
   1ead4:	4325      	orrs	r5, r4
   1ead6:	d0db      	beq.n	1ea90 <strcmp+0x68>
   1ead8:	b99c      	cbnz	r4, 1eb02 <strcmp+0xda>
   1eada:	ba2d      	rev	r5, r5
   1eadc:	fab5 f485 	clz	r4, r5
   1eae0:	f024 0407 	bic.w	r4, r4, #7
   1eae4:	fa27 f104 	lsr.w	r1, r7, r4
   1eae8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1eaec:	fa23 f304 	lsr.w	r3, r3, r4
   1eaf0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1eaf4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eaf8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eafc:	eba0 0001 	sub.w	r0, r0, r1
   1eb00:	4770      	bx	lr
   1eb02:	ba24      	rev	r4, r4
   1eb04:	fab4 f484 	clz	r4, r4
   1eb08:	f024 0407 	bic.w	r4, r4, #7
   1eb0c:	fa26 f104 	lsr.w	r1, r6, r4
   1eb10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1eb14:	fa22 f204 	lsr.w	r2, r2, r4
   1eb18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1eb1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eb20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eb24:	eba0 0001 	sub.w	r0, r0, r1
   1eb28:	4770      	bx	lr
   1eb2a:	f014 0f03 	tst.w	r4, #3
   1eb2e:	d13c      	bne.n	1ebaa <strcmp+0x182>
   1eb30:	f010 0403 	ands.w	r4, r0, #3
   1eb34:	d128      	bne.n	1eb88 <strcmp+0x160>
   1eb36:	f850 2b08 	ldr.w	r2, [r0], #8
   1eb3a:	f851 3b08 	ldr.w	r3, [r1], #8
   1eb3e:	fa82 f54c 	uadd8	r5, r2, ip
   1eb42:	ea82 0503 	eor.w	r5, r2, r3
   1eb46:	faa5 f58c 	sel	r5, r5, ip
   1eb4a:	b95d      	cbnz	r5, 1eb64 <strcmp+0x13c>
   1eb4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1eb50:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1eb54:	fa82 f54c 	uadd8	r5, r2, ip
   1eb58:	ea82 0503 	eor.w	r5, r2, r3
   1eb5c:	faa5 f58c 	sel	r5, r5, ip
   1eb60:	2d00      	cmp	r5, #0
   1eb62:	d0e8      	beq.n	1eb36 <strcmp+0x10e>
   1eb64:	ba2d      	rev	r5, r5
   1eb66:	fab5 f485 	clz	r4, r5
   1eb6a:	f024 0407 	bic.w	r4, r4, #7
   1eb6e:	fa23 f104 	lsr.w	r1, r3, r4
   1eb72:	fa22 f204 	lsr.w	r2, r2, r4
   1eb76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1eb7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eb7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eb82:	eba0 0001 	sub.w	r0, r0, r1
   1eb86:	4770      	bx	lr
   1eb88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1eb8c:	f020 0003 	bic.w	r0, r0, #3
   1eb90:	f850 2b08 	ldr.w	r2, [r0], #8
   1eb94:	f021 0103 	bic.w	r1, r1, #3
   1eb98:	f851 3b08 	ldr.w	r3, [r1], #8
   1eb9c:	fa0c f404 	lsl.w	r4, ip, r4
   1eba0:	ea62 0204 	orn	r2, r2, r4
   1eba4:	ea63 0304 	orn	r3, r3, r4
   1eba8:	e7c9      	b.n	1eb3e <strcmp+0x116>
   1ebaa:	f010 0403 	ands.w	r4, r0, #3
   1ebae:	d01a      	beq.n	1ebe6 <strcmp+0x1be>
   1ebb0:	eba1 0104 	sub.w	r1, r1, r4
   1ebb4:	f020 0003 	bic.w	r0, r0, #3
   1ebb8:	07e4      	lsls	r4, r4, #31
   1ebba:	f850 2b04 	ldr.w	r2, [r0], #4
   1ebbe:	d006      	beq.n	1ebce <strcmp+0x1a6>
   1ebc0:	d20f      	bcs.n	1ebe2 <strcmp+0x1ba>
   1ebc2:	788b      	ldrb	r3, [r1, #2]
   1ebc4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1ebc8:	1ae4      	subs	r4, r4, r3
   1ebca:	d106      	bne.n	1ebda <strcmp+0x1b2>
   1ebcc:	b12b      	cbz	r3, 1ebda <strcmp+0x1b2>
   1ebce:	78cb      	ldrb	r3, [r1, #3]
   1ebd0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1ebd4:	1ae4      	subs	r4, r4, r3
   1ebd6:	d100      	bne.n	1ebda <strcmp+0x1b2>
   1ebd8:	b91b      	cbnz	r3, 1ebe2 <strcmp+0x1ba>
   1ebda:	4620      	mov	r0, r4
   1ebdc:	f85d 4b10 	ldr.w	r4, [sp], #16
   1ebe0:	4770      	bx	lr
   1ebe2:	f101 0104 	add.w	r1, r1, #4
   1ebe6:	f850 2b04 	ldr.w	r2, [r0], #4
   1ebea:	07cc      	lsls	r4, r1, #31
   1ebec:	f021 0103 	bic.w	r1, r1, #3
   1ebf0:	f851 3b04 	ldr.w	r3, [r1], #4
   1ebf4:	d848      	bhi.n	1ec88 <strcmp+0x260>
   1ebf6:	d224      	bcs.n	1ec42 <strcmp+0x21a>
   1ebf8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1ebfc:	fa82 f54c 	uadd8	r5, r2, ip
   1ec00:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1ec04:	faa5 f58c 	sel	r5, r5, ip
   1ec08:	d10a      	bne.n	1ec20 <strcmp+0x1f8>
   1ec0a:	b965      	cbnz	r5, 1ec26 <strcmp+0x1fe>
   1ec0c:	f851 3b04 	ldr.w	r3, [r1], #4
   1ec10:	ea84 0402 	eor.w	r4, r4, r2
   1ec14:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1ec18:	d10e      	bne.n	1ec38 <strcmp+0x210>
   1ec1a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ec1e:	e7eb      	b.n	1ebf8 <strcmp+0x1d0>
   1ec20:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1ec24:	e055      	b.n	1ecd2 <strcmp+0x2aa>
   1ec26:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1ec2a:	d14d      	bne.n	1ecc8 <strcmp+0x2a0>
   1ec2c:	7808      	ldrb	r0, [r1, #0]
   1ec2e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec32:	f1c0 0000 	rsb	r0, r0, #0
   1ec36:	4770      	bx	lr
   1ec38:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ec3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1ec40:	e047      	b.n	1ecd2 <strcmp+0x2aa>
   1ec42:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1ec46:	fa82 f54c 	uadd8	r5, r2, ip
   1ec4a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1ec4e:	faa5 f58c 	sel	r5, r5, ip
   1ec52:	d10a      	bne.n	1ec6a <strcmp+0x242>
   1ec54:	b965      	cbnz	r5, 1ec70 <strcmp+0x248>
   1ec56:	f851 3b04 	ldr.w	r3, [r1], #4
   1ec5a:	ea84 0402 	eor.w	r4, r4, r2
   1ec5e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1ec62:	d10c      	bne.n	1ec7e <strcmp+0x256>
   1ec64:	f850 2b04 	ldr.w	r2, [r0], #4
   1ec68:	e7eb      	b.n	1ec42 <strcmp+0x21a>
   1ec6a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1ec6e:	e030      	b.n	1ecd2 <strcmp+0x2aa>
   1ec70:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1ec74:	d128      	bne.n	1ecc8 <strcmp+0x2a0>
   1ec76:	880b      	ldrh	r3, [r1, #0]
   1ec78:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ec7c:	e029      	b.n	1ecd2 <strcmp+0x2aa>
   1ec7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ec82:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1ec86:	e024      	b.n	1ecd2 <strcmp+0x2aa>
   1ec88:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1ec8c:	fa82 f54c 	uadd8	r5, r2, ip
   1ec90:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1ec94:	faa5 f58c 	sel	r5, r5, ip
   1ec98:	d10a      	bne.n	1ecb0 <strcmp+0x288>
   1ec9a:	b965      	cbnz	r5, 1ecb6 <strcmp+0x28e>
   1ec9c:	f851 3b04 	ldr.w	r3, [r1], #4
   1eca0:	ea84 0402 	eor.w	r4, r4, r2
   1eca4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1eca8:	d109      	bne.n	1ecbe <strcmp+0x296>
   1ecaa:	f850 2b04 	ldr.w	r2, [r0], #4
   1ecae:	e7eb      	b.n	1ec88 <strcmp+0x260>
   1ecb0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1ecb4:	e00d      	b.n	1ecd2 <strcmp+0x2aa>
   1ecb6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1ecba:	d105      	bne.n	1ecc8 <strcmp+0x2a0>
   1ecbc:	680b      	ldr	r3, [r1, #0]
   1ecbe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1ecc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ecc6:	e004      	b.n	1ecd2 <strcmp+0x2aa>
   1ecc8:	f04f 0000 	mov.w	r0, #0
   1eccc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ecd0:	4770      	bx	lr
   1ecd2:	ba12      	rev	r2, r2
   1ecd4:	ba1b      	rev	r3, r3
   1ecd6:	fa82 f44c 	uadd8	r4, r2, ip
   1ecda:	ea82 0403 	eor.w	r4, r2, r3
   1ecde:	faa4 f58c 	sel	r5, r4, ip
   1ece2:	fab5 f485 	clz	r4, r5
   1ece6:	fa02 f204 	lsl.w	r2, r2, r4
   1ecea:	fa03 f304 	lsl.w	r3, r3, r4
   1ecee:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1ecf2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ecf6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1ecfa:	4770      	bx	lr
   1ecfc:	0000      	movs	r0, r0
	...

0001ed00 <strlen>:
   1ed00:	f890 f000 	pld	[r0]
   1ed04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1ed08:	f020 0107 	bic.w	r1, r0, #7
   1ed0c:	f06f 0c00 	mvn.w	ip, #0
   1ed10:	f010 0407 	ands.w	r4, r0, #7
   1ed14:	f891 f020 	pld	[r1, #32]
   1ed18:	f040 8049 	bne.w	1edae <strlen+0xae>
   1ed1c:	f04f 0400 	mov.w	r4, #0
   1ed20:	f06f 0007 	mvn.w	r0, #7
   1ed24:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ed28:	f891 f040 	pld	[r1, #64]	; 0x40
   1ed2c:	f100 0008 	add.w	r0, r0, #8
   1ed30:	fa82 f24c 	uadd8	r2, r2, ip
   1ed34:	faa4 f28c 	sel	r2, r4, ip
   1ed38:	fa83 f34c 	uadd8	r3, r3, ip
   1ed3c:	faa2 f38c 	sel	r3, r2, ip
   1ed40:	bb4b      	cbnz	r3, 1ed96 <strlen+0x96>
   1ed42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1ed46:	fa82 f24c 	uadd8	r2, r2, ip
   1ed4a:	f100 0008 	add.w	r0, r0, #8
   1ed4e:	faa4 f28c 	sel	r2, r4, ip
   1ed52:	fa83 f34c 	uadd8	r3, r3, ip
   1ed56:	faa2 f38c 	sel	r3, r2, ip
   1ed5a:	b9e3      	cbnz	r3, 1ed96 <strlen+0x96>
   1ed5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1ed60:	fa82 f24c 	uadd8	r2, r2, ip
   1ed64:	f100 0008 	add.w	r0, r0, #8
   1ed68:	faa4 f28c 	sel	r2, r4, ip
   1ed6c:	fa83 f34c 	uadd8	r3, r3, ip
   1ed70:	faa2 f38c 	sel	r3, r2, ip
   1ed74:	b97b      	cbnz	r3, 1ed96 <strlen+0x96>
   1ed76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1ed7a:	f101 0120 	add.w	r1, r1, #32
   1ed7e:	fa82 f24c 	uadd8	r2, r2, ip
   1ed82:	f100 0008 	add.w	r0, r0, #8
   1ed86:	faa4 f28c 	sel	r2, r4, ip
   1ed8a:	fa83 f34c 	uadd8	r3, r3, ip
   1ed8e:	faa2 f38c 	sel	r3, r2, ip
   1ed92:	2b00      	cmp	r3, #0
   1ed94:	d0c6      	beq.n	1ed24 <strlen+0x24>
   1ed96:	2a00      	cmp	r2, #0
   1ed98:	bf04      	itt	eq
   1ed9a:	3004      	addeq	r0, #4
   1ed9c:	461a      	moveq	r2, r3
   1ed9e:	ba12      	rev	r2, r2
   1eda0:	fab2 f282 	clz	r2, r2
   1eda4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1eda8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1edac:	4770      	bx	lr
   1edae:	e9d1 2300 	ldrd	r2, r3, [r1]
   1edb2:	f004 0503 	and.w	r5, r4, #3
   1edb6:	f1c4 0000 	rsb	r0, r4, #0
   1edba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1edbe:	f014 0f04 	tst.w	r4, #4
   1edc2:	f891 f040 	pld	[r1, #64]	; 0x40
   1edc6:	fa0c f505 	lsl.w	r5, ip, r5
   1edca:	ea62 0205 	orn	r2, r2, r5
   1edce:	bf1c      	itt	ne
   1edd0:	ea63 0305 	ornne	r3, r3, r5
   1edd4:	4662      	movne	r2, ip
   1edd6:	f04f 0400 	mov.w	r4, #0
   1edda:	e7a9      	b.n	1ed30 <strlen+0x30>

0001eddc <strncmp>:
   1eddc:	2a00      	cmp	r2, #0
   1edde:	d041      	beq.n	1ee64 <strncmp+0x88>
   1ede0:	ea40 0301 	orr.w	r3, r0, r1
   1ede4:	f013 0303 	ands.w	r3, r3, #3
   1ede8:	b4f0      	push	{r4, r5, r6, r7}
   1edea:	d125      	bne.n	1ee38 <strncmp+0x5c>
   1edec:	2a03      	cmp	r2, #3
   1edee:	d923      	bls.n	1ee38 <strncmp+0x5c>
   1edf0:	6804      	ldr	r4, [r0, #0]
   1edf2:	680d      	ldr	r5, [r1, #0]
   1edf4:	42ac      	cmp	r4, r5
   1edf6:	d11f      	bne.n	1ee38 <strncmp+0x5c>
   1edf8:	3a04      	subs	r2, #4
   1edfa:	d038      	beq.n	1ee6e <strncmp+0x92>
   1edfc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1ee00:	ea25 0404 	bic.w	r4, r5, r4
   1ee04:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ee08:	d12e      	bne.n	1ee68 <strncmp+0x8c>
   1ee0a:	3004      	adds	r0, #4
   1ee0c:	3104      	adds	r1, #4
   1ee0e:	e00f      	b.n	1ee30 <strncmp+0x54>
   1ee10:	f850 3b04 	ldr.w	r3, [r0], #4
   1ee14:	680e      	ldr	r6, [r1, #0]
   1ee16:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1ee1a:	42b3      	cmp	r3, r6
   1ee1c:	ea24 0403 	bic.w	r4, r4, r3
   1ee20:	f101 0104 	add.w	r1, r1, #4
   1ee24:	d126      	bne.n	1ee74 <strncmp+0x98>
   1ee26:	3a04      	subs	r2, #4
   1ee28:	d021      	beq.n	1ee6e <strncmp+0x92>
   1ee2a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ee2e:	d11b      	bne.n	1ee68 <strncmp+0x8c>
   1ee30:	2a03      	cmp	r2, #3
   1ee32:	4607      	mov	r7, r0
   1ee34:	460d      	mov	r5, r1
   1ee36:	d8eb      	bhi.n	1ee10 <strncmp+0x34>
   1ee38:	7805      	ldrb	r5, [r0, #0]
   1ee3a:	780c      	ldrb	r4, [r1, #0]
   1ee3c:	42ac      	cmp	r4, r5
   1ee3e:	f102 33ff 	add.w	r3, r2, #4294967295
   1ee42:	d11a      	bne.n	1ee7a <strncmp+0x9e>
   1ee44:	b183      	cbz	r3, 1ee68 <strncmp+0x8c>
   1ee46:	b914      	cbnz	r4, 1ee4e <strncmp+0x72>
   1ee48:	e00e      	b.n	1ee68 <strncmp+0x8c>
   1ee4a:	b16b      	cbz	r3, 1ee68 <strncmp+0x8c>
   1ee4c:	b17a      	cbz	r2, 1ee6e <strncmp+0x92>
   1ee4e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1ee52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1ee56:	42a2      	cmp	r2, r4
   1ee58:	f103 33ff 	add.w	r3, r3, #4294967295
   1ee5c:	d0f5      	beq.n	1ee4a <strncmp+0x6e>
   1ee5e:	1b10      	subs	r0, r2, r4
   1ee60:	bcf0      	pop	{r4, r5, r6, r7}
   1ee62:	4770      	bx	lr
   1ee64:	4610      	mov	r0, r2
   1ee66:	4770      	bx	lr
   1ee68:	2000      	movs	r0, #0
   1ee6a:	bcf0      	pop	{r4, r5, r6, r7}
   1ee6c:	4770      	bx	lr
   1ee6e:	4610      	mov	r0, r2
   1ee70:	bcf0      	pop	{r4, r5, r6, r7}
   1ee72:	4770      	bx	lr
   1ee74:	4629      	mov	r1, r5
   1ee76:	4638      	mov	r0, r7
   1ee78:	e7de      	b.n	1ee38 <strncmp+0x5c>
   1ee7a:	462a      	mov	r2, r5
   1ee7c:	e7ef      	b.n	1ee5e <strncmp+0x82>
   1ee7e:	bf00      	nop

0001ee80 <_svfprintf_r>:
   1ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee84:	b0c1      	sub	sp, #260	; 0x104
   1ee86:	460c      	mov	r4, r1
   1ee88:	9107      	str	r1, [sp, #28]
   1ee8a:	4692      	mov	sl, r2
   1ee8c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ee8e:	9008      	str	r0, [sp, #32]
   1ee90:	f002 fde2 	bl	21a58 <_localeconv_r>
   1ee94:	6803      	ldr	r3, [r0, #0]
   1ee96:	9314      	str	r3, [sp, #80]	; 0x50
   1ee98:	4618      	mov	r0, r3
   1ee9a:	f7ff ff31 	bl	1ed00 <strlen>
   1ee9e:	89a3      	ldrh	r3, [r4, #12]
   1eea0:	9013      	str	r0, [sp, #76]	; 0x4c
   1eea2:	0619      	lsls	r1, r3, #24
   1eea4:	d503      	bpl.n	1eeae <_svfprintf_r+0x2e>
   1eea6:	6923      	ldr	r3, [r4, #16]
   1eea8:	2b00      	cmp	r3, #0
   1eeaa:	f001 801b 	beq.w	1fee4 <_svfprintf_r+0x1064>
   1eeae:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1f100 <_svfprintf_r+0x280>
   1eeb2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1eeb6:	2300      	movs	r3, #0
   1eeb8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1eebc:	930f      	str	r3, [sp, #60]	; 0x3c
   1eebe:	9325      	str	r3, [sp, #148]	; 0x94
   1eec0:	9324      	str	r3, [sp, #144]	; 0x90
   1eec2:	9312      	str	r3, [sp, #72]	; 0x48
   1eec4:	9315      	str	r3, [sp, #84]	; 0x54
   1eec6:	9305      	str	r3, [sp, #20]
   1eec8:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1eecc:	46c8      	mov	r8, r9
   1eece:	f89a 3000 	ldrb.w	r3, [sl]
   1eed2:	4654      	mov	r4, sl
   1eed4:	b1e3      	cbz	r3, 1ef10 <_svfprintf_r+0x90>
   1eed6:	2b25      	cmp	r3, #37	; 0x25
   1eed8:	d102      	bne.n	1eee0 <_svfprintf_r+0x60>
   1eeda:	e019      	b.n	1ef10 <_svfprintf_r+0x90>
   1eedc:	2b25      	cmp	r3, #37	; 0x25
   1eede:	d003      	beq.n	1eee8 <_svfprintf_r+0x68>
   1eee0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1eee4:	2b00      	cmp	r3, #0
   1eee6:	d1f9      	bne.n	1eedc <_svfprintf_r+0x5c>
   1eee8:	eba4 050a 	sub.w	r5, r4, sl
   1eeec:	b185      	cbz	r5, 1ef10 <_svfprintf_r+0x90>
   1eeee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1eef0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1eef2:	f8c8 a000 	str.w	sl, [r8]
   1eef6:	3301      	adds	r3, #1
   1eef8:	442a      	add	r2, r5
   1eefa:	2b07      	cmp	r3, #7
   1eefc:	f8c8 5004 	str.w	r5, [r8, #4]
   1ef00:	9225      	str	r2, [sp, #148]	; 0x94
   1ef02:	9324      	str	r3, [sp, #144]	; 0x90
   1ef04:	dc7f      	bgt.n	1f006 <_svfprintf_r+0x186>
   1ef06:	f108 0808 	add.w	r8, r8, #8
   1ef0a:	9b05      	ldr	r3, [sp, #20]
   1ef0c:	442b      	add	r3, r5
   1ef0e:	9305      	str	r3, [sp, #20]
   1ef10:	7823      	ldrb	r3, [r4, #0]
   1ef12:	2b00      	cmp	r3, #0
   1ef14:	d07f      	beq.n	1f016 <_svfprintf_r+0x196>
   1ef16:	2300      	movs	r3, #0
   1ef18:	461a      	mov	r2, r3
   1ef1a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1ef1e:	4619      	mov	r1, r3
   1ef20:	9309      	str	r3, [sp, #36]	; 0x24
   1ef22:	469b      	mov	fp, r3
   1ef24:	f04f 30ff 	mov.w	r0, #4294967295
   1ef28:	7863      	ldrb	r3, [r4, #1]
   1ef2a:	9006      	str	r0, [sp, #24]
   1ef2c:	f104 0a01 	add.w	sl, r4, #1
   1ef30:	f10a 0a01 	add.w	sl, sl, #1
   1ef34:	f1a3 0020 	sub.w	r0, r3, #32
   1ef38:	2858      	cmp	r0, #88	; 0x58
   1ef3a:	f200 83d3 	bhi.w	1f6e4 <_svfprintf_r+0x864>
   1ef3e:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ef42:	023f      	.short	0x023f
   1ef44:	03d103d1 	.word	0x03d103d1
   1ef48:	03d10247 	.word	0x03d10247
   1ef4c:	03d103d1 	.word	0x03d103d1
   1ef50:	03d103d1 	.word	0x03d103d1
   1ef54:	024c03d1 	.word	0x024c03d1
   1ef58:	03d1020a 	.word	0x03d1020a
   1ef5c:	0273005d 	.word	0x0273005d
   1ef60:	028e03d1 	.word	0x028e03d1
   1ef64:	03c103c1 	.word	0x03c103c1
   1ef68:	03c103c1 	.word	0x03c103c1
   1ef6c:	03c103c1 	.word	0x03c103c1
   1ef70:	03c103c1 	.word	0x03c103c1
   1ef74:	03d103c1 	.word	0x03d103c1
   1ef78:	03d103d1 	.word	0x03d103d1
   1ef7c:	03d103d1 	.word	0x03d103d1
   1ef80:	03d103d1 	.word	0x03d103d1
   1ef84:	03d103d1 	.word	0x03d103d1
   1ef88:	033f03d1 	.word	0x033f03d1
   1ef8c:	03d1035f 	.word	0x03d1035f
   1ef90:	03d1035f 	.word	0x03d1035f
   1ef94:	03d103d1 	.word	0x03d103d1
   1ef98:	03aa03d1 	.word	0x03aa03d1
   1ef9c:	03d103d1 	.word	0x03d103d1
   1efa0:	03d103af 	.word	0x03d103af
   1efa4:	03d103d1 	.word	0x03d103d1
   1efa8:	03d103d1 	.word	0x03d103d1
   1efac:	03d10261 	.word	0x03d10261
   1efb0:	032603d1 	.word	0x032603d1
   1efb4:	03d103d1 	.word	0x03d103d1
   1efb8:	03d103d1 	.word	0x03d103d1
   1efbc:	03d103d1 	.word	0x03d103d1
   1efc0:	03d103d1 	.word	0x03d103d1
   1efc4:	03d103d1 	.word	0x03d103d1
   1efc8:	02e302ce 	.word	0x02e302ce
   1efcc:	035f035f 	.word	0x035f035f
   1efd0:	0293035f 	.word	0x0293035f
   1efd4:	03d102e3 	.word	0x03d102e3
   1efd8:	029803d1 	.word	0x029803d1
   1efdc:	02a503d1 	.word	0x02a503d1
   1efe0:	02bc01d3 	.word	0x02bc01d3
   1efe4:	03d1020f 	.word	0x03d1020f
   1efe8:	03d101e8 	.word	0x03d101e8
   1efec:	03d1007e 	.word	0x03d1007e
   1eff0:	021403d1 	.word	0x021403d1
   1eff4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1eff6:	930b      	str	r3, [sp, #44]	; 0x2c
   1eff8:	4240      	negs	r0, r0
   1effa:	9009      	str	r0, [sp, #36]	; 0x24
   1effc:	f04b 0b04 	orr.w	fp, fp, #4
   1f000:	f89a 3000 	ldrb.w	r3, [sl]
   1f004:	e794      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f006:	aa23      	add	r2, sp, #140	; 0x8c
   1f008:	9907      	ldr	r1, [sp, #28]
   1f00a:	9808      	ldr	r0, [sp, #32]
   1f00c:	f003 f8ea 	bl	221e4 <__ssprint_r>
   1f010:	b940      	cbnz	r0, 1f024 <_svfprintf_r+0x1a4>
   1f012:	46c8      	mov	r8, r9
   1f014:	e779      	b.n	1ef0a <_svfprintf_r+0x8a>
   1f016:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f018:	b123      	cbz	r3, 1f024 <_svfprintf_r+0x1a4>
   1f01a:	9808      	ldr	r0, [sp, #32]
   1f01c:	9907      	ldr	r1, [sp, #28]
   1f01e:	aa23      	add	r2, sp, #140	; 0x8c
   1f020:	f003 f8e0 	bl	221e4 <__ssprint_r>
   1f024:	9b07      	ldr	r3, [sp, #28]
   1f026:	899b      	ldrh	r3, [r3, #12]
   1f028:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f02c:	9b05      	ldr	r3, [sp, #20]
   1f02e:	bf18      	it	ne
   1f030:	f04f 33ff 	movne.w	r3, #4294967295
   1f034:	9305      	str	r3, [sp, #20]
   1f036:	9805      	ldr	r0, [sp, #20]
   1f038:	b041      	add	sp, #260	; 0x104
   1f03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f03e:	f01b 0f20 	tst.w	fp, #32
   1f042:	930d      	str	r3, [sp, #52]	; 0x34
   1f044:	f040 81e5 	bne.w	1f412 <_svfprintf_r+0x592>
   1f048:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f04a:	f01b 0f10 	tst.w	fp, #16
   1f04e:	4613      	mov	r3, r2
   1f050:	f040 8588 	bne.w	1fb64 <_svfprintf_r+0xce4>
   1f054:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f058:	f000 8584 	beq.w	1fb64 <_svfprintf_r+0xce4>
   1f05c:	8814      	ldrh	r4, [r2, #0]
   1f05e:	3204      	adds	r2, #4
   1f060:	2500      	movs	r5, #0
   1f062:	2301      	movs	r3, #1
   1f064:	920b      	str	r2, [sp, #44]	; 0x2c
   1f066:	2700      	movs	r7, #0
   1f068:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f06c:	9906      	ldr	r1, [sp, #24]
   1f06e:	1c4a      	adds	r2, r1, #1
   1f070:	f000 826d 	beq.w	1f54e <_svfprintf_r+0x6ce>
   1f074:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1f078:	9203      	str	r2, [sp, #12]
   1f07a:	ea54 0205 	orrs.w	r2, r4, r5
   1f07e:	f040 826c 	bne.w	1f55a <_svfprintf_r+0x6da>
   1f082:	2900      	cmp	r1, #0
   1f084:	f040 8451 	bne.w	1f92a <_svfprintf_r+0xaaa>
   1f088:	2b00      	cmp	r3, #0
   1f08a:	f040 850b 	bne.w	1faa4 <_svfprintf_r+0xc24>
   1f08e:	f01b 0301 	ands.w	r3, fp, #1
   1f092:	930a      	str	r3, [sp, #40]	; 0x28
   1f094:	f000 861a 	beq.w	1fccc <_svfprintf_r+0xe4c>
   1f098:	ae40      	add	r6, sp, #256	; 0x100
   1f09a:	2330      	movs	r3, #48	; 0x30
   1f09c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f0a0:	9b06      	ldr	r3, [sp, #24]
   1f0a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f0a4:	4293      	cmp	r3, r2
   1f0a6:	bfb8      	it	lt
   1f0a8:	4613      	movlt	r3, r2
   1f0aa:	9304      	str	r3, [sp, #16]
   1f0ac:	2300      	movs	r3, #0
   1f0ae:	930e      	str	r3, [sp, #56]	; 0x38
   1f0b0:	b117      	cbz	r7, 1f0b8 <_svfprintf_r+0x238>
   1f0b2:	9b04      	ldr	r3, [sp, #16]
   1f0b4:	3301      	adds	r3, #1
   1f0b6:	9304      	str	r3, [sp, #16]
   1f0b8:	9b03      	ldr	r3, [sp, #12]
   1f0ba:	f013 0302 	ands.w	r3, r3, #2
   1f0be:	930c      	str	r3, [sp, #48]	; 0x30
   1f0c0:	d002      	beq.n	1f0c8 <_svfprintf_r+0x248>
   1f0c2:	9b04      	ldr	r3, [sp, #16]
   1f0c4:	3302      	adds	r3, #2
   1f0c6:	9304      	str	r3, [sp, #16]
   1f0c8:	9b03      	ldr	r3, [sp, #12]
   1f0ca:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1f0ce:	f040 8320 	bne.w	1f712 <_svfprintf_r+0x892>
   1f0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f0d4:	9a04      	ldr	r2, [sp, #16]
   1f0d6:	eba3 0b02 	sub.w	fp, r3, r2
   1f0da:	f1bb 0f00 	cmp.w	fp, #0
   1f0de:	f340 8318 	ble.w	1f712 <_svfprintf_r+0x892>
   1f0e2:	f1bb 0f10 	cmp.w	fp, #16
   1f0e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f0e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f0ea:	dd30      	ble.n	1f14e <_svfprintf_r+0x2ce>
   1f0ec:	4643      	mov	r3, r8
   1f0ee:	4621      	mov	r1, r4
   1f0f0:	46a8      	mov	r8, r5
   1f0f2:	2710      	movs	r7, #16
   1f0f4:	9c08      	ldr	r4, [sp, #32]
   1f0f6:	9d07      	ldr	r5, [sp, #28]
   1f0f8:	e00d      	b.n	1f116 <_svfprintf_r+0x296>
   1f0fa:	bf00      	nop
   1f0fc:	f3af 8000 	nop.w
	...
   1f108:	f1ab 0b10 	sub.w	fp, fp, #16
   1f10c:	f1bb 0f10 	cmp.w	fp, #16
   1f110:	f103 0308 	add.w	r3, r3, #8
   1f114:	dd18      	ble.n	1f148 <_svfprintf_r+0x2c8>
   1f116:	3201      	adds	r2, #1
   1f118:	48b7      	ldr	r0, [pc, #732]	; (1f3f8 <_svfprintf_r+0x578>)
   1f11a:	9224      	str	r2, [sp, #144]	; 0x90
   1f11c:	3110      	adds	r1, #16
   1f11e:	2a07      	cmp	r2, #7
   1f120:	9125      	str	r1, [sp, #148]	; 0x94
   1f122:	e883 0081 	stmia.w	r3, {r0, r7}
   1f126:	ddef      	ble.n	1f108 <_svfprintf_r+0x288>
   1f128:	aa23      	add	r2, sp, #140	; 0x8c
   1f12a:	4629      	mov	r1, r5
   1f12c:	4620      	mov	r0, r4
   1f12e:	f003 f859 	bl	221e4 <__ssprint_r>
   1f132:	2800      	cmp	r0, #0
   1f134:	f47f af76 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f138:	f1ab 0b10 	sub.w	fp, fp, #16
   1f13c:	f1bb 0f10 	cmp.w	fp, #16
   1f140:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f142:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f144:	464b      	mov	r3, r9
   1f146:	dce6      	bgt.n	1f116 <_svfprintf_r+0x296>
   1f148:	4645      	mov	r5, r8
   1f14a:	460c      	mov	r4, r1
   1f14c:	4698      	mov	r8, r3
   1f14e:	3201      	adds	r2, #1
   1f150:	4ba9      	ldr	r3, [pc, #676]	; (1f3f8 <_svfprintf_r+0x578>)
   1f152:	9224      	str	r2, [sp, #144]	; 0x90
   1f154:	445c      	add	r4, fp
   1f156:	2a07      	cmp	r2, #7
   1f158:	9425      	str	r4, [sp, #148]	; 0x94
   1f15a:	e888 0808 	stmia.w	r8, {r3, fp}
   1f15e:	f300 84a6 	bgt.w	1faae <_svfprintf_r+0xc2e>
   1f162:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f166:	f108 0808 	add.w	r8, r8, #8
   1f16a:	b177      	cbz	r7, 1f18a <_svfprintf_r+0x30a>
   1f16c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f16e:	3301      	adds	r3, #1
   1f170:	3401      	adds	r4, #1
   1f172:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1f176:	2201      	movs	r2, #1
   1f178:	2b07      	cmp	r3, #7
   1f17a:	9425      	str	r4, [sp, #148]	; 0x94
   1f17c:	9324      	str	r3, [sp, #144]	; 0x90
   1f17e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f182:	f300 83f4 	bgt.w	1f96e <_svfprintf_r+0xaee>
   1f186:	f108 0808 	add.w	r8, r8, #8
   1f18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f18c:	b16b      	cbz	r3, 1f1aa <_svfprintf_r+0x32a>
   1f18e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f190:	3301      	adds	r3, #1
   1f192:	3402      	adds	r4, #2
   1f194:	a91c      	add	r1, sp, #112	; 0x70
   1f196:	2202      	movs	r2, #2
   1f198:	2b07      	cmp	r3, #7
   1f19a:	9425      	str	r4, [sp, #148]	; 0x94
   1f19c:	9324      	str	r3, [sp, #144]	; 0x90
   1f19e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f1a2:	f300 83d9 	bgt.w	1f958 <_svfprintf_r+0xad8>
   1f1a6:	f108 0808 	add.w	r8, r8, #8
   1f1aa:	2d80      	cmp	r5, #128	; 0x80
   1f1ac:	f000 8322 	beq.w	1f7f4 <_svfprintf_r+0x974>
   1f1b0:	9b06      	ldr	r3, [sp, #24]
   1f1b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f1b4:	1a9f      	subs	r7, r3, r2
   1f1b6:	2f00      	cmp	r7, #0
   1f1b8:	dd36      	ble.n	1f228 <_svfprintf_r+0x3a8>
   1f1ba:	2f10      	cmp	r7, #16
   1f1bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f1be:	4d8f      	ldr	r5, [pc, #572]	; (1f3fc <_svfprintf_r+0x57c>)
   1f1c0:	dd27      	ble.n	1f212 <_svfprintf_r+0x392>
   1f1c2:	4642      	mov	r2, r8
   1f1c4:	4621      	mov	r1, r4
   1f1c6:	46b0      	mov	r8, r6
   1f1c8:	f04f 0b10 	mov.w	fp, #16
   1f1cc:	462e      	mov	r6, r5
   1f1ce:	9c08      	ldr	r4, [sp, #32]
   1f1d0:	9d07      	ldr	r5, [sp, #28]
   1f1d2:	e004      	b.n	1f1de <_svfprintf_r+0x35e>
   1f1d4:	3f10      	subs	r7, #16
   1f1d6:	2f10      	cmp	r7, #16
   1f1d8:	f102 0208 	add.w	r2, r2, #8
   1f1dc:	dd15      	ble.n	1f20a <_svfprintf_r+0x38a>
   1f1de:	3301      	adds	r3, #1
   1f1e0:	3110      	adds	r1, #16
   1f1e2:	2b07      	cmp	r3, #7
   1f1e4:	9125      	str	r1, [sp, #148]	; 0x94
   1f1e6:	9324      	str	r3, [sp, #144]	; 0x90
   1f1e8:	e882 0840 	stmia.w	r2, {r6, fp}
   1f1ec:	ddf2      	ble.n	1f1d4 <_svfprintf_r+0x354>
   1f1ee:	aa23      	add	r2, sp, #140	; 0x8c
   1f1f0:	4629      	mov	r1, r5
   1f1f2:	4620      	mov	r0, r4
   1f1f4:	f002 fff6 	bl	221e4 <__ssprint_r>
   1f1f8:	2800      	cmp	r0, #0
   1f1fa:	f47f af13 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f1fe:	3f10      	subs	r7, #16
   1f200:	2f10      	cmp	r7, #16
   1f202:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f204:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f206:	464a      	mov	r2, r9
   1f208:	dce9      	bgt.n	1f1de <_svfprintf_r+0x35e>
   1f20a:	4635      	mov	r5, r6
   1f20c:	460c      	mov	r4, r1
   1f20e:	4646      	mov	r6, r8
   1f210:	4690      	mov	r8, r2
   1f212:	3301      	adds	r3, #1
   1f214:	443c      	add	r4, r7
   1f216:	2b07      	cmp	r3, #7
   1f218:	9425      	str	r4, [sp, #148]	; 0x94
   1f21a:	9324      	str	r3, [sp, #144]	; 0x90
   1f21c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f220:	f300 838f 	bgt.w	1f942 <_svfprintf_r+0xac2>
   1f224:	f108 0808 	add.w	r8, r8, #8
   1f228:	9b03      	ldr	r3, [sp, #12]
   1f22a:	05df      	lsls	r7, r3, #23
   1f22c:	f100 8273 	bmi.w	1f716 <_svfprintf_r+0x896>
   1f230:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f232:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f234:	f8c8 6000 	str.w	r6, [r8]
   1f238:	3301      	adds	r3, #1
   1f23a:	440c      	add	r4, r1
   1f23c:	2b07      	cmp	r3, #7
   1f23e:	9425      	str	r4, [sp, #148]	; 0x94
   1f240:	f8c8 1004 	str.w	r1, [r8, #4]
   1f244:	9324      	str	r3, [sp, #144]	; 0x90
   1f246:	f300 835b 	bgt.w	1f900 <_svfprintf_r+0xa80>
   1f24a:	f108 0808 	add.w	r8, r8, #8
   1f24e:	9b03      	ldr	r3, [sp, #12]
   1f250:	075b      	lsls	r3, r3, #29
   1f252:	d53a      	bpl.n	1f2ca <_svfprintf_r+0x44a>
   1f254:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f256:	9a04      	ldr	r2, [sp, #16]
   1f258:	1a9d      	subs	r5, r3, r2
   1f25a:	2d00      	cmp	r5, #0
   1f25c:	dd35      	ble.n	1f2ca <_svfprintf_r+0x44a>
   1f25e:	2d10      	cmp	r5, #16
   1f260:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f262:	dd20      	ble.n	1f2a6 <_svfprintf_r+0x426>
   1f264:	2610      	movs	r6, #16
   1f266:	9f08      	ldr	r7, [sp, #32]
   1f268:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f26c:	e004      	b.n	1f278 <_svfprintf_r+0x3f8>
   1f26e:	3d10      	subs	r5, #16
   1f270:	2d10      	cmp	r5, #16
   1f272:	f108 0808 	add.w	r8, r8, #8
   1f276:	dd16      	ble.n	1f2a6 <_svfprintf_r+0x426>
   1f278:	3301      	adds	r3, #1
   1f27a:	4a5f      	ldr	r2, [pc, #380]	; (1f3f8 <_svfprintf_r+0x578>)
   1f27c:	9324      	str	r3, [sp, #144]	; 0x90
   1f27e:	3410      	adds	r4, #16
   1f280:	2b07      	cmp	r3, #7
   1f282:	9425      	str	r4, [sp, #148]	; 0x94
   1f284:	e888 0044 	stmia.w	r8, {r2, r6}
   1f288:	ddf1      	ble.n	1f26e <_svfprintf_r+0x3ee>
   1f28a:	aa23      	add	r2, sp, #140	; 0x8c
   1f28c:	4659      	mov	r1, fp
   1f28e:	4638      	mov	r0, r7
   1f290:	f002 ffa8 	bl	221e4 <__ssprint_r>
   1f294:	2800      	cmp	r0, #0
   1f296:	f47f aec5 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f29a:	3d10      	subs	r5, #16
   1f29c:	2d10      	cmp	r5, #16
   1f29e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f2a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f2a2:	46c8      	mov	r8, r9
   1f2a4:	dce8      	bgt.n	1f278 <_svfprintf_r+0x3f8>
   1f2a6:	3301      	adds	r3, #1
   1f2a8:	4a53      	ldr	r2, [pc, #332]	; (1f3f8 <_svfprintf_r+0x578>)
   1f2aa:	9324      	str	r3, [sp, #144]	; 0x90
   1f2ac:	442c      	add	r4, r5
   1f2ae:	2b07      	cmp	r3, #7
   1f2b0:	9425      	str	r4, [sp, #148]	; 0x94
   1f2b2:	e888 0024 	stmia.w	r8, {r2, r5}
   1f2b6:	dd08      	ble.n	1f2ca <_svfprintf_r+0x44a>
   1f2b8:	aa23      	add	r2, sp, #140	; 0x8c
   1f2ba:	9907      	ldr	r1, [sp, #28]
   1f2bc:	9808      	ldr	r0, [sp, #32]
   1f2be:	f002 ff91 	bl	221e4 <__ssprint_r>
   1f2c2:	2800      	cmp	r0, #0
   1f2c4:	f47f aeae 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f2c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f2ca:	9b05      	ldr	r3, [sp, #20]
   1f2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f2ce:	9904      	ldr	r1, [sp, #16]
   1f2d0:	428a      	cmp	r2, r1
   1f2d2:	bfac      	ite	ge
   1f2d4:	189b      	addge	r3, r3, r2
   1f2d6:	185b      	addlt	r3, r3, r1
   1f2d8:	9305      	str	r3, [sp, #20]
   1f2da:	2c00      	cmp	r4, #0
   1f2dc:	f040 831b 	bne.w	1f916 <_svfprintf_r+0xa96>
   1f2e0:	2300      	movs	r3, #0
   1f2e2:	9324      	str	r3, [sp, #144]	; 0x90
   1f2e4:	46c8      	mov	r8, r9
   1f2e6:	e5f2      	b.n	1eece <_svfprintf_r+0x4e>
   1f2e8:	930d      	str	r3, [sp, #52]	; 0x34
   1f2ea:	f01b 0320 	ands.w	r3, fp, #32
   1f2ee:	f040 81de 	bne.w	1f6ae <_svfprintf_r+0x82e>
   1f2f2:	f01b 0210 	ands.w	r2, fp, #16
   1f2f6:	f040 842d 	bne.w	1fb54 <_svfprintf_r+0xcd4>
   1f2fa:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f2fe:	f000 8429 	beq.w	1fb54 <_svfprintf_r+0xcd4>
   1f302:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f304:	4613      	mov	r3, r2
   1f306:	460a      	mov	r2, r1
   1f308:	3204      	adds	r2, #4
   1f30a:	880c      	ldrh	r4, [r1, #0]
   1f30c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f30e:	2500      	movs	r5, #0
   1f310:	e6a9      	b.n	1f066 <_svfprintf_r+0x1e6>
   1f312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f314:	930d      	str	r3, [sp, #52]	; 0x34
   1f316:	6816      	ldr	r6, [r2, #0]
   1f318:	2400      	movs	r4, #0
   1f31a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f31e:	1d15      	adds	r5, r2, #4
   1f320:	2e00      	cmp	r6, #0
   1f322:	f000 86b5 	beq.w	20090 <_svfprintf_r+0x1210>
   1f326:	9a06      	ldr	r2, [sp, #24]
   1f328:	1c53      	adds	r3, r2, #1
   1f32a:	f000 8617 	beq.w	1ff5c <_svfprintf_r+0x10dc>
   1f32e:	4621      	mov	r1, r4
   1f330:	4630      	mov	r0, r6
   1f332:	f7fe ff2d 	bl	1e190 <memchr>
   1f336:	2800      	cmp	r0, #0
   1f338:	f000 8708 	beq.w	2014c <_svfprintf_r+0x12cc>
   1f33c:	1b83      	subs	r3, r0, r6
   1f33e:	930a      	str	r3, [sp, #40]	; 0x28
   1f340:	9406      	str	r4, [sp, #24]
   1f342:	950b      	str	r5, [sp, #44]	; 0x2c
   1f344:	f8cd b00c 	str.w	fp, [sp, #12]
   1f348:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f34c:	9304      	str	r3, [sp, #16]
   1f34e:	940e      	str	r4, [sp, #56]	; 0x38
   1f350:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f354:	e6ac      	b.n	1f0b0 <_svfprintf_r+0x230>
   1f356:	f89a 3000 	ldrb.w	r3, [sl]
   1f35a:	2201      	movs	r2, #1
   1f35c:	212b      	movs	r1, #43	; 0x2b
   1f35e:	e5e7      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f360:	f04b 0b20 	orr.w	fp, fp, #32
   1f364:	f89a 3000 	ldrb.w	r3, [sl]
   1f368:	e5e2      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f36a:	930d      	str	r3, [sp, #52]	; 0x34
   1f36c:	2a00      	cmp	r2, #0
   1f36e:	f040 87aa 	bne.w	202c6 <_svfprintf_r+0x1446>
   1f372:	4b23      	ldr	r3, [pc, #140]	; (1f400 <_svfprintf_r+0x580>)
   1f374:	9312      	str	r3, [sp, #72]	; 0x48
   1f376:	f01b 0f20 	tst.w	fp, #32
   1f37a:	f040 8112 	bne.w	1f5a2 <_svfprintf_r+0x722>
   1f37e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f380:	f01b 0f10 	tst.w	fp, #16
   1f384:	4613      	mov	r3, r2
   1f386:	f040 83e0 	bne.w	1fb4a <_svfprintf_r+0xcca>
   1f38a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f38e:	f000 83dc 	beq.w	1fb4a <_svfprintf_r+0xcca>
   1f392:	3304      	adds	r3, #4
   1f394:	8814      	ldrh	r4, [r2, #0]
   1f396:	930b      	str	r3, [sp, #44]	; 0x2c
   1f398:	2500      	movs	r5, #0
   1f39a:	f01b 0f01 	tst.w	fp, #1
   1f39e:	f000 810d 	beq.w	1f5bc <_svfprintf_r+0x73c>
   1f3a2:	ea54 0305 	orrs.w	r3, r4, r5
   1f3a6:	f000 8109 	beq.w	1f5bc <_svfprintf_r+0x73c>
   1f3aa:	2330      	movs	r3, #48	; 0x30
   1f3ac:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f3b0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f3b4:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f3b8:	f04b 0b02 	orr.w	fp, fp, #2
   1f3bc:	2302      	movs	r3, #2
   1f3be:	e652      	b.n	1f066 <_svfprintf_r+0x1e6>
   1f3c0:	f89a 3000 	ldrb.w	r3, [sl]
   1f3c4:	2900      	cmp	r1, #0
   1f3c6:	f47f adb3 	bne.w	1ef30 <_svfprintf_r+0xb0>
   1f3ca:	2201      	movs	r2, #1
   1f3cc:	2120      	movs	r1, #32
   1f3ce:	e5af      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f3d0:	f04b 0b01 	orr.w	fp, fp, #1
   1f3d4:	f89a 3000 	ldrb.w	r3, [sl]
   1f3d8:	e5aa      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f3da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f3dc:	6823      	ldr	r3, [r4, #0]
   1f3de:	9309      	str	r3, [sp, #36]	; 0x24
   1f3e0:	4618      	mov	r0, r3
   1f3e2:	2800      	cmp	r0, #0
   1f3e4:	4623      	mov	r3, r4
   1f3e6:	f103 0304 	add.w	r3, r3, #4
   1f3ea:	f6ff ae03 	blt.w	1eff4 <_svfprintf_r+0x174>
   1f3ee:	930b      	str	r3, [sp, #44]	; 0x2c
   1f3f0:	f89a 3000 	ldrb.w	r3, [sl]
   1f3f4:	e59c      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f3f6:	bf00      	nop
   1f3f8:	00024bf4 	.word	0x00024bf4
   1f3fc:	00024c04 	.word	0x00024c04
   1f400:	00024bd4 	.word	0x00024bd4
   1f404:	f04b 0b10 	orr.w	fp, fp, #16
   1f408:	f01b 0f20 	tst.w	fp, #32
   1f40c:	930d      	str	r3, [sp, #52]	; 0x34
   1f40e:	f43f ae1b 	beq.w	1f048 <_svfprintf_r+0x1c8>
   1f412:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f414:	3507      	adds	r5, #7
   1f416:	f025 0307 	bic.w	r3, r5, #7
   1f41a:	f103 0208 	add.w	r2, r3, #8
   1f41e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f422:	920b      	str	r2, [sp, #44]	; 0x2c
   1f424:	2301      	movs	r3, #1
   1f426:	e61e      	b.n	1f066 <_svfprintf_r+0x1e6>
   1f428:	f89a 3000 	ldrb.w	r3, [sl]
   1f42c:	2b2a      	cmp	r3, #42	; 0x2a
   1f42e:	f10a 0401 	add.w	r4, sl, #1
   1f432:	f000 873b 	beq.w	202ac <_svfprintf_r+0x142c>
   1f436:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f43a:	2809      	cmp	r0, #9
   1f43c:	46a2      	mov	sl, r4
   1f43e:	f200 8691 	bhi.w	20164 <_svfprintf_r+0x12e4>
   1f442:	2300      	movs	r3, #0
   1f444:	461c      	mov	r4, r3
   1f446:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f44a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f44e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f452:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f456:	2809      	cmp	r0, #9
   1f458:	d9f5      	bls.n	1f446 <_svfprintf_r+0x5c6>
   1f45a:	9406      	str	r4, [sp, #24]
   1f45c:	e56a      	b.n	1ef34 <_svfprintf_r+0xb4>
   1f45e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f462:	f89a 3000 	ldrb.w	r3, [sl]
   1f466:	e563      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f468:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f46c:	f89a 3000 	ldrb.w	r3, [sl]
   1f470:	e55e      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f472:	f89a 3000 	ldrb.w	r3, [sl]
   1f476:	2b6c      	cmp	r3, #108	; 0x6c
   1f478:	bf03      	ittte	eq
   1f47a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f47e:	f04b 0b20 	orreq.w	fp, fp, #32
   1f482:	f10a 0a01 	addeq.w	sl, sl, #1
   1f486:	f04b 0b10 	orrne.w	fp, fp, #16
   1f48a:	e551      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f48c:	2a00      	cmp	r2, #0
   1f48e:	f040 871e 	bne.w	202ce <_svfprintf_r+0x144e>
   1f492:	f01b 0f20 	tst.w	fp, #32
   1f496:	f040 8509 	bne.w	1feac <_svfprintf_r+0x102c>
   1f49a:	f01b 0f10 	tst.w	fp, #16
   1f49e:	f040 84bc 	bne.w	1fe1a <_svfprintf_r+0xf9a>
   1f4a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f4a6:	f000 84b8 	beq.w	1fe1a <_svfprintf_r+0xf9a>
   1f4aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f4ac:	6813      	ldr	r3, [r2, #0]
   1f4ae:	3204      	adds	r2, #4
   1f4b0:	920b      	str	r2, [sp, #44]	; 0x2c
   1f4b2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f4b6:	801a      	strh	r2, [r3, #0]
   1f4b8:	e509      	b.n	1eece <_svfprintf_r+0x4e>
   1f4ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f4bc:	4bb9      	ldr	r3, [pc, #740]	; (1f7a4 <_svfprintf_r+0x924>)
   1f4be:	680c      	ldr	r4, [r1, #0]
   1f4c0:	9312      	str	r3, [sp, #72]	; 0x48
   1f4c2:	2230      	movs	r2, #48	; 0x30
   1f4c4:	2378      	movs	r3, #120	; 0x78
   1f4c6:	3104      	adds	r1, #4
   1f4c8:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f4cc:	930d      	str	r3, [sp, #52]	; 0x34
   1f4ce:	f04b 0b02 	orr.w	fp, fp, #2
   1f4d2:	910b      	str	r1, [sp, #44]	; 0x2c
   1f4d4:	2500      	movs	r5, #0
   1f4d6:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f4da:	2302      	movs	r3, #2
   1f4dc:	e5c3      	b.n	1f066 <_svfprintf_r+0x1e6>
   1f4de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f4e0:	930d      	str	r3, [sp, #52]	; 0x34
   1f4e2:	680a      	ldr	r2, [r1, #0]
   1f4e4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f4e8:	2300      	movs	r3, #0
   1f4ea:	460a      	mov	r2, r1
   1f4ec:	461f      	mov	r7, r3
   1f4ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f4f2:	3204      	adds	r2, #4
   1f4f4:	2301      	movs	r3, #1
   1f4f6:	9304      	str	r3, [sp, #16]
   1f4f8:	f8cd b00c 	str.w	fp, [sp, #12]
   1f4fc:	9706      	str	r7, [sp, #24]
   1f4fe:	970e      	str	r7, [sp, #56]	; 0x38
   1f500:	920b      	str	r2, [sp, #44]	; 0x2c
   1f502:	930a      	str	r3, [sp, #40]	; 0x28
   1f504:	ae26      	add	r6, sp, #152	; 0x98
   1f506:	e5d7      	b.n	1f0b8 <_svfprintf_r+0x238>
   1f508:	930d      	str	r3, [sp, #52]	; 0x34
   1f50a:	2a00      	cmp	r2, #0
   1f50c:	f040 86fe 	bne.w	2030c <_svfprintf_r+0x148c>
   1f510:	f01b 0f20 	tst.w	fp, #32
   1f514:	d15d      	bne.n	1f5d2 <_svfprintf_r+0x752>
   1f516:	f01b 0f10 	tst.w	fp, #16
   1f51a:	f040 8335 	bne.w	1fb88 <_svfprintf_r+0xd08>
   1f51e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f522:	f000 8331 	beq.w	1fb88 <_svfprintf_r+0xd08>
   1f526:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f528:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f52c:	3104      	adds	r1, #4
   1f52e:	17e5      	asrs	r5, r4, #31
   1f530:	4622      	mov	r2, r4
   1f532:	462b      	mov	r3, r5
   1f534:	910b      	str	r1, [sp, #44]	; 0x2c
   1f536:	2a00      	cmp	r2, #0
   1f538:	f173 0300 	sbcs.w	r3, r3, #0
   1f53c:	db58      	blt.n	1f5f0 <_svfprintf_r+0x770>
   1f53e:	9906      	ldr	r1, [sp, #24]
   1f540:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f544:	1c4a      	adds	r2, r1, #1
   1f546:	f04f 0301 	mov.w	r3, #1
   1f54a:	f47f ad93 	bne.w	1f074 <_svfprintf_r+0x1f4>
   1f54e:	ea54 0205 	orrs.w	r2, r4, r5
   1f552:	f000 81ec 	beq.w	1f92e <_svfprintf_r+0xaae>
   1f556:	f8cd b00c 	str.w	fp, [sp, #12]
   1f55a:	2b01      	cmp	r3, #1
   1f55c:	f000 8283 	beq.w	1fa66 <_svfprintf_r+0xbe6>
   1f560:	2b02      	cmp	r3, #2
   1f562:	f040 8213 	bne.w	1f98c <_svfprintf_r+0xb0c>
   1f566:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f568:	464e      	mov	r6, r9
   1f56a:	0923      	lsrs	r3, r4, #4
   1f56c:	f004 010f 	and.w	r1, r4, #15
   1f570:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f574:	092a      	lsrs	r2, r5, #4
   1f576:	461c      	mov	r4, r3
   1f578:	4615      	mov	r5, r2
   1f57a:	5c43      	ldrb	r3, [r0, r1]
   1f57c:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f580:	ea54 0305 	orrs.w	r3, r4, r5
   1f584:	d1f1      	bne.n	1f56a <_svfprintf_r+0x6ea>
   1f586:	eba9 0306 	sub.w	r3, r9, r6
   1f58a:	930a      	str	r3, [sp, #40]	; 0x28
   1f58c:	e588      	b.n	1f0a0 <_svfprintf_r+0x220>
   1f58e:	930d      	str	r3, [sp, #52]	; 0x34
   1f590:	2a00      	cmp	r2, #0
   1f592:	f040 86b7 	bne.w	20304 <_svfprintf_r+0x1484>
   1f596:	4b84      	ldr	r3, [pc, #528]	; (1f7a8 <_svfprintf_r+0x928>)
   1f598:	9312      	str	r3, [sp, #72]	; 0x48
   1f59a:	f01b 0f20 	tst.w	fp, #32
   1f59e:	f43f aeee 	beq.w	1f37e <_svfprintf_r+0x4fe>
   1f5a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f5a4:	3507      	adds	r5, #7
   1f5a6:	f025 0307 	bic.w	r3, r5, #7
   1f5aa:	f103 0208 	add.w	r2, r3, #8
   1f5ae:	f01b 0f01 	tst.w	fp, #1
   1f5b2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f5b4:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f5b8:	f47f aef3 	bne.w	1f3a2 <_svfprintf_r+0x522>
   1f5bc:	2302      	movs	r3, #2
   1f5be:	e552      	b.n	1f066 <_svfprintf_r+0x1e6>
   1f5c0:	930d      	str	r3, [sp, #52]	; 0x34
   1f5c2:	2a00      	cmp	r2, #0
   1f5c4:	f040 869a 	bne.w	202fc <_svfprintf_r+0x147c>
   1f5c8:	f04b 0b10 	orr.w	fp, fp, #16
   1f5cc:	f01b 0f20 	tst.w	fp, #32
   1f5d0:	d0a1      	beq.n	1f516 <_svfprintf_r+0x696>
   1f5d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f5d4:	3507      	adds	r5, #7
   1f5d6:	f025 0507 	bic.w	r5, r5, #7
   1f5da:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f5de:	2a00      	cmp	r2, #0
   1f5e0:	f105 0108 	add.w	r1, r5, #8
   1f5e4:	461d      	mov	r5, r3
   1f5e6:	f173 0300 	sbcs.w	r3, r3, #0
   1f5ea:	910b      	str	r1, [sp, #44]	; 0x2c
   1f5ec:	4614      	mov	r4, r2
   1f5ee:	daa6      	bge.n	1f53e <_svfprintf_r+0x6be>
   1f5f0:	272d      	movs	r7, #45	; 0x2d
   1f5f2:	4264      	negs	r4, r4
   1f5f4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f5f8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f5fc:	2301      	movs	r3, #1
   1f5fe:	e535      	b.n	1f06c <_svfprintf_r+0x1ec>
   1f600:	930d      	str	r3, [sp, #52]	; 0x34
   1f602:	2a00      	cmp	r2, #0
   1f604:	f040 8676 	bne.w	202f4 <_svfprintf_r+0x1474>
   1f608:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f60a:	f01b 0f08 	tst.w	fp, #8
   1f60e:	f105 0507 	add.w	r5, r5, #7
   1f612:	f000 83e8 	beq.w	1fde6 <_svfprintf_r+0xf66>
   1f616:	f025 0307 	bic.w	r3, r5, #7
   1f61a:	ed93 7b00 	vldr	d7, [r3]
   1f61e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f622:	f103 0208 	add.w	r2, r3, #8
   1f626:	920b      	str	r2, [sp, #44]	; 0x2c
   1f628:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f62c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f630:	9116      	str	r1, [sp, #88]	; 0x58
   1f632:	9317      	str	r3, [sp, #92]	; 0x5c
   1f634:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f638:	f04f 32ff 	mov.w	r2, #4294967295
   1f63c:	4620      	mov	r0, r4
   1f63e:	4629      	mov	r1, r5
   1f640:	4b5a      	ldr	r3, [pc, #360]	; (1f7ac <_svfprintf_r+0x92c>)
   1f642:	f002 ffa5 	bl	22590 <__aeabi_dcmpun>
   1f646:	2800      	cmp	r0, #0
   1f648:	f040 834f 	bne.w	1fcea <_svfprintf_r+0xe6a>
   1f64c:	f04f 32ff 	mov.w	r2, #4294967295
   1f650:	4b56      	ldr	r3, [pc, #344]	; (1f7ac <_svfprintf_r+0x92c>)
   1f652:	4620      	mov	r0, r4
   1f654:	4629      	mov	r1, r5
   1f656:	f7fc fcc5 	bl	1bfe4 <__aeabi_dcmple>
   1f65a:	2800      	cmp	r0, #0
   1f65c:	f040 8345 	bne.w	1fcea <_svfprintf_r+0xe6a>
   1f660:	2200      	movs	r2, #0
   1f662:	2300      	movs	r3, #0
   1f664:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f668:	f7fc fcb2 	bl	1bfd0 <__aeabi_dcmplt>
   1f66c:	2800      	cmp	r0, #0
   1f66e:	f040 8533 	bne.w	200d8 <_svfprintf_r+0x1258>
   1f672:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f676:	4e4e      	ldr	r6, [pc, #312]	; (1f7b0 <_svfprintf_r+0x930>)
   1f678:	4b4e      	ldr	r3, [pc, #312]	; (1f7b4 <_svfprintf_r+0x934>)
   1f67a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f67e:	9003      	str	r0, [sp, #12]
   1f680:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f682:	2203      	movs	r2, #3
   1f684:	2100      	movs	r1, #0
   1f686:	9204      	str	r2, [sp, #16]
   1f688:	9106      	str	r1, [sp, #24]
   1f68a:	2847      	cmp	r0, #71	; 0x47
   1f68c:	bfd8      	it	le
   1f68e:	461e      	movle	r6, r3
   1f690:	920a      	str	r2, [sp, #40]	; 0x28
   1f692:	910e      	str	r1, [sp, #56]	; 0x38
   1f694:	e50c      	b.n	1f0b0 <_svfprintf_r+0x230>
   1f696:	f04b 0b08 	orr.w	fp, fp, #8
   1f69a:	f89a 3000 	ldrb.w	r3, [sl]
   1f69e:	e447      	b.n	1ef30 <_svfprintf_r+0xb0>
   1f6a0:	f04b 0b10 	orr.w	fp, fp, #16
   1f6a4:	930d      	str	r3, [sp, #52]	; 0x34
   1f6a6:	f01b 0320 	ands.w	r3, fp, #32
   1f6aa:	f43f ae22 	beq.w	1f2f2 <_svfprintf_r+0x472>
   1f6ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f6b0:	3507      	adds	r5, #7
   1f6b2:	f025 0307 	bic.w	r3, r5, #7
   1f6b6:	f103 0208 	add.w	r2, r3, #8
   1f6ba:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f6be:	920b      	str	r2, [sp, #44]	; 0x2c
   1f6c0:	2300      	movs	r3, #0
   1f6c2:	e4d0      	b.n	1f066 <_svfprintf_r+0x1e6>
   1f6c4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f6c8:	2300      	movs	r3, #0
   1f6ca:	461c      	mov	r4, r3
   1f6cc:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f6d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f6d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f6d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f6dc:	2809      	cmp	r0, #9
   1f6de:	d9f5      	bls.n	1f6cc <_svfprintf_r+0x84c>
   1f6e0:	9409      	str	r4, [sp, #36]	; 0x24
   1f6e2:	e427      	b.n	1ef34 <_svfprintf_r+0xb4>
   1f6e4:	930d      	str	r3, [sp, #52]	; 0x34
   1f6e6:	2a00      	cmp	r2, #0
   1f6e8:	f040 85f5 	bne.w	202d6 <_svfprintf_r+0x1456>
   1f6ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f6ee:	2a00      	cmp	r2, #0
   1f6f0:	f43f ac91 	beq.w	1f016 <_svfprintf_r+0x196>
   1f6f4:	2300      	movs	r3, #0
   1f6f6:	2101      	movs	r1, #1
   1f6f8:	461f      	mov	r7, r3
   1f6fa:	9104      	str	r1, [sp, #16]
   1f6fc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f700:	f8cd b00c 	str.w	fp, [sp, #12]
   1f704:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f708:	9306      	str	r3, [sp, #24]
   1f70a:	930e      	str	r3, [sp, #56]	; 0x38
   1f70c:	910a      	str	r1, [sp, #40]	; 0x28
   1f70e:	ae26      	add	r6, sp, #152	; 0x98
   1f710:	e4d2      	b.n	1f0b8 <_svfprintf_r+0x238>
   1f712:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f714:	e529      	b.n	1f16a <_svfprintf_r+0x2ea>
   1f716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f718:	2b65      	cmp	r3, #101	; 0x65
   1f71a:	f340 80a9 	ble.w	1f870 <_svfprintf_r+0x9f0>
   1f71e:	2200      	movs	r2, #0
   1f720:	2300      	movs	r3, #0
   1f722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f726:	f7fc fc49 	bl	1bfbc <__aeabi_dcmpeq>
   1f72a:	2800      	cmp	r0, #0
   1f72c:	f000 8152 	beq.w	1f9d4 <_svfprintf_r+0xb54>
   1f730:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f732:	4a21      	ldr	r2, [pc, #132]	; (1f7b8 <_svfprintf_r+0x938>)
   1f734:	f8c8 2000 	str.w	r2, [r8]
   1f738:	3301      	adds	r3, #1
   1f73a:	3401      	adds	r4, #1
   1f73c:	2201      	movs	r2, #1
   1f73e:	2b07      	cmp	r3, #7
   1f740:	9425      	str	r4, [sp, #148]	; 0x94
   1f742:	9324      	str	r3, [sp, #144]	; 0x90
   1f744:	f8c8 2004 	str.w	r2, [r8, #4]
   1f748:	f300 836f 	bgt.w	1fe2a <_svfprintf_r+0xfaa>
   1f74c:	f108 0808 	add.w	r8, r8, #8
   1f750:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f754:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f756:	4293      	cmp	r3, r2
   1f758:	db03      	blt.n	1f762 <_svfprintf_r+0x8e2>
   1f75a:	9b03      	ldr	r3, [sp, #12]
   1f75c:	07dd      	lsls	r5, r3, #31
   1f75e:	f57f ad76 	bpl.w	1f24e <_svfprintf_r+0x3ce>
   1f762:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f764:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1f766:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f768:	f8c8 2000 	str.w	r2, [r8]
   1f76c:	3301      	adds	r3, #1
   1f76e:	440c      	add	r4, r1
   1f770:	2b07      	cmp	r3, #7
   1f772:	f8c8 1004 	str.w	r1, [r8, #4]
   1f776:	9425      	str	r4, [sp, #148]	; 0x94
   1f778:	9324      	str	r3, [sp, #144]	; 0x90
   1f77a:	f300 83a3 	bgt.w	1fec4 <_svfprintf_r+0x1044>
   1f77e:	f108 0808 	add.w	r8, r8, #8
   1f782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f784:	1e5e      	subs	r6, r3, #1
   1f786:	2e00      	cmp	r6, #0
   1f788:	f77f ad61 	ble.w	1f24e <_svfprintf_r+0x3ce>
   1f78c:	2e10      	cmp	r6, #16
   1f78e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f790:	4d0a      	ldr	r5, [pc, #40]	; (1f7bc <_svfprintf_r+0x93c>)
   1f792:	f340 81ef 	ble.w	1fb74 <_svfprintf_r+0xcf4>
   1f796:	4622      	mov	r2, r4
   1f798:	2710      	movs	r7, #16
   1f79a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f79e:	9c07      	ldr	r4, [sp, #28]
   1f7a0:	e014      	b.n	1f7cc <_svfprintf_r+0x94c>
   1f7a2:	bf00      	nop
   1f7a4:	00024bd4 	.word	0x00024bd4
   1f7a8:	00024bc0 	.word	0x00024bc0
   1f7ac:	7fefffff 	.word	0x7fefffff
   1f7b0:	00024bb4 	.word	0x00024bb4
   1f7b4:	00024bb0 	.word	0x00024bb0
   1f7b8:	00024bf0 	.word	0x00024bf0
   1f7bc:	00024c04 	.word	0x00024c04
   1f7c0:	f108 0808 	add.w	r8, r8, #8
   1f7c4:	3e10      	subs	r6, #16
   1f7c6:	2e10      	cmp	r6, #16
   1f7c8:	f340 81d3 	ble.w	1fb72 <_svfprintf_r+0xcf2>
   1f7cc:	3301      	adds	r3, #1
   1f7ce:	3210      	adds	r2, #16
   1f7d0:	2b07      	cmp	r3, #7
   1f7d2:	9225      	str	r2, [sp, #148]	; 0x94
   1f7d4:	9324      	str	r3, [sp, #144]	; 0x90
   1f7d6:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f7da:	ddf1      	ble.n	1f7c0 <_svfprintf_r+0x940>
   1f7dc:	aa23      	add	r2, sp, #140	; 0x8c
   1f7de:	4621      	mov	r1, r4
   1f7e0:	4658      	mov	r0, fp
   1f7e2:	f002 fcff 	bl	221e4 <__ssprint_r>
   1f7e6:	2800      	cmp	r0, #0
   1f7e8:	f47f ac1c 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f7ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f7ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f7f0:	46c8      	mov	r8, r9
   1f7f2:	e7e7      	b.n	1f7c4 <_svfprintf_r+0x944>
   1f7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f7f6:	9a04      	ldr	r2, [sp, #16]
   1f7f8:	1a9f      	subs	r7, r3, r2
   1f7fa:	2f00      	cmp	r7, #0
   1f7fc:	f77f acd8 	ble.w	1f1b0 <_svfprintf_r+0x330>
   1f800:	2f10      	cmp	r7, #16
   1f802:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f804:	4db7      	ldr	r5, [pc, #732]	; (1fae4 <_svfprintf_r+0xc64>)
   1f806:	dd27      	ble.n	1f858 <_svfprintf_r+0x9d8>
   1f808:	4642      	mov	r2, r8
   1f80a:	4621      	mov	r1, r4
   1f80c:	46b0      	mov	r8, r6
   1f80e:	f04f 0b10 	mov.w	fp, #16
   1f812:	462e      	mov	r6, r5
   1f814:	9c08      	ldr	r4, [sp, #32]
   1f816:	9d07      	ldr	r5, [sp, #28]
   1f818:	e004      	b.n	1f824 <_svfprintf_r+0x9a4>
   1f81a:	3f10      	subs	r7, #16
   1f81c:	2f10      	cmp	r7, #16
   1f81e:	f102 0208 	add.w	r2, r2, #8
   1f822:	dd15      	ble.n	1f850 <_svfprintf_r+0x9d0>
   1f824:	3301      	adds	r3, #1
   1f826:	3110      	adds	r1, #16
   1f828:	2b07      	cmp	r3, #7
   1f82a:	9125      	str	r1, [sp, #148]	; 0x94
   1f82c:	9324      	str	r3, [sp, #144]	; 0x90
   1f82e:	e882 0840 	stmia.w	r2, {r6, fp}
   1f832:	ddf2      	ble.n	1f81a <_svfprintf_r+0x99a>
   1f834:	aa23      	add	r2, sp, #140	; 0x8c
   1f836:	4629      	mov	r1, r5
   1f838:	4620      	mov	r0, r4
   1f83a:	f002 fcd3 	bl	221e4 <__ssprint_r>
   1f83e:	2800      	cmp	r0, #0
   1f840:	f47f abf0 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f844:	3f10      	subs	r7, #16
   1f846:	2f10      	cmp	r7, #16
   1f848:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f84a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f84c:	464a      	mov	r2, r9
   1f84e:	dce9      	bgt.n	1f824 <_svfprintf_r+0x9a4>
   1f850:	4635      	mov	r5, r6
   1f852:	460c      	mov	r4, r1
   1f854:	4646      	mov	r6, r8
   1f856:	4690      	mov	r8, r2
   1f858:	3301      	adds	r3, #1
   1f85a:	443c      	add	r4, r7
   1f85c:	2b07      	cmp	r3, #7
   1f85e:	9425      	str	r4, [sp, #148]	; 0x94
   1f860:	9324      	str	r3, [sp, #144]	; 0x90
   1f862:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f866:	f300 8234 	bgt.w	1fcd2 <_svfprintf_r+0xe52>
   1f86a:	f108 0808 	add.w	r8, r8, #8
   1f86e:	e49f      	b.n	1f1b0 <_svfprintf_r+0x330>
   1f870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f872:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f874:	2b01      	cmp	r3, #1
   1f876:	f340 8200 	ble.w	1fc7a <_svfprintf_r+0xdfa>
   1f87a:	3701      	adds	r7, #1
   1f87c:	3401      	adds	r4, #1
   1f87e:	2301      	movs	r3, #1
   1f880:	2f07      	cmp	r7, #7
   1f882:	9425      	str	r4, [sp, #148]	; 0x94
   1f884:	9724      	str	r7, [sp, #144]	; 0x90
   1f886:	f8c8 6000 	str.w	r6, [r8]
   1f88a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f88e:	f300 8205 	bgt.w	1fc9c <_svfprintf_r+0xe1c>
   1f892:	f108 0808 	add.w	r8, r8, #8
   1f896:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f898:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1f89a:	f8c8 3000 	str.w	r3, [r8]
   1f89e:	3701      	adds	r7, #1
   1f8a0:	4414      	add	r4, r2
   1f8a2:	2f07      	cmp	r7, #7
   1f8a4:	9425      	str	r4, [sp, #148]	; 0x94
   1f8a6:	9724      	str	r7, [sp, #144]	; 0x90
   1f8a8:	f8c8 2004 	str.w	r2, [r8, #4]
   1f8ac:	f300 8202 	bgt.w	1fcb4 <_svfprintf_r+0xe34>
   1f8b0:	f108 0808 	add.w	r8, r8, #8
   1f8b4:	2300      	movs	r3, #0
   1f8b6:	2200      	movs	r2, #0
   1f8b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f8bc:	f7fc fb7e 	bl	1bfbc <__aeabi_dcmpeq>
   1f8c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f8c2:	2800      	cmp	r0, #0
   1f8c4:	f040 8101 	bne.w	1faca <_svfprintf_r+0xc4a>
   1f8c8:	3b01      	subs	r3, #1
   1f8ca:	3701      	adds	r7, #1
   1f8cc:	3601      	adds	r6, #1
   1f8ce:	441c      	add	r4, r3
   1f8d0:	2f07      	cmp	r7, #7
   1f8d2:	9724      	str	r7, [sp, #144]	; 0x90
   1f8d4:	9425      	str	r4, [sp, #148]	; 0x94
   1f8d6:	f8c8 6000 	str.w	r6, [r8]
   1f8da:	f8c8 3004 	str.w	r3, [r8, #4]
   1f8de:	f300 8128 	bgt.w	1fb32 <_svfprintf_r+0xcb2>
   1f8e2:	f108 0808 	add.w	r8, r8, #8
   1f8e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f8e8:	f8c8 2004 	str.w	r2, [r8, #4]
   1f8ec:	3701      	adds	r7, #1
   1f8ee:	4414      	add	r4, r2
   1f8f0:	ab1f      	add	r3, sp, #124	; 0x7c
   1f8f2:	2f07      	cmp	r7, #7
   1f8f4:	9425      	str	r4, [sp, #148]	; 0x94
   1f8f6:	9724      	str	r7, [sp, #144]	; 0x90
   1f8f8:	f8c8 3000 	str.w	r3, [r8]
   1f8fc:	f77f aca5 	ble.w	1f24a <_svfprintf_r+0x3ca>
   1f900:	aa23      	add	r2, sp, #140	; 0x8c
   1f902:	9907      	ldr	r1, [sp, #28]
   1f904:	9808      	ldr	r0, [sp, #32]
   1f906:	f002 fc6d 	bl	221e4 <__ssprint_r>
   1f90a:	2800      	cmp	r0, #0
   1f90c:	f47f ab8a 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f910:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f912:	46c8      	mov	r8, r9
   1f914:	e49b      	b.n	1f24e <_svfprintf_r+0x3ce>
   1f916:	aa23      	add	r2, sp, #140	; 0x8c
   1f918:	9907      	ldr	r1, [sp, #28]
   1f91a:	9808      	ldr	r0, [sp, #32]
   1f91c:	f002 fc62 	bl	221e4 <__ssprint_r>
   1f920:	2800      	cmp	r0, #0
   1f922:	f43f acdd 	beq.w	1f2e0 <_svfprintf_r+0x460>
   1f926:	f7ff bb7d 	b.w	1f024 <_svfprintf_r+0x1a4>
   1f92a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f92e:	2b01      	cmp	r3, #1
   1f930:	f000 8135 	beq.w	1fb9e <_svfprintf_r+0xd1e>
   1f934:	2b02      	cmp	r3, #2
   1f936:	d125      	bne.n	1f984 <_svfprintf_r+0xb04>
   1f938:	f8cd b00c 	str.w	fp, [sp, #12]
   1f93c:	2400      	movs	r4, #0
   1f93e:	2500      	movs	r5, #0
   1f940:	e611      	b.n	1f566 <_svfprintf_r+0x6e6>
   1f942:	aa23      	add	r2, sp, #140	; 0x8c
   1f944:	9907      	ldr	r1, [sp, #28]
   1f946:	9808      	ldr	r0, [sp, #32]
   1f948:	f002 fc4c 	bl	221e4 <__ssprint_r>
   1f94c:	2800      	cmp	r0, #0
   1f94e:	f47f ab69 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f952:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f954:	46c8      	mov	r8, r9
   1f956:	e467      	b.n	1f228 <_svfprintf_r+0x3a8>
   1f958:	aa23      	add	r2, sp, #140	; 0x8c
   1f95a:	9907      	ldr	r1, [sp, #28]
   1f95c:	9808      	ldr	r0, [sp, #32]
   1f95e:	f002 fc41 	bl	221e4 <__ssprint_r>
   1f962:	2800      	cmp	r0, #0
   1f964:	f47f ab5e 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f968:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f96a:	46c8      	mov	r8, r9
   1f96c:	e41d      	b.n	1f1aa <_svfprintf_r+0x32a>
   1f96e:	aa23      	add	r2, sp, #140	; 0x8c
   1f970:	9907      	ldr	r1, [sp, #28]
   1f972:	9808      	ldr	r0, [sp, #32]
   1f974:	f002 fc36 	bl	221e4 <__ssprint_r>
   1f978:	2800      	cmp	r0, #0
   1f97a:	f47f ab53 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1f97e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f980:	46c8      	mov	r8, r9
   1f982:	e402      	b.n	1f18a <_svfprintf_r+0x30a>
   1f984:	f8cd b00c 	str.w	fp, [sp, #12]
   1f988:	2400      	movs	r4, #0
   1f98a:	2500      	movs	r5, #0
   1f98c:	4649      	mov	r1, r9
   1f98e:	e000      	b.n	1f992 <_svfprintf_r+0xb12>
   1f990:	4631      	mov	r1, r6
   1f992:	08e2      	lsrs	r2, r4, #3
   1f994:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1f998:	08e8      	lsrs	r0, r5, #3
   1f99a:	f004 0307 	and.w	r3, r4, #7
   1f99e:	4605      	mov	r5, r0
   1f9a0:	4614      	mov	r4, r2
   1f9a2:	3330      	adds	r3, #48	; 0x30
   1f9a4:	ea54 0205 	orrs.w	r2, r4, r5
   1f9a8:	f801 3c01 	strb.w	r3, [r1, #-1]
   1f9ac:	f101 36ff 	add.w	r6, r1, #4294967295
   1f9b0:	d1ee      	bne.n	1f990 <_svfprintf_r+0xb10>
   1f9b2:	9a03      	ldr	r2, [sp, #12]
   1f9b4:	07d2      	lsls	r2, r2, #31
   1f9b6:	f57f ade6 	bpl.w	1f586 <_svfprintf_r+0x706>
   1f9ba:	2b30      	cmp	r3, #48	; 0x30
   1f9bc:	f43f ade3 	beq.w	1f586 <_svfprintf_r+0x706>
   1f9c0:	3902      	subs	r1, #2
   1f9c2:	2330      	movs	r3, #48	; 0x30
   1f9c4:	f806 3c01 	strb.w	r3, [r6, #-1]
   1f9c8:	eba9 0301 	sub.w	r3, r9, r1
   1f9cc:	930a      	str	r3, [sp, #40]	; 0x28
   1f9ce:	460e      	mov	r6, r1
   1f9d0:	f7ff bb66 	b.w	1f0a0 <_svfprintf_r+0x220>
   1f9d4:	991d      	ldr	r1, [sp, #116]	; 0x74
   1f9d6:	2900      	cmp	r1, #0
   1f9d8:	f340 8231 	ble.w	1fe3e <_svfprintf_r+0xfbe>
   1f9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f9de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f9e0:	4293      	cmp	r3, r2
   1f9e2:	bfa8      	it	ge
   1f9e4:	4613      	movge	r3, r2
   1f9e6:	2b00      	cmp	r3, #0
   1f9e8:	461f      	mov	r7, r3
   1f9ea:	dd0d      	ble.n	1fa08 <_svfprintf_r+0xb88>
   1f9ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f9ee:	f8c8 6000 	str.w	r6, [r8]
   1f9f2:	3301      	adds	r3, #1
   1f9f4:	443c      	add	r4, r7
   1f9f6:	2b07      	cmp	r3, #7
   1f9f8:	9425      	str	r4, [sp, #148]	; 0x94
   1f9fa:	f8c8 7004 	str.w	r7, [r8, #4]
   1f9fe:	9324      	str	r3, [sp, #144]	; 0x90
   1fa00:	f300 8321 	bgt.w	20046 <_svfprintf_r+0x11c6>
   1fa04:	f108 0808 	add.w	r8, r8, #8
   1fa08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fa0a:	2f00      	cmp	r7, #0
   1fa0c:	bfa8      	it	ge
   1fa0e:	1bdb      	subge	r3, r3, r7
   1fa10:	2b00      	cmp	r3, #0
   1fa12:	461f      	mov	r7, r3
   1fa14:	f340 80d7 	ble.w	1fbc6 <_svfprintf_r+0xd46>
   1fa18:	2f10      	cmp	r7, #16
   1fa1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fa1c:	4d31      	ldr	r5, [pc, #196]	; (1fae4 <_svfprintf_r+0xc64>)
   1fa1e:	f340 81f0 	ble.w	1fe02 <_svfprintf_r+0xf82>
   1fa22:	4642      	mov	r2, r8
   1fa24:	4621      	mov	r1, r4
   1fa26:	46b0      	mov	r8, r6
   1fa28:	f04f 0b10 	mov.w	fp, #16
   1fa2c:	462e      	mov	r6, r5
   1fa2e:	9c08      	ldr	r4, [sp, #32]
   1fa30:	9d07      	ldr	r5, [sp, #28]
   1fa32:	e004      	b.n	1fa3e <_svfprintf_r+0xbbe>
   1fa34:	3208      	adds	r2, #8
   1fa36:	3f10      	subs	r7, #16
   1fa38:	2f10      	cmp	r7, #16
   1fa3a:	f340 81de 	ble.w	1fdfa <_svfprintf_r+0xf7a>
   1fa3e:	3301      	adds	r3, #1
   1fa40:	3110      	adds	r1, #16
   1fa42:	2b07      	cmp	r3, #7
   1fa44:	9125      	str	r1, [sp, #148]	; 0x94
   1fa46:	9324      	str	r3, [sp, #144]	; 0x90
   1fa48:	e882 0840 	stmia.w	r2, {r6, fp}
   1fa4c:	ddf2      	ble.n	1fa34 <_svfprintf_r+0xbb4>
   1fa4e:	aa23      	add	r2, sp, #140	; 0x8c
   1fa50:	4629      	mov	r1, r5
   1fa52:	4620      	mov	r0, r4
   1fa54:	f002 fbc6 	bl	221e4 <__ssprint_r>
   1fa58:	2800      	cmp	r0, #0
   1fa5a:	f47f aae3 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fa5e:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fa60:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fa62:	464a      	mov	r2, r9
   1fa64:	e7e7      	b.n	1fa36 <_svfprintf_r+0xbb6>
   1fa66:	2d00      	cmp	r5, #0
   1fa68:	bf08      	it	eq
   1fa6a:	2c0a      	cmpeq	r4, #10
   1fa6c:	f0c0 8095 	bcc.w	1fb9a <_svfprintf_r+0xd1a>
   1fa70:	464e      	mov	r6, r9
   1fa72:	4620      	mov	r0, r4
   1fa74:	4629      	mov	r1, r5
   1fa76:	220a      	movs	r2, #10
   1fa78:	2300      	movs	r3, #0
   1fa7a:	f7fc fcc7 	bl	1c40c <__aeabi_uldivmod>
   1fa7e:	3230      	adds	r2, #48	; 0x30
   1fa80:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1fa84:	4620      	mov	r0, r4
   1fa86:	4629      	mov	r1, r5
   1fa88:	2300      	movs	r3, #0
   1fa8a:	220a      	movs	r2, #10
   1fa8c:	f7fc fcbe 	bl	1c40c <__aeabi_uldivmod>
   1fa90:	4604      	mov	r4, r0
   1fa92:	460d      	mov	r5, r1
   1fa94:	ea54 0305 	orrs.w	r3, r4, r5
   1fa98:	d1eb      	bne.n	1fa72 <_svfprintf_r+0xbf2>
   1fa9a:	eba9 0306 	sub.w	r3, r9, r6
   1fa9e:	930a      	str	r3, [sp, #40]	; 0x28
   1faa0:	f7ff bafe 	b.w	1f0a0 <_svfprintf_r+0x220>
   1faa4:	9b06      	ldr	r3, [sp, #24]
   1faa6:	930a      	str	r3, [sp, #40]	; 0x28
   1faa8:	464e      	mov	r6, r9
   1faaa:	f7ff baf9 	b.w	1f0a0 <_svfprintf_r+0x220>
   1faae:	aa23      	add	r2, sp, #140	; 0x8c
   1fab0:	9907      	ldr	r1, [sp, #28]
   1fab2:	9808      	ldr	r0, [sp, #32]
   1fab4:	f002 fb96 	bl	221e4 <__ssprint_r>
   1fab8:	2800      	cmp	r0, #0
   1faba:	f47f aab3 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fabe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fac2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fac4:	46c8      	mov	r8, r9
   1fac6:	f7ff bb50 	b.w	1f16a <_svfprintf_r+0x2ea>
   1faca:	1e5e      	subs	r6, r3, #1
   1facc:	2e00      	cmp	r6, #0
   1face:	f77f af0a 	ble.w	1f8e6 <_svfprintf_r+0xa66>
   1fad2:	2e10      	cmp	r6, #16
   1fad4:	4d03      	ldr	r5, [pc, #12]	; (1fae4 <_svfprintf_r+0xc64>)
   1fad6:	dd23      	ble.n	1fb20 <_svfprintf_r+0xca0>
   1fad8:	4622      	mov	r2, r4
   1fada:	f04f 0b10 	mov.w	fp, #16
   1fade:	9c08      	ldr	r4, [sp, #32]
   1fae0:	e007      	b.n	1faf2 <_svfprintf_r+0xc72>
   1fae2:	bf00      	nop
   1fae4:	00024c04 	.word	0x00024c04
   1fae8:	3e10      	subs	r6, #16
   1faea:	2e10      	cmp	r6, #16
   1faec:	f108 0808 	add.w	r8, r8, #8
   1faf0:	dd15      	ble.n	1fb1e <_svfprintf_r+0xc9e>
   1faf2:	3701      	adds	r7, #1
   1faf4:	3210      	adds	r2, #16
   1faf6:	2f07      	cmp	r7, #7
   1faf8:	9225      	str	r2, [sp, #148]	; 0x94
   1fafa:	9724      	str	r7, [sp, #144]	; 0x90
   1fafc:	e888 0820 	stmia.w	r8, {r5, fp}
   1fb00:	ddf2      	ble.n	1fae8 <_svfprintf_r+0xc68>
   1fb02:	aa23      	add	r2, sp, #140	; 0x8c
   1fb04:	9907      	ldr	r1, [sp, #28]
   1fb06:	4620      	mov	r0, r4
   1fb08:	f002 fb6c 	bl	221e4 <__ssprint_r>
   1fb0c:	2800      	cmp	r0, #0
   1fb0e:	f47f aa89 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fb12:	3e10      	subs	r6, #16
   1fb14:	2e10      	cmp	r6, #16
   1fb16:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fb18:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fb1a:	46c8      	mov	r8, r9
   1fb1c:	dce9      	bgt.n	1faf2 <_svfprintf_r+0xc72>
   1fb1e:	4614      	mov	r4, r2
   1fb20:	3701      	adds	r7, #1
   1fb22:	4434      	add	r4, r6
   1fb24:	2f07      	cmp	r7, #7
   1fb26:	9425      	str	r4, [sp, #148]	; 0x94
   1fb28:	9724      	str	r7, [sp, #144]	; 0x90
   1fb2a:	e888 0060 	stmia.w	r8, {r5, r6}
   1fb2e:	f77f aed8 	ble.w	1f8e2 <_svfprintf_r+0xa62>
   1fb32:	aa23      	add	r2, sp, #140	; 0x8c
   1fb34:	9907      	ldr	r1, [sp, #28]
   1fb36:	9808      	ldr	r0, [sp, #32]
   1fb38:	f002 fb54 	bl	221e4 <__ssprint_r>
   1fb3c:	2800      	cmp	r0, #0
   1fb3e:	f47f aa71 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fb42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb44:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fb46:	46c8      	mov	r8, r9
   1fb48:	e6cd      	b.n	1f8e6 <_svfprintf_r+0xa66>
   1fb4a:	681c      	ldr	r4, [r3, #0]
   1fb4c:	3304      	adds	r3, #4
   1fb4e:	930b      	str	r3, [sp, #44]	; 0x2c
   1fb50:	2500      	movs	r5, #0
   1fb52:	e422      	b.n	1f39a <_svfprintf_r+0x51a>
   1fb54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fb56:	460a      	mov	r2, r1
   1fb58:	3204      	adds	r2, #4
   1fb5a:	680c      	ldr	r4, [r1, #0]
   1fb5c:	920b      	str	r2, [sp, #44]	; 0x2c
   1fb5e:	2500      	movs	r5, #0
   1fb60:	f7ff ba81 	b.w	1f066 <_svfprintf_r+0x1e6>
   1fb64:	3204      	adds	r2, #4
   1fb66:	681c      	ldr	r4, [r3, #0]
   1fb68:	920b      	str	r2, [sp, #44]	; 0x2c
   1fb6a:	2301      	movs	r3, #1
   1fb6c:	2500      	movs	r5, #0
   1fb6e:	f7ff ba7a 	b.w	1f066 <_svfprintf_r+0x1e6>
   1fb72:	4614      	mov	r4, r2
   1fb74:	3301      	adds	r3, #1
   1fb76:	4434      	add	r4, r6
   1fb78:	2b07      	cmp	r3, #7
   1fb7a:	9425      	str	r4, [sp, #148]	; 0x94
   1fb7c:	9324      	str	r3, [sp, #144]	; 0x90
   1fb7e:	e888 0060 	stmia.w	r8, {r5, r6}
   1fb82:	f77f ab62 	ble.w	1f24a <_svfprintf_r+0x3ca>
   1fb86:	e6bb      	b.n	1f900 <_svfprintf_r+0xa80>
   1fb88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fb8a:	6814      	ldr	r4, [r2, #0]
   1fb8c:	4613      	mov	r3, r2
   1fb8e:	3304      	adds	r3, #4
   1fb90:	17e5      	asrs	r5, r4, #31
   1fb92:	930b      	str	r3, [sp, #44]	; 0x2c
   1fb94:	4622      	mov	r2, r4
   1fb96:	462b      	mov	r3, r5
   1fb98:	e4cd      	b.n	1f536 <_svfprintf_r+0x6b6>
   1fb9a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fb9e:	f8cd b00c 	str.w	fp, [sp, #12]
   1fba2:	ae40      	add	r6, sp, #256	; 0x100
   1fba4:	3430      	adds	r4, #48	; 0x30
   1fba6:	2301      	movs	r3, #1
   1fba8:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1fbac:	930a      	str	r3, [sp, #40]	; 0x28
   1fbae:	f7ff ba77 	b.w	1f0a0 <_svfprintf_r+0x220>
   1fbb2:	aa23      	add	r2, sp, #140	; 0x8c
   1fbb4:	9907      	ldr	r1, [sp, #28]
   1fbb6:	9808      	ldr	r0, [sp, #32]
   1fbb8:	f002 fb14 	bl	221e4 <__ssprint_r>
   1fbbc:	2800      	cmp	r0, #0
   1fbbe:	f47f aa31 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fbc2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fbc4:	46c8      	mov	r8, r9
   1fbc6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fbc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fbca:	429a      	cmp	r2, r3
   1fbcc:	db44      	blt.n	1fc58 <_svfprintf_r+0xdd8>
   1fbce:	9b03      	ldr	r3, [sp, #12]
   1fbd0:	07d9      	lsls	r1, r3, #31
   1fbd2:	d441      	bmi.n	1fc58 <_svfprintf_r+0xdd8>
   1fbd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fbd6:	980e      	ldr	r0, [sp, #56]	; 0x38
   1fbd8:	1a9a      	subs	r2, r3, r2
   1fbda:	1a1d      	subs	r5, r3, r0
   1fbdc:	4295      	cmp	r5, r2
   1fbde:	bfa8      	it	ge
   1fbe0:	4615      	movge	r5, r2
   1fbe2:	2d00      	cmp	r5, #0
   1fbe4:	dd0e      	ble.n	1fc04 <_svfprintf_r+0xd84>
   1fbe6:	9924      	ldr	r1, [sp, #144]	; 0x90
   1fbe8:	f8c8 5004 	str.w	r5, [r8, #4]
   1fbec:	3101      	adds	r1, #1
   1fbee:	4406      	add	r6, r0
   1fbf0:	442c      	add	r4, r5
   1fbf2:	2907      	cmp	r1, #7
   1fbf4:	f8c8 6000 	str.w	r6, [r8]
   1fbf8:	9425      	str	r4, [sp, #148]	; 0x94
   1fbfa:	9124      	str	r1, [sp, #144]	; 0x90
   1fbfc:	f300 823a 	bgt.w	20074 <_svfprintf_r+0x11f4>
   1fc00:	f108 0808 	add.w	r8, r8, #8
   1fc04:	2d00      	cmp	r5, #0
   1fc06:	bfac      	ite	ge
   1fc08:	1b56      	subge	r6, r2, r5
   1fc0a:	4616      	movlt	r6, r2
   1fc0c:	2e00      	cmp	r6, #0
   1fc0e:	f77f ab1e 	ble.w	1f24e <_svfprintf_r+0x3ce>
   1fc12:	2e10      	cmp	r6, #16
   1fc14:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc16:	4db1      	ldr	r5, [pc, #708]	; (1fedc <_svfprintf_r+0x105c>)
   1fc18:	ddac      	ble.n	1fb74 <_svfprintf_r+0xcf4>
   1fc1a:	4622      	mov	r2, r4
   1fc1c:	2710      	movs	r7, #16
   1fc1e:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fc22:	9c07      	ldr	r4, [sp, #28]
   1fc24:	e004      	b.n	1fc30 <_svfprintf_r+0xdb0>
   1fc26:	f108 0808 	add.w	r8, r8, #8
   1fc2a:	3e10      	subs	r6, #16
   1fc2c:	2e10      	cmp	r6, #16
   1fc2e:	dda0      	ble.n	1fb72 <_svfprintf_r+0xcf2>
   1fc30:	3301      	adds	r3, #1
   1fc32:	3210      	adds	r2, #16
   1fc34:	2b07      	cmp	r3, #7
   1fc36:	9225      	str	r2, [sp, #148]	; 0x94
   1fc38:	9324      	str	r3, [sp, #144]	; 0x90
   1fc3a:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fc3e:	ddf2      	ble.n	1fc26 <_svfprintf_r+0xda6>
   1fc40:	aa23      	add	r2, sp, #140	; 0x8c
   1fc42:	4621      	mov	r1, r4
   1fc44:	4658      	mov	r0, fp
   1fc46:	f002 facd 	bl	221e4 <__ssprint_r>
   1fc4a:	2800      	cmp	r0, #0
   1fc4c:	f47f a9ea 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fc50:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fc52:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc54:	46c8      	mov	r8, r9
   1fc56:	e7e8      	b.n	1fc2a <_svfprintf_r+0xdaa>
   1fc58:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fc5c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fc5e:	f8c8 1000 	str.w	r1, [r8]
   1fc62:	3301      	adds	r3, #1
   1fc64:	4404      	add	r4, r0
   1fc66:	2b07      	cmp	r3, #7
   1fc68:	9425      	str	r4, [sp, #148]	; 0x94
   1fc6a:	f8c8 0004 	str.w	r0, [r8, #4]
   1fc6e:	9324      	str	r3, [sp, #144]	; 0x90
   1fc70:	f300 81f4 	bgt.w	2005c <_svfprintf_r+0x11dc>
   1fc74:	f108 0808 	add.w	r8, r8, #8
   1fc78:	e7ac      	b.n	1fbd4 <_svfprintf_r+0xd54>
   1fc7a:	9b03      	ldr	r3, [sp, #12]
   1fc7c:	07da      	lsls	r2, r3, #31
   1fc7e:	f53f adfc 	bmi.w	1f87a <_svfprintf_r+0x9fa>
   1fc82:	3701      	adds	r7, #1
   1fc84:	3401      	adds	r4, #1
   1fc86:	2301      	movs	r3, #1
   1fc88:	2f07      	cmp	r7, #7
   1fc8a:	9425      	str	r4, [sp, #148]	; 0x94
   1fc8c:	9724      	str	r7, [sp, #144]	; 0x90
   1fc8e:	f8c8 6000 	str.w	r6, [r8]
   1fc92:	f8c8 3004 	str.w	r3, [r8, #4]
   1fc96:	f77f ae24 	ble.w	1f8e2 <_svfprintf_r+0xa62>
   1fc9a:	e74a      	b.n	1fb32 <_svfprintf_r+0xcb2>
   1fc9c:	aa23      	add	r2, sp, #140	; 0x8c
   1fc9e:	9907      	ldr	r1, [sp, #28]
   1fca0:	9808      	ldr	r0, [sp, #32]
   1fca2:	f002 fa9f 	bl	221e4 <__ssprint_r>
   1fca6:	2800      	cmp	r0, #0
   1fca8:	f47f a9bc 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fcac:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fcae:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fcb0:	46c8      	mov	r8, r9
   1fcb2:	e5f0      	b.n	1f896 <_svfprintf_r+0xa16>
   1fcb4:	aa23      	add	r2, sp, #140	; 0x8c
   1fcb6:	9907      	ldr	r1, [sp, #28]
   1fcb8:	9808      	ldr	r0, [sp, #32]
   1fcba:	f002 fa93 	bl	221e4 <__ssprint_r>
   1fcbe:	2800      	cmp	r0, #0
   1fcc0:	f47f a9b0 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fcc4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fcc6:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fcc8:	46c8      	mov	r8, r9
   1fcca:	e5f3      	b.n	1f8b4 <_svfprintf_r+0xa34>
   1fccc:	464e      	mov	r6, r9
   1fcce:	f7ff b9e7 	b.w	1f0a0 <_svfprintf_r+0x220>
   1fcd2:	aa23      	add	r2, sp, #140	; 0x8c
   1fcd4:	9907      	ldr	r1, [sp, #28]
   1fcd6:	9808      	ldr	r0, [sp, #32]
   1fcd8:	f002 fa84 	bl	221e4 <__ssprint_r>
   1fcdc:	2800      	cmp	r0, #0
   1fcde:	f47f a9a1 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fce2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fce4:	46c8      	mov	r8, r9
   1fce6:	f7ff ba63 	b.w	1f1b0 <_svfprintf_r+0x330>
   1fcea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fcee:	4602      	mov	r2, r0
   1fcf0:	460b      	mov	r3, r1
   1fcf2:	f002 fc4d 	bl	22590 <__aeabi_dcmpun>
   1fcf6:	2800      	cmp	r0, #0
   1fcf8:	f040 8298 	bne.w	2022c <_svfprintf_r+0x13ac>
   1fcfc:	9b06      	ldr	r3, [sp, #24]
   1fcfe:	3301      	adds	r3, #1
   1fd00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd02:	f023 0720 	bic.w	r7, r3, #32
   1fd06:	f000 81d2 	beq.w	200ae <_svfprintf_r+0x122e>
   1fd0a:	2f47      	cmp	r7, #71	; 0x47
   1fd0c:	f000 8120 	beq.w	1ff50 <_svfprintf_r+0x10d0>
   1fd10:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fd12:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   1fd16:	2b00      	cmp	r3, #0
   1fd18:	9203      	str	r2, [sp, #12]
   1fd1a:	f2c0 81f0 	blt.w	200fe <_svfprintf_r+0x127e>
   1fd1e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1fd22:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   1fd26:	2300      	movs	r3, #0
   1fd28:	930c      	str	r3, [sp, #48]	; 0x30
   1fd2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd2c:	2b66      	cmp	r3, #102	; 0x66
   1fd2e:	f000 81c1 	beq.w	200b4 <_svfprintf_r+0x1234>
   1fd32:	2b46      	cmp	r3, #70	; 0x46
   1fd34:	f000 80f1 	beq.w	1ff1a <_svfprintf_r+0x109a>
   1fd38:	2f45      	cmp	r7, #69	; 0x45
   1fd3a:	bf0c      	ite	eq
   1fd3c:	9b06      	ldreq	r3, [sp, #24]
   1fd3e:	9d06      	ldrne	r5, [sp, #24]
   1fd40:	9808      	ldr	r0, [sp, #32]
   1fd42:	bf08      	it	eq
   1fd44:	1c5d      	addeq	r5, r3, #1
   1fd46:	aa21      	add	r2, sp, #132	; 0x84
   1fd48:	ab1e      	add	r3, sp, #120	; 0x78
   1fd4a:	9201      	str	r2, [sp, #4]
   1fd4c:	9300      	str	r3, [sp, #0]
   1fd4e:	462a      	mov	r2, r5
   1fd50:	ab1d      	add	r3, sp, #116	; 0x74
   1fd52:	2102      	movs	r1, #2
   1fd54:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fd58:	f000 fcae 	bl	206b8 <_dtoa_r>
   1fd5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd5e:	2b67      	cmp	r3, #103	; 0x67
   1fd60:	4606      	mov	r6, r0
   1fd62:	f040 81d5 	bne.w	20110 <_svfprintf_r+0x1290>
   1fd66:	f01b 0f01 	tst.w	fp, #1
   1fd6a:	f000 824e 	beq.w	2020a <_svfprintf_r+0x138a>
   1fd6e:	1974      	adds	r4, r6, r5
   1fd70:	2200      	movs	r2, #0
   1fd72:	2300      	movs	r3, #0
   1fd74:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1fd78:	f7fc f920 	bl	1bfbc <__aeabi_dcmpeq>
   1fd7c:	2800      	cmp	r0, #0
   1fd7e:	f040 8160 	bne.w	20042 <_svfprintf_r+0x11c2>
   1fd82:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fd84:	42a3      	cmp	r3, r4
   1fd86:	d206      	bcs.n	1fd96 <_svfprintf_r+0xf16>
   1fd88:	2130      	movs	r1, #48	; 0x30
   1fd8a:	1c5a      	adds	r2, r3, #1
   1fd8c:	9221      	str	r2, [sp, #132]	; 0x84
   1fd8e:	7019      	strb	r1, [r3, #0]
   1fd90:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fd92:	429c      	cmp	r4, r3
   1fd94:	d8f9      	bhi.n	1fd8a <_svfprintf_r+0xf0a>
   1fd96:	1b9b      	subs	r3, r3, r6
   1fd98:	2f47      	cmp	r7, #71	; 0x47
   1fd9a:	930f      	str	r3, [sp, #60]	; 0x3c
   1fd9c:	f000 80f0 	beq.w	1ff80 <_svfprintf_r+0x1100>
   1fda0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fda2:	2b65      	cmp	r3, #101	; 0x65
   1fda4:	f340 81c3 	ble.w	2012e <_svfprintf_r+0x12ae>
   1fda8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fdaa:	2b66      	cmp	r3, #102	; 0x66
   1fdac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fdae:	930e      	str	r3, [sp, #56]	; 0x38
   1fdb0:	f000 81c0 	beq.w	20134 <_svfprintf_r+0x12b4>
   1fdb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fdb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1fdb8:	4619      	mov	r1, r3
   1fdba:	4291      	cmp	r1, r2
   1fdbc:	f300 8191 	bgt.w	200e2 <_svfprintf_r+0x1262>
   1fdc0:	f01b 0f01 	tst.w	fp, #1
   1fdc4:	f040 8223 	bne.w	2020e <_svfprintf_r+0x138e>
   1fdc8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1fdcc:	9304      	str	r3, [sp, #16]
   1fdce:	2367      	movs	r3, #103	; 0x67
   1fdd0:	920a      	str	r2, [sp, #40]	; 0x28
   1fdd2:	930d      	str	r3, [sp, #52]	; 0x34
   1fdd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fdd6:	2b00      	cmp	r3, #0
   1fdd8:	f040 80cb 	bne.w	1ff72 <_svfprintf_r+0x10f2>
   1fddc:	9306      	str	r3, [sp, #24]
   1fdde:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fde2:	f7ff b965 	b.w	1f0b0 <_svfprintf_r+0x230>
   1fde6:	f025 0507 	bic.w	r5, r5, #7
   1fdea:	ed95 7b00 	vldr	d7, [r5]
   1fdee:	f105 0308 	add.w	r3, r5, #8
   1fdf2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fdf6:	930b      	str	r3, [sp, #44]	; 0x2c
   1fdf8:	e416      	b.n	1f628 <_svfprintf_r+0x7a8>
   1fdfa:	4635      	mov	r5, r6
   1fdfc:	460c      	mov	r4, r1
   1fdfe:	4646      	mov	r6, r8
   1fe00:	4690      	mov	r8, r2
   1fe02:	3301      	adds	r3, #1
   1fe04:	443c      	add	r4, r7
   1fe06:	2b07      	cmp	r3, #7
   1fe08:	9425      	str	r4, [sp, #148]	; 0x94
   1fe0a:	9324      	str	r3, [sp, #144]	; 0x90
   1fe0c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fe10:	f73f aecf 	bgt.w	1fbb2 <_svfprintf_r+0xd32>
   1fe14:	f108 0808 	add.w	r8, r8, #8
   1fe18:	e6d5      	b.n	1fbc6 <_svfprintf_r+0xd46>
   1fe1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fe1c:	6813      	ldr	r3, [r2, #0]
   1fe1e:	3204      	adds	r2, #4
   1fe20:	920b      	str	r2, [sp, #44]	; 0x2c
   1fe22:	9a05      	ldr	r2, [sp, #20]
   1fe24:	601a      	str	r2, [r3, #0]
   1fe26:	f7ff b852 	b.w	1eece <_svfprintf_r+0x4e>
   1fe2a:	aa23      	add	r2, sp, #140	; 0x8c
   1fe2c:	9907      	ldr	r1, [sp, #28]
   1fe2e:	9808      	ldr	r0, [sp, #32]
   1fe30:	f002 f9d8 	bl	221e4 <__ssprint_r>
   1fe34:	2800      	cmp	r0, #0
   1fe36:	f47f a8f5 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fe3a:	46c8      	mov	r8, r9
   1fe3c:	e488      	b.n	1f750 <_svfprintf_r+0x8d0>
   1fe3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fe40:	4a27      	ldr	r2, [pc, #156]	; (1fee0 <_svfprintf_r+0x1060>)
   1fe42:	f8c8 2000 	str.w	r2, [r8]
   1fe46:	3301      	adds	r3, #1
   1fe48:	3401      	adds	r4, #1
   1fe4a:	2201      	movs	r2, #1
   1fe4c:	2b07      	cmp	r3, #7
   1fe4e:	9425      	str	r4, [sp, #148]	; 0x94
   1fe50:	9324      	str	r3, [sp, #144]	; 0x90
   1fe52:	f8c8 2004 	str.w	r2, [r8, #4]
   1fe56:	dc54      	bgt.n	1ff02 <_svfprintf_r+0x1082>
   1fe58:	f108 0808 	add.w	r8, r8, #8
   1fe5c:	b929      	cbnz	r1, 1fe6a <_svfprintf_r+0xfea>
   1fe5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fe60:	b91b      	cbnz	r3, 1fe6a <_svfprintf_r+0xfea>
   1fe62:	9b03      	ldr	r3, [sp, #12]
   1fe64:	07d8      	lsls	r0, r3, #31
   1fe66:	f57f a9f2 	bpl.w	1f24e <_svfprintf_r+0x3ce>
   1fe6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fe6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fe6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fe70:	f8c8 2000 	str.w	r2, [r8]
   1fe74:	3301      	adds	r3, #1
   1fe76:	4602      	mov	r2, r0
   1fe78:	4422      	add	r2, r4
   1fe7a:	2b07      	cmp	r3, #7
   1fe7c:	9225      	str	r2, [sp, #148]	; 0x94
   1fe7e:	f8c8 0004 	str.w	r0, [r8, #4]
   1fe82:	9324      	str	r3, [sp, #144]	; 0x90
   1fe84:	f300 8195 	bgt.w	201b2 <_svfprintf_r+0x1332>
   1fe88:	f108 0808 	add.w	r8, r8, #8
   1fe8c:	2900      	cmp	r1, #0
   1fe8e:	f2c0 816d 	blt.w	2016c <_svfprintf_r+0x12ec>
   1fe92:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1fe94:	f8c8 6000 	str.w	r6, [r8]
   1fe98:	3301      	adds	r3, #1
   1fe9a:	188c      	adds	r4, r1, r2
   1fe9c:	2b07      	cmp	r3, #7
   1fe9e:	9425      	str	r4, [sp, #148]	; 0x94
   1fea0:	9324      	str	r3, [sp, #144]	; 0x90
   1fea2:	f8c8 1004 	str.w	r1, [r8, #4]
   1fea6:	f77f a9d0 	ble.w	1f24a <_svfprintf_r+0x3ca>
   1feaa:	e529      	b.n	1f900 <_svfprintf_r+0xa80>
   1feac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1feae:	9905      	ldr	r1, [sp, #20]
   1feb0:	6813      	ldr	r3, [r2, #0]
   1feb2:	17cd      	asrs	r5, r1, #31
   1feb4:	4608      	mov	r0, r1
   1feb6:	3204      	adds	r2, #4
   1feb8:	4629      	mov	r1, r5
   1feba:	920b      	str	r2, [sp, #44]	; 0x2c
   1febc:	e9c3 0100 	strd	r0, r1, [r3]
   1fec0:	f7ff b805 	b.w	1eece <_svfprintf_r+0x4e>
   1fec4:	aa23      	add	r2, sp, #140	; 0x8c
   1fec6:	9907      	ldr	r1, [sp, #28]
   1fec8:	9808      	ldr	r0, [sp, #32]
   1feca:	f002 f98b 	bl	221e4 <__ssprint_r>
   1fece:	2800      	cmp	r0, #0
   1fed0:	f47f a8a8 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1fed4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fed6:	46c8      	mov	r8, r9
   1fed8:	e453      	b.n	1f782 <_svfprintf_r+0x902>
   1feda:	bf00      	nop
   1fedc:	00024c04 	.word	0x00024c04
   1fee0:	00024bf0 	.word	0x00024bf0
   1fee4:	2140      	movs	r1, #64	; 0x40
   1fee6:	9808      	ldr	r0, [sp, #32]
   1fee8:	f7fd fe8a 	bl	1dc00 <_malloc_r>
   1feec:	9a07      	ldr	r2, [sp, #28]
   1feee:	6010      	str	r0, [r2, #0]
   1fef0:	6110      	str	r0, [r2, #16]
   1fef2:	2800      	cmp	r0, #0
   1fef4:	f000 81f6 	beq.w	202e4 <_svfprintf_r+0x1464>
   1fef8:	9a07      	ldr	r2, [sp, #28]
   1fefa:	2340      	movs	r3, #64	; 0x40
   1fefc:	6153      	str	r3, [r2, #20]
   1fefe:	f7fe bfd6 	b.w	1eeae <_svfprintf_r+0x2e>
   1ff02:	aa23      	add	r2, sp, #140	; 0x8c
   1ff04:	9907      	ldr	r1, [sp, #28]
   1ff06:	9808      	ldr	r0, [sp, #32]
   1ff08:	f002 f96c 	bl	221e4 <__ssprint_r>
   1ff0c:	2800      	cmp	r0, #0
   1ff0e:	f47f a889 	bne.w	1f024 <_svfprintf_r+0x1a4>
   1ff12:	991d      	ldr	r1, [sp, #116]	; 0x74
   1ff14:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ff16:	46c8      	mov	r8, r9
   1ff18:	e7a0      	b.n	1fe5c <_svfprintf_r+0xfdc>
   1ff1a:	9d06      	ldr	r5, [sp, #24]
   1ff1c:	9808      	ldr	r0, [sp, #32]
   1ff1e:	aa21      	add	r2, sp, #132	; 0x84
   1ff20:	ab1e      	add	r3, sp, #120	; 0x78
   1ff22:	9201      	str	r2, [sp, #4]
   1ff24:	9300      	str	r3, [sp, #0]
   1ff26:	462a      	mov	r2, r5
   1ff28:	ab1d      	add	r3, sp, #116	; 0x74
   1ff2a:	2103      	movs	r1, #3
   1ff2c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1ff30:	f000 fbc2 	bl	206b8 <_dtoa_r>
   1ff34:	4606      	mov	r6, r0
   1ff36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff38:	2b46      	cmp	r3, #70	; 0x46
   1ff3a:	eb06 0405 	add.w	r4, r6, r5
   1ff3e:	f47f af17 	bne.w	1fd70 <_svfprintf_r+0xef0>
   1ff42:	7833      	ldrb	r3, [r6, #0]
   1ff44:	2b30      	cmp	r3, #48	; 0x30
   1ff46:	f000 817d 	beq.w	20244 <_svfprintf_r+0x13c4>
   1ff4a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   1ff4c:	442c      	add	r4, r5
   1ff4e:	e70f      	b.n	1fd70 <_svfprintf_r+0xef0>
   1ff50:	9b06      	ldr	r3, [sp, #24]
   1ff52:	2b00      	cmp	r3, #0
   1ff54:	bf08      	it	eq
   1ff56:	2301      	moveq	r3, #1
   1ff58:	9306      	str	r3, [sp, #24]
   1ff5a:	e6d9      	b.n	1fd10 <_svfprintf_r+0xe90>
   1ff5c:	4630      	mov	r0, r6
   1ff5e:	9406      	str	r4, [sp, #24]
   1ff60:	f7fe fece 	bl	1ed00 <strlen>
   1ff64:	950b      	str	r5, [sp, #44]	; 0x2c
   1ff66:	900a      	str	r0, [sp, #40]	; 0x28
   1ff68:	f8cd b00c 	str.w	fp, [sp, #12]
   1ff6c:	4603      	mov	r3, r0
   1ff6e:	f7ff b9eb 	b.w	1f348 <_svfprintf_r+0x4c8>
   1ff72:	272d      	movs	r7, #45	; 0x2d
   1ff74:	2300      	movs	r3, #0
   1ff76:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1ff7a:	9306      	str	r3, [sp, #24]
   1ff7c:	f7ff b899 	b.w	1f0b2 <_svfprintf_r+0x232>
   1ff80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ff82:	930e      	str	r3, [sp, #56]	; 0x38
   1ff84:	461a      	mov	r2, r3
   1ff86:	3303      	adds	r3, #3
   1ff88:	db04      	blt.n	1ff94 <_svfprintf_r+0x1114>
   1ff8a:	9b06      	ldr	r3, [sp, #24]
   1ff8c:	4619      	mov	r1, r3
   1ff8e:	4291      	cmp	r1, r2
   1ff90:	f6bf af10 	bge.w	1fdb4 <_svfprintf_r+0xf34>
   1ff94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff96:	3b02      	subs	r3, #2
   1ff98:	930d      	str	r3, [sp, #52]	; 0x34
   1ff9a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   1ff9e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   1ffa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ffa4:	3b01      	subs	r3, #1
   1ffa6:	2b00      	cmp	r3, #0
   1ffa8:	931d      	str	r3, [sp, #116]	; 0x74
   1ffaa:	bfbd      	ittte	lt
   1ffac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1ffae:	f1c3 0301 	rsblt	r3, r3, #1
   1ffb2:	222d      	movlt	r2, #45	; 0x2d
   1ffb4:	222b      	movge	r2, #43	; 0x2b
   1ffb6:	2b09      	cmp	r3, #9
   1ffb8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   1ffbc:	f340 811d 	ble.w	201fa <_svfprintf_r+0x137a>
   1ffc0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   1ffc4:	4620      	mov	r0, r4
   1ffc6:	4daf      	ldr	r5, [pc, #700]	; (20284 <_svfprintf_r+0x1404>)
   1ffc8:	e000      	b.n	1ffcc <_svfprintf_r+0x114c>
   1ffca:	4610      	mov	r0, r2
   1ffcc:	fb85 1203 	smull	r1, r2, r5, r3
   1ffd0:	17d9      	asrs	r1, r3, #31
   1ffd2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   1ffd6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1ffda:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1ffde:	3230      	adds	r2, #48	; 0x30
   1ffe0:	2909      	cmp	r1, #9
   1ffe2:	f800 2c01 	strb.w	r2, [r0, #-1]
   1ffe6:	460b      	mov	r3, r1
   1ffe8:	f100 32ff 	add.w	r2, r0, #4294967295
   1ffec:	dced      	bgt.n	1ffca <_svfprintf_r+0x114a>
   1ffee:	3330      	adds	r3, #48	; 0x30
   1fff0:	3802      	subs	r0, #2
   1fff2:	b2d9      	uxtb	r1, r3
   1fff4:	4284      	cmp	r4, r0
   1fff6:	f802 1c01 	strb.w	r1, [r2, #-1]
   1fffa:	f240 8170 	bls.w	202de <_svfprintf_r+0x145e>
   1fffe:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   20002:	4613      	mov	r3, r2
   20004:	e001      	b.n	2000a <_svfprintf_r+0x118a>
   20006:	f813 1b01 	ldrb.w	r1, [r3], #1
   2000a:	f800 1b01 	strb.w	r1, [r0], #1
   2000e:	42a3      	cmp	r3, r4
   20010:	d1f9      	bne.n	20006 <_svfprintf_r+0x1186>
   20012:	3301      	adds	r3, #1
   20014:	1a9b      	subs	r3, r3, r2
   20016:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   2001a:	4413      	add	r3, r2
   2001c:	aa1f      	add	r2, sp, #124	; 0x7c
   2001e:	1a9b      	subs	r3, r3, r2
   20020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20022:	9315      	str	r3, [sp, #84]	; 0x54
   20024:	2a01      	cmp	r2, #1
   20026:	4413      	add	r3, r2
   20028:	930a      	str	r3, [sp, #40]	; 0x28
   2002a:	f340 8120 	ble.w	2026e <_svfprintf_r+0x13ee>
   2002e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20032:	4413      	add	r3, r2
   20034:	930a      	str	r3, [sp, #40]	; 0x28
   20036:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2003a:	9304      	str	r3, [sp, #16]
   2003c:	2300      	movs	r3, #0
   2003e:	930e      	str	r3, [sp, #56]	; 0x38
   20040:	e6c8      	b.n	1fdd4 <_svfprintf_r+0xf54>
   20042:	4623      	mov	r3, r4
   20044:	e6a7      	b.n	1fd96 <_svfprintf_r+0xf16>
   20046:	aa23      	add	r2, sp, #140	; 0x8c
   20048:	9907      	ldr	r1, [sp, #28]
   2004a:	9808      	ldr	r0, [sp, #32]
   2004c:	f002 f8ca 	bl	221e4 <__ssprint_r>
   20050:	2800      	cmp	r0, #0
   20052:	f47e afe7 	bne.w	1f024 <_svfprintf_r+0x1a4>
   20056:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20058:	46c8      	mov	r8, r9
   2005a:	e4d5      	b.n	1fa08 <_svfprintf_r+0xb88>
   2005c:	aa23      	add	r2, sp, #140	; 0x8c
   2005e:	9907      	ldr	r1, [sp, #28]
   20060:	9808      	ldr	r0, [sp, #32]
   20062:	f002 f8bf 	bl	221e4 <__ssprint_r>
   20066:	2800      	cmp	r0, #0
   20068:	f47e afdc 	bne.w	1f024 <_svfprintf_r+0x1a4>
   2006c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2006e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20070:	46c8      	mov	r8, r9
   20072:	e5af      	b.n	1fbd4 <_svfprintf_r+0xd54>
   20074:	aa23      	add	r2, sp, #140	; 0x8c
   20076:	9907      	ldr	r1, [sp, #28]
   20078:	9808      	ldr	r0, [sp, #32]
   2007a:	f002 f8b3 	bl	221e4 <__ssprint_r>
   2007e:	2800      	cmp	r0, #0
   20080:	f47e afd0 	bne.w	1f024 <_svfprintf_r+0x1a4>
   20084:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20088:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2008a:	1a9a      	subs	r2, r3, r2
   2008c:	46c8      	mov	r8, r9
   2008e:	e5b9      	b.n	1fc04 <_svfprintf_r+0xd84>
   20090:	9b06      	ldr	r3, [sp, #24]
   20092:	960e      	str	r6, [sp, #56]	; 0x38
   20094:	2b06      	cmp	r3, #6
   20096:	bf28      	it	cs
   20098:	2306      	movcs	r3, #6
   2009a:	9606      	str	r6, [sp, #24]
   2009c:	4637      	mov	r7, r6
   2009e:	9304      	str	r3, [sp, #16]
   200a0:	950b      	str	r5, [sp, #44]	; 0x2c
   200a2:	f8cd b00c 	str.w	fp, [sp, #12]
   200a6:	930a      	str	r3, [sp, #40]	; 0x28
   200a8:	4e77      	ldr	r6, [pc, #476]	; (20288 <_svfprintf_r+0x1408>)
   200aa:	f7ff b801 	b.w	1f0b0 <_svfprintf_r+0x230>
   200ae:	2306      	movs	r3, #6
   200b0:	9306      	str	r3, [sp, #24]
   200b2:	e62d      	b.n	1fd10 <_svfprintf_r+0xe90>
   200b4:	9c06      	ldr	r4, [sp, #24]
   200b6:	9808      	ldr	r0, [sp, #32]
   200b8:	aa21      	add	r2, sp, #132	; 0x84
   200ba:	ab1e      	add	r3, sp, #120	; 0x78
   200bc:	9201      	str	r2, [sp, #4]
   200be:	9300      	str	r3, [sp, #0]
   200c0:	4622      	mov	r2, r4
   200c2:	ab1d      	add	r3, sp, #116	; 0x74
   200c4:	2103      	movs	r1, #3
   200c6:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   200ca:	f000 faf5 	bl	206b8 <_dtoa_r>
   200ce:	4623      	mov	r3, r4
   200d0:	4606      	mov	r6, r0
   200d2:	1904      	adds	r4, r0, r4
   200d4:	461d      	mov	r5, r3
   200d6:	e734      	b.n	1ff42 <_svfprintf_r+0x10c2>
   200d8:	272d      	movs	r7, #45	; 0x2d
   200da:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   200de:	f7ff baca 	b.w	1f676 <_svfprintf_r+0x7f6>
   200e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   200e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   200e6:	4413      	add	r3, r2
   200e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   200ea:	930a      	str	r3, [sp, #40]	; 0x28
   200ec:	2a00      	cmp	r2, #0
   200ee:	f340 80b7 	ble.w	20260 <_svfprintf_r+0x13e0>
   200f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   200f6:	9304      	str	r3, [sp, #16]
   200f8:	2367      	movs	r3, #103	; 0x67
   200fa:	930d      	str	r3, [sp, #52]	; 0x34
   200fc:	e66a      	b.n	1fdd4 <_svfprintf_r+0xf54>
   200fe:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   20102:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   20106:	9319      	str	r3, [sp, #100]	; 0x64
   20108:	232d      	movs	r3, #45	; 0x2d
   2010a:	9118      	str	r1, [sp, #96]	; 0x60
   2010c:	930c      	str	r3, [sp, #48]	; 0x30
   2010e:	e60c      	b.n	1fd2a <_svfprintf_r+0xeaa>
   20110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20112:	2b47      	cmp	r3, #71	; 0x47
   20114:	f47f ae2b 	bne.w	1fd6e <_svfprintf_r+0xeee>
   20118:	f01b 0f01 	tst.w	fp, #1
   2011c:	f47f af0b 	bne.w	1ff36 <_svfprintf_r+0x10b6>
   20120:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20122:	2f47      	cmp	r7, #71	; 0x47
   20124:	eba3 0306 	sub.w	r3, r3, r6
   20128:	930f      	str	r3, [sp, #60]	; 0x3c
   2012a:	f43f af29 	beq.w	1ff80 <_svfprintf_r+0x1100>
   2012e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20130:	930e      	str	r3, [sp, #56]	; 0x38
   20132:	e732      	b.n	1ff9a <_svfprintf_r+0x111a>
   20134:	2b00      	cmp	r3, #0
   20136:	f340 80af 	ble.w	20298 <_svfprintf_r+0x1418>
   2013a:	9a06      	ldr	r2, [sp, #24]
   2013c:	2a00      	cmp	r2, #0
   2013e:	d16b      	bne.n	20218 <_svfprintf_r+0x1398>
   20140:	f01b 0f01 	tst.w	fp, #1
   20144:	d168      	bne.n	20218 <_svfprintf_r+0x1398>
   20146:	9304      	str	r3, [sp, #16]
   20148:	930a      	str	r3, [sp, #40]	; 0x28
   2014a:	e643      	b.n	1fdd4 <_svfprintf_r+0xf54>
   2014c:	9b06      	ldr	r3, [sp, #24]
   2014e:	9304      	str	r3, [sp, #16]
   20150:	930a      	str	r3, [sp, #40]	; 0x28
   20152:	9006      	str	r0, [sp, #24]
   20154:	950b      	str	r5, [sp, #44]	; 0x2c
   20156:	f8cd b00c 	str.w	fp, [sp, #12]
   2015a:	900e      	str	r0, [sp, #56]	; 0x38
   2015c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20160:	f7fe bfa6 	b.w	1f0b0 <_svfprintf_r+0x230>
   20164:	2000      	movs	r0, #0
   20166:	9006      	str	r0, [sp, #24]
   20168:	f7fe bee4 	b.w	1ef34 <_svfprintf_r+0xb4>
   2016c:	424f      	negs	r7, r1
   2016e:	3110      	adds	r1, #16
   20170:	4d46      	ldr	r5, [pc, #280]	; (2028c <_svfprintf_r+0x140c>)
   20172:	da2b      	bge.n	201cc <_svfprintf_r+0x134c>
   20174:	2410      	movs	r4, #16
   20176:	f8dd b020 	ldr.w	fp, [sp, #32]
   2017a:	e004      	b.n	20186 <_svfprintf_r+0x1306>
   2017c:	f108 0808 	add.w	r8, r8, #8
   20180:	3f10      	subs	r7, #16
   20182:	2f10      	cmp	r7, #16
   20184:	dd22      	ble.n	201cc <_svfprintf_r+0x134c>
   20186:	3301      	adds	r3, #1
   20188:	3210      	adds	r2, #16
   2018a:	2b07      	cmp	r3, #7
   2018c:	9225      	str	r2, [sp, #148]	; 0x94
   2018e:	9324      	str	r3, [sp, #144]	; 0x90
   20190:	f8c8 5000 	str.w	r5, [r8]
   20194:	f8c8 4004 	str.w	r4, [r8, #4]
   20198:	ddf0      	ble.n	2017c <_svfprintf_r+0x12fc>
   2019a:	aa23      	add	r2, sp, #140	; 0x8c
   2019c:	9907      	ldr	r1, [sp, #28]
   2019e:	4658      	mov	r0, fp
   201a0:	f002 f820 	bl	221e4 <__ssprint_r>
   201a4:	2800      	cmp	r0, #0
   201a6:	f47e af3d 	bne.w	1f024 <_svfprintf_r+0x1a4>
   201aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
   201ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   201ae:	46c8      	mov	r8, r9
   201b0:	e7e6      	b.n	20180 <_svfprintf_r+0x1300>
   201b2:	aa23      	add	r2, sp, #140	; 0x8c
   201b4:	9907      	ldr	r1, [sp, #28]
   201b6:	9808      	ldr	r0, [sp, #32]
   201b8:	f002 f814 	bl	221e4 <__ssprint_r>
   201bc:	2800      	cmp	r0, #0
   201be:	f47e af31 	bne.w	1f024 <_svfprintf_r+0x1a4>
   201c2:	991d      	ldr	r1, [sp, #116]	; 0x74
   201c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   201c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   201c8:	46c8      	mov	r8, r9
   201ca:	e65f      	b.n	1fe8c <_svfprintf_r+0x100c>
   201cc:	3301      	adds	r3, #1
   201ce:	443a      	add	r2, r7
   201d0:	2b07      	cmp	r3, #7
   201d2:	e888 00a0 	stmia.w	r8, {r5, r7}
   201d6:	9225      	str	r2, [sp, #148]	; 0x94
   201d8:	9324      	str	r3, [sp, #144]	; 0x90
   201da:	f108 0808 	add.w	r8, r8, #8
   201de:	f77f ae58 	ble.w	1fe92 <_svfprintf_r+0x1012>
   201e2:	aa23      	add	r2, sp, #140	; 0x8c
   201e4:	9907      	ldr	r1, [sp, #28]
   201e6:	9808      	ldr	r0, [sp, #32]
   201e8:	f001 fffc 	bl	221e4 <__ssprint_r>
   201ec:	2800      	cmp	r0, #0
   201ee:	f47e af19 	bne.w	1f024 <_svfprintf_r+0x1a4>
   201f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   201f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   201f6:	46c8      	mov	r8, r9
   201f8:	e64b      	b.n	1fe92 <_svfprintf_r+0x1012>
   201fa:	3330      	adds	r3, #48	; 0x30
   201fc:	2230      	movs	r2, #48	; 0x30
   201fe:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20202:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20206:	ab20      	add	r3, sp, #128	; 0x80
   20208:	e708      	b.n	2001c <_svfprintf_r+0x119c>
   2020a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2020c:	e5c3      	b.n	1fd96 <_svfprintf_r+0xf16>
   2020e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20212:	4413      	add	r3, r2
   20214:	930a      	str	r3, [sp, #40]	; 0x28
   20216:	e76c      	b.n	200f2 <_svfprintf_r+0x1272>
   20218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2021a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2021c:	4413      	add	r3, r2
   2021e:	9a06      	ldr	r2, [sp, #24]
   20220:	441a      	add	r2, r3
   20222:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20226:	920a      	str	r2, [sp, #40]	; 0x28
   20228:	9304      	str	r3, [sp, #16]
   2022a:	e5d3      	b.n	1fdd4 <_svfprintf_r+0xf54>
   2022c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2022e:	4e18      	ldr	r6, [pc, #96]	; (20290 <_svfprintf_r+0x1410>)
   20230:	2b00      	cmp	r3, #0
   20232:	bfb6      	itet	lt
   20234:	272d      	movlt	r7, #45	; 0x2d
   20236:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   2023a:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   2023e:	4b15      	ldr	r3, [pc, #84]	; (20294 <_svfprintf_r+0x1414>)
   20240:	f7ff ba1b 	b.w	1f67a <_svfprintf_r+0x7fa>
   20244:	2200      	movs	r2, #0
   20246:	2300      	movs	r3, #0
   20248:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   2024c:	f7fb feb6 	bl	1bfbc <__aeabi_dcmpeq>
   20250:	2800      	cmp	r0, #0
   20252:	f47f ae7a 	bne.w	1ff4a <_svfprintf_r+0x10ca>
   20256:	f1c5 0501 	rsb	r5, r5, #1
   2025a:	951d      	str	r5, [sp, #116]	; 0x74
   2025c:	442c      	add	r4, r5
   2025e:	e587      	b.n	1fd70 <_svfprintf_r+0xef0>
   20260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20264:	f1c3 0301 	rsb	r3, r3, #1
   20268:	441a      	add	r2, r3
   2026a:	4613      	mov	r3, r2
   2026c:	e7d2      	b.n	20214 <_svfprintf_r+0x1394>
   2026e:	f01b 0301 	ands.w	r3, fp, #1
   20272:	930e      	str	r3, [sp, #56]	; 0x38
   20274:	f47f aedb 	bne.w	2002e <_svfprintf_r+0x11ae>
   20278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2027a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2027e:	9304      	str	r3, [sp, #16]
   20280:	e5a8      	b.n	1fdd4 <_svfprintf_r+0xf54>
   20282:	bf00      	nop
   20284:	66666667 	.word	0x66666667
   20288:	00024be8 	.word	0x00024be8
   2028c:	00024c04 	.word	0x00024c04
   20290:	00024bbc 	.word	0x00024bbc
   20294:	00024bb8 	.word	0x00024bb8
   20298:	9b06      	ldr	r3, [sp, #24]
   2029a:	b913      	cbnz	r3, 202a2 <_svfprintf_r+0x1422>
   2029c:	f01b 0f01 	tst.w	fp, #1
   202a0:	d002      	beq.n	202a8 <_svfprintf_r+0x1428>
   202a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   202a4:	3301      	adds	r3, #1
   202a6:	e7ba      	b.n	2021e <_svfprintf_r+0x139e>
   202a8:	2301      	movs	r3, #1
   202aa:	e74c      	b.n	20146 <_svfprintf_r+0x12c6>
   202ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   202ae:	f89a 3001 	ldrb.w	r3, [sl, #1]
   202b2:	6828      	ldr	r0, [r5, #0]
   202b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   202b8:	9006      	str	r0, [sp, #24]
   202ba:	4628      	mov	r0, r5
   202bc:	3004      	adds	r0, #4
   202be:	46a2      	mov	sl, r4
   202c0:	900b      	str	r0, [sp, #44]	; 0x2c
   202c2:	f7fe be35 	b.w	1ef30 <_svfprintf_r+0xb0>
   202c6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   202ca:	f7ff b852 	b.w	1f372 <_svfprintf_r+0x4f2>
   202ce:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   202d2:	f7ff b8de 	b.w	1f492 <_svfprintf_r+0x612>
   202d6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   202da:	f7ff ba07 	b.w	1f6ec <_svfprintf_r+0x86c>
   202de:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   202e2:	e69b      	b.n	2001c <_svfprintf_r+0x119c>
   202e4:	9a08      	ldr	r2, [sp, #32]
   202e6:	230c      	movs	r3, #12
   202e8:	6013      	str	r3, [r2, #0]
   202ea:	f04f 33ff 	mov.w	r3, #4294967295
   202ee:	9305      	str	r3, [sp, #20]
   202f0:	f7fe bea1 	b.w	1f036 <_svfprintf_r+0x1b6>
   202f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   202f8:	f7ff b986 	b.w	1f608 <_svfprintf_r+0x788>
   202fc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20300:	f7ff b962 	b.w	1f5c8 <_svfprintf_r+0x748>
   20304:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20308:	f7ff b945 	b.w	1f596 <_svfprintf_r+0x716>
   2030c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20310:	f7ff b8fe 	b.w	1f510 <_svfprintf_r+0x690>

00020314 <write>:
   20314:	b410      	push	{r4}
   20316:	4c04      	ldr	r4, [pc, #16]	; (20328 <write+0x14>)
   20318:	4613      	mov	r3, r2
   2031a:	460a      	mov	r2, r1
   2031c:	4601      	mov	r1, r0
   2031e:	6820      	ldr	r0, [r4, #0]
   20320:	f85d 4b04 	ldr.w	r4, [sp], #4
   20324:	f000 b8aa 	b.w	2047c <_write_r>
   20328:	200000f8 	.word	0x200000f8

0002032c <__utoa>:
   2032c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2032e:	f8df e078 	ldr.w	lr, [pc, #120]	; 203a8 <__utoa+0x7c>
   20332:	4616      	mov	r6, r2
   20334:	4604      	mov	r4, r0
   20336:	460f      	mov	r7, r1
   20338:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2033c:	b08b      	sub	sp, #44	; 0x2c
   2033e:	466d      	mov	r5, sp
   20340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20342:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20348:	e89e 0003 	ldmia.w	lr, {r0, r1}
   2034c:	1eb3      	subs	r3, r6, #2
   2034e:	f845 0b04 	str.w	r0, [r5], #4
   20352:	2b22      	cmp	r3, #34	; 0x22
   20354:	7029      	strb	r1, [r5, #0]
   20356:	d822      	bhi.n	2039e <__utoa+0x72>
   20358:	1e7d      	subs	r5, r7, #1
   2035a:	4628      	mov	r0, r5
   2035c:	2200      	movs	r2, #0
   2035e:	e000      	b.n	20362 <__utoa+0x36>
   20360:	461a      	mov	r2, r3
   20362:	fbb4 f1f6 	udiv	r1, r4, r6
   20366:	ab0a      	add	r3, sp, #40	; 0x28
   20368:	fb06 4411 	mls	r4, r6, r1, r4
   2036c:	4423      	add	r3, r4
   2036e:	460c      	mov	r4, r1
   20370:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   20374:	f800 3f01 	strb.w	r3, [r0, #1]!
   20378:	1c53      	adds	r3, r2, #1
   2037a:	2900      	cmp	r1, #0
   2037c:	d1f0      	bne.n	20360 <__utoa+0x34>
   2037e:	54f9      	strb	r1, [r7, r3]
   20380:	18bb      	adds	r3, r7, r2
   20382:	b14a      	cbz	r2, 20398 <__utoa+0x6c>
   20384:	7819      	ldrb	r1, [r3, #0]
   20386:	7868      	ldrb	r0, [r5, #1]
   20388:	f805 1f01 	strb.w	r1, [r5, #1]!
   2038c:	3401      	adds	r4, #1
   2038e:	1b11      	subs	r1, r2, r4
   20390:	428c      	cmp	r4, r1
   20392:	f803 0901 	strb.w	r0, [r3], #-1
   20396:	dbf5      	blt.n	20384 <__utoa+0x58>
   20398:	4638      	mov	r0, r7
   2039a:	b00b      	add	sp, #44	; 0x2c
   2039c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2039e:	2000      	movs	r0, #0
   203a0:	7038      	strb	r0, [r7, #0]
   203a2:	b00b      	add	sp, #44	; 0x2c
   203a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   203a6:	bf00      	nop
   203a8:	00024c14 	.word	0x00024c14

000203ac <utoa>:
   203ac:	f7ff bfbe 	b.w	2032c <__utoa>

000203b0 <__swbuf_r>:
   203b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203b2:	460d      	mov	r5, r1
   203b4:	4614      	mov	r4, r2
   203b6:	4606      	mov	r6, r0
   203b8:	b110      	cbz	r0, 203c0 <__swbuf_r+0x10>
   203ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   203bc:	2b00      	cmp	r3, #0
   203be:	d04b      	beq.n	20458 <__swbuf_r+0xa8>
   203c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   203c4:	69a3      	ldr	r3, [r4, #24]
   203c6:	60a3      	str	r3, [r4, #8]
   203c8:	b291      	uxth	r1, r2
   203ca:	0708      	lsls	r0, r1, #28
   203cc:	d539      	bpl.n	20442 <__swbuf_r+0x92>
   203ce:	6923      	ldr	r3, [r4, #16]
   203d0:	2b00      	cmp	r3, #0
   203d2:	d036      	beq.n	20442 <__swbuf_r+0x92>
   203d4:	b2ed      	uxtb	r5, r5
   203d6:	0489      	lsls	r1, r1, #18
   203d8:	462f      	mov	r7, r5
   203da:	d515      	bpl.n	20408 <__swbuf_r+0x58>
   203dc:	6822      	ldr	r2, [r4, #0]
   203de:	6961      	ldr	r1, [r4, #20]
   203e0:	1ad3      	subs	r3, r2, r3
   203e2:	428b      	cmp	r3, r1
   203e4:	da1c      	bge.n	20420 <__swbuf_r+0x70>
   203e6:	3301      	adds	r3, #1
   203e8:	68a1      	ldr	r1, [r4, #8]
   203ea:	1c50      	adds	r0, r2, #1
   203ec:	3901      	subs	r1, #1
   203ee:	60a1      	str	r1, [r4, #8]
   203f0:	6020      	str	r0, [r4, #0]
   203f2:	7015      	strb	r5, [r2, #0]
   203f4:	6962      	ldr	r2, [r4, #20]
   203f6:	429a      	cmp	r2, r3
   203f8:	d01a      	beq.n	20430 <__swbuf_r+0x80>
   203fa:	89a3      	ldrh	r3, [r4, #12]
   203fc:	07db      	lsls	r3, r3, #31
   203fe:	d501      	bpl.n	20404 <__swbuf_r+0x54>
   20400:	2d0a      	cmp	r5, #10
   20402:	d015      	beq.n	20430 <__swbuf_r+0x80>
   20404:	4638      	mov	r0, r7
   20406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20408:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2040a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2040e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   20412:	81a2      	strh	r2, [r4, #12]
   20414:	6822      	ldr	r2, [r4, #0]
   20416:	6661      	str	r1, [r4, #100]	; 0x64
   20418:	6961      	ldr	r1, [r4, #20]
   2041a:	1ad3      	subs	r3, r2, r3
   2041c:	428b      	cmp	r3, r1
   2041e:	dbe2      	blt.n	203e6 <__swbuf_r+0x36>
   20420:	4621      	mov	r1, r4
   20422:	4630      	mov	r0, r6
   20424:	f001 f90e 	bl	21644 <_fflush_r>
   20428:	b940      	cbnz	r0, 2043c <__swbuf_r+0x8c>
   2042a:	6822      	ldr	r2, [r4, #0]
   2042c:	2301      	movs	r3, #1
   2042e:	e7db      	b.n	203e8 <__swbuf_r+0x38>
   20430:	4621      	mov	r1, r4
   20432:	4630      	mov	r0, r6
   20434:	f001 f906 	bl	21644 <_fflush_r>
   20438:	2800      	cmp	r0, #0
   2043a:	d0e3      	beq.n	20404 <__swbuf_r+0x54>
   2043c:	f04f 37ff 	mov.w	r7, #4294967295
   20440:	e7e0      	b.n	20404 <__swbuf_r+0x54>
   20442:	4621      	mov	r1, r4
   20444:	4630      	mov	r0, r6
   20446:	f000 f82f 	bl	204a8 <__swsetup_r>
   2044a:	2800      	cmp	r0, #0
   2044c:	d1f6      	bne.n	2043c <__swbuf_r+0x8c>
   2044e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20452:	6923      	ldr	r3, [r4, #16]
   20454:	b291      	uxth	r1, r2
   20456:	e7bd      	b.n	203d4 <__swbuf_r+0x24>
   20458:	f001 f94c 	bl	216f4 <__sinit>
   2045c:	e7b0      	b.n	203c0 <__swbuf_r+0x10>
   2045e:	bf00      	nop

00020460 <__ascii_wctomb>:
   20460:	b121      	cbz	r1, 2046c <__ascii_wctomb+0xc>
   20462:	2aff      	cmp	r2, #255	; 0xff
   20464:	d804      	bhi.n	20470 <__ascii_wctomb+0x10>
   20466:	700a      	strb	r2, [r1, #0]
   20468:	2001      	movs	r0, #1
   2046a:	4770      	bx	lr
   2046c:	4608      	mov	r0, r1
   2046e:	4770      	bx	lr
   20470:	238a      	movs	r3, #138	; 0x8a
   20472:	6003      	str	r3, [r0, #0]
   20474:	f04f 30ff 	mov.w	r0, #4294967295
   20478:	4770      	bx	lr
   2047a:	bf00      	nop

0002047c <_write_r>:
   2047c:	b570      	push	{r4, r5, r6, lr}
   2047e:	460d      	mov	r5, r1
   20480:	4c08      	ldr	r4, [pc, #32]	; (204a4 <_write_r+0x28>)
   20482:	4611      	mov	r1, r2
   20484:	4606      	mov	r6, r0
   20486:	461a      	mov	r2, r3
   20488:	4628      	mov	r0, r5
   2048a:	2300      	movs	r3, #0
   2048c:	6023      	str	r3, [r4, #0]
   2048e:	f002 f933 	bl	226f8 <_write>
   20492:	1c43      	adds	r3, r0, #1
   20494:	d000      	beq.n	20498 <_write_r+0x1c>
   20496:	bd70      	pop	{r4, r5, r6, pc}
   20498:	6823      	ldr	r3, [r4, #0]
   2049a:	2b00      	cmp	r3, #0
   2049c:	d0fb      	beq.n	20496 <_write_r+0x1a>
   2049e:	6033      	str	r3, [r6, #0]
   204a0:	bd70      	pop	{r4, r5, r6, pc}
   204a2:	bf00      	nop
   204a4:	2000239c 	.word	0x2000239c

000204a8 <__swsetup_r>:
   204a8:	b538      	push	{r3, r4, r5, lr}
   204aa:	4b30      	ldr	r3, [pc, #192]	; (2056c <__swsetup_r+0xc4>)
   204ac:	681b      	ldr	r3, [r3, #0]
   204ae:	4605      	mov	r5, r0
   204b0:	460c      	mov	r4, r1
   204b2:	b113      	cbz	r3, 204ba <__swsetup_r+0x12>
   204b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   204b6:	2a00      	cmp	r2, #0
   204b8:	d038      	beq.n	2052c <__swsetup_r+0x84>
   204ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   204be:	b293      	uxth	r3, r2
   204c0:	0718      	lsls	r0, r3, #28
   204c2:	d50c      	bpl.n	204de <__swsetup_r+0x36>
   204c4:	6920      	ldr	r0, [r4, #16]
   204c6:	b1a8      	cbz	r0, 204f4 <__swsetup_r+0x4c>
   204c8:	f013 0201 	ands.w	r2, r3, #1
   204cc:	d01e      	beq.n	2050c <__swsetup_r+0x64>
   204ce:	6963      	ldr	r3, [r4, #20]
   204d0:	2200      	movs	r2, #0
   204d2:	425b      	negs	r3, r3
   204d4:	61a3      	str	r3, [r4, #24]
   204d6:	60a2      	str	r2, [r4, #8]
   204d8:	b1f0      	cbz	r0, 20518 <__swsetup_r+0x70>
   204da:	2000      	movs	r0, #0
   204dc:	bd38      	pop	{r3, r4, r5, pc}
   204de:	06d9      	lsls	r1, r3, #27
   204e0:	d53c      	bpl.n	2055c <__swsetup_r+0xb4>
   204e2:	0758      	lsls	r0, r3, #29
   204e4:	d426      	bmi.n	20534 <__swsetup_r+0x8c>
   204e6:	6920      	ldr	r0, [r4, #16]
   204e8:	f042 0308 	orr.w	r3, r2, #8
   204ec:	81a3      	strh	r3, [r4, #12]
   204ee:	b29b      	uxth	r3, r3
   204f0:	2800      	cmp	r0, #0
   204f2:	d1e9      	bne.n	204c8 <__swsetup_r+0x20>
   204f4:	f403 7220 	and.w	r2, r3, #640	; 0x280
   204f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   204fc:	d0e4      	beq.n	204c8 <__swsetup_r+0x20>
   204fe:	4628      	mov	r0, r5
   20500:	4621      	mov	r1, r4
   20502:	f001 fae5 	bl	21ad0 <__smakebuf_r>
   20506:	89a3      	ldrh	r3, [r4, #12]
   20508:	6920      	ldr	r0, [r4, #16]
   2050a:	e7dd      	b.n	204c8 <__swsetup_r+0x20>
   2050c:	0799      	lsls	r1, r3, #30
   2050e:	bf58      	it	pl
   20510:	6962      	ldrpl	r2, [r4, #20]
   20512:	60a2      	str	r2, [r4, #8]
   20514:	2800      	cmp	r0, #0
   20516:	d1e0      	bne.n	204da <__swsetup_r+0x32>
   20518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2051c:	061a      	lsls	r2, r3, #24
   2051e:	d5dd      	bpl.n	204dc <__swsetup_r+0x34>
   20520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20524:	81a3      	strh	r3, [r4, #12]
   20526:	f04f 30ff 	mov.w	r0, #4294967295
   2052a:	bd38      	pop	{r3, r4, r5, pc}
   2052c:	4618      	mov	r0, r3
   2052e:	f001 f8e1 	bl	216f4 <__sinit>
   20532:	e7c2      	b.n	204ba <__swsetup_r+0x12>
   20534:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20536:	b151      	cbz	r1, 2054e <__swsetup_r+0xa6>
   20538:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2053c:	4299      	cmp	r1, r3
   2053e:	d004      	beq.n	2054a <__swsetup_r+0xa2>
   20540:	4628      	mov	r0, r5
   20542:	f001 f979 	bl	21838 <_free_r>
   20546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2054a:	2300      	movs	r3, #0
   2054c:	6323      	str	r3, [r4, #48]	; 0x30
   2054e:	2300      	movs	r3, #0
   20550:	6920      	ldr	r0, [r4, #16]
   20552:	6063      	str	r3, [r4, #4]
   20554:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   20558:	6020      	str	r0, [r4, #0]
   2055a:	e7c5      	b.n	204e8 <__swsetup_r+0x40>
   2055c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   20560:	2309      	movs	r3, #9
   20562:	602b      	str	r3, [r5, #0]
   20564:	f04f 30ff 	mov.w	r0, #4294967295
   20568:	81a2      	strh	r2, [r4, #12]
   2056a:	bd38      	pop	{r3, r4, r5, pc}
   2056c:	200000f8 	.word	0x200000f8

00020570 <register_fini>:
   20570:	4b02      	ldr	r3, [pc, #8]	; (2057c <register_fini+0xc>)
   20572:	b113      	cbz	r3, 2057a <register_fini+0xa>
   20574:	4802      	ldr	r0, [pc, #8]	; (20580 <register_fini+0x10>)
   20576:	f000 b805 	b.w	20584 <atexit>
   2057a:	4770      	bx	lr
   2057c:	00000000 	.word	0x00000000
   20580:	00021765 	.word	0x00021765

00020584 <atexit>:
   20584:	2300      	movs	r3, #0
   20586:	4601      	mov	r1, r0
   20588:	461a      	mov	r2, r3
   2058a:	4618      	mov	r0, r3
   2058c:	f001 bea8 	b.w	222e0 <__register_exitproc>

00020590 <quorem>:
   20590:	6902      	ldr	r2, [r0, #16]
   20592:	690b      	ldr	r3, [r1, #16]
   20594:	4293      	cmp	r3, r2
   20596:	f300 808d 	bgt.w	206b4 <quorem+0x124>
   2059a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2059e:	f103 38ff 	add.w	r8, r3, #4294967295
   205a2:	f101 0714 	add.w	r7, r1, #20
   205a6:	f100 0b14 	add.w	fp, r0, #20
   205aa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   205ae:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   205b2:	ea4f 0488 	mov.w	r4, r8, lsl #2
   205b6:	b083      	sub	sp, #12
   205b8:	3201      	adds	r2, #1
   205ba:	fbb3 f9f2 	udiv	r9, r3, r2
   205be:	eb0b 0304 	add.w	r3, fp, r4
   205c2:	9400      	str	r4, [sp, #0]
   205c4:	eb07 0a04 	add.w	sl, r7, r4
   205c8:	9301      	str	r3, [sp, #4]
   205ca:	f1b9 0f00 	cmp.w	r9, #0
   205ce:	d039      	beq.n	20644 <quorem+0xb4>
   205d0:	2500      	movs	r5, #0
   205d2:	462e      	mov	r6, r5
   205d4:	46bc      	mov	ip, r7
   205d6:	46de      	mov	lr, fp
   205d8:	f85c 4b04 	ldr.w	r4, [ip], #4
   205dc:	f8de 3000 	ldr.w	r3, [lr]
   205e0:	b2a2      	uxth	r2, r4
   205e2:	fb09 5502 	mla	r5, r9, r2, r5
   205e6:	0c22      	lsrs	r2, r4, #16
   205e8:	0c2c      	lsrs	r4, r5, #16
   205ea:	fb09 4202 	mla	r2, r9, r2, r4
   205ee:	b2ad      	uxth	r5, r5
   205f0:	1b75      	subs	r5, r6, r5
   205f2:	b296      	uxth	r6, r2
   205f4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   205f8:	fa15 f383 	uxtah	r3, r5, r3
   205fc:	eb06 4623 	add.w	r6, r6, r3, asr #16
   20600:	b29b      	uxth	r3, r3
   20602:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20606:	45e2      	cmp	sl, ip
   20608:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2060c:	f84e 3b04 	str.w	r3, [lr], #4
   20610:	ea4f 4626 	mov.w	r6, r6, asr #16
   20614:	d2e0      	bcs.n	205d8 <quorem+0x48>
   20616:	9b00      	ldr	r3, [sp, #0]
   20618:	f85b 3003 	ldr.w	r3, [fp, r3]
   2061c:	b993      	cbnz	r3, 20644 <quorem+0xb4>
   2061e:	9c01      	ldr	r4, [sp, #4]
   20620:	1f23      	subs	r3, r4, #4
   20622:	459b      	cmp	fp, r3
   20624:	d20c      	bcs.n	20640 <quorem+0xb0>
   20626:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2062a:	b94b      	cbnz	r3, 20640 <quorem+0xb0>
   2062c:	f1a4 0308 	sub.w	r3, r4, #8
   20630:	e002      	b.n	20638 <quorem+0xa8>
   20632:	681a      	ldr	r2, [r3, #0]
   20634:	3b04      	subs	r3, #4
   20636:	b91a      	cbnz	r2, 20640 <quorem+0xb0>
   20638:	459b      	cmp	fp, r3
   2063a:	f108 38ff 	add.w	r8, r8, #4294967295
   2063e:	d3f8      	bcc.n	20632 <quorem+0xa2>
   20640:	f8c0 8010 	str.w	r8, [r0, #16]
   20644:	4604      	mov	r4, r0
   20646:	f001 fc8b 	bl	21f60 <__mcmp>
   2064a:	2800      	cmp	r0, #0
   2064c:	db2e      	blt.n	206ac <quorem+0x11c>
   2064e:	f109 0901 	add.w	r9, r9, #1
   20652:	465d      	mov	r5, fp
   20654:	2300      	movs	r3, #0
   20656:	f857 1b04 	ldr.w	r1, [r7], #4
   2065a:	6828      	ldr	r0, [r5, #0]
   2065c:	b28a      	uxth	r2, r1
   2065e:	1a9a      	subs	r2, r3, r2
   20660:	0c0b      	lsrs	r3, r1, #16
   20662:	fa12 f280 	uxtah	r2, r2, r0
   20666:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2066a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2066e:	b292      	uxth	r2, r2
   20670:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   20674:	45ba      	cmp	sl, r7
   20676:	f845 2b04 	str.w	r2, [r5], #4
   2067a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2067e:	d2ea      	bcs.n	20656 <quorem+0xc6>
   20680:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   20684:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   20688:	b982      	cbnz	r2, 206ac <quorem+0x11c>
   2068a:	1f1a      	subs	r2, r3, #4
   2068c:	4593      	cmp	fp, r2
   2068e:	d20b      	bcs.n	206a8 <quorem+0x118>
   20690:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20694:	b942      	cbnz	r2, 206a8 <quorem+0x118>
   20696:	3b08      	subs	r3, #8
   20698:	e002      	b.n	206a0 <quorem+0x110>
   2069a:	681a      	ldr	r2, [r3, #0]
   2069c:	3b04      	subs	r3, #4
   2069e:	b91a      	cbnz	r2, 206a8 <quorem+0x118>
   206a0:	459b      	cmp	fp, r3
   206a2:	f108 38ff 	add.w	r8, r8, #4294967295
   206a6:	d3f8      	bcc.n	2069a <quorem+0x10a>
   206a8:	f8c4 8010 	str.w	r8, [r4, #16]
   206ac:	4648      	mov	r0, r9
   206ae:	b003      	add	sp, #12
   206b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206b4:	2000      	movs	r0, #0
   206b6:	4770      	bx	lr

000206b8 <_dtoa_r>:
   206b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206bc:	ec57 6b10 	vmov	r6, r7, d0
   206c0:	b097      	sub	sp, #92	; 0x5c
   206c2:	6c05      	ldr	r5, [r0, #64]	; 0x40
   206c4:	9102      	str	r1, [sp, #8]
   206c6:	4604      	mov	r4, r0
   206c8:	4693      	mov	fp, r2
   206ca:	9303      	str	r3, [sp, #12]
   206cc:	e9cd 6700 	strd	r6, r7, [sp]
   206d0:	b14d      	cbz	r5, 206e6 <_dtoa_r+0x2e>
   206d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   206d4:	606a      	str	r2, [r5, #4]
   206d6:	2301      	movs	r3, #1
   206d8:	4093      	lsls	r3, r2
   206da:	60ab      	str	r3, [r5, #8]
   206dc:	4629      	mov	r1, r5
   206de:	f001 fa67 	bl	21bb0 <_Bfree>
   206e2:	2300      	movs	r3, #0
   206e4:	6423      	str	r3, [r4, #64]	; 0x40
   206e6:	e9dd 2300 	ldrd	r2, r3, [sp]
   206ea:	2b00      	cmp	r3, #0
   206ec:	4699      	mov	r9, r3
   206ee:	db38      	blt.n	20762 <_dtoa_r+0xaa>
   206f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   206f2:	2300      	movs	r3, #0
   206f4:	6013      	str	r3, [r2, #0]
   206f6:	4ba0      	ldr	r3, [pc, #640]	; (20978 <_dtoa_r+0x2c0>)
   206f8:	ea33 0309 	bics.w	r3, r3, r9
   206fc:	d017      	beq.n	2072e <_dtoa_r+0x76>
   206fe:	e9dd 6700 	ldrd	r6, r7, [sp]
   20702:	2200      	movs	r2, #0
   20704:	2300      	movs	r3, #0
   20706:	4630      	mov	r0, r6
   20708:	4639      	mov	r1, r7
   2070a:	f7fb fc57 	bl	1bfbc <__aeabi_dcmpeq>
   2070e:	4680      	mov	r8, r0
   20710:	2800      	cmp	r0, #0
   20712:	d02f      	beq.n	20774 <_dtoa_r+0xbc>
   20714:	9a03      	ldr	r2, [sp, #12]
   20716:	2301      	movs	r3, #1
   20718:	6013      	str	r3, [r2, #0]
   2071a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2071c:	2b00      	cmp	r3, #0
   2071e:	f000 80c4 	beq.w	208aa <_dtoa_r+0x1f2>
   20722:	4896      	ldr	r0, [pc, #600]	; (2097c <_dtoa_r+0x2c4>)
   20724:	6018      	str	r0, [r3, #0]
   20726:	3801      	subs	r0, #1
   20728:	b017      	add	sp, #92	; 0x5c
   2072a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2072e:	9a03      	ldr	r2, [sp, #12]
   20730:	f242 730f 	movw	r3, #9999	; 0x270f
   20734:	6013      	str	r3, [r2, #0]
   20736:	9b00      	ldr	r3, [sp, #0]
   20738:	b96b      	cbnz	r3, 20756 <_dtoa_r+0x9e>
   2073a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2073e:	b953      	cbnz	r3, 20756 <_dtoa_r+0x9e>
   20740:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20742:	488f      	ldr	r0, [pc, #572]	; (20980 <_dtoa_r+0x2c8>)
   20744:	2b00      	cmp	r3, #0
   20746:	d0ef      	beq.n	20728 <_dtoa_r+0x70>
   20748:	f100 0308 	add.w	r3, r0, #8
   2074c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   2074e:	6013      	str	r3, [r2, #0]
   20750:	b017      	add	sp, #92	; 0x5c
   20752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20756:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20758:	488a      	ldr	r0, [pc, #552]	; (20984 <_dtoa_r+0x2cc>)
   2075a:	2b00      	cmp	r3, #0
   2075c:	d0e4      	beq.n	20728 <_dtoa_r+0x70>
   2075e:	1cc3      	adds	r3, r0, #3
   20760:	e7f4      	b.n	2074c <_dtoa_r+0x94>
   20762:	9a01      	ldr	r2, [sp, #4]
   20764:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   20768:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2076a:	f8cd 9004 	str.w	r9, [sp, #4]
   2076e:	2301      	movs	r3, #1
   20770:	6013      	str	r3, [r2, #0]
   20772:	e7c0      	b.n	206f6 <_dtoa_r+0x3e>
   20774:	aa14      	add	r2, sp, #80	; 0x50
   20776:	a915      	add	r1, sp, #84	; 0x54
   20778:	ec47 6b10 	vmov	d0, r6, r7
   2077c:	4620      	mov	r0, r4
   2077e:	f001 fc8f 	bl	220a0 <__d2b>
   20782:	ea5f 5519 	movs.w	r5, r9, lsr #20
   20786:	4682      	mov	sl, r0
   20788:	d073      	beq.n	20872 <_dtoa_r+0x1ba>
   2078a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2078e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   20792:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   20796:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   2079a:	4630      	mov	r0, r6
   2079c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   207a0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   207a4:	2200      	movs	r2, #0
   207a6:	4b78      	ldr	r3, [pc, #480]	; (20988 <_dtoa_r+0x2d0>)
   207a8:	f7fa ffec 	bl	1b784 <__aeabi_dsub>
   207ac:	a36c      	add	r3, pc, #432	; (adr r3, 20960 <_dtoa_r+0x2a8>)
   207ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   207b2:	f7fb f99b 	bl	1baec <__aeabi_dmul>
   207b6:	a36c      	add	r3, pc, #432	; (adr r3, 20968 <_dtoa_r+0x2b0>)
   207b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   207bc:	f7fa ffe4 	bl	1b788 <__adddf3>
   207c0:	4606      	mov	r6, r0
   207c2:	4628      	mov	r0, r5
   207c4:	460f      	mov	r7, r1
   207c6:	f7fb f92b 	bl	1ba20 <__aeabi_i2d>
   207ca:	a369      	add	r3, pc, #420	; (adr r3, 20970 <_dtoa_r+0x2b8>)
   207cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   207d0:	f7fb f98c 	bl	1baec <__aeabi_dmul>
   207d4:	4602      	mov	r2, r0
   207d6:	460b      	mov	r3, r1
   207d8:	4630      	mov	r0, r6
   207da:	4639      	mov	r1, r7
   207dc:	f7fa ffd4 	bl	1b788 <__adddf3>
   207e0:	4606      	mov	r6, r0
   207e2:	460f      	mov	r7, r1
   207e4:	f7fb fc1c 	bl	1c020 <__aeabi_d2iz>
   207e8:	2200      	movs	r2, #0
   207ea:	9004      	str	r0, [sp, #16]
   207ec:	2300      	movs	r3, #0
   207ee:	4630      	mov	r0, r6
   207f0:	4639      	mov	r1, r7
   207f2:	f7fb fbed 	bl	1bfd0 <__aeabi_dcmplt>
   207f6:	2800      	cmp	r0, #0
   207f8:	f040 816f 	bne.w	20ada <_dtoa_r+0x422>
   207fc:	9e04      	ldr	r6, [sp, #16]
   207fe:	2e16      	cmp	r6, #22
   20800:	f200 8159 	bhi.w	20ab6 <_dtoa_r+0x3fe>
   20804:	4b61      	ldr	r3, [pc, #388]	; (2098c <_dtoa_r+0x2d4>)
   20806:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2080a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2080e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20812:	f7fb fbfb 	bl	1c00c <__aeabi_dcmpgt>
   20816:	2800      	cmp	r0, #0
   20818:	f000 81c4 	beq.w	20ba4 <_dtoa_r+0x4ec>
   2081c:	1e73      	subs	r3, r6, #1
   2081e:	9304      	str	r3, [sp, #16]
   20820:	2300      	movs	r3, #0
   20822:	930c      	str	r3, [sp, #48]	; 0x30
   20824:	eba8 0505 	sub.w	r5, r8, r5
   20828:	1e6b      	subs	r3, r5, #1
   2082a:	9305      	str	r3, [sp, #20]
   2082c:	f100 814f 	bmi.w	20ace <_dtoa_r+0x416>
   20830:	2300      	movs	r3, #0
   20832:	9306      	str	r3, [sp, #24]
   20834:	9b04      	ldr	r3, [sp, #16]
   20836:	2b00      	cmp	r3, #0
   20838:	f2c0 8140 	blt.w	20abc <_dtoa_r+0x404>
   2083c:	9a05      	ldr	r2, [sp, #20]
   2083e:	930b      	str	r3, [sp, #44]	; 0x2c
   20840:	4611      	mov	r1, r2
   20842:	4419      	add	r1, r3
   20844:	2300      	movs	r3, #0
   20846:	9105      	str	r1, [sp, #20]
   20848:	930a      	str	r3, [sp, #40]	; 0x28
   2084a:	9b02      	ldr	r3, [sp, #8]
   2084c:	2b09      	cmp	r3, #9
   2084e:	d82e      	bhi.n	208ae <_dtoa_r+0x1f6>
   20850:	2b05      	cmp	r3, #5
   20852:	f340 8651 	ble.w	214f8 <_dtoa_r+0xe40>
   20856:	3b04      	subs	r3, #4
   20858:	9302      	str	r3, [sp, #8]
   2085a:	2700      	movs	r7, #0
   2085c:	9b02      	ldr	r3, [sp, #8]
   2085e:	3b02      	subs	r3, #2
   20860:	2b03      	cmp	r3, #3
   20862:	f200 8633 	bhi.w	214cc <_dtoa_r+0xe14>
   20866:	e8df f013 	tbh	[pc, r3, lsl #1]
   2086a:	03d6      	.short	0x03d6
   2086c:	03e302cb 	.word	0x03e302cb
   20870:	0464      	.short	0x0464
   20872:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   20876:	9d15      	ldr	r5, [sp, #84]	; 0x54
   20878:	4445      	add	r5, r8
   2087a:	f205 4332 	addw	r3, r5, #1074	; 0x432
   2087e:	2b20      	cmp	r3, #32
   20880:	f340 818a 	ble.w	20b98 <_dtoa_r+0x4e0>
   20884:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   20888:	fa09 f903 	lsl.w	r9, r9, r3
   2088c:	9b00      	ldr	r3, [sp, #0]
   2088e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   20892:	fa23 f000 	lsr.w	r0, r3, r0
   20896:	ea40 0009 	orr.w	r0, r0, r9
   2089a:	f7fb f8b1 	bl	1ba00 <__aeabi_ui2d>
   2089e:	2301      	movs	r3, #1
   208a0:	3d01      	subs	r5, #1
   208a2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   208a6:	9310      	str	r3, [sp, #64]	; 0x40
   208a8:	e77c      	b.n	207a4 <_dtoa_r+0xec>
   208aa:	4839      	ldr	r0, [pc, #228]	; (20990 <_dtoa_r+0x2d8>)
   208ac:	e73c      	b.n	20728 <_dtoa_r+0x70>
   208ae:	2100      	movs	r1, #0
   208b0:	6461      	str	r1, [r4, #68]	; 0x44
   208b2:	4620      	mov	r0, r4
   208b4:	468b      	mov	fp, r1
   208b6:	f001 f955 	bl	21b64 <_Balloc>
   208ba:	f04f 33ff 	mov.w	r3, #4294967295
   208be:	9308      	str	r3, [sp, #32]
   208c0:	930d      	str	r3, [sp, #52]	; 0x34
   208c2:	2301      	movs	r3, #1
   208c4:	9007      	str	r0, [sp, #28]
   208c6:	6420      	str	r0, [r4, #64]	; 0x40
   208c8:	f8cd b008 	str.w	fp, [sp, #8]
   208cc:	9309      	str	r3, [sp, #36]	; 0x24
   208ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   208d0:	2b00      	cmp	r3, #0
   208d2:	f2c0 80d0 	blt.w	20a76 <_dtoa_r+0x3be>
   208d6:	9a04      	ldr	r2, [sp, #16]
   208d8:	2a0e      	cmp	r2, #14
   208da:	f300 80cc 	bgt.w	20a76 <_dtoa_r+0x3be>
   208de:	4b2b      	ldr	r3, [pc, #172]	; (2098c <_dtoa_r+0x2d4>)
   208e0:	f1bb 0f00 	cmp.w	fp, #0
   208e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   208e8:	e9d3 8900 	ldrd	r8, r9, [r3]
   208ec:	f2c0 83be 	blt.w	2106c <_dtoa_r+0x9b4>
   208f0:	e9dd 6700 	ldrd	r6, r7, [sp]
   208f4:	4642      	mov	r2, r8
   208f6:	464b      	mov	r3, r9
   208f8:	4630      	mov	r0, r6
   208fa:	4639      	mov	r1, r7
   208fc:	f7fb fa20 	bl	1bd40 <__aeabi_ddiv>
   20900:	f7fb fb8e 	bl	1c020 <__aeabi_d2iz>
   20904:	4683      	mov	fp, r0
   20906:	f7fb f88b 	bl	1ba20 <__aeabi_i2d>
   2090a:	4642      	mov	r2, r8
   2090c:	464b      	mov	r3, r9
   2090e:	f7fb f8ed 	bl	1baec <__aeabi_dmul>
   20912:	460b      	mov	r3, r1
   20914:	4602      	mov	r2, r0
   20916:	4639      	mov	r1, r7
   20918:	4630      	mov	r0, r6
   2091a:	f7fa ff33 	bl	1b784 <__aeabi_dsub>
   2091e:	9d07      	ldr	r5, [sp, #28]
   20920:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   20924:	702b      	strb	r3, [r5, #0]
   20926:	9b08      	ldr	r3, [sp, #32]
   20928:	2b01      	cmp	r3, #1
   2092a:	4606      	mov	r6, r0
   2092c:	460f      	mov	r7, r1
   2092e:	f105 0501 	add.w	r5, r5, #1
   20932:	d061      	beq.n	209f8 <_dtoa_r+0x340>
   20934:	2200      	movs	r2, #0
   20936:	4b17      	ldr	r3, [pc, #92]	; (20994 <_dtoa_r+0x2dc>)
   20938:	f7fb f8d8 	bl	1baec <__aeabi_dmul>
   2093c:	2200      	movs	r2, #0
   2093e:	2300      	movs	r3, #0
   20940:	4606      	mov	r6, r0
   20942:	460f      	mov	r7, r1
   20944:	f7fb fb3a 	bl	1bfbc <__aeabi_dcmpeq>
   20948:	2800      	cmp	r0, #0
   2094a:	f040 8081 	bne.w	20a50 <_dtoa_r+0x398>
   2094e:	f8cd a000 	str.w	sl, [sp]
   20952:	9402      	str	r4, [sp, #8]
   20954:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20958:	9c08      	ldr	r4, [sp, #32]
   2095a:	e028      	b.n	209ae <_dtoa_r+0x2f6>
   2095c:	f3af 8000 	nop.w
   20960:	636f4361 	.word	0x636f4361
   20964:	3fd287a7 	.word	0x3fd287a7
   20968:	8b60c8b3 	.word	0x8b60c8b3
   2096c:	3fc68a28 	.word	0x3fc68a28
   20970:	509f79fb 	.word	0x509f79fb
   20974:	3fd34413 	.word	0x3fd34413
   20978:	7ff00000 	.word	0x7ff00000
   2097c:	00024bf1 	.word	0x00024bf1
   20980:	00024d40 	.word	0x00024d40
   20984:	00024d4c 	.word	0x00024d4c
   20988:	3ff80000 	.word	0x3ff80000
   2098c:	00024d78 	.word	0x00024d78
   20990:	00024bf0 	.word	0x00024bf0
   20994:	40240000 	.word	0x40240000
   20998:	f7fb f8a8 	bl	1baec <__aeabi_dmul>
   2099c:	2200      	movs	r2, #0
   2099e:	2300      	movs	r3, #0
   209a0:	4606      	mov	r6, r0
   209a2:	460f      	mov	r7, r1
   209a4:	f7fb fb0a 	bl	1bfbc <__aeabi_dcmpeq>
   209a8:	2800      	cmp	r0, #0
   209aa:	f040 83c5 	bne.w	21138 <_dtoa_r+0xa80>
   209ae:	4642      	mov	r2, r8
   209b0:	464b      	mov	r3, r9
   209b2:	4630      	mov	r0, r6
   209b4:	4639      	mov	r1, r7
   209b6:	f7fb f9c3 	bl	1bd40 <__aeabi_ddiv>
   209ba:	f7fb fb31 	bl	1c020 <__aeabi_d2iz>
   209be:	4683      	mov	fp, r0
   209c0:	f7fb f82e 	bl	1ba20 <__aeabi_i2d>
   209c4:	4642      	mov	r2, r8
   209c6:	464b      	mov	r3, r9
   209c8:	f7fb f890 	bl	1baec <__aeabi_dmul>
   209cc:	4602      	mov	r2, r0
   209ce:	460b      	mov	r3, r1
   209d0:	4630      	mov	r0, r6
   209d2:	4639      	mov	r1, r7
   209d4:	f7fa fed6 	bl	1b784 <__aeabi_dsub>
   209d8:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   209dc:	f805 eb01 	strb.w	lr, [r5], #1
   209e0:	eba5 0e0a 	sub.w	lr, r5, sl
   209e4:	45a6      	cmp	lr, r4
   209e6:	4606      	mov	r6, r0
   209e8:	460f      	mov	r7, r1
   209ea:	f04f 0200 	mov.w	r2, #0
   209ee:	4b6e      	ldr	r3, [pc, #440]	; (20ba8 <_dtoa_r+0x4f0>)
   209f0:	d1d2      	bne.n	20998 <_dtoa_r+0x2e0>
   209f2:	f8dd a000 	ldr.w	sl, [sp]
   209f6:	9c02      	ldr	r4, [sp, #8]
   209f8:	4632      	mov	r2, r6
   209fa:	463b      	mov	r3, r7
   209fc:	4630      	mov	r0, r6
   209fe:	4639      	mov	r1, r7
   20a00:	f7fa fec2 	bl	1b788 <__adddf3>
   20a04:	4606      	mov	r6, r0
   20a06:	460f      	mov	r7, r1
   20a08:	4602      	mov	r2, r0
   20a0a:	460b      	mov	r3, r1
   20a0c:	4640      	mov	r0, r8
   20a0e:	4649      	mov	r1, r9
   20a10:	f7fb fade 	bl	1bfd0 <__aeabi_dcmplt>
   20a14:	b948      	cbnz	r0, 20a2a <_dtoa_r+0x372>
   20a16:	4632      	mov	r2, r6
   20a18:	463b      	mov	r3, r7
   20a1a:	4640      	mov	r0, r8
   20a1c:	4649      	mov	r1, r9
   20a1e:	f7fb facd 	bl	1bfbc <__aeabi_dcmpeq>
   20a22:	b1a8      	cbz	r0, 20a50 <_dtoa_r+0x398>
   20a24:	f01b 0f01 	tst.w	fp, #1
   20a28:	d012      	beq.n	20a50 <_dtoa_r+0x398>
   20a2a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   20a2e:	9a07      	ldr	r2, [sp, #28]
   20a30:	1e6b      	subs	r3, r5, #1
   20a32:	e004      	b.n	20a3e <_dtoa_r+0x386>
   20a34:	429a      	cmp	r2, r3
   20a36:	f000 842d 	beq.w	21294 <_dtoa_r+0xbdc>
   20a3a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   20a3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   20a42:	f103 0501 	add.w	r5, r3, #1
   20a46:	d0f5      	beq.n	20a34 <_dtoa_r+0x37c>
   20a48:	f108 0801 	add.w	r8, r8, #1
   20a4c:	f883 8000 	strb.w	r8, [r3]
   20a50:	4651      	mov	r1, sl
   20a52:	4620      	mov	r0, r4
   20a54:	f001 f8ac 	bl	21bb0 <_Bfree>
   20a58:	2200      	movs	r2, #0
   20a5a:	9b04      	ldr	r3, [sp, #16]
   20a5c:	702a      	strb	r2, [r5, #0]
   20a5e:	9a03      	ldr	r2, [sp, #12]
   20a60:	3301      	adds	r3, #1
   20a62:	6013      	str	r3, [r2, #0]
   20a64:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20a66:	2b00      	cmp	r3, #0
   20a68:	f000 83a3 	beq.w	211b2 <_dtoa_r+0xafa>
   20a6c:	9807      	ldr	r0, [sp, #28]
   20a6e:	601d      	str	r5, [r3, #0]
   20a70:	b017      	add	sp, #92	; 0x5c
   20a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20a78:	2a00      	cmp	r2, #0
   20a7a:	d040      	beq.n	20afe <_dtoa_r+0x446>
   20a7c:	9a02      	ldr	r2, [sp, #8]
   20a7e:	2a01      	cmp	r2, #1
   20a80:	f340 831c 	ble.w	210bc <_dtoa_r+0xa04>
   20a84:	9b08      	ldr	r3, [sp, #32]
   20a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20a88:	1e5f      	subs	r7, r3, #1
   20a8a:	42ba      	cmp	r2, r7
   20a8c:	f2c0 8394 	blt.w	211b8 <_dtoa_r+0xb00>
   20a90:	1bd7      	subs	r7, r2, r7
   20a92:	9b08      	ldr	r3, [sp, #32]
   20a94:	2b00      	cmp	r3, #0
   20a96:	f2c0 847e 	blt.w	21396 <_dtoa_r+0xcde>
   20a9a:	9d06      	ldr	r5, [sp, #24]
   20a9c:	9b08      	ldr	r3, [sp, #32]
   20a9e:	9a06      	ldr	r2, [sp, #24]
   20aa0:	441a      	add	r2, r3
   20aa2:	9206      	str	r2, [sp, #24]
   20aa4:	9a05      	ldr	r2, [sp, #20]
   20aa6:	2101      	movs	r1, #1
   20aa8:	441a      	add	r2, r3
   20aaa:	4620      	mov	r0, r4
   20aac:	9205      	str	r2, [sp, #20]
   20aae:	f001 f919 	bl	21ce4 <__i2b>
   20ab2:	4606      	mov	r6, r0
   20ab4:	e026      	b.n	20b04 <_dtoa_r+0x44c>
   20ab6:	2301      	movs	r3, #1
   20ab8:	930c      	str	r3, [sp, #48]	; 0x30
   20aba:	e6b3      	b.n	20824 <_dtoa_r+0x16c>
   20abc:	9a06      	ldr	r2, [sp, #24]
   20abe:	9b04      	ldr	r3, [sp, #16]
   20ac0:	1ad2      	subs	r2, r2, r3
   20ac2:	425b      	negs	r3, r3
   20ac4:	930a      	str	r3, [sp, #40]	; 0x28
   20ac6:	2300      	movs	r3, #0
   20ac8:	9206      	str	r2, [sp, #24]
   20aca:	930b      	str	r3, [sp, #44]	; 0x2c
   20acc:	e6bd      	b.n	2084a <_dtoa_r+0x192>
   20ace:	f1c5 0301 	rsb	r3, r5, #1
   20ad2:	9306      	str	r3, [sp, #24]
   20ad4:	2300      	movs	r3, #0
   20ad6:	9305      	str	r3, [sp, #20]
   20ad8:	e6ac      	b.n	20834 <_dtoa_r+0x17c>
   20ada:	f8dd 9010 	ldr.w	r9, [sp, #16]
   20ade:	4648      	mov	r0, r9
   20ae0:	f7fa ff9e 	bl	1ba20 <__aeabi_i2d>
   20ae4:	4602      	mov	r2, r0
   20ae6:	460b      	mov	r3, r1
   20ae8:	4630      	mov	r0, r6
   20aea:	4639      	mov	r1, r7
   20aec:	f7fb fa66 	bl	1bfbc <__aeabi_dcmpeq>
   20af0:	2800      	cmp	r0, #0
   20af2:	f47f ae83 	bne.w	207fc <_dtoa_r+0x144>
   20af6:	f109 33ff 	add.w	r3, r9, #4294967295
   20afa:	9304      	str	r3, [sp, #16]
   20afc:	e67e      	b.n	207fc <_dtoa_r+0x144>
   20afe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20b00:	9d06      	ldr	r5, [sp, #24]
   20b02:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20b04:	2d00      	cmp	r5, #0
   20b06:	dd0c      	ble.n	20b22 <_dtoa_r+0x46a>
   20b08:	9905      	ldr	r1, [sp, #20]
   20b0a:	2900      	cmp	r1, #0
   20b0c:	460b      	mov	r3, r1
   20b0e:	dd08      	ble.n	20b22 <_dtoa_r+0x46a>
   20b10:	42a9      	cmp	r1, r5
   20b12:	9a06      	ldr	r2, [sp, #24]
   20b14:	bfa8      	it	ge
   20b16:	462b      	movge	r3, r5
   20b18:	1ad2      	subs	r2, r2, r3
   20b1a:	1aed      	subs	r5, r5, r3
   20b1c:	1acb      	subs	r3, r1, r3
   20b1e:	9206      	str	r2, [sp, #24]
   20b20:	9305      	str	r3, [sp, #20]
   20b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20b24:	b1d3      	cbz	r3, 20b5c <_dtoa_r+0x4a4>
   20b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20b28:	2b00      	cmp	r3, #0
   20b2a:	f000 82c0 	beq.w	210ae <_dtoa_r+0x9f6>
   20b2e:	2f00      	cmp	r7, #0
   20b30:	dd10      	ble.n	20b54 <_dtoa_r+0x49c>
   20b32:	4631      	mov	r1, r6
   20b34:	463a      	mov	r2, r7
   20b36:	4620      	mov	r0, r4
   20b38:	f001 f970 	bl	21e1c <__pow5mult>
   20b3c:	4652      	mov	r2, sl
   20b3e:	4601      	mov	r1, r0
   20b40:	4606      	mov	r6, r0
   20b42:	4620      	mov	r0, r4
   20b44:	f001 f8d8 	bl	21cf8 <__multiply>
   20b48:	4651      	mov	r1, sl
   20b4a:	4680      	mov	r8, r0
   20b4c:	4620      	mov	r0, r4
   20b4e:	f001 f82f 	bl	21bb0 <_Bfree>
   20b52:	46c2      	mov	sl, r8
   20b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20b56:	1bda      	subs	r2, r3, r7
   20b58:	f040 82aa 	bne.w	210b0 <_dtoa_r+0x9f8>
   20b5c:	2101      	movs	r1, #1
   20b5e:	4620      	mov	r0, r4
   20b60:	f001 f8c0 	bl	21ce4 <__i2b>
   20b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20b66:	2b00      	cmp	r3, #0
   20b68:	4681      	mov	r9, r0
   20b6a:	dd1f      	ble.n	20bac <_dtoa_r+0x4f4>
   20b6c:	4601      	mov	r1, r0
   20b6e:	461a      	mov	r2, r3
   20b70:	4620      	mov	r0, r4
   20b72:	f001 f953 	bl	21e1c <__pow5mult>
   20b76:	9b02      	ldr	r3, [sp, #8]
   20b78:	2b01      	cmp	r3, #1
   20b7a:	4681      	mov	r9, r0
   20b7c:	f340 825b 	ble.w	21036 <_dtoa_r+0x97e>
   20b80:	f04f 0800 	mov.w	r8, #0
   20b84:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20b88:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   20b8c:	6918      	ldr	r0, [r3, #16]
   20b8e:	f001 f859 	bl	21c44 <__hi0bits>
   20b92:	f1c0 0020 	rsb	r0, r0, #32
   20b96:	e013      	b.n	20bc0 <_dtoa_r+0x508>
   20b98:	f1c3 0920 	rsb	r9, r3, #32
   20b9c:	9b00      	ldr	r3, [sp, #0]
   20b9e:	fa03 f009 	lsl.w	r0, r3, r9
   20ba2:	e67a      	b.n	2089a <_dtoa_r+0x1e2>
   20ba4:	900c      	str	r0, [sp, #48]	; 0x30
   20ba6:	e63d      	b.n	20824 <_dtoa_r+0x16c>
   20ba8:	40240000 	.word	0x40240000
   20bac:	9b02      	ldr	r3, [sp, #8]
   20bae:	2b01      	cmp	r3, #1
   20bb0:	f340 828d 	ble.w	210ce <_dtoa_r+0xa16>
   20bb4:	f04f 0800 	mov.w	r8, #0
   20bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20bba:	2001      	movs	r0, #1
   20bbc:	2b00      	cmp	r3, #0
   20bbe:	d1e1      	bne.n	20b84 <_dtoa_r+0x4cc>
   20bc0:	9a05      	ldr	r2, [sp, #20]
   20bc2:	4410      	add	r0, r2
   20bc4:	f010 001f 	ands.w	r0, r0, #31
   20bc8:	f000 80a1 	beq.w	20d0e <_dtoa_r+0x656>
   20bcc:	f1c0 0320 	rsb	r3, r0, #32
   20bd0:	2b04      	cmp	r3, #4
   20bd2:	f340 848c 	ble.w	214ee <_dtoa_r+0xe36>
   20bd6:	9b06      	ldr	r3, [sp, #24]
   20bd8:	f1c0 001c 	rsb	r0, r0, #28
   20bdc:	4403      	add	r3, r0
   20bde:	9306      	str	r3, [sp, #24]
   20be0:	4613      	mov	r3, r2
   20be2:	4403      	add	r3, r0
   20be4:	4405      	add	r5, r0
   20be6:	9305      	str	r3, [sp, #20]
   20be8:	9b06      	ldr	r3, [sp, #24]
   20bea:	2b00      	cmp	r3, #0
   20bec:	dd05      	ble.n	20bfa <_dtoa_r+0x542>
   20bee:	4651      	mov	r1, sl
   20bf0:	461a      	mov	r2, r3
   20bf2:	4620      	mov	r0, r4
   20bf4:	f001 f962 	bl	21ebc <__lshift>
   20bf8:	4682      	mov	sl, r0
   20bfa:	9b05      	ldr	r3, [sp, #20]
   20bfc:	2b00      	cmp	r3, #0
   20bfe:	dd05      	ble.n	20c0c <_dtoa_r+0x554>
   20c00:	4649      	mov	r1, r9
   20c02:	461a      	mov	r2, r3
   20c04:	4620      	mov	r0, r4
   20c06:	f001 f959 	bl	21ebc <__lshift>
   20c0a:	4681      	mov	r9, r0
   20c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20c0e:	2b00      	cmp	r3, #0
   20c10:	f040 8086 	bne.w	20d20 <_dtoa_r+0x668>
   20c14:	9b08      	ldr	r3, [sp, #32]
   20c16:	2b00      	cmp	r3, #0
   20c18:	f340 8269 	ble.w	210ee <_dtoa_r+0xa36>
   20c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c1e:	2b00      	cmp	r3, #0
   20c20:	f000 8098 	beq.w	20d54 <_dtoa_r+0x69c>
   20c24:	2d00      	cmp	r5, #0
   20c26:	dd05      	ble.n	20c34 <_dtoa_r+0x57c>
   20c28:	4631      	mov	r1, r6
   20c2a:	462a      	mov	r2, r5
   20c2c:	4620      	mov	r0, r4
   20c2e:	f001 f945 	bl	21ebc <__lshift>
   20c32:	4606      	mov	r6, r0
   20c34:	f1b8 0f00 	cmp.w	r8, #0
   20c38:	f040 8336 	bne.w	212a8 <_dtoa_r+0xbf0>
   20c3c:	46b0      	mov	r8, r6
   20c3e:	9b08      	ldr	r3, [sp, #32]
   20c40:	9a07      	ldr	r2, [sp, #28]
   20c42:	3b01      	subs	r3, #1
   20c44:	18d3      	adds	r3, r2, r3
   20c46:	9308      	str	r3, [sp, #32]
   20c48:	9b00      	ldr	r3, [sp, #0]
   20c4a:	f003 0301 	and.w	r3, r3, #1
   20c4e:	9309      	str	r3, [sp, #36]	; 0x24
   20c50:	4617      	mov	r7, r2
   20c52:	4649      	mov	r1, r9
   20c54:	4650      	mov	r0, sl
   20c56:	f7ff fc9b 	bl	20590 <quorem>
   20c5a:	4631      	mov	r1, r6
   20c5c:	4605      	mov	r5, r0
   20c5e:	4650      	mov	r0, sl
   20c60:	f001 f97e 	bl	21f60 <__mcmp>
   20c64:	4642      	mov	r2, r8
   20c66:	4649      	mov	r1, r9
   20c68:	4683      	mov	fp, r0
   20c6a:	4620      	mov	r0, r4
   20c6c:	f001 f994 	bl	21f98 <__mdiff>
   20c70:	f105 0230 	add.w	r2, r5, #48	; 0x30
   20c74:	9200      	str	r2, [sp, #0]
   20c76:	68c2      	ldr	r2, [r0, #12]
   20c78:	4601      	mov	r1, r0
   20c7a:	2a00      	cmp	r2, #0
   20c7c:	f040 8232 	bne.w	210e4 <_dtoa_r+0xa2c>
   20c80:	9006      	str	r0, [sp, #24]
   20c82:	4650      	mov	r0, sl
   20c84:	f001 f96c 	bl	21f60 <__mcmp>
   20c88:	9b06      	ldr	r3, [sp, #24]
   20c8a:	9005      	str	r0, [sp, #20]
   20c8c:	4619      	mov	r1, r3
   20c8e:	4620      	mov	r0, r4
   20c90:	f000 ff8e 	bl	21bb0 <_Bfree>
   20c94:	9a05      	ldr	r2, [sp, #20]
   20c96:	b932      	cbnz	r2, 20ca6 <_dtoa_r+0x5ee>
   20c98:	9b02      	ldr	r3, [sp, #8]
   20c9a:	b923      	cbnz	r3, 20ca6 <_dtoa_r+0x5ee>
   20c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c9e:	2b00      	cmp	r3, #0
   20ca0:	f000 83de 	beq.w	21460 <_dtoa_r+0xda8>
   20ca4:	9a02      	ldr	r2, [sp, #8]
   20ca6:	f1bb 0f00 	cmp.w	fp, #0
   20caa:	f2c0 82a2 	blt.w	211f2 <_dtoa_r+0xb3a>
   20cae:	d105      	bne.n	20cbc <_dtoa_r+0x604>
   20cb0:	9b02      	ldr	r3, [sp, #8]
   20cb2:	b91b      	cbnz	r3, 20cbc <_dtoa_r+0x604>
   20cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20cb6:	2b00      	cmp	r3, #0
   20cb8:	f000 829b 	beq.w	211f2 <_dtoa_r+0xb3a>
   20cbc:	2a00      	cmp	r2, #0
   20cbe:	f300 8307 	bgt.w	212d0 <_dtoa_r+0xc18>
   20cc2:	f89d 3000 	ldrb.w	r3, [sp]
   20cc6:	703b      	strb	r3, [r7, #0]
   20cc8:	9b08      	ldr	r3, [sp, #32]
   20cca:	f107 0b01 	add.w	fp, r7, #1
   20cce:	429f      	cmp	r7, r3
   20cd0:	465d      	mov	r5, fp
   20cd2:	f000 8308 	beq.w	212e6 <_dtoa_r+0xc2e>
   20cd6:	4651      	mov	r1, sl
   20cd8:	2300      	movs	r3, #0
   20cda:	220a      	movs	r2, #10
   20cdc:	4620      	mov	r0, r4
   20cde:	f000 ff71 	bl	21bc4 <__multadd>
   20ce2:	4546      	cmp	r6, r8
   20ce4:	4682      	mov	sl, r0
   20ce6:	4631      	mov	r1, r6
   20ce8:	f04f 0300 	mov.w	r3, #0
   20cec:	f04f 020a 	mov.w	r2, #10
   20cf0:	4620      	mov	r0, r4
   20cf2:	f000 81f1 	beq.w	210d8 <_dtoa_r+0xa20>
   20cf6:	f000 ff65 	bl	21bc4 <__multadd>
   20cfa:	4641      	mov	r1, r8
   20cfc:	4606      	mov	r6, r0
   20cfe:	2300      	movs	r3, #0
   20d00:	220a      	movs	r2, #10
   20d02:	4620      	mov	r0, r4
   20d04:	f000 ff5e 	bl	21bc4 <__multadd>
   20d08:	465f      	mov	r7, fp
   20d0a:	4680      	mov	r8, r0
   20d0c:	e7a1      	b.n	20c52 <_dtoa_r+0x59a>
   20d0e:	201c      	movs	r0, #28
   20d10:	9b06      	ldr	r3, [sp, #24]
   20d12:	4403      	add	r3, r0
   20d14:	9306      	str	r3, [sp, #24]
   20d16:	9b05      	ldr	r3, [sp, #20]
   20d18:	4403      	add	r3, r0
   20d1a:	4405      	add	r5, r0
   20d1c:	9305      	str	r3, [sp, #20]
   20d1e:	e763      	b.n	20be8 <_dtoa_r+0x530>
   20d20:	4649      	mov	r1, r9
   20d22:	4650      	mov	r0, sl
   20d24:	f001 f91c 	bl	21f60 <__mcmp>
   20d28:	2800      	cmp	r0, #0
   20d2a:	f6bf af73 	bge.w	20c14 <_dtoa_r+0x55c>
   20d2e:	9f04      	ldr	r7, [sp, #16]
   20d30:	4651      	mov	r1, sl
   20d32:	2300      	movs	r3, #0
   20d34:	220a      	movs	r2, #10
   20d36:	4620      	mov	r0, r4
   20d38:	3f01      	subs	r7, #1
   20d3a:	9704      	str	r7, [sp, #16]
   20d3c:	f000 ff42 	bl	21bc4 <__multadd>
   20d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20d42:	4682      	mov	sl, r0
   20d44:	2b00      	cmp	r3, #0
   20d46:	f040 83a7 	bne.w	21498 <_dtoa_r+0xde0>
   20d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20d4c:	2b00      	cmp	r3, #0
   20d4e:	f340 83b0 	ble.w	214b2 <_dtoa_r+0xdfa>
   20d52:	9308      	str	r3, [sp, #32]
   20d54:	f8dd b01c 	ldr.w	fp, [sp, #28]
   20d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20d5c:	465d      	mov	r5, fp
   20d5e:	e002      	b.n	20d66 <_dtoa_r+0x6ae>
   20d60:	f000 ff30 	bl	21bc4 <__multadd>
   20d64:	4682      	mov	sl, r0
   20d66:	4649      	mov	r1, r9
   20d68:	4650      	mov	r0, sl
   20d6a:	f7ff fc11 	bl	20590 <quorem>
   20d6e:	f100 0730 	add.w	r7, r0, #48	; 0x30
   20d72:	f805 7b01 	strb.w	r7, [r5], #1
   20d76:	eba5 030b 	sub.w	r3, r5, fp
   20d7a:	4543      	cmp	r3, r8
   20d7c:	f04f 020a 	mov.w	r2, #10
   20d80:	f04f 0300 	mov.w	r3, #0
   20d84:	4651      	mov	r1, sl
   20d86:	4620      	mov	r0, r4
   20d88:	dbea      	blt.n	20d60 <_dtoa_r+0x6a8>
   20d8a:	9b07      	ldr	r3, [sp, #28]
   20d8c:	9a08      	ldr	r2, [sp, #32]
   20d8e:	9700      	str	r7, [sp, #0]
   20d90:	2a01      	cmp	r2, #1
   20d92:	bfac      	ite	ge
   20d94:	189b      	addge	r3, r3, r2
   20d96:	3301      	addlt	r3, #1
   20d98:	461d      	mov	r5, r3
   20d9a:	f04f 0b00 	mov.w	fp, #0
   20d9e:	4651      	mov	r1, sl
   20da0:	2201      	movs	r2, #1
   20da2:	4620      	mov	r0, r4
   20da4:	f001 f88a 	bl	21ebc <__lshift>
   20da8:	4649      	mov	r1, r9
   20daa:	4682      	mov	sl, r0
   20dac:	f001 f8d8 	bl	21f60 <__mcmp>
   20db0:	2800      	cmp	r0, #0
   20db2:	f340 823a 	ble.w	2122a <_dtoa_r+0xb72>
   20db6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20dba:	9907      	ldr	r1, [sp, #28]
   20dbc:	1e6b      	subs	r3, r5, #1
   20dbe:	e004      	b.n	20dca <_dtoa_r+0x712>
   20dc0:	428b      	cmp	r3, r1
   20dc2:	f000 81af 	beq.w	21124 <_dtoa_r+0xa6c>
   20dc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20dca:	2a39      	cmp	r2, #57	; 0x39
   20dcc:	f103 0501 	add.w	r5, r3, #1
   20dd0:	d0f6      	beq.n	20dc0 <_dtoa_r+0x708>
   20dd2:	3201      	adds	r2, #1
   20dd4:	701a      	strb	r2, [r3, #0]
   20dd6:	4649      	mov	r1, r9
   20dd8:	4620      	mov	r0, r4
   20dda:	f000 fee9 	bl	21bb0 <_Bfree>
   20dde:	2e00      	cmp	r6, #0
   20de0:	f43f ae36 	beq.w	20a50 <_dtoa_r+0x398>
   20de4:	f1bb 0f00 	cmp.w	fp, #0
   20de8:	d005      	beq.n	20df6 <_dtoa_r+0x73e>
   20dea:	45b3      	cmp	fp, r6
   20dec:	d003      	beq.n	20df6 <_dtoa_r+0x73e>
   20dee:	4659      	mov	r1, fp
   20df0:	4620      	mov	r0, r4
   20df2:	f000 fedd 	bl	21bb0 <_Bfree>
   20df6:	4631      	mov	r1, r6
   20df8:	4620      	mov	r0, r4
   20dfa:	f000 fed9 	bl	21bb0 <_Bfree>
   20dfe:	e627      	b.n	20a50 <_dtoa_r+0x398>
   20e00:	2300      	movs	r3, #0
   20e02:	9309      	str	r3, [sp, #36]	; 0x24
   20e04:	9b04      	ldr	r3, [sp, #16]
   20e06:	445b      	add	r3, fp
   20e08:	930d      	str	r3, [sp, #52]	; 0x34
   20e0a:	3301      	adds	r3, #1
   20e0c:	2b01      	cmp	r3, #1
   20e0e:	461e      	mov	r6, r3
   20e10:	461d      	mov	r5, r3
   20e12:	9308      	str	r3, [sp, #32]
   20e14:	bfb8      	it	lt
   20e16:	2601      	movlt	r6, #1
   20e18:	2100      	movs	r1, #0
   20e1a:	2e17      	cmp	r6, #23
   20e1c:	6461      	str	r1, [r4, #68]	; 0x44
   20e1e:	d90a      	bls.n	20e36 <_dtoa_r+0x77e>
   20e20:	2201      	movs	r2, #1
   20e22:	2304      	movs	r3, #4
   20e24:	005b      	lsls	r3, r3, #1
   20e26:	f103 0014 	add.w	r0, r3, #20
   20e2a:	4286      	cmp	r6, r0
   20e2c:	4611      	mov	r1, r2
   20e2e:	f102 0201 	add.w	r2, r2, #1
   20e32:	d2f7      	bcs.n	20e24 <_dtoa_r+0x76c>
   20e34:	6461      	str	r1, [r4, #68]	; 0x44
   20e36:	4620      	mov	r0, r4
   20e38:	f000 fe94 	bl	21b64 <_Balloc>
   20e3c:	2d0e      	cmp	r5, #14
   20e3e:	9007      	str	r0, [sp, #28]
   20e40:	6420      	str	r0, [r4, #64]	; 0x40
   20e42:	f63f ad44 	bhi.w	208ce <_dtoa_r+0x216>
   20e46:	2f00      	cmp	r7, #0
   20e48:	f43f ad41 	beq.w	208ce <_dtoa_r+0x216>
   20e4c:	9904      	ldr	r1, [sp, #16]
   20e4e:	2900      	cmp	r1, #0
   20e50:	ed9d 7b00 	vldr	d7, [sp]
   20e54:	f340 81f6 	ble.w	21244 <_dtoa_r+0xb8c>
   20e58:	4bb9      	ldr	r3, [pc, #740]	; (21140 <_dtoa_r+0xa88>)
   20e5a:	f001 020f 	and.w	r2, r1, #15
   20e5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20e62:	110d      	asrs	r5, r1, #4
   20e64:	e9d3 6700 	ldrd	r6, r7, [r3]
   20e68:	06eb      	lsls	r3, r5, #27
   20e6a:	f140 81ad 	bpl.w	211c8 <_dtoa_r+0xb10>
   20e6e:	4bb5      	ldr	r3, [pc, #724]	; (21144 <_dtoa_r+0xa8c>)
   20e70:	ec51 0b17 	vmov	r0, r1, d7
   20e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20e78:	f7fa ff62 	bl	1bd40 <__aeabi_ddiv>
   20e7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20e80:	f005 050f 	and.w	r5, r5, #15
   20e84:	f04f 0903 	mov.w	r9, #3
   20e88:	b18d      	cbz	r5, 20eae <_dtoa_r+0x7f6>
   20e8a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 21144 <_dtoa_r+0xa8c>
   20e8e:	07e8      	lsls	r0, r5, #31
   20e90:	d509      	bpl.n	20ea6 <_dtoa_r+0x7ee>
   20e92:	4630      	mov	r0, r6
   20e94:	4639      	mov	r1, r7
   20e96:	e9d8 2300 	ldrd	r2, r3, [r8]
   20e9a:	f7fa fe27 	bl	1baec <__aeabi_dmul>
   20e9e:	f109 0901 	add.w	r9, r9, #1
   20ea2:	4606      	mov	r6, r0
   20ea4:	460f      	mov	r7, r1
   20ea6:	106d      	asrs	r5, r5, #1
   20ea8:	f108 0808 	add.w	r8, r8, #8
   20eac:	d1ef      	bne.n	20e8e <_dtoa_r+0x7d6>
   20eae:	463b      	mov	r3, r7
   20eb0:	4632      	mov	r2, r6
   20eb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20eb6:	f7fa ff43 	bl	1bd40 <__aeabi_ddiv>
   20eba:	4607      	mov	r7, r0
   20ebc:	4688      	mov	r8, r1
   20ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20ec0:	b143      	cbz	r3, 20ed4 <_dtoa_r+0x81c>
   20ec2:	2200      	movs	r2, #0
   20ec4:	4ba0      	ldr	r3, [pc, #640]	; (21148 <_dtoa_r+0xa90>)
   20ec6:	4638      	mov	r0, r7
   20ec8:	4641      	mov	r1, r8
   20eca:	f7fb f881 	bl	1bfd0 <__aeabi_dcmplt>
   20ece:	2800      	cmp	r0, #0
   20ed0:	f040 8273 	bne.w	213ba <_dtoa_r+0xd02>
   20ed4:	4648      	mov	r0, r9
   20ed6:	f7fa fda3 	bl	1ba20 <__aeabi_i2d>
   20eda:	463a      	mov	r2, r7
   20edc:	4643      	mov	r3, r8
   20ede:	f7fa fe05 	bl	1baec <__aeabi_dmul>
   20ee2:	4b9a      	ldr	r3, [pc, #616]	; (2114c <_dtoa_r+0xa94>)
   20ee4:	2200      	movs	r2, #0
   20ee6:	f7fa fc4f 	bl	1b788 <__adddf3>
   20eea:	9b08      	ldr	r3, [sp, #32]
   20eec:	4605      	mov	r5, r0
   20eee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20ef2:	2b00      	cmp	r3, #0
   20ef4:	f000 8140 	beq.w	21178 <_dtoa_r+0xac0>
   20ef8:	9b04      	ldr	r3, [sp, #16]
   20efa:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20efe:	9311      	str	r3, [sp, #68]	; 0x44
   20f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20f02:	2b00      	cmp	r3, #0
   20f04:	f000 81f6 	beq.w	212f4 <_dtoa_r+0xc3c>
   20f08:	4b8d      	ldr	r3, [pc, #564]	; (21140 <_dtoa_r+0xa88>)
   20f0a:	4991      	ldr	r1, [pc, #580]	; (21150 <_dtoa_r+0xa98>)
   20f0c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   20f10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   20f14:	2000      	movs	r0, #0
   20f16:	f7fa ff13 	bl	1bd40 <__aeabi_ddiv>
   20f1a:	462a      	mov	r2, r5
   20f1c:	4633      	mov	r3, r6
   20f1e:	f7fa fc31 	bl	1b784 <__aeabi_dsub>
   20f22:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20f26:	4641      	mov	r1, r8
   20f28:	4638      	mov	r0, r7
   20f2a:	f7fb f879 	bl	1c020 <__aeabi_d2iz>
   20f2e:	4605      	mov	r5, r0
   20f30:	f7fa fd76 	bl	1ba20 <__aeabi_i2d>
   20f34:	4602      	mov	r2, r0
   20f36:	460b      	mov	r3, r1
   20f38:	4638      	mov	r0, r7
   20f3a:	4641      	mov	r1, r8
   20f3c:	f7fa fc22 	bl	1b784 <__aeabi_dsub>
   20f40:	3530      	adds	r5, #48	; 0x30
   20f42:	fa5f f885 	uxtb.w	r8, r5
   20f46:	9d07      	ldr	r5, [sp, #28]
   20f48:	4606      	mov	r6, r0
   20f4a:	460f      	mov	r7, r1
   20f4c:	f885 8000 	strb.w	r8, [r5]
   20f50:	4602      	mov	r2, r0
   20f52:	460b      	mov	r3, r1
   20f54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20f58:	3501      	adds	r5, #1
   20f5a:	f7fb f857 	bl	1c00c <__aeabi_dcmpgt>
   20f5e:	2800      	cmp	r0, #0
   20f60:	d156      	bne.n	21010 <_dtoa_r+0x958>
   20f62:	4632      	mov	r2, r6
   20f64:	463b      	mov	r3, r7
   20f66:	2000      	movs	r0, #0
   20f68:	4977      	ldr	r1, [pc, #476]	; (21148 <_dtoa_r+0xa90>)
   20f6a:	f7fa fc0b 	bl	1b784 <__aeabi_dsub>
   20f6e:	4602      	mov	r2, r0
   20f70:	460b      	mov	r3, r1
   20f72:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20f76:	f7fb f849 	bl	1c00c <__aeabi_dcmpgt>
   20f7a:	2800      	cmp	r0, #0
   20f7c:	f040 8262 	bne.w	21444 <_dtoa_r+0xd8c>
   20f80:	f1b9 0f01 	cmp.w	r9, #1
   20f84:	f43f aca3 	beq.w	208ce <_dtoa_r+0x216>
   20f88:	9b07      	ldr	r3, [sp, #28]
   20f8a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   20f8e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   20f92:	4499      	add	r9, r3
   20f94:	46a0      	mov	r8, r4
   20f96:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   20f9a:	e00d      	b.n	20fb8 <_dtoa_r+0x900>
   20f9c:	2000      	movs	r0, #0
   20f9e:	496a      	ldr	r1, [pc, #424]	; (21148 <_dtoa_r+0xa90>)
   20fa0:	f7fa fbf0 	bl	1b784 <__aeabi_dsub>
   20fa4:	4652      	mov	r2, sl
   20fa6:	465b      	mov	r3, fp
   20fa8:	f7fb f812 	bl	1bfd0 <__aeabi_dcmplt>
   20fac:	2800      	cmp	r0, #0
   20fae:	f040 8244 	bne.w	2143a <_dtoa_r+0xd82>
   20fb2:	454d      	cmp	r5, r9
   20fb4:	f000 824a 	beq.w	2144c <_dtoa_r+0xd94>
   20fb8:	4650      	mov	r0, sl
   20fba:	4659      	mov	r1, fp
   20fbc:	2200      	movs	r2, #0
   20fbe:	4b65      	ldr	r3, [pc, #404]	; (21154 <_dtoa_r+0xa9c>)
   20fc0:	f7fa fd94 	bl	1baec <__aeabi_dmul>
   20fc4:	2200      	movs	r2, #0
   20fc6:	4b63      	ldr	r3, [pc, #396]	; (21154 <_dtoa_r+0xa9c>)
   20fc8:	4682      	mov	sl, r0
   20fca:	468b      	mov	fp, r1
   20fcc:	4630      	mov	r0, r6
   20fce:	4639      	mov	r1, r7
   20fd0:	f7fa fd8c 	bl	1baec <__aeabi_dmul>
   20fd4:	460f      	mov	r7, r1
   20fd6:	4606      	mov	r6, r0
   20fd8:	f7fb f822 	bl	1c020 <__aeabi_d2iz>
   20fdc:	4604      	mov	r4, r0
   20fde:	f7fa fd1f 	bl	1ba20 <__aeabi_i2d>
   20fe2:	4602      	mov	r2, r0
   20fe4:	460b      	mov	r3, r1
   20fe6:	4630      	mov	r0, r6
   20fe8:	4639      	mov	r1, r7
   20fea:	f7fa fbcb 	bl	1b784 <__aeabi_dsub>
   20fee:	3430      	adds	r4, #48	; 0x30
   20ff0:	b2e4      	uxtb	r4, r4
   20ff2:	4652      	mov	r2, sl
   20ff4:	465b      	mov	r3, fp
   20ff6:	f805 4b01 	strb.w	r4, [r5], #1
   20ffa:	4606      	mov	r6, r0
   20ffc:	460f      	mov	r7, r1
   20ffe:	f7fa ffe7 	bl	1bfd0 <__aeabi_dcmplt>
   21002:	4632      	mov	r2, r6
   21004:	463b      	mov	r3, r7
   21006:	2800      	cmp	r0, #0
   21008:	d0c8      	beq.n	20f9c <_dtoa_r+0x8e4>
   2100a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2100e:	4644      	mov	r4, r8
   21010:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21012:	9304      	str	r3, [sp, #16]
   21014:	e51c      	b.n	20a50 <_dtoa_r+0x398>
   21016:	2300      	movs	r3, #0
   21018:	9309      	str	r3, [sp, #36]	; 0x24
   2101a:	f1bb 0f00 	cmp.w	fp, #0
   2101e:	f340 80da 	ble.w	211d6 <_dtoa_r+0xb1e>
   21022:	465e      	mov	r6, fp
   21024:	465d      	mov	r5, fp
   21026:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   2102a:	f8cd b020 	str.w	fp, [sp, #32]
   2102e:	e6f3      	b.n	20e18 <_dtoa_r+0x760>
   21030:	2301      	movs	r3, #1
   21032:	9309      	str	r3, [sp, #36]	; 0x24
   21034:	e7f1      	b.n	2101a <_dtoa_r+0x962>
   21036:	9b00      	ldr	r3, [sp, #0]
   21038:	2b00      	cmp	r3, #0
   2103a:	f47f ada1 	bne.w	20b80 <_dtoa_r+0x4c8>
   2103e:	e9dd 1200 	ldrd	r1, r2, [sp]
   21042:	f3c2 0313 	ubfx	r3, r2, #0, #20
   21046:	2b00      	cmp	r3, #0
   21048:	f47f adb4 	bne.w	20bb4 <_dtoa_r+0x4fc>
   2104c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   21050:	0d3f      	lsrs	r7, r7, #20
   21052:	053f      	lsls	r7, r7, #20
   21054:	2f00      	cmp	r7, #0
   21056:	f000 8200 	beq.w	2145a <_dtoa_r+0xda2>
   2105a:	9b06      	ldr	r3, [sp, #24]
   2105c:	3301      	adds	r3, #1
   2105e:	9306      	str	r3, [sp, #24]
   21060:	9b05      	ldr	r3, [sp, #20]
   21062:	3301      	adds	r3, #1
   21064:	9305      	str	r3, [sp, #20]
   21066:	f04f 0801 	mov.w	r8, #1
   2106a:	e5a5      	b.n	20bb8 <_dtoa_r+0x500>
   2106c:	9b08      	ldr	r3, [sp, #32]
   2106e:	2b00      	cmp	r3, #0
   21070:	f73f ac3e 	bgt.w	208f0 <_dtoa_r+0x238>
   21074:	f040 8099 	bne.w	211aa <_dtoa_r+0xaf2>
   21078:	4649      	mov	r1, r9
   2107a:	2200      	movs	r2, #0
   2107c:	4b36      	ldr	r3, [pc, #216]	; (21158 <_dtoa_r+0xaa0>)
   2107e:	4640      	mov	r0, r8
   21080:	f7fa fd34 	bl	1baec <__aeabi_dmul>
   21084:	e9dd 2300 	ldrd	r2, r3, [sp]
   21088:	f7fa ffb6 	bl	1bff8 <__aeabi_dcmpge>
   2108c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21090:	464e      	mov	r6, r9
   21092:	2800      	cmp	r0, #0
   21094:	d03e      	beq.n	21114 <_dtoa_r+0xa5c>
   21096:	ea6f 030b 	mvn.w	r3, fp
   2109a:	9d07      	ldr	r5, [sp, #28]
   2109c:	9304      	str	r3, [sp, #16]
   2109e:	4649      	mov	r1, r9
   210a0:	4620      	mov	r0, r4
   210a2:	f000 fd85 	bl	21bb0 <_Bfree>
   210a6:	2e00      	cmp	r6, #0
   210a8:	f43f acd2 	beq.w	20a50 <_dtoa_r+0x398>
   210ac:	e6a3      	b.n	20df6 <_dtoa_r+0x73e>
   210ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   210b0:	4651      	mov	r1, sl
   210b2:	4620      	mov	r0, r4
   210b4:	f000 feb2 	bl	21e1c <__pow5mult>
   210b8:	4682      	mov	sl, r0
   210ba:	e54f      	b.n	20b5c <_dtoa_r+0x4a4>
   210bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   210be:	2a00      	cmp	r2, #0
   210c0:	f000 816f 	beq.w	213a2 <_dtoa_r+0xcea>
   210c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   210c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   210ca:	9d06      	ldr	r5, [sp, #24]
   210cc:	e4e7      	b.n	20a9e <_dtoa_r+0x3e6>
   210ce:	9b00      	ldr	r3, [sp, #0]
   210d0:	2b00      	cmp	r3, #0
   210d2:	f47f ad6f 	bne.w	20bb4 <_dtoa_r+0x4fc>
   210d6:	e7b2      	b.n	2103e <_dtoa_r+0x986>
   210d8:	f000 fd74 	bl	21bc4 <__multadd>
   210dc:	465f      	mov	r7, fp
   210de:	4606      	mov	r6, r0
   210e0:	4680      	mov	r8, r0
   210e2:	e5b6      	b.n	20c52 <_dtoa_r+0x59a>
   210e4:	4620      	mov	r0, r4
   210e6:	f000 fd63 	bl	21bb0 <_Bfree>
   210ea:	2201      	movs	r2, #1
   210ec:	e5db      	b.n	20ca6 <_dtoa_r+0x5ee>
   210ee:	9b02      	ldr	r3, [sp, #8]
   210f0:	2b02      	cmp	r3, #2
   210f2:	f77f ad93 	ble.w	20c1c <_dtoa_r+0x564>
   210f6:	9b08      	ldr	r3, [sp, #32]
   210f8:	2b00      	cmp	r3, #0
   210fa:	d1cc      	bne.n	21096 <_dtoa_r+0x9de>
   210fc:	4649      	mov	r1, r9
   210fe:	2205      	movs	r2, #5
   21100:	4620      	mov	r0, r4
   21102:	f000 fd5f 	bl	21bc4 <__multadd>
   21106:	4601      	mov	r1, r0
   21108:	4681      	mov	r9, r0
   2110a:	4650      	mov	r0, sl
   2110c:	f000 ff28 	bl	21f60 <__mcmp>
   21110:	2800      	cmp	r0, #0
   21112:	ddc0      	ble.n	21096 <_dtoa_r+0x9de>
   21114:	9a04      	ldr	r2, [sp, #16]
   21116:	9907      	ldr	r1, [sp, #28]
   21118:	2331      	movs	r3, #49	; 0x31
   2111a:	3201      	adds	r2, #1
   2111c:	9204      	str	r2, [sp, #16]
   2111e:	700b      	strb	r3, [r1, #0]
   21120:	1c4d      	adds	r5, r1, #1
   21122:	e7bc      	b.n	2109e <_dtoa_r+0x9e6>
   21124:	9a04      	ldr	r2, [sp, #16]
   21126:	3201      	adds	r2, #1
   21128:	9204      	str	r2, [sp, #16]
   2112a:	9a07      	ldr	r2, [sp, #28]
   2112c:	2331      	movs	r3, #49	; 0x31
   2112e:	7013      	strb	r3, [r2, #0]
   21130:	e651      	b.n	20dd6 <_dtoa_r+0x71e>
   21132:	2301      	movs	r3, #1
   21134:	9309      	str	r3, [sp, #36]	; 0x24
   21136:	e665      	b.n	20e04 <_dtoa_r+0x74c>
   21138:	f8dd a000 	ldr.w	sl, [sp]
   2113c:	9c02      	ldr	r4, [sp, #8]
   2113e:	e487      	b.n	20a50 <_dtoa_r+0x398>
   21140:	00024d78 	.word	0x00024d78
   21144:	00024d50 	.word	0x00024d50
   21148:	3ff00000 	.word	0x3ff00000
   2114c:	401c0000 	.word	0x401c0000
   21150:	3fe00000 	.word	0x3fe00000
   21154:	40240000 	.word	0x40240000
   21158:	40140000 	.word	0x40140000
   2115c:	4648      	mov	r0, r9
   2115e:	f7fa fc5f 	bl	1ba20 <__aeabi_i2d>
   21162:	463a      	mov	r2, r7
   21164:	4643      	mov	r3, r8
   21166:	f7fa fcc1 	bl	1baec <__aeabi_dmul>
   2116a:	2200      	movs	r2, #0
   2116c:	4bc4      	ldr	r3, [pc, #784]	; (21480 <_dtoa_r+0xdc8>)
   2116e:	f7fa fb0b 	bl	1b788 <__adddf3>
   21172:	4605      	mov	r5, r0
   21174:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21178:	4641      	mov	r1, r8
   2117a:	2200      	movs	r2, #0
   2117c:	4bc1      	ldr	r3, [pc, #772]	; (21484 <_dtoa_r+0xdcc>)
   2117e:	4638      	mov	r0, r7
   21180:	f7fa fb00 	bl	1b784 <__aeabi_dsub>
   21184:	462a      	mov	r2, r5
   21186:	4633      	mov	r3, r6
   21188:	4680      	mov	r8, r0
   2118a:	4689      	mov	r9, r1
   2118c:	f7fa ff3e 	bl	1c00c <__aeabi_dcmpgt>
   21190:	2800      	cmp	r0, #0
   21192:	f040 80ab 	bne.w	212ec <_dtoa_r+0xc34>
   21196:	462a      	mov	r2, r5
   21198:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2119c:	4640      	mov	r0, r8
   2119e:	4649      	mov	r1, r9
   211a0:	f7fa ff16 	bl	1bfd0 <__aeabi_dcmplt>
   211a4:	2800      	cmp	r0, #0
   211a6:	f43f ab92 	beq.w	208ce <_dtoa_r+0x216>
   211aa:	f04f 0900 	mov.w	r9, #0
   211ae:	464e      	mov	r6, r9
   211b0:	e771      	b.n	21096 <_dtoa_r+0x9de>
   211b2:	9807      	ldr	r0, [sp, #28]
   211b4:	f7ff bab8 	b.w	20728 <_dtoa_r+0x70>
   211b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   211ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   211bc:	970a      	str	r7, [sp, #40]	; 0x28
   211be:	1afb      	subs	r3, r7, r3
   211c0:	441a      	add	r2, r3
   211c2:	920b      	str	r2, [sp, #44]	; 0x2c
   211c4:	2700      	movs	r7, #0
   211c6:	e464      	b.n	20a92 <_dtoa_r+0x3da>
   211c8:	ed9d 7b00 	vldr	d7, [sp]
   211cc:	f04f 0902 	mov.w	r9, #2
   211d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   211d4:	e658      	b.n	20e88 <_dtoa_r+0x7d0>
   211d6:	2100      	movs	r1, #0
   211d8:	6461      	str	r1, [r4, #68]	; 0x44
   211da:	4620      	mov	r0, r4
   211dc:	f000 fcc2 	bl	21b64 <_Balloc>
   211e0:	f04f 0b01 	mov.w	fp, #1
   211e4:	9007      	str	r0, [sp, #28]
   211e6:	6420      	str	r0, [r4, #64]	; 0x40
   211e8:	f8cd b020 	str.w	fp, [sp, #32]
   211ec:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   211f0:	e629      	b.n	20e46 <_dtoa_r+0x78e>
   211f2:	2a00      	cmp	r2, #0
   211f4:	dd12      	ble.n	2121c <_dtoa_r+0xb64>
   211f6:	4651      	mov	r1, sl
   211f8:	2201      	movs	r2, #1
   211fa:	4620      	mov	r0, r4
   211fc:	f000 fe5e 	bl	21ebc <__lshift>
   21200:	4649      	mov	r1, r9
   21202:	4682      	mov	sl, r0
   21204:	f000 feac 	bl	21f60 <__mcmp>
   21208:	2800      	cmp	r0, #0
   2120a:	f340 8131 	ble.w	21470 <_dtoa_r+0xdb8>
   2120e:	9b00      	ldr	r3, [sp, #0]
   21210:	2b39      	cmp	r3, #57	; 0x39
   21212:	f000 80f7 	beq.w	21404 <_dtoa_r+0xd4c>
   21216:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2121a:	9300      	str	r3, [sp, #0]
   2121c:	f89d 3000 	ldrb.w	r3, [sp]
   21220:	703b      	strb	r3, [r7, #0]
   21222:	46b3      	mov	fp, r6
   21224:	1c7d      	adds	r5, r7, #1
   21226:	4646      	mov	r6, r8
   21228:	e5d5      	b.n	20dd6 <_dtoa_r+0x71e>
   2122a:	d104      	bne.n	21236 <_dtoa_r+0xb7e>
   2122c:	9b00      	ldr	r3, [sp, #0]
   2122e:	07db      	lsls	r3, r3, #31
   21230:	d501      	bpl.n	21236 <_dtoa_r+0xb7e>
   21232:	e5c0      	b.n	20db6 <_dtoa_r+0x6fe>
   21234:	4615      	mov	r5, r2
   21236:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2123a:	2b30      	cmp	r3, #48	; 0x30
   2123c:	f105 32ff 	add.w	r2, r5, #4294967295
   21240:	d0f8      	beq.n	21234 <_dtoa_r+0xb7c>
   21242:	e5c8      	b.n	20dd6 <_dtoa_r+0x71e>
   21244:	f000 80b4 	beq.w	213b0 <_dtoa_r+0xcf8>
   21248:	9b04      	ldr	r3, [sp, #16]
   2124a:	425d      	negs	r5, r3
   2124c:	4b8e      	ldr	r3, [pc, #568]	; (21488 <_dtoa_r+0xdd0>)
   2124e:	f005 020f 	and.w	r2, r5, #15
   21252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21256:	e9d3 2300 	ldrd	r2, r3, [r3]
   2125a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2125e:	f7fa fc45 	bl	1baec <__aeabi_dmul>
   21262:	112d      	asrs	r5, r5, #4
   21264:	4607      	mov	r7, r0
   21266:	4688      	mov	r8, r1
   21268:	f000 8128 	beq.w	214bc <_dtoa_r+0xe04>
   2126c:	4e87      	ldr	r6, [pc, #540]	; (2148c <_dtoa_r+0xdd4>)
   2126e:	f04f 0902 	mov.w	r9, #2
   21272:	07e9      	lsls	r1, r5, #31
   21274:	d509      	bpl.n	2128a <_dtoa_r+0xbd2>
   21276:	4638      	mov	r0, r7
   21278:	4641      	mov	r1, r8
   2127a:	e9d6 2300 	ldrd	r2, r3, [r6]
   2127e:	f7fa fc35 	bl	1baec <__aeabi_dmul>
   21282:	f109 0901 	add.w	r9, r9, #1
   21286:	4607      	mov	r7, r0
   21288:	4688      	mov	r8, r1
   2128a:	106d      	asrs	r5, r5, #1
   2128c:	f106 0608 	add.w	r6, r6, #8
   21290:	d1ef      	bne.n	21272 <_dtoa_r+0xbba>
   21292:	e614      	b.n	20ebe <_dtoa_r+0x806>
   21294:	9907      	ldr	r1, [sp, #28]
   21296:	2230      	movs	r2, #48	; 0x30
   21298:	700a      	strb	r2, [r1, #0]
   2129a:	9a04      	ldr	r2, [sp, #16]
   2129c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   212a0:	3201      	adds	r2, #1
   212a2:	9204      	str	r2, [sp, #16]
   212a4:	f7ff bbd0 	b.w	20a48 <_dtoa_r+0x390>
   212a8:	6871      	ldr	r1, [r6, #4]
   212aa:	4620      	mov	r0, r4
   212ac:	f000 fc5a 	bl	21b64 <_Balloc>
   212b0:	6933      	ldr	r3, [r6, #16]
   212b2:	3302      	adds	r3, #2
   212b4:	009a      	lsls	r2, r3, #2
   212b6:	4605      	mov	r5, r0
   212b8:	f106 010c 	add.w	r1, r6, #12
   212bc:	300c      	adds	r0, #12
   212be:	f7fc ffe7 	bl	1e290 <memcpy>
   212c2:	4629      	mov	r1, r5
   212c4:	2201      	movs	r2, #1
   212c6:	4620      	mov	r0, r4
   212c8:	f000 fdf8 	bl	21ebc <__lshift>
   212cc:	4680      	mov	r8, r0
   212ce:	e4b6      	b.n	20c3e <_dtoa_r+0x586>
   212d0:	9b00      	ldr	r3, [sp, #0]
   212d2:	2b39      	cmp	r3, #57	; 0x39
   212d4:	f000 8096 	beq.w	21404 <_dtoa_r+0xd4c>
   212d8:	9b00      	ldr	r3, [sp, #0]
   212da:	3301      	adds	r3, #1
   212dc:	46b3      	mov	fp, r6
   212de:	703b      	strb	r3, [r7, #0]
   212e0:	1c7d      	adds	r5, r7, #1
   212e2:	4646      	mov	r6, r8
   212e4:	e577      	b.n	20dd6 <_dtoa_r+0x71e>
   212e6:	46b3      	mov	fp, r6
   212e8:	4646      	mov	r6, r8
   212ea:	e558      	b.n	20d9e <_dtoa_r+0x6e6>
   212ec:	f04f 0900 	mov.w	r9, #0
   212f0:	464e      	mov	r6, r9
   212f2:	e70f      	b.n	21114 <_dtoa_r+0xa5c>
   212f4:	4964      	ldr	r1, [pc, #400]	; (21488 <_dtoa_r+0xdd0>)
   212f6:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   212fa:	462a      	mov	r2, r5
   212fc:	4633      	mov	r3, r6
   212fe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21302:	f7fa fbf3 	bl	1baec <__aeabi_dmul>
   21306:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2130a:	4638      	mov	r0, r7
   2130c:	4641      	mov	r1, r8
   2130e:	f7fa fe87 	bl	1c020 <__aeabi_d2iz>
   21312:	4605      	mov	r5, r0
   21314:	f7fa fb84 	bl	1ba20 <__aeabi_i2d>
   21318:	4602      	mov	r2, r0
   2131a:	460b      	mov	r3, r1
   2131c:	4638      	mov	r0, r7
   2131e:	4641      	mov	r1, r8
   21320:	f7fa fa30 	bl	1b784 <__aeabi_dsub>
   21324:	9a07      	ldr	r2, [sp, #28]
   21326:	3530      	adds	r5, #48	; 0x30
   21328:	f1b9 0f01 	cmp.w	r9, #1
   2132c:	7015      	strb	r5, [r2, #0]
   2132e:	4606      	mov	r6, r0
   21330:	460f      	mov	r7, r1
   21332:	f102 0501 	add.w	r5, r2, #1
   21336:	d01c      	beq.n	21372 <_dtoa_r+0xcba>
   21338:	9b07      	ldr	r3, [sp, #28]
   2133a:	4499      	add	r9, r3
   2133c:	2200      	movs	r2, #0
   2133e:	4b54      	ldr	r3, [pc, #336]	; (21490 <_dtoa_r+0xdd8>)
   21340:	4630      	mov	r0, r6
   21342:	4639      	mov	r1, r7
   21344:	f7fa fbd2 	bl	1baec <__aeabi_dmul>
   21348:	460f      	mov	r7, r1
   2134a:	4606      	mov	r6, r0
   2134c:	f7fa fe68 	bl	1c020 <__aeabi_d2iz>
   21350:	4680      	mov	r8, r0
   21352:	f7fa fb65 	bl	1ba20 <__aeabi_i2d>
   21356:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2135a:	4602      	mov	r2, r0
   2135c:	460b      	mov	r3, r1
   2135e:	4630      	mov	r0, r6
   21360:	4639      	mov	r1, r7
   21362:	f7fa fa0f 	bl	1b784 <__aeabi_dsub>
   21366:	f805 8b01 	strb.w	r8, [r5], #1
   2136a:	454d      	cmp	r5, r9
   2136c:	4606      	mov	r6, r0
   2136e:	460f      	mov	r7, r1
   21370:	d1e4      	bne.n	2133c <_dtoa_r+0xc84>
   21372:	2200      	movs	r2, #0
   21374:	4b47      	ldr	r3, [pc, #284]	; (21494 <_dtoa_r+0xddc>)
   21376:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2137a:	f7fa fa05 	bl	1b788 <__adddf3>
   2137e:	4632      	mov	r2, r6
   21380:	463b      	mov	r3, r7
   21382:	f7fa fe25 	bl	1bfd0 <__aeabi_dcmplt>
   21386:	2800      	cmp	r0, #0
   21388:	d042      	beq.n	21410 <_dtoa_r+0xd58>
   2138a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2138c:	9304      	str	r3, [sp, #16]
   2138e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21392:	f7ff bb4c 	b.w	20a2e <_dtoa_r+0x376>
   21396:	9b06      	ldr	r3, [sp, #24]
   21398:	9a08      	ldr	r2, [sp, #32]
   2139a:	1a9d      	subs	r5, r3, r2
   2139c:	2300      	movs	r3, #0
   2139e:	f7ff bb7e 	b.w	20a9e <_dtoa_r+0x3e6>
   213a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   213a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   213a6:	9d06      	ldr	r5, [sp, #24]
   213a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   213ac:	f7ff bb77 	b.w	20a9e <_dtoa_r+0x3e6>
   213b0:	e9dd 7800 	ldrd	r7, r8, [sp]
   213b4:	f04f 0902 	mov.w	r9, #2
   213b8:	e581      	b.n	20ebe <_dtoa_r+0x806>
   213ba:	9b08      	ldr	r3, [sp, #32]
   213bc:	2b00      	cmp	r3, #0
   213be:	f43f aecd 	beq.w	2115c <_dtoa_r+0xaa4>
   213c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   213c4:	2b00      	cmp	r3, #0
   213c6:	f77f aa82 	ble.w	208ce <_dtoa_r+0x216>
   213ca:	2200      	movs	r2, #0
   213cc:	4b30      	ldr	r3, [pc, #192]	; (21490 <_dtoa_r+0xdd8>)
   213ce:	4638      	mov	r0, r7
   213d0:	4641      	mov	r1, r8
   213d2:	f7fa fb8b 	bl	1baec <__aeabi_dmul>
   213d6:	4607      	mov	r7, r0
   213d8:	4688      	mov	r8, r1
   213da:	f109 0001 	add.w	r0, r9, #1
   213de:	f7fa fb1f 	bl	1ba20 <__aeabi_i2d>
   213e2:	463a      	mov	r2, r7
   213e4:	4643      	mov	r3, r8
   213e6:	f7fa fb81 	bl	1baec <__aeabi_dmul>
   213ea:	2200      	movs	r2, #0
   213ec:	4b24      	ldr	r3, [pc, #144]	; (21480 <_dtoa_r+0xdc8>)
   213ee:	f7fa f9cb 	bl	1b788 <__adddf3>
   213f2:	9a04      	ldr	r2, [sp, #16]
   213f4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   213f8:	3a01      	subs	r2, #1
   213fa:	4605      	mov	r5, r0
   213fc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21400:	9211      	str	r2, [sp, #68]	; 0x44
   21402:	e57d      	b.n	20f00 <_dtoa_r+0x848>
   21404:	2239      	movs	r2, #57	; 0x39
   21406:	46b3      	mov	fp, r6
   21408:	703a      	strb	r2, [r7, #0]
   2140a:	4646      	mov	r6, r8
   2140c:	1c7d      	adds	r5, r7, #1
   2140e:	e4d4      	b.n	20dba <_dtoa_r+0x702>
   21410:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21414:	2000      	movs	r0, #0
   21416:	491f      	ldr	r1, [pc, #124]	; (21494 <_dtoa_r+0xddc>)
   21418:	f7fa f9b4 	bl	1b784 <__aeabi_dsub>
   2141c:	4632      	mov	r2, r6
   2141e:	463b      	mov	r3, r7
   21420:	f7fa fdf4 	bl	1c00c <__aeabi_dcmpgt>
   21424:	b910      	cbnz	r0, 2142c <_dtoa_r+0xd74>
   21426:	f7ff ba52 	b.w	208ce <_dtoa_r+0x216>
   2142a:	4615      	mov	r5, r2
   2142c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   21430:	2b30      	cmp	r3, #48	; 0x30
   21432:	f105 32ff 	add.w	r2, r5, #4294967295
   21436:	d0f8      	beq.n	2142a <_dtoa_r+0xd72>
   21438:	e5ea      	b.n	21010 <_dtoa_r+0x958>
   2143a:	4643      	mov	r3, r8
   2143c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21440:	46a0      	mov	r8, r4
   21442:	461c      	mov	r4, r3
   21444:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21446:	9304      	str	r3, [sp, #16]
   21448:	f7ff baf1 	b.w	20a2e <_dtoa_r+0x376>
   2144c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21450:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   21454:	4644      	mov	r4, r8
   21456:	f7ff ba3a 	b.w	208ce <_dtoa_r+0x216>
   2145a:	46b8      	mov	r8, r7
   2145c:	f7ff bbac 	b.w	20bb8 <_dtoa_r+0x500>
   21460:	9b00      	ldr	r3, [sp, #0]
   21462:	2b39      	cmp	r3, #57	; 0x39
   21464:	d0ce      	beq.n	21404 <_dtoa_r+0xd4c>
   21466:	f1bb 0f00 	cmp.w	fp, #0
   2146a:	f73f aed4 	bgt.w	21216 <_dtoa_r+0xb5e>
   2146e:	e6d5      	b.n	2121c <_dtoa_r+0xb64>
   21470:	f47f aed4 	bne.w	2121c <_dtoa_r+0xb64>
   21474:	9b00      	ldr	r3, [sp, #0]
   21476:	07da      	lsls	r2, r3, #31
   21478:	f57f aed0 	bpl.w	2121c <_dtoa_r+0xb64>
   2147c:	e6c7      	b.n	2120e <_dtoa_r+0xb56>
   2147e:	bf00      	nop
   21480:	401c0000 	.word	0x401c0000
   21484:	40140000 	.word	0x40140000
   21488:	00024d78 	.word	0x00024d78
   2148c:	00024d50 	.word	0x00024d50
   21490:	40240000 	.word	0x40240000
   21494:	3fe00000 	.word	0x3fe00000
   21498:	4631      	mov	r1, r6
   2149a:	2300      	movs	r3, #0
   2149c:	220a      	movs	r2, #10
   2149e:	4620      	mov	r0, r4
   214a0:	f000 fb90 	bl	21bc4 <__multadd>
   214a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   214a6:	2b00      	cmp	r3, #0
   214a8:	4606      	mov	r6, r0
   214aa:	dd0a      	ble.n	214c2 <_dtoa_r+0xe0a>
   214ac:	9308      	str	r3, [sp, #32]
   214ae:	f7ff bbb9 	b.w	20c24 <_dtoa_r+0x56c>
   214b2:	9b02      	ldr	r3, [sp, #8]
   214b4:	2b02      	cmp	r3, #2
   214b6:	dc22      	bgt.n	214fe <_dtoa_r+0xe46>
   214b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   214ba:	e44a      	b.n	20d52 <_dtoa_r+0x69a>
   214bc:	f04f 0902 	mov.w	r9, #2
   214c0:	e4fd      	b.n	20ebe <_dtoa_r+0x806>
   214c2:	9b02      	ldr	r3, [sp, #8]
   214c4:	2b02      	cmp	r3, #2
   214c6:	dc1a      	bgt.n	214fe <_dtoa_r+0xe46>
   214c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   214ca:	e7ef      	b.n	214ac <_dtoa_r+0xdf4>
   214cc:	2500      	movs	r5, #0
   214ce:	6465      	str	r5, [r4, #68]	; 0x44
   214d0:	4629      	mov	r1, r5
   214d2:	4620      	mov	r0, r4
   214d4:	f000 fb46 	bl	21b64 <_Balloc>
   214d8:	f04f 33ff 	mov.w	r3, #4294967295
   214dc:	9308      	str	r3, [sp, #32]
   214de:	930d      	str	r3, [sp, #52]	; 0x34
   214e0:	2301      	movs	r3, #1
   214e2:	9007      	str	r0, [sp, #28]
   214e4:	46ab      	mov	fp, r5
   214e6:	6420      	str	r0, [r4, #64]	; 0x40
   214e8:	9309      	str	r3, [sp, #36]	; 0x24
   214ea:	f7ff b9f0 	b.w	208ce <_dtoa_r+0x216>
   214ee:	f43f ab7b 	beq.w	20be8 <_dtoa_r+0x530>
   214f2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   214f6:	e40b      	b.n	20d10 <_dtoa_r+0x658>
   214f8:	2701      	movs	r7, #1
   214fa:	f7ff b9af 	b.w	2085c <_dtoa_r+0x1a4>
   214fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21500:	9308      	str	r3, [sp, #32]
   21502:	e5f8      	b.n	210f6 <_dtoa_r+0xa3e>

00021504 <__sflush_r>:
   21504:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21508:	b29a      	uxth	r2, r3
   2150a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2150e:	460d      	mov	r5, r1
   21510:	0711      	lsls	r1, r2, #28
   21512:	4680      	mov	r8, r0
   21514:	d43a      	bmi.n	2158c <__sflush_r+0x88>
   21516:	686a      	ldr	r2, [r5, #4]
   21518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2151c:	2a00      	cmp	r2, #0
   2151e:	81ab      	strh	r3, [r5, #12]
   21520:	dd6f      	ble.n	21602 <__sflush_r+0xfe>
   21522:	6aac      	ldr	r4, [r5, #40]	; 0x28
   21524:	2c00      	cmp	r4, #0
   21526:	d049      	beq.n	215bc <__sflush_r+0xb8>
   21528:	2200      	movs	r2, #0
   2152a:	b29b      	uxth	r3, r3
   2152c:	f8d8 6000 	ldr.w	r6, [r8]
   21530:	f8c8 2000 	str.w	r2, [r8]
   21534:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   21538:	d067      	beq.n	2160a <__sflush_r+0x106>
   2153a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2153c:	075f      	lsls	r7, r3, #29
   2153e:	d505      	bpl.n	2154c <__sflush_r+0x48>
   21540:	6869      	ldr	r1, [r5, #4]
   21542:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   21544:	1a52      	subs	r2, r2, r1
   21546:	b10b      	cbz	r3, 2154c <__sflush_r+0x48>
   21548:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2154a:	1ad2      	subs	r2, r2, r3
   2154c:	2300      	movs	r3, #0
   2154e:	69e9      	ldr	r1, [r5, #28]
   21550:	4640      	mov	r0, r8
   21552:	47a0      	blx	r4
   21554:	1c44      	adds	r4, r0, #1
   21556:	d03c      	beq.n	215d2 <__sflush_r+0xce>
   21558:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   2155c:	692a      	ldr	r2, [r5, #16]
   2155e:	602a      	str	r2, [r5, #0]
   21560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   21564:	2200      	movs	r2, #0
   21566:	81ab      	strh	r3, [r5, #12]
   21568:	04db      	lsls	r3, r3, #19
   2156a:	606a      	str	r2, [r5, #4]
   2156c:	d447      	bmi.n	215fe <__sflush_r+0xfa>
   2156e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   21570:	f8c8 6000 	str.w	r6, [r8]
   21574:	b311      	cbz	r1, 215bc <__sflush_r+0xb8>
   21576:	f105 0340 	add.w	r3, r5, #64	; 0x40
   2157a:	4299      	cmp	r1, r3
   2157c:	d002      	beq.n	21584 <__sflush_r+0x80>
   2157e:	4640      	mov	r0, r8
   21580:	f000 f95a 	bl	21838 <_free_r>
   21584:	2000      	movs	r0, #0
   21586:	6328      	str	r0, [r5, #48]	; 0x30
   21588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2158c:	692e      	ldr	r6, [r5, #16]
   2158e:	b1ae      	cbz	r6, 215bc <__sflush_r+0xb8>
   21590:	682c      	ldr	r4, [r5, #0]
   21592:	602e      	str	r6, [r5, #0]
   21594:	0791      	lsls	r1, r2, #30
   21596:	bf0c      	ite	eq
   21598:	696b      	ldreq	r3, [r5, #20]
   2159a:	2300      	movne	r3, #0
   2159c:	1ba4      	subs	r4, r4, r6
   2159e:	60ab      	str	r3, [r5, #8]
   215a0:	e00a      	b.n	215b8 <__sflush_r+0xb4>
   215a2:	4623      	mov	r3, r4
   215a4:	4632      	mov	r2, r6
   215a6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   215a8:	69e9      	ldr	r1, [r5, #28]
   215aa:	4640      	mov	r0, r8
   215ac:	47b8      	blx	r7
   215ae:	2800      	cmp	r0, #0
   215b0:	eba4 0400 	sub.w	r4, r4, r0
   215b4:	4406      	add	r6, r0
   215b6:	dd04      	ble.n	215c2 <__sflush_r+0xbe>
   215b8:	2c00      	cmp	r4, #0
   215ba:	dcf2      	bgt.n	215a2 <__sflush_r+0x9e>
   215bc:	2000      	movs	r0, #0
   215be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   215c2:	89ab      	ldrh	r3, [r5, #12]
   215c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   215c8:	81ab      	strh	r3, [r5, #12]
   215ca:	f04f 30ff 	mov.w	r0, #4294967295
   215ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   215d2:	f8d8 4000 	ldr.w	r4, [r8]
   215d6:	2c1d      	cmp	r4, #29
   215d8:	d8f3      	bhi.n	215c2 <__sflush_r+0xbe>
   215da:	4b19      	ldr	r3, [pc, #100]	; (21640 <__sflush_r+0x13c>)
   215dc:	40e3      	lsrs	r3, r4
   215de:	43db      	mvns	r3, r3
   215e0:	f013 0301 	ands.w	r3, r3, #1
   215e4:	d1ed      	bne.n	215c2 <__sflush_r+0xbe>
   215e6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   215ea:	606b      	str	r3, [r5, #4]
   215ec:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   215f0:	6929      	ldr	r1, [r5, #16]
   215f2:	81ab      	strh	r3, [r5, #12]
   215f4:	04da      	lsls	r2, r3, #19
   215f6:	6029      	str	r1, [r5, #0]
   215f8:	d5b9      	bpl.n	2156e <__sflush_r+0x6a>
   215fa:	2c00      	cmp	r4, #0
   215fc:	d1b7      	bne.n	2156e <__sflush_r+0x6a>
   215fe:	6528      	str	r0, [r5, #80]	; 0x50
   21600:	e7b5      	b.n	2156e <__sflush_r+0x6a>
   21602:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21604:	2a00      	cmp	r2, #0
   21606:	dc8c      	bgt.n	21522 <__sflush_r+0x1e>
   21608:	e7d8      	b.n	215bc <__sflush_r+0xb8>
   2160a:	2301      	movs	r3, #1
   2160c:	69e9      	ldr	r1, [r5, #28]
   2160e:	4640      	mov	r0, r8
   21610:	47a0      	blx	r4
   21612:	1c43      	adds	r3, r0, #1
   21614:	4602      	mov	r2, r0
   21616:	d002      	beq.n	2161e <__sflush_r+0x11a>
   21618:	89ab      	ldrh	r3, [r5, #12]
   2161a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2161c:	e78e      	b.n	2153c <__sflush_r+0x38>
   2161e:	f8d8 3000 	ldr.w	r3, [r8]
   21622:	2b00      	cmp	r3, #0
   21624:	d0f8      	beq.n	21618 <__sflush_r+0x114>
   21626:	2b1d      	cmp	r3, #29
   21628:	d001      	beq.n	2162e <__sflush_r+0x12a>
   2162a:	2b16      	cmp	r3, #22
   2162c:	d102      	bne.n	21634 <__sflush_r+0x130>
   2162e:	f8c8 6000 	str.w	r6, [r8]
   21632:	e7c3      	b.n	215bc <__sflush_r+0xb8>
   21634:	89ab      	ldrh	r3, [r5, #12]
   21636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2163a:	81ab      	strh	r3, [r5, #12]
   2163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21640:	20400001 	.word	0x20400001

00021644 <_fflush_r>:
   21644:	b538      	push	{r3, r4, r5, lr}
   21646:	460d      	mov	r5, r1
   21648:	4604      	mov	r4, r0
   2164a:	b108      	cbz	r0, 21650 <_fflush_r+0xc>
   2164c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2164e:	b1bb      	cbz	r3, 21680 <_fflush_r+0x3c>
   21650:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   21654:	b188      	cbz	r0, 2167a <_fflush_r+0x36>
   21656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21658:	07db      	lsls	r3, r3, #31
   2165a:	d401      	bmi.n	21660 <_fflush_r+0x1c>
   2165c:	0581      	lsls	r1, r0, #22
   2165e:	d517      	bpl.n	21690 <_fflush_r+0x4c>
   21660:	4620      	mov	r0, r4
   21662:	4629      	mov	r1, r5
   21664:	f7ff ff4e 	bl	21504 <__sflush_r>
   21668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2166a:	07da      	lsls	r2, r3, #31
   2166c:	4604      	mov	r4, r0
   2166e:	d402      	bmi.n	21676 <_fflush_r+0x32>
   21670:	89ab      	ldrh	r3, [r5, #12]
   21672:	059b      	lsls	r3, r3, #22
   21674:	d507      	bpl.n	21686 <_fflush_r+0x42>
   21676:	4620      	mov	r0, r4
   21678:	bd38      	pop	{r3, r4, r5, pc}
   2167a:	4604      	mov	r4, r0
   2167c:	4620      	mov	r0, r4
   2167e:	bd38      	pop	{r3, r4, r5, pc}
   21680:	f000 f838 	bl	216f4 <__sinit>
   21684:	e7e4      	b.n	21650 <_fflush_r+0xc>
   21686:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21688:	f7fc faa8 	bl	1dbdc <__retarget_lock_release_recursive>
   2168c:	4620      	mov	r0, r4
   2168e:	bd38      	pop	{r3, r4, r5, pc}
   21690:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21692:	f7fc faa1 	bl	1dbd8 <__retarget_lock_acquire_recursive>
   21696:	e7e3      	b.n	21660 <_fflush_r+0x1c>

00021698 <_cleanup_r>:
   21698:	4901      	ldr	r1, [pc, #4]	; (216a0 <_cleanup_r+0x8>)
   2169a:	f000 b9b3 	b.w	21a04 <_fwalk_reent>
   2169e:	bf00      	nop
   216a0:	00022429 	.word	0x00022429

000216a4 <std.isra.0>:
   216a4:	b510      	push	{r4, lr}
   216a6:	2300      	movs	r3, #0
   216a8:	4604      	mov	r4, r0
   216aa:	8181      	strh	r1, [r0, #12]
   216ac:	81c2      	strh	r2, [r0, #14]
   216ae:	6003      	str	r3, [r0, #0]
   216b0:	6043      	str	r3, [r0, #4]
   216b2:	6083      	str	r3, [r0, #8]
   216b4:	6643      	str	r3, [r0, #100]	; 0x64
   216b6:	6103      	str	r3, [r0, #16]
   216b8:	6143      	str	r3, [r0, #20]
   216ba:	6183      	str	r3, [r0, #24]
   216bc:	4619      	mov	r1, r3
   216be:	2208      	movs	r2, #8
   216c0:	305c      	adds	r0, #92	; 0x5c
   216c2:	f7fc fee3 	bl	1e48c <memset>
   216c6:	4807      	ldr	r0, [pc, #28]	; (216e4 <std.isra.0+0x40>)
   216c8:	4907      	ldr	r1, [pc, #28]	; (216e8 <std.isra.0+0x44>)
   216ca:	4a08      	ldr	r2, [pc, #32]	; (216ec <std.isra.0+0x48>)
   216cc:	4b08      	ldr	r3, [pc, #32]	; (216f0 <std.isra.0+0x4c>)
   216ce:	6220      	str	r0, [r4, #32]
   216d0:	61e4      	str	r4, [r4, #28]
   216d2:	6261      	str	r1, [r4, #36]	; 0x24
   216d4:	62a2      	str	r2, [r4, #40]	; 0x28
   216d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   216d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   216dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   216e0:	f7fc ba76 	b.w	1dbd0 <__retarget_lock_init_recursive>
   216e4:	0002215d 	.word	0x0002215d
   216e8:	00022181 	.word	0x00022181
   216ec:	000221bd 	.word	0x000221bd
   216f0:	000221dd 	.word	0x000221dd

000216f4 <__sinit>:
   216f4:	b510      	push	{r4, lr}
   216f6:	4604      	mov	r4, r0
   216f8:	4812      	ldr	r0, [pc, #72]	; (21744 <__sinit+0x50>)
   216fa:	f7fc fa6d 	bl	1dbd8 <__retarget_lock_acquire_recursive>
   216fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21700:	b9d2      	cbnz	r2, 21738 <__sinit+0x44>
   21702:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21706:	4810      	ldr	r0, [pc, #64]	; (21748 <__sinit+0x54>)
   21708:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2170c:	2103      	movs	r1, #3
   2170e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21712:	63e0      	str	r0, [r4, #60]	; 0x3c
   21714:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21718:	6860      	ldr	r0, [r4, #4]
   2171a:	2104      	movs	r1, #4
   2171c:	f7ff ffc2 	bl	216a4 <std.isra.0>
   21720:	2201      	movs	r2, #1
   21722:	2109      	movs	r1, #9
   21724:	68a0      	ldr	r0, [r4, #8]
   21726:	f7ff ffbd 	bl	216a4 <std.isra.0>
   2172a:	2202      	movs	r2, #2
   2172c:	2112      	movs	r1, #18
   2172e:	68e0      	ldr	r0, [r4, #12]
   21730:	f7ff ffb8 	bl	216a4 <std.isra.0>
   21734:	2301      	movs	r3, #1
   21736:	63a3      	str	r3, [r4, #56]	; 0x38
   21738:	4802      	ldr	r0, [pc, #8]	; (21744 <__sinit+0x50>)
   2173a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2173e:	f7fc ba4d 	b.w	1dbdc <__retarget_lock_release_recursive>
   21742:	bf00      	nop
   21744:	20002384 	.word	0x20002384
   21748:	00021699 	.word	0x00021699

0002174c <__sfp_lock_acquire>:
   2174c:	4801      	ldr	r0, [pc, #4]	; (21754 <__sfp_lock_acquire+0x8>)
   2174e:	f7fc ba43 	b.w	1dbd8 <__retarget_lock_acquire_recursive>
   21752:	bf00      	nop
   21754:	20002398 	.word	0x20002398

00021758 <__sfp_lock_release>:
   21758:	4801      	ldr	r0, [pc, #4]	; (21760 <__sfp_lock_release+0x8>)
   2175a:	f7fc ba3f 	b.w	1dbdc <__retarget_lock_release_recursive>
   2175e:	bf00      	nop
   21760:	20002398 	.word	0x20002398

00021764 <__libc_fini_array>:
   21764:	b538      	push	{r3, r4, r5, lr}
   21766:	4c0a      	ldr	r4, [pc, #40]	; (21790 <__libc_fini_array+0x2c>)
   21768:	4d0a      	ldr	r5, [pc, #40]	; (21794 <__libc_fini_array+0x30>)
   2176a:	1b64      	subs	r4, r4, r5
   2176c:	10a4      	asrs	r4, r4, #2
   2176e:	d00a      	beq.n	21786 <__libc_fini_array+0x22>
   21770:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   21774:	3b01      	subs	r3, #1
   21776:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   2177a:	3c01      	subs	r4, #1
   2177c:	f855 3904 	ldr.w	r3, [r5], #-4
   21780:	4798      	blx	r3
   21782:	2c00      	cmp	r4, #0
   21784:	d1f9      	bne.n	2177a <__libc_fini_array+0x16>
   21786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2178a:	f001 b8b3 	b.w	228f4 <_fini>
   2178e:	bf00      	nop
   21790:	0002293c 	.word	0x0002293c
   21794:	00022938 	.word	0x00022938

00021798 <_malloc_trim_r>:
   21798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2179a:	4f24      	ldr	r7, [pc, #144]	; (2182c <_malloc_trim_r+0x94>)
   2179c:	460c      	mov	r4, r1
   2179e:	4606      	mov	r6, r0
   217a0:	f7fc fec2 	bl	1e528 <__malloc_lock>
   217a4:	68bb      	ldr	r3, [r7, #8]
   217a6:	685d      	ldr	r5, [r3, #4]
   217a8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   217ac:	310f      	adds	r1, #15
   217ae:	f025 0503 	bic.w	r5, r5, #3
   217b2:	4429      	add	r1, r5
   217b4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   217b8:	f021 010f 	bic.w	r1, r1, #15
   217bc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   217c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   217c4:	db07      	blt.n	217d6 <_malloc_trim_r+0x3e>
   217c6:	2100      	movs	r1, #0
   217c8:	4630      	mov	r0, r6
   217ca:	f7fd f89f 	bl	1e90c <_sbrk_r>
   217ce:	68bb      	ldr	r3, [r7, #8]
   217d0:	442b      	add	r3, r5
   217d2:	4298      	cmp	r0, r3
   217d4:	d004      	beq.n	217e0 <_malloc_trim_r+0x48>
   217d6:	4630      	mov	r0, r6
   217d8:	f7fc feac 	bl	1e534 <__malloc_unlock>
   217dc:	2000      	movs	r0, #0
   217de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   217e0:	4261      	negs	r1, r4
   217e2:	4630      	mov	r0, r6
   217e4:	f7fd f892 	bl	1e90c <_sbrk_r>
   217e8:	3001      	adds	r0, #1
   217ea:	d00d      	beq.n	21808 <_malloc_trim_r+0x70>
   217ec:	4b10      	ldr	r3, [pc, #64]	; (21830 <_malloc_trim_r+0x98>)
   217ee:	68ba      	ldr	r2, [r7, #8]
   217f0:	6819      	ldr	r1, [r3, #0]
   217f2:	1b2d      	subs	r5, r5, r4
   217f4:	f045 0501 	orr.w	r5, r5, #1
   217f8:	4630      	mov	r0, r6
   217fa:	1b09      	subs	r1, r1, r4
   217fc:	6055      	str	r5, [r2, #4]
   217fe:	6019      	str	r1, [r3, #0]
   21800:	f7fc fe98 	bl	1e534 <__malloc_unlock>
   21804:	2001      	movs	r0, #1
   21806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21808:	2100      	movs	r1, #0
   2180a:	4630      	mov	r0, r6
   2180c:	f7fd f87e 	bl	1e90c <_sbrk_r>
   21810:	68ba      	ldr	r2, [r7, #8]
   21812:	1a83      	subs	r3, r0, r2
   21814:	2b0f      	cmp	r3, #15
   21816:	ddde      	ble.n	217d6 <_malloc_trim_r+0x3e>
   21818:	4c06      	ldr	r4, [pc, #24]	; (21834 <_malloc_trim_r+0x9c>)
   2181a:	4905      	ldr	r1, [pc, #20]	; (21830 <_malloc_trim_r+0x98>)
   2181c:	6824      	ldr	r4, [r4, #0]
   2181e:	f043 0301 	orr.w	r3, r3, #1
   21822:	1b00      	subs	r0, r0, r4
   21824:	6053      	str	r3, [r2, #4]
   21826:	6008      	str	r0, [r1, #0]
   21828:	e7d5      	b.n	217d6 <_malloc_trim_r+0x3e>
   2182a:	bf00      	nop
   2182c:	20000694 	.word	0x20000694
   21830:	200022a0 	.word	0x200022a0
   21834:	20000a9c 	.word	0x20000a9c

00021838 <_free_r>:
   21838:	2900      	cmp	r1, #0
   2183a:	d044      	beq.n	218c6 <_free_r+0x8e>
   2183c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21840:	460d      	mov	r5, r1
   21842:	4680      	mov	r8, r0
   21844:	f7fc fe70 	bl	1e528 <__malloc_lock>
   21848:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2184c:	4969      	ldr	r1, [pc, #420]	; (219f4 <_free_r+0x1bc>)
   2184e:	f027 0301 	bic.w	r3, r7, #1
   21852:	f1a5 0408 	sub.w	r4, r5, #8
   21856:	18e2      	adds	r2, r4, r3
   21858:	688e      	ldr	r6, [r1, #8]
   2185a:	6850      	ldr	r0, [r2, #4]
   2185c:	42b2      	cmp	r2, r6
   2185e:	f020 0003 	bic.w	r0, r0, #3
   21862:	d05e      	beq.n	21922 <_free_r+0xea>
   21864:	07fe      	lsls	r6, r7, #31
   21866:	6050      	str	r0, [r2, #4]
   21868:	d40b      	bmi.n	21882 <_free_r+0x4a>
   2186a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2186e:	1be4      	subs	r4, r4, r7
   21870:	f101 0e08 	add.w	lr, r1, #8
   21874:	68a5      	ldr	r5, [r4, #8]
   21876:	4575      	cmp	r5, lr
   21878:	443b      	add	r3, r7
   2187a:	d06d      	beq.n	21958 <_free_r+0x120>
   2187c:	68e7      	ldr	r7, [r4, #12]
   2187e:	60ef      	str	r7, [r5, #12]
   21880:	60bd      	str	r5, [r7, #8]
   21882:	1815      	adds	r5, r2, r0
   21884:	686d      	ldr	r5, [r5, #4]
   21886:	07ed      	lsls	r5, r5, #31
   21888:	d53e      	bpl.n	21908 <_free_r+0xd0>
   2188a:	f043 0201 	orr.w	r2, r3, #1
   2188e:	6062      	str	r2, [r4, #4]
   21890:	50e3      	str	r3, [r4, r3]
   21892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21896:	d217      	bcs.n	218c8 <_free_r+0x90>
   21898:	08db      	lsrs	r3, r3, #3
   2189a:	1c58      	adds	r0, r3, #1
   2189c:	109a      	asrs	r2, r3, #2
   2189e:	684d      	ldr	r5, [r1, #4]
   218a0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   218a4:	60a7      	str	r7, [r4, #8]
   218a6:	2301      	movs	r3, #1
   218a8:	4093      	lsls	r3, r2
   218aa:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   218ae:	432b      	orrs	r3, r5
   218b0:	3a08      	subs	r2, #8
   218b2:	60e2      	str	r2, [r4, #12]
   218b4:	604b      	str	r3, [r1, #4]
   218b6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   218ba:	60fc      	str	r4, [r7, #12]
   218bc:	4640      	mov	r0, r8
   218be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   218c2:	f7fc be37 	b.w	1e534 <__malloc_unlock>
   218c6:	4770      	bx	lr
   218c8:	0a5a      	lsrs	r2, r3, #9
   218ca:	2a04      	cmp	r2, #4
   218cc:	d852      	bhi.n	21974 <_free_r+0x13c>
   218ce:	099a      	lsrs	r2, r3, #6
   218d0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   218d4:	00ff      	lsls	r7, r7, #3
   218d6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   218da:	19c8      	adds	r0, r1, r7
   218dc:	59ca      	ldr	r2, [r1, r7]
   218de:	3808      	subs	r0, #8
   218e0:	4290      	cmp	r0, r2
   218e2:	d04f      	beq.n	21984 <_free_r+0x14c>
   218e4:	6851      	ldr	r1, [r2, #4]
   218e6:	f021 0103 	bic.w	r1, r1, #3
   218ea:	428b      	cmp	r3, r1
   218ec:	d232      	bcs.n	21954 <_free_r+0x11c>
   218ee:	6892      	ldr	r2, [r2, #8]
   218f0:	4290      	cmp	r0, r2
   218f2:	d1f7      	bne.n	218e4 <_free_r+0xac>
   218f4:	68c3      	ldr	r3, [r0, #12]
   218f6:	60a0      	str	r0, [r4, #8]
   218f8:	60e3      	str	r3, [r4, #12]
   218fa:	609c      	str	r4, [r3, #8]
   218fc:	60c4      	str	r4, [r0, #12]
   218fe:	4640      	mov	r0, r8
   21900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21904:	f7fc be16 	b.w	1e534 <__malloc_unlock>
   21908:	6895      	ldr	r5, [r2, #8]
   2190a:	4f3b      	ldr	r7, [pc, #236]	; (219f8 <_free_r+0x1c0>)
   2190c:	42bd      	cmp	r5, r7
   2190e:	4403      	add	r3, r0
   21910:	d040      	beq.n	21994 <_free_r+0x15c>
   21912:	68d0      	ldr	r0, [r2, #12]
   21914:	60e8      	str	r0, [r5, #12]
   21916:	f043 0201 	orr.w	r2, r3, #1
   2191a:	6085      	str	r5, [r0, #8]
   2191c:	6062      	str	r2, [r4, #4]
   2191e:	50e3      	str	r3, [r4, r3]
   21920:	e7b7      	b.n	21892 <_free_r+0x5a>
   21922:	07ff      	lsls	r7, r7, #31
   21924:	4403      	add	r3, r0
   21926:	d407      	bmi.n	21938 <_free_r+0x100>
   21928:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2192c:	1aa4      	subs	r4, r4, r2
   2192e:	4413      	add	r3, r2
   21930:	68a0      	ldr	r0, [r4, #8]
   21932:	68e2      	ldr	r2, [r4, #12]
   21934:	60c2      	str	r2, [r0, #12]
   21936:	6090      	str	r0, [r2, #8]
   21938:	4a30      	ldr	r2, [pc, #192]	; (219fc <_free_r+0x1c4>)
   2193a:	6812      	ldr	r2, [r2, #0]
   2193c:	f043 0001 	orr.w	r0, r3, #1
   21940:	4293      	cmp	r3, r2
   21942:	6060      	str	r0, [r4, #4]
   21944:	608c      	str	r4, [r1, #8]
   21946:	d3b9      	bcc.n	218bc <_free_r+0x84>
   21948:	4b2d      	ldr	r3, [pc, #180]	; (21a00 <_free_r+0x1c8>)
   2194a:	4640      	mov	r0, r8
   2194c:	6819      	ldr	r1, [r3, #0]
   2194e:	f7ff ff23 	bl	21798 <_malloc_trim_r>
   21952:	e7b3      	b.n	218bc <_free_r+0x84>
   21954:	4610      	mov	r0, r2
   21956:	e7cd      	b.n	218f4 <_free_r+0xbc>
   21958:	1811      	adds	r1, r2, r0
   2195a:	6849      	ldr	r1, [r1, #4]
   2195c:	07c9      	lsls	r1, r1, #31
   2195e:	d444      	bmi.n	219ea <_free_r+0x1b2>
   21960:	6891      	ldr	r1, [r2, #8]
   21962:	68d2      	ldr	r2, [r2, #12]
   21964:	60ca      	str	r2, [r1, #12]
   21966:	4403      	add	r3, r0
   21968:	f043 0001 	orr.w	r0, r3, #1
   2196c:	6091      	str	r1, [r2, #8]
   2196e:	6060      	str	r0, [r4, #4]
   21970:	50e3      	str	r3, [r4, r3]
   21972:	e7a3      	b.n	218bc <_free_r+0x84>
   21974:	2a14      	cmp	r2, #20
   21976:	d816      	bhi.n	219a6 <_free_r+0x16e>
   21978:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2197c:	00ff      	lsls	r7, r7, #3
   2197e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   21982:	e7aa      	b.n	218da <_free_r+0xa2>
   21984:	10aa      	asrs	r2, r5, #2
   21986:	2301      	movs	r3, #1
   21988:	684d      	ldr	r5, [r1, #4]
   2198a:	4093      	lsls	r3, r2
   2198c:	432b      	orrs	r3, r5
   2198e:	604b      	str	r3, [r1, #4]
   21990:	4603      	mov	r3, r0
   21992:	e7b0      	b.n	218f6 <_free_r+0xbe>
   21994:	f043 0201 	orr.w	r2, r3, #1
   21998:	614c      	str	r4, [r1, #20]
   2199a:	610c      	str	r4, [r1, #16]
   2199c:	60e5      	str	r5, [r4, #12]
   2199e:	60a5      	str	r5, [r4, #8]
   219a0:	6062      	str	r2, [r4, #4]
   219a2:	50e3      	str	r3, [r4, r3]
   219a4:	e78a      	b.n	218bc <_free_r+0x84>
   219a6:	2a54      	cmp	r2, #84	; 0x54
   219a8:	d806      	bhi.n	219b8 <_free_r+0x180>
   219aa:	0b1a      	lsrs	r2, r3, #12
   219ac:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   219b0:	00ff      	lsls	r7, r7, #3
   219b2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   219b6:	e790      	b.n	218da <_free_r+0xa2>
   219b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   219bc:	d806      	bhi.n	219cc <_free_r+0x194>
   219be:	0bda      	lsrs	r2, r3, #15
   219c0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   219c4:	00ff      	lsls	r7, r7, #3
   219c6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   219ca:	e786      	b.n	218da <_free_r+0xa2>
   219cc:	f240 5054 	movw	r0, #1364	; 0x554
   219d0:	4282      	cmp	r2, r0
   219d2:	d806      	bhi.n	219e2 <_free_r+0x1aa>
   219d4:	0c9a      	lsrs	r2, r3, #18
   219d6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   219da:	00ff      	lsls	r7, r7, #3
   219dc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   219e0:	e77b      	b.n	218da <_free_r+0xa2>
   219e2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   219e6:	257e      	movs	r5, #126	; 0x7e
   219e8:	e777      	b.n	218da <_free_r+0xa2>
   219ea:	f043 0101 	orr.w	r1, r3, #1
   219ee:	6061      	str	r1, [r4, #4]
   219f0:	6013      	str	r3, [r2, #0]
   219f2:	e763      	b.n	218bc <_free_r+0x84>
   219f4:	20000694 	.word	0x20000694
   219f8:	2000069c 	.word	0x2000069c
   219fc:	20000aa0 	.word	0x20000aa0
   21a00:	200022d0 	.word	0x200022d0

00021a04 <_fwalk_reent>:
   21a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21a08:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   21a0c:	d01f      	beq.n	21a4e <_fwalk_reent+0x4a>
   21a0e:	4688      	mov	r8, r1
   21a10:	4606      	mov	r6, r0
   21a12:	f04f 0900 	mov.w	r9, #0
   21a16:	687d      	ldr	r5, [r7, #4]
   21a18:	68bc      	ldr	r4, [r7, #8]
   21a1a:	3d01      	subs	r5, #1
   21a1c:	d411      	bmi.n	21a42 <_fwalk_reent+0x3e>
   21a1e:	89a3      	ldrh	r3, [r4, #12]
   21a20:	2b01      	cmp	r3, #1
   21a22:	f105 35ff 	add.w	r5, r5, #4294967295
   21a26:	d908      	bls.n	21a3a <_fwalk_reent+0x36>
   21a28:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21a2c:	3301      	adds	r3, #1
   21a2e:	4621      	mov	r1, r4
   21a30:	4630      	mov	r0, r6
   21a32:	d002      	beq.n	21a3a <_fwalk_reent+0x36>
   21a34:	47c0      	blx	r8
   21a36:	ea49 0900 	orr.w	r9, r9, r0
   21a3a:	1c6b      	adds	r3, r5, #1
   21a3c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   21a40:	d1ed      	bne.n	21a1e <_fwalk_reent+0x1a>
   21a42:	683f      	ldr	r7, [r7, #0]
   21a44:	2f00      	cmp	r7, #0
   21a46:	d1e6      	bne.n	21a16 <_fwalk_reent+0x12>
   21a48:	4648      	mov	r0, r9
   21a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21a4e:	46b9      	mov	r9, r7
   21a50:	4648      	mov	r0, r9
   21a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21a56:	bf00      	nop

00021a58 <_localeconv_r>:
   21a58:	4a04      	ldr	r2, [pc, #16]	; (21a6c <_localeconv_r+0x14>)
   21a5a:	4b05      	ldr	r3, [pc, #20]	; (21a70 <_localeconv_r+0x18>)
   21a5c:	6812      	ldr	r2, [r2, #0]
   21a5e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   21a60:	2800      	cmp	r0, #0
   21a62:	bf08      	it	eq
   21a64:	4618      	moveq	r0, r3
   21a66:	30f0      	adds	r0, #240	; 0xf0
   21a68:	4770      	bx	lr
   21a6a:	bf00      	nop
   21a6c:	200000f8 	.word	0x200000f8
   21a70:	20000528 	.word	0x20000528

00021a74 <__swhatbuf_r>:
   21a74:	b570      	push	{r4, r5, r6, lr}
   21a76:	460c      	mov	r4, r1
   21a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21a7c:	2900      	cmp	r1, #0
   21a7e:	b090      	sub	sp, #64	; 0x40
   21a80:	4615      	mov	r5, r2
   21a82:	461e      	mov	r6, r3
   21a84:	db14      	blt.n	21ab0 <__swhatbuf_r+0x3c>
   21a86:	aa01      	add	r2, sp, #4
   21a88:	f000 fd30 	bl	224ec <_fstat_r>
   21a8c:	2800      	cmp	r0, #0
   21a8e:	db0f      	blt.n	21ab0 <__swhatbuf_r+0x3c>
   21a90:	9a02      	ldr	r2, [sp, #8]
   21a92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   21a96:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   21a9a:	fab2 f282 	clz	r2, r2
   21a9e:	0952      	lsrs	r2, r2, #5
   21aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21aa4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21aa8:	6032      	str	r2, [r6, #0]
   21aaa:	602b      	str	r3, [r5, #0]
   21aac:	b010      	add	sp, #64	; 0x40
   21aae:	bd70      	pop	{r4, r5, r6, pc}
   21ab0:	89a2      	ldrh	r2, [r4, #12]
   21ab2:	2300      	movs	r3, #0
   21ab4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   21ab8:	6033      	str	r3, [r6, #0]
   21aba:	d004      	beq.n	21ac6 <__swhatbuf_r+0x52>
   21abc:	2240      	movs	r2, #64	; 0x40
   21abe:	4618      	mov	r0, r3
   21ac0:	602a      	str	r2, [r5, #0]
   21ac2:	b010      	add	sp, #64	; 0x40
   21ac4:	bd70      	pop	{r4, r5, r6, pc}
   21ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21aca:	602b      	str	r3, [r5, #0]
   21acc:	b010      	add	sp, #64	; 0x40
   21ace:	bd70      	pop	{r4, r5, r6, pc}

00021ad0 <__smakebuf_r>:
   21ad0:	898a      	ldrh	r2, [r1, #12]
   21ad2:	0792      	lsls	r2, r2, #30
   21ad4:	460b      	mov	r3, r1
   21ad6:	d506      	bpl.n	21ae6 <__smakebuf_r+0x16>
   21ad8:	f101 0243 	add.w	r2, r1, #67	; 0x43
   21adc:	2101      	movs	r1, #1
   21ade:	601a      	str	r2, [r3, #0]
   21ae0:	611a      	str	r2, [r3, #16]
   21ae2:	6159      	str	r1, [r3, #20]
   21ae4:	4770      	bx	lr
   21ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ae8:	b083      	sub	sp, #12
   21aea:	ab01      	add	r3, sp, #4
   21aec:	466a      	mov	r2, sp
   21aee:	460c      	mov	r4, r1
   21af0:	4606      	mov	r6, r0
   21af2:	f7ff ffbf 	bl	21a74 <__swhatbuf_r>
   21af6:	9900      	ldr	r1, [sp, #0]
   21af8:	4605      	mov	r5, r0
   21afa:	4630      	mov	r0, r6
   21afc:	f7fc f880 	bl	1dc00 <_malloc_r>
   21b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21b04:	b1d8      	cbz	r0, 21b3e <__smakebuf_r+0x6e>
   21b06:	9a01      	ldr	r2, [sp, #4]
   21b08:	4f15      	ldr	r7, [pc, #84]	; (21b60 <__smakebuf_r+0x90>)
   21b0a:	9900      	ldr	r1, [sp, #0]
   21b0c:	63f7      	str	r7, [r6, #60]	; 0x3c
   21b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21b12:	81a3      	strh	r3, [r4, #12]
   21b14:	6020      	str	r0, [r4, #0]
   21b16:	6120      	str	r0, [r4, #16]
   21b18:	6161      	str	r1, [r4, #20]
   21b1a:	b91a      	cbnz	r2, 21b24 <__smakebuf_r+0x54>
   21b1c:	432b      	orrs	r3, r5
   21b1e:	81a3      	strh	r3, [r4, #12]
   21b20:	b003      	add	sp, #12
   21b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b24:	4630      	mov	r0, r6
   21b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21b2a:	f000 fcf3 	bl	22514 <_isatty_r>
   21b2e:	b1a0      	cbz	r0, 21b5a <__smakebuf_r+0x8a>
   21b30:	89a3      	ldrh	r3, [r4, #12]
   21b32:	f023 0303 	bic.w	r3, r3, #3
   21b36:	f043 0301 	orr.w	r3, r3, #1
   21b3a:	b21b      	sxth	r3, r3
   21b3c:	e7ee      	b.n	21b1c <__smakebuf_r+0x4c>
   21b3e:	059a      	lsls	r2, r3, #22
   21b40:	d4ee      	bmi.n	21b20 <__smakebuf_r+0x50>
   21b42:	f023 0303 	bic.w	r3, r3, #3
   21b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21b4a:	f043 0302 	orr.w	r3, r3, #2
   21b4e:	2101      	movs	r1, #1
   21b50:	81a3      	strh	r3, [r4, #12]
   21b52:	6022      	str	r2, [r4, #0]
   21b54:	6122      	str	r2, [r4, #16]
   21b56:	6161      	str	r1, [r4, #20]
   21b58:	e7e2      	b.n	21b20 <__smakebuf_r+0x50>
   21b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21b5e:	e7dd      	b.n	21b1c <__smakebuf_r+0x4c>
   21b60:	00021699 	.word	0x00021699

00021b64 <_Balloc>:
   21b64:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21b66:	b570      	push	{r4, r5, r6, lr}
   21b68:	4605      	mov	r5, r0
   21b6a:	460c      	mov	r4, r1
   21b6c:	b14b      	cbz	r3, 21b82 <_Balloc+0x1e>
   21b6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   21b72:	b180      	cbz	r0, 21b96 <_Balloc+0x32>
   21b74:	6802      	ldr	r2, [r0, #0]
   21b76:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   21b7a:	2300      	movs	r3, #0
   21b7c:	6103      	str	r3, [r0, #16]
   21b7e:	60c3      	str	r3, [r0, #12]
   21b80:	bd70      	pop	{r4, r5, r6, pc}
   21b82:	2221      	movs	r2, #33	; 0x21
   21b84:	2104      	movs	r1, #4
   21b86:	f000 fc0d 	bl	223a4 <_calloc_r>
   21b8a:	64e8      	str	r0, [r5, #76]	; 0x4c
   21b8c:	4603      	mov	r3, r0
   21b8e:	2800      	cmp	r0, #0
   21b90:	d1ed      	bne.n	21b6e <_Balloc+0xa>
   21b92:	2000      	movs	r0, #0
   21b94:	bd70      	pop	{r4, r5, r6, pc}
   21b96:	2101      	movs	r1, #1
   21b98:	fa01 f604 	lsl.w	r6, r1, r4
   21b9c:	1d72      	adds	r2, r6, #5
   21b9e:	4628      	mov	r0, r5
   21ba0:	0092      	lsls	r2, r2, #2
   21ba2:	f000 fbff 	bl	223a4 <_calloc_r>
   21ba6:	2800      	cmp	r0, #0
   21ba8:	d0f3      	beq.n	21b92 <_Balloc+0x2e>
   21baa:	6044      	str	r4, [r0, #4]
   21bac:	6086      	str	r6, [r0, #8]
   21bae:	e7e4      	b.n	21b7a <_Balloc+0x16>

00021bb0 <_Bfree>:
   21bb0:	b131      	cbz	r1, 21bc0 <_Bfree+0x10>
   21bb2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21bb4:	684a      	ldr	r2, [r1, #4]
   21bb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21bba:	6008      	str	r0, [r1, #0]
   21bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21bc0:	4770      	bx	lr
   21bc2:	bf00      	nop

00021bc4 <__multadd>:
   21bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bc6:	690c      	ldr	r4, [r1, #16]
   21bc8:	b083      	sub	sp, #12
   21bca:	460d      	mov	r5, r1
   21bcc:	4606      	mov	r6, r0
   21bce:	f101 0e14 	add.w	lr, r1, #20
   21bd2:	2700      	movs	r7, #0
   21bd4:	f8de 0000 	ldr.w	r0, [lr]
   21bd8:	b281      	uxth	r1, r0
   21bda:	fb02 3301 	mla	r3, r2, r1, r3
   21bde:	0c01      	lsrs	r1, r0, #16
   21be0:	0c18      	lsrs	r0, r3, #16
   21be2:	fb02 0101 	mla	r1, r2, r1, r0
   21be6:	b29b      	uxth	r3, r3
   21be8:	3701      	adds	r7, #1
   21bea:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   21bee:	42bc      	cmp	r4, r7
   21bf0:	f84e 3b04 	str.w	r3, [lr], #4
   21bf4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21bf8:	dcec      	bgt.n	21bd4 <__multadd+0x10>
   21bfa:	b13b      	cbz	r3, 21c0c <__multadd+0x48>
   21bfc:	68aa      	ldr	r2, [r5, #8]
   21bfe:	4294      	cmp	r4, r2
   21c00:	da07      	bge.n	21c12 <__multadd+0x4e>
   21c02:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21c06:	3401      	adds	r4, #1
   21c08:	6153      	str	r3, [r2, #20]
   21c0a:	612c      	str	r4, [r5, #16]
   21c0c:	4628      	mov	r0, r5
   21c0e:	b003      	add	sp, #12
   21c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21c12:	6869      	ldr	r1, [r5, #4]
   21c14:	9301      	str	r3, [sp, #4]
   21c16:	3101      	adds	r1, #1
   21c18:	4630      	mov	r0, r6
   21c1a:	f7ff ffa3 	bl	21b64 <_Balloc>
   21c1e:	692a      	ldr	r2, [r5, #16]
   21c20:	3202      	adds	r2, #2
   21c22:	f105 010c 	add.w	r1, r5, #12
   21c26:	4607      	mov	r7, r0
   21c28:	0092      	lsls	r2, r2, #2
   21c2a:	300c      	adds	r0, #12
   21c2c:	f7fc fb30 	bl	1e290 <memcpy>
   21c30:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21c32:	6869      	ldr	r1, [r5, #4]
   21c34:	9b01      	ldr	r3, [sp, #4]
   21c36:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21c3a:	6028      	str	r0, [r5, #0]
   21c3c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21c40:	463d      	mov	r5, r7
   21c42:	e7de      	b.n	21c02 <__multadd+0x3e>

00021c44 <__hi0bits>:
   21c44:	0c02      	lsrs	r2, r0, #16
   21c46:	0412      	lsls	r2, r2, #16
   21c48:	4603      	mov	r3, r0
   21c4a:	b9b2      	cbnz	r2, 21c7a <__hi0bits+0x36>
   21c4c:	0403      	lsls	r3, r0, #16
   21c4e:	2010      	movs	r0, #16
   21c50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21c54:	bf04      	itt	eq
   21c56:	021b      	lsleq	r3, r3, #8
   21c58:	3008      	addeq	r0, #8
   21c5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21c5e:	bf04      	itt	eq
   21c60:	011b      	lsleq	r3, r3, #4
   21c62:	3004      	addeq	r0, #4
   21c64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   21c68:	bf04      	itt	eq
   21c6a:	009b      	lsleq	r3, r3, #2
   21c6c:	3002      	addeq	r0, #2
   21c6e:	2b00      	cmp	r3, #0
   21c70:	db02      	blt.n	21c78 <__hi0bits+0x34>
   21c72:	005b      	lsls	r3, r3, #1
   21c74:	d403      	bmi.n	21c7e <__hi0bits+0x3a>
   21c76:	2020      	movs	r0, #32
   21c78:	4770      	bx	lr
   21c7a:	2000      	movs	r0, #0
   21c7c:	e7e8      	b.n	21c50 <__hi0bits+0xc>
   21c7e:	3001      	adds	r0, #1
   21c80:	4770      	bx	lr
   21c82:	bf00      	nop

00021c84 <__lo0bits>:
   21c84:	6803      	ldr	r3, [r0, #0]
   21c86:	f013 0207 	ands.w	r2, r3, #7
   21c8a:	4601      	mov	r1, r0
   21c8c:	d007      	beq.n	21c9e <__lo0bits+0x1a>
   21c8e:	07da      	lsls	r2, r3, #31
   21c90:	d421      	bmi.n	21cd6 <__lo0bits+0x52>
   21c92:	0798      	lsls	r0, r3, #30
   21c94:	d421      	bmi.n	21cda <__lo0bits+0x56>
   21c96:	089b      	lsrs	r3, r3, #2
   21c98:	600b      	str	r3, [r1, #0]
   21c9a:	2002      	movs	r0, #2
   21c9c:	4770      	bx	lr
   21c9e:	b298      	uxth	r0, r3
   21ca0:	b198      	cbz	r0, 21cca <__lo0bits+0x46>
   21ca2:	4610      	mov	r0, r2
   21ca4:	f013 0fff 	tst.w	r3, #255	; 0xff
   21ca8:	bf04      	itt	eq
   21caa:	0a1b      	lsreq	r3, r3, #8
   21cac:	3008      	addeq	r0, #8
   21cae:	071a      	lsls	r2, r3, #28
   21cb0:	bf04      	itt	eq
   21cb2:	091b      	lsreq	r3, r3, #4
   21cb4:	3004      	addeq	r0, #4
   21cb6:	079a      	lsls	r2, r3, #30
   21cb8:	bf04      	itt	eq
   21cba:	089b      	lsreq	r3, r3, #2
   21cbc:	3002      	addeq	r0, #2
   21cbe:	07da      	lsls	r2, r3, #31
   21cc0:	d407      	bmi.n	21cd2 <__lo0bits+0x4e>
   21cc2:	085b      	lsrs	r3, r3, #1
   21cc4:	d104      	bne.n	21cd0 <__lo0bits+0x4c>
   21cc6:	2020      	movs	r0, #32
   21cc8:	4770      	bx	lr
   21cca:	0c1b      	lsrs	r3, r3, #16
   21ccc:	2010      	movs	r0, #16
   21cce:	e7e9      	b.n	21ca4 <__lo0bits+0x20>
   21cd0:	3001      	adds	r0, #1
   21cd2:	600b      	str	r3, [r1, #0]
   21cd4:	4770      	bx	lr
   21cd6:	2000      	movs	r0, #0
   21cd8:	4770      	bx	lr
   21cda:	085b      	lsrs	r3, r3, #1
   21cdc:	600b      	str	r3, [r1, #0]
   21cde:	2001      	movs	r0, #1
   21ce0:	4770      	bx	lr
   21ce2:	bf00      	nop

00021ce4 <__i2b>:
   21ce4:	b510      	push	{r4, lr}
   21ce6:	460c      	mov	r4, r1
   21ce8:	2101      	movs	r1, #1
   21cea:	f7ff ff3b 	bl	21b64 <_Balloc>
   21cee:	2201      	movs	r2, #1
   21cf0:	6144      	str	r4, [r0, #20]
   21cf2:	6102      	str	r2, [r0, #16]
   21cf4:	bd10      	pop	{r4, pc}
   21cf6:	bf00      	nop

00021cf8 <__multiply>:
   21cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cfc:	690c      	ldr	r4, [r1, #16]
   21cfe:	6915      	ldr	r5, [r2, #16]
   21d00:	42ac      	cmp	r4, r5
   21d02:	b083      	sub	sp, #12
   21d04:	468b      	mov	fp, r1
   21d06:	4616      	mov	r6, r2
   21d08:	da04      	bge.n	21d14 <__multiply+0x1c>
   21d0a:	4622      	mov	r2, r4
   21d0c:	46b3      	mov	fp, r6
   21d0e:	462c      	mov	r4, r5
   21d10:	460e      	mov	r6, r1
   21d12:	4615      	mov	r5, r2
   21d14:	f8db 3008 	ldr.w	r3, [fp, #8]
   21d18:	f8db 1004 	ldr.w	r1, [fp, #4]
   21d1c:	eb04 0805 	add.w	r8, r4, r5
   21d20:	4598      	cmp	r8, r3
   21d22:	bfc8      	it	gt
   21d24:	3101      	addgt	r1, #1
   21d26:	f7ff ff1d 	bl	21b64 <_Balloc>
   21d2a:	f100 0914 	add.w	r9, r0, #20
   21d2e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   21d32:	45d1      	cmp	r9, sl
   21d34:	9000      	str	r0, [sp, #0]
   21d36:	d205      	bcs.n	21d44 <__multiply+0x4c>
   21d38:	464b      	mov	r3, r9
   21d3a:	2100      	movs	r1, #0
   21d3c:	f843 1b04 	str.w	r1, [r3], #4
   21d40:	459a      	cmp	sl, r3
   21d42:	d8fb      	bhi.n	21d3c <__multiply+0x44>
   21d44:	f106 0c14 	add.w	ip, r6, #20
   21d48:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   21d4c:	f10b 0b14 	add.w	fp, fp, #20
   21d50:	459c      	cmp	ip, r3
   21d52:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   21d56:	d24c      	bcs.n	21df2 <__multiply+0xfa>
   21d58:	f8cd a004 	str.w	sl, [sp, #4]
   21d5c:	469a      	mov	sl, r3
   21d5e:	f8dc 5000 	ldr.w	r5, [ip]
   21d62:	b2af      	uxth	r7, r5
   21d64:	b1ef      	cbz	r7, 21da2 <__multiply+0xaa>
   21d66:	2100      	movs	r1, #0
   21d68:	464d      	mov	r5, r9
   21d6a:	465e      	mov	r6, fp
   21d6c:	460c      	mov	r4, r1
   21d6e:	f856 2b04 	ldr.w	r2, [r6], #4
   21d72:	6828      	ldr	r0, [r5, #0]
   21d74:	b293      	uxth	r3, r2
   21d76:	b281      	uxth	r1, r0
   21d78:	fb07 1303 	mla	r3, r7, r3, r1
   21d7c:	0c12      	lsrs	r2, r2, #16
   21d7e:	0c01      	lsrs	r1, r0, #16
   21d80:	4423      	add	r3, r4
   21d82:	fb07 1102 	mla	r1, r7, r2, r1
   21d86:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   21d8a:	b29b      	uxth	r3, r3
   21d8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21d90:	45b6      	cmp	lr, r6
   21d92:	f845 3b04 	str.w	r3, [r5], #4
   21d96:	ea4f 4411 	mov.w	r4, r1, lsr #16
   21d9a:	d8e8      	bhi.n	21d6e <__multiply+0x76>
   21d9c:	602c      	str	r4, [r5, #0]
   21d9e:	f8dc 5000 	ldr.w	r5, [ip]
   21da2:	0c2d      	lsrs	r5, r5, #16
   21da4:	d01d      	beq.n	21de2 <__multiply+0xea>
   21da6:	f8d9 3000 	ldr.w	r3, [r9]
   21daa:	4648      	mov	r0, r9
   21dac:	461c      	mov	r4, r3
   21dae:	4659      	mov	r1, fp
   21db0:	2200      	movs	r2, #0
   21db2:	880e      	ldrh	r6, [r1, #0]
   21db4:	0c24      	lsrs	r4, r4, #16
   21db6:	fb05 4406 	mla	r4, r5, r6, r4
   21dba:	4422      	add	r2, r4
   21dbc:	b29b      	uxth	r3, r3
   21dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21dc2:	f840 3b04 	str.w	r3, [r0], #4
   21dc6:	f851 3b04 	ldr.w	r3, [r1], #4
   21dca:	6804      	ldr	r4, [r0, #0]
   21dcc:	0c1b      	lsrs	r3, r3, #16
   21dce:	b2a6      	uxth	r6, r4
   21dd0:	fb05 6303 	mla	r3, r5, r3, r6
   21dd4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   21dd8:	458e      	cmp	lr, r1
   21dda:	ea4f 4213 	mov.w	r2, r3, lsr #16
   21dde:	d8e8      	bhi.n	21db2 <__multiply+0xba>
   21de0:	6003      	str	r3, [r0, #0]
   21de2:	f10c 0c04 	add.w	ip, ip, #4
   21de6:	45e2      	cmp	sl, ip
   21de8:	f109 0904 	add.w	r9, r9, #4
   21dec:	d8b7      	bhi.n	21d5e <__multiply+0x66>
   21dee:	f8dd a004 	ldr.w	sl, [sp, #4]
   21df2:	f1b8 0f00 	cmp.w	r8, #0
   21df6:	dd0b      	ble.n	21e10 <__multiply+0x118>
   21df8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   21dfc:	f1aa 0a04 	sub.w	sl, sl, #4
   21e00:	b11b      	cbz	r3, 21e0a <__multiply+0x112>
   21e02:	e005      	b.n	21e10 <__multiply+0x118>
   21e04:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   21e08:	b913      	cbnz	r3, 21e10 <__multiply+0x118>
   21e0a:	f1b8 0801 	subs.w	r8, r8, #1
   21e0e:	d1f9      	bne.n	21e04 <__multiply+0x10c>
   21e10:	9800      	ldr	r0, [sp, #0]
   21e12:	f8c0 8010 	str.w	r8, [r0, #16]
   21e16:	b003      	add	sp, #12
   21e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021e1c <__pow5mult>:
   21e1c:	f012 0303 	ands.w	r3, r2, #3
   21e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e24:	4614      	mov	r4, r2
   21e26:	4607      	mov	r7, r0
   21e28:	d12e      	bne.n	21e88 <__pow5mult+0x6c>
   21e2a:	460d      	mov	r5, r1
   21e2c:	10a4      	asrs	r4, r4, #2
   21e2e:	d01c      	beq.n	21e6a <__pow5mult+0x4e>
   21e30:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   21e32:	b396      	cbz	r6, 21e9a <__pow5mult+0x7e>
   21e34:	07e3      	lsls	r3, r4, #31
   21e36:	f04f 0800 	mov.w	r8, #0
   21e3a:	d406      	bmi.n	21e4a <__pow5mult+0x2e>
   21e3c:	1064      	asrs	r4, r4, #1
   21e3e:	d014      	beq.n	21e6a <__pow5mult+0x4e>
   21e40:	6830      	ldr	r0, [r6, #0]
   21e42:	b1a8      	cbz	r0, 21e70 <__pow5mult+0x54>
   21e44:	4606      	mov	r6, r0
   21e46:	07e3      	lsls	r3, r4, #31
   21e48:	d5f8      	bpl.n	21e3c <__pow5mult+0x20>
   21e4a:	4632      	mov	r2, r6
   21e4c:	4629      	mov	r1, r5
   21e4e:	4638      	mov	r0, r7
   21e50:	f7ff ff52 	bl	21cf8 <__multiply>
   21e54:	b1b5      	cbz	r5, 21e84 <__pow5mult+0x68>
   21e56:	686a      	ldr	r2, [r5, #4]
   21e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21e5a:	1064      	asrs	r4, r4, #1
   21e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21e60:	6029      	str	r1, [r5, #0]
   21e62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   21e66:	4605      	mov	r5, r0
   21e68:	d1ea      	bne.n	21e40 <__pow5mult+0x24>
   21e6a:	4628      	mov	r0, r5
   21e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21e70:	4632      	mov	r2, r6
   21e72:	4631      	mov	r1, r6
   21e74:	4638      	mov	r0, r7
   21e76:	f7ff ff3f 	bl	21cf8 <__multiply>
   21e7a:	6030      	str	r0, [r6, #0]
   21e7c:	f8c0 8000 	str.w	r8, [r0]
   21e80:	4606      	mov	r6, r0
   21e82:	e7e0      	b.n	21e46 <__pow5mult+0x2a>
   21e84:	4605      	mov	r5, r0
   21e86:	e7d9      	b.n	21e3c <__pow5mult+0x20>
   21e88:	1e5a      	subs	r2, r3, #1
   21e8a:	4d0b      	ldr	r5, [pc, #44]	; (21eb8 <__pow5mult+0x9c>)
   21e8c:	2300      	movs	r3, #0
   21e8e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   21e92:	f7ff fe97 	bl	21bc4 <__multadd>
   21e96:	4605      	mov	r5, r0
   21e98:	e7c8      	b.n	21e2c <__pow5mult+0x10>
   21e9a:	2101      	movs	r1, #1
   21e9c:	4638      	mov	r0, r7
   21e9e:	f7ff fe61 	bl	21b64 <_Balloc>
   21ea2:	f240 2171 	movw	r1, #625	; 0x271
   21ea6:	2201      	movs	r2, #1
   21ea8:	2300      	movs	r3, #0
   21eaa:	6141      	str	r1, [r0, #20]
   21eac:	6102      	str	r2, [r0, #16]
   21eae:	4606      	mov	r6, r0
   21eb0:	64b8      	str	r0, [r7, #72]	; 0x48
   21eb2:	6003      	str	r3, [r0, #0]
   21eb4:	e7be      	b.n	21e34 <__pow5mult+0x18>
   21eb6:	bf00      	nop
   21eb8:	00024e40 	.word	0x00024e40

00021ebc <__lshift>:
   21ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21ec0:	4691      	mov	r9, r2
   21ec2:	690a      	ldr	r2, [r1, #16]
   21ec4:	688b      	ldr	r3, [r1, #8]
   21ec6:	ea4f 1469 	mov.w	r4, r9, asr #5
   21eca:	eb04 0802 	add.w	r8, r4, r2
   21ece:	f108 0501 	add.w	r5, r8, #1
   21ed2:	429d      	cmp	r5, r3
   21ed4:	460e      	mov	r6, r1
   21ed6:	4607      	mov	r7, r0
   21ed8:	6849      	ldr	r1, [r1, #4]
   21eda:	dd04      	ble.n	21ee6 <__lshift+0x2a>
   21edc:	005b      	lsls	r3, r3, #1
   21ede:	429d      	cmp	r5, r3
   21ee0:	f101 0101 	add.w	r1, r1, #1
   21ee4:	dcfa      	bgt.n	21edc <__lshift+0x20>
   21ee6:	4638      	mov	r0, r7
   21ee8:	f7ff fe3c 	bl	21b64 <_Balloc>
   21eec:	2c00      	cmp	r4, #0
   21eee:	f100 0314 	add.w	r3, r0, #20
   21ef2:	dd06      	ble.n	21f02 <__lshift+0x46>
   21ef4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   21ef8:	2100      	movs	r1, #0
   21efa:	f843 1b04 	str.w	r1, [r3], #4
   21efe:	429a      	cmp	r2, r3
   21f00:	d1fb      	bne.n	21efa <__lshift+0x3e>
   21f02:	6934      	ldr	r4, [r6, #16]
   21f04:	f106 0114 	add.w	r1, r6, #20
   21f08:	f019 091f 	ands.w	r9, r9, #31
   21f0c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   21f10:	d01d      	beq.n	21f4e <__lshift+0x92>
   21f12:	f1c9 0c20 	rsb	ip, r9, #32
   21f16:	2200      	movs	r2, #0
   21f18:	680c      	ldr	r4, [r1, #0]
   21f1a:	fa04 f409 	lsl.w	r4, r4, r9
   21f1e:	4314      	orrs	r4, r2
   21f20:	f843 4b04 	str.w	r4, [r3], #4
   21f24:	f851 2b04 	ldr.w	r2, [r1], #4
   21f28:	458e      	cmp	lr, r1
   21f2a:	fa22 f20c 	lsr.w	r2, r2, ip
   21f2e:	d8f3      	bhi.n	21f18 <__lshift+0x5c>
   21f30:	601a      	str	r2, [r3, #0]
   21f32:	b10a      	cbz	r2, 21f38 <__lshift+0x7c>
   21f34:	f108 0502 	add.w	r5, r8, #2
   21f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21f3a:	6872      	ldr	r2, [r6, #4]
   21f3c:	3d01      	subs	r5, #1
   21f3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21f42:	6105      	str	r5, [r0, #16]
   21f44:	6031      	str	r1, [r6, #0]
   21f46:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   21f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21f4e:	3b04      	subs	r3, #4
   21f50:	f851 2b04 	ldr.w	r2, [r1], #4
   21f54:	f843 2f04 	str.w	r2, [r3, #4]!
   21f58:	458e      	cmp	lr, r1
   21f5a:	d8f9      	bhi.n	21f50 <__lshift+0x94>
   21f5c:	e7ec      	b.n	21f38 <__lshift+0x7c>
   21f5e:	bf00      	nop

00021f60 <__mcmp>:
   21f60:	b430      	push	{r4, r5}
   21f62:	690b      	ldr	r3, [r1, #16]
   21f64:	4605      	mov	r5, r0
   21f66:	6900      	ldr	r0, [r0, #16]
   21f68:	1ac0      	subs	r0, r0, r3
   21f6a:	d10f      	bne.n	21f8c <__mcmp+0x2c>
   21f6c:	009b      	lsls	r3, r3, #2
   21f6e:	3514      	adds	r5, #20
   21f70:	3114      	adds	r1, #20
   21f72:	4419      	add	r1, r3
   21f74:	442b      	add	r3, r5
   21f76:	e001      	b.n	21f7c <__mcmp+0x1c>
   21f78:	429d      	cmp	r5, r3
   21f7a:	d207      	bcs.n	21f8c <__mcmp+0x2c>
   21f7c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   21f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   21f84:	4294      	cmp	r4, r2
   21f86:	d0f7      	beq.n	21f78 <__mcmp+0x18>
   21f88:	d302      	bcc.n	21f90 <__mcmp+0x30>
   21f8a:	2001      	movs	r0, #1
   21f8c:	bc30      	pop	{r4, r5}
   21f8e:	4770      	bx	lr
   21f90:	f04f 30ff 	mov.w	r0, #4294967295
   21f94:	e7fa      	b.n	21f8c <__mcmp+0x2c>
   21f96:	bf00      	nop

00021f98 <__mdiff>:
   21f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f9c:	690f      	ldr	r7, [r1, #16]
   21f9e:	460e      	mov	r6, r1
   21fa0:	6911      	ldr	r1, [r2, #16]
   21fa2:	1a7f      	subs	r7, r7, r1
   21fa4:	2f00      	cmp	r7, #0
   21fa6:	4690      	mov	r8, r2
   21fa8:	d117      	bne.n	21fda <__mdiff+0x42>
   21faa:	0089      	lsls	r1, r1, #2
   21fac:	f106 0514 	add.w	r5, r6, #20
   21fb0:	f102 0e14 	add.w	lr, r2, #20
   21fb4:	186b      	adds	r3, r5, r1
   21fb6:	4471      	add	r1, lr
   21fb8:	e001      	b.n	21fbe <__mdiff+0x26>
   21fba:	429d      	cmp	r5, r3
   21fbc:	d25c      	bcs.n	22078 <__mdiff+0xe0>
   21fbe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   21fc2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   21fc6:	42a2      	cmp	r2, r4
   21fc8:	d0f7      	beq.n	21fba <__mdiff+0x22>
   21fca:	d25e      	bcs.n	2208a <__mdiff+0xf2>
   21fcc:	4633      	mov	r3, r6
   21fce:	462c      	mov	r4, r5
   21fd0:	4646      	mov	r6, r8
   21fd2:	4675      	mov	r5, lr
   21fd4:	4698      	mov	r8, r3
   21fd6:	2701      	movs	r7, #1
   21fd8:	e005      	b.n	21fe6 <__mdiff+0x4e>
   21fda:	db58      	blt.n	2208e <__mdiff+0xf6>
   21fdc:	f106 0514 	add.w	r5, r6, #20
   21fe0:	f108 0414 	add.w	r4, r8, #20
   21fe4:	2700      	movs	r7, #0
   21fe6:	6871      	ldr	r1, [r6, #4]
   21fe8:	f7ff fdbc 	bl	21b64 <_Balloc>
   21fec:	f8d8 3010 	ldr.w	r3, [r8, #16]
   21ff0:	6936      	ldr	r6, [r6, #16]
   21ff2:	60c7      	str	r7, [r0, #12]
   21ff4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   21ff8:	46a6      	mov	lr, r4
   21ffa:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   21ffe:	f100 0414 	add.w	r4, r0, #20
   22002:	2300      	movs	r3, #0
   22004:	f85e 1b04 	ldr.w	r1, [lr], #4
   22008:	f855 8b04 	ldr.w	r8, [r5], #4
   2200c:	b28a      	uxth	r2, r1
   2200e:	fa13 f388 	uxtah	r3, r3, r8
   22012:	0c09      	lsrs	r1, r1, #16
   22014:	1a9a      	subs	r2, r3, r2
   22016:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2201a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2201e:	b292      	uxth	r2, r2
   22020:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   22024:	45f4      	cmp	ip, lr
   22026:	f844 2b04 	str.w	r2, [r4], #4
   2202a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2202e:	d8e9      	bhi.n	22004 <__mdiff+0x6c>
   22030:	42af      	cmp	r7, r5
   22032:	d917      	bls.n	22064 <__mdiff+0xcc>
   22034:	46a4      	mov	ip, r4
   22036:	46ae      	mov	lr, r5
   22038:	f85e 2b04 	ldr.w	r2, [lr], #4
   2203c:	fa13 f382 	uxtah	r3, r3, r2
   22040:	1419      	asrs	r1, r3, #16
   22042:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   22046:	b29b      	uxth	r3, r3
   22048:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2204c:	4577      	cmp	r7, lr
   2204e:	f84c 2b04 	str.w	r2, [ip], #4
   22052:	ea4f 4321 	mov.w	r3, r1, asr #16
   22056:	d8ef      	bhi.n	22038 <__mdiff+0xa0>
   22058:	43ed      	mvns	r5, r5
   2205a:	442f      	add	r7, r5
   2205c:	f027 0703 	bic.w	r7, r7, #3
   22060:	3704      	adds	r7, #4
   22062:	443c      	add	r4, r7
   22064:	3c04      	subs	r4, #4
   22066:	b922      	cbnz	r2, 22072 <__mdiff+0xda>
   22068:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2206c:	3e01      	subs	r6, #1
   2206e:	2b00      	cmp	r3, #0
   22070:	d0fa      	beq.n	22068 <__mdiff+0xd0>
   22072:	6106      	str	r6, [r0, #16]
   22074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22078:	2100      	movs	r1, #0
   2207a:	f7ff fd73 	bl	21b64 <_Balloc>
   2207e:	2201      	movs	r2, #1
   22080:	2300      	movs	r3, #0
   22082:	6102      	str	r2, [r0, #16]
   22084:	6143      	str	r3, [r0, #20]
   22086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2208a:	4674      	mov	r4, lr
   2208c:	e7ab      	b.n	21fe6 <__mdiff+0x4e>
   2208e:	4633      	mov	r3, r6
   22090:	f106 0414 	add.w	r4, r6, #20
   22094:	f102 0514 	add.w	r5, r2, #20
   22098:	4616      	mov	r6, r2
   2209a:	2701      	movs	r7, #1
   2209c:	4698      	mov	r8, r3
   2209e:	e7a2      	b.n	21fe6 <__mdiff+0x4e>

000220a0 <__d2b>:
   220a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   220a4:	ec57 6b10 	vmov	r6, r7, d0
   220a8:	b083      	sub	sp, #12
   220aa:	4688      	mov	r8, r1
   220ac:	2101      	movs	r1, #1
   220ae:	463c      	mov	r4, r7
   220b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
   220b4:	4617      	mov	r7, r2
   220b6:	f7ff fd55 	bl	21b64 <_Balloc>
   220ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
   220be:	4681      	mov	r9, r0
   220c0:	b10d      	cbz	r5, 220c6 <__d2b+0x26>
   220c2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   220c6:	9401      	str	r4, [sp, #4]
   220c8:	b31e      	cbz	r6, 22112 <__d2b+0x72>
   220ca:	a802      	add	r0, sp, #8
   220cc:	f840 6d08 	str.w	r6, [r0, #-8]!
   220d0:	f7ff fdd8 	bl	21c84 <__lo0bits>
   220d4:	2800      	cmp	r0, #0
   220d6:	d134      	bne.n	22142 <__d2b+0xa2>
   220d8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   220dc:	f8c9 2014 	str.w	r2, [r9, #20]
   220e0:	2b00      	cmp	r3, #0
   220e2:	bf0c      	ite	eq
   220e4:	2101      	moveq	r1, #1
   220e6:	2102      	movne	r1, #2
   220e8:	f8c9 3018 	str.w	r3, [r9, #24]
   220ec:	f8c9 1010 	str.w	r1, [r9, #16]
   220f0:	b9dd      	cbnz	r5, 2212a <__d2b+0x8a>
   220f2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   220f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   220fa:	f8c8 0000 	str.w	r0, [r8]
   220fe:	6918      	ldr	r0, [r3, #16]
   22100:	f7ff fda0 	bl	21c44 <__hi0bits>
   22104:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   22108:	6038      	str	r0, [r7, #0]
   2210a:	4648      	mov	r0, r9
   2210c:	b003      	add	sp, #12
   2210e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22112:	a801      	add	r0, sp, #4
   22114:	f7ff fdb6 	bl	21c84 <__lo0bits>
   22118:	9b01      	ldr	r3, [sp, #4]
   2211a:	f8c9 3014 	str.w	r3, [r9, #20]
   2211e:	2101      	movs	r1, #1
   22120:	3020      	adds	r0, #32
   22122:	f8c9 1010 	str.w	r1, [r9, #16]
   22126:	2d00      	cmp	r5, #0
   22128:	d0e3      	beq.n	220f2 <__d2b+0x52>
   2212a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2212e:	4405      	add	r5, r0
   22130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   22134:	f8c8 5000 	str.w	r5, [r8]
   22138:	6038      	str	r0, [r7, #0]
   2213a:	4648      	mov	r0, r9
   2213c:	b003      	add	sp, #12
   2213e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22142:	e89d 000a 	ldmia.w	sp, {r1, r3}
   22146:	f1c0 0220 	rsb	r2, r0, #32
   2214a:	fa03 f202 	lsl.w	r2, r3, r2
   2214e:	430a      	orrs	r2, r1
   22150:	40c3      	lsrs	r3, r0
   22152:	9301      	str	r3, [sp, #4]
   22154:	f8c9 2014 	str.w	r2, [r9, #20]
   22158:	e7c2      	b.n	220e0 <__d2b+0x40>
   2215a:	bf00      	nop

0002215c <__sread>:
   2215c:	b510      	push	{r4, lr}
   2215e:	460c      	mov	r4, r1
   22160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22164:	f000 f9fe 	bl	22564 <_read_r>
   22168:	2800      	cmp	r0, #0
   2216a:	db03      	blt.n	22174 <__sread+0x18>
   2216c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2216e:	4403      	add	r3, r0
   22170:	6523      	str	r3, [r4, #80]	; 0x50
   22172:	bd10      	pop	{r4, pc}
   22174:	89a3      	ldrh	r3, [r4, #12]
   22176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2217a:	81a3      	strh	r3, [r4, #12]
   2217c:	bd10      	pop	{r4, pc}
   2217e:	bf00      	nop

00022180 <__swrite>:
   22180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22184:	4616      	mov	r6, r2
   22186:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2218a:	461f      	mov	r7, r3
   2218c:	05d3      	lsls	r3, r2, #23
   2218e:	460c      	mov	r4, r1
   22190:	4605      	mov	r5, r0
   22192:	d507      	bpl.n	221a4 <__swrite+0x24>
   22194:	2200      	movs	r2, #0
   22196:	2302      	movs	r3, #2
   22198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2219c:	f000 f9cc 	bl	22538 <_lseek_r>
   221a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   221a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   221a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   221ac:	81a2      	strh	r2, [r4, #12]
   221ae:	463b      	mov	r3, r7
   221b0:	4632      	mov	r2, r6
   221b2:	4628      	mov	r0, r5
   221b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   221b8:	f7fe b960 	b.w	2047c <_write_r>

000221bc <__sseek>:
   221bc:	b510      	push	{r4, lr}
   221be:	460c      	mov	r4, r1
   221c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   221c4:	f000 f9b8 	bl	22538 <_lseek_r>
   221c8:	89a3      	ldrh	r3, [r4, #12]
   221ca:	1c42      	adds	r2, r0, #1
   221cc:	bf0e      	itee	eq
   221ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   221d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   221d6:	6520      	strne	r0, [r4, #80]	; 0x50
   221d8:	81a3      	strh	r3, [r4, #12]
   221da:	bd10      	pop	{r4, pc}

000221dc <__sclose>:
   221dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   221e0:	f000 b910 	b.w	22404 <_close_r>

000221e4 <__ssprint_r>:
   221e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221e8:	6893      	ldr	r3, [r2, #8]
   221ea:	b083      	sub	sp, #12
   221ec:	4690      	mov	r8, r2
   221ee:	2b00      	cmp	r3, #0
   221f0:	d070      	beq.n	222d4 <__ssprint_r+0xf0>
   221f2:	4682      	mov	sl, r0
   221f4:	460c      	mov	r4, r1
   221f6:	6817      	ldr	r7, [r2, #0]
   221f8:	688d      	ldr	r5, [r1, #8]
   221fa:	6808      	ldr	r0, [r1, #0]
   221fc:	e042      	b.n	22284 <__ssprint_r+0xa0>
   221fe:	89a3      	ldrh	r3, [r4, #12]
   22200:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22204:	d02e      	beq.n	22264 <__ssprint_r+0x80>
   22206:	6965      	ldr	r5, [r4, #20]
   22208:	6921      	ldr	r1, [r4, #16]
   2220a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2220e:	eba0 0b01 	sub.w	fp, r0, r1
   22212:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22216:	f10b 0001 	add.w	r0, fp, #1
   2221a:	106d      	asrs	r5, r5, #1
   2221c:	4430      	add	r0, r6
   2221e:	42a8      	cmp	r0, r5
   22220:	462a      	mov	r2, r5
   22222:	bf84      	itt	hi
   22224:	4605      	movhi	r5, r0
   22226:	462a      	movhi	r2, r5
   22228:	055b      	lsls	r3, r3, #21
   2222a:	d538      	bpl.n	2229e <__ssprint_r+0xba>
   2222c:	4611      	mov	r1, r2
   2222e:	4650      	mov	r0, sl
   22230:	f7fb fce6 	bl	1dc00 <_malloc_r>
   22234:	2800      	cmp	r0, #0
   22236:	d03c      	beq.n	222b2 <__ssprint_r+0xce>
   22238:	465a      	mov	r2, fp
   2223a:	6921      	ldr	r1, [r4, #16]
   2223c:	9001      	str	r0, [sp, #4]
   2223e:	f7fc f827 	bl	1e290 <memcpy>
   22242:	89a2      	ldrh	r2, [r4, #12]
   22244:	9b01      	ldr	r3, [sp, #4]
   22246:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2224a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2224e:	81a2      	strh	r2, [r4, #12]
   22250:	eba5 020b 	sub.w	r2, r5, fp
   22254:	eb03 000b 	add.w	r0, r3, fp
   22258:	6165      	str	r5, [r4, #20]
   2225a:	6123      	str	r3, [r4, #16]
   2225c:	6020      	str	r0, [r4, #0]
   2225e:	60a2      	str	r2, [r4, #8]
   22260:	4635      	mov	r5, r6
   22262:	46b3      	mov	fp, r6
   22264:	465a      	mov	r2, fp
   22266:	4649      	mov	r1, r9
   22268:	f7fc f8ac 	bl	1e3c4 <memmove>
   2226c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22270:	68a2      	ldr	r2, [r4, #8]
   22272:	6820      	ldr	r0, [r4, #0]
   22274:	1b55      	subs	r5, r2, r5
   22276:	4458      	add	r0, fp
   22278:	1b9e      	subs	r6, r3, r6
   2227a:	60a5      	str	r5, [r4, #8]
   2227c:	6020      	str	r0, [r4, #0]
   2227e:	f8c8 6008 	str.w	r6, [r8, #8]
   22282:	b33e      	cbz	r6, 222d4 <__ssprint_r+0xf0>
   22284:	687e      	ldr	r6, [r7, #4]
   22286:	463b      	mov	r3, r7
   22288:	3708      	adds	r7, #8
   2228a:	2e00      	cmp	r6, #0
   2228c:	d0fa      	beq.n	22284 <__ssprint_r+0xa0>
   2228e:	42ae      	cmp	r6, r5
   22290:	f8d3 9000 	ldr.w	r9, [r3]
   22294:	46ab      	mov	fp, r5
   22296:	d2b2      	bcs.n	221fe <__ssprint_r+0x1a>
   22298:	4635      	mov	r5, r6
   2229a:	46b3      	mov	fp, r6
   2229c:	e7e2      	b.n	22264 <__ssprint_r+0x80>
   2229e:	4650      	mov	r0, sl
   222a0:	f7fc f98e 	bl	1e5c0 <_realloc_r>
   222a4:	4603      	mov	r3, r0
   222a6:	2800      	cmp	r0, #0
   222a8:	d1d2      	bne.n	22250 <__ssprint_r+0x6c>
   222aa:	6921      	ldr	r1, [r4, #16]
   222ac:	4650      	mov	r0, sl
   222ae:	f7ff fac3 	bl	21838 <_free_r>
   222b2:	230c      	movs	r3, #12
   222b4:	f8ca 3000 	str.w	r3, [sl]
   222b8:	89a3      	ldrh	r3, [r4, #12]
   222ba:	2200      	movs	r2, #0
   222bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   222c0:	f04f 30ff 	mov.w	r0, #4294967295
   222c4:	81a3      	strh	r3, [r4, #12]
   222c6:	f8c8 2008 	str.w	r2, [r8, #8]
   222ca:	f8c8 2004 	str.w	r2, [r8, #4]
   222ce:	b003      	add	sp, #12
   222d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222d4:	2000      	movs	r0, #0
   222d6:	f8c8 0004 	str.w	r0, [r8, #4]
   222da:	b003      	add	sp, #12
   222dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000222e0 <__register_exitproc>:
   222e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   222e4:	4d2c      	ldr	r5, [pc, #176]	; (22398 <__register_exitproc+0xb8>)
   222e6:	4606      	mov	r6, r0
   222e8:	6828      	ldr	r0, [r5, #0]
   222ea:	4698      	mov	r8, r3
   222ec:	460f      	mov	r7, r1
   222ee:	4691      	mov	r9, r2
   222f0:	f7fb fc72 	bl	1dbd8 <__retarget_lock_acquire_recursive>
   222f4:	4b29      	ldr	r3, [pc, #164]	; (2239c <__register_exitproc+0xbc>)
   222f6:	681c      	ldr	r4, [r3, #0]
   222f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   222fc:	2b00      	cmp	r3, #0
   222fe:	d03e      	beq.n	2237e <__register_exitproc+0x9e>
   22300:	685a      	ldr	r2, [r3, #4]
   22302:	2a1f      	cmp	r2, #31
   22304:	dc1c      	bgt.n	22340 <__register_exitproc+0x60>
   22306:	f102 0e01 	add.w	lr, r2, #1
   2230a:	b176      	cbz	r6, 2232a <__register_exitproc+0x4a>
   2230c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22310:	2401      	movs	r4, #1
   22312:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22316:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2231a:	4094      	lsls	r4, r2
   2231c:	4320      	orrs	r0, r4
   2231e:	2e02      	cmp	r6, #2
   22320:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   22324:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   22328:	d023      	beq.n	22372 <__register_exitproc+0x92>
   2232a:	3202      	adds	r2, #2
   2232c:	f8c3 e004 	str.w	lr, [r3, #4]
   22330:	6828      	ldr	r0, [r5, #0]
   22332:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   22336:	f7fb fc51 	bl	1dbdc <__retarget_lock_release_recursive>
   2233a:	2000      	movs	r0, #0
   2233c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22340:	4b17      	ldr	r3, [pc, #92]	; (223a0 <__register_exitproc+0xc0>)
   22342:	b30b      	cbz	r3, 22388 <__register_exitproc+0xa8>
   22344:	f44f 70c8 	mov.w	r0, #400	; 0x190
   22348:	f7fb fc4a 	bl	1dbe0 <malloc>
   2234c:	4603      	mov	r3, r0
   2234e:	b1d8      	cbz	r0, 22388 <__register_exitproc+0xa8>
   22350:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   22354:	6002      	str	r2, [r0, #0]
   22356:	2100      	movs	r1, #0
   22358:	6041      	str	r1, [r0, #4]
   2235a:	460a      	mov	r2, r1
   2235c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   22360:	f04f 0e01 	mov.w	lr, #1
   22364:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   22368:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   2236c:	2e00      	cmp	r6, #0
   2236e:	d0dc      	beq.n	2232a <__register_exitproc+0x4a>
   22370:	e7cc      	b.n	2230c <__register_exitproc+0x2c>
   22372:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   22376:	430c      	orrs	r4, r1
   22378:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   2237c:	e7d5      	b.n	2232a <__register_exitproc+0x4a>
   2237e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   22382:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22386:	e7bb      	b.n	22300 <__register_exitproc+0x20>
   22388:	6828      	ldr	r0, [r5, #0]
   2238a:	f7fb fc27 	bl	1dbdc <__retarget_lock_release_recursive>
   2238e:	f04f 30ff 	mov.w	r0, #4294967295
   22392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22396:	bf00      	nop
   22398:	20000aa4 	.word	0x20000aa4
   2239c:	00024ba0 	.word	0x00024ba0
   223a0:	0001dbe1 	.word	0x0001dbe1

000223a4 <_calloc_r>:
   223a4:	b510      	push	{r4, lr}
   223a6:	fb02 f101 	mul.w	r1, r2, r1
   223aa:	f7fb fc29 	bl	1dc00 <_malloc_r>
   223ae:	4604      	mov	r4, r0
   223b0:	b1d8      	cbz	r0, 223ea <_calloc_r+0x46>
   223b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   223b6:	f022 0203 	bic.w	r2, r2, #3
   223ba:	3a04      	subs	r2, #4
   223bc:	2a24      	cmp	r2, #36	; 0x24
   223be:	d818      	bhi.n	223f2 <_calloc_r+0x4e>
   223c0:	2a13      	cmp	r2, #19
   223c2:	d914      	bls.n	223ee <_calloc_r+0x4a>
   223c4:	2300      	movs	r3, #0
   223c6:	2a1b      	cmp	r2, #27
   223c8:	6003      	str	r3, [r0, #0]
   223ca:	6043      	str	r3, [r0, #4]
   223cc:	d916      	bls.n	223fc <_calloc_r+0x58>
   223ce:	2a24      	cmp	r2, #36	; 0x24
   223d0:	6083      	str	r3, [r0, #8]
   223d2:	60c3      	str	r3, [r0, #12]
   223d4:	bf11      	iteee	ne
   223d6:	f100 0210 	addne.w	r2, r0, #16
   223da:	6103      	streq	r3, [r0, #16]
   223dc:	6143      	streq	r3, [r0, #20]
   223de:	f100 0218 	addeq.w	r2, r0, #24
   223e2:	2300      	movs	r3, #0
   223e4:	6013      	str	r3, [r2, #0]
   223e6:	6053      	str	r3, [r2, #4]
   223e8:	6093      	str	r3, [r2, #8]
   223ea:	4620      	mov	r0, r4
   223ec:	bd10      	pop	{r4, pc}
   223ee:	4602      	mov	r2, r0
   223f0:	e7f7      	b.n	223e2 <_calloc_r+0x3e>
   223f2:	2100      	movs	r1, #0
   223f4:	f7fc f84a 	bl	1e48c <memset>
   223f8:	4620      	mov	r0, r4
   223fa:	bd10      	pop	{r4, pc}
   223fc:	f100 0208 	add.w	r2, r0, #8
   22400:	e7ef      	b.n	223e2 <_calloc_r+0x3e>
   22402:	bf00      	nop

00022404 <_close_r>:
   22404:	b538      	push	{r3, r4, r5, lr}
   22406:	4c07      	ldr	r4, [pc, #28]	; (22424 <_close_r+0x20>)
   22408:	2300      	movs	r3, #0
   2240a:	4605      	mov	r5, r0
   2240c:	4608      	mov	r0, r1
   2240e:	6023      	str	r3, [r4, #0]
   22410:	f000 f9ac 	bl	2276c <_close>
   22414:	1c43      	adds	r3, r0, #1
   22416:	d000      	beq.n	2241a <_close_r+0x16>
   22418:	bd38      	pop	{r3, r4, r5, pc}
   2241a:	6823      	ldr	r3, [r4, #0]
   2241c:	2b00      	cmp	r3, #0
   2241e:	d0fb      	beq.n	22418 <_close_r+0x14>
   22420:	602b      	str	r3, [r5, #0]
   22422:	bd38      	pop	{r3, r4, r5, pc}
   22424:	2000239c 	.word	0x2000239c

00022428 <_fclose_r>:
   22428:	b570      	push	{r4, r5, r6, lr}
   2242a:	b159      	cbz	r1, 22444 <_fclose_r+0x1c>
   2242c:	4605      	mov	r5, r0
   2242e:	460c      	mov	r4, r1
   22430:	b110      	cbz	r0, 22438 <_fclose_r+0x10>
   22432:	6b83      	ldr	r3, [r0, #56]	; 0x38
   22434:	2b00      	cmp	r3, #0
   22436:	d03c      	beq.n	224b2 <_fclose_r+0x8a>
   22438:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2243a:	07d8      	lsls	r0, r3, #31
   2243c:	d505      	bpl.n	2244a <_fclose_r+0x22>
   2243e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22442:	b92b      	cbnz	r3, 22450 <_fclose_r+0x28>
   22444:	2600      	movs	r6, #0
   22446:	4630      	mov	r0, r6
   22448:	bd70      	pop	{r4, r5, r6, pc}
   2244a:	89a3      	ldrh	r3, [r4, #12]
   2244c:	0599      	lsls	r1, r3, #22
   2244e:	d53c      	bpl.n	224ca <_fclose_r+0xa2>
   22450:	4621      	mov	r1, r4
   22452:	4628      	mov	r0, r5
   22454:	f7ff f856 	bl	21504 <__sflush_r>
   22458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2245a:	4606      	mov	r6, r0
   2245c:	b133      	cbz	r3, 2246c <_fclose_r+0x44>
   2245e:	69e1      	ldr	r1, [r4, #28]
   22460:	4628      	mov	r0, r5
   22462:	4798      	blx	r3
   22464:	2800      	cmp	r0, #0
   22466:	bfb8      	it	lt
   22468:	f04f 36ff 	movlt.w	r6, #4294967295
   2246c:	89a3      	ldrh	r3, [r4, #12]
   2246e:	061a      	lsls	r2, r3, #24
   22470:	d422      	bmi.n	224b8 <_fclose_r+0x90>
   22472:	6b21      	ldr	r1, [r4, #48]	; 0x30
   22474:	b141      	cbz	r1, 22488 <_fclose_r+0x60>
   22476:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2247a:	4299      	cmp	r1, r3
   2247c:	d002      	beq.n	22484 <_fclose_r+0x5c>
   2247e:	4628      	mov	r0, r5
   22480:	f7ff f9da 	bl	21838 <_free_r>
   22484:	2300      	movs	r3, #0
   22486:	6323      	str	r3, [r4, #48]	; 0x30
   22488:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2248a:	b121      	cbz	r1, 22496 <_fclose_r+0x6e>
   2248c:	4628      	mov	r0, r5
   2248e:	f7ff f9d3 	bl	21838 <_free_r>
   22492:	2300      	movs	r3, #0
   22494:	6463      	str	r3, [r4, #68]	; 0x44
   22496:	f7ff f959 	bl	2174c <__sfp_lock_acquire>
   2249a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2249c:	2200      	movs	r2, #0
   2249e:	07db      	lsls	r3, r3, #31
   224a0:	81a2      	strh	r2, [r4, #12]
   224a2:	d50e      	bpl.n	224c2 <_fclose_r+0x9a>
   224a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   224a6:	f7fb fb95 	bl	1dbd4 <__retarget_lock_close_recursive>
   224aa:	f7ff f955 	bl	21758 <__sfp_lock_release>
   224ae:	4630      	mov	r0, r6
   224b0:	bd70      	pop	{r4, r5, r6, pc}
   224b2:	f7ff f91f 	bl	216f4 <__sinit>
   224b6:	e7bf      	b.n	22438 <_fclose_r+0x10>
   224b8:	6921      	ldr	r1, [r4, #16]
   224ba:	4628      	mov	r0, r5
   224bc:	f7ff f9bc 	bl	21838 <_free_r>
   224c0:	e7d7      	b.n	22472 <_fclose_r+0x4a>
   224c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   224c4:	f7fb fb8a 	bl	1dbdc <__retarget_lock_release_recursive>
   224c8:	e7ec      	b.n	224a4 <_fclose_r+0x7c>
   224ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
   224cc:	f7fb fb84 	bl	1dbd8 <__retarget_lock_acquire_recursive>
   224d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   224d4:	2b00      	cmp	r3, #0
   224d6:	d1bb      	bne.n	22450 <_fclose_r+0x28>
   224d8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   224da:	f016 0601 	ands.w	r6, r6, #1
   224de:	d1b1      	bne.n	22444 <_fclose_r+0x1c>
   224e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   224e2:	f7fb fb7b 	bl	1dbdc <__retarget_lock_release_recursive>
   224e6:	4630      	mov	r0, r6
   224e8:	bd70      	pop	{r4, r5, r6, pc}
   224ea:	bf00      	nop

000224ec <_fstat_r>:
   224ec:	b538      	push	{r3, r4, r5, lr}
   224ee:	460b      	mov	r3, r1
   224f0:	4c07      	ldr	r4, [pc, #28]	; (22510 <_fstat_r+0x24>)
   224f2:	4605      	mov	r5, r0
   224f4:	4611      	mov	r1, r2
   224f6:	4618      	mov	r0, r3
   224f8:	2300      	movs	r3, #0
   224fa:	6023      	str	r3, [r4, #0]
   224fc:	f000 f9b4 	bl	22868 <_fstat>
   22500:	1c43      	adds	r3, r0, #1
   22502:	d000      	beq.n	22506 <_fstat_r+0x1a>
   22504:	bd38      	pop	{r3, r4, r5, pc}
   22506:	6823      	ldr	r3, [r4, #0]
   22508:	2b00      	cmp	r3, #0
   2250a:	d0fb      	beq.n	22504 <_fstat_r+0x18>
   2250c:	602b      	str	r3, [r5, #0]
   2250e:	bd38      	pop	{r3, r4, r5, pc}
   22510:	2000239c 	.word	0x2000239c

00022514 <_isatty_r>:
   22514:	b538      	push	{r3, r4, r5, lr}
   22516:	4c07      	ldr	r4, [pc, #28]	; (22534 <_isatty_r+0x20>)
   22518:	2300      	movs	r3, #0
   2251a:	4605      	mov	r5, r0
   2251c:	4608      	mov	r0, r1
   2251e:	6023      	str	r3, [r4, #0]
   22520:	f000 f9b0 	bl	22884 <_isatty>
   22524:	1c43      	adds	r3, r0, #1
   22526:	d000      	beq.n	2252a <_isatty_r+0x16>
   22528:	bd38      	pop	{r3, r4, r5, pc}
   2252a:	6823      	ldr	r3, [r4, #0]
   2252c:	2b00      	cmp	r3, #0
   2252e:	d0fb      	beq.n	22528 <_isatty_r+0x14>
   22530:	602b      	str	r3, [r5, #0]
   22532:	bd38      	pop	{r3, r4, r5, pc}
   22534:	2000239c 	.word	0x2000239c

00022538 <_lseek_r>:
   22538:	b570      	push	{r4, r5, r6, lr}
   2253a:	460d      	mov	r5, r1
   2253c:	4c08      	ldr	r4, [pc, #32]	; (22560 <_lseek_r+0x28>)
   2253e:	4611      	mov	r1, r2
   22540:	4606      	mov	r6, r0
   22542:	461a      	mov	r2, r3
   22544:	4628      	mov	r0, r5
   22546:	2300      	movs	r3, #0
   22548:	6023      	str	r3, [r4, #0]
   2254a:	f000 f8d3 	bl	226f4 <_lseek>
   2254e:	1c43      	adds	r3, r0, #1
   22550:	d000      	beq.n	22554 <_lseek_r+0x1c>
   22552:	bd70      	pop	{r4, r5, r6, pc}
   22554:	6823      	ldr	r3, [r4, #0]
   22556:	2b00      	cmp	r3, #0
   22558:	d0fb      	beq.n	22552 <_lseek_r+0x1a>
   2255a:	6033      	str	r3, [r6, #0]
   2255c:	bd70      	pop	{r4, r5, r6, pc}
   2255e:	bf00      	nop
   22560:	2000239c 	.word	0x2000239c

00022564 <_read_r>:
   22564:	b570      	push	{r4, r5, r6, lr}
   22566:	460d      	mov	r5, r1
   22568:	4c08      	ldr	r4, [pc, #32]	; (2258c <_read_r+0x28>)
   2256a:	4611      	mov	r1, r2
   2256c:	4606      	mov	r6, r0
   2256e:	461a      	mov	r2, r3
   22570:	4628      	mov	r0, r5
   22572:	2300      	movs	r3, #0
   22574:	6023      	str	r3, [r4, #0]
   22576:	f000 f84b 	bl	22610 <_read>
   2257a:	1c43      	adds	r3, r0, #1
   2257c:	d000      	beq.n	22580 <_read_r+0x1c>
   2257e:	bd70      	pop	{r4, r5, r6, pc}
   22580:	6823      	ldr	r3, [r4, #0]
   22582:	2b00      	cmp	r3, #0
   22584:	d0fb      	beq.n	2257e <_read_r+0x1a>
   22586:	6033      	str	r3, [r6, #0]
   22588:	bd70      	pop	{r4, r5, r6, pc}
   2258a:	bf00      	nop
   2258c:	2000239c 	.word	0x2000239c

00022590 <__aeabi_dcmpun>:
   22590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   22594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22598:	d102      	bne.n	225a0 <__aeabi_dcmpun+0x10>
   2259a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2259e:	d10a      	bne.n	225b6 <__aeabi_dcmpun+0x26>
   225a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   225a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   225a8:	d102      	bne.n	225b0 <__aeabi_dcmpun+0x20>
   225aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   225ae:	d102      	bne.n	225b6 <__aeabi_dcmpun+0x26>
   225b0:	f04f 0000 	mov.w	r0, #0
   225b4:	4770      	bx	lr
   225b6:	f04f 0001 	mov.w	r0, #1
   225ba:	4770      	bx	lr

000225bc <findslot>:
   225bc:	4b0b      	ldr	r3, [pc, #44]	; (225ec <findslot+0x30>)
   225be:	681b      	ldr	r3, [r3, #0]
   225c0:	b510      	push	{r4, lr}
   225c2:	4604      	mov	r4, r0
   225c4:	b10b      	cbz	r3, 225ca <findslot+0xe>
   225c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   225c8:	b14a      	cbz	r2, 225de <findslot+0x22>
   225ca:	2c13      	cmp	r4, #19
   225cc:	d80c      	bhi.n	225e8 <findslot+0x2c>
   225ce:	4808      	ldr	r0, [pc, #32]	; (225f0 <findslot+0x34>)
   225d0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   225d4:	3301      	adds	r3, #1
   225d6:	d007      	beq.n	225e8 <findslot+0x2c>
   225d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   225dc:	bd10      	pop	{r4, pc}
   225de:	4618      	mov	r0, r3
   225e0:	f7ff f888 	bl	216f4 <__sinit>
   225e4:	2c13      	cmp	r4, #19
   225e6:	d9f2      	bls.n	225ce <findslot+0x12>
   225e8:	2000      	movs	r0, #0
   225ea:	bd10      	pop	{r4, pc}
   225ec:	200000f8 	.word	0x200000f8
   225f0:	200022d8 	.word	0x200022d8

000225f4 <checkerror.part.0>:
   225f4:	b570      	push	{r4, r5, r6, lr}
   225f6:	f7fb f84d 	bl	1d694 <__errno>
   225fa:	2413      	movs	r4, #19
   225fc:	4605      	mov	r5, r0
   225fe:	2600      	movs	r6, #0
   22600:	4620      	mov	r0, r4
   22602:	4631      	mov	r1, r6
   22604:	beab      	bkpt	0x00ab
   22606:	4604      	mov	r4, r0
   22608:	f04f 30ff 	mov.w	r0, #4294967295
   2260c:	602c      	str	r4, [r5, #0]
   2260e:	bd70      	pop	{r4, r5, r6, pc}

00022610 <_read>:
   22610:	b5f0      	push	{r4, r5, r6, r7, lr}
   22612:	b085      	sub	sp, #20
   22614:	460c      	mov	r4, r1
   22616:	4616      	mov	r6, r2
   22618:	f7ff ffd0 	bl	225bc <findslot>
   2261c:	b1c8      	cbz	r0, 22652 <_read+0x42>
   2261e:	6803      	ldr	r3, [r0, #0]
   22620:	9301      	str	r3, [sp, #4]
   22622:	9402      	str	r4, [sp, #8]
   22624:	4605      	mov	r5, r0
   22626:	9603      	str	r6, [sp, #12]
   22628:	2406      	movs	r4, #6
   2262a:	af01      	add	r7, sp, #4
   2262c:	4620      	mov	r0, r4
   2262e:	4639      	mov	r1, r7
   22630:	beab      	bkpt	0x00ab
   22632:	4604      	mov	r4, r0
   22634:	1c62      	adds	r2, r4, #1
   22636:	4620      	mov	r0, r4
   22638:	d005      	beq.n	22646 <_read+0x36>
   2263a:	686b      	ldr	r3, [r5, #4]
   2263c:	1a30      	subs	r0, r6, r0
   2263e:	4403      	add	r3, r0
   22640:	606b      	str	r3, [r5, #4]
   22642:	b005      	add	sp, #20
   22644:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22646:	f7ff ffd5 	bl	225f4 <checkerror.part.0>
   2264a:	1c43      	adds	r3, r0, #1
   2264c:	d1f5      	bne.n	2263a <_read+0x2a>
   2264e:	b005      	add	sp, #20
   22650:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22652:	f7fb f81f 	bl	1d694 <__errno>
   22656:	2309      	movs	r3, #9
   22658:	6003      	str	r3, [r0, #0]
   2265a:	f04f 30ff 	mov.w	r0, #4294967295
   2265e:	e7f0      	b.n	22642 <_read+0x32>

00022660 <_swilseek>:
   22660:	b5f0      	push	{r4, r5, r6, r7, lr}
   22662:	b083      	sub	sp, #12
   22664:	460d      	mov	r5, r1
   22666:	4614      	mov	r4, r2
   22668:	f7ff ffa8 	bl	225bc <findslot>
   2266c:	2800      	cmp	r0, #0
   2266e:	d03a      	beq.n	226e6 <_swilseek+0x86>
   22670:	2c02      	cmp	r4, #2
   22672:	d825      	bhi.n	226c0 <_swilseek+0x60>
   22674:	2c01      	cmp	r4, #1
   22676:	4606      	mov	r6, r0
   22678:	d01f      	beq.n	226ba <_swilseek+0x5a>
   2267a:	2c02      	cmp	r4, #2
   2267c:	d010      	beq.n	226a0 <_swilseek+0x40>
   2267e:	466f      	mov	r7, sp
   22680:	6833      	ldr	r3, [r6, #0]
   22682:	240a      	movs	r4, #10
   22684:	e88d 0028 	stmia.w	sp, {r3, r5}
   22688:	4620      	mov	r0, r4
   2268a:	4639      	mov	r1, r7
   2268c:	beab      	bkpt	0x00ab
   2268e:	4604      	mov	r4, r0
   22690:	1c63      	adds	r3, r4, #1
   22692:	d01c      	beq.n	226ce <_swilseek+0x6e>
   22694:	2c00      	cmp	r4, #0
   22696:	db23      	blt.n	226e0 <_swilseek+0x80>
   22698:	6075      	str	r5, [r6, #4]
   2269a:	4628      	mov	r0, r5
   2269c:	b003      	add	sp, #12
   2269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226a0:	af02      	add	r7, sp, #8
   226a2:	6803      	ldr	r3, [r0, #0]
   226a4:	f847 3d08 	str.w	r3, [r7, #-8]!
   226a8:	240c      	movs	r4, #12
   226aa:	4620      	mov	r0, r4
   226ac:	4639      	mov	r1, r7
   226ae:	beab      	bkpt	0x00ab
   226b0:	4604      	mov	r4, r0
   226b2:	1c61      	adds	r1, r4, #1
   226b4:	d00f      	beq.n	226d6 <_swilseek+0x76>
   226b6:	4425      	add	r5, r4
   226b8:	e7e2      	b.n	22680 <_swilseek+0x20>
   226ba:	6840      	ldr	r0, [r0, #4]
   226bc:	182d      	adds	r5, r5, r0
   226be:	d5de      	bpl.n	2267e <_swilseek+0x1e>
   226c0:	f7fa ffe8 	bl	1d694 <__errno>
   226c4:	2316      	movs	r3, #22
   226c6:	6003      	str	r3, [r0, #0]
   226c8:	f04f 35ff 	mov.w	r5, #4294967295
   226cc:	e7e5      	b.n	2269a <_swilseek+0x3a>
   226ce:	f7ff ff91 	bl	225f4 <checkerror.part.0>
   226d2:	4604      	mov	r4, r0
   226d4:	e7de      	b.n	22694 <_swilseek+0x34>
   226d6:	f7ff ff8d 	bl	225f4 <checkerror.part.0>
   226da:	1c42      	adds	r2, r0, #1
   226dc:	4604      	mov	r4, r0
   226de:	d1ea      	bne.n	226b6 <_swilseek+0x56>
   226e0:	f04f 35ff 	mov.w	r5, #4294967295
   226e4:	e7d9      	b.n	2269a <_swilseek+0x3a>
   226e6:	f7fa ffd5 	bl	1d694 <__errno>
   226ea:	2309      	movs	r3, #9
   226ec:	6003      	str	r3, [r0, #0]
   226ee:	f04f 35ff 	mov.w	r5, #4294967295
   226f2:	e7d2      	b.n	2269a <_swilseek+0x3a>

000226f4 <_lseek>:
   226f4:	f7ff bfb4 	b.w	22660 <_swilseek>

000226f8 <_write>:
   226f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   226fa:	b085      	sub	sp, #20
   226fc:	460c      	mov	r4, r1
   226fe:	4616      	mov	r6, r2
   22700:	f7ff ff5c 	bl	225bc <findslot>
   22704:	b350      	cbz	r0, 2275c <_write+0x64>
   22706:	6803      	ldr	r3, [r0, #0]
   22708:	9301      	str	r3, [sp, #4]
   2270a:	9402      	str	r4, [sp, #8]
   2270c:	4605      	mov	r5, r0
   2270e:	9603      	str	r6, [sp, #12]
   22710:	2405      	movs	r4, #5
   22712:	af01      	add	r7, sp, #4
   22714:	4620      	mov	r0, r4
   22716:	4639      	mov	r1, r7
   22718:	beab      	bkpt	0x00ab
   2271a:	4604      	mov	r4, r0
   2271c:	1c63      	adds	r3, r4, #1
   2271e:	d016      	beq.n	2274e <_write+0x56>
   22720:	2c00      	cmp	r4, #0
   22722:	db18      	blt.n	22756 <_write+0x5e>
   22724:	686a      	ldr	r2, [r5, #4]
   22726:	1b30      	subs	r0, r6, r4
   22728:	4402      	add	r2, r0
   2272a:	42a6      	cmp	r6, r4
   2272c:	606a      	str	r2, [r5, #4]
   2272e:	d001      	beq.n	22734 <_write+0x3c>
   22730:	b005      	add	sp, #20
   22732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22734:	f7fa ffae 	bl	1d694 <__errno>
   22738:	2513      	movs	r5, #19
   2273a:	4606      	mov	r6, r0
   2273c:	2400      	movs	r4, #0
   2273e:	4628      	mov	r0, r5
   22740:	4621      	mov	r1, r4
   22742:	beab      	bkpt	0x00ab
   22744:	4605      	mov	r5, r0
   22746:	4620      	mov	r0, r4
   22748:	6035      	str	r5, [r6, #0]
   2274a:	b005      	add	sp, #20
   2274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2274e:	f7ff ff51 	bl	225f4 <checkerror.part.0>
   22752:	4604      	mov	r4, r0
   22754:	e7e4      	b.n	22720 <_write+0x28>
   22756:	f04f 30ff 	mov.w	r0, #4294967295
   2275a:	e7e9      	b.n	22730 <_write+0x38>
   2275c:	f7fa ff9a 	bl	1d694 <__errno>
   22760:	2309      	movs	r3, #9
   22762:	6003      	str	r3, [r0, #0]
   22764:	f04f 30ff 	mov.w	r0, #4294967295
   22768:	e7e2      	b.n	22730 <_write+0x38>
   2276a:	bf00      	nop

0002276c <_close>:
   2276c:	b570      	push	{r4, r5, r6, lr}
   2276e:	b082      	sub	sp, #8
   22770:	4604      	mov	r4, r0
   22772:	f7ff ff23 	bl	225bc <findslot>
   22776:	b310      	cbz	r0, 227be <_close+0x52>
   22778:	3c01      	subs	r4, #1
   2277a:	2c01      	cmp	r4, #1
   2277c:	4606      	mov	r6, r0
   2277e:	d911      	bls.n	227a4 <_close+0x38>
   22780:	ad02      	add	r5, sp, #8
   22782:	6833      	ldr	r3, [r6, #0]
   22784:	f845 3d04 	str.w	r3, [r5, #-4]!
   22788:	2402      	movs	r4, #2
   2278a:	4620      	mov	r0, r4
   2278c:	4629      	mov	r1, r5
   2278e:	beab      	bkpt	0x00ab
   22790:	4604      	mov	r4, r0
   22792:	1c63      	adds	r3, r4, #1
   22794:	4620      	mov	r0, r4
   22796:	d00f      	beq.n	227b8 <_close+0x4c>
   22798:	b910      	cbnz	r0, 227a0 <_close+0x34>
   2279a:	f04f 33ff 	mov.w	r3, #4294967295
   2279e:	6033      	str	r3, [r6, #0]
   227a0:	b002      	add	sp, #8
   227a2:	bd70      	pop	{r4, r5, r6, pc}
   227a4:	4b09      	ldr	r3, [pc, #36]	; (227cc <_close+0x60>)
   227a6:	689a      	ldr	r2, [r3, #8]
   227a8:	691b      	ldr	r3, [r3, #16]
   227aa:	429a      	cmp	r2, r3
   227ac:	d1e8      	bne.n	22780 <_close+0x14>
   227ae:	f04f 33ff 	mov.w	r3, #4294967295
   227b2:	6003      	str	r3, [r0, #0]
   227b4:	2000      	movs	r0, #0
   227b6:	e7f3      	b.n	227a0 <_close+0x34>
   227b8:	f7ff ff1c 	bl	225f4 <checkerror.part.0>
   227bc:	e7ec      	b.n	22798 <_close+0x2c>
   227be:	f7fa ff69 	bl	1d694 <__errno>
   227c2:	2309      	movs	r3, #9
   227c4:	6003      	str	r3, [r0, #0]
   227c6:	f04f 30ff 	mov.w	r0, #4294967295
   227ca:	e7e9      	b.n	227a0 <_close+0x34>
   227cc:	200022d8 	.word	0x200022d8

000227d0 <_getpid>:
   227d0:	2001      	movs	r0, #1
   227d2:	4770      	bx	lr

000227d4 <_sbrk>:
   227d4:	4a0e      	ldr	r2, [pc, #56]	; (22810 <_sbrk+0x3c>)
   227d6:	6813      	ldr	r3, [r2, #0]
   227d8:	b510      	push	{r4, lr}
   227da:	b1ab      	cbz	r3, 22808 <_sbrk+0x34>
   227dc:	4418      	add	r0, r3
   227de:	4669      	mov	r1, sp
   227e0:	4288      	cmp	r0, r1
   227e2:	d809      	bhi.n	227f8 <_sbrk+0x24>
   227e4:	490b      	ldr	r1, [pc, #44]	; (22814 <_sbrk+0x40>)
   227e6:	4c0c      	ldr	r4, [pc, #48]	; (22818 <_sbrk+0x44>)
   227e8:	6809      	ldr	r1, [r1, #0]
   227ea:	42a1      	cmp	r1, r4
   227ec:	d001      	beq.n	227f2 <_sbrk+0x1e>
   227ee:	4288      	cmp	r0, r1
   227f0:	d802      	bhi.n	227f8 <_sbrk+0x24>
   227f2:	6010      	str	r0, [r2, #0]
   227f4:	4618      	mov	r0, r3
   227f6:	bd10      	pop	{r4, pc}
   227f8:	f7fa ff4c 	bl	1d694 <__errno>
   227fc:	230c      	movs	r3, #12
   227fe:	6003      	str	r3, [r0, #0]
   22800:	f04f 33ff 	mov.w	r3, #4294967295
   22804:	4618      	mov	r0, r3
   22806:	bd10      	pop	{r4, pc}
   22808:	4b04      	ldr	r3, [pc, #16]	; (2281c <_sbrk+0x48>)
   2280a:	6013      	str	r3, [r2, #0]
   2280c:	e7e6      	b.n	227dc <_sbrk+0x8>
   2280e:	bf00      	nop
   22810:	200022d4 	.word	0x200022d4
   22814:	20000aa8 	.word	0x20000aa8
   22818:	cafedead 	.word	0xcafedead
   2281c:	200023a0 	.word	0x200023a0

00022820 <_swistat>:
   22820:	b570      	push	{r4, r5, r6, lr}
   22822:	460d      	mov	r5, r1
   22824:	f7ff feca 	bl	225bc <findslot>
   22828:	b1b8      	cbz	r0, 2285a <_swistat+0x3a>
   2282a:	686b      	ldr	r3, [r5, #4]
   2282c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22834:	4606      	mov	r6, r0
   22836:	606b      	str	r3, [r5, #4]
   22838:	62ea      	str	r2, [r5, #44]	; 0x2c
   2283a:	240c      	movs	r4, #12
   2283c:	4620      	mov	r0, r4
   2283e:	4631      	mov	r1, r6
   22840:	beab      	bkpt	0x00ab
   22842:	4604      	mov	r4, r0
   22844:	1c62      	adds	r2, r4, #1
   22846:	4620      	mov	r0, r4
   22848:	d002      	beq.n	22850 <_swistat+0x30>
   2284a:	6128      	str	r0, [r5, #16]
   2284c:	2000      	movs	r0, #0
   2284e:	bd70      	pop	{r4, r5, r6, pc}
   22850:	f7ff fed0 	bl	225f4 <checkerror.part.0>
   22854:	1c43      	adds	r3, r0, #1
   22856:	d1f8      	bne.n	2284a <_swistat+0x2a>
   22858:	e7f9      	b.n	2284e <_swistat+0x2e>
   2285a:	f7fa ff1b 	bl	1d694 <__errno>
   2285e:	2309      	movs	r3, #9
   22860:	6003      	str	r3, [r0, #0]
   22862:	f04f 30ff 	mov.w	r0, #4294967295
   22866:	bd70      	pop	{r4, r5, r6, pc}

00022868 <_fstat>:
   22868:	b538      	push	{r3, r4, r5, lr}
   2286a:	223c      	movs	r2, #60	; 0x3c
   2286c:	460c      	mov	r4, r1
   2286e:	4605      	mov	r5, r0
   22870:	4608      	mov	r0, r1
   22872:	2100      	movs	r1, #0
   22874:	f7fb fe0a 	bl	1e48c <memset>
   22878:	4621      	mov	r1, r4
   2287a:	4628      	mov	r0, r5
   2287c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22880:	f7ff bfce 	b.w	22820 <_swistat>

00022884 <_isatty>:
   22884:	b570      	push	{r4, r5, r6, lr}
   22886:	f7ff fe99 	bl	225bc <findslot>
   2288a:	4605      	mov	r5, r0
   2288c:	b190      	cbz	r0, 228b4 <_isatty+0x30>
   2288e:	2409      	movs	r4, #9
   22890:	4620      	mov	r0, r4
   22892:	4629      	mov	r1, r5
   22894:	beab      	bkpt	0x00ab
   22896:	4604      	mov	r4, r0
   22898:	2c01      	cmp	r4, #1
   2289a:	d009      	beq.n	228b0 <_isatty+0x2c>
   2289c:	f7fa fefa 	bl	1d694 <__errno>
   228a0:	2513      	movs	r5, #19
   228a2:	4606      	mov	r6, r0
   228a4:	2400      	movs	r4, #0
   228a6:	4628      	mov	r0, r5
   228a8:	4621      	mov	r1, r4
   228aa:	beab      	bkpt	0x00ab
   228ac:	4605      	mov	r5, r0
   228ae:	6035      	str	r5, [r6, #0]
   228b0:	4620      	mov	r0, r4
   228b2:	bd70      	pop	{r4, r5, r6, pc}
   228b4:	f7fa feee 	bl	1d694 <__errno>
   228b8:	2209      	movs	r2, #9
   228ba:	462c      	mov	r4, r5
   228bc:	6002      	str	r2, [r0, #0]
   228be:	e7f7      	b.n	228b0 <_isatty+0x2c>

000228c0 <_exit>:
   228c0:	f04f 31ff 	mov.w	r1, #4294967295
   228c4:	f000 b800 	b.w	228c8 <_kill>

000228c8 <_kill>:
   228c8:	2906      	cmp	r1, #6
   228ca:	b530      	push	{r4, r5, lr}
   228cc:	bf0c      	ite	eq
   228ce:	4d04      	ldreq	r5, [pc, #16]	; (228e0 <_kill+0x18>)
   228d0:	4d04      	ldrne	r5, [pc, #16]	; (228e4 <_kill+0x1c>)
   228d2:	2418      	movs	r4, #24
   228d4:	4620      	mov	r0, r4
   228d6:	4629      	mov	r1, r5
   228d8:	beab      	bkpt	0x00ab
   228da:	4604      	mov	r4, r0
   228dc:	4620      	mov	r0, r4
   228de:	bd30      	pop	{r4, r5, pc}
   228e0:	00020023 	.word	0x00020023
   228e4:	00020026 	.word	0x00020026

000228e8 <_init>:
   228e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228ea:	bf00      	nop
   228ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   228ee:	bc08      	pop	{r3}
   228f0:	469e      	mov	lr, r3
   228f2:	4770      	bx	lr

000228f4 <_fini>:
   228f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228f6:	bf00      	nop
   228f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   228fa:	bc08      	pop	{r3}
   228fc:	469e      	mov	lr, r3
   228fe:	4770      	bx	lr

00022900 <__init_array_start>:
   22900:	00020571 	.word	0x00020571

00022904 <__frame_dummy_init_array_entry>:
   22904:	00004289 00007461 00009565 00009915     .B..at..e.......
   22914:	0000a441 0000afd1 0000d481 0000ec89     A...............
   22924:	0000f9b1 0000fd29 00011af9 00011bdd     ....)...........
   22934:	00013509                                .5..

00022938 <__do_global_dtors_aux_fini_array_entry>:
   22938:	00004265                                eB..

0002293c <__fini_array_end>:
   2293c:	646e6148 	.word	0x646e6148
   22940:	676e696c 	.word	0x676e696c
   22944:	75616620 	.word	0x75616620
   22948:	203a746c 	.word	0x203a746c
   2294c:	61656c63 	.word	0x61656c63
   22950:	676e6972 	.word	0x676e6972
   22954:	75616620 	.word	0x75616620
   22958:	2073746c 	.word	0x2073746c
   2295c:	63207962 	.word	0x63207962
   22960:	696c6379 	.word	0x696c6379
   22964:	6520676e 	.word	0x6520676e
   22968:	6c62616e 	.word	0x6c62616e
   2296c:	69732065 	.word	0x69732065
   22970:	6c616e67 	.word	0x6c616e67
   22974:	206f7420 	.word	0x206f7420
   22978:	6f746f6d 	.word	0x6f746f6d
   2297c:	00002e72 	.word	0x00002e72
   22980:	69766f4d 	.word	0x69766f4d
   22984:	0020676e 	.word	0x0020676e
   22988:	00202a20 	.word	0x00202a20
   2298c:	69766f4d 	.word	0x69766f4d
   22990:	2e2e676e 	.word	0x2e2e676e
   22994:	69615720 	.word	0x69615720
   22998:	676e6974 	.word	0x676e6974
   2299c:	726f6620 	.word	0x726f6620
   229a0:	464c4820 	.word	0x464c4820
   229a4:	00000042 	.word	0x00000042
   229a8:	6f746f4d 	.word	0x6f746f4d
   229ac:	61662072 	.word	0x61662072
   229b0:	20746c75 	.word	0x20746c75
   229b4:	65746564 	.word	0x65746564
   229b8:	64657463 	.word	0x64657463
   229bc:	0000002e 	.word	0x0000002e
   229c0:	62616e45 	.word	0x62616e45
   229c4:	6120656c 	.word	0x6120656c
   229c8:	6d6f7475 	.word	0x6d6f7475
   229cc:	63697461 	.word	0x63697461
   229d0:	75616620 	.word	0x75616620
   229d4:	6820746c 	.word	0x6820746c
   229d8:	6c646e61 	.word	0x6c646e61
   229dc:	20676e69 	.word	0x20676e69
   229e0:	73207962 	.word	0x73207962
   229e4:	69747465 	.word	0x69747465
   229e8:	4820676e 	.word	0x4820676e
   229ec:	4c444e41 	.word	0x4c444e41
   229f0:	4f4d5f45 	.word	0x4f4d5f45
   229f4:	5f524f54 	.word	0x5f524f54
   229f8:	4c554146 	.word	0x4c554146
   229fc:	74205354 	.word	0x74205354
   22a00:	2e31206f 	.word	0x2e31206f
   22a04:	00000000 	.word	0x00000000
   22a08:	69746f4d 	.word	0x69746f4d
   22a0c:	6d206e6f 	.word	0x6d206e6f
   22a10:	6e207961 	.word	0x6e207961
   22a14:	6820746f 	.word	0x6820746f
   22a18:	20657661 	.word	0x20657661
   22a1c:	706d6f63 	.word	0x706d6f63
   22a20:	6574656c 	.word	0x6574656c
   22a24:	73612064 	.word	0x73612064
   22a28:	70786520 	.word	0x70786520
   22a2c:	65746365 	.word	0x65746365
   22a30:	50202e64 	.word	0x50202e64
   22a34:	65636f72 	.word	0x65636f72
   22a38:	77206465 	.word	0x77206465
   22a3c:	20687469 	.word	0x20687469
   22a40:	74756163 	.word	0x74756163
   22a44:	2e6e6f69 	.word	0x2e6e6f69
   22a48:	00000000 	.word	0x00000000
   22a4c:	65766f4d 	.word	0x65766f4d
   22a50:	6e6f4420 	.word	0x6e6f4420
   22a54:	00000065 	.word	0x00000065
   22a58:	6f746f4d 	.word	0x6f746f4d
   22a5c:	61662072 	.word	0x61662072
   22a60:	20746c75 	.word	0x20746c75
   22a64:	65746564 	.word	0x65746564
   22a68:	64657463 	.word	0x64657463
   22a6c:	6f4d202e 	.word	0x6f4d202e
   22a70:	63206576 	.word	0x63206576
   22a74:	65636e61 	.word	0x65636e61
   22a78:	2e64656c 	.word	0x2e64656c
   22a7c:	616e4520 	.word	0x616e4520
   22a80:	20656c62 	.word	0x20656c62
   22a84:	6f747561 	.word	0x6f747561
   22a88:	6974616d 	.word	0x6974616d
   22a8c:	61662063 	.word	0x61662063
   22a90:	20746c75 	.word	0x20746c75
   22a94:	646e6168 	.word	0x646e6168
   22a98:	676e696c 	.word	0x676e696c
   22a9c:	20796220 	.word	0x20796220
   22aa0:	74746573 	.word	0x74746573
   22aa4:	20676e69 	.word	0x20676e69
   22aa8:	444e4148 	.word	0x444e4148
   22aac:	4d5f454c 	.word	0x4d5f454c
   22ab0:	524f544f 	.word	0x524f544f
   22ab4:	5541465f 	.word	0x5541465f
   22ab8:	2053544c 	.word	0x2053544c
   22abc:	31206f74 	.word	0x31206f74
   22ac0:	0000002e 	.word	0x0000002e
   22ac4:	6f746f4d 	.word	0x6f746f4d
   22ac8:	6e452072 	.word	0x6e452072
   22acc:	656c6261 	.word	0x656c6261
   22ad0:	00000064 	.word	0x00000064
   22ad4:	74696157 	.word	0x74696157
   22ad8:	20676e69 	.word	0x20676e69
   22adc:	20726f66 	.word	0x20726f66
   22ae0:	42464c48 	.word	0x42464c48
   22ae4:	002e2e2e 	.word	0x002e2e2e
   22ae8:	62616e45 	.word	0x62616e45
   22aec:	676e696c 	.word	0x676e696c
   22af0:	79616d20 	.word	0x79616d20
   22af4:	746f6e20 	.word	0x746f6e20
   22af8:	76616820 	.word	0x76616820
   22afc:	6f632065 	.word	0x6f632065
   22b00:	656c706d 	.word	0x656c706d
   22b04:	20646574 	.word	0x20646574
   22b08:	65207361 	.word	0x65207361
   22b0c:	63657078 	.word	0x63657078
   22b10:	2e646574 	.word	0x2e646574
   22b14:	6f725020 	.word	0x6f725020
   22b18:	64656563 	.word	0x64656563
   22b1c:	74697720 	.word	0x74697720
   22b20:	61632068 	.word	0x61632068
   22b24:	6f697475 	.word	0x6f697475
   22b28:	00002e6e 	.word	0x00002e6e
   22b2c:	6f746f4d 	.word	0x6f746f4d
   22b30:	65522072 	.word	0x65522072
   22b34:	00796461 	.word	0x00796461

00022b38 <CSWTCH.95>:
   22b38:	02030406 00000002                       ........

00022b40 <_ZN9ClearCoreL11tcc_modulesE>:
   22b40:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22b50:	43001000                                ...C

00022b54 <_ZTVN9ClearCore11MotorDriverE>:
	...
   22b5c:	000048a5 000048a9 00004895 00004899     .H...H...H...H..
   22b6c:	0000e245 00004889 0000489d 0000488d     E....H...H...H..
   22b7c:	00004ff1 00005825 0000564d 00005745     .O..%X..MV..EW..
   22b8c:	00004a0d ffffffd0 00000000 0000573d     .J..........=W..
   22b9c:	0000581d 00004a5d                       .X..]J..

00022ba4 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   22ba4:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22bb4:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022bc4 <_ZTVN9ClearCore7ISerialE>:
	...
   22bcc:	0001338d 0001338d 0001338d 0001338d     .3...3...3...3..
   22bdc:	0001338d 0001338d 0001338d 0001338d     .3...3...3...3..
   22bec:	0001338d 0001338d 0001338d 0001338d     .3...3...3...3..
   22bfc:	0001338d 0001338d 0001338d 0001338d     .3...3...3...3..
   22c0c:	0001338d 0001338d                       .3...3..

00022c14 <_ZTVN9ClearCore9SerialUsbE>:
	...
   22c1c:	00005bc9 00005bbd 00005be1 00005bed     .[...[...[...[..
   22c2c:	00005bf9 00005c05 00005c11 00005c1d     .[...\...\...\..
   22c3c:	00005c29 00005c35 00005c41 00005bc9     )\..5\..A\...[..
   22c4c:	00005bd5 00005bd5 00005b41 00005b4d     .[...[..A[..M[..
   22c5c:	00005b51 00005b5d 00005b69 00005b75     Q[..][..i[..u[..
   22c6c:	00005b89 00005c4d 00005c71 00005ca1     .[..M\..q\...\..
   22c7c:	00005b95 00005ba1 00005bb1 fffffffc     .[...[...[......
   22c8c:	00000000 00005b6d 00005b81 00005b8d     ....m[...[...[..
   22c9c:	00005c69 00005c99 00005ce1 00005b99     i\...\...\...[..
   22cac:	00005b39 00005bb5 00005ba9 008061fc     9[...[...[...a..
   22cbc:	00806010 00806014 00806018              .`...`...`..

00022cc8 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   22cd0:	0000fd81 0000fd91 00010cad 00010009     ................
   22ce0:	0000feb5 00007471 0000fda5 0000fddd     ....qt..........
   22cf0:	0000fe1d 0000fdf9 0000fe09 0000fe5d     ............]...
   22d00:	0000fd79 00007479 00010121 00007475     y...yt..!...ut..
   22d10:	000102f5 00010211                       ........

00022d18 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   22d20:	0000fd81 0000fd91 00010cad 00010009     ................
   22d30:	0000feb5 00007471 0000fda5 0000fddd     ....qt..........
   22d40:	0000fe1d 0000fdf9 0000fe09 0000fe5d     ............]...
   22d50:	0000fd79 00007479 00010121 00007475     y...yt..!...ut..
   22d60:	000102f5 00010211 40003c00 4101a000     .........<.@...A
   22d70:	43001400                                ...C

00022d74 <_ZN9ClearCore10hBridgeConE>:
   22d74:	2000136c 200013f0                       l.. ... 

00022d7c <_ZN9ClearCore15MotorConnectorsE>:
   22d7c:	20000b60 20000ca8 20000df0 20000f38     `.. ... ... 8.. 

00022d8c <_ZN9ClearCoreL10ConnectorsE>:
   22d8c:	200011e0 2000124c 200012ac 2000130c     ... L.. ... ... 
   22d9c:	2000136c 200013f0 20001150 20001180     l.. ... P.. ... 
   22dac:	200011b0 20000b18 20001084 200010c8     ... ... ... ... 
   22dbc:	2000110c 20001474 20000b60 20000ca8     ... t.. `.. ... 
   22dcc:	20000df0 20000f38 200015d4 2000172c     ... 8.. ... ,.. 
   22ddc:	20001484                                ... 

00022de0 <_ZN9ClearCoreL10MicroSD_SSE>:
   22de0:	0504003d ffffff00 ffffffff 00ff0500     =...............

00022df0 <_ZN9ClearCoreL10XBee_Rx_INE>:
   22df0:	08180150 ffffff00 ffff0102 00ffffff     P...............

00022e00 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   22e00:	02120142 ffffff00 ffff0207 00040001     B...............

00022e10 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   22e10:	04140144 ffffff00 ffff0107 00060201     D...............

00022e20 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   22e20:	0a0a001c ffffff00 00010200 00040200     ................

00022e30 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   22e30:	0909001b ff03ff00 01000100 00ff0100     ................

00022e40 <_ZN9ClearCoreL11IN06n_QuadAE>:
   22e40:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022e50 <_ZN9ClearCoreL11IN07n_QuadBE>:
   22e50:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022e60 <_ZN9ClearCoreL11IN08n_QuadIE>:
   22e60:	0212023a ffffff01 ffff0206 00ff0200     :...............

00022e70 <_ZN9ClearCoreL11IN09n_AIN09E>:
   22e70:	0707010e ff09ff01 ffffffff 00ffffff     ................

00022e80 <_ZN9ClearCoreL11IN10n_AIN10E>:
   22e80:	0606010d ff08ff01 ffffffff 00ffffff     ................

00022e90 <_ZN9ClearCoreL11IN11n_AIN11E>:
   22e90:	0505010a ff07ff01 ffffffff 00ffffff     ................

00022ea0 <_ZN9ClearCoreL11IN12n_AIN12E>:
   22ea0:	03030206 ff05ff01 ffffffff 00ffffff     ................

00022eb0 <_ZN9ClearCoreL11MicroSD_SCKE>:
   22eb0:	09090110 ff01ff00 01040104 00ffffff     ................

00022ec0 <_ZN9ClearCoreL11XBee_CTS_INE>:
   22ec0:	09190253 ffffff00 ffff0302 00ffffff     S...............

00022ed0 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   22ed0:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00022ee0 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   22ee0:	05150145 ffffff00 ffff0007 00070301     E...............

00022ef0 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   22ef0:	ff08001a ff02ff00 00000000 00ff0000     ................

00022f00 <_ZN9ClearCoreL12MicroSD_MISOE>:
   22f00:	0a0a0120 ffffff00 00050204 00040400      ...............

00022f10 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   22f10:	0808010f ff00ff00 00040004 00ffffff     ................

00022f20 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   22f20:	07170049 ffffff00 01040005 00ff0701     I...............

00022f30 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   22f30:	08180252 ffffff00 ffff0202 00ffffff     R...............

00022f40 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   22f40:	03130143 ffffff00 ffff0307 00050101     C...............

00022f50 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   22f50:	0b0b001d ffffff00 01010300 00050300     ................

00022f60 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   22f60:	05050012 01ffff00 0100ffff 00ffffff     ................

00022f70 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   22f70:	04140046 ffffff01 00070205 00ff0401     F...............

00022f80 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   22f80:	00100140 ffffff00 00060005 00020003     @...............

00022f90 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   22f90:	03030164 ffffff00 0106ffff 00ffffff     d...............

00022fa0 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   22fa0:	0e0e0124 ffffff00 00050204 00000004     $...............

00022fb0 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   22fb0:	0c0c0122 ffffff00 00040004 00060003     "...............

00022fc0 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   22fc0:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

00022fd0 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   22fd0:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

00022fe0 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   22fe0:	0f0f0125 ffffff00 01050304 00010104     %...............

00022ff0 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   22ff0:	0d0d0123 ffffff00 01040104 00070103     #...............

00023000 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   23000:	06160048 ffffff00 00040003 00ff0601     H...............

00023010 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   23010:	00100034 ffffff00 00020001 00020001     4...............

00023020 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   23020:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

00023030 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   23030:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

00023040 <_ZN9ClearCoreL5IN01nE>:
   23040:	02110107 00ffff00 ffffffff 00ffffff     ................

00023050 <_ZN9ClearCoreL5IN02nE>:
   23050:	03030008 ffffff00 ffffffff 00ffffff     ................

00023060 <_ZN9ClearCoreL5IN03nE>:
   23060:	04150211 ffffff00 0000ffff 00ffffff     ................

00023070 <_ZN9ClearCoreL5IN04nE>:
   23070:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

00023080 <_ZN9ClearCoreL5IN05nE>:
   23080:	0313023b ffffff00 ffff0306 00ff0300     ;...............

00023090 <_ZN9ClearCoreL5OUT00E>:
   23090:	00000001 ffffff00 0002ffff 00ffffff     ................

000230a0 <_ZN9ClearCoreL5OUT01E>:
   230a0:	01010002 ffffff00 0102ffff 00ffffff     ................

000230b0 <_ZN9ClearCoreL5OUT02E>:
   230b0:	06060013 ffffff00 0001ffff 00ffffff     ................

000230c0 <_ZN9ClearCoreL5OUT03E>:
   230c0:	07070014 ffffff00 0101ffff 00ffffff     ................

000230d0 <_ZN9ClearCoreL6Aout00E>:
   230d0:	02020007 01ffff00 0100ffff 00ffffff     ................

000230e0 <_ZN9ClearCoreL6Mtr0_BE>:
   230e0:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

000230f0 <_ZN9ClearCoreL6Mtr1_BE>:
   230f0:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

00023100 <_ZN9ClearCoreL7Mtr1_AnE>:
   23100:	05150047 ffffff00 01070305 00ff0501     G...............

00023110 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   23110:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   23120:	00000080 00000040 00000020 00000010     ....@... .......
   23130:	00000008 00000004 01000000 02000000     ................
   23140:	04000000 08000000 00800000 00400000     ..............@.
   23150:	00200000 00004000 00008000 00040000     .. ..@..........
   23160:	00080000                                ....

00023164 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   2316c:	0000afe1 0000b055 0001338d              ....U....3..

00023178 <_ZN9ClearCoreL11IN06n_QuadAE>:
   23178:	00100238 ffffff01 ffff0006 00ff0000     8...............

00023188 <_ZN9ClearCoreL11IN07n_QuadBE>:
   23188:	01110239 ffffff01 ffff0106 00ff0100     9...............

00023198 <_ZN9ClearCoreL11IN08n_QuadIE>:
   23198:	0212023a ffffff01 ffff0206 00ff0200     :...............
   231a8:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   231b8:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   231c8:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   231d8:	2e747369 00000063 00023220 00023210     ist.c... 2...2..
   231e8:	000231f0 00023200                       .1...2..

000231f0 <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   231f0:	01010204 ff0bff00 ffffffff 00ffffff     ................

00023200 <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   23200:	00000203 ff0aff00 ffffffff 00ffffff     ................

00023210 <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   23210:	02020205 ff04ff00 ffffffff 00ffffff     ................

00023220 <_ZN9ClearCoreL9_5VOB_MONE>:
   23220:	04040109 ff06ff00 ffffffff 00ffffff     ................

00023230 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   23238:	0000d4d5 0000d705 0000d4d9 0000d4dd     ................
   23248:	0000d7fd 0000d819 0000d4cd 0000488d     .............H..
   23258:	0000d6ed 0000d8b5                       ........

00023260 <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   23268:	0000d959 0000d969 0000d95d 0000d961     Y...i...]...a...
   23278:	0000dbbd 0000d965 0000d955 0000488d     ....e...U....H..
   23288:	0000da91 0000db09                       ........

00023290 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   23298:	0000dc05 0000dcd9 0000dc09 0000dc0d     ................
   232a8:	0000e175 0000dc21 0000d4cd 0000488d     u...!........H..
   232b8:	0000df69 0000e1b5                       i.......

000232c0 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   232c0:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   232d0:	42001400 42001800 43001400 43001800     ...B...B...C...C

000232e0 <_ZTVN9ClearCore9ConnectorE>:
	...
   232e8:	0000e229 0001338d 0001338d 0001338d     )....3...3...3..
   232f8:	0001338d 0001338d 0001338d 00005b39     .3...3...3..9[..
   23308:	0001338d 0001338d                       .3...3..

00023310 <_ZTVN9ClearCore9DigitalInE>:
	...
   23318:	0000e22d 0000e231 0000e23d 0000e241     -...1...=...A...
   23328:	0000e245 00004889 0000d955 0000488d     E....H..U....H..
   23338:	0000e339 0000e26d                       9...m...

00023340 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   23348:	0000e599 0000ea31 0000e59d 0000e5a1     ....1...........
   23358:	0000e665 0000e6a1 0000d4cd 0000488d     e............H..
   23368:	0000e855 0000e969                       U...i...

00023370 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   23370:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   23380:	43001000                                ...C

00023384 <_ZTVN9ClearCore7CcioPinE>:
	...
   2338c:	0000f9c1 0000fa1d 0000f9c5 0000f9c9     ................
   2339c:	0000fa8d 0000fae9 0000fac9 00005b39     ............9[..
   233ac:	0000f9d9 0000f9dd                       ........

000233b4 <_ZTVN9ClearCore10SerialBaseE>:
	...
   233bc:	0000fd81 0000fd91 00010cad 00010009     ................
   233cc:	0000feb5 00007471 0000fda5 0000fddd     ....qt..........
   233dc:	0000fe1d 0000fdf9 0000fe09 0000fe5d     ............]...
   233ec:	0000fd79 00007479 00010121 00007475     y...yt..!...ut..
   233fc:	000102f5 00010211                       ........

00023404 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   23404:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   23414:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00023424 <_ZTVN9ClearCore12SerialDriverE>:
	...
   2342c:	0000fd81 0000fd91 0001137d 000113d1     ........}.......
   2343c:	0001120d 00007471 0000fda5 0000fddd     ....qt..........
   2344c:	0000fe1d 0000fdf9 0000fe09 0000fe5d     ............]...
   2345c:	0000fd79 00007479 00010121 00007475     y...yt..!...ut..
   2346c:	000102f5 00010211 00011161 00011229     ........a...)...
   2347c:	00011171 0001117d 0001118d 00011515     q...}...........
   2348c:	000111a1 0001141d 000111ad fffffebc     ................
   2349c:	00000000 00011169 00011375 00011175     ....i...u...u...
   234ac:	00011185 00011199 000115c9 000111a5     ................
   234bc:	00005b39 000111b1 0001150d              9[..........

000234c8 <_ZTVN9ClearCore9LedDriverE>:
	...
   234d0:	000115d1 000115d5 000115e1 000115e5     ................
   234e0:	000115f9 00011611 000115e9 00005b39     ............9[..
   234f0:	000115ed 000115f1                       ........

000234f8 <_usb_ep_cfgs>:
   234f8:	20001f2c 00000000 00000040 20001f6c     ,.. ....@...l.. 
   23508:	00000000 00000040 20001fac 00000000     ....@...... ....
   23518:	00000040                                @...

0002351c <sinTable_q15>:
   2351c:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   2352c:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   2353c:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   2354c:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   2355c:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   2356c:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   2357c:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   2358c:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   2359c:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   235ac:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   235bc:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   235cc:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   235dc:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   235ec:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   235fc:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   2360c:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   2361c:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   2362c:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   2363c:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   2364c:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   2365c:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   2366c:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   2367c:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   2368c:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   2369c:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   236ac:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   236bc:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   236cc:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   236dc:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   236ec:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   236fc:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   2370c:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   2371c:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   2372c:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   2373c:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   2374c:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   2375c:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   2376c:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   2377c:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   2378c:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   2379c:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   237ac:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   237bc:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   237cc:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   237dc:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   237ec:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   237fc:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   2380c:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   2381c:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   2382c:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   2383c:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   2384c:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   2385c:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   2386c:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   2387c:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   2388c:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   2389c:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   238ac:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   238bc:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   238cc:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   238dc:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   238ec:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   238fc:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   2390c:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   2391c:	00000000 65727570 72697620 6c617574     ....pure virtual
   2392c:	74656d20 20646f68 6c6c6163 000a6465      method called..
   2393c:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

0002394c <_ZTISt9bad_alloc>:
   2394c:	00023a6c 00023958 000239ac              l:..X9...9..

00023958 <_ZTSSt9bad_alloc>:
   23958:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023968 <_ZTVSt9bad_alloc>:
   23968:	00000000 0002394c 000133a9 000133bd     ....L9...3...3..
   23978:	000133a1 3a647473 6461623a 6378655f     .3..std::bad_exc
   23988:	69747065 00006e6f                       eption..

00023990 <_ZTIN10__cxxabiv115__forced_unwindE>:
   23990:	00023ae0 000239b4                       .:...9..

00023998 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23998:	00023ae0 000239d4                       .:...9..

000239a0 <_ZTISt13bad_exception>:
   239a0:	00023a6c 000239f8 000239ac              l:...9...9..

000239ac <_ZTISt9exception>:
   239ac:	00023ae0 00023a0c                       .:...:..

000239b4 <_ZTSN10__cxxabiv115__forced_unwindE>:
   239b4:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   239c4:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

000239d4 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   239d4:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   239e4:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   239f4:	00456e6f                                onE.

000239f8 <_ZTSSt13bad_exception>:
   239f8:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   23a08:	0000006e                                n...

00023a0c <_ZTSSt9exception>:
   23a0c:	65397453 70656378 6e6f6974 00000000     St9exception....

00023a1c <_ZTVSt13bad_exception>:
   23a1c:	00000000 000239a0 00013535 00013541     .....9..55..A5..
   23a2c:	00013539                                95..

00023a30 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   23a30:	00023a6c 00023a3c 00023aa8              l:..<:...:..

00023a3c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   23a3c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   23a4c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   23a5c:	456f666e 00000000                       nfoE....

00023a64 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23a64:	00000000 00023a30 00013709 0001371d     ....0:...7...7..
   23a74:	00013835 00013835 000138f1 00013865     58..58...8..e8..
   23a84:	00013805 00013775 00013739              .8..u7..97..

00023a90 <_ZTISt9type_info>:
   23a90:	00023ae0 00023a98                       .:...:..

00023a98 <_ZTSSt9type_info>:
   23a98:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023aa8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   23aa8:	00023a6c 00023ab4 00023a90              l:...:...:..

00023ab4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23ab4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23ac4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23ad4:	00000045                                E...

00023ad8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23ad8:	00000000 00023aa8 000138a9 000138bd     .....:...8...8..
   23ae8:	00013835 00013835 000138f1 00013865     58..58...8..e8..
   23af8:	000138d9 0001391d 0001389d 6d726574     .8...9...8..term
   23b08:	74616e69 61632065 64656c6c 63657220     inate called rec
   23b18:	69737275 796c6576 0000000a 6d726574     ursively....term
   23b28:	74616e69 61632065 64656c6c 74666120     inate called aft
   23b38:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23b48:	6174736e 2065636e 2720666f 00000000     nstance of '....
   23b58:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   23b68:	64656c6c 74697720 74756f68 206e6120     lled without an 
   23b78:	69746361 65206576 70656378 6e6f6974     active exception
   23b88:	0000000a 68772020 29287461 0020203a     ....  what():  .

00023b98 <standard_subs>:
   23b98:	00000074 0002437c 00000003 0002437c     t...|C......|C..
   23ba8:	00000003 00000000 00000000 00000061     ............a...
   23bb8:	00024690 0000000e 00024690 0000000e     .F.......F......
   23bc8:	000246a0 00000009 00000062 000246ac     .F......b....F..
   23bd8:	00000011 000246ac 00000011 000246c0     .....F.......F..
   23be8:	0000000c 00000073 000246d0 0000000b     ....s....F......
   23bf8:	000246dc 00000046 000246c0 0000000c     .F..F....F......
   23c08:	00000069 00024724 0000000c 00024734     i...$G......4G..
   23c18:	00000031 00024768 0000000d 0000006f     1...hG......o...
   23c28:	00024778 0000000c 00024788 00000031     xG.......G..1...
   23c38:	000247bc 0000000d 00000064 000247cc     .G......d....G..
   23c48:	0000000d 000247dc 00000032 00024810     .....G..2....H..
   23c58:	0000000e                                ....

00023c5c <cplus_demangle_builtin_types>:
   23c5c:	00024a20 0000000b 00024a20 0000000b      J...... J......
   23c6c:	00000000 00024a2c 00000004 00024a34     ....,J......4J..
   23c7c:	00000007 00000007 00024a3c 00000004     ........<J......
   23c8c:	00024a44 00000004 00000000 00024a4c     DJ..........LJ..
   23c9c:	00000006 00024a4c 00000006 00000008     ....LJ..........
   23cac:	00024a54 0000000b 00024a54 0000000b     TJ......TJ......
   23cbc:	00000008 00024a60 00000005 00024a60     ....`J......`J..
   23ccc:	00000005 00000008 00024a68 0000000a     ........hJ......
   23cdc:	00024a68 0000000a 00000008 00024a74     hJ..........tJ..
   23cec:	0000000d 00024a74 0000000d 00000000     ....tJ..........
   23cfc:	00024a84 00000003 00024a84 00000003     .J.......J......
   23d0c:	00000001 00024a88 0000000c 00024a98     .....J.......J..
   23d1c:	00000008 00000002 00000000 00000000     ................
	...
   23d38:	00024aa4 00000004 00024aa4 00000004     .J.......J......
   23d48:	00000003 00024aac 0000000d 00024aac     .....J.......J..
   23d58:	0000000d 00000004 00024abc 00000008     .........J......
   23d68:	00024abc 00000008 00000000 00024ac8     .J...........J..
   23d78:	00000011 00024ac8 00000011 00000000     .....J..........
	...
   23dc4:	00024adc 00000005 00024adc 00000005     .J.......J......
   23dd4:	00000000 00024ae4 0000000e 00024ae4     .....J.......J..
   23de4:	0000000e 00000000 00000000 00000000     ................
	...
   23e00:	00024af4 00000004 00024af4 00000004     .J.......J......
   23e10:	00000009 00024afc 00000007 00024a3c     .....J......<J..
   23e20:	00000004 00000000 00024b04 00000009     .........K......
   23e30:	00024aa4 00000004 00000005 00024b10     .J...........K..
   23e40:	00000012 00024b10 00000012 00000006     .....K..........
   23e50:	00022ae4 00000003 00022ae4 00000003     .*.......*......
   23e60:	00000000 00024b24 00000009 00024b24     ....$K......$K..
   23e70:	00000009 00000000 00024b30 00000009     ........0K......
   23e80:	00024b30 00000009 00000000 00024b3c     0K..........<K..
   23e90:	0000000a 00024b3c 0000000a 00000000     ....<K..........
   23ea0:	00024b48 00000004 00024b48 00000004     HK......HK......
   23eb0:	00000008 00024b50 00000008 00024b50     ....PK......PK..
   23ec0:	00000008 00000000 00024b5c 00000008     ........\K......
   23ed0:	00024b5c 00000008 00000000 00024b68     \K..........hK..
   23ee0:	00000011 00024b68 00000011 00000000     ....hK..........

00023ef0 <cplus_demangle_operators>:
   23ef0:	00024820 00024824 00000002 00000002      H..$H..........
   23f00:	00024828 0002482c 00000001 00000002     (H..,H..........
   23f10:	00024830 00024654 00000002 00000002     0H..TF..........
   23f20:	0002454c 00024834 00000001 00000001     LE..4H..........
   23f30:	00024838 00024834 00000001 00000002     8H..4H..........
   23f40:	0002483c 00024840 00000008 00000001     <H..@H..........
   23f50:	0002484c 00024840 00000008 00000001     LH..@H..........
   23f60:	00024850 00024854 0000000a 00000002     PH..TH..........
   23f70:	0002435c 00024860 00000002 00000002     \C..`H..........
   23f80:	00024864 00024868 00000001 00000002     dH..hH..........
   23f90:	0002486c 00024870 00000001 00000001     lH..pH..........
   23fa0:	00024874 00024878 00000002 00000002     tH..xH..........
   23fb0:	0002487c 00024880 00000009 00000001     |H...H..........
   23fc0:	0002488c 00024890 0000000c 00000002     .H...H..........
   23fd0:	000248a0 000248a4 00000001 00000001     .H...H..........
   23fe0:	000248a8 000248ac 00000007 00000001     .H...H..........
   23ff0:	000248b4 000248b8 00000002 00000002     .H...H..........
   24000:	00024360 000249e8 00000001 00000002     `C...I..........
   24010:	000248bc 000248c0 00000001 00000002     .H...H..........
   24020:	000248c4 000248c8 00000002 00000002     .H...H..........
   24030:	000248cc 000248d0 00000001 00000002     .H...H..........
   24040:	000248d4 000248d8 00000002 00000002     .H...H..........
   24050:	000248dc 00022ae4 00000003 00000003     .H...*..........
   24060:	000248e0 00022ae4 00000003 00000003     .H...*..........
   24070:	000248e4 00022ae4 00000003 00000002     .H...*..........
   24080:	000248e8 00022ae4 00000003 00000002     .H...*..........
   24090:	000248ec 000248f0 00000002 00000002     .H...H..........
   240a0:	00024550 000243a4 00000002 00000001     PE...C..........
   240b0:	000248f4 00024764 00000001 00000002     .H..dG..........
   240c0:	00024558 000243c4 00000002 00000002     XE...C..........
   240d0:	000248f8 000248fc 00000003 00000002     .H...H..........
   240e0:	00024a50 00024900 00000002 00000002     PJ...I..........
   240f0:	00024398 00024904 0000000b 00000001     .C...I..........
   24100:	00024910 00024914 00000002 00000002     .I...I..........
   24110:	00024918 0002491c 00000001 00000002     .I...I..........
   24120:	00024920 00024924 00000002 00000002      I..$I..........
   24130:	00024928 0002492c 00000002 00000002     (I..,I..........
   24140:	00024930 00024934 00000001 00000002     0I..4I..........
   24150:	00024938 000248a4 00000001 00000002     8I...H..........
   24160:	0002493c 00024940 00000002 00000001     <I..@I..........
   24170:	00024944 00024948 00000005 00000003     DI..HI..........
   24180:	00024950 00024954 00000002 00000002     PI..TI..........
   24190:	00024b20 00024934 00000001 00000001      K..4I..........
   241a0:	00024958 0002495c 00000001 00000001     XI..\I..........
   241b0:	00024960 00024964 00000003 00000003     `I..dI..........
   241c0:	00024968 0002496c 00000002 00000002     hI..lI..........
   241d0:	00024970 00024974 00000002 00000002     pI..tI..........
   241e0:	0002469c 00024978 00000001 00000002     .F..xI..........
   241f0:	0002497c 00024980 00000002 00000002     |I...I..........
   24200:	00024984 00024988 00000001 00000002     .I...I..........
   24210:	0002498c 00024990 00000003 00000002     .I...I..........
   24220:	00024994 00024998 00000002 00000001     .I...I..........
   24230:	0002499c 00024988 00000001 00000001     .I...I..........
   24240:	00024364 000249a0 00000002 00000002     dC...I..........
   24250:	00024368 000249a4 00000001 00000003     hC...I..........
   24260:	000249a8 000249ac 00000002 00000002     .I...I..........
   24270:	000249b0 000249b4 00000003 00000002     .I...I..........
   24280:	000249b8 000249bc 00000010 00000002     .I...I..........
   24290:	000249d0 000249d4 00000001 00000002     .I...I..........
   242a0:	000249d8 000249dc 00000002 00000002     .I...I..........
   242b0:	00024358 000249e0 00000009 00000001     XC...I..........
   242c0:	0002461c 000249e0 00000009 00000001     .F...I..........
   242d0:	000249ec 000249f0 0000000b 00000002     .I...I..........
   242e0:	0002485c 000249fc 00000007 00000001     \H...I..........
   242f0:	00024a04 000249fc 00000007 00000001     .J...I..........
   24300:	00024a08 00024a0c 00000005 00000000     .J...J..........
   24310:	00024a14 00024a18 00000006 00000001     .J...J..........
	...
   24330:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   24340:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   24350:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   24360:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   24370:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   24380:	6f747561 00000000 6c636564 65707974     auto....decltype
   24390:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   243a0:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   243b0:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   243c0:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   243d0:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   243e0:	20726f66 00000000 736e6f63 63757274     for ....construc
   243f0:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   24400:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   24410:	6f666e69 726f6620 00000020 65707974     info for ...type
   24420:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   24430:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   24440:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   24450:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   24460:	6e616972 65722074 6e727574 75687420     riant return thu
   24470:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   24480:	66207373 0020726f 72617567 61762064     ss for .guard va
   24490:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   244a0:	74696e69 6e756620 6f697463 6f66206e     init function fo
   244b0:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   244c0:	636e7566 6e6f6974 726f6620 00000020     function for ...
   244d0:	65666572 636e6572 65742065 726f706d     reference tempor
   244e0:	20797261 00000023 64646968 61206e65     ary #...hidden a
   244f0:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   24500:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   24510:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   24520:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   24530:	0000202c 7265706f 726f7461 00000000     , ..operator....
   24540:	7265706f 726f7461 00000020 00006461     operator ...ad..
   24550:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   24560:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   24570:	006c6c75 736c6166 00000065 65757274     ull.false...true
   24580:	00000000 6176616a 73657220 6372756f     ....java resourc
   24590:	00002065 6c636564 65707974 00002820     e ..decltype (..
   245a0:	73696874 00000000 7261707b 0000236d     this....{parm#..
   245b0:	626f6c67 63206c61 74736e6f 74637572     global construct
   245c0:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   245d0:	626f6c67 64206c61 72747365 6f746375     global destructo
   245e0:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   245f0:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   24600:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   24610:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   24620:	73657220 63697274 00000074 6c6f7620      restrict... vol
   24630:	6c697461 00000065 6e6f6320 00007473     atile... const..
   24640:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   24650:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   24660:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   24670:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   24680:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   24690:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   246a0:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   246b0:	7361623a 735f6369 6e697274 00000067     :basic_string...
   246c0:	69736162 74735f63 676e6972 00000000     basic_string....
   246d0:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   246e0:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   246f0:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   24700:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   24710:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   24720:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   24730:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   24740:	65727473 633c6d61 2c726168 64747320     stream<char, std
   24750:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   24760:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   24770:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   24780:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   24790:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   247a0:	64747320 68633a3a 745f7261 74696172      std::char_trait
   247b0:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   247c0:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   247d0:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   247e0:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   247f0:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   24800:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   24810:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   24820:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   24830:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   24840:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   24850:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   24860:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   24870:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   24880:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   24890:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   248a0:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   248b0:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   248c0:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   248d0:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   248e0:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   248f0:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   24900:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   24910:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   24920:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   24930:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   24940:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   24950:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24960:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24970:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24980:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24990:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   249a0:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   249b0:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   249c0:	70726574 5f746572 74736163 00000000     terpret_cast....
   249d0:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   249e0:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   249f0:	74617473 635f6369 00747361 657a6973     static_cast.size
   24a00:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   24a10:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   24a20:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   24a30:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   24a40:	00000000 65747962 00000000 62756f64     ....byte....doub
   24a50:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   24a60:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   24a70:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   24a80:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   24a90:	746e6920 00000000 69736e75 64656e67      int....unsigned
   24aa0:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   24ab0:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   24ac0:	38323174 00000000 69736e75 64656e67     t128....unsigned
   24ad0:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   24ae0:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   24af0:	00007472 64696f76 00000000 61686377     rt..void....wcha
   24b00:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   24b10:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   24b20:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   24b30:	69636564 366c616d 00000034 69636564     decimal64...deci
   24b40:	316c616d 00003832 666c6168 00000000     mal128..half....
   24b50:	72616863 745f3631 00000000 72616863     char16_t....char
   24b60:	745f3233 00000000 6c636564 65707974     32_t....decltype
   24b70:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   24b80:	00000000 74727173 00000066 00000000     ....sqrtf.......

00024b90 <TWO52>:
   24b90:	00000000 43300000 00000000 c3300000     ......0C......0.

00024ba0 <_global_impure_ptr>:
   24ba0:	20000100 00000043 49534f50 00000058     ... C...POSIX...
   24bb0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   24bc0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   24bd0:	00000000 33323130 37363534 62613938     ....0123456789ab
   24be0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   24bf0:	00000030                                0...

00024bf4 <blanks.8346>:
   24bf4:	20202020 20202020 20202020 20202020                     

00024c04 <zeroes.8347>:
   24c04:	30303030 30303030 30303030 30303030     0000000000000000
   24c14:	33323130 37363534 62613938 66656463     0123456789abcdef
   24c24:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24c34:	7a797877 00000000                       wxyz....

00024c3c <_ctype_>:
   24c3c:	20202000 20202020 28282020 20282828     .         ((((( 
   24c4c:	20202020 20202020 20202020 20202020                     
   24c5c:	10108820 10101010 10101010 10101010      ...............
   24c6c:	04040410 04040404 10040404 10101010     ................
   24c7c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   24c8c:	01010101 01010101 01010101 10101010     ................
   24c9c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   24cac:	02020202 02020202 02020202 10101010     ................
   24cbc:	00000020 00000000 00000000 00000000      ...............
	...
   24d40:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00024d50 <__mprec_bigtens>:
   24d50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24d60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   24d70:	7f73bf3c 75154fdd                       <.s..O.u

00024d78 <__mprec_tens>:
   24d78:	00000000 3ff00000 00000000 40240000     .......?......$@
   24d88:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   24d98:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   24da8:	00000000 412e8480 00000000 416312d0     .......A......cA
   24db8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   24dc8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   24dd8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   24de8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   24df8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   24e08:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   24e18:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   24e28:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   24e38:	79d99db4 44ea7843                       ...yCx.D

00024e40 <p05.7178>:
   24e40:	00000005 00000019 0000007d              ........}...

00024e4c <__EH_FRAME_BEGIN__>:
   24e4c:	00000000                                ....
